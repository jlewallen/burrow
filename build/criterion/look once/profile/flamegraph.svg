<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1262"><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.3962%" y="693" width="0.0792%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="1"/><text x="0.6462%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4754%" y="677" width="0.0792%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="1"/><text x="0.7254%" y="687.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.5547%" y="661" width="0.1585%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="2"/><text x="0.8047%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (8 samples, 0.63%)</title><rect x="0.1585%" y="725" width="0.6339%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="8"/><text x="0.4085%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.63%)</title><rect x="0.1585%" y="709" width="0.6339%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="8"/><text x="0.4085%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="0.4754%" y="693" width="0.3170%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="4"/><text x="0.7254%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3 samples, 0.24%)</title><rect x="0.5547%" y="677" width="0.2377%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="3"/><text x="0.8047%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="0.7132%" y="661" width="0.0792%" height="15" fill="rgb(228,23,34)" fg:x="9" fg:w="1"/><text x="0.9632%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7132%" y="645" width="0.0792%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="1"/><text x="0.9632%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7924%" y="693" width="0.0792%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="1"/><text x="1.0424%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.2678%" y="613" width="0.0792%" height="15" fill="rgb(250,228,42)" fg:x="16" fg:w="1"/><text x="1.5178%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.4263%" y="597" width="0.0792%" height="15" fill="rgb(240,193,28)" fg:x="18" fg:w="1"/><text x="1.6763%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.5055%" y="597" width="0.0792%" height="15" fill="rgb(216,20,37)" fg:x="19" fg:w="1"/><text x="1.7555%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5055%" y="581" width="0.0792%" height="15" fill="rgb(206,188,39)" fg:x="19" fg:w="1"/><text x="1.7555%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.63%)</title><rect x="1.0301%" y="661" width="0.6339%" height="15" fill="rgb(217,207,13)" fg:x="13" fg:w="8"/><text x="1.2801%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (8 samples, 0.63%)</title><rect x="1.0301%" y="645" width="0.6339%" height="15" fill="rgb(231,73,38)" fg:x="13" fg:w="8"/><text x="1.2801%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.55%)</title><rect x="1.1094%" y="629" width="0.5547%" height="15" fill="rgb(225,20,46)" fg:x="14" fg:w="7"/><text x="1.3594%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="1.3471%" y="613" width="0.3170%" height="15" fill="rgb(210,31,41)" fg:x="17" fg:w="4"/><text x="1.5971%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.5848%" y="597" width="0.0792%" height="15" fill="rgb(221,200,47)" fg:x="20" fg:w="1"/><text x="1.8348%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5848%" y="581" width="0.0792%" height="15" fill="rgb(226,26,5)" fg:x="20" fg:w="1"/><text x="1.8348%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8225%" y="629" width="0.0792%" height="15" fill="rgb(249,33,26)" fg:x="23" fg:w="1"/><text x="2.0725%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.9017%" y="629" width="0.0792%" height="15" fill="rgb(235,183,28)" fg:x="24" fg:w="1"/><text x="2.1517%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.9017%" y="613" width="0.0792%" height="15" fill="rgb(221,5,38)" fg:x="24" fg:w="1"/><text x="2.1517%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.1395%" y="581" width="0.0792%" height="15" fill="rgb(247,18,42)" fg:x="27" fg:w="1"/><text x="2.3895%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.2187%" y="565" width="0.0792%" height="15" fill="rgb(241,131,45)" fg:x="28" fg:w="1"/><text x="2.4687%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 1.51%)</title><rect x="0.8716%" y="677" width="1.5055%" height="15" fill="rgb(249,31,29)" fg:x="11" fg:w="19"/><text x="1.1216%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.71%)</title><rect x="1.6640%" y="661" width="0.7132%" height="15" fill="rgb(225,111,53)" fg:x="21" fg:w="9"/><text x="1.9140%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.63%)</title><rect x="1.7433%" y="645" width="0.6339%" height="15" fill="rgb(238,160,17)" fg:x="22" fg:w="8"/><text x="1.9933%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="1.9810%" y="629" width="0.3962%" height="15" fill="rgb(214,148,48)" fg:x="25" fg:w="5"/><text x="2.2310%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="1.9810%" y="613" width="0.3962%" height="15" fill="rgb(232,36,49)" fg:x="25" fg:w="5"/><text x="2.2310%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="2.0602%" y="597" width="0.3170%" height="15" fill="rgb(209,103,24)" fg:x="26" fg:w="4"/><text x="2.3102%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="2.2187%" y="581" width="0.1585%" height="15" fill="rgb(229,88,8)" fg:x="28" fg:w="2"/><text x="2.4687%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.2979%" y="565" width="0.0792%" height="15" fill="rgb(213,181,19)" fg:x="29" fg:w="1"/><text x="2.5479%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 1.66%)</title><rect x="0.7924%" y="709" width="1.6640%" height="15" fill="rgb(254,191,54)" fg:x="10" fg:w="21"/><text x="1.0424%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (20 samples, 1.58%)</title><rect x="0.8716%" y="693" width="1.5848%" height="15" fill="rgb(241,83,37)" fg:x="11" fg:w="20"/><text x="1.1216%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.3772%" y="677" width="0.0792%" height="15" fill="rgb(233,36,39)" fg:x="30" fg:w="1"/><text x="2.6272%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (22 samples, 1.74%)</title><rect x="0.7924%" y="725" width="1.7433%" height="15" fill="rgb(226,3,54)" fg:x="10" fg:w="22"/><text x="1.0424%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.4564%" y="709" width="0.0792%" height="15" fill="rgb(245,192,40)" fg:x="31" fg:w="1"/><text x="2.7064%" y="719.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 2.46%)</title><rect x="0.1585%" y="741" width="2.4564%" height="15" fill="rgb(238,167,29)" fg:x="2" fg:w="31"/><text x="0.4085%" y="751.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;engine::storage::InMemoryStorage&gt; (1 samples, 0.08%)</title><rect x="2.5357%" y="725" width="0.0792%" height="15" fill="rgb(232,182,51)" fg:x="32" fg:w="1"/><text x="2.7857%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.5357%" y="709" width="0.0792%" height="15" fill="rgb(231,60,39)" fg:x="32" fg:w="1"/><text x="2.7857%" y="719.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="2.6941%" y="693" width="0.0792%" height="15" fill="rgb(208,69,12)" fg:x="34" fg:w="1"/><text x="2.9441%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.6941%" y="677" width="0.0792%" height="15" fill="rgb(235,93,37)" fg:x="34" fg:w="1"/><text x="2.9441%" y="687.50"></text></g><g><title>&lt;plugins_core::building::actions::BidirectionalDigAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="2.8526%" y="613" width="0.1585%" height="15" fill="rgb(213,116,39)" fg:x="36" fg:w="2"/><text x="3.1026%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.9319%" y="597" width="0.0792%" height="15" fill="rgb(222,207,29)" fg:x="37" fg:w="1"/><text x="3.1819%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.9319%" y="581" width="0.0792%" height="15" fill="rgb(206,96,30)" fg:x="37" fg:w="1"/><text x="3.1819%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.0111%" y="613" width="0.0792%" height="15" fill="rgb(218,138,4)" fg:x="38" fg:w="1"/><text x="3.2611%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.0111%" y="597" width="0.0792%" height="15" fill="rgb(250,191,14)" fg:x="38" fg:w="1"/><text x="3.2611%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.0111%" y="581" width="0.0792%" height="15" fill="rgb(239,60,40)" fg:x="38" fg:w="1"/><text x="3.2611%" y="591.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (4 samples, 0.32%)</title><rect x="2.8526%" y="645" width="0.3170%" height="15" fill="rgb(206,27,48)" fg:x="36" fg:w="4"/><text x="3.1026%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (4 samples, 0.32%)</title><rect x="2.8526%" y="629" width="0.3170%" height="15" fill="rgb(225,35,8)" fg:x="36" fg:w="4"/><text x="3.1026%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="3.0903%" y="613" width="0.0792%" height="15" fill="rgb(250,213,24)" fg:x="39" fg:w="1"/><text x="3.3403%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.0903%" y="597" width="0.0792%" height="15" fill="rgb(247,123,22)" fg:x="39" fg:w="1"/><text x="3.3403%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::actions::TakeOutAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.1696%" y="613" width="0.0792%" height="15" fill="rgb(231,138,38)" fg:x="40" fg:w="1"/><text x="3.4196%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.1696%" y="597" width="0.0792%" height="15" fill="rgb(231,145,46)" fg:x="40" fg:w="1"/><text x="3.4196%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.1696%" y="581" width="0.0792%" height="15" fill="rgb(251,118,11)" fg:x="40" fg:w="1"/><text x="3.4196%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="3.1696%" y="645" width="0.1585%" height="15" fill="rgb(217,147,25)" fg:x="40" fg:w="2"/><text x="3.4196%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="3.1696%" y="629" width="0.1585%" height="15" fill="rgb(247,81,37)" fg:x="40" fg:w="2"/><text x="3.4196%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.2488%" y="613" width="0.0792%" height="15" fill="rgb(209,12,38)" fg:x="41" fg:w="1"/><text x="3.4988%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.2488%" y="597" width="0.0792%" height="15" fill="rgb(227,1,9)" fg:x="41" fg:w="1"/><text x="3.4988%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.2488%" y="581" width="0.0792%" height="15" fill="rgb(248,47,43)" fg:x="41" fg:w="1"/><text x="3.4988%" y="591.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.3281%" y="645" width="0.0792%" height="15" fill="rgb(221,10,30)" fg:x="42" fg:w="1"/><text x="3.5781%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.3281%" y="629" width="0.0792%" height="15" fill="rgb(210,229,1)" fg:x="42" fg:w="1"/><text x="3.5781%" y="639.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.4073%" y="613" width="0.0792%" height="15" fill="rgb(222,148,37)" fg:x="43" fg:w="1"/><text x="3.6573%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.4073%" y="597" width="0.0792%" height="15" fill="rgb(234,67,33)" fg:x="43" fg:w="1"/><text x="3.6573%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.4073%" y="581" width="0.0792%" height="15" fill="rgb(247,98,35)" fg:x="43" fg:w="1"/><text x="3.6573%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.4073%" y="565" width="0.0792%" height="15" fill="rgb(247,138,52)" fg:x="43" fg:w="1"/><text x="3.6573%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.4073%" y="549" width="0.0792%" height="15" fill="rgb(213,79,30)" fg:x="43" fg:w="1"/><text x="3.6573%" y="559.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="3.4073%" y="645" width="0.1585%" height="15" fill="rgb(246,177,23)" fg:x="43" fg:w="2"/><text x="3.6573%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="3.4073%" y="629" width="0.1585%" height="15" fill="rgb(230,62,27)" fg:x="43" fg:w="2"/><text x="3.6573%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.4865%" y="613" width="0.0792%" height="15" fill="rgb(216,154,8)" fg:x="44" fg:w="1"/><text x="3.7365%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.4865%" y="597" width="0.0792%" height="15" fill="rgb(244,35,45)" fg:x="44" fg:w="1"/><text x="3.7365%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.4865%" y="581" width="0.0792%" height="15" fill="rgb(251,115,12)" fg:x="44" fg:w="1"/><text x="3.7365%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.4865%" y="565" width="0.0792%" height="15" fill="rgb(240,54,50)" fg:x="44" fg:w="1"/><text x="3.7365%" y="575.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.5658%" y="645" width="0.0792%" height="15" fill="rgb(233,84,52)" fg:x="45" fg:w="1"/><text x="3.8158%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.5658%" y="629" width="0.0792%" height="15" fill="rgb(207,117,47)" fg:x="45" fg:w="1"/><text x="3.8158%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="3.5658%" y="613" width="0.0792%" height="15" fill="rgb(249,43,39)" fg:x="45" fg:w="1"/><text x="3.8158%" y="623.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.6450%" y="645" width="0.0792%" height="15" fill="rgb(209,38,44)" fg:x="46" fg:w="1"/><text x="3.8950%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.6450%" y="629" width="0.0792%" height="15" fill="rgb(236,212,23)" fg:x="46" fg:w="1"/><text x="3.8950%" y="639.50"></text></g><g><title>&lt;plugins_core::moving::actions::RemoveRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.6450%" y="613" width="0.0792%" height="15" fill="rgb(242,79,21)" fg:x="46" fg:w="1"/><text x="3.8950%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (13 samples, 1.03%)</title><rect x="2.7734%" y="661" width="1.0301%" height="15" fill="rgb(211,96,35)" fg:x="35" fg:w="13"/><text x="3.0234%" y="671.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.7242%" y="645" width="0.0792%" height="15" fill="rgb(253,215,40)" fg:x="47" fg:w="1"/><text x="3.9742%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.7242%" y="629" width="0.0792%" height="15" fill="rgb(211,81,21)" fg:x="47" fg:w="1"/><text x="3.9742%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="3.8035%" y="661" width="0.2377%" height="15" fill="rgb(208,190,38)" fg:x="48" fg:w="3"/><text x="4.0535%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="3.8035%" y="645" width="0.2377%" height="15" fill="rgb(235,213,38)" fg:x="48" fg:w="3"/><text x="4.0535%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="3.8035%" y="629" width="0.2377%" height="15" fill="rgb(237,122,38)" fg:x="48" fg:w="3"/><text x="4.0535%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="3.8035%" y="613" width="0.2377%" height="15" fill="rgb(244,218,35)" fg:x="48" fg:w="3"/><text x="4.0535%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="3.8035%" y="597" width="0.2377%" height="15" fill="rgb(240,68,47)" fg:x="48" fg:w="3"/><text x="4.0535%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="3.8035%" y="581" width="0.2377%" height="15" fill="rgb(210,16,53)" fg:x="48" fg:w="3"/><text x="4.0535%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="3.8035%" y="565" width="0.2377%" height="15" fill="rgb(235,124,12)" fg:x="48" fg:w="3"/><text x="4.0535%" y="575.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="3.8035%" y="549" width="0.2377%" height="15" fill="rgb(224,169,11)" fg:x="48" fg:w="3"/><text x="4.0535%" y="559.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.16%)</title><rect x="4.0412%" y="645" width="0.1585%" height="15" fill="rgb(250,166,2)" fg:x="51" fg:w="2"/><text x="4.2912%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="4.0412%" y="629" width="0.1585%" height="15" fill="rgb(242,216,29)" fg:x="51" fg:w="2"/><text x="4.2912%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1204%" y="613" width="0.0792%" height="15" fill="rgb(230,116,27)" fg:x="52" fg:w="1"/><text x="4.3704%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.1204%" y="597" width="0.0792%" height="15" fill="rgb(228,99,48)" fg:x="52" fg:w="1"/><text x="4.3704%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU8::load (1 samples, 0.08%)</title><rect x="4.2789%" y="501" width="0.0792%" height="15" fill="rgb(253,11,6)" fg:x="54" fg:w="1"/><text x="4.5289%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.08%)</title><rect x="4.2789%" y="485" width="0.0792%" height="15" fill="rgb(247,143,39)" fg:x="54" fg:w="1"/><text x="4.5289%" y="495.50"></text></g><g><title>glob::is_dir (7 samples, 0.55%)</title><rect x="4.2789%" y="597" width="0.5547%" height="15" fill="rgb(236,97,10)" fg:x="54" fg:w="7"/><text x="4.5289%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (7 samples, 0.55%)</title><rect x="4.2789%" y="581" width="0.5547%" height="15" fill="rgb(233,208,19)" fg:x="54" fg:w="7"/><text x="4.5289%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (7 samples, 0.55%)</title><rect x="4.2789%" y="565" width="0.5547%" height="15" fill="rgb(216,164,2)" fg:x="54" fg:w="7"/><text x="4.5289%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (7 samples, 0.55%)</title><rect x="4.2789%" y="549" width="0.5547%" height="15" fill="rgb(220,129,5)" fg:x="54" fg:w="7"/><text x="4.5289%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (7 samples, 0.55%)</title><rect x="4.2789%" y="533" width="0.5547%" height="15" fill="rgb(242,17,10)" fg:x="54" fg:w="7"/><text x="4.5289%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (7 samples, 0.55%)</title><rect x="4.2789%" y="517" width="0.5547%" height="15" fill="rgb(242,107,0)" fg:x="54" fg:w="7"/><text x="4.5289%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (6 samples, 0.48%)</title><rect x="4.3582%" y="501" width="0.4754%" height="15" fill="rgb(251,28,31)" fg:x="55" fg:w="6"/><text x="4.6082%" y="511.50"></text></g><g><title>statx (6 samples, 0.48%)</title><rect x="4.3582%" y="485" width="0.4754%" height="15" fill="rgb(233,223,10)" fg:x="55" fg:w="6"/><text x="4.6082%" y="495.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.63%)</title><rect x="4.2789%" y="629" width="0.6339%" height="15" fill="rgb(215,21,27)" fg:x="54" fg:w="8"/><text x="4.5289%" y="639.50"></text></g><g><title>glob::fill_todo (8 samples, 0.63%)</title><rect x="4.2789%" y="613" width="0.6339%" height="15" fill="rgb(232,23,21)" fg:x="54" fg:w="8"/><text x="4.5289%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="4.8336%" y="597" width="0.0792%" height="15" fill="rgb(244,5,23)" fg:x="61" fg:w="1"/><text x="5.0836%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="4.8336%" y="581" width="0.0792%" height="15" fill="rgb(226,81,46)" fg:x="61" fg:w="1"/><text x="5.0836%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="4.8336%" y="565" width="0.0792%" height="15" fill="rgb(247,70,30)" fg:x="61" fg:w="1"/><text x="5.0836%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="4.8336%" y="549" width="0.0792%" height="15" fill="rgb(212,68,19)" fg:x="61" fg:w="1"/><text x="5.0836%" y="559.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="4.9128%" y="597" width="0.1585%" height="15" fill="rgb(240,187,13)" fg:x="62" fg:w="2"/><text x="5.1628%" y="607.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.08%)</title><rect x="4.9921%" y="581" width="0.0792%" height="15" fill="rgb(223,113,26)" fg:x="63" fg:w="1"/><text x="5.2421%" y="591.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (14 samples, 1.11%)</title><rect x="4.0412%" y="661" width="1.1094%" height="15" fill="rgb(206,192,2)" fg:x="51" fg:w="14"/><text x="4.2912%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (12 samples, 0.95%)</title><rect x="4.1997%" y="645" width="0.9509%" height="15" fill="rgb(241,108,4)" fg:x="53" fg:w="12"/><text x="4.4497%" y="655.50"></text></g><g><title>glob::glob (3 samples, 0.24%)</title><rect x="4.9128%" y="629" width="0.2377%" height="15" fill="rgb(247,173,49)" fg:x="62" fg:w="3"/><text x="5.1628%" y="639.50"></text></g><g><title>glob::glob_with (3 samples, 0.24%)</title><rect x="4.9128%" y="613" width="0.2377%" height="15" fill="rgb(224,114,35)" fg:x="62" fg:w="3"/><text x="5.1628%" y="623.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="5.0713%" y="597" width="0.0792%" height="15" fill="rgb(245,159,27)" fg:x="64" fg:w="1"/><text x="5.3213%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.0713%" y="581" width="0.0792%" height="15" fill="rgb(245,172,44)" fg:x="64" fg:w="1"/><text x="5.3213%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (2 samples, 0.16%)</title><rect x="5.1506%" y="661" width="0.1585%" height="15" fill="rgb(236,23,11)" fg:x="65" fg:w="2"/><text x="5.4006%" y="671.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="5.1506%" y="645" width="0.1585%" height="15" fill="rgb(205,117,38)" fg:x="65" fg:w="2"/><text x="5.4006%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (33 samples, 2.61%)</title><rect x="2.7734%" y="677" width="2.6149%" height="15" fill="rgb(237,72,25)" fg:x="35" fg:w="33"/><text x="3.0234%" y="687.50">ke..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="5.3090%" y="661" width="0.0792%" height="15" fill="rgb(244,70,9)" fg:x="67" fg:w="1"/><text x="5.5590%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="5.3090%" y="645" width="0.0792%" height="15" fill="rgb(217,125,39)" fg:x="67" fg:w="1"/><text x="5.5590%" y="655.50"></text></g><g><title>engine::session::Session::initialize (34 samples, 2.69%)</title><rect x="2.7734%" y="693" width="2.6941%" height="15" fill="rgb(235,36,10)" fg:x="35" fg:w="34"/><text x="3.0234%" y="703.50">en..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="5.3883%" y="677" width="0.0792%" height="15" fill="rgb(251,123,47)" fg:x="68" fg:w="1"/><text x="5.6383%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.3883%" y="661" width="0.0792%" height="15" fill="rgb(221,13,13)" fg:x="68" fg:w="1"/><text x="5.6383%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.3883%" y="645" width="0.0792%" height="15" fill="rgb(238,131,9)" fg:x="68" fg:w="1"/><text x="5.6383%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.3883%" y="629" width="0.0792%" height="15" fill="rgb(211,50,8)" fg:x="68" fg:w="1"/><text x="5.6383%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.3883%" y="613" width="0.0792%" height="15" fill="rgb(245,182,24)" fg:x="68" fg:w="1"/><text x="5.6383%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (37 samples, 2.93%)</title><rect x="2.6149%" y="741" width="2.9319%" height="15" fill="rgb(242,14,37)" fg:x="33" fg:w="37"/><text x="2.8649%" y="751.50">&lt;e..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (37 samples, 2.93%)</title><rect x="2.6149%" y="725" width="2.9319%" height="15" fill="rgb(246,228,12)" fg:x="33" fg:w="37"/><text x="2.8649%" y="735.50">en..</text></g><g><title>engine::session::Session::new (37 samples, 2.93%)</title><rect x="2.6149%" y="709" width="2.9319%" height="15" fill="rgb(213,55,15)" fg:x="33" fg:w="37"/><text x="2.8649%" y="719.50">en..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="5.4675%" y="693" width="0.0792%" height="15" fill="rgb(209,9,3)" fg:x="69" fg:w="1"/><text x="5.7175%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::BuildSurroundings&gt; (1 samples, 0.08%)</title><rect x="5.6260%" y="725" width="0.0792%" height="15" fill="rgb(230,59,30)" fg:x="71" fg:w="1"/><text x="5.8760%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.6260%" y="709" width="0.0792%" height="15" fill="rgb(209,121,21)" fg:x="71" fg:w="1"/><text x="5.8760%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="5.7052%" y="709" width="0.0792%" height="15" fill="rgb(220,109,13)" fg:x="72" fg:w="1"/><text x="5.9552%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.7052%" y="693" width="0.0792%" height="15" fill="rgb(232,18,1)" fg:x="72" fg:w="1"/><text x="5.9552%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="5.7052%" y="677" width="0.0792%" height="15" fill="rgb(215,41,42)" fg:x="72" fg:w="1"/><text x="5.9552%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.8637%" y="645" width="0.0792%" height="15" fill="rgb(224,123,36)" fg:x="74" fg:w="1"/><text x="6.1137%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.8637%" y="629" width="0.0792%" height="15" fill="rgb(240,125,3)" fg:x="74" fg:w="1"/><text x="6.1137%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.8637%" y="613" width="0.0792%" height="15" fill="rgb(205,98,50)" fg:x="74" fg:w="1"/><text x="6.1137%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="5.9429%" y="613" width="0.1585%" height="15" fill="rgb(205,185,37)" fg:x="75" fg:w="2"/><text x="6.1929%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.9429%" y="597" width="0.1585%" height="15" fill="rgb(238,207,15)" fg:x="75" fg:w="2"/><text x="6.1929%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.0222%" y="581" width="0.0792%" height="15" fill="rgb(213,199,42)" fg:x="76" fg:w="1"/><text x="6.2722%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.0222%" y="565" width="0.0792%" height="15" fill="rgb(235,201,11)" fg:x="76" fg:w="1"/><text x="6.2722%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="6.1014%" y="581" width="0.1585%" height="15" fill="rgb(207,46,11)" fg:x="77" fg:w="2"/><text x="6.3514%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="6.1014%" y="565" width="0.1585%" height="15" fill="rgb(241,35,35)" fg:x="77" fg:w="2"/><text x="6.3514%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.1014%" y="549" width="0.1585%" height="15" fill="rgb(243,32,47)" fg:x="77" fg:w="2"/><text x="6.3514%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.1014%" y="533" width="0.1585%" height="15" fill="rgb(247,202,23)" fg:x="77" fg:w="2"/><text x="6.3514%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.2599%" y="581" width="0.0792%" height="15" fill="rgb(219,102,11)" fg:x="79" fg:w="1"/><text x="6.5099%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.2599%" y="565" width="0.0792%" height="15" fill="rgb(243,110,44)" fg:x="79" fg:w="1"/><text x="6.5099%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.2599%" y="549" width="0.0792%" height="15" fill="rgb(222,74,54)" fg:x="79" fg:w="1"/><text x="6.5099%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="6.2599%" y="533" width="0.0792%" height="15" fill="rgb(216,99,12)" fg:x="79" fg:w="1"/><text x="6.5099%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.3391%" y="581" width="0.0792%" height="15" fill="rgb(226,22,26)" fg:x="80" fg:w="1"/><text x="6.5891%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.3391%" y="565" width="0.0792%" height="15" fill="rgb(217,163,10)" fg:x="80" fg:w="1"/><text x="6.5891%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.3391%" y="549" width="0.0792%" height="15" fill="rgb(213,25,53)" fg:x="80" fg:w="1"/><text x="6.5891%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.3391%" y="533" width="0.0792%" height="15" fill="rgb(252,105,26)" fg:x="80" fg:w="1"/><text x="6.5891%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.3391%" y="517" width="0.0792%" height="15" fill="rgb(220,39,43)" fg:x="80" fg:w="1"/><text x="6.5891%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.63%)</title><rect x="5.9429%" y="629" width="0.6339%" height="15" fill="rgb(229,68,48)" fg:x="75" fg:w="8"/><text x="6.1929%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="6.1014%" y="613" width="0.4754%" height="15" fill="rgb(252,8,32)" fg:x="77" fg:w="6"/><text x="6.3514%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="6.1014%" y="597" width="0.4754%" height="15" fill="rgb(223,20,43)" fg:x="77" fg:w="6"/><text x="6.3514%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.4184%" y="581" width="0.1585%" height="15" fill="rgb(229,81,49)" fg:x="81" fg:w="2"/><text x="6.6684%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.4976%" y="565" width="0.0792%" height="15" fill="rgb(236,28,36)" fg:x="82" fg:w="1"/><text x="6.7476%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.5769%" y="581" width="0.0792%" height="15" fill="rgb(249,185,26)" fg:x="83" fg:w="1"/><text x="6.8269%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.5769%" y="565" width="0.0792%" height="15" fill="rgb(249,174,33)" fg:x="83" fg:w="1"/><text x="6.8269%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="6.6561%" y="549" width="0.0792%" height="15" fill="rgb(233,201,37)" fg:x="84" fg:w="1"/><text x="6.9061%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.6561%" y="533" width="0.0792%" height="15" fill="rgb(221,78,26)" fg:x="84" fg:w="1"/><text x="6.9061%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.6561%" y="517" width="0.0792%" height="15" fill="rgb(250,127,30)" fg:x="84" fg:w="1"/><text x="6.9061%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.6561%" y="501" width="0.0792%" height="15" fill="rgb(230,49,44)" fg:x="84" fg:w="1"/><text x="6.9061%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="6.5769%" y="629" width="0.2377%" height="15" fill="rgb(229,67,23)" fg:x="83" fg:w="3"/><text x="6.8269%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="6.5769%" y="613" width="0.2377%" height="15" fill="rgb(249,83,47)" fg:x="83" fg:w="3"/><text x="6.8269%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="6.5769%" y="597" width="0.2377%" height="15" fill="rgb(215,43,3)" fg:x="83" fg:w="3"/><text x="6.8269%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.6561%" y="581" width="0.1585%" height="15" fill="rgb(238,154,13)" fg:x="84" fg:w="2"/><text x="6.9061%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.6561%" y="565" width="0.1585%" height="15" fill="rgb(219,56,2)" fg:x="84" fg:w="2"/><text x="6.9061%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.7353%" y="549" width="0.0792%" height="15" fill="rgb(233,0,4)" fg:x="85" fg:w="1"/><text x="6.9853%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.7353%" y="533" width="0.0792%" height="15" fill="rgb(235,30,7)" fg:x="85" fg:w="1"/><text x="6.9853%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="6.8146%" y="613" width="0.1585%" height="15" fill="rgb(250,79,13)" fg:x="86" fg:w="2"/><text x="7.0646%" y="623.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (2 samples, 0.16%)</title><rect x="6.8146%" y="597" width="0.1585%" height="15" fill="rgb(211,146,34)" fg:x="86" fg:w="2"/><text x="7.0646%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="6.8146%" y="581" width="0.1585%" height="15" fill="rgb(228,22,38)" fg:x="86" fg:w="2"/><text x="7.0646%" y="591.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="6.8146%" y="565" width="0.1585%" height="15" fill="rgb(235,168,5)" fg:x="86" fg:w="2"/><text x="7.0646%" y="575.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="6.8938%" y="549" width="0.0792%" height="15" fill="rgb(221,155,16)" fg:x="87" fg:w="1"/><text x="7.1438%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="6.8938%" y="533" width="0.0792%" height="15" fill="rgb(215,215,53)" fg:x="87" fg:w="1"/><text x="7.1438%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.0523%" y="581" width="0.0792%" height="15" fill="rgb(223,4,10)" fg:x="89" fg:w="1"/><text x="7.3023%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="7.1315%" y="581" width="0.0792%" height="15" fill="rgb(234,103,6)" fg:x="90" fg:w="1"/><text x="7.3815%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.1315%" y="565" width="0.0792%" height="15" fill="rgb(227,97,0)" fg:x="90" fg:w="1"/><text x="7.3815%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.1315%" y="549" width="0.0792%" height="15" fill="rgb(234,150,53)" fg:x="90" fg:w="1"/><text x="7.3815%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.3693%" y="533" width="0.0792%" height="15" fill="rgb(228,201,54)" fg:x="93" fg:w="1"/><text x="7.6193%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3693%" y="517" width="0.0792%" height="15" fill="rgb(222,22,37)" fg:x="93" fg:w="1"/><text x="7.6193%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="7.3693%" y="501" width="0.0792%" height="15" fill="rgb(237,53,32)" fg:x="93" fg:w="1"/><text x="7.6193%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="7.3693%" y="549" width="0.1585%" height="15" fill="rgb(233,25,53)" fg:x="93" fg:w="2"/><text x="7.6193%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.4485%" y="533" width="0.0792%" height="15" fill="rgb(210,40,34)" fg:x="94" fg:w="1"/><text x="7.6985%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.4485%" y="517" width="0.0792%" height="15" fill="rgb(241,220,44)" fg:x="94" fg:w="1"/><text x="7.6985%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.4485%" y="501" width="0.0792%" height="15" fill="rgb(235,28,35)" fg:x="94" fg:w="1"/><text x="7.6985%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.4485%" y="485" width="0.0792%" height="15" fill="rgb(210,56,17)" fg:x="94" fg:w="1"/><text x="7.6985%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="7.2900%" y="565" width="0.3170%" height="15" fill="rgb(224,130,29)" fg:x="92" fg:w="4"/><text x="7.5400%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="7.5277%" y="549" width="0.0792%" height="15" fill="rgb(235,212,8)" fg:x="95" fg:w="1"/><text x="7.7777%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6070%" y="565" width="0.0792%" height="15" fill="rgb(223,33,50)" fg:x="96" fg:w="1"/><text x="7.8570%" y="575.50"></text></g><g><title>engine::session::Session::flush (26 samples, 2.06%)</title><rect x="5.7052%" y="725" width="2.0602%" height="15" fill="rgb(219,149,13)" fg:x="72" fg:w="26"/><text x="5.9552%" y="735.50">e..</text></g><g><title>engine::session::state::State::close (25 samples, 1.98%)</title><rect x="5.7845%" y="709" width="1.9810%" height="15" fill="rgb(250,156,29)" fg:x="73" fg:w="25"/><text x="6.0345%" y="719.50">e..</text></g><g><title>engine::session::state::State::flush_entities (25 samples, 1.98%)</title><rect x="5.7845%" y="693" width="1.9810%" height="15" fill="rgb(216,193,19)" fg:x="73" fg:w="25"/><text x="6.0345%" y="703.50">e..</text></g><g><title>core::iter::adapters::try_process (25 samples, 1.98%)</title><rect x="5.7845%" y="677" width="1.9810%" height="15" fill="rgb(216,135,14)" fg:x="73" fg:w="25"/><text x="6.0345%" y="687.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 samples, 1.98%)</title><rect x="5.7845%" y="661" width="1.9810%" height="15" fill="rgb(241,47,5)" fg:x="73" fg:w="25"/><text x="6.0345%" y="671.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (23 samples, 1.82%)</title><rect x="5.9429%" y="645" width="1.8225%" height="15" fill="rgb(233,42,35)" fg:x="75" fg:w="23"/><text x="6.1929%" y="655.50">e..</text></g><g><title>kernel::model::any_entity_changes (12 samples, 0.95%)</title><rect x="6.8146%" y="629" width="0.9509%" height="15" fill="rgb(231,13,6)" fg:x="86" fg:w="12"/><text x="7.0646%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.79%)</title><rect x="6.9731%" y="613" width="0.7924%" height="15" fill="rgb(207,181,40)" fg:x="88" fg:w="10"/><text x="7.2231%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.79%)</title><rect x="6.9731%" y="597" width="0.7924%" height="15" fill="rgb(254,173,49)" fg:x="88" fg:w="10"/><text x="7.2231%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.55%)</title><rect x="7.2108%" y="581" width="0.5547%" height="15" fill="rgb(221,1,38)" fg:x="91" fg:w="7"/><text x="7.4608%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.6862%" y="565" width="0.0792%" height="15" fill="rgb(206,124,46)" fg:x="97" fg:w="1"/><text x="7.9362%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="7.7655%" y="693" width="0.0792%" height="15" fill="rgb(249,21,11)" fg:x="98" fg:w="1"/><text x="8.0155%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.7655%" y="677" width="0.0792%" height="15" fill="rgb(222,201,40)" fg:x="98" fg:w="1"/><text x="8.0155%" y="687.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="7.8447%" y="693" width="0.0792%" height="15" fill="rgb(235,61,29)" fg:x="99" fg:w="1"/><text x="8.0947%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.8447%" y="677" width="0.0792%" height="15" fill="rgb(219,207,3)" fg:x="99" fg:w="1"/><text x="8.0947%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="7.8447%" y="661" width="0.0792%" height="15" fill="rgb(222,56,46)" fg:x="99" fg:w="1"/><text x="8.0947%" y="671.50"></text></g><g><title>plugins_core::build::Build::named (3 samples, 0.24%)</title><rect x="7.7655%" y="725" width="0.2377%" height="15" fill="rgb(239,76,54)" fg:x="98" fg:w="3"/><text x="8.0155%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (3 samples, 0.24%)</title><rect x="7.7655%" y="709" width="0.2377%" height="15" fill="rgb(231,124,27)" fg:x="98" fg:w="3"/><text x="8.0155%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="7.9239%" y="693" width="0.0792%" height="15" fill="rgb(249,195,6)" fg:x="100" fg:w="1"/><text x="8.1739%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.9239%" y="677" width="0.0792%" height="15" fill="rgb(237,174,47)" fg:x="100" fg:w="1"/><text x="8.1739%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="7.9239%" y="661" width="0.0792%" height="15" fill="rgb(206,201,31)" fg:x="100" fg:w="1"/><text x="8.1739%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="7.9239%" y="645" width="0.0792%" height="15" fill="rgb(231,57,52)" fg:x="100" fg:w="1"/><text x="8.1739%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.9239%" y="629" width="0.0792%" height="15" fill="rgb(248,177,22)" fg:x="100" fg:w="1"/><text x="8.1739%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.9239%" y="613" width="0.0792%" height="15" fill="rgb(215,211,37)" fg:x="100" fg:w="1"/><text x="8.1739%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.9239%" y="597" width="0.0792%" height="15" fill="rgb(241,128,51)" fg:x="100" fg:w="1"/><text x="8.1739%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.0032%" y="709" width="0.0792%" height="15" fill="rgb(227,165,31)" fg:x="101" fg:w="1"/><text x="8.2532%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="8.0032%" y="693" width="0.0792%" height="15" fill="rgb(228,167,24)" fg:x="101" fg:w="1"/><text x="8.2532%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.0032%" y="677" width="0.0792%" height="15" fill="rgb(228,143,12)" fg:x="101" fg:w="1"/><text x="8.2532%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.0032%" y="661" width="0.0792%" height="15" fill="rgb(249,149,8)" fg:x="101" fg:w="1"/><text x="8.2532%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.0032%" y="645" width="0.0792%" height="15" fill="rgb(243,35,44)" fg:x="101" fg:w="1"/><text x="8.2532%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.0032%" y="629" width="0.0792%" height="15" fill="rgb(246,89,9)" fg:x="101" fg:w="1"/><text x="8.2532%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="8.0032%" y="613" width="0.0792%" height="15" fill="rgb(233,213,13)" fg:x="101" fg:w="1"/><text x="8.2532%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.0032%" y="597" width="0.0792%" height="15" fill="rgb(233,141,41)" fg:x="101" fg:w="1"/><text x="8.2532%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.0032%" y="581" width="0.0792%" height="15" fill="rgb(239,167,4)" fg:x="101" fg:w="1"/><text x="8.2532%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="8.0824%" y="645" width="0.1585%" height="15" fill="rgb(209,217,16)" fg:x="102" fg:w="2"/><text x="8.3324%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2409%" y="645" width="0.0792%" height="15" fill="rgb(219,88,35)" fg:x="104" fg:w="1"/><text x="8.4909%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.2409%" y="629" width="0.0792%" height="15" fill="rgb(220,193,23)" fg:x="104" fg:w="1"/><text x="8.4909%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.2409%" y="613" width="0.0792%" height="15" fill="rgb(230,90,52)" fg:x="104" fg:w="1"/><text x="8.4909%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="8.3201%" y="629" width="0.0792%" height="15" fill="rgb(252,106,19)" fg:x="105" fg:w="1"/><text x="8.5701%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.3201%" y="613" width="0.0792%" height="15" fill="rgb(206,74,20)" fg:x="105" fg:w="1"/><text x="8.5701%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.3201%" y="597" width="0.0792%" height="15" fill="rgb(230,138,44)" fg:x="105" fg:w="1"/><text x="8.5701%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.3201%" y="581" width="0.0792%" height="15" fill="rgb(235,182,43)" fg:x="105" fg:w="1"/><text x="8.5701%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.3201%" y="565" width="0.0792%" height="15" fill="rgb(242,16,51)" fg:x="105" fg:w="1"/><text x="8.5701%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.3201%" y="549" width="0.0792%" height="15" fill="rgb(248,9,4)" fg:x="105" fg:w="1"/><text x="8.5701%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.3201%" y="533" width="0.0792%" height="15" fill="rgb(210,31,22)" fg:x="105" fg:w="1"/><text x="8.5701%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.3201%" y="517" width="0.0792%" height="15" fill="rgb(239,54,39)" fg:x="105" fg:w="1"/><text x="8.5701%" y="527.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="8.0032%" y="725" width="0.4754%" height="15" fill="rgb(230,99,41)" fg:x="101" fg:w="6"/><text x="8.2532%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="8.0824%" y="709" width="0.3962%" height="15" fill="rgb(253,106,12)" fg:x="102" fg:w="5"/><text x="8.3324%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="8.0824%" y="693" width="0.3962%" height="15" fill="rgb(213,46,41)" fg:x="102" fg:w="5"/><text x="8.3324%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="8.0824%" y="677" width="0.3962%" height="15" fill="rgb(215,133,35)" fg:x="102" fg:w="5"/><text x="8.3324%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="8.0824%" y="661" width="0.3962%" height="15" fill="rgb(213,28,5)" fg:x="102" fg:w="5"/><text x="8.3324%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="8.3201%" y="645" width="0.1585%" height="15" fill="rgb(215,77,49)" fg:x="105" fg:w="2"/><text x="8.5701%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.3994%" y="629" width="0.0792%" height="15" fill="rgb(248,100,22)" fg:x="106" fg:w="1"/><text x="8.6494%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="8.4786%" y="725" width="0.0792%" height="15" fill="rgb(208,67,9)" fg:x="107" fg:w="1"/><text x="8.7286%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="8.4786%" y="709" width="0.0792%" height="15" fill="rgb(219,133,21)" fg:x="107" fg:w="1"/><text x="8.7286%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="8.4786%" y="693" width="0.0792%" height="15" fill="rgb(246,46,29)" fg:x="107" fg:w="1"/><text x="8.7286%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4786%" y="677" width="0.0792%" height="15" fill="rgb(246,185,52)" fg:x="107" fg:w="1"/><text x="8.7286%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.4786%" y="661" width="0.0792%" height="15" fill="rgb(252,136,11)" fg:x="107" fg:w="1"/><text x="8.7286%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4786%" y="645" width="0.0792%" height="15" fill="rgb(219,138,53)" fg:x="107" fg:w="1"/><text x="8.7286%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.4786%" y="629" width="0.0792%" height="15" fill="rgb(211,51,23)" fg:x="107" fg:w="1"/><text x="8.7286%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="8.5578%" y="661" width="0.0792%" height="15" fill="rgb(247,221,28)" fg:x="108" fg:w="1"/><text x="8.8078%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="8.5578%" y="677" width="0.2377%" height="15" fill="rgb(251,222,45)" fg:x="108" fg:w="3"/><text x="8.8078%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="8.6371%" y="661" width="0.1585%" height="15" fill="rgb(217,162,53)" fg:x="109" fg:w="2"/><text x="8.8871%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.6371%" y="645" width="0.1585%" height="15" fill="rgb(229,93,14)" fg:x="109" fg:w="2"/><text x="8.8871%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="8.6371%" y="629" width="0.1585%" height="15" fill="rgb(209,67,49)" fg:x="109" fg:w="2"/><text x="8.8871%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.6371%" y="613" width="0.1585%" height="15" fill="rgb(213,87,29)" fg:x="109" fg:w="2"/><text x="8.8871%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.7163%" y="597" width="0.0792%" height="15" fill="rgb(205,151,52)" fg:x="110" fg:w="1"/><text x="8.9663%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.7956%" y="645" width="0.0792%" height="15" fill="rgb(253,215,39)" fg:x="111" fg:w="1"/><text x="9.0456%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="8.7956%" y="629" width="0.0792%" height="15" fill="rgb(221,220,41)" fg:x="111" fg:w="1"/><text x="9.0456%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.7956%" y="613" width="0.0792%" height="15" fill="rgb(218,133,21)" fg:x="111" fg:w="1"/><text x="9.0456%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.7956%" y="597" width="0.0792%" height="15" fill="rgb(221,193,43)" fg:x="111" fg:w="1"/><text x="9.0456%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.7956%" y="581" width="0.0792%" height="15" fill="rgb(240,128,52)" fg:x="111" fg:w="1"/><text x="9.0456%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.7956%" y="565" width="0.0792%" height="15" fill="rgb(253,114,12)" fg:x="111" fg:w="1"/><text x="9.0456%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.7956%" y="549" width="0.0792%" height="15" fill="rgb(215,223,47)" fg:x="111" fg:w="1"/><text x="9.0456%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.7956%" y="533" width="0.0792%" height="15" fill="rgb(248,225,23)" fg:x="111" fg:w="1"/><text x="9.0456%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.7956%" y="517" width="0.0792%" height="15" fill="rgb(250,108,0)" fg:x="111" fg:w="1"/><text x="9.0456%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.7956%" y="501" width="0.0792%" height="15" fill="rgb(228,208,7)" fg:x="111" fg:w="1"/><text x="9.0456%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.7956%" y="485" width="0.0792%" height="15" fill="rgb(244,45,10)" fg:x="111" fg:w="1"/><text x="9.0456%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.7956%" y="469" width="0.0792%" height="15" fill="rgb(207,125,25)" fg:x="111" fg:w="1"/><text x="9.0456%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.7956%" y="453" width="0.0792%" height="15" fill="rgb(210,195,18)" fg:x="111" fg:w="1"/><text x="9.0456%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.7956%" y="437" width="0.0792%" height="15" fill="rgb(249,80,12)" fg:x="111" fg:w="1"/><text x="9.0456%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.7956%" y="421" width="0.0792%" height="15" fill="rgb(221,65,9)" fg:x="111" fg:w="1"/><text x="9.0456%" y="431.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.40%)</title><rect x="8.5578%" y="693" width="0.3962%" height="15" fill="rgb(235,49,36)" fg:x="108" fg:w="5"/><text x="8.8078%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="8.7956%" y="677" width="0.1585%" height="15" fill="rgb(225,32,20)" fg:x="111" fg:w="2"/><text x="9.0456%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="8.7956%" y="661" width="0.1585%" height="15" fill="rgb(215,141,46)" fg:x="111" fg:w="2"/><text x="9.0456%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="8.8748%" y="645" width="0.0792%" height="15" fill="rgb(250,160,47)" fg:x="112" fg:w="1"/><text x="9.1248%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="8.8748%" y="629" width="0.0792%" height="15" fill="rgb(216,222,40)" fg:x="112" fg:w="1"/><text x="9.1248%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8748%" y="613" width="0.0792%" height="15" fill="rgb(234,217,39)" fg:x="112" fg:w="1"/><text x="9.1248%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8748%" y="597" width="0.0792%" height="15" fill="rgb(207,178,40)" fg:x="112" fg:w="1"/><text x="9.1248%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (6 samples, 0.48%)</title><rect x="8.5578%" y="725" width="0.4754%" height="15" fill="rgb(221,136,13)" fg:x="108" fg:w="6"/><text x="8.8078%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="8.5578%" y="709" width="0.4754%" height="15" fill="rgb(249,199,10)" fg:x="108" fg:w="6"/><text x="8.8078%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="8.9540%" y="693" width="0.0792%" height="15" fill="rgb(249,222,13)" fg:x="113" fg:w="1"/><text x="9.2040%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="8.9540%" y="677" width="0.0792%" height="15" fill="rgb(244,185,38)" fg:x="113" fg:w="1"/><text x="9.2040%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="8.9540%" y="661" width="0.0792%" height="15" fill="rgb(236,202,9)" fg:x="113" fg:w="1"/><text x="9.2040%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="8.9540%" y="645" width="0.0792%" height="15" fill="rgb(250,229,37)" fg:x="113" fg:w="1"/><text x="9.2040%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.0333%" y="709" width="0.0792%" height="15" fill="rgb(206,174,23)" fg:x="114" fg:w="1"/><text x="9.2833%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.0333%" y="693" width="0.0792%" height="15" fill="rgb(211,33,43)" fg:x="114" fg:w="1"/><text x="9.2833%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.0333%" y="677" width="0.0792%" height="15" fill="rgb(245,58,50)" fg:x="114" fg:w="1"/><text x="9.2833%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.1918%" y="597" width="0.0792%" height="15" fill="rgb(244,68,36)" fg:x="116" fg:w="1"/><text x="9.4418%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="9.1125%" y="709" width="0.2377%" height="15" fill="rgb(232,229,15)" fg:x="115" fg:w="3"/><text x="9.3625%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="9.1125%" y="693" width="0.2377%" height="15" fill="rgb(254,30,23)" fg:x="115" fg:w="3"/><text x="9.3625%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="9.1918%" y="677" width="0.1585%" height="15" fill="rgb(235,160,14)" fg:x="116" fg:w="2"/><text x="9.4418%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="9.1918%" y="661" width="0.1585%" height="15" fill="rgb(212,155,44)" fg:x="116" fg:w="2"/><text x="9.4418%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="9.1918%" y="645" width="0.1585%" height="15" fill="rgb(226,2,50)" fg:x="116" fg:w="2"/><text x="9.4418%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="9.1918%" y="629" width="0.1585%" height="15" fill="rgb(234,177,6)" fg:x="116" fg:w="2"/><text x="9.4418%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="9.1918%" y="613" width="0.1585%" height="15" fill="rgb(217,24,9)" fg:x="116" fg:w="2"/><text x="9.4418%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.2710%" y="597" width="0.0792%" height="15" fill="rgb(220,13,46)" fg:x="117" fg:w="1"/><text x="9.5210%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.2710%" y="581" width="0.0792%" height="15" fill="rgb(239,221,27)" fg:x="117" fg:w="1"/><text x="9.5210%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.2710%" y="565" width="0.0792%" height="15" fill="rgb(222,198,25)" fg:x="117" fg:w="1"/><text x="9.5210%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.2710%" y="549" width="0.0792%" height="15" fill="rgb(211,99,13)" fg:x="117" fg:w="1"/><text x="9.5210%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.2710%" y="533" width="0.0792%" height="15" fill="rgb(232,111,31)" fg:x="117" fg:w="1"/><text x="9.5210%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.2710%" y="517" width="0.0792%" height="15" fill="rgb(245,82,37)" fg:x="117" fg:w="1"/><text x="9.5210%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="9.2710%" y="501" width="0.0792%" height="15" fill="rgb(227,149,46)" fg:x="117" fg:w="1"/><text x="9.5210%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="9.3502%" y="709" width="0.0792%" height="15" fill="rgb(218,36,50)" fg:x="118" fg:w="1"/><text x="9.6002%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.3502%" y="693" width="0.0792%" height="15" fill="rgb(226,80,48)" fg:x="118" fg:w="1"/><text x="9.6002%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="9.4295%" y="693" width="0.0792%" height="15" fill="rgb(238,224,15)" fg:x="119" fg:w="1"/><text x="9.6795%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.4295%" y="677" width="0.0792%" height="15" fill="rgb(241,136,10)" fg:x="119" fg:w="1"/><text x="9.6795%" y="687.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="9.5087%" y="645" width="0.1585%" height="15" fill="rgb(208,32,45)" fg:x="120" fg:w="2"/><text x="9.7587%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="9.5087%" y="629" width="0.1585%" height="15" fill="rgb(207,135,9)" fg:x="120" fg:w="2"/><text x="9.7587%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (2 samples, 0.16%)</title><rect x="9.5087%" y="613" width="0.1585%" height="15" fill="rgb(206,86,44)" fg:x="120" fg:w="2"/><text x="9.7587%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="9.5880%" y="597" width="0.0792%" height="15" fill="rgb(245,177,15)" fg:x="121" fg:w="1"/><text x="9.8380%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.5880%" y="581" width="0.0792%" height="15" fill="rgb(206,64,50)" fg:x="121" fg:w="1"/><text x="9.8380%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="9.6672%" y="581" width="0.2377%" height="15" fill="rgb(234,36,40)" fg:x="122" fg:w="3"/><text x="9.9172%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="9.6672%" y="565" width="0.2377%" height="15" fill="rgb(213,64,8)" fg:x="122" fg:w="3"/><text x="9.9172%" y="575.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="9.6672%" y="549" width="0.2377%" height="15" fill="rgb(210,75,36)" fg:x="122" fg:w="3"/><text x="9.9172%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="9.7464%" y="533" width="0.1585%" height="15" fill="rgb(229,88,21)" fg:x="123" fg:w="2"/><text x="9.9964%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.8257%" y="517" width="0.0792%" height="15" fill="rgb(252,204,47)" fg:x="124" fg:w="1"/><text x="10.0757%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.8257%" y="501" width="0.0792%" height="15" fill="rgb(208,77,27)" fg:x="124" fg:w="1"/><text x="10.0757%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.8257%" y="485" width="0.0792%" height="15" fill="rgb(221,76,26)" fg:x="124" fg:w="1"/><text x="10.0757%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.8257%" y="469" width="0.0792%" height="15" fill="rgb(225,139,18)" fg:x="124" fg:w="1"/><text x="10.0757%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 0.48%)</title><rect x="9.9842%" y="565" width="0.4754%" height="15" fill="rgb(230,137,11)" fg:x="126" fg:w="6"/><text x="10.2342%" y="575.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="10.1426%" y="549" width="0.3170%" height="15" fill="rgb(212,28,1)" fg:x="128" fg:w="4"/><text x="10.3926%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="10.2219%" y="533" width="0.2377%" height="15" fill="rgb(248,164,17)" fg:x="129" fg:w="3"/><text x="10.4719%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="10.3011%" y="517" width="0.1585%" height="15" fill="rgb(222,171,42)" fg:x="130" fg:w="2"/><text x="10.5511%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.3803%" y="501" width="0.0792%" height="15" fill="rgb(243,84,45)" fg:x="131" fg:w="1"/><text x="10.6303%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.3803%" y="485" width="0.0792%" height="15" fill="rgb(252,49,23)" fg:x="131" fg:w="1"/><text x="10.6303%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="10.3803%" y="469" width="0.0792%" height="15" fill="rgb(215,19,7)" fg:x="131" fg:w="1"/><text x="10.6303%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="10.4596%" y="549" width="0.2377%" height="15" fill="rgb(238,81,41)" fg:x="132" fg:w="3"/><text x="10.7096%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.5388%" y="533" width="0.1585%" height="15" fill="rgb(210,199,37)" fg:x="133" fg:w="2"/><text x="10.7888%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="10.5388%" y="517" width="0.1585%" height="15" fill="rgb(244,192,49)" fg:x="133" fg:w="2"/><text x="10.7888%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.6973%" y="533" width="0.1585%" height="15" fill="rgb(226,211,11)" fg:x="135" fg:w="2"/><text x="10.9473%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.6973%" y="517" width="0.1585%" height="15" fill="rgb(236,162,54)" fg:x="135" fg:w="2"/><text x="10.9473%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="10.6973%" y="501" width="0.1585%" height="15" fill="rgb(220,229,9)" fg:x="135" fg:w="2"/><text x="10.9473%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="10.6973%" y="485" width="0.1585%" height="15" fill="rgb(250,87,22)" fg:x="135" fg:w="2"/><text x="10.9473%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="10.6973%" y="469" width="0.1585%" height="15" fill="rgb(239,43,17)" fg:x="135" fg:w="2"/><text x="10.9473%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="10.6973%" y="453" width="0.1585%" height="15" fill="rgb(231,177,25)" fg:x="135" fg:w="2"/><text x="10.9473%" y="463.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="10.6973%" y="437" width="0.1585%" height="15" fill="rgb(219,179,1)" fg:x="135" fg:w="2"/><text x="10.9473%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.8558%" y="517" width="0.1585%" height="15" fill="rgb(238,219,53)" fg:x="137" fg:w="2"/><text x="11.1058%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.8558%" y="501" width="0.1585%" height="15" fill="rgb(232,167,36)" fg:x="137" fg:w="2"/><text x="11.1058%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.9350%" y="485" width="0.0792%" height="15" fill="rgb(244,19,51)" fg:x="138" fg:w="1"/><text x="11.1850%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="11.0143%" y="517" width="0.0792%" height="15" fill="rgb(224,6,22)" fg:x="139" fg:w="1"/><text x="11.2643%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.0143%" y="501" width="0.0792%" height="15" fill="rgb(224,145,5)" fg:x="139" fg:w="1"/><text x="11.2643%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.0143%" y="485" width="0.0792%" height="15" fill="rgb(234,130,49)" fg:x="139" fg:w="1"/><text x="11.2643%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.71%)</title><rect x="10.4596%" y="565" width="0.7132%" height="15" fill="rgb(254,6,2)" fg:x="132" fg:w="9"/><text x="10.7096%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="10.6973%" y="549" width="0.4754%" height="15" fill="rgb(208,96,46)" fg:x="135" fg:w="6"/><text x="10.9473%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="10.8558%" y="533" width="0.3170%" height="15" fill="rgb(239,3,39)" fg:x="137" fg:w="4"/><text x="11.1058%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.0935%" y="517" width="0.0792%" height="15" fill="rgb(233,210,1)" fg:x="140" fg:w="1"/><text x="11.3435%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (20 samples, 1.58%)</title><rect x="9.6672%" y="597" width="1.5848%" height="15" fill="rgb(244,137,37)" fg:x="122" fg:w="20"/><text x="9.9172%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (17 samples, 1.35%)</title><rect x="9.9049%" y="581" width="1.3471%" height="15" fill="rgb(240,136,2)" fg:x="125" fg:w="17"/><text x="10.1549%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.1727%" y="565" width="0.0792%" height="15" fill="rgb(239,18,37)" fg:x="141" fg:w="1"/><text x="11.4227%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.1727%" y="549" width="0.0792%" height="15" fill="rgb(218,185,22)" fg:x="141" fg:w="1"/><text x="11.4227%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.1727%" y="533" width="0.0792%" height="15" fill="rgb(225,218,4)" fg:x="141" fg:w="1"/><text x="11.4227%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.1727%" y="517" width="0.0792%" height="15" fill="rgb(230,182,32)" fg:x="141" fg:w="1"/><text x="11.4227%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.1727%" y="501" width="0.0792%" height="15" fill="rgb(242,56,43)" fg:x="141" fg:w="1"/><text x="11.4227%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="11.1727%" y="485" width="0.0792%" height="15" fill="rgb(233,99,24)" fg:x="141" fg:w="1"/><text x="11.4227%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.2520%" y="565" width="0.0792%" height="15" fill="rgb(234,209,42)" fg:x="142" fg:w="1"/><text x="11.5020%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.3312%" y="549" width="0.0792%" height="15" fill="rgb(227,7,12)" fg:x="143" fg:w="1"/><text x="11.5812%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="11.4105%" y="549" width="0.1585%" height="15" fill="rgb(245,203,43)" fg:x="144" fg:w="2"/><text x="11.6605%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.55%)</title><rect x="11.2520%" y="597" width="0.5547%" height="15" fill="rgb(238,205,33)" fg:x="142" fg:w="7"/><text x="11.5020%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.55%)</title><rect x="11.2520%" y="581" width="0.5547%" height="15" fill="rgb(231,56,7)" fg:x="142" fg:w="7"/><text x="11.5020%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="11.3312%" y="565" width="0.4754%" height="15" fill="rgb(244,186,29)" fg:x="143" fg:w="6"/><text x="11.5812%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="11.5689%" y="549" width="0.2377%" height="15" fill="rgb(234,111,31)" fg:x="146" fg:w="3"/><text x="11.8189%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="11.6482%" y="533" width="0.1585%" height="15" fill="rgb(241,149,10)" fg:x="147" fg:w="2"/><text x="11.8982%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.7274%" y="517" width="0.0792%" height="15" fill="rgb(249,206,44)" fg:x="148" fg:w="1"/><text x="11.9774%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.7274%" y="501" width="0.0792%" height="15" fill="rgb(251,153,30)" fg:x="148" fg:w="1"/><text x="11.9774%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.7274%" y="485" width="0.0792%" height="15" fill="rgb(239,152,38)" fg:x="148" fg:w="1"/><text x="11.9774%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="11.8067%" y="581" width="0.0792%" height="15" fill="rgb(249,139,47)" fg:x="149" fg:w="1"/><text x="12.0567%" y="591.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="11.8067%" y="565" width="0.0792%" height="15" fill="rgb(244,64,35)" fg:x="149" fg:w="1"/><text x="12.0567%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.8067%" y="549" width="0.0792%" height="15" fill="rgb(216,46,15)" fg:x="149" fg:w="1"/><text x="12.0567%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="11.8067%" y="533" width="0.0792%" height="15" fill="rgb(250,74,19)" fg:x="149" fg:w="1"/><text x="12.0567%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.0444%" y="549" width="0.0792%" height="15" fill="rgb(249,42,33)" fg:x="152" fg:w="1"/><text x="12.2944%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.1236%" y="549" width="0.0792%" height="15" fill="rgb(242,149,17)" fg:x="153" fg:w="1"/><text x="12.3736%" y="559.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="12.2029%" y="549" width="0.1585%" height="15" fill="rgb(244,29,21)" fg:x="154" fg:w="2"/><text x="12.4529%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="12.3613%" y="549" width="0.1585%" height="15" fill="rgb(220,130,37)" fg:x="156" fg:w="2"/><text x="12.6113%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.4406%" y="533" width="0.0792%" height="15" fill="rgb(211,67,2)" fg:x="157" fg:w="1"/><text x="12.6906%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.4406%" y="517" width="0.0792%" height="15" fill="rgb(235,68,52)" fg:x="157" fg:w="1"/><text x="12.6906%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="12.5198%" y="501" width="0.1585%" height="15" fill="rgb(246,142,3)" fg:x="158" fg:w="2"/><text x="12.7698%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.5990%" y="485" width="0.0792%" height="15" fill="rgb(241,25,7)" fg:x="159" fg:w="1"/><text x="12.8490%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="12.6783%" y="485" width="0.0792%" height="15" fill="rgb(242,119,39)" fg:x="160" fg:w="1"/><text x="12.9283%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.55%)</title><rect x="12.5198%" y="517" width="0.5547%" height="15" fill="rgb(241,98,45)" fg:x="158" fg:w="7"/><text x="12.7698%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="12.6783%" y="501" width="0.3962%" height="15" fill="rgb(254,28,30)" fg:x="160" fg:w="5"/><text x="12.9283%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="12.7575%" y="485" width="0.3170%" height="15" fill="rgb(241,142,54)" fg:x="161" fg:w="4"/><text x="13.0075%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="12.8368%" y="469" width="0.2377%" height="15" fill="rgb(222,85,15)" fg:x="162" fg:w="3"/><text x="13.0868%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="12.8368%" y="453" width="0.2377%" height="15" fill="rgb(210,85,47)" fg:x="162" fg:w="3"/><text x="13.0868%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.9952%" y="437" width="0.0792%" height="15" fill="rgb(224,206,25)" fg:x="164" fg:w="1"/><text x="13.2452%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.9952%" y="421" width="0.0792%" height="15" fill="rgb(243,201,19)" fg:x="164" fg:w="1"/><text x="13.2452%" y="431.50"></text></g><g><title>engine::session::Session::flush (47 samples, 3.72%)</title><rect x="9.4295%" y="709" width="3.7242%" height="15" fill="rgb(236,59,4)" fg:x="119" fg:w="47"/><text x="9.6795%" y="719.50">engi..</text></g><g><title>engine::session::Session::save_changes (46 samples, 3.65%)</title><rect x="9.5087%" y="693" width="3.6450%" height="15" fill="rgb(254,179,45)" fg:x="120" fg:w="46"/><text x="9.7587%" y="703.50">engi..</text></g><g><title>engine::session::state::State::close (46 samples, 3.65%)</title><rect x="9.5087%" y="677" width="3.6450%" height="15" fill="rgb(226,14,10)" fg:x="120" fg:w="46"/><text x="9.7587%" y="687.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (46 samples, 3.65%)</title><rect x="9.5087%" y="661" width="3.6450%" height="15" fill="rgb(244,27,41)" fg:x="120" fg:w="46"/><text x="9.7587%" y="671.50">engi..</text></g><g><title>core::iter::adapters::try_process (44 samples, 3.49%)</title><rect x="9.6672%" y="645" width="3.4865%" height="15" fill="rgb(235,35,32)" fg:x="122" fg:w="44"/><text x="9.9172%" y="655.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (44 samples, 3.49%)</title><rect x="9.6672%" y="629" width="3.4865%" height="15" fill="rgb(218,68,31)" fg:x="122" fg:w="44"/><text x="9.9172%" y="639.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (44 samples, 3.49%)</title><rect x="9.6672%" y="613" width="3.4865%" height="15" fill="rgb(207,120,37)" fg:x="122" fg:w="44"/><text x="9.9172%" y="623.50">eng..</text></g><g><title>kernel::model::any_entity_changes (17 samples, 1.35%)</title><rect x="11.8067%" y="597" width="1.3471%" height="15" fill="rgb(227,98,0)" fg:x="149" fg:w="17"/><text x="12.0567%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (16 samples, 1.27%)</title><rect x="11.8859%" y="581" width="1.2678%" height="15" fill="rgb(207,7,3)" fg:x="150" fg:w="16"/><text x="12.1359%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (15 samples, 1.19%)</title><rect x="11.9651%" y="565" width="1.1886%" height="15" fill="rgb(206,98,19)" fg:x="151" fg:w="15"/><text x="12.2151%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.63%)</title><rect x="12.5198%" y="549" width="0.6339%" height="15" fill="rgb(217,5,26)" fg:x="158" fg:w="8"/><text x="12.7698%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.63%)</title><rect x="12.5198%" y="533" width="0.6339%" height="15" fill="rgb(235,190,38)" fg:x="158" fg:w="8"/><text x="12.7698%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="13.0745%" y="517" width="0.0792%" height="15" fill="rgb(247,86,24)" fg:x="165" fg:w="1"/><text x="13.3245%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.0745%" y="501" width="0.0792%" height="15" fill="rgb(205,101,16)" fg:x="165" fg:w="1"/><text x="13.3245%" y="511.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="13.1537%" y="709" width="0.0792%" height="15" fill="rgb(246,168,33)" fg:x="166" fg:w="1"/><text x="13.4037%" y="719.50"></text></g><g><title>kernel::model::builder::build_entity (1 samples, 0.08%)</title><rect x="13.1537%" y="693" width="0.0792%" height="15" fill="rgb(231,114,1)" fg:x="166" fg:w="1"/><text x="13.4037%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.2330%" y="677" width="0.0792%" height="15" fill="rgb(207,184,53)" fg:x="167" fg:w="1"/><text x="13.4830%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.2330%" y="661" width="0.0792%" height="15" fill="rgb(224,95,51)" fg:x="167" fg:w="1"/><text x="13.4830%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.2330%" y="645" width="0.0792%" height="15" fill="rgb(212,188,45)" fg:x="167" fg:w="1"/><text x="13.4830%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.2330%" y="629" width="0.0792%" height="15" fill="rgb(223,154,38)" fg:x="167" fg:w="1"/><text x="13.4830%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="13.2330%" y="693" width="0.1585%" height="15" fill="rgb(251,22,52)" fg:x="167" fg:w="2"/><text x="13.4830%" y="703.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="13.3122%" y="677" width="0.0792%" height="15" fill="rgb(229,209,22)" fg:x="168" fg:w="1"/><text x="13.5622%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.4707%" y="677" width="0.0792%" height="15" fill="rgb(234,138,34)" fg:x="170" fg:w="1"/><text x="13.7207%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.4707%" y="661" width="0.0792%" height="15" fill="rgb(212,95,11)" fg:x="170" fg:w="1"/><text x="13.7207%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.4707%" y="645" width="0.0792%" height="15" fill="rgb(240,179,47)" fg:x="170" fg:w="1"/><text x="13.7207%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.4707%" y="629" width="0.0792%" height="15" fill="rgb(240,163,11)" fg:x="170" fg:w="1"/><text x="13.7207%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.4707%" y="613" width="0.0792%" height="15" fill="rgb(236,37,12)" fg:x="170" fg:w="1"/><text x="13.7207%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.4707%" y="597" width="0.0792%" height="15" fill="rgb(232,164,16)" fg:x="170" fg:w="1"/><text x="13.7207%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.4707%" y="581" width="0.0792%" height="15" fill="rgb(244,205,15)" fg:x="170" fg:w="1"/><text x="13.7207%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.4707%" y="565" width="0.0792%" height="15" fill="rgb(223,117,47)" fg:x="170" fg:w="1"/><text x="13.7207%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.4707%" y="549" width="0.0792%" height="15" fill="rgb(244,107,35)" fg:x="170" fg:w="1"/><text x="13.7207%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.4707%" y="533" width="0.0792%" height="15" fill="rgb(205,140,8)" fg:x="170" fg:w="1"/><text x="13.7207%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.4707%" y="517" width="0.0792%" height="15" fill="rgb(228,84,46)" fg:x="170" fg:w="1"/><text x="13.7207%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.4707%" y="501" width="0.0792%" height="15" fill="rgb(254,188,9)" fg:x="170" fg:w="1"/><text x="13.7207%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.4707%" y="485" width="0.0792%" height="15" fill="rgb(206,112,54)" fg:x="170" fg:w="1"/><text x="13.7207%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.4707%" y="469" width="0.0792%" height="15" fill="rgb(216,84,49)" fg:x="170" fg:w="1"/><text x="13.7207%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.4707%" y="453" width="0.0792%" height="15" fill="rgb(214,194,35)" fg:x="170" fg:w="1"/><text x="13.7207%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.4707%" y="437" width="0.0792%" height="15" fill="rgb(249,28,3)" fg:x="170" fg:w="1"/><text x="13.7207%" y="447.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="13.5499%" y="677" width="0.0792%" height="15" fill="rgb(222,56,52)" fg:x="171" fg:w="1"/><text x="13.7999%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="13.5499%" y="661" width="0.0792%" height="15" fill="rgb(245,217,50)" fg:x="171" fg:w="1"/><text x="13.7999%" y="671.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.5499%" y="645" width="0.0792%" height="15" fill="rgb(213,201,24)" fg:x="171" fg:w="1"/><text x="13.7999%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.5499%" y="629" width="0.0792%" height="15" fill="rgb(248,116,28)" fg:x="171" fg:w="1"/><text x="13.7999%" y="639.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.5499%" y="613" width="0.0792%" height="15" fill="rgb(219,72,43)" fg:x="171" fg:w="1"/><text x="13.7999%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.5499%" y="597" width="0.0792%" height="15" fill="rgb(209,138,14)" fg:x="171" fg:w="1"/><text x="13.7999%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="13.5499%" y="581" width="0.0792%" height="15" fill="rgb(222,18,33)" fg:x="171" fg:w="1"/><text x="13.7999%" y="591.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="13.5499%" y="565" width="0.0792%" height="15" fill="rgb(213,199,7)" fg:x="171" fg:w="1"/><text x="13.7999%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.7084%" y="613" width="0.0792%" height="15" fill="rgb(250,110,10)" fg:x="173" fg:w="1"/><text x="13.9584%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.7084%" y="597" width="0.0792%" height="15" fill="rgb(248,123,6)" fg:x="173" fg:w="1"/><text x="13.9584%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="13.7084%" y="629" width="0.1585%" height="15" fill="rgb(206,91,31)" fg:x="173" fg:w="2"/><text x="13.9584%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="13.7876%" y="613" width="0.0792%" height="15" fill="rgb(211,154,13)" fg:x="174" fg:w="1"/><text x="14.0376%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="13.8669%" y="629" width="0.0792%" height="15" fill="rgb(225,148,7)" fg:x="175" fg:w="1"/><text x="14.1169%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.8669%" y="613" width="0.0792%" height="15" fill="rgb(220,160,43)" fg:x="175" fg:w="1"/><text x="14.1169%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.8669%" y="597" width="0.0792%" height="15" fill="rgb(213,52,39)" fg:x="175" fg:w="1"/><text x="14.1169%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.63%)</title><rect x="13.3914%" y="693" width="0.6339%" height="15" fill="rgb(243,137,7)" fg:x="169" fg:w="8"/><text x="13.6414%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="13.6292%" y="677" width="0.3962%" height="15" fill="rgb(230,79,13)" fg:x="172" fg:w="5"/><text x="13.8792%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (5 samples, 0.40%)</title><rect x="13.6292%" y="661" width="0.3962%" height="15" fill="rgb(247,105,23)" fg:x="172" fg:w="5"/><text x="13.8792%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (5 samples, 0.40%)</title><rect x="13.6292%" y="645" width="0.3962%" height="15" fill="rgb(223,179,41)" fg:x="172" fg:w="5"/><text x="13.8792%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="13.9461%" y="629" width="0.0792%" height="15" fill="rgb(218,9,34)" fg:x="176" fg:w="1"/><text x="14.1961%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.9461%" y="613" width="0.0792%" height="15" fill="rgb(222,106,8)" fg:x="176" fg:w="1"/><text x="14.1961%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (11 samples, 0.87%)</title><rect x="13.2330%" y="709" width="0.8716%" height="15" fill="rgb(211,220,0)" fg:x="167" fg:w="11"/><text x="13.4830%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.0254%" y="693" width="0.0792%" height="15" fill="rgb(229,52,16)" fg:x="177" fg:w="1"/><text x="14.2754%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.0254%" y="677" width="0.0792%" height="15" fill="rgb(212,155,18)" fg:x="177" fg:w="1"/><text x="14.2754%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="14.1046%" y="645" width="0.0792%" height="15" fill="rgb(242,21,14)" fg:x="178" fg:w="1"/><text x="14.3546%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.1046%" y="629" width="0.0792%" height="15" fill="rgb(222,19,48)" fg:x="178" fg:w="1"/><text x="14.3546%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.1046%" y="613" width="0.0792%" height="15" fill="rgb(232,45,27)" fg:x="178" fg:w="1"/><text x="14.3546%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="14.1046%" y="597" width="0.0792%" height="15" fill="rgb(249,103,42)" fg:x="178" fg:w="1"/><text x="14.3546%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (2 samples, 0.16%)</title><rect x="14.1046%" y="709" width="0.1585%" height="15" fill="rgb(246,81,33)" fg:x="178" fg:w="2"/><text x="14.3546%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="14.1046%" y="693" width="0.1585%" height="15" fill="rgb(252,33,42)" fg:x="178" fg:w="2"/><text x="14.3546%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="14.1046%" y="677" width="0.1585%" height="15" fill="rgb(209,212,41)" fg:x="178" fg:w="2"/><text x="14.3546%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="14.1046%" y="661" width="0.1585%" height="15" fill="rgb(207,154,6)" fg:x="178" fg:w="2"/><text x="14.3546%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="14.1838%" y="645" width="0.0792%" height="15" fill="rgb(223,64,47)" fg:x="179" fg:w="1"/><text x="14.4338%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.1838%" y="629" width="0.0792%" height="15" fill="rgb(211,161,38)" fg:x="179" fg:w="1"/><text x="14.4338%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.1838%" y="613" width="0.0792%" height="15" fill="rgb(219,138,40)" fg:x="179" fg:w="1"/><text x="14.4338%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.1838%" y="597" width="0.0792%" height="15" fill="rgb(241,228,46)" fg:x="179" fg:w="1"/><text x="14.4338%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.1838%" y="581" width="0.0792%" height="15" fill="rgb(223,209,38)" fg:x="179" fg:w="1"/><text x="14.4338%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.1838%" y="565" width="0.0792%" height="15" fill="rgb(236,164,45)" fg:x="179" fg:w="1"/><text x="14.4338%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.1838%" y="549" width="0.0792%" height="15" fill="rgb(231,15,5)" fg:x="179" fg:w="1"/><text x="14.4338%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.2631%" y="677" width="0.1585%" height="15" fill="rgb(252,35,15)" fg:x="180" fg:w="2"/><text x="14.5131%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.3423%" y="661" width="0.0792%" height="15" fill="rgb(248,181,18)" fg:x="181" fg:w="1"/><text x="14.5923%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.3423%" y="645" width="0.0792%" height="15" fill="rgb(233,39,42)" fg:x="181" fg:w="1"/><text x="14.5923%" y="655.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="14.2631%" y="693" width="0.2377%" height="15" fill="rgb(238,110,33)" fg:x="180" fg:w="3"/><text x="14.5131%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.4216%" y="677" width="0.0792%" height="15" fill="rgb(233,195,10)" fg:x="182" fg:w="1"/><text x="14.6716%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.4216%" y="661" width="0.0792%" height="15" fill="rgb(254,105,3)" fg:x="182" fg:w="1"/><text x="14.6716%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="14.4216%" y="645" width="0.0792%" height="15" fill="rgb(221,225,9)" fg:x="182" fg:w="1"/><text x="14.6716%" y="655.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="14.4216%" y="629" width="0.0792%" height="15" fill="rgb(224,227,45)" fg:x="182" fg:w="1"/><text x="14.6716%" y="639.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="14.4216%" y="613" width="0.0792%" height="15" fill="rgb(229,198,43)" fg:x="182" fg:w="1"/><text x="14.6716%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.4216%" y="597" width="0.0792%" height="15" fill="rgb(206,209,35)" fg:x="182" fg:w="1"/><text x="14.6716%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.4216%" y="581" width="0.0792%" height="15" fill="rgb(245,195,53)" fg:x="182" fg:w="1"/><text x="14.6716%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (4 samples, 0.32%)</title><rect x="14.2631%" y="709" width="0.3170%" height="15" fill="rgb(240,92,26)" fg:x="180" fg:w="4"/><text x="14.5131%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="14.5008%" y="693" width="0.0792%" height="15" fill="rgb(207,40,23)" fg:x="183" fg:w="1"/><text x="14.7508%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="14.5008%" y="677" width="0.0792%" height="15" fill="rgb(223,111,35)" fg:x="183" fg:w="1"/><text x="14.7508%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="14.5008%" y="661" width="0.0792%" height="15" fill="rgb(229,147,28)" fg:x="183" fg:w="1"/><text x="14.7508%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="14.5008%" y="645" width="0.0792%" height="15" fill="rgb(211,29,28)" fg:x="183" fg:w="1"/><text x="14.7508%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="14.5008%" y="629" width="0.0792%" height="15" fill="rgb(228,72,33)" fg:x="183" fg:w="1"/><text x="14.7508%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.5008%" y="613" width="0.0792%" height="15" fill="rgb(205,214,31)" fg:x="183" fg:w="1"/><text x="14.7508%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="14.5008%" y="597" width="0.0792%" height="15" fill="rgb(224,111,15)" fg:x="183" fg:w="1"/><text x="14.7508%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.5008%" y="581" width="0.0792%" height="15" fill="rgb(253,21,26)" fg:x="183" fg:w="1"/><text x="14.7508%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.5008%" y="565" width="0.0792%" height="15" fill="rgb(245,139,43)" fg:x="183" fg:w="1"/><text x="14.7508%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.5008%" y="549" width="0.0792%" height="15" fill="rgb(252,170,7)" fg:x="183" fg:w="1"/><text x="14.7508%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.5008%" y="533" width="0.0792%" height="15" fill="rgb(231,118,14)" fg:x="183" fg:w="1"/><text x="14.7508%" y="543.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="14.5800%" y="693" width="0.0792%" height="15" fill="rgb(238,83,0)" fg:x="184" fg:w="1"/><text x="14.8300%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="14.5800%" y="677" width="0.0792%" height="15" fill="rgb(221,39,39)" fg:x="184" fg:w="1"/><text x="14.8300%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="14.5800%" y="661" width="0.0792%" height="15" fill="rgb(222,119,46)" fg:x="184" fg:w="1"/><text x="14.8300%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.5800%" y="645" width="0.0792%" height="15" fill="rgb(222,165,49)" fg:x="184" fg:w="1"/><text x="14.8300%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.5800%" y="629" width="0.0792%" height="15" fill="rgb(219,113,52)" fg:x="184" fg:w="1"/><text x="14.8300%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5800%" y="613" width="0.0792%" height="15" fill="rgb(214,7,15)" fg:x="184" fg:w="1"/><text x="14.8300%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.5800%" y="597" width="0.0792%" height="15" fill="rgb(235,32,4)" fg:x="184" fg:w="1"/><text x="14.8300%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5800%" y="581" width="0.0792%" height="15" fill="rgb(238,90,54)" fg:x="184" fg:w="1"/><text x="14.8300%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.5800%" y="565" width="0.0792%" height="15" fill="rgb(213,208,19)" fg:x="184" fg:w="1"/><text x="14.8300%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.6593%" y="645" width="0.0792%" height="15" fill="rgb(233,156,4)" fg:x="185" fg:w="1"/><text x="14.9093%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="14.6593%" y="693" width="0.1585%" height="15" fill="rgb(207,194,5)" fg:x="185" fg:w="2"/><text x="14.9093%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="14.6593%" y="677" width="0.1585%" height="15" fill="rgb(206,111,30)" fg:x="185" fg:w="2"/><text x="14.9093%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="14.6593%" y="661" width="0.1585%" height="15" fill="rgb(243,70,54)" fg:x="185" fg:w="2"/><text x="14.9093%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="14.7385%" y="645" width="0.0792%" height="15" fill="rgb(242,28,8)" fg:x="186" fg:w="1"/><text x="14.9885%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="14.8177%" y="645" width="0.0792%" height="15" fill="rgb(219,106,18)" fg:x="187" fg:w="1"/><text x="15.0677%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.8177%" y="629" width="0.0792%" height="15" fill="rgb(244,222,10)" fg:x="187" fg:w="1"/><text x="15.0677%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.8177%" y="613" width="0.0792%" height="15" fill="rgb(236,179,52)" fg:x="187" fg:w="1"/><text x="15.0677%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.8177%" y="597" width="0.0792%" height="15" fill="rgb(213,23,39)" fg:x="187" fg:w="1"/><text x="15.0677%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.8177%" y="581" width="0.0792%" height="15" fill="rgb(238,48,10)" fg:x="187" fg:w="1"/><text x="15.0677%" y="591.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="14.5800%" y="709" width="0.4754%" height="15" fill="rgb(251,196,23)" fg:x="184" fg:w="6"/><text x="14.8300%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="14.8177%" y="693" width="0.2377%" height="15" fill="rgb(250,152,24)" fg:x="187" fg:w="3"/><text x="15.0677%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="14.8177%" y="677" width="0.2377%" height="15" fill="rgb(209,150,17)" fg:x="187" fg:w="3"/><text x="15.0677%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="14.8177%" y="661" width="0.2377%" height="15" fill="rgb(234,202,34)" fg:x="187" fg:w="3"/><text x="15.0677%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="14.8970%" y="645" width="0.1585%" height="15" fill="rgb(253,148,53)" fg:x="188" fg:w="2"/><text x="15.1470%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.9762%" y="629" width="0.0792%" height="15" fill="rgb(218,129,16)" fg:x="189" fg:w="1"/><text x="15.2262%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.9762%" y="613" width="0.0792%" height="15" fill="rgb(216,85,19)" fg:x="189" fg:w="1"/><text x="15.2262%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.9762%" y="597" width="0.0792%" height="15" fill="rgb(235,228,7)" fg:x="189" fg:w="1"/><text x="15.2262%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.9762%" y="581" width="0.0792%" height="15" fill="rgb(245,175,0)" fg:x="189" fg:w="1"/><text x="15.2262%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.9762%" y="565" width="0.0792%" height="15" fill="rgb(208,168,36)" fg:x="189" fg:w="1"/><text x="15.2262%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.9762%" y="549" width="0.0792%" height="15" fill="rgb(246,171,24)" fg:x="189" fg:w="1"/><text x="15.2262%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (77 samples, 6.10%)</title><rect x="9.0333%" y="725" width="6.1014%" height="15" fill="rgb(215,142,24)" fg:x="114" fg:w="77"/><text x="9.2833%" y="735.50">plugins_..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="15.0555%" y="709" width="0.0792%" height="15" fill="rgb(250,187,7)" fg:x="190" fg:w="1"/><text x="15.3055%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="15.0555%" y="693" width="0.0792%" height="15" fill="rgb(228,66,33)" fg:x="190" fg:w="1"/><text x="15.3055%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="15.1347%" y="693" width="0.0792%" height="15" fill="rgb(234,215,21)" fg:x="191" fg:w="1"/><text x="15.3847%" y="703.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="15.1347%" y="677" width="0.0792%" height="15" fill="rgb(222,191,20)" fg:x="191" fg:w="1"/><text x="15.3847%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.1347%" y="661" width="0.0792%" height="15" fill="rgb(245,79,54)" fg:x="191" fg:w="1"/><text x="15.3847%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="15.2139%" y="677" width="0.0792%" height="15" fill="rgb(240,10,37)" fg:x="192" fg:w="1"/><text x="15.4639%" y="687.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="15.2139%" y="661" width="0.0792%" height="15" fill="rgb(214,192,32)" fg:x="192" fg:w="1"/><text x="15.4639%" y="671.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="15.3724%" y="661" width="0.0792%" height="15" fill="rgb(209,36,54)" fg:x="194" fg:w="1"/><text x="15.6224%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="15.3724%" y="645" width="0.0792%" height="15" fill="rgb(220,10,11)" fg:x="194" fg:w="1"/><text x="15.6224%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="15.3724%" y="629" width="0.0792%" height="15" fill="rgb(221,106,17)" fg:x="194" fg:w="1"/><text x="15.6224%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.3724%" y="613" width="0.0792%" height="15" fill="rgb(251,142,44)" fg:x="194" fg:w="1"/><text x="15.6224%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="15.4517%" y="645" width="0.0792%" height="15" fill="rgb(238,13,15)" fg:x="195" fg:w="1"/><text x="15.7017%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="15.4517%" y="629" width="0.0792%" height="15" fill="rgb(208,107,27)" fg:x="195" fg:w="1"/><text x="15.7017%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="15.4517%" y="613" width="0.0792%" height="15" fill="rgb(205,136,37)" fg:x="195" fg:w="1"/><text x="15.7017%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.4517%" y="597" width="0.0792%" height="15" fill="rgb(250,205,27)" fg:x="195" fg:w="1"/><text x="15.7017%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="15.2139%" y="693" width="0.3962%" height="15" fill="rgb(210,80,43)" fg:x="192" fg:w="5"/><text x="15.4639%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="15.2932%" y="677" width="0.3170%" height="15" fill="rgb(247,160,36)" fg:x="193" fg:w="4"/><text x="15.5432%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="15.4517%" y="661" width="0.1585%" height="15" fill="rgb(234,13,49)" fg:x="195" fg:w="2"/><text x="15.7017%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="15.5309%" y="645" width="0.0792%" height="15" fill="rgb(234,122,0)" fg:x="196" fg:w="1"/><text x="15.7809%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.5309%" y="629" width="0.0792%" height="15" fill="rgb(207,146,38)" fg:x="196" fg:w="1"/><text x="15.7809%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="15.5309%" y="613" width="0.0792%" height="15" fill="rgb(207,177,25)" fg:x="196" fg:w="1"/><text x="15.7809%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (7 samples, 0.55%)</title><rect x="15.1347%" y="725" width="0.5547%" height="15" fill="rgb(211,178,42)" fg:x="191" fg:w="7"/><text x="15.3847%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (7 samples, 0.55%)</title><rect x="15.1347%" y="709" width="0.5547%" height="15" fill="rgb(230,69,54)" fg:x="191" fg:w="7"/><text x="15.3847%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="15.6101%" y="693" width="0.0792%" height="15" fill="rgb(214,135,41)" fg:x="197" fg:w="1"/><text x="15.8601%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="15.6101%" y="677" width="0.0792%" height="15" fill="rgb(237,67,25)" fg:x="197" fg:w="1"/><text x="15.8601%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="15.6101%" y="661" width="0.0792%" height="15" fill="rgb(222,189,50)" fg:x="197" fg:w="1"/><text x="15.8601%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.6101%" y="645" width="0.0792%" height="15" fill="rgb(245,148,34)" fg:x="197" fg:w="1"/><text x="15.8601%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.08%)</title><rect x="15.7686%" y="693" width="0.0792%" height="15" fill="rgb(222,29,6)" fg:x="199" fg:w="1"/><text x="16.0186%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.7686%" y="677" width="0.0792%" height="15" fill="rgb(221,189,43)" fg:x="199" fg:w="1"/><text x="16.0186%" y="687.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="15.8479%" y="677" width="0.0792%" height="15" fill="rgb(207,36,27)" fg:x="200" fg:w="1"/><text x="16.0979%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="15.8479%" y="661" width="0.0792%" height="15" fill="rgb(217,90,24)" fg:x="200" fg:w="1"/><text x="16.0979%" y="671.50"></text></g><g><title>plugins_core::build::Build::new_world (3 samples, 0.24%)</title><rect x="15.7686%" y="709" width="0.2377%" height="15" fill="rgb(224,66,35)" fg:x="199" fg:w="3"/><text x="16.0186%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="15.8479%" y="693" width="0.1585%" height="15" fill="rgb(221,13,50)" fg:x="200" fg:w="2"/><text x="16.0979%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.9271%" y="677" width="0.0792%" height="15" fill="rgb(236,68,49)" fg:x="201" fg:w="1"/><text x="16.1771%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.9271%" y="661" width="0.0792%" height="15" fill="rgb(229,146,28)" fg:x="201" fg:w="1"/><text x="16.1771%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="16.0063%" y="677" width="0.1585%" height="15" fill="rgb(225,31,38)" fg:x="202" fg:w="2"/><text x="16.2563%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="16.0063%" y="661" width="0.1585%" height="15" fill="rgb(250,208,3)" fg:x="202" fg:w="2"/><text x="16.2563%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.0063%" y="645" width="0.1585%" height="15" fill="rgb(246,54,23)" fg:x="202" fg:w="2"/><text x="16.2563%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="16.0063%" y="629" width="0.1585%" height="15" fill="rgb(243,76,11)" fg:x="202" fg:w="2"/><text x="16.2563%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.0063%" y="613" width="0.1585%" height="15" fill="rgb(245,21,50)" fg:x="202" fg:w="2"/><text x="16.2563%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.0856%" y="597" width="0.0792%" height="15" fill="rgb(228,9,43)" fg:x="203" fg:w="1"/><text x="16.3356%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.0856%" y="581" width="0.0792%" height="15" fill="rgb(208,100,47)" fg:x="203" fg:w="1"/><text x="16.3356%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="16.1648%" y="629" width="0.1585%" height="15" fill="rgb(232,26,8)" fg:x="204" fg:w="2"/><text x="16.4148%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.1648%" y="613" width="0.1585%" height="15" fill="rgb(216,166,38)" fg:x="204" fg:w="2"/><text x="16.4148%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.2441%" y="597" width="0.0792%" height="15" fill="rgb(251,202,51)" fg:x="205" fg:w="1"/><text x="16.4941%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.2441%" y="581" width="0.0792%" height="15" fill="rgb(254,216,34)" fg:x="205" fg:w="1"/><text x="16.4941%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="16.1648%" y="661" width="0.2377%" height="15" fill="rgb(251,32,27)" fg:x="204" fg:w="3"/><text x="16.4148%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="16.1648%" y="645" width="0.2377%" height="15" fill="rgb(208,127,28)" fg:x="204" fg:w="3"/><text x="16.4148%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="16.3233%" y="629" width="0.0792%" height="15" fill="rgb(224,137,22)" fg:x="206" fg:w="1"/><text x="16.5733%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="16.3233%" y="613" width="0.0792%" height="15" fill="rgb(254,70,32)" fg:x="206" fg:w="1"/><text x="16.5733%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="16.3233%" y="597" width="0.0792%" height="15" fill="rgb(229,75,37)" fg:x="206" fg:w="1"/><text x="16.5733%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="16.3233%" y="581" width="0.0792%" height="15" fill="rgb(252,64,23)" fg:x="206" fg:w="1"/><text x="16.5733%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.3233%" y="565" width="0.0792%" height="15" fill="rgb(232,162,48)" fg:x="206" fg:w="1"/><text x="16.5733%" y="575.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="16.4025%" y="661" width="0.0792%" height="15" fill="rgb(246,160,12)" fg:x="207" fg:w="1"/><text x="16.6525%" y="671.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="16.4818%" y="629" width="0.0792%" height="15" fill="rgb(247,166,0)" fg:x="208" fg:w="1"/><text x="16.7318%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.5610%" y="629" width="0.0792%" height="15" fill="rgb(249,219,21)" fg:x="209" fg:w="1"/><text x="16.8110%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.5610%" y="613" width="0.0792%" height="15" fill="rgb(205,209,3)" fg:x="209" fg:w="1"/><text x="16.8110%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="16.6403%" y="629" width="0.1585%" height="15" fill="rgb(243,44,1)" fg:x="210" fg:w="2"/><text x="16.8903%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="16.6403%" y="613" width="0.1585%" height="15" fill="rgb(206,159,16)" fg:x="210" fg:w="2"/><text x="16.8903%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="16.6403%" y="597" width="0.1585%" height="15" fill="rgb(244,77,30)" fg:x="210" fg:w="2"/><text x="16.8903%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="16.6403%" y="581" width="0.1585%" height="15" fill="rgb(218,69,12)" fg:x="210" fg:w="2"/><text x="16.8903%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="16.7195%" y="565" width="0.0792%" height="15" fill="rgb(212,87,7)" fg:x="211" fg:w="1"/><text x="16.9695%" y="575.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (143 samples, 11.33%)</title><rect x="5.5468%" y="741" width="11.3312%" height="15" fill="rgb(245,114,25)" fg:x="70" fg:w="143"/><text x="5.7968%" y="751.50">&lt;tests::HoldingKe..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (15 samples, 1.19%)</title><rect x="15.6894%" y="725" width="1.1886%" height="15" fill="rgb(210,61,42)" fg:x="198" fg:w="15"/><text x="15.9394%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (11 samples, 0.87%)</title><rect x="16.0063%" y="709" width="0.8716%" height="15" fill="rgb(211,52,33)" fg:x="202" fg:w="11"/><text x="16.2563%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (11 samples, 0.87%)</title><rect x="16.0063%" y="693" width="0.8716%" height="15" fill="rgb(234,58,33)" fg:x="202" fg:w="11"/><text x="16.2563%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (9 samples, 0.71%)</title><rect x="16.1648%" y="677" width="0.7132%" height="15" fill="rgb(220,115,36)" fg:x="204" fg:w="9"/><text x="16.4148%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="16.4818%" y="661" width="0.3962%" height="15" fill="rgb(243,153,54)" fg:x="208" fg:w="5"/><text x="16.7318%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="16.4818%" y="645" width="0.3962%" height="15" fill="rgb(251,47,18)" fg:x="208" fg:w="5"/><text x="16.7318%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="16.7987%" y="629" width="0.0792%" height="15" fill="rgb(242,102,42)" fg:x="212" fg:w="1"/><text x="17.0487%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="16.7987%" y="613" width="0.0792%" height="15" fill="rgb(234,31,38)" fg:x="212" fg:w="1"/><text x="17.0487%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="16.7987%" y="597" width="0.0792%" height="15" fill="rgb(221,117,51)" fg:x="212" fg:w="1"/><text x="17.0487%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="16.7987%" y="581" width="0.0792%" height="15" fill="rgb(212,20,18)" fg:x="212" fg:w="1"/><text x="17.0487%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="16.7987%" y="565" width="0.0792%" height="15" fill="rgb(245,133,36)" fg:x="212" fg:w="1"/><text x="17.0487%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="16.7987%" y="549" width="0.0792%" height="15" fill="rgb(212,6,19)" fg:x="212" fg:w="1"/><text x="17.0487%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.7987%" y="533" width="0.0792%" height="15" fill="rgb(218,1,36)" fg:x="212" fg:w="1"/><text x="17.0487%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="16.8780%" y="741" width="0.0792%" height="15" fill="rgb(246,84,54)" fg:x="213" fg:w="1"/><text x="17.1280%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="16.8780%" y="725" width="0.0792%" height="15" fill="rgb(242,110,6)" fg:x="213" fg:w="1"/><text x="17.1280%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::plugins::RegisteredPlugins&gt; (1 samples, 0.08%)</title><rect x="16.8780%" y="709" width="0.0792%" height="15" fill="rgb(214,47,5)" fg:x="213" fg:w="1"/><text x="17.1280%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (2 samples, 0.16%)</title><rect x="16.9572%" y="741" width="0.1585%" height="15" fill="rgb(218,159,25)" fg:x="214" fg:w="2"/><text x="17.2072%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="16.9572%" y="725" width="0.1585%" height="15" fill="rgb(215,211,28)" fg:x="214" fg:w="2"/><text x="17.2072%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="16.9572%" y="709" width="0.1585%" height="15" fill="rgb(238,59,32)" fg:x="214" fg:w="2"/><text x="17.2072%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="16.9572%" y="693" width="0.1585%" height="15" fill="rgb(226,82,3)" fg:x="214" fg:w="2"/><text x="17.2072%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="17.0365%" y="677" width="0.0792%" height="15" fill="rgb(240,164,32)" fg:x="215" fg:w="1"/><text x="17.2865%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.0365%" y="661" width="0.0792%" height="15" fill="rgb(232,46,7)" fg:x="215" fg:w="1"/><text x="17.2865%" y="671.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="17.1157%" y="725" width="0.0792%" height="15" fill="rgb(229,129,53)" fg:x="216" fg:w="1"/><text x="17.3657%" y="735.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="17.1949%" y="725" width="0.0792%" height="15" fill="rgb(234,188,29)" fg:x="217" fg:w="1"/><text x="17.4449%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.1949%" y="709" width="0.0792%" height="15" fill="rgb(246,141,4)" fg:x="217" fg:w="1"/><text x="17.4449%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.1949%" y="693" width="0.0792%" height="15" fill="rgb(229,23,39)" fg:x="217" fg:w="1"/><text x="17.4449%" y="703.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="17.2742%" y="725" width="0.0792%" height="15" fill="rgb(206,12,3)" fg:x="218" fg:w="1"/><text x="17.5242%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="17.2742%" y="709" width="0.0792%" height="15" fill="rgb(252,226,20)" fg:x="218" fg:w="1"/><text x="17.5242%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="17.2742%" y="693" width="0.0792%" height="15" fill="rgb(216,123,35)" fg:x="218" fg:w="1"/><text x="17.5242%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.2742%" y="677" width="0.0792%" height="15" fill="rgb(212,68,40)" fg:x="218" fg:w="1"/><text x="17.5242%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="17.2742%" y="661" width="0.0792%" height="15" fill="rgb(254,125,32)" fg:x="218" fg:w="1"/><text x="17.5242%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="17.2742%" y="645" width="0.0792%" height="15" fill="rgb(253,97,22)" fg:x="218" fg:w="1"/><text x="17.5242%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="17.2742%" y="629" width="0.0792%" height="15" fill="rgb(241,101,14)" fg:x="218" fg:w="1"/><text x="17.5242%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="17.2742%" y="613" width="0.0792%" height="15" fill="rgb(238,103,29)" fg:x="218" fg:w="1"/><text x="17.5242%" y="623.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="17.3534%" y="725" width="0.0792%" height="15" fill="rgb(233,195,47)" fg:x="219" fg:w="1"/><text x="17.6034%" y="735.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="17.3534%" y="709" width="0.0792%" height="15" fill="rgb(246,218,30)" fg:x="219" fg:w="1"/><text x="17.6034%" y="719.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="17.3534%" y="693" width="0.0792%" height="15" fill="rgb(219,145,47)" fg:x="219" fg:w="1"/><text x="17.6034%" y="703.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="17.3534%" y="677" width="0.0792%" height="15" fill="rgb(243,12,26)" fg:x="219" fg:w="1"/><text x="17.6034%" y="687.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="17.3534%" y="661" width="0.0792%" height="15" fill="rgb(214,87,16)" fg:x="219" fg:w="1"/><text x="17.6034%" y="671.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="17.3534%" y="645" width="0.0792%" height="15" fill="rgb(208,99,42)" fg:x="219" fg:w="1"/><text x="17.6034%" y="655.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="17.3534%" y="629" width="0.0792%" height="15" fill="rgb(253,99,2)" fg:x="219" fg:w="1"/><text x="17.6034%" y="639.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="17.3534%" y="613" width="0.0792%" height="15" fill="rgb(220,168,23)" fg:x="219" fg:w="1"/><text x="17.6034%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="17.4326%" y="693" width="0.0792%" height="15" fill="rgb(242,38,24)" fg:x="220" fg:w="1"/><text x="17.6826%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="17.6704%" y="645" width="0.0792%" height="15" fill="rgb(225,182,9)" fg:x="223" fg:w="1"/><text x="17.9204%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="17.6704%" y="629" width="0.0792%" height="15" fill="rgb(243,178,37)" fg:x="223" fg:w="1"/><text x="17.9204%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="17.6704%" y="613" width="0.0792%" height="15" fill="rgb(232,139,19)" fg:x="223" fg:w="1"/><text x="17.9204%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.6704%" y="597" width="0.0792%" height="15" fill="rgb(225,201,24)" fg:x="223" fg:w="1"/><text x="17.9204%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.6704%" y="581" width="0.0792%" height="15" fill="rgb(221,47,46)" fg:x="223" fg:w="1"/><text x="17.9204%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="17.6704%" y="565" width="0.0792%" height="15" fill="rgb(249,23,13)" fg:x="223" fg:w="1"/><text x="17.9204%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.6704%" y="549" width="0.0792%" height="15" fill="rgb(219,9,5)" fg:x="223" fg:w="1"/><text x="17.9204%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.6704%" y="533" width="0.0792%" height="15" fill="rgb(254,171,16)" fg:x="223" fg:w="1"/><text x="17.9204%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="17.7496%" y="629" width="0.2377%" height="15" fill="rgb(230,171,20)" fg:x="224" fg:w="3"/><text x="17.9996%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="17.7496%" y="613" width="0.2377%" height="15" fill="rgb(210,71,41)" fg:x="224" fg:w="3"/><text x="17.9996%" y="623.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="17.7496%" y="597" width="0.2377%" height="15" fill="rgb(206,173,20)" fg:x="224" fg:w="3"/><text x="17.9996%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="17.7496%" y="581" width="0.2377%" height="15" fill="rgb(233,88,34)" fg:x="224" fg:w="3"/><text x="17.9996%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="17.7496%" y="565" width="0.2377%" height="15" fill="rgb(223,209,46)" fg:x="224" fg:w="3"/><text x="17.9996%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="18.0666%" y="613" width="0.3170%" height="15" fill="rgb(250,43,18)" fg:x="228" fg:w="4"/><text x="18.3166%" y="623.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="18.0666%" y="597" width="0.3170%" height="15" fill="rgb(208,13,10)" fg:x="228" fg:w="4"/><text x="18.3166%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="18.3835%" y="597" width="0.0792%" height="15" fill="rgb(212,200,36)" fg:x="232" fg:w="1"/><text x="18.6335%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="18.3835%" y="581" width="0.0792%" height="15" fill="rgb(225,90,30)" fg:x="232" fg:w="1"/><text x="18.6335%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="18.3835%" y="565" width="0.0792%" height="15" fill="rgb(236,182,39)" fg:x="232" fg:w="1"/><text x="18.6335%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="18.3835%" y="549" width="0.0792%" height="15" fill="rgb(212,144,35)" fg:x="232" fg:w="1"/><text x="18.6335%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="18.3835%" y="533" width="0.0792%" height="15" fill="rgb(228,63,44)" fg:x="232" fg:w="1"/><text x="18.6335%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.3835%" y="517" width="0.0792%" height="15" fill="rgb(228,109,6)" fg:x="232" fg:w="1"/><text x="18.6335%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.3835%" y="501" width="0.0792%" height="15" fill="rgb(238,117,24)" fg:x="232" fg:w="1"/><text x="18.6335%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="18.4628%" y="597" width="0.0792%" height="15" fill="rgb(242,26,26)" fg:x="233" fg:w="1"/><text x="18.7128%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.7005%" y="517" width="0.0792%" height="15" fill="rgb(221,92,48)" fg:x="236" fg:w="1"/><text x="18.9505%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="18.7005%" y="565" width="0.1585%" height="15" fill="rgb(209,209,32)" fg:x="236" fg:w="2"/><text x="18.9505%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="18.7005%" y="549" width="0.1585%" height="15" fill="rgb(221,70,22)" fg:x="236" fg:w="2"/><text x="18.9505%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="18.7005%" y="533" width="0.1585%" height="15" fill="rgb(248,145,5)" fg:x="236" fg:w="2"/><text x="18.9505%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="18.7797%" y="517" width="0.0792%" height="15" fill="rgb(226,116,26)" fg:x="237" fg:w="1"/><text x="19.0297%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.55%)</title><rect x="18.3835%" y="613" width="0.5547%" height="15" fill="rgb(244,5,17)" fg:x="232" fg:w="7"/><text x="18.6335%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="18.5420%" y="597" width="0.3962%" height="15" fill="rgb(252,159,33)" fg:x="234" fg:w="5"/><text x="18.7920%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="18.6212%" y="581" width="0.3170%" height="15" fill="rgb(206,71,0)" fg:x="235" fg:w="4"/><text x="18.8712%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.8590%" y="565" width="0.0792%" height="15" fill="rgb(233,118,54)" fg:x="238" fg:w="1"/><text x="19.1090%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.8590%" y="549" width="0.0792%" height="15" fill="rgb(234,83,48)" fg:x="238" fg:w="1"/><text x="19.1090%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.8590%" y="533" width="0.0792%" height="15" fill="rgb(228,3,54)" fg:x="238" fg:w="1"/><text x="19.1090%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (19 samples, 1.51%)</title><rect x="17.7496%" y="645" width="1.5055%" height="15" fill="rgb(226,155,13)" fg:x="224" fg:w="19"/><text x="17.9996%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.27%)</title><rect x="17.9873%" y="629" width="1.2678%" height="15" fill="rgb(241,28,37)" fg:x="227" fg:w="16"/><text x="18.2373%" y="639.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="18.9382%" y="613" width="0.3170%" height="15" fill="rgb(233,93,10)" fg:x="239" fg:w="4"/><text x="19.1882%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="19.0174%" y="597" width="0.2377%" height="15" fill="rgb(225,113,19)" fg:x="240" fg:w="3"/><text x="19.2674%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="19.0174%" y="581" width="0.2377%" height="15" fill="rgb(241,2,18)" fg:x="240" fg:w="3"/><text x="19.2674%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="19.1759%" y="565" width="0.0792%" height="15" fill="rgb(228,207,21)" fg:x="242" fg:w="1"/><text x="19.4259%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.1759%" y="549" width="0.0792%" height="15" fill="rgb(213,211,35)" fg:x="242" fg:w="1"/><text x="19.4259%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.1759%" y="533" width="0.0792%" height="15" fill="rgb(209,83,10)" fg:x="242" fg:w="1"/><text x="19.4259%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.3344%" y="597" width="0.0792%" height="15" fill="rgb(209,164,1)" fg:x="244" fg:w="1"/><text x="19.5844%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.4136%" y="597" width="0.0792%" height="15" fill="rgb(213,184,43)" fg:x="245" fg:w="1"/><text x="19.6636%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.4136%" y="581" width="0.0792%" height="15" fill="rgb(231,61,34)" fg:x="245" fg:w="1"/><text x="19.6636%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.4929%" y="581" width="0.0792%" height="15" fill="rgb(235,75,3)" fg:x="246" fg:w="1"/><text x="19.7429%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="19.5721%" y="581" width="0.1585%" height="15" fill="rgb(220,106,47)" fg:x="247" fg:w="2"/><text x="19.8221%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.6513%" y="565" width="0.0792%" height="15" fill="rgb(210,196,33)" fg:x="248" fg:w="1"/><text x="19.9013%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.7306%" y="565" width="0.0792%" height="15" fill="rgb(229,154,42)" fg:x="249" fg:w="1"/><text x="19.9806%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.8098%" y="565" width="0.0792%" height="15" fill="rgb(228,114,26)" fg:x="250" fg:w="1"/><text x="20.0598%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.71%)</title><rect x="19.2552%" y="645" width="0.7132%" height="15" fill="rgb(208,144,1)" fg:x="243" fg:w="9"/><text x="19.5052%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.63%)</title><rect x="19.3344%" y="629" width="0.6339%" height="15" fill="rgb(239,112,37)" fg:x="244" fg:w="8"/><text x="19.5844%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.63%)</title><rect x="19.3344%" y="613" width="0.6339%" height="15" fill="rgb(210,96,50)" fg:x="244" fg:w="8"/><text x="19.5844%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="19.4929%" y="597" width="0.4754%" height="15" fill="rgb(222,178,2)" fg:x="246" fg:w="6"/><text x="19.7429%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="19.7306%" y="581" width="0.2377%" height="15" fill="rgb(226,74,18)" fg:x="249" fg:w="3"/><text x="19.9806%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="19.8891%" y="565" width="0.0792%" height="15" fill="rgb(225,67,54)" fg:x="251" fg:w="1"/><text x="20.1391%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="19.8891%" y="549" width="0.0792%" height="15" fill="rgb(251,92,32)" fg:x="251" fg:w="1"/><text x="20.1391%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="19.8891%" y="533" width="0.0792%" height="15" fill="rgb(228,149,22)" fg:x="251" fg:w="1"/><text x="20.1391%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.8891%" y="517" width="0.0792%" height="15" fill="rgb(243,54,13)" fg:x="251" fg:w="1"/><text x="20.1391%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.8891%" y="501" width="0.0792%" height="15" fill="rgb(243,180,28)" fg:x="251" fg:w="1"/><text x="20.1391%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="19.9683%" y="597" width="0.1585%" height="15" fill="rgb(208,167,24)" fg:x="252" fg:w="2"/><text x="20.2183%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="19.9683%" y="581" width="0.1585%" height="15" fill="rgb(245,73,45)" fg:x="252" fg:w="2"/><text x="20.2183%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="20.1268%" y="581" width="0.1585%" height="15" fill="rgb(237,203,48)" fg:x="254" fg:w="2"/><text x="20.3768%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.2853%" y="581" width="0.0792%" height="15" fill="rgb(211,197,16)" fg:x="256" fg:w="1"/><text x="20.5353%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.2853%" y="565" width="0.0792%" height="15" fill="rgb(243,99,51)" fg:x="256" fg:w="1"/><text x="20.5353%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.3645%" y="565" width="0.0792%" height="15" fill="rgb(215,123,29)" fg:x="257" fg:w="1"/><text x="20.6145%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.4437%" y="549" width="0.0792%" height="15" fill="rgb(239,186,37)" fg:x="258" fg:w="1"/><text x="20.6937%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.4437%" y="533" width="0.0792%" height="15" fill="rgb(252,136,39)" fg:x="258" fg:w="1"/><text x="20.6937%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.5230%" y="517" width="0.0792%" height="15" fill="rgb(223,213,32)" fg:x="259" fg:w="1"/><text x="20.7730%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.71%)</title><rect x="19.9683%" y="613" width="0.7132%" height="15" fill="rgb(233,115,5)" fg:x="252" fg:w="9"/><text x="20.2183%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.55%)</title><rect x="20.1268%" y="597" width="0.5547%" height="15" fill="rgb(207,226,44)" fg:x="254" fg:w="7"/><text x="20.3768%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="20.3645%" y="581" width="0.3170%" height="15" fill="rgb(208,126,0)" fg:x="257" fg:w="4"/><text x="20.6145%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="20.4437%" y="565" width="0.2377%" height="15" fill="rgb(244,66,21)" fg:x="258" fg:w="3"/><text x="20.6937%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="20.5230%" y="549" width="0.1585%" height="15" fill="rgb(222,97,12)" fg:x="259" fg:w="2"/><text x="20.7730%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="20.5230%" y="533" width="0.1585%" height="15" fill="rgb(219,213,19)" fg:x="259" fg:w="2"/><text x="20.7730%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.6022%" y="517" width="0.0792%" height="15" fill="rgb(252,169,30)" fg:x="260" fg:w="1"/><text x="20.8522%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (11 samples, 0.87%)</title><rect x="19.9683%" y="629" width="0.8716%" height="15" fill="rgb(206,32,51)" fg:x="252" fg:w="11"/><text x="20.2183%" y="639.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="20.6815%" y="613" width="0.1585%" height="15" fill="rgb(250,172,42)" fg:x="261" fg:w="2"/><text x="20.9315%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="20.6815%" y="597" width="0.1585%" height="15" fill="rgb(209,34,43)" fg:x="261" fg:w="2"/><text x="20.9315%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="20.6815%" y="581" width="0.1585%" height="15" fill="rgb(223,11,35)" fg:x="261" fg:w="2"/><text x="20.9315%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.8399%" y="597" width="0.0792%" height="15" fill="rgb(251,219,26)" fg:x="263" fg:w="1"/><text x="21.0899%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="20.9192%" y="597" width="0.1585%" height="15" fill="rgb(231,119,3)" fg:x="264" fg:w="2"/><text x="21.1692%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.0777%" y="565" width="0.0792%" height="15" fill="rgb(216,97,11)" fg:x="266" fg:w="1"/><text x="21.3277%" y="575.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (3 samples, 0.24%)</title><rect x="21.0777%" y="597" width="0.2377%" height="15" fill="rgb(223,59,9)" fg:x="266" fg:w="3"/><text x="21.3277%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="21.0777%" y="581" width="0.2377%" height="15" fill="rgb(233,93,31)" fg:x="266" fg:w="3"/><text x="21.3277%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="21.1569%" y="565" width="0.1585%" height="15" fill="rgb(239,81,33)" fg:x="267" fg:w="2"/><text x="21.4069%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="21.2361%" y="549" width="0.0792%" height="15" fill="rgb(213,120,34)" fg:x="268" fg:w="1"/><text x="21.4861%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="21.4739%" y="565" width="0.0792%" height="15" fill="rgb(243,49,53)" fg:x="271" fg:w="1"/><text x="21.7239%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.5531%" y="549" width="0.0792%" height="15" fill="rgb(247,216,33)" fg:x="272" fg:w="1"/><text x="21.8031%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="21.6323%" y="549" width="0.0792%" height="15" fill="rgb(226,26,14)" fg:x="273" fg:w="1"/><text x="21.8823%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="21.6323%" y="533" width="0.0792%" height="15" fill="rgb(215,49,53)" fg:x="273" fg:w="1"/><text x="21.8823%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="21.6323%" y="517" width="0.0792%" height="15" fill="rgb(245,162,40)" fg:x="273" fg:w="1"/><text x="21.8823%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="21.7116%" y="533" width="0.0792%" height="15" fill="rgb(229,68,17)" fg:x="274" fg:w="1"/><text x="21.9616%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.8700%" y="517" width="0.0792%" height="15" fill="rgb(213,182,10)" fg:x="276" fg:w="1"/><text x="22.1200%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.8700%" y="501" width="0.0792%" height="15" fill="rgb(245,125,30)" fg:x="276" fg:w="1"/><text x="22.1200%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.9493%" y="485" width="0.0792%" height="15" fill="rgb(232,202,2)" fg:x="277" fg:w="1"/><text x="22.1993%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.55%)</title><rect x="21.5531%" y="565" width="0.5547%" height="15" fill="rgb(237,140,51)" fg:x="272" fg:w="7"/><text x="21.8031%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="21.7116%" y="549" width="0.3962%" height="15" fill="rgb(236,157,25)" fg:x="274" fg:w="5"/><text x="21.9616%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="21.7908%" y="533" width="0.3170%" height="15" fill="rgb(219,209,0)" fg:x="275" fg:w="4"/><text x="22.0408%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="21.9493%" y="517" width="0.1585%" height="15" fill="rgb(240,116,54)" fg:x="277" fg:w="2"/><text x="22.1993%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="21.9493%" y="501" width="0.1585%" height="15" fill="rgb(216,10,36)" fg:x="277" fg:w="2"/><text x="22.1993%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="22.0285%" y="485" width="0.0792%" height="15" fill="rgb(222,72,44)" fg:x="278" fg:w="1"/><text x="22.2785%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.71%)</title><rect x="21.4739%" y="581" width="0.7132%" height="15" fill="rgb(232,159,9)" fg:x="271" fg:w="9"/><text x="21.7239%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="22.1078%" y="565" width="0.0792%" height="15" fill="rgb(210,39,32)" fg:x="279" fg:w="1"/><text x="22.3578%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.1078%" y="549" width="0.0792%" height="15" fill="rgb(216,194,45)" fg:x="279" fg:w="1"/><text x="22.3578%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.1870%" y="581" width="0.0792%" height="15" fill="rgb(218,18,35)" fg:x="280" fg:w="1"/><text x="22.4370%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (19 samples, 1.51%)</title><rect x="20.8399%" y="629" width="1.5055%" height="15" fill="rgb(207,83,51)" fg:x="263" fg:w="19"/><text x="21.0899%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (19 samples, 1.51%)</title><rect x="20.8399%" y="613" width="1.5055%" height="15" fill="rgb(225,63,43)" fg:x="263" fg:w="19"/><text x="21.0899%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (13 samples, 1.03%)</title><rect x="21.3154%" y="597" width="1.0301%" height="15" fill="rgb(207,57,36)" fg:x="269" fg:w="13"/><text x="21.5654%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.2662%" y="581" width="0.0792%" height="15" fill="rgb(216,99,33)" fg:x="281" fg:w="1"/><text x="22.5162%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="22.2662%" y="565" width="0.0792%" height="15" fill="rgb(225,42,16)" fg:x="281" fg:w="1"/><text x="22.5162%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="22.5832%" y="389" width="0.0792%" height="15" fill="rgb(220,201,45)" fg:x="285" fg:w="1"/><text x="22.8332%" y="399.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="22.5832%" y="373" width="0.0792%" height="15" fill="rgb(225,33,4)" fg:x="285" fg:w="1"/><text x="22.8332%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="22.5832%" y="453" width="0.1585%" height="15" fill="rgb(224,33,50)" fg:x="285" fg:w="2"/><text x="22.8332%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="22.5832%" y="437" width="0.1585%" height="15" fill="rgb(246,198,51)" fg:x="285" fg:w="2"/><text x="22.8332%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="22.5832%" y="421" width="0.1585%" height="15" fill="rgb(205,22,4)" fg:x="285" fg:w="2"/><text x="22.8332%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="22.5832%" y="405" width="0.1585%" height="15" fill="rgb(206,3,8)" fg:x="285" fg:w="2"/><text x="22.8332%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.6624%" y="389" width="0.0792%" height="15" fill="rgb(251,23,15)" fg:x="286" fg:w="1"/><text x="22.9124%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.6624%" y="373" width="0.0792%" height="15" fill="rgb(252,88,28)" fg:x="286" fg:w="1"/><text x="22.9124%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.6624%" y="357" width="0.0792%" height="15" fill="rgb(212,127,14)" fg:x="286" fg:w="1"/><text x="22.9124%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="22.7417%" y="453" width="0.0792%" height="15" fill="rgb(247,145,37)" fg:x="287" fg:w="1"/><text x="22.9917%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="22.7417%" y="437" width="0.0792%" height="15" fill="rgb(209,117,53)" fg:x="287" fg:w="1"/><text x="22.9917%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="22.5832%" y="485" width="0.3170%" height="15" fill="rgb(212,90,42)" fg:x="285" fg:w="4"/><text x="22.8332%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="22.5832%" y="469" width="0.3170%" height="15" fill="rgb(218,164,37)" fg:x="285" fg:w="4"/><text x="22.8332%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.8209%" y="453" width="0.0792%" height="15" fill="rgb(246,65,34)" fg:x="288" fg:w="1"/><text x="23.0709%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.8209%" y="437" width="0.0792%" height="15" fill="rgb(231,100,33)" fg:x="288" fg:w="1"/><text x="23.0709%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.8209%" y="421" width="0.0792%" height="15" fill="rgb(228,126,14)" fg:x="288" fg:w="1"/><text x="23.0709%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="22.9002%" y="469" width="0.0792%" height="15" fill="rgb(215,173,21)" fg:x="289" fg:w="1"/><text x="23.1502%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="22.9002%" y="453" width="0.0792%" height="15" fill="rgb(210,6,40)" fg:x="289" fg:w="1"/><text x="23.1502%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="22.5832%" y="501" width="0.4754%" height="15" fill="rgb(212,48,18)" fg:x="285" fg:w="6"/><text x="22.8332%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="22.9002%" y="485" width="0.1585%" height="15" fill="rgb(230,214,11)" fg:x="289" fg:w="2"/><text x="23.1502%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.9794%" y="469" width="0.0792%" height="15" fill="rgb(254,105,39)" fg:x="290" fg:w="1"/><text x="23.2294%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.9794%" y="453" width="0.0792%" height="15" fill="rgb(245,158,5)" fg:x="290" fg:w="1"/><text x="23.2294%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.9794%" y="437" width="0.0792%" height="15" fill="rgb(249,208,11)" fg:x="290" fg:w="1"/><text x="23.2294%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="23.1379%" y="485" width="0.0792%" height="15" fill="rgb(210,39,28)" fg:x="292" fg:w="1"/><text x="23.3879%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.79%)</title><rect x="22.5040%" y="533" width="0.7924%" height="15" fill="rgb(211,56,53)" fg:x="284" fg:w="10"/><text x="22.7540%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.79%)</title><rect x="22.5040%" y="517" width="0.7924%" height="15" fill="rgb(226,201,30)" fg:x="284" fg:w="10"/><text x="22.7540%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="23.0586%" y="501" width="0.2377%" height="15" fill="rgb(239,101,34)" fg:x="291" fg:w="3"/><text x="23.3086%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.2171%" y="485" width="0.0792%" height="15" fill="rgb(226,209,5)" fg:x="293" fg:w="1"/><text x="23.4671%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="23.2964%" y="533" width="0.1585%" height="15" fill="rgb(250,105,47)" fg:x="294" fg:w="2"/><text x="23.5464%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.3756%" y="517" width="0.0792%" height="15" fill="rgb(230,72,3)" fg:x="295" fg:w="1"/><text x="23.6256%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (15 samples, 1.19%)</title><rect x="22.4247%" y="565" width="1.1886%" height="15" fill="rgb(232,218,39)" fg:x="283" fg:w="15"/><text x="22.6747%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (15 samples, 1.19%)</title><rect x="22.4247%" y="549" width="1.1886%" height="15" fill="rgb(248,166,6)" fg:x="283" fg:w="15"/><text x="22.6747%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="23.4548%" y="533" width="0.1585%" height="15" fill="rgb(247,89,20)" fg:x="296" fg:w="2"/><text x="23.7048%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.5341%" y="517" width="0.0792%" height="15" fill="rgb(248,130,54)" fg:x="297" fg:w="1"/><text x="23.7841%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.5341%" y="501" width="0.0792%" height="15" fill="rgb(234,196,4)" fg:x="297" fg:w="1"/><text x="23.7841%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="23.6133%" y="565" width="0.0792%" height="15" fill="rgb(250,143,31)" fg:x="298" fg:w="1"/><text x="23.8633%" y="575.50"></text></g><g><title>engine::session::Session::close (85 samples, 6.74%)</title><rect x="17.1157%" y="741" width="6.7353%" height="15" fill="rgb(211,110,34)" fg:x="216" fg:w="85"/><text x="17.3657%" y="751.50">engine::s..</text></g><g><title>engine::session::state::State::close (81 samples, 6.42%)</title><rect x="17.4326%" y="725" width="6.4184%" height="15" fill="rgb(215,124,48)" fg:x="220" fg:w="81"/><text x="17.6826%" y="735.50">engine::..</text></g><g><title>engine::session::state::State::flush_entities (81 samples, 6.42%)</title><rect x="17.4326%" y="709" width="6.4184%" height="15" fill="rgb(216,46,13)" fg:x="220" fg:w="81"/><text x="17.6826%" y="719.50">engine::..</text></g><g><title>core::iter::adapters::try_process (80 samples, 6.34%)</title><rect x="17.5119%" y="693" width="6.3391%" height="15" fill="rgb(205,184,25)" fg:x="221" fg:w="80"/><text x="17.7619%" y="703.50">core::it..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (80 samples, 6.34%)</title><rect x="17.5119%" y="677" width="6.3391%" height="15" fill="rgb(228,1,10)" fg:x="221" fg:w="80"/><text x="17.7619%" y="687.50">&lt;alloc::..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (80 samples, 6.34%)</title><rect x="17.5119%" y="661" width="6.3391%" height="15" fill="rgb(213,116,27)" fg:x="221" fg:w="80"/><text x="17.7619%" y="671.50">engine::..</text></g><g><title>kernel::model::any_entity_changes (49 samples, 3.88%)</title><rect x="19.9683%" y="645" width="3.8827%" height="15" fill="rgb(241,95,50)" fg:x="252" fg:w="49"/><text x="20.2183%" y="655.50">kern..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (19 samples, 1.51%)</title><rect x="22.3455%" y="629" width="1.5055%" height="15" fill="rgb(238,48,32)" fg:x="282" fg:w="19"/><text x="22.5955%" y="639.50"></text></g><g><title>serde_json::de::from_trait (19 samples, 1.51%)</title><rect x="22.3455%" y="613" width="1.5055%" height="15" fill="rgb(235,113,49)" fg:x="282" fg:w="19"/><text x="22.5955%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19 samples, 1.51%)</title><rect x="22.3455%" y="597" width="1.5055%" height="15" fill="rgb(205,127,43)" fg:x="282" fg:w="19"/><text x="22.5955%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (18 samples, 1.43%)</title><rect x="22.4247%" y="581" width="1.4263%" height="15" fill="rgb(250,162,2)" fg:x="283" fg:w="18"/><text x="22.6747%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="23.6926%" y="565" width="0.1585%" height="15" fill="rgb(220,13,41)" fg:x="299" fg:w="2"/><text x="23.9426%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.7718%" y="549" width="0.0792%" height="15" fill="rgb(249,221,25)" fg:x="300" fg:w="1"/><text x="24.0218%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="23.7718%" y="533" width="0.0792%" height="15" fill="rgb(215,208,19)" fg:x="300" fg:w="1"/><text x="24.0218%" y="543.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="23.8510%" y="709" width="0.1585%" height="15" fill="rgb(236,175,2)" fg:x="301" fg:w="2"/><text x="24.1010%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="23.8510%" y="693" width="0.1585%" height="15" fill="rgb(241,52,2)" fg:x="301" fg:w="2"/><text x="24.1010%" y="703.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="23.8510%" y="677" width="0.1585%" height="15" fill="rgb(248,140,14)" fg:x="301" fg:w="2"/><text x="24.1010%" y="687.50"></text></g><g><title>&lt;plugins_core::looking::parser::LookActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="23.8510%" y="661" width="0.1585%" height="15" fill="rgb(253,22,42)" fg:x="301" fg:w="2"/><text x="24.1010%" y="671.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2 samples, 0.16%)</title><rect x="23.8510%" y="645" width="0.1585%" height="15" fill="rgb(234,61,47)" fg:x="301" fg:w="2"/><text x="24.1010%" y="655.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="23.9303%" y="629" width="0.0792%" height="15" fill="rgb(208,226,15)" fg:x="302" fg:w="1"/><text x="24.1803%" y="639.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputTakeAtPosition&gt;::split_at_position1_complete (1 samples, 0.08%)</title><rect x="23.9303%" y="613" width="0.0792%" height="15" fill="rgb(217,221,4)" fg:x="302" fg:w="1"/><text x="24.1803%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="24.0887%" y="693" width="0.1585%" height="15" fill="rgb(212,174,34)" fg:x="304" fg:w="2"/><text x="24.3387%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="24.0887%" y="677" width="0.1585%" height="15" fill="rgb(253,83,4)" fg:x="304" fg:w="2"/><text x="24.3387%" y="687.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="24.0887%" y="661" width="0.1585%" height="15" fill="rgb(250,195,49)" fg:x="304" fg:w="2"/><text x="24.3387%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="24.0887%" y="645" width="0.1585%" height="15" fill="rgb(241,192,25)" fg:x="304" fg:w="2"/><text x="24.3387%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="24.0887%" y="629" width="0.1585%" height="15" fill="rgb(208,124,10)" fg:x="304" fg:w="2"/><text x="24.3387%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (2 samples, 0.16%)</title><rect x="24.0887%" y="613" width="0.1585%" height="15" fill="rgb(222,33,0)" fg:x="304" fg:w="2"/><text x="24.3387%" y="623.50"></text></g><g><title>core::fmt::builders::debug_struct_new (2 samples, 0.16%)</title><rect x="24.0887%" y="597" width="0.1585%" height="15" fill="rgb(234,209,28)" fg:x="304" fg:w="2"/><text x="24.3387%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_str (2 samples, 0.16%)</title><rect x="24.0887%" y="581" width="0.1585%" height="15" fill="rgb(224,11,23)" fg:x="304" fg:w="2"/><text x="24.3387%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="24.0887%" y="565" width="0.1585%" height="15" fill="rgb(232,99,1)" fg:x="304" fg:w="2"/><text x="24.3387%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="24.0887%" y="549" width="0.1585%" height="15" fill="rgb(237,95,45)" fg:x="304" fg:w="2"/><text x="24.3387%" y="559.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="24.0887%" y="533" width="0.1585%" height="15" fill="rgb(208,109,11)" fg:x="304" fg:w="2"/><text x="24.3387%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="24.0887%" y="517" width="0.1585%" height="15" fill="rgb(216,190,48)" fg:x="304" fg:w="2"/><text x="24.3387%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="24.0887%" y="501" width="0.1585%" height="15" fill="rgb(251,171,36)" fg:x="304" fg:w="2"/><text x="24.3387%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="24.0887%" y="485" width="0.1585%" height="15" fill="rgb(230,62,22)" fg:x="304" fg:w="2"/><text x="24.3387%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.16%)</title><rect x="24.0887%" y="469" width="0.1585%" height="15" fill="rgb(225,114,35)" fg:x="304" fg:w="2"/><text x="24.3387%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::PerformAction&gt; (1 samples, 0.08%)</title><rect x="24.2472%" y="693" width="0.0792%" height="15" fill="rgb(215,118,42)" fg:x="306" fg:w="1"/><text x="24.4972%" y="703.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (2 samples, 0.16%)</title><rect x="24.3265%" y="645" width="0.1585%" height="15" fill="rgb(243,119,21)" fg:x="307" fg:w="2"/><text x="24.5765%" y="655.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="24.4057%" y="629" width="0.0792%" height="15" fill="rgb(252,177,53)" fg:x="308" fg:w="1"/><text x="24.6557%" y="639.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (3 samples, 0.24%)</title><rect x="24.3265%" y="677" width="0.2377%" height="15" fill="rgb(237,209,29)" fg:x="307" fg:w="3"/><text x="24.5765%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (3 samples, 0.24%)</title><rect x="24.3265%" y="661" width="0.2377%" height="15" fill="rgb(212,65,23)" fg:x="307" fg:w="3"/><text x="24.5765%" y="671.50"></text></g><g><title>tracing_core::callsite::dispatchers::Dispatchers::register_dispatch (1 samples, 0.08%)</title><rect x="24.4849%" y="645" width="0.0792%" height="15" fill="rgb(230,222,46)" fg:x="309" fg:w="1"/><text x="24.7349%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.08%)</title><rect x="24.4849%" y="629" width="0.0792%" height="15" fill="rgb(215,135,32)" fg:x="309" fg:w="1"/><text x="24.7349%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="24.5642%" y="549" width="0.1585%" height="15" fill="rgb(246,101,22)" fg:x="310" fg:w="2"/><text x="24.8142%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="24.5642%" y="533" width="0.1585%" height="15" fill="rgb(206,107,13)" fg:x="310" fg:w="2"/><text x="24.8142%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.6434%" y="517" width="0.0792%" height="15" fill="rgb(250,100,44)" fg:x="311" fg:w="1"/><text x="24.8934%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.6434%" y="501" width="0.0792%" height="15" fill="rgb(231,147,38)" fg:x="311" fg:w="1"/><text x="24.8934%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="24.6434%" y="485" width="0.0792%" height="15" fill="rgb(229,8,40)" fg:x="311" fg:w="1"/><text x="24.8934%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="24.6434%" y="469" width="0.0792%" height="15" fill="rgb(221,135,30)" fg:x="311" fg:w="1"/><text x="24.8934%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="24.6434%" y="453" width="0.0792%" height="15" fill="rgb(249,193,18)" fg:x="311" fg:w="1"/><text x="24.8934%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="24.6434%" y="437" width="0.0792%" height="15" fill="rgb(209,133,39)" fg:x="311" fg:w="1"/><text x="24.8934%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="24.6434%" y="421" width="0.0792%" height="15" fill="rgb(232,100,14)" fg:x="311" fg:w="1"/><text x="24.8934%" y="431.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="24.5642%" y="565" width="0.3170%" height="15" fill="rgb(224,185,1)" fg:x="310" fg:w="4"/><text x="24.8142%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="24.7227%" y="549" width="0.1585%" height="15" fill="rgb(223,139,8)" fg:x="312" fg:w="2"/><text x="24.9727%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="24.7227%" y="533" width="0.1585%" height="15" fill="rgb(232,213,38)" fg:x="312" fg:w="2"/><text x="24.9727%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="24.7227%" y="517" width="0.1585%" height="15" fill="rgb(207,94,22)" fg:x="312" fg:w="2"/><text x="24.9727%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.8019%" y="501" width="0.0792%" height="15" fill="rgb(219,183,54)" fg:x="313" fg:w="1"/><text x="25.0519%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.8019%" y="485" width="0.0792%" height="15" fill="rgb(216,185,54)" fg:x="313" fg:w="1"/><text x="25.0519%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.8811%" y="453" width="0.0792%" height="15" fill="rgb(254,217,39)" fg:x="314" fg:w="1"/><text x="25.1311%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.8811%" y="437" width="0.0792%" height="15" fill="rgb(240,178,23)" fg:x="314" fg:w="1"/><text x="25.1311%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="24.8811%" y="421" width="0.0792%" height="15" fill="rgb(218,11,47)" fg:x="314" fg:w="1"/><text x="25.1311%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="24.8811%" y="405" width="0.0792%" height="15" fill="rgb(218,51,51)" fg:x="314" fg:w="1"/><text x="25.1311%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="24.8811%" y="389" width="0.0792%" height="15" fill="rgb(238,126,27)" fg:x="314" fg:w="1"/><text x="25.1311%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.8811%" y="373" width="0.0792%" height="15" fill="rgb(249,202,22)" fg:x="314" fg:w="1"/><text x="25.1311%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.8811%" y="357" width="0.0792%" height="15" fill="rgb(254,195,49)" fg:x="314" fg:w="1"/><text x="25.1311%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="24.8811%" y="341" width="0.0792%" height="15" fill="rgb(208,123,14)" fg:x="314" fg:w="1"/><text x="25.1311%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="24.8811%" y="325" width="0.0792%" height="15" fill="rgb(224,200,8)" fg:x="314" fg:w="1"/><text x="25.1311%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="24.8811%" y="309" width="0.0792%" height="15" fill="rgb(217,61,36)" fg:x="314" fg:w="1"/><text x="25.1311%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="24.8811%" y="293" width="0.0792%" height="15" fill="rgb(206,35,45)" fg:x="314" fg:w="1"/><text x="25.1311%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.8811%" y="277" width="0.0792%" height="15" fill="rgb(217,65,33)" fg:x="314" fg:w="1"/><text x="25.1311%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="24.8811%" y="485" width="0.1585%" height="15" fill="rgb(222,158,48)" fg:x="314" fg:w="2"/><text x="25.1311%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="24.8811%" y="469" width="0.1585%" height="15" fill="rgb(254,2,54)" fg:x="314" fg:w="2"/><text x="25.1311%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.9604%" y="453" width="0.0792%" height="15" fill="rgb(250,143,38)" fg:x="315" fg:w="1"/><text x="25.2104%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.9604%" y="437" width="0.0792%" height="15" fill="rgb(248,25,0)" fg:x="315" fg:w="1"/><text x="25.2104%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.9604%" y="421" width="0.0792%" height="15" fill="rgb(206,152,27)" fg:x="315" fg:w="1"/><text x="25.2104%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.9604%" y="405" width="0.0792%" height="15" fill="rgb(240,77,30)" fg:x="315" fg:w="1"/><text x="25.2104%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.9604%" y="389" width="0.0792%" height="15" fill="rgb(231,5,3)" fg:x="315" fg:w="1"/><text x="25.2104%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.9604%" y="373" width="0.0792%" height="15" fill="rgb(207,226,32)" fg:x="315" fg:w="1"/><text x="25.2104%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="24.9604%" y="357" width="0.0792%" height="15" fill="rgb(222,207,47)" fg:x="315" fg:w="1"/><text x="25.2104%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="24.9604%" y="341" width="0.0792%" height="15" fill="rgb(229,115,45)" fg:x="315" fg:w="1"/><text x="25.2104%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="24.9604%" y="325" width="0.0792%" height="15" fill="rgb(224,191,6)" fg:x="315" fg:w="1"/><text x="25.2104%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.9604%" y="309" width="0.0792%" height="15" fill="rgb(230,227,24)" fg:x="315" fg:w="1"/><text x="25.2104%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.9604%" y="293" width="0.0792%" height="15" fill="rgb(228,80,19)" fg:x="315" fg:w="1"/><text x="25.2104%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="24.9604%" y="277" width="0.0792%" height="15" fill="rgb(247,229,0)" fg:x="315" fg:w="1"/><text x="25.2104%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="24.9604%" y="261" width="0.0792%" height="15" fill="rgb(237,194,15)" fg:x="315" fg:w="1"/><text x="25.2104%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="24.9604%" y="245" width="0.0792%" height="15" fill="rgb(219,203,20)" fg:x="315" fg:w="1"/><text x="25.2104%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="24.9604%" y="229" width="0.0792%" height="15" fill="rgb(234,128,8)" fg:x="315" fg:w="1"/><text x="25.2104%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.9604%" y="213" width="0.0792%" height="15" fill="rgb(248,202,8)" fg:x="315" fg:w="1"/><text x="25.2104%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="24.8811%" y="501" width="0.2377%" height="15" fill="rgb(206,104,37)" fg:x="314" fg:w="3"/><text x="25.1311%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.0396%" y="485" width="0.0792%" height="15" fill="rgb(223,8,27)" fg:x="316" fg:w="1"/><text x="25.2896%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.0396%" y="469" width="0.0792%" height="15" fill="rgb(216,217,28)" fg:x="316" fg:w="1"/><text x="25.2896%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="25.0396%" y="453" width="0.0792%" height="15" fill="rgb(249,199,1)" fg:x="316" fg:w="1"/><text x="25.2896%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="25.0396%" y="437" width="0.0792%" height="15" fill="rgb(240,85,17)" fg:x="316" fg:w="1"/><text x="25.2896%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="25.0396%" y="421" width="0.0792%" height="15" fill="rgb(206,108,45)" fg:x="316" fg:w="1"/><text x="25.2896%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.0396%" y="405" width="0.0792%" height="15" fill="rgb(245,210,41)" fg:x="316" fg:w="1"/><text x="25.2896%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.0396%" y="389" width="0.0792%" height="15" fill="rgb(206,13,37)" fg:x="316" fg:w="1"/><text x="25.2896%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="25.0396%" y="373" width="0.0792%" height="15" fill="rgb(250,61,18)" fg:x="316" fg:w="1"/><text x="25.2896%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="25.0396%" y="357" width="0.0792%" height="15" fill="rgb(235,172,48)" fg:x="316" fg:w="1"/><text x="25.2896%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="25.0396%" y="341" width="0.0792%" height="15" fill="rgb(249,201,17)" fg:x="316" fg:w="1"/><text x="25.2896%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="25.0396%" y="325" width="0.0792%" height="15" fill="rgb(219,208,6)" fg:x="316" fg:w="1"/><text x="25.2896%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.0396%" y="309" width="0.0792%" height="15" fill="rgb(248,31,23)" fg:x="316" fg:w="1"/><text x="25.2896%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="25.1189%" y="501" width="0.0792%" height="15" fill="rgb(245,15,42)" fg:x="317" fg:w="1"/><text x="25.3689%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.1189%" y="485" width="0.0792%" height="15" fill="rgb(222,217,39)" fg:x="317" fg:w="1"/><text x="25.3689%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.1189%" y="469" width="0.0792%" height="15" fill="rgb(210,219,27)" fg:x="317" fg:w="1"/><text x="25.3689%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.1189%" y="453" width="0.0792%" height="15" fill="rgb(252,166,36)" fg:x="317" fg:w="1"/><text x="25.3689%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.1189%" y="437" width="0.0792%" height="15" fill="rgb(245,132,34)" fg:x="317" fg:w="1"/><text x="25.3689%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.1189%" y="421" width="0.0792%" height="15" fill="rgb(236,54,3)" fg:x="317" fg:w="1"/><text x="25.3689%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="25.1189%" y="405" width="0.0792%" height="15" fill="rgb(241,173,43)" fg:x="317" fg:w="1"/><text x="25.3689%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="25.1189%" y="389" width="0.0792%" height="15" fill="rgb(215,190,9)" fg:x="317" fg:w="1"/><text x="25.3689%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="25.1189%" y="373" width="0.0792%" height="15" fill="rgb(242,101,16)" fg:x="317" fg:w="1"/><text x="25.3689%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.1189%" y="357" width="0.0792%" height="15" fill="rgb(223,190,21)" fg:x="317" fg:w="1"/><text x="25.3689%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.1189%" y="341" width="0.0792%" height="15" fill="rgb(215,228,25)" fg:x="317" fg:w="1"/><text x="25.3689%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="25.1189%" y="325" width="0.0792%" height="15" fill="rgb(225,36,22)" fg:x="317" fg:w="1"/><text x="25.3689%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="25.1189%" y="309" width="0.0792%" height="15" fill="rgb(251,106,46)" fg:x="317" fg:w="1"/><text x="25.3689%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="25.1189%" y="293" width="0.0792%" height="15" fill="rgb(208,90,1)" fg:x="317" fg:w="1"/><text x="25.3689%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="25.1189%" y="277" width="0.0792%" height="15" fill="rgb(243,10,4)" fg:x="317" fg:w="1"/><text x="25.3689%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.1189%" y="261" width="0.0792%" height="15" fill="rgb(212,137,27)" fg:x="317" fg:w="1"/><text x="25.3689%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="25.1981%" y="453" width="0.0792%" height="15" fill="rgb(231,220,49)" fg:x="318" fg:w="1"/><text x="25.4481%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="25.2773%" y="453" width="0.0792%" height="15" fill="rgb(237,96,20)" fg:x="319" fg:w="1"/><text x="25.5273%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="25.2773%" y="437" width="0.0792%" height="15" fill="rgb(239,229,30)" fg:x="319" fg:w="1"/><text x="25.5273%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="25.2773%" y="421" width="0.0792%" height="15" fill="rgb(219,65,33)" fg:x="319" fg:w="1"/><text x="25.5273%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.2773%" y="405" width="0.0792%" height="15" fill="rgb(243,134,7)" fg:x="319" fg:w="1"/><text x="25.5273%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.2773%" y="389" width="0.0792%" height="15" fill="rgb(216,177,54)" fg:x="319" fg:w="1"/><text x="25.5273%" y="399.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="25.2773%" y="373" width="0.0792%" height="15" fill="rgb(211,160,20)" fg:x="319" fg:w="1"/><text x="25.5273%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.2773%" y="357" width="0.0792%" height="15" fill="rgb(239,85,39)" fg:x="319" fg:w="1"/><text x="25.5273%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.2773%" y="341" width="0.0792%" height="15" fill="rgb(232,125,22)" fg:x="319" fg:w="1"/><text x="25.5273%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.2773%" y="325" width="0.0792%" height="15" fill="rgb(244,57,34)" fg:x="319" fg:w="1"/><text x="25.5273%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.2773%" y="309" width="0.0792%" height="15" fill="rgb(214,203,32)" fg:x="319" fg:w="1"/><text x="25.5273%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.2773%" y="293" width="0.0792%" height="15" fill="rgb(207,58,43)" fg:x="319" fg:w="1"/><text x="25.5273%" y="303.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="25.2773%" y="277" width="0.0792%" height="15" fill="rgb(215,193,15)" fg:x="319" fg:w="1"/><text x="25.5273%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.2773%" y="261" width="0.0792%" height="15" fill="rgb(232,15,44)" fg:x="319" fg:w="1"/><text x="25.5273%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.2773%" y="245" width="0.0792%" height="15" fill="rgb(212,3,48)" fg:x="319" fg:w="1"/><text x="25.5273%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.2773%" y="229" width="0.0792%" height="15" fill="rgb(218,128,7)" fg:x="319" fg:w="1"/><text x="25.5273%" y="239.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="25.1981%" y="501" width="0.2377%" height="15" fill="rgb(226,216,39)" fg:x="318" fg:w="3"/><text x="25.4481%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="25.1981%" y="485" width="0.2377%" height="15" fill="rgb(243,47,51)" fg:x="318" fg:w="3"/><text x="25.4481%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="25.1981%" y="469" width="0.2377%" height="15" fill="rgb(241,183,40)" fg:x="318" fg:w="3"/><text x="25.4481%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="25.3566%" y="453" width="0.0792%" height="15" fill="rgb(231,217,32)" fg:x="320" fg:w="1"/><text x="25.6066%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="25.3566%" y="437" width="0.0792%" height="15" fill="rgb(229,61,38)" fg:x="320" fg:w="1"/><text x="25.6066%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="25.4358%" y="373" width="0.1585%" height="15" fill="rgb(225,210,5)" fg:x="321" fg:w="2"/><text x="25.6858%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="25.4358%" y="357" width="0.1585%" height="15" fill="rgb(231,79,45)" fg:x="321" fg:w="2"/><text x="25.6858%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.5151%" y="341" width="0.0792%" height="15" fill="rgb(224,100,7)" fg:x="322" fg:w="1"/><text x="25.7651%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="25.4358%" y="405" width="0.3170%" height="15" fill="rgb(241,198,18)" fg:x="321" fg:w="4"/><text x="25.6858%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="25.4358%" y="389" width="0.3170%" height="15" fill="rgb(252,97,53)" fg:x="321" fg:w="4"/><text x="25.6858%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="25.5943%" y="373" width="0.1585%" height="15" fill="rgb(220,88,7)" fg:x="323" fg:w="2"/><text x="25.8443%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="25.5943%" y="357" width="0.1585%" height="15" fill="rgb(213,176,14)" fg:x="323" fg:w="2"/><text x="25.8443%" y="367.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (12 samples, 0.95%)</title><rect x="24.8811%" y="565" width="0.9509%" height="15" fill="rgb(246,73,7)" fg:x="314" fg:w="12"/><text x="25.1311%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (12 samples, 0.95%)</title><rect x="24.8811%" y="549" width="0.9509%" height="15" fill="rgb(245,64,36)" fg:x="314" fg:w="12"/><text x="25.1311%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.95%)</title><rect x="24.8811%" y="533" width="0.9509%" height="15" fill="rgb(245,80,10)" fg:x="314" fg:w="12"/><text x="25.1311%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.95%)</title><rect x="24.8811%" y="517" width="0.9509%" height="15" fill="rgb(232,107,50)" fg:x="314" fg:w="12"/><text x="25.1311%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="25.4358%" y="501" width="0.3962%" height="15" fill="rgb(253,3,0)" fg:x="321" fg:w="5"/><text x="25.6858%" y="511.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="25.4358%" y="485" width="0.3962%" height="15" fill="rgb(212,99,53)" fg:x="321" fg:w="5"/><text x="25.6858%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="25.4358%" y="469" width="0.3962%" height="15" fill="rgb(249,111,54)" fg:x="321" fg:w="5"/><text x="25.6858%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="25.4358%" y="453" width="0.3962%" height="15" fill="rgb(249,55,30)" fg:x="321" fg:w="5"/><text x="25.6858%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="25.4358%" y="437" width="0.3962%" height="15" fill="rgb(237,47,42)" fg:x="321" fg:w="5"/><text x="25.6858%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="25.4358%" y="421" width="0.3962%" height="15" fill="rgb(211,20,18)" fg:x="321" fg:w="5"/><text x="25.6858%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="25.7528%" y="405" width="0.0792%" height="15" fill="rgb(231,203,46)" fg:x="325" fg:w="1"/><text x="26.0028%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.7528%" y="389" width="0.0792%" height="15" fill="rgb(237,142,3)" fg:x="325" fg:w="1"/><text x="26.0028%" y="399.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (17 samples, 1.35%)</title><rect x="24.5642%" y="597" width="1.3471%" height="15" fill="rgb(241,107,1)" fg:x="310" fg:w="17"/><text x="24.8142%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (17 samples, 1.35%)</title><rect x="24.5642%" y="581" width="1.3471%" height="15" fill="rgb(229,83,13)" fg:x="310" fg:w="17"/><text x="24.8142%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.8320%" y="565" width="0.0792%" height="15" fill="rgb(241,91,40)" fg:x="326" fg:w="1"/><text x="26.0820%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.9113%" y="517" width="0.0792%" height="15" fill="rgb(225,3,45)" fg:x="327" fg:w="1"/><text x="26.1613%" y="527.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="26.3867%" y="325" width="0.2377%" height="15" fill="rgb(244,223,14)" fg:x="333" fg:w="3"/><text x="26.6367%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (6 samples, 0.48%)</title><rect x="26.3074%" y="357" width="0.4754%" height="15" fill="rgb(224,124,37)" fg:x="332" fg:w="6"/><text x="26.5574%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="26.3074%" y="341" width="0.4754%" height="15" fill="rgb(251,171,30)" fg:x="332" fg:w="6"/><text x="26.5574%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="26.6244%" y="325" width="0.1585%" height="15" fill="rgb(236,46,54)" fg:x="336" fg:w="2"/><text x="26.8744%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="26.6244%" y="309" width="0.1585%" height="15" fill="rgb(245,213,5)" fg:x="336" fg:w="2"/><text x="26.8744%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="26.6244%" y="293" width="0.1585%" height="15" fill="rgb(230,144,27)" fg:x="336" fg:w="2"/><text x="26.8744%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="26.7829%" y="341" width="0.0792%" height="15" fill="rgb(220,86,6)" fg:x="338" fg:w="1"/><text x="27.0329%" y="351.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="26.8621%" y="341" width="0.1585%" height="15" fill="rgb(240,20,13)" fg:x="339" fg:w="2"/><text x="27.1121%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.9414%" y="325" width="0.0792%" height="15" fill="rgb(217,89,34)" fg:x="340" fg:w="1"/><text x="27.1914%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.0206%" y="309" width="0.0792%" height="15" fill="rgb(229,13,5)" fg:x="341" fg:w="1"/><text x="27.2706%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (3 samples, 0.24%)</title><rect x="27.0206%" y="325" width="0.2377%" height="15" fill="rgb(244,67,35)" fg:x="341" fg:w="3"/><text x="27.2706%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="27.0998%" y="309" width="0.1585%" height="15" fill="rgb(221,40,2)" fg:x="342" fg:w="2"/><text x="27.3498%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="27.0998%" y="293" width="0.1585%" height="15" fill="rgb(237,157,21)" fg:x="342" fg:w="2"/><text x="27.3498%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.1791%" y="277" width="0.0792%" height="15" fill="rgb(222,94,11)" fg:x="343" fg:w="1"/><text x="27.4291%" y="287.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (15 samples, 1.19%)</title><rect x="26.1490%" y="421" width="1.1886%" height="15" fill="rgb(249,113,6)" fg:x="330" fg:w="15"/><text x="26.3990%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (15 samples, 1.19%)</title><rect x="26.1490%" y="405" width="1.1886%" height="15" fill="rgb(238,137,36)" fg:x="330" fg:w="15"/><text x="26.3990%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (14 samples, 1.11%)</title><rect x="26.2282%" y="389" width="1.1094%" height="15" fill="rgb(210,102,26)" fg:x="331" fg:w="14"/><text x="26.4782%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (14 samples, 1.11%)</title><rect x="26.2282%" y="373" width="1.1094%" height="15" fill="rgb(218,30,30)" fg:x="331" fg:w="14"/><text x="26.4782%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (7 samples, 0.55%)</title><rect x="26.7829%" y="357" width="0.5547%" height="15" fill="rgb(214,67,26)" fg:x="338" fg:w="7"/><text x="27.0329%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (4 samples, 0.32%)</title><rect x="27.0206%" y="341" width="0.3170%" height="15" fill="rgb(251,9,53)" fg:x="341" fg:w="4"/><text x="27.2706%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct_variant (1 samples, 0.08%)</title><rect x="27.2583%" y="325" width="0.0792%" height="15" fill="rgb(228,204,25)" fg:x="344" fg:w="1"/><text x="27.5083%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.2583%" y="309" width="0.0792%" height="15" fill="rgb(207,153,8)" fg:x="344" fg:w="1"/><text x="27.5083%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.4168%" y="373" width="0.0792%" height="15" fill="rgb(242,9,16)" fg:x="346" fg:w="1"/><text x="27.6668%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.4168%" y="357" width="0.0792%" height="15" fill="rgb(217,211,10)" fg:x="346" fg:w="1"/><text x="27.6668%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.4168%" y="341" width="0.0792%" height="15" fill="rgb(219,228,52)" fg:x="346" fg:w="1"/><text x="27.6668%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="27.4168%" y="325" width="0.0792%" height="15" fill="rgb(231,92,29)" fg:x="346" fg:w="1"/><text x="27.6668%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="27.4168%" y="309" width="0.0792%" height="15" fill="rgb(232,8,23)" fg:x="346" fg:w="1"/><text x="27.6668%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="27.4168%" y="293" width="0.0792%" height="15" fill="rgb(216,211,34)" fg:x="346" fg:w="1"/><text x="27.6668%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="27.4168%" y="277" width="0.0792%" height="15" fill="rgb(236,151,0)" fg:x="346" fg:w="1"/><text x="27.6668%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="27.4168%" y="261" width="0.0792%" height="15" fill="rgb(209,168,3)" fg:x="346" fg:w="1"/><text x="27.6668%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="27.4168%" y="245" width="0.0792%" height="15" fill="rgb(208,129,28)" fg:x="346" fg:w="1"/><text x="27.6668%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="27.4168%" y="229" width="0.0792%" height="15" fill="rgb(229,78,22)" fg:x="346" fg:w="1"/><text x="27.6668%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="27.4168%" y="213" width="0.0792%" height="15" fill="rgb(228,187,13)" fg:x="346" fg:w="1"/><text x="27.6668%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="27.4168%" y="197" width="0.0792%" height="15" fill="rgb(240,119,24)" fg:x="346" fg:w="1"/><text x="27.6668%" y="207.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="27.4168%" y="389" width="0.1585%" height="15" fill="rgb(209,194,42)" fg:x="346" fg:w="2"/><text x="27.6668%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.4960%" y="373" width="0.0792%" height="15" fill="rgb(247,200,46)" fg:x="347" fg:w="1"/><text x="27.7460%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.6545%" y="357" width="0.0792%" height="15" fill="rgb(218,76,16)" fg:x="349" fg:w="1"/><text x="27.9045%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.6545%" y="341" width="0.0792%" height="15" fill="rgb(225,21,48)" fg:x="349" fg:w="1"/><text x="27.9045%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.6545%" y="325" width="0.0792%" height="15" fill="rgb(239,223,50)" fg:x="349" fg:w="1"/><text x="27.9045%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.6545%" y="309" width="0.0792%" height="15" fill="rgb(244,45,21)" fg:x="349" fg:w="1"/><text x="27.9045%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.6545%" y="293" width="0.0792%" height="15" fill="rgb(232,33,43)" fg:x="349" fg:w="1"/><text x="27.9045%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="27.6545%" y="277" width="0.0792%" height="15" fill="rgb(209,8,3)" fg:x="349" fg:w="1"/><text x="27.9045%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="27.6545%" y="261" width="0.0792%" height="15" fill="rgb(214,25,53)" fg:x="349" fg:w="1"/><text x="27.9045%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="27.6545%" y="245" width="0.0792%" height="15" fill="rgb(254,186,54)" fg:x="349" fg:w="1"/><text x="27.9045%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="27.6545%" y="229" width="0.0792%" height="15" fill="rgb(208,174,49)" fg:x="349" fg:w="1"/><text x="27.9045%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="27.6545%" y="213" width="0.0792%" height="15" fill="rgb(233,191,51)" fg:x="349" fg:w="1"/><text x="27.9045%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="27.6545%" y="197" width="0.0792%" height="15" fill="rgb(222,134,10)" fg:x="349" fg:w="1"/><text x="27.9045%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="27.6545%" y="181" width="0.0792%" height="15" fill="rgb(230,226,20)" fg:x="349" fg:w="1"/><text x="27.9045%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="27.6545%" y="165" width="0.0792%" height="15" fill="rgb(251,111,25)" fg:x="349" fg:w="1"/><text x="27.9045%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="27.6545%" y="149" width="0.0792%" height="15" fill="rgb(224,40,46)" fg:x="349" fg:w="1"/><text x="27.9045%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.6545%" y="133" width="0.0792%" height="15" fill="rgb(236,108,47)" fg:x="349" fg:w="1"/><text x="27.9045%" y="143.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.7338%" y="325" width="0.0792%" height="15" fill="rgb(234,93,0)" fg:x="350" fg:w="1"/><text x="27.9838%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.7338%" y="309" width="0.0792%" height="15" fill="rgb(224,213,32)" fg:x="350" fg:w="1"/><text x="27.9838%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="27.5753%" y="373" width="0.3170%" height="15" fill="rgb(251,11,48)" fg:x="348" fg:w="4"/><text x="27.8253%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="27.7338%" y="357" width="0.1585%" height="15" fill="rgb(236,173,5)" fg:x="350" fg:w="2"/><text x="27.9838%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="27.7338%" y="341" width="0.1585%" height="15" fill="rgb(230,95,12)" fg:x="350" fg:w="2"/><text x="27.9838%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="27.8130%" y="325" width="0.0792%" height="15" fill="rgb(232,209,1)" fg:x="351" fg:w="1"/><text x="28.0630%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.8130%" y="309" width="0.0792%" height="15" fill="rgb(232,6,1)" fg:x="351" fg:w="1"/><text x="28.0630%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.8130%" y="293" width="0.0792%" height="15" fill="rgb(210,224,50)" fg:x="351" fg:w="1"/><text x="28.0630%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.8130%" y="277" width="0.0792%" height="15" fill="rgb(228,127,35)" fg:x="351" fg:w="1"/><text x="28.0630%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.8922%" y="373" width="0.0792%" height="15" fill="rgb(245,102,45)" fg:x="352" fg:w="1"/><text x="28.1422%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (6 samples, 0.48%)</title><rect x="27.5753%" y="389" width="0.4754%" height="15" fill="rgb(214,1,49)" fg:x="348" fg:w="6"/><text x="27.8253%" y="399.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="27.9715%" y="373" width="0.0792%" height="15" fill="rgb(226,163,40)" fg:x="353" fg:w="1"/><text x="28.2215%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="27.9715%" y="357" width="0.0792%" height="15" fill="rgb(239,212,28)" fg:x="353" fg:w="1"/><text x="28.2215%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="28.0507%" y="389" width="0.0792%" height="15" fill="rgb(220,20,13)" fg:x="354" fg:w="1"/><text x="28.3007%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="28.0507%" y="373" width="0.0792%" height="15" fill="rgb(210,164,35)" fg:x="354" fg:w="1"/><text x="28.3007%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.0507%" y="357" width="0.0792%" height="15" fill="rgb(248,109,41)" fg:x="354" fg:w="1"/><text x="28.3007%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="28.2092%" y="309" width="0.1585%" height="15" fill="rgb(238,23,50)" fg:x="356" fg:w="2"/><text x="28.4592%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="28.2884%" y="293" width="0.0792%" height="15" fill="rgb(211,48,49)" fg:x="357" fg:w="1"/><text x="28.5384%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="28.1300%" y="389" width="0.3170%" height="15" fill="rgb(223,36,21)" fg:x="355" fg:w="4"/><text x="28.3800%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="28.1300%" y="373" width="0.3170%" height="15" fill="rgb(207,123,46)" fg:x="355" fg:w="4"/><text x="28.3800%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="28.1300%" y="357" width="0.3170%" height="15" fill="rgb(240,218,32)" fg:x="355" fg:w="4"/><text x="28.3800%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="28.1300%" y="341" width="0.3170%" height="15" fill="rgb(252,5,43)" fg:x="355" fg:w="4"/><text x="28.3800%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="28.1300%" y="325" width="0.3170%" height="15" fill="rgb(252,84,19)" fg:x="355" fg:w="4"/><text x="28.3800%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="28.3677%" y="309" width="0.0792%" height="15" fill="rgb(243,152,39)" fg:x="358" fg:w="1"/><text x="28.6177%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.7639%" y="357" width="0.0792%" height="15" fill="rgb(234,160,15)" fg:x="363" fg:w="1"/><text x="29.0139%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.7639%" y="341" width="0.0792%" height="15" fill="rgb(237,34,20)" fg:x="363" fg:w="1"/><text x="29.0139%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.7639%" y="325" width="0.0792%" height="15" fill="rgb(229,97,13)" fg:x="363" fg:w="1"/><text x="29.0139%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.7639%" y="309" width="0.0792%" height="15" fill="rgb(234,71,50)" fg:x="363" fg:w="1"/><text x="29.0139%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.7639%" y="293" width="0.0792%" height="15" fill="rgb(253,155,4)" fg:x="363" fg:w="1"/><text x="29.0139%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="28.7639%" y="277" width="0.0792%" height="15" fill="rgb(222,185,37)" fg:x="363" fg:w="1"/><text x="29.0139%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="28.7639%" y="261" width="0.0792%" height="15" fill="rgb(251,177,13)" fg:x="363" fg:w="1"/><text x="29.0139%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="28.7639%" y="245" width="0.0792%" height="15" fill="rgb(250,179,40)" fg:x="363" fg:w="1"/><text x="29.0139%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="28.7639%" y="229" width="0.0792%" height="15" fill="rgb(242,44,2)" fg:x="363" fg:w="1"/><text x="29.0139%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="28.7639%" y="213" width="0.0792%" height="15" fill="rgb(216,177,13)" fg:x="363" fg:w="1"/><text x="29.0139%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="28.8431%" y="325" width="0.0792%" height="15" fill="rgb(216,106,43)" fg:x="364" fg:w="1"/><text x="29.0931%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.9223%" y="293" width="0.0792%" height="15" fill="rgb(216,183,2)" fg:x="365" fg:w="1"/><text x="29.1723%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.0016%" y="261" width="0.0792%" height="15" fill="rgb(249,75,3)" fg:x="366" fg:w="1"/><text x="29.2516%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::gid (9 samples, 0.71%)</title><rect x="28.4469%" y="389" width="0.7132%" height="15" fill="rgb(219,67,39)" fg:x="359" fg:w="9"/><text x="28.6969%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (9 samples, 0.71%)</title><rect x="28.4469%" y="373" width="0.7132%" height="15" fill="rgb(253,228,2)" fg:x="359" fg:w="9"/><text x="28.6969%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="28.8431%" y="357" width="0.3170%" height="15" fill="rgb(235,138,27)" fg:x="364" fg:w="4"/><text x="29.0931%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="28.8431%" y="341" width="0.3170%" height="15" fill="rgb(236,97,51)" fg:x="364" fg:w="4"/><text x="29.0931%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="28.9223%" y="325" width="0.2377%" height="15" fill="rgb(240,80,30)" fg:x="365" fg:w="3"/><text x="29.1723%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="28.9223%" y="309" width="0.2377%" height="15" fill="rgb(230,178,19)" fg:x="365" fg:w="3"/><text x="29.1723%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="29.0016%" y="293" width="0.1585%" height="15" fill="rgb(210,190,27)" fg:x="366" fg:w="2"/><text x="29.2516%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="29.0016%" y="277" width="0.1585%" height="15" fill="rgb(222,107,31)" fg:x="366" fg:w="2"/><text x="29.2516%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="29.0808%" y="261" width="0.0792%" height="15" fill="rgb(216,127,34)" fg:x="367" fg:w="1"/><text x="29.3308%" y="271.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="29.1601%" y="389" width="0.0792%" height="15" fill="rgb(234,116,52)" fg:x="368" fg:w="1"/><text x="29.4101%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="29.1601%" y="373" width="0.0792%" height="15" fill="rgb(222,124,15)" fg:x="368" fg:w="1"/><text x="29.4101%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="29.1601%" y="357" width="0.0792%" height="15" fill="rgb(231,179,28)" fg:x="368" fg:w="1"/><text x="29.4101%" y="367.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="29.2393%" y="341" width="0.1585%" height="15" fill="rgb(226,93,45)" fg:x="369" fg:w="2"/><text x="29.4893%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="29.2393%" y="325" width="0.1585%" height="15" fill="rgb(215,8,51)" fg:x="369" fg:w="2"/><text x="29.4893%" y="335.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="29.2393%" y="309" width="0.1585%" height="15" fill="rgb(223,106,5)" fg:x="369" fg:w="2"/><text x="29.4893%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="29.2393%" y="293" width="0.1585%" height="15" fill="rgb(250,191,5)" fg:x="369" fg:w="2"/><text x="29.4893%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="29.3185%" y="277" width="0.0792%" height="15" fill="rgb(242,132,44)" fg:x="370" fg:w="1"/><text x="29.5685%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="29.3978%" y="309" width="0.1585%" height="15" fill="rgb(251,152,29)" fg:x="371" fg:w="2"/><text x="29.6478%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="29.3978%" y="293" width="0.1585%" height="15" fill="rgb(218,179,5)" fg:x="371" fg:w="2"/><text x="29.6478%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="29.3978%" y="277" width="0.1585%" height="15" fill="rgb(227,67,19)" fg:x="371" fg:w="2"/><text x="29.6478%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="29.3978%" y="261" width="0.1585%" height="15" fill="rgb(233,119,31)" fg:x="371" fg:w="2"/><text x="29.6478%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="29.4770%" y="245" width="0.0792%" height="15" fill="rgb(241,120,22)" fg:x="372" fg:w="1"/><text x="29.7270%" y="255.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="29.4770%" y="229" width="0.0792%" height="15" fill="rgb(224,102,30)" fg:x="372" fg:w="1"/><text x="29.7270%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.6355%" y="277" width="0.0792%" height="15" fill="rgb(210,164,37)" fg:x="374" fg:w="1"/><text x="29.8855%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="29.6355%" y="261" width="0.0792%" height="15" fill="rgb(226,191,16)" fg:x="374" fg:w="1"/><text x="29.8855%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.6355%" y="245" width="0.0792%" height="15" fill="rgb(214,40,45)" fg:x="374" fg:w="1"/><text x="29.8855%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.6355%" y="229" width="0.0792%" height="15" fill="rgb(244,29,26)" fg:x="374" fg:w="1"/><text x="29.8855%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="29.5563%" y="309" width="0.2377%" height="15" fill="rgb(216,16,5)" fg:x="373" fg:w="3"/><text x="29.8063%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="29.5563%" y="293" width="0.2377%" height="15" fill="rgb(249,76,35)" fg:x="373" fg:w="3"/><text x="29.8063%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="29.7147%" y="277" width="0.0792%" height="15" fill="rgb(207,11,44)" fg:x="375" fg:w="1"/><text x="29.9647%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="29.7147%" y="261" width="0.0792%" height="15" fill="rgb(228,190,49)" fg:x="375" fg:w="1"/><text x="29.9647%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.7147%" y="245" width="0.0792%" height="15" fill="rgb(214,173,12)" fg:x="375" fg:w="1"/><text x="29.9647%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.8732%" y="261" width="0.0792%" height="15" fill="rgb(218,26,35)" fg:x="377" fg:w="1"/><text x="30.1232%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.8732%" y="245" width="0.0792%" height="15" fill="rgb(220,200,19)" fg:x="377" fg:w="1"/><text x="30.1232%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.9525%" y="261" width="0.0792%" height="15" fill="rgb(239,95,49)" fg:x="378" fg:w="1"/><text x="30.2025%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="30.0317%" y="261" width="0.0792%" height="15" fill="rgb(235,85,53)" fg:x="379" fg:w="1"/><text x="30.2817%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.0317%" y="245" width="0.0792%" height="15" fill="rgb(233,133,31)" fg:x="379" fg:w="1"/><text x="30.2817%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="30.0317%" y="229" width="0.0792%" height="15" fill="rgb(218,25,20)" fg:x="379" fg:w="1"/><text x="30.2817%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.0317%" y="213" width="0.0792%" height="15" fill="rgb(252,210,38)" fg:x="379" fg:w="1"/><text x="30.2817%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.0317%" y="197" width="0.0792%" height="15" fill="rgb(242,134,21)" fg:x="379" fg:w="1"/><text x="30.2817%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="30.0317%" y="181" width="0.0792%" height="15" fill="rgb(213,28,48)" fg:x="379" fg:w="1"/><text x="30.2817%" y="191.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (1 samples, 0.08%)</title><rect x="30.1109%" y="261" width="0.0792%" height="15" fill="rgb(250,196,2)" fg:x="380" fg:w="1"/><text x="30.3609%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (11 samples, 0.87%)</title><rect x="30.2694%" y="245" width="0.8716%" height="15" fill="rgb(227,5,17)" fg:x="382" fg:w="11"/><text x="30.5194%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.87%)</title><rect x="30.2694%" y="229" width="0.8716%" height="15" fill="rgb(221,226,24)" fg:x="382" fg:w="11"/><text x="30.5194%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="31.1410%" y="245" width="0.1585%" height="15" fill="rgb(211,5,48)" fg:x="393" fg:w="2"/><text x="31.3910%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="31.1410%" y="229" width="0.1585%" height="15" fill="rgb(219,150,6)" fg:x="393" fg:w="2"/><text x="31.3910%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="31.2995%" y="245" width="0.0792%" height="15" fill="rgb(251,46,16)" fg:x="395" fg:w="1"/><text x="31.5495%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="31.2995%" y="229" width="0.0792%" height="15" fill="rgb(220,204,40)" fg:x="395" fg:w="1"/><text x="31.5495%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="31.2995%" y="213" width="0.0792%" height="15" fill="rgb(211,85,2)" fg:x="395" fg:w="1"/><text x="31.5495%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.2995%" y="197" width="0.0792%" height="15" fill="rgb(229,17,7)" fg:x="395" fg:w="1"/><text x="31.5495%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="31.6957%" y="181" width="0.3962%" height="15" fill="rgb(239,72,28)" fg:x="400" fg:w="5"/><text x="31.9457%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="32.0919%" y="181" width="0.0792%" height="15" fill="rgb(230,47,54)" fg:x="405" fg:w="1"/><text x="32.3419%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.0919%" y="165" width="0.0792%" height="15" fill="rgb(214,50,8)" fg:x="405" fg:w="1"/><text x="32.3419%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.0919%" y="149" width="0.0792%" height="15" fill="rgb(216,198,43)" fg:x="405" fg:w="1"/><text x="32.3419%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.0919%" y="133" width="0.0792%" height="15" fill="rgb(234,20,35)" fg:x="405" fg:w="1"/><text x="32.3419%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="32.1712%" y="181" width="0.3170%" height="15" fill="rgb(254,45,19)" fg:x="406" fg:w="4"/><text x="32.4212%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="32.1712%" y="165" width="0.3170%" height="15" fill="rgb(219,14,44)" fg:x="406" fg:w="4"/><text x="32.4212%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="32.2504%" y="149" width="0.2377%" height="15" fill="rgb(217,220,26)" fg:x="407" fg:w="3"/><text x="32.5004%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="32.2504%" y="133" width="0.2377%" height="15" fill="rgb(213,158,28)" fg:x="407" fg:w="3"/><text x="32.5004%" y="143.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="32.2504%" y="117" width="0.2377%" height="15" fill="rgb(252,51,52)" fg:x="407" fg:w="3"/><text x="32.5004%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (61 samples, 4.83%)</title><rect x="32.4881%" y="181" width="4.8336%" height="15" fill="rgb(246,89,16)" fg:x="410" fg:w="61"/><text x="32.7381%" y="191.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (61 samples, 4.83%)</title><rect x="32.4881%" y="165" width="4.8336%" height="15" fill="rgb(216,158,49)" fg:x="410" fg:w="61"/><text x="32.7381%" y="175.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (61 samples, 4.83%)</title><rect x="32.4881%" y="149" width="4.8336%" height="15" fill="rgb(236,107,19)" fg:x="410" fg:w="61"/><text x="32.7381%" y="159.50">alloc:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="37.3217%" y="181" width="0.1585%" height="15" fill="rgb(228,185,30)" fg:x="471" fg:w="2"/><text x="37.5717%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.4010%" y="165" width="0.0792%" height="15" fill="rgb(246,134,8)" fg:x="472" fg:w="1"/><text x="37.6510%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 6.10%)</title><rect x="31.4580%" y="229" width="6.1014%" height="15" fill="rgb(214,143,50)" fg:x="397" fg:w="77"/><text x="31.7080%" y="239.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (77 samples, 6.10%)</title><rect x="31.4580%" y="213" width="6.1014%" height="15" fill="rgb(228,75,8)" fg:x="397" fg:w="77"/><text x="31.7080%" y="223.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (77 samples, 6.10%)</title><rect x="31.4580%" y="197" width="6.1014%" height="15" fill="rgb(207,175,4)" fg:x="397" fg:w="77"/><text x="31.7080%" y="207.50">regex_au..</text></g><g><title>regex_syntax::hir::ClassUnicode::is_ascii (1 samples, 0.08%)</title><rect x="37.4802%" y="181" width="0.0792%" height="15" fill="rgb(205,108,24)" fg:x="473" fg:w="1"/><text x="37.7302%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.7179%" y="213" width="0.0792%" height="15" fill="rgb(244,120,49)" fg:x="476" fg:w="1"/><text x="37.9679%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="37.7971%" y="213" width="0.3170%" height="15" fill="rgb(223,47,38)" fg:x="477" fg:w="4"/><text x="38.0471%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="37.8764%" y="197" width="0.2377%" height="15" fill="rgb(229,179,11)" fg:x="478" fg:w="3"/><text x="38.1264%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="37.9556%" y="181" width="0.1585%" height="15" fill="rgb(231,122,1)" fg:x="479" fg:w="2"/><text x="38.2056%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="37.9556%" y="165" width="0.1585%" height="15" fill="rgb(245,119,9)" fg:x="479" fg:w="2"/><text x="38.2056%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.63%)</title><rect x="37.5594%" y="229" width="0.6339%" height="15" fill="rgb(241,163,25)" fg:x="474" fg:w="8"/><text x="37.8094%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="38.1141%" y="213" width="0.0792%" height="15" fill="rgb(217,214,3)" fg:x="481" fg:w="1"/><text x="38.3641%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="38.1933%" y="229" width="0.0792%" height="15" fill="rgb(240,86,28)" fg:x="482" fg:w="1"/><text x="38.4433%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="38.2726%" y="229" width="0.0792%" height="15" fill="rgb(215,47,9)" fg:x="483" fg:w="1"/><text x="38.5226%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (104 samples, 8.24%)</title><rect x="30.1902%" y="261" width="8.2409%" height="15" fill="rgb(252,25,45)" fg:x="381" fg:w="104"/><text x="30.4402%" y="271.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (89 samples, 7.05%)</title><rect x="31.3788%" y="245" width="7.0523%" height="15" fill="rgb(251,164,9)" fg:x="396" fg:w="89"/><text x="31.6288%" y="255.50">regex_aut..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="38.3518%" y="229" width="0.0792%" height="15" fill="rgb(233,194,0)" fg:x="484" fg:w="1"/><text x="38.6018%" y="239.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="38.4311%" y="261" width="0.0792%" height="15" fill="rgb(249,111,24)" fg:x="485" fg:w="1"/><text x="38.6811%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="38.4311%" y="245" width="0.0792%" height="15" fill="rgb(250,223,3)" fg:x="485" fg:w="1"/><text x="38.6811%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="38.4311%" y="229" width="0.0792%" height="15" fill="rgb(236,178,37)" fg:x="485" fg:w="1"/><text x="38.6811%" y="239.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="38.4311%" y="213" width="0.0792%" height="15" fill="rgb(241,158,50)" fg:x="485" fg:w="1"/><text x="38.6811%" y="223.50"></text></g><g><title>posix_memalign (1 samples, 0.08%)</title><rect x="38.4311%" y="197" width="0.0792%" height="15" fill="rgb(213,121,41)" fg:x="485" fg:w="1"/><text x="38.6811%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="38.5895%" y="213" width="0.0792%" height="15" fill="rgb(240,92,3)" fg:x="487" fg:w="1"/><text x="38.8395%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::peek (1 samples, 0.08%)</title><rect x="38.5895%" y="197" width="0.0792%" height="15" fill="rgb(205,123,3)" fg:x="487" fg:w="1"/><text x="38.8395%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="38.6688%" y="197" width="0.0792%" height="15" fill="rgb(205,97,47)" fg:x="488" fg:w="1"/><text x="38.9188%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="38.6688%" y="213" width="0.1585%" height="15" fill="rgb(247,152,14)" fg:x="488" fg:w="2"/><text x="38.9188%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="38.7480%" y="197" width="0.0792%" height="15" fill="rgb(248,195,53)" fg:x="489" fg:w="1"/><text x="38.9980%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="38.5895%" y="229" width="0.3170%" height="15" fill="rgb(226,201,16)" fg:x="487" fg:w="4"/><text x="38.8395%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="38.8273%" y="213" width="0.0792%" height="15" fill="rgb(205,98,0)" fg:x="490" fg:w="1"/><text x="39.0773%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.8273%" y="197" width="0.0792%" height="15" fill="rgb(214,191,48)" fg:x="490" fg:w="1"/><text x="39.0773%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.8273%" y="181" width="0.0792%" height="15" fill="rgb(237,112,39)" fg:x="490" fg:w="1"/><text x="39.0773%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.8273%" y="165" width="0.0792%" height="15" fill="rgb(247,203,27)" fg:x="490" fg:w="1"/><text x="39.0773%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="38.5103%" y="261" width="0.4754%" height="15" fill="rgb(235,124,28)" fg:x="486" fg:w="6"/><text x="38.7603%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="38.5103%" y="245" width="0.4754%" height="15" fill="rgb(208,207,46)" fg:x="486" fg:w="6"/><text x="38.7603%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="38.9065%" y="229" width="0.0792%" height="15" fill="rgb(234,176,4)" fg:x="491" fg:w="1"/><text x="39.1565%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.9857%" y="213" width="0.0792%" height="15" fill="rgb(230,133,28)" fg:x="492" fg:w="1"/><text x="39.2357%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.9857%" y="197" width="0.0792%" height="15" fill="rgb(211,137,40)" fg:x="492" fg:w="1"/><text x="39.2357%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.9857%" y="181" width="0.0792%" height="15" fill="rgb(254,35,13)" fg:x="492" fg:w="1"/><text x="39.2357%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="39.0650%" y="213" width="0.1585%" height="15" fill="rgb(225,49,51)" fg:x="493" fg:w="2"/><text x="39.3150%" y="223.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="39.1442%" y="197" width="0.0792%" height="15" fill="rgb(251,10,15)" fg:x="494" fg:w="1"/><text x="39.3942%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="38.9857%" y="229" width="0.3170%" height="15" fill="rgb(228,207,15)" fg:x="492" fg:w="4"/><text x="39.2357%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="39.2235%" y="213" width="0.0792%" height="15" fill="rgb(241,99,19)" fg:x="495" fg:w="1"/><text x="39.4735%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (121 samples, 9.59%)</title><rect x="29.7940%" y="277" width="9.5880%" height="15" fill="rgb(207,104,49)" fg:x="376" fg:w="121"/><text x="30.0440%" y="287.50">regex_automata..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="38.9857%" y="261" width="0.3962%" height="15" fill="rgb(234,99,18)" fg:x="492" fg:w="5"/><text x="39.2357%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="38.9857%" y="245" width="0.3962%" height="15" fill="rgb(213,191,49)" fg:x="492" fg:w="5"/><text x="39.2357%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.3027%" y="229" width="0.0792%" height="15" fill="rgb(210,226,19)" fg:x="496" fg:w="1"/><text x="39.5527%" y="239.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (122 samples, 9.67%)</title><rect x="29.7940%" y="293" width="9.6672%" height="15" fill="rgb(229,97,18)" fg:x="376" fg:w="122"/><text x="30.0440%" y="303.50">regex::builder..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="39.3819%" y="277" width="0.0792%" height="15" fill="rgb(211,167,15)" fg:x="497" fg:w="1"/><text x="39.6319%" y="287.50"></text></g><g><title>regex::regex::string::Regex::new (123 samples, 9.75%)</title><rect x="29.7940%" y="309" width="9.7464%" height="15" fill="rgb(210,169,34)" fg:x="376" fg:w="123"/><text x="30.0440%" y="319.50">regex::regex::..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="39.4612%" y="293" width="0.0792%" height="15" fill="rgb(241,121,31)" fg:x="498" fg:w="1"/><text x="39.7112%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.4612%" y="277" width="0.0792%" height="15" fill="rgb(232,40,11)" fg:x="498" fg:w="1"/><text x="39.7112%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.8574%" y="229" width="0.0792%" height="15" fill="rgb(205,86,26)" fg:x="503" fg:w="1"/><text x="40.1074%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="39.6197%" y="245" width="0.3962%" height="15" fill="rgb(231,126,28)" fg:x="500" fg:w="5"/><text x="39.8697%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="39.9366%" y="229" width="0.0792%" height="15" fill="rgb(219,221,18)" fg:x="504" fg:w="1"/><text x="40.1866%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="39.9366%" y="213" width="0.0792%" height="15" fill="rgb(211,40,0)" fg:x="504" fg:w="1"/><text x="40.1866%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="39.9366%" y="197" width="0.0792%" height="15" fill="rgb(239,85,43)" fg:x="504" fg:w="1"/><text x="40.1866%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="39.6197%" y="261" width="0.4754%" height="15" fill="rgb(231,55,21)" fg:x="500" fg:w="6"/><text x="39.8697%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="40.0158%" y="245" width="0.0792%" height="15" fill="rgb(225,184,43)" fg:x="505" fg:w="1"/><text x="40.2658%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="40.0158%" y="229" width="0.0792%" height="15" fill="rgb(251,158,41)" fg:x="505" fg:w="1"/><text x="40.2658%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.0158%" y="213" width="0.0792%" height="15" fill="rgb(234,159,37)" fg:x="505" fg:w="1"/><text x="40.2658%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (136 samples, 10.78%)</title><rect x="29.3978%" y="325" width="10.7765%" height="15" fill="rgb(216,204,22)" fg:x="371" fg:w="136"/><text x="29.6478%" y="335.50">indefinite::help..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.63%)</title><rect x="39.5404%" y="309" width="0.6339%" height="15" fill="rgb(214,17,3)" fg:x="499" fg:w="8"/><text x="39.7904%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.63%)</title><rect x="39.5404%" y="293" width="0.6339%" height="15" fill="rgb(212,111,17)" fg:x="499" fg:w="8"/><text x="39.7904%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.63%)</title><rect x="39.5404%" y="277" width="0.6339%" height="15" fill="rgb(221,157,24)" fg:x="499" fg:w="8"/><text x="39.7904%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="40.0951%" y="261" width="0.0792%" height="15" fill="rgb(252,16,13)" fg:x="506" fg:w="1"/><text x="40.3451%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="40.0951%" y="245" width="0.0792%" height="15" fill="rgb(221,62,2)" fg:x="506" fg:w="1"/><text x="40.3451%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="40.2536%" y="277" width="0.0792%" height="15" fill="rgb(247,87,22)" fg:x="508" fg:w="1"/><text x="40.5036%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="40.4120%" y="261" width="0.0792%" height="15" fill="rgb(215,73,9)" fg:x="510" fg:w="1"/><text x="40.6620%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.4120%" y="245" width="0.0792%" height="15" fill="rgb(207,175,33)" fg:x="510" fg:w="1"/><text x="40.6620%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="40.1743%" y="309" width="0.3962%" height="15" fill="rgb(243,129,54)" fg:x="507" fg:w="5"/><text x="40.4243%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="40.2536%" y="293" width="0.3170%" height="15" fill="rgb(227,119,45)" fg:x="508" fg:w="4"/><text x="40.5036%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="40.3328%" y="277" width="0.2377%" height="15" fill="rgb(205,109,36)" fg:x="509" fg:w="3"/><text x="40.5828%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="40.4913%" y="261" width="0.0792%" height="15" fill="rgb(205,6,39)" fg:x="511" fg:w="1"/><text x="40.7413%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.4913%" y="245" width="0.0792%" height="15" fill="rgb(221,32,16)" fg:x="511" fg:w="1"/><text x="40.7413%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="40.8875%" y="213" width="0.0792%" height="15" fill="rgb(228,144,50)" fg:x="516" fg:w="1"/><text x="41.1375%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.8875%" y="197" width="0.0792%" height="15" fill="rgb(229,201,53)" fg:x="516" fg:w="1"/><text x="41.1375%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.8875%" y="181" width="0.0792%" height="15" fill="rgb(249,153,27)" fg:x="516" fg:w="1"/><text x="41.1375%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.9667%" y="213" width="0.0792%" height="15" fill="rgb(227,106,25)" fg:x="517" fg:w="1"/><text x="41.2167%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.9667%" y="197" width="0.0792%" height="15" fill="rgb(230,65,29)" fg:x="517" fg:w="1"/><text x="41.2167%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.9667%" y="181" width="0.0792%" height="15" fill="rgb(221,57,46)" fg:x="517" fg:w="1"/><text x="41.2167%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="41.0460%" y="213" width="0.0792%" height="15" fill="rgb(229,161,17)" fg:x="518" fg:w="1"/><text x="41.2960%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="41.1252%" y="213" width="0.0792%" height="15" fill="rgb(222,213,11)" fg:x="519" fg:w="1"/><text x="41.3752%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.63%)</title><rect x="40.6498%" y="229" width="0.6339%" height="15" fill="rgb(235,35,13)" fg:x="513" fg:w="8"/><text x="40.8998%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="41.2044%" y="213" width="0.0792%" height="15" fill="rgb(233,158,34)" fg:x="520" fg:w="1"/><text x="41.4544%" y="223.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (10 samples, 0.79%)</title><rect x="40.5705%" y="309" width="0.7924%" height="15" fill="rgb(215,151,48)" fg:x="512" fg:w="10"/><text x="40.8205%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.79%)</title><rect x="40.5705%" y="293" width="0.7924%" height="15" fill="rgb(229,84,14)" fg:x="512" fg:w="10"/><text x="40.8205%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.79%)</title><rect x="40.5705%" y="277" width="0.7924%" height="15" fill="rgb(229,68,14)" fg:x="512" fg:w="10"/><text x="40.8205%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.79%)</title><rect x="40.5705%" y="261" width="0.7924%" height="15" fill="rgb(243,106,26)" fg:x="512" fg:w="10"/><text x="40.8205%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.79%)</title><rect x="40.5705%" y="245" width="0.7924%" height="15" fill="rgb(206,45,38)" fg:x="512" fg:w="10"/><text x="40.8205%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="41.2837%" y="229" width="0.0792%" height="15" fill="rgb(226,6,15)" fg:x="521" fg:w="1"/><text x="41.5337%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="41.5214%" y="229" width="0.0792%" height="15" fill="rgb(232,22,54)" fg:x="524" fg:w="1"/><text x="41.7714%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.5214%" y="213" width="0.0792%" height="15" fill="rgb(229,222,32)" fg:x="524" fg:w="1"/><text x="41.7714%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.5214%" y="197" width="0.0792%" height="15" fill="rgb(228,62,29)" fg:x="524" fg:w="1"/><text x="41.7714%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.5214%" y="181" width="0.0792%" height="15" fill="rgb(251,103,34)" fg:x="524" fg:w="1"/><text x="41.7714%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="41.5214%" y="261" width="0.1585%" height="15" fill="rgb(233,12,30)" fg:x="524" fg:w="2"/><text x="41.7714%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="41.5214%" y="245" width="0.1585%" height="15" fill="rgb(238,52,0)" fg:x="524" fg:w="2"/><text x="41.7714%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="41.6006%" y="229" width="0.0792%" height="15" fill="rgb(223,98,5)" fg:x="525" fg:w="1"/><text x="41.8506%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="41.6799%" y="261" width="0.2377%" height="15" fill="rgb(228,75,37)" fg:x="526" fg:w="3"/><text x="41.9299%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="41.6799%" y="245" width="0.2377%" height="15" fill="rgb(205,115,49)" fg:x="526" fg:w="3"/><text x="41.9299%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="41.7591%" y="229" width="0.1585%" height="15" fill="rgb(250,154,43)" fg:x="527" fg:w="2"/><text x="42.0091%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="41.7591%" y="213" width="0.1585%" height="15" fill="rgb(226,43,29)" fg:x="527" fg:w="2"/><text x="42.0091%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="41.8384%" y="197" width="0.0792%" height="15" fill="rgb(249,228,39)" fg:x="528" fg:w="1"/><text x="42.0884%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.8384%" y="181" width="0.0792%" height="15" fill="rgb(216,79,43)" fg:x="528" fg:w="1"/><text x="42.0884%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.8384%" y="165" width="0.0792%" height="15" fill="rgb(228,95,12)" fg:x="528" fg:w="1"/><text x="42.0884%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.8384%" y="149" width="0.0792%" height="15" fill="rgb(249,221,15)" fg:x="528" fg:w="1"/><text x="42.0884%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="41.9176%" y="261" width="0.0792%" height="15" fill="rgb(233,34,13)" fg:x="529" fg:w="1"/><text x="42.1676%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.0761%" y="245" width="0.0792%" height="15" fill="rgb(214,103,39)" fg:x="531" fg:w="1"/><text x="42.3261%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.1553%" y="229" width="0.0792%" height="15" fill="rgb(251,126,39)" fg:x="532" fg:w="1"/><text x="42.4053%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="42.2345%" y="229" width="0.0792%" height="15" fill="rgb(214,216,36)" fg:x="533" fg:w="1"/><text x="42.4845%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (14 samples, 1.11%)</title><rect x="42.1553%" y="245" width="1.1094%" height="15" fill="rgb(220,221,8)" fg:x="532" fg:w="14"/><text x="42.4053%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (12 samples, 0.95%)</title><rect x="42.3138%" y="229" width="0.9509%" height="15" fill="rgb(240,216,3)" fg:x="534" fg:w="12"/><text x="42.5638%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.1854%" y="213" width="0.0792%" height="15" fill="rgb(232,218,17)" fg:x="545" fg:w="1"/><text x="43.4354%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="43.2647%" y="245" width="0.0792%" height="15" fill="rgb(229,163,45)" fg:x="546" fg:w="1"/><text x="43.5147%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.5816%" y="213" width="0.0792%" height="15" fill="rgb(231,110,42)" fg:x="550" fg:w="1"/><text x="43.8316%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.5816%" y="197" width="0.0792%" height="15" fill="rgb(208,170,48)" fg:x="550" fg:w="1"/><text x="43.8316%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.5816%" y="181" width="0.0792%" height="15" fill="rgb(239,116,25)" fg:x="550" fg:w="1"/><text x="43.8316%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="43.6609%" y="213" width="0.0792%" height="15" fill="rgb(219,200,50)" fg:x="551" fg:w="1"/><text x="43.9109%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="43.6609%" y="197" width="0.0792%" height="15" fill="rgb(245,200,0)" fg:x="551" fg:w="1"/><text x="43.9109%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.6609%" y="181" width="0.0792%" height="15" fill="rgb(245,119,33)" fg:x="551" fg:w="1"/><text x="43.9109%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.6609%" y="165" width="0.0792%" height="15" fill="rgb(231,125,12)" fg:x="551" fg:w="1"/><text x="43.9109%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="44.0571%" y="181" width="0.2377%" height="15" fill="rgb(216,96,41)" fg:x="556" fg:w="3"/><text x="44.3071%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="44.0571%" y="165" width="0.2377%" height="15" fill="rgb(248,43,45)" fg:x="556" fg:w="3"/><text x="44.3071%" y="175.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="44.0571%" y="149" width="0.2377%" height="15" fill="rgb(217,222,7)" fg:x="556" fg:w="3"/><text x="44.3071%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (8 samples, 0.63%)</title><rect x="43.7401%" y="213" width="0.6339%" height="15" fill="rgb(233,28,6)" fg:x="552" fg:w="8"/><text x="43.9901%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="44.0571%" y="197" width="0.3170%" height="15" fill="rgb(231,218,15)" fg:x="556" fg:w="4"/><text x="44.3071%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.2948%" y="181" width="0.0792%" height="15" fill="rgb(226,171,48)" fg:x="559" fg:w="1"/><text x="44.5448%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.2948%" y="165" width="0.0792%" height="15" fill="rgb(235,201,9)" fg:x="559" fg:w="1"/><text x="44.5448%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="44.2948%" y="149" width="0.0792%" height="15" fill="rgb(217,80,15)" fg:x="559" fg:w="1"/><text x="44.5448%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.3740%" y="181" width="0.0792%" height="15" fill="rgb(219,152,8)" fg:x="560" fg:w="1"/><text x="44.6240%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (19 samples, 1.51%)</title><rect x="43.3439%" y="245" width="1.5055%" height="15" fill="rgb(243,107,38)" fg:x="547" fg:w="19"/><text x="43.5939%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (19 samples, 1.51%)</title><rect x="43.3439%" y="229" width="1.5055%" height="15" fill="rgb(231,17,5)" fg:x="547" fg:w="19"/><text x="43.5939%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (6 samples, 0.48%)</title><rect x="44.3740%" y="213" width="0.4754%" height="15" fill="rgb(209,25,54)" fg:x="560" fg:w="6"/><text x="44.6240%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (6 samples, 0.48%)</title><rect x="44.3740%" y="197" width="0.4754%" height="15" fill="rgb(219,0,2)" fg:x="560" fg:w="6"/><text x="44.6240%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.40%)</title><rect x="44.4532%" y="181" width="0.3962%" height="15" fill="rgb(246,9,5)" fg:x="561" fg:w="5"/><text x="44.7032%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="44.9287%" y="181" width="0.0792%" height="15" fill="rgb(226,159,4)" fg:x="567" fg:w="1"/><text x="45.1787%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="45.7211%" y="133" width="0.2377%" height="15" fill="rgb(219,175,34)" fg:x="577" fg:w="3"/><text x="45.9711%" y="143.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="45.9588%" y="133" width="0.1585%" height="15" fill="rgb(236,10,46)" fg:x="580" fg:w="2"/><text x="46.2088%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (7 samples, 0.55%)</title><rect x="46.1173%" y="133" width="0.5547%" height="15" fill="rgb(240,211,16)" fg:x="582" fg:w="7"/><text x="46.3673%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="46.4342%" y="117" width="0.2377%" height="15" fill="rgb(205,3,43)" fg:x="586" fg:w="3"/><text x="46.6842%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="46.4342%" y="101" width="0.2377%" height="15" fill="rgb(245,7,22)" fg:x="586" fg:w="3"/><text x="46.6842%" y="111.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="46.4342%" y="85" width="0.2377%" height="15" fill="rgb(239,132,32)" fg:x="586" fg:w="3"/><text x="46.6842%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="46.6719%" y="133" width="0.0792%" height="15" fill="rgb(228,202,34)" fg:x="589" fg:w="1"/><text x="46.9219%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.6719%" y="117" width="0.0792%" height="15" fill="rgb(254,200,22)" fg:x="589" fg:w="1"/><text x="46.9219%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.6719%" y="101" width="0.0792%" height="15" fill="rgb(219,10,39)" fg:x="589" fg:w="1"/><text x="46.9219%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.6719%" y="85" width="0.0792%" height="15" fill="rgb(226,210,39)" fg:x="589" fg:w="1"/><text x="46.9219%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="46.9097%" y="101" width="0.1585%" height="15" fill="rgb(208,219,16)" fg:x="592" fg:w="2"/><text x="47.1597%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.9889%" y="85" width="0.0792%" height="15" fill="rgb(216,158,51)" fg:x="593" fg:w="1"/><text x="47.2389%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.9889%" y="69" width="0.0792%" height="15" fill="rgb(233,14,44)" fg:x="593" fg:w="1"/><text x="47.2389%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (7 samples, 0.55%)</title><rect x="46.7512%" y="133" width="0.5547%" height="15" fill="rgb(237,97,39)" fg:x="590" fg:w="7"/><text x="47.0012%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="46.9097%" y="117" width="0.3962%" height="15" fill="rgb(218,198,43)" fg:x="592" fg:w="5"/><text x="47.1597%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="47.0681%" y="101" width="0.2377%" height="15" fill="rgb(231,104,20)" fg:x="594" fg:w="3"/><text x="47.3181%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="47.2266%" y="85" width="0.0792%" height="15" fill="rgb(254,36,13)" fg:x="596" fg:w="1"/><text x="47.4766%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.2266%" y="69" width="0.0792%" height="15" fill="rgb(248,14,50)" fg:x="596" fg:w="1"/><text x="47.4766%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.2266%" y="53" width="0.0792%" height="15" fill="rgb(217,107,29)" fg:x="596" fg:w="1"/><text x="47.4766%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="47.2266%" y="37" width="0.0792%" height="15" fill="rgb(251,169,33)" fg:x="596" fg:w="1"/><text x="47.4766%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (70 samples, 5.55%)</title><rect x="47.3059%" y="133" width="5.5468%" height="15" fill="rgb(217,108,32)" fg:x="597" fg:w="70"/><text x="47.5559%" y="143.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (70 samples, 5.55%)</title><rect x="47.3059%" y="117" width="5.5468%" height="15" fill="rgb(219,66,42)" fg:x="597" fg:w="70"/><text x="47.5559%" y="127.50">regex_a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (70 samples, 5.55%)</title><rect x="47.3059%" y="101" width="5.5468%" height="15" fill="rgb(206,180,7)" fg:x="597" fg:w="70"/><text x="47.5559%" y="111.50">alloc::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="52.8526%" y="133" width="0.0792%" height="15" fill="rgb(208,226,31)" fg:x="667" fg:w="1"/><text x="53.1026%" y="143.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="52.9319%" y="133" width="0.0792%" height="15" fill="rgb(218,26,49)" fg:x="668" fg:w="1"/><text x="53.1819%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (107 samples, 8.48%)</title><rect x="44.9287%" y="229" width="8.4786%" height="15" fill="rgb(233,197,48)" fg:x="567" fg:w="107"/><text x="45.1787%" y="239.50">&lt;core::iter:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (107 samples, 8.48%)</title><rect x="44.9287%" y="213" width="8.4786%" height="15" fill="rgb(252,181,51)" fg:x="567" fg:w="107"/><text x="45.1787%" y="223.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (107 samples, 8.48%)</title><rect x="44.9287%" y="197" width="8.4786%" height="15" fill="rgb(253,90,19)" fg:x="567" fg:w="107"/><text x="45.1787%" y="207.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (106 samples, 8.40%)</title><rect x="45.0079%" y="181" width="8.3994%" height="15" fill="rgb(215,171,30)" fg:x="568" fg:w="106"/><text x="45.2579%" y="191.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (106 samples, 8.40%)</title><rect x="45.0079%" y="165" width="8.3994%" height="15" fill="rgb(214,222,9)" fg:x="568" fg:w="106"/><text x="45.2579%" y="175.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (106 samples, 8.40%)</title><rect x="45.0079%" y="149" width="8.3994%" height="15" fill="rgb(223,3,22)" fg:x="568" fg:w="106"/><text x="45.2579%" y="159.50">regex_automa..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (5 samples, 0.40%)</title><rect x="53.0111%" y="133" width="0.3962%" height="15" fill="rgb(225,196,46)" fg:x="669" fg:w="5"/><text x="53.2611%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="53.1696%" y="117" width="0.2377%" height="15" fill="rgb(209,110,37)" fg:x="671" fg:w="3"/><text x="53.4196%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="53.2488%" y="101" width="0.1585%" height="15" fill="rgb(249,89,12)" fg:x="672" fg:w="2"/><text x="53.4988%" y="111.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="53.2488%" y="85" width="0.1585%" height="15" fill="rgb(226,27,33)" fg:x="672" fg:w="2"/><text x="53.4988%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="53.4073%" y="229" width="0.0792%" height="15" fill="rgb(213,82,22)" fg:x="674" fg:w="1"/><text x="53.6573%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.5658%" y="213" width="0.0792%" height="15" fill="rgb(248,140,0)" fg:x="676" fg:w="1"/><text x="53.8158%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="53.6450%" y="213" width="0.2377%" height="15" fill="rgb(228,106,3)" fg:x="677" fg:w="3"/><text x="53.8950%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.8035%" y="197" width="0.0792%" height="15" fill="rgb(209,23,37)" fg:x="679" fg:w="1"/><text x="54.0535%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.8035%" y="181" width="0.0792%" height="15" fill="rgb(241,93,50)" fg:x="679" fg:w="1"/><text x="54.0535%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.8035%" y="165" width="0.0792%" height="15" fill="rgb(253,46,43)" fg:x="679" fg:w="1"/><text x="54.0535%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="53.8827%" y="213" width="0.2377%" height="15" fill="rgb(226,206,43)" fg:x="680" fg:w="3"/><text x="54.1327%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (155 samples, 12.28%)</title><rect x="41.9968%" y="261" width="12.2821%" height="15" fill="rgb(217,54,7)" fg:x="530" fg:w="155"/><text x="42.2468%" y="271.50">regex_automata::me..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (119 samples, 9.43%)</title><rect x="44.8494%" y="245" width="9.4295%" height="15" fill="rgb(223,5,52)" fg:x="566" fg:w="119"/><text x="45.0994%" y="255.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.79%)</title><rect x="53.4865%" y="229" width="0.7924%" height="15" fill="rgb(206,52,46)" fg:x="675" fg:w="10"/><text x="53.7365%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="54.1204%" y="213" width="0.1585%" height="15" fill="rgb(253,136,11)" fg:x="683" fg:w="2"/><text x="54.3704%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.2789%" y="229" width="0.0792%" height="15" fill="rgb(208,106,33)" fg:x="685" fg:w="1"/><text x="54.5289%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.2789%" y="213" width="0.0792%" height="15" fill="rgb(206,54,4)" fg:x="685" fg:w="1"/><text x="54.5289%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.2789%" y="197" width="0.0792%" height="15" fill="rgb(213,3,15)" fg:x="685" fg:w="1"/><text x="54.5289%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="54.3582%" y="229" width="0.1585%" height="15" fill="rgb(252,211,39)" fg:x="686" fg:w="2"/><text x="54.6082%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="54.3582%" y="213" width="0.1585%" height="15" fill="rgb(223,6,36)" fg:x="686" fg:w="2"/><text x="54.6082%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (2 samples, 0.16%)</title><rect x="54.3582%" y="197" width="0.1585%" height="15" fill="rgb(252,169,45)" fg:x="686" fg:w="2"/><text x="54.6082%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (2 samples, 0.16%)</title><rect x="54.3582%" y="181" width="0.1585%" height="15" fill="rgb(212,48,26)" fg:x="686" fg:w="2"/><text x="54.6082%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="54.4374%" y="165" width="0.0792%" height="15" fill="rgb(251,102,48)" fg:x="687" fg:w="1"/><text x="54.6874%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="54.5166%" y="229" width="0.0792%" height="15" fill="rgb(243,208,16)" fg:x="688" fg:w="1"/><text x="54.7666%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="54.2789%" y="261" width="0.4754%" height="15" fill="rgb(219,96,24)" fg:x="685" fg:w="6"/><text x="54.5289%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="54.2789%" y="245" width="0.4754%" height="15" fill="rgb(219,33,29)" fg:x="685" fg:w="6"/><text x="54.5289%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="54.5959%" y="229" width="0.1585%" height="15" fill="rgb(223,176,5)" fg:x="689" fg:w="2"/><text x="54.8459%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.6751%" y="213" width="0.0792%" height="15" fill="rgb(228,140,14)" fg:x="690" fg:w="1"/><text x="54.9251%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.6751%" y="197" width="0.0792%" height="15" fill="rgb(217,179,31)" fg:x="690" fg:w="1"/><text x="54.9251%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.6751%" y="181" width="0.0792%" height="15" fill="rgb(230,9,30)" fg:x="690" fg:w="1"/><text x="54.9251%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="54.7544%" y="213" width="0.1585%" height="15" fill="rgb(230,136,20)" fg:x="691" fg:w="2"/><text x="55.0044%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="54.7544%" y="197" width="0.1585%" height="15" fill="rgb(215,210,22)" fg:x="691" fg:w="2"/><text x="55.0044%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="54.7544%" y="181" width="0.1585%" height="15" fill="rgb(218,43,5)" fg:x="691" fg:w="2"/><text x="55.0044%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="54.7544%" y="229" width="0.2377%" height="15" fill="rgb(216,11,5)" fg:x="691" fg:w="3"/><text x="55.0044%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="54.9128%" y="213" width="0.0792%" height="15" fill="rgb(209,82,29)" fg:x="693" fg:w="1"/><text x="55.1628%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="54.9128%" y="197" width="0.0792%" height="15" fill="rgb(244,115,12)" fg:x="693" fg:w="1"/><text x="55.1628%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="54.9921%" y="213" width="0.0792%" height="15" fill="rgb(222,82,18)" fg:x="694" fg:w="1"/><text x="55.2421%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="54.9921%" y="229" width="0.1585%" height="15" fill="rgb(249,227,8)" fg:x="694" fg:w="2"/><text x="55.2421%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="55.0713%" y="213" width="0.0792%" height="15" fill="rgb(253,141,45)" fg:x="695" fg:w="1"/><text x="55.3213%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.0713%" y="197" width="0.0792%" height="15" fill="rgb(234,184,4)" fg:x="695" fg:w="1"/><text x="55.3213%" y="207.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (175 samples, 13.87%)</title><rect x="41.3629%" y="293" width="13.8669%" height="15" fill="rgb(218,194,23)" fg:x="522" fg:w="175"/><text x="41.6129%" y="303.50">regex::builders::stri..</text></g><g><title>regex_automata::meta::regex::Builder::build (174 samples, 13.79%)</title><rect x="41.4422%" y="277" width="13.7876%" height="15" fill="rgb(235,66,41)" fg:x="523" fg:w="174"/><text x="41.6922%" y="287.50">regex_automata::meta:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="54.7544%" y="261" width="0.4754%" height="15" fill="rgb(245,217,1)" fg:x="691" fg:w="6"/><text x="55.0044%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="54.7544%" y="245" width="0.4754%" height="15" fill="rgb(229,91,1)" fg:x="691" fg:w="6"/><text x="55.0044%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="55.1506%" y="229" width="0.0792%" height="15" fill="rgb(207,101,30)" fg:x="696" fg:w="1"/><text x="55.4006%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (191 samples, 15.13%)</title><rect x="40.1743%" y="325" width="15.1347%" height="15" fill="rgb(223,82,49)" fg:x="507" fg:w="191"/><text x="40.4243%" y="335.50">indefinite::rules::numb..</text></g><g><title>regex::regex::string::Regex::new (176 samples, 13.95%)</title><rect x="41.3629%" y="309" width="13.9461%" height="15" fill="rgb(218,167,17)" fg:x="522" fg:w="176"/><text x="41.6129%" y="319.50">regex::regex::string:..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="55.2298%" y="293" width="0.0792%" height="15" fill="rgb(208,103,14)" fg:x="697" fg:w="1"/><text x="55.4798%" y="303.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="55.2298%" y="277" width="0.0792%" height="15" fill="rgb(238,20,8)" fg:x="697" fg:w="1"/><text x="55.4798%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Config::hybrid_cache_capacity (1 samples, 0.08%)</title><rect x="55.2298%" y="261" width="0.0792%" height="15" fill="rgb(218,80,54)" fg:x="697" fg:w="1"/><text x="55.4798%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.3090%" y="309" width="0.0792%" height="15" fill="rgb(240,144,17)" fg:x="698" fg:w="1"/><text x="55.5590%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="55.3883%" y="261" width="0.0792%" height="15" fill="rgb(245,27,50)" fg:x="699" fg:w="1"/><text x="55.6383%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.4675%" y="245" width="0.0792%" height="15" fill="rgb(251,51,7)" fg:x="700" fg:w="1"/><text x="55.7175%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="55.3883%" y="293" width="0.2377%" height="15" fill="rgb(245,217,29)" fg:x="699" fg:w="3"/><text x="55.6383%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="55.3883%" y="277" width="0.2377%" height="15" fill="rgb(221,176,29)" fg:x="699" fg:w="3"/><text x="55.6383%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="55.4675%" y="261" width="0.1585%" height="15" fill="rgb(212,180,24)" fg:x="700" fg:w="2"/><text x="55.7175%" y="271.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="55.5468%" y="245" width="0.0792%" height="15" fill="rgb(254,24,2)" fg:x="701" fg:w="1"/><text x="55.7968%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="55.7052%" y="245" width="0.0792%" height="15" fill="rgb(230,100,2)" fg:x="703" fg:w="1"/><text x="55.9552%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.7052%" y="229" width="0.0792%" height="15" fill="rgb(219,142,25)" fg:x="703" fg:w="1"/><text x="55.9552%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.7052%" y="213" width="0.0792%" height="15" fill="rgb(240,73,43)" fg:x="703" fg:w="1"/><text x="55.9552%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="55.7052%" y="261" width="0.1585%" height="15" fill="rgb(214,114,15)" fg:x="703" fg:w="2"/><text x="55.9552%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="55.7845%" y="245" width="0.0792%" height="15" fill="rgb(207,130,4)" fg:x="704" fg:w="1"/><text x="56.0345%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="55.7845%" y="229" width="0.0792%" height="15" fill="rgb(221,25,40)" fg:x="704" fg:w="1"/><text x="56.0345%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="55.6260%" y="293" width="0.3170%" height="15" fill="rgb(241,184,7)" fg:x="702" fg:w="4"/><text x="55.8760%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="55.7052%" y="277" width="0.2377%" height="15" fill="rgb(235,159,4)" fg:x="703" fg:w="3"/><text x="55.9552%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="55.8637%" y="261" width="0.0792%" height="15" fill="rgb(214,87,48)" fg:x="705" fg:w="1"/><text x="56.1137%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="55.8637%" y="245" width="0.0792%" height="15" fill="rgb(246,198,24)" fg:x="705" fg:w="1"/><text x="56.1137%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.8637%" y="229" width="0.0792%" height="15" fill="rgb(209,66,40)" fg:x="705" fg:w="1"/><text x="56.1137%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.9429%" y="245" width="0.0792%" height="15" fill="rgb(233,147,39)" fg:x="706" fg:w="1"/><text x="56.1929%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.9429%" y="229" width="0.0792%" height="15" fill="rgb(231,145,52)" fg:x="706" fg:w="1"/><text x="56.1929%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.0222%" y="245" width="0.0792%" height="15" fill="rgb(206,20,26)" fg:x="707" fg:w="1"/><text x="56.2722%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="56.1014%" y="245" width="0.0792%" height="15" fill="rgb(238,220,4)" fg:x="708" fg:w="1"/><text x="56.3514%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.1014%" y="229" width="0.0792%" height="15" fill="rgb(252,195,42)" fg:x="708" fg:w="1"/><text x="56.3514%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="56.1014%" y="213" width="0.0792%" height="15" fill="rgb(209,10,6)" fg:x="708" fg:w="1"/><text x="56.3514%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.1014%" y="197" width="0.0792%" height="15" fill="rgb(229,3,52)" fg:x="708" fg:w="1"/><text x="56.3514%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="56.1014%" y="181" width="0.0792%" height="15" fill="rgb(253,49,37)" fg:x="708" fg:w="1"/><text x="56.3514%" y="191.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.1014%" y="165" width="0.0792%" height="15" fill="rgb(240,103,49)" fg:x="708" fg:w="1"/><text x="56.3514%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.2599%" y="229" width="0.0792%" height="15" fill="rgb(250,182,30)" fg:x="710" fg:w="1"/><text x="56.5099%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="56.3391%" y="229" width="0.1585%" height="15" fill="rgb(248,8,30)" fg:x="711" fg:w="2"/><text x="56.5891%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="56.3391%" y="213" width="0.1585%" height="15" fill="rgb(237,120,30)" fg:x="711" fg:w="2"/><text x="56.5891%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="56.4976%" y="229" width="0.0792%" height="15" fill="rgb(221,146,34)" fg:x="713" fg:w="1"/><text x="56.7476%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="56.4976%" y="213" width="0.0792%" height="15" fill="rgb(242,55,13)" fg:x="713" fg:w="1"/><text x="56.7476%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="56.5769%" y="197" width="0.1585%" height="15" fill="rgb(242,112,31)" fg:x="714" fg:w="2"/><text x="56.8269%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="56.5769%" y="181" width="0.1585%" height="15" fill="rgb(249,192,27)" fg:x="714" fg:w="2"/><text x="56.8269%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="56.5769%" y="165" width="0.1585%" height="15" fill="rgb(208,204,44)" fg:x="714" fg:w="2"/><text x="56.8269%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="56.5769%" y="149" width="0.1585%" height="15" fill="rgb(208,93,54)" fg:x="714" fg:w="2"/><text x="56.8269%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="56.5769%" y="213" width="0.2377%" height="15" fill="rgb(242,1,31)" fg:x="714" fg:w="3"/><text x="56.8269%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="56.7353%" y="197" width="0.0792%" height="15" fill="rgb(241,83,25)" fg:x="716" fg:w="1"/><text x="56.9853%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="56.7353%" y="181" width="0.0792%" height="15" fill="rgb(205,169,50)" fg:x="716" fg:w="1"/><text x="56.9853%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="56.7353%" y="165" width="0.0792%" height="15" fill="rgb(239,186,37)" fg:x="716" fg:w="1"/><text x="56.9853%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="56.8146%" y="197" width="0.1585%" height="15" fill="rgb(205,221,10)" fg:x="717" fg:w="2"/><text x="57.0646%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="56.9731%" y="197" width="0.0792%" height="15" fill="rgb(218,196,15)" fg:x="719" fg:w="1"/><text x="57.2231%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (12 samples, 0.95%)</title><rect x="56.1807%" y="245" width="0.9509%" height="15" fill="rgb(218,196,35)" fg:x="709" fg:w="12"/><text x="56.4307%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.55%)</title><rect x="56.5769%" y="229" width="0.5547%" height="15" fill="rgb(233,63,24)" fg:x="714" fg:w="7"/><text x="56.8269%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="56.8146%" y="213" width="0.3170%" height="15" fill="rgb(225,8,4)" fg:x="717" fg:w="4"/><text x="57.0646%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="57.0523%" y="197" width="0.0792%" height="15" fill="rgb(234,105,35)" fg:x="720" fg:w="1"/><text x="57.3023%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="57.0523%" y="181" width="0.0792%" height="15" fill="rgb(236,21,32)" fg:x="720" fg:w="1"/><text x="57.3023%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.0523%" y="165" width="0.0792%" height="15" fill="rgb(228,109,6)" fg:x="720" fg:w="1"/><text x="57.3023%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="57.2108%" y="197" width="0.0792%" height="15" fill="rgb(229,215,31)" fg:x="722" fg:w="1"/><text x="57.4608%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="57.2108%" y="181" width="0.0792%" height="15" fill="rgb(221,52,54)" fg:x="722" fg:w="1"/><text x="57.4608%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="57.1315%" y="213" width="0.2377%" height="15" fill="rgb(252,129,43)" fg:x="721" fg:w="3"/><text x="57.3815%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="57.2900%" y="197" width="0.0792%" height="15" fill="rgb(248,183,27)" fg:x="723" fg:w="1"/><text x="57.5400%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.2900%" y="181" width="0.0792%" height="15" fill="rgb(250,0,22)" fg:x="723" fg:w="1"/><text x="57.5400%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.2900%" y="165" width="0.0792%" height="15" fill="rgb(213,166,10)" fg:x="723" fg:w="1"/><text x="57.5400%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.2900%" y="149" width="0.0792%" height="15" fill="rgb(207,163,36)" fg:x="723" fg:w="1"/><text x="57.5400%" y="159.50"></text></g><g><title>regex::regex::string::Regex::new (19 samples, 1.51%)</title><rect x="55.9429%" y="293" width="1.5055%" height="15" fill="rgb(208,122,22)" fg:x="706" fg:w="19"/><text x="56.1929%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (19 samples, 1.51%)</title><rect x="55.9429%" y="277" width="1.5055%" height="15" fill="rgb(207,104,49)" fg:x="706" fg:w="19"/><text x="56.1929%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (19 samples, 1.51%)</title><rect x="55.9429%" y="261" width="1.5055%" height="15" fill="rgb(248,211,50)" fg:x="706" fg:w="19"/><text x="56.1929%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="57.1315%" y="245" width="0.3170%" height="15" fill="rgb(217,13,45)" fg:x="721" fg:w="4"/><text x="57.3815%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="57.1315%" y="229" width="0.3170%" height="15" fill="rgb(211,216,49)" fg:x="721" fg:w="4"/><text x="57.3815%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="57.3693%" y="213" width="0.0792%" height="15" fill="rgb(221,58,53)" fg:x="724" fg:w="1"/><text x="57.6193%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (381 samples, 30.19%)</title><rect x="27.4168%" y="405" width="30.1902%" height="15" fill="rgb(220,112,41)" fg:x="346" fg:w="381"/><text x="27.6668%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::looki..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (358 samples, 28.37%)</title><rect x="29.2393%" y="389" width="28.3677%" height="15" fill="rgb(236,38,28)" fg:x="369" fg:w="358"/><text x="29.4893%" y="399.50">plugins_core::looking::model::Unqualified::qua..</text></g><g><title>indefinite::indefinite (358 samples, 28.37%)</title><rect x="29.2393%" y="373" width="28.3677%" height="15" fill="rgb(227,195,22)" fg:x="369" fg:w="358"/><text x="29.4893%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (358 samples, 28.37%)</title><rect x="29.2393%" y="357" width="28.3677%" height="15" fill="rgb(214,55,33)" fg:x="369" fg:w="358"/><text x="29.4893%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (356 samples, 28.21%)</title><rect x="29.3978%" y="341" width="28.2092%" height="15" fill="rgb(248,80,13)" fg:x="371" fg:w="356"/><text x="29.6478%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (29 samples, 2.30%)</title><rect x="55.3090%" y="325" width="2.2979%" height="15" fill="rgb(238,52,6)" fg:x="698" fg:w="29"/><text x="55.5590%" y="335.50">i..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (28 samples, 2.22%)</title><rect x="55.3883%" y="309" width="2.2187%" height="15" fill="rgb(224,198,47)" fg:x="699" fg:w="28"/><text x="55.6383%" y="319.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="57.4485%" y="293" width="0.1585%" height="15" fill="rgb(233,171,20)" fg:x="725" fg:w="2"/><text x="57.6985%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="57.4485%" y="277" width="0.1585%" height="15" fill="rgb(241,30,25)" fg:x="725" fg:w="2"/><text x="57.6985%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="57.4485%" y="261" width="0.1585%" height="15" fill="rgb(207,171,38)" fg:x="725" fg:w="2"/><text x="57.6985%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="57.4485%" y="245" width="0.1585%" height="15" fill="rgb(234,70,1)" fg:x="725" fg:w="2"/><text x="57.6985%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="57.4485%" y="229" width="0.1585%" height="15" fill="rgb(232,178,18)" fg:x="725" fg:w="2"/><text x="57.6985%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.6070%" y="389" width="0.0792%" height="15" fill="rgb(241,78,40)" fg:x="727" fg:w="1"/><text x="57.8570%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.6070%" y="373" width="0.0792%" height="15" fill="rgb(222,35,25)" fg:x="727" fg:w="1"/><text x="57.8570%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="57.6862%" y="277" width="0.0792%" height="15" fill="rgb(207,92,16)" fg:x="728" fg:w="1"/><text x="57.9362%" y="287.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="57.6070%" y="405" width="0.2377%" height="15" fill="rgb(216,59,51)" fg:x="727" fg:w="3"/><text x="57.8570%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="57.6862%" y="389" width="0.1585%" height="15" fill="rgb(213,80,28)" fg:x="728" fg:w="2"/><text x="57.9362%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="57.6862%" y="373" width="0.1585%" height="15" fill="rgb(220,93,7)" fg:x="728" fg:w="2"/><text x="57.9362%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="57.6862%" y="357" width="0.1585%" height="15" fill="rgb(225,24,44)" fg:x="728" fg:w="2"/><text x="57.9362%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="57.6862%" y="341" width="0.1585%" height="15" fill="rgb(243,74,40)" fg:x="728" fg:w="2"/><text x="57.9362%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="57.6862%" y="325" width="0.1585%" height="15" fill="rgb(228,39,7)" fg:x="728" fg:w="2"/><text x="57.9362%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="57.6862%" y="309" width="0.1585%" height="15" fill="rgb(227,79,8)" fg:x="728" fg:w="2"/><text x="57.9362%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="57.6862%" y="293" width="0.1585%" height="15" fill="rgb(236,58,11)" fg:x="728" fg:w="2"/><text x="57.9362%" y="303.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="57.7655%" y="277" width="0.0792%" height="15" fill="rgb(249,63,35)" fg:x="729" fg:w="1"/><text x="58.0155%" y="287.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (3 samples, 0.24%)</title><rect x="57.8447%" y="389" width="0.2377%" height="15" fill="rgb(252,114,16)" fg:x="730" fg:w="3"/><text x="58.0947%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="57.8447%" y="373" width="0.2377%" height="15" fill="rgb(254,151,24)" fg:x="730" fg:w="3"/><text x="58.0947%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="57.8447%" y="357" width="0.2377%" height="15" fill="rgb(253,54,39)" fg:x="730" fg:w="3"/><text x="58.0947%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="57.8447%" y="341" width="0.2377%" height="15" fill="rgb(243,25,45)" fg:x="730" fg:w="3"/><text x="58.0947%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="57.8447%" y="325" width="0.2377%" height="15" fill="rgb(234,134,9)" fg:x="730" fg:w="3"/><text x="58.0947%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="57.8447%" y="309" width="0.2377%" height="15" fill="rgb(227,166,31)" fg:x="730" fg:w="3"/><text x="58.0947%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="57.9239%" y="293" width="0.1585%" height="15" fill="rgb(245,143,41)" fg:x="731" fg:w="2"/><text x="58.1739%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="57.9239%" y="277" width="0.1585%" height="15" fill="rgb(238,181,32)" fg:x="731" fg:w="2"/><text x="58.1739%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="58.0032%" y="261" width="0.0792%" height="15" fill="rgb(224,113,18)" fg:x="732" fg:w="1"/><text x="58.2532%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.0032%" y="245" width="0.0792%" height="15" fill="rgb(240,229,28)" fg:x="732" fg:w="1"/><text x="58.2532%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="58.1616%" y="325" width="0.0792%" height="15" fill="rgb(250,185,3)" fg:x="734" fg:w="1"/><text x="58.4116%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.1616%" y="309" width="0.0792%" height="15" fill="rgb(212,59,25)" fg:x="734" fg:w="1"/><text x="58.4116%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.1616%" y="293" width="0.0792%" height="15" fill="rgb(221,87,20)" fg:x="734" fg:w="1"/><text x="58.4116%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.1616%" y="277" width="0.0792%" height="15" fill="rgb(213,74,28)" fg:x="734" fg:w="1"/><text x="58.4116%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="58.1616%" y="261" width="0.0792%" height="15" fill="rgb(224,132,34)" fg:x="734" fg:w="1"/><text x="58.4116%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="58.1616%" y="245" width="0.0792%" height="15" fill="rgb(222,101,24)" fg:x="734" fg:w="1"/><text x="58.4116%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="58.1616%" y="229" width="0.0792%" height="15" fill="rgb(254,142,4)" fg:x="734" fg:w="1"/><text x="58.4116%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.1616%" y="213" width="0.0792%" height="15" fill="rgb(230,229,49)" fg:x="734" fg:w="1"/><text x="58.4116%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.1616%" y="197" width="0.0792%" height="15" fill="rgb(238,70,47)" fg:x="734" fg:w="1"/><text x="58.4116%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="58.1616%" y="181" width="0.0792%" height="15" fill="rgb(231,160,17)" fg:x="734" fg:w="1"/><text x="58.4116%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="58.1616%" y="165" width="0.0792%" height="15" fill="rgb(218,68,53)" fg:x="734" fg:w="1"/><text x="58.4116%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="58.1616%" y="149" width="0.0792%" height="15" fill="rgb(236,111,10)" fg:x="734" fg:w="1"/><text x="58.4116%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="58.1616%" y="133" width="0.0792%" height="15" fill="rgb(224,34,41)" fg:x="734" fg:w="1"/><text x="58.4116%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.1616%" y="117" width="0.0792%" height="15" fill="rgb(241,118,19)" fg:x="734" fg:w="1"/><text x="58.4116%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.3994%" y="245" width="0.0792%" height="15" fill="rgb(238,129,25)" fg:x="737" fg:w="1"/><text x="58.6494%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="58.4786%" y="229" width="0.0792%" height="15" fill="rgb(238,22,31)" fg:x="738" fg:w="1"/><text x="58.7286%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.4786%" y="213" width="0.0792%" height="15" fill="rgb(222,174,48)" fg:x="738" fg:w="1"/><text x="58.7286%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="58.4786%" y="197" width="0.0792%" height="15" fill="rgb(206,152,40)" fg:x="738" fg:w="1"/><text x="58.7286%" y="207.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="58.2409%" y="325" width="0.3962%" height="15" fill="rgb(218,99,54)" fg:x="735" fg:w="5"/><text x="58.4909%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="58.2409%" y="309" width="0.3962%" height="15" fill="rgb(220,174,26)" fg:x="735" fg:w="5"/><text x="58.4909%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="58.2409%" y="293" width="0.3962%" height="15" fill="rgb(245,116,9)" fg:x="735" fg:w="5"/><text x="58.4909%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="58.3994%" y="277" width="0.2377%" height="15" fill="rgb(209,72,35)" fg:x="737" fg:w="3"/><text x="58.6494%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="58.3994%" y="261" width="0.2377%" height="15" fill="rgb(226,126,21)" fg:x="737" fg:w="3"/><text x="58.6494%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="58.4786%" y="245" width="0.1585%" height="15" fill="rgb(227,192,1)" fg:x="738" fg:w="2"/><text x="58.7286%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.5578%" y="229" width="0.0792%" height="15" fill="rgb(237,180,29)" fg:x="739" fg:w="1"/><text x="58.8078%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.5578%" y="213" width="0.0792%" height="15" fill="rgb(230,197,35)" fg:x="739" fg:w="1"/><text x="58.8078%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="58.5578%" y="197" width="0.0792%" height="15" fill="rgb(246,193,31)" fg:x="739" fg:w="1"/><text x="58.8078%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.5578%" y="181" width="0.0792%" height="15" fill="rgb(241,36,4)" fg:x="739" fg:w="1"/><text x="58.8078%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.5578%" y="165" width="0.0792%" height="15" fill="rgb(241,130,17)" fg:x="739" fg:w="1"/><text x="58.8078%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="58.5578%" y="149" width="0.0792%" height="15" fill="rgb(206,137,32)" fg:x="739" fg:w="1"/><text x="58.8078%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.5578%" y="133" width="0.0792%" height="15" fill="rgb(237,228,51)" fg:x="739" fg:w="1"/><text x="58.8078%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.5578%" y="117" width="0.0792%" height="15" fill="rgb(243,6,42)" fg:x="739" fg:w="1"/><text x="58.8078%" y="127.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="58.6371%" y="229" width="0.1585%" height="15" fill="rgb(251,74,28)" fg:x="740" fg:w="2"/><text x="58.8871%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="58.6371%" y="213" width="0.1585%" height="15" fill="rgb(218,20,49)" fg:x="740" fg:w="2"/><text x="58.8871%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="58.6371%" y="197" width="0.1585%" height="15" fill="rgb(238,28,14)" fg:x="740" fg:w="2"/><text x="58.8871%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.7163%" y="181" width="0.0792%" height="15" fill="rgb(229,40,46)" fg:x="741" fg:w="1"/><text x="58.9663%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="58.7163%" y="165" width="0.0792%" height="15" fill="rgb(244,195,20)" fg:x="741" fg:w="1"/><text x="58.9663%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 1.03%)</title><rect x="57.8447%" y="405" width="1.0301%" height="15" fill="rgb(253,56,35)" fg:x="730" fg:w="13"/><text x="58.0947%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (10 samples, 0.79%)</title><rect x="58.0824%" y="389" width="0.7924%" height="15" fill="rgb(210,149,44)" fg:x="733" fg:w="10"/><text x="58.3324%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (10 samples, 0.79%)</title><rect x="58.0824%" y="373" width="0.7924%" height="15" fill="rgb(240,135,12)" fg:x="733" fg:w="10"/><text x="58.3324%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.79%)</title><rect x="58.0824%" y="357" width="0.7924%" height="15" fill="rgb(251,24,50)" fg:x="733" fg:w="10"/><text x="58.3324%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.79%)</title><rect x="58.0824%" y="341" width="0.7924%" height="15" fill="rgb(243,200,47)" fg:x="733" fg:w="10"/><text x="58.3324%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="58.6371%" y="325" width="0.2377%" height="15" fill="rgb(224,166,26)" fg:x="740" fg:w="3"/><text x="58.8871%" y="335.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="58.6371%" y="309" width="0.2377%" height="15" fill="rgb(233,0,47)" fg:x="740" fg:w="3"/><text x="58.8871%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="58.6371%" y="293" width="0.2377%" height="15" fill="rgb(253,80,5)" fg:x="740" fg:w="3"/><text x="58.8871%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="58.6371%" y="277" width="0.2377%" height="15" fill="rgb(214,133,25)" fg:x="740" fg:w="3"/><text x="58.8871%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="58.6371%" y="261" width="0.2377%" height="15" fill="rgb(209,27,14)" fg:x="740" fg:w="3"/><text x="58.8871%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="58.6371%" y="245" width="0.2377%" height="15" fill="rgb(219,102,51)" fg:x="740" fg:w="3"/><text x="58.8871%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="58.7956%" y="229" width="0.0792%" height="15" fill="rgb(237,18,16)" fg:x="742" fg:w="1"/><text x="59.0456%" y="239.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="58.7956%" y="213" width="0.0792%" height="15" fill="rgb(241,85,17)" fg:x="742" fg:w="1"/><text x="59.0456%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="58.8748%" y="405" width="0.0792%" height="15" fill="rgb(236,90,42)" fg:x="743" fg:w="1"/><text x="59.1248%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.8748%" y="389" width="0.0792%" height="15" fill="rgb(249,57,21)" fg:x="743" fg:w="1"/><text x="59.1248%" y="399.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (418 samples, 33.12%)</title><rect x="25.9113%" y="565" width="33.1220%" height="15" fill="rgb(243,12,36)" fg:x="327" fg:w="418"/><text x="26.1613%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (418 samples, 33.12%)</title><rect x="25.9113%" y="549" width="33.1220%" height="15" fill="rgb(253,128,47)" fg:x="327" fg:w="418"/><text x="26.1613%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (418 samples, 33.12%)</title><rect x="25.9113%" y="533" width="33.1220%" height="15" fill="rgb(207,33,20)" fg:x="327" fg:w="418"/><text x="26.1613%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (417 samples, 33.04%)</title><rect x="25.9905%" y="517" width="33.0428%" height="15" fill="rgb(233,215,35)" fg:x="328" fg:w="417"/><text x="26.2405%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (417 samples, 33.04%)</title><rect x="25.9905%" y="501" width="33.0428%" height="15" fill="rgb(249,188,52)" fg:x="328" fg:w="417"/><text x="26.2405%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (417 samples, 33.04%)</title><rect x="25.9905%" y="485" width="33.0428%" height="15" fill="rgb(225,12,32)" fg:x="328" fg:w="417"/><text x="26.2405%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (417 samples, 33.04%)</title><rect x="25.9905%" y="469" width="33.0428%" height="15" fill="rgb(247,98,14)" fg:x="328" fg:w="417"/><text x="26.2405%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (416 samples, 32.96%)</title><rect x="26.0697%" y="453" width="32.9635%" height="15" fill="rgb(247,219,48)" fg:x="329" fg:w="416"/><text x="26.3197%" y="463.50">&lt;engine::session::state::State as kernel::actions::Pe..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (415 samples, 32.88%)</title><rect x="26.1490%" y="437" width="32.8843%" height="15" fill="rgb(253,60,48)" fg:x="330" fg:w="415"/><text x="26.3990%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kernel..</text></g><g><title>plugins_core::looking::model::new_area_observation (400 samples, 31.70%)</title><rect x="27.3376%" y="421" width="31.6957%" height="15" fill="rgb(245,15,52)" fg:x="345" fg:w="400"/><text x="27.5876%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="58.9540%" y="405" width="0.0792%" height="15" fill="rgb(220,133,28)" fg:x="744" fg:w="1"/><text x="59.2040%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="58.9540%" y="389" width="0.0792%" height="15" fill="rgb(217,180,4)" fg:x="744" fg:w="1"/><text x="59.2040%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.9540%" y="373" width="0.0792%" height="15" fill="rgb(251,24,1)" fg:x="744" fg:w="1"/><text x="59.2040%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.0333%" y="501" width="0.0792%" height="15" fill="rgb(212,185,49)" fg:x="745" fg:w="1"/><text x="59.2833%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.0333%" y="485" width="0.0792%" height="15" fill="rgb(215,175,22)" fg:x="745" fg:w="1"/><text x="59.2833%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="59.0333%" y="517" width="0.1585%" height="15" fill="rgb(250,205,14)" fg:x="745" fg:w="2"/><text x="59.2833%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="59.1125%" y="501" width="0.0792%" height="15" fill="rgb(225,211,22)" fg:x="746" fg:w="1"/><text x="59.3625%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.1918%" y="453" width="0.0792%" height="15" fill="rgb(251,179,42)" fg:x="747" fg:w="1"/><text x="59.4418%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.1918%" y="437" width="0.0792%" height="15" fill="rgb(208,216,51)" fg:x="747" fg:w="1"/><text x="59.4418%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.1918%" y="421" width="0.0792%" height="15" fill="rgb(235,36,11)" fg:x="747" fg:w="1"/><text x="59.4418%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.1918%" y="405" width="0.0792%" height="15" fill="rgb(213,189,28)" fg:x="747" fg:w="1"/><text x="59.4418%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.1918%" y="389" width="0.0792%" height="15" fill="rgb(227,203,42)" fg:x="747" fg:w="1"/><text x="59.4418%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.1918%" y="373" width="0.0792%" height="15" fill="rgb(244,72,36)" fg:x="747" fg:w="1"/><text x="59.4418%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.1918%" y="357" width="0.0792%" height="15" fill="rgb(213,53,17)" fg:x="747" fg:w="1"/><text x="59.4418%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.1918%" y="341" width="0.0792%" height="15" fill="rgb(207,167,3)" fg:x="747" fg:w="1"/><text x="59.4418%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.1918%" y="325" width="0.0792%" height="15" fill="rgb(216,98,30)" fg:x="747" fg:w="1"/><text x="59.4418%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="59.1918%" y="309" width="0.0792%" height="15" fill="rgb(236,123,15)" fg:x="747" fg:w="1"/><text x="59.4418%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="59.1918%" y="293" width="0.0792%" height="15" fill="rgb(248,81,50)" fg:x="747" fg:w="1"/><text x="59.4418%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="59.1918%" y="277" width="0.0792%" height="15" fill="rgb(214,120,4)" fg:x="747" fg:w="1"/><text x="59.4418%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="59.1918%" y="261" width="0.0792%" height="15" fill="rgb(208,179,34)" fg:x="747" fg:w="1"/><text x="59.4418%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.1918%" y="245" width="0.0792%" height="15" fill="rgb(227,140,7)" fg:x="747" fg:w="1"/><text x="59.4418%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.2710%" y="437" width="0.0792%" height="15" fill="rgb(214,22,6)" fg:x="748" fg:w="1"/><text x="59.5210%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.2710%" y="421" width="0.0792%" height="15" fill="rgb(207,137,27)" fg:x="748" fg:w="1"/><text x="59.5210%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.2710%" y="405" width="0.0792%" height="15" fill="rgb(210,8,46)" fg:x="748" fg:w="1"/><text x="59.5210%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.2710%" y="389" width="0.0792%" height="15" fill="rgb(240,16,54)" fg:x="748" fg:w="1"/><text x="59.5210%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.2710%" y="373" width="0.0792%" height="15" fill="rgb(211,209,29)" fg:x="748" fg:w="1"/><text x="59.5210%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.2710%" y="357" width="0.0792%" height="15" fill="rgb(226,228,24)" fg:x="748" fg:w="1"/><text x="59.5210%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="59.2710%" y="341" width="0.0792%" height="15" fill="rgb(222,84,9)" fg:x="748" fg:w="1"/><text x="59.5210%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="59.2710%" y="325" width="0.0792%" height="15" fill="rgb(234,203,30)" fg:x="748" fg:w="1"/><text x="59.5210%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="59.2710%" y="453" width="0.1585%" height="15" fill="rgb(238,109,14)" fg:x="748" fg:w="2"/><text x="59.5210%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.3502%" y="437" width="0.0792%" height="15" fill="rgb(233,206,34)" fg:x="749" fg:w="1"/><text x="59.6002%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.3502%" y="421" width="0.0792%" height="15" fill="rgb(220,167,47)" fg:x="749" fg:w="1"/><text x="59.6002%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="59.3502%" y="405" width="0.0792%" height="15" fill="rgb(238,105,10)" fg:x="749" fg:w="1"/><text x="59.6002%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.3502%" y="389" width="0.0792%" height="15" fill="rgb(213,227,17)" fg:x="749" fg:w="1"/><text x="59.6002%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.3502%" y="373" width="0.0792%" height="15" fill="rgb(217,132,38)" fg:x="749" fg:w="1"/><text x="59.6002%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.3502%" y="357" width="0.0792%" height="15" fill="rgb(242,146,4)" fg:x="749" fg:w="1"/><text x="59.6002%" y="367.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="59.4295%" y="453" width="0.0792%" height="15" fill="rgb(212,61,9)" fg:x="750" fg:w="1"/><text x="59.6795%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.4295%" y="437" width="0.0792%" height="15" fill="rgb(247,126,22)" fg:x="750" fg:w="1"/><text x="59.6795%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="59.4295%" y="421" width="0.0792%" height="15" fill="rgb(220,196,2)" fg:x="750" fg:w="1"/><text x="59.6795%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.4295%" y="405" width="0.0792%" height="15" fill="rgb(208,46,4)" fg:x="750" fg:w="1"/><text x="59.6795%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.5087%" y="405" width="0.0792%" height="15" fill="rgb(252,104,46)" fg:x="751" fg:w="1"/><text x="59.7587%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="59.5880%" y="373" width="0.0792%" height="15" fill="rgb(237,152,48)" fg:x="752" fg:w="1"/><text x="59.8380%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="59.5880%" y="357" width="0.0792%" height="15" fill="rgb(221,59,37)" fg:x="752" fg:w="1"/><text x="59.8380%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.6672%" y="373" width="0.0792%" height="15" fill="rgb(209,202,51)" fg:x="753" fg:w="1"/><text x="59.9172%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="59.5087%" y="453" width="0.3962%" height="15" fill="rgb(228,81,30)" fg:x="751" fg:w="5"/><text x="59.7587%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="59.5087%" y="437" width="0.3962%" height="15" fill="rgb(227,42,39)" fg:x="751" fg:w="5"/><text x="59.7587%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="59.5087%" y="421" width="0.3962%" height="15" fill="rgb(221,26,2)" fg:x="751" fg:w="5"/><text x="59.7587%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="59.5880%" y="405" width="0.3170%" height="15" fill="rgb(254,61,31)" fg:x="752" fg:w="4"/><text x="59.8380%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="59.5880%" y="389" width="0.3170%" height="15" fill="rgb(222,173,38)" fg:x="752" fg:w="4"/><text x="59.8380%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="59.7464%" y="373" width="0.1585%" height="15" fill="rgb(218,50,12)" fg:x="754" fg:w="2"/><text x="59.9964%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="59.7464%" y="357" width="0.1585%" height="15" fill="rgb(223,88,40)" fg:x="754" fg:w="2"/><text x="59.9964%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="59.7464%" y="341" width="0.1585%" height="15" fill="rgb(237,54,19)" fg:x="754" fg:w="2"/><text x="59.9964%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="59.7464%" y="325" width="0.1585%" height="15" fill="rgb(251,129,25)" fg:x="754" fg:w="2"/><text x="59.9964%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="59.7464%" y="309" width="0.1585%" height="15" fill="rgb(238,97,19)" fg:x="754" fg:w="2"/><text x="59.9964%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.8257%" y="293" width="0.0792%" height="15" fill="rgb(240,169,18)" fg:x="755" fg:w="1"/><text x="60.0757%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.8257%" y="277" width="0.0792%" height="15" fill="rgb(230,187,49)" fg:x="755" fg:w="1"/><text x="60.0757%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.9842%" y="309" width="0.0792%" height="15" fill="rgb(209,44,26)" fg:x="757" fg:w="1"/><text x="60.2342%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.9842%" y="293" width="0.0792%" height="15" fill="rgb(244,0,6)" fg:x="757" fg:w="1"/><text x="60.2342%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.9842%" y="277" width="0.0792%" height="15" fill="rgb(248,18,21)" fg:x="757" fg:w="1"/><text x="60.2342%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="60.0634%" y="293" width="0.1585%" height="15" fill="rgb(245,180,19)" fg:x="758" fg:w="2"/><text x="60.3134%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="60.0634%" y="277" width="0.1585%" height="15" fill="rgb(252,118,36)" fg:x="758" fg:w="2"/><text x="60.3134%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.1426%" y="261" width="0.0792%" height="15" fill="rgb(210,224,19)" fg:x="759" fg:w="1"/><text x="60.3926%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="59.9842%" y="325" width="0.3170%" height="15" fill="rgb(218,30,24)" fg:x="757" fg:w="4"/><text x="60.2342%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="60.0634%" y="309" width="0.2377%" height="15" fill="rgb(219,75,50)" fg:x="758" fg:w="3"/><text x="60.3134%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="60.2219%" y="293" width="0.0792%" height="15" fill="rgb(234,72,50)" fg:x="760" fg:w="1"/><text x="60.4719%" y="303.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="60.2219%" y="277" width="0.0792%" height="15" fill="rgb(219,100,48)" fg:x="760" fg:w="1"/><text x="60.4719%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="59.9842%" y="357" width="0.3962%" height="15" fill="rgb(253,5,41)" fg:x="757" fg:w="5"/><text x="60.2342%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="59.9842%" y="341" width="0.3962%" height="15" fill="rgb(247,181,11)" fg:x="757" fg:w="5"/><text x="60.2342%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="60.3011%" y="325" width="0.0792%" height="15" fill="rgb(222,223,25)" fg:x="761" fg:w="1"/><text x="60.5511%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.3011%" y="309" width="0.0792%" height="15" fill="rgb(214,198,28)" fg:x="761" fg:w="1"/><text x="60.5511%" y="319.50"></text></g><g><title>plugins_core::tools::contained_by (18 samples, 1.43%)</title><rect x="59.0333%" y="533" width="1.4263%" height="15" fill="rgb(230,46,43)" fg:x="745" fg:w="18"/><text x="59.2833%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (16 samples, 1.27%)</title><rect x="59.1918%" y="517" width="1.2678%" height="15" fill="rgb(233,65,53)" fg:x="747" fg:w="16"/><text x="59.4418%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (16 samples, 1.27%)</title><rect x="59.1918%" y="501" width="1.2678%" height="15" fill="rgb(221,121,27)" fg:x="747" fg:w="16"/><text x="59.4418%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (16 samples, 1.27%)</title><rect x="59.1918%" y="485" width="1.2678%" height="15" fill="rgb(247,70,47)" fg:x="747" fg:w="16"/><text x="59.4418%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (16 samples, 1.27%)</title><rect x="59.1918%" y="469" width="1.2678%" height="15" fill="rgb(228,85,35)" fg:x="747" fg:w="16"/><text x="59.4418%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.55%)</title><rect x="59.9049%" y="453" width="0.5547%" height="15" fill="rgb(209,50,18)" fg:x="756" fg:w="7"/><text x="60.1549%" y="463.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.55%)</title><rect x="59.9049%" y="437" width="0.5547%" height="15" fill="rgb(250,19,35)" fg:x="756" fg:w="7"/><text x="60.1549%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.55%)</title><rect x="59.9049%" y="421" width="0.5547%" height="15" fill="rgb(253,107,29)" fg:x="756" fg:w="7"/><text x="60.1549%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.55%)</title><rect x="59.9049%" y="405" width="0.5547%" height="15" fill="rgb(252,179,29)" fg:x="756" fg:w="7"/><text x="60.1549%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.55%)</title><rect x="59.9049%" y="389" width="0.5547%" height="15" fill="rgb(238,194,6)" fg:x="756" fg:w="7"/><text x="60.1549%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.55%)</title><rect x="59.9049%" y="373" width="0.5547%" height="15" fill="rgb(238,164,29)" fg:x="756" fg:w="7"/><text x="60.1549%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.3803%" y="357" width="0.0792%" height="15" fill="rgb(224,25,9)" fg:x="762" fg:w="1"/><text x="60.6303%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.3803%" y="341" width="0.0792%" height="15" fill="rgb(244,153,23)" fg:x="762" fg:w="1"/><text x="60.6303%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.3803%" y="325" width="0.0792%" height="15" fill="rgb(212,203,14)" fg:x="762" fg:w="1"/><text x="60.6303%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.4596%" y="501" width="0.0792%" height="15" fill="rgb(220,164,20)" fg:x="763" fg:w="1"/><text x="60.7096%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.4596%" y="485" width="0.0792%" height="15" fill="rgb(222,203,48)" fg:x="763" fg:w="1"/><text x="60.7096%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.4596%" y="469" width="0.0792%" height="15" fill="rgb(215,159,22)" fg:x="763" fg:w="1"/><text x="60.7096%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.4596%" y="453" width="0.0792%" height="15" fill="rgb(216,183,47)" fg:x="763" fg:w="1"/><text x="60.7096%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.4596%" y="437" width="0.0792%" height="15" fill="rgb(229,195,25)" fg:x="763" fg:w="1"/><text x="60.7096%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.4596%" y="421" width="0.0792%" height="15" fill="rgb(224,132,51)" fg:x="763" fg:w="1"/><text x="60.7096%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.4596%" y="405" width="0.0792%" height="15" fill="rgb(240,63,7)" fg:x="763" fg:w="1"/><text x="60.7096%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.4596%" y="389" width="0.0792%" height="15" fill="rgb(249,182,41)" fg:x="763" fg:w="1"/><text x="60.7096%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.4596%" y="373" width="0.0792%" height="15" fill="rgb(243,47,26)" fg:x="763" fg:w="1"/><text x="60.7096%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.4596%" y="357" width="0.0792%" height="15" fill="rgb(233,48,2)" fg:x="763" fg:w="1"/><text x="60.7096%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="60.4596%" y="341" width="0.0792%" height="15" fill="rgb(244,165,34)" fg:x="763" fg:w="1"/><text x="60.7096%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="60.4596%" y="325" width="0.0792%" height="15" fill="rgb(207,89,7)" fg:x="763" fg:w="1"/><text x="60.7096%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="60.4596%" y="309" width="0.0792%" height="15" fill="rgb(244,117,36)" fg:x="763" fg:w="1"/><text x="60.7096%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="60.4596%" y="293" width="0.0792%" height="15" fill="rgb(226,144,34)" fg:x="763" fg:w="1"/><text x="60.7096%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.4596%" y="277" width="0.0792%" height="15" fill="rgb(213,23,19)" fg:x="763" fg:w="1"/><text x="60.7096%" y="287.50"></text></g><g><title>engine::session::logs::capture (459 samples, 36.37%)</title><rect x="24.3265%" y="693" width="36.3708%" height="15" fill="rgb(217,75,12)" fg:x="307" fg:w="459"/><text x="24.5765%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (456 samples, 36.13%)</title><rect x="24.5642%" y="677" width="36.1331%" height="15" fill="rgb(224,159,17)" fg:x="310" fg:w="456"/><text x="24.8142%" y="687.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (456 samples, 36.13%)</title><rect x="24.5642%" y="661" width="36.1331%" height="15" fill="rgb(217,118,1)" fg:x="310" fg:w="456"/><text x="24.8142%" y="671.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::p..</text></g><g><title>kernel::plugins::mw::apply_middleware (456 samples, 36.13%)</title><rect x="24.5642%" y="645" width="36.1331%" height="15" fill="rgb(232,180,48)" fg:x="310" fg:w="456"/><text x="24.8142%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (456 samples, 36.13%)</title><rect x="24.5642%" y="629" width="36.1331%" height="15" fill="rgb(230,27,33)" fg:x="310" fg:w="456"/><text x="24.8142%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (456 samples, 36.13%)</title><rect x="24.5642%" y="613" width="36.1331%" height="15" fill="rgb(205,31,21)" fg:x="310" fg:w="456"/><text x="24.8142%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::p..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (439 samples, 34.79%)</title><rect x="25.9113%" y="597" width="34.7861%" height="15" fill="rgb(253,59,4)" fg:x="327" fg:w="439"/><text x="26.1613%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (439 samples, 34.79%)</title><rect x="25.9113%" y="581" width="34.7861%" height="15" fill="rgb(224,201,9)" fg:x="327" fg:w="439"/><text x="26.1613%" y="591.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Mi..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (21 samples, 1.66%)</title><rect x="59.0333%" y="565" width="1.6640%" height="15" fill="rgb(229,206,30)" fg:x="745" fg:w="21"/><text x="59.2833%" y="575.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (21 samples, 1.66%)</title><rect x="59.0333%" y="549" width="1.6640%" height="15" fill="rgb(212,67,47)" fg:x="745" fg:w="21"/><text x="59.2833%" y="559.50"></text></g><g><title>plugins_core::tools::occupied_by (3 samples, 0.24%)</title><rect x="60.4596%" y="533" width="0.2377%" height="15" fill="rgb(211,96,50)" fg:x="763" fg:w="3"/><text x="60.7096%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="60.4596%" y="517" width="0.2377%" height="15" fill="rgb(252,114,18)" fg:x="763" fg:w="3"/><text x="60.7096%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="60.5388%" y="501" width="0.1585%" height="15" fill="rgb(223,58,37)" fg:x="764" fg:w="2"/><text x="60.7888%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.5388%" y="485" width="0.1585%" height="15" fill="rgb(237,70,4)" fg:x="764" fg:w="2"/><text x="60.7888%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="60.5388%" y="469" width="0.1585%" height="15" fill="rgb(244,85,46)" fg:x="764" fg:w="2"/><text x="60.7888%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="60.5388%" y="453" width="0.1585%" height="15" fill="rgb(223,39,52)" fg:x="764" fg:w="2"/><text x="60.7888%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="60.5388%" y="437" width="0.1585%" height="15" fill="rgb(218,200,14)" fg:x="764" fg:w="2"/><text x="60.7888%" y="447.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="60.5388%" y="421" width="0.1585%" height="15" fill="rgb(208,171,16)" fg:x="764" fg:w="2"/><text x="60.7888%" y="431.50"></text></g><g><title>engine::session::Session::captured (464 samples, 36.77%)</title><rect x="24.0095%" y="709" width="36.7670%" height="15" fill="rgb(234,200,18)" fg:x="303" fg:w="464"/><text x="24.2595%" y="719.50">engine::session::Session::captured</text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="60.6973%" y="693" width="0.0792%" height="15" fill="rgb(228,45,11)" fg:x="766" fg:w="1"/><text x="60.9473%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.6973%" y="677" width="0.0792%" height="15" fill="rgb(237,182,11)" fg:x="766" fg:w="1"/><text x="60.9473%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.6973%" y="661" width="0.0792%" height="15" fill="rgb(241,175,49)" fg:x="766" fg:w="1"/><text x="60.9473%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.6973%" y="645" width="0.0792%" height="15" fill="rgb(247,38,35)" fg:x="766" fg:w="1"/><text x="60.9473%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.6973%" y="629" width="0.0792%" height="15" fill="rgb(228,39,49)" fg:x="766" fg:w="1"/><text x="60.9473%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.6973%" y="613" width="0.0792%" height="15" fill="rgb(226,101,26)" fg:x="766" fg:w="1"/><text x="60.9473%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="60.6973%" y="597" width="0.0792%" height="15" fill="rgb(206,141,19)" fg:x="766" fg:w="1"/><text x="60.9473%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="60.6973%" y="581" width="0.0792%" height="15" fill="rgb(211,200,13)" fg:x="766" fg:w="1"/><text x="60.9473%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.8558%" y="613" width="0.0792%" height="15" fill="rgb(241,121,6)" fg:x="768" fg:w="1"/><text x="61.1058%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.8558%" y="597" width="0.0792%" height="15" fill="rgb(234,221,29)" fg:x="768" fg:w="1"/><text x="61.1058%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.8558%" y="581" width="0.0792%" height="15" fill="rgb(229,136,5)" fg:x="768" fg:w="1"/><text x="61.1058%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.8558%" y="565" width="0.0792%" height="15" fill="rgb(238,36,11)" fg:x="768" fg:w="1"/><text x="61.1058%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.8558%" y="549" width="0.0792%" height="15" fill="rgb(251,55,41)" fg:x="768" fg:w="1"/><text x="61.1058%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.8558%" y="533" width="0.0792%" height="15" fill="rgb(242,34,40)" fg:x="768" fg:w="1"/><text x="61.1058%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.8558%" y="517" width="0.0792%" height="15" fill="rgb(215,42,17)" fg:x="768" fg:w="1"/><text x="61.1058%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="60.8558%" y="501" width="0.0792%" height="15" fill="rgb(207,44,46)" fg:x="768" fg:w="1"/><text x="61.1058%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="60.8558%" y="485" width="0.0792%" height="15" fill="rgb(211,206,28)" fg:x="768" fg:w="1"/><text x="61.1058%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="60.8558%" y="469" width="0.0792%" height="15" fill="rgb(237,167,16)" fg:x="768" fg:w="1"/><text x="61.1058%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="60.8558%" y="453" width="0.0792%" height="15" fill="rgb(233,66,6)" fg:x="768" fg:w="1"/><text x="61.1058%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.8558%" y="437" width="0.0792%" height="15" fill="rgb(246,123,29)" fg:x="768" fg:w="1"/><text x="61.1058%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="60.8558%" y="661" width="0.1585%" height="15" fill="rgb(209,62,40)" fg:x="768" fg:w="2"/><text x="61.1058%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="60.8558%" y="645" width="0.1585%" height="15" fill="rgb(218,4,25)" fg:x="768" fg:w="2"/><text x="61.1058%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="60.8558%" y="629" width="0.1585%" height="15" fill="rgb(253,91,49)" fg:x="768" fg:w="2"/><text x="61.1058%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.9350%" y="613" width="0.0792%" height="15" fill="rgb(228,155,29)" fg:x="769" fg:w="1"/><text x="61.1850%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.0143%" y="613" width="0.0792%" height="15" fill="rgb(243,57,37)" fg:x="770" fg:w="1"/><text x="61.2643%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.0143%" y="597" width="0.0792%" height="15" fill="rgb(244,167,17)" fg:x="770" fg:w="1"/><text x="61.2643%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="61.0935%" y="613" width="0.1585%" height="15" fill="rgb(207,181,38)" fg:x="771" fg:w="2"/><text x="61.3435%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="61.0935%" y="597" width="0.1585%" height="15" fill="rgb(211,8,23)" fg:x="771" fg:w="2"/><text x="61.3435%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="61.0935%" y="581" width="0.1585%" height="15" fill="rgb(235,11,44)" fg:x="771" fg:w="2"/><text x="61.3435%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="61.0935%" y="565" width="0.1585%" height="15" fill="rgb(248,18,52)" fg:x="771" fg:w="2"/><text x="61.3435%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.1727%" y="549" width="0.0792%" height="15" fill="rgb(208,4,7)" fg:x="772" fg:w="1"/><text x="61.4227%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="61.0143%" y="661" width="0.3170%" height="15" fill="rgb(240,17,39)" fg:x="770" fg:w="4"/><text x="61.2643%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="61.0143%" y="645" width="0.3170%" height="15" fill="rgb(207,170,3)" fg:x="770" fg:w="4"/><text x="61.2643%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="61.0143%" y="629" width="0.3170%" height="15" fill="rgb(236,100,52)" fg:x="770" fg:w="4"/><text x="61.2643%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.2520%" y="613" width="0.0792%" height="15" fill="rgb(246,78,51)" fg:x="773" fg:w="1"/><text x="61.5020%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.2520%" y="597" width="0.0792%" height="15" fill="rgb(211,17,15)" fg:x="773" fg:w="1"/><text x="61.5020%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.2520%" y="581" width="0.0792%" height="15" fill="rgb(209,59,46)" fg:x="773" fg:w="1"/><text x="61.5020%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.2520%" y="565" width="0.0792%" height="15" fill="rgb(210,92,25)" fg:x="773" fg:w="1"/><text x="61.5020%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="61.2520%" y="549" width="0.0792%" height="15" fill="rgb(238,174,52)" fg:x="773" fg:w="1"/><text x="61.5020%" y="559.50"></text></g><g><title>engine::session::internal::Added::find_refs (7 samples, 0.55%)</title><rect x="60.8558%" y="693" width="0.5547%" height="15" fill="rgb(230,73,7)" fg:x="768" fg:w="7"/><text x="61.1058%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.55%)</title><rect x="60.8558%" y="677" width="0.5547%" height="15" fill="rgb(243,124,40)" fg:x="768" fg:w="7"/><text x="61.1058%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.3312%" y="661" width="0.0792%" height="15" fill="rgb(244,170,11)" fg:x="774" fg:w="1"/><text x="61.5812%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.3312%" y="645" width="0.0792%" height="15" fill="rgb(207,114,54)" fg:x="774" fg:w="1"/><text x="61.5812%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.3312%" y="629" width="0.0792%" height="15" fill="rgb(205,42,20)" fg:x="774" fg:w="1"/><text x="61.5812%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.3312%" y="613" width="0.0792%" height="15" fill="rgb(230,30,28)" fg:x="774" fg:w="1"/><text x="61.5812%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.3312%" y="597" width="0.0792%" height="15" fill="rgb(205,73,54)" fg:x="774" fg:w="1"/><text x="61.5812%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="61.3312%" y="581" width="0.0792%" height="15" fill="rgb(254,227,23)" fg:x="774" fg:w="1"/><text x="61.5812%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="61.3312%" y="565" width="0.0792%" height="15" fill="rgb(228,202,34)" fg:x="774" fg:w="1"/><text x="61.5812%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="61.3312%" y="549" width="0.0792%" height="15" fill="rgb(222,225,37)" fg:x="774" fg:w="1"/><text x="61.5812%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.4105%" y="661" width="0.0792%" height="15" fill="rgb(221,14,54)" fg:x="775" fg:w="1"/><text x="61.6605%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.4105%" y="645" width="0.0792%" height="15" fill="rgb(254,102,2)" fg:x="775" fg:w="1"/><text x="61.6605%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.4105%" y="629" width="0.0792%" height="15" fill="rgb(232,104,17)" fg:x="775" fg:w="1"/><text x="61.6605%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.4105%" y="613" width="0.0792%" height="15" fill="rgb(250,220,14)" fg:x="775" fg:w="1"/><text x="61.6605%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.4105%" y="597" width="0.0792%" height="15" fill="rgb(241,158,9)" fg:x="775" fg:w="1"/><text x="61.6605%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.4105%" y="581" width="0.0792%" height="15" fill="rgb(246,9,43)" fg:x="775" fg:w="1"/><text x="61.6605%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="61.4105%" y="565" width="0.0792%" height="15" fill="rgb(206,73,33)" fg:x="775" fg:w="1"/><text x="61.6605%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="61.4105%" y="549" width="0.0792%" height="15" fill="rgb(222,79,8)" fg:x="775" fg:w="1"/><text x="61.6605%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="61.4105%" y="533" width="0.0792%" height="15" fill="rgb(234,8,54)" fg:x="775" fg:w="1"/><text x="61.6605%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.4105%" y="517" width="0.0792%" height="15" fill="rgb(209,134,38)" fg:x="775" fg:w="1"/><text x="61.6605%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.4105%" y="501" width="0.0792%" height="15" fill="rgb(230,127,29)" fg:x="775" fg:w="1"/><text x="61.6605%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="61.4105%" y="485" width="0.0792%" height="15" fill="rgb(242,44,41)" fg:x="775" fg:w="1"/><text x="61.6605%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="61.4105%" y="469" width="0.0792%" height="15" fill="rgb(222,56,43)" fg:x="775" fg:w="1"/><text x="61.6605%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="61.4105%" y="453" width="0.0792%" height="15" fill="rgb(238,39,47)" fg:x="775" fg:w="1"/><text x="61.6605%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="61.4105%" y="437" width="0.0792%" height="15" fill="rgb(226,79,43)" fg:x="775" fg:w="1"/><text x="61.6605%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.4105%" y="421" width="0.0792%" height="15" fill="rgb(242,105,53)" fg:x="775" fg:w="1"/><text x="61.6605%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="61.4105%" y="677" width="0.1585%" height="15" fill="rgb(251,132,46)" fg:x="775" fg:w="2"/><text x="61.6605%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.4897%" y="661" width="0.0792%" height="15" fill="rgb(231,77,14)" fg:x="776" fg:w="1"/><text x="61.7397%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.4897%" y="645" width="0.0792%" height="15" fill="rgb(240,135,9)" fg:x="776" fg:w="1"/><text x="61.7397%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="61.4897%" y="629" width="0.0792%" height="15" fill="rgb(248,109,14)" fg:x="776" fg:w="1"/><text x="61.7397%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="61.4897%" y="613" width="0.0792%" height="15" fill="rgb(227,146,52)" fg:x="776" fg:w="1"/><text x="61.7397%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="61.4897%" y="597" width="0.0792%" height="15" fill="rgb(232,54,3)" fg:x="776" fg:w="1"/><text x="61.7397%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.4897%" y="581" width="0.0792%" height="15" fill="rgb(229,201,43)" fg:x="776" fg:w="1"/><text x="61.7397%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.4897%" y="565" width="0.0792%" height="15" fill="rgb(252,161,33)" fg:x="776" fg:w="1"/><text x="61.7397%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="61.4897%" y="549" width="0.0792%" height="15" fill="rgb(226,146,40)" fg:x="776" fg:w="1"/><text x="61.7397%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="61.4897%" y="533" width="0.0792%" height="15" fill="rgb(219,47,25)" fg:x="776" fg:w="1"/><text x="61.7397%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="61.4897%" y="517" width="0.0792%" height="15" fill="rgb(250,135,13)" fg:x="776" fg:w="1"/><text x="61.7397%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="61.4897%" y="501" width="0.0792%" height="15" fill="rgb(219,229,18)" fg:x="776" fg:w="1"/><text x="61.7397%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.4897%" y="485" width="0.0792%" height="15" fill="rgb(217,152,27)" fg:x="776" fg:w="1"/><text x="61.7397%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="61.6482%" y="629" width="0.0792%" height="15" fill="rgb(225,71,47)" fg:x="778" fg:w="1"/><text x="61.8982%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="61.7274%" y="597" width="0.0792%" height="15" fill="rgb(220,139,14)" fg:x="779" fg:w="1"/><text x="61.9774%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.8067%" y="581" width="0.0792%" height="15" fill="rgb(247,54,32)" fg:x="780" fg:w="1"/><text x="62.0567%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.8067%" y="565" width="0.0792%" height="15" fill="rgb(252,131,39)" fg:x="780" fg:w="1"/><text x="62.0567%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.8067%" y="549" width="0.0792%" height="15" fill="rgb(210,108,39)" fg:x="780" fg:w="1"/><text x="62.0567%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.8067%" y="533" width="0.0792%" height="15" fill="rgb(205,23,29)" fg:x="780" fg:w="1"/><text x="62.0567%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.8067%" y="517" width="0.0792%" height="15" fill="rgb(246,139,46)" fg:x="780" fg:w="1"/><text x="62.0567%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.48%)</title><rect x="61.5689%" y="677" width="0.4754%" height="15" fill="rgb(250,81,26)" fg:x="777" fg:w="6"/><text x="61.8189%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="61.5689%" y="661" width="0.4754%" height="15" fill="rgb(214,104,7)" fg:x="777" fg:w="6"/><text x="61.8189%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="61.5689%" y="645" width="0.4754%" height="15" fill="rgb(233,189,8)" fg:x="777" fg:w="6"/><text x="61.8189%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="61.7274%" y="629" width="0.3170%" height="15" fill="rgb(228,141,17)" fg:x="779" fg:w="4"/><text x="61.9774%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="61.7274%" y="613" width="0.3170%" height="15" fill="rgb(247,157,1)" fg:x="779" fg:w="4"/><text x="61.9774%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="61.8067%" y="597" width="0.2377%" height="15" fill="rgb(249,225,5)" fg:x="780" fg:w="3"/><text x="62.0567%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="61.8859%" y="581" width="0.1585%" height="15" fill="rgb(242,55,13)" fg:x="781" fg:w="2"/><text x="62.1359%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.8859%" y="565" width="0.1585%" height="15" fill="rgb(230,49,50)" fg:x="781" fg:w="2"/><text x="62.1359%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="61.8859%" y="549" width="0.1585%" height="15" fill="rgb(241,111,38)" fg:x="781" fg:w="2"/><text x="62.1359%" y="559.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="61.8859%" y="533" width="0.1585%" height="15" fill="rgb(252,155,4)" fg:x="781" fg:w="2"/><text x="62.1359%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="61.8859%" y="517" width="0.1585%" height="15" fill="rgb(212,69,32)" fg:x="781" fg:w="2"/><text x="62.1359%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.9651%" y="501" width="0.0792%" height="15" fill="rgb(243,107,47)" fg:x="782" fg:w="1"/><text x="62.2151%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.9651%" y="485" width="0.0792%" height="15" fill="rgb(247,130,12)" fg:x="782" fg:w="1"/><text x="62.2151%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.0444%" y="533" width="0.0792%" height="15" fill="rgb(233,74,16)" fg:x="783" fg:w="1"/><text x="62.2944%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.0444%" y="517" width="0.0792%" height="15" fill="rgb(208,58,18)" fg:x="783" fg:w="1"/><text x="62.2944%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="62.1236%" y="517" width="0.1585%" height="15" fill="rgb(242,225,1)" fg:x="784" fg:w="2"/><text x="62.3736%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.1236%" y="501" width="0.1585%" height="15" fill="rgb(249,39,40)" fg:x="784" fg:w="2"/><text x="62.3736%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="62.1236%" y="485" width="0.1585%" height="15" fill="rgb(207,72,44)" fg:x="784" fg:w="2"/><text x="62.3736%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.2029%" y="469" width="0.0792%" height="15" fill="rgb(215,193,12)" fg:x="785" fg:w="1"/><text x="62.4529%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.2821%" y="517" width="0.0792%" height="15" fill="rgb(248,41,39)" fg:x="786" fg:w="1"/><text x="62.5321%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="62.2821%" y="501" width="0.0792%" height="15" fill="rgb(253,85,4)" fg:x="786" fg:w="1"/><text x="62.5321%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="62.0444%" y="581" width="0.3962%" height="15" fill="rgb(243,70,31)" fg:x="783" fg:w="5"/><text x="62.2944%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="62.0444%" y="565" width="0.3962%" height="15" fill="rgb(253,195,26)" fg:x="783" fg:w="5"/><text x="62.2944%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="62.0444%" y="549" width="0.3962%" height="15" fill="rgb(243,42,11)" fg:x="783" fg:w="5"/><text x="62.2944%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="62.1236%" y="533" width="0.3170%" height="15" fill="rgb(239,66,17)" fg:x="784" fg:w="4"/><text x="62.3736%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.3613%" y="517" width="0.0792%" height="15" fill="rgb(217,132,21)" fg:x="787" fg:w="1"/><text x="62.6113%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.3613%" y="501" width="0.0792%" height="15" fill="rgb(252,202,21)" fg:x="787" fg:w="1"/><text x="62.6113%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="62.3613%" y="485" width="0.0792%" height="15" fill="rgb(233,98,36)" fg:x="787" fg:w="1"/><text x="62.6113%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.4406%" y="581" width="0.0792%" height="15" fill="rgb(216,153,54)" fg:x="788" fg:w="1"/><text x="62.6906%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.4406%" y="565" width="0.0792%" height="15" fill="rgb(250,99,7)" fg:x="788" fg:w="1"/><text x="62.6906%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (15 samples, 1.19%)</title><rect x="61.4105%" y="693" width="1.1886%" height="15" fill="rgb(207,56,50)" fg:x="775" fg:w="15"/><text x="61.6605%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.55%)</title><rect x="62.0444%" y="677" width="0.5547%" height="15" fill="rgb(244,61,34)" fg:x="783" fg:w="7"/><text x="62.2944%" y="687.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.55%)</title><rect x="62.0444%" y="661" width="0.5547%" height="15" fill="rgb(241,50,38)" fg:x="783" fg:w="7"/><text x="62.2944%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.55%)</title><rect x="62.0444%" y="645" width="0.5547%" height="15" fill="rgb(212,166,30)" fg:x="783" fg:w="7"/><text x="62.2944%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.55%)</title><rect x="62.0444%" y="629" width="0.5547%" height="15" fill="rgb(249,127,32)" fg:x="783" fg:w="7"/><text x="62.2944%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.55%)</title><rect x="62.0444%" y="613" width="0.5547%" height="15" fill="rgb(209,103,0)" fg:x="783" fg:w="7"/><text x="62.2944%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.55%)</title><rect x="62.0444%" y="597" width="0.5547%" height="15" fill="rgb(238,209,51)" fg:x="783" fg:w="7"/><text x="62.2944%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.5198%" y="581" width="0.0792%" height="15" fill="rgb(237,56,23)" fg:x="789" fg:w="1"/><text x="62.7698%" y="591.50"></text></g><g><title>engine::session::Session::load_entity (24 samples, 1.90%)</title><rect x="60.7765%" y="709" width="1.9017%" height="15" fill="rgb(215,153,46)" fg:x="767" fg:w="24"/><text x="61.0265%" y="719.50">e..</text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="62.5990%" y="693" width="0.0792%" height="15" fill="rgb(224,49,31)" fg:x="790" fg:w="1"/><text x="62.8490%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="62.5990%" y="677" width="0.0792%" height="15" fill="rgb(250,18,42)" fg:x="790" fg:w="1"/><text x="62.8490%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="62.5990%" y="661" width="0.0792%" height="15" fill="rgb(215,176,39)" fg:x="790" fg:w="1"/><text x="62.8490%" y="671.50"></text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="62.6783%" y="709" width="0.1585%" height="15" fill="rgb(223,77,29)" fg:x="791" fg:w="2"/><text x="62.9283%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="62.6783%" y="693" width="0.1585%" height="15" fill="rgb(234,94,52)" fg:x="791" fg:w="2"/><text x="62.9283%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.7575%" y="677" width="0.0792%" height="15" fill="rgb(220,154,50)" fg:x="792" fg:w="1"/><text x="63.0075%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.7575%" y="661" width="0.0792%" height="15" fill="rgb(212,11,10)" fg:x="792" fg:w="1"/><text x="63.0075%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.7575%" y="645" width="0.0792%" height="15" fill="rgb(205,166,19)" fg:x="792" fg:w="1"/><text x="63.0075%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="62.8368%" y="661" width="0.0792%" height="15" fill="rgb(244,198,16)" fg:x="793" fg:w="1"/><text x="63.0868%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.8368%" y="645" width="0.0792%" height="15" fill="rgb(219,69,12)" fg:x="793" fg:w="1"/><text x="63.0868%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.8368%" y="629" width="0.0792%" height="15" fill="rgb(245,30,7)" fg:x="793" fg:w="1"/><text x="63.0868%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.8368%" y="613" width="0.0792%" height="15" fill="rgb(218,221,48)" fg:x="793" fg:w="1"/><text x="63.0868%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.8368%" y="597" width="0.0792%" height="15" fill="rgb(216,66,15)" fg:x="793" fg:w="1"/><text x="63.0868%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.8368%" y="581" width="0.0792%" height="15" fill="rgb(226,122,50)" fg:x="793" fg:w="1"/><text x="63.0868%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.9952%" y="533" width="0.0792%" height="15" fill="rgb(239,156,16)" fg:x="795" fg:w="1"/><text x="63.2452%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.9952%" y="517" width="0.0792%" height="15" fill="rgb(224,27,38)" fg:x="795" fg:w="1"/><text x="63.2452%" y="527.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="62.9952%" y="501" width="0.0792%" height="15" fill="rgb(224,39,27)" fg:x="795" fg:w="1"/><text x="63.2452%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.9952%" y="485" width="0.0792%" height="15" fill="rgb(215,92,29)" fg:x="795" fg:w="1"/><text x="63.2452%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.9952%" y="469" width="0.0792%" height="15" fill="rgb(207,159,16)" fg:x="795" fg:w="1"/><text x="63.2452%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="62.9952%" y="453" width="0.0792%" height="15" fill="rgb(238,163,47)" fg:x="795" fg:w="1"/><text x="63.2452%" y="463.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="62.9952%" y="437" width="0.0792%" height="15" fill="rgb(219,91,49)" fg:x="795" fg:w="1"/><text x="63.2452%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="62.9952%" y="421" width="0.0792%" height="15" fill="rgb(227,167,31)" fg:x="795" fg:w="1"/><text x="63.2452%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="62.9952%" y="565" width="0.1585%" height="15" fill="rgb(234,80,54)" fg:x="795" fg:w="2"/><text x="63.2452%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.9952%" y="549" width="0.1585%" height="15" fill="rgb(212,114,2)" fg:x="795" fg:w="2"/><text x="63.2452%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="63.0745%" y="533" width="0.0792%" height="15" fill="rgb(234,50,24)" fg:x="796" fg:w="1"/><text x="63.3245%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="63.1537%" y="533" width="0.0792%" height="15" fill="rgb(221,68,8)" fg:x="797" fg:w="1"/><text x="63.4037%" y="543.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="62.9160%" y="661" width="0.3962%" height="15" fill="rgb(254,180,31)" fg:x="794" fg:w="5"/><text x="63.1660%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="62.9160%" y="645" width="0.3962%" height="15" fill="rgb(247,130,50)" fg:x="794" fg:w="5"/><text x="63.1660%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="62.9160%" y="629" width="0.3962%" height="15" fill="rgb(211,109,4)" fg:x="794" fg:w="5"/><text x="63.1660%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="62.9952%" y="613" width="0.3170%" height="15" fill="rgb(238,50,21)" fg:x="795" fg:w="4"/><text x="63.2452%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="62.9952%" y="597" width="0.3170%" height="15" fill="rgb(225,57,45)" fg:x="795" fg:w="4"/><text x="63.2452%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="62.9952%" y="581" width="0.3170%" height="15" fill="rgb(209,196,50)" fg:x="795" fg:w="4"/><text x="63.2452%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="63.1537%" y="565" width="0.1585%" height="15" fill="rgb(242,140,13)" fg:x="797" fg:w="2"/><text x="63.4037%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="63.1537%" y="549" width="0.1585%" height="15" fill="rgb(217,111,7)" fg:x="797" fg:w="2"/><text x="63.4037%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="63.2330%" y="533" width="0.0792%" height="15" fill="rgb(253,193,51)" fg:x="798" fg:w="1"/><text x="63.4830%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.2330%" y="517" width="0.0792%" height="15" fill="rgb(252,70,29)" fg:x="798" fg:w="1"/><text x="63.4830%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.2330%" y="501" width="0.0792%" height="15" fill="rgb(232,127,12)" fg:x="798" fg:w="1"/><text x="63.4830%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="63.2330%" y="485" width="0.0792%" height="15" fill="rgb(211,180,21)" fg:x="798" fg:w="1"/><text x="63.4830%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.2330%" y="469" width="0.0792%" height="15" fill="rgb(229,72,13)" fg:x="798" fg:w="1"/><text x="63.4830%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.2330%" y="453" width="0.0792%" height="15" fill="rgb(240,211,49)" fg:x="798" fg:w="1"/><text x="63.4830%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="63.3122%" y="597" width="0.1585%" height="15" fill="rgb(219,149,40)" fg:x="799" fg:w="2"/><text x="63.5622%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="63.3122%" y="581" width="0.1585%" height="15" fill="rgb(210,127,46)" fg:x="799" fg:w="2"/><text x="63.5622%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.3914%" y="565" width="0.0792%" height="15" fill="rgb(220,106,7)" fg:x="800" fg:w="1"/><text x="63.6414%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.71%)</title><rect x="62.8368%" y="677" width="0.7132%" height="15" fill="rgb(249,31,22)" fg:x="793" fg:w="9"/><text x="63.0868%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="63.3122%" y="661" width="0.2377%" height="15" fill="rgb(253,1,49)" fg:x="799" fg:w="3"/><text x="63.5622%" y="671.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="63.3122%" y="645" width="0.2377%" height="15" fill="rgb(227,144,33)" fg:x="799" fg:w="3"/><text x="63.5622%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="63.3122%" y="629" width="0.2377%" height="15" fill="rgb(249,163,44)" fg:x="799" fg:w="3"/><text x="63.5622%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="63.3122%" y="613" width="0.2377%" height="15" fill="rgb(234,15,39)" fg:x="799" fg:w="3"/><text x="63.5622%" y="623.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="63.4707%" y="597" width="0.0792%" height="15" fill="rgb(207,66,16)" fg:x="801" fg:w="1"/><text x="63.7207%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.4707%" y="581" width="0.0792%" height="15" fill="rgb(233,112,24)" fg:x="801" fg:w="1"/><text x="63.7207%" y="591.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (502 samples, 39.78%)</title><rect x="23.8510%" y="741" width="39.7781%" height="15" fill="rgb(230,90,22)" fg:x="301" fg:w="502"/><text x="24.1010%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (502 samples, 39.78%)</title><rect x="23.8510%" y="725" width="39.7781%" height="15" fill="rgb(229,61,13)" fg:x="301" fg:w="502"/><text x="24.1010%" y="735.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (10 samples, 0.79%)</title><rect x="62.8368%" y="709" width="0.7924%" height="15" fill="rgb(225,57,24)" fg:x="793" fg:w="10"/><text x="63.0868%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.79%)</title><rect x="62.8368%" y="693" width="0.7924%" height="15" fill="rgb(208,169,48)" fg:x="793" fg:w="10"/><text x="63.0868%" y="703.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="63.5499%" y="677" width="0.0792%" height="15" fill="rgb(244,218,51)" fg:x="802" fg:w="1"/><text x="63.7999%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (805 samples, 63.79%)</title><rect x="0.0000%" y="789" width="63.7876%" height="15" fill="rgb(214,148,10)" fg:x="0" fg:w="805"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (805 samples, 63.79%)</title><rect x="0.0000%" y="773" width="63.7876%" height="15" fill="rgb(225,174,27)" fg:x="0" fg:w="805"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (805 samples, 63.79%)</title><rect x="0.0000%" y="757" width="63.7876%" height="15" fill="rgb(230,96,26)" fg:x="0" fg:w="805"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (2 samples, 0.16%)</title><rect x="63.6292%" y="741" width="0.1585%" height="15" fill="rgb(232,10,30)" fg:x="803" fg:w="2"/><text x="63.8792%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.7084%" y="725" width="0.0792%" height="15" fill="rgb(222,8,50)" fg:x="804" fg:w="1"/><text x="63.9584%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.7084%" y="709" width="0.0792%" height="15" fill="rgb(213,81,27)" fg:x="804" fg:w="1"/><text x="63.9584%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.8669%" y="661" width="0.0792%" height="15" fill="rgb(245,50,10)" fg:x="806" fg:w="1"/><text x="64.1169%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="63.8669%" y="725" width="0.2377%" height="15" fill="rgb(216,100,18)" fg:x="806" fg:w="3"/><text x="64.1169%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="63.8669%" y="709" width="0.2377%" height="15" fill="rgb(236,147,54)" fg:x="806" fg:w="3"/><text x="64.1169%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="63.8669%" y="693" width="0.2377%" height="15" fill="rgb(205,143,26)" fg:x="806" fg:w="3"/><text x="64.1169%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3 samples, 0.24%)</title><rect x="63.8669%" y="677" width="0.2377%" height="15" fill="rgb(236,26,9)" fg:x="806" fg:w="3"/><text x="64.1169%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="63.9461%" y="661" width="0.1585%" height="15" fill="rgb(221,165,53)" fg:x="807" fg:w="2"/><text x="64.1961%" y="671.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="63.9461%" y="645" width="0.1585%" height="15" fill="rgb(214,110,17)" fg:x="807" fg:w="2"/><text x="64.1961%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.2631%" y="645" width="0.0792%" height="15" fill="rgb(237,197,12)" fg:x="811" fg:w="1"/><text x="64.5131%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.3423%" y="613" width="0.0792%" height="15" fill="rgb(205,84,17)" fg:x="812" fg:w="1"/><text x="64.5923%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="64.4216%" y="613" width="0.1585%" height="15" fill="rgb(237,18,45)" fg:x="813" fg:w="2"/><text x="64.6716%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.5008%" y="597" width="0.0792%" height="15" fill="rgb(221,87,14)" fg:x="814" fg:w="1"/><text x="64.7508%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.5800%" y="597" width="0.0792%" height="15" fill="rgb(238,186,15)" fg:x="815" fg:w="1"/><text x="64.8300%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.6593%" y="581" width="0.0792%" height="15" fill="rgb(208,115,11)" fg:x="816" fg:w="1"/><text x="64.9093%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.63%)</title><rect x="64.1838%" y="661" width="0.6339%" height="15" fill="rgb(254,175,0)" fg:x="810" fg:w="8"/><text x="64.4338%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (6 samples, 0.48%)</title><rect x="64.3423%" y="645" width="0.4754%" height="15" fill="rgb(227,24,42)" fg:x="812" fg:w="6"/><text x="64.5923%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="64.3423%" y="629" width="0.4754%" height="15" fill="rgb(223,211,37)" fg:x="812" fg:w="6"/><text x="64.5923%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="64.5800%" y="613" width="0.2377%" height="15" fill="rgb(235,49,27)" fg:x="815" fg:w="3"/><text x="64.8300%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="64.6593%" y="597" width="0.1585%" height="15" fill="rgb(254,97,51)" fg:x="816" fg:w="2"/><text x="64.9093%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="64.7385%" y="581" width="0.0792%" height="15" fill="rgb(249,51,40)" fg:x="817" fg:w="1"/><text x="64.9885%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="64.7385%" y="565" width="0.0792%" height="15" fill="rgb(210,128,45)" fg:x="817" fg:w="1"/><text x="64.9885%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="64.7385%" y="549" width="0.0792%" height="15" fill="rgb(224,137,50)" fg:x="817" fg:w="1"/><text x="64.9885%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.8177%" y="645" width="0.0792%" height="15" fill="rgb(242,15,9)" fg:x="818" fg:w="1"/><text x="65.0677%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.9762%" y="629" width="0.0792%" height="15" fill="rgb(233,187,41)" fg:x="820" fg:w="1"/><text x="65.2262%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.1347%" y="597" width="0.0792%" height="15" fill="rgb(227,2,29)" fg:x="822" fg:w="1"/><text x="65.3847%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.1347%" y="581" width="0.0792%" height="15" fill="rgb(222,70,3)" fg:x="822" fg:w="1"/><text x="65.3847%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.11%)</title><rect x="64.1838%" y="677" width="1.1094%" height="15" fill="rgb(213,11,42)" fg:x="810" fg:w="14"/><text x="64.4338%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="64.8177%" y="661" width="0.4754%" height="15" fill="rgb(225,150,9)" fg:x="818" fg:w="6"/><text x="65.0677%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="64.8970%" y="645" width="0.3962%" height="15" fill="rgb(230,162,45)" fg:x="819" fg:w="5"/><text x="65.1470%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="65.0555%" y="629" width="0.2377%" height="15" fill="rgb(222,14,52)" fg:x="821" fg:w="3"/><text x="65.3055%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="65.1347%" y="613" width="0.1585%" height="15" fill="rgb(254,198,14)" fg:x="822" fg:w="2"/><text x="65.3847%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.2139%" y="597" width="0.0792%" height="15" fill="rgb(220,217,30)" fg:x="823" fg:w="1"/><text x="65.4639%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.19%)</title><rect x="64.1838%" y="709" width="1.1886%" height="15" fill="rgb(215,146,41)" fg:x="810" fg:w="15"/><text x="64.4338%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (15 samples, 1.19%)</title><rect x="64.1838%" y="693" width="1.1886%" height="15" fill="rgb(217,27,36)" fg:x="810" fg:w="15"/><text x="64.4338%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.2932%" y="677" width="0.0792%" height="15" fill="rgb(219,218,39)" fg:x="824" fg:w="1"/><text x="65.5432%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 1.58%)</title><rect x="63.8669%" y="741" width="1.5848%" height="15" fill="rgb(219,4,42)" fg:x="806" fg:w="20"/><text x="64.1169%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (17 samples, 1.35%)</title><rect x="64.1046%" y="725" width="1.3471%" height="15" fill="rgb(249,119,36)" fg:x="809" fg:w="17"/><text x="64.3546%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.3724%" y="709" width="0.0792%" height="15" fill="rgb(209,23,33)" fg:x="825" fg:w="1"/><text x="65.6224%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.5309%" y="613" width="0.0792%" height="15" fill="rgb(211,10,0)" fg:x="827" fg:w="1"/><text x="65.7809%" y="623.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="65.5309%" y="645" width="0.1585%" height="15" fill="rgb(208,99,37)" fg:x="827" fg:w="2"/><text x="65.7809%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="65.5309%" y="629" width="0.1585%" height="15" fill="rgb(213,132,31)" fg:x="827" fg:w="2"/><text x="65.7809%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="65.6101%" y="613" width="0.0792%" height="15" fill="rgb(243,129,40)" fg:x="828" fg:w="1"/><text x="65.8601%" y="623.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="65.6894%" y="645" width="0.0792%" height="15" fill="rgb(210,66,33)" fg:x="829" fg:w="1"/><text x="65.9394%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="65.6894%" y="629" width="0.0792%" height="15" fill="rgb(209,189,4)" fg:x="829" fg:w="1"/><text x="65.9394%" y="639.50"></text></g><g><title>&lt;plugins_core::carrying::actions::GiveToAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="65.6894%" y="613" width="0.0792%" height="15" fill="rgb(214,107,37)" fg:x="829" fg:w="1"/><text x="65.9394%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="65.6894%" y="597" width="0.0792%" height="15" fill="rgb(245,88,54)" fg:x="829" fg:w="1"/><text x="65.9394%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.6894%" y="581" width="0.0792%" height="15" fill="rgb(205,146,20)" fg:x="829" fg:w="1"/><text x="65.9394%" y="591.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="65.7686%" y="645" width="0.0792%" height="15" fill="rgb(220,161,25)" fg:x="830" fg:w="1"/><text x="66.0186%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="65.7686%" y="629" width="0.0792%" height="15" fill="rgb(215,152,15)" fg:x="830" fg:w="1"/><text x="66.0186%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="65.7686%" y="613" width="0.0792%" height="15" fill="rgb(233,192,44)" fg:x="830" fg:w="1"/><text x="66.0186%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="65.8479%" y="613" width="0.0792%" height="15" fill="rgb(240,170,46)" fg:x="831" fg:w="1"/><text x="66.0979%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.8479%" y="597" width="0.0792%" height="15" fill="rgb(207,104,33)" fg:x="831" fg:w="1"/><text x="66.0979%" y="607.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (7 samples, 0.55%)</title><rect x="65.4517%" y="661" width="0.5547%" height="15" fill="rgb(219,21,39)" fg:x="826" fg:w="7"/><text x="65.7017%" y="671.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="65.8479%" y="645" width="0.1585%" height="15" fill="rgb(214,133,29)" fg:x="831" fg:w="2"/><text x="66.0979%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="65.8479%" y="629" width="0.1585%" height="15" fill="rgb(226,93,6)" fg:x="831" fg:w="2"/><text x="66.0979%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="65.9271%" y="613" width="0.0792%" height="15" fill="rgb(252,222,34)" fg:x="832" fg:w="1"/><text x="66.1771%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.9271%" y="597" width="0.0792%" height="15" fill="rgb(252,92,48)" fg:x="832" fg:w="1"/><text x="66.1771%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="66.0063%" y="645" width="0.0792%" height="15" fill="rgb(245,223,24)" fg:x="833" fg:w="1"/><text x="66.2563%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="66.0063%" y="629" width="0.0792%" height="15" fill="rgb(205,176,3)" fg:x="833" fg:w="1"/><text x="66.2563%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="66.0063%" y="613" width="0.0792%" height="15" fill="rgb(235,151,15)" fg:x="833" fg:w="1"/><text x="66.2563%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="66.0063%" y="597" width="0.0792%" height="15" fill="rgb(237,209,11)" fg:x="833" fg:w="1"/><text x="66.2563%" y="607.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (2 samples, 0.16%)</title><rect x="66.0063%" y="661" width="0.1585%" height="15" fill="rgb(243,227,24)" fg:x="833" fg:w="2"/><text x="66.2563%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="66.0856%" y="645" width="0.0792%" height="15" fill="rgb(239,193,16)" fg:x="834" fg:w="1"/><text x="66.3356%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="66.0856%" y="629" width="0.0792%" height="15" fill="rgb(231,27,9)" fg:x="834" fg:w="1"/><text x="66.3356%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="66.0856%" y="613" width="0.0792%" height="15" fill="rgb(219,169,10)" fg:x="834" fg:w="1"/><text x="66.3356%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="66.0856%" y="597" width="0.0792%" height="15" fill="rgb(244,229,43)" fg:x="834" fg:w="1"/><text x="66.3356%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="66.0856%" y="581" width="0.0792%" height="15" fill="rgb(254,38,20)" fg:x="834" fg:w="1"/><text x="66.3356%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="66.0856%" y="565" width="0.0792%" height="15" fill="rgb(250,47,30)" fg:x="834" fg:w="1"/><text x="66.3356%" y="575.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="66.0856%" y="549" width="0.0792%" height="15" fill="rgb(224,124,36)" fg:x="834" fg:w="1"/><text x="66.3356%" y="559.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.16%)</title><rect x="66.1648%" y="645" width="0.1585%" height="15" fill="rgb(246,68,51)" fg:x="835" fg:w="2"/><text x="66.4148%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="66.1648%" y="629" width="0.1585%" height="15" fill="rgb(253,43,49)" fg:x="835" fg:w="2"/><text x="66.4148%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="66.1648%" y="613" width="0.1585%" height="15" fill="rgb(219,54,36)" fg:x="835" fg:w="2"/><text x="66.4148%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.2441%" y="597" width="0.0792%" height="15" fill="rgb(227,133,34)" fg:x="836" fg:w="1"/><text x="66.4941%" y="607.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="66.3233%" y="629" width="0.1585%" height="15" fill="rgb(247,227,15)" fg:x="837" fg:w="2"/><text x="66.5733%" y="639.50"></text></g><g><title>glob::fill_todo (2 samples, 0.16%)</title><rect x="66.3233%" y="613" width="0.1585%" height="15" fill="rgb(229,96,14)" fg:x="837" fg:w="2"/><text x="66.5733%" y="623.50"></text></g><g><title>glob::is_dir (2 samples, 0.16%)</title><rect x="66.3233%" y="597" width="0.1585%" height="15" fill="rgb(220,79,17)" fg:x="837" fg:w="2"/><text x="66.5733%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="66.3233%" y="581" width="0.1585%" height="15" fill="rgb(205,131,53)" fg:x="837" fg:w="2"/><text x="66.5733%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="66.3233%" y="565" width="0.1585%" height="15" fill="rgb(209,50,29)" fg:x="837" fg:w="2"/><text x="66.5733%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="66.3233%" y="549" width="0.1585%" height="15" fill="rgb(245,86,46)" fg:x="837" fg:w="2"/><text x="66.5733%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="66.3233%" y="533" width="0.1585%" height="15" fill="rgb(235,66,46)" fg:x="837" fg:w="2"/><text x="66.5733%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="66.3233%" y="517" width="0.1585%" height="15" fill="rgb(232,148,31)" fg:x="837" fg:w="2"/><text x="66.5733%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="66.3233%" y="501" width="0.1585%" height="15" fill="rgb(217,149,8)" fg:x="837" fg:w="2"/><text x="66.5733%" y="511.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="66.3233%" y="485" width="0.1585%" height="15" fill="rgb(209,183,11)" fg:x="837" fg:w="2"/><text x="66.5733%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;glob::Paths&gt; (1 samples, 0.08%)</title><rect x="66.4818%" y="629" width="0.0792%" height="15" fill="rgb(208,55,20)" fg:x="839" fg:w="1"/><text x="66.7318%" y="639.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.48%)</title><rect x="66.1648%" y="661" width="0.4754%" height="15" fill="rgb(218,39,14)" fg:x="835" fg:w="6"/><text x="66.4148%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (4 samples, 0.32%)</title><rect x="66.3233%" y="645" width="0.3170%" height="15" fill="rgb(216,169,33)" fg:x="837" fg:w="4"/><text x="66.5733%" y="655.50"></text></g><g><title>glob::glob (1 samples, 0.08%)</title><rect x="66.5610%" y="629" width="0.0792%" height="15" fill="rgb(233,80,24)" fg:x="840" fg:w="1"/><text x="66.8110%" y="639.50"></text></g><g><title>glob::glob_with (1 samples, 0.08%)</title><rect x="66.5610%" y="613" width="0.0792%" height="15" fill="rgb(213,179,31)" fg:x="840" fg:w="1"/><text x="66.8110%" y="623.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="66.5610%" y="597" width="0.0792%" height="15" fill="rgb(209,19,5)" fg:x="840" fg:w="1"/><text x="66.8110%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.5610%" y="581" width="0.0792%" height="15" fill="rgb(219,18,35)" fg:x="840" fg:w="1"/><text x="66.8110%" y="591.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (16 samples, 1.27%)</title><rect x="65.4517%" y="677" width="1.2678%" height="15" fill="rgb(209,169,16)" fg:x="826" fg:w="16"/><text x="65.7017%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="66.6403%" y="661" width="0.0792%" height="15" fill="rgb(245,90,51)" fg:x="841" fg:w="1"/><text x="66.8903%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.6403%" y="645" width="0.0792%" height="15" fill="rgb(220,99,45)" fg:x="841" fg:w="1"/><text x="66.8903%" y="655.50"></text></g><g><title>engine::session::Session::initialize (18 samples, 1.43%)</title><rect x="65.4517%" y="693" width="1.4263%" height="15" fill="rgb(249,89,25)" fg:x="826" fg:w="18"/><text x="65.7017%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="66.7195%" y="677" width="0.1585%" height="15" fill="rgb(239,193,0)" fg:x="842" fg:w="2"/><text x="66.9695%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="66.7195%" y="661" width="0.1585%" height="15" fill="rgb(231,126,1)" fg:x="842" fg:w="2"/><text x="66.9695%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.7987%" y="645" width="0.0792%" height="15" fill="rgb(243,166,3)" fg:x="843" fg:w="1"/><text x="67.0487%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.7987%" y="629" width="0.0792%" height="15" fill="rgb(223,22,34)" fg:x="843" fg:w="1"/><text x="67.0487%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.7987%" y="613" width="0.0792%" height="15" fill="rgb(251,52,51)" fg:x="843" fg:w="1"/><text x="67.0487%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (19 samples, 1.51%)</title><rect x="65.4517%" y="741" width="1.5055%" height="15" fill="rgb(221,165,28)" fg:x="826" fg:w="19"/><text x="65.7017%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (19 samples, 1.51%)</title><rect x="65.4517%" y="725" width="1.5055%" height="15" fill="rgb(218,121,47)" fg:x="826" fg:w="19"/><text x="65.7017%" y="735.50"></text></g><g><title>engine::session::Session::new (19 samples, 1.51%)</title><rect x="65.4517%" y="709" width="1.5055%" height="15" fill="rgb(209,120,9)" fg:x="826" fg:w="19"/><text x="65.7017%" y="719.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="66.8780%" y="693" width="0.0792%" height="15" fill="rgb(236,68,12)" fg:x="844" fg:w="1"/><text x="67.1280%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.8780%" y="677" width="0.0792%" height="15" fill="rgb(225,194,26)" fg:x="844" fg:w="1"/><text x="67.1280%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.8780%" y="661" width="0.0792%" height="15" fill="rgb(231,84,39)" fg:x="844" fg:w="1"/><text x="67.1280%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.8780%" y="645" width="0.0792%" height="15" fill="rgb(210,11,45)" fg:x="844" fg:w="1"/><text x="67.1280%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.8780%" y="629" width="0.0792%" height="15" fill="rgb(224,54,52)" fg:x="844" fg:w="1"/><text x="67.1280%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="66.9572%" y="709" width="0.0792%" height="15" fill="rgb(238,102,14)" fg:x="845" fg:w="1"/><text x="67.2072%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="67.1157%" y="597" width="0.0792%" height="15" fill="rgb(243,160,52)" fg:x="847" fg:w="1"/><text x="67.3657%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.1157%" y="581" width="0.0792%" height="15" fill="rgb(216,114,19)" fg:x="847" fg:w="1"/><text x="67.3657%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.1157%" y="565" width="0.0792%" height="15" fill="rgb(244,166,37)" fg:x="847" fg:w="1"/><text x="67.3657%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.1157%" y="549" width="0.0792%" height="15" fill="rgb(246,29,44)" fg:x="847" fg:w="1"/><text x="67.3657%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.1949%" y="533" width="0.0792%" height="15" fill="rgb(215,56,53)" fg:x="848" fg:w="1"/><text x="67.4449%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="67.1949%" y="581" width="0.1585%" height="15" fill="rgb(217,60,2)" fg:x="848" fg:w="2"/><text x="67.4449%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="67.1949%" y="565" width="0.1585%" height="15" fill="rgb(207,26,24)" fg:x="848" fg:w="2"/><text x="67.4449%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="67.1949%" y="549" width="0.1585%" height="15" fill="rgb(252,210,15)" fg:x="848" fg:w="2"/><text x="67.4449%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.2742%" y="533" width="0.0792%" height="15" fill="rgb(253,209,26)" fg:x="849" fg:w="1"/><text x="67.5242%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.2742%" y="517" width="0.0792%" height="15" fill="rgb(238,170,14)" fg:x="849" fg:w="1"/><text x="67.5242%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.2742%" y="501" width="0.0792%" height="15" fill="rgb(216,178,15)" fg:x="849" fg:w="1"/><text x="67.5242%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="67.1949%" y="597" width="0.2377%" height="15" fill="rgb(250,197,2)" fg:x="848" fg:w="3"/><text x="67.4449%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.3534%" y="581" width="0.0792%" height="15" fill="rgb(212,70,42)" fg:x="850" fg:w="1"/><text x="67.6034%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="67.3534%" y="565" width="0.0792%" height="15" fill="rgb(227,213,9)" fg:x="850" fg:w="1"/><text x="67.6034%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="67.1157%" y="613" width="0.3962%" height="15" fill="rgb(245,99,25)" fg:x="847" fg:w="5"/><text x="67.3657%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.4326%" y="597" width="0.0792%" height="15" fill="rgb(250,82,29)" fg:x="851" fg:w="1"/><text x="67.6826%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.4326%" y="581" width="0.0792%" height="15" fill="rgb(241,226,54)" fg:x="851" fg:w="1"/><text x="67.6826%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="67.1157%" y="629" width="0.4754%" height="15" fill="rgb(221,99,41)" fg:x="847" fg:w="6"/><text x="67.3657%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.5119%" y="613" width="0.0792%" height="15" fill="rgb(213,90,21)" fg:x="852" fg:w="1"/><text x="67.7619%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="67.5911%" y="549" width="0.0792%" height="15" fill="rgb(205,208,24)" fg:x="853" fg:w="1"/><text x="67.8411%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="67.5911%" y="533" width="0.0792%" height="15" fill="rgb(246,31,12)" fg:x="853" fg:w="1"/><text x="67.8411%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.5911%" y="517" width="0.0792%" height="15" fill="rgb(213,154,6)" fg:x="853" fg:w="1"/><text x="67.8411%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.5911%" y="501" width="0.0792%" height="15" fill="rgb(222,163,29)" fg:x="853" fg:w="1"/><text x="67.8411%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="67.5911%" y="629" width="0.1585%" height="15" fill="rgb(227,201,8)" fg:x="853" fg:w="2"/><text x="67.8411%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="67.5911%" y="613" width="0.1585%" height="15" fill="rgb(233,9,32)" fg:x="853" fg:w="2"/><text x="67.8411%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="67.5911%" y="597" width="0.1585%" height="15" fill="rgb(217,54,24)" fg:x="853" fg:w="2"/><text x="67.8411%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="67.5911%" y="581" width="0.1585%" height="15" fill="rgb(235,192,0)" fg:x="853" fg:w="2"/><text x="67.8411%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="67.5911%" y="565" width="0.1585%" height="15" fill="rgb(235,45,9)" fg:x="853" fg:w="2"/><text x="67.8411%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.6704%" y="549" width="0.0792%" height="15" fill="rgb(246,42,40)" fg:x="854" fg:w="1"/><text x="67.9204%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.6704%" y="533" width="0.0792%" height="15" fill="rgb(248,111,24)" fg:x="854" fg:w="1"/><text x="67.9204%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.7496%" y="597" width="0.0792%" height="15" fill="rgb(249,65,22)" fg:x="855" fg:w="1"/><text x="67.9996%" y="607.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="67.8288%" y="597" width="0.0792%" height="15" fill="rgb(238,111,51)" fg:x="856" fg:w="1"/><text x="68.0788%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.8288%" y="581" width="0.0792%" height="15" fill="rgb(250,118,22)" fg:x="856" fg:w="1"/><text x="68.0788%" y="591.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="67.8288%" y="565" width="0.0792%" height="15" fill="rgb(234,84,26)" fg:x="856" fg:w="1"/><text x="68.0788%" y="575.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="67.8288%" y="549" width="0.0792%" height="15" fill="rgb(243,172,12)" fg:x="856" fg:w="1"/><text x="68.0788%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="67.8288%" y="533" width="0.0792%" height="15" fill="rgb(236,150,49)" fg:x="856" fg:w="1"/><text x="68.0788%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.24%)</title><rect x="67.7496%" y="613" width="0.2377%" height="15" fill="rgb(225,197,26)" fg:x="855" fg:w="3"/><text x="67.9996%" y="623.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="67.9081%" y="597" width="0.0792%" height="15" fill="rgb(214,17,42)" fg:x="857" fg:w="1"/><text x="68.1581%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.9873%" y="549" width="0.0792%" height="15" fill="rgb(224,165,40)" fg:x="858" fg:w="1"/><text x="68.2373%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="67.9873%" y="581" width="0.1585%" height="15" fill="rgb(246,100,4)" fg:x="858" fg:w="2"/><text x="68.2373%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="67.9873%" y="565" width="0.1585%" height="15" fill="rgb(222,103,0)" fg:x="858" fg:w="2"/><text x="68.2373%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.0666%" y="549" width="0.0792%" height="15" fill="rgb(227,189,26)" fg:x="859" fg:w="1"/><text x="68.3166%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="68.0666%" y="533" width="0.0792%" height="15" fill="rgb(214,202,17)" fg:x="859" fg:w="1"/><text x="68.3166%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="68.2250%" y="517" width="0.0792%" height="15" fill="rgb(229,111,3)" fg:x="861" fg:w="1"/><text x="68.4750%" y="527.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="68.2250%" y="501" width="0.0792%" height="15" fill="rgb(229,172,15)" fg:x="861" fg:w="1"/><text x="68.4750%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="68.2250%" y="485" width="0.0792%" height="15" fill="rgb(230,224,35)" fg:x="861" fg:w="1"/><text x="68.4750%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="68.2250%" y="533" width="0.1585%" height="15" fill="rgb(251,141,6)" fg:x="861" fg:w="2"/><text x="68.4750%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.3043%" y="517" width="0.0792%" height="15" fill="rgb(225,208,6)" fg:x="862" fg:w="1"/><text x="68.5543%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.3043%" y="501" width="0.0792%" height="15" fill="rgb(246,181,16)" fg:x="862" fg:w="1"/><text x="68.5543%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.3043%" y="485" width="0.0792%" height="15" fill="rgb(227,129,36)" fg:x="862" fg:w="1"/><text x="68.5543%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.3043%" y="469" width="0.0792%" height="15" fill="rgb(248,117,24)" fg:x="862" fg:w="1"/><text x="68.5543%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="68.1458%" y="549" width="0.3962%" height="15" fill="rgb(214,185,35)" fg:x="860" fg:w="5"/><text x="68.3958%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="68.3835%" y="533" width="0.1585%" height="15" fill="rgb(236,150,34)" fg:x="863" fg:w="2"/><text x="68.6335%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.4628%" y="517" width="0.0792%" height="15" fill="rgb(243,228,27)" fg:x="864" fg:w="1"/><text x="68.7128%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.4628%" y="501" width="0.0792%" height="15" fill="rgb(245,77,44)" fg:x="864" fg:w="1"/><text x="68.7128%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.4628%" y="485" width="0.0792%" height="15" fill="rgb(235,214,42)" fg:x="864" fg:w="1"/><text x="68.7128%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="68.1458%" y="565" width="0.4754%" height="15" fill="rgb(221,74,3)" fg:x="860" fg:w="6"/><text x="68.3958%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="68.5420%" y="549" width="0.0792%" height="15" fill="rgb(206,121,29)" fg:x="865" fg:w="1"/><text x="68.7920%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.5420%" y="533" width="0.0792%" height="15" fill="rgb(249,131,53)" fg:x="865" fg:w="1"/><text x="68.7920%" y="543.50"></text></g><g><title>engine::session::Session::flush (22 samples, 1.74%)</title><rect x="66.9572%" y="725" width="1.7433%" height="15" fill="rgb(236,170,29)" fg:x="845" fg:w="22"/><text x="67.2072%" y="735.50"></text></g><g><title>engine::session::state::State::close (21 samples, 1.66%)</title><rect x="67.0365%" y="709" width="1.6640%" height="15" fill="rgb(247,96,15)" fg:x="846" fg:w="21"/><text x="67.2865%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (21 samples, 1.66%)</title><rect x="67.0365%" y="693" width="1.6640%" height="15" fill="rgb(211,210,7)" fg:x="846" fg:w="21"/><text x="67.2865%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (21 samples, 1.66%)</title><rect x="67.0365%" y="677" width="1.6640%" height="15" fill="rgb(240,88,50)" fg:x="846" fg:w="21"/><text x="67.2865%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 1.66%)</title><rect x="67.0365%" y="661" width="1.6640%" height="15" fill="rgb(209,229,26)" fg:x="846" fg:w="21"/><text x="67.2865%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (20 samples, 1.58%)</title><rect x="67.1157%" y="645" width="1.5848%" height="15" fill="rgb(210,68,23)" fg:x="847" fg:w="20"/><text x="67.3657%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (12 samples, 0.95%)</title><rect x="67.7496%" y="629" width="0.9509%" height="15" fill="rgb(229,180,13)" fg:x="855" fg:w="12"/><text x="67.9996%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.71%)</title><rect x="67.9873%" y="613" width="0.7132%" height="15" fill="rgb(236,53,44)" fg:x="858" fg:w="9"/><text x="68.2373%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.71%)</title><rect x="67.9873%" y="597" width="0.7132%" height="15" fill="rgb(244,214,29)" fg:x="858" fg:w="9"/><text x="68.2373%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.55%)</title><rect x="68.1458%" y="581" width="0.5547%" height="15" fill="rgb(220,75,29)" fg:x="860" fg:w="7"/><text x="68.3958%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.6212%" y="565" width="0.0792%" height="15" fill="rgb(214,183,37)" fg:x="866" fg:w="1"/><text x="68.8712%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.7005%" y="677" width="0.0792%" height="15" fill="rgb(239,117,29)" fg:x="867" fg:w="1"/><text x="68.9505%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="68.7005%" y="661" width="0.0792%" height="15" fill="rgb(237,171,35)" fg:x="867" fg:w="1"/><text x="68.9505%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="68.7005%" y="709" width="0.1585%" height="15" fill="rgb(229,178,53)" fg:x="867" fg:w="2"/><text x="68.9505%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="68.7005%" y="693" width="0.1585%" height="15" fill="rgb(210,102,19)" fg:x="867" fg:w="2"/><text x="68.9505%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.7797%" y="677" width="0.0792%" height="15" fill="rgb(235,127,22)" fg:x="868" fg:w="1"/><text x="69.0297%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.7797%" y="661" width="0.0792%" height="15" fill="rgb(244,31,31)" fg:x="868" fg:w="1"/><text x="69.0297%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.7797%" y="645" width="0.0792%" height="15" fill="rgb(231,43,21)" fg:x="868" fg:w="1"/><text x="69.0297%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.7797%" y="629" width="0.0792%" height="15" fill="rgb(217,131,35)" fg:x="868" fg:w="1"/><text x="69.0297%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.7797%" y="613" width="0.0792%" height="15" fill="rgb(221,149,4)" fg:x="868" fg:w="1"/><text x="69.0297%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.7797%" y="597" width="0.0792%" height="15" fill="rgb(232,170,28)" fg:x="868" fg:w="1"/><text x="69.0297%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="68.8590%" y="677" width="0.0792%" height="15" fill="rgb(238,56,10)" fg:x="869" fg:w="1"/><text x="69.1090%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.8590%" y="661" width="0.0792%" height="15" fill="rgb(235,196,14)" fg:x="869" fg:w="1"/><text x="69.1090%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.8590%" y="645" width="0.0792%" height="15" fill="rgb(216,45,48)" fg:x="869" fg:w="1"/><text x="69.1090%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="68.8590%" y="693" width="0.1585%" height="15" fill="rgb(238,213,17)" fg:x="869" fg:w="2"/><text x="69.1090%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="68.9382%" y="677" width="0.0792%" height="15" fill="rgb(212,13,2)" fg:x="870" fg:w="1"/><text x="69.1882%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="68.9382%" y="661" width="0.0792%" height="15" fill="rgb(240,114,20)" fg:x="870" fg:w="1"/><text x="69.1882%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.9382%" y="645" width="0.0792%" height="15" fill="rgb(228,41,40)" fg:x="870" fg:w="1"/><text x="69.1882%" y="655.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="69.0174%" y="645" width="0.0792%" height="15" fill="rgb(244,132,35)" fg:x="871" fg:w="1"/><text x="69.2674%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.0174%" y="629" width="0.0792%" height="15" fill="rgb(253,189,4)" fg:x="871" fg:w="1"/><text x="69.2674%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="69.0967%" y="645" width="0.0792%" height="15" fill="rgb(224,37,19)" fg:x="872" fg:w="1"/><text x="69.3467%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.0967%" y="629" width="0.0792%" height="15" fill="rgb(235,223,18)" fg:x="872" fg:w="1"/><text x="69.3467%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.0967%" y="613" width="0.0792%" height="15" fill="rgb(235,163,25)" fg:x="872" fg:w="1"/><text x="69.3467%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.55%)</title><rect x="68.7005%" y="725" width="0.5547%" height="15" fill="rgb(217,145,28)" fg:x="867" fg:w="7"/><text x="68.9505%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="68.8590%" y="709" width="0.3962%" height="15" fill="rgb(223,223,32)" fg:x="869" fg:w="5"/><text x="69.1090%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="69.0174%" y="693" width="0.2377%" height="15" fill="rgb(227,189,39)" fg:x="871" fg:w="3"/><text x="69.2674%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="69.0174%" y="677" width="0.2377%" height="15" fill="rgb(248,10,22)" fg:x="871" fg:w="3"/><text x="69.2674%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="69.0174%" y="661" width="0.2377%" height="15" fill="rgb(248,46,39)" fg:x="871" fg:w="3"/><text x="69.2674%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="69.1759%" y="645" width="0.0792%" height="15" fill="rgb(248,113,48)" fg:x="873" fg:w="1"/><text x="69.4259%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.1759%" y="629" width="0.0792%" height="15" fill="rgb(245,16,25)" fg:x="873" fg:w="1"/><text x="69.4259%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (2 samples, 0.16%)</title><rect x="69.2552%" y="725" width="0.1585%" height="15" fill="rgb(249,152,16)" fg:x="874" fg:w="2"/><text x="69.5052%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (2 samples, 0.16%)</title><rect x="69.2552%" y="709" width="0.1585%" height="15" fill="rgb(250,16,1)" fg:x="874" fg:w="2"/><text x="69.5052%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="69.2552%" y="693" width="0.1585%" height="15" fill="rgb(249,138,3)" fg:x="874" fg:w="2"/><text x="69.5052%" y="703.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (2 samples, 0.16%)</title><rect x="69.2552%" y="677" width="0.1585%" height="15" fill="rgb(227,71,41)" fg:x="874" fg:w="2"/><text x="69.5052%" y="687.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="69.3344%" y="661" width="0.0792%" height="15" fill="rgb(209,184,23)" fg:x="875" fg:w="1"/><text x="69.5844%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="69.4136%" y="693" width="0.0792%" height="15" fill="rgb(223,215,31)" fg:x="876" fg:w="1"/><text x="69.6636%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="69.4136%" y="677" width="0.0792%" height="15" fill="rgb(210,146,28)" fg:x="876" fg:w="1"/><text x="69.6636%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="69.4136%" y="661" width="0.0792%" height="15" fill="rgb(209,183,41)" fg:x="876" fg:w="1"/><text x="69.6636%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="69.4136%" y="645" width="0.0792%" height="15" fill="rgb(209,224,45)" fg:x="876" fg:w="1"/><text x="69.6636%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.4136%" y="629" width="0.0792%" height="15" fill="rgb(224,209,51)" fg:x="876" fg:w="1"/><text x="69.6636%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.4136%" y="613" width="0.0792%" height="15" fill="rgb(223,17,39)" fg:x="876" fg:w="1"/><text x="69.6636%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.4136%" y="597" width="0.0792%" height="15" fill="rgb(234,204,37)" fg:x="876" fg:w="1"/><text x="69.6636%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.4136%" y="581" width="0.0792%" height="15" fill="rgb(236,120,5)" fg:x="876" fg:w="1"/><text x="69.6636%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.4136%" y="565" width="0.0792%" height="15" fill="rgb(248,97,27)" fg:x="876" fg:w="1"/><text x="69.6636%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.4136%" y="549" width="0.0792%" height="15" fill="rgb(240,66,17)" fg:x="876" fg:w="1"/><text x="69.6636%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.4136%" y="533" width="0.0792%" height="15" fill="rgb(210,79,3)" fg:x="876" fg:w="1"/><text x="69.6636%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.4136%" y="517" width="0.0792%" height="15" fill="rgb(214,176,27)" fg:x="876" fg:w="1"/><text x="69.6636%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.4136%" y="501" width="0.0792%" height="15" fill="rgb(235,185,3)" fg:x="876" fg:w="1"/><text x="69.6636%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.4136%" y="485" width="0.0792%" height="15" fill="rgb(227,24,12)" fg:x="876" fg:w="1"/><text x="69.6636%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.4136%" y="469" width="0.0792%" height="15" fill="rgb(252,169,48)" fg:x="876" fg:w="1"/><text x="69.6636%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.4136%" y="453" width="0.0792%" height="15" fill="rgb(212,65,1)" fg:x="876" fg:w="1"/><text x="69.6636%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.4136%" y="437" width="0.0792%" height="15" fill="rgb(242,39,24)" fg:x="876" fg:w="1"/><text x="69.6636%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.4136%" y="421" width="0.0792%" height="15" fill="rgb(249,32,23)" fg:x="876" fg:w="1"/><text x="69.6636%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.4136%" y="405" width="0.0792%" height="15" fill="rgb(251,195,23)" fg:x="876" fg:w="1"/><text x="69.6636%" y="415.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.5721%" y="645" width="0.0792%" height="15" fill="rgb(236,174,8)" fg:x="878" fg:w="1"/><text x="69.8221%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="69.5721%" y="629" width="0.0792%" height="15" fill="rgb(220,197,8)" fg:x="878" fg:w="1"/><text x="69.8221%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.5721%" y="613" width="0.0792%" height="15" fill="rgb(240,108,37)" fg:x="878" fg:w="1"/><text x="69.8221%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.5721%" y="597" width="0.0792%" height="15" fill="rgb(232,176,24)" fg:x="878" fg:w="1"/><text x="69.8221%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.5721%" y="581" width="0.0792%" height="15" fill="rgb(243,35,29)" fg:x="878" fg:w="1"/><text x="69.8221%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.6513%" y="613" width="0.1585%" height="15" fill="rgb(210,37,18)" fg:x="879" fg:w="2"/><text x="69.9013%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.7306%" y="597" width="0.0792%" height="15" fill="rgb(224,184,40)" fg:x="880" fg:w="1"/><text x="69.9806%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.7306%" y="581" width="0.0792%" height="15" fill="rgb(236,39,29)" fg:x="880" fg:w="1"/><text x="69.9806%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.7306%" y="565" width="0.0792%" height="15" fill="rgb(232,48,39)" fg:x="880" fg:w="1"/><text x="69.9806%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.7306%" y="549" width="0.0792%" height="15" fill="rgb(236,34,42)" fg:x="880" fg:w="1"/><text x="69.9806%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.7306%" y="533" width="0.0792%" height="15" fill="rgb(243,106,37)" fg:x="880" fg:w="1"/><text x="69.9806%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.7306%" y="517" width="0.0792%" height="15" fill="rgb(218,96,6)" fg:x="880" fg:w="1"/><text x="69.9806%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.7306%" y="501" width="0.0792%" height="15" fill="rgb(235,130,12)" fg:x="880" fg:w="1"/><text x="69.9806%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.7306%" y="485" width="0.0792%" height="15" fill="rgb(231,95,0)" fg:x="880" fg:w="1"/><text x="69.9806%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.7306%" y="469" width="0.0792%" height="15" fill="rgb(228,12,23)" fg:x="880" fg:w="1"/><text x="69.9806%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.7306%" y="453" width="0.0792%" height="15" fill="rgb(216,12,1)" fg:x="880" fg:w="1"/><text x="69.9806%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.7306%" y="437" width="0.0792%" height="15" fill="rgb(219,59,3)" fg:x="880" fg:w="1"/><text x="69.9806%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.7306%" y="421" width="0.0792%" height="15" fill="rgb(215,208,46)" fg:x="880" fg:w="1"/><text x="69.9806%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.7306%" y="405" width="0.0792%" height="15" fill="rgb(254,224,29)" fg:x="880" fg:w="1"/><text x="69.9806%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.7306%" y="389" width="0.0792%" height="15" fill="rgb(232,14,29)" fg:x="880" fg:w="1"/><text x="69.9806%" y="399.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (6 samples, 0.48%)</title><rect x="69.4136%" y="725" width="0.4754%" height="15" fill="rgb(208,45,52)" fg:x="876" fg:w="6"/><text x="69.6636%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="69.4136%" y="709" width="0.4754%" height="15" fill="rgb(234,191,28)" fg:x="876" fg:w="6"/><text x="69.6636%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.40%)</title><rect x="69.4929%" y="693" width="0.3962%" height="15" fill="rgb(244,67,43)" fg:x="877" fg:w="5"/><text x="69.7429%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="69.5721%" y="677" width="0.3170%" height="15" fill="rgb(236,189,24)" fg:x="878" fg:w="4"/><text x="69.8221%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="69.5721%" y="661" width="0.3170%" height="15" fill="rgb(239,214,33)" fg:x="878" fg:w="4"/><text x="69.8221%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="69.6513%" y="645" width="0.2377%" height="15" fill="rgb(226,176,41)" fg:x="879" fg:w="3"/><text x="69.9013%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="69.6513%" y="629" width="0.2377%" height="15" fill="rgb(248,47,8)" fg:x="879" fg:w="3"/><text x="69.9013%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.8098%" y="613" width="0.0792%" height="15" fill="rgb(218,81,44)" fg:x="881" fg:w="1"/><text x="70.0598%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.8098%" y="597" width="0.0792%" height="15" fill="rgb(213,98,6)" fg:x="881" fg:w="1"/><text x="70.0598%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.8098%" y="581" width="0.0792%" height="15" fill="rgb(222,85,22)" fg:x="881" fg:w="1"/><text x="70.0598%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.8098%" y="565" width="0.0792%" height="15" fill="rgb(239,46,39)" fg:x="881" fg:w="1"/><text x="70.0598%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.8098%" y="549" width="0.0792%" height="15" fill="rgb(237,12,29)" fg:x="881" fg:w="1"/><text x="70.0598%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.8098%" y="533" width="0.0792%" height="15" fill="rgb(214,77,8)" fg:x="881" fg:w="1"/><text x="70.0598%" y="543.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="69.8891%" y="709" width="0.1585%" height="15" fill="rgb(217,168,37)" fg:x="882" fg:w="2"/><text x="70.1391%" y="719.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="69.9683%" y="693" width="0.0792%" height="15" fill="rgb(221,217,23)" fg:x="883" fg:w="1"/><text x="70.2183%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;kernel::model::props::Property&gt;&gt; (1 samples, 0.08%)</title><rect x="69.9683%" y="677" width="0.0792%" height="15" fill="rgb(243,229,36)" fg:x="883" fg:w="1"/><text x="70.2183%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.0475%" y="709" width="0.0792%" height="15" fill="rgb(251,163,40)" fg:x="884" fg:w="1"/><text x="70.2975%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.0475%" y="693" width="0.0792%" height="15" fill="rgb(237,222,12)" fg:x="884" fg:w="1"/><text x="70.2975%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.0475%" y="677" width="0.0792%" height="15" fill="rgb(248,132,6)" fg:x="884" fg:w="1"/><text x="70.2975%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.0475%" y="661" width="0.0792%" height="15" fill="rgb(227,167,50)" fg:x="884" fg:w="1"/><text x="70.2975%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.0475%" y="645" width="0.0792%" height="15" fill="rgb(242,84,37)" fg:x="884" fg:w="1"/><text x="70.2975%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.1268%" y="629" width="0.0792%" height="15" fill="rgb(212,4,50)" fg:x="885" fg:w="1"/><text x="70.3768%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.1268%" y="613" width="0.0792%" height="15" fill="rgb(230,228,32)" fg:x="885" fg:w="1"/><text x="70.3768%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.1268%" y="597" width="0.0792%" height="15" fill="rgb(248,217,23)" fg:x="885" fg:w="1"/><text x="70.3768%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1268%" y="581" width="0.0792%" height="15" fill="rgb(238,197,32)" fg:x="885" fg:w="1"/><text x="70.3768%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.1268%" y="565" width="0.0792%" height="15" fill="rgb(236,106,1)" fg:x="885" fg:w="1"/><text x="70.3768%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1268%" y="549" width="0.0792%" height="15" fill="rgb(219,228,13)" fg:x="885" fg:w="1"/><text x="70.3768%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.1268%" y="533" width="0.0792%" height="15" fill="rgb(238,30,35)" fg:x="885" fg:w="1"/><text x="70.3768%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1268%" y="517" width="0.0792%" height="15" fill="rgb(236,70,23)" fg:x="885" fg:w="1"/><text x="70.3768%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.2060%" y="613" width="0.0792%" height="15" fill="rgb(249,104,48)" fg:x="886" fg:w="1"/><text x="70.4560%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2060%" y="597" width="0.0792%" height="15" fill="rgb(254,117,50)" fg:x="886" fg:w="1"/><text x="70.4560%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2060%" y="581" width="0.0792%" height="15" fill="rgb(223,152,4)" fg:x="886" fg:w="1"/><text x="70.4560%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2060%" y="565" width="0.0792%" height="15" fill="rgb(245,6,2)" fg:x="886" fg:w="1"/><text x="70.4560%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="70.1268%" y="709" width="0.2377%" height="15" fill="rgb(249,150,24)" fg:x="885" fg:w="3"/><text x="70.3768%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="70.1268%" y="693" width="0.2377%" height="15" fill="rgb(228,185,42)" fg:x="885" fg:w="3"/><text x="70.3768%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="70.1268%" y="677" width="0.2377%" height="15" fill="rgb(226,39,33)" fg:x="885" fg:w="3"/><text x="70.3768%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="70.1268%" y="661" width="0.2377%" height="15" fill="rgb(221,166,19)" fg:x="885" fg:w="3"/><text x="70.3768%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="70.1268%" y="645" width="0.2377%" height="15" fill="rgb(209,109,2)" fg:x="885" fg:w="3"/><text x="70.3768%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="70.2060%" y="629" width="0.1585%" height="15" fill="rgb(252,216,26)" fg:x="886" fg:w="2"/><text x="70.4560%" y="639.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="70.2853%" y="613" width="0.0792%" height="15" fill="rgb(227,173,36)" fg:x="887" fg:w="1"/><text x="70.5353%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.3645%" y="645" width="0.0792%" height="15" fill="rgb(209,90,7)" fg:x="888" fg:w="1"/><text x="70.6145%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3645%" y="629" width="0.0792%" height="15" fill="rgb(250,194,11)" fg:x="888" fg:w="1"/><text x="70.6145%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="70.4437%" y="581" width="0.0792%" height="15" fill="rgb(220,72,50)" fg:x="889" fg:w="1"/><text x="70.6937%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="70.5230%" y="581" width="0.0792%" height="15" fill="rgb(222,106,48)" fg:x="890" fg:w="1"/><text x="70.7730%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.5230%" y="565" width="0.0792%" height="15" fill="rgb(216,220,45)" fg:x="890" fg:w="1"/><text x="70.7730%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.5230%" y="549" width="0.0792%" height="15" fill="rgb(234,112,18)" fg:x="890" fg:w="1"/><text x="70.7730%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="70.5230%" y="533" width="0.0792%" height="15" fill="rgb(206,179,9)" fg:x="890" fg:w="1"/><text x="70.7730%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="70.6815%" y="549" width="0.0792%" height="15" fill="rgb(215,115,40)" fg:x="892" fg:w="1"/><text x="70.9315%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.7607%" y="517" width="0.0792%" height="15" fill="rgb(222,69,34)" fg:x="893" fg:w="1"/><text x="71.0107%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.7607%" y="501" width="0.0792%" height="15" fill="rgb(209,161,10)" fg:x="893" fg:w="1"/><text x="71.0107%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.7607%" y="485" width="0.0792%" height="15" fill="rgb(217,6,38)" fg:x="893" fg:w="1"/><text x="71.0107%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.7607%" y="469" width="0.0792%" height="15" fill="rgb(229,229,48)" fg:x="893" fg:w="1"/><text x="71.0107%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.7607%" y="453" width="0.0792%" height="15" fill="rgb(225,21,28)" fg:x="893" fg:w="1"/><text x="71.0107%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="70.7607%" y="437" width="0.0792%" height="15" fill="rgb(206,33,13)" fg:x="893" fg:w="1"/><text x="71.0107%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="70.7607%" y="549" width="0.1585%" height="15" fill="rgb(242,178,17)" fg:x="893" fg:w="2"/><text x="71.0107%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="70.7607%" y="533" width="0.1585%" height="15" fill="rgb(220,162,5)" fg:x="893" fg:w="2"/><text x="71.0107%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.8399%" y="517" width="0.0792%" height="15" fill="rgb(210,33,43)" fg:x="894" fg:w="1"/><text x="71.0899%" y="527.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="70.9192%" y="533" width="0.0792%" height="15" fill="rgb(216,116,54)" fg:x="895" fg:w="1"/><text x="71.1692%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.9984%" y="533" width="0.0792%" height="15" fill="rgb(249,92,24)" fg:x="896" fg:w="1"/><text x="71.2484%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.9984%" y="517" width="0.0792%" height="15" fill="rgb(231,189,14)" fg:x="896" fg:w="1"/><text x="71.2484%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.1569%" y="517" width="0.0792%" height="15" fill="rgb(230,8,41)" fg:x="898" fg:w="1"/><text x="71.4069%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.1569%" y="501" width="0.0792%" height="15" fill="rgb(249,7,27)" fg:x="898" fg:w="1"/><text x="71.4069%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="71.0777%" y="533" width="0.2377%" height="15" fill="rgb(232,86,5)" fg:x="897" fg:w="3"/><text x="71.3277%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.2361%" y="517" width="0.0792%" height="15" fill="rgb(224,175,18)" fg:x="899" fg:w="1"/><text x="71.4861%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.2361%" y="501" width="0.0792%" height="15" fill="rgb(220,129,12)" fg:x="899" fg:w="1"/><text x="71.4861%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.95%)</title><rect x="70.4437%" y="597" width="0.9509%" height="15" fill="rgb(210,19,36)" fg:x="889" fg:w="12"/><text x="70.6937%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.79%)</title><rect x="70.6022%" y="581" width="0.7924%" height="15" fill="rgb(219,96,14)" fg:x="891" fg:w="10"/><text x="70.8522%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.71%)</title><rect x="70.6815%" y="565" width="0.7132%" height="15" fill="rgb(249,106,1)" fg:x="892" fg:w="9"/><text x="70.9315%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="70.9192%" y="549" width="0.4754%" height="15" fill="rgb(249,155,20)" fg:x="895" fg:w="6"/><text x="71.1692%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.3154%" y="533" width="0.0792%" height="15" fill="rgb(244,168,9)" fg:x="900" fg:w="1"/><text x="71.5654%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.3154%" y="517" width="0.0792%" height="15" fill="rgb(216,23,50)" fg:x="900" fg:w="1"/><text x="71.5654%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.3154%" y="501" width="0.0792%" height="15" fill="rgb(224,219,20)" fg:x="900" fg:w="1"/><text x="71.5654%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.3154%" y="485" width="0.0792%" height="15" fill="rgb(222,156,15)" fg:x="900" fg:w="1"/><text x="71.5654%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.3154%" y="469" width="0.0792%" height="15" fill="rgb(231,97,17)" fg:x="900" fg:w="1"/><text x="71.5654%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.3154%" y="453" width="0.0792%" height="15" fill="rgb(218,70,48)" fg:x="900" fg:w="1"/><text x="71.5654%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.3946%" y="549" width="0.0792%" height="15" fill="rgb(212,196,52)" fg:x="901" fg:w="1"/><text x="71.6446%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.5531%" y="501" width="0.0792%" height="15" fill="rgb(243,203,18)" fg:x="903" fg:w="1"/><text x="71.8031%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="71.3946%" y="597" width="0.3170%" height="15" fill="rgb(252,125,41)" fg:x="901" fg:w="4"/><text x="71.6446%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="71.3946%" y="581" width="0.3170%" height="15" fill="rgb(223,180,33)" fg:x="901" fg:w="4"/><text x="71.6446%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="71.3946%" y="565" width="0.3170%" height="15" fill="rgb(254,159,46)" fg:x="901" fg:w="4"/><text x="71.6446%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="71.4739%" y="549" width="0.2377%" height="15" fill="rgb(254,38,10)" fg:x="902" fg:w="3"/><text x="71.7239%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="71.4739%" y="533" width="0.2377%" height="15" fill="rgb(208,217,32)" fg:x="902" fg:w="3"/><text x="71.7239%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.5531%" y="517" width="0.1585%" height="15" fill="rgb(221,120,13)" fg:x="903" fg:w="2"/><text x="71.8031%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.6323%" y="501" width="0.0792%" height="15" fill="rgb(246,54,52)" fg:x="904" fg:w="1"/><text x="71.8823%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.7116%" y="565" width="0.0792%" height="15" fill="rgb(242,34,25)" fg:x="905" fg:w="1"/><text x="71.9616%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="71.7116%" y="581" width="0.1585%" height="15" fill="rgb(247,209,9)" fg:x="905" fg:w="2"/><text x="71.9616%" y="591.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="71.7908%" y="565" width="0.0792%" height="15" fill="rgb(228,71,26)" fg:x="906" fg:w="1"/><text x="72.0408%" y="575.50"></text></g><g><title>treediff::tools::record::mk (1 samples, 0.08%)</title><rect x="71.7908%" y="549" width="0.0792%" height="15" fill="rgb(222,145,49)" fg:x="906" fg:w="1"/><text x="72.0408%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="71.8700%" y="549" width="0.0792%" height="15" fill="rgb(218,121,17)" fg:x="907" fg:w="1"/><text x="72.1200%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.8700%" y="533" width="0.0792%" height="15" fill="rgb(244,50,7)" fg:x="907" fg:w="1"/><text x="72.1200%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.8700%" y="517" width="0.0792%" height="15" fill="rgb(246,229,37)" fg:x="907" fg:w="1"/><text x="72.1200%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="72.0285%" y="501" width="0.0792%" height="15" fill="rgb(225,18,5)" fg:x="909" fg:w="1"/><text x="72.2785%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.0285%" y="485" width="0.0792%" height="15" fill="rgb(213,204,8)" fg:x="909" fg:w="1"/><text x="72.2785%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.0285%" y="469" width="0.0792%" height="15" fill="rgb(238,103,6)" fg:x="909" fg:w="1"/><text x="72.2785%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="72.1078%" y="469" width="0.1585%" height="15" fill="rgb(222,25,35)" fg:x="910" fg:w="2"/><text x="72.3578%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="72.1078%" y="453" width="0.1585%" height="15" fill="rgb(213,203,35)" fg:x="910" fg:w="2"/><text x="72.3578%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="72.1078%" y="485" width="0.2377%" height="15" fill="rgb(221,79,53)" fg:x="910" fg:w="3"/><text x="72.3578%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.2662%" y="469" width="0.0792%" height="15" fill="rgb(243,200,35)" fg:x="912" fg:w="1"/><text x="72.5162%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.2662%" y="453" width="0.0792%" height="15" fill="rgb(248,60,25)" fg:x="912" fg:w="1"/><text x="72.5162%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="72.0285%" y="517" width="0.3962%" height="15" fill="rgb(227,53,46)" fg:x="909" fg:w="5"/><text x="72.2785%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="72.1078%" y="501" width="0.3170%" height="15" fill="rgb(216,120,32)" fg:x="910" fg:w="4"/><text x="72.3578%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.3455%" y="485" width="0.0792%" height="15" fill="rgb(220,134,1)" fg:x="913" fg:w="1"/><text x="72.5955%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.71%)</title><rect x="71.9493%" y="533" width="0.7132%" height="15" fill="rgb(237,168,5)" fg:x="908" fg:w="9"/><text x="72.1993%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="72.4247%" y="517" width="0.2377%" height="15" fill="rgb(231,100,33)" fg:x="914" fg:w="3"/><text x="72.6747%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.5832%" y="501" width="0.0792%" height="15" fill="rgb(236,177,47)" fg:x="916" fg:w="1"/><text x="72.8332%" y="511.50"></text></g><g><title>engine::session::Session::flush (30 samples, 2.38%)</title><rect x="70.3645%" y="709" width="2.3772%" height="15" fill="rgb(235,7,49)" fg:x="888" fg:w="30"/><text x="70.6145%" y="719.50">en..</text></g><g><title>engine::session::Session::save_changes (30 samples, 2.38%)</title><rect x="70.3645%" y="693" width="2.3772%" height="15" fill="rgb(232,119,22)" fg:x="888" fg:w="30"/><text x="70.6145%" y="703.50">en..</text></g><g><title>engine::session::state::State::close (30 samples, 2.38%)</title><rect x="70.3645%" y="677" width="2.3772%" height="15" fill="rgb(254,73,53)" fg:x="888" fg:w="30"/><text x="70.6145%" y="687.50">en..</text></g><g><title>engine::session::state::State::flush_entities (30 samples, 2.38%)</title><rect x="70.3645%" y="661" width="2.3772%" height="15" fill="rgb(251,35,20)" fg:x="888" fg:w="30"/><text x="70.6145%" y="671.50">en..</text></g><g><title>core::iter::adapters::try_process (29 samples, 2.30%)</title><rect x="70.4437%" y="645" width="2.2979%" height="15" fill="rgb(241,119,20)" fg:x="889" fg:w="29"/><text x="70.6937%" y="655.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (29 samples, 2.30%)</title><rect x="70.4437%" y="629" width="2.2979%" height="15" fill="rgb(207,102,14)" fg:x="889" fg:w="29"/><text x="70.6937%" y="639.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (29 samples, 2.30%)</title><rect x="70.4437%" y="613" width="2.2979%" height="15" fill="rgb(248,201,50)" fg:x="889" fg:w="29"/><text x="70.6937%" y="623.50">e..</text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.03%)</title><rect x="71.7116%" y="597" width="1.0301%" height="15" fill="rgb(222,185,44)" fg:x="905" fg:w="13"/><text x="71.9616%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.87%)</title><rect x="71.8700%" y="581" width="0.8716%" height="15" fill="rgb(218,107,18)" fg:x="907" fg:w="11"/><text x="72.1200%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.87%)</title><rect x="71.8700%" y="565" width="0.8716%" height="15" fill="rgb(237,177,39)" fg:x="907" fg:w="11"/><text x="72.1200%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.79%)</title><rect x="71.9493%" y="549" width="0.7924%" height="15" fill="rgb(246,69,6)" fg:x="908" fg:w="10"/><text x="72.1993%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.6624%" y="533" width="0.0792%" height="15" fill="rgb(234,208,37)" fg:x="917" fg:w="1"/><text x="72.9124%" y="543.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="72.7417%" y="709" width="0.0792%" height="15" fill="rgb(225,4,6)" fg:x="918" fg:w="1"/><text x="72.9917%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="72.7417%" y="693" width="0.0792%" height="15" fill="rgb(233,45,0)" fg:x="918" fg:w="1"/><text x="72.9917%" y="703.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="72.7417%" y="677" width="0.0792%" height="15" fill="rgb(226,136,5)" fg:x="918" fg:w="1"/><text x="72.9917%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="72.7417%" y="661" width="0.0792%" height="15" fill="rgb(211,91,47)" fg:x="918" fg:w="1"/><text x="72.9917%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="72.7417%" y="645" width="0.0792%" height="15" fill="rgb(242,88,51)" fg:x="918" fg:w="1"/><text x="72.9917%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.7417%" y="629" width="0.0792%" height="15" fill="rgb(230,91,28)" fg:x="918" fg:w="1"/><text x="72.9917%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="72.7417%" y="613" width="0.0792%" height="15" fill="rgb(254,186,29)" fg:x="918" fg:w="1"/><text x="72.9917%" y="623.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="72.7417%" y="597" width="0.0792%" height="15" fill="rgb(238,6,4)" fg:x="918" fg:w="1"/><text x="72.9917%" y="607.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="72.7417%" y="581" width="0.0792%" height="15" fill="rgb(221,151,16)" fg:x="918" fg:w="1"/><text x="72.9917%" y="591.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="72.7417%" y="565" width="0.0792%" height="15" fill="rgb(251,143,52)" fg:x="918" fg:w="1"/><text x="72.9917%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="72.8209%" y="677" width="0.0792%" height="15" fill="rgb(206,90,15)" fg:x="919" fg:w="1"/><text x="73.0709%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8209%" y="661" width="0.0792%" height="15" fill="rgb(218,35,8)" fg:x="919" fg:w="1"/><text x="73.0709%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8209%" y="645" width="0.0792%" height="15" fill="rgb(239,215,6)" fg:x="919" fg:w="1"/><text x="73.0709%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8209%" y="629" width="0.0792%" height="15" fill="rgb(245,116,39)" fg:x="919" fg:w="1"/><text x="73.0709%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="72.8209%" y="693" width="0.1585%" height="15" fill="rgb(242,65,28)" fg:x="919" fg:w="2"/><text x="73.0709%" y="703.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="72.9002%" y="677" width="0.0792%" height="15" fill="rgb(252,132,53)" fg:x="920" fg:w="1"/><text x="73.1502%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.9002%" y="661" width="0.0792%" height="15" fill="rgb(224,159,50)" fg:x="920" fg:w="1"/><text x="73.1502%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="72.9002%" y="645" width="0.0792%" height="15" fill="rgb(224,93,4)" fg:x="920" fg:w="1"/><text x="73.1502%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="72.9794%" y="677" width="0.0792%" height="15" fill="rgb(208,81,34)" fg:x="921" fg:w="1"/><text x="73.2294%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.9794%" y="661" width="0.0792%" height="15" fill="rgb(233,92,54)" fg:x="921" fg:w="1"/><text x="73.2294%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.9794%" y="645" width="0.0792%" height="15" fill="rgb(237,21,14)" fg:x="921" fg:w="1"/><text x="73.2294%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.0586%" y="629" width="0.0792%" height="15" fill="rgb(249,128,51)" fg:x="922" fg:w="1"/><text x="73.3086%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="72.8209%" y="709" width="0.3962%" height="15" fill="rgb(223,129,24)" fg:x="919" fg:w="5"/><text x="73.0709%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="72.9794%" y="693" width="0.2377%" height="15" fill="rgb(231,168,25)" fg:x="921" fg:w="3"/><text x="73.2294%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="73.0586%" y="677" width="0.1585%" height="15" fill="rgb(224,39,20)" fg:x="922" fg:w="2"/><text x="73.3086%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="73.0586%" y="661" width="0.1585%" height="15" fill="rgb(225,152,53)" fg:x="922" fg:w="2"/><text x="73.3086%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="73.0586%" y="645" width="0.1585%" height="15" fill="rgb(252,17,24)" fg:x="922" fg:w="2"/><text x="73.3086%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="73.1379%" y="629" width="0.0792%" height="15" fill="rgb(250,114,30)" fg:x="923" fg:w="1"/><text x="73.3879%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.1379%" y="613" width="0.0792%" height="15" fill="rgb(229,5,4)" fg:x="923" fg:w="1"/><text x="73.3879%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.1379%" y="597" width="0.0792%" height="15" fill="rgb(225,176,49)" fg:x="923" fg:w="1"/><text x="73.3879%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (2 samples, 0.16%)</title><rect x="73.2171%" y="709" width="0.1585%" height="15" fill="rgb(224,221,49)" fg:x="924" fg:w="2"/><text x="73.4671%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="73.2171%" y="693" width="0.1585%" height="15" fill="rgb(253,169,27)" fg:x="924" fg:w="2"/><text x="73.4671%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="73.2171%" y="677" width="0.1585%" height="15" fill="rgb(211,206,16)" fg:x="924" fg:w="2"/><text x="73.4671%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="73.2171%" y="661" width="0.1585%" height="15" fill="rgb(244,87,35)" fg:x="924" fg:w="2"/><text x="73.4671%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="73.2171%" y="645" width="0.1585%" height="15" fill="rgb(246,28,10)" fg:x="924" fg:w="2"/><text x="73.4671%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.2964%" y="629" width="0.0792%" height="15" fill="rgb(229,12,44)" fg:x="925" fg:w="1"/><text x="73.5464%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.2964%" y="613" width="0.0792%" height="15" fill="rgb(210,145,37)" fg:x="925" fg:w="1"/><text x="73.5464%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.2964%" y="597" width="0.0792%" height="15" fill="rgb(227,112,52)" fg:x="925" fg:w="1"/><text x="73.5464%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.3756%" y="613" width="0.0792%" height="15" fill="rgb(238,155,34)" fg:x="926" fg:w="1"/><text x="73.6256%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.3756%" y="597" width="0.0792%" height="15" fill="rgb(239,226,36)" fg:x="926" fg:w="1"/><text x="73.6256%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.3756%" y="581" width="0.0792%" height="15" fill="rgb(230,16,23)" fg:x="926" fg:w="1"/><text x="73.6256%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.3756%" y="565" width="0.0792%" height="15" fill="rgb(236,171,36)" fg:x="926" fg:w="1"/><text x="73.6256%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.3756%" y="549" width="0.0792%" height="15" fill="rgb(221,22,14)" fg:x="926" fg:w="1"/><text x="73.6256%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.3756%" y="533" width="0.0792%" height="15" fill="rgb(242,43,11)" fg:x="926" fg:w="1"/><text x="73.6256%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.3756%" y="517" width="0.0792%" height="15" fill="rgb(232,69,23)" fg:x="926" fg:w="1"/><text x="73.6256%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.3756%" y="501" width="0.0792%" height="15" fill="rgb(216,180,54)" fg:x="926" fg:w="1"/><text x="73.6256%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.3756%" y="485" width="0.0792%" height="15" fill="rgb(216,5,24)" fg:x="926" fg:w="1"/><text x="73.6256%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.3756%" y="469" width="0.0792%" height="15" fill="rgb(225,89,9)" fg:x="926" fg:w="1"/><text x="73.6256%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.3756%" y="453" width="0.0792%" height="15" fill="rgb(243,75,33)" fg:x="926" fg:w="1"/><text x="73.6256%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.3756%" y="437" width="0.0792%" height="15" fill="rgb(247,141,45)" fg:x="926" fg:w="1"/><text x="73.6256%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.3756%" y="421" width="0.0792%" height="15" fill="rgb(232,177,36)" fg:x="926" fg:w="1"/><text x="73.6256%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.3756%" y="405" width="0.0792%" height="15" fill="rgb(219,125,36)" fg:x="926" fg:w="1"/><text x="73.6256%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.3756%" y="389" width="0.0792%" height="15" fill="rgb(227,94,9)" fg:x="926" fg:w="1"/><text x="73.6256%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.4548%" y="613" width="0.0792%" height="15" fill="rgb(240,34,52)" fg:x="927" fg:w="1"/><text x="73.7048%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (4 samples, 0.32%)</title><rect x="73.3756%" y="709" width="0.3170%" height="15" fill="rgb(216,45,12)" fg:x="926" fg:w="4"/><text x="73.6256%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (4 samples, 0.32%)</title><rect x="73.3756%" y="693" width="0.3170%" height="15" fill="rgb(246,21,19)" fg:x="926" fg:w="4"/><text x="73.6256%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="73.3756%" y="677" width="0.3170%" height="15" fill="rgb(213,98,42)" fg:x="926" fg:w="4"/><text x="73.6256%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="73.3756%" y="661" width="0.3170%" height="15" fill="rgb(250,136,47)" fg:x="926" fg:w="4"/><text x="73.6256%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="73.3756%" y="645" width="0.3170%" height="15" fill="rgb(251,124,27)" fg:x="926" fg:w="4"/><text x="73.6256%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="73.3756%" y="629" width="0.3170%" height="15" fill="rgb(229,180,14)" fg:x="926" fg:w="4"/><text x="73.6256%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="73.5341%" y="613" width="0.1585%" height="15" fill="rgb(245,216,25)" fg:x="928" fg:w="2"/><text x="73.7841%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.6133%" y="597" width="0.0792%" height="15" fill="rgb(251,43,5)" fg:x="929" fg:w="1"/><text x="73.8633%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.6133%" y="581" width="0.0792%" height="15" fill="rgb(250,128,24)" fg:x="929" fg:w="1"/><text x="73.8633%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.6133%" y="565" width="0.0792%" height="15" fill="rgb(217,117,27)" fg:x="929" fg:w="1"/><text x="73.8633%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.6133%" y="549" width="0.0792%" height="15" fill="rgb(245,147,4)" fg:x="929" fg:w="1"/><text x="73.8633%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (49 samples, 3.88%)</title><rect x="69.8891%" y="725" width="3.8827%" height="15" fill="rgb(242,201,35)" fg:x="882" fg:w="49"/><text x="70.1391%" y="735.50">plug..</text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="73.6926%" y="709" width="0.0792%" height="15" fill="rgb(218,181,1)" fg:x="930" fg:w="1"/><text x="73.9426%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="73.6926%" y="693" width="0.0792%" height="15" fill="rgb(222,6,29)" fg:x="930" fg:w="1"/><text x="73.9426%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="73.6926%" y="677" width="0.0792%" height="15" fill="rgb(208,186,3)" fg:x="930" fg:w="1"/><text x="73.9426%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="73.6926%" y="661" width="0.0792%" height="15" fill="rgb(216,36,26)" fg:x="930" fg:w="1"/><text x="73.9426%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.6926%" y="645" width="0.0792%" height="15" fill="rgb(248,201,23)" fg:x="930" fg:w="1"/><text x="73.9426%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.6926%" y="629" width="0.0792%" height="15" fill="rgb(251,170,31)" fg:x="930" fg:w="1"/><text x="73.9426%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.6926%" y="613" width="0.0792%" height="15" fill="rgb(207,110,25)" fg:x="930" fg:w="1"/><text x="73.9426%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.6926%" y="597" width="0.0792%" height="15" fill="rgb(250,54,15)" fg:x="930" fg:w="1"/><text x="73.9426%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.6926%" y="581" width="0.0792%" height="15" fill="rgb(227,68,33)" fg:x="930" fg:w="1"/><text x="73.9426%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.6926%" y="565" width="0.0792%" height="15" fill="rgb(238,34,41)" fg:x="930" fg:w="1"/><text x="73.9426%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.6926%" y="549" width="0.0792%" height="15" fill="rgb(220,11,15)" fg:x="930" fg:w="1"/><text x="73.9426%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.6926%" y="533" width="0.0792%" height="15" fill="rgb(246,111,35)" fg:x="930" fg:w="1"/><text x="73.9426%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.6926%" y="517" width="0.0792%" height="15" fill="rgb(209,88,53)" fg:x="930" fg:w="1"/><text x="73.9426%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.6926%" y="501" width="0.0792%" height="15" fill="rgb(231,185,47)" fg:x="930" fg:w="1"/><text x="73.9426%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.6926%" y="485" width="0.0792%" height="15" fill="rgb(233,154,1)" fg:x="930" fg:w="1"/><text x="73.9426%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.6926%" y="469" width="0.0792%" height="15" fill="rgb(225,15,46)" fg:x="930" fg:w="1"/><text x="73.9426%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.6926%" y="453" width="0.0792%" height="15" fill="rgb(211,135,41)" fg:x="930" fg:w="1"/><text x="73.9426%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.6926%" y="437" width="0.0792%" height="15" fill="rgb(208,54,0)" fg:x="930" fg:w="1"/><text x="73.9426%" y="447.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="73.7718%" y="725" width="0.0792%" height="15" fill="rgb(244,136,14)" fg:x="931" fg:w="1"/><text x="74.0218%" y="735.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="73.7718%" y="709" width="0.0792%" height="15" fill="rgb(241,56,14)" fg:x="931" fg:w="1"/><text x="74.0218%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="73.7718%" y="693" width="0.0792%" height="15" fill="rgb(205,80,24)" fg:x="931" fg:w="1"/><text x="74.0218%" y="703.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="73.7718%" y="677" width="0.0792%" height="15" fill="rgb(220,57,4)" fg:x="931" fg:w="1"/><text x="74.0218%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="73.7718%" y="661" width="0.0792%" height="15" fill="rgb(226,193,50)" fg:x="931" fg:w="1"/><text x="74.0218%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="73.8510%" y="645" width="0.0792%" height="15" fill="rgb(231,168,22)" fg:x="932" fg:w="1"/><text x="74.1010%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="73.8510%" y="629" width="0.0792%" height="15" fill="rgb(254,215,14)" fg:x="932" fg:w="1"/><text x="74.1010%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="73.8510%" y="613" width="0.0792%" height="15" fill="rgb(211,115,16)" fg:x="932" fg:w="1"/><text x="74.1010%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="73.8510%" y="597" width="0.0792%" height="15" fill="rgb(236,210,16)" fg:x="932" fg:w="1"/><text x="74.1010%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="73.8510%" y="581" width="0.0792%" height="15" fill="rgb(221,94,12)" fg:x="932" fg:w="1"/><text x="74.1010%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.8510%" y="565" width="0.0792%" height="15" fill="rgb(235,218,49)" fg:x="932" fg:w="1"/><text x="74.1010%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="73.8510%" y="549" width="0.0792%" height="15" fill="rgb(217,114,14)" fg:x="932" fg:w="1"/><text x="74.1010%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.8510%" y="533" width="0.0792%" height="15" fill="rgb(216,145,22)" fg:x="932" fg:w="1"/><text x="74.1010%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.9303%" y="613" width="0.0792%" height="15" fill="rgb(217,112,39)" fg:x="933" fg:w="1"/><text x="74.1803%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="73.8510%" y="693" width="0.2377%" height="15" fill="rgb(225,85,32)" fg:x="932" fg:w="3"/><text x="74.1010%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="73.8510%" y="677" width="0.2377%" height="15" fill="rgb(245,209,47)" fg:x="932" fg:w="3"/><text x="74.1010%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="73.8510%" y="661" width="0.2377%" height="15" fill="rgb(218,220,15)" fg:x="932" fg:w="3"/><text x="74.1010%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="73.9303%" y="645" width="0.1585%" height="15" fill="rgb(222,202,31)" fg:x="933" fg:w="2"/><text x="74.1803%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="73.9303%" y="629" width="0.1585%" height="15" fill="rgb(243,203,4)" fg:x="933" fg:w="2"/><text x="74.1803%" y="639.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="74.0095%" y="613" width="0.0792%" height="15" fill="rgb(237,92,17)" fg:x="934" fg:w="1"/><text x="74.2595%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.32%)</title><rect x="73.8510%" y="725" width="0.3170%" height="15" fill="rgb(231,119,7)" fg:x="932" fg:w="4"/><text x="74.1010%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="73.8510%" y="709" width="0.3170%" height="15" fill="rgb(237,82,41)" fg:x="932" fg:w="4"/><text x="74.1010%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="74.0887%" y="693" width="0.0792%" height="15" fill="rgb(226,81,48)" fg:x="935" fg:w="1"/><text x="74.3387%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="74.0887%" y="677" width="0.0792%" height="15" fill="rgb(234,70,51)" fg:x="935" fg:w="1"/><text x="74.3387%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="74.0887%" y="661" width="0.0792%" height="15" fill="rgb(251,86,4)" fg:x="935" fg:w="1"/><text x="74.3387%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.0887%" y="645" width="0.0792%" height="15" fill="rgb(244,144,28)" fg:x="935" fg:w="1"/><text x="74.3387%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="74.1680%" y="709" width="0.0792%" height="15" fill="rgb(232,161,39)" fg:x="936" fg:w="1"/><text x="74.4180%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="74.1680%" y="693" width="0.0792%" height="15" fill="rgb(247,34,51)" fg:x="936" fg:w="1"/><text x="74.4180%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.1680%" y="677" width="0.0792%" height="15" fill="rgb(225,132,2)" fg:x="936" fg:w="1"/><text x="74.4180%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="74.1680%" y="661" width="0.0792%" height="15" fill="rgb(209,159,44)" fg:x="936" fg:w="1"/><text x="74.4180%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="74.1680%" y="645" width="0.0792%" height="15" fill="rgb(251,214,1)" fg:x="936" fg:w="1"/><text x="74.4180%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.1680%" y="629" width="0.0792%" height="15" fill="rgb(247,84,47)" fg:x="936" fg:w="1"/><text x="74.4180%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.1680%" y="613" width="0.0792%" height="15" fill="rgb(240,111,43)" fg:x="936" fg:w="1"/><text x="74.4180%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="74.2472%" y="709" width="0.0792%" height="15" fill="rgb(215,214,35)" fg:x="937" fg:w="1"/><text x="74.4972%" y="719.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="74.3265%" y="709" width="0.0792%" height="15" fill="rgb(248,207,23)" fg:x="938" fg:w="1"/><text x="74.5765%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="74.4057%" y="677" width="0.0792%" height="15" fill="rgb(214,186,4)" fg:x="939" fg:w="1"/><text x="74.6557%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.4057%" y="661" width="0.0792%" height="15" fill="rgb(220,133,22)" fg:x="939" fg:w="1"/><text x="74.6557%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.4057%" y="645" width="0.0792%" height="15" fill="rgb(239,134,19)" fg:x="939" fg:w="1"/><text x="74.6557%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.4057%" y="629" width="0.0792%" height="15" fill="rgb(250,140,9)" fg:x="939" fg:w="1"/><text x="74.6557%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.4057%" y="613" width="0.0792%" height="15" fill="rgb(225,59,14)" fg:x="939" fg:w="1"/><text x="74.6557%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.4057%" y="597" width="0.0792%" height="15" fill="rgb(214,152,51)" fg:x="939" fg:w="1"/><text x="74.6557%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.4057%" y="581" width="0.0792%" height="15" fill="rgb(251,227,43)" fg:x="939" fg:w="1"/><text x="74.6557%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="74.4849%" y="661" width="0.0792%" height="15" fill="rgb(241,96,17)" fg:x="940" fg:w="1"/><text x="74.7349%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="74.4849%" y="645" width="0.0792%" height="15" fill="rgb(234,198,43)" fg:x="940" fg:w="1"/><text x="74.7349%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="74.4849%" y="629" width="0.0792%" height="15" fill="rgb(220,108,29)" fg:x="940" fg:w="1"/><text x="74.7349%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.4849%" y="613" width="0.0792%" height="15" fill="rgb(226,163,33)" fg:x="940" fg:w="1"/><text x="74.7349%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.4849%" y="597" width="0.0792%" height="15" fill="rgb(205,194,45)" fg:x="940" fg:w="1"/><text x="74.7349%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.4849%" y="581" width="0.0792%" height="15" fill="rgb(206,143,44)" fg:x="940" fg:w="1"/><text x="74.7349%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.4849%" y="565" width="0.0792%" height="15" fill="rgb(236,136,36)" fg:x="940" fg:w="1"/><text x="74.7349%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.4849%" y="549" width="0.0792%" height="15" fill="rgb(249,172,42)" fg:x="940" fg:w="1"/><text x="74.7349%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.4849%" y="533" width="0.0792%" height="15" fill="rgb(216,139,23)" fg:x="940" fg:w="1"/><text x="74.7349%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.4849%" y="517" width="0.0792%" height="15" fill="rgb(207,166,20)" fg:x="940" fg:w="1"/><text x="74.7349%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.4849%" y="501" width="0.0792%" height="15" fill="rgb(210,209,22)" fg:x="940" fg:w="1"/><text x="74.7349%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.5642%" y="629" width="0.0792%" height="15" fill="rgb(232,118,20)" fg:x="941" fg:w="1"/><text x="74.8142%" y="639.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (98 samples, 7.77%)</title><rect x="66.9572%" y="741" width="7.7655%" height="15" fill="rgb(238,113,42)" fg:x="845" fg:w="98"/><text x="67.2072%" y="751.50">&lt;tests::Hol..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (7 samples, 0.55%)</title><rect x="74.1680%" y="725" width="0.5547%" height="15" fill="rgb(231,42,5)" fg:x="936" fg:w="7"/><text x="74.4180%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="74.4057%" y="709" width="0.3170%" height="15" fill="rgb(243,166,24)" fg:x="939" fg:w="4"/><text x="74.6557%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="74.4057%" y="693" width="0.3170%" height="15" fill="rgb(237,226,12)" fg:x="939" fg:w="4"/><text x="74.6557%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="74.4849%" y="677" width="0.2377%" height="15" fill="rgb(229,133,24)" fg:x="940" fg:w="3"/><text x="74.7349%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="74.5642%" y="661" width="0.1585%" height="15" fill="rgb(238,33,43)" fg:x="941" fg:w="2"/><text x="74.8142%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="74.5642%" y="645" width="0.1585%" height="15" fill="rgb(227,59,38)" fg:x="941" fg:w="2"/><text x="74.8142%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="74.6434%" y="629" width="0.0792%" height="15" fill="rgb(230,97,0)" fg:x="942" fg:w="1"/><text x="74.8934%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="74.6434%" y="613" width="0.0792%" height="15" fill="rgb(250,173,50)" fg:x="942" fg:w="1"/><text x="74.8934%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.6434%" y="597" width="0.0792%" height="15" fill="rgb(240,15,50)" fg:x="942" fg:w="1"/><text x="74.8934%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.6434%" y="581" width="0.0792%" height="15" fill="rgb(221,93,22)" fg:x="942" fg:w="1"/><text x="74.8934%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.6434%" y="565" width="0.0792%" height="15" fill="rgb(245,180,53)" fg:x="942" fg:w="1"/><text x="74.8934%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="74.7227%" y="741" width="0.0792%" height="15" fill="rgb(231,88,51)" fg:x="943" fg:w="1"/><text x="74.9727%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.7227%" y="725" width="0.0792%" height="15" fill="rgb(240,58,21)" fg:x="943" fg:w="1"/><text x="74.9727%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.7227%" y="709" width="0.0792%" height="15" fill="rgb(237,21,10)" fg:x="943" fg:w="1"/><text x="74.9727%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.7227%" y="693" width="0.0792%" height="15" fill="rgb(218,43,11)" fg:x="943" fg:w="1"/><text x="74.9727%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.8019%" y="725" width="0.0792%" height="15" fill="rgb(218,221,29)" fg:x="944" fg:w="1"/><text x="75.0519%" y="735.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="74.8811%" y="629" width="0.0792%" height="15" fill="rgb(214,118,42)" fg:x="945" fg:w="1"/><text x="75.1311%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.8811%" y="613" width="0.0792%" height="15" fill="rgb(251,200,26)" fg:x="945" fg:w="1"/><text x="75.1311%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.8811%" y="597" width="0.0792%" height="15" fill="rgb(237,101,39)" fg:x="945" fg:w="1"/><text x="75.1311%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.8811%" y="581" width="0.0792%" height="15" fill="rgb(251,117,11)" fg:x="945" fg:w="1"/><text x="75.1311%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.9604%" y="613" width="0.0792%" height="15" fill="rgb(216,223,23)" fg:x="946" fg:w="1"/><text x="75.2104%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.9604%" y="597" width="0.0792%" height="15" fill="rgb(251,54,12)" fg:x="946" fg:w="1"/><text x="75.2104%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.9604%" y="581" width="0.0792%" height="15" fill="rgb(254,176,54)" fg:x="946" fg:w="1"/><text x="75.2104%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.9604%" y="565" width="0.0792%" height="15" fill="rgb(210,32,8)" fg:x="946" fg:w="1"/><text x="75.2104%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.9604%" y="549" width="0.0792%" height="15" fill="rgb(235,52,38)" fg:x="946" fg:w="1"/><text x="75.2104%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.9604%" y="533" width="0.0792%" height="15" fill="rgb(231,4,44)" fg:x="946" fg:w="1"/><text x="75.2104%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.9604%" y="517" width="0.0792%" height="15" fill="rgb(249,2,32)" fg:x="946" fg:w="1"/><text x="75.2104%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.0396%" y="581" width="0.0792%" height="15" fill="rgb(224,65,26)" fg:x="947" fg:w="1"/><text x="75.2896%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.0396%" y="565" width="0.0792%" height="15" fill="rgb(250,73,40)" fg:x="947" fg:w="1"/><text x="75.2896%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.0396%" y="549" width="0.0792%" height="15" fill="rgb(253,177,16)" fg:x="947" fg:w="1"/><text x="75.2896%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="75.0396%" y="597" width="0.1585%" height="15" fill="rgb(217,32,34)" fg:x="947" fg:w="2"/><text x="75.2896%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.1189%" y="581" width="0.0792%" height="15" fill="rgb(212,7,10)" fg:x="948" fg:w="1"/><text x="75.3689%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.1189%" y="565" width="0.0792%" height="15" fill="rgb(245,89,8)" fg:x="948" fg:w="1"/><text x="75.3689%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.1189%" y="549" width="0.0792%" height="15" fill="rgb(237,16,53)" fg:x="948" fg:w="1"/><text x="75.3689%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="75.1981%" y="581" width="0.0792%" height="15" fill="rgb(250,204,30)" fg:x="949" fg:w="1"/><text x="75.4481%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="74.8811%" y="645" width="0.4754%" height="15" fill="rgb(208,77,27)" fg:x="945" fg:w="6"/><text x="75.1311%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="74.9604%" y="629" width="0.3962%" height="15" fill="rgb(250,204,28)" fg:x="946" fg:w="5"/><text x="75.2104%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="75.0396%" y="613" width="0.3170%" height="15" fill="rgb(244,63,21)" fg:x="947" fg:w="4"/><text x="75.2896%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="75.1981%" y="597" width="0.1585%" height="15" fill="rgb(236,85,44)" fg:x="949" fg:w="2"/><text x="75.4481%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.2773%" y="581" width="0.0792%" height="15" fill="rgb(215,98,4)" fg:x="950" fg:w="1"/><text x="75.5273%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.3566%" y="597" width="0.0792%" height="15" fill="rgb(235,38,11)" fg:x="951" fg:w="1"/><text x="75.6066%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.3566%" y="581" width="0.0792%" height="15" fill="rgb(254,186,25)" fg:x="951" fg:w="1"/><text x="75.6066%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.3566%" y="645" width="0.1585%" height="15" fill="rgb(225,55,31)" fg:x="951" fg:w="2"/><text x="75.6066%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="75.3566%" y="629" width="0.1585%" height="15" fill="rgb(211,15,21)" fg:x="951" fg:w="2"/><text x="75.6066%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.3566%" y="613" width="0.1585%" height="15" fill="rgb(215,187,41)" fg:x="951" fg:w="2"/><text x="75.6066%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.4358%" y="597" width="0.0792%" height="15" fill="rgb(248,69,32)" fg:x="952" fg:w="1"/><text x="75.6858%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.4358%" y="581" width="0.0792%" height="15" fill="rgb(252,102,52)" fg:x="952" fg:w="1"/><text x="75.6858%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.4358%" y="565" width="0.0792%" height="15" fill="rgb(253,140,32)" fg:x="952" fg:w="1"/><text x="75.6858%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.4358%" y="549" width="0.0792%" height="15" fill="rgb(216,56,42)" fg:x="952" fg:w="1"/><text x="75.6858%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="75.5151%" y="613" width="0.1585%" height="15" fill="rgb(216,184,14)" fg:x="953" fg:w="2"/><text x="75.7651%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.5151%" y="597" width="0.1585%" height="15" fill="rgb(237,187,27)" fg:x="953" fg:w="2"/><text x="75.7651%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.5151%" y="581" width="0.1585%" height="15" fill="rgb(219,65,3)" fg:x="953" fg:w="2"/><text x="75.7651%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.5943%" y="565" width="0.0792%" height="15" fill="rgb(245,83,25)" fg:x="954" fg:w="1"/><text x="75.8443%" y="575.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="75.6735%" y="613" width="0.0792%" height="15" fill="rgb(214,205,45)" fg:x="955" fg:w="1"/><text x="75.9235%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.6735%" y="597" width="0.0792%" height="15" fill="rgb(241,20,18)" fg:x="955" fg:w="1"/><text x="75.9235%" y="607.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="75.9905%" y="565" width="0.0792%" height="15" fill="rgb(232,163,23)" fg:x="959" fg:w="1"/><text x="76.2405%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.32%)</title><rect x="75.8320%" y="597" width="0.3170%" height="15" fill="rgb(214,5,46)" fg:x="957" fg:w="4"/><text x="76.0820%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="75.9905%" y="581" width="0.1585%" height="15" fill="rgb(229,78,17)" fg:x="959" fg:w="2"/><text x="76.2405%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="76.0697%" y="565" width="0.0792%" height="15" fill="rgb(248,89,10)" fg:x="960" fg:w="1"/><text x="76.3197%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="76.0697%" y="549" width="0.0792%" height="15" fill="rgb(248,54,15)" fg:x="960" fg:w="1"/><text x="76.3197%" y="559.50"></text></g><g><title>&lt;serde_json::number::N as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="76.0697%" y="533" width="0.0792%" height="15" fill="rgb(223,116,6)" fg:x="960" fg:w="1"/><text x="76.3197%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (9 samples, 0.71%)</title><rect x="75.5151%" y="629" width="0.7132%" height="15" fill="rgb(205,125,38)" fg:x="953" fg:w="9"/><text x="75.7651%" y="639.50"></text></g><g><title>treediff::diff::diff (6 samples, 0.48%)</title><rect x="75.7528%" y="613" width="0.4754%" height="15" fill="rgb(251,78,38)" fg:x="956" fg:w="6"/><text x="76.0028%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.1490%" y="597" width="0.0792%" height="15" fill="rgb(253,78,28)" fg:x="961" fg:w="1"/><text x="76.3990%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.1490%" y="581" width="0.0792%" height="15" fill="rgb(209,120,3)" fg:x="961" fg:w="1"/><text x="76.3990%" y="591.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="76.1490%" y="565" width="0.0792%" height="15" fill="rgb(238,229,9)" fg:x="961" fg:w="1"/><text x="76.3990%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="76.1490%" y="549" width="0.0792%" height="15" fill="rgb(253,159,18)" fg:x="961" fg:w="1"/><text x="76.3990%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.2282%" y="597" width="0.0792%" height="15" fill="rgb(244,42,34)" fg:x="962" fg:w="1"/><text x="76.4782%" y="607.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="76.3074%" y="597" width="0.0792%" height="15" fill="rgb(224,8,7)" fg:x="963" fg:w="1"/><text x="76.5574%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (4 samples, 0.32%)</title><rect x="76.3867%" y="597" width="0.3170%" height="15" fill="rgb(210,201,45)" fg:x="964" fg:w="4"/><text x="76.6367%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="76.3867%" y="581" width="0.3170%" height="15" fill="rgb(252,185,21)" fg:x="964" fg:w="4"/><text x="76.6367%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.6244%" y="565" width="0.0792%" height="15" fill="rgb(223,131,1)" fg:x="967" fg:w="1"/><text x="76.8744%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.8621%" y="565" width="0.0792%" height="15" fill="rgb(245,141,16)" fg:x="970" fg:w="1"/><text x="77.1121%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.9414%" y="549" width="0.0792%" height="15" fill="rgb(229,55,45)" fg:x="971" fg:w="1"/><text x="77.1914%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="77.0998%" y="453" width="0.0792%" height="15" fill="rgb(208,92,15)" fg:x="973" fg:w="1"/><text x="77.3498%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="77.0206%" y="517" width="0.2377%" height="15" fill="rgb(234,185,47)" fg:x="972" fg:w="3"/><text x="77.2706%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="77.0206%" y="501" width="0.2377%" height="15" fill="rgb(253,104,50)" fg:x="972" fg:w="3"/><text x="77.2706%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="77.0998%" y="485" width="0.1585%" height="15" fill="rgb(205,70,7)" fg:x="973" fg:w="2"/><text x="77.3498%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="77.0998%" y="469" width="0.1585%" height="15" fill="rgb(240,178,43)" fg:x="973" fg:w="2"/><text x="77.3498%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1791%" y="453" width="0.0792%" height="15" fill="rgb(214,112,2)" fg:x="974" fg:w="1"/><text x="77.4291%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.40%)</title><rect x="77.0206%" y="549" width="0.3962%" height="15" fill="rgb(206,46,17)" fg:x="972" fg:w="5"/><text x="77.2706%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="77.0206%" y="533" width="0.3962%" height="15" fill="rgb(225,220,16)" fg:x="972" fg:w="5"/><text x="77.2706%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="77.2583%" y="517" width="0.1585%" height="15" fill="rgb(238,65,40)" fg:x="975" fg:w="2"/><text x="77.5083%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="77.4168%" y="533" width="0.0792%" height="15" fill="rgb(230,151,21)" fg:x="977" fg:w="1"/><text x="77.6668%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="77.4960%" y="517" width="0.1585%" height="15" fill="rgb(218,58,49)" fg:x="978" fg:w="2"/><text x="77.7460%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.5753%" y="501" width="0.0792%" height="15" fill="rgb(219,179,14)" fg:x="979" fg:w="1"/><text x="77.8253%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (12 samples, 0.95%)</title><rect x="76.7829%" y="581" width="0.9509%" height="15" fill="rgb(223,72,1)" fg:x="969" fg:w="12"/><text x="77.0329%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 0.79%)</title><rect x="76.9414%" y="565" width="0.7924%" height="15" fill="rgb(238,126,10)" fg:x="971" fg:w="10"/><text x="77.1914%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="77.4168%" y="549" width="0.3170%" height="15" fill="rgb(224,206,38)" fg:x="977" fg:w="4"/><text x="77.6668%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="77.4960%" y="533" width="0.2377%" height="15" fill="rgb(212,201,54)" fg:x="978" fg:w="3"/><text x="77.7460%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.6545%" y="517" width="0.0792%" height="15" fill="rgb(218,154,48)" fg:x="980" fg:w="1"/><text x="77.9045%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.6545%" y="501" width="0.0792%" height="15" fill="rgb(232,93,24)" fg:x="980" fg:w="1"/><text x="77.9045%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.6545%" y="485" width="0.0792%" height="15" fill="rgb(245,30,21)" fg:x="980" fg:w="1"/><text x="77.9045%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (21 samples, 1.66%)</title><rect x="76.2282%" y="629" width="1.6640%" height="15" fill="rgb(242,148,29)" fg:x="962" fg:w="21"/><text x="76.4782%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (21 samples, 1.66%)</title><rect x="76.2282%" y="613" width="1.6640%" height="15" fill="rgb(244,153,54)" fg:x="962" fg:w="21"/><text x="76.4782%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (15 samples, 1.19%)</title><rect x="76.7036%" y="597" width="1.1886%" height="15" fill="rgb(252,87,22)" fg:x="968" fg:w="15"/><text x="76.9536%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="77.7338%" y="581" width="0.1585%" height="15" fill="rgb(210,51,29)" fg:x="981" fg:w="2"/><text x="77.9838%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="77.7338%" y="565" width="0.1585%" height="15" fill="rgb(242,136,47)" fg:x="981" fg:w="2"/><text x="77.9838%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.9715%" y="485" width="0.0792%" height="15" fill="rgb(238,68,4)" fg:x="984" fg:w="1"/><text x="78.2215%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.9715%" y="469" width="0.0792%" height="15" fill="rgb(242,161,30)" fg:x="984" fg:w="1"/><text x="78.2215%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.9715%" y="453" width="0.0792%" height="15" fill="rgb(218,58,44)" fg:x="984" fg:w="1"/><text x="78.2215%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.9715%" y="437" width="0.0792%" height="15" fill="rgb(252,125,32)" fg:x="984" fg:w="1"/><text x="78.2215%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.9715%" y="421" width="0.0792%" height="15" fill="rgb(219,178,0)" fg:x="984" fg:w="1"/><text x="78.2215%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.9715%" y="405" width="0.0792%" height="15" fill="rgb(213,152,7)" fg:x="984" fg:w="1"/><text x="78.2215%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.9715%" y="389" width="0.0792%" height="15" fill="rgb(249,109,34)" fg:x="984" fg:w="1"/><text x="78.2215%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.9715%" y="373" width="0.0792%" height="15" fill="rgb(232,96,21)" fg:x="984" fg:w="1"/><text x="78.2215%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.0507%" y="453" width="0.0792%" height="15" fill="rgb(228,27,39)" fg:x="985" fg:w="1"/><text x="78.3007%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="78.0507%" y="469" width="0.1585%" height="15" fill="rgb(211,182,52)" fg:x="985" fg:w="2"/><text x="78.3007%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.1300%" y="453" width="0.0792%" height="15" fill="rgb(234,178,38)" fg:x="986" fg:w="1"/><text x="78.3800%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="77.9715%" y="501" width="0.3170%" height="15" fill="rgb(221,111,3)" fg:x="984" fg:w="4"/><text x="78.2215%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="78.0507%" y="485" width="0.2377%" height="15" fill="rgb(228,175,21)" fg:x="985" fg:w="3"/><text x="78.3007%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.2092%" y="469" width="0.0792%" height="15" fill="rgb(228,174,43)" fg:x="987" fg:w="1"/><text x="78.4592%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.2092%" y="453" width="0.0792%" height="15" fill="rgb(211,191,0)" fg:x="987" fg:w="1"/><text x="78.4592%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.2092%" y="437" width="0.0792%" height="15" fill="rgb(253,117,3)" fg:x="987" fg:w="1"/><text x="78.4592%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="77.9715%" y="533" width="0.3962%" height="15" fill="rgb(241,127,19)" fg:x="984" fg:w="5"/><text x="78.2215%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="77.9715%" y="517" width="0.3962%" height="15" fill="rgb(218,103,12)" fg:x="984" fg:w="5"/><text x="78.2215%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.2884%" y="501" width="0.0792%" height="15" fill="rgb(236,214,43)" fg:x="988" fg:w="1"/><text x="78.5384%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.2884%" y="485" width="0.0792%" height="15" fill="rgb(244,144,19)" fg:x="988" fg:w="1"/><text x="78.5384%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.2884%" y="469" width="0.0792%" height="15" fill="rgb(246,188,10)" fg:x="988" fg:w="1"/><text x="78.5384%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.55%)</title><rect x="77.9715%" y="565" width="0.5547%" height="15" fill="rgb(212,193,33)" fg:x="984" fg:w="7"/><text x="78.2215%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.55%)</title><rect x="77.9715%" y="549" width="0.5547%" height="15" fill="rgb(241,51,29)" fg:x="984" fg:w="7"/><text x="78.2215%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="78.3677%" y="533" width="0.1585%" height="15" fill="rgb(211,58,19)" fg:x="989" fg:w="2"/><text x="78.6177%" y="543.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="78.4469%" y="517" width="0.0792%" height="15" fill="rgb(229,111,26)" fg:x="990" fg:w="1"/><text x="78.6969%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="78.5261%" y="565" width="0.1585%" height="15" fill="rgb(213,115,40)" fg:x="991" fg:w="2"/><text x="78.7761%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="78.6054%" y="549" width="0.0792%" height="15" fill="rgb(209,56,44)" fg:x="992" fg:w="1"/><text x="78.8554%" y="559.50"></text></g><g><title>engine::session::Session::close (50 samples, 3.96%)</title><rect x="74.8019%" y="741" width="3.9620%" height="15" fill="rgb(230,108,32)" fg:x="944" fg:w="50"/><text x="75.0519%" y="751.50">engi..</text></g><g><title>engine::session::state::State::close (49 samples, 3.88%)</title><rect x="74.8811%" y="725" width="3.8827%" height="15" fill="rgb(216,165,31)" fg:x="945" fg:w="49"/><text x="75.1311%" y="735.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (49 samples, 3.88%)</title><rect x="74.8811%" y="709" width="3.8827%" height="15" fill="rgb(218,122,21)" fg:x="945" fg:w="49"/><text x="75.1311%" y="719.50">engi..</text></g><g><title>core::iter::adapters::try_process (49 samples, 3.88%)</title><rect x="74.8811%" y="693" width="3.8827%" height="15" fill="rgb(223,224,47)" fg:x="945" fg:w="49"/><text x="75.1311%" y="703.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (49 samples, 3.88%)</title><rect x="74.8811%" y="677" width="3.8827%" height="15" fill="rgb(238,102,44)" fg:x="945" fg:w="49"/><text x="75.1311%" y="687.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (49 samples, 3.88%)</title><rect x="74.8811%" y="661" width="3.8827%" height="15" fill="rgb(236,46,40)" fg:x="945" fg:w="49"/><text x="75.1311%" y="671.50">engi..</text></g><g><title>kernel::model::any_entity_changes (41 samples, 3.25%)</title><rect x="75.5151%" y="645" width="3.2488%" height="15" fill="rgb(247,202,50)" fg:x="953" fg:w="41"/><text x="75.7651%" y="655.50">ker..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (11 samples, 0.87%)</title><rect x="77.8922%" y="629" width="0.8716%" height="15" fill="rgb(209,99,20)" fg:x="983" fg:w="11"/><text x="78.1422%" y="639.50"></text></g><g><title>serde_json::de::from_trait (11 samples, 0.87%)</title><rect x="77.8922%" y="613" width="0.8716%" height="15" fill="rgb(252,27,34)" fg:x="983" fg:w="11"/><text x="78.1422%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.87%)</title><rect x="77.8922%" y="597" width="0.8716%" height="15" fill="rgb(215,206,23)" fg:x="983" fg:w="11"/><text x="78.1422%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.87%)</title><rect x="77.8922%" y="581" width="0.8716%" height="15" fill="rgb(212,135,36)" fg:x="983" fg:w="11"/><text x="78.1422%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6846%" y="565" width="0.0792%" height="15" fill="rgb(240,189,1)" fg:x="993" fg:w="1"/><text x="78.9346%" y="575.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="78.8431%" y="549" width="0.0792%" height="15" fill="rgb(242,56,20)" fg:x="995" fg:w="1"/><text x="79.0931%" y="559.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="78.8431%" y="533" width="0.0792%" height="15" fill="rgb(247,132,33)" fg:x="995" fg:w="1"/><text x="79.0931%" y="543.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="78.8431%" y="517" width="0.0792%" height="15" fill="rgb(208,149,11)" fg:x="995" fg:w="1"/><text x="79.0931%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="78.8431%" y="501" width="0.0792%" height="15" fill="rgb(211,33,11)" fg:x="995" fg:w="1"/><text x="79.0931%" y="511.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="78.8431%" y="485" width="0.0792%" height="15" fill="rgb(221,29,38)" fg:x="995" fg:w="1"/><text x="79.0931%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="78.8431%" y="469" width="0.0792%" height="15" fill="rgb(206,182,49)" fg:x="995" fg:w="1"/><text x="79.0931%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="78.9223%" y="549" width="0.1585%" height="15" fill="rgb(216,140,1)" fg:x="996" fg:w="2"/><text x="79.1723%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="78.9223%" y="533" width="0.1585%" height="15" fill="rgb(232,57,40)" fg:x="996" fg:w="2"/><text x="79.1723%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="78.9223%" y="517" width="0.1585%" height="15" fill="rgb(224,186,18)" fg:x="996" fg:w="2"/><text x="79.1723%" y="527.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="78.9223%" y="501" width="0.1585%" height="15" fill="rgb(215,121,11)" fg:x="996" fg:w="2"/><text x="79.1723%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="79.0016%" y="485" width="0.0792%" height="15" fill="rgb(245,147,10)" fg:x="997" fg:w="1"/><text x="79.2516%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="79.0016%" y="469" width="0.0792%" height="15" fill="rgb(238,153,13)" fg:x="997" fg:w="1"/><text x="79.2516%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="79.0016%" y="453" width="0.0792%" height="15" fill="rgb(233,108,0)" fg:x="997" fg:w="1"/><text x="79.2516%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="79.0016%" y="437" width="0.0792%" height="15" fill="rgb(212,157,17)" fg:x="997" fg:w="1"/><text x="79.2516%" y="447.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.0016%" y="421" width="0.0792%" height="15" fill="rgb(225,213,38)" fg:x="997" fg:w="1"/><text x="79.2516%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.0016%" y="405" width="0.0792%" height="15" fill="rgb(248,16,11)" fg:x="997" fg:w="1"/><text x="79.2516%" y="415.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="79.0016%" y="389" width="0.0792%" height="15" fill="rgb(241,33,4)" fg:x="997" fg:w="1"/><text x="79.2516%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="79.0016%" y="373" width="0.0792%" height="15" fill="rgb(222,26,43)" fg:x="997" fg:w="1"/><text x="79.2516%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="79.0016%" y="357" width="0.0792%" height="15" fill="rgb(243,29,36)" fg:x="997" fg:w="1"/><text x="79.2516%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="79.0016%" y="341" width="0.0792%" height="15" fill="rgb(241,9,27)" fg:x="997" fg:w="1"/><text x="79.2516%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="79.0016%" y="325" width="0.0792%" height="15" fill="rgb(205,117,26)" fg:x="997" fg:w="1"/><text x="79.2516%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="79.0016%" y="309" width="0.0792%" height="15" fill="rgb(209,80,39)" fg:x="997" fg:w="1"/><text x="79.2516%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.0016%" y="293" width="0.0792%" height="15" fill="rgb(239,155,6)" fg:x="997" fg:w="1"/><text x="79.2516%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="79.0016%" y="277" width="0.0792%" height="15" fill="rgb(212,104,12)" fg:x="997" fg:w="1"/><text x="79.2516%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.0016%" y="261" width="0.0792%" height="15" fill="rgb(234,204,3)" fg:x="997" fg:w="1"/><text x="79.2516%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="79.0016%" y="245" width="0.0792%" height="15" fill="rgb(251,218,7)" fg:x="997" fg:w="1"/><text x="79.2516%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="79.0016%" y="229" width="0.0792%" height="15" fill="rgb(221,81,32)" fg:x="997" fg:w="1"/><text x="79.2516%" y="239.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="79.0016%" y="213" width="0.0792%" height="15" fill="rgb(214,152,26)" fg:x="997" fg:w="1"/><text x="79.2516%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.0016%" y="197" width="0.0792%" height="15" fill="rgb(223,22,3)" fg:x="997" fg:w="1"/><text x="79.2516%" y="207.50"></text></g><g><title>alloc::fmt::format::format_inner (4 samples, 0.32%)</title><rect x="78.8431%" y="693" width="0.3170%" height="15" fill="rgb(207,174,7)" fg:x="995" fg:w="4"/><text x="79.0931%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (4 samples, 0.32%)</title><rect x="78.8431%" y="677" width="0.3170%" height="15" fill="rgb(224,19,52)" fg:x="995" fg:w="4"/><text x="79.0931%" y="687.50"></text></g><g><title>core::fmt::write (4 samples, 0.32%)</title><rect x="78.8431%" y="661" width="0.3170%" height="15" fill="rgb(228,24,14)" fg:x="995" fg:w="4"/><text x="79.0931%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (4 samples, 0.32%)</title><rect x="78.8431%" y="645" width="0.3170%" height="15" fill="rgb(230,153,43)" fg:x="995" fg:w="4"/><text x="79.0931%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (4 samples, 0.32%)</title><rect x="78.8431%" y="629" width="0.3170%" height="15" fill="rgb(231,106,12)" fg:x="995" fg:w="4"/><text x="79.0931%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (4 samples, 0.32%)</title><rect x="78.8431%" y="613" width="0.3170%" height="15" fill="rgb(215,92,2)" fg:x="995" fg:w="4"/><text x="79.0931%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (4 samples, 0.32%)</title><rect x="78.8431%" y="597" width="0.3170%" height="15" fill="rgb(249,143,25)" fg:x="995" fg:w="4"/><text x="79.0931%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (4 samples, 0.32%)</title><rect x="78.8431%" y="581" width="0.3170%" height="15" fill="rgb(252,7,35)" fg:x="995" fg:w="4"/><text x="79.0931%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (4 samples, 0.32%)</title><rect x="78.8431%" y="565" width="0.3170%" height="15" fill="rgb(216,69,40)" fg:x="995" fg:w="4"/><text x="79.0931%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="79.0808%" y="549" width="0.0792%" height="15" fill="rgb(240,36,33)" fg:x="998" fg:w="1"/><text x="79.3308%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.0808%" y="533" width="0.0792%" height="15" fill="rgb(231,128,14)" fg:x="998" fg:w="1"/><text x="79.3308%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.0808%" y="517" width="0.0792%" height="15" fill="rgb(245,143,14)" fg:x="998" fg:w="1"/><text x="79.3308%" y="527.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="79.0808%" y="501" width="0.0792%" height="15" fill="rgb(222,130,28)" fg:x="998" fg:w="1"/><text x="79.3308%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="79.0808%" y="485" width="0.0792%" height="15" fill="rgb(212,10,48)" fg:x="998" fg:w="1"/><text x="79.3308%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="79.0808%" y="469" width="0.0792%" height="15" fill="rgb(254,118,45)" fg:x="998" fg:w="1"/><text x="79.3308%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="79.0808%" y="453" width="0.0792%" height="15" fill="rgb(228,6,45)" fg:x="998" fg:w="1"/><text x="79.3308%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="79.0808%" y="437" width="0.0792%" height="15" fill="rgb(241,18,35)" fg:x="998" fg:w="1"/><text x="79.3308%" y="447.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (3 samples, 0.24%)</title><rect x="79.1601%" y="677" width="0.2377%" height="15" fill="rgb(227,214,53)" fg:x="999" fg:w="3"/><text x="79.4101%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (2 samples, 0.16%)</title><rect x="79.2393%" y="661" width="0.1585%" height="15" fill="rgb(224,107,51)" fg:x="1000" fg:w="2"/><text x="79.4893%" y="671.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (2 samples, 0.16%)</title><rect x="79.2393%" y="645" width="0.1585%" height="15" fill="rgb(248,60,28)" fg:x="1000" fg:w="2"/><text x="79.4893%" y="655.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="79.3185%" y="629" width="0.0792%" height="15" fill="rgb(249,101,23)" fg:x="1001" fg:w="1"/><text x="79.5685%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="79.6355%" y="565" width="0.1585%" height="15" fill="rgb(228,51,19)" fg:x="1005" fg:w="2"/><text x="79.8855%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.7147%" y="549" width="0.0792%" height="15" fill="rgb(213,20,6)" fg:x="1006" fg:w="1"/><text x="79.9647%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.7147%" y="533" width="0.0792%" height="15" fill="rgb(212,124,10)" fg:x="1006" fg:w="1"/><text x="79.9647%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.7147%" y="517" width="0.0792%" height="15" fill="rgb(248,3,40)" fg:x="1006" fg:w="1"/><text x="79.9647%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.7940%" y="469" width="0.0792%" height="15" fill="rgb(223,178,23)" fg:x="1007" fg:w="1"/><text x="80.0440%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.7940%" y="453" width="0.0792%" height="15" fill="rgb(240,132,45)" fg:x="1007" fg:w="1"/><text x="80.0440%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.7940%" y="501" width="0.1585%" height="15" fill="rgb(245,164,36)" fg:x="1007" fg:w="2"/><text x="80.0440%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.7940%" y="485" width="0.1585%" height="15" fill="rgb(231,188,53)" fg:x="1007" fg:w="2"/><text x="80.0440%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.8732%" y="469" width="0.0792%" height="15" fill="rgb(237,198,39)" fg:x="1008" fg:w="1"/><text x="80.1232%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.8732%" y="453" width="0.0792%" height="15" fill="rgb(223,120,35)" fg:x="1008" fg:w="1"/><text x="80.1232%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.8732%" y="437" width="0.0792%" height="15" fill="rgb(253,107,49)" fg:x="1008" fg:w="1"/><text x="80.1232%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.8732%" y="421" width="0.0792%" height="15" fill="rgb(216,44,31)" fg:x="1008" fg:w="1"/><text x="80.1232%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.8732%" y="405" width="0.0792%" height="15" fill="rgb(253,87,21)" fg:x="1008" fg:w="1"/><text x="80.1232%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.8732%" y="389" width="0.0792%" height="15" fill="rgb(226,18,2)" fg:x="1008" fg:w="1"/><text x="80.1232%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.8732%" y="373" width="0.0792%" height="15" fill="rgb(216,8,46)" fg:x="1008" fg:w="1"/><text x="80.1232%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.8732%" y="357" width="0.0792%" height="15" fill="rgb(226,140,39)" fg:x="1008" fg:w="1"/><text x="80.1232%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.8732%" y="341" width="0.0792%" height="15" fill="rgb(221,194,54)" fg:x="1008" fg:w="1"/><text x="80.1232%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.8732%" y="325" width="0.0792%" height="15" fill="rgb(213,92,11)" fg:x="1008" fg:w="1"/><text x="80.1232%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.8732%" y="309" width="0.0792%" height="15" fill="rgb(229,162,46)" fg:x="1008" fg:w="1"/><text x="80.1232%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.8732%" y="293" width="0.0792%" height="15" fill="rgb(214,111,36)" fg:x="1008" fg:w="1"/><text x="80.1232%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="79.9525%" y="501" width="0.2377%" height="15" fill="rgb(207,6,21)" fg:x="1009" fg:w="3"/><text x="80.2025%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="80.0317%" y="485" width="0.1585%" height="15" fill="rgb(213,127,38)" fg:x="1010" fg:w="2"/><text x="80.2817%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="80.0317%" y="469" width="0.1585%" height="15" fill="rgb(238,118,32)" fg:x="1010" fg:w="2"/><text x="80.2817%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.1109%" y="453" width="0.0792%" height="15" fill="rgb(240,139,39)" fg:x="1011" fg:w="1"/><text x="80.3609%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.1109%" y="437" width="0.0792%" height="15" fill="rgb(235,10,37)" fg:x="1011" fg:w="1"/><text x="80.3609%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.1109%" y="421" width="0.0792%" height="15" fill="rgb(249,171,38)" fg:x="1011" fg:w="1"/><text x="80.3609%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="80.1109%" y="405" width="0.0792%" height="15" fill="rgb(242,144,32)" fg:x="1011" fg:w="1"/><text x="80.3609%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="80.1109%" y="389" width="0.0792%" height="15" fill="rgb(217,117,21)" fg:x="1011" fg:w="1"/><text x="80.3609%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="80.1109%" y="373" width="0.0792%" height="15" fill="rgb(249,87,1)" fg:x="1011" fg:w="1"/><text x="80.3609%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="80.1109%" y="357" width="0.0792%" height="15" fill="rgb(248,196,48)" fg:x="1011" fg:w="1"/><text x="80.3609%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="80.1109%" y="341" width="0.0792%" height="15" fill="rgb(251,206,33)" fg:x="1011" fg:w="1"/><text x="80.3609%" y="351.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="80.1902%" y="501" width="0.0792%" height="15" fill="rgb(232,141,28)" fg:x="1012" fg:w="1"/><text x="80.4402%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.1902%" y="485" width="0.0792%" height="15" fill="rgb(209,167,14)" fg:x="1012" fg:w="1"/><text x="80.4402%" y="495.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (7 samples, 0.55%)</title><rect x="79.7940%" y="565" width="0.5547%" height="15" fill="rgb(225,11,50)" fg:x="1007" fg:w="7"/><text x="80.0440%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (7 samples, 0.55%)</title><rect x="79.7940%" y="549" width="0.5547%" height="15" fill="rgb(209,50,20)" fg:x="1007" fg:w="7"/><text x="80.0440%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.55%)</title><rect x="79.7940%" y="533" width="0.5547%" height="15" fill="rgb(212,17,46)" fg:x="1007" fg:w="7"/><text x="80.0440%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.55%)</title><rect x="79.7940%" y="517" width="0.5547%" height="15" fill="rgb(216,101,39)" fg:x="1007" fg:w="7"/><text x="80.0440%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="80.2694%" y="501" width="0.0792%" height="15" fill="rgb(212,228,48)" fg:x="1013" fg:w="1"/><text x="80.5194%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.2694%" y="485" width="0.0792%" height="15" fill="rgb(250,6,50)" fg:x="1013" fg:w="1"/><text x="80.5194%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.2694%" y="469" width="0.0792%" height="15" fill="rgb(250,160,48)" fg:x="1013" fg:w="1"/><text x="80.5194%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.2694%" y="453" width="0.0792%" height="15" fill="rgb(244,216,33)" fg:x="1013" fg:w="1"/><text x="80.5194%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.2694%" y="437" width="0.0792%" height="15" fill="rgb(207,157,5)" fg:x="1013" fg:w="1"/><text x="80.5194%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.2694%" y="421" width="0.0792%" height="15" fill="rgb(228,199,8)" fg:x="1013" fg:w="1"/><text x="80.5194%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="80.2694%" y="405" width="0.0792%" height="15" fill="rgb(227,80,20)" fg:x="1013" fg:w="1"/><text x="80.5194%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.2694%" y="389" width="0.0792%" height="15" fill="rgb(222,9,33)" fg:x="1013" fg:w="1"/><text x="80.5194%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="80.2694%" y="373" width="0.0792%" height="15" fill="rgb(239,44,28)" fg:x="1013" fg:w="1"/><text x="80.5194%" y="383.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (10 samples, 0.79%)</title><rect x="79.6355%" y="597" width="0.7924%" height="15" fill="rgb(249,187,43)" fg:x="1005" fg:w="10"/><text x="79.8855%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (10 samples, 0.79%)</title><rect x="79.6355%" y="581" width="0.7924%" height="15" fill="rgb(216,141,28)" fg:x="1005" fg:w="10"/><text x="79.8855%" y="591.50"></text></g><g><title>plugins_core::finding::DefaultFinder::find_top_container (1 samples, 0.08%)</title><rect x="80.3487%" y="565" width="0.0792%" height="15" fill="rgb(230,154,53)" fg:x="1014" fg:w="1"/><text x="80.5987%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="80.5071%" y="357" width="0.1585%" height="15" fill="rgb(227,82,4)" fg:x="1016" fg:w="2"/><text x="80.7571%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="80.6656%" y="357" width="0.0792%" height="15" fill="rgb(220,107,16)" fg:x="1018" fg:w="1"/><text x="80.9156%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.6656%" y="341" width="0.0792%" height="15" fill="rgb(207,187,2)" fg:x="1018" fg:w="1"/><text x="80.9156%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.6656%" y="325" width="0.0792%" height="15" fill="rgb(210,162,52)" fg:x="1018" fg:w="1"/><text x="80.9156%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.6656%" y="309" width="0.0792%" height="15" fill="rgb(217,216,49)" fg:x="1018" fg:w="1"/><text x="80.9156%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="80.6656%" y="293" width="0.0792%" height="15" fill="rgb(218,146,49)" fg:x="1018" fg:w="1"/><text x="80.9156%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="80.7448%" y="341" width="0.0792%" height="15" fill="rgb(216,55,40)" fg:x="1019" fg:w="1"/><text x="80.9948%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.7448%" y="325" width="0.0792%" height="15" fill="rgb(208,196,21)" fg:x="1019" fg:w="1"/><text x="80.9948%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.8241%" y="309" width="0.0792%" height="15" fill="rgb(242,117,42)" fg:x="1020" fg:w="1"/><text x="81.0741%" y="319.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="80.8241%" y="341" width="0.1585%" height="15" fill="rgb(210,11,23)" fg:x="1020" fg:w="2"/><text x="81.0741%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="80.8241%" y="325" width="0.1585%" height="15" fill="rgb(217,110,2)" fg:x="1020" fg:w="2"/><text x="81.0741%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.9033%" y="309" width="0.0792%" height="15" fill="rgb(229,77,54)" fg:x="1021" fg:w="1"/><text x="81.1533%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::end (1 samples, 0.08%)</title><rect x="80.9826%" y="325" width="0.0792%" height="15" fill="rgb(218,53,16)" fg:x="1022" fg:w="1"/><text x="81.2326%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (8 samples, 0.63%)</title><rect x="80.5071%" y="389" width="0.6339%" height="15" fill="rgb(215,38,13)" fg:x="1016" fg:w="8"/><text x="80.7571%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.63%)</title><rect x="80.5071%" y="373" width="0.6339%" height="15" fill="rgb(235,42,18)" fg:x="1016" fg:w="8"/><text x="80.7571%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.40%)</title><rect x="80.7448%" y="357" width="0.3962%" height="15" fill="rgb(219,66,54)" fg:x="1019" fg:w="5"/><text x="80.9948%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (2 samples, 0.16%)</title><rect x="80.9826%" y="341" width="0.1585%" height="15" fill="rgb(222,205,4)" fg:x="1022" fg:w="2"/><text x="81.2326%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.0618%" y="325" width="0.0792%" height="15" fill="rgb(227,213,46)" fg:x="1023" fg:w="1"/><text x="81.3118%" y="335.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (9 samples, 0.71%)</title><rect x="80.5071%" y="405" width="0.7132%" height="15" fill="rgb(250,145,42)" fg:x="1016" fg:w="9"/><text x="80.7571%" y="415.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="81.1410%" y="389" width="0.0792%" height="15" fill="rgb(219,15,2)" fg:x="1024" fg:w="1"/><text x="81.3910%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.1410%" y="373" width="0.0792%" height="15" fill="rgb(231,181,52)" fg:x="1024" fg:w="1"/><text x="81.3910%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.1410%" y="357" width="0.0792%" height="15" fill="rgb(235,1,42)" fg:x="1024" fg:w="1"/><text x="81.3910%" y="367.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (10 samples, 0.79%)</title><rect x="80.5071%" y="421" width="0.7924%" height="15" fill="rgb(249,88,27)" fg:x="1016" fg:w="10"/><text x="80.7571%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="81.2203%" y="405" width="0.0792%" height="15" fill="rgb(235,145,16)" fg:x="1025" fg:w="1"/><text x="81.4703%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="81.2995%" y="389" width="0.0792%" height="15" fill="rgb(237,114,19)" fg:x="1026" fg:w="1"/><text x="81.5495%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.2995%" y="373" width="0.0792%" height="15" fill="rgb(238,51,50)" fg:x="1026" fg:w="1"/><text x="81.5495%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.2995%" y="357" width="0.0792%" height="15" fill="rgb(205,194,25)" fg:x="1026" fg:w="1"/><text x="81.5495%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.2995%" y="341" width="0.0792%" height="15" fill="rgb(215,203,17)" fg:x="1026" fg:w="1"/><text x="81.5495%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="81.3788%" y="325" width="0.1585%" height="15" fill="rgb(233,112,49)" fg:x="1027" fg:w="2"/><text x="81.6288%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="81.3788%" y="309" width="0.1585%" height="15" fill="rgb(241,130,26)" fg:x="1027" fg:w="2"/><text x="81.6288%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="81.3788%" y="293" width="0.1585%" height="15" fill="rgb(252,223,19)" fg:x="1027" fg:w="2"/><text x="81.6288%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="81.3788%" y="277" width="0.1585%" height="15" fill="rgb(211,95,25)" fg:x="1027" fg:w="2"/><text x="81.6288%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="81.3788%" y="261" width="0.1585%" height="15" fill="rgb(251,182,27)" fg:x="1027" fg:w="2"/><text x="81.6288%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="81.3788%" y="245" width="0.1585%" height="15" fill="rgb(238,24,4)" fg:x="1027" fg:w="2"/><text x="81.6288%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="81.3788%" y="229" width="0.1585%" height="15" fill="rgb(224,220,25)" fg:x="1027" fg:w="2"/><text x="81.6288%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="81.3788%" y="213" width="0.1585%" height="15" fill="rgb(239,133,26)" fg:x="1027" fg:w="2"/><text x="81.6288%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="81.3788%" y="197" width="0.1585%" height="15" fill="rgb(211,94,48)" fg:x="1027" fg:w="2"/><text x="81.6288%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="81.3788%" y="181" width="0.1585%" height="15" fill="rgb(239,87,6)" fg:x="1027" fg:w="2"/><text x="81.6288%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="81.3788%" y="165" width="0.1585%" height="15" fill="rgb(227,62,0)" fg:x="1027" fg:w="2"/><text x="81.6288%" y="175.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="81.3788%" y="149" width="0.1585%" height="15" fill="rgb(211,226,4)" fg:x="1027" fg:w="2"/><text x="81.6288%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="81.3788%" y="133" width="0.1585%" height="15" fill="rgb(253,38,52)" fg:x="1027" fg:w="2"/><text x="81.6288%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="81.3788%" y="357" width="0.2377%" height="15" fill="rgb(229,126,40)" fg:x="1027" fg:w="3"/><text x="81.6288%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="81.3788%" y="341" width="0.2377%" height="15" fill="rgb(229,165,44)" fg:x="1027" fg:w="3"/><text x="81.6288%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.5372%" y="325" width="0.0792%" height="15" fill="rgb(247,95,47)" fg:x="1029" fg:w="1"/><text x="81.7872%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.6165%" y="357" width="0.0792%" height="15" fill="rgb(216,140,30)" fg:x="1030" fg:w="1"/><text x="81.8665%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="81.6957%" y="293" width="0.0792%" height="15" fill="rgb(246,214,8)" fg:x="1031" fg:w="1"/><text x="81.9457%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.48%)</title><rect x="81.3788%" y="373" width="0.4754%" height="15" fill="rgb(227,224,15)" fg:x="1027" fg:w="6"/><text x="81.6288%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="81.6957%" y="357" width="0.1585%" height="15" fill="rgb(233,175,4)" fg:x="1031" fg:w="2"/><text x="81.9457%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="81.6957%" y="341" width="0.1585%" height="15" fill="rgb(221,66,45)" fg:x="1031" fg:w="2"/><text x="81.9457%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="81.6957%" y="325" width="0.1585%" height="15" fill="rgb(221,178,18)" fg:x="1031" fg:w="2"/><text x="81.9457%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="81.6957%" y="309" width="0.1585%" height="15" fill="rgb(213,81,29)" fg:x="1031" fg:w="2"/><text x="81.9457%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.7750%" y="293" width="0.0792%" height="15" fill="rgb(220,89,49)" fg:x="1032" fg:w="1"/><text x="82.0250%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.7750%" y="277" width="0.0792%" height="15" fill="rgb(227,60,33)" fg:x="1032" fg:w="1"/><text x="82.0250%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.7750%" y="261" width="0.0792%" height="15" fill="rgb(205,113,12)" fg:x="1032" fg:w="1"/><text x="82.0250%" y="271.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (7 samples, 0.55%)</title><rect x="81.3788%" y="389" width="0.5547%" height="15" fill="rgb(211,32,1)" fg:x="1027" fg:w="7"/><text x="81.6288%" y="399.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="81.8542%" y="373" width="0.0792%" height="15" fill="rgb(246,2,12)" fg:x="1033" fg:w="1"/><text x="82.1042%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.9334%" y="373" width="0.0792%" height="15" fill="rgb(243,37,27)" fg:x="1034" fg:w="1"/><text x="82.1834%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="82.0127%" y="373" width="0.0792%" height="15" fill="rgb(248,211,31)" fg:x="1035" fg:w="1"/><text x="82.2627%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="82.0127%" y="357" width="0.0792%" height="15" fill="rgb(242,146,47)" fg:x="1035" fg:w="1"/><text x="82.2627%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="81.9334%" y="389" width="0.2377%" height="15" fill="rgb(206,70,20)" fg:x="1034" fg:w="3"/><text x="82.1834%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.0919%" y="373" width="0.0792%" height="15" fill="rgb(215,10,51)" fg:x="1036" fg:w="1"/><text x="82.3419%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.0919%" y="357" width="0.0792%" height="15" fill="rgb(243,178,53)" fg:x="1036" fg:w="1"/><text x="82.3419%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="82.0919%" y="341" width="0.0792%" height="15" fill="rgb(233,221,20)" fg:x="1036" fg:w="1"/><text x="82.3419%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.2504%" y="325" width="0.0792%" height="15" fill="rgb(218,95,35)" fg:x="1038" fg:w="1"/><text x="82.5004%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.2504%" y="309" width="0.0792%" height="15" fill="rgb(229,13,5)" fg:x="1038" fg:w="1"/><text x="82.5004%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.2504%" y="293" width="0.0792%" height="15" fill="rgb(252,164,30)" fg:x="1038" fg:w="1"/><text x="82.5004%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="82.2504%" y="277" width="0.0792%" height="15" fill="rgb(232,68,36)" fg:x="1038" fg:w="1"/><text x="82.5004%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="82.2504%" y="261" width="0.0792%" height="15" fill="rgb(219,59,54)" fg:x="1038" fg:w="1"/><text x="82.5004%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="82.2504%" y="245" width="0.0792%" height="15" fill="rgb(250,92,33)" fg:x="1038" fg:w="1"/><text x="82.5004%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="82.2504%" y="229" width="0.0792%" height="15" fill="rgb(229,162,54)" fg:x="1038" fg:w="1"/><text x="82.5004%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="82.2504%" y="213" width="0.0792%" height="15" fill="rgb(244,114,52)" fg:x="1038" fg:w="1"/><text x="82.5004%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="82.2504%" y="357" width="0.1585%" height="15" fill="rgb(212,211,43)" fg:x="1038" fg:w="2"/><text x="82.5004%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="82.2504%" y="341" width="0.1585%" height="15" fill="rgb(226,147,8)" fg:x="1038" fg:w="2"/><text x="82.5004%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.3296%" y="325" width="0.0792%" height="15" fill="rgb(226,23,13)" fg:x="1039" fg:w="1"/><text x="82.5796%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.3296%" y="309" width="0.0792%" height="15" fill="rgb(240,63,4)" fg:x="1039" fg:w="1"/><text x="82.5796%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="82.3296%" y="293" width="0.0792%" height="15" fill="rgb(221,1,32)" fg:x="1039" fg:w="1"/><text x="82.5796%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="82.3296%" y="277" width="0.0792%" height="15" fill="rgb(242,117,10)" fg:x="1039" fg:w="1"/><text x="82.5796%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="82.3296%" y="261" width="0.0792%" height="15" fill="rgb(249,172,44)" fg:x="1039" fg:w="1"/><text x="82.5796%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="82.3296%" y="245" width="0.0792%" height="15" fill="rgb(244,46,45)" fg:x="1039" fg:w="1"/><text x="82.5796%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="82.3296%" y="229" width="0.0792%" height="15" fill="rgb(206,43,17)" fg:x="1039" fg:w="1"/><text x="82.5796%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.4089%" y="357" width="0.0792%" height="15" fill="rgb(239,218,39)" fg:x="1040" fg:w="1"/><text x="82.6589%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (5 samples, 0.40%)</title><rect x="82.1712%" y="389" width="0.3962%" height="15" fill="rgb(208,169,54)" fg:x="1037" fg:w="5"/><text x="82.4212%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.40%)</title><rect x="82.1712%" y="373" width="0.3962%" height="15" fill="rgb(247,25,42)" fg:x="1037" fg:w="5"/><text x="82.4212%" y="383.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="82.4881%" y="357" width="0.0792%" height="15" fill="rgb(226,23,31)" fg:x="1041" fg:w="1"/><text x="82.7381%" y="367.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="82.5674%" y="389" width="0.0792%" height="15" fill="rgb(247,16,28)" fg:x="1042" fg:w="1"/><text x="82.8174%" y="399.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="82.6466%" y="341" width="0.0792%" height="15" fill="rgb(231,147,38)" fg:x="1043" fg:w="1"/><text x="82.8966%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="82.6466%" y="325" width="0.0792%" height="15" fill="rgb(253,81,48)" fg:x="1043" fg:w="1"/><text x="82.8966%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="82.7258%" y="309" width="0.0792%" height="15" fill="rgb(249,222,43)" fg:x="1044" fg:w="1"/><text x="82.9758%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="82.7258%" y="293" width="0.0792%" height="15" fill="rgb(221,3,27)" fg:x="1044" fg:w="1"/><text x="82.9758%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="82.7258%" y="277" width="0.0792%" height="15" fill="rgb(228,180,5)" fg:x="1044" fg:w="1"/><text x="82.9758%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="82.7258%" y="261" width="0.0792%" height="15" fill="rgb(227,131,42)" fg:x="1044" fg:w="1"/><text x="82.9758%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.7258%" y="245" width="0.0792%" height="15" fill="rgb(212,3,39)" fg:x="1044" fg:w="1"/><text x="82.9758%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="82.8843%" y="261" width="0.0792%" height="15" fill="rgb(226,45,5)" fg:x="1046" fg:w="1"/><text x="83.1343%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.8843%" y="245" width="0.0792%" height="15" fill="rgb(215,167,45)" fg:x="1046" fg:w="1"/><text x="83.1343%" y="255.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="82.9635%" y="261" width="0.0792%" height="15" fill="rgb(250,218,53)" fg:x="1047" fg:w="1"/><text x="83.2135%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (13 samples, 1.03%)</title><rect x="83.1220%" y="245" width="1.0301%" height="15" fill="rgb(207,140,0)" fg:x="1049" fg:w="13"/><text x="83.3720%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.03%)</title><rect x="83.1220%" y="229" width="1.0301%" height="15" fill="rgb(238,133,51)" fg:x="1049" fg:w="13"/><text x="83.3720%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.0729%" y="213" width="0.0792%" height="15" fill="rgb(218,203,53)" fg:x="1061" fg:w="1"/><text x="84.3229%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="84.1521%" y="229" width="0.1585%" height="15" fill="rgb(226,184,25)" fg:x="1062" fg:w="2"/><text x="84.4021%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="84.1521%" y="245" width="0.2377%" height="15" fill="rgb(231,121,21)" fg:x="1062" fg:w="3"/><text x="84.4021%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="84.3106%" y="229" width="0.0792%" height="15" fill="rgb(251,14,34)" fg:x="1064" fg:w="1"/><text x="84.5606%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.3899%" y="149" width="0.0792%" height="15" fill="rgb(249,193,11)" fg:x="1065" fg:w="1"/><text x="84.6399%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (32 samples, 2.54%)</title><rect x="84.3899%" y="181" width="2.5357%" height="15" fill="rgb(220,172,37)" fg:x="1065" fg:w="32"/><text x="84.6399%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (32 samples, 2.54%)</title><rect x="84.3899%" y="165" width="2.5357%" height="15" fill="rgb(231,229,43)" fg:x="1065" fg:w="32"/><text x="84.6399%" y="175.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (31 samples, 2.46%)</title><rect x="84.4691%" y="149" width="2.4564%" height="15" fill="rgb(250,161,5)" fg:x="1066" fg:w="31"/><text x="84.7191%" y="159.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 2.61%)</title><rect x="84.3899%" y="229" width="2.6149%" height="15" fill="rgb(218,225,18)" fg:x="1065" fg:w="33"/><text x="84.6399%" y="239.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (33 samples, 2.61%)</title><rect x="84.3899%" y="213" width="2.6149%" height="15" fill="rgb(245,45,42)" fg:x="1065" fg:w="33"/><text x="84.6399%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (33 samples, 2.61%)</title><rect x="84.3899%" y="197" width="2.6149%" height="15" fill="rgb(211,115,1)" fg:x="1065" fg:w="33"/><text x="84.6399%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="86.9255%" y="181" width="0.0792%" height="15" fill="rgb(248,133,52)" fg:x="1097" fg:w="1"/><text x="87.1755%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="87.0840%" y="213" width="0.1585%" height="15" fill="rgb(238,100,21)" fg:x="1099" fg:w="2"/><text x="87.3340%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="87.2425%" y="213" width="0.1585%" height="15" fill="rgb(247,144,11)" fg:x="1101" fg:w="2"/><text x="87.4925%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.3217%" y="197" width="0.0792%" height="15" fill="rgb(206,164,16)" fg:x="1102" fg:w="1"/><text x="87.5717%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.3217%" y="181" width="0.0792%" height="15" fill="rgb(222,34,3)" fg:x="1102" fg:w="1"/><text x="87.5717%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.3217%" y="165" width="0.0792%" height="15" fill="rgb(248,82,4)" fg:x="1102" fg:w="1"/><text x="87.5717%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.4010%" y="197" width="0.0792%" height="15" fill="rgb(228,81,46)" fg:x="1103" fg:w="1"/><text x="87.6510%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.55%)</title><rect x="87.0048%" y="229" width="0.5547%" height="15" fill="rgb(227,67,47)" fg:x="1098" fg:w="7"/><text x="87.2548%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="87.4010%" y="213" width="0.1585%" height="15" fill="rgb(215,93,53)" fg:x="1103" fg:w="2"/><text x="87.6510%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="87.4802%" y="197" width="0.0792%" height="15" fill="rgb(248,194,39)" fg:x="1104" fg:w="1"/><text x="87.7302%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (41 samples, 3.25%)</title><rect x="84.3899%" y="245" width="3.2488%" height="15" fill="rgb(215,5,19)" fg:x="1065" fg:w="41"/><text x="84.6399%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="87.5594%" y="229" width="0.0792%" height="15" fill="rgb(226,215,51)" fg:x="1105" fg:w="1"/><text x="87.8094%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="87.5594%" y="213" width="0.0792%" height="15" fill="rgb(225,56,26)" fg:x="1105" fg:w="1"/><text x="87.8094%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="87.6387%" y="213" width="0.0792%" height="15" fill="rgb(222,75,29)" fg:x="1106" fg:w="1"/><text x="87.8887%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (60 samples, 4.75%)</title><rect x="83.0428%" y="261" width="4.7544%" height="15" fill="rgb(236,139,6)" fg:x="1048" fg:w="60"/><text x="83.2928%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="87.6387%" y="245" width="0.1585%" height="15" fill="rgb(223,137,36)" fg:x="1106" fg:w="2"/><text x="87.8887%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="87.6387%" y="229" width="0.1585%" height="15" fill="rgb(226,99,2)" fg:x="1106" fg:w="2"/><text x="87.8887%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="87.7179%" y="213" width="0.0792%" height="15" fill="rgb(206,133,23)" fg:x="1107" fg:w="1"/><text x="87.9679%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.7179%" y="197" width="0.0792%" height="15" fill="rgb(243,173,15)" fg:x="1107" fg:w="1"/><text x="87.9679%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.7179%" y="181" width="0.0792%" height="15" fill="rgb(228,69,28)" fg:x="1107" fg:w="1"/><text x="87.9679%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.7179%" y="165" width="0.0792%" height="15" fill="rgb(212,51,22)" fg:x="1107" fg:w="1"/><text x="87.9679%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="87.7971%" y="261" width="0.0792%" height="15" fill="rgb(227,113,0)" fg:x="1108" fg:w="1"/><text x="88.0471%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="87.7971%" y="245" width="0.0792%" height="15" fill="rgb(252,84,27)" fg:x="1108" fg:w="1"/><text x="88.0471%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="87.7971%" y="229" width="0.0792%" height="15" fill="rgb(223,145,39)" fg:x="1108" fg:w="1"/><text x="88.0471%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="87.7971%" y="213" width="0.0792%" height="15" fill="rgb(239,219,30)" fg:x="1108" fg:w="1"/><text x="88.0471%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.7971%" y="197" width="0.0792%" height="15" fill="rgb(224,196,39)" fg:x="1108" fg:w="1"/><text x="88.0471%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.7971%" y="181" width="0.0792%" height="15" fill="rgb(205,35,43)" fg:x="1108" fg:w="1"/><text x="88.0471%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.7971%" y="165" width="0.0792%" height="15" fill="rgb(228,201,21)" fg:x="1108" fg:w="1"/><text x="88.0471%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (65 samples, 5.15%)</title><rect x="82.8051%" y="309" width="5.1506%" height="15" fill="rgb(237,118,16)" fg:x="1045" fg:w="65"/><text x="83.0551%" y="319.50">regex:..</text></g><g><title>regex::builders::string::RegexBuilder::build (65 samples, 5.15%)</title><rect x="82.8051%" y="293" width="5.1506%" height="15" fill="rgb(241,17,19)" fg:x="1045" fg:w="65"/><text x="83.0551%" y="303.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (64 samples, 5.07%)</title><rect x="82.8843%" y="277" width="5.0713%" height="15" fill="rgb(214,10,25)" fg:x="1046" fg:w="64"/><text x="83.1343%" y="287.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="87.8764%" y="261" width="0.0792%" height="15" fill="rgb(238,37,29)" fg:x="1109" fg:w="1"/><text x="88.1264%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="87.8764%" y="245" width="0.0792%" height="15" fill="rgb(253,83,25)" fg:x="1109" fg:w="1"/><text x="88.1264%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="87.8764%" y="229" width="0.0792%" height="15" fill="rgb(234,192,12)" fg:x="1109" fg:w="1"/><text x="88.1264%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="87.8764%" y="213" width="0.0792%" height="15" fill="rgb(241,216,45)" fg:x="1109" fg:w="1"/><text x="88.1264%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.1933%" y="229" width="0.0792%" height="15" fill="rgb(242,22,33)" fg:x="1113" fg:w="1"/><text x="88.4433%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (71 samples, 5.63%)</title><rect x="82.7258%" y="325" width="5.6260%" height="15" fill="rgb(231,105,49)" fg:x="1044" fg:w="71"/><text x="82.9758%" y="335.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="87.9556%" y="309" width="0.3962%" height="15" fill="rgb(218,204,15)" fg:x="1110" fg:w="5"/><text x="88.2056%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="87.9556%" y="293" width="0.3962%" height="15" fill="rgb(235,138,41)" fg:x="1110" fg:w="5"/><text x="88.2056%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="87.9556%" y="277" width="0.3962%" height="15" fill="rgb(246,0,9)" fg:x="1110" fg:w="5"/><text x="88.2056%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="87.9556%" y="261" width="0.3962%" height="15" fill="rgb(210,74,4)" fg:x="1110" fg:w="5"/><text x="88.2056%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="87.9556%" y="245" width="0.3962%" height="15" fill="rgb(250,60,41)" fg:x="1110" fg:w="5"/><text x="88.2056%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="88.2726%" y="229" width="0.0792%" height="15" fill="rgb(220,115,12)" fg:x="1114" fg:w="1"/><text x="88.5226%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="88.3518%" y="309" width="0.1585%" height="15" fill="rgb(237,100,13)" fg:x="1115" fg:w="2"/><text x="88.6018%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="88.3518%" y="293" width="0.1585%" height="15" fill="rgb(213,55,26)" fg:x="1115" fg:w="2"/><text x="88.6018%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="88.4311%" y="277" width="0.0792%" height="15" fill="rgb(216,17,4)" fg:x="1116" fg:w="1"/><text x="88.6811%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="88.5895%" y="229" width="0.1585%" height="15" fill="rgb(220,153,47)" fg:x="1118" fg:w="2"/><text x="88.8395%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="88.6688%" y="213" width="0.0792%" height="15" fill="rgb(215,131,9)" fg:x="1119" fg:w="1"/><text x="88.9188%" y="223.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (4 samples, 0.32%)</title><rect x="88.5103%" y="309" width="0.3170%" height="15" fill="rgb(233,46,42)" fg:x="1117" fg:w="4"/><text x="88.7603%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="88.5103%" y="293" width="0.3170%" height="15" fill="rgb(226,86,7)" fg:x="1117" fg:w="4"/><text x="88.7603%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="88.5103%" y="277" width="0.3170%" height="15" fill="rgb(239,226,21)" fg:x="1117" fg:w="4"/><text x="88.7603%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="88.5103%" y="261" width="0.3170%" height="15" fill="rgb(244,137,22)" fg:x="1117" fg:w="4"/><text x="88.7603%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="88.5103%" y="245" width="0.3170%" height="15" fill="rgb(211,139,35)" fg:x="1117" fg:w="4"/><text x="88.7603%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="88.7480%" y="229" width="0.0792%" height="15" fill="rgb(214,62,50)" fg:x="1120" fg:w="1"/><text x="88.9980%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.7480%" y="213" width="0.0792%" height="15" fill="rgb(212,113,44)" fg:x="1120" fg:w="1"/><text x="88.9980%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.7480%" y="197" width="0.0792%" height="15" fill="rgb(226,150,43)" fg:x="1120" fg:w="1"/><text x="88.9980%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.7480%" y="181" width="0.0792%" height="15" fill="rgb(250,71,37)" fg:x="1120" fg:w="1"/><text x="88.9980%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.8273%" y="261" width="0.0792%" height="15" fill="rgb(219,76,19)" fg:x="1121" fg:w="1"/><text x="89.0773%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="88.9065%" y="261" width="0.0792%" height="15" fill="rgb(250,39,11)" fg:x="1122" fg:w="1"/><text x="89.1565%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.9065%" y="245" width="0.0792%" height="15" fill="rgb(230,64,31)" fg:x="1122" fg:w="1"/><text x="89.1565%" y="255.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="88.9857%" y="261" width="0.0792%" height="15" fill="rgb(208,222,23)" fg:x="1123" fg:w="1"/><text x="89.2357%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.71%)</title><rect x="89.0650%" y="245" width="0.7132%" height="15" fill="rgb(227,125,18)" fg:x="1124" fg:w="9"/><text x="89.3150%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.63%)</title><rect x="89.1442%" y="229" width="0.6339%" height="15" fill="rgb(234,210,9)" fg:x="1125" fg:w="8"/><text x="89.3942%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="89.7781%" y="245" width="0.2377%" height="15" fill="rgb(217,127,24)" fg:x="1133" fg:w="3"/><text x="90.0281%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="89.7781%" y="229" width="0.2377%" height="15" fill="rgb(239,141,48)" fg:x="1133" fg:w="3"/><text x="90.0281%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="90.0951%" y="213" width="0.1585%" height="15" fill="rgb(227,109,8)" fg:x="1137" fg:w="2"/><text x="90.3451%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="90.1743%" y="197" width="0.0792%" height="15" fill="rgb(235,184,23)" fg:x="1138" fg:w="1"/><text x="90.4243%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.2536%" y="197" width="0.0792%" height="15" fill="rgb(227,226,48)" fg:x="1139" fg:w="1"/><text x="90.5036%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (5 samples, 0.40%)</title><rect x="90.0158%" y="245" width="0.3962%" height="15" fill="rgb(206,150,11)" fg:x="1136" fg:w="5"/><text x="90.2658%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="90.0158%" y="229" width="0.3962%" height="15" fill="rgb(254,2,33)" fg:x="1136" fg:w="5"/><text x="90.2658%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="90.2536%" y="213" width="0.1585%" height="15" fill="rgb(243,160,20)" fg:x="1139" fg:w="2"/><text x="90.5036%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="90.3328%" y="197" width="0.0792%" height="15" fill="rgb(218,208,30)" fg:x="1140" fg:w="1"/><text x="90.5828%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="90.3328%" y="181" width="0.0792%" height="15" fill="rgb(224,120,49)" fg:x="1140" fg:w="1"/><text x="90.5828%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="90.8875%" y="133" width="0.0792%" height="15" fill="rgb(246,12,2)" fg:x="1147" fg:w="1"/><text x="91.1375%" y="143.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="90.9667%" y="133" width="0.1585%" height="15" fill="rgb(236,117,3)" fg:x="1148" fg:w="2"/><text x="91.2167%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.2044%" y="101" width="0.0792%" height="15" fill="rgb(216,128,52)" fg:x="1151" fg:w="1"/><text x="91.4544%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.2837%" y="69" width="0.0792%" height="15" fill="rgb(246,145,19)" fg:x="1152" fg:w="1"/><text x="91.5337%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="91.2837%" y="101" width="0.1585%" height="15" fill="rgb(222,11,46)" fg:x="1152" fg:w="2"/><text x="91.5337%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="91.2837%" y="85" width="0.1585%" height="15" fill="rgb(245,82,36)" fg:x="1152" fg:w="2"/><text x="91.5337%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.3629%" y="69" width="0.0792%" height="15" fill="rgb(250,73,51)" fg:x="1153" fg:w="1"/><text x="91.6129%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.63%)</title><rect x="91.1252%" y="133" width="0.6339%" height="15" fill="rgb(221,189,23)" fg:x="1150" fg:w="8"/><text x="91.3752%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 0.63%)</title><rect x="91.1252%" y="117" width="0.6339%" height="15" fill="rgb(210,33,7)" fg:x="1150" fg:w="8"/><text x="91.3752%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.32%)</title><rect x="91.4422%" y="101" width="0.3170%" height="15" fill="rgb(210,107,22)" fg:x="1154" fg:w="4"/><text x="91.6922%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (27 samples, 2.14%)</title><rect x="91.7591%" y="133" width="2.1395%" height="15" fill="rgb(222,116,37)" fg:x="1158" fg:w="27"/><text x="92.0091%" y="143.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (27 samples, 2.14%)</title><rect x="91.7591%" y="117" width="2.1395%" height="15" fill="rgb(254,17,48)" fg:x="1158" fg:w="27"/><text x="92.0091%" y="127.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (27 samples, 2.14%)</title><rect x="91.7591%" y="101" width="2.1395%" height="15" fill="rgb(224,36,32)" fg:x="1158" fg:w="27"/><text x="92.0091%" y="111.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="93.8986%" y="133" width="0.0792%" height="15" fill="rgb(232,90,46)" fg:x="1185" fg:w="1"/><text x="94.1486%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 3.65%)</title><rect x="90.4120%" y="229" width="3.6450%" height="15" fill="rgb(241,66,40)" fg:x="1141" fg:w="46"/><text x="90.6620%" y="239.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (46 samples, 3.65%)</title><rect x="90.4120%" y="213" width="3.6450%" height="15" fill="rgb(249,184,29)" fg:x="1141" fg:w="46"/><text x="90.6620%" y="223.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (46 samples, 3.65%)</title><rect x="90.4120%" y="197" width="3.6450%" height="15" fill="rgb(231,181,1)" fg:x="1141" fg:w="46"/><text x="90.6620%" y="207.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (46 samples, 3.65%)</title><rect x="90.4120%" y="181" width="3.6450%" height="15" fill="rgb(224,94,2)" fg:x="1141" fg:w="46"/><text x="90.6620%" y="191.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (46 samples, 3.65%)</title><rect x="90.4120%" y="165" width="3.6450%" height="15" fill="rgb(229,170,15)" fg:x="1141" fg:w="46"/><text x="90.6620%" y="175.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (46 samples, 3.65%)</title><rect x="90.4120%" y="149" width="3.6450%" height="15" fill="rgb(240,127,35)" fg:x="1141" fg:w="46"/><text x="90.6620%" y="159.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="93.9778%" y="133" width="0.0792%" height="15" fill="rgb(248,196,34)" fg:x="1186" fg:w="1"/><text x="94.2278%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.9778%" y="117" width="0.0792%" height="15" fill="rgb(236,137,7)" fg:x="1186" fg:w="1"/><text x="94.2278%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.9778%" y="101" width="0.0792%" height="15" fill="rgb(235,127,16)" fg:x="1186" fg:w="1"/><text x="94.2278%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.9778%" y="85" width="0.0792%" height="15" fill="rgb(250,192,54)" fg:x="1186" fg:w="1"/><text x="94.2278%" y="95.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="94.1363%" y="213" width="0.0792%" height="15" fill="rgb(218,98,20)" fg:x="1188" fg:w="1"/><text x="94.3863%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.2155%" y="213" width="0.0792%" height="15" fill="rgb(230,176,47)" fg:x="1189" fg:w="1"/><text x="94.4655%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="94.2948%" y="213" width="0.0792%" height="15" fill="rgb(244,2,33)" fg:x="1190" fg:w="1"/><text x="94.5448%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (68 samples, 5.39%)</title><rect x="89.0650%" y="261" width="5.3883%" height="15" fill="rgb(231,100,17)" fg:x="1124" fg:w="68"/><text x="89.3150%" y="271.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (51 samples, 4.04%)</title><rect x="90.4120%" y="245" width="4.0412%" height="15" fill="rgb(245,23,12)" fg:x="1141" fg:w="51"/><text x="90.6620%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="94.0571%" y="229" width="0.3962%" height="15" fill="rgb(249,55,22)" fg:x="1187" fg:w="5"/><text x="94.3071%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="94.3740%" y="213" width="0.0792%" height="15" fill="rgb(207,134,9)" fg:x="1191" fg:w="1"/><text x="94.6240%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="94.4532%" y="261" width="0.1585%" height="15" fill="rgb(218,134,0)" fg:x="1192" fg:w="2"/><text x="94.7032%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="94.4532%" y="245" width="0.1585%" height="15" fill="rgb(213,212,33)" fg:x="1192" fg:w="2"/><text x="94.7032%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="94.4532%" y="229" width="0.1585%" height="15" fill="rgb(252,106,18)" fg:x="1192" fg:w="2"/><text x="94.7032%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="94.4532%" y="213" width="0.1585%" height="15" fill="rgb(208,126,42)" fg:x="1192" fg:w="2"/><text x="94.7032%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.4532%" y="197" width="0.1585%" height="15" fill="rgb(246,175,29)" fg:x="1192" fg:w="2"/><text x="94.7032%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.4532%" y="181" width="0.1585%" height="15" fill="rgb(215,13,50)" fg:x="1192" fg:w="2"/><text x="94.7032%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="94.4532%" y="165" width="0.1585%" height="15" fill="rgb(216,172,15)" fg:x="1192" fg:w="2"/><text x="94.7032%" y="175.50"></text></g><g><title>indefinite::rules::number::Number::check (81 samples, 6.42%)</title><rect x="88.3518%" y="325" width="6.4184%" height="15" fill="rgb(212,103,13)" fg:x="1115" fg:w="81"/><text x="88.6018%" y="335.50">indefini..</text></g><g><title>regex::regex::string::Regex::new (75 samples, 5.94%)</title><rect x="88.8273%" y="309" width="5.9429%" height="15" fill="rgb(231,171,36)" fg:x="1121" fg:w="75"/><text x="89.0773%" y="319.50">regex::r..</text></g><g><title>regex::builders::string::RegexBuilder::build (75 samples, 5.94%)</title><rect x="88.8273%" y="293" width="5.9429%" height="15" fill="rgb(250,123,20)" fg:x="1121" fg:w="75"/><text x="89.0773%" y="303.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (75 samples, 5.94%)</title><rect x="88.8273%" y="277" width="5.9429%" height="15" fill="rgb(212,53,50)" fg:x="1121" fg:w="75"/><text x="89.0773%" y="287.50">regex_au..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="94.6117%" y="261" width="0.1585%" height="15" fill="rgb(243,54,12)" fg:x="1194" fg:w="2"/><text x="94.8617%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="94.6117%" y="245" width="0.1585%" height="15" fill="rgb(234,101,34)" fg:x="1194" fg:w="2"/><text x="94.8617%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="94.6910%" y="229" width="0.0792%" height="15" fill="rgb(254,67,22)" fg:x="1195" fg:w="1"/><text x="94.9410%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="94.6910%" y="213" width="0.0792%" height="15" fill="rgb(250,35,47)" fg:x="1195" fg:w="1"/><text x="94.9410%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="94.6910%" y="197" width="0.0792%" height="15" fill="rgb(226,126,38)" fg:x="1195" fg:w="1"/><text x="94.9410%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="94.9287%" y="245" width="0.2377%" height="15" fill="rgb(216,138,53)" fg:x="1198" fg:w="3"/><text x="95.1787%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="94.9287%" y="229" width="0.2377%" height="15" fill="rgb(246,199,43)" fg:x="1198" fg:w="3"/><text x="95.1787%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="95.0079%" y="213" width="0.1585%" height="15" fill="rgb(232,125,11)" fg:x="1199" fg:w="2"/><text x="95.2579%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="95.0079%" y="197" width="0.1585%" height="15" fill="rgb(218,219,45)" fg:x="1199" fg:w="2"/><text x="95.2579%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="95.0872%" y="181" width="0.0792%" height="15" fill="rgb(216,102,54)" fg:x="1200" fg:w="1"/><text x="95.3372%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.0872%" y="165" width="0.0792%" height="15" fill="rgb(250,228,7)" fg:x="1200" fg:w="1"/><text x="95.3372%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.0872%" y="149" width="0.0792%" height="15" fill="rgb(226,125,25)" fg:x="1200" fg:w="1"/><text x="95.3372%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.0872%" y="133" width="0.0792%" height="15" fill="rgb(224,165,27)" fg:x="1200" fg:w="1"/><text x="95.3372%" y="143.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="95.1664%" y="213" width="0.1585%" height="15" fill="rgb(233,86,3)" fg:x="1201" fg:w="2"/><text x="95.4164%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="95.1664%" y="229" width="0.2377%" height="15" fill="rgb(228,116,20)" fg:x="1201" fg:w="3"/><text x="95.4164%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="95.3249%" y="213" width="0.0792%" height="15" fill="rgb(209,192,17)" fg:x="1203" fg:w="1"/><text x="95.5749%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="95.3249%" y="197" width="0.0792%" height="15" fill="rgb(224,88,34)" fg:x="1203" fg:w="1"/><text x="95.5749%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="95.3249%" y="181" width="0.0792%" height="15" fill="rgb(233,38,6)" fg:x="1203" fg:w="1"/><text x="95.5749%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.3249%" y="165" width="0.0792%" height="15" fill="rgb(212,59,30)" fg:x="1203" fg:w="1"/><text x="95.5749%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.3249%" y="149" width="0.0792%" height="15" fill="rgb(213,80,3)" fg:x="1203" fg:w="1"/><text x="95.5749%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.3249%" y="133" width="0.0792%" height="15" fill="rgb(251,178,7)" fg:x="1203" fg:w="1"/><text x="95.5749%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="95.4041%" y="213" width="0.0792%" height="15" fill="rgb(213,154,26)" fg:x="1204" fg:w="1"/><text x="95.6541%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.4041%" y="197" width="0.0792%" height="15" fill="rgb(238,165,49)" fg:x="1204" fg:w="1"/><text x="95.6541%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.4041%" y="181" width="0.0792%" height="15" fill="rgb(248,91,46)" fg:x="1204" fg:w="1"/><text x="95.6541%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.4041%" y="165" width="0.0792%" height="15" fill="rgb(244,21,52)" fg:x="1204" fg:w="1"/><text x="95.6541%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.4834%" y="197" width="0.0792%" height="15" fill="rgb(247,122,20)" fg:x="1205" fg:w="1"/><text x="95.7334%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (6 samples, 0.48%)</title><rect x="95.1664%" y="245" width="0.4754%" height="15" fill="rgb(218,27,9)" fg:x="1201" fg:w="6"/><text x="95.4164%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="95.4041%" y="229" width="0.2377%" height="15" fill="rgb(246,7,6)" fg:x="1204" fg:w="3"/><text x="95.6541%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="95.4834%" y="213" width="0.1585%" height="15" fill="rgb(227,135,54)" fg:x="1205" fg:w="2"/><text x="95.7334%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="95.5626%" y="197" width="0.0792%" height="15" fill="rgb(247,14,11)" fg:x="1206" fg:w="1"/><text x="95.8126%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.5626%" y="181" width="0.0792%" height="15" fill="rgb(206,149,34)" fg:x="1206" fg:w="1"/><text x="95.8126%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.5626%" y="165" width="0.0792%" height="15" fill="rgb(227,228,4)" fg:x="1206" fg:w="1"/><text x="95.8126%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.5626%" y="149" width="0.0792%" height="15" fill="rgb(238,218,28)" fg:x="1206" fg:w="1"/><text x="95.8126%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="95.6418%" y="245" width="0.0792%" height="15" fill="rgb(252,86,40)" fg:x="1207" fg:w="1"/><text x="95.8918%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="95.6418%" y="229" width="0.0792%" height="15" fill="rgb(251,225,11)" fg:x="1207" fg:w="1"/><text x="95.8918%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.6418%" y="213" width="0.0792%" height="15" fill="rgb(206,46,49)" fg:x="1207" fg:w="1"/><text x="95.8918%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="95.7211%" y="213" width="0.0792%" height="15" fill="rgb(245,128,24)" fg:x="1208" fg:w="1"/><text x="95.9711%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.8003%" y="213" width="0.0792%" height="15" fill="rgb(219,177,34)" fg:x="1209" fg:w="1"/><text x="96.0503%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (13 samples, 1.03%)</title><rect x="94.9287%" y="261" width="1.0301%" height="15" fill="rgb(218,60,48)" fg:x="1198" fg:w="13"/><text x="95.1787%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="95.7211%" y="245" width="0.2377%" height="15" fill="rgb(221,11,5)" fg:x="1208" fg:w="3"/><text x="95.9711%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="95.7211%" y="229" width="0.2377%" height="15" fill="rgb(220,148,13)" fg:x="1208" fg:w="3"/><text x="95.9711%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.8796%" y="213" width="0.0792%" height="15" fill="rgb(210,16,3)" fg:x="1210" fg:w="1"/><text x="96.1296%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.8796%" y="197" width="0.0792%" height="15" fill="rgb(236,80,2)" fg:x="1210" fg:w="1"/><text x="96.1296%" y="207.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (15 samples, 1.19%)</title><rect x="94.8494%" y="277" width="1.1886%" height="15" fill="rgb(239,129,19)" fg:x="1197" fg:w="15"/><text x="95.0994%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="95.9588%" y="261" width="0.0792%" height="15" fill="rgb(220,106,35)" fg:x="1211" fg:w="1"/><text x="96.2088%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::parse::ParserBuilder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="95.9588%" y="245" width="0.0792%" height="15" fill="rgb(252,139,45)" fg:x="1211" fg:w="1"/><text x="96.2088%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (17 samples, 1.35%)</title><rect x="94.7702%" y="293" width="1.3471%" height="15" fill="rgb(229,8,36)" fg:x="1196" fg:w="17"/><text x="95.0202%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="96.0380%" y="277" width="0.0792%" height="15" fill="rgb(230,126,33)" fg:x="1212" fg:w="1"/><text x="96.2880%" y="287.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="96.0380%" y="261" width="0.0792%" height="15" fill="rgb(239,140,21)" fg:x="1212" fg:w="1"/><text x="96.2880%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Config::nfa_size_limit (1 samples, 0.08%)</title><rect x="96.0380%" y="245" width="0.0792%" height="15" fill="rgb(254,104,9)" fg:x="1212" fg:w="1"/><text x="96.2880%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (189 samples, 14.98%)</title><rect x="81.2995%" y="405" width="14.9762%" height="15" fill="rgb(239,52,14)" fg:x="1026" fg:w="189"/><text x="81.5495%" y="415.50">&lt;&amp;kernel::model::Entity..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (172 samples, 13.63%)</title><rect x="82.6466%" y="389" width="13.6292%" height="15" fill="rgb(208,227,44)" fg:x="1043" fg:w="172"/><text x="82.8966%" y="399.50">plugins_core::looking..</text></g><g><title>indefinite::indefinite (172 samples, 13.63%)</title><rect x="82.6466%" y="373" width="13.6292%" height="15" fill="rgb(246,18,19)" fg:x="1043" fg:w="172"/><text x="82.8966%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (172 samples, 13.63%)</title><rect x="82.6466%" y="357" width="13.6292%" height="15" fill="rgb(235,228,25)" fg:x="1043" fg:w="172"/><text x="82.8966%" y="367.50">indefinite::methods::..</text></g><g><title>indefinite::methods::apply_rules (171 samples, 13.55%)</title><rect x="82.7258%" y="341" width="13.5499%" height="15" fill="rgb(240,156,20)" fg:x="1044" fg:w="171"/><text x="82.9758%" y="351.50">indefinite::methods:..</text></g><g><title>indefinite::rules::other::Other::run (19 samples, 1.51%)</title><rect x="94.7702%" y="325" width="1.5055%" height="15" fill="rgb(224,8,20)" fg:x="1196" fg:w="19"/><text x="95.0202%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (19 samples, 1.51%)</title><rect x="94.7702%" y="309" width="1.5055%" height="15" fill="rgb(214,12,52)" fg:x="1196" fg:w="19"/><text x="95.0202%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="96.1173%" y="293" width="0.1585%" height="15" fill="rgb(211,220,47)" fg:x="1213" fg:w="2"/><text x="96.3673%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="96.1173%" y="277" width="0.1585%" height="15" fill="rgb(250,173,5)" fg:x="1213" fg:w="2"/><text x="96.3673%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="96.1173%" y="261" width="0.1585%" height="15" fill="rgb(250,125,52)" fg:x="1213" fg:w="2"/><text x="96.3673%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="96.1173%" y="245" width="0.1585%" height="15" fill="rgb(209,133,18)" fg:x="1213" fg:w="2"/><text x="96.3673%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="96.1173%" y="229" width="0.1585%" height="15" fill="rgb(216,173,22)" fg:x="1213" fg:w="2"/><text x="96.3673%" y="239.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="96.2758%" y="405" width="0.0792%" height="15" fill="rgb(205,3,22)" fg:x="1215" fg:w="1"/><text x="96.5258%" y="415.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="96.3550%" y="373" width="0.0792%" height="15" fill="rgb(248,22,20)" fg:x="1216" fg:w="1"/><text x="96.6050%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="96.3550%" y="357" width="0.0792%" height="15" fill="rgb(233,6,29)" fg:x="1216" fg:w="1"/><text x="96.6050%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.3550%" y="341" width="0.0792%" height="15" fill="rgb(240,22,54)" fg:x="1216" fg:w="1"/><text x="96.6050%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.3550%" y="325" width="0.0792%" height="15" fill="rgb(231,133,32)" fg:x="1216" fg:w="1"/><text x="96.6050%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="96.3550%" y="309" width="0.0792%" height="15" fill="rgb(248,193,4)" fg:x="1216" fg:w="1"/><text x="96.6050%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.3550%" y="293" width="0.0792%" height="15" fill="rgb(211,178,46)" fg:x="1216" fg:w="1"/><text x="96.6050%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.3550%" y="277" width="0.0792%" height="15" fill="rgb(224,5,42)" fg:x="1216" fg:w="1"/><text x="96.6050%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.3550%" y="261" width="0.0792%" height="15" fill="rgb(239,176,25)" fg:x="1216" fg:w="1"/><text x="96.6050%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.3550%" y="245" width="0.0792%" height="15" fill="rgb(245,187,50)" fg:x="1216" fg:w="1"/><text x="96.6050%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="96.4342%" y="373" width="0.0792%" height="15" fill="rgb(248,24,15)" fg:x="1217" fg:w="1"/><text x="96.6842%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.4342%" y="357" width="0.0792%" height="15" fill="rgb(205,166,13)" fg:x="1217" fg:w="1"/><text x="96.6842%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.4342%" y="341" width="0.0792%" height="15" fill="rgb(208,114,23)" fg:x="1217" fg:w="1"/><text x="96.6842%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.4342%" y="325" width="0.0792%" height="15" fill="rgb(239,127,18)" fg:x="1217" fg:w="1"/><text x="96.6842%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.4342%" y="309" width="0.0792%" height="15" fill="rgb(219,154,28)" fg:x="1217" fg:w="1"/><text x="96.6842%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.4342%" y="293" width="0.0792%" height="15" fill="rgb(225,157,23)" fg:x="1217" fg:w="1"/><text x="96.6842%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.4342%" y="277" width="0.0792%" height="15" fill="rgb(219,8,6)" fg:x="1217" fg:w="1"/><text x="96.6842%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.4342%" y="261" width="0.0792%" height="15" fill="rgb(212,47,6)" fg:x="1217" fg:w="1"/><text x="96.6842%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.4342%" y="245" width="0.0792%" height="15" fill="rgb(224,190,4)" fg:x="1217" fg:w="1"/><text x="96.6842%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.4342%" y="229" width="0.0792%" height="15" fill="rgb(239,183,29)" fg:x="1217" fg:w="1"/><text x="96.6842%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.4342%" y="213" width="0.0792%" height="15" fill="rgb(213,57,7)" fg:x="1217" fg:w="1"/><text x="96.6842%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.4342%" y="197" width="0.0792%" height="15" fill="rgb(216,148,1)" fg:x="1217" fg:w="1"/><text x="96.6842%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.4342%" y="181" width="0.0792%" height="15" fill="rgb(236,182,29)" fg:x="1217" fg:w="1"/><text x="96.6842%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.4342%" y="165" width="0.0792%" height="15" fill="rgb(244,120,48)" fg:x="1217" fg:w="1"/><text x="96.6842%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.4342%" y="149" width="0.0792%" height="15" fill="rgb(206,71,34)" fg:x="1217" fg:w="1"/><text x="96.6842%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.4342%" y="133" width="0.0792%" height="15" fill="rgb(242,32,6)" fg:x="1217" fg:w="1"/><text x="96.6842%" y="143.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (3 samples, 0.24%)</title><rect x="96.3550%" y="389" width="0.2377%" height="15" fill="rgb(241,35,3)" fg:x="1216" fg:w="3"/><text x="96.6050%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="96.5135%" y="373" width="0.0792%" height="15" fill="rgb(222,62,19)" fg:x="1218" fg:w="1"/><text x="96.7635%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="96.5135%" y="357" width="0.0792%" height="15" fill="rgb(223,110,41)" fg:x="1218" fg:w="1"/><text x="96.7635%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.5135%" y="341" width="0.0792%" height="15" fill="rgb(208,224,4)" fg:x="1218" fg:w="1"/><text x="96.7635%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.5927%" y="325" width="0.0792%" height="15" fill="rgb(241,137,19)" fg:x="1219" fg:w="1"/><text x="96.8427%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.6719%" y="325" width="0.0792%" height="15" fill="rgb(244,24,17)" fg:x="1220" fg:w="1"/><text x="96.9219%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="96.6719%" y="309" width="0.0792%" height="15" fill="rgb(245,178,49)" fg:x="1220" fg:w="1"/><text x="96.9219%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.6719%" y="293" width="0.0792%" height="15" fill="rgb(219,160,38)" fg:x="1220" fg:w="1"/><text x="96.9219%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="96.7512%" y="325" width="0.0792%" height="15" fill="rgb(228,137,14)" fg:x="1221" fg:w="1"/><text x="97.0012%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.7512%" y="309" width="0.0792%" height="15" fill="rgb(237,134,11)" fg:x="1221" fg:w="1"/><text x="97.0012%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.7512%" y="293" width="0.0792%" height="15" fill="rgb(211,126,44)" fg:x="1221" fg:w="1"/><text x="97.0012%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.7512%" y="277" width="0.0792%" height="15" fill="rgb(226,171,33)" fg:x="1221" fg:w="1"/><text x="97.0012%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="96.9097%" y="277" width="0.0792%" height="15" fill="rgb(253,99,13)" fg:x="1223" fg:w="1"/><text x="97.1597%" y="287.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="96.8304%" y="325" width="0.2377%" height="15" fill="rgb(244,48,7)" fg:x="1222" fg:w="3"/><text x="97.0804%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="96.8304%" y="309" width="0.2377%" height="15" fill="rgb(244,217,54)" fg:x="1222" fg:w="3"/><text x="97.0804%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="96.8304%" y="293" width="0.2377%" height="15" fill="rgb(224,15,18)" fg:x="1222" fg:w="3"/><text x="97.0804%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.9889%" y="277" width="0.0792%" height="15" fill="rgb(244,99,12)" fg:x="1224" fg:w="1"/><text x="97.2389%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.9889%" y="261" width="0.0792%" height="15" fill="rgb(233,226,8)" fg:x="1224" fg:w="1"/><text x="97.2389%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="96.9889%" y="245" width="0.0792%" height="15" fill="rgb(229,211,3)" fg:x="1224" fg:w="1"/><text x="97.2389%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.9889%" y="229" width="0.0792%" height="15" fill="rgb(216,140,21)" fg:x="1224" fg:w="1"/><text x="97.2389%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.1474%" y="133" width="0.0792%" height="15" fill="rgb(234,122,30)" fg:x="1226" fg:w="1"/><text x="97.3974%" y="143.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (212 samples, 16.80%)</title><rect x="80.5071%" y="565" width="16.7987%" height="15" fill="rgb(236,25,46)" fg:x="1016" fg:w="212"/><text x="80.7571%" y="575.50">kernel::plugins::mw::Middl..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (212 samples, 16.80%)</title><rect x="80.5071%" y="549" width="16.7987%" height="15" fill="rgb(217,52,54)" fg:x="1016" fg:w="212"/><text x="80.7571%" y="559.50">&lt;plugins_dynlib::DynamicMi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (212 samples, 16.80%)</title><rect x="80.5071%" y="533" width="16.7987%" height="15" fill="rgb(222,29,26)" fg:x="1016" fg:w="212"/><text x="80.7571%" y="543.50">kernel::plugins::mw::Middl..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (212 samples, 16.80%)</title><rect x="80.5071%" y="517" width="16.7987%" height="15" fill="rgb(216,177,29)" fg:x="1016" fg:w="212"/><text x="80.7571%" y="527.50">core::ops::function::FnOnc..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (212 samples, 16.80%)</title><rect x="80.5071%" y="501" width="16.7987%" height="15" fill="rgb(247,136,51)" fg:x="1016" fg:w="212"/><text x="80.7571%" y="511.50">kernel::plugins::mw::Middl..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (212 samples, 16.80%)</title><rect x="80.5071%" y="485" width="16.7987%" height="15" fill="rgb(231,47,47)" fg:x="1016" fg:w="212"/><text x="80.7571%" y="495.50">core::ops::function::FnOnc..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (212 samples, 16.80%)</title><rect x="80.5071%" y="469" width="16.7987%" height="15" fill="rgb(211,192,36)" fg:x="1016" fg:w="212"/><text x="80.7571%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (212 samples, 16.80%)</title><rect x="80.5071%" y="453" width="16.7987%" height="15" fill="rgb(229,156,32)" fg:x="1016" fg:w="212"/><text x="80.7571%" y="463.50">&lt;engine::session::state::S..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (212 samples, 16.80%)</title><rect x="80.5071%" y="437" width="16.7987%" height="15" fill="rgb(248,213,20)" fg:x="1016" fg:w="212"/><text x="80.7571%" y="447.50">&lt;plugins_core::looking::ac..</text></g><g><title>plugins_core::looking::model::new_area_observation (202 samples, 16.01%)</title><rect x="81.2995%" y="421" width="16.0063%" height="15" fill="rgb(217,64,7)" fg:x="1026" fg:w="202"/><text x="81.5495%" y="431.50">plugins_core::looking::mo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.95%)</title><rect x="96.3550%" y="405" width="0.9509%" height="15" fill="rgb(232,142,8)" fg:x="1216" fg:w="12"/><text x="96.6050%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (9 samples, 0.71%)</title><rect x="96.5927%" y="389" width="0.7132%" height="15" fill="rgb(224,92,44)" fg:x="1219" fg:w="9"/><text x="96.8427%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (9 samples, 0.71%)</title><rect x="96.5927%" y="373" width="0.7132%" height="15" fill="rgb(214,169,17)" fg:x="1219" fg:w="9"/><text x="96.8427%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.71%)</title><rect x="96.5927%" y="357" width="0.7132%" height="15" fill="rgb(210,59,37)" fg:x="1219" fg:w="9"/><text x="96.8427%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.71%)</title><rect x="96.5927%" y="341" width="0.7132%" height="15" fill="rgb(214,116,48)" fg:x="1219" fg:w="9"/><text x="96.8427%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="97.0681%" y="325" width="0.2377%" height="15" fill="rgb(244,191,6)" fg:x="1225" fg:w="3"/><text x="97.3181%" y="335.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="97.0681%" y="309" width="0.2377%" height="15" fill="rgb(241,50,52)" fg:x="1225" fg:w="3"/><text x="97.3181%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.0681%" y="293" width="0.2377%" height="15" fill="rgb(236,75,39)" fg:x="1225" fg:w="3"/><text x="97.3181%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.0681%" y="277" width="0.2377%" height="15" fill="rgb(236,99,0)" fg:x="1225" fg:w="3"/><text x="97.3181%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.0681%" y="261" width="0.2377%" height="15" fill="rgb(207,202,15)" fg:x="1225" fg:w="3"/><text x="97.3181%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.0681%" y="245" width="0.2377%" height="15" fill="rgb(233,207,14)" fg:x="1225" fg:w="3"/><text x="97.3181%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.0681%" y="229" width="0.2377%" height="15" fill="rgb(226,27,51)" fg:x="1225" fg:w="3"/><text x="97.3181%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.0681%" y="213" width="0.2377%" height="15" fill="rgb(206,104,42)" fg:x="1225" fg:w="3"/><text x="97.3181%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.0681%" y="197" width="0.2377%" height="15" fill="rgb(212,225,4)" fg:x="1225" fg:w="3"/><text x="97.3181%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.0681%" y="181" width="0.2377%" height="15" fill="rgb(233,96,42)" fg:x="1225" fg:w="3"/><text x="97.3181%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.0681%" y="165" width="0.2377%" height="15" fill="rgb(229,21,32)" fg:x="1225" fg:w="3"/><text x="97.3181%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.1474%" y="149" width="0.1585%" height="15" fill="rgb(226,216,24)" fg:x="1226" fg:w="2"/><text x="97.3974%" y="159.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.2266%" y="133" width="0.0792%" height="15" fill="rgb(221,163,17)" fg:x="1227" fg:w="1"/><text x="97.4766%" y="143.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.2266%" y="117" width="0.0792%" height="15" fill="rgb(216,216,42)" fg:x="1227" fg:w="1"/><text x="97.4766%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.2266%" y="101" width="0.0792%" height="15" fill="rgb(240,118,7)" fg:x="1227" fg:w="1"/><text x="97.4766%" y="111.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="97.3059%" y="517" width="0.1585%" height="15" fill="rgb(221,67,37)" fg:x="1228" fg:w="2"/><text x="97.5559%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.3059%" y="501" width="0.1585%" height="15" fill="rgb(241,32,44)" fg:x="1228" fg:w="2"/><text x="97.5559%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.3059%" y="485" width="0.1585%" height="15" fill="rgb(235,204,43)" fg:x="1228" fg:w="2"/><text x="97.5559%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.3851%" y="469" width="0.0792%" height="15" fill="rgb(213,116,10)" fg:x="1229" fg:w="1"/><text x="97.6351%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.3851%" y="453" width="0.0792%" height="15" fill="rgb(239,15,48)" fg:x="1229" fg:w="1"/><text x="97.6351%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.3851%" y="437" width="0.0792%" height="15" fill="rgb(207,123,36)" fg:x="1229" fg:w="1"/><text x="97.6351%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.3851%" y="421" width="0.0792%" height="15" fill="rgb(209,103,30)" fg:x="1229" fg:w="1"/><text x="97.6351%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.3851%" y="405" width="0.0792%" height="15" fill="rgb(238,100,19)" fg:x="1229" fg:w="1"/><text x="97.6351%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.4643%" y="453" width="0.0792%" height="15" fill="rgb(244,30,14)" fg:x="1230" fg:w="1"/><text x="97.7143%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.4643%" y="437" width="0.0792%" height="15" fill="rgb(249,174,6)" fg:x="1230" fg:w="1"/><text x="97.7143%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.4643%" y="421" width="0.0792%" height="15" fill="rgb(235,213,41)" fg:x="1230" fg:w="1"/><text x="97.7143%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.4643%" y="405" width="0.0792%" height="15" fill="rgb(213,118,6)" fg:x="1230" fg:w="1"/><text x="97.7143%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.4643%" y="389" width="0.0792%" height="15" fill="rgb(235,44,51)" fg:x="1230" fg:w="1"/><text x="97.7143%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.4643%" y="373" width="0.0792%" height="15" fill="rgb(217,9,53)" fg:x="1230" fg:w="1"/><text x="97.7143%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.4643%" y="357" width="0.0792%" height="15" fill="rgb(237,172,34)" fg:x="1230" fg:w="1"/><text x="97.7143%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.4643%" y="341" width="0.0792%" height="15" fill="rgb(206,206,11)" fg:x="1230" fg:w="1"/><text x="97.7143%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.4643%" y="325" width="0.0792%" height="15" fill="rgb(214,149,29)" fg:x="1230" fg:w="1"/><text x="97.7143%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.4643%" y="309" width="0.0792%" height="15" fill="rgb(208,123,3)" fg:x="1230" fg:w="1"/><text x="97.7143%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.4643%" y="293" width="0.0792%" height="15" fill="rgb(229,126,4)" fg:x="1230" fg:w="1"/><text x="97.7143%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.4643%" y="277" width="0.0792%" height="15" fill="rgb(222,92,36)" fg:x="1230" fg:w="1"/><text x="97.7143%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.4643%" y="261" width="0.0792%" height="15" fill="rgb(216,39,41)" fg:x="1230" fg:w="1"/><text x="97.7143%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.4643%" y="245" width="0.0792%" height="15" fill="rgb(253,127,28)" fg:x="1230" fg:w="1"/><text x="97.7143%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.4643%" y="229" width="0.0792%" height="15" fill="rgb(249,152,51)" fg:x="1230" fg:w="1"/><text x="97.7143%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.4643%" y="213" width="0.0792%" height="15" fill="rgb(209,123,42)" fg:x="1230" fg:w="1"/><text x="97.7143%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.4643%" y="197" width="0.0792%" height="15" fill="rgb(241,118,22)" fg:x="1230" fg:w="1"/><text x="97.7143%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.6228%" y="389" width="0.0792%" height="15" fill="rgb(208,25,7)" fg:x="1232" fg:w="1"/><text x="97.8728%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.6228%" y="373" width="0.0792%" height="15" fill="rgb(243,144,39)" fg:x="1232" fg:w="1"/><text x="97.8728%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.6228%" y="357" width="0.0792%" height="15" fill="rgb(250,50,5)" fg:x="1232" fg:w="1"/><text x="97.8728%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.6228%" y="341" width="0.0792%" height="15" fill="rgb(207,67,11)" fg:x="1232" fg:w="1"/><text x="97.8728%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.6228%" y="325" width="0.0792%" height="15" fill="rgb(245,204,40)" fg:x="1232" fg:w="1"/><text x="97.8728%" y="335.50"></text></g><g><title>plugins_core::tools::contained_by (6 samples, 0.48%)</title><rect x="97.3059%" y="533" width="0.4754%" height="15" fill="rgb(238,228,24)" fg:x="1228" fg:w="6"/><text x="97.5559%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.32%)</title><rect x="97.4643%" y="517" width="0.3170%" height="15" fill="rgb(217,116,22)" fg:x="1230" fg:w="4"/><text x="97.7143%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.32%)</title><rect x="97.4643%" y="501" width="0.3170%" height="15" fill="rgb(234,98,12)" fg:x="1230" fg:w="4"/><text x="97.7143%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="97.4643%" y="485" width="0.3170%" height="15" fill="rgb(242,170,50)" fg:x="1230" fg:w="4"/><text x="97.7143%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="97.4643%" y="469" width="0.3170%" height="15" fill="rgb(235,7,5)" fg:x="1230" fg:w="4"/><text x="97.7143%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="97.5436%" y="453" width="0.2377%" height="15" fill="rgb(241,114,28)" fg:x="1231" fg:w="3"/><text x="97.7936%" y="463.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="97.5436%" y="437" width="0.2377%" height="15" fill="rgb(246,112,42)" fg:x="1231" fg:w="3"/><text x="97.7936%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.5436%" y="421" width="0.2377%" height="15" fill="rgb(248,228,14)" fg:x="1231" fg:w="3"/><text x="97.7936%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.5436%" y="405" width="0.2377%" height="15" fill="rgb(208,133,18)" fg:x="1231" fg:w="3"/><text x="97.7936%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.7021%" y="389" width="0.0792%" height="15" fill="rgb(207,35,49)" fg:x="1233" fg:w="1"/><text x="97.9521%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.7021%" y="373" width="0.0792%" height="15" fill="rgb(205,68,36)" fg:x="1233" fg:w="1"/><text x="97.9521%" y="383.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="97.7021%" y="357" width="0.0792%" height="15" fill="rgb(245,62,40)" fg:x="1233" fg:w="1"/><text x="97.9521%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.7813%" y="501" width="0.0792%" height="15" fill="rgb(228,27,24)" fg:x="1234" fg:w="1"/><text x="98.0313%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.7813%" y="485" width="0.0792%" height="15" fill="rgb(253,19,12)" fg:x="1234" fg:w="1"/><text x="98.0313%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.7813%" y="469" width="0.0792%" height="15" fill="rgb(232,28,20)" fg:x="1234" fg:w="1"/><text x="98.0313%" y="479.50"></text></g><g><title>plugins_core::tools::occupied_by (3 samples, 0.24%)</title><rect x="97.7813%" y="533" width="0.2377%" height="15" fill="rgb(218,35,51)" fg:x="1234" fg:w="3"/><text x="98.0313%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="97.7813%" y="517" width="0.2377%" height="15" fill="rgb(212,90,40)" fg:x="1234" fg:w="3"/><text x="98.0313%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.8605%" y="501" width="0.1585%" height="15" fill="rgb(220,172,12)" fg:x="1235" fg:w="2"/><text x="98.1105%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.8605%" y="485" width="0.1585%" height="15" fill="rgb(226,159,20)" fg:x="1235" fg:w="2"/><text x="98.1105%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.9398%" y="469" width="0.0792%" height="15" fill="rgb(234,205,16)" fg:x="1236" fg:w="1"/><text x="98.1898%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.9398%" y="453" width="0.0792%" height="15" fill="rgb(207,9,39)" fg:x="1236" fg:w="1"/><text x="98.1898%" y="463.50"></text></g><g><title>engine::session::Session::captured (243 samples, 19.26%)</title><rect x="78.8431%" y="709" width="19.2552%" height="15" fill="rgb(249,143,15)" fg:x="995" fg:w="243"/><text x="79.0931%" y="719.50">engine::session::Session::capt..</text></g><g><title>engine::session::logs::capture (239 samples, 18.94%)</title><rect x="79.1601%" y="693" width="18.9382%" height="15" fill="rgb(253,133,29)" fg:x="999" fg:w="239"/><text x="79.4101%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (236 samples, 18.70%)</title><rect x="79.3978%" y="677" width="18.7005%" height="15" fill="rgb(221,187,0)" fg:x="1002" fg:w="236"/><text x="79.6478%" y="687.50">tracing_core::dispatcher::wit..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (236 samples, 18.70%)</title><rect x="79.3978%" y="661" width="18.7005%" height="15" fill="rgb(205,204,26)" fg:x="1002" fg:w="236"/><text x="79.6478%" y="671.50">&lt;engine::session::Session as ..</text></g><g><title>kernel::plugins::mw::apply_middleware (235 samples, 18.62%)</title><rect x="79.4770%" y="645" width="18.6212%" height="15" fill="rgb(224,68,54)" fg:x="1003" fg:w="235"/><text x="79.7270%" y="655.50">kernel::plugins::mw::apply_mi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (235 samples, 18.62%)</title><rect x="79.4770%" y="629" width="18.6212%" height="15" fill="rgb(209,67,4)" fg:x="1003" fg:w="235"/><text x="79.7270%" y="639.50">kernel::plugins::mw::Middlewa..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (233 samples, 18.46%)</title><rect x="79.6355%" y="613" width="18.4628%" height="15" fill="rgb(228,229,18)" fg:x="1005" fg:w="233"/><text x="79.8855%" y="623.50">&lt;engine::session::ExpandSurro..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (223 samples, 17.67%)</title><rect x="80.4279%" y="597" width="17.6704%" height="15" fill="rgb(231,89,13)" fg:x="1015" fg:w="223"/><text x="80.6779%" y="607.50">kernel::plugins::mw::Middle..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (223 samples, 17.67%)</title><rect x="80.4279%" y="581" width="17.6704%" height="15" fill="rgb(210,182,18)" fg:x="1015" fg:w="223"/><text x="80.6779%" y="591.50">&lt;plugins_rune::RuneMiddlewa..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (10 samples, 0.79%)</title><rect x="97.3059%" y="565" width="0.7924%" height="15" fill="rgb(240,105,2)" fg:x="1228" fg:w="10"/><text x="97.5559%" y="575.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (10 samples, 0.79%)</title><rect x="97.3059%" y="549" width="0.7924%" height="15" fill="rgb(207,170,50)" fg:x="1228" fg:w="10"/><text x="97.5559%" y="559.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="98.0190%" y="533" width="0.0792%" height="15" fill="rgb(232,133,24)" fg:x="1237" fg:w="1"/><text x="98.2690%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.0190%" y="517" width="0.0792%" height="15" fill="rgb(235,166,27)" fg:x="1237" fg:w="1"/><text x="98.2690%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="98.0190%" y="501" width="0.0792%" height="15" fill="rgb(209,19,13)" fg:x="1237" fg:w="1"/><text x="98.2690%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.0190%" y="485" width="0.0792%" height="15" fill="rgb(226,79,39)" fg:x="1237" fg:w="1"/><text x="98.2690%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.1775%" y="629" width="0.0792%" height="15" fill="rgb(222,163,10)" fg:x="1239" fg:w="1"/><text x="98.4275%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2567%" y="565" width="0.0792%" height="15" fill="rgb(214,44,19)" fg:x="1240" fg:w="1"/><text x="98.5067%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2567%" y="549" width="0.0792%" height="15" fill="rgb(210,217,13)" fg:x="1240" fg:w="1"/><text x="98.5067%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2567%" y="533" width="0.0792%" height="15" fill="rgb(237,61,54)" fg:x="1240" fg:w="1"/><text x="98.5067%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2567%" y="517" width="0.0792%" height="15" fill="rgb(226,184,24)" fg:x="1240" fg:w="1"/><text x="98.5067%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2567%" y="501" width="0.0792%" height="15" fill="rgb(223,226,4)" fg:x="1240" fg:w="1"/><text x="98.5067%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.2567%" y="485" width="0.0792%" height="15" fill="rgb(210,26,41)" fg:x="1240" fg:w="1"/><text x="98.5067%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.2567%" y="469" width="0.0792%" height="15" fill="rgb(220,221,6)" fg:x="1240" fg:w="1"/><text x="98.5067%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.2567%" y="453" width="0.0792%" height="15" fill="rgb(225,89,49)" fg:x="1240" fg:w="1"/><text x="98.5067%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2567%" y="437" width="0.0792%" height="15" fill="rgb(218,70,45)" fg:x="1240" fg:w="1"/><text x="98.5067%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2567%" y="421" width="0.0792%" height="15" fill="rgb(238,166,21)" fg:x="1240" fg:w="1"/><text x="98.5067%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.2567%" y="405" width="0.0792%" height="15" fill="rgb(224,141,44)" fg:x="1240" fg:w="1"/><text x="98.5067%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.2567%" y="389" width="0.0792%" height="15" fill="rgb(230,12,49)" fg:x="1240" fg:w="1"/><text x="98.5067%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.2567%" y="373" width="0.0792%" height="15" fill="rgb(212,174,12)" fg:x="1240" fg:w="1"/><text x="98.5067%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.2567%" y="357" width="0.0792%" height="15" fill="rgb(246,67,9)" fg:x="1240" fg:w="1"/><text x="98.5067%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="98.2567%" y="341" width="0.0792%" height="15" fill="rgb(239,35,23)" fg:x="1240" fg:w="1"/><text x="98.5067%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="98.2567%" y="325" width="0.0792%" height="15" fill="rgb(211,167,0)" fg:x="1240" fg:w="1"/><text x="98.5067%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.3360%" y="517" width="0.0792%" height="15" fill="rgb(225,119,45)" fg:x="1241" fg:w="1"/><text x="98.5860%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.3360%" y="501" width="0.0792%" height="15" fill="rgb(210,162,6)" fg:x="1241" fg:w="1"/><text x="98.5860%" y="511.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.3360%" y="485" width="0.0792%" height="15" fill="rgb(208,118,35)" fg:x="1241" fg:w="1"/><text x="98.5860%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.2567%" y="613" width="0.2377%" height="15" fill="rgb(239,4,53)" fg:x="1240" fg:w="3"/><text x="98.5067%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.2567%" y="597" width="0.2377%" height="15" fill="rgb(213,130,21)" fg:x="1240" fg:w="3"/><text x="98.5067%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.2567%" y="581" width="0.2377%" height="15" fill="rgb(235,148,0)" fg:x="1240" fg:w="3"/><text x="98.5067%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.3360%" y="565" width="0.1585%" height="15" fill="rgb(244,224,18)" fg:x="1241" fg:w="2"/><text x="98.5860%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="98.3360%" y="549" width="0.1585%" height="15" fill="rgb(211,214,4)" fg:x="1241" fg:w="2"/><text x="98.5860%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="98.3360%" y="533" width="0.1585%" height="15" fill="rgb(206,119,25)" fg:x="1241" fg:w="2"/><text x="98.5860%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.4152%" y="517" width="0.0792%" height="15" fill="rgb(243,93,47)" fg:x="1242" fg:w="1"/><text x="98.6652%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4152%" y="501" width="0.0792%" height="15" fill="rgb(224,194,6)" fg:x="1242" fg:w="1"/><text x="98.6652%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="98.4152%" y="485" width="0.0792%" height="15" fill="rgb(243,229,6)" fg:x="1242" fg:w="1"/><text x="98.6652%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.4152%" y="469" width="0.0792%" height="15" fill="rgb(207,23,50)" fg:x="1242" fg:w="1"/><text x="98.6652%" y="479.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.4152%" y="453" width="0.0792%" height="15" fill="rgb(253,192,32)" fg:x="1242" fg:w="1"/><text x="98.6652%" y="463.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="98.4152%" y="437" width="0.0792%" height="15" fill="rgb(213,21,6)" fg:x="1242" fg:w="1"/><text x="98.6652%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="98.1775%" y="661" width="0.4754%" height="15" fill="rgb(243,151,13)" fg:x="1239" fg:w="6"/><text x="98.4275%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="98.1775%" y="645" width="0.4754%" height="15" fill="rgb(233,165,41)" fg:x="1239" fg:w="6"/><text x="98.4275%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="98.2567%" y="629" width="0.3962%" height="15" fill="rgb(246,176,45)" fg:x="1240" fg:w="5"/><text x="98.5067%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.4945%" y="613" width="0.1585%" height="15" fill="rgb(217,170,52)" fg:x="1243" fg:w="2"/><text x="98.7445%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.4945%" y="597" width="0.1585%" height="15" fill="rgb(214,203,54)" fg:x="1243" fg:w="2"/><text x="98.7445%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="98.4945%" y="581" width="0.1585%" height="15" fill="rgb(248,215,49)" fg:x="1243" fg:w="2"/><text x="98.7445%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.5737%" y="565" width="0.0792%" height="15" fill="rgb(208,46,10)" fg:x="1244" fg:w="1"/><text x="98.8237%" y="575.50"></text></g><g><title>engine::session::internal::Added::find_refs (8 samples, 0.63%)</title><rect x="98.0983%" y="693" width="0.6339%" height="15" fill="rgb(254,5,31)" fg:x="1238" fg:w="8"/><text x="98.3483%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.55%)</title><rect x="98.1775%" y="677" width="0.5547%" height="15" fill="rgb(222,104,33)" fg:x="1239" fg:w="7"/><text x="98.4275%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.6529%" y="661" width="0.0792%" height="15" fill="rgb(248,49,16)" fg:x="1245" fg:w="1"/><text x="98.9029%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6529%" y="645" width="0.0792%" height="15" fill="rgb(232,198,41)" fg:x="1245" fg:w="1"/><text x="98.9029%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.6529%" y="629" width="0.0792%" height="15" fill="rgb(214,125,3)" fg:x="1245" fg:w="1"/><text x="98.9029%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.6529%" y="613" width="0.0792%" height="15" fill="rgb(229,220,28)" fg:x="1245" fg:w="1"/><text x="98.9029%" y="623.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="98.7322%" y="677" width="0.0792%" height="15" fill="rgb(222,64,37)" fg:x="1246" fg:w="1"/><text x="98.9822%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.7322%" y="661" width="0.0792%" height="15" fill="rgb(249,184,13)" fg:x="1246" fg:w="1"/><text x="98.9822%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.7322%" y="645" width="0.0792%" height="15" fill="rgb(252,176,6)" fg:x="1246" fg:w="1"/><text x="98.9822%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="98.7322%" y="629" width="0.0792%" height="15" fill="rgb(228,153,7)" fg:x="1246" fg:w="1"/><text x="98.9822%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="98.8114%" y="629" width="0.0792%" height="15" fill="rgb(242,193,5)" fg:x="1247" fg:w="1"/><text x="99.0614%" y="639.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.8906%" y="581" width="0.0792%" height="15" fill="rgb(232,140,9)" fg:x="1248" fg:w="1"/><text x="99.1406%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.8906%" y="565" width="0.0792%" height="15" fill="rgb(213,222,16)" fg:x="1248" fg:w="1"/><text x="99.1406%" y="575.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.8906%" y="549" width="0.0792%" height="15" fill="rgb(222,75,50)" fg:x="1248" fg:w="1"/><text x="99.1406%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.8906%" y="533" width="0.0792%" height="15" fill="rgb(205,180,2)" fg:x="1248" fg:w="1"/><text x="99.1406%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.8906%" y="517" width="0.0792%" height="15" fill="rgb(216,34,7)" fg:x="1248" fg:w="1"/><text x="99.1406%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.8906%" y="501" width="0.0792%" height="15" fill="rgb(253,16,32)" fg:x="1248" fg:w="1"/><text x="99.1406%" y="511.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.8906%" y="485" width="0.0792%" height="15" fill="rgb(208,97,28)" fg:x="1248" fg:w="1"/><text x="99.1406%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="98.8906%" y="469" width="0.0792%" height="15" fill="rgb(225,92,11)" fg:x="1248" fg:w="1"/><text x="99.1406%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8906%" y="453" width="0.0792%" height="15" fill="rgb(243,38,12)" fg:x="1248" fg:w="1"/><text x="99.1406%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="98.8114%" y="677" width="0.2377%" height="15" fill="rgb(208,139,16)" fg:x="1247" fg:w="3"/><text x="99.0614%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="98.8114%" y="661" width="0.2377%" height="15" fill="rgb(227,24,9)" fg:x="1247" fg:w="3"/><text x="99.0614%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.8114%" y="645" width="0.2377%" height="15" fill="rgb(206,62,11)" fg:x="1247" fg:w="3"/><text x="99.0614%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="98.8906%" y="629" width="0.1585%" height="15" fill="rgb(228,134,27)" fg:x="1248" fg:w="2"/><text x="99.1406%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.8906%" y="613" width="0.1585%" height="15" fill="rgb(205,55,33)" fg:x="1248" fg:w="2"/><text x="99.1406%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.8906%" y="597" width="0.1585%" height="15" fill="rgb(243,75,43)" fg:x="1248" fg:w="2"/><text x="99.1406%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.9699%" y="581" width="0.0792%" height="15" fill="rgb(223,27,42)" fg:x="1249" fg:w="1"/><text x="99.2199%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.9699%" y="565" width="0.0792%" height="15" fill="rgb(232,189,33)" fg:x="1249" fg:w="1"/><text x="99.2199%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.9699%" y="549" width="0.0792%" height="15" fill="rgb(210,9,39)" fg:x="1249" fg:w="1"/><text x="99.2199%" y="559.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="99.0491%" y="677" width="0.0792%" height="15" fill="rgb(242,85,26)" fg:x="1250" fg:w="1"/><text x="99.2991%" y="687.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.1284%" y="565" width="0.0792%" height="15" fill="rgb(248,44,4)" fg:x="1251" fg:w="1"/><text x="99.3784%" y="575.50"></text></g><g><title>engine::session::Session::load_entity (15 samples, 1.19%)</title><rect x="98.0983%" y="709" width="1.1886%" height="15" fill="rgb(250,96,46)" fg:x="1238" fg:w="15"/><text x="98.3483%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.55%)</title><rect x="98.7322%" y="693" width="0.5547%" height="15" fill="rgb(229,116,26)" fg:x="1246" fg:w="7"/><text x="98.9822%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.1284%" y="677" width="0.1585%" height="15" fill="rgb(246,94,34)" fg:x="1251" fg:w="2"/><text x="99.3784%" y="687.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.1284%" y="661" width="0.1585%" height="15" fill="rgb(251,73,21)" fg:x="1251" fg:w="2"/><text x="99.3784%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.1284%" y="645" width="0.1585%" height="15" fill="rgb(254,121,25)" fg:x="1251" fg:w="2"/><text x="99.3784%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.1284%" y="629" width="0.1585%" height="15" fill="rgb(215,161,49)" fg:x="1251" fg:w="2"/><text x="99.3784%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.1284%" y="613" width="0.1585%" height="15" fill="rgb(221,43,13)" fg:x="1251" fg:w="2"/><text x="99.3784%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.1284%" y="597" width="0.1585%" height="15" fill="rgb(249,5,37)" fg:x="1251" fg:w="2"/><text x="99.3784%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.1284%" y="581" width="0.1585%" height="15" fill="rgb(226,25,44)" fg:x="1251" fg:w="2"/><text x="99.3784%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2076%" y="565" width="0.0792%" height="15" fill="rgb(238,189,16)" fg:x="1252" fg:w="1"/><text x="99.4576%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2076%" y="549" width="0.0792%" height="15" fill="rgb(251,186,8)" fg:x="1252" fg:w="1"/><text x="99.4576%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2076%" y="533" width="0.0792%" height="15" fill="rgb(254,34,31)" fg:x="1252" fg:w="1"/><text x="99.4576%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2076%" y="517" width="0.0792%" height="15" fill="rgb(225,215,27)" fg:x="1252" fg:w="1"/><text x="99.4576%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2076%" y="501" width="0.0792%" height="15" fill="rgb(221,192,48)" fg:x="1252" fg:w="1"/><text x="99.4576%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.2076%" y="485" width="0.0792%" height="15" fill="rgb(219,137,20)" fg:x="1252" fg:w="1"/><text x="99.4576%" y="495.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.2868%" y="709" width="0.0792%" height="15" fill="rgb(219,84,11)" fg:x="1253" fg:w="1"/><text x="99.5368%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.2868%" y="693" width="0.0792%" height="15" fill="rgb(224,10,23)" fg:x="1253" fg:w="1"/><text x="99.5368%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3661%" y="645" width="0.0792%" height="15" fill="rgb(248,22,39)" fg:x="1254" fg:w="1"/><text x="99.6161%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.3661%" y="629" width="0.0792%" height="15" fill="rgb(212,154,20)" fg:x="1254" fg:w="1"/><text x="99.6161%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.3661%" y="661" width="0.1585%" height="15" fill="rgb(236,199,50)" fg:x="1254" fg:w="2"/><text x="99.6161%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.4453%" y="645" width="0.0792%" height="15" fill="rgb(211,9,17)" fg:x="1255" fg:w="1"/><text x="99.6953%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.4453%" y="629" width="0.0792%" height="15" fill="rgb(243,216,36)" fg:x="1255" fg:w="1"/><text x="99.6953%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.4453%" y="613" width="0.0792%" height="15" fill="rgb(250,2,10)" fg:x="1255" fg:w="1"/><text x="99.6953%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.4453%" y="597" width="0.0792%" height="15" fill="rgb(226,50,48)" fg:x="1255" fg:w="1"/><text x="99.6953%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.4453%" y="581" width="0.0792%" height="15" fill="rgb(243,81,16)" fg:x="1255" fg:w="1"/><text x="99.6953%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="99.4453%" y="565" width="0.0792%" height="15" fill="rgb(250,14,2)" fg:x="1255" fg:w="1"/><text x="99.6953%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.4453%" y="549" width="0.0792%" height="15" fill="rgb(233,135,29)" fg:x="1255" fg:w="1"/><text x="99.6953%" y="559.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6038%" y="613" width="0.0792%" height="15" fill="rgb(224,64,43)" fg:x="1257" fg:w="1"/><text x="99.8538%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6038%" y="597" width="0.0792%" height="15" fill="rgb(238,84,13)" fg:x="1257" fg:w="1"/><text x="99.8538%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.6038%" y="581" width="0.0792%" height="15" fill="rgb(253,48,26)" fg:x="1257" fg:w="1"/><text x="99.8538%" y="591.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.6038%" y="565" width="0.0792%" height="15" fill="rgb(205,223,31)" fg:x="1257" fg:w="1"/><text x="99.8538%" y="575.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="99.6038%" y="549" width="0.0792%" height="15" fill="rgb(221,41,32)" fg:x="1257" fg:w="1"/><text x="99.8538%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6830%" y="565" width="0.0792%" height="15" fill="rgb(213,158,31)" fg:x="1258" fg:w="1"/><text x="99.9330%" y="575.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="99.5246%" y="661" width="0.3170%" height="15" fill="rgb(245,126,43)" fg:x="1256" fg:w="4"/><text x="99.7746%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="99.5246%" y="645" width="0.3170%" height="15" fill="rgb(227,7,22)" fg:x="1256" fg:w="4"/><text x="99.7746%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="99.5246%" y="629" width="0.3170%" height="15" fill="rgb(252,90,44)" fg:x="1256" fg:w="4"/><text x="99.7746%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.6830%" y="613" width="0.1585%" height="15" fill="rgb(253,91,0)" fg:x="1258" fg:w="2"/><text x="99.9330%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6830%" y="597" width="0.1585%" height="15" fill="rgb(252,175,49)" fg:x="1258" fg:w="2"/><text x="99.9330%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.6830%" y="581" width="0.1585%" height="15" fill="rgb(246,150,1)" fg:x="1258" fg:w="2"/><text x="99.9330%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7623%" y="565" width="0.0792%" height="15" fill="rgb(241,192,25)" fg:x="1259" fg:w="1"/><text x="100.0123%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7623%" y="549" width="0.0792%" height="15" fill="rgb(239,187,11)" fg:x="1259" fg:w="1"/><text x="100.0123%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.7623%" y="533" width="0.0792%" height="15" fill="rgb(218,202,51)" fg:x="1259" fg:w="1"/><text x="100.0123%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7623%" y="517" width="0.0792%" height="15" fill="rgb(225,176,8)" fg:x="1259" fg:w="1"/><text x="100.0123%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7623%" y="501" width="0.0792%" height="15" fill="rgb(219,122,41)" fg:x="1259" fg:w="1"/><text x="100.0123%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.7623%" y="485" width="0.0792%" height="15" fill="rgb(248,140,20)" fg:x="1259" fg:w="1"/><text x="100.0123%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7623%" y="469" width="0.0792%" height="15" fill="rgb(245,41,37)" fg:x="1259" fg:w="1"/><text x="100.0123%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7623%" y="453" width="0.0792%" height="15" fill="rgb(235,82,39)" fg:x="1259" fg:w="1"/><text x="100.0123%" y="463.50"></text></g><g><title>all (1,262 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(230,108,42)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-6657d8a0 (1,262 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(215,150,50)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="1087.50">simple-6657d8a0</text></g><g><title>_start (1,262 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(233,212,5)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,262 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(245,80,22)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,262 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(238,129,16)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,262 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(240,19,0)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,262 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(232,42,35)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,262 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(223,130,24)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,262 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(237,16,22)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,262 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(248,192,20)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,262 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(233,167,2)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,262 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(252,71,44)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,262 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(238,37,47)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,262 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(214,202,54)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,262 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(254,165,40)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,262 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(246,173,38)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,262 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(215,3,27)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,262 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(239,169,51)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,262 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(212,5,25)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (457 samples, 36.21%)</title><rect x="63.7876%" y="789" width="36.2124%" height="15" fill="rgb(243,45,17)" fg:x="805" fg:w="457"/><text x="64.0376%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine:..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (457 samples, 36.21%)</title><rect x="63.7876%" y="773" width="36.2124%" height="15" fill="rgb(242,97,9)" fg:x="805" fg:w="457"/><text x="64.0376%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (457 samples, 36.21%)</title><rect x="63.7876%" y="757" width="36.2124%" height="15" fill="rgb(228,71,31)" fg:x="805" fg:w="457"/><text x="64.0376%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (268 samples, 21.24%)</title><rect x="78.7639%" y="741" width="21.2361%" height="15" fill="rgb(252,184,16)" fg:x="994" fg:w="268"/><text x="79.0139%" y="751.50">engine::session::Session::evaluat..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (268 samples, 21.24%)</title><rect x="78.7639%" y="725" width="21.2361%" height="15" fill="rgb(236,169,46)" fg:x="994" fg:w="268"/><text x="79.0139%" y="735.50">engine::session::Session::evaluat..</text></g><g><title>kernel::model::EntityPtrResolver::world (8 samples, 0.63%)</title><rect x="99.3661%" y="709" width="0.6339%" height="15" fill="rgb(207,17,47)" fg:x="1254" fg:w="8"/><text x="99.6161%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.63%)</title><rect x="99.3661%" y="693" width="0.6339%" height="15" fill="rgb(206,201,28)" fg:x="1254" fg:w="8"/><text x="99.6161%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.63%)</title><rect x="99.3661%" y="677" width="0.6339%" height="15" fill="rgb(224,184,23)" fg:x="1254" fg:w="8"/><text x="99.6161%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.8415%" y="661" width="0.1585%" height="15" fill="rgb(208,139,48)" fg:x="1260" fg:w="2"/><text x="100.0915%" y="671.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.8415%" y="645" width="0.1585%" height="15" fill="rgb(208,130,10)" fg:x="1260" fg:w="2"/><text x="100.0915%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8415%" y="629" width="0.1585%" height="15" fill="rgb(211,213,45)" fg:x="1260" fg:w="2"/><text x="100.0915%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8415%" y="613" width="0.1585%" height="15" fill="rgb(235,100,30)" fg:x="1260" fg:w="2"/><text x="100.0915%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8415%" y="597" width="0.1585%" height="15" fill="rgb(206,144,31)" fg:x="1260" fg:w="2"/><text x="100.0915%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8415%" y="581" width="0.1585%" height="15" fill="rgb(224,200,26)" fg:x="1260" fg:w="2"/><text x="100.0915%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8415%" y="565" width="0.1585%" height="15" fill="rgb(247,104,53)" fg:x="1260" fg:w="2"/><text x="100.0915%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8415%" y="549" width="0.1585%" height="15" fill="rgb(220,14,17)" fg:x="1260" fg:w="2"/><text x="100.0915%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.9208%" y="533" width="0.0792%" height="15" fill="rgb(230,140,40)" fg:x="1261" fg:w="1"/><text x="100.1708%" y="543.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.9208%" y="517" width="0.0792%" height="15" fill="rgb(229,2,41)" fg:x="1261" fg:w="1"/><text x="100.1708%" y="527.50"></text></g></svg></svg>