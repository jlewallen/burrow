<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1030" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1013.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1013.00"> </text><svg id="frames" x="10" width="1180" total_samples="1213"><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0000%" y="613" width="0.0824%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="0.0000%" y="629" width="0.2473%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="3"/><text x="0.2500%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.0824%" y="613" width="0.1649%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="2"/><text x="0.3324%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.0824%" y="597" width="0.1649%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="2"/><text x="0.3324%" y="607.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="0.2473%" y="613" width="0.1649%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="2"/><text x="0.4973%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.3298%" y="597" width="0.0824%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="1"/><text x="0.5798%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.3298%" y="581" width="0.0824%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="1"/><text x="0.5798%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.6595%" y="533" width="0.1649%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="2"/><text x="0.9095%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.8244%" y="517" width="0.0824%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="1"/><text x="1.0744%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.9068%" y="501" width="0.0824%" height="15" fill="rgb(220,122,19)" fg:x="11" fg:w="1"/><text x="1.1568%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.9893%" y="485" width="0.0824%" height="15" fill="rgb(250,228,42)" fg:x="12" fg:w="1"/><text x="1.2393%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.0717%" y="469" width="0.0824%" height="15" fill="rgb(240,193,28)" fg:x="13" fg:w="1"/><text x="1.3217%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.0717%" y="453" width="0.0824%" height="15" fill="rgb(216,20,37)" fg:x="13" fg:w="1"/><text x="1.3217%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.58%)</title><rect x="0.6595%" y="549" width="0.5771%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="7"/><text x="0.9095%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="0.8244%" y="533" width="0.4122%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="5"/><text x="1.0744%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="0.9068%" y="517" width="0.3298%" height="15" fill="rgb(231,73,38)" fg:x="11" fg:w="4"/><text x="1.1568%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="0.9893%" y="501" width="0.2473%" height="15" fill="rgb(225,20,46)" fg:x="12" fg:w="3"/><text x="1.2393%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.0717%" y="485" width="0.1649%" height="15" fill="rgb(210,31,41)" fg:x="13" fg:w="2"/><text x="1.3217%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.1542%" y="469" width="0.0824%" height="15" fill="rgb(221,200,47)" fg:x="14" fg:w="1"/><text x="1.4042%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3190%" y="517" width="0.0824%" height="15" fill="rgb(226,26,5)" fg:x="16" fg:w="1"/><text x="1.5690%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.4015%" y="517" width="0.0824%" height="15" fill="rgb(249,33,26)" fg:x="17" fg:w="1"/><text x="1.6515%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.4015%" y="501" width="0.0824%" height="15" fill="rgb(235,183,28)" fg:x="17" fg:w="1"/><text x="1.6515%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.5664%" y="501" width="0.0824%" height="15" fill="rgb(221,5,38)" fg:x="19" fg:w="1"/><text x="1.8164%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5664%" y="485" width="0.0824%" height="15" fill="rgb(247,18,42)" fg:x="19" fg:w="1"/><text x="1.8164%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.66%)</title><rect x="1.2366%" y="549" width="0.6595%" height="15" fill="rgb(241,131,45)" fg:x="15" fg:w="8"/><text x="1.4866%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.58%)</title><rect x="1.3190%" y="533" width="0.5771%" height="15" fill="rgb(249,31,29)" fg:x="16" fg:w="7"/><text x="1.5690%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="1.4839%" y="517" width="0.4122%" height="15" fill="rgb(225,111,53)" fg:x="18" fg:w="5"/><text x="1.7339%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="1.6488%" y="501" width="0.2473%" height="15" fill="rgb(238,160,17)" fg:x="20" fg:w="3"/><text x="1.8988%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.25%)</title><rect x="1.6488%" y="485" width="0.2473%" height="15" fill="rgb(214,148,48)" fg:x="20" fg:w="3"/><text x="1.8988%" y="495.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.7312%" y="469" width="0.1649%" height="15" fill="rgb(232,36,49)" fg:x="21" fg:w="2"/><text x="1.9812%" y="479.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 1.73%)</title><rect x="0.2473%" y="629" width="1.7312%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="21"/><text x="0.4973%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (19 samples, 1.57%)</title><rect x="0.4122%" y="613" width="1.5664%" height="15" fill="rgb(229,88,8)" fg:x="5" fg:w="19"/><text x="0.6622%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 1.57%)</title><rect x="0.4122%" y="597" width="1.5664%" height="15" fill="rgb(213,181,19)" fg:x="5" fg:w="19"/><text x="0.6622%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (17 samples, 1.40%)</title><rect x="0.5771%" y="581" width="1.4015%" height="15" fill="rgb(254,191,54)" fg:x="7" fg:w="17"/><text x="0.8271%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 1.40%)</title><rect x="0.5771%" y="565" width="1.4015%" height="15" fill="rgb(241,83,37)" fg:x="7" fg:w="17"/><text x="0.8271%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8961%" y="549" width="0.0824%" height="15" fill="rgb(233,36,39)" fg:x="23" fg:w="1"/><text x="2.1461%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.1434%" y="581" width="0.0824%" height="15" fill="rgb(226,3,54)" fg:x="26" fg:w="1"/><text x="2.3934%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="2.1434%" y="565" width="0.0824%" height="15" fill="rgb(245,192,40)" fg:x="26" fg:w="1"/><text x="2.3934%" y="575.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="2.1434%" y="549" width="0.0824%" height="15" fill="rgb(238,167,29)" fg:x="26" fg:w="1"/><text x="2.3934%" y="559.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="2.2259%" y="581" width="0.0824%" height="15" fill="rgb(232,182,51)" fg:x="27" fg:w="1"/><text x="2.4759%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.2259%" y="565" width="0.0824%" height="15" fill="rgb(231,60,39)" fg:x="27" fg:w="1"/><text x="2.4759%" y="575.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="2.3083%" y="517" width="0.0824%" height="15" fill="rgb(208,69,12)" fg:x="28" fg:w="1"/><text x="2.5583%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="2.3083%" y="501" width="0.0824%" height="15" fill="rgb(235,93,37)" fg:x="28" fg:w="1"/><text x="2.5583%" y="511.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="2.3083%" y="485" width="0.0824%" height="15" fill="rgb(213,116,39)" fg:x="28" fg:w="1"/><text x="2.5583%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="2.3083%" y="469" width="0.0824%" height="15" fill="rgb(222,207,29)" fg:x="28" fg:w="1"/><text x="2.5583%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="2.3083%" y="453" width="0.0824%" height="15" fill="rgb(206,96,30)" fg:x="28" fg:w="1"/><text x="2.5583%" y="463.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="2.3083%" y="437" width="0.0824%" height="15" fill="rgb(218,138,4)" fg:x="28" fg:w="1"/><text x="2.5583%" y="447.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="2.3083%" y="421" width="0.0824%" height="15" fill="rgb(250,191,14)" fg:x="28" fg:w="1"/><text x="2.5583%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.25%)</title><rect x="2.3083%" y="533" width="0.2473%" height="15" fill="rgb(239,60,40)" fg:x="28" fg:w="3"/><text x="2.5583%" y="543.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="2.3908%" y="517" width="0.1649%" height="15" fill="rgb(206,27,48)" fg:x="29" fg:w="2"/><text x="2.6408%" y="527.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="2.3908%" y="501" width="0.1649%" height="15" fill="rgb(225,35,8)" fg:x="29" fg:w="2"/><text x="2.6408%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="2.3908%" y="485" width="0.1649%" height="15" fill="rgb(250,213,24)" fg:x="29" fg:w="2"/><text x="2.6408%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="2.3908%" y="469" width="0.1649%" height="15" fill="rgb(247,123,22)" fg:x="29" fg:w="2"/><text x="2.6408%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="2.3908%" y="453" width="0.1649%" height="15" fill="rgb(231,138,38)" fg:x="29" fg:w="2"/><text x="2.6408%" y="463.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="2.3908%" y="437" width="0.1649%" height="15" fill="rgb(231,145,46)" fg:x="29" fg:w="2"/><text x="2.6408%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="2.3908%" y="421" width="0.1649%" height="15" fill="rgb(251,118,11)" fg:x="29" fg:w="2"/><text x="2.6408%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="2.3908%" y="405" width="0.1649%" height="15" fill="rgb(217,147,25)" fg:x="29" fg:w="2"/><text x="2.6408%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="2.3908%" y="389" width="0.1649%" height="15" fill="rgb(247,81,37)" fg:x="29" fg:w="2"/><text x="2.6408%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.16%)</title><rect x="2.3908%" y="373" width="0.1649%" height="15" fill="rgb(209,12,38)" fg:x="29" fg:w="2"/><text x="2.6408%" y="383.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="2.7205%" y="517" width="0.1649%" height="15" fill="rgb(227,1,9)" fg:x="33" fg:w="2"/><text x="2.9705%" y="527.50"></text></g><g><title>__asprintf (2 samples, 0.16%)</title><rect x="2.7205%" y="501" width="0.1649%" height="15" fill="rgb(248,47,43)" fg:x="33" fg:w="2"/><text x="2.9705%" y="511.50"></text></g><g><title>dlopen (16 samples, 1.32%)</title><rect x="2.8854%" y="517" width="1.3190%" height="15" fill="rgb(221,10,30)" fg:x="35" fg:w="16"/><text x="3.1354%" y="527.50"></text></g><g><title>_dl_catch_error (16 samples, 1.32%)</title><rect x="2.8854%" y="501" width="1.3190%" height="15" fill="rgb(210,229,1)" fg:x="35" fg:w="16"/><text x="3.1354%" y="511.50"></text></g><g><title>_dl_catch_exception (16 samples, 1.32%)</title><rect x="2.8854%" y="485" width="1.3190%" height="15" fill="rgb(222,148,37)" fg:x="35" fg:w="16"/><text x="3.1354%" y="495.50"></text></g><g><title>_dl_catch_exception (15 samples, 1.24%)</title><rect x="2.9678%" y="469" width="1.2366%" height="15" fill="rgb(234,67,33)" fg:x="36" fg:w="15"/><text x="3.2178%" y="479.50"></text></g><g><title>_dl_catch_exception (15 samples, 1.24%)</title><rect x="2.9678%" y="453" width="1.2366%" height="15" fill="rgb(247,98,35)" fg:x="36" fg:w="15"/><text x="3.2178%" y="463.50"></text></g><g><title>_dl_signal_error (1 samples, 0.08%)</title><rect x="4.1220%" y="437" width="0.0824%" height="15" fill="rgb(247,138,52)" fg:x="50" fg:w="1"/><text x="4.3720%" y="447.50"></text></g><g><title>libloading::safe::Library::new (21 samples, 1.73%)</title><rect x="2.5556%" y="533" width="1.7312%" height="15" fill="rgb(213,79,30)" fg:x="31" fg:w="21"/><text x="2.8056%" y="543.50"></text></g><g><title>libloading::util::cstr_cow_from_bytes (1 samples, 0.08%)</title><rect x="4.2045%" y="517" width="0.0824%" height="15" fill="rgb(246,177,23)" fg:x="51" fg:w="1"/><text x="4.4545%" y="527.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (25 samples, 2.06%)</title><rect x="2.3083%" y="549" width="2.0610%" height="15" fill="rgb(230,62,27)" fg:x="28" fg:w="25"/><text x="2.5583%" y="559.50">&lt;..</text></g><g><title>std::sys::unix::os_str::Slice::to_str (1 samples, 0.08%)</title><rect x="4.2869%" y="533" width="0.0824%" height="15" fill="rgb(216,154,8)" fg:x="52" fg:w="1"/><text x="4.5369%" y="543.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.08%)</title><rect x="4.3693%" y="549" width="0.0824%" height="15" fill="rgb(244,35,45)" fg:x="53" fg:w="1"/><text x="4.6193%" y="559.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.08%)</title><rect x="4.3693%" y="533" width="0.0824%" height="15" fill="rgb(251,115,12)" fg:x="53" fg:w="1"/><text x="4.6193%" y="543.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.08%)</title><rect x="4.3693%" y="517" width="0.0824%" height="15" fill="rgb(240,54,50)" fg:x="53" fg:w="1"/><text x="4.6193%" y="527.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (1 samples, 0.08%)</title><rect x="4.3693%" y="501" width="0.0824%" height="15" fill="rgb(233,84,52)" fg:x="53" fg:w="1"/><text x="4.6193%" y="511.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.08%)</title><rect x="4.3693%" y="485" width="0.0824%" height="15" fill="rgb(207,117,47)" fg:x="53" fg:w="1"/><text x="4.6193%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (1 samples, 0.08%)</title><rect x="4.3693%" y="469" width="0.0824%" height="15" fill="rgb(249,43,39)" fg:x="53" fg:w="1"/><text x="4.6193%" y="479.50"></text></g><g><title>core::cmp::PartialOrd::ge (1 samples, 0.08%)</title><rect x="4.3693%" y="453" width="0.0824%" height="15" fill="rgb(209,38,44)" fg:x="53" fg:w="1"/><text x="4.6193%" y="463.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.08%)</title><rect x="4.3693%" y="437" width="0.0824%" height="15" fill="rgb(236,212,23)" fg:x="53" fg:w="1"/><text x="4.6193%" y="447.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (28 samples, 2.31%)</title><rect x="2.3083%" y="565" width="2.3083%" height="15" fill="rgb(242,79,21)" fg:x="28" fg:w="28"/><text x="2.5583%" y="575.50">k..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="4.4518%" y="549" width="0.1649%" height="15" fill="rgb(211,96,35)" fg:x="54" fg:w="2"/><text x="4.7018%" y="559.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="4.4518%" y="533" width="0.1649%" height="15" fill="rgb(253,215,40)" fg:x="54" fg:w="2"/><text x="4.7018%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.6167%" y="533" width="0.0824%" height="15" fill="rgb(211,81,21)" fg:x="56" fg:w="1"/><text x="4.8667%" y="543.50"></text></g><g><title>engine::session::Session::initialize (31 samples, 2.56%)</title><rect x="2.3083%" y="581" width="2.5556%" height="15" fill="rgb(208,190,38)" fg:x="28" fg:w="31"/><text x="2.5583%" y="591.50">en..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (3 samples, 0.25%)</title><rect x="4.6167%" y="565" width="0.2473%" height="15" fill="rgb(235,213,38)" fg:x="56" fg:w="3"/><text x="4.8667%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.25%)</title><rect x="4.6167%" y="549" width="0.2473%" height="15" fill="rgb(237,122,38)" fg:x="56" fg:w="3"/><text x="4.8667%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="4.6991%" y="533" width="0.1649%" height="15" fill="rgb(244,218,35)" fg:x="57" fg:w="2"/><text x="4.9491%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="4.6991%" y="517" width="0.1649%" height="15" fill="rgb(240,68,47)" fg:x="57" fg:w="2"/><text x="4.9491%" y="527.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="4.6991%" y="501" width="0.1649%" height="15" fill="rgb(210,16,53)" fg:x="57" fg:w="2"/><text x="4.9491%" y="511.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="4.8640%" y="581" width="0.1649%" height="15" fill="rgb(235,124,12)" fg:x="59" fg:w="2"/><text x="5.1140%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="4.8640%" y="565" width="0.1649%" height="15" fill="rgb(224,169,11)" fg:x="59" fg:w="2"/><text x="5.1140%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.9464%" y="549" width="0.0824%" height="15" fill="rgb(250,166,2)" fg:x="60" fg:w="1"/><text x="5.1964%" y="559.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (38 samples, 3.13%)</title><rect x="1.9786%" y="629" width="3.1327%" height="15" fill="rgb(242,216,29)" fg:x="24" fg:w="38"/><text x="2.2286%" y="639.50">&lt;en..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (38 samples, 3.13%)</title><rect x="1.9786%" y="613" width="3.1327%" height="15" fill="rgb(230,116,27)" fg:x="24" fg:w="38"/><text x="2.2286%" y="623.50">eng..</text></g><g><title>engine::session::Session::new (38 samples, 3.13%)</title><rect x="1.9786%" y="597" width="3.1327%" height="15" fill="rgb(228,99,48)" fg:x="24" fg:w="38"/><text x="2.2286%" y="607.50">eng..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="5.0289%" y="581" width="0.0824%" height="15" fill="rgb(253,11,6)" fg:x="61" fg:w="1"/><text x="5.2789%" y="591.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="5.0289%" y="565" width="0.0824%" height="15" fill="rgb(247,143,39)" fg:x="61" fg:w="1"/><text x="5.2789%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::string::String,serde_json::value::Value,alloc::alloc::Global&gt;&gt; (1 samples, 0.08%)</title><rect x="5.1113%" y="581" width="0.0824%" height="15" fill="rgb(236,97,10)" fg:x="62" fg:w="1"/><text x="5.3613%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="5.1113%" y="613" width="0.1649%" height="15" fill="rgb(233,208,19)" fg:x="62" fg:w="2"/><text x="5.3613%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="5.1113%" y="597" width="0.1649%" height="15" fill="rgb(216,164,2)" fg:x="62" fg:w="2"/><text x="5.3613%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.1937%" y="581" width="0.0824%" height="15" fill="rgb(220,129,5)" fg:x="63" fg:w="1"/><text x="5.4437%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.1937%" y="565" width="0.0824%" height="15" fill="rgb(242,17,10)" fg:x="63" fg:w="1"/><text x="5.4437%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.1937%" y="549" width="0.0824%" height="15" fill="rgb(242,107,0)" fg:x="63" fg:w="1"/><text x="5.4437%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.1937%" y="533" width="0.0824%" height="15" fill="rgb(251,28,31)" fg:x="63" fg:w="1"/><text x="5.4437%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::BuildSurroundings&gt; (1 samples, 0.08%)</title><rect x="5.2762%" y="613" width="0.0824%" height="15" fill="rgb(233,223,10)" fg:x="64" fg:w="1"/><text x="5.5262%" y="623.50"></text></g><g><title>__libc_free (3 samples, 0.25%)</title><rect x="5.5235%" y="581" width="0.2473%" height="15" fill="rgb(215,21,27)" fg:x="67" fg:w="3"/><text x="5.7735%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (6 samples, 0.49%)</title><rect x="5.3586%" y="597" width="0.4946%" height="15" fill="rgb(232,23,21)" fg:x="65" fg:w="6"/><text x="5.6086%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.7708%" y="581" width="0.0824%" height="15" fill="rgb(244,5,23)" fg:x="70" fg:w="1"/><text x="6.0208%" y="591.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.8533%" y="565" width="0.0824%" height="15" fill="rgb(226,81,46)" fg:x="71" fg:w="1"/><text x="6.1033%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="5.8533%" y="549" width="0.0824%" height="15" fill="rgb(247,70,30)" fg:x="71" fg:w="1"/><text x="6.1033%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.8533%" y="533" width="0.0824%" height="15" fill="rgb(212,68,19)" fg:x="71" fg:w="1"/><text x="6.1033%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.9357%" y="533" width="0.0824%" height="15" fill="rgb(240,187,13)" fg:x="72" fg:w="1"/><text x="6.1857%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.9357%" y="517" width="0.0824%" height="15" fill="rgb(223,113,26)" fg:x="72" fg:w="1"/><text x="6.1857%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.9357%" y="501" width="0.0824%" height="15" fill="rgb(206,192,2)" fg:x="72" fg:w="1"/><text x="6.1857%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="6.1006%" y="517" width="0.1649%" height="15" fill="rgb(241,108,4)" fg:x="74" fg:w="2"/><text x="6.3506%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="6.1006%" y="501" width="0.1649%" height="15" fill="rgb(247,173,49)" fg:x="74" fg:w="2"/><text x="6.3506%" y="511.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="6.1006%" y="485" width="0.1649%" height="15" fill="rgb(224,114,35)" fg:x="74" fg:w="2"/><text x="6.3506%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="6.1830%" y="469" width="0.0824%" height="15" fill="rgb(245,159,27)" fg:x="75" fg:w="1"/><text x="6.4330%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.1830%" y="453" width="0.0824%" height="15" fill="rgb(245,172,44)" fg:x="75" fg:w="1"/><text x="6.4330%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.1830%" y="437" width="0.0824%" height="15" fill="rgb(236,23,11)" fg:x="75" fg:w="1"/><text x="6.4330%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.1830%" y="421" width="0.0824%" height="15" fill="rgb(205,117,38)" fg:x="75" fg:w="1"/><text x="6.4330%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.1830%" y="405" width="0.0824%" height="15" fill="rgb(237,72,25)" fg:x="75" fg:w="1"/><text x="6.4330%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.2655%" y="437" width="0.0824%" height="15" fill="rgb(244,70,9)" fg:x="76" fg:w="1"/><text x="6.5155%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.2655%" y="421" width="0.0824%" height="15" fill="rgb(217,125,39)" fg:x="76" fg:w="1"/><text x="6.5155%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.2655%" y="405" width="0.0824%" height="15" fill="rgb(235,36,10)" fg:x="76" fg:w="1"/><text x="6.5155%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.2655%" y="389" width="0.0824%" height="15" fill="rgb(251,123,47)" fg:x="76" fg:w="1"/><text x="6.5155%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.3479%" y="437" width="0.0824%" height="15" fill="rgb(221,13,13)" fg:x="77" fg:w="1"/><text x="6.5979%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.3479%" y="421" width="0.0824%" height="15" fill="rgb(238,131,9)" fg:x="77" fg:w="1"/><text x="6.5979%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.3479%" y="405" width="0.0824%" height="15" fill="rgb(211,50,8)" fg:x="77" fg:w="1"/><text x="6.5979%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.25%)</title><rect x="6.2655%" y="469" width="0.2473%" height="15" fill="rgb(245,182,24)" fg:x="76" fg:w="3"/><text x="6.5155%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="6.2655%" y="453" width="0.2473%" height="15" fill="rgb(242,14,37)" fg:x="76" fg:w="3"/><text x="6.5155%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.4303%" y="437" width="0.0824%" height="15" fill="rgb(246,228,12)" fg:x="78" fg:w="1"/><text x="6.6803%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.4303%" y="421" width="0.0824%" height="15" fill="rgb(213,55,15)" fg:x="78" fg:w="1"/><text x="6.6803%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.4303%" y="405" width="0.0824%" height="15" fill="rgb(209,9,3)" fg:x="78" fg:w="1"/><text x="6.6803%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.5128%" y="469" width="0.1649%" height="15" fill="rgb(230,59,30)" fg:x="79" fg:w="2"/><text x="6.7628%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.58%)</title><rect x="6.2655%" y="485" width="0.5771%" height="15" fill="rgb(209,121,21)" fg:x="76" fg:w="7"/><text x="6.5155%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="6.6777%" y="469" width="0.1649%" height="15" fill="rgb(220,109,13)" fg:x="81" fg:w="2"/><text x="6.9277%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.7601%" y="453" width="0.0824%" height="15" fill="rgb(232,18,1)" fg:x="82" fg:w="1"/><text x="7.0101%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.1723%" y="453" width="0.0824%" height="15" fill="rgb(215,41,42)" fg:x="87" fg:w="1"/><text x="7.4223%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (13 samples, 1.07%)</title><rect x="6.2655%" y="517" width="1.0717%" height="15" fill="rgb(224,123,36)" fg:x="76" fg:w="13"/><text x="6.5155%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.07%)</title><rect x="6.2655%" y="501" width="1.0717%" height="15" fill="rgb(240,125,3)" fg:x="76" fg:w="13"/><text x="6.5155%" y="511.50"></text></g><g><title>std::io::Write::write_all (6 samples, 0.49%)</title><rect x="6.8425%" y="485" width="0.4946%" height="15" fill="rgb(205,98,50)" fg:x="83" fg:w="6"/><text x="7.0925%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.33%)</title><rect x="7.0074%" y="469" width="0.3298%" height="15" fill="rgb(205,185,37)" fg:x="85" fg:w="4"/><text x="7.2574%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="7.2547%" y="453" width="0.0824%" height="15" fill="rgb(238,207,15)" fg:x="88" fg:w="1"/><text x="7.5047%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.3372%" y="469" width="0.0824%" height="15" fill="rgb(213,199,42)" fg:x="89" fg:w="1"/><text x="7.5872%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.4196%" y="469" width="0.0824%" height="15" fill="rgb(235,201,11)" fg:x="90" fg:w="1"/><text x="7.6696%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="7.5021%" y="453" width="0.1649%" height="15" fill="rgb(207,46,11)" fg:x="91" fg:w="2"/><text x="7.7521%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.6669%" y="453" width="0.0824%" height="15" fill="rgb(241,35,35)" fg:x="93" fg:w="1"/><text x="7.9169%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.58%)</title><rect x="7.3372%" y="517" width="0.5771%" height="15" fill="rgb(243,32,47)" fg:x="89" fg:w="7"/><text x="7.5872%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.58%)</title><rect x="7.3372%" y="501" width="0.5771%" height="15" fill="rgb(247,202,23)" fg:x="89" fg:w="7"/><text x="7.5872%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.58%)</title><rect x="7.3372%" y="485" width="0.5771%" height="15" fill="rgb(219,102,11)" fg:x="89" fg:w="7"/><text x="7.5872%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="7.5021%" y="469" width="0.4122%" height="15" fill="rgb(243,110,44)" fg:x="91" fg:w="5"/><text x="7.7521%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.7494%" y="453" width="0.1649%" height="15" fill="rgb(222,74,54)" fg:x="94" fg:w="2"/><text x="7.9994%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="7.8318%" y="437" width="0.0824%" height="15" fill="rgb(216,99,12)" fg:x="95" fg:w="1"/><text x="8.0818%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.8318%" y="421" width="0.0824%" height="15" fill="rgb(226,22,26)" fg:x="95" fg:w="1"/><text x="8.0818%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.8318%" y="405" width="0.0824%" height="15" fill="rgb(217,163,10)" fg:x="95" fg:w="1"/><text x="8.0818%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.8318%" y="389" width="0.0824%" height="15" fill="rgb(213,25,53)" fg:x="95" fg:w="1"/><text x="8.0818%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.8318%" y="373" width="0.0824%" height="15" fill="rgb(252,105,26)" fg:x="95" fg:w="1"/><text x="8.0818%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.9967%" y="469" width="0.1649%" height="15" fill="rgb(220,39,43)" fg:x="97" fg:w="2"/><text x="8.2467%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.0791%" y="453" width="0.0824%" height="15" fill="rgb(229,68,48)" fg:x="98" fg:w="1"/><text x="8.3291%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="8.0791%" y="437" width="0.0824%" height="15" fill="rgb(252,8,32)" fg:x="98" fg:w="1"/><text x="8.3291%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="8.1616%" y="469" width="0.0824%" height="15" fill="rgb(223,20,43)" fg:x="99" fg:w="1"/><text x="8.4116%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.1616%" y="453" width="0.0824%" height="15" fill="rgb(229,81,49)" fg:x="99" fg:w="1"/><text x="8.4116%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="8.2440%" y="453" width="0.1649%" height="15" fill="rgb(236,28,36)" fg:x="100" fg:w="2"/><text x="8.4940%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.2440%" y="437" width="0.1649%" height="15" fill="rgb(249,185,26)" fg:x="100" fg:w="2"/><text x="8.4940%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.3265%" y="421" width="0.0824%" height="15" fill="rgb(249,174,33)" fg:x="101" fg:w="1"/><text x="8.5765%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (3 samples, 0.25%)</title><rect x="8.2440%" y="469" width="0.2473%" height="15" fill="rgb(233,201,37)" fg:x="100" fg:w="3"/><text x="8.4940%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="8.4089%" y="453" width="0.0824%" height="15" fill="rgb(221,78,26)" fg:x="102" fg:w="1"/><text x="8.6589%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4913%" y="469" width="0.0824%" height="15" fill="rgb(250,127,30)" fg:x="103" fg:w="1"/><text x="8.7413%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.7387%" y="421" width="0.0824%" height="15" fill="rgb(230,49,44)" fg:x="106" fg:w="1"/><text x="8.9887%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.1509%" y="389" width="0.0824%" height="15" fill="rgb(229,67,23)" fg:x="111" fg:w="1"/><text x="9.4009%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.1509%" y="373" width="0.0824%" height="15" fill="rgb(249,83,47)" fg:x="111" fg:w="1"/><text x="9.4009%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.1509%" y="357" width="0.0824%" height="15" fill="rgb(215,43,3)" fg:x="111" fg:w="1"/><text x="9.4009%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.3157%" y="357" width="0.1649%" height="15" fill="rgb(238,154,13)" fg:x="113" fg:w="2"/><text x="9.5657%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.3982%" y="341" width="0.0824%" height="15" fill="rgb(219,56,2)" fg:x="114" fg:w="1"/><text x="9.6482%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.58%)</title><rect x="8.9860%" y="405" width="0.5771%" height="15" fill="rgb(233,0,4)" fg:x="109" fg:w="7"/><text x="9.2360%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="9.2333%" y="389" width="0.3298%" height="15" fill="rgb(235,30,7)" fg:x="112" fg:w="4"/><text x="9.4833%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="9.3157%" y="373" width="0.2473%" height="15" fill="rgb(250,79,13)" fg:x="113" fg:w="3"/><text x="9.5657%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.4806%" y="357" width="0.0824%" height="15" fill="rgb(211,146,34)" fg:x="115" fg:w="1"/><text x="9.7306%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (11 samples, 0.91%)</title><rect x="8.7387%" y="453" width="0.9068%" height="15" fill="rgb(228,22,38)" fg:x="106" fg:w="11"/><text x="8.9887%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.91%)</title><rect x="8.7387%" y="437" width="0.9068%" height="15" fill="rgb(235,168,5)" fg:x="106" fg:w="11"/><text x="8.9887%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (10 samples, 0.82%)</title><rect x="8.8211%" y="421" width="0.8244%" height="15" fill="rgb(221,155,16)" fg:x="107" fg:w="10"/><text x="9.0711%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.5631%" y="405" width="0.0824%" height="15" fill="rgb(215,215,53)" fg:x="116" fg:w="1"/><text x="9.8131%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.6455%" y="453" width="0.0824%" height="15" fill="rgb(223,4,10)" fg:x="117" fg:w="1"/><text x="9.8955%" y="463.50"></text></g><g><title>engine::session::Session::flush (54 samples, 4.45%)</title><rect x="5.3586%" y="613" width="4.4518%" height="15" fill="rgb(234,103,6)" fg:x="65" fg:w="54"/><text x="5.6086%" y="623.50">engin..</text></g><g><title>engine::session::state::State::close (48 samples, 3.96%)</title><rect x="5.8533%" y="597" width="3.9571%" height="15" fill="rgb(227,97,0)" fg:x="71" fg:w="48"/><text x="6.1033%" y="607.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (48 samples, 3.96%)</title><rect x="5.8533%" y="581" width="3.9571%" height="15" fill="rgb(234,150,53)" fg:x="71" fg:w="48"/><text x="6.1033%" y="591.50">engi..</text></g><g><title>core::iter::adapters::try_process (47 samples, 3.87%)</title><rect x="5.9357%" y="565" width="3.8747%" height="15" fill="rgb(228,201,54)" fg:x="72" fg:w="47"/><text x="6.1857%" y="575.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (47 samples, 3.87%)</title><rect x="5.9357%" y="549" width="3.8747%" height="15" fill="rgb(222,22,37)" fg:x="72" fg:w="47"/><text x="6.1857%" y="559.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (46 samples, 3.79%)</title><rect x="6.0181%" y="533" width="3.7923%" height="15" fill="rgb(237,53,32)" fg:x="73" fg:w="46"/><text x="6.2681%" y="543.50">engi..</text></g><g><title>kernel::model::any_entity_changes (23 samples, 1.90%)</title><rect x="7.9143%" y="517" width="1.8961%" height="15" fill="rgb(233,25,53)" fg:x="96" fg:w="23"/><text x="8.1643%" y="527.50">k..</text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (23 samples, 1.90%)</title><rect x="7.9143%" y="501" width="1.8961%" height="15" fill="rgb(210,40,34)" fg:x="96" fg:w="23"/><text x="8.1643%" y="511.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (23 samples, 1.90%)</title><rect x="7.9143%" y="485" width="1.8961%" height="15" fill="rgb(241,220,44)" fg:x="96" fg:w="23"/><text x="8.1643%" y="495.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (15 samples, 1.24%)</title><rect x="8.5738%" y="469" width="1.2366%" height="15" fill="rgb(235,28,35)" fg:x="104" fg:w="15"/><text x="8.8238%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7279%" y="453" width="0.0824%" height="15" fill="rgb(210,56,17)" fg:x="118" fg:w="1"/><text x="9.9779%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7279%" y="437" width="0.0824%" height="15" fill="rgb(224,130,29)" fg:x="118" fg:w="1"/><text x="9.9779%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="9.7279%" y="421" width="0.0824%" height="15" fill="rgb(235,212,8)" fg:x="118" fg:w="1"/><text x="9.9779%" y="431.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="9.8104%" y="613" width="0.0824%" height="15" fill="rgb(223,33,50)" fg:x="119" fg:w="1"/><text x="10.0604%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="9.8104%" y="597" width="0.0824%" height="15" fill="rgb(219,149,13)" fg:x="119" fg:w="1"/><text x="10.0604%" y="607.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="9.8104%" y="581" width="0.0824%" height="15" fill="rgb(250,156,29)" fg:x="119" fg:w="1"/><text x="10.0604%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="9.8104%" y="565" width="0.0824%" height="15" fill="rgb(216,193,19)" fg:x="119" fg:w="1"/><text x="10.0604%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.8104%" y="549" width="0.0824%" height="15" fill="rgb(216,135,14)" fg:x="119" fg:w="1"/><text x="10.0604%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="9.8104%" y="533" width="0.0824%" height="15" fill="rgb(241,47,5)" fg:x="119" fg:w="1"/><text x="10.0604%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8104%" y="517" width="0.0824%" height="15" fill="rgb(233,42,35)" fg:x="119" fg:w="1"/><text x="10.0604%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8104%" y="501" width="0.0824%" height="15" fill="rgb(231,13,6)" fg:x="119" fg:w="1"/><text x="10.0604%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.8104%" y="485" width="0.0824%" height="15" fill="rgb(207,181,40)" fg:x="119" fg:w="1"/><text x="10.0604%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.9753%" y="501" width="0.0824%" height="15" fill="rgb(254,173,49)" fg:x="121" fg:w="1"/><text x="10.2253%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.25%)</title><rect x="9.8928%" y="581" width="0.2473%" height="15" fill="rgb(221,1,38)" fg:x="120" fg:w="3"/><text x="10.1428%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="9.9753%" y="565" width="0.1649%" height="15" fill="rgb(206,124,46)" fg:x="121" fg:w="2"/><text x="10.2253%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="9.9753%" y="549" width="0.1649%" height="15" fill="rgb(249,21,11)" fg:x="121" fg:w="2"/><text x="10.2253%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="9.9753%" y="533" width="0.1649%" height="15" fill="rgb(222,201,40)" fg:x="121" fg:w="2"/><text x="10.2253%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="9.9753%" y="517" width="0.1649%" height="15" fill="rgb(235,61,29)" fg:x="121" fg:w="2"/><text x="10.2253%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.0577%" y="501" width="0.0824%" height="15" fill="rgb(219,207,3)" fg:x="122" fg:w="1"/><text x="10.3077%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.0577%" y="485" width="0.0824%" height="15" fill="rgb(222,56,46)" fg:x="122" fg:w="1"/><text x="10.3077%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.0577%" y="469" width="0.0824%" height="15" fill="rgb(239,76,54)" fg:x="122" fg:w="1"/><text x="10.3077%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.0577%" y="453" width="0.0824%" height="15" fill="rgb(231,124,27)" fg:x="122" fg:w="1"/><text x="10.3077%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.0577%" y="437" width="0.0824%" height="15" fill="rgb(249,195,6)" fg:x="122" fg:w="1"/><text x="10.3077%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.0577%" y="421" width="0.0824%" height="15" fill="rgb(237,174,47)" fg:x="122" fg:w="1"/><text x="10.3077%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.0577%" y="405" width="0.0824%" height="15" fill="rgb(206,201,31)" fg:x="122" fg:w="1"/><text x="10.3077%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.0577%" y="389" width="0.0824%" height="15" fill="rgb(231,57,52)" fg:x="122" fg:w="1"/><text x="10.3077%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.0577%" y="373" width="0.0824%" height="15" fill="rgb(248,177,22)" fg:x="122" fg:w="1"/><text x="10.3077%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.0577%" y="357" width="0.0824%" height="15" fill="rgb(215,211,37)" fg:x="122" fg:w="1"/><text x="10.3077%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.0577%" y="341" width="0.0824%" height="15" fill="rgb(241,128,51)" fg:x="122" fg:w="1"/><text x="10.3077%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.0577%" y="325" width="0.0824%" height="15" fill="rgb(227,165,31)" fg:x="122" fg:w="1"/><text x="10.3077%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.1401%" y="549" width="0.0824%" height="15" fill="rgb(228,167,24)" fg:x="123" fg:w="1"/><text x="10.3901%" y="559.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="10.1401%" y="565" width="0.1649%" height="15" fill="rgb(228,143,12)" fg:x="123" fg:w="2"/><text x="10.3901%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.2226%" y="549" width="0.0824%" height="15" fill="rgb(249,149,8)" fg:x="124" fg:w="1"/><text x="10.4726%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.2226%" y="533" width="0.0824%" height="15" fill="rgb(243,35,44)" fg:x="124" fg:w="1"/><text x="10.4726%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.2226%" y="517" width="0.0824%" height="15" fill="rgb(246,89,9)" fg:x="124" fg:w="1"/><text x="10.4726%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.2226%" y="501" width="0.0824%" height="15" fill="rgb(233,213,13)" fg:x="124" fg:w="1"/><text x="10.4726%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="10.2226%" y="485" width="0.0824%" height="15" fill="rgb(233,141,41)" fg:x="124" fg:w="1"/><text x="10.4726%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="10.3050%" y="533" width="0.0824%" height="15" fill="rgb(239,167,4)" fg:x="125" fg:w="1"/><text x="10.5550%" y="543.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (4 samples, 0.33%)</title><rect x="10.1401%" y="581" width="0.3298%" height="15" fill="rgb(209,217,16)" fg:x="123" fg:w="4"/><text x="10.3901%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="10.3050%" y="565" width="0.1649%" height="15" fill="rgb(219,88,35)" fg:x="125" fg:w="2"/><text x="10.5550%" y="575.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (2 samples, 0.16%)</title><rect x="10.3050%" y="549" width="0.1649%" height="15" fill="rgb(220,193,23)" fg:x="125" fg:w="2"/><text x="10.5550%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.3875%" y="533" width="0.0824%" height="15" fill="rgb(230,90,52)" fg:x="126" fg:w="1"/><text x="10.6375%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3875%" y="517" width="0.0824%" height="15" fill="rgb(252,106,19)" fg:x="126" fg:w="1"/><text x="10.6375%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="10.4699%" y="565" width="0.0824%" height="15" fill="rgb(206,74,20)" fg:x="127" fg:w="1"/><text x="10.7199%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="10.4699%" y="549" width="0.0824%" height="15" fill="rgb(230,138,44)" fg:x="127" fg:w="1"/><text x="10.7199%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="10.4699%" y="533" width="0.0824%" height="15" fill="rgb(235,182,43)" fg:x="127" fg:w="1"/><text x="10.7199%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="10.4699%" y="517" width="0.0824%" height="15" fill="rgb(242,16,51)" fg:x="127" fg:w="1"/><text x="10.7199%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.4699%" y="501" width="0.0824%" height="15" fill="rgb(248,9,4)" fg:x="127" fg:w="1"/><text x="10.7199%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="10.4699%" y="485" width="0.0824%" height="15" fill="rgb(210,31,22)" fg:x="127" fg:w="1"/><text x="10.7199%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.4699%" y="469" width="0.0824%" height="15" fill="rgb(239,54,39)" fg:x="127" fg:w="1"/><text x="10.7199%" y="479.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="10.5523%" y="565" width="0.0824%" height="15" fill="rgb(230,99,41)" fg:x="128" fg:w="1"/><text x="10.8023%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.5523%" y="549" width="0.0824%" height="15" fill="rgb(253,106,12)" fg:x="128" fg:w="1"/><text x="10.8023%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.5523%" y="533" width="0.0824%" height="15" fill="rgb(213,46,41)" fg:x="128" fg:w="1"/><text x="10.8023%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.5523%" y="517" width="0.0824%" height="15" fill="rgb(215,133,35)" fg:x="128" fg:w="1"/><text x="10.8023%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.5523%" y="501" width="0.0824%" height="15" fill="rgb(213,28,5)" fg:x="128" fg:w="1"/><text x="10.8023%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.5523%" y="485" width="0.0824%" height="15" fill="rgb(215,77,49)" fg:x="128" fg:w="1"/><text x="10.8023%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.5523%" y="469" width="0.0824%" height="15" fill="rgb(248,100,22)" fg:x="128" fg:w="1"/><text x="10.8023%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.5523%" y="453" width="0.0824%" height="15" fill="rgb(208,67,9)" fg:x="128" fg:w="1"/><text x="10.8023%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.5523%" y="437" width="0.0824%" height="15" fill="rgb(219,133,21)" fg:x="128" fg:w="1"/><text x="10.8023%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.5523%" y="421" width="0.0824%" height="15" fill="rgb(246,46,29)" fg:x="128" fg:w="1"/><text x="10.8023%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.5523%" y="405" width="0.0824%" height="15" fill="rgb(246,185,52)" fg:x="128" fg:w="1"/><text x="10.8023%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.5523%" y="389" width="0.0824%" height="15" fill="rgb(252,136,11)" fg:x="128" fg:w="1"/><text x="10.8023%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.5523%" y="373" width="0.0824%" height="15" fill="rgb(219,138,53)" fg:x="128" fg:w="1"/><text x="10.8023%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.6348%" y="533" width="0.1649%" height="15" fill="rgb(211,51,23)" fg:x="129" fg:w="2"/><text x="10.8848%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="10.7997%" y="533" width="0.0824%" height="15" fill="rgb(247,221,28)" fg:x="131" fg:w="1"/><text x="11.0497%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="10.7997%" y="517" width="0.0824%" height="15" fill="rgb(251,222,45)" fg:x="131" fg:w="1"/><text x="11.0497%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (13 samples, 1.07%)</title><rect x="9.8928%" y="597" width="1.0717%" height="15" fill="rgb(217,162,53)" fg:x="120" fg:w="13"/><text x="10.1428%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.49%)</title><rect x="10.4699%" y="581" width="0.4946%" height="15" fill="rgb(229,93,14)" fg:x="127" fg:w="6"/><text x="10.7199%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.33%)</title><rect x="10.6348%" y="565" width="0.3298%" height="15" fill="rgb(209,67,49)" fg:x="129" fg:w="4"/><text x="10.8848%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.33%)</title><rect x="10.6348%" y="549" width="0.3298%" height="15" fill="rgb(213,87,29)" fg:x="129" fg:w="4"/><text x="10.8848%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="10.8821%" y="533" width="0.0824%" height="15" fill="rgb(205,151,52)" fg:x="132" fg:w="1"/><text x="11.1321%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.8821%" y="517" width="0.0824%" height="15" fill="rgb(253,215,39)" fg:x="132" fg:w="1"/><text x="11.1321%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.9646%" y="597" width="0.0824%" height="15" fill="rgb(221,220,41)" fg:x="133" fg:w="1"/><text x="11.2146%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.9646%" y="581" width="0.0824%" height="15" fill="rgb(218,133,21)" fg:x="133" fg:w="1"/><text x="11.2146%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.9646%" y="565" width="0.0824%" height="15" fill="rgb(221,193,43)" fg:x="133" fg:w="1"/><text x="11.2146%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.0470%" y="485" width="0.0824%" height="15" fill="rgb(240,128,52)" fg:x="134" fg:w="1"/><text x="11.2970%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.0470%" y="469" width="0.0824%" height="15" fill="rgb(253,114,12)" fg:x="134" fg:w="1"/><text x="11.2970%" y="479.50"></text></g><g><title>plugins_core::build::Build::save (16 samples, 1.32%)</title><rect x="9.8928%" y="613" width="1.3190%" height="15" fill="rgb(215,223,47)" fg:x="120" fg:w="16"/><text x="10.1428%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="11.0470%" y="597" width="0.1649%" height="15" fill="rgb(248,225,23)" fg:x="134" fg:w="2"/><text x="11.2970%" y="607.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="11.0470%" y="581" width="0.1649%" height="15" fill="rgb(250,108,0)" fg:x="134" fg:w="2"/><text x="11.2970%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="11.0470%" y="565" width="0.1649%" height="15" fill="rgb(228,208,7)" fg:x="134" fg:w="2"/><text x="11.2970%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="11.0470%" y="549" width="0.1649%" height="15" fill="rgb(244,45,10)" fg:x="134" fg:w="2"/><text x="11.2970%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.0470%" y="533" width="0.1649%" height="15" fill="rgb(207,125,25)" fg:x="134" fg:w="2"/><text x="11.2970%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="11.0470%" y="517" width="0.1649%" height="15" fill="rgb(210,195,18)" fg:x="134" fg:w="2"/><text x="11.2970%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.0470%" y="501" width="0.1649%" height="15" fill="rgb(249,80,12)" fg:x="134" fg:w="2"/><text x="11.2970%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.1294%" y="485" width="0.0824%" height="15" fill="rgb(221,65,9)" fg:x="135" fg:w="1"/><text x="11.3794%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.1294%" y="469" width="0.0824%" height="15" fill="rgb(235,49,36)" fg:x="135" fg:w="1"/><text x="11.3794%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="11.2943%" y="565" width="0.0824%" height="15" fill="rgb(225,32,20)" fg:x="137" fg:w="1"/><text x="11.5443%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.2943%" y="549" width="0.0824%" height="15" fill="rgb(215,141,46)" fg:x="137" fg:w="1"/><text x="11.5443%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (4 samples, 0.33%)</title><rect x="11.2119%" y="613" width="0.3298%" height="15" fill="rgb(250,160,47)" fg:x="136" fg:w="4"/><text x="11.4619%" y="623.50"></text></g><g><title>plugins_core::tools::set_quantity (4 samples, 0.33%)</title><rect x="11.2119%" y="597" width="0.3298%" height="15" fill="rgb(216,222,40)" fg:x="136" fg:w="4"/><text x="11.4619%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.25%)</title><rect x="11.2943%" y="581" width="0.2473%" height="15" fill="rgb(234,217,39)" fg:x="137" fg:w="3"/><text x="11.5443%" y="591.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (2 samples, 0.16%)</title><rect x="11.3768%" y="565" width="0.1649%" height="15" fill="rgb(207,178,40)" fg:x="138" fg:w="2"/><text x="11.6268%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="11.3768%" y="549" width="0.1649%" height="15" fill="rgb(221,136,13)" fg:x="138" fg:w="2"/><text x="11.6268%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (2 samples, 0.16%)</title><rect x="11.3768%" y="533" width="0.1649%" height="15" fill="rgb(249,199,10)" fg:x="138" fg:w="2"/><text x="11.6268%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="11.3768%" y="517" width="0.1649%" height="15" fill="rgb(249,222,13)" fg:x="138" fg:w="2"/><text x="11.6268%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="11.3768%" y="501" width="0.1649%" height="15" fill="rgb(244,185,38)" fg:x="138" fg:w="2"/><text x="11.6268%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="11.3768%" y="485" width="0.1649%" height="15" fill="rgb(236,202,9)" fg:x="138" fg:w="2"/><text x="11.6268%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="11.3768%" y="469" width="0.1649%" height="15" fill="rgb(250,229,37)" fg:x="138" fg:w="2"/><text x="11.6268%" y="479.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="11.5416%" y="581" width="0.0824%" height="15" fill="rgb(206,174,23)" fg:x="140" fg:w="1"/><text x="11.7916%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="11.5416%" y="565" width="0.0824%" height="15" fill="rgb(211,33,43)" fg:x="140" fg:w="1"/><text x="11.7916%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.5416%" y="549" width="0.0824%" height="15" fill="rgb(245,58,50)" fg:x="140" fg:w="1"/><text x="11.7916%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.5416%" y="533" width="0.0824%" height="15" fill="rgb(244,68,36)" fg:x="140" fg:w="1"/><text x="11.7916%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.5416%" y="517" width="0.0824%" height="15" fill="rgb(232,229,15)" fg:x="140" fg:w="1"/><text x="11.7916%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.5416%" y="501" width="0.0824%" height="15" fill="rgb(254,30,23)" fg:x="140" fg:w="1"/><text x="11.7916%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.5416%" y="485" width="0.0824%" height="15" fill="rgb(235,160,14)" fg:x="140" fg:w="1"/><text x="11.7916%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.5416%" y="469" width="0.0824%" height="15" fill="rgb(212,155,44)" fg:x="140" fg:w="1"/><text x="11.7916%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.5416%" y="453" width="0.0824%" height="15" fill="rgb(226,2,50)" fg:x="140" fg:w="1"/><text x="11.7916%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.5416%" y="437" width="0.0824%" height="15" fill="rgb(234,177,6)" fg:x="140" fg:w="1"/><text x="11.7916%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.5416%" y="421" width="0.0824%" height="15" fill="rgb(217,24,9)" fg:x="140" fg:w="1"/><text x="11.7916%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.5416%" y="405" width="0.0824%" height="15" fill="rgb(220,13,46)" fg:x="140" fg:w="1"/><text x="11.7916%" y="415.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.6241%" y="581" width="0.0824%" height="15" fill="rgb(239,221,27)" fg:x="141" fg:w="1"/><text x="11.8741%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="11.6241%" y="565" width="0.0824%" height="15" fill="rgb(222,198,25)" fg:x="141" fg:w="1"/><text x="11.8741%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.7065%" y="565" width="0.0824%" height="15" fill="rgb(211,99,13)" fg:x="142" fg:w="1"/><text x="11.9565%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.7065%" y="549" width="0.0824%" height="15" fill="rgb(232,111,31)" fg:x="142" fg:w="1"/><text x="11.9565%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.7065%" y="533" width="0.0824%" height="15" fill="rgb(245,82,37)" fg:x="142" fg:w="1"/><text x="11.9565%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.7065%" y="517" width="0.0824%" height="15" fill="rgb(227,149,46)" fg:x="142" fg:w="1"/><text x="11.9565%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.7065%" y="501" width="0.0824%" height="15" fill="rgb(218,36,50)" fg:x="142" fg:w="1"/><text x="11.9565%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.7065%" y="485" width="0.0824%" height="15" fill="rgb(226,80,48)" fg:x="142" fg:w="1"/><text x="11.9565%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.7065%" y="469" width="0.0824%" height="15" fill="rgb(238,224,15)" fg:x="142" fg:w="1"/><text x="11.9565%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.7065%" y="453" width="0.0824%" height="15" fill="rgb(241,136,10)" fg:x="142" fg:w="1"/><text x="11.9565%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.7065%" y="437" width="0.0824%" height="15" fill="rgb(208,32,45)" fg:x="142" fg:w="1"/><text x="11.9565%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.7065%" y="421" width="0.0824%" height="15" fill="rgb(207,135,9)" fg:x="142" fg:w="1"/><text x="11.9565%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.7065%" y="405" width="0.0824%" height="15" fill="rgb(206,86,44)" fg:x="142" fg:w="1"/><text x="11.9565%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.7065%" y="389" width="0.0824%" height="15" fill="rgb(245,177,15)" fg:x="142" fg:w="1"/><text x="11.9565%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.7065%" y="373" width="0.0824%" height="15" fill="rgb(206,64,50)" fg:x="142" fg:w="1"/><text x="11.9565%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.7065%" y="357" width="0.0824%" height="15" fill="rgb(234,36,40)" fg:x="142" fg:w="1"/><text x="11.9565%" y="367.50"></text></g><g><title>kernel::model::props::Props::property_named (2 samples, 0.16%)</title><rect x="11.7890%" y="517" width="0.1649%" height="15" fill="rgb(213,64,8)" fg:x="143" fg:w="2"/><text x="12.0390%" y="527.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.33%)</title><rect x="11.7065%" y="581" width="0.3298%" height="15" fill="rgb(210,75,36)" fg:x="142" fg:w="4"/><text x="11.9565%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.25%)</title><rect x="11.7890%" y="565" width="0.2473%" height="15" fill="rgb(229,88,21)" fg:x="143" fg:w="3"/><text x="12.0390%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.25%)</title><rect x="11.7890%" y="549" width="0.2473%" height="15" fill="rgb(252,204,47)" fg:x="143" fg:w="3"/><text x="12.0390%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.25%)</title><rect x="11.7890%" y="533" width="0.2473%" height="15" fill="rgb(208,77,27)" fg:x="143" fg:w="3"/><text x="12.0390%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.9538%" y="517" width="0.0824%" height="15" fill="rgb(221,76,26)" fg:x="145" fg:w="1"/><text x="12.2038%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.9538%" y="501" width="0.0824%" height="15" fill="rgb(225,139,18)" fg:x="145" fg:w="1"/><text x="12.2038%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.9538%" y="485" width="0.0824%" height="15" fill="rgb(230,137,11)" fg:x="145" fg:w="1"/><text x="12.2038%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.9538%" y="469" width="0.0824%" height="15" fill="rgb(212,28,1)" fg:x="145" fg:w="1"/><text x="12.2038%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.9538%" y="453" width="0.0824%" height="15" fill="rgb(248,164,17)" fg:x="145" fg:w="1"/><text x="12.2038%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.9538%" y="437" width="0.0824%" height="15" fill="rgb(222,171,42)" fg:x="145" fg:w="1"/><text x="12.2038%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.9538%" y="421" width="0.0824%" height="15" fill="rgb(243,84,45)" fg:x="145" fg:w="1"/><text x="12.2038%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.9538%" y="405" width="0.0824%" height="15" fill="rgb(252,49,23)" fg:x="145" fg:w="1"/><text x="12.2038%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.9538%" y="389" width="0.0824%" height="15" fill="rgb(215,19,7)" fg:x="145" fg:w="1"/><text x="12.2038%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.9538%" y="373" width="0.0824%" height="15" fill="rgb(238,81,41)" fg:x="145" fg:w="1"/><text x="12.2038%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.9538%" y="357" width="0.0824%" height="15" fill="rgb(210,199,37)" fg:x="145" fg:w="1"/><text x="12.2038%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.9538%" y="341" width="0.0824%" height="15" fill="rgb(244,192,49)" fg:x="145" fg:w="1"/><text x="12.2038%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.9538%" y="325" width="0.0824%" height="15" fill="rgb(226,211,11)" fg:x="145" fg:w="1"/><text x="12.2038%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.9538%" y="309" width="0.0824%" height="15" fill="rgb(236,162,54)" fg:x="145" fg:w="1"/><text x="12.2038%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.9538%" y="293" width="0.0824%" height="15" fill="rgb(220,229,9)" fg:x="145" fg:w="1"/><text x="12.2038%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.9538%" y="277" width="0.0824%" height="15" fill="rgb(250,87,22)" fg:x="145" fg:w="1"/><text x="12.2038%" y="287.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (8 samples, 0.66%)</title><rect x="11.5416%" y="613" width="0.6595%" height="15" fill="rgb(239,43,17)" fg:x="140" fg:w="8"/><text x="11.7916%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (8 samples, 0.66%)</title><rect x="11.5416%" y="597" width="0.6595%" height="15" fill="rgb(231,177,25)" fg:x="140" fg:w="8"/><text x="11.7916%" y="607.50"></text></g><g><title>plugins_core::location::Location::set (2 samples, 0.16%)</title><rect x="12.0363%" y="581" width="0.1649%" height="15" fill="rgb(219,179,1)" fg:x="146" fg:w="2"/><text x="12.2863%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="12.1187%" y="565" width="0.0824%" height="15" fill="rgb(238,219,53)" fg:x="147" fg:w="1"/><text x="12.3687%" y="575.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="12.1187%" y="549" width="0.0824%" height="15" fill="rgb(232,167,36)" fg:x="147" fg:w="1"/><text x="12.3687%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.1187%" y="533" width="0.0824%" height="15" fill="rgb(244,19,51)" fg:x="147" fg:w="1"/><text x="12.3687%" y="543.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="12.1187%" y="517" width="0.0824%" height="15" fill="rgb(224,6,22)" fg:x="147" fg:w="1"/><text x="12.3687%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.1187%" y="501" width="0.0824%" height="15" fill="rgb(224,145,5)" fg:x="147" fg:w="1"/><text x="12.3687%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.1187%" y="485" width="0.0824%" height="15" fill="rgb(234,130,49)" fg:x="147" fg:w="1"/><text x="12.3687%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.1187%" y="469" width="0.0824%" height="15" fill="rgb(254,6,2)" fg:x="147" fg:w="1"/><text x="12.3687%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1187%" y="453" width="0.0824%" height="15" fill="rgb(208,96,46)" fg:x="147" fg:w="1"/><text x="12.3687%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.3660%" y="597" width="0.0824%" height="15" fill="rgb(239,3,39)" fg:x="150" fg:w="1"/><text x="12.6160%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.3660%" y="581" width="0.0824%" height="15" fill="rgb(233,210,1)" fg:x="150" fg:w="1"/><text x="12.6160%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="12.4485%" y="597" width="0.1649%" height="15" fill="rgb(244,137,37)" fg:x="151" fg:w="2"/><text x="12.6985%" y="607.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="12.4485%" y="581" width="0.1649%" height="15" fill="rgb(240,136,2)" fg:x="151" fg:w="2"/><text x="12.6985%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="12.5309%" y="565" width="0.0824%" height="15" fill="rgb(239,18,37)" fg:x="152" fg:w="1"/><text x="12.7809%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.5309%" y="549" width="0.0824%" height="15" fill="rgb(218,185,22)" fg:x="152" fg:w="1"/><text x="12.7809%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="12.5309%" y="533" width="0.0824%" height="15" fill="rgb(225,218,4)" fg:x="152" fg:w="1"/><text x="12.7809%" y="543.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="12.5309%" y="517" width="0.0824%" height="15" fill="rgb(230,182,32)" fg:x="152" fg:w="1"/><text x="12.7809%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="12.6134%" y="597" width="0.0824%" height="15" fill="rgb(242,56,43)" fg:x="153" fg:w="1"/><text x="12.8634%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.6134%" y="581" width="0.0824%" height="15" fill="rgb(233,99,24)" fg:x="153" fg:w="1"/><text x="12.8634%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="12.7782%" y="581" width="0.0824%" height="15" fill="rgb(234,209,42)" fg:x="155" fg:w="1"/><text x="13.0282%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.7782%" y="565" width="0.0824%" height="15" fill="rgb(227,7,12)" fg:x="155" fg:w="1"/><text x="13.0282%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.7782%" y="549" width="0.0824%" height="15" fill="rgb(245,203,43)" fg:x="155" fg:w="1"/><text x="13.0282%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="12.7782%" y="533" width="0.0824%" height="15" fill="rgb(238,205,33)" fg:x="155" fg:w="1"/><text x="13.0282%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="13.1904%" y="485" width="0.0824%" height="15" fill="rgb(231,56,7)" fg:x="160" fg:w="1"/><text x="13.4404%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="13.1904%" y="469" width="0.0824%" height="15" fill="rgb(244,186,29)" fg:x="160" fg:w="1"/><text x="13.4404%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="13.1904%" y="453" width="0.0824%" height="15" fill="rgb(234,111,31)" fg:x="160" fg:w="1"/><text x="13.4404%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="13.1904%" y="437" width="0.0824%" height="15" fill="rgb(241,149,10)" fg:x="160" fg:w="1"/><text x="13.4404%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.1904%" y="421" width="0.0824%" height="15" fill="rgb(249,206,44)" fg:x="160" fg:w="1"/><text x="13.4404%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.1904%" y="405" width="0.0824%" height="15" fill="rgb(251,153,30)" fg:x="160" fg:w="1"/><text x="13.4404%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.1904%" y="389" width="0.0824%" height="15" fill="rgb(239,152,38)" fg:x="160" fg:w="1"/><text x="13.4404%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.1904%" y="373" width="0.0824%" height="15" fill="rgb(249,139,47)" fg:x="160" fg:w="1"/><text x="13.4404%" y="383.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.33%)</title><rect x="13.4378%" y="453" width="0.3298%" height="15" fill="rgb(244,64,35)" fg:x="163" fg:w="4"/><text x="13.6878%" y="463.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.6026%" y="437" width="0.1649%" height="15" fill="rgb(216,46,15)" fg:x="165" fg:w="2"/><text x="13.8526%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.6851%" y="421" width="0.0824%" height="15" fill="rgb(250,74,19)" fg:x="166" fg:w="1"/><text x="13.9351%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.6851%" y="405" width="0.0824%" height="15" fill="rgb(249,42,33)" fg:x="166" fg:w="1"/><text x="13.9351%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.6851%" y="389" width="0.0824%" height="15" fill="rgb(242,149,17)" fg:x="166" fg:w="1"/><text x="13.9351%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.6851%" y="373" width="0.0824%" height="15" fill="rgb(244,29,21)" fg:x="166" fg:w="1"/><text x="13.9351%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.6851%" y="357" width="0.0824%" height="15" fill="rgb(220,130,37)" fg:x="166" fg:w="1"/><text x="13.9351%" y="367.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (5 samples, 0.41%)</title><rect x="13.4378%" y="469" width="0.4122%" height="15" fill="rgb(211,67,2)" fg:x="163" fg:w="5"/><text x="13.6878%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.7675%" y="453" width="0.0824%" height="15" fill="rgb(235,68,52)" fg:x="167" fg:w="1"/><text x="14.0175%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.7675%" y="437" width="0.0824%" height="15" fill="rgb(246,142,3)" fg:x="167" fg:w="1"/><text x="14.0175%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="13.7675%" y="421" width="0.0824%" height="15" fill="rgb(241,25,7)" fg:x="167" fg:w="1"/><text x="14.0175%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="13.9324%" y="453" width="0.0824%" height="15" fill="rgb(242,119,39)" fg:x="169" fg:w="1"/><text x="14.1824%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.25%)</title><rect x="14.0148%" y="453" width="0.2473%" height="15" fill="rgb(241,98,45)" fg:x="170" fg:w="3"/><text x="14.2648%" y="463.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.25%)</title><rect x="14.0148%" y="437" width="0.2473%" height="15" fill="rgb(254,28,30)" fg:x="170" fg:w="3"/><text x="14.2648%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="14.0973%" y="421" width="0.1649%" height="15" fill="rgb(241,142,54)" fg:x="171" fg:w="2"/><text x="14.3473%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="14.0973%" y="405" width="0.1649%" height="15" fill="rgb(222,85,15)" fg:x="171" fg:w="2"/><text x="14.3473%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.1797%" y="389" width="0.0824%" height="15" fill="rgb(210,85,47)" fg:x="172" fg:w="1"/><text x="14.4297%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="14.2622%" y="389" width="0.0824%" height="15" fill="rgb(224,206,25)" fg:x="173" fg:w="1"/><text x="14.5122%" y="399.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.2622%" y="373" width="0.0824%" height="15" fill="rgb(243,201,19)" fg:x="173" fg:w="1"/><text x="14.5122%" y="383.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.2622%" y="357" width="0.0824%" height="15" fill="rgb(236,59,4)" fg:x="173" fg:w="1"/><text x="14.5122%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="14.2622%" y="341" width="0.0824%" height="15" fill="rgb(254,179,45)" fg:x="173" fg:w="1"/><text x="14.5122%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="14.2622%" y="437" width="0.1649%" height="15" fill="rgb(226,14,10)" fg:x="173" fg:w="2"/><text x="14.5122%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="14.2622%" y="421" width="0.1649%" height="15" fill="rgb(244,27,41)" fg:x="173" fg:w="2"/><text x="14.5122%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="14.2622%" y="405" width="0.1649%" height="15" fill="rgb(235,35,32)" fg:x="173" fg:w="2"/><text x="14.5122%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="14.3446%" y="389" width="0.0824%" height="15" fill="rgb(218,68,31)" fg:x="174" fg:w="1"/><text x="14.5946%" y="399.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.3446%" y="373" width="0.0824%" height="15" fill="rgb(207,120,37)" fg:x="174" fg:w="1"/><text x="14.5946%" y="383.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.3446%" y="357" width="0.0824%" height="15" fill="rgb(227,98,0)" fg:x="174" fg:w="1"/><text x="14.5946%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.3446%" y="341" width="0.0824%" height="15" fill="rgb(207,7,3)" fg:x="174" fg:w="1"/><text x="14.5946%" y="351.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="14.4270%" y="437" width="0.0824%" height="15" fill="rgb(206,98,19)" fg:x="175" fg:w="1"/><text x="14.6770%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.4270%" y="421" width="0.0824%" height="15" fill="rgb(217,5,26)" fg:x="175" fg:w="1"/><text x="14.6770%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.4270%" y="405" width="0.0824%" height="15" fill="rgb(235,190,38)" fg:x="175" fg:w="1"/><text x="14.6770%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.4270%" y="389" width="0.0824%" height="15" fill="rgb(247,86,24)" fg:x="175" fg:w="1"/><text x="14.6770%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.25%)</title><rect x="14.6744%" y="373" width="0.2473%" height="15" fill="rgb(205,101,16)" fg:x="178" fg:w="3"/><text x="14.9244%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="14.7568%" y="357" width="0.1649%" height="15" fill="rgb(246,168,33)" fg:x="179" fg:w="2"/><text x="15.0068%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="14.7568%" y="341" width="0.1649%" height="15" fill="rgb(231,114,1)" fg:x="179" fg:w="2"/><text x="15.0068%" y="351.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="14.7568%" y="325" width="0.1649%" height="15" fill="rgb(207,184,53)" fg:x="179" fg:w="2"/><text x="15.0068%" y="335.50"></text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 0.49%)</title><rect x="14.5095%" y="421" width="0.4946%" height="15" fill="rgb(224,95,51)" fg:x="176" fg:w="6"/><text x="14.7595%" y="431.50"></text></g><g><title>std::io::Write::write_all (6 samples, 0.49%)</title><rect x="14.5095%" y="405" width="0.4946%" height="15" fill="rgb(212,188,45)" fg:x="176" fg:w="6"/><text x="14.7595%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.33%)</title><rect x="14.6744%" y="389" width="0.3298%" height="15" fill="rgb(223,154,38)" fg:x="178" fg:w="4"/><text x="14.9244%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="14.9217%" y="373" width="0.0824%" height="15" fill="rgb(251,22,52)" fg:x="181" fg:w="1"/><text x="15.1717%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="15.0041%" y="421" width="0.0824%" height="15" fill="rgb(229,209,22)" fg:x="182" fg:w="1"/><text x="15.2541%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="15.0041%" y="405" width="0.0824%" height="15" fill="rgb(234,138,34)" fg:x="182" fg:w="1"/><text x="15.2541%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.0041%" y="389" width="0.0824%" height="15" fill="rgb(212,95,11)" fg:x="182" fg:w="1"/><text x="15.2541%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.91%)</title><rect x="14.2622%" y="453" width="0.9068%" height="15" fill="rgb(240,179,47)" fg:x="173" fg:w="11"/><text x="14.5122%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.66%)</title><rect x="14.5095%" y="437" width="0.6595%" height="15" fill="rgb(240,163,11)" fg:x="176" fg:w="8"/><text x="14.7595%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.0866%" y="421" width="0.0824%" height="15" fill="rgb(236,37,12)" fg:x="183" fg:w="1"/><text x="15.3366%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.0866%" y="405" width="0.0824%" height="15" fill="rgb(232,164,16)" fg:x="183" fg:w="1"/><text x="15.3366%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (24 samples, 1.98%)</title><rect x="13.2729%" y="485" width="1.9786%" height="15" fill="rgb(244,205,15)" fg:x="161" fg:w="24"/><text x="13.5229%" y="495.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (17 samples, 1.40%)</title><rect x="13.8500%" y="469" width="1.4015%" height="15" fill="rgb(223,117,47)" fg:x="168" fg:w="17"/><text x="14.1000%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.1690%" y="453" width="0.0824%" height="15" fill="rgb(244,107,35)" fg:x="184" fg:w="1"/><text x="15.4190%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.1690%" y="437" width="0.0824%" height="15" fill="rgb(205,140,8)" fg:x="184" fg:w="1"/><text x="15.4190%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.1690%" y="421" width="0.0824%" height="15" fill="rgb(228,84,46)" fg:x="184" fg:w="1"/><text x="15.4190%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.1690%" y="405" width="0.0824%" height="15" fill="rgb(254,188,9)" fg:x="184" fg:w="1"/><text x="15.4190%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.1690%" y="389" width="0.0824%" height="15" fill="rgb(206,112,54)" fg:x="184" fg:w="1"/><text x="15.4190%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.1690%" y="373" width="0.0824%" height="15" fill="rgb(216,84,49)" fg:x="184" fg:w="1"/><text x="15.4190%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.2514%" y="453" width="0.0824%" height="15" fill="rgb(214,194,35)" fg:x="185" fg:w="1"/><text x="15.5014%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.4163%" y="421" width="0.0824%" height="15" fill="rgb(249,28,3)" fg:x="187" fg:w="1"/><text x="15.6663%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.4163%" y="405" width="0.0824%" height="15" fill="rgb(222,56,52)" fg:x="187" fg:w="1"/><text x="15.6663%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.4988%" y="357" width="0.0824%" height="15" fill="rgb(245,217,50)" fg:x="188" fg:w="1"/><text x="15.7488%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="15.2514%" y="485" width="0.4122%" height="15" fill="rgb(213,201,24)" fg:x="185" fg:w="5"/><text x="15.5014%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.41%)</title><rect x="15.2514%" y="469" width="0.4122%" height="15" fill="rgb(248,116,28)" fg:x="185" fg:w="5"/><text x="15.5014%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="15.3339%" y="453" width="0.3298%" height="15" fill="rgb(219,72,43)" fg:x="186" fg:w="4"/><text x="15.5839%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="15.4163%" y="437" width="0.2473%" height="15" fill="rgb(209,138,14)" fg:x="187" fg:w="3"/><text x="15.6663%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="15.4988%" y="421" width="0.1649%" height="15" fill="rgb(222,18,33)" fg:x="188" fg:w="2"/><text x="15.7488%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="15.4988%" y="405" width="0.1649%" height="15" fill="rgb(213,199,7)" fg:x="188" fg:w="2"/><text x="15.7488%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="15.4988%" y="389" width="0.1649%" height="15" fill="rgb(250,110,10)" fg:x="188" fg:w="2"/><text x="15.7488%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="15.4988%" y="373" width="0.1649%" height="15" fill="rgb(248,123,6)" fg:x="188" fg:w="2"/><text x="15.7488%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.5812%" y="357" width="0.0824%" height="15" fill="rgb(206,91,31)" fg:x="189" fg:w="1"/><text x="15.8312%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.5812%" y="341" width="0.0824%" height="15" fill="rgb(211,154,13)" fg:x="189" fg:w="1"/><text x="15.8312%" y="351.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="15.6636%" y="469" width="0.0824%" height="15" fill="rgb(225,148,7)" fg:x="190" fg:w="1"/><text x="15.9136%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.25%)</title><rect x="15.7461%" y="437" width="0.2473%" height="15" fill="rgb(220,160,43)" fg:x="191" fg:w="3"/><text x="15.9961%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.9110%" y="421" width="0.0824%" height="15" fill="rgb(213,52,39)" fg:x="193" fg:w="1"/><text x="16.1610%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="15.9110%" y="405" width="0.0824%" height="15" fill="rgb(243,137,7)" fg:x="193" fg:w="1"/><text x="16.1610%" y="415.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="15.9934%" y="437" width="0.0824%" height="15" fill="rgb(230,79,13)" fg:x="194" fg:w="1"/><text x="16.2434%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.9934%" y="421" width="0.0824%" height="15" fill="rgb(247,105,23)" fg:x="194" fg:w="1"/><text x="16.2434%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.9934%" y="405" width="0.0824%" height="15" fill="rgb(223,179,41)" fg:x="194" fg:w="1"/><text x="16.2434%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="16.1583%" y="389" width="0.1649%" height="15" fill="rgb(218,9,34)" fg:x="196" fg:w="2"/><text x="16.4083%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="16.1583%" y="373" width="0.1649%" height="15" fill="rgb(222,106,8)" fg:x="196" fg:w="2"/><text x="16.4083%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="16.1583%" y="357" width="0.1649%" height="15" fill="rgb(211,220,0)" fg:x="196" fg:w="2"/><text x="16.4083%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.4056%" y="341" width="0.0824%" height="15" fill="rgb(229,52,16)" fg:x="199" fg:w="1"/><text x="16.6556%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.25%)</title><rect x="16.3232%" y="389" width="0.2473%" height="15" fill="rgb(212,155,18)" fg:x="198" fg:w="3"/><text x="16.5732%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="16.4056%" y="373" width="0.1649%" height="15" fill="rgb(242,21,14)" fg:x="199" fg:w="2"/><text x="16.6556%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="16.4056%" y="357" width="0.1649%" height="15" fill="rgb(222,19,48)" fg:x="199" fg:w="2"/><text x="16.6556%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="16.4880%" y="341" width="0.0824%" height="15" fill="rgb(232,45,27)" fg:x="200" fg:w="1"/><text x="16.7380%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.4880%" y="325" width="0.0824%" height="15" fill="rgb(249,103,42)" fg:x="200" fg:w="1"/><text x="16.7380%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.9002%" y="325" width="0.0824%" height="15" fill="rgb(246,81,33)" fg:x="205" fg:w="1"/><text x="17.1502%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (11 samples, 0.91%)</title><rect x="16.1583%" y="421" width="0.9068%" height="15" fill="rgb(252,33,42)" fg:x="196" fg:w="11"/><text x="16.4083%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.91%)</title><rect x="16.1583%" y="405" width="0.9068%" height="15" fill="rgb(209,212,41)" fg:x="196" fg:w="11"/><text x="16.4083%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.49%)</title><rect x="16.5705%" y="389" width="0.4946%" height="15" fill="rgb(207,154,6)" fg:x="201" fg:w="6"/><text x="16.8205%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="16.7354%" y="373" width="0.3298%" height="15" fill="rgb(223,64,47)" fg:x="203" fg:w="4"/><text x="16.9854%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="16.7354%" y="357" width="0.3298%" height="15" fill="rgb(211,161,38)" fg:x="203" fg:w="4"/><text x="16.9854%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="16.7354%" y="341" width="0.3298%" height="15" fill="rgb(219,138,40)" fg:x="203" fg:w="4"/><text x="16.9854%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="16.9827%" y="325" width="0.0824%" height="15" fill="rgb(241,228,46)" fg:x="206" fg:w="1"/><text x="17.2327%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.9827%" y="309" width="0.0824%" height="15" fill="rgb(223,209,38)" fg:x="206" fg:w="1"/><text x="17.2327%" y="319.50"></text></g><g><title>engine::session::Session::flush (55 samples, 4.53%)</title><rect x="12.6958%" y="597" width="4.5342%" height="15" fill="rgb(236,164,45)" fg:x="154" fg:w="55"/><text x="12.9458%" y="607.50">engin..</text></g><g><title>engine::session::Session::save_changes (53 samples, 4.37%)</title><rect x="12.8607%" y="581" width="4.3693%" height="15" fill="rgb(231,15,5)" fg:x="156" fg:w="53"/><text x="13.1107%" y="591.50">engin..</text></g><g><title>engine::session::state::State::close (53 samples, 4.37%)</title><rect x="12.8607%" y="565" width="4.3693%" height="15" fill="rgb(252,35,15)" fg:x="156" fg:w="53"/><text x="13.1107%" y="575.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (53 samples, 4.37%)</title><rect x="12.8607%" y="549" width="4.3693%" height="15" fill="rgb(248,181,18)" fg:x="156" fg:w="53"/><text x="13.1107%" y="559.50">engin..</text></g><g><title>core::iter::adapters::try_process (53 samples, 4.37%)</title><rect x="12.8607%" y="533" width="4.3693%" height="15" fill="rgb(233,39,42)" fg:x="156" fg:w="53"/><text x="13.1107%" y="543.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (53 samples, 4.37%)</title><rect x="12.8607%" y="517" width="4.3693%" height="15" fill="rgb(238,110,33)" fg:x="156" fg:w="53"/><text x="13.1107%" y="527.50">&lt;allo..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (50 samples, 4.12%)</title><rect x="13.1080%" y="501" width="4.1220%" height="15" fill="rgb(233,195,10)" fg:x="159" fg:w="50"/><text x="13.3580%" y="511.50">engi..</text></g><g><title>kernel::model::any_entity_changes (19 samples, 1.57%)</title><rect x="15.6636%" y="485" width="1.5664%" height="15" fill="rgb(254,105,3)" fg:x="190" fg:w="19"/><text x="15.9136%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (18 samples, 1.48%)</title><rect x="15.7461%" y="469" width="1.4839%" height="15" fill="rgb(221,225,9)" fg:x="191" fg:w="18"/><text x="15.9961%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (18 samples, 1.48%)</title><rect x="15.7461%" y="453" width="1.4839%" height="15" fill="rgb(224,227,45)" fg:x="191" fg:w="18"/><text x="15.9961%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (14 samples, 1.15%)</title><rect x="16.0758%" y="437" width="1.1542%" height="15" fill="rgb(229,198,43)" fg:x="195" fg:w="14"/><text x="16.3258%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="17.0651%" y="421" width="0.1649%" height="15" fill="rgb(206,209,35)" fg:x="207" fg:w="2"/><text x="17.3151%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.1476%" y="405" width="0.0824%" height="15" fill="rgb(245,195,53)" fg:x="208" fg:w="1"/><text x="17.3976%" y="415.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="17.2300%" y="597" width="0.0824%" height="15" fill="rgb(240,92,26)" fg:x="209" fg:w="1"/><text x="17.4800%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="17.2300%" y="581" width="0.0824%" height="15" fill="rgb(207,40,23)" fg:x="209" fg:w="1"/><text x="17.4800%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="17.2300%" y="565" width="0.0824%" height="15" fill="rgb(223,111,35)" fg:x="209" fg:w="1"/><text x="17.4800%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.2300%" y="549" width="0.0824%" height="15" fill="rgb(229,147,28)" fg:x="209" fg:w="1"/><text x="17.4800%" y="559.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="17.3124%" y="597" width="0.0824%" height="15" fill="rgb(211,29,28)" fg:x="210" fg:w="1"/><text x="17.5624%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="17.3124%" y="581" width="0.0824%" height="15" fill="rgb(228,72,33)" fg:x="210" fg:w="1"/><text x="17.5624%" y="591.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="17.3124%" y="565" width="0.0824%" height="15" fill="rgb(205,214,31)" fg:x="210" fg:w="1"/><text x="17.5624%" y="575.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="17.3124%" y="549" width="0.0824%" height="15" fill="rgb(224,111,15)" fg:x="210" fg:w="1"/><text x="17.5624%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.3124%" y="533" width="0.0824%" height="15" fill="rgb(253,21,26)" fg:x="210" fg:w="1"/><text x="17.5624%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="17.3949%" y="565" width="0.0824%" height="15" fill="rgb(245,139,43)" fg:x="211" fg:w="1"/><text x="17.6449%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="17.3949%" y="549" width="0.0824%" height="15" fill="rgb(252,170,7)" fg:x="211" fg:w="1"/><text x="17.6449%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="17.3949%" y="533" width="0.0824%" height="15" fill="rgb(231,118,14)" fg:x="211" fg:w="1"/><text x="17.6449%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.3949%" y="517" width="0.0824%" height="15" fill="rgb(238,83,0)" fg:x="211" fg:w="1"/><text x="17.6449%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.3949%" y="501" width="0.0824%" height="15" fill="rgb(221,39,39)" fg:x="211" fg:w="1"/><text x="17.6449%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.3949%" y="485" width="0.0824%" height="15" fill="rgb(222,119,46)" fg:x="211" fg:w="1"/><text x="17.6449%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.4773%" y="533" width="0.0824%" height="15" fill="rgb(222,165,49)" fg:x="212" fg:w="1"/><text x="17.7273%" y="543.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="17.4773%" y="549" width="0.1649%" height="15" fill="rgb(219,113,52)" fg:x="212" fg:w="2"/><text x="17.7273%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.5598%" y="533" width="0.0824%" height="15" fill="rgb(214,7,15)" fg:x="213" fg:w="1"/><text x="17.8098%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.5598%" y="517" width="0.0824%" height="15" fill="rgb(235,32,4)" fg:x="213" fg:w="1"/><text x="17.8098%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.5598%" y="501" width="0.0824%" height="15" fill="rgb(238,90,54)" fg:x="213" fg:w="1"/><text x="17.8098%" y="511.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (4 samples, 0.33%)</title><rect x="17.4773%" y="565" width="0.3298%" height="15" fill="rgb(213,208,19)" fg:x="212" fg:w="4"/><text x="17.7273%" y="575.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="17.6422%" y="549" width="0.1649%" height="15" fill="rgb(233,156,4)" fg:x="214" fg:w="2"/><text x="17.8922%" y="559.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="17.7246%" y="533" width="0.0824%" height="15" fill="rgb(207,194,5)" fg:x="215" fg:w="1"/><text x="17.9746%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.7246%" y="517" width="0.0824%" height="15" fill="rgb(206,111,30)" fg:x="215" fg:w="1"/><text x="17.9746%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="17.7246%" y="501" width="0.0824%" height="15" fill="rgb(243,70,54)" fg:x="215" fg:w="1"/><text x="17.9746%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.7246%" y="485" width="0.0824%" height="15" fill="rgb(242,28,8)" fg:x="215" fg:w="1"/><text x="17.9746%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="17.7246%" y="469" width="0.0824%" height="15" fill="rgb(219,106,18)" fg:x="215" fg:w="1"/><text x="17.9746%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="17.7246%" y="453" width="0.0824%" height="15" fill="rgb(244,222,10)" fg:x="215" fg:w="1"/><text x="17.9746%" y="463.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="17.8071%" y="517" width="0.0824%" height="15" fill="rgb(236,179,52)" fg:x="216" fg:w="1"/><text x="18.0571%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="17.8071%" y="501" width="0.0824%" height="15" fill="rgb(213,23,39)" fg:x="216" fg:w="1"/><text x="18.0571%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.8071%" y="485" width="0.0824%" height="15" fill="rgb(238,48,10)" fg:x="216" fg:w="1"/><text x="18.0571%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.8071%" y="469" width="0.0824%" height="15" fill="rgb(251,196,23)" fg:x="216" fg:w="1"/><text x="18.0571%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.8071%" y="453" width="0.0824%" height="15" fill="rgb(250,152,24)" fg:x="216" fg:w="1"/><text x="18.0571%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="17.8895%" y="501" width="0.1649%" height="15" fill="rgb(209,150,17)" fg:x="217" fg:w="2"/><text x="18.1395%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="17.9720%" y="485" width="0.0824%" height="15" fill="rgb(234,202,34)" fg:x="218" fg:w="1"/><text x="18.2220%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="17.9720%" y="469" width="0.0824%" height="15" fill="rgb(253,148,53)" fg:x="218" fg:w="1"/><text x="18.2220%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.9720%" y="453" width="0.0824%" height="15" fill="rgb(218,129,16)" fg:x="218" fg:w="1"/><text x="18.2220%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.0544%" y="469" width="0.0824%" height="15" fill="rgb(216,85,19)" fg:x="219" fg:w="1"/><text x="18.3044%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.0544%" y="453" width="0.0824%" height="15" fill="rgb(235,228,7)" fg:x="219" fg:w="1"/><text x="18.3044%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.0544%" y="437" width="0.0824%" height="15" fill="rgb(245,175,0)" fg:x="219" fg:w="1"/><text x="18.3044%" y="447.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (5 samples, 0.41%)</title><rect x="17.8071%" y="549" width="0.4122%" height="15" fill="rgb(208,168,36)" fg:x="216" fg:w="5"/><text x="18.0571%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (5 samples, 0.41%)</title><rect x="17.8071%" y="533" width="0.4122%" height="15" fill="rgb(246,171,24)" fg:x="216" fg:w="5"/><text x="18.0571%" y="543.50"></text></g><g><title>kernel::model::props::save_props (4 samples, 0.33%)</title><rect x="17.8895%" y="517" width="0.3298%" height="15" fill="rgb(215,142,24)" fg:x="217" fg:w="4"/><text x="18.1395%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="18.0544%" y="501" width="0.1649%" height="15" fill="rgb(250,187,7)" fg:x="219" fg:w="2"/><text x="18.3044%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="18.0544%" y="485" width="0.1649%" height="15" fill="rgb(228,66,33)" fg:x="219" fg:w="2"/><text x="18.3044%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="18.1369%" y="469" width="0.0824%" height="15" fill="rgb(234,215,21)" fg:x="220" fg:w="1"/><text x="18.3869%" y="479.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="18.1369%" y="453" width="0.0824%" height="15" fill="rgb(222,191,20)" fg:x="220" fg:w="1"/><text x="18.3869%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.1369%" y="437" width="0.0824%" height="15" fill="rgb(245,79,54)" fg:x="220" fg:w="1"/><text x="18.3869%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.1369%" y="421" width="0.0824%" height="15" fill="rgb(240,10,37)" fg:x="220" fg:w="1"/><text x="18.3869%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.1369%" y="405" width="0.0824%" height="15" fill="rgb(214,192,32)" fg:x="220" fg:w="1"/><text x="18.3869%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="18.3017%" y="501" width="0.0824%" height="15" fill="rgb(209,36,54)" fg:x="222" fg:w="1"/><text x="18.5517%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_entity (8 samples, 0.66%)</title><rect x="17.8071%" y="565" width="0.6595%" height="15" fill="rgb(220,10,11)" fg:x="216" fg:w="8"/><text x="18.0571%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.25%)</title><rect x="18.2193%" y="549" width="0.2473%" height="15" fill="rgb(221,106,17)" fg:x="221" fg:w="3"/><text x="18.4693%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="18.2193%" y="533" width="0.2473%" height="15" fill="rgb(251,142,44)" fg:x="221" fg:w="3"/><text x="18.4693%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="18.3017%" y="517" width="0.1649%" height="15" fill="rgb(238,13,15)" fg:x="222" fg:w="2"/><text x="18.5517%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.3842%" y="501" width="0.0824%" height="15" fill="rgb(208,107,27)" fg:x="223" fg:w="1"/><text x="18.6342%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.3842%" y="485" width="0.0824%" height="15" fill="rgb(205,136,37)" fg:x="223" fg:w="1"/><text x="18.6342%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.3842%" y="469" width="0.0824%" height="15" fill="rgb(250,205,27)" fg:x="223" fg:w="1"/><text x="18.6342%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.3842%" y="453" width="0.0824%" height="15" fill="rgb(210,80,43)" fg:x="223" fg:w="1"/><text x="18.6342%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (14 samples, 1.15%)</title><rect x="17.3949%" y="581" width="1.1542%" height="15" fill="rgb(247,160,36)" fg:x="211" fg:w="14"/><text x="17.6449%" y="591.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="18.4666%" y="565" width="0.0824%" height="15" fill="rgb(234,13,49)" fg:x="224" fg:w="1"/><text x="18.7166%" y="575.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="18.4666%" y="549" width="0.0824%" height="15" fill="rgb(234,122,0)" fg:x="224" fg:w="1"/><text x="18.7166%" y="559.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="18.4666%" y="533" width="0.0824%" height="15" fill="rgb(207,146,38)" fg:x="224" fg:w="1"/><text x="18.7166%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="18.5491%" y="581" width="0.1649%" height="15" fill="rgb(207,177,25)" fg:x="225" fg:w="2"/><text x="18.7991%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="18.5491%" y="565" width="0.1649%" height="15" fill="rgb(211,178,42)" fg:x="225" fg:w="2"/><text x="18.7991%" y="575.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="18.5491%" y="549" width="0.1649%" height="15" fill="rgb(230,69,54)" fg:x="225" fg:w="2"/><text x="18.7991%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.7139%" y="565" width="0.0824%" height="15" fill="rgb(214,135,41)" fg:x="227" fg:w="1"/><text x="18.9639%" y="575.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="18.7964%" y="565" width="0.0824%" height="15" fill="rgb(237,67,25)" fg:x="228" fg:w="1"/><text x="19.0464%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="18.7964%" y="549" width="0.0824%" height="15" fill="rgb(222,189,50)" fg:x="228" fg:w="1"/><text x="19.0464%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.8788%" y="533" width="0.0824%" height="15" fill="rgb(245,148,34)" fg:x="229" fg:w="1"/><text x="19.1288%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.8788%" y="517" width="0.0824%" height="15" fill="rgb(222,29,6)" fg:x="229" fg:w="1"/><text x="19.1288%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.8788%" y="501" width="0.0824%" height="15" fill="rgb(221,189,43)" fg:x="229" fg:w="1"/><text x="19.1288%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.8788%" y="485" width="0.0824%" height="15" fill="rgb(207,36,27)" fg:x="229" fg:w="1"/><text x="19.1288%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.8788%" y="469" width="0.0824%" height="15" fill="rgb(217,90,24)" fg:x="229" fg:w="1"/><text x="19.1288%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.8788%" y="453" width="0.0824%" height="15" fill="rgb(224,66,35)" fg:x="229" fg:w="1"/><text x="19.1288%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.8788%" y="437" width="0.0824%" height="15" fill="rgb(221,13,50)" fg:x="229" fg:w="1"/><text x="19.1288%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.8788%" y="421" width="0.0824%" height="15" fill="rgb(236,68,49)" fg:x="229" fg:w="1"/><text x="19.1288%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.8788%" y="405" width="0.0824%" height="15" fill="rgb(229,146,28)" fg:x="229" fg:w="1"/><text x="19.1288%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.8788%" y="389" width="0.0824%" height="15" fill="rgb(225,31,38)" fg:x="229" fg:w="1"/><text x="19.1288%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.8788%" y="373" width="0.0824%" height="15" fill="rgb(250,208,3)" fg:x="229" fg:w="1"/><text x="19.1288%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.8788%" y="357" width="0.0824%" height="15" fill="rgb(246,54,23)" fg:x="229" fg:w="1"/><text x="19.1288%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.8788%" y="341" width="0.0824%" height="15" fill="rgb(243,76,11)" fg:x="229" fg:w="1"/><text x="19.1288%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.8788%" y="325" width="0.0824%" height="15" fill="rgb(245,21,50)" fg:x="229" fg:w="1"/><text x="19.1288%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.8788%" y="309" width="0.0824%" height="15" fill="rgb(228,9,43)" fg:x="229" fg:w="1"/><text x="19.1288%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="18.9613%" y="533" width="0.0824%" height="15" fill="rgb(208,100,47)" fg:x="230" fg:w="1"/><text x="19.2113%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.9613%" y="517" width="0.0824%" height="15" fill="rgb(232,26,8)" fg:x="230" fg:w="1"/><text x="19.2113%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="18.9613%" y="501" width="0.0824%" height="15" fill="rgb(216,166,38)" fg:x="230" fg:w="1"/><text x="19.2113%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.9613%" y="485" width="0.0824%" height="15" fill="rgb(251,202,51)" fg:x="230" fg:w="1"/><text x="19.2113%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="18.9613%" y="469" width="0.0824%" height="15" fill="rgb(254,216,34)" fg:x="230" fg:w="1"/><text x="19.2113%" y="479.50"></text></g><g><title>plugins_core::build::Build::save (21 samples, 1.73%)</title><rect x="17.3949%" y="597" width="1.7312%" height="15" fill="rgb(251,32,27)" fg:x="211" fg:w="21"/><text x="17.6449%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (5 samples, 0.41%)</title><rect x="18.7139%" y="581" width="0.4122%" height="15" fill="rgb(208,127,28)" fg:x="227" fg:w="5"/><text x="18.9639%" y="591.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.25%)</title><rect x="18.8788%" y="565" width="0.2473%" height="15" fill="rgb(224,137,22)" fg:x="229" fg:w="3"/><text x="19.1288%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="18.8788%" y="549" width="0.2473%" height="15" fill="rgb(254,70,32)" fg:x="229" fg:w="3"/><text x="19.1288%" y="559.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="19.0437%" y="533" width="0.0824%" height="15" fill="rgb(229,75,37)" fg:x="231" fg:w="1"/><text x="19.2937%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (2 samples, 0.16%)</title><rect x="19.1261%" y="597" width="0.1649%" height="15" fill="rgb(252,64,23)" fg:x="232" fg:w="2"/><text x="19.3761%" y="607.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="19.1261%" y="581" width="0.1649%" height="15" fill="rgb(232,162,48)" fg:x="232" fg:w="2"/><text x="19.3761%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="19.1261%" y="565" width="0.1649%" height="15" fill="rgb(246,160,12)" fg:x="232" fg:w="2"/><text x="19.3761%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="19.2086%" y="549" width="0.0824%" height="15" fill="rgb(247,166,0)" fg:x="233" fg:w="1"/><text x="19.4586%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.2086%" y="533" width="0.0824%" height="15" fill="rgb(249,219,21)" fg:x="233" fg:w="1"/><text x="19.4586%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="19.2086%" y="517" width="0.0824%" height="15" fill="rgb(205,209,3)" fg:x="233" fg:w="1"/><text x="19.4586%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="19.2086%" y="501" width="0.0824%" height="15" fill="rgb(243,44,1)" fg:x="233" fg:w="1"/><text x="19.4586%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="19.2910%" y="565" width="0.0824%" height="15" fill="rgb(206,159,16)" fg:x="234" fg:w="1"/><text x="19.5410%" y="575.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="19.3735%" y="517" width="0.0824%" height="15" fill="rgb(244,77,30)" fg:x="235" fg:w="1"/><text x="19.6235%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="19.3735%" y="501" width="0.0824%" height="15" fill="rgb(218,69,12)" fg:x="235" fg:w="1"/><text x="19.6235%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="19.3735%" y="485" width="0.0824%" height="15" fill="rgb(212,87,7)" fg:x="235" fg:w="1"/><text x="19.6235%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (5 samples, 0.41%)</title><rect x="19.3735%" y="533" width="0.4122%" height="15" fill="rgb(245,114,25)" fg:x="235" fg:w="5"/><text x="19.6235%" y="543.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.33%)</title><rect x="19.4559%" y="517" width="0.3298%" height="15" fill="rgb(210,61,42)" fg:x="236" fg:w="4"/><text x="19.7059%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="19.4559%" y="501" width="0.3298%" height="15" fill="rgb(211,52,33)" fg:x="236" fg:w="4"/><text x="19.7059%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (4 samples, 0.33%)</title><rect x="19.4559%" y="485" width="0.3298%" height="15" fill="rgb(234,58,33)" fg:x="236" fg:w="4"/><text x="19.7059%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="19.4559%" y="469" width="0.3298%" height="15" fill="rgb(220,115,36)" fg:x="236" fg:w="4"/><text x="19.7059%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (3 samples, 0.25%)</title><rect x="19.5383%" y="453" width="0.2473%" height="15" fill="rgb(243,153,54)" fg:x="237" fg:w="3"/><text x="19.7883%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="19.5383%" y="437" width="0.2473%" height="15" fill="rgb(251,47,18)" fg:x="237" fg:w="3"/><text x="19.7883%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (3 samples, 0.25%)</title><rect x="19.5383%" y="421" width="0.2473%" height="15" fill="rgb(242,102,42)" fg:x="237" fg:w="3"/><text x="19.7883%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="19.5383%" y="405" width="0.2473%" height="15" fill="rgb(234,31,38)" fg:x="237" fg:w="3"/><text x="19.7883%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.7032%" y="389" width="0.0824%" height="15" fill="rgb(221,117,51)" fg:x="239" fg:w="1"/><text x="19.9532%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.7032%" y="373" width="0.0824%" height="15" fill="rgb(212,20,18)" fg:x="239" fg:w="1"/><text x="19.9532%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.8681%" y="453" width="0.0824%" height="15" fill="rgb(245,133,36)" fg:x="241" fg:w="1"/><text x="20.1181%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.8681%" y="437" width="0.0824%" height="15" fill="rgb(212,6,19)" fg:x="241" fg:w="1"/><text x="20.1181%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.8681%" y="421" width="0.0824%" height="15" fill="rgb(218,1,36)" fg:x="241" fg:w="1"/><text x="20.1181%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.8681%" y="405" width="0.0824%" height="15" fill="rgb(246,84,54)" fg:x="241" fg:w="1"/><text x="20.1181%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.8681%" y="389" width="0.0824%" height="15" fill="rgb(242,110,6)" fg:x="241" fg:w="1"/><text x="20.1181%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.8681%" y="373" width="0.0824%" height="15" fill="rgb(214,47,5)" fg:x="241" fg:w="1"/><text x="20.1181%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.8681%" y="357" width="0.0824%" height="15" fill="rgb(218,159,25)" fg:x="241" fg:w="1"/><text x="20.1181%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.8681%" y="341" width="0.0824%" height="15" fill="rgb(215,211,28)" fg:x="241" fg:w="1"/><text x="20.1181%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.8681%" y="325" width="0.0824%" height="15" fill="rgb(238,59,32)" fg:x="241" fg:w="1"/><text x="20.1181%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.8681%" y="309" width="0.0824%" height="15" fill="rgb(226,82,3)" fg:x="241" fg:w="1"/><text x="20.1181%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.8681%" y="293" width="0.0824%" height="15" fill="rgb(240,164,32)" fg:x="241" fg:w="1"/><text x="20.1181%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.8681%" y="277" width="0.0824%" height="15" fill="rgb(232,46,7)" fg:x="241" fg:w="1"/><text x="20.1181%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.8681%" y="261" width="0.0824%" height="15" fill="rgb(229,129,53)" fg:x="241" fg:w="1"/><text x="20.1181%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (8 samples, 0.66%)</title><rect x="19.3735%" y="565" width="0.6595%" height="15" fill="rgb(234,188,29)" fg:x="235" fg:w="8"/><text x="19.6235%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (8 samples, 0.66%)</title><rect x="19.3735%" y="549" width="0.6595%" height="15" fill="rgb(246,141,4)" fg:x="235" fg:w="8"/><text x="19.6235%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.25%)</title><rect x="19.7857%" y="533" width="0.2473%" height="15" fill="rgb(229,23,39)" fg:x="240" fg:w="3"/><text x="20.0357%" y="543.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.25%)</title><rect x="19.7857%" y="517" width="0.2473%" height="15" fill="rgb(206,12,3)" fg:x="240" fg:w="3"/><text x="20.0357%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="19.7857%" y="501" width="0.2473%" height="15" fill="rgb(252,226,20)" fg:x="240" fg:w="3"/><text x="20.0357%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="19.7857%" y="485" width="0.2473%" height="15" fill="rgb(216,123,35)" fg:x="240" fg:w="3"/><text x="20.0357%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="19.7857%" y="469" width="0.2473%" height="15" fill="rgb(212,68,40)" fg:x="240" fg:w="3"/><text x="20.0357%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.9505%" y="453" width="0.0824%" height="15" fill="rgb(254,125,32)" fg:x="242" fg:w="1"/><text x="20.2005%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.9505%" y="437" width="0.0824%" height="15" fill="rgb(253,97,22)" fg:x="242" fg:w="1"/><text x="20.2005%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.9505%" y="421" width="0.0824%" height="15" fill="rgb(241,101,14)" fg:x="242" fg:w="1"/><text x="20.2005%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.9505%" y="405" width="0.0824%" height="15" fill="rgb(238,103,29)" fg:x="242" fg:w="1"/><text x="20.2005%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.9505%" y="389" width="0.0824%" height="15" fill="rgb(233,195,47)" fg:x="242" fg:w="1"/><text x="20.2005%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.9505%" y="373" width="0.0824%" height="15" fill="rgb(246,218,30)" fg:x="242" fg:w="1"/><text x="20.2005%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.9505%" y="357" width="0.0824%" height="15" fill="rgb(219,145,47)" fg:x="242" fg:w="1"/><text x="20.2005%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.9505%" y="341" width="0.0824%" height="15" fill="rgb(243,12,26)" fg:x="242" fg:w="1"/><text x="20.2005%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.9505%" y="325" width="0.0824%" height="15" fill="rgb(214,87,16)" fg:x="242" fg:w="1"/><text x="20.2005%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.9505%" y="309" width="0.0824%" height="15" fill="rgb(208,99,42)" fg:x="242" fg:w="1"/><text x="20.2005%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.9505%" y="293" width="0.0824%" height="15" fill="rgb(253,99,2)" fg:x="242" fg:w="1"/><text x="20.2005%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.9505%" y="277" width="0.0824%" height="15" fill="rgb(220,168,23)" fg:x="242" fg:w="1"/><text x="20.2005%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="20.0330%" y="549" width="0.0824%" height="15" fill="rgb(242,38,24)" fg:x="243" fg:w="1"/><text x="20.2830%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.0330%" y="533" width="0.0824%" height="15" fill="rgb(225,182,9)" fg:x="243" fg:w="1"/><text x="20.2830%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.0330%" y="517" width="0.0824%" height="15" fill="rgb(243,178,37)" fg:x="243" fg:w="1"/><text x="20.2830%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="20.0330%" y="501" width="0.0824%" height="15" fill="rgb(232,139,19)" fg:x="243" fg:w="1"/><text x="20.2830%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.0330%" y="485" width="0.0824%" height="15" fill="rgb(225,201,24)" fg:x="243" fg:w="1"/><text x="20.2830%" y="495.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="20.1154%" y="549" width="0.0824%" height="15" fill="rgb(221,47,46)" fg:x="244" fg:w="1"/><text x="20.3654%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.1154%" y="533" width="0.0824%" height="15" fill="rgb(249,23,13)" fg:x="244" fg:w="1"/><text x="20.3654%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="20.1154%" y="517" width="0.0824%" height="15" fill="rgb(219,9,5)" fg:x="244" fg:w="1"/><text x="20.3654%" y="527.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="20.1154%" y="501" width="0.0824%" height="15" fill="rgb(254,171,16)" fg:x="244" fg:w="1"/><text x="20.3654%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.1154%" y="485" width="0.0824%" height="15" fill="rgb(230,171,20)" fg:x="244" fg:w="1"/><text x="20.3654%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.1154%" y="469" width="0.0824%" height="15" fill="rgb(210,71,41)" fg:x="244" fg:w="1"/><text x="20.3654%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.1154%" y="453" width="0.0824%" height="15" fill="rgb(206,173,20)" fg:x="244" fg:w="1"/><text x="20.3654%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.1154%" y="437" width="0.0824%" height="15" fill="rgb(233,88,34)" fg:x="244" fg:w="1"/><text x="20.3654%" y="447.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (12 samples, 0.99%)</title><rect x="19.2910%" y="597" width="0.9893%" height="15" fill="rgb(223,209,46)" fg:x="234" fg:w="12"/><text x="19.5410%" y="607.50"></text></g><g><title>plugins_core::tools::set_occupying (12 samples, 0.99%)</title><rect x="19.2910%" y="581" width="0.9893%" height="15" fill="rgb(250,43,18)" fg:x="234" fg:w="12"/><text x="19.5410%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.25%)</title><rect x="20.0330%" y="565" width="0.2473%" height="15" fill="rgb(208,13,10)" fg:x="243" fg:w="3"/><text x="20.2830%" y="575.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="20.1979%" y="549" width="0.0824%" height="15" fill="rgb(212,200,36)" fg:x="245" fg:w="1"/><text x="20.4479%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.1979%" y="533" width="0.0824%" height="15" fill="rgb(225,90,30)" fg:x="245" fg:w="1"/><text x="20.4479%" y="543.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="20.1979%" y="517" width="0.0824%" height="15" fill="rgb(236,182,39)" fg:x="245" fg:w="1"/><text x="20.4479%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.1979%" y="501" width="0.0824%" height="15" fill="rgb(212,144,35)" fg:x="245" fg:w="1"/><text x="20.4479%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.1979%" y="485" width="0.0824%" height="15" fill="rgb(228,63,44)" fg:x="245" fg:w="1"/><text x="20.4479%" y="495.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="20.2803%" y="581" width="0.1649%" height="15" fill="rgb(228,109,6)" fg:x="246" fg:w="2"/><text x="20.5303%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="20.2803%" y="565" width="0.1649%" height="15" fill="rgb(238,117,24)" fg:x="246" fg:w="2"/><text x="20.5303%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.3627%" y="549" width="0.0824%" height="15" fill="rgb(242,26,26)" fg:x="247" fg:w="1"/><text x="20.6127%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.3627%" y="533" width="0.0824%" height="15" fill="rgb(221,92,48)" fg:x="247" fg:w="1"/><text x="20.6127%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.3627%" y="517" width="0.0824%" height="15" fill="rgb(209,209,32)" fg:x="247" fg:w="1"/><text x="20.6127%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.3627%" y="501" width="0.0824%" height="15" fill="rgb(221,70,22)" fg:x="247" fg:w="1"/><text x="20.6127%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="20.4452%" y="581" width="0.0824%" height="15" fill="rgb(248,145,5)" fg:x="248" fg:w="1"/><text x="20.6952%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.4452%" y="565" width="0.0824%" height="15" fill="rgb(226,116,26)" fg:x="248" fg:w="1"/><text x="20.6952%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.5276%" y="533" width="0.0824%" height="15" fill="rgb(244,5,17)" fg:x="249" fg:w="1"/><text x="20.7776%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (6 samples, 0.49%)</title><rect x="20.2803%" y="597" width="0.4946%" height="15" fill="rgb(252,159,33)" fg:x="246" fg:w="6"/><text x="20.5303%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.25%)</title><rect x="20.5276%" y="581" width="0.2473%" height="15" fill="rgb(206,71,0)" fg:x="249" fg:w="3"/><text x="20.7776%" y="591.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (3 samples, 0.25%)</title><rect x="20.5276%" y="565" width="0.2473%" height="15" fill="rgb(233,118,54)" fg:x="249" fg:w="3"/><text x="20.7776%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="20.5276%" y="549" width="0.2473%" height="15" fill="rgb(234,83,48)" fg:x="249" fg:w="3"/><text x="20.7776%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="20.6101%" y="533" width="0.1649%" height="15" fill="rgb(228,3,54)" fg:x="250" fg:w="2"/><text x="20.8601%" y="543.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="20.6101%" y="517" width="0.1649%" height="15" fill="rgb(226,155,13)" fg:x="250" fg:w="2"/><text x="20.8601%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="20.6101%" y="501" width="0.1649%" height="15" fill="rgb(241,28,37)" fg:x="250" fg:w="2"/><text x="20.8601%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.6925%" y="485" width="0.0824%" height="15" fill="rgb(233,93,10)" fg:x="251" fg:w="1"/><text x="20.9425%" y="495.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="20.7749%" y="581" width="0.0824%" height="15" fill="rgb(225,113,19)" fg:x="252" fg:w="1"/><text x="21.0249%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::new (1 samples, 0.08%)</title><rect x="20.7749%" y="565" width="0.0824%" height="15" fill="rgb(241,2,18)" fg:x="252" fg:w="1"/><text x="21.0249%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="20.8574%" y="549" width="0.0824%" height="15" fill="rgb(228,207,21)" fg:x="253" fg:w="1"/><text x="21.1074%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="20.8574%" y="533" width="0.0824%" height="15" fill="rgb(213,211,35)" fg:x="253" fg:w="1"/><text x="21.1074%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="20.8574%" y="517" width="0.0824%" height="15" fill="rgb(209,83,10)" fg:x="253" fg:w="1"/><text x="21.1074%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="20.8574%" y="501" width="0.0824%" height="15" fill="rgb(209,164,1)" fg:x="253" fg:w="1"/><text x="21.1074%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.8574%" y="485" width="0.0824%" height="15" fill="rgb(213,184,43)" fg:x="253" fg:w="1"/><text x="21.1074%" y="495.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="20.8574%" y="581" width="0.1649%" height="15" fill="rgb(231,61,34)" fg:x="253" fg:w="2"/><text x="21.1074%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="20.8574%" y="565" width="0.1649%" height="15" fill="rgb(235,75,3)" fg:x="253" fg:w="2"/><text x="21.1074%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="20.9398%" y="549" width="0.0824%" height="15" fill="rgb(220,106,47)" fg:x="254" fg:w="1"/><text x="21.1898%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="20.9398%" y="533" width="0.0824%" height="15" fill="rgb(210,196,33)" fg:x="254" fg:w="1"/><text x="21.1898%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="20.9398%" y="517" width="0.0824%" height="15" fill="rgb(229,154,42)" fg:x="254" fg:w="1"/><text x="21.1898%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="20.9398%" y="501" width="0.0824%" height="15" fill="rgb(228,114,26)" fg:x="254" fg:w="1"/><text x="21.1898%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.9398%" y="485" width="0.0824%" height="15" fill="rgb(208,144,1)" fg:x="254" fg:w="1"/><text x="21.1898%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="20.9398%" y="469" width="0.0824%" height="15" fill="rgb(239,112,37)" fg:x="254" fg:w="1"/><text x="21.1898%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.9398%" y="453" width="0.0824%" height="15" fill="rgb(210,96,50)" fg:x="254" fg:w="1"/><text x="21.1898%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="20.9398%" y="437" width="0.0824%" height="15" fill="rgb(222,178,2)" fg:x="254" fg:w="1"/><text x="21.1898%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.9398%" y="421" width="0.0824%" height="15" fill="rgb(226,74,18)" fg:x="254" fg:w="1"/><text x="21.1898%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.9398%" y="405" width="0.0824%" height="15" fill="rgb(225,67,54)" fg:x="254" fg:w="1"/><text x="21.1898%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="21.0223%" y="565" width="0.0824%" height="15" fill="rgb(251,92,32)" fg:x="255" fg:w="1"/><text x="21.2723%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.0223%" y="549" width="0.0824%" height="15" fill="rgb(228,149,22)" fg:x="255" fg:w="1"/><text x="21.2723%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.0223%" y="533" width="0.0824%" height="15" fill="rgb(243,54,13)" fg:x="255" fg:w="1"/><text x="21.2723%" y="543.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="21.0223%" y="581" width="0.1649%" height="15" fill="rgb(243,180,28)" fg:x="255" fg:w="2"/><text x="21.2723%" y="591.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="21.1047%" y="565" width="0.0824%" height="15" fill="rgb(208,167,24)" fg:x="256" fg:w="1"/><text x="21.3547%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.1047%" y="549" width="0.0824%" height="15" fill="rgb(245,73,45)" fg:x="256" fg:w="1"/><text x="21.3547%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="21.1047%" y="533" width="0.0824%" height="15" fill="rgb(237,203,48)" fg:x="256" fg:w="1"/><text x="21.3547%" y="543.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="21.1047%" y="517" width="0.0824%" height="15" fill="rgb(211,197,16)" fg:x="256" fg:w="1"/><text x="21.3547%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.1047%" y="501" width="0.0824%" height="15" fill="rgb(243,99,51)" fg:x="256" fg:w="1"/><text x="21.3547%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.1047%" y="485" width="0.0824%" height="15" fill="rgb(215,123,29)" fg:x="256" fg:w="1"/><text x="21.3547%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="21.1871%" y="565" width="0.0824%" height="15" fill="rgb(239,186,37)" fg:x="257" fg:w="1"/><text x="21.4371%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.1871%" y="549" width="0.0824%" height="15" fill="rgb(252,136,39)" fg:x="257" fg:w="1"/><text x="21.4371%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.1871%" y="533" width="0.0824%" height="15" fill="rgb(223,213,32)" fg:x="257" fg:w="1"/><text x="21.4371%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.1871%" y="517" width="0.0824%" height="15" fill="rgb(233,115,5)" fg:x="257" fg:w="1"/><text x="21.4371%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.2696%" y="565" width="0.0824%" height="15" fill="rgb(207,226,44)" fg:x="258" fg:w="1"/><text x="21.5196%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="21.3520%" y="533" width="0.0824%" height="15" fill="rgb(208,126,0)" fg:x="259" fg:w="1"/><text x="21.6020%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="21.3520%" y="517" width="0.0824%" height="15" fill="rgb(244,66,21)" fg:x="259" fg:w="1"/><text x="21.6020%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="21.3520%" y="501" width="0.0824%" height="15" fill="rgb(222,97,12)" fg:x="259" fg:w="1"/><text x="21.6020%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="21.3520%" y="485" width="0.0824%" height="15" fill="rgb(219,213,19)" fg:x="259" fg:w="1"/><text x="21.6020%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.3520%" y="469" width="0.0824%" height="15" fill="rgb(252,169,30)" fg:x="259" fg:w="1"/><text x="21.6020%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="21.3520%" y="453" width="0.0824%" height="15" fill="rgb(206,32,51)" fg:x="259" fg:w="1"/><text x="21.6020%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.3520%" y="437" width="0.0824%" height="15" fill="rgb(250,172,42)" fg:x="259" fg:w="1"/><text x="21.6020%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="21.3520%" y="421" width="0.0824%" height="15" fill="rgb(209,34,43)" fg:x="259" fg:w="1"/><text x="21.6020%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.4345%" y="517" width="0.0824%" height="15" fill="rgb(223,11,35)" fg:x="260" fg:w="1"/><text x="21.6845%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.4345%" y="501" width="0.0824%" height="15" fill="rgb(251,219,26)" fg:x="260" fg:w="1"/><text x="21.6845%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="21.4345%" y="485" width="0.0824%" height="15" fill="rgb(231,119,3)" fg:x="260" fg:w="1"/><text x="21.6845%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="21.4345%" y="469" width="0.0824%" height="15" fill="rgb(216,97,11)" fg:x="260" fg:w="1"/><text x="21.6845%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="21.4345%" y="453" width="0.0824%" height="15" fill="rgb(223,59,9)" fg:x="260" fg:w="1"/><text x="21.6845%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="21.4345%" y="437" width="0.0824%" height="15" fill="rgb(233,93,31)" fg:x="260" fg:w="1"/><text x="21.6845%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="21.4345%" y="421" width="0.0824%" height="15" fill="rgb(239,81,33)" fg:x="260" fg:w="1"/><text x="21.6845%" y="431.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.41%)</title><rect x="21.1871%" y="581" width="0.4122%" height="15" fill="rgb(213,120,34)" fg:x="257" fg:w="5"/><text x="21.4371%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.25%)</title><rect x="21.3520%" y="565" width="0.2473%" height="15" fill="rgb(243,49,53)" fg:x="259" fg:w="3"/><text x="21.6020%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.25%)</title><rect x="21.3520%" y="549" width="0.2473%" height="15" fill="rgb(247,216,33)" fg:x="259" fg:w="3"/><text x="21.6020%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="21.4345%" y="533" width="0.1649%" height="15" fill="rgb(226,26,14)" fg:x="260" fg:w="2"/><text x="21.6845%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="21.5169%" y="517" width="0.0824%" height="15" fill="rgb(215,49,53)" fg:x="261" fg:w="1"/><text x="21.7669%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="21.5169%" y="501" width="0.0824%" height="15" fill="rgb(245,162,40)" fg:x="261" fg:w="1"/><text x="21.7669%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (115 samples, 9.48%)</title><rect x="12.2012%" y="613" width="9.4806%" height="15" fill="rgb(229,68,17)" fg:x="148" fg:w="115"/><text x="12.4512%" y="623.50">plugins_core::..</text></g><g><title>plugins_core::tools::set_container (11 samples, 0.91%)</title><rect x="20.7749%" y="597" width="0.9068%" height="15" fill="rgb(213,182,10)" fg:x="252" fg:w="11"/><text x="21.0249%" y="607.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="21.5993%" y="581" width="0.0824%" height="15" fill="rgb(245,125,30)" fg:x="262" fg:w="1"/><text x="21.8493%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="21.5993%" y="565" width="0.0824%" height="15" fill="rgb(232,202,2)" fg:x="262" fg:w="1"/><text x="21.8493%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="21.5993%" y="549" width="0.0824%" height="15" fill="rgb(237,140,51)" fg:x="262" fg:w="1"/><text x="21.8493%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.5993%" y="533" width="0.0824%" height="15" fill="rgb(236,157,25)" fg:x="262" fg:w="1"/><text x="21.8493%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.5993%" y="517" width="0.0824%" height="15" fill="rgb(219,209,0)" fg:x="262" fg:w="1"/><text x="21.8493%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="21.5993%" y="501" width="0.0824%" height="15" fill="rgb(240,116,54)" fg:x="262" fg:w="1"/><text x="21.8493%" y="511.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="21.6818%" y="581" width="0.0824%" height="15" fill="rgb(216,10,36)" fg:x="263" fg:w="1"/><text x="21.9318%" y="591.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="21.6818%" y="565" width="0.0824%" height="15" fill="rgb(222,72,44)" fg:x="263" fg:w="1"/><text x="21.9318%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="21.6818%" y="549" width="0.0824%" height="15" fill="rgb(232,159,9)" fg:x="263" fg:w="1"/><text x="21.9318%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.6818%" y="533" width="0.0824%" height="15" fill="rgb(210,39,32)" fg:x="263" fg:w="1"/><text x="21.9318%" y="543.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="21.7642%" y="549" width="0.0824%" height="15" fill="rgb(216,194,45)" fg:x="264" fg:w="1"/><text x="22.0142%" y="559.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="21.7642%" y="533" width="0.0824%" height="15" fill="rgb(218,18,35)" fg:x="264" fg:w="1"/><text x="22.0142%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="21.7642%" y="517" width="0.0824%" height="15" fill="rgb(207,83,51)" fg:x="264" fg:w="1"/><text x="22.0142%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="21.7642%" y="501" width="0.0824%" height="15" fill="rgb(225,63,43)" fg:x="264" fg:w="1"/><text x="22.0142%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="21.7642%" y="485" width="0.0824%" height="15" fill="rgb(207,57,36)" fg:x="264" fg:w="1"/><text x="22.0142%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.8467%" y="421" width="0.0824%" height="15" fill="rgb(216,99,33)" fg:x="265" fg:w="1"/><text x="22.0967%" y="431.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="21.8467%" y="533" width="0.1649%" height="15" fill="rgb(225,42,16)" fg:x="265" fg:w="2"/><text x="22.0967%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="21.8467%" y="517" width="0.1649%" height="15" fill="rgb(220,201,45)" fg:x="265" fg:w="2"/><text x="22.0967%" y="527.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="21.8467%" y="501" width="0.1649%" height="15" fill="rgb(225,33,4)" fg:x="265" fg:w="2"/><text x="22.0967%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="21.8467%" y="485" width="0.1649%" height="15" fill="rgb(224,33,50)" fg:x="265" fg:w="2"/><text x="22.0967%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="21.8467%" y="469" width="0.1649%" height="15" fill="rgb(246,198,51)" fg:x="265" fg:w="2"/><text x="22.0967%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="21.8467%" y="453" width="0.1649%" height="15" fill="rgb(205,22,4)" fg:x="265" fg:w="2"/><text x="22.0967%" y="463.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="21.8467%" y="437" width="0.1649%" height="15" fill="rgb(206,3,8)" fg:x="265" fg:w="2"/><text x="22.0967%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.9291%" y="421" width="0.0824%" height="15" fill="rgb(251,23,15)" fg:x="266" fg:w="1"/><text x="22.1791%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.0115%" y="501" width="0.0824%" height="15" fill="rgb(252,88,28)" fg:x="267" fg:w="1"/><text x="22.2615%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.41%)</title><rect x="21.7642%" y="565" width="0.4122%" height="15" fill="rgb(212,127,14)" fg:x="264" fg:w="5"/><text x="22.0142%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.33%)</title><rect x="21.8467%" y="549" width="0.3298%" height="15" fill="rgb(247,145,37)" fg:x="265" fg:w="4"/><text x="22.0967%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="22.0115%" y="533" width="0.1649%" height="15" fill="rgb(209,117,53)" fg:x="267" fg:w="2"/><text x="22.2615%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="22.0115%" y="517" width="0.1649%" height="15" fill="rgb(212,90,42)" fg:x="267" fg:w="2"/><text x="22.2615%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="22.0940%" y="501" width="0.0824%" height="15" fill="rgb(218,164,37)" fg:x="268" fg:w="1"/><text x="22.3440%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="22.0940%" y="485" width="0.0824%" height="15" fill="rgb(246,65,34)" fg:x="268" fg:w="1"/><text x="22.3440%" y="495.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="22.1764%" y="549" width="0.0824%" height="15" fill="rgb(231,100,33)" fg:x="269" fg:w="1"/><text x="22.4264%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="22.1764%" y="533" width="0.0824%" height="15" fill="rgb(228,126,14)" fg:x="269" fg:w="1"/><text x="22.4264%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.2589%" y="517" width="0.0824%" height="15" fill="rgb(215,173,21)" fg:x="270" fg:w="1"/><text x="22.5089%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.2589%" y="501" width="0.0824%" height="15" fill="rgb(210,6,40)" fg:x="270" fg:w="1"/><text x="22.5089%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.2589%" y="485" width="0.0824%" height="15" fill="rgb(212,48,18)" fg:x="270" fg:w="1"/><text x="22.5089%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.2589%" y="469" width="0.0824%" height="15" fill="rgb(230,214,11)" fg:x="270" fg:w="1"/><text x="22.5089%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.2589%" y="453" width="0.0824%" height="15" fill="rgb(254,105,39)" fg:x="270" fg:w="1"/><text x="22.5089%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="22.2589%" y="437" width="0.0824%" height="15" fill="rgb(245,158,5)" fg:x="270" fg:w="1"/><text x="22.5089%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="22.2589%" y="421" width="0.0824%" height="15" fill="rgb(249,208,11)" fg:x="270" fg:w="1"/><text x="22.5089%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="22.2589%" y="405" width="0.0824%" height="15" fill="rgb(210,39,28)" fg:x="270" fg:w="1"/><text x="22.5089%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.2589%" y="389" width="0.0824%" height="15" fill="rgb(211,56,53)" fg:x="270" fg:w="1"/><text x="22.5089%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.2589%" y="373" width="0.0824%" height="15" fill="rgb(226,201,30)" fg:x="270" fg:w="1"/><text x="22.5089%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="22.2589%" y="357" width="0.0824%" height="15" fill="rgb(239,101,34)" fg:x="270" fg:w="1"/><text x="22.5089%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="22.2589%" y="341" width="0.0824%" height="15" fill="rgb(226,209,5)" fg:x="270" fg:w="1"/><text x="22.5089%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="22.2589%" y="325" width="0.0824%" height="15" fill="rgb(250,105,47)" fg:x="270" fg:w="1"/><text x="22.5089%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="22.2589%" y="309" width="0.0824%" height="15" fill="rgb(230,72,3)" fg:x="270" fg:w="1"/><text x="22.5089%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.2589%" y="293" width="0.0824%" height="15" fill="rgb(232,218,39)" fg:x="270" fg:w="1"/><text x="22.5089%" y="303.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (9 samples, 0.74%)</title><rect x="21.6818%" y="613" width="0.7420%" height="15" fill="rgb(248,166,6)" fg:x="263" fg:w="9"/><text x="21.9318%" y="623.50"></text></g><g><title>plugins_core::build::QuickThing::make (9 samples, 0.74%)</title><rect x="21.6818%" y="597" width="0.7420%" height="15" fill="rgb(247,89,20)" fg:x="263" fg:w="9"/><text x="21.9318%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.66%)</title><rect x="21.7642%" y="581" width="0.6595%" height="15" fill="rgb(248,130,54)" fg:x="264" fg:w="8"/><text x="22.0142%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.25%)</title><rect x="22.1764%" y="565" width="0.2473%" height="15" fill="rgb(234,196,4)" fg:x="269" fg:w="3"/><text x="22.4264%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="22.2589%" y="549" width="0.1649%" height="15" fill="rgb(250,143,31)" fg:x="270" fg:w="2"/><text x="22.5089%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="22.2589%" y="533" width="0.1649%" height="15" fill="rgb(211,110,34)" fg:x="270" fg:w="2"/><text x="22.5089%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="22.3413%" y="517" width="0.0824%" height="15" fill="rgb(215,124,48)" fg:x="271" fg:w="1"/><text x="22.5913%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.3413%" y="501" width="0.0824%" height="15" fill="rgb(216,46,13)" fg:x="271" fg:w="1"/><text x="22.5913%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="22.3413%" y="485" width="0.0824%" height="15" fill="rgb(205,184,25)" fg:x="271" fg:w="1"/><text x="22.5913%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.3413%" y="469" width="0.0824%" height="15" fill="rgb(228,1,10)" fg:x="271" fg:w="1"/><text x="22.5913%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="22.3413%" y="453" width="0.0824%" height="15" fill="rgb(213,116,27)" fg:x="271" fg:w="1"/><text x="22.5913%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.3413%" y="437" width="0.0824%" height="15" fill="rgb(241,95,50)" fg:x="271" fg:w="1"/><text x="22.5913%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="22.5062%" y="597" width="0.0824%" height="15" fill="rgb(238,48,32)" fg:x="273" fg:w="1"/><text x="22.7562%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="22.5062%" y="581" width="0.0824%" height="15" fill="rgb(235,113,49)" fg:x="273" fg:w="1"/><text x="22.7562%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="22.5062%" y="565" width="0.0824%" height="15" fill="rgb(205,127,43)" fg:x="273" fg:w="1"/><text x="22.7562%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="22.5062%" y="549" width="0.0824%" height="15" fill="rgb(250,162,2)" fg:x="273" fg:w="1"/><text x="22.7562%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.5886%" y="549" width="0.0824%" height="15" fill="rgb(220,13,41)" fg:x="274" fg:w="1"/><text x="22.8386%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="22.5886%" y="565" width="0.1649%" height="15" fill="rgb(249,221,25)" fg:x="274" fg:w="2"/><text x="22.8386%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="22.6711%" y="549" width="0.0824%" height="15" fill="rgb(215,208,19)" fg:x="275" fg:w="1"/><text x="22.9211%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (3 samples, 0.25%)</title><rect x="22.5886%" y="597" width="0.2473%" height="15" fill="rgb(236,175,2)" fg:x="274" fg:w="3"/><text x="22.8386%" y="607.50"></text></g><g><title>kernel::model::props::save_props (3 samples, 0.25%)</title><rect x="22.5886%" y="581" width="0.2473%" height="15" fill="rgb(241,52,2)" fg:x="274" fg:w="3"/><text x="22.8386%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="22.7535%" y="565" width="0.0824%" height="15" fill="rgb(248,140,14)" fg:x="276" fg:w="1"/><text x="23.0035%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="22.7535%" y="549" width="0.0824%" height="15" fill="rgb(253,22,42)" fg:x="276" fg:w="1"/><text x="23.0035%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="22.7535%" y="533" width="0.0824%" height="15" fill="rgb(234,61,47)" fg:x="276" fg:w="1"/><text x="23.0035%" y="543.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="22.7535%" y="517" width="0.0824%" height="15" fill="rgb(208,226,15)" fg:x="276" fg:w="1"/><text x="23.0035%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.8359%" y="517" width="0.0824%" height="15" fill="rgb(217,221,4)" fg:x="277" fg:w="1"/><text x="23.0859%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.8359%" y="501" width="0.0824%" height="15" fill="rgb(212,174,34)" fg:x="277" fg:w="1"/><text x="23.0859%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.8359%" y="485" width="0.0824%" height="15" fill="rgb(253,83,4)" fg:x="277" fg:w="1"/><text x="23.0859%" y="495.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="22.8359%" y="581" width="0.1649%" height="15" fill="rgb(250,195,49)" fg:x="277" fg:w="2"/><text x="23.0859%" y="591.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="22.8359%" y="565" width="0.1649%" height="15" fill="rgb(241,192,25)" fg:x="277" fg:w="2"/><text x="23.0859%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="22.8359%" y="549" width="0.1649%" height="15" fill="rgb(208,124,10)" fg:x="277" fg:w="2"/><text x="23.0859%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="22.8359%" y="533" width="0.1649%" height="15" fill="rgb(222,33,0)" fg:x="277" fg:w="2"/><text x="23.0859%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="22.9184%" y="517" width="0.0824%" height="15" fill="rgb(234,209,28)" fg:x="278" fg:w="1"/><text x="23.1684%" y="527.50"></text></g><g><title>plugins_core::build::Build::new_world (3 samples, 0.25%)</title><rect x="22.8359%" y="597" width="0.2473%" height="15" fill="rgb(224,11,23)" fg:x="277" fg:w="3"/><text x="23.0859%" y="607.50"></text></g><g><title>kernel::model::builder::build_entity (1 samples, 0.08%)</title><rect x="23.0008%" y="581" width="0.0824%" height="15" fill="rgb(232,99,1)" fg:x="279" fg:w="1"/><text x="23.2508%" y="591.50"></text></g><g><title>kernel::model::builder::EntityBuilder::new (1 samples, 0.08%)</title><rect x="23.0008%" y="565" width="0.0824%" height="15" fill="rgb(237,95,45)" fg:x="279" fg:w="1"/><text x="23.2508%" y="575.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="23.0008%" y="549" width="0.0824%" height="15" fill="rgb(208,109,11)" fg:x="279" fg:w="1"/><text x="23.2508%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="23.0008%" y="533" width="0.0824%" height="15" fill="rgb(216,190,48)" fg:x="279" fg:w="1"/><text x="23.2508%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="23.1657%" y="565" width="0.0824%" height="15" fill="rgb(251,171,36)" fg:x="281" fg:w="1"/><text x="23.4157%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="23.2481%" y="549" width="0.1649%" height="15" fill="rgb(230,62,22)" fg:x="282" fg:w="2"/><text x="23.4981%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="23.2481%" y="533" width="0.1649%" height="15" fill="rgb(225,114,35)" fg:x="282" fg:w="2"/><text x="23.4981%" y="543.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="23.2481%" y="517" width="0.1649%" height="15" fill="rgb(215,118,42)" fg:x="282" fg:w="2"/><text x="23.4981%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="23.2481%" y="501" width="0.1649%" height="15" fill="rgb(243,119,21)" fg:x="282" fg:w="2"/><text x="23.4981%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="23.2481%" y="485" width="0.1649%" height="15" fill="rgb(252,177,53)" fg:x="282" fg:w="2"/><text x="23.4981%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="23.3306%" y="469" width="0.0824%" height="15" fill="rgb(237,209,29)" fg:x="283" fg:w="1"/><text x="23.5806%" y="479.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="23.3306%" y="453" width="0.0824%" height="15" fill="rgb(212,65,23)" fg:x="283" fg:w="1"/><text x="23.5806%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.3306%" y="437" width="0.0824%" height="15" fill="rgb(230,222,46)" fg:x="283" fg:w="1"/><text x="23.5806%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.3306%" y="421" width="0.0824%" height="15" fill="rgb(215,135,32)" fg:x="283" fg:w="1"/><text x="23.5806%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.3306%" y="405" width="0.0824%" height="15" fill="rgb(246,101,22)" fg:x="283" fg:w="1"/><text x="23.5806%" y="415.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.25%)</title><rect x="23.2481%" y="565" width="0.2473%" height="15" fill="rgb(206,107,13)" fg:x="282" fg:w="3"/><text x="23.4981%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="23.4130%" y="549" width="0.0824%" height="15" fill="rgb(250,100,44)" fg:x="284" fg:w="1"/><text x="23.6630%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.4130%" y="533" width="0.0824%" height="15" fill="rgb(231,147,38)" fg:x="284" fg:w="1"/><text x="23.6630%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="23.4130%" y="517" width="0.0824%" height="15" fill="rgb(229,8,40)" fg:x="284" fg:w="1"/><text x="23.6630%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.41%)</title><rect x="23.1657%" y="581" width="0.4122%" height="15" fill="rgb(221,135,30)" fg:x="281" fg:w="5"/><text x="23.4157%" y="591.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="23.4955%" y="565" width="0.0824%" height="15" fill="rgb(249,193,18)" fg:x="285" fg:w="1"/><text x="23.7455%" y="575.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="23.4955%" y="549" width="0.0824%" height="15" fill="rgb(209,133,39)" fg:x="285" fg:w="1"/><text x="23.7455%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="23.5779%" y="581" width="0.1649%" height="15" fill="rgb(232,100,14)" fg:x="286" fg:w="2"/><text x="23.8279%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.6603%" y="565" width="0.0824%" height="15" fill="rgb(224,185,1)" fg:x="287" fg:w="1"/><text x="23.9103%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.6603%" y="549" width="0.0824%" height="15" fill="rgb(223,139,8)" fg:x="287" fg:w="1"/><text x="23.9103%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="23.6603%" y="533" width="0.0824%" height="15" fill="rgb(232,213,38)" fg:x="287" fg:w="1"/><text x="23.9103%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="23.6603%" y="517" width="0.0824%" height="15" fill="rgb(207,94,22)" fg:x="287" fg:w="1"/><text x="23.9103%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="23.6603%" y="501" width="0.0824%" height="15" fill="rgb(219,183,54)" fg:x="287" fg:w="1"/><text x="23.9103%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.6603%" y="485" width="0.0824%" height="15" fill="rgb(216,185,54)" fg:x="287" fg:w="1"/><text x="23.9103%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.6603%" y="469" width="0.0824%" height="15" fill="rgb(254,217,39)" fg:x="287" fg:w="1"/><text x="23.9103%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="23.6603%" y="453" width="0.0824%" height="15" fill="rgb(240,178,23)" fg:x="287" fg:w="1"/><text x="23.9103%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="23.6603%" y="437" width="0.0824%" height="15" fill="rgb(218,11,47)" fg:x="287" fg:w="1"/><text x="23.9103%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="23.6603%" y="421" width="0.0824%" height="15" fill="rgb(218,51,51)" fg:x="287" fg:w="1"/><text x="23.9103%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="23.6603%" y="405" width="0.0824%" height="15" fill="rgb(238,126,27)" fg:x="287" fg:w="1"/><text x="23.9103%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.6603%" y="389" width="0.0824%" height="15" fill="rgb(249,202,22)" fg:x="287" fg:w="1"/><text x="23.9103%" y="399.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="23.7428%" y="565" width="0.0824%" height="15" fill="rgb(254,195,49)" fg:x="288" fg:w="1"/><text x="23.9928%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="23.7428%" y="549" width="0.0824%" height="15" fill="rgb(208,123,14)" fg:x="288" fg:w="1"/><text x="23.9928%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.8252%" y="533" width="0.0824%" height="15" fill="rgb(224,200,8)" fg:x="289" fg:w="1"/><text x="24.0752%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.8252%" y="517" width="0.0824%" height="15" fill="rgb(217,61,36)" fg:x="289" fg:w="1"/><text x="24.0752%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.8252%" y="501" width="0.0824%" height="15" fill="rgb(206,35,45)" fg:x="289" fg:w="1"/><text x="24.0752%" y="511.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (229 samples, 18.88%)</title><rect x="5.1113%" y="629" width="18.8788%" height="15" fill="rgb(217,65,33)" fg:x="62" fg:w="229"/><text x="5.3613%" y="639.50">&lt;tests::HoldingKeyInVessel as..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (19 samples, 1.57%)</title><rect x="22.4237%" y="613" width="1.5664%" height="15" fill="rgb(222,158,48)" fg:x="272" fg:w="19"/><text x="22.6737%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (11 samples, 0.91%)</title><rect x="23.0833%" y="597" width="0.9068%" height="15" fill="rgb(254,2,54)" fg:x="280" fg:w="11"/><text x="23.3333%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.25%)</title><rect x="23.7428%" y="581" width="0.2473%" height="15" fill="rgb(250,143,38)" fg:x="288" fg:w="3"/><text x="23.9928%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="23.8252%" y="565" width="0.1649%" height="15" fill="rgb(248,25,0)" fg:x="289" fg:w="2"/><text x="24.0752%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="23.8252%" y="549" width="0.1649%" height="15" fill="rgb(206,152,27)" fg:x="289" fg:w="2"/><text x="24.0752%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="23.9077%" y="533" width="0.0824%" height="15" fill="rgb(240,77,30)" fg:x="290" fg:w="1"/><text x="24.1577%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (2 samples, 0.16%)</title><rect x="23.9901%" y="629" width="0.1649%" height="15" fill="rgb(231,5,3)" fg:x="291" fg:w="2"/><text x="24.2401%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="23.9901%" y="613" width="0.1649%" height="15" fill="rgb(207,226,32)" fg:x="291" fg:w="2"/><text x="24.2401%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="23.9901%" y="597" width="0.1649%" height="15" fill="rgb(222,207,47)" fg:x="291" fg:w="2"/><text x="24.2401%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="23.9901%" y="581" width="0.1649%" height="15" fill="rgb(229,115,45)" fg:x="291" fg:w="2"/><text x="24.2401%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.0725%" y="565" width="0.0824%" height="15" fill="rgb(224,191,6)" fg:x="292" fg:w="1"/><text x="24.3225%" y="575.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="24.1550%" y="613" width="0.0824%" height="15" fill="rgb(230,227,24)" fg:x="293" fg:w="1"/><text x="24.4050%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.1550%" y="597" width="0.0824%" height="15" fill="rgb(228,80,19)" fg:x="293" fg:w="1"/><text x="24.4050%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::rollback (1 samples, 0.08%)</title><rect x="24.2374%" y="613" width="0.0824%" height="15" fill="rgb(247,229,0)" fg:x="294" fg:w="1"/><text x="24.4874%" y="623.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="24.3199%" y="597" width="0.0824%" height="15" fill="rgb(237,194,15)" fg:x="295" fg:w="1"/><text x="24.5699%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="24.3199%" y="581" width="0.0824%" height="15" fill="rgb(219,203,20)" fg:x="295" fg:w="1"/><text x="24.5699%" y="591.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="24.3199%" y="565" width="0.0824%" height="15" fill="rgb(234,128,8)" fg:x="295" fg:w="1"/><text x="24.5699%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="24.3199%" y="549" width="0.0824%" height="15" fill="rgb(248,202,8)" fg:x="295" fg:w="1"/><text x="24.5699%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="24.3199%" y="533" width="0.0824%" height="15" fill="rgb(206,104,37)" fg:x="295" fg:w="1"/><text x="24.5699%" y="543.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="24.3199%" y="517" width="0.0824%" height="15" fill="rgb(223,8,27)" fg:x="295" fg:w="1"/><text x="24.5699%" y="527.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="24.3199%" y="501" width="0.0824%" height="15" fill="rgb(216,217,28)" fg:x="295" fg:w="1"/><text x="24.5699%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (4 samples, 0.33%)</title><rect x="24.3199%" y="613" width="0.3298%" height="15" fill="rgb(249,199,1)" fg:x="295" fg:w="4"/><text x="24.5699%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.25%)</title><rect x="24.4023%" y="597" width="0.2473%" height="15" fill="rgb(240,85,17)" fg:x="296" fg:w="3"/><text x="24.6523%" y="607.50"></text></g><g><title>core::fmt::write (3 samples, 0.25%)</title><rect x="24.4023%" y="581" width="0.2473%" height="15" fill="rgb(206,108,45)" fg:x="296" fg:w="3"/><text x="24.6523%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="24.4847%" y="565" width="0.1649%" height="15" fill="rgb(245,210,41)" fg:x="297" fg:w="2"/><text x="24.7347%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="24.4847%" y="549" width="0.1649%" height="15" fill="rgb(206,13,37)" fg:x="297" fg:w="2"/><text x="24.7347%" y="559.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="24.4847%" y="533" width="0.1649%" height="15" fill="rgb(250,61,18)" fg:x="297" fg:w="2"/><text x="24.7347%" y="543.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (2 samples, 0.16%)</title><rect x="24.4847%" y="517" width="0.1649%" height="15" fill="rgb(235,172,48)" fg:x="297" fg:w="2"/><text x="24.7347%" y="527.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="24.4847%" y="501" width="0.1649%" height="15" fill="rgb(249,201,17)" fg:x="297" fg:w="2"/><text x="24.7347%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="24.5672%" y="485" width="0.0824%" height="15" fill="rgb(219,208,6)" fg:x="298" fg:w="1"/><text x="24.8172%" y="495.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="24.5672%" y="469" width="0.0824%" height="15" fill="rgb(248,31,23)" fg:x="298" fg:w="1"/><text x="24.8172%" y="479.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="24.5672%" y="453" width="0.0824%" height="15" fill="rgb(245,15,42)" fg:x="298" fg:w="1"/><text x="24.8172%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.5672%" y="437" width="0.0824%" height="15" fill="rgb(222,217,39)" fg:x="298" fg:w="1"/><text x="24.8172%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.5672%" y="421" width="0.0824%" height="15" fill="rgb(210,219,27)" fg:x="298" fg:w="1"/><text x="24.8172%" y="431.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="24.5672%" y="405" width="0.0824%" height="15" fill="rgb(252,166,36)" fg:x="298" fg:w="1"/><text x="24.8172%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="24.5672%" y="389" width="0.0824%" height="15" fill="rgb(245,132,34)" fg:x="298" fg:w="1"/><text x="24.8172%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="24.5672%" y="373" width="0.0824%" height="15" fill="rgb(236,54,3)" fg:x="298" fg:w="1"/><text x="24.8172%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="24.5672%" y="357" width="0.0824%" height="15" fill="rgb(241,173,43)" fg:x="298" fg:w="1"/><text x="24.8172%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="24.5672%" y="341" width="0.0824%" height="15" fill="rgb(215,190,9)" fg:x="298" fg:w="1"/><text x="24.8172%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="24.5672%" y="325" width="0.0824%" height="15" fill="rgb(242,101,16)" fg:x="298" fg:w="1"/><text x="24.8172%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="24.5672%" y="309" width="0.0824%" height="15" fill="rgb(223,190,21)" fg:x="298" fg:w="1"/><text x="24.8172%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="24.5672%" y="293" width="0.0824%" height="15" fill="rgb(215,228,25)" fg:x="298" fg:w="1"/><text x="24.8172%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.5672%" y="277" width="0.0824%" height="15" fill="rgb(225,36,22)" fg:x="298" fg:w="1"/><text x="24.8172%" y="287.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="24.5672%" y="261" width="0.0824%" height="15" fill="rgb(251,106,46)" fg:x="298" fg:w="1"/><text x="24.8172%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="24.5672%" y="245" width="0.0824%" height="15" fill="rgb(208,90,1)" fg:x="298" fg:w="1"/><text x="24.8172%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="24.6496%" y="581" width="0.1649%" height="15" fill="rgb(243,10,4)" fg:x="299" fg:w="2"/><text x="24.8996%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;engine::session::state::ModifiedEntity&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="24.7321%" y="565" width="0.0824%" height="15" fill="rgb(212,137,27)" fg:x="300" fg:w="1"/><text x="24.9821%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.7321%" y="549" width="0.0824%" height="15" fill="rgb(231,220,49)" fg:x="300" fg:w="1"/><text x="24.9821%" y="559.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="24.8145%" y="581" width="0.0824%" height="15" fill="rgb(237,96,20)" fg:x="301" fg:w="1"/><text x="25.0645%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="24.8145%" y="565" width="0.0824%" height="15" fill="rgb(239,229,30)" fg:x="301" fg:w="1"/><text x="25.0645%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.8145%" y="549" width="0.0824%" height="15" fill="rgb(219,65,33)" fg:x="301" fg:w="1"/><text x="25.0645%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="24.8969%" y="533" width="0.0824%" height="15" fill="rgb(243,134,7)" fg:x="302" fg:w="1"/><text x="25.1469%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="24.8969%" y="517" width="0.0824%" height="15" fill="rgb(216,177,54)" fg:x="302" fg:w="1"/><text x="25.1469%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.1443%" y="453" width="0.0824%" height="15" fill="rgb(211,160,20)" fg:x="305" fg:w="1"/><text x="25.3943%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.33%)</title><rect x="24.9794%" y="501" width="0.3298%" height="15" fill="rgb(239,85,39)" fg:x="303" fg:w="4"/><text x="25.2294%" y="511.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.33%)</title><rect x="24.9794%" y="485" width="0.3298%" height="15" fill="rgb(232,125,22)" fg:x="303" fg:w="4"/><text x="25.2294%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="25.1443%" y="469" width="0.1649%" height="15" fill="rgb(244,57,34)" fg:x="305" fg:w="2"/><text x="25.3943%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="25.2267%" y="453" width="0.0824%" height="15" fill="rgb(214,203,32)" fg:x="306" fg:w="1"/><text x="25.4767%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (5 samples, 0.41%)</title><rect x="24.9794%" y="517" width="0.4122%" height="15" fill="rgb(207,58,43)" fg:x="303" fg:w="5"/><text x="25.2294%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.3092%" y="501" width="0.0824%" height="15" fill="rgb(215,193,15)" fg:x="307" fg:w="1"/><text x="25.5592%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="25.3092%" y="485" width="0.0824%" height="15" fill="rgb(232,15,44)" fg:x="307" fg:w="1"/><text x="25.5592%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="25.3916%" y="501" width="0.1649%" height="15" fill="rgb(212,3,48)" fg:x="308" fg:w="2"/><text x="25.6416%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.4740%" y="485" width="0.0824%" height="15" fill="rgb(218,128,7)" fg:x="309" fg:w="1"/><text x="25.7240%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="25.6389%" y="437" width="0.0824%" height="15" fill="rgb(226,216,39)" fg:x="311" fg:w="1"/><text x="25.8889%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.6389%" y="421" width="0.0824%" height="15" fill="rgb(243,47,51)" fg:x="311" fg:w="1"/><text x="25.8889%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="25.7214%" y="437" width="0.0824%" height="15" fill="rgb(241,183,40)" fg:x="312" fg:w="1"/><text x="25.9714%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="25.7214%" y="421" width="0.0824%" height="15" fill="rgb(231,217,32)" fg:x="312" fg:w="1"/><text x="25.9714%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="25.7214%" y="405" width="0.0824%" height="15" fill="rgb(229,61,38)" fg:x="312" fg:w="1"/><text x="25.9714%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.7214%" y="389" width="0.0824%" height="15" fill="rgb(225,210,5)" fg:x="312" fg:w="1"/><text x="25.9714%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.25%)</title><rect x="25.6389%" y="485" width="0.2473%" height="15" fill="rgb(231,79,45)" fg:x="311" fg:w="3"/><text x="25.8889%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="25.6389%" y="469" width="0.2473%" height="15" fill="rgb(224,100,7)" fg:x="311" fg:w="3"/><text x="25.8889%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="25.6389%" y="453" width="0.2473%" height="15" fill="rgb(241,198,18)" fg:x="311" fg:w="3"/><text x="25.8889%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.8038%" y="437" width="0.0824%" height="15" fill="rgb(252,97,53)" fg:x="313" fg:w="1"/><text x="26.0538%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="25.8038%" y="421" width="0.0824%" height="15" fill="rgb(220,88,7)" fg:x="313" fg:w="1"/><text x="26.0538%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.8038%" y="405" width="0.0824%" height="15" fill="rgb(213,176,14)" fg:x="313" fg:w="1"/><text x="26.0538%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="25.8862%" y="485" width="0.0824%" height="15" fill="rgb(246,73,7)" fg:x="314" fg:w="1"/><text x="26.1362%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.8862%" y="469" width="0.0824%" height="15" fill="rgb(245,64,36)" fg:x="314" fg:w="1"/><text x="26.1362%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 0.49%)</title><rect x="26.1336%" y="469" width="0.4946%" height="15" fill="rgb(245,80,10)" fg:x="317" fg:w="6"/><text x="26.3836%" y="479.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.41%)</title><rect x="26.2160%" y="453" width="0.4122%" height="15" fill="rgb(232,107,50)" fg:x="318" fg:w="5"/><text x="26.4660%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.33%)</title><rect x="26.2984%" y="437" width="0.3298%" height="15" fill="rgb(253,3,0)" fg:x="319" fg:w="4"/><text x="26.5484%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.33%)</title><rect x="26.2984%" y="421" width="0.3298%" height="15" fill="rgb(212,99,53)" fg:x="319" fg:w="4"/><text x="26.5484%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.25%)</title><rect x="26.3809%" y="405" width="0.2473%" height="15" fill="rgb(249,111,54)" fg:x="320" fg:w="3"/><text x="26.6309%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="26.3809%" y="389" width="0.2473%" height="15" fill="rgb(249,55,30)" fg:x="320" fg:w="3"/><text x="26.6309%" y="399.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="26.3809%" y="373" width="0.2473%" height="15" fill="rgb(237,47,42)" fg:x="320" fg:w="3"/><text x="26.6309%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="26.6282%" y="453" width="0.0824%" height="15" fill="rgb(211,20,18)" fg:x="323" fg:w="1"/><text x="26.8782%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="26.6282%" y="469" width="0.2473%" height="15" fill="rgb(231,203,46)" fg:x="323" fg:w="3"/><text x="26.8782%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="26.7106%" y="453" width="0.1649%" height="15" fill="rgb(237,142,3)" fg:x="324" fg:w="2"/><text x="26.9606%" y="463.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="26.7106%" y="437" width="0.1649%" height="15" fill="rgb(241,107,1)" fg:x="324" fg:w="2"/><text x="26.9606%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="26.7931%" y="421" width="0.0824%" height="15" fill="rgb(229,83,13)" fg:x="325" fg:w="1"/><text x="27.0431%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="26.7931%" y="405" width="0.0824%" height="15" fill="rgb(241,91,40)" fg:x="325" fg:w="1"/><text x="27.0431%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="26.7931%" y="389" width="0.0824%" height="15" fill="rgb(225,3,45)" fg:x="325" fg:w="1"/><text x="27.0431%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.7931%" y="373" width="0.0824%" height="15" fill="rgb(244,223,14)" fg:x="325" fg:w="1"/><text x="27.0431%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="26.7931%" y="357" width="0.0824%" height="15" fill="rgb(224,124,37)" fg:x="325" fg:w="1"/><text x="27.0431%" y="367.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (19 samples, 1.57%)</title><rect x="25.3916%" y="517" width="1.5664%" height="15" fill="rgb(251,171,30)" fg:x="308" fg:w="19"/><text x="25.6416%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (17 samples, 1.40%)</title><rect x="25.5565%" y="501" width="1.4015%" height="15" fill="rgb(236,46,54)" fg:x="310" fg:w="17"/><text x="25.8065%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.99%)</title><rect x="25.9687%" y="485" width="0.9893%" height="15" fill="rgb(245,213,5)" fg:x="315" fg:w="12"/><text x="26.2187%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="26.8755%" y="469" width="0.0824%" height="15" fill="rgb(230,144,27)" fg:x="326" fg:w="1"/><text x="27.1255%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (25 samples, 2.06%)</title><rect x="24.9794%" y="533" width="2.0610%" height="15" fill="rgb(220,86,6)" fg:x="303" fg:w="25"/><text x="25.2294%" y="543.50">&lt;..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="26.9580%" y="517" width="0.0824%" height="15" fill="rgb(240,20,13)" fg:x="327" fg:w="1"/><text x="27.2080%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="26.9580%" y="501" width="0.0824%" height="15" fill="rgb(217,89,34)" fg:x="327" fg:w="1"/><text x="27.2080%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="26.9580%" y="485" width="0.0824%" height="15" fill="rgb(229,13,5)" fg:x="327" fg:w="1"/><text x="27.2080%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="26.9580%" y="469" width="0.0824%" height="15" fill="rgb(244,67,35)" fg:x="327" fg:w="1"/><text x="27.2080%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.9580%" y="453" width="0.0824%" height="15" fill="rgb(221,40,2)" fg:x="327" fg:w="1"/><text x="27.2080%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.9580%" y="437" width="0.0824%" height="15" fill="rgb(237,157,21)" fg:x="327" fg:w="1"/><text x="27.2080%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.1228%" y="501" width="0.0824%" height="15" fill="rgb(222,94,11)" fg:x="329" fg:w="1"/><text x="27.3728%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.2053%" y="485" width="0.0824%" height="15" fill="rgb(249,113,6)" fg:x="330" fg:w="1"/><text x="27.4553%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.2877%" y="485" width="0.0824%" height="15" fill="rgb(238,137,36)" fg:x="331" fg:w="1"/><text x="27.5377%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.2877%" y="469" width="0.0824%" height="15" fill="rgb(210,102,26)" fg:x="331" fg:w="1"/><text x="27.5377%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="27.3702%" y="453" width="0.1649%" height="15" fill="rgb(218,30,30)" fg:x="332" fg:w="2"/><text x="27.6202%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="27.5350%" y="453" width="0.1649%" height="15" fill="rgb(214,67,26)" fg:x="334" fg:w="2"/><text x="27.7850%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.74%)</title><rect x="27.0404%" y="533" width="0.7420%" height="15" fill="rgb(251,9,53)" fg:x="328" fg:w="9"/><text x="27.2904%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.74%)</title><rect x="27.0404%" y="517" width="0.7420%" height="15" fill="rgb(228,204,25)" fg:x="328" fg:w="9"/><text x="27.2904%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.58%)</title><rect x="27.2053%" y="501" width="0.5771%" height="15" fill="rgb(207,153,8)" fg:x="330" fg:w="7"/><text x="27.4553%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="27.3702%" y="485" width="0.4122%" height="15" fill="rgb(242,9,16)" fg:x="332" fg:w="5"/><text x="27.6202%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="27.3702%" y="469" width="0.4122%" height="15" fill="rgb(217,211,10)" fg:x="332" fg:w="5"/><text x="27.6202%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="27.6999%" y="453" width="0.0824%" height="15" fill="rgb(219,228,52)" fg:x="336" fg:w="1"/><text x="27.9499%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="27.6999%" y="437" width="0.0824%" height="15" fill="rgb(231,92,29)" fg:x="336" fg:w="1"/><text x="27.9499%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.6999%" y="421" width="0.0824%" height="15" fill="rgb(232,8,23)" fg:x="336" fg:w="1"/><text x="27.9499%" y="431.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="28.0297%" y="453" width="0.1649%" height="15" fill="rgb(216,211,34)" fg:x="340" fg:w="2"/><text x="28.2797%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="28.1946%" y="421" width="0.0824%" height="15" fill="rgb(236,151,0)" fg:x="342" fg:w="1"/><text x="28.4446%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="28.2770%" y="421" width="0.0824%" height="15" fill="rgb(209,168,3)" fg:x="343" fg:w="1"/><text x="28.5270%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="28.2770%" y="405" width="0.0824%" height="15" fill="rgb(208,129,28)" fg:x="343" fg:w="1"/><text x="28.5270%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="28.2770%" y="389" width="0.0824%" height="15" fill="rgb(229,78,22)" fg:x="343" fg:w="1"/><text x="28.5270%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="28.2770%" y="373" width="0.0824%" height="15" fill="rgb(228,187,13)" fg:x="343" fg:w="1"/><text x="28.5270%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.2770%" y="357" width="0.0824%" height="15" fill="rgb(240,119,24)" fg:x="343" fg:w="1"/><text x="28.5270%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.58%)</title><rect x="27.8648%" y="501" width="0.5771%" height="15" fill="rgb(209,194,42)" fg:x="338" fg:w="7"/><text x="28.1148%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.58%)</title><rect x="27.8648%" y="485" width="0.5771%" height="15" fill="rgb(247,200,46)" fg:x="338" fg:w="7"/><text x="28.1148%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="28.0297%" y="469" width="0.4122%" height="15" fill="rgb(218,76,16)" fg:x="340" fg:w="5"/><text x="28.2797%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="28.1946%" y="453" width="0.2473%" height="15" fill="rgb(225,21,48)" fg:x="342" fg:w="3"/><text x="28.4446%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="28.1946%" y="437" width="0.2473%" height="15" fill="rgb(239,223,50)" fg:x="342" fg:w="3"/><text x="28.4446%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="28.3594%" y="421" width="0.0824%" height="15" fill="rgb(244,45,21)" fg:x="344" fg:w="1"/><text x="28.6094%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="28.5243%" y="437" width="0.0824%" height="15" fill="rgb(232,33,43)" fg:x="346" fg:w="1"/><text x="28.7743%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="28.5243%" y="421" width="0.0824%" height="15" fill="rgb(209,8,3)" fg:x="346" fg:w="1"/><text x="28.7743%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.25%)</title><rect x="28.4419%" y="469" width="0.2473%" height="15" fill="rgb(214,25,53)" fg:x="345" fg:w="3"/><text x="28.6919%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="28.5243%" y="453" width="0.1649%" height="15" fill="rgb(254,186,54)" fg:x="346" fg:w="2"/><text x="28.7743%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="28.6068%" y="437" width="0.0824%" height="15" fill="rgb(208,174,49)" fg:x="347" fg:w="1"/><text x="28.8568%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.33%)</title><rect x="28.4419%" y="485" width="0.3298%" height="15" fill="rgb(233,191,51)" fg:x="345" fg:w="4"/><text x="28.6919%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="28.6892%" y="469" width="0.0824%" height="15" fill="rgb(222,134,10)" fg:x="348" fg:w="1"/><text x="28.9392%" y="479.50"></text></g><g><title>treediff::tools::record::mk (1 samples, 0.08%)</title><rect x="28.7716%" y="485" width="0.0824%" height="15" fill="rgb(230,226,20)" fg:x="349" fg:w="1"/><text x="29.0216%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (14 samples, 1.15%)</title><rect x="27.7824%" y="517" width="1.1542%" height="15" fill="rgb(251,111,25)" fg:x="337" fg:w="14"/><text x="28.0324%" y="527.50"></text></g><g><title>treediff::diff::diff (6 samples, 0.49%)</title><rect x="28.4419%" y="501" width="0.4946%" height="15" fill="rgb(224,40,46)" fg:x="345" fg:w="6"/><text x="28.6919%" y="511.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="28.8541%" y="485" width="0.0824%" height="15" fill="rgb(236,108,47)" fg:x="350" fg:w="1"/><text x="29.1041%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.41%)</title><rect x="29.0190%" y="485" width="0.4122%" height="15" fill="rgb(234,93,0)" fg:x="352" fg:w="5"/><text x="29.2690%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.3487%" y="469" width="0.0824%" height="15" fill="rgb(224,213,32)" fg:x="356" fg:w="1"/><text x="29.5987%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="29.4312%" y="485" width="0.0824%" height="15" fill="rgb(251,11,48)" fg:x="357" fg:w="1"/><text x="29.6812%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="29.4312%" y="469" width="0.0824%" height="15" fill="rgb(236,173,5)" fg:x="357" fg:w="1"/><text x="29.6812%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="29.5136%" y="485" width="0.0824%" height="15" fill="rgb(230,95,12)" fg:x="358" fg:w="1"/><text x="29.7636%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="29.5136%" y="469" width="0.0824%" height="15" fill="rgb(232,209,1)" fg:x="358" fg:w="1"/><text x="29.7636%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.5136%" y="453" width="0.0824%" height="15" fill="rgb(232,6,1)" fg:x="358" fg:w="1"/><text x="29.7636%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.5136%" y="437" width="0.0824%" height="15" fill="rgb(210,224,50)" fg:x="358" fg:w="1"/><text x="29.7636%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="29.5136%" y="421" width="0.0824%" height="15" fill="rgb(228,127,35)" fg:x="358" fg:w="1"/><text x="29.7636%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="29.5960%" y="469" width="0.0824%" height="15" fill="rgb(245,102,45)" fg:x="359" fg:w="1"/><text x="29.8460%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="29.6785%" y="453" width="0.0824%" height="15" fill="rgb(214,1,49)" fg:x="360" fg:w="1"/><text x="29.9285%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.8434%" y="437" width="0.0824%" height="15" fill="rgb(226,163,40)" fg:x="362" fg:w="1"/><text x="30.0934%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="29.9258%" y="421" width="0.0824%" height="15" fill="rgb(239,212,28)" fg:x="363" fg:w="1"/><text x="30.1758%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="30.0907%" y="405" width="0.0824%" height="15" fill="rgb(220,20,13)" fg:x="365" fg:w="1"/><text x="30.3407%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="30.0907%" y="389" width="0.0824%" height="15" fill="rgb(210,164,35)" fg:x="365" fg:w="1"/><text x="30.3407%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="30.0907%" y="373" width="0.0824%" height="15" fill="rgb(248,109,41)" fg:x="365" fg:w="1"/><text x="30.3407%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="30.0907%" y="357" width="0.0824%" height="15" fill="rgb(238,23,50)" fg:x="365" fg:w="1"/><text x="30.3407%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="30.0907%" y="341" width="0.0824%" height="15" fill="rgb(211,48,49)" fg:x="365" fg:w="1"/><text x="30.3407%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.33%)</title><rect x="29.9258%" y="437" width="0.3298%" height="15" fill="rgb(223,36,21)" fg:x="363" fg:w="4"/><text x="30.1758%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.25%)</title><rect x="30.0082%" y="421" width="0.2473%" height="15" fill="rgb(207,123,46)" fg:x="364" fg:w="3"/><text x="30.2582%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.1731%" y="405" width="0.0824%" height="15" fill="rgb(240,218,32)" fg:x="366" fg:w="1"/><text x="30.4231%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.5029%" y="405" width="0.0824%" height="15" fill="rgb(252,5,43)" fg:x="370" fg:w="1"/><text x="30.7529%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="30.5853%" y="405" width="0.0824%" height="15" fill="rgb(252,84,19)" fg:x="371" fg:w="1"/><text x="30.8353%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.74%)</title><rect x="30.5029%" y="421" width="0.7420%" height="15" fill="rgb(243,152,39)" fg:x="370" fg:w="9"/><text x="30.7529%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.58%)</title><rect x="30.6678%" y="405" width="0.5771%" height="15" fill="rgb(234,160,15)" fg:x="372" fg:w="7"/><text x="30.9178%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="30.7502%" y="389" width="0.4946%" height="15" fill="rgb(237,34,20)" fg:x="373" fg:w="6"/><text x="31.0002%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="30.9151%" y="373" width="0.3298%" height="15" fill="rgb(229,97,13)" fg:x="375" fg:w="4"/><text x="31.1651%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.1624%" y="357" width="0.0824%" height="15" fill="rgb(234,71,50)" fg:x="378" fg:w="1"/><text x="31.4124%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (19 samples, 1.57%)</title><rect x="29.7609%" y="453" width="1.5664%" height="15" fill="rgb(253,155,4)" fg:x="361" fg:w="19"/><text x="30.0109%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (13 samples, 1.07%)</title><rect x="30.2556%" y="437" width="1.0717%" height="15" fill="rgb(222,185,37)" fg:x="367" fg:w="13"/><text x="30.5056%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.2448%" y="421" width="0.0824%" height="15" fill="rgb(251,177,13)" fg:x="379" fg:w="1"/><text x="31.4948%" y="431.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (30 samples, 2.47%)</title><rect x="28.9365%" y="517" width="2.4732%" height="15" fill="rgb(250,179,40)" fg:x="351" fg:w="30"/><text x="29.1865%" y="527.50">ke..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (30 samples, 2.47%)</title><rect x="28.9365%" y="501" width="2.4732%" height="15" fill="rgb(242,44,2)" fg:x="351" fg:w="30"/><text x="29.1865%" y="511.50">&lt;s..</text></g><g><title>serde::ser::Serializer::collect_map (22 samples, 1.81%)</title><rect x="29.5960%" y="485" width="1.8137%" height="15" fill="rgb(216,177,13)" fg:x="359" fg:w="22"/><text x="29.8460%" y="495.50">s..</text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (21 samples, 1.73%)</title><rect x="29.6785%" y="469" width="1.7312%" height="15" fill="rgb(216,106,43)" fg:x="360" fg:w="21"/><text x="29.9285%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="31.3273%" y="453" width="0.0824%" height="15" fill="rgb(216,183,2)" fg:x="380" fg:w="1"/><text x="31.5773%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.3273%" y="437" width="0.0824%" height="15" fill="rgb(249,75,3)" fg:x="380" fg:w="1"/><text x="31.5773%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="31.8219%" y="405" width="0.0824%" height="15" fill="rgb(219,67,39)" fg:x="386" fg:w="1"/><text x="32.0719%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="32.0692%" y="341" width="0.1649%" height="15" fill="rgb(253,228,2)" fg:x="389" fg:w="2"/><text x="32.3192%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="32.0692%" y="325" width="0.1649%" height="15" fill="rgb(235,138,27)" fg:x="389" fg:w="2"/><text x="32.3192%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="32.0692%" y="309" width="0.1649%" height="15" fill="rgb(236,97,51)" fg:x="389" fg:w="2"/><text x="32.3192%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="32.0692%" y="293" width="0.1649%" height="15" fill="rgb(240,80,30)" fg:x="389" fg:w="2"/><text x="32.3192%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="32.0692%" y="277" width="0.1649%" height="15" fill="rgb(230,178,19)" fg:x="389" fg:w="2"/><text x="32.3192%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="32.0692%" y="373" width="0.3298%" height="15" fill="rgb(210,190,27)" fg:x="389" fg:w="4"/><text x="32.3192%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="32.0692%" y="357" width="0.3298%" height="15" fill="rgb(222,107,31)" fg:x="389" fg:w="4"/><text x="32.3192%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="32.2341%" y="341" width="0.1649%" height="15" fill="rgb(216,127,34)" fg:x="391" fg:w="2"/><text x="32.4841%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.3166%" y="325" width="0.0824%" height="15" fill="rgb(234,116,52)" fg:x="392" fg:w="1"/><text x="32.5666%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="32.5639%" y="325" width="0.1649%" height="15" fill="rgb(222,124,15)" fg:x="395" fg:w="2"/><text x="32.8139%" y="335.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="32.5639%" y="309" width="0.1649%" height="15" fill="rgb(231,179,28)" fg:x="395" fg:w="2"/><text x="32.8139%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.91%)</title><rect x="31.9044%" y="405" width="0.9068%" height="15" fill="rgb(226,93,45)" fg:x="387" fg:w="11"/><text x="32.1544%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.74%)</title><rect x="32.0692%" y="389" width="0.7420%" height="15" fill="rgb(215,8,51)" fg:x="389" fg:w="9"/><text x="32.3192%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="32.3990%" y="373" width="0.4122%" height="15" fill="rgb(223,106,5)" fg:x="393" fg:w="5"/><text x="32.6490%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="32.4815%" y="357" width="0.3298%" height="15" fill="rgb(250,191,5)" fg:x="394" fg:w="4"/><text x="32.7315%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="32.4815%" y="341" width="0.3298%" height="15" fill="rgb(242,132,44)" fg:x="394" fg:w="4"/><text x="32.7315%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="32.7288%" y="325" width="0.0824%" height="15" fill="rgb(251,152,29)" fg:x="397" fg:w="1"/><text x="32.9788%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (14 samples, 1.15%)</title><rect x="31.7395%" y="421" width="1.1542%" height="15" fill="rgb(218,179,5)" fg:x="385" fg:w="14"/><text x="31.9895%" y="431.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="32.8112%" y="405" width="0.0824%" height="15" fill="rgb(227,67,19)" fg:x="398" fg:w="1"/><text x="33.0612%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="32.8112%" y="389" width="0.0824%" height="15" fill="rgb(233,119,31)" fg:x="398" fg:w="1"/><text x="33.0612%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (4 samples, 0.33%)</title><rect x="32.8937%" y="421" width="0.3298%" height="15" fill="rgb(241,120,22)" fg:x="399" fg:w="4"/><text x="33.1437%" y="431.50"></text></g><g><title>__libc_malloc (3 samples, 0.25%)</title><rect x="32.9761%" y="405" width="0.2473%" height="15" fill="rgb(224,102,30)" fg:x="400" fg:w="3"/><text x="33.2261%" y="415.50"></text></g><g><title>engine::session::state::State::close (106 samples, 8.74%)</title><rect x="24.6496%" y="613" width="8.7387%" height="15" fill="rgb(210,164,37)" fg:x="299" fg:w="106"/><text x="24.8996%" y="623.50">engine::sess..</text></g><g><title>engine::session::state::State::flush_entities (106 samples, 8.74%)</title><rect x="24.6496%" y="597" width="8.7387%" height="15" fill="rgb(226,191,16)" fg:x="299" fg:w="106"/><text x="24.8996%" y="607.50">engine::sess..</text></g><g><title>core::iter::adapters::try_process (103 samples, 8.49%)</title><rect x="24.8969%" y="581" width="8.4913%" height="15" fill="rgb(214,40,45)" fg:x="302" fg:w="103"/><text x="25.1469%" y="591.50">core::iter::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (103 samples, 8.49%)</title><rect x="24.8969%" y="565" width="8.4913%" height="15" fill="rgb(244,29,26)" fg:x="302" fg:w="103"/><text x="25.1469%" y="575.50">&lt;alloc::vec:..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (103 samples, 8.49%)</title><rect x="24.8969%" y="549" width="8.4913%" height="15" fill="rgb(216,16,5)" fg:x="302" fg:w="103"/><text x="25.1469%" y="559.50">engine::sess..</text></g><g><title>kernel::model::any_entity_changes (68 samples, 5.61%)</title><rect x="27.7824%" y="533" width="5.6059%" height="15" fill="rgb(249,76,35)" fg:x="337" fg:w="68"/><text x="28.0324%" y="543.50">kernel:..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (24 samples, 1.98%)</title><rect x="31.4097%" y="517" width="1.9786%" height="15" fill="rgb(207,11,44)" fg:x="381" fg:w="24"/><text x="31.6597%" y="527.50">s..</text></g><g><title>serde_json::de::from_trait (24 samples, 1.98%)</title><rect x="31.4097%" y="501" width="1.9786%" height="15" fill="rgb(228,190,49)" fg:x="381" fg:w="24"/><text x="31.6597%" y="511.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (24 samples, 1.98%)</title><rect x="31.4097%" y="485" width="1.9786%" height="15" fill="rgb(214,173,12)" fg:x="381" fg:w="24"/><text x="31.6597%" y="495.50">&lt;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (23 samples, 1.90%)</title><rect x="31.4922%" y="469" width="1.8961%" height="15" fill="rgb(218,26,35)" fg:x="382" fg:w="23"/><text x="31.7422%" y="479.50">&lt;..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (23 samples, 1.90%)</title><rect x="31.4922%" y="453" width="1.8961%" height="15" fill="rgb(220,200,19)" fg:x="382" fg:w="23"/><text x="31.7422%" y="463.50">&lt;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (22 samples, 1.81%)</title><rect x="31.5746%" y="437" width="1.8137%" height="15" fill="rgb(239,95,49)" fg:x="383" fg:w="22"/><text x="31.8246%" y="447.50">&lt;..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="33.2234%" y="421" width="0.1649%" height="15" fill="rgb(235,85,53)" fg:x="403" fg:w="2"/><text x="33.4734%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="33.2234%" y="405" width="0.1649%" height="15" fill="rgb(233,133,31)" fg:x="403" fg:w="2"/><text x="33.4734%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.3059%" y="389" width="0.0824%" height="15" fill="rgb(218,25,20)" fg:x="404" fg:w="1"/><text x="33.5559%" y="399.50"></text></g><g><title>engine::session::Session::close (113 samples, 9.32%)</title><rect x="24.1550%" y="629" width="9.3157%" height="15" fill="rgb(252,210,38)" fg:x="293" fg:w="113"/><text x="24.4050%" y="639.50">engine::sessi..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="33.3883%" y="613" width="0.0824%" height="15" fill="rgb(242,134,21)" fg:x="405" fg:w="1"/><text x="33.6383%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="33.6356%" y="485" width="0.0824%" height="15" fill="rgb(213,28,48)" fg:x="408" fg:w="1"/><text x="33.8856%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="33.6356%" y="501" width="0.1649%" height="15" fill="rgb(250,196,2)" fg:x="408" fg:w="2"/><text x="33.8856%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="33.7181%" y="485" width="0.0824%" height="15" fill="rgb(227,5,17)" fg:x="409" fg:w="1"/><text x="33.9681%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="33.8005%" y="437" width="0.0824%" height="15" fill="rgb(221,226,24)" fg:x="410" fg:w="1"/><text x="34.0505%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="33.8005%" y="421" width="0.0824%" height="15" fill="rgb(211,5,48)" fg:x="410" fg:w="1"/><text x="34.0505%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="33.8829%" y="437" width="0.0824%" height="15" fill="rgb(219,150,6)" fg:x="411" fg:w="1"/><text x="34.1329%" y="447.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="33.8829%" y="421" width="0.0824%" height="15" fill="rgb(251,46,16)" fg:x="411" fg:w="1"/><text x="34.1329%" y="431.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="33.8829%" y="405" width="0.0824%" height="15" fill="rgb(220,204,40)" fg:x="411" fg:w="1"/><text x="34.1329%" y="415.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="33.8829%" y="389" width="0.0824%" height="15" fill="rgb(211,85,2)" fg:x="411" fg:w="1"/><text x="34.1329%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="33.8829%" y="373" width="0.0824%" height="15" fill="rgb(229,17,7)" fg:x="411" fg:w="1"/><text x="34.1329%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="33.9654%" y="309" width="0.0824%" height="15" fill="rgb(239,72,28)" fg:x="412" fg:w="1"/><text x="34.2154%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="33.9654%" y="293" width="0.0824%" height="15" fill="rgb(230,47,54)" fg:x="412" fg:w="1"/><text x="34.2154%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="33.9654%" y="277" width="0.0824%" height="15" fill="rgb(214,50,8)" fg:x="412" fg:w="1"/><text x="34.2154%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="33.9654%" y="261" width="0.0824%" height="15" fill="rgb(216,198,43)" fg:x="412" fg:w="1"/><text x="34.2154%" y="271.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="33.9654%" y="245" width="0.0824%" height="15" fill="rgb(234,20,35)" fg:x="412" fg:w="1"/><text x="34.2154%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="34.0478%" y="245" width="0.0824%" height="15" fill="rgb(254,45,19)" fg:x="413" fg:w="1"/><text x="34.2978%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="34.0478%" y="229" width="0.0824%" height="15" fill="rgb(219,14,44)" fg:x="413" fg:w="1"/><text x="34.2978%" y="239.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="34.0478%" y="213" width="0.0824%" height="15" fill="rgb(217,220,26)" fg:x="413" fg:w="1"/><text x="34.2978%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="34.0478%" y="197" width="0.0824%" height="15" fill="rgb(213,158,28)" fg:x="413" fg:w="1"/><text x="34.2978%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="34.0478%" y="181" width="0.0824%" height="15" fill="rgb(252,51,52)" fg:x="413" fg:w="1"/><text x="34.2978%" y="191.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="34.0478%" y="165" width="0.0824%" height="15" fill="rgb(246,89,16)" fg:x="413" fg:w="1"/><text x="34.2978%" y="175.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.08%)</title><rect x="34.0478%" y="149" width="0.0824%" height="15" fill="rgb(216,158,49)" fg:x="413" fg:w="1"/><text x="34.2978%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="34.0478%" y="293" width="0.1649%" height="15" fill="rgb(236,107,19)" fg:x="413" fg:w="2"/><text x="34.2978%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="34.0478%" y="277" width="0.1649%" height="15" fill="rgb(228,185,30)" fg:x="413" fg:w="2"/><text x="34.2978%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="34.0478%" y="261" width="0.1649%" height="15" fill="rgb(246,134,8)" fg:x="413" fg:w="2"/><text x="34.2978%" y="271.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="34.1303%" y="245" width="0.0824%" height="15" fill="rgb(214,143,50)" fg:x="414" fg:w="1"/><text x="34.3803%" y="255.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.08%)</title><rect x="34.1303%" y="229" width="0.0824%" height="15" fill="rgb(228,75,8)" fg:x="414" fg:w="1"/><text x="34.3803%" y="239.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (3 samples, 0.25%)</title><rect x="34.0478%" y="309" width="0.2473%" height="15" fill="rgb(207,175,4)" fg:x="413" fg:w="3"/><text x="34.2978%" y="319.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.08%)</title><rect x="34.2127%" y="293" width="0.0824%" height="15" fill="rgb(205,108,24)" fg:x="415" fg:w="1"/><text x="34.4627%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.2127%" y="277" width="0.0824%" height="15" fill="rgb(244,120,49)" fg:x="415" fg:w="1"/><text x="34.4627%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="33.9654%" y="341" width="0.4122%" height="15" fill="rgb(223,47,38)" fg:x="412" fg:w="5"/><text x="34.2154%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="33.9654%" y="325" width="0.4122%" height="15" fill="rgb(229,179,11)" fg:x="412" fg:w="5"/><text x="34.2154%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.2951%" y="309" width="0.0824%" height="15" fill="rgb(231,122,1)" fg:x="416" fg:w="1"/><text x="34.5451%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="34.3776%" y="341" width="0.0824%" height="15" fill="rgb(245,119,9)" fg:x="417" fg:w="1"/><text x="34.6276%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.3776%" y="325" width="0.0824%" height="15" fill="rgb(241,163,25)" fg:x="417" fg:w="1"/><text x="34.6276%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="34.3776%" y="309" width="0.0824%" height="15" fill="rgb(217,214,3)" fg:x="417" fg:w="1"/><text x="34.6276%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="34.3776%" y="293" width="0.0824%" height="15" fill="rgb(240,86,28)" fg:x="417" fg:w="1"/><text x="34.6276%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="34.3776%" y="277" width="0.0824%" height="15" fill="rgb(215,47,9)" fg:x="417" fg:w="1"/><text x="34.6276%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.3776%" y="261" width="0.0824%" height="15" fill="rgb(252,25,45)" fg:x="417" fg:w="1"/><text x="34.6276%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="34.4600%" y="309" width="0.1649%" height="15" fill="rgb(251,164,9)" fg:x="418" fg:w="2"/><text x="34.7100%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (11 samples, 0.91%)</title><rect x="33.9654%" y="437" width="0.9068%" height="15" fill="rgb(233,194,0)" fg:x="412" fg:w="11"/><text x="34.2154%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (11 samples, 0.91%)</title><rect x="33.9654%" y="421" width="0.9068%" height="15" fill="rgb(249,111,24)" fg:x="412" fg:w="11"/><text x="34.2154%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (11 samples, 0.91%)</title><rect x="33.9654%" y="405" width="0.9068%" height="15" fill="rgb(250,223,3)" fg:x="412" fg:w="11"/><text x="34.2154%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (11 samples, 0.91%)</title><rect x="33.9654%" y="389" width="0.9068%" height="15" fill="rgb(236,178,37)" fg:x="412" fg:w="11"/><text x="34.2154%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (11 samples, 0.91%)</title><rect x="33.9654%" y="373" width="0.9068%" height="15" fill="rgb(241,158,50)" fg:x="412" fg:w="11"/><text x="34.2154%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (11 samples, 0.91%)</title><rect x="33.9654%" y="357" width="0.9068%" height="15" fill="rgb(213,121,41)" fg:x="412" fg:w="11"/><text x="34.2154%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="34.4600%" y="341" width="0.4122%" height="15" fill="rgb(240,92,3)" fg:x="418" fg:w="5"/><text x="34.7100%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="34.4600%" y="325" width="0.4122%" height="15" fill="rgb(205,123,3)" fg:x="418" fg:w="5"/><text x="34.7100%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.25%)</title><rect x="34.6249%" y="309" width="0.2473%" height="15" fill="rgb(205,97,47)" fg:x="420" fg:w="3"/><text x="34.8749%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.25%)</title><rect x="34.6249%" y="293" width="0.2473%" height="15" fill="rgb(247,152,14)" fg:x="420" fg:w="3"/><text x="34.8749%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.25%)</title><rect x="34.6249%" y="277" width="0.2473%" height="15" fill="rgb(248,195,53)" fg:x="420" fg:w="3"/><text x="34.8749%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="34.6249%" y="261" width="0.2473%" height="15" fill="rgb(226,201,16)" fg:x="420" fg:w="3"/><text x="34.8749%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="34.6249%" y="245" width="0.2473%" height="15" fill="rgb(205,98,0)" fg:x="420" fg:w="3"/><text x="34.8749%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.25%)</title><rect x="34.6249%" y="229" width="0.2473%" height="15" fill="rgb(214,191,48)" fg:x="420" fg:w="3"/><text x="34.8749%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="34.6249%" y="213" width="0.2473%" height="15" fill="rgb(237,112,39)" fg:x="420" fg:w="3"/><text x="34.8749%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="34.6249%" y="197" width="0.2473%" height="15" fill="rgb(247,203,27)" fg:x="420" fg:w="3"/><text x="34.8749%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.25%)</title><rect x="34.6249%" y="181" width="0.2473%" height="15" fill="rgb(235,124,28)" fg:x="420" fg:w="3"/><text x="34.8749%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="34.6249%" y="165" width="0.2473%" height="15" fill="rgb(208,207,46)" fg:x="420" fg:w="3"/><text x="34.8749%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="34.6249%" y="149" width="0.2473%" height="15" fill="rgb(234,176,4)" fg:x="420" fg:w="3"/><text x="34.8749%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="34.7898%" y="133" width="0.0824%" height="15" fill="rgb(230,133,28)" fg:x="422" fg:w="1"/><text x="35.0398%" y="143.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="34.7898%" y="117" width="0.0824%" height="15" fill="rgb(211,137,40)" fg:x="422" fg:w="1"/><text x="35.0398%" y="127.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="35.0371%" y="229" width="0.0824%" height="15" fill="rgb(254,35,13)" fg:x="425" fg:w="1"/><text x="35.2871%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="35.0371%" y="213" width="0.0824%" height="15" fill="rgb(225,49,51)" fg:x="425" fg:w="1"/><text x="35.2871%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="35.0371%" y="293" width="0.1649%" height="15" fill="rgb(251,10,15)" fg:x="425" fg:w="2"/><text x="35.2871%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="35.0371%" y="277" width="0.1649%" height="15" fill="rgb(228,207,15)" fg:x="425" fg:w="2"/><text x="35.2871%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="35.0371%" y="261" width="0.1649%" height="15" fill="rgb(241,99,19)" fg:x="425" fg:w="2"/><text x="35.2871%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="35.0371%" y="245" width="0.1649%" height="15" fill="rgb(207,104,49)" fg:x="425" fg:w="2"/><text x="35.2871%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.1195%" y="229" width="0.0824%" height="15" fill="rgb(234,99,18)" fg:x="426" fg:w="1"/><text x="35.3695%" y="239.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.1195%" y="213" width="0.0824%" height="15" fill="rgb(213,191,49)" fg:x="426" fg:w="1"/><text x="35.3695%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="35.2020%" y="277" width="0.0824%" height="15" fill="rgb(210,226,19)" fg:x="427" fg:w="1"/><text x="35.4520%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="35.0371%" y="309" width="0.3298%" height="15" fill="rgb(229,97,18)" fg:x="425" fg:w="4"/><text x="35.2871%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="35.2020%" y="293" width="0.1649%" height="15" fill="rgb(211,167,15)" fg:x="427" fg:w="2"/><text x="35.4520%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.2844%" y="277" width="0.0824%" height="15" fill="rgb(210,169,34)" fg:x="428" fg:w="1"/><text x="35.5344%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.2844%" y="261" width="0.0824%" height="15" fill="rgb(241,121,31)" fg:x="428" fg:w="1"/><text x="35.5344%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="35.2844%" y="245" width="0.0824%" height="15" fill="rgb(232,40,11)" fg:x="428" fg:w="1"/><text x="35.5344%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="35.3669%" y="309" width="0.1649%" height="15" fill="rgb(205,86,26)" fg:x="429" fg:w="2"/><text x="35.6169%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.4493%" y="293" width="0.0824%" height="15" fill="rgb(231,126,28)" fg:x="430" fg:w="1"/><text x="35.6993%" y="303.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (24 samples, 1.98%)</title><rect x="33.6356%" y="533" width="1.9786%" height="15" fill="rgb(219,221,18)" fg:x="408" fg:w="24"/><text x="33.8856%" y="543.50">&lt;..</text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (24 samples, 1.98%)</title><rect x="33.6356%" y="517" width="1.9786%" height="15" fill="rgb(211,40,0)" fg:x="408" fg:w="24"/><text x="33.8856%" y="527.50">&lt;..</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (22 samples, 1.81%)</title><rect x="33.8005%" y="501" width="1.8137%" height="15" fill="rgb(239,85,43)" fg:x="410" fg:w="22"/><text x="34.0505%" y="511.50">&lt;..</text></g><g><title>kernel::model::EntityPtrResolver::entity (22 samples, 1.81%)</title><rect x="33.8005%" y="485" width="1.8137%" height="15" fill="rgb(231,55,21)" fg:x="410" fg:w="22"/><text x="34.0505%" y="495.50">k..</text></g><g><title>engine::session::Session::load_entity (22 samples, 1.81%)</title><rect x="33.8005%" y="469" width="1.8137%" height="15" fill="rgb(225,184,43)" fg:x="410" fg:w="22"/><text x="34.0505%" y="479.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (22 samples, 1.81%)</title><rect x="33.8005%" y="453" width="1.8137%" height="15" fill="rgb(251,158,41)" fg:x="410" fg:w="22"/><text x="34.0505%" y="463.50">e..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (9 samples, 0.74%)</title><rect x="34.8722%" y="437" width="0.7420%" height="15" fill="rgb(234,159,37)" fg:x="423" fg:w="9"/><text x="35.1222%" y="447.50"></text></g><g><title>serde_json::de::from_trait (9 samples, 0.74%)</title><rect x="34.8722%" y="421" width="0.7420%" height="15" fill="rgb(216,204,22)" fg:x="423" fg:w="9"/><text x="35.1222%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.74%)</title><rect x="34.8722%" y="405" width="0.7420%" height="15" fill="rgb(214,17,3)" fg:x="423" fg:w="9"/><text x="35.1222%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.74%)</title><rect x="34.8722%" y="389" width="0.7420%" height="15" fill="rgb(212,111,17)" fg:x="423" fg:w="9"/><text x="35.1222%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.66%)</title><rect x="34.9547%" y="373" width="0.6595%" height="15" fill="rgb(221,157,24)" fg:x="424" fg:w="8"/><text x="35.2047%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.66%)</title><rect x="34.9547%" y="357" width="0.6595%" height="15" fill="rgb(252,16,13)" fg:x="424" fg:w="8"/><text x="35.2047%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.66%)</title><rect x="34.9547%" y="341" width="0.6595%" height="15" fill="rgb(221,62,2)" fg:x="424" fg:w="8"/><text x="35.2047%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.58%)</title><rect x="35.0371%" y="325" width="0.5771%" height="15" fill="rgb(247,87,22)" fg:x="425" fg:w="7"/><text x="35.2871%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.5317%" y="309" width="0.0824%" height="15" fill="rgb(215,73,9)" fg:x="431" fg:w="1"/><text x="35.7817%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.5317%" y="293" width="0.0824%" height="15" fill="rgb(207,175,33)" fg:x="431" fg:w="1"/><text x="35.7817%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.5317%" y="277" width="0.0824%" height="15" fill="rgb(243,129,54)" fg:x="431" fg:w="1"/><text x="35.7817%" y="287.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="35.9439%" y="325" width="0.1649%" height="15" fill="rgb(227,119,45)" fg:x="436" fg:w="2"/><text x="36.1939%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="35.9439%" y="309" width="0.1649%" height="15" fill="rgb(205,109,36)" fg:x="436" fg:w="2"/><text x="36.1939%" y="319.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (5 samples, 0.41%)</title><rect x="35.8615%" y="373" width="0.4122%" height="15" fill="rgb(205,6,39)" fg:x="435" fg:w="5"/><text x="36.1115%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (5 samples, 0.41%)</title><rect x="35.8615%" y="357" width="0.4122%" height="15" fill="rgb(221,32,16)" fg:x="435" fg:w="5"/><text x="36.1115%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.41%)</title><rect x="35.8615%" y="341" width="0.4122%" height="15" fill="rgb(228,144,50)" fg:x="435" fg:w="5"/><text x="36.1115%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="36.1088%" y="325" width="0.1649%" height="15" fill="rgb(229,201,53)" fg:x="438" fg:w="2"/><text x="36.3588%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="36.1088%" y="309" width="0.1649%" height="15" fill="rgb(249,153,27)" fg:x="438" fg:w="2"/><text x="36.3588%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="36.1088%" y="293" width="0.1649%" height="15" fill="rgb(227,106,25)" fg:x="438" fg:w="2"/><text x="36.3588%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="36.1088%" y="277" width="0.1649%" height="15" fill="rgb(230,65,29)" fg:x="438" fg:w="2"/><text x="36.3588%" y="287.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (6 samples, 0.49%)</title><rect x="35.8615%" y="389" width="0.4946%" height="15" fill="rgb(221,57,46)" fg:x="435" fg:w="6"/><text x="36.1115%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="36.2737%" y="373" width="0.0824%" height="15" fill="rgb(229,161,17)" fg:x="440" fg:w="1"/><text x="36.5237%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="36.2737%" y="357" width="0.0824%" height="15" fill="rgb(222,213,11)" fg:x="440" fg:w="1"/><text x="36.5237%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="36.4386%" y="357" width="0.1649%" height="15" fill="rgb(235,35,13)" fg:x="442" fg:w="2"/><text x="36.6886%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="36.4386%" y="341" width="0.1649%" height="15" fill="rgb(233,158,34)" fg:x="442" fg:w="2"/><text x="36.6886%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="36.4386%" y="325" width="0.1649%" height="15" fill="rgb(215,151,48)" fg:x="442" fg:w="2"/><text x="36.6886%" y="335.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="36.6035%" y="357" width="0.0824%" height="15" fill="rgb(229,84,14)" fg:x="444" fg:w="1"/><text x="36.8535%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="36.6035%" y="341" width="0.0824%" height="15" fill="rgb(229,68,14)" fg:x="444" fg:w="1"/><text x="36.8535%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="36.6035%" y="325" width="0.0824%" height="15" fill="rgb(243,106,26)" fg:x="444" fg:w="1"/><text x="36.8535%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="36.6035%" y="309" width="0.0824%" height="15" fill="rgb(206,45,38)" fg:x="444" fg:w="1"/><text x="36.8535%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="36.6035%" y="293" width="0.0824%" height="15" fill="rgb(226,6,15)" fg:x="444" fg:w="1"/><text x="36.8535%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="36.6035%" y="277" width="0.0824%" height="15" fill="rgb(232,22,54)" fg:x="444" fg:w="1"/><text x="36.8535%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.6859%" y="341" width="0.0824%" height="15" fill="rgb(229,222,32)" fg:x="445" fg:w="1"/><text x="36.9359%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="36.7683%" y="261" width="0.1649%" height="15" fill="rgb(228,62,29)" fg:x="446" fg:w="2"/><text x="37.0183%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="36.7683%" y="245" width="0.1649%" height="15" fill="rgb(251,103,34)" fg:x="446" fg:w="2"/><text x="37.0183%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="36.7683%" y="229" width="0.1649%" height="15" fill="rgb(233,12,30)" fg:x="446" fg:w="2"/><text x="37.0183%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="36.7683%" y="213" width="0.1649%" height="15" fill="rgb(238,52,0)" fg:x="446" fg:w="2"/><text x="37.0183%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="36.7683%" y="197" width="0.1649%" height="15" fill="rgb(223,98,5)" fg:x="446" fg:w="2"/><text x="37.0183%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="36.7683%" y="181" width="0.1649%" height="15" fill="rgb(228,75,37)" fg:x="446" fg:w="2"/><text x="37.0183%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="36.7683%" y="165" width="0.1649%" height="15" fill="rgb(205,115,49)" fg:x="446" fg:w="2"/><text x="37.0183%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="36.7683%" y="149" width="0.1649%" height="15" fill="rgb(250,154,43)" fg:x="446" fg:w="2"/><text x="37.0183%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="36.7683%" y="133" width="0.1649%" height="15" fill="rgb(226,43,29)" fg:x="446" fg:w="2"/><text x="37.0183%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="36.7683%" y="117" width="0.1649%" height="15" fill="rgb(249,228,39)" fg:x="446" fg:w="2"/><text x="37.0183%" y="127.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="36.7683%" y="101" width="0.1649%" height="15" fill="rgb(216,79,43)" fg:x="446" fg:w="2"/><text x="37.0183%" y="111.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="36.7683%" y="85" width="0.1649%" height="15" fill="rgb(228,95,12)" fg:x="446" fg:w="2"/><text x="37.0183%" y="95.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="36.7683%" y="309" width="0.2473%" height="15" fill="rgb(249,221,15)" fg:x="446" fg:w="3"/><text x="37.0183%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="36.7683%" y="293" width="0.2473%" height="15" fill="rgb(233,34,13)" fg:x="446" fg:w="3"/><text x="37.0183%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="36.7683%" y="277" width="0.2473%" height="15" fill="rgb(214,103,39)" fg:x="446" fg:w="3"/><text x="37.0183%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.9332%" y="261" width="0.0824%" height="15" fill="rgb(251,126,39)" fg:x="448" fg:w="1"/><text x="37.1832%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.25%)</title><rect x="37.0157%" y="245" width="0.2473%" height="15" fill="rgb(214,216,36)" fg:x="449" fg:w="3"/><text x="37.2657%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="37.0981%" y="229" width="0.1649%" height="15" fill="rgb(220,221,8)" fg:x="450" fg:w="2"/><text x="37.3481%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (8 samples, 0.66%)</title><rect x="36.6859%" y="357" width="0.6595%" height="15" fill="rgb(240,216,3)" fg:x="445" fg:w="8"/><text x="36.9359%" y="367.50"></text></g><g><title>kernel::model::props::load_props (7 samples, 0.58%)</title><rect x="36.7683%" y="341" width="0.5771%" height="15" fill="rgb(232,218,17)" fg:x="446" fg:w="7"/><text x="37.0183%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.58%)</title><rect x="36.7683%" y="325" width="0.5771%" height="15" fill="rgb(229,163,45)" fg:x="446" fg:w="7"/><text x="37.0183%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (4 samples, 0.33%)</title><rect x="37.0157%" y="309" width="0.3298%" height="15" fill="rgb(231,110,42)" fg:x="449" fg:w="4"/><text x="37.2657%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="37.0157%" y="293" width="0.3298%" height="15" fill="rgb(208,170,48)" fg:x="449" fg:w="4"/><text x="37.2657%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (4 samples, 0.33%)</title><rect x="37.0157%" y="277" width="0.3298%" height="15" fill="rgb(239,116,25)" fg:x="449" fg:w="4"/><text x="37.2657%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="37.0157%" y="261" width="0.3298%" height="15" fill="rgb(219,200,50)" fg:x="449" fg:w="4"/><text x="37.2657%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="37.2630%" y="245" width="0.0824%" height="15" fill="rgb(245,200,0)" fg:x="452" fg:w="1"/><text x="37.5130%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="37.2630%" y="229" width="0.0824%" height="15" fill="rgb(245,119,33)" fg:x="452" fg:w="1"/><text x="37.5130%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="37.4279%" y="309" width="0.1649%" height="15" fill="rgb(231,125,12)" fg:x="454" fg:w="2"/><text x="37.6779%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="37.5103%" y="293" width="0.0824%" height="15" fill="rgb(216,96,41)" fg:x="455" fg:w="1"/><text x="37.7603%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="37.5103%" y="277" width="0.0824%" height="15" fill="rgb(248,43,45)" fg:x="455" fg:w="1"/><text x="37.7603%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="37.5103%" y="261" width="0.0824%" height="15" fill="rgb(217,222,7)" fg:x="455" fg:w="1"/><text x="37.7603%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="37.5103%" y="245" width="0.0824%" height="15" fill="rgb(233,28,6)" fg:x="455" fg:w="1"/><text x="37.7603%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="37.5103%" y="229" width="0.0824%" height="15" fill="rgb(231,218,15)" fg:x="455" fg:w="1"/><text x="37.7603%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="37.5103%" y="213" width="0.0824%" height="15" fill="rgb(226,171,48)" fg:x="455" fg:w="1"/><text x="37.7603%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="37.5103%" y="197" width="0.0824%" height="15" fill="rgb(235,201,9)" fg:x="455" fg:w="1"/><text x="37.7603%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="37.5103%" y="181" width="0.0824%" height="15" fill="rgb(217,80,15)" fg:x="455" fg:w="1"/><text x="37.7603%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="37.5103%" y="165" width="0.0824%" height="15" fill="rgb(219,152,8)" fg:x="455" fg:w="1"/><text x="37.7603%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="37.5103%" y="149" width="0.0824%" height="15" fill="rgb(243,107,38)" fg:x="455" fg:w="1"/><text x="37.7603%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="37.5103%" y="133" width="0.0824%" height="15" fill="rgb(231,17,5)" fg:x="455" fg:w="1"/><text x="37.7603%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="37.5103%" y="117" width="0.0824%" height="15" fill="rgb(209,25,54)" fg:x="455" fg:w="1"/><text x="37.7603%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="37.5103%" y="101" width="0.0824%" height="15" fill="rgb(219,0,2)" fg:x="455" fg:w="1"/><text x="37.7603%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.5103%" y="85" width="0.0824%" height="15" fill="rgb(246,9,5)" fg:x="455" fg:w="1"/><text x="37.7603%" y="95.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="37.7576%" y="245" width="0.0824%" height="15" fill="rgb(226,159,4)" fg:x="458" fg:w="1"/><text x="38.0076%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="37.7576%" y="229" width="0.0824%" height="15" fill="rgb(219,175,34)" fg:x="458" fg:w="1"/><text x="38.0076%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (7 samples, 0.58%)</title><rect x="37.3454%" y="357" width="0.5771%" height="15" fill="rgb(236,10,46)" fg:x="453" fg:w="7"/><text x="37.5954%" y="367.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.49%)</title><rect x="37.4279%" y="341" width="0.4946%" height="15" fill="rgb(240,211,16)" fg:x="454" fg:w="6"/><text x="37.6779%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.49%)</title><rect x="37.4279%" y="325" width="0.4946%" height="15" fill="rgb(205,3,43)" fg:x="454" fg:w="6"/><text x="37.6779%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (4 samples, 0.33%)</title><rect x="37.5927%" y="309" width="0.3298%" height="15" fill="rgb(245,7,22)" fg:x="456" fg:w="4"/><text x="37.8427%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="37.5927%" y="293" width="0.3298%" height="15" fill="rgb(239,132,32)" fg:x="456" fg:w="4"/><text x="37.8427%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (3 samples, 0.25%)</title><rect x="37.6752%" y="277" width="0.2473%" height="15" fill="rgb(228,202,34)" fg:x="457" fg:w="3"/><text x="37.9252%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="37.6752%" y="261" width="0.2473%" height="15" fill="rgb(254,200,22)" fg:x="457" fg:w="3"/><text x="37.9252%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="37.8401%" y="245" width="0.0824%" height="15" fill="rgb(219,10,39)" fg:x="459" fg:w="1"/><text x="38.0901%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="37.8401%" y="229" width="0.0824%" height="15" fill="rgb(226,210,39)" fg:x="459" fg:w="1"/><text x="38.0901%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.9225%" y="357" width="0.0824%" height="15" fill="rgb(208,219,16)" fg:x="460" fg:w="1"/><text x="38.1725%" y="367.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="38.0049%" y="325" width="0.0824%" height="15" fill="rgb(216,158,51)" fg:x="461" fg:w="1"/><text x="38.2549%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="38.2523%" y="293" width="0.2473%" height="15" fill="rgb(233,14,44)" fg:x="464" fg:w="3"/><text x="38.5023%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="38.2523%" y="277" width="0.2473%" height="15" fill="rgb(237,97,39)" fg:x="464" fg:w="3"/><text x="38.5023%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="38.3347%" y="261" width="0.1649%" height="15" fill="rgb(218,198,43)" fg:x="465" fg:w="2"/><text x="38.5847%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="38.3347%" y="245" width="0.1649%" height="15" fill="rgb(231,104,20)" fg:x="465" fg:w="2"/><text x="38.5847%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="38.4171%" y="229" width="0.0824%" height="15" fill="rgb(254,36,13)" fg:x="466" fg:w="1"/><text x="38.6671%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="38.4171%" y="213" width="0.0824%" height="15" fill="rgb(248,14,50)" fg:x="466" fg:w="1"/><text x="38.6671%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="38.4171%" y="197" width="0.0824%" height="15" fill="rgb(217,107,29)" fg:x="466" fg:w="1"/><text x="38.6671%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="38.4171%" y="181" width="0.0824%" height="15" fill="rgb(251,169,33)" fg:x="466" fg:w="1"/><text x="38.6671%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="38.4171%" y="165" width="0.0824%" height="15" fill="rgb(217,108,32)" fg:x="466" fg:w="1"/><text x="38.6671%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="38.4171%" y="149" width="0.0824%" height="15" fill="rgb(219,66,42)" fg:x="466" fg:w="1"/><text x="38.6671%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="38.4171%" y="133" width="0.0824%" height="15" fill="rgb(206,180,7)" fg:x="466" fg:w="1"/><text x="38.6671%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="38.4171%" y="117" width="0.0824%" height="15" fill="rgb(208,226,31)" fg:x="466" fg:w="1"/><text x="38.6671%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="38.4171%" y="101" width="0.0824%" height="15" fill="rgb(218,26,49)" fg:x="466" fg:w="1"/><text x="38.6671%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="38.4171%" y="85" width="0.0824%" height="15" fill="rgb(233,197,48)" fg:x="466" fg:w="1"/><text x="38.6671%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.4171%" y="69" width="0.0824%" height="15" fill="rgb(252,181,51)" fg:x="466" fg:w="1"/><text x="38.6671%" y="79.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="38.5820%" y="229" width="0.0824%" height="15" fill="rgb(253,90,19)" fg:x="468" fg:w="1"/><text x="38.8320%" y="239.50"></text></g><g><title>kernel::model::EntityPtr::gid (9 samples, 0.74%)</title><rect x="38.0049%" y="357" width="0.7420%" height="15" fill="rgb(215,171,30)" fg:x="461" fg:w="9"/><text x="38.2549%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (9 samples, 0.74%)</title><rect x="38.0049%" y="341" width="0.7420%" height="15" fill="rgb(214,222,9)" fg:x="461" fg:w="9"/><text x="38.2549%" y="351.50"></text></g><g><title>kernel::model::props::load_props (8 samples, 0.66%)</title><rect x="38.0874%" y="325" width="0.6595%" height="15" fill="rgb(223,3,22)" fg:x="462" fg:w="8"/><text x="38.3374%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (8 samples, 0.66%)</title><rect x="38.0874%" y="309" width="0.6595%" height="15" fill="rgb(225,196,46)" fg:x="462" fg:w="8"/><text x="38.3374%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.25%)</title><rect x="38.4996%" y="293" width="0.2473%" height="15" fill="rgb(209,110,37)" fg:x="467" fg:w="3"/><text x="38.7496%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="38.4996%" y="277" width="0.2473%" height="15" fill="rgb(249,89,12)" fg:x="467" fg:w="3"/><text x="38.7496%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (3 samples, 0.25%)</title><rect x="38.4996%" y="261" width="0.2473%" height="15" fill="rgb(226,27,33)" fg:x="467" fg:w="3"/><text x="38.7496%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="38.4996%" y="245" width="0.2473%" height="15" fill="rgb(213,82,22)" fg:x="467" fg:w="3"/><text x="38.7496%" y="255.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="38.6645%" y="229" width="0.0824%" height="15" fill="rgb(248,140,0)" fg:x="469" fg:w="1"/><text x="38.9145%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="38.6645%" y="213" width="0.0824%" height="15" fill="rgb(228,106,3)" fg:x="469" fg:w="1"/><text x="38.9145%" y="223.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="38.8293%" y="309" width="0.0824%" height="15" fill="rgb(209,23,37)" fg:x="471" fg:w="1"/><text x="39.0793%" y="319.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="38.8293%" y="293" width="0.0824%" height="15" fill="rgb(241,93,50)" fg:x="471" fg:w="1"/><text x="39.0793%" y="303.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="38.8293%" y="277" width="0.0824%" height="15" fill="rgb(253,46,43)" fg:x="471" fg:w="1"/><text x="39.0793%" y="287.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="38.8293%" y="261" width="0.0824%" height="15" fill="rgb(226,206,43)" fg:x="471" fg:w="1"/><text x="39.0793%" y="271.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="38.8293%" y="245" width="0.0824%" height="15" fill="rgb(217,54,7)" fg:x="471" fg:w="1"/><text x="39.0793%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="38.8293%" y="229" width="0.0824%" height="15" fill="rgb(223,5,52)" fg:x="471" fg:w="1"/><text x="39.0793%" y="239.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="38.8293%" y="213" width="0.0824%" height="15" fill="rgb(206,52,46)" fg:x="471" fg:w="1"/><text x="39.0793%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="38.8293%" y="197" width="0.0824%" height="15" fill="rgb(253,136,11)" fg:x="471" fg:w="1"/><text x="39.0793%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="38.8293%" y="181" width="0.0824%" height="15" fill="rgb(208,106,33)" fg:x="471" fg:w="1"/><text x="39.0793%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="38.8293%" y="165" width="0.0824%" height="15" fill="rgb(206,54,4)" fg:x="471" fg:w="1"/><text x="39.0793%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="38.8293%" y="149" width="0.0824%" height="15" fill="rgb(213,3,15)" fg:x="471" fg:w="1"/><text x="39.0793%" y="159.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="39.2415%" y="165" width="0.0824%" height="15" fill="rgb(252,211,39)" fg:x="476" fg:w="1"/><text x="39.4915%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.25%)</title><rect x="39.1591%" y="197" width="0.2473%" height="15" fill="rgb(223,6,36)" fg:x="475" fg:w="3"/><text x="39.4091%" y="207.50"></text></g><g><title>regex_automata::util::determinize::next (3 samples, 0.25%)</title><rect x="39.1591%" y="181" width="0.2473%" height="15" fill="rgb(252,169,45)" fg:x="475" fg:w="3"/><text x="39.4091%" y="191.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="39.3240%" y="165" width="0.0824%" height="15" fill="rgb(212,48,26)" fg:x="477" fg:w="1"/><text x="39.5740%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="39.0767%" y="277" width="0.4122%" height="15" fill="rgb(251,102,48)" fg:x="474" fg:w="5"/><text x="39.3267%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.33%)</title><rect x="39.1591%" y="261" width="0.3298%" height="15" fill="rgb(243,208,16)" fg:x="475" fg:w="4"/><text x="39.4091%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.33%)</title><rect x="39.1591%" y="245" width="0.3298%" height="15" fill="rgb(219,96,24)" fg:x="475" fg:w="4"/><text x="39.4091%" y="255.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.33%)</title><rect x="39.1591%" y="229" width="0.3298%" height="15" fill="rgb(219,33,29)" fg:x="475" fg:w="4"/><text x="39.4091%" y="239.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.33%)</title><rect x="39.1591%" y="213" width="0.3298%" height="15" fill="rgb(223,176,5)" fg:x="475" fg:w="4"/><text x="39.4091%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="39.4064%" y="197" width="0.0824%" height="15" fill="rgb(228,140,14)" fg:x="478" fg:w="1"/><text x="39.6564%" y="207.50"></text></g><g><title>regex_automata::util::determinize::set_lookbehind_from_start (1 samples, 0.08%)</title><rect x="39.4064%" y="181" width="0.0824%" height="15" fill="rgb(217,179,31)" fg:x="478" fg:w="1"/><text x="39.6564%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.4889%" y="277" width="0.0824%" height="15" fill="rgb(230,9,30)" fg:x="479" fg:w="1"/><text x="39.7389%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="39.6538%" y="245" width="0.0824%" height="15" fill="rgb(230,136,20)" fg:x="481" fg:w="1"/><text x="39.9038%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="39.6538%" y="229" width="0.0824%" height="15" fill="rgb(215,210,22)" fg:x="481" fg:w="1"/><text x="39.9038%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.6538%" y="213" width="0.0824%" height="15" fill="rgb(218,43,5)" fg:x="481" fg:w="1"/><text x="39.9038%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.7362%" y="229" width="0.0824%" height="15" fill="rgb(216,11,5)" fg:x="482" fg:w="1"/><text x="39.9862%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="39.9011%" y="213" width="0.1649%" height="15" fill="rgb(209,82,29)" fg:x="484" fg:w="2"/><text x="40.1511%" y="223.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="39.9011%" y="197" width="0.1649%" height="15" fill="rgb(244,115,12)" fg:x="484" fg:w="2"/><text x="40.1511%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (4 samples, 0.33%)</title><rect x="39.8186%" y="229" width="0.3298%" height="15" fill="rgb(222,82,18)" fg:x="483" fg:w="4"/><text x="40.0686%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.0660%" y="213" width="0.0824%" height="15" fill="rgb(249,227,8)" fg:x="486" fg:w="1"/><text x="40.3160%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (9 samples, 0.74%)</title><rect x="39.5713%" y="277" width="0.7420%" height="15" fill="rgb(253,141,45)" fg:x="480" fg:w="9"/><text x="39.8213%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (8 samples, 0.66%)</title><rect x="39.6538%" y="261" width="0.6595%" height="15" fill="rgb(234,184,4)" fg:x="481" fg:w="8"/><text x="39.9038%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (7 samples, 0.58%)</title><rect x="39.7362%" y="245" width="0.5771%" height="15" fill="rgb(218,194,23)" fg:x="482" fg:w="7"/><text x="39.9862%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (2 samples, 0.16%)</title><rect x="40.1484%" y="229" width="0.1649%" height="15" fill="rgb(235,66,41)" fg:x="487" fg:w="2"/><text x="40.3984%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.2308%" y="213" width="0.0824%" height="15" fill="rgb(245,217,1)" fg:x="488" fg:w="1"/><text x="40.4808%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="40.3133%" y="245" width="0.0824%" height="15" fill="rgb(229,91,1)" fg:x="489" fg:w="1"/><text x="40.5633%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.3133%" y="229" width="0.0824%" height="15" fill="rgb(207,101,30)" fg:x="489" fg:w="1"/><text x="40.5633%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="40.3133%" y="261" width="0.1649%" height="15" fill="rgb(223,82,49)" fg:x="489" fg:w="2"/><text x="40.5633%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="40.3957%" y="245" width="0.0824%" height="15" fill="rgb(218,167,17)" fg:x="490" fg:w="1"/><text x="40.6457%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.3957%" y="229" width="0.0824%" height="15" fill="rgb(208,103,14)" fg:x="490" fg:w="1"/><text x="40.6457%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.7255%" y="197" width="0.0824%" height="15" fill="rgb(238,20,8)" fg:x="494" fg:w="1"/><text x="40.9755%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.25%)</title><rect x="40.6430%" y="229" width="0.2473%" height="15" fill="rgb(218,80,54)" fg:x="493" fg:w="3"/><text x="40.8930%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="40.7255%" y="213" width="0.1649%" height="15" fill="rgb(240,144,17)" fg:x="494" fg:w="2"/><text x="40.9755%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="40.8079%" y="197" width="0.0824%" height="15" fill="rgb(245,27,50)" fg:x="495" fg:w="1"/><text x="41.0579%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.99%)</title><rect x="40.9728%" y="213" width="0.9893%" height="15" fill="rgb(251,51,7)" fg:x="497" fg:w="12"/><text x="41.2228%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.91%)</title><rect x="41.0552%" y="197" width="0.9068%" height="15" fill="rgb(245,217,29)" fg:x="498" fg:w="11"/><text x="41.3052%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.8796%" y="181" width="0.0824%" height="15" fill="rgb(221,176,29)" fg:x="508" fg:w="1"/><text x="42.1296%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="41.9621%" y="213" width="0.0824%" height="15" fill="rgb(212,180,24)" fg:x="509" fg:w="1"/><text x="42.2121%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.33%)</title><rect x="42.1270%" y="197" width="0.3298%" height="15" fill="rgb(254,24,2)" fg:x="511" fg:w="4"/><text x="42.3770%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.49%)</title><rect x="42.0445%" y="213" width="0.4946%" height="15" fill="rgb(230,100,2)" fg:x="510" fg:w="6"/><text x="42.2945%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="42.4567%" y="197" width="0.0824%" height="15" fill="rgb(219,142,25)" fg:x="515" fg:w="1"/><text x="42.7067%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="42.4567%" y="181" width="0.0824%" height="15" fill="rgb(240,73,43)" fg:x="515" fg:w="1"/><text x="42.7067%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="42.4567%" y="165" width="0.0824%" height="15" fill="rgb(214,114,15)" fg:x="515" fg:w="1"/><text x="42.7067%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.4567%" y="149" width="0.0824%" height="15" fill="rgb(207,130,4)" fg:x="515" fg:w="1"/><text x="42.7067%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="42.5392%" y="213" width="0.1649%" height="15" fill="rgb(221,25,40)" fg:x="516" fg:w="2"/><text x="42.7892%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="42.5392%" y="197" width="0.1649%" height="15" fill="rgb(241,184,7)" fg:x="516" fg:w="2"/><text x="42.7892%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="43.1987%" y="149" width="0.1649%" height="15" fill="rgb(235,159,4)" fg:x="524" fg:w="2"/><text x="43.4487%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="43.1987%" y="133" width="0.1649%" height="15" fill="rgb(214,87,48)" fg:x="524" fg:w="2"/><text x="43.4487%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.2811%" y="117" width="0.0824%" height="15" fill="rgb(246,198,24)" fg:x="525" fg:w="1"/><text x="43.5311%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.2811%" y="101" width="0.0824%" height="15" fill="rgb(209,66,40)" fg:x="525" fg:w="1"/><text x="43.5311%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.2811%" y="85" width="0.0824%" height="15" fill="rgb(233,147,39)" fg:x="525" fg:w="1"/><text x="43.5311%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (50 samples, 4.12%)</title><rect x="43.3636%" y="149" width="4.1220%" height="15" fill="rgb(231,145,52)" fg:x="526" fg:w="50"/><text x="43.6136%" y="159.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (49 samples, 4.04%)</title><rect x="43.4460%" y="133" width="4.0396%" height="15" fill="rgb(206,20,26)" fg:x="527" fg:w="49"/><text x="43.6960%" y="143.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (49 samples, 4.04%)</title><rect x="43.4460%" y="117" width="4.0396%" height="15" fill="rgb(238,220,4)" fg:x="527" fg:w="49"/><text x="43.6960%" y="127.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="47.4856%" y="149" width="0.1649%" height="15" fill="rgb(252,195,42)" fg:x="576" fg:w="2"/><text x="47.7356%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="47.4856%" y="133" width="0.1649%" height="15" fill="rgb(209,10,6)" fg:x="576" fg:w="2"/><text x="47.7356%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 5.19%)</title><rect x="42.7040%" y="197" width="5.1937%" height="15" fill="rgb(229,3,52)" fg:x="518" fg:w="63"/><text x="42.9540%" y="207.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (63 samples, 5.19%)</title><rect x="42.7040%" y="181" width="5.1937%" height="15" fill="rgb(253,49,37)" fg:x="518" fg:w="63"/><text x="42.9540%" y="191.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (62 samples, 5.11%)</title><rect x="42.7865%" y="165" width="5.1113%" height="15" fill="rgb(240,103,49)" fg:x="519" fg:w="62"/><text x="43.0365%" y="175.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.25%)</title><rect x="47.6505%" y="149" width="0.2473%" height="15" fill="rgb(250,182,30)" fg:x="578" fg:w="3"/><text x="47.9005%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.8153%" y="133" width="0.0824%" height="15" fill="rgb(248,8,30)" fg:x="580" fg:w="1"/><text x="48.0653%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.25%)</title><rect x="48.1451%" y="181" width="0.2473%" height="15" fill="rgb(237,120,30)" fg:x="584" fg:w="3"/><text x="48.3951%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="48.2275%" y="165" width="0.1649%" height="15" fill="rgb(221,146,34)" fg:x="585" fg:w="2"/><text x="48.4775%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="48.2275%" y="149" width="0.1649%" height="15" fill="rgb(242,55,13)" fg:x="585" fg:w="2"/><text x="48.4775%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.3100%" y="133" width="0.0824%" height="15" fill="rgb(242,112,31)" fg:x="586" fg:w="1"/><text x="48.5600%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="48.3924%" y="181" width="0.1649%" height="15" fill="rgb(249,192,27)" fg:x="587" fg:w="2"/><text x="48.6424%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.4749%" y="165" width="0.0824%" height="15" fill="rgb(208,204,44)" fg:x="588" fg:w="1"/><text x="48.7249%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.4749%" y="149" width="0.0824%" height="15" fill="rgb(208,93,54)" fg:x="588" fg:w="1"/><text x="48.7249%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.4749%" y="133" width="0.0824%" height="15" fill="rgb(242,1,31)" fg:x="588" fg:w="1"/><text x="48.7249%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.74%)</title><rect x="47.8978%" y="197" width="0.7420%" height="15" fill="rgb(241,83,25)" fg:x="581" fg:w="9"/><text x="48.1478%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="48.5573%" y="181" width="0.0824%" height="15" fill="rgb(205,169,50)" fg:x="589" fg:w="1"/><text x="48.8073%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.5573%" y="165" width="0.0824%" height="15" fill="rgb(239,186,37)" fg:x="589" fg:w="1"/><text x="48.8073%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (73 samples, 6.02%)</title><rect x="42.7040%" y="213" width="6.0181%" height="15" fill="rgb(205,221,10)" fg:x="518" fg:w="73"/><text x="42.9540%" y="223.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="48.6397%" y="197" width="0.0824%" height="15" fill="rgb(218,196,15)" fg:x="590" fg:w="1"/><text x="48.8897%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (98 samples, 8.08%)</title><rect x="40.8904%" y="229" width="8.0791%" height="15" fill="rgb(218,196,35)" fg:x="496" fg:w="98"/><text x="41.1404%" y="239.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (3 samples, 0.25%)</title><rect x="48.7222%" y="213" width="0.2473%" height="15" fill="rgb(233,63,24)" fg:x="591" fg:w="3"/><text x="48.9722%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="48.8046%" y="197" width="0.1649%" height="15" fill="rgb(225,8,4)" fg:x="592" fg:w="2"/><text x="49.0546%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="48.8046%" y="181" width="0.1649%" height="15" fill="rgb(234,105,35)" fg:x="592" fg:w="2"/><text x="49.0546%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="49.2168%" y="181" width="0.0824%" height="15" fill="rgb(236,21,32)" fg:x="597" fg:w="1"/><text x="49.4668%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="49.2168%" y="165" width="0.0824%" height="15" fill="rgb(228,109,6)" fg:x="597" fg:w="1"/><text x="49.4668%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="49.3817%" y="165" width="0.3298%" height="15" fill="rgb(229,215,31)" fg:x="599" fg:w="4"/><text x="49.6317%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="49.3817%" y="149" width="0.3298%" height="15" fill="rgb(221,52,54)" fg:x="599" fg:w="4"/><text x="49.6317%" y="159.50"></text></g><g><title>__libc_malloc (4 samples, 0.33%)</title><rect x="49.3817%" y="133" width="0.3298%" height="15" fill="rgb(252,129,43)" fg:x="599" fg:w="4"/><text x="49.6317%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (9 samples, 0.74%)</title><rect x="49.0519%" y="197" width="0.7420%" height="15" fill="rgb(248,183,27)" fg:x="595" fg:w="9"/><text x="49.3019%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (6 samples, 0.49%)</title><rect x="49.2993%" y="181" width="0.4946%" height="15" fill="rgb(250,0,22)" fg:x="598" fg:w="6"/><text x="49.5493%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="49.7115%" y="165" width="0.0824%" height="15" fill="rgb(213,166,10)" fg:x="603" fg:w="1"/><text x="49.9615%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (11 samples, 0.91%)</title><rect x="48.9695%" y="229" width="0.9068%" height="15" fill="rgb(207,163,36)" fg:x="594" fg:w="11"/><text x="49.2195%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (10 samples, 0.82%)</title><rect x="49.0519%" y="213" width="0.8244%" height="15" fill="rgb(208,122,22)" fg:x="595" fg:w="10"/><text x="49.3019%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="49.7939%" y="197" width="0.0824%" height="15" fill="rgb(207,104,49)" fg:x="604" fg:w="1"/><text x="50.0439%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="49.8763%" y="197" width="0.0824%" height="15" fill="rgb(248,211,50)" fg:x="605" fg:w="1"/><text x="50.1263%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="49.8763%" y="181" width="0.0824%" height="15" fill="rgb(217,13,45)" fg:x="605" fg:w="1"/><text x="50.1263%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="49.9588%" y="197" width="0.1649%" height="15" fill="rgb(211,216,49)" fg:x="606" fg:w="2"/><text x="50.2088%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="50.0412%" y="181" width="0.0824%" height="15" fill="rgb(221,58,53)" fg:x="607" fg:w="1"/><text x="50.2912%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (120 samples, 9.89%)</title><rect x="40.3133%" y="277" width="9.8928%" height="15" fill="rgb(220,112,41)" fg:x="489" fg:w="120"/><text x="40.5633%" y="287.50">regex::regex::..</text></g><g><title>regex::builders::Builder::build_one_string (118 samples, 9.73%)</title><rect x="40.4782%" y="261" width="9.7279%" height="15" fill="rgb(236,38,28)" fg:x="491" fg:w="118"/><text x="40.7282%" y="271.50">regex::builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (118 samples, 9.73%)</title><rect x="40.4782%" y="245" width="9.7279%" height="15" fill="rgb(227,195,22)" fg:x="491" fg:w="118"/><text x="40.7282%" y="255.50">regex_automata..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.33%)</title><rect x="49.8763%" y="229" width="0.3298%" height="15" fill="rgb(214,55,33)" fg:x="605" fg:w="4"/><text x="50.1263%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.33%)</title><rect x="49.8763%" y="213" width="0.3298%" height="15" fill="rgb(248,80,13)" fg:x="605" fg:w="4"/><text x="50.1263%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="50.1237%" y="197" width="0.0824%" height="15" fill="rgb(238,52,6)" fg:x="608" fg:w="1"/><text x="50.3737%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="50.1237%" y="181" width="0.0824%" height="15" fill="rgb(224,198,47)" fg:x="608" fg:w="1"/><text x="50.3737%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="50.4534%" y="197" width="0.1649%" height="15" fill="rgb(233,171,20)" fg:x="612" fg:w="2"/><text x="50.7034%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="50.5359%" y="181" width="0.0824%" height="15" fill="rgb(241,30,25)" fg:x="613" fg:w="1"/><text x="50.7859%" y="191.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (144 samples, 11.87%)</title><rect x="38.9118%" y="293" width="11.8714%" height="15" fill="rgb(207,171,38)" fg:x="472" fg:w="144"/><text x="39.1618%" y="303.50">indefinite::helper..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.58%)</title><rect x="50.2061%" y="277" width="0.5771%" height="15" fill="rgb(234,70,1)" fg:x="609" fg:w="7"/><text x="50.4561%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.58%)</title><rect x="50.2061%" y="261" width="0.5771%" height="15" fill="rgb(232,178,18)" fg:x="609" fg:w="7"/><text x="50.4561%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.58%)</title><rect x="50.2061%" y="245" width="0.5771%" height="15" fill="rgb(241,78,40)" fg:x="609" fg:w="7"/><text x="50.4561%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.49%)</title><rect x="50.2885%" y="229" width="0.4946%" height="15" fill="rgb(222,35,25)" fg:x="610" fg:w="6"/><text x="50.5385%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.49%)</title><rect x="50.2885%" y="213" width="0.4946%" height="15" fill="rgb(207,92,16)" fg:x="610" fg:w="6"/><text x="50.5385%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="50.6183%" y="197" width="0.1649%" height="15" fill="rgb(216,59,51)" fg:x="614" fg:w="2"/><text x="50.8683%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="50.8656%" y="261" width="0.0824%" height="15" fill="rgb(213,80,28)" fg:x="617" fg:w="1"/><text x="51.1156%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.9481%" y="229" width="0.0824%" height="15" fill="rgb(220,93,7)" fg:x="618" fg:w="1"/><text x="51.1981%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.41%)</title><rect x="50.7832%" y="277" width="0.4122%" height="15" fill="rgb(225,24,44)" fg:x="616" fg:w="5"/><text x="51.0332%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (3 samples, 0.25%)</title><rect x="50.9481%" y="261" width="0.2473%" height="15" fill="rgb(243,74,40)" fg:x="618" fg:w="3"/><text x="51.1981%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.25%)</title><rect x="50.9481%" y="245" width="0.2473%" height="15" fill="rgb(228,39,7)" fg:x="618" fg:w="3"/><text x="51.1981%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="51.0305%" y="229" width="0.1649%" height="15" fill="rgb(227,79,8)" fg:x="619" fg:w="2"/><text x="51.2805%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="51.0305%" y="213" width="0.1649%" height="15" fill="rgb(236,58,11)" fg:x="619" fg:w="2"/><text x="51.2805%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="51.1954%" y="261" width="0.0824%" height="15" fill="rgb(249,63,35)" fg:x="621" fg:w="1"/><text x="51.4454%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="51.1954%" y="245" width="0.0824%" height="15" fill="rgb(252,114,16)" fg:x="621" fg:w="1"/><text x="51.4454%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="51.1954%" y="229" width="0.0824%" height="15" fill="rgb(254,151,24)" fg:x="621" fg:w="1"/><text x="51.4454%" y="239.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="51.1954%" y="213" width="0.0824%" height="15" fill="rgb(253,54,39)" fg:x="621" fg:w="1"/><text x="51.4454%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="51.5251%" y="181" width="0.1649%" height="15" fill="rgb(243,25,45)" fg:x="625" fg:w="2"/><text x="51.7751%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="51.5251%" y="165" width="0.1649%" height="15" fill="rgb(234,134,9)" fg:x="625" fg:w="2"/><text x="51.7751%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="51.5251%" y="149" width="0.1649%" height="15" fill="rgb(227,166,31)" fg:x="625" fg:w="2"/><text x="51.7751%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="51.6900%" y="181" width="0.0824%" height="15" fill="rgb(245,143,41)" fg:x="627" fg:w="1"/><text x="51.9400%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="51.6900%" y="165" width="0.0824%" height="15" fill="rgb(238,181,32)" fg:x="627" fg:w="1"/><text x="51.9400%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="51.6900%" y="149" width="0.0824%" height="15" fill="rgb(224,113,18)" fg:x="627" fg:w="1"/><text x="51.9400%" y="159.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="51.7725%" y="181" width="0.1649%" height="15" fill="rgb(240,229,28)" fg:x="628" fg:w="2"/><text x="52.0225%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.66%)</title><rect x="51.3603%" y="197" width="0.6595%" height="15" fill="rgb(250,185,3)" fg:x="623" fg:w="8"/><text x="51.6103%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="51.9373%" y="181" width="0.0824%" height="15" fill="rgb(212,59,25)" fg:x="630" fg:w="1"/><text x="52.1873%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.82%)</title><rect x="51.2778%" y="213" width="0.8244%" height="15" fill="rgb(221,87,20)" fg:x="622" fg:w="10"/><text x="51.5278%" y="223.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="52.0198%" y="197" width="0.0824%" height="15" fill="rgb(213,74,28)" fg:x="631" fg:w="1"/><text x="52.2698%" y="207.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (12 samples, 0.99%)</title><rect x="51.1954%" y="277" width="0.9893%" height="15" fill="rgb(224,132,34)" fg:x="621" fg:w="12"/><text x="51.4454%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.91%)</title><rect x="51.2778%" y="261" width="0.9068%" height="15" fill="rgb(222,101,24)" fg:x="622" fg:w="11"/><text x="51.5278%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.91%)</title><rect x="51.2778%" y="245" width="0.9068%" height="15" fill="rgb(254,142,4)" fg:x="622" fg:w="11"/><text x="51.5278%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.91%)</title><rect x="51.2778%" y="229" width="0.9068%" height="15" fill="rgb(230,229,49)" fg:x="622" fg:w="11"/><text x="51.5278%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="52.1022%" y="213" width="0.0824%" height="15" fill="rgb(238,70,47)" fg:x="632" fg:w="1"/><text x="52.3522%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="52.2671%" y="197" width="0.0824%" height="15" fill="rgb(231,160,17)" fg:x="634" fg:w="1"/><text x="52.5171%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.3495%" y="197" width="0.0824%" height="15" fill="rgb(218,68,53)" fg:x="635" fg:w="1"/><text x="52.5995%" y="207.50"></text></g><g><title>__rdl_alloc (2 samples, 0.16%)</title><rect x="52.4320%" y="197" width="0.1649%" height="15" fill="rgb(236,111,10)" fg:x="636" fg:w="2"/><text x="52.6820%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="52.1847%" y="213" width="0.4946%" height="15" fill="rgb(224,34,41)" fg:x="633" fg:w="6"/><text x="52.4347%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="52.5969%" y="197" width="0.0824%" height="15" fill="rgb(241,118,19)" fg:x="638" fg:w="1"/><text x="52.8469%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.5969%" y="181" width="0.0824%" height="15" fill="rgb(238,129,25)" fg:x="638" fg:w="1"/><text x="52.8469%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.58%)</title><rect x="52.1847%" y="229" width="0.5771%" height="15" fill="rgb(238,22,31)" fg:x="633" fg:w="7"/><text x="52.4347%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.6793%" y="213" width="0.0824%" height="15" fill="rgb(222,174,48)" fg:x="639" fg:w="1"/><text x="52.9293%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="52.8442%" y="197" width="0.0824%" height="15" fill="rgb(206,152,40)" fg:x="641" fg:w="1"/><text x="53.0942%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="52.8442%" y="181" width="0.0824%" height="15" fill="rgb(218,99,54)" fg:x="641" fg:w="1"/><text x="53.0942%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.8442%" y="165" width="0.0824%" height="15" fill="rgb(220,174,26)" fg:x="641" fg:w="1"/><text x="53.0942%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.8442%" y="149" width="0.0824%" height="15" fill="rgb(245,116,9)" fg:x="641" fg:w="1"/><text x="53.0942%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.25%)</title><rect x="52.7617%" y="229" width="0.2473%" height="15" fill="rgb(209,72,35)" fg:x="640" fg:w="3"/><text x="53.0117%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="52.8442%" y="213" width="0.1649%" height="15" fill="rgb(226,126,21)" fg:x="641" fg:w="2"/><text x="53.0942%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="52.9266%" y="197" width="0.0824%" height="15" fill="rgb(227,192,1)" fg:x="642" fg:w="1"/><text x="53.1766%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.25%)</title><rect x="53.0915%" y="213" width="0.2473%" height="15" fill="rgb(237,180,29)" fg:x="644" fg:w="3"/><text x="53.3415%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.25%)</title><rect x="53.0915%" y="197" width="0.2473%" height="15" fill="rgb(230,197,35)" fg:x="644" fg:w="3"/><text x="53.3415%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.2564%" y="181" width="0.0824%" height="15" fill="rgb(246,193,31)" fg:x="646" fg:w="1"/><text x="53.5064%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="53.4213%" y="197" width="0.0824%" height="15" fill="rgb(241,36,4)" fg:x="648" fg:w="1"/><text x="53.6713%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="53.4213%" y="181" width="0.0824%" height="15" fill="rgb(241,130,17)" fg:x="648" fg:w="1"/><text x="53.6713%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.33%)</title><rect x="53.3388%" y="213" width="0.3298%" height="15" fill="rgb(206,137,32)" fg:x="647" fg:w="4"/><text x="53.5888%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="53.5037%" y="197" width="0.1649%" height="15" fill="rgb(237,228,51)" fg:x="649" fg:w="2"/><text x="53.7537%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="54.1632%" y="181" width="0.0824%" height="15" fill="rgb(243,6,42)" fg:x="657" fg:w="1"/><text x="54.4132%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="54.1632%" y="165" width="0.0824%" height="15" fill="rgb(251,74,28)" fg:x="657" fg:w="1"/><text x="54.4132%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.1632%" y="149" width="0.0824%" height="15" fill="rgb(218,20,49)" fg:x="657" fg:w="1"/><text x="54.4132%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.1632%" y="133" width="0.0824%" height="15" fill="rgb(238,28,14)" fg:x="657" fg:w="1"/><text x="54.4132%" y="143.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.33%)</title><rect x="54.2457%" y="181" width="0.3298%" height="15" fill="rgb(229,40,46)" fg:x="658" fg:w="4"/><text x="54.4957%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="54.4930%" y="165" width="0.0824%" height="15" fill="rgb(244,195,20)" fg:x="661" fg:w="1"/><text x="54.7430%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (10 samples, 0.82%)</title><rect x="54.5754%" y="165" width="0.8244%" height="15" fill="rgb(253,56,35)" fg:x="662" fg:w="10"/><text x="54.8254%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (10 samples, 0.82%)</title><rect x="54.5754%" y="149" width="0.8244%" height="15" fill="rgb(210,149,44)" fg:x="662" fg:w="10"/><text x="54.8254%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (11 samples, 0.91%)</title><rect x="54.5754%" y="181" width="0.9068%" height="15" fill="rgb(240,135,12)" fg:x="662" fg:w="11"/><text x="54.8254%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="55.3998%" y="165" width="0.0824%" height="15" fill="rgb(251,24,50)" fg:x="672" fg:w="1"/><text x="55.6498%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (24 samples, 1.98%)</title><rect x="53.6686%" y="213" width="1.9786%" height="15" fill="rgb(243,200,47)" fg:x="651" fg:w="24"/><text x="53.9186%" y="223.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (24 samples, 1.98%)</title><rect x="53.6686%" y="197" width="1.9786%" height="15" fill="rgb(224,166,26)" fg:x="651" fg:w="24"/><text x="53.9186%" y="207.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (2 samples, 0.16%)</title><rect x="55.4823%" y="181" width="0.1649%" height="15" fill="rgb(233,0,47)" fg:x="673" fg:w="2"/><text x="55.7323%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (3 samples, 0.25%)</title><rect x="55.6472%" y="213" width="0.2473%" height="15" fill="rgb(253,80,5)" fg:x="675" fg:w="3"/><text x="55.8972%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="55.8945%" y="165" width="0.0824%" height="15" fill="rgb(214,133,25)" fg:x="678" fg:w="1"/><text x="56.1445%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="55.9769%" y="165" width="0.1649%" height="15" fill="rgb(209,27,14)" fg:x="679" fg:w="2"/><text x="56.2269%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="55.9769%" y="149" width="0.1649%" height="15" fill="rgb(219,102,51)" fg:x="679" fg:w="2"/><text x="56.2269%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="55.9769%" y="133" width="0.1649%" height="15" fill="rgb(237,18,16)" fg:x="679" fg:w="2"/><text x="56.2269%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="55.9769%" y="117" width="0.1649%" height="15" fill="rgb(241,85,17)" fg:x="679" fg:w="2"/><text x="56.2269%" y="127.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="57.0486%" y="101" width="0.0824%" height="15" fill="rgb(236,90,42)" fg:x="692" fg:w="1"/><text x="57.2986%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.1311%" y="101" width="0.0824%" height="15" fill="rgb(249,57,21)" fg:x="693" fg:w="1"/><text x="57.3811%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.33%)</title><rect x="57.2135%" y="101" width="0.3298%" height="15" fill="rgb(243,12,36)" fg:x="694" fg:w="4"/><text x="57.4635%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.4608%" y="85" width="0.0824%" height="15" fill="rgb(253,128,47)" fg:x="697" fg:w="1"/><text x="57.7108%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.4608%" y="69" width="0.0824%" height="15" fill="rgb(207,33,20)" fg:x="697" fg:w="1"/><text x="57.7108%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.4608%" y="53" width="0.0824%" height="15" fill="rgb(233,215,35)" fg:x="697" fg:w="1"/><text x="57.7108%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (6 samples, 0.49%)</title><rect x="57.5433%" y="101" width="0.4946%" height="15" fill="rgb(249,188,52)" fg:x="698" fg:w="6"/><text x="57.7933%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.2028%" y="69" width="0.0824%" height="15" fill="rgb(225,12,32)" fg:x="706" fg:w="1"/><text x="58.4528%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="58.2852%" y="69" width="0.1649%" height="15" fill="rgb(247,98,14)" fg:x="707" fg:w="2"/><text x="58.5352%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="58.2852%" y="53" width="0.1649%" height="15" fill="rgb(247,219,48)" fg:x="707" fg:w="2"/><text x="58.5352%" y="63.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="58.2852%" y="37" width="0.1649%" height="15" fill="rgb(253,60,48)" fg:x="707" fg:w="2"/><text x="58.5352%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (12 samples, 0.99%)</title><rect x="58.0379%" y="101" width="0.9893%" height="15" fill="rgb(245,15,52)" fg:x="704" fg:w="12"/><text x="58.2879%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (12 samples, 0.99%)</title><rect x="58.0379%" y="85" width="0.9893%" height="15" fill="rgb(220,133,28)" fg:x="704" fg:w="12"/><text x="58.2879%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (7 samples, 0.58%)</title><rect x="58.4501%" y="69" width="0.5771%" height="15" fill="rgb(217,180,4)" fg:x="709" fg:w="7"/><text x="58.7001%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (52 samples, 4.29%)</title><rect x="59.0272%" y="101" width="4.2869%" height="15" fill="rgb(251,24,1)" fg:x="716" fg:w="52"/><text x="59.2772%" y="111.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (52 samples, 4.29%)</title><rect x="59.0272%" y="85" width="4.2869%" height="15" fill="rgb(212,185,49)" fg:x="716" fg:w="52"/><text x="59.2772%" y="95.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (52 samples, 4.29%)</title><rect x="59.0272%" y="69" width="4.2869%" height="15" fill="rgb(215,175,22)" fg:x="716" fg:w="52"/><text x="59.2772%" y="79.50">alloc..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.49%)</title><rect x="63.3141%" y="101" width="0.4946%" height="15" fill="rgb(250,205,14)" fg:x="768" fg:w="6"/><text x="63.5641%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (103 samples, 8.49%)</title><rect x="55.8945%" y="197" width="8.4913%" height="15" fill="rgb(225,211,22)" fg:x="678" fg:w="103"/><text x="56.1445%" y="207.50">&lt;core::iter:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (103 samples, 8.49%)</title><rect x="55.8945%" y="181" width="8.4913%" height="15" fill="rgb(251,179,42)" fg:x="678" fg:w="103"/><text x="56.1445%" y="191.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (100 samples, 8.24%)</title><rect x="56.1418%" y="165" width="8.2440%" height="15" fill="rgb(208,216,51)" fg:x="681" fg:w="100"/><text x="56.3918%" y="175.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (100 samples, 8.24%)</title><rect x="56.1418%" y="149" width="8.2440%" height="15" fill="rgb(235,36,11)" fg:x="681" fg:w="100"/><text x="56.3918%" y="159.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (99 samples, 8.16%)</title><rect x="56.2242%" y="133" width="8.1616%" height="15" fill="rgb(213,189,28)" fg:x="682" fg:w="99"/><text x="56.4742%" y="143.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (99 samples, 8.16%)</title><rect x="56.2242%" y="117" width="8.1616%" height="15" fill="rgb(227,203,42)" fg:x="682" fg:w="99"/><text x="56.4742%" y="127.50">regex_autom..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (7 samples, 0.58%)</title><rect x="63.8087%" y="101" width="0.5771%" height="15" fill="rgb(244,72,36)" fg:x="774" fg:w="7"/><text x="64.0587%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.41%)</title><rect x="63.9736%" y="85" width="0.4122%" height="15" fill="rgb(213,53,17)" fg:x="776" fg:w="5"/><text x="64.2236%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.41%)</title><rect x="63.9736%" y="69" width="0.4122%" height="15" fill="rgb(207,167,3)" fg:x="776" fg:w="5"/><text x="64.2236%" y="79.50"></text></g><g><title>__libc_malloc (3 samples, 0.25%)</title><rect x="64.1385%" y="53" width="0.2473%" height="15" fill="rgb(216,98,30)" fg:x="778" fg:w="3"/><text x="64.3885%" y="63.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="64.3858%" y="181" width="0.0824%" height="15" fill="rgb(236,123,15)" fg:x="781" fg:w="1"/><text x="64.6358%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (7 samples, 0.58%)</title><rect x="64.4683%" y="181" width="0.5771%" height="15" fill="rgb(248,81,50)" fg:x="782" fg:w="7"/><text x="64.7183%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="64.7156%" y="165" width="0.3298%" height="15" fill="rgb(214,120,4)" fg:x="785" fg:w="4"/><text x="64.9656%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="64.7980%" y="149" width="0.2473%" height="15" fill="rgb(208,179,34)" fg:x="786" fg:w="3"/><text x="65.0480%" y="159.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="64.7980%" y="133" width="0.2473%" height="15" fill="rgb(227,140,7)" fg:x="786" fg:w="3"/><text x="65.0480%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.4575%" y="165" width="0.0824%" height="15" fill="rgb(214,22,6)" fg:x="794" fg:w="1"/><text x="65.7075%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.4575%" y="149" width="0.0824%" height="15" fill="rgb(207,137,27)" fg:x="794" fg:w="1"/><text x="65.7075%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.4575%" y="133" width="0.0824%" height="15" fill="rgb(210,8,46)" fg:x="794" fg:w="1"/><text x="65.7075%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.58%)</title><rect x="65.0453%" y="181" width="0.5771%" height="15" fill="rgb(240,16,54)" fg:x="789" fg:w="7"/><text x="65.2953%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.5400%" y="165" width="0.0824%" height="15" fill="rgb(211,209,29)" fg:x="795" fg:w="1"/><text x="65.7900%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.5400%" y="149" width="0.0824%" height="15" fill="rgb(226,228,24)" fg:x="795" fg:w="1"/><text x="65.7900%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.5400%" y="133" width="0.0824%" height="15" fill="rgb(222,84,9)" fg:x="795" fg:w="1"/><text x="65.7900%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (154 samples, 12.70%)</title><rect x="53.0091%" y="229" width="12.6958%" height="15" fill="rgb(234,203,30)" fg:x="643" fg:w="154"/><text x="53.2591%" y="239.50">regex_automata::met..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (119 samples, 9.81%)</title><rect x="55.8945%" y="213" width="9.8104%" height="15" fill="rgb(238,109,14)" fg:x="678" fg:w="119"/><text x="56.1445%" y="223.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (16 samples, 1.32%)</title><rect x="64.3858%" y="197" width="1.3190%" height="15" fill="rgb(233,206,34)" fg:x="781" fg:w="16"/><text x="64.6358%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="65.6224%" y="181" width="0.0824%" height="15" fill="rgb(220,167,47)" fg:x="796" fg:w="1"/><text x="65.8724%" y="191.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="65.8697%" y="181" width="0.0824%" height="15" fill="rgb(238,105,10)" fg:x="799" fg:w="1"/><text x="66.1197%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.8697%" y="165" width="0.0824%" height="15" fill="rgb(213,227,17)" fg:x="799" fg:w="1"/><text x="66.1197%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.8697%" y="149" width="0.0824%" height="15" fill="rgb(217,132,38)" fg:x="799" fg:w="1"/><text x="66.1197%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="66.0346%" y="149" width="0.0824%" height="15" fill="rgb(242,146,4)" fg:x="801" fg:w="1"/><text x="66.2846%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (3 samples, 0.25%)</title><rect x="65.9522%" y="181" width="0.2473%" height="15" fill="rgb(212,61,9)" fg:x="800" fg:w="3"/><text x="66.2022%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (2 samples, 0.16%)</title><rect x="66.0346%" y="165" width="0.1649%" height="15" fill="rgb(247,126,22)" fg:x="801" fg:w="2"/><text x="66.2846%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="66.1171%" y="149" width="0.0824%" height="15" fill="rgb(220,196,2)" fg:x="802" fg:w="1"/><text x="66.3671%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.58%)</title><rect x="65.8697%" y="197" width="0.5771%" height="15" fill="rgb(208,46,4)" fg:x="799" fg:w="7"/><text x="66.1197%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.25%)</title><rect x="66.1995%" y="181" width="0.2473%" height="15" fill="rgb(252,104,46)" fg:x="803" fg:w="3"/><text x="66.4495%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="66.1995%" y="165" width="0.2473%" height="15" fill="rgb(237,152,48)" fg:x="803" fg:w="3"/><text x="66.4495%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="66.1995%" y="149" width="0.2473%" height="15" fill="rgb(221,59,37)" fg:x="803" fg:w="3"/><text x="66.4495%" y="159.50"></text></g><g><title>__libc_malloc (3 samples, 0.25%)</title><rect x="66.1995%" y="133" width="0.2473%" height="15" fill="rgb(209,202,51)" fg:x="803" fg:w="3"/><text x="66.4495%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (2 samples, 0.16%)</title><rect x="66.4468%" y="197" width="0.1649%" height="15" fill="rgb(228,81,30)" fg:x="806" fg:w="2"/><text x="66.6968%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (13 samples, 1.07%)</title><rect x="65.7049%" y="229" width="1.0717%" height="15" fill="rgb(227,42,39)" fg:x="797" fg:w="13"/><text x="65.9549%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (13 samples, 1.07%)</title><rect x="65.7049%" y="213" width="1.0717%" height="15" fill="rgb(221,26,2)" fg:x="797" fg:w="13"/><text x="65.9549%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="66.6117%" y="197" width="0.1649%" height="15" fill="rgb(254,61,31)" fg:x="808" fg:w="2"/><text x="66.8617%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (2 samples, 0.16%)</title><rect x="66.6117%" y="181" width="0.1649%" height="15" fill="rgb(222,173,38)" fg:x="808" fg:w="2"/><text x="66.8617%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="66.7766%" y="197" width="0.0824%" height="15" fill="rgb(218,50,12)" fg:x="810" fg:w="1"/><text x="67.0266%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="66.7766%" y="181" width="0.0824%" height="15" fill="rgb(223,88,40)" fg:x="810" fg:w="1"/><text x="67.0266%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="66.7766%" y="165" width="0.0824%" height="15" fill="rgb(237,54,19)" fg:x="810" fg:w="1"/><text x="67.0266%" y="175.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="67.1063%" y="181" width="0.1649%" height="15" fill="rgb(251,129,25)" fg:x="814" fg:w="2"/><text x="67.3563%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (6 samples, 0.49%)</title><rect x="66.8590%" y="197" width="0.4946%" height="15" fill="rgb(238,97,19)" fg:x="811" fg:w="6"/><text x="67.1090%" y="207.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="67.2712%" y="181" width="0.0824%" height="15" fill="rgb(240,169,18)" fg:x="816" fg:w="1"/><text x="67.5212%" y="191.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="67.2712%" y="165" width="0.0824%" height="15" fill="rgb(230,187,49)" fg:x="816" fg:w="1"/><text x="67.5212%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="67.2712%" y="149" width="0.0824%" height="15" fill="rgb(209,44,26)" fg:x="816" fg:w="1"/><text x="67.5212%" y="159.50"></text></g><g><title>indefinite::rules::number::Number::check (202 samples, 16.65%)</title><rect x="50.7832%" y="293" width="16.6529%" height="15" fill="rgb(244,0,6)" fg:x="616" fg:w="202"/><text x="51.0332%" y="303.50">indefinite::rules::number:..</text></g><g><title>regex::regex::string::Regex::new (185 samples, 15.25%)</title><rect x="52.1847%" y="277" width="15.2514%" height="15" fill="rgb(248,18,21)" fg:x="633" fg:w="185"/><text x="52.4347%" y="287.50">regex::regex::string::R..</text></g><g><title>regex::builders::Builder::build_one_string (185 samples, 15.25%)</title><rect x="52.1847%" y="261" width="15.2514%" height="15" fill="rgb(245,180,19)" fg:x="633" fg:w="185"/><text x="52.4347%" y="271.50">regex::builders::Builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (185 samples, 15.25%)</title><rect x="52.1847%" y="245" width="15.2514%" height="15" fill="rgb(252,118,36)" fg:x="633" fg:w="185"/><text x="52.4347%" y="255.50">regex_automata::meta::r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.66%)</title><rect x="66.7766%" y="229" width="0.6595%" height="15" fill="rgb(210,224,19)" fg:x="810" fg:w="8"/><text x="67.0266%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.66%)</title><rect x="66.7766%" y="213" width="0.6595%" height="15" fill="rgb(218,30,24)" fg:x="810" fg:w="8"/><text x="67.0266%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="67.3537%" y="197" width="0.0824%" height="15" fill="rgb(219,75,50)" fg:x="817" fg:w="1"/><text x="67.6037%" y="207.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="67.3537%" y="181" width="0.0824%" height="15" fill="rgb(234,72,50)" fg:x="817" fg:w="1"/><text x="67.6037%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.3537%" y="165" width="0.0824%" height="15" fill="rgb(219,100,48)" fg:x="817" fg:w="1"/><text x="67.6037%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.3537%" y="149" width="0.0824%" height="15" fill="rgb(253,5,41)" fg:x="817" fg:w="1"/><text x="67.6037%" y="159.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="67.3537%" y="133" width="0.0824%" height="15" fill="rgb(247,181,11)" fg:x="817" fg:w="1"/><text x="67.6037%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="67.3537%" y="117" width="0.0824%" height="15" fill="rgb(222,223,25)" fg:x="817" fg:w="1"/><text x="67.6037%" y="127.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="67.4361%" y="261" width="0.0824%" height="15" fill="rgb(214,198,28)" fg:x="818" fg:w="1"/><text x="67.6861%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="67.4361%" y="245" width="0.0824%" height="15" fill="rgb(230,46,43)" fg:x="818" fg:w="1"/><text x="67.6861%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="67.5185%" y="213" width="0.0824%" height="15" fill="rgb(233,65,53)" fg:x="819" fg:w="1"/><text x="67.7685%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.5185%" y="197" width="0.0824%" height="15" fill="rgb(221,121,27)" fg:x="819" fg:w="1"/><text x="67.7685%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="67.6010%" y="213" width="0.0824%" height="15" fill="rgb(247,70,47)" fg:x="820" fg:w="1"/><text x="67.8510%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="67.6010%" y="197" width="0.0824%" height="15" fill="rgb(228,85,35)" fg:x="820" fg:w="1"/><text x="67.8510%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.25%)</title><rect x="67.5185%" y="229" width="0.2473%" height="15" fill="rgb(209,50,18)" fg:x="819" fg:w="3"/><text x="67.7685%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="67.6834%" y="213" width="0.0824%" height="15" fill="rgb(250,19,35)" fg:x="821" fg:w="1"/><text x="67.9334%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.6834%" y="197" width="0.0824%" height="15" fill="rgb(253,107,29)" fg:x="821" fg:w="1"/><text x="67.9334%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.33%)</title><rect x="67.5185%" y="261" width="0.3298%" height="15" fill="rgb(252,179,29)" fg:x="819" fg:w="4"/><text x="67.7685%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (4 samples, 0.33%)</title><rect x="67.5185%" y="245" width="0.3298%" height="15" fill="rgb(238,194,6)" fg:x="819" fg:w="4"/><text x="67.7685%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="67.7659%" y="229" width="0.0824%" height="15" fill="rgb(238,164,29)" fg:x="822" fg:w="1"/><text x="68.0159%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="67.7659%" y="213" width="0.0824%" height="15" fill="rgb(224,25,9)" fg:x="822" fg:w="1"/><text x="68.0159%" y="223.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="67.8483%" y="245" width="0.0824%" height="15" fill="rgb(244,153,23)" fg:x="823" fg:w="1"/><text x="68.0983%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Config::hybrid_cache_capacity (1 samples, 0.08%)</title><rect x="67.8483%" y="229" width="0.0824%" height="15" fill="rgb(212,203,14)" fg:x="823" fg:w="1"/><text x="68.0983%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.9308%" y="213" width="0.0824%" height="15" fill="rgb(220,164,20)" fg:x="824" fg:w="1"/><text x="68.1808%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.9308%" y="197" width="0.0824%" height="15" fill="rgb(222,203,48)" fg:x="824" fg:w="1"/><text x="68.1808%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.0132%" y="213" width="0.0824%" height="15" fill="rgb(215,159,22)" fg:x="825" fg:w="1"/><text x="68.2632%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="68.1781%" y="181" width="0.0824%" height="15" fill="rgb(216,183,47)" fg:x="827" fg:w="1"/><text x="68.4281%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.1781%" y="165" width="0.0824%" height="15" fill="rgb(229,195,25)" fg:x="827" fg:w="1"/><text x="68.4281%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.1781%" y="149" width="0.0824%" height="15" fill="rgb(224,132,51)" fg:x="827" fg:w="1"/><text x="68.4281%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.1781%" y="133" width="0.0824%" height="15" fill="rgb(240,63,7)" fg:x="827" fg:w="1"/><text x="68.4281%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.25%)</title><rect x="68.0956%" y="213" width="0.2473%" height="15" fill="rgb(249,182,41)" fg:x="826" fg:w="3"/><text x="68.3456%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="68.1781%" y="197" width="0.1649%" height="15" fill="rgb(243,47,26)" fg:x="827" fg:w="2"/><text x="68.4281%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="68.2605%" y="181" width="0.0824%" height="15" fill="rgb(233,48,2)" fg:x="828" fg:w="1"/><text x="68.5105%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.2605%" y="165" width="0.0824%" height="15" fill="rgb(244,165,34)" fg:x="828" fg:w="1"/><text x="68.5105%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="68.2605%" y="149" width="0.0824%" height="15" fill="rgb(207,89,7)" fg:x="828" fg:w="1"/><text x="68.5105%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.2605%" y="133" width="0.0824%" height="15" fill="rgb(244,117,36)" fg:x="828" fg:w="1"/><text x="68.5105%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.2605%" y="117" width="0.0824%" height="15" fill="rgb(226,144,34)" fg:x="828" fg:w="1"/><text x="68.5105%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.2605%" y="101" width="0.0824%" height="15" fill="rgb(213,23,19)" fg:x="828" fg:w="1"/><text x="68.5105%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.4254%" y="197" width="0.0824%" height="15" fill="rgb(217,75,12)" fg:x="830" fg:w="1"/><text x="68.6754%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="68.5078%" y="197" width="0.0824%" height="15" fill="rgb(224,159,17)" fg:x="831" fg:w="1"/><text x="68.7578%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="68.5078%" y="181" width="0.0824%" height="15" fill="rgb(217,118,1)" fg:x="831" fg:w="1"/><text x="68.7578%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="68.5903%" y="165" width="0.0824%" height="15" fill="rgb(232,180,48)" fg:x="832" fg:w="1"/><text x="68.8403%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.5903%" y="149" width="0.0824%" height="15" fill="rgb(230,27,33)" fg:x="832" fg:w="1"/><text x="68.8403%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.5903%" y="133" width="0.0824%" height="15" fill="rgb(205,31,21)" fg:x="832" fg:w="1"/><text x="68.8403%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.5903%" y="117" width="0.0824%" height="15" fill="rgb(253,59,4)" fg:x="832" fg:w="1"/><text x="68.8403%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="68.5903%" y="181" width="0.1649%" height="15" fill="rgb(224,201,9)" fg:x="832" fg:w="2"/><text x="68.8403%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="68.6727%" y="165" width="0.0824%" height="15" fill="rgb(229,206,30)" fg:x="833" fg:w="1"/><text x="68.9227%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="68.7552%" y="181" width="0.0824%" height="15" fill="rgb(212,67,47)" fg:x="834" fg:w="1"/><text x="69.0052%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (10 samples, 0.82%)</title><rect x="68.3430%" y="213" width="0.8244%" height="15" fill="rgb(211,96,50)" fg:x="829" fg:w="10"/><text x="68.5930%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.58%)</title><rect x="68.5903%" y="197" width="0.5771%" height="15" fill="rgb(252,114,18)" fg:x="832" fg:w="7"/><text x="68.8403%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.33%)</title><rect x="68.8376%" y="181" width="0.3298%" height="15" fill="rgb(223,58,37)" fg:x="835" fg:w="4"/><text x="69.0876%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.33%)</title><rect x="68.8376%" y="165" width="0.3298%" height="15" fill="rgb(237,70,4)" fg:x="835" fg:w="4"/><text x="69.0876%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="69.0025%" y="149" width="0.1649%" height="15" fill="rgb(244,85,46)" fg:x="837" fg:w="2"/><text x="69.2525%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="69.0025%" y="133" width="0.1649%" height="15" fill="rgb(223,39,52)" fg:x="837" fg:w="2"/><text x="69.2525%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="69.0025%" y="117" width="0.1649%" height="15" fill="rgb(218,200,14)" fg:x="837" fg:w="2"/><text x="69.2525%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="69.4147%" y="165" width="0.0824%" height="15" fill="rgb(208,171,16)" fg:x="842" fg:w="1"/><text x="69.6647%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.41%)</title><rect x="69.1674%" y="213" width="0.4122%" height="15" fill="rgb(234,200,18)" fg:x="839" fg:w="5"/><text x="69.4174%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.41%)</title><rect x="69.1674%" y="197" width="0.4122%" height="15" fill="rgb(228,45,11)" fg:x="839" fg:w="5"/><text x="69.4174%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.33%)</title><rect x="69.2498%" y="181" width="0.3298%" height="15" fill="rgb(237,182,11)" fg:x="840" fg:w="4"/><text x="69.4998%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="69.4971%" y="165" width="0.0824%" height="15" fill="rgb(241,175,49)" fg:x="843" fg:w="1"/><text x="69.7471%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="69.4971%" y="149" width="0.0824%" height="15" fill="rgb(247,38,35)" fg:x="843" fg:w="1"/><text x="69.7471%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="69.4971%" y="133" width="0.0824%" height="15" fill="rgb(228,39,49)" fg:x="843" fg:w="1"/><text x="69.7471%" y="143.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="69.6620%" y="181" width="0.0824%" height="15" fill="rgb(226,101,26)" fg:x="845" fg:w="1"/><text x="69.9120%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="69.6620%" y="165" width="0.0824%" height="15" fill="rgb(206,141,19)" fg:x="845" fg:w="1"/><text x="69.9120%" y="175.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="69.6620%" y="149" width="0.0824%" height="15" fill="rgb(211,200,13)" fg:x="845" fg:w="1"/><text x="69.9120%" y="159.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="69.7444%" y="165" width="0.1649%" height="15" fill="rgb(241,121,6)" fg:x="846" fg:w="2"/><text x="69.9944%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.8269%" y="149" width="0.0824%" height="15" fill="rgb(234,221,29)" fg:x="847" fg:w="1"/><text x="70.0769%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.25%)</title><rect x="69.7444%" y="181" width="0.2473%" height="15" fill="rgb(229,136,5)" fg:x="846" fg:w="3"/><text x="69.9944%" y="191.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="69.9093%" y="165" width="0.0824%" height="15" fill="rgb(238,36,11)" fg:x="848" fg:w="1"/><text x="70.1593%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (27 samples, 2.23%)</title><rect x="67.8483%" y="261" width="2.2259%" height="15" fill="rgb(251,55,41)" fg:x="823" fg:w="27"/><text x="68.0983%" y="271.50">r..</text></g><g><title>regex::builders::Builder::build_one_string (26 samples, 2.14%)</title><rect x="67.9308%" y="245" width="2.1434%" height="15" fill="rgb(242,34,40)" fg:x="824" fg:w="26"/><text x="68.1808%" y="255.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (26 samples, 2.14%)</title><rect x="67.9308%" y="229" width="2.1434%" height="15" fill="rgb(215,42,17)" fg:x="824" fg:w="26"/><text x="68.1808%" y="239.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.49%)</title><rect x="69.5796%" y="213" width="0.4946%" height="15" fill="rgb(207,44,46)" fg:x="844" fg:w="6"/><text x="69.8296%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.49%)</title><rect x="69.5796%" y="197" width="0.4946%" height="15" fill="rgb(211,206,28)" fg:x="844" fg:w="6"/><text x="69.8296%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.9918%" y="181" width="0.0824%" height="15" fill="rgb(237,167,16)" fg:x="849" fg:w="1"/><text x="70.2418%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="70.0742%" y="213" width="0.1649%" height="15" fill="rgb(233,66,6)" fg:x="850" fg:w="2"/><text x="70.3242%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="70.0742%" y="197" width="0.1649%" height="15" fill="rgb(246,123,29)" fg:x="850" fg:w="2"/><text x="70.3242%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="70.1566%" y="181" width="0.0824%" height="15" fill="rgb(209,62,40)" fg:x="851" fg:w="1"/><text x="70.4066%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (412 samples, 33.97%)</title><rect x="36.3561%" y="373" width="33.9654%" height="15" fill="rgb(218,4,25)" fg:x="441" fg:w="412"/><text x="36.6061%" y="383.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::mo..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (383 samples, 31.57%)</title><rect x="38.7469%" y="357" width="31.5746%" height="15" fill="rgb(253,91,49)" fg:x="470" fg:w="383"/><text x="38.9969%" y="367.50">plugins_core::looking::model::Unqualified::qualify</text></g><g><title>indefinite::indefinite (382 samples, 31.49%)</title><rect x="38.8293%" y="341" width="31.4922%" height="15" fill="rgb(228,155,29)" fg:x="471" fg:w="382"/><text x="39.0793%" y="351.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (382 samples, 31.49%)</title><rect x="38.8293%" y="325" width="31.4922%" height="15" fill="rgb(243,57,37)" fg:x="471" fg:w="382"/><text x="39.0793%" y="335.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (381 samples, 31.41%)</title><rect x="38.9118%" y="309" width="31.4097%" height="15" fill="rgb(244,167,17)" fg:x="472" fg:w="381"/><text x="39.1618%" y="319.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (35 samples, 2.89%)</title><rect x="67.4361%" y="293" width="2.8854%" height="15" fill="rgb(207,181,38)" fg:x="818" fg:w="35"/><text x="67.6861%" y="303.50">in..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (35 samples, 2.89%)</title><rect x="67.4361%" y="277" width="2.8854%" height="15" fill="rgb(211,8,23)" fg:x="818" fg:w="35"/><text x="67.6861%" y="287.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.25%)</title><rect x="70.0742%" y="261" width="0.2473%" height="15" fill="rgb(235,11,44)" fg:x="850" fg:w="3"/><text x="70.3242%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.25%)</title><rect x="70.0742%" y="245" width="0.2473%" height="15" fill="rgb(248,18,52)" fg:x="850" fg:w="3"/><text x="70.3242%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.25%)</title><rect x="70.0742%" y="229" width="0.2473%" height="15" fill="rgb(208,4,7)" fg:x="850" fg:w="3"/><text x="70.3242%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="70.2391%" y="213" width="0.0824%" height="15" fill="rgb(240,17,39)" fg:x="852" fg:w="1"/><text x="70.4891%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="70.2391%" y="197" width="0.0824%" height="15" fill="rgb(207,170,3)" fg:x="852" fg:w="1"/><text x="70.4891%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="70.2391%" y="181" width="0.0824%" height="15" fill="rgb(236,100,52)" fg:x="852" fg:w="1"/><text x="70.4891%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.2391%" y="165" width="0.0824%" height="15" fill="rgb(246,78,51)" fg:x="852" fg:w="1"/><text x="70.4891%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2391%" y="149" width="0.0824%" height="15" fill="rgb(211,17,15)" fg:x="852" fg:w="1"/><text x="70.4891%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.3215%" y="357" width="0.0824%" height="15" fill="rgb(209,59,46)" fg:x="853" fg:w="1"/><text x="70.5715%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3215%" y="341" width="0.0824%" height="15" fill="rgb(210,92,25)" fg:x="853" fg:w="1"/><text x="70.5715%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::EnumDeserializer as serde::de::EnumAccess&gt;::variant_seed (1 samples, 0.08%)</title><rect x="70.4040%" y="261" width="0.0824%" height="15" fill="rgb(238,174,52)" fg:x="854" fg:w="1"/><text x="70.6540%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.4864%" y="229" width="0.0824%" height="15" fill="rgb(230,73,7)" fg:x="855" fg:w="1"/><text x="70.7364%" y="239.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (3 samples, 0.25%)</title><rect x="70.4040%" y="277" width="0.2473%" height="15" fill="rgb(243,124,40)" fg:x="854" fg:w="3"/><text x="70.6540%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.4864%" y="261" width="0.1649%" height="15" fill="rgb(244,170,11)" fg:x="855" fg:w="2"/><text x="70.7364%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.4864%" y="245" width="0.1649%" height="15" fill="rgb(207,114,54)" fg:x="855" fg:w="2"/><text x="70.7364%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.5688%" y="229" width="0.0824%" height="15" fill="rgb(205,42,20)" fg:x="856" fg:w="1"/><text x="70.8188%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.5688%" y="213" width="0.0824%" height="15" fill="rgb(230,30,28)" fg:x="856" fg:w="1"/><text x="70.8188%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (4 samples, 0.33%)</title><rect x="70.4040%" y="325" width="0.3298%" height="15" fill="rgb(205,73,54)" fg:x="854" fg:w="4"/><text x="70.6540%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (4 samples, 0.33%)</title><rect x="70.4040%" y="309" width="0.3298%" height="15" fill="rgb(254,227,23)" fg:x="854" fg:w="4"/><text x="70.6540%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (4 samples, 0.33%)</title><rect x="70.4040%" y="293" width="0.3298%" height="15" fill="rgb(228,202,34)" fg:x="854" fg:w="4"/><text x="70.6540%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.6513%" y="277" width="0.0824%" height="15" fill="rgb(222,225,37)" fg:x="857" fg:w="1"/><text x="70.9013%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.6513%" y="261" width="0.0824%" height="15" fill="rgb(221,14,54)" fg:x="857" fg:w="1"/><text x="70.9013%" y="271.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.58%)</title><rect x="70.3215%" y="373" width="0.5771%" height="15" fill="rgb(254,102,2)" fg:x="853" fg:w="7"/><text x="70.5715%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.49%)</title><rect x="70.4040%" y="357" width="0.4946%" height="15" fill="rgb(232,104,17)" fg:x="854" fg:w="6"/><text x="70.6540%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="70.4040%" y="341" width="0.4946%" height="15" fill="rgb(250,220,14)" fg:x="854" fg:w="6"/><text x="70.6540%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.7337%" y="325" width="0.1649%" height="15" fill="rgb(241,158,9)" fg:x="858" fg:w="2"/><text x="70.9837%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8162%" y="309" width="0.0824%" height="15" fill="rgb(246,9,43)" fg:x="859" fg:w="1"/><text x="71.0662%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.8162%" y="293" width="0.0824%" height="15" fill="rgb(206,73,33)" fg:x="859" fg:w="1"/><text x="71.0662%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.41%)</title><rect x="70.8986%" y="309" width="0.4122%" height="15" fill="rgb(222,79,8)" fg:x="860" fg:w="5"/><text x="71.1486%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.33%)</title><rect x="70.9810%" y="293" width="0.3298%" height="15" fill="rgb(234,8,54)" fg:x="861" fg:w="4"/><text x="71.2310%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.33%)</title><rect x="70.9810%" y="277" width="0.3298%" height="15" fill="rgb(209,134,38)" fg:x="861" fg:w="4"/><text x="71.2310%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.25%)</title><rect x="71.0635%" y="261" width="0.2473%" height="15" fill="rgb(230,127,29)" fg:x="862" fg:w="3"/><text x="71.3135%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="71.0635%" y="245" width="0.2473%" height="15" fill="rgb(242,44,41)" fg:x="862" fg:w="3"/><text x="71.3135%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2284%" y="229" width="0.0824%" height="15" fill="rgb(222,56,43)" fg:x="864" fg:w="1"/><text x="71.4784%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2284%" y="213" width="0.0824%" height="15" fill="rgb(238,39,47)" fg:x="864" fg:w="1"/><text x="71.4784%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.2284%" y="197" width="0.0824%" height="15" fill="rgb(226,79,43)" fg:x="864" fg:w="1"/><text x="71.4784%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.2284%" y="181" width="0.0824%" height="15" fill="rgb(242,105,53)" fg:x="864" fg:w="1"/><text x="71.4784%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.2284%" y="165" width="0.0824%" height="15" fill="rgb(251,132,46)" fg:x="864" fg:w="1"/><text x="71.4784%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.2284%" y="149" width="0.0824%" height="15" fill="rgb(231,77,14)" fg:x="864" fg:w="1"/><text x="71.4784%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.2284%" y="133" width="0.0824%" height="15" fill="rgb(240,135,9)" fg:x="864" fg:w="1"/><text x="71.4784%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.2284%" y="117" width="0.0824%" height="15" fill="rgb(248,109,14)" fg:x="864" fg:w="1"/><text x="71.4784%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.2284%" y="101" width="0.0824%" height="15" fill="rgb(227,146,52)" fg:x="864" fg:w="1"/><text x="71.4784%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.2284%" y="85" width="0.0824%" height="15" fill="rgb(232,54,3)" fg:x="864" fg:w="1"/><text x="71.4784%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.2284%" y="69" width="0.0824%" height="15" fill="rgb(229,201,43)" fg:x="864" fg:w="1"/><text x="71.4784%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2284%" y="53" width="0.0824%" height="15" fill="rgb(252,161,33)" fg:x="864" fg:w="1"/><text x="71.4784%" y="63.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.3108%" y="309" width="0.0824%" height="15" fill="rgb(226,146,40)" fg:x="865" fg:w="1"/><text x="71.5608%" y="319.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.3108%" y="293" width="0.0824%" height="15" fill="rgb(219,47,25)" fg:x="865" fg:w="1"/><text x="71.5608%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="71.3108%" y="277" width="0.0824%" height="15" fill="rgb(250,135,13)" fg:x="865" fg:w="1"/><text x="71.5608%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.3108%" y="261" width="0.0824%" height="15" fill="rgb(219,229,18)" fg:x="865" fg:w="1"/><text x="71.5608%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.3932%" y="293" width="0.0824%" height="15" fill="rgb(217,152,27)" fg:x="866" fg:w="1"/><text x="71.6432%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.3932%" y="277" width="0.0824%" height="15" fill="rgb(225,71,47)" fg:x="866" fg:w="1"/><text x="71.6432%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.3932%" y="261" width="0.0824%" height="15" fill="rgb(220,139,14)" fg:x="866" fg:w="1"/><text x="71.6432%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.3932%" y="245" width="0.0824%" height="15" fill="rgb(247,54,32)" fg:x="866" fg:w="1"/><text x="71.6432%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.3932%" y="229" width="0.0824%" height="15" fill="rgb(252,131,39)" fg:x="866" fg:w="1"/><text x="71.6432%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="71.3932%" y="213" width="0.0824%" height="15" fill="rgb(210,108,39)" fg:x="866" fg:w="1"/><text x="71.6432%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.3932%" y="197" width="0.0824%" height="15" fill="rgb(205,23,29)" fg:x="866" fg:w="1"/><text x="71.6432%" y="207.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (4 samples, 0.33%)</title><rect x="71.3932%" y="309" width="0.3298%" height="15" fill="rgb(246,139,46)" fg:x="866" fg:w="4"/><text x="71.6432%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.25%)</title><rect x="71.4757%" y="293" width="0.2473%" height="15" fill="rgb(250,81,26)" fg:x="867" fg:w="3"/><text x="71.7257%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="71.5581%" y="277" width="0.1649%" height="15" fill="rgb(214,104,7)" fg:x="868" fg:w="2"/><text x="71.8081%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="71.5581%" y="261" width="0.1649%" height="15" fill="rgb(233,189,8)" fg:x="868" fg:w="2"/><text x="71.8081%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.7230%" y="149" width="0.0824%" height="15" fill="rgb(228,141,17)" fg:x="870" fg:w="1"/><text x="71.9730%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.7230%" y="133" width="0.0824%" height="15" fill="rgb(247,157,1)" fg:x="870" fg:w="1"/><text x="71.9730%" y="143.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.7230%" y="117" width="0.0824%" height="15" fill="rgb(249,225,5)" fg:x="870" fg:w="1"/><text x="71.9730%" y="127.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.7230%" y="101" width="0.0824%" height="15" fill="rgb(242,55,13)" fg:x="870" fg:w="1"/><text x="71.9730%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7230%" y="85" width="0.0824%" height="15" fill="rgb(230,49,50)" fg:x="870" fg:w="1"/><text x="71.9730%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="71.7230%" y="213" width="0.1649%" height="15" fill="rgb(241,111,38)" fg:x="870" fg:w="2"/><text x="71.9730%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.7230%" y="197" width="0.1649%" height="15" fill="rgb(252,155,4)" fg:x="870" fg:w="2"/><text x="71.9730%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="71.7230%" y="181" width="0.1649%" height="15" fill="rgb(212,69,32)" fg:x="870" fg:w="2"/><text x="71.9730%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.7230%" y="165" width="0.1649%" height="15" fill="rgb(243,107,47)" fg:x="870" fg:w="2"/><text x="71.9730%" y="175.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="71.8054%" y="149" width="0.0824%" height="15" fill="rgb(247,130,12)" fg:x="871" fg:w="1"/><text x="72.0554%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.8054%" y="133" width="0.0824%" height="15" fill="rgb(233,74,16)" fg:x="871" fg:w="1"/><text x="72.0554%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.8054%" y="117" width="0.0824%" height="15" fill="rgb(208,58,18)" fg:x="871" fg:w="1"/><text x="72.0554%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="71.8879%" y="213" width="0.0824%" height="15" fill="rgb(242,225,1)" fg:x="872" fg:w="1"/><text x="72.1379%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.8879%" y="197" width="0.0824%" height="15" fill="rgb(249,39,40)" fg:x="872" fg:w="1"/><text x="72.1379%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="71.8879%" y="181" width="0.0824%" height="15" fill="rgb(207,72,44)" fg:x="872" fg:w="1"/><text x="72.1379%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="71.8879%" y="165" width="0.0824%" height="15" fill="rgb(215,193,12)" fg:x="872" fg:w="1"/><text x="72.1379%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.8879%" y="149" width="0.0824%" height="15" fill="rgb(248,41,39)" fg:x="872" fg:w="1"/><text x="72.1379%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.9703%" y="133" width="0.0824%" height="15" fill="rgb(253,85,4)" fg:x="873" fg:w="1"/><text x="72.2203%" y="143.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.49%)</title><rect x="71.7230%" y="261" width="0.4946%" height="15" fill="rgb(243,70,31)" fg:x="870" fg:w="6"/><text x="71.9730%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="71.7230%" y="245" width="0.4946%" height="15" fill="rgb(253,195,26)" fg:x="870" fg:w="6"/><text x="71.9730%" y="255.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.49%)</title><rect x="71.7230%" y="229" width="0.4946%" height="15" fill="rgb(243,42,11)" fg:x="870" fg:w="6"/><text x="71.9730%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="71.9703%" y="213" width="0.2473%" height="15" fill="rgb(239,66,17)" fg:x="873" fg:w="3"/><text x="72.2203%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="71.9703%" y="197" width="0.2473%" height="15" fill="rgb(217,132,21)" fg:x="873" fg:w="3"/><text x="72.2203%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.25%)</title><rect x="71.9703%" y="181" width="0.2473%" height="15" fill="rgb(252,202,21)" fg:x="873" fg:w="3"/><text x="72.2203%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="71.9703%" y="165" width="0.2473%" height="15" fill="rgb(233,98,36)" fg:x="873" fg:w="3"/><text x="72.2203%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="71.9703%" y="149" width="0.2473%" height="15" fill="rgb(216,153,54)" fg:x="873" fg:w="3"/><text x="72.2203%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="72.0528%" y="133" width="0.1649%" height="15" fill="rgb(250,99,7)" fg:x="874" fg:w="2"/><text x="72.3028%" y="143.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.0528%" y="117" width="0.1649%" height="15" fill="rgb(207,56,50)" fg:x="874" fg:w="2"/><text x="72.3028%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.0528%" y="101" width="0.1649%" height="15" fill="rgb(244,61,34)" fg:x="874" fg:w="2"/><text x="72.3028%" y="111.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.1352%" y="85" width="0.0824%" height="15" fill="rgb(241,50,38)" fg:x="875" fg:w="1"/><text x="72.3852%" y="95.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.1352%" y="69" width="0.0824%" height="15" fill="rgb(212,166,30)" fg:x="875" fg:w="1"/><text x="72.3852%" y="79.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.1352%" y="53" width="0.0824%" height="15" fill="rgb(249,127,32)" fg:x="875" fg:w="1"/><text x="72.3852%" y="63.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.66%)</title><rect x="71.7230%" y="309" width="0.6595%" height="15" fill="rgb(209,103,0)" fg:x="870" fg:w="8"/><text x="71.9730%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.66%)</title><rect x="71.7230%" y="293" width="0.6595%" height="15" fill="rgb(238,209,51)" fg:x="870" fg:w="8"/><text x="71.9730%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.66%)</title><rect x="71.7230%" y="277" width="0.6595%" height="15" fill="rgb(237,56,23)" fg:x="870" fg:w="8"/><text x="71.9730%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.2176%" y="261" width="0.1649%" height="15" fill="rgb(215,153,46)" fg:x="876" fg:w="2"/><text x="72.4676%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.3001%" y="245" width="0.0824%" height="15" fill="rgb(224,49,31)" fg:x="877" fg:w="1"/><text x="72.5501%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.3001%" y="229" width="0.0824%" height="15" fill="rgb(250,18,42)" fg:x="877" fg:w="1"/><text x="72.5501%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.3001%" y="213" width="0.0824%" height="15" fill="rgb(215,176,39)" fg:x="877" fg:w="1"/><text x="72.5501%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.7123%" y="165" width="0.0824%" height="15" fill="rgb(223,77,29)" fg:x="882" fg:w="1"/><text x="72.9623%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.7123%" y="149" width="0.0824%" height="15" fill="rgb(234,94,52)" fg:x="882" fg:w="1"/><text x="72.9623%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.7123%" y="133" width="0.0824%" height="15" fill="rgb(220,154,50)" fg:x="882" fg:w="1"/><text x="72.9623%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7123%" y="117" width="0.0824%" height="15" fill="rgb(212,11,10)" fg:x="882" fg:w="1"/><text x="72.9623%" y="127.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.7947%" y="149" width="0.0824%" height="15" fill="rgb(205,166,19)" fg:x="883" fg:w="1"/><text x="73.0447%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.7947%" y="133" width="0.0824%" height="15" fill="rgb(244,198,16)" fg:x="883" fg:w="1"/><text x="73.0447%" y="143.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.7947%" y="117" width="0.0824%" height="15" fill="rgb(219,69,12)" fg:x="883" fg:w="1"/><text x="73.0447%" y="127.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.7947%" y="101" width="0.0824%" height="15" fill="rgb(245,30,7)" fg:x="883" fg:w="1"/><text x="73.0447%" y="111.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="72.5474%" y="213" width="0.4122%" height="15" fill="rgb(218,221,48)" fg:x="880" fg:w="5"/><text x="72.7974%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="72.5474%" y="197" width="0.4122%" height="15" fill="rgb(216,66,15)" fg:x="880" fg:w="5"/><text x="72.7974%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="72.5474%" y="181" width="0.4122%" height="15" fill="rgb(226,122,50)" fg:x="880" fg:w="5"/><text x="72.7974%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.7947%" y="165" width="0.1649%" height="15" fill="rgb(239,156,16)" fg:x="883" fg:w="2"/><text x="73.0447%" y="175.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.8772%" y="149" width="0.0824%" height="15" fill="rgb(224,27,38)" fg:x="884" fg:w="1"/><text x="73.1272%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.58%)</title><rect x="72.4650%" y="245" width="0.5771%" height="15" fill="rgb(224,39,27)" fg:x="879" fg:w="7"/><text x="72.7150%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.58%)</title><rect x="72.4650%" y="229" width="0.5771%" height="15" fill="rgb(215,92,29)" fg:x="879" fg:w="7"/><text x="72.7150%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.9596%" y="213" width="0.0824%" height="15" fill="rgb(207,159,16)" fg:x="885" fg:w="1"/><text x="73.2096%" y="223.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.9596%" y="197" width="0.0824%" height="15" fill="rgb(238,163,47)" fg:x="885" fg:w="1"/><text x="73.2096%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="72.9596%" y="181" width="0.0824%" height="15" fill="rgb(219,91,49)" fg:x="885" fg:w="1"/><text x="73.2096%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.0420%" y="245" width="0.0824%" height="15" fill="rgb(227,167,31)" fg:x="886" fg:w="1"/><text x="73.2920%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0420%" y="229" width="0.0824%" height="15" fill="rgb(234,80,54)" fg:x="886" fg:w="1"/><text x="73.2920%" y="239.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (28 samples, 2.31%)</title><rect x="70.8986%" y="373" width="2.3083%" height="15" fill="rgb(212,114,2)" fg:x="860" fg:w="28"/><text x="71.1486%" y="383.50">&lt;..</text></g><g><title>kernel::model::EntityPtrResolver::entity (28 samples, 2.31%)</title><rect x="70.8986%" y="357" width="2.3083%" height="15" fill="rgb(234,50,24)" fg:x="860" fg:w="28"/><text x="71.1486%" y="367.50">k..</text></g><g><title>engine::session::Session::load_entity (28 samples, 2.31%)</title><rect x="70.8986%" y="341" width="2.3083%" height="15" fill="rgb(221,68,8)" fg:x="860" fg:w="28"/><text x="71.1486%" y="351.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (28 samples, 2.31%)</title><rect x="70.8986%" y="325" width="2.3083%" height="15" fill="rgb(254,180,31)" fg:x="860" fg:w="28"/><text x="71.1486%" y="335.50">e..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (10 samples, 0.82%)</title><rect x="72.3825%" y="309" width="0.8244%" height="15" fill="rgb(247,130,50)" fg:x="878" fg:w="10"/><text x="72.6325%" y="319.50"></text></g><g><title>serde_json::de::from_trait (10 samples, 0.82%)</title><rect x="72.3825%" y="293" width="0.8244%" height="15" fill="rgb(211,109,4)" fg:x="878" fg:w="10"/><text x="72.6325%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.74%)</title><rect x="72.4650%" y="277" width="0.7420%" height="15" fill="rgb(238,50,21)" fg:x="879" fg:w="9"/><text x="72.7150%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.74%)</title><rect x="72.4650%" y="261" width="0.7420%" height="15" fill="rgb(225,57,45)" fg:x="879" fg:w="9"/><text x="72.7150%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.1245%" y="245" width="0.0824%" height="15" fill="rgb(209,196,50)" fg:x="887" fg:w="1"/><text x="73.3745%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="73.2069%" y="373" width="0.0824%" height="15" fill="rgb(242,140,13)" fg:x="888" fg:w="1"/><text x="73.4569%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (483 samples, 39.82%)</title><rect x="33.5532%" y="597" width="39.8186%" height="15" fill="rgb(217,111,7)" fg:x="407" fg:w="483"/><text x="33.8032%" y="607.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (482 samples, 39.74%)</title><rect x="33.6356%" y="581" width="39.7362%" height="15" fill="rgb(253,193,51)" fg:x="408" fg:w="482"/><text x="33.8856%" y="591.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (482 samples, 39.74%)</title><rect x="33.6356%" y="565" width="39.7362%" height="15" fill="rgb(252,70,29)" fg:x="408" fg:w="482"/><text x="33.8856%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (482 samples, 39.74%)</title><rect x="33.6356%" y="549" width="39.7362%" height="15" fill="rgb(232,127,12)" fg:x="408" fg:w="482"/><text x="33.8856%" y="559.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (458 samples, 37.76%)</title><rect x="35.6142%" y="533" width="37.7576%" height="15" fill="rgb(211,180,21)" fg:x="432" fg:w="458"/><text x="35.8642%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (458 samples, 37.76%)</title><rect x="35.6142%" y="517" width="37.7576%" height="15" fill="rgb(229,72,13)" fg:x="432" fg:w="458"/><text x="35.8642%" y="527.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Mi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (458 samples, 37.76%)</title><rect x="35.6142%" y="501" width="37.7576%" height="15" fill="rgb(240,211,49)" fg:x="432" fg:w="458"/><text x="35.8642%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (458 samples, 37.76%)</title><rect x="35.6142%" y="485" width="37.7576%" height="15" fill="rgb(219,149,40)" fg:x="432" fg:w="458"/><text x="35.8642%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (458 samples, 37.76%)</title><rect x="35.6142%" y="469" width="37.7576%" height="15" fill="rgb(210,127,46)" fg:x="432" fg:w="458"/><text x="35.8642%" y="479.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (457 samples, 37.68%)</title><rect x="35.6966%" y="453" width="37.6752%" height="15" fill="rgb(220,106,7)" fg:x="433" fg:w="457"/><text x="35.9466%" y="463.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (457 samples, 37.68%)</title><rect x="35.6966%" y="437" width="37.6752%" height="15" fill="rgb(249,31,22)" fg:x="433" fg:w="457"/><text x="35.9466%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (457 samples, 37.68%)</title><rect x="35.6966%" y="421" width="37.6752%" height="15" fill="rgb(253,1,49)" fg:x="433" fg:w="457"/><text x="35.9466%" y="431.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (455 samples, 37.51%)</title><rect x="35.8615%" y="405" width="37.5103%" height="15" fill="rgb(227,144,33)" fg:x="435" fg:w="455"/><text x="36.1115%" y="415.50">&lt;plugins_core::looking::actions::LookAction as kernel::action..</text></g><g><title>plugins_core::looking::model::new_area_observation (449 samples, 37.02%)</title><rect x="36.3561%" y="389" width="37.0157%" height="15" fill="rgb(249,163,44)" fg:x="441" fg:w="449"/><text x="36.6061%" y="399.50">plugins_core::looking::model::new_area_observation</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::OpenedScope&lt;plugins_core::moving::model::Occupyable&gt;&gt; (1 samples, 0.08%)</title><rect x="73.2894%" y="373" width="0.0824%" height="15" fill="rgb(234,15,39)" fg:x="889" fg:w="1"/><text x="73.5394%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="73.2894%" y="357" width="0.0824%" height="15" fill="rgb(207,66,16)" fg:x="889" fg:w="1"/><text x="73.5394%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.2894%" y="341" width="0.0824%" height="15" fill="rgb(233,112,24)" fg:x="889" fg:w="1"/><text x="73.5394%" y="351.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="73.3718%" y="581" width="0.1649%" height="15" fill="rgb(230,90,22)" fg:x="890" fg:w="2"/><text x="73.6218%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.3718%" y="565" width="0.1649%" height="15" fill="rgb(229,61,13)" fg:x="890" fg:w="2"/><text x="73.6218%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.3718%" y="549" width="0.1649%" height="15" fill="rgb(225,57,24)" fg:x="890" fg:w="2"/><text x="73.6218%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="73.3718%" y="533" width="0.1649%" height="15" fill="rgb(208,169,48)" fg:x="890" fg:w="2"/><text x="73.6218%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (3 samples, 0.25%)</title><rect x="73.3718%" y="597" width="0.2473%" height="15" fill="rgb(244,218,51)" fg:x="890" fg:w="3"/><text x="73.6218%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.5367%" y="581" width="0.0824%" height="15" fill="rgb(214,148,10)" fg:x="892" fg:w="1"/><text x="73.7867%" y="591.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="73.6191%" y="597" width="0.0824%" height="15" fill="rgb(225,174,27)" fg:x="893" fg:w="1"/><text x="73.8691%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="73.7016%" y="517" width="0.0824%" height="15" fill="rgb(230,96,26)" fg:x="894" fg:w="1"/><text x="73.9516%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.9489%" y="501" width="0.1649%" height="15" fill="rgb(232,10,30)" fg:x="897" fg:w="2"/><text x="74.1989%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.9489%" y="485" width="0.1649%" height="15" fill="rgb(222,8,50)" fg:x="897" fg:w="2"/><text x="74.1989%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0313%" y="469" width="0.0824%" height="15" fill="rgb(213,81,27)" fg:x="898" fg:w="1"/><text x="74.2813%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0313%" y="453" width="0.0824%" height="15" fill="rgb(245,50,10)" fg:x="898" fg:w="1"/><text x="74.2813%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.1962%" y="453" width="0.1649%" height="15" fill="rgb(216,100,18)" fg:x="900" fg:w="2"/><text x="74.4462%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.5260%" y="405" width="0.0824%" height="15" fill="rgb(236,147,54)" fg:x="904" fg:w="1"/><text x="74.7760%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.58%)</title><rect x="74.1138%" y="501" width="0.5771%" height="15" fill="rgb(205,143,26)" fg:x="899" fg:w="7"/><text x="74.3638%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.58%)</title><rect x="74.1138%" y="485" width="0.5771%" height="15" fill="rgb(236,26,9)" fg:x="899" fg:w="7"/><text x="74.3638%" y="495.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.58%)</title><rect x="74.1138%" y="469" width="0.5771%" height="15" fill="rgb(221,165,53)" fg:x="899" fg:w="7"/><text x="74.3638%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.33%)</title><rect x="74.3611%" y="453" width="0.3298%" height="15" fill="rgb(214,110,17)" fg:x="902" fg:w="4"/><text x="74.6111%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.33%)</title><rect x="74.3611%" y="437" width="0.3298%" height="15" fill="rgb(237,197,12)" fg:x="902" fg:w="4"/><text x="74.6111%" y="447.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.25%)</title><rect x="74.4435%" y="421" width="0.2473%" height="15" fill="rgb(205,84,17)" fg:x="903" fg:w="3"/><text x="74.6935%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.6084%" y="405" width="0.0824%" height="15" fill="rgb(237,18,45)" fg:x="905" fg:w="1"/><text x="74.8584%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.6084%" y="389" width="0.0824%" height="15" fill="rgb(221,87,14)" fg:x="905" fg:w="1"/><text x="74.8584%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="74.6084%" y="373" width="0.0824%" height="15" fill="rgb(238,186,15)" fg:x="905" fg:w="1"/><text x="74.8584%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="74.6084%" y="357" width="0.0824%" height="15" fill="rgb(208,115,11)" fg:x="905" fg:w="1"/><text x="74.8584%" y="367.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="74.6084%" y="341" width="0.0824%" height="15" fill="rgb(254,175,0)" fg:x="905" fg:w="1"/><text x="74.8584%" y="351.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="74.6084%" y="325" width="0.0824%" height="15" fill="rgb(227,24,42)" fg:x="905" fg:w="1"/><text x="74.8584%" y="335.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="74.6084%" y="309" width="0.0824%" height="15" fill="rgb(223,211,37)" fg:x="905" fg:w="1"/><text x="74.8584%" y="319.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="74.6084%" y="293" width="0.0824%" height="15" fill="rgb(235,49,27)" fg:x="905" fg:w="1"/><text x="74.8584%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="74.6084%" y="277" width="0.0824%" height="15" fill="rgb(254,97,51)" fg:x="905" fg:w="1"/><text x="74.8584%" y="287.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="74.6084%" y="261" width="0.0824%" height="15" fill="rgb(249,51,40)" fg:x="905" fg:w="1"/><text x="74.8584%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="74.6084%" y="245" width="0.0824%" height="15" fill="rgb(210,128,45)" fg:x="905" fg:w="1"/><text x="74.8584%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="74.6084%" y="229" width="0.0824%" height="15" fill="rgb(224,137,50)" fg:x="905" fg:w="1"/><text x="74.8584%" y="239.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="74.6084%" y="213" width="0.0824%" height="15" fill="rgb(242,15,9)" fg:x="905" fg:w="1"/><text x="74.8584%" y="223.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="74.6084%" y="197" width="0.0824%" height="15" fill="rgb(233,187,41)" fg:x="905" fg:w="1"/><text x="74.8584%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 1.07%)</title><rect x="73.7016%" y="549" width="1.0717%" height="15" fill="rgb(227,2,29)" fg:x="894" fg:w="13"/><text x="73.9516%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 1.07%)</title><rect x="73.7016%" y="533" width="1.0717%" height="15" fill="rgb(222,70,3)" fg:x="894" fg:w="13"/><text x="73.9516%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (12 samples, 0.99%)</title><rect x="73.7840%" y="517" width="0.9893%" height="15" fill="rgb(213,11,42)" fg:x="895" fg:w="12"/><text x="74.0340%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.6908%" y="501" width="0.0824%" height="15" fill="rgb(225,150,9)" fg:x="906" fg:w="1"/><text x="74.9408%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.6908%" y="485" width="0.0824%" height="15" fill="rgb(230,162,45)" fg:x="906" fg:w="1"/><text x="74.9408%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.6908%" y="469" width="0.0824%" height="15" fill="rgb(222,14,52)" fg:x="906" fg:w="1"/><text x="74.9408%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.6908%" y="453" width="0.0824%" height="15" fill="rgb(254,198,14)" fg:x="906" fg:w="1"/><text x="74.9408%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.6908%" y="437" width="0.0824%" height="15" fill="rgb(220,217,30)" fg:x="906" fg:w="1"/><text x="74.9408%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.8557%" y="485" width="0.0824%" height="15" fill="rgb(215,146,41)" fg:x="908" fg:w="1"/><text x="75.1057%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.0206%" y="453" width="0.0824%" height="15" fill="rgb(217,27,36)" fg:x="910" fg:w="1"/><text x="75.2706%" y="463.50"></text></g><g><title>engine::session::internal::Added::find_refs (18 samples, 1.48%)</title><rect x="73.7016%" y="581" width="1.4839%" height="15" fill="rgb(219,218,39)" fg:x="894" fg:w="18"/><text x="73.9516%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (18 samples, 1.48%)</title><rect x="73.7016%" y="565" width="1.4839%" height="15" fill="rgb(219,4,42)" fg:x="894" fg:w="18"/><text x="73.9516%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="74.7733%" y="549" width="0.4122%" height="15" fill="rgb(249,119,36)" fg:x="907" fg:w="5"/><text x="75.0233%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="74.7733%" y="533" width="0.4122%" height="15" fill="rgb(209,23,33)" fg:x="907" fg:w="5"/><text x="75.0233%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="74.8557%" y="517" width="0.3298%" height="15" fill="rgb(211,10,0)" fg:x="908" fg:w="4"/><text x="75.1057%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.33%)</title><rect x="74.8557%" y="501" width="0.3298%" height="15" fill="rgb(208,99,37)" fg:x="908" fg:w="4"/><text x="75.1057%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="74.9382%" y="485" width="0.2473%" height="15" fill="rgb(213,132,31)" fg:x="909" fg:w="3"/><text x="75.1882%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.0206%" y="469" width="0.1649%" height="15" fill="rgb(243,129,40)" fg:x="910" fg:w="2"/><text x="75.2706%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.1031%" y="453" width="0.0824%" height="15" fill="rgb(210,66,33)" fg:x="911" fg:w="1"/><text x="75.3531%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.1031%" y="437" width="0.0824%" height="15" fill="rgb(209,189,4)" fg:x="911" fg:w="1"/><text x="75.3531%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.1031%" y="421" width="0.0824%" height="15" fill="rgb(214,107,37)" fg:x="911" fg:w="1"/><text x="75.3531%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.2679%" y="565" width="0.0824%" height="15" fill="rgb(245,88,54)" fg:x="913" fg:w="1"/><text x="75.5179%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.2679%" y="549" width="0.0824%" height="15" fill="rgb(205,146,20)" fg:x="913" fg:w="1"/><text x="75.5179%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.2679%" y="533" width="0.0824%" height="15" fill="rgb(220,161,25)" fg:x="913" fg:w="1"/><text x="75.5179%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.2679%" y="517" width="0.0824%" height="15" fill="rgb(215,152,15)" fg:x="913" fg:w="1"/><text x="75.5179%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.2679%" y="501" width="0.0824%" height="15" fill="rgb(233,192,44)" fg:x="913" fg:w="1"/><text x="75.5179%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.2679%" y="485" width="0.0824%" height="15" fill="rgb(240,170,46)" fg:x="913" fg:w="1"/><text x="75.5179%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.2679%" y="469" width="0.0824%" height="15" fill="rgb(207,104,33)" fg:x="913" fg:w="1"/><text x="75.5179%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.2679%" y="453" width="0.0824%" height="15" fill="rgb(219,21,39)" fg:x="913" fg:w="1"/><text x="75.5179%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.2679%" y="437" width="0.0824%" height="15" fill="rgb(214,133,29)" fg:x="913" fg:w="1"/><text x="75.5179%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.2679%" y="421" width="0.0824%" height="15" fill="rgb(226,93,6)" fg:x="913" fg:w="1"/><text x="75.5179%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.2679%" y="405" width="0.0824%" height="15" fill="rgb(252,222,34)" fg:x="913" fg:w="1"/><text x="75.5179%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.2679%" y="389" width="0.0824%" height="15" fill="rgb(252,92,48)" fg:x="913" fg:w="1"/><text x="75.5179%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.2679%" y="373" width="0.0824%" height="15" fill="rgb(245,223,24)" fg:x="913" fg:w="1"/><text x="75.5179%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.3504%" y="549" width="0.0824%" height="15" fill="rgb(205,176,3)" fg:x="914" fg:w="1"/><text x="75.6004%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.25%)</title><rect x="75.3504%" y="565" width="0.2473%" height="15" fill="rgb(235,151,15)" fg:x="914" fg:w="3"/><text x="75.6004%" y="575.50"></text></g><g><title>kernel::model::props::Props::property_named (2 samples, 0.16%)</title><rect x="75.4328%" y="549" width="0.1649%" height="15" fill="rgb(237,209,11)" fg:x="915" fg:w="2"/><text x="75.6828%" y="559.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="75.5977%" y="565" width="0.0824%" height="15" fill="rgb(243,227,24)" fg:x="917" fg:w="1"/><text x="75.8477%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.5977%" y="549" width="0.0824%" height="15" fill="rgb(239,193,16)" fg:x="917" fg:w="1"/><text x="75.8477%" y="559.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="75.8450%" y="405" width="0.0824%" height="15" fill="rgb(231,27,9)" fg:x="920" fg:w="1"/><text x="76.0950%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.8450%" y="389" width="0.0824%" height="15" fill="rgb(219,169,10)" fg:x="920" fg:w="1"/><text x="76.0950%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.8450%" y="373" width="0.0824%" height="15" fill="rgb(244,229,43)" fg:x="920" fg:w="1"/><text x="76.0950%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.8450%" y="469" width="0.1649%" height="15" fill="rgb(254,38,20)" fg:x="920" fg:w="2"/><text x="76.0950%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.8450%" y="453" width="0.1649%" height="15" fill="rgb(250,47,30)" fg:x="920" fg:w="2"/><text x="76.0950%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.8450%" y="437" width="0.1649%" height="15" fill="rgb(224,124,36)" fg:x="920" fg:w="2"/><text x="76.0950%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.8450%" y="421" width="0.1649%" height="15" fill="rgb(246,68,51)" fg:x="920" fg:w="2"/><text x="76.0950%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.9275%" y="405" width="0.0824%" height="15" fill="rgb(253,43,49)" fg:x="921" fg:w="1"/><text x="76.1775%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.0099%" y="389" width="0.0824%" height="15" fill="rgb(219,54,36)" fg:x="922" fg:w="1"/><text x="76.2599%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.41%)</title><rect x="75.7626%" y="517" width="0.4122%" height="15" fill="rgb(227,133,34)" fg:x="919" fg:w="5"/><text x="76.0126%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="75.7626%" y="501" width="0.4122%" height="15" fill="rgb(247,227,15)" fg:x="919" fg:w="5"/><text x="76.0126%" y="511.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.41%)</title><rect x="75.7626%" y="485" width="0.4122%" height="15" fill="rgb(229,96,14)" fg:x="919" fg:w="5"/><text x="76.0126%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.0099%" y="469" width="0.1649%" height="15" fill="rgb(220,79,17)" fg:x="922" fg:w="2"/><text x="76.2599%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.0099%" y="453" width="0.1649%" height="15" fill="rgb(205,131,53)" fg:x="922" fg:w="2"/><text x="76.2599%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="76.0099%" y="437" width="0.1649%" height="15" fill="rgb(209,50,29)" fg:x="922" fg:w="2"/><text x="76.2599%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.0099%" y="421" width="0.1649%" height="15" fill="rgb(245,86,46)" fg:x="922" fg:w="2"/><text x="76.2599%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.0099%" y="405" width="0.1649%" height="15" fill="rgb(235,66,46)" fg:x="922" fg:w="2"/><text x="76.2599%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="76.0923%" y="389" width="0.0824%" height="15" fill="rgb(232,148,31)" fg:x="923" fg:w="1"/><text x="76.3423%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0923%" y="373" width="0.0824%" height="15" fill="rgb(217,149,8)" fg:x="923" fg:w="1"/><text x="76.3423%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.58%)</title><rect x="75.6801%" y="565" width="0.5771%" height="15" fill="rgb(209,183,11)" fg:x="918" fg:w="7"/><text x="75.9301%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.58%)</title><rect x="75.6801%" y="549" width="0.5771%" height="15" fill="rgb(208,55,20)" fg:x="918" fg:w="7"/><text x="75.9301%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.58%)</title><rect x="75.6801%" y="533" width="0.5771%" height="15" fill="rgb(218,39,14)" fg:x="918" fg:w="7"/><text x="75.9301%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.1748%" y="517" width="0.0824%" height="15" fill="rgb(216,169,33)" fg:x="924" fg:w="1"/><text x="76.4248%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.1748%" y="501" width="0.0824%" height="15" fill="rgb(233,80,24)" fg:x="924" fg:w="1"/><text x="76.4248%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.1748%" y="485" width="0.0824%" height="15" fill="rgb(213,179,31)" fg:x="924" fg:w="1"/><text x="76.4248%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (33 samples, 2.72%)</title><rect x="73.7016%" y="597" width="2.7205%" height="15" fill="rgb(209,19,5)" fg:x="894" fg:w="33"/><text x="73.9516%" y="607.50">en..</text></g><g><title>engine::session::internal::Entities::add_persisted (15 samples, 1.24%)</title><rect x="75.1855%" y="581" width="1.2366%" height="15" fill="rgb(219,18,35)" fg:x="912" fg:w="15"/><text x="75.4355%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="76.2572%" y="565" width="0.1649%" height="15" fill="rgb(209,169,16)" fg:x="925" fg:w="2"/><text x="76.5072%" y="575.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="76.2572%" y="549" width="0.1649%" height="15" fill="rgb(245,90,51)" fg:x="925" fg:w="2"/><text x="76.5072%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="76.2572%" y="533" width="0.1649%" height="15" fill="rgb(220,99,45)" fg:x="925" fg:w="2"/><text x="76.5072%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.2572%" y="517" width="0.1649%" height="15" fill="rgb(249,89,25)" fg:x="925" fg:w="2"/><text x="76.5072%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="76.2572%" y="501" width="0.1649%" height="15" fill="rgb(239,193,0)" fg:x="925" fg:w="2"/><text x="76.5072%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.3397%" y="485" width="0.0824%" height="15" fill="rgb(231,126,1)" fg:x="926" fg:w="1"/><text x="76.5897%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.3397%" y="469" width="0.0824%" height="15" fill="rgb(243,166,3)" fg:x="926" fg:w="1"/><text x="76.5897%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.3397%" y="453" width="0.0824%" height="15" fill="rgb(223,22,34)" fg:x="926" fg:w="1"/><text x="76.5897%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.3397%" y="437" width="0.0824%" height="15" fill="rgb(251,52,51)" fg:x="926" fg:w="1"/><text x="76.5897%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.3397%" y="421" width="0.0824%" height="15" fill="rgb(221,165,28)" fg:x="926" fg:w="1"/><text x="76.5897%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.3397%" y="405" width="0.0824%" height="15" fill="rgb(218,121,47)" fg:x="926" fg:w="1"/><text x="76.5897%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.3397%" y="389" width="0.0824%" height="15" fill="rgb(209,120,9)" fg:x="926" fg:w="1"/><text x="76.5897%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.3397%" y="373" width="0.0824%" height="15" fill="rgb(236,68,12)" fg:x="926" fg:w="1"/><text x="76.5897%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.4221%" y="581" width="0.0824%" height="15" fill="rgb(225,194,26)" fg:x="927" fg:w="1"/><text x="76.6721%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.5045%" y="485" width="0.0824%" height="15" fill="rgb(231,84,39)" fg:x="928" fg:w="1"/><text x="76.7545%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.5045%" y="469" width="0.0824%" height="15" fill="rgb(210,11,45)" fg:x="928" fg:w="1"/><text x="76.7545%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.5045%" y="501" width="0.1649%" height="15" fill="rgb(224,54,52)" fg:x="928" fg:w="2"/><text x="76.7545%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.5870%" y="485" width="0.0824%" height="15" fill="rgb(238,102,14)" fg:x="929" fg:w="1"/><text x="76.8370%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.5870%" y="469" width="0.0824%" height="15" fill="rgb(243,160,52)" fg:x="929" fg:w="1"/><text x="76.8370%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.5870%" y="453" width="0.0824%" height="15" fill="rgb(216,114,19)" fg:x="929" fg:w="1"/><text x="76.8370%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.5870%" y="437" width="0.0824%" height="15" fill="rgb(244,166,37)" fg:x="929" fg:w="1"/><text x="76.8370%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.5870%" y="421" width="0.0824%" height="15" fill="rgb(246,29,44)" fg:x="929" fg:w="1"/><text x="76.8370%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.5870%" y="405" width="0.0824%" height="15" fill="rgb(215,56,53)" fg:x="929" fg:w="1"/><text x="76.8370%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.5870%" y="389" width="0.0824%" height="15" fill="rgb(217,60,2)" fg:x="929" fg:w="1"/><text x="76.8370%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.5870%" y="373" width="0.0824%" height="15" fill="rgb(207,26,24)" fg:x="929" fg:w="1"/><text x="76.8370%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.5870%" y="357" width="0.0824%" height="15" fill="rgb(252,210,15)" fg:x="929" fg:w="1"/><text x="76.8370%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.5870%" y="341" width="0.0824%" height="15" fill="rgb(253,209,26)" fg:x="929" fg:w="1"/><text x="76.8370%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.5870%" y="325" width="0.0824%" height="15" fill="rgb(238,170,14)" fg:x="929" fg:w="1"/><text x="76.8370%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.5870%" y="309" width="0.0824%" height="15" fill="rgb(216,178,15)" fg:x="929" fg:w="1"/><text x="76.8370%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="76.5045%" y="517" width="0.2473%" height="15" fill="rgb(250,197,2)" fg:x="928" fg:w="3"/><text x="76.7545%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.6694%" y="501" width="0.0824%" height="15" fill="rgb(212,70,42)" fg:x="930" fg:w="1"/><text x="76.9194%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.6694%" y="485" width="0.0824%" height="15" fill="rgb(227,213,9)" fg:x="930" fg:w="1"/><text x="76.9194%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.6694%" y="469" width="0.0824%" height="15" fill="rgb(245,99,25)" fg:x="930" fg:w="1"/><text x="76.9194%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.6694%" y="453" width="0.0824%" height="15" fill="rgb(250,82,29)" fg:x="930" fg:w="1"/><text x="76.9194%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.6694%" y="437" width="0.0824%" height="15" fill="rgb(241,226,54)" fg:x="930" fg:w="1"/><text x="76.9194%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.6694%" y="421" width="0.0824%" height="15" fill="rgb(221,99,41)" fg:x="930" fg:w="1"/><text x="76.9194%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.6694%" y="405" width="0.0824%" height="15" fill="rgb(213,90,21)" fg:x="930" fg:w="1"/><text x="76.9194%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.6694%" y="389" width="0.0824%" height="15" fill="rgb(205,208,24)" fg:x="930" fg:w="1"/><text x="76.9194%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.6694%" y="373" width="0.0824%" height="15" fill="rgb(246,31,12)" fg:x="930" fg:w="1"/><text x="76.9194%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.6694%" y="357" width="0.0824%" height="15" fill="rgb(213,154,6)" fg:x="930" fg:w="1"/><text x="76.9194%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.6694%" y="341" width="0.0824%" height="15" fill="rgb(222,163,29)" fg:x="930" fg:w="1"/><text x="76.9194%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.6694%" y="325" width="0.0824%" height="15" fill="rgb(227,201,8)" fg:x="930" fg:w="1"/><text x="76.9194%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7519%" y="517" width="0.0824%" height="15" fill="rgb(233,9,32)" fg:x="931" fg:w="1"/><text x="77.0019%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7519%" y="501" width="0.0824%" height="15" fill="rgb(217,54,24)" fg:x="931" fg:w="1"/><text x="77.0019%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.7519%" y="485" width="0.0824%" height="15" fill="rgb(235,192,0)" fg:x="931" fg:w="1"/><text x="77.0019%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.7519%" y="469" width="0.0824%" height="15" fill="rgb(235,45,9)" fg:x="931" fg:w="1"/><text x="77.0019%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.7519%" y="453" width="0.0824%" height="15" fill="rgb(246,42,40)" fg:x="931" fg:w="1"/><text x="77.0019%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.7519%" y="437" width="0.0824%" height="15" fill="rgb(248,111,24)" fg:x="931" fg:w="1"/><text x="77.0019%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.7519%" y="421" width="0.0824%" height="15" fill="rgb(249,65,22)" fg:x="931" fg:w="1"/><text x="77.0019%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.7519%" y="405" width="0.0824%" height="15" fill="rgb(238,111,51)" fg:x="931" fg:w="1"/><text x="77.0019%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.7519%" y="389" width="0.0824%" height="15" fill="rgb(250,118,22)" fg:x="931" fg:w="1"/><text x="77.0019%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.7519%" y="373" width="0.0824%" height="15" fill="rgb(234,84,26)" fg:x="931" fg:w="1"/><text x="77.0019%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.7519%" y="357" width="0.0824%" height="15" fill="rgb(243,172,12)" fg:x="931" fg:w="1"/><text x="77.0019%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.7519%" y="341" width="0.0824%" height="15" fill="rgb(236,150,49)" fg:x="931" fg:w="1"/><text x="77.0019%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.41%)</title><rect x="76.5045%" y="533" width="0.4122%" height="15" fill="rgb(225,197,26)" fg:x="928" fg:w="5"/><text x="76.7545%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.8343%" y="517" width="0.0824%" height="15" fill="rgb(214,17,42)" fg:x="932" fg:w="1"/><text x="77.0843%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.49%)</title><rect x="76.5045%" y="549" width="0.4946%" height="15" fill="rgb(224,165,40)" fg:x="928" fg:w="6"/><text x="76.7545%" y="559.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="76.9167%" y="533" width="0.0824%" height="15" fill="rgb(246,100,4)" fg:x="933" fg:w="1"/><text x="77.1667%" y="543.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="76.9167%" y="517" width="0.0824%" height="15" fill="rgb(222,103,0)" fg:x="933" fg:w="1"/><text x="77.1667%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.9992%" y="437" width="0.0824%" height="15" fill="rgb(227,189,26)" fg:x="934" fg:w="1"/><text x="77.2492%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.9992%" y="421" width="0.0824%" height="15" fill="rgb(214,202,17)" fg:x="934" fg:w="1"/><text x="77.2492%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="76.9992%" y="549" width="0.1649%" height="15" fill="rgb(229,111,3)" fg:x="934" fg:w="2"/><text x="77.2492%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="76.9992%" y="533" width="0.1649%" height="15" fill="rgb(229,172,15)" fg:x="934" fg:w="2"/><text x="77.2492%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="76.9992%" y="517" width="0.1649%" height="15" fill="rgb(230,224,35)" fg:x="934" fg:w="2"/><text x="77.2492%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="76.9992%" y="501" width="0.1649%" height="15" fill="rgb(251,141,6)" fg:x="934" fg:w="2"/><text x="77.2492%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.9992%" y="485" width="0.1649%" height="15" fill="rgb(225,208,6)" fg:x="934" fg:w="2"/><text x="77.2492%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="76.9992%" y="469" width="0.1649%" height="15" fill="rgb(246,181,16)" fg:x="934" fg:w="2"/><text x="77.2492%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.9992%" y="453" width="0.1649%" height="15" fill="rgb(227,129,36)" fg:x="934" fg:w="2"/><text x="77.2492%" y="463.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="77.0816%" y="437" width="0.0824%" height="15" fill="rgb(248,117,24)" fg:x="935" fg:w="1"/><text x="77.3316%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="77.2465%" y="501" width="0.0824%" height="15" fill="rgb(214,185,35)" fg:x="937" fg:w="1"/><text x="77.4965%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.4114%" y="405" width="0.0824%" height="15" fill="rgb(236,150,34)" fg:x="939" fg:w="1"/><text x="77.6614%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.25%)</title><rect x="77.3289%" y="453" width="0.2473%" height="15" fill="rgb(243,228,27)" fg:x="938" fg:w="3"/><text x="77.5789%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="77.3289%" y="437" width="0.2473%" height="15" fill="rgb(245,77,44)" fg:x="938" fg:w="3"/><text x="77.5789%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.25%)</title><rect x="77.3289%" y="421" width="0.2473%" height="15" fill="rgb(235,214,42)" fg:x="938" fg:w="3"/><text x="77.5789%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="77.4938%" y="405" width="0.0824%" height="15" fill="rgb(221,74,3)" fg:x="940" fg:w="1"/><text x="77.7438%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.4938%" y="389" width="0.0824%" height="15" fill="rgb(206,121,29)" fg:x="940" fg:w="1"/><text x="77.7438%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.33%)</title><rect x="77.3289%" y="501" width="0.3298%" height="15" fill="rgb(249,131,53)" fg:x="938" fg:w="4"/><text x="77.5789%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="77.3289%" y="485" width="0.3298%" height="15" fill="rgb(236,170,29)" fg:x="938" fg:w="4"/><text x="77.5789%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.33%)</title><rect x="77.3289%" y="469" width="0.3298%" height="15" fill="rgb(247,96,15)" fg:x="938" fg:w="4"/><text x="77.5789%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.5763%" y="453" width="0.0824%" height="15" fill="rgb(211,210,7)" fg:x="941" fg:w="1"/><text x="77.8263%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.5763%" y="437" width="0.0824%" height="15" fill="rgb(240,88,50)" fg:x="941" fg:w="1"/><text x="77.8263%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="77.5763%" y="421" width="0.0824%" height="15" fill="rgb(209,229,26)" fg:x="941" fg:w="1"/><text x="77.8263%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.5763%" y="405" width="0.0824%" height="15" fill="rgb(210,68,23)" fg:x="941" fg:w="1"/><text x="77.8263%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.5763%" y="389" width="0.0824%" height="15" fill="rgb(229,180,13)" fg:x="941" fg:w="1"/><text x="77.8263%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="77.5763%" y="373" width="0.0824%" height="15" fill="rgb(236,53,44)" fg:x="941" fg:w="1"/><text x="77.8263%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.5763%" y="357" width="0.0824%" height="15" fill="rgb(244,214,29)" fg:x="941" fg:w="1"/><text x="77.8263%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.5763%" y="341" width="0.0824%" height="15" fill="rgb(220,75,29)" fg:x="941" fg:w="1"/><text x="77.8263%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.5763%" y="325" width="0.0824%" height="15" fill="rgb(214,183,37)" fg:x="941" fg:w="1"/><text x="77.8263%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.5763%" y="309" width="0.0824%" height="15" fill="rgb(239,117,29)" fg:x="941" fg:w="1"/><text x="77.8263%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.6587%" y="469" width="0.0824%" height="15" fill="rgb(237,171,35)" fg:x="942" fg:w="1"/><text x="77.9087%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.6587%" y="453" width="0.0824%" height="15" fill="rgb(229,178,53)" fg:x="942" fg:w="1"/><text x="77.9087%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.66%)</title><rect x="77.1641%" y="549" width="0.6595%" height="15" fill="rgb(210,102,19)" fg:x="936" fg:w="8"/><text x="77.4141%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.66%)</title><rect x="77.1641%" y="533" width="0.6595%" height="15" fill="rgb(235,127,22)" fg:x="936" fg:w="8"/><text x="77.4141%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.66%)</title><rect x="77.1641%" y="517" width="0.6595%" height="15" fill="rgb(244,31,31)" fg:x="936" fg:w="8"/><text x="77.4141%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="77.6587%" y="501" width="0.1649%" height="15" fill="rgb(231,43,21)" fg:x="942" fg:w="2"/><text x="77.9087%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="77.6587%" y="485" width="0.1649%" height="15" fill="rgb(217,131,35)" fg:x="942" fg:w="2"/><text x="77.9087%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="77.7411%" y="469" width="0.0824%" height="15" fill="rgb(221,149,4)" fg:x="943" fg:w="1"/><text x="77.9911%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="77.7411%" y="453" width="0.0824%" height="15" fill="rgb(232,170,28)" fg:x="943" fg:w="1"/><text x="77.9911%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.9885%" y="453" width="0.0824%" height="15" fill="rgb(238,56,10)" fg:x="946" fg:w="1"/><text x="78.2385%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.9885%" y="437" width="0.0824%" height="15" fill="rgb(235,196,14)" fg:x="946" fg:w="1"/><text x="78.2385%" y="447.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (542 samples, 44.68%)</title><rect x="33.4707%" y="629" width="44.6826%" height="15" fill="rgb(216,45,48)" fg:x="406" fg:w="542"/><text x="33.7207%" y="639.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (542 samples, 44.68%)</title><rect x="33.4707%" y="613" width="44.6826%" height="15" fill="rgb(238,213,17)" fg:x="406" fg:w="542"/><text x="33.7207%" y="623.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (21 samples, 1.73%)</title><rect x="76.4221%" y="597" width="1.7312%" height="15" fill="rgb(212,13,2)" fg:x="927" fg:w="21"/><text x="76.6721%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (20 samples, 1.65%)</title><rect x="76.5045%" y="581" width="1.6488%" height="15" fill="rgb(240,114,20)" fg:x="928" fg:w="20"/><text x="76.7545%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (20 samples, 1.65%)</title><rect x="76.5045%" y="565" width="1.6488%" height="15" fill="rgb(228,41,40)" fg:x="928" fg:w="20"/><text x="76.7545%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.33%)</title><rect x="77.8236%" y="549" width="0.3298%" height="15" fill="rgb(244,132,35)" fg:x="944" fg:w="4"/><text x="78.0736%" y="559.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.33%)</title><rect x="77.8236%" y="533" width="0.3298%" height="15" fill="rgb(253,189,4)" fg:x="944" fg:w="4"/><text x="78.0736%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="77.9060%" y="517" width="0.2473%" height="15" fill="rgb(224,37,19)" fg:x="945" fg:w="3"/><text x="78.1560%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="77.9060%" y="501" width="0.2473%" height="15" fill="rgb(235,223,18)" fg:x="945" fg:w="3"/><text x="78.1560%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="77.9060%" y="485" width="0.2473%" height="15" fill="rgb(235,163,25)" fg:x="945" fg:w="3"/><text x="78.1560%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.9885%" y="469" width="0.1649%" height="15" fill="rgb(217,145,28)" fg:x="946" fg:w="2"/><text x="78.2385%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.0709%" y="453" width="0.0824%" height="15" fill="rgb(223,223,32)" fg:x="947" fg:w="1"/><text x="78.3209%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.0709%" y="437" width="0.0824%" height="15" fill="rgb(227,189,39)" fg:x="947" fg:w="1"/><text x="78.3209%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.0709%" y="421" width="0.0824%" height="15" fill="rgb(248,10,22)" fg:x="947" fg:w="1"/><text x="78.3209%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (950 samples, 78.32%)</title><rect x="0.0000%" y="677" width="78.3182%" height="15" fill="rgb(248,46,39)" fg:x="0" fg:w="950"/><text x="0.2500%" y="687.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (950 samples, 78.32%)</title><rect x="0.0000%" y="661" width="78.3182%" height="15" fill="rgb(248,113,48)" fg:x="0" fg:w="950"/><text x="0.2500%" y="671.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (950 samples, 78.32%)</title><rect x="0.0000%" y="645" width="78.3182%" height="15" fill="rgb(245,16,25)" fg:x="0" fg:w="950"/><text x="0.2500%" y="655.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (2 samples, 0.16%)</title><rect x="78.1533%" y="629" width="0.1649%" height="15" fill="rgb(249,152,16)" fg:x="948" fg:w="2"/><text x="78.4033%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="78.2358%" y="613" width="0.0824%" height="15" fill="rgb(250,16,1)" fg:x="949" fg:w="1"/><text x="78.4858%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.3182%" y="613" width="0.0824%" height="15" fill="rgb(249,138,3)" fg:x="950" fg:w="1"/><text x="78.5682%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="78.4007%" y="613" width="0.0824%" height="15" fill="rgb(227,71,41)" fg:x="951" fg:w="1"/><text x="78.6507%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.4831%" y="517" width="0.0824%" height="15" fill="rgb(209,184,23)" fg:x="952" fg:w="1"/><text x="78.7331%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.5655%" y="501" width="0.0824%" height="15" fill="rgb(223,215,31)" fg:x="953" fg:w="1"/><text x="78.8155%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.6480%" y="485" width="0.0824%" height="15" fill="rgb(210,146,28)" fg:x="954" fg:w="1"/><text x="78.8980%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.6480%" y="469" width="0.0824%" height="15" fill="rgb(209,183,41)" fg:x="954" fg:w="1"/><text x="78.8980%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="78.4831%" y="549" width="0.3298%" height="15" fill="rgb(209,224,45)" fg:x="952" fg:w="4"/><text x="78.7331%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="78.4831%" y="533" width="0.3298%" height="15" fill="rgb(224,209,51)" fg:x="952" fg:w="4"/><text x="78.7331%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="78.5655%" y="517" width="0.2473%" height="15" fill="rgb(223,17,39)" fg:x="953" fg:w="3"/><text x="78.8155%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="78.6480%" y="501" width="0.1649%" height="15" fill="rgb(234,204,37)" fg:x="954" fg:w="2"/><text x="78.8980%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.7304%" y="485" width="0.0824%" height="15" fill="rgb(236,120,5)" fg:x="955" fg:w="1"/><text x="78.9804%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.7304%" y="469" width="0.0824%" height="15" fill="rgb(248,97,27)" fg:x="955" fg:w="1"/><text x="78.9804%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="78.4831%" y="597" width="0.4946%" height="15" fill="rgb(240,66,17)" fg:x="952" fg:w="6"/><text x="78.7331%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (6 samples, 0.49%)</title><rect x="78.4831%" y="581" width="0.4946%" height="15" fill="rgb(210,79,3)" fg:x="952" fg:w="6"/><text x="78.7331%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="78.4831%" y="565" width="0.4946%" height="15" fill="rgb(214,176,27)" fg:x="952" fg:w="6"/><text x="78.7331%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="78.8129%" y="549" width="0.1649%" height="15" fill="rgb(235,185,3)" fg:x="956" fg:w="2"/><text x="79.0629%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="78.8129%" y="533" width="0.1649%" height="15" fill="rgb(227,24,12)" fg:x="956" fg:w="2"/><text x="79.0629%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="78.8129%" y="517" width="0.1649%" height="15" fill="rgb(252,169,48)" fg:x="956" fg:w="2"/><text x="79.0629%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="78.8129%" y="501" width="0.1649%" height="15" fill="rgb(212,65,1)" fg:x="956" fg:w="2"/><text x="79.0629%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.74%)</title><rect x="78.3182%" y="629" width="0.7420%" height="15" fill="rgb(242,39,24)" fg:x="950" fg:w="9"/><text x="78.5682%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (7 samples, 0.58%)</title><rect x="78.4831%" y="613" width="0.5771%" height="15" fill="rgb(249,32,23)" fg:x="952" fg:w="7"/><text x="78.7331%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.9777%" y="597" width="0.0824%" height="15" fill="rgb(251,195,23)" fg:x="958" fg:w="1"/><text x="79.2277%" y="607.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="79.3075%" y="517" width="0.0824%" height="15" fill="rgb(236,174,8)" fg:x="962" fg:w="1"/><text x="79.5575%" y="527.50"></text></g><g><title>__pthread_mutex_unlock (1 samples, 0.08%)</title><rect x="79.3899%" y="453" width="0.0824%" height="15" fill="rgb(220,197,8)" fg:x="963" fg:w="1"/><text x="79.6399%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.6373%" y="437" width="0.0824%" height="15" fill="rgb(240,108,37)" fg:x="966" fg:w="1"/><text x="79.8873%" y="447.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (9 samples, 0.74%)</title><rect x="79.0602%" y="565" width="0.7420%" height="15" fill="rgb(232,176,24)" fg:x="959" fg:w="9"/><text x="79.3102%" y="575.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (8 samples, 0.66%)</title><rect x="79.1426%" y="549" width="0.6595%" height="15" fill="rgb(243,35,29)" fg:x="960" fg:w="8"/><text x="79.3926%" y="559.50"></text></g><g><title>libloading::safe::Library::new (7 samples, 0.58%)</title><rect x="79.2251%" y="533" width="0.5771%" height="15" fill="rgb(210,37,18)" fg:x="961" fg:w="7"/><text x="79.4751%" y="543.50"></text></g><g><title>dlopen (5 samples, 0.41%)</title><rect x="79.3899%" y="517" width="0.4122%" height="15" fill="rgb(224,184,40)" fg:x="963" fg:w="5"/><text x="79.6399%" y="527.50"></text></g><g><title>_dl_catch_error (5 samples, 0.41%)</title><rect x="79.3899%" y="501" width="0.4122%" height="15" fill="rgb(236,39,29)" fg:x="963" fg:w="5"/><text x="79.6399%" y="511.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.41%)</title><rect x="79.3899%" y="485" width="0.4122%" height="15" fill="rgb(232,48,39)" fg:x="963" fg:w="5"/><text x="79.6399%" y="495.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.41%)</title><rect x="79.3899%" y="469" width="0.4122%" height="15" fill="rgb(236,34,42)" fg:x="963" fg:w="5"/><text x="79.6399%" y="479.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.33%)</title><rect x="79.4724%" y="453" width="0.3298%" height="15" fill="rgb(243,106,37)" fg:x="964" fg:w="4"/><text x="79.7224%" y="463.50"></text></g><g><title>_dl_find_dso_for_object (1 samples, 0.08%)</title><rect x="79.7197%" y="437" width="0.0824%" height="15" fill="rgb(218,96,6)" fg:x="967" fg:w="1"/><text x="79.9697%" y="447.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (11 samples, 0.91%)</title><rect x="79.0602%" y="629" width="0.9068%" height="15" fill="rgb(235,130,12)" fg:x="959" fg:w="11"/><text x="79.3102%" y="639.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (11 samples, 0.91%)</title><rect x="79.0602%" y="613" width="0.9068%" height="15" fill="rgb(231,95,0)" fg:x="959" fg:w="11"/><text x="79.3102%" y="623.50"></text></g><g><title>engine::session::Session::new (11 samples, 0.91%)</title><rect x="79.0602%" y="597" width="0.9068%" height="15" fill="rgb(228,12,23)" fg:x="959" fg:w="11"/><text x="79.3102%" y="607.50"></text></g><g><title>engine::session::Session::initialize (11 samples, 0.91%)</title><rect x="79.0602%" y="581" width="0.9068%" height="15" fill="rgb(216,12,1)" fg:x="959" fg:w="11"/><text x="79.3102%" y="591.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="79.8021%" y="565" width="0.1649%" height="15" fill="rgb(219,59,3)" fg:x="968" fg:w="2"/><text x="80.0521%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="79.8021%" y="549" width="0.1649%" height="15" fill="rgb(215,208,46)" fg:x="968" fg:w="2"/><text x="80.0521%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.8846%" y="533" width="0.0824%" height="15" fill="rgb(254,224,29)" fg:x="969" fg:w="1"/><text x="80.1346%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.8846%" y="517" width="0.0824%" height="15" fill="rgb(232,14,29)" fg:x="969" fg:w="1"/><text x="80.1346%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.8846%" y="501" width="0.0824%" height="15" fill="rgb(208,45,52)" fg:x="969" fg:w="1"/><text x="80.1346%" y="511.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="79.9670%" y="597" width="0.0824%" height="15" fill="rgb(234,191,28)" fg:x="970" fg:w="1"/><text x="80.2170%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.9670%" y="581" width="0.0824%" height="15" fill="rgb(244,67,43)" fg:x="970" fg:w="1"/><text x="80.2170%" y="591.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="80.0495%" y="565" width="0.0824%" height="15" fill="rgb(236,189,24)" fg:x="971" fg:w="1"/><text x="80.2995%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="80.0495%" y="549" width="0.0824%" height="15" fill="rgb(239,214,33)" fg:x="971" fg:w="1"/><text x="80.2995%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.0495%" y="533" width="0.0824%" height="15" fill="rgb(226,176,41)" fg:x="971" fg:w="1"/><text x="80.2995%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="80.1319%" y="517" width="0.0824%" height="15" fill="rgb(248,47,8)" fg:x="972" fg:w="1"/><text x="80.3819%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="80.1319%" y="501" width="0.0824%" height="15" fill="rgb(218,81,44)" fg:x="972" fg:w="1"/><text x="80.3819%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="80.1319%" y="485" width="0.0824%" height="15" fill="rgb(213,98,6)" fg:x="972" fg:w="1"/><text x="80.3819%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="80.1319%" y="469" width="0.0824%" height="15" fill="rgb(222,85,22)" fg:x="972" fg:w="1"/><text x="80.3819%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.1319%" y="453" width="0.0824%" height="15" fill="rgb(239,46,39)" fg:x="972" fg:w="1"/><text x="80.3819%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="80.2143%" y="501" width="0.0824%" height="15" fill="rgb(237,12,29)" fg:x="973" fg:w="1"/><text x="80.4643%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.2143%" y="485" width="0.0824%" height="15" fill="rgb(214,77,8)" fg:x="973" fg:w="1"/><text x="80.4643%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.2143%" y="469" width="0.0824%" height="15" fill="rgb(217,168,37)" fg:x="973" fg:w="1"/><text x="80.4643%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="80.3792%" y="469" width="0.0824%" height="15" fill="rgb(221,217,23)" fg:x="975" fg:w="1"/><text x="80.6292%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.3792%" y="453" width="0.0824%" height="15" fill="rgb(243,229,36)" fg:x="975" fg:w="1"/><text x="80.6292%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.3792%" y="437" width="0.0824%" height="15" fill="rgb(251,163,40)" fg:x="975" fg:w="1"/><text x="80.6292%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.3792%" y="421" width="0.0824%" height="15" fill="rgb(237,222,12)" fg:x="975" fg:w="1"/><text x="80.6292%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.3792%" y="405" width="0.0824%" height="15" fill="rgb(248,132,6)" fg:x="975" fg:w="1"/><text x="80.6292%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.3792%" y="389" width="0.0824%" height="15" fill="rgb(227,167,50)" fg:x="975" fg:w="1"/><text x="80.6292%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.3792%" y="373" width="0.0824%" height="15" fill="rgb(242,84,37)" fg:x="975" fg:w="1"/><text x="80.6292%" y="383.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="80.4617%" y="469" width="0.1649%" height="15" fill="rgb(212,4,50)" fg:x="976" fg:w="2"/><text x="80.7117%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="80.4617%" y="453" width="0.1649%" height="15" fill="rgb(230,228,32)" fg:x="976" fg:w="2"/><text x="80.7117%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="80.2968%" y="485" width="0.4122%" height="15" fill="rgb(248,217,23)" fg:x="974" fg:w="5"/><text x="80.5468%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.6265%" y="469" width="0.0824%" height="15" fill="rgb(238,197,32)" fg:x="978" fg:w="1"/><text x="80.8765%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.6265%" y="453" width="0.0824%" height="15" fill="rgb(236,106,1)" fg:x="978" fg:w="1"/><text x="80.8765%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.6265%" y="437" width="0.0824%" height="15" fill="rgb(219,228,13)" fg:x="978" fg:w="1"/><text x="80.8765%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.6265%" y="421" width="0.0824%" height="15" fill="rgb(238,30,35)" fg:x="978" fg:w="1"/><text x="80.8765%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.6265%" y="405" width="0.0824%" height="15" fill="rgb(236,70,23)" fg:x="978" fg:w="1"/><text x="80.8765%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="80.6265%" y="389" width="0.0824%" height="15" fill="rgb(249,104,48)" fg:x="978" fg:w="1"/><text x="80.8765%" y="399.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.58%)</title><rect x="80.2143%" y="517" width="0.5771%" height="15" fill="rgb(254,117,50)" fg:x="973" fg:w="7"/><text x="80.4643%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="80.2968%" y="501" width="0.4946%" height="15" fill="rgb(223,152,4)" fg:x="974" fg:w="6"/><text x="80.5468%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.7090%" y="485" width="0.0824%" height="15" fill="rgb(245,6,2)" fg:x="979" fg:w="1"/><text x="80.9590%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.7090%" y="469" width="0.0824%" height="15" fill="rgb(249,150,24)" fg:x="979" fg:w="1"/><text x="80.9590%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.7914%" y="517" width="0.0824%" height="15" fill="rgb(228,185,42)" fg:x="980" fg:w="1"/><text x="81.0414%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="80.7914%" y="501" width="0.0824%" height="15" fill="rgb(226,39,33)" fg:x="980" fg:w="1"/><text x="81.0414%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.7914%" y="485" width="0.0824%" height="15" fill="rgb(221,166,19)" fg:x="980" fg:w="1"/><text x="81.0414%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.7914%" y="469" width="0.0824%" height="15" fill="rgb(209,109,2)" fg:x="980" fg:w="1"/><text x="81.0414%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (2 samples, 0.16%)</title><rect x="80.8739%" y="469" width="0.1649%" height="15" fill="rgb(252,216,26)" fg:x="981" fg:w="2"/><text x="81.1239%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.9563%" y="453" width="0.0824%" height="15" fill="rgb(227,173,36)" fg:x="982" fg:w="1"/><text x="81.2063%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="81.0387%" y="421" width="0.1649%" height="15" fill="rgb(209,90,7)" fg:x="983" fg:w="2"/><text x="81.2887%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="81.2036%" y="421" width="0.0824%" height="15" fill="rgb(250,194,11)" fg:x="985" fg:w="1"/><text x="81.4536%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.2036%" y="405" width="0.0824%" height="15" fill="rgb(220,72,50)" fg:x="985" fg:w="1"/><text x="81.4536%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.2036%" y="389" width="0.0824%" height="15" fill="rgb(222,106,48)" fg:x="985" fg:w="1"/><text x="81.4536%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.41%)</title><rect x="81.0387%" y="453" width="0.4122%" height="15" fill="rgb(216,220,45)" fg:x="983" fg:w="5"/><text x="81.2887%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="81.0387%" y="437" width="0.4122%" height="15" fill="rgb(234,112,18)" fg:x="983" fg:w="5"/><text x="81.2887%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="81.2861%" y="421" width="0.1649%" height="15" fill="rgb(206,179,9)" fg:x="986" fg:w="2"/><text x="81.5361%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="81.2861%" y="405" width="0.1649%" height="15" fill="rgb(215,115,40)" fg:x="986" fg:w="2"/><text x="81.5361%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="81.2861%" y="389" width="0.1649%" height="15" fill="rgb(222,69,34)" fg:x="986" fg:w="2"/><text x="81.5361%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="81.2861%" y="373" width="0.1649%" height="15" fill="rgb(209,161,10)" fg:x="986" fg:w="2"/><text x="81.5361%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.3685%" y="357" width="0.0824%" height="15" fill="rgb(217,6,38)" fg:x="987" fg:w="1"/><text x="81.6185%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.3685%" y="341" width="0.0824%" height="15" fill="rgb(229,229,48)" fg:x="987" fg:w="1"/><text x="81.6185%" y="351.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.57%)</title><rect x="79.9670%" y="613" width="1.5664%" height="15" fill="rgb(225,21,28)" fg:x="970" fg:w="19"/><text x="80.2170%" y="623.50"></text></g><g><title>engine::session::state::State::close (18 samples, 1.48%)</title><rect x="80.0495%" y="597" width="1.4839%" height="15" fill="rgb(206,33,13)" fg:x="971" fg:w="18"/><text x="80.2995%" y="607.50"></text></g><g><title>engine::session::state::State::flush_entities (18 samples, 1.48%)</title><rect x="80.0495%" y="581" width="1.4839%" height="15" fill="rgb(242,178,17)" fg:x="971" fg:w="18"/><text x="80.2995%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (17 samples, 1.40%)</title><rect x="80.1319%" y="565" width="1.4015%" height="15" fill="rgb(220,162,5)" fg:x="972" fg:w="17"/><text x="80.3819%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 1.40%)</title><rect x="80.1319%" y="549" width="1.4015%" height="15" fill="rgb(210,33,43)" fg:x="972" fg:w="17"/><text x="80.3819%" y="559.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (17 samples, 1.40%)</title><rect x="80.1319%" y="533" width="1.4015%" height="15" fill="rgb(216,116,54)" fg:x="972" fg:w="17"/><text x="80.3819%" y="543.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.66%)</title><rect x="80.8739%" y="517" width="0.6595%" height="15" fill="rgb(249,92,24)" fg:x="981" fg:w="8"/><text x="81.1239%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.66%)</title><rect x="80.8739%" y="501" width="0.6595%" height="15" fill="rgb(231,189,14)" fg:x="981" fg:w="8"/><text x="81.1239%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.66%)</title><rect x="80.8739%" y="485" width="0.6595%" height="15" fill="rgb(230,8,41)" fg:x="981" fg:w="8"/><text x="81.1239%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.49%)</title><rect x="81.0387%" y="469" width="0.4946%" height="15" fill="rgb(249,7,27)" fg:x="983" fg:w="6"/><text x="81.2887%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.4509%" y="453" width="0.0824%" height="15" fill="rgb(232,86,5)" fg:x="988" fg:w="1"/><text x="81.7009%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.4509%" y="437" width="0.0824%" height="15" fill="rgb(224,175,18)" fg:x="988" fg:w="1"/><text x="81.7009%" y="447.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="81.5334%" y="581" width="0.0824%" height="15" fill="rgb(220,129,12)" fg:x="989" fg:w="1"/><text x="81.7834%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.5334%" y="565" width="0.0824%" height="15" fill="rgb(210,19,36)" fg:x="989" fg:w="1"/><text x="81.7834%" y="575.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="81.5334%" y="613" width="0.1649%" height="15" fill="rgb(219,96,14)" fg:x="989" fg:w="2"/><text x="81.7834%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="81.5334%" y="597" width="0.1649%" height="15" fill="rgb(249,106,1)" fg:x="989" fg:w="2"/><text x="81.7834%" y="607.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="81.6158%" y="581" width="0.0824%" height="15" fill="rgb(249,155,20)" fg:x="990" fg:w="1"/><text x="81.8658%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="81.6158%" y="565" width="0.0824%" height="15" fill="rgb(244,168,9)" fg:x="990" fg:w="1"/><text x="81.8658%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.6158%" y="549" width="0.0824%" height="15" fill="rgb(216,23,50)" fg:x="990" fg:w="1"/><text x="81.8658%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="81.6158%" y="533" width="0.0824%" height="15" fill="rgb(224,219,20)" fg:x="990" fg:w="1"/><text x="81.8658%" y="543.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="81.6158%" y="517" width="0.0824%" height="15" fill="rgb(222,156,15)" fg:x="990" fg:w="1"/><text x="81.8658%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.6158%" y="501" width="0.0824%" height="15" fill="rgb(231,97,17)" fg:x="990" fg:w="1"/><text x="81.8658%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.6158%" y="485" width="0.0824%" height="15" fill="rgb(218,70,48)" fg:x="990" fg:w="1"/><text x="81.8658%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.6983%" y="533" width="0.0824%" height="15" fill="rgb(212,196,52)" fg:x="991" fg:w="1"/><text x="81.9483%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.6983%" y="517" width="0.0824%" height="15" fill="rgb(243,203,18)" fg:x="991" fg:w="1"/><text x="81.9483%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="81.6983%" y="597" width="0.1649%" height="15" fill="rgb(252,125,41)" fg:x="991" fg:w="2"/><text x="81.9483%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="81.6983%" y="581" width="0.1649%" height="15" fill="rgb(223,180,33)" fg:x="991" fg:w="2"/><text x="81.9483%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="81.6983%" y="565" width="0.1649%" height="15" fill="rgb(254,159,46)" fg:x="991" fg:w="2"/><text x="81.9483%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="81.6983%" y="549" width="0.1649%" height="15" fill="rgb(254,38,10)" fg:x="991" fg:w="2"/><text x="81.9483%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="81.7807%" y="533" width="0.0824%" height="15" fill="rgb(208,217,32)" fg:x="992" fg:w="1"/><text x="82.0307%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="81.7807%" y="517" width="0.0824%" height="15" fill="rgb(221,120,13)" fg:x="992" fg:w="1"/><text x="82.0307%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="81.7807%" y="501" width="0.0824%" height="15" fill="rgb(246,54,52)" fg:x="992" fg:w="1"/><text x="82.0307%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.7807%" y="485" width="0.0824%" height="15" fill="rgb(242,34,25)" fg:x="992" fg:w="1"/><text x="82.0307%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="81.7807%" y="469" width="0.0824%" height="15" fill="rgb(247,209,9)" fg:x="992" fg:w="1"/><text x="82.0307%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.7807%" y="453" width="0.0824%" height="15" fill="rgb(228,71,26)" fg:x="992" fg:w="1"/><text x="82.0307%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="81.7807%" y="437" width="0.0824%" height="15" fill="rgb(222,145,49)" fg:x="992" fg:w="1"/><text x="82.0307%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.7807%" y="421" width="0.0824%" height="15" fill="rgb(218,121,17)" fg:x="992" fg:w="1"/><text x="82.0307%" y="431.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.25%)</title><rect x="81.6983%" y="613" width="0.2473%" height="15" fill="rgb(244,50,7)" fg:x="991" fg:w="3"/><text x="81.9483%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.8631%" y="597" width="0.0824%" height="15" fill="rgb(246,229,37)" fg:x="993" fg:w="1"/><text x="82.1131%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.8631%" y="581" width="0.0824%" height="15" fill="rgb(225,18,5)" fg:x="993" fg:w="1"/><text x="82.1131%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.8631%" y="565" width="0.0824%" height="15" fill="rgb(213,204,8)" fg:x="993" fg:w="1"/><text x="82.1131%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.8631%" y="549" width="0.0824%" height="15" fill="rgb(238,103,6)" fg:x="993" fg:w="1"/><text x="82.1131%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="81.8631%" y="533" width="0.0824%" height="15" fill="rgb(222,25,35)" fg:x="993" fg:w="1"/><text x="82.1131%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="81.8631%" y="517" width="0.0824%" height="15" fill="rgb(213,203,35)" fg:x="993" fg:w="1"/><text x="82.1131%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="81.8631%" y="501" width="0.0824%" height="15" fill="rgb(221,79,53)" fg:x="993" fg:w="1"/><text x="82.1131%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.8631%" y="485" width="0.0824%" height="15" fill="rgb(243,200,35)" fg:x="993" fg:w="1"/><text x="82.1131%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.8631%" y="469" width="0.0824%" height="15" fill="rgb(248,60,25)" fg:x="993" fg:w="1"/><text x="82.1131%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="81.8631%" y="453" width="0.0824%" height="15" fill="rgb(227,53,46)" fg:x="993" fg:w="1"/><text x="82.1131%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="81.8631%" y="437" width="0.0824%" height="15" fill="rgb(216,120,32)" fg:x="993" fg:w="1"/><text x="82.1131%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="81.8631%" y="421" width="0.0824%" height="15" fill="rgb(220,134,1)" fg:x="993" fg:w="1"/><text x="82.1131%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="81.8631%" y="405" width="0.0824%" height="15" fill="rgb(237,168,5)" fg:x="993" fg:w="1"/><text x="82.1131%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.8631%" y="389" width="0.0824%" height="15" fill="rgb(231,100,33)" fg:x="993" fg:w="1"/><text x="82.1131%" y="399.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="81.9456%" y="581" width="0.0824%" height="15" fill="rgb(236,177,47)" fg:x="994" fg:w="1"/><text x="82.1956%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="81.9456%" y="565" width="0.0824%" height="15" fill="rgb(235,7,49)" fg:x="994" fg:w="1"/><text x="82.1956%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="81.9456%" y="549" width="0.0824%" height="15" fill="rgb(232,119,22)" fg:x="994" fg:w="1"/><text x="82.1956%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="81.9456%" y="533" width="0.0824%" height="15" fill="rgb(254,73,53)" fg:x="994" fg:w="1"/><text x="82.1956%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (3 samples, 0.25%)</title><rect x="81.9456%" y="613" width="0.2473%" height="15" fill="rgb(251,35,20)" fg:x="994" fg:w="3"/><text x="82.1956%" y="623.50"></text></g><g><title>plugins_core::tools::set_quantity (3 samples, 0.25%)</title><rect x="81.9456%" y="597" width="0.2473%" height="15" fill="rgb(241,119,20)" fg:x="994" fg:w="3"/><text x="82.1956%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="82.0280%" y="581" width="0.1649%" height="15" fill="rgb(207,102,14)" fg:x="995" fg:w="2"/><text x="82.2780%" y="591.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (2 samples, 0.16%)</title><rect x="82.0280%" y="565" width="0.1649%" height="15" fill="rgb(248,201,50)" fg:x="995" fg:w="2"/><text x="82.2780%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="82.0280%" y="549" width="0.1649%" height="15" fill="rgb(222,185,44)" fg:x="995" fg:w="2"/><text x="82.2780%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (2 samples, 0.16%)</title><rect x="82.0280%" y="533" width="0.1649%" height="15" fill="rgb(218,107,18)" fg:x="995" fg:w="2"/><text x="82.2780%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.1105%" y="517" width="0.0824%" height="15" fill="rgb(237,177,39)" fg:x="996" fg:w="1"/><text x="82.3605%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="82.1105%" y="501" width="0.0824%" height="15" fill="rgb(246,69,6)" fg:x="996" fg:w="1"/><text x="82.3605%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.1105%" y="485" width="0.0824%" height="15" fill="rgb(234,208,37)" fg:x="996" fg:w="1"/><text x="82.3605%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.1105%" y="469" width="0.0824%" height="15" fill="rgb(225,4,6)" fg:x="996" fg:w="1"/><text x="82.3605%" y="479.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="82.1929%" y="613" width="0.0824%" height="15" fill="rgb(233,45,0)" fg:x="997" fg:w="1"/><text x="82.4429%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="82.1929%" y="597" width="0.0824%" height="15" fill="rgb(226,136,5)" fg:x="997" fg:w="1"/><text x="82.4429%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="82.1929%" y="581" width="0.0824%" height="15" fill="rgb(211,91,47)" fg:x="997" fg:w="1"/><text x="82.4429%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="82.1929%" y="565" width="0.0824%" height="15" fill="rgb(242,88,51)" fg:x="997" fg:w="1"/><text x="82.4429%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="82.1929%" y="549" width="0.0824%" height="15" fill="rgb(230,91,28)" fg:x="997" fg:w="1"/><text x="82.4429%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="82.1929%" y="533" width="0.0824%" height="15" fill="rgb(254,186,29)" fg:x="997" fg:w="1"/><text x="82.4429%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="82.1929%" y="517" width="0.0824%" height="15" fill="rgb(238,6,4)" fg:x="997" fg:w="1"/><text x="82.4429%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="82.1929%" y="501" width="0.0824%" height="15" fill="rgb(221,151,16)" fg:x="997" fg:w="1"/><text x="82.4429%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="82.1929%" y="485" width="0.0824%" height="15" fill="rgb(251,143,52)" fg:x="997" fg:w="1"/><text x="82.4429%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.1929%" y="469" width="0.0824%" height="15" fill="rgb(206,90,15)" fg:x="997" fg:w="1"/><text x="82.4429%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="82.1929%" y="453" width="0.0824%" height="15" fill="rgb(218,35,8)" fg:x="997" fg:w="1"/><text x="82.4429%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.1929%" y="437" width="0.0824%" height="15" fill="rgb(239,215,6)" fg:x="997" fg:w="1"/><text x="82.4429%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="82.1929%" y="421" width="0.0824%" height="15" fill="rgb(245,116,39)" fg:x="997" fg:w="1"/><text x="82.4429%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.1929%" y="405" width="0.0824%" height="15" fill="rgb(242,65,28)" fg:x="997" fg:w="1"/><text x="82.4429%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="82.3578%" y="597" width="0.0824%" height="15" fill="rgb(252,132,53)" fg:x="999" fg:w="1"/><text x="82.6078%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.3578%" y="581" width="0.0824%" height="15" fill="rgb(224,159,50)" fg:x="999" fg:w="1"/><text x="82.6078%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.3578%" y="565" width="0.0824%" height="15" fill="rgb(224,93,4)" fg:x="999" fg:w="1"/><text x="82.6078%" y="575.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="82.4402%" y="581" width="0.0824%" height="15" fill="rgb(208,81,34)" fg:x="1000" fg:w="1"/><text x="82.6902%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.4402%" y="565" width="0.0824%" height="15" fill="rgb(233,92,54)" fg:x="1000" fg:w="1"/><text x="82.6902%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.4402%" y="549" width="0.0824%" height="15" fill="rgb(237,21,14)" fg:x="1000" fg:w="1"/><text x="82.6902%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="82.4402%" y="533" width="0.0824%" height="15" fill="rgb(249,128,51)" fg:x="1000" fg:w="1"/><text x="82.6902%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="82.5227%" y="533" width="0.1649%" height="15" fill="rgb(223,129,24)" fg:x="1001" fg:w="2"/><text x="82.7727%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="82.5227%" y="517" width="0.1649%" height="15" fill="rgb(231,168,25)" fg:x="1001" fg:w="2"/><text x="82.7727%" y="527.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (2 samples, 0.16%)</title><rect x="82.5227%" y="501" width="0.1649%" height="15" fill="rgb(224,39,20)" fg:x="1001" fg:w="2"/><text x="82.7727%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="82.7700%" y="485" width="0.0824%" height="15" fill="rgb(225,152,53)" fg:x="1004" fg:w="1"/><text x="83.0200%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="82.7700%" y="469" width="0.0824%" height="15" fill="rgb(252,17,24)" fg:x="1004" fg:w="1"/><text x="83.0200%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="82.7700%" y="453" width="0.0824%" height="15" fill="rgb(250,114,30)" fg:x="1004" fg:w="1"/><text x="83.0200%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="82.7700%" y="437" width="0.0824%" height="15" fill="rgb(229,5,4)" fg:x="1004" fg:w="1"/><text x="83.0200%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.7700%" y="421" width="0.0824%" height="15" fill="rgb(225,176,49)" fg:x="1004" fg:w="1"/><text x="83.0200%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="82.9349%" y="437" width="0.0824%" height="15" fill="rgb(224,221,49)" fg:x="1006" fg:w="1"/><text x="83.1849%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.9349%" y="421" width="0.0824%" height="15" fill="rgb(253,169,27)" fg:x="1006" fg:w="1"/><text x="83.1849%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="83.0173%" y="437" width="0.1649%" height="15" fill="rgb(211,206,16)" fg:x="1007" fg:w="2"/><text x="83.2673%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="83.0998%" y="421" width="0.0824%" height="15" fill="rgb(244,87,35)" fg:x="1008" fg:w="1"/><text x="83.3498%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="83.0998%" y="405" width="0.0824%" height="15" fill="rgb(246,28,10)" fg:x="1008" fg:w="1"/><text x="83.3498%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.0998%" y="389" width="0.0824%" height="15" fill="rgb(229,12,44)" fg:x="1008" fg:w="1"/><text x="83.3498%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="83.0998%" y="373" width="0.0824%" height="15" fill="rgb(210,145,37)" fg:x="1008" fg:w="1"/><text x="83.3498%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.0998%" y="357" width="0.0824%" height="15" fill="rgb(227,112,52)" fg:x="1008" fg:w="1"/><text x="83.3498%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.0998%" y="341" width="0.0824%" height="15" fill="rgb(238,155,34)" fg:x="1008" fg:w="1"/><text x="83.3498%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.0998%" y="325" width="0.0824%" height="15" fill="rgb(239,226,36)" fg:x="1008" fg:w="1"/><text x="83.3498%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.0998%" y="309" width="0.0824%" height="15" fill="rgb(230,16,23)" fg:x="1008" fg:w="1"/><text x="83.3498%" y="319.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="82.9349%" y="453" width="0.3298%" height="15" fill="rgb(236,171,36)" fg:x="1006" fg:w="4"/><text x="83.1849%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.1822%" y="437" width="0.0824%" height="15" fill="rgb(221,22,14)" fg:x="1009" fg:w="1"/><text x="83.4322%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.58%)</title><rect x="82.8524%" y="485" width="0.5771%" height="15" fill="rgb(242,43,11)" fg:x="1005" fg:w="7"/><text x="83.1024%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="82.9349%" y="469" width="0.4946%" height="15" fill="rgb(232,69,23)" fg:x="1006" fg:w="6"/><text x="83.1849%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="83.2646%" y="453" width="0.1649%" height="15" fill="rgb(216,180,54)" fg:x="1010" fg:w="2"/><text x="83.5146%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="83.2646%" y="437" width="0.1649%" height="15" fill="rgb(216,5,24)" fg:x="1010" fg:w="2"/><text x="83.5146%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="83.2646%" y="421" width="0.1649%" height="15" fill="rgb(225,89,9)" fg:x="1010" fg:w="2"/><text x="83.5146%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.3471%" y="405" width="0.0824%" height="15" fill="rgb(243,75,33)" fg:x="1011" fg:w="1"/><text x="83.5971%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.4295%" y="453" width="0.0824%" height="15" fill="rgb(247,141,45)" fg:x="1012" fg:w="1"/><text x="83.6795%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="83.4295%" y="485" width="0.1649%" height="15" fill="rgb(232,177,36)" fg:x="1012" fg:w="2"/><text x="83.6795%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="83.4295%" y="469" width="0.1649%" height="15" fill="rgb(219,125,36)" fg:x="1012" fg:w="2"/><text x="83.6795%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="83.5120%" y="453" width="0.0824%" height="15" fill="rgb(227,94,9)" fg:x="1013" fg:w="1"/><text x="83.7620%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="83.5120%" y="437" width="0.0824%" height="15" fill="rgb(240,34,52)" fg:x="1013" fg:w="1"/><text x="83.7620%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.5120%" y="421" width="0.0824%" height="15" fill="rgb(216,45,12)" fg:x="1013" fg:w="1"/><text x="83.7620%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.5944%" y="437" width="0.0824%" height="15" fill="rgb(246,21,19)" fg:x="1014" fg:w="1"/><text x="83.8444%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.6768%" y="309" width="0.0824%" height="15" fill="rgb(213,98,42)" fg:x="1015" fg:w="1"/><text x="83.9268%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.6768%" y="293" width="0.0824%" height="15" fill="rgb(250,136,47)" fg:x="1015" fg:w="1"/><text x="83.9268%" y="303.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="83.6768%" y="389" width="0.1649%" height="15" fill="rgb(251,124,27)" fg:x="1015" fg:w="2"/><text x="83.9268%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="83.6768%" y="373" width="0.1649%" height="15" fill="rgb(229,180,14)" fg:x="1015" fg:w="2"/><text x="83.9268%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="83.6768%" y="357" width="0.1649%" height="15" fill="rgb(245,216,25)" fg:x="1015" fg:w="2"/><text x="83.9268%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="83.6768%" y="341" width="0.1649%" height="15" fill="rgb(251,43,5)" fg:x="1015" fg:w="2"/><text x="83.9268%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="83.6768%" y="325" width="0.1649%" height="15" fill="rgb(250,128,24)" fg:x="1015" fg:w="2"/><text x="83.9268%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="83.7593%" y="309" width="0.0824%" height="15" fill="rgb(217,117,27)" fg:x="1016" fg:w="1"/><text x="84.0093%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="83.7593%" y="293" width="0.0824%" height="15" fill="rgb(245,147,4)" fg:x="1016" fg:w="1"/><text x="84.0093%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.7593%" y="277" width="0.0824%" height="15" fill="rgb(242,201,35)" fg:x="1016" fg:w="1"/><text x="84.0093%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.7593%" y="261" width="0.0824%" height="15" fill="rgb(218,181,1)" fg:x="1016" fg:w="1"/><text x="84.0093%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.8417%" y="357" width="0.0824%" height="15" fill="rgb(222,6,29)" fg:x="1017" fg:w="1"/><text x="84.0917%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.8417%" y="341" width="0.0824%" height="15" fill="rgb(208,186,3)" fg:x="1017" fg:w="1"/><text x="84.0917%" y="351.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.57%)</title><rect x="82.4402%" y="597" width="1.5664%" height="15" fill="rgb(216,36,26)" fg:x="1000" fg:w="19"/><text x="82.6902%" y="607.50"></text></g><g><title>engine::session::Session::save_changes (18 samples, 1.48%)</title><rect x="82.5227%" y="581" width="1.4839%" height="15" fill="rgb(248,201,23)" fg:x="1001" fg:w="18"/><text x="82.7727%" y="591.50"></text></g><g><title>engine::session::state::State::close (18 samples, 1.48%)</title><rect x="82.5227%" y="565" width="1.4839%" height="15" fill="rgb(251,170,31)" fg:x="1001" fg:w="18"/><text x="82.7727%" y="575.50"></text></g><g><title>engine::session::state::State::flush_entities (18 samples, 1.48%)</title><rect x="82.5227%" y="549" width="1.4839%" height="15" fill="rgb(207,110,25)" fg:x="1001" fg:w="18"/><text x="82.7727%" y="559.50"></text></g><g><title>core::iter::adapters::try_process (16 samples, 1.32%)</title><rect x="82.6876%" y="533" width="1.3190%" height="15" fill="rgb(250,54,15)" fg:x="1003" fg:w="16"/><text x="82.9376%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 1.32%)</title><rect x="82.6876%" y="517" width="1.3190%" height="15" fill="rgb(227,68,33)" fg:x="1003" fg:w="16"/><text x="82.9376%" y="527.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (15 samples, 1.24%)</title><rect x="82.7700%" y="501" width="1.2366%" height="15" fill="rgb(238,34,41)" fg:x="1004" fg:w="15"/><text x="83.0200%" y="511.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.41%)</title><rect x="83.5944%" y="485" width="0.4122%" height="15" fill="rgb(220,11,15)" fg:x="1014" fg:w="5"/><text x="83.8444%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.41%)</title><rect x="83.5944%" y="469" width="0.4122%" height="15" fill="rgb(246,111,35)" fg:x="1014" fg:w="5"/><text x="83.8444%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.41%)</title><rect x="83.5944%" y="453" width="0.4122%" height="15" fill="rgb(209,88,53)" fg:x="1014" fg:w="5"/><text x="83.8444%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.33%)</title><rect x="83.6768%" y="437" width="0.3298%" height="15" fill="rgb(231,185,47)" fg:x="1015" fg:w="4"/><text x="83.9268%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.33%)</title><rect x="83.6768%" y="421" width="0.3298%" height="15" fill="rgb(233,154,1)" fg:x="1015" fg:w="4"/><text x="83.9268%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="83.6768%" y="405" width="0.3298%" height="15" fill="rgb(225,15,46)" fg:x="1015" fg:w="4"/><text x="83.9268%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="83.8417%" y="389" width="0.1649%" height="15" fill="rgb(211,135,41)" fg:x="1017" fg:w="2"/><text x="84.0917%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="83.8417%" y="373" width="0.1649%" height="15" fill="rgb(208,54,0)" fg:x="1017" fg:w="2"/><text x="84.0917%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="83.9242%" y="357" width="0.0824%" height="15" fill="rgb(244,136,14)" fg:x="1018" fg:w="1"/><text x="84.1742%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="83.9242%" y="341" width="0.0824%" height="15" fill="rgb(241,56,14)" fg:x="1018" fg:w="1"/><text x="84.1742%" y="351.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="84.0066%" y="597" width="0.0824%" height="15" fill="rgb(205,80,24)" fg:x="1019" fg:w="1"/><text x="84.2566%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="84.0066%" y="581" width="0.0824%" height="15" fill="rgb(220,57,4)" fg:x="1019" fg:w="1"/><text x="84.2566%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="84.0066%" y="565" width="0.0824%" height="15" fill="rgb(226,193,50)" fg:x="1019" fg:w="1"/><text x="84.2566%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="84.0066%" y="549" width="0.0824%" height="15" fill="rgb(231,168,22)" fg:x="1019" fg:w="1"/><text x="84.2566%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.0066%" y="533" width="0.0824%" height="15" fill="rgb(254,215,14)" fg:x="1019" fg:w="1"/><text x="84.2566%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="84.0890%" y="565" width="0.0824%" height="15" fill="rgb(211,115,16)" fg:x="1020" fg:w="1"/><text x="84.3390%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="84.0890%" y="549" width="0.0824%" height="15" fill="rgb(236,210,16)" fg:x="1020" fg:w="1"/><text x="84.3390%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="84.0890%" y="533" width="0.0824%" height="15" fill="rgb(221,94,12)" fg:x="1020" fg:w="1"/><text x="84.3390%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="84.0890%" y="517" width="0.0824%" height="15" fill="rgb(235,218,49)" fg:x="1020" fg:w="1"/><text x="84.3390%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.0890%" y="501" width="0.0824%" height="15" fill="rgb(217,114,14)" fg:x="1020" fg:w="1"/><text x="84.3390%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="84.1715%" y="549" width="0.0824%" height="15" fill="rgb(216,145,22)" fg:x="1021" fg:w="1"/><text x="84.4215%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="84.1715%" y="533" width="0.0824%" height="15" fill="rgb(217,112,39)" fg:x="1021" fg:w="1"/><text x="84.4215%" y="543.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="84.1715%" y="517" width="0.0824%" height="15" fill="rgb(225,85,32)" fg:x="1021" fg:w="1"/><text x="84.4215%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.25%)</title><rect x="84.0890%" y="581" width="0.2473%" height="15" fill="rgb(245,209,47)" fg:x="1020" fg:w="3"/><text x="84.3390%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="84.1715%" y="565" width="0.1649%" height="15" fill="rgb(218,220,15)" fg:x="1021" fg:w="2"/><text x="84.4215%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="84.2539%" y="549" width="0.0824%" height="15" fill="rgb(222,202,31)" fg:x="1022" fg:w="1"/><text x="84.5039%" y="559.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.33%)</title><rect x="84.0890%" y="597" width="0.3298%" height="15" fill="rgb(243,203,4)" fg:x="1020" fg:w="4"/><text x="84.3390%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="84.3364%" y="581" width="0.0824%" height="15" fill="rgb(237,92,17)" fg:x="1023" fg:w="1"/><text x="84.5864%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="84.3364%" y="565" width="0.0824%" height="15" fill="rgb(231,119,7)" fg:x="1023" fg:w="1"/><text x="84.5864%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="84.3364%" y="549" width="0.0824%" height="15" fill="rgb(237,82,41)" fg:x="1023" fg:w="1"/><text x="84.5864%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.3364%" y="533" width="0.0824%" height="15" fill="rgb(226,81,48)" fg:x="1023" fg:w="1"/><text x="84.5864%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.3364%" y="517" width="0.0824%" height="15" fill="rgb(234,70,51)" fg:x="1023" fg:w="1"/><text x="84.5864%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="84.4188%" y="597" width="0.0824%" height="15" fill="rgb(251,86,4)" fg:x="1024" fg:w="1"/><text x="84.6688%" y="607.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="84.4188%" y="581" width="0.0824%" height="15" fill="rgb(244,144,28)" fg:x="1024" fg:w="1"/><text x="84.6688%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="84.4188%" y="565" width="0.0824%" height="15" fill="rgb(232,161,39)" fg:x="1024" fg:w="1"/><text x="84.6688%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="84.4188%" y="549" width="0.0824%" height="15" fill="rgb(247,34,51)" fg:x="1024" fg:w="1"/><text x="84.6688%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="84.5012%" y="533" width="0.0824%" height="15" fill="rgb(225,132,2)" fg:x="1025" fg:w="1"/><text x="84.7512%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="84.5012%" y="517" width="0.0824%" height="15" fill="rgb(209,159,44)" fg:x="1025" fg:w="1"/><text x="84.7512%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="84.5012%" y="501" width="0.0824%" height="15" fill="rgb(251,214,1)" fg:x="1025" fg:w="1"/><text x="84.7512%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.5012%" y="485" width="0.0824%" height="15" fill="rgb(247,84,47)" fg:x="1025" fg:w="1"/><text x="84.7512%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.5012%" y="469" width="0.0824%" height="15" fill="rgb(240,111,43)" fg:x="1025" fg:w="1"/><text x="84.7512%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.5012%" y="453" width="0.0824%" height="15" fill="rgb(215,214,35)" fg:x="1025" fg:w="1"/><text x="84.7512%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.5012%" y="437" width="0.0824%" height="15" fill="rgb(248,207,23)" fg:x="1025" fg:w="1"/><text x="84.7512%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.5012%" y="421" width="0.0824%" height="15" fill="rgb(214,186,4)" fg:x="1025" fg:w="1"/><text x="84.7512%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="84.5012%" y="405" width="0.0824%" height="15" fill="rgb(220,133,22)" fg:x="1025" fg:w="1"/><text x="84.7512%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="84.5012%" y="389" width="0.0824%" height="15" fill="rgb(239,134,19)" fg:x="1025" fg:w="1"/><text x="84.7512%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="84.5012%" y="373" width="0.0824%" height="15" fill="rgb(250,140,9)" fg:x="1025" fg:w="1"/><text x="84.7512%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.5012%" y="357" width="0.0824%" height="15" fill="rgb(225,59,14)" fg:x="1025" fg:w="1"/><text x="84.7512%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.5012%" y="341" width="0.0824%" height="15" fill="rgb(214,152,51)" fg:x="1025" fg:w="1"/><text x="84.7512%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="84.5012%" y="325" width="0.0824%" height="15" fill="rgb(251,227,43)" fg:x="1025" fg:w="1"/><text x="84.7512%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="84.5012%" y="309" width="0.0824%" height="15" fill="rgb(241,96,17)" fg:x="1025" fg:w="1"/><text x="84.7512%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="84.5012%" y="293" width="0.0824%" height="15" fill="rgb(234,198,43)" fg:x="1025" fg:w="1"/><text x="84.7512%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="84.5012%" y="277" width="0.0824%" height="15" fill="rgb(220,108,29)" fg:x="1025" fg:w="1"/><text x="84.7512%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.5012%" y="261" width="0.0824%" height="15" fill="rgb(226,163,33)" fg:x="1025" fg:w="1"/><text x="84.7512%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="84.5012%" y="565" width="0.1649%" height="15" fill="rgb(205,194,45)" fg:x="1025" fg:w="2"/><text x="84.7512%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="84.5012%" y="549" width="0.1649%" height="15" fill="rgb(206,143,44)" fg:x="1025" fg:w="2"/><text x="84.7512%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="84.5837%" y="533" width="0.0824%" height="15" fill="rgb(236,136,36)" fg:x="1026" fg:w="1"/><text x="84.8337%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.5837%" y="517" width="0.0824%" height="15" fill="rgb(249,172,42)" fg:x="1026" fg:w="1"/><text x="84.8337%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="84.6661%" y="549" width="0.0824%" height="15" fill="rgb(216,139,23)" fg:x="1027" fg:w="1"/><text x="84.9161%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.6661%" y="533" width="0.0824%" height="15" fill="rgb(207,166,20)" fg:x="1027" fg:w="1"/><text x="84.9161%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.6661%" y="517" width="0.0824%" height="15" fill="rgb(210,209,22)" fg:x="1027" fg:w="1"/><text x="84.9161%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="84.6661%" y="501" width="0.0824%" height="15" fill="rgb(232,118,20)" fg:x="1027" fg:w="1"/><text x="84.9161%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.6661%" y="485" width="0.0824%" height="15" fill="rgb(238,113,42)" fg:x="1027" fg:w="1"/><text x="84.9161%" y="495.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (4 samples, 0.33%)</title><rect x="84.5012%" y="597" width="0.3298%" height="15" fill="rgb(231,42,5)" fg:x="1025" fg:w="4"/><text x="84.7512%" y="607.50"></text></g><g><title>plugins_core::tools::set_occupying (4 samples, 0.33%)</title><rect x="84.5012%" y="581" width="0.3298%" height="15" fill="rgb(243,166,24)" fg:x="1025" fg:w="4"/><text x="84.7512%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="84.6661%" y="565" width="0.1649%" height="15" fill="rgb(237,226,12)" fg:x="1027" fg:w="2"/><text x="84.9161%" y="575.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="84.7486%" y="549" width="0.0824%" height="15" fill="rgb(229,133,24)" fg:x="1028" fg:w="1"/><text x="84.9986%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.7486%" y="533" width="0.0824%" height="15" fill="rgb(238,33,43)" fg:x="1028" fg:w="1"/><text x="84.9986%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="84.7486%" y="517" width="0.0824%" height="15" fill="rgb(227,59,38)" fg:x="1028" fg:w="1"/><text x="84.9986%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.7486%" y="501" width="0.0824%" height="15" fill="rgb(230,97,0)" fg:x="1028" fg:w="1"/><text x="84.9986%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.7486%" y="485" width="0.0824%" height="15" fill="rgb(250,173,50)" fg:x="1028" fg:w="1"/><text x="84.9986%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.7486%" y="469" width="0.0824%" height="15" fill="rgb(240,15,50)" fg:x="1028" fg:w="1"/><text x="84.9986%" y="479.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (32 samples, 2.64%)</title><rect x="82.2754%" y="613" width="2.6381%" height="15" fill="rgb(221,93,22)" fg:x="998" fg:w="32"/><text x="82.5254%" y="623.50">pl..</text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="84.8310%" y="597" width="0.0824%" height="15" fill="rgb(245,180,53)" fg:x="1029" fg:w="1"/><text x="85.0810%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="84.8310%" y="581" width="0.0824%" height="15" fill="rgb(231,88,51)" fg:x="1029" fg:w="1"/><text x="85.0810%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="84.8310%" y="565" width="0.0824%" height="15" fill="rgb(240,58,21)" fg:x="1029" fg:w="1"/><text x="85.0810%" y="575.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="84.9134%" y="581" width="0.0824%" height="15" fill="rgb(237,21,10)" fg:x="1030" fg:w="1"/><text x="85.1634%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="84.9134%" y="565" width="0.0824%" height="15" fill="rgb(218,43,11)" fg:x="1030" fg:w="1"/><text x="85.1634%" y="575.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="84.9134%" y="549" width="0.0824%" height="15" fill="rgb(218,221,29)" fg:x="1030" fg:w="1"/><text x="85.1634%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="84.9134%" y="533" width="0.0824%" height="15" fill="rgb(214,118,42)" fg:x="1030" fg:w="1"/><text x="85.1634%" y="543.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="84.9134%" y="517" width="0.0824%" height="15" fill="rgb(251,200,26)" fg:x="1030" fg:w="1"/><text x="85.1634%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="84.9134%" y="501" width="0.0824%" height="15" fill="rgb(237,101,39)" fg:x="1030" fg:w="1"/><text x="85.1634%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="84.9134%" y="485" width="0.0824%" height="15" fill="rgb(251,117,11)" fg:x="1030" fg:w="1"/><text x="85.1634%" y="495.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="84.9134%" y="469" width="0.0824%" height="15" fill="rgb(216,223,23)" fg:x="1030" fg:w="1"/><text x="85.1634%" y="479.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="84.9134%" y="453" width="0.0824%" height="15" fill="rgb(251,54,12)" fg:x="1030" fg:w="1"/><text x="85.1634%" y="463.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="84.9134%" y="437" width="0.0824%" height="15" fill="rgb(254,176,54)" fg:x="1030" fg:w="1"/><text x="85.1634%" y="447.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.08%)</title><rect x="84.9134%" y="421" width="0.0824%" height="15" fill="rgb(210,32,8)" fg:x="1030" fg:w="1"/><text x="85.1634%" y="431.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (2 samples, 0.16%)</title><rect x="84.9134%" y="613" width="0.1649%" height="15" fill="rgb(235,52,38)" fg:x="1030" fg:w="2"/><text x="85.1634%" y="623.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="84.9134%" y="597" width="0.1649%" height="15" fill="rgb(231,4,44)" fg:x="1030" fg:w="2"/><text x="85.1634%" y="607.50"></text></g><g><title>kernel::model::builder::build_entity (1 samples, 0.08%)</title><rect x="84.9959%" y="581" width="0.0824%" height="15" fill="rgb(249,2,32)" fg:x="1031" fg:w="1"/><text x="85.2459%" y="591.50"></text></g><g><title>kernel::model::builder::EntityBuilder::new (1 samples, 0.08%)</title><rect x="84.9959%" y="565" width="0.0824%" height="15" fill="rgb(224,65,26)" fg:x="1031" fg:w="1"/><text x="85.2459%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.9959%" y="549" width="0.0824%" height="15" fill="rgb(250,73,40)" fg:x="1031" fg:w="1"/><text x="85.2459%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="85.0783%" y="613" width="0.0824%" height="15" fill="rgb(253,177,16)" fg:x="1032" fg:w="1"/><text x="85.3283%" y="623.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="85.0783%" y="597" width="0.0824%" height="15" fill="rgb(217,32,34)" fg:x="1032" fg:w="1"/><text x="85.3283%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="85.0783%" y="581" width="0.0824%" height="15" fill="rgb(212,7,10)" fg:x="1032" fg:w="1"/><text x="85.3283%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="85.0783%" y="565" width="0.0824%" height="15" fill="rgb(245,89,8)" fg:x="1032" fg:w="1"/><text x="85.3283%" y="575.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="85.0783%" y="549" width="0.0824%" height="15" fill="rgb(237,16,53)" fg:x="1032" fg:w="1"/><text x="85.3283%" y="559.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="85.0783%" y="533" width="0.0824%" height="15" fill="rgb(250,204,30)" fg:x="1032" fg:w="1"/><text x="85.3283%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="85.0783%" y="517" width="0.0824%" height="15" fill="rgb(208,77,27)" fg:x="1032" fg:w="1"/><text x="85.3283%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="85.0783%" y="501" width="0.0824%" height="15" fill="rgb(250,204,28)" fg:x="1032" fg:w="1"/><text x="85.3283%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="85.0783%" y="485" width="0.0824%" height="15" fill="rgb(244,63,21)" fg:x="1032" fg:w="1"/><text x="85.3283%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="85.1608%" y="597" width="0.0824%" height="15" fill="rgb(236,85,44)" fg:x="1033" fg:w="1"/><text x="85.4108%" y="607.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="85.2432%" y="517" width="0.0824%" height="15" fill="rgb(215,98,4)" fg:x="1034" fg:w="1"/><text x="85.4932%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="85.2432%" y="549" width="0.1649%" height="15" fill="rgb(235,38,11)" fg:x="1034" fg:w="2"/><text x="85.4932%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="85.2432%" y="533" width="0.1649%" height="15" fill="rgb(254,186,25)" fg:x="1034" fg:w="2"/><text x="85.4932%" y="543.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="85.3256%" y="517" width="0.0824%" height="15" fill="rgb(225,55,31)" fg:x="1035" fg:w="1"/><text x="85.5756%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="85.3256%" y="501" width="0.0824%" height="15" fill="rgb(211,15,21)" fg:x="1035" fg:w="1"/><text x="85.5756%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.3256%" y="485" width="0.0824%" height="15" fill="rgb(215,187,41)" fg:x="1035" fg:w="1"/><text x="85.5756%" y="495.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (68 samples, 5.61%)</title><rect x="79.9670%" y="629" width="5.6059%" height="15" fill="rgb(248,69,32)" fg:x="970" fg:w="68"/><text x="80.2170%" y="639.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (5 samples, 0.41%)</title><rect x="85.1608%" y="613" width="0.4122%" height="15" fill="rgb(252,102,52)" fg:x="1033" fg:w="5"/><text x="85.4108%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.33%)</title><rect x="85.2432%" y="597" width="0.3298%" height="15" fill="rgb(253,140,32)" fg:x="1034" fg:w="4"/><text x="85.4932%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.33%)</title><rect x="85.2432%" y="581" width="0.3298%" height="15" fill="rgb(216,56,42)" fg:x="1034" fg:w="4"/><text x="85.4932%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.33%)</title><rect x="85.2432%" y="565" width="0.3298%" height="15" fill="rgb(216,184,14)" fg:x="1034" fg:w="4"/><text x="85.4932%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="85.4081%" y="549" width="0.1649%" height="15" fill="rgb(237,187,27)" fg:x="1036" fg:w="2"/><text x="85.6581%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="85.4081%" y="533" width="0.1649%" height="15" fill="rgb(219,65,3)" fg:x="1036" fg:w="2"/><text x="85.6581%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="85.4081%" y="517" width="0.1649%" height="15" fill="rgb(245,83,25)" fg:x="1036" fg:w="2"/><text x="85.6581%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.4905%" y="501" width="0.0824%" height="15" fill="rgb(214,205,45)" fg:x="1037" fg:w="1"/><text x="85.7405%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="85.4905%" y="485" width="0.0824%" height="15" fill="rgb(241,20,18)" fg:x="1037" fg:w="1"/><text x="85.7405%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="85.7378%" y="517" width="0.0824%" height="15" fill="rgb(232,163,23)" fg:x="1040" fg:w="1"/><text x="85.9878%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="85.7378%" y="501" width="0.0824%" height="15" fill="rgb(214,5,46)" fg:x="1040" fg:w="1"/><text x="85.9878%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="85.7378%" y="485" width="0.0824%" height="15" fill="rgb(229,78,17)" fg:x="1040" fg:w="1"/><text x="85.9878%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="85.7378%" y="469" width="0.0824%" height="15" fill="rgb(248,89,10)" fg:x="1040" fg:w="1"/><text x="85.9878%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="85.8203%" y="501" width="0.0824%" height="15" fill="rgb(248,54,15)" fg:x="1041" fg:w="1"/><text x="86.0703%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="85.8203%" y="485" width="0.0824%" height="15" fill="rgb(223,116,6)" fg:x="1041" fg:w="1"/><text x="86.0703%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="85.8203%" y="469" width="0.0824%" height="15" fill="rgb(205,125,38)" fg:x="1041" fg:w="1"/><text x="86.0703%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="85.9027%" y="437" width="0.0824%" height="15" fill="rgb(251,78,38)" fg:x="1042" fg:w="1"/><text x="86.1527%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="85.9027%" y="485" width="0.1649%" height="15" fill="rgb(253,78,28)" fg:x="1042" fg:w="2"/><text x="86.1527%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="85.9027%" y="469" width="0.1649%" height="15" fill="rgb(209,120,3)" fg:x="1042" fg:w="2"/><text x="86.1527%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="85.9027%" y="453" width="0.1649%" height="15" fill="rgb(238,229,9)" fg:x="1042" fg:w="2"/><text x="86.1527%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="85.9852%" y="437" width="0.0824%" height="15" fill="rgb(253,159,18)" fg:x="1043" fg:w="1"/><text x="86.2352%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="86.0676%" y="469" width="0.0824%" height="15" fill="rgb(244,42,34)" fg:x="1044" fg:w="1"/><text x="86.3176%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="86.0676%" y="453" width="0.0824%" height="15" fill="rgb(224,8,7)" fg:x="1044" fg:w="1"/><text x="86.3176%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="86.0676%" y="437" width="0.0824%" height="15" fill="rgb(210,201,45)" fg:x="1044" fg:w="1"/><text x="86.3176%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="86.0676%" y="421" width="0.0824%" height="15" fill="rgb(252,185,21)" fg:x="1044" fg:w="1"/><text x="86.3176%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="86.0676%" y="405" width="0.0824%" height="15" fill="rgb(223,131,1)" fg:x="1044" fg:w="1"/><text x="86.3176%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="86.0676%" y="389" width="0.0824%" height="15" fill="rgb(245,141,16)" fg:x="1044" fg:w="1"/><text x="86.3176%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="85.9027%" y="501" width="0.3298%" height="15" fill="rgb(229,55,45)" fg:x="1042" fg:w="4"/><text x="86.1527%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="86.0676%" y="485" width="0.1649%" height="15" fill="rgb(208,92,15)" fg:x="1044" fg:w="2"/><text x="86.3176%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="86.1500%" y="469" width="0.0824%" height="15" fill="rgb(234,185,47)" fg:x="1045" fg:w="1"/><text x="86.4000%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.66%)</title><rect x="85.7378%" y="533" width="0.6595%" height="15" fill="rgb(253,104,50)" fg:x="1040" fg:w="8"/><text x="85.9878%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.58%)</title><rect x="85.8203%" y="517" width="0.5771%" height="15" fill="rgb(205,70,7)" fg:x="1041" fg:w="7"/><text x="86.0703%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="86.2325%" y="501" width="0.1649%" height="15" fill="rgb(240,178,43)" fg:x="1046" fg:w="2"/><text x="86.4825%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="86.3149%" y="485" width="0.0824%" height="15" fill="rgb(214,112,2)" fg:x="1047" fg:w="1"/><text x="86.5649%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="86.3149%" y="469" width="0.0824%" height="15" fill="rgb(206,46,17)" fg:x="1047" fg:w="1"/><text x="86.5649%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.3974%" y="453" width="0.0824%" height="15" fill="rgb(225,220,16)" fg:x="1048" fg:w="1"/><text x="86.6474%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="86.4798%" y="453" width="0.0824%" height="15" fill="rgb(238,65,40)" fg:x="1049" fg:w="1"/><text x="86.7298%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="86.3974%" y="501" width="0.3298%" height="15" fill="rgb(230,151,21)" fg:x="1048" fg:w="4"/><text x="86.6474%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.33%)</title><rect x="86.3974%" y="485" width="0.3298%" height="15" fill="rgb(218,58,49)" fg:x="1048" fg:w="4"/><text x="86.6474%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="86.3974%" y="469" width="0.3298%" height="15" fill="rgb(219,179,14)" fg:x="1048" fg:w="4"/><text x="86.6474%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="86.5622%" y="453" width="0.1649%" height="15" fill="rgb(223,72,1)" fg:x="1050" fg:w="2"/><text x="86.8122%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="86.5622%" y="437" width="0.1649%" height="15" fill="rgb(238,126,10)" fg:x="1050" fg:w="2"/><text x="86.8122%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="86.6447%" y="421" width="0.0824%" height="15" fill="rgb(224,206,38)" fg:x="1051" fg:w="1"/><text x="86.8947%" y="431.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (7 samples, 0.58%)</title><rect x="86.3974%" y="517" width="0.5771%" height="15" fill="rgb(212,201,54)" fg:x="1048" fg:w="7"/><text x="86.6474%" y="527.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.25%)</title><rect x="86.7271%" y="501" width="0.2473%" height="15" fill="rgb(218,154,48)" fg:x="1052" fg:w="3"/><text x="86.9771%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="86.8096%" y="485" width="0.1649%" height="15" fill="rgb(232,93,24)" fg:x="1053" fg:w="2"/><text x="87.0596%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="86.8096%" y="469" width="0.1649%" height="15" fill="rgb(245,30,21)" fg:x="1053" fg:w="2"/><text x="87.0596%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="86.8096%" y="453" width="0.1649%" height="15" fill="rgb(242,148,29)" fg:x="1053" fg:w="2"/><text x="87.0596%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="86.8920%" y="437" width="0.0824%" height="15" fill="rgb(244,153,54)" fg:x="1054" fg:w="1"/><text x="87.1420%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="86.8920%" y="421" width="0.0824%" height="15" fill="rgb(252,87,22)" fg:x="1054" fg:w="1"/><text x="87.1420%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="87.3042%" y="485" width="0.0824%" height="15" fill="rgb(210,51,29)" fg:x="1059" fg:w="1"/><text x="87.5542%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.3866%" y="453" width="0.0824%" height="15" fill="rgb(242,136,47)" fg:x="1060" fg:w="1"/><text x="87.6366%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="87.3866%" y="485" width="0.1649%" height="15" fill="rgb(238,68,4)" fg:x="1060" fg:w="2"/><text x="87.6366%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="87.3866%" y="469" width="0.1649%" height="15" fill="rgb(242,161,30)" fg:x="1060" fg:w="2"/><text x="87.6366%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.4691%" y="453" width="0.0824%" height="15" fill="rgb(218,58,44)" fg:x="1061" fg:w="1"/><text x="87.7191%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.4691%" y="437" width="0.0824%" height="15" fill="rgb(252,125,32)" fg:x="1061" fg:w="1"/><text x="87.7191%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.6340%" y="389" width="0.0824%" height="15" fill="rgb(219,178,0)" fg:x="1063" fg:w="1"/><text x="87.8840%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="87.6340%" y="437" width="0.1649%" height="15" fill="rgb(213,152,7)" fg:x="1063" fg:w="2"/><text x="87.8840%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="87.6340%" y="421" width="0.1649%" height="15" fill="rgb(249,109,34)" fg:x="1063" fg:w="2"/><text x="87.8840%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="87.6340%" y="405" width="0.1649%" height="15" fill="rgb(232,96,21)" fg:x="1063" fg:w="2"/><text x="87.8840%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="87.7164%" y="389" width="0.0824%" height="15" fill="rgb(228,27,39)" fg:x="1064" fg:w="1"/><text x="87.9664%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="87.6340%" y="453" width="0.2473%" height="15" fill="rgb(211,182,52)" fg:x="1063" fg:w="3"/><text x="87.8840%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="87.7988%" y="437" width="0.0824%" height="15" fill="rgb(234,178,38)" fg:x="1065" fg:w="1"/><text x="88.0488%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="87.7988%" y="421" width="0.0824%" height="15" fill="rgb(221,111,3)" fg:x="1065" fg:w="1"/><text x="88.0488%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="87.7988%" y="405" width="0.0824%" height="15" fill="rgb(228,175,21)" fg:x="1065" fg:w="1"/><text x="88.0488%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="87.7988%" y="389" width="0.0824%" height="15" fill="rgb(228,174,43)" fg:x="1065" fg:w="1"/><text x="88.0488%" y="399.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="87.7988%" y="373" width="0.0824%" height="15" fill="rgb(211,191,0)" fg:x="1065" fg:w="1"/><text x="88.0488%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.41%)</title><rect x="87.5515%" y="469" width="0.4122%" height="15" fill="rgb(253,117,3)" fg:x="1062" fg:w="5"/><text x="87.8015%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="87.8813%" y="453" width="0.0824%" height="15" fill="rgb(241,127,19)" fg:x="1066" fg:w="1"/><text x="88.1313%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.8813%" y="437" width="0.0824%" height="15" fill="rgb(218,103,12)" fg:x="1066" fg:w="1"/><text x="88.1313%" y="447.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (14 samples, 1.15%)</title><rect x="86.9744%" y="517" width="1.1542%" height="15" fill="rgb(236,214,43)" fg:x="1055" fg:w="14"/><text x="87.2244%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.07%)</title><rect x="87.0569%" y="501" width="1.0717%" height="15" fill="rgb(244,144,19)" fg:x="1056" fg:w="13"/><text x="87.3069%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.58%)</title><rect x="87.5515%" y="485" width="0.5771%" height="15" fill="rgb(246,188,10)" fg:x="1062" fg:w="7"/><text x="87.8015%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="87.9637%" y="469" width="0.1649%" height="15" fill="rgb(212,193,33)" fg:x="1067" fg:w="2"/><text x="88.2137%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="88.1286%" y="421" width="0.0824%" height="15" fill="rgb(241,51,29)" fg:x="1069" fg:w="1"/><text x="88.3786%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="88.1286%" y="405" width="0.0824%" height="15" fill="rgb(211,58,19)" fg:x="1069" fg:w="1"/><text x="88.3786%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="88.1286%" y="389" width="0.0824%" height="15" fill="rgb(229,111,26)" fg:x="1069" fg:w="1"/><text x="88.3786%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="88.1286%" y="453" width="0.1649%" height="15" fill="rgb(213,115,40)" fg:x="1069" fg:w="2"/><text x="88.3786%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="88.1286%" y="437" width="0.1649%" height="15" fill="rgb(209,56,44)" fg:x="1069" fg:w="2"/><text x="88.3786%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="88.2110%" y="421" width="0.0824%" height="15" fill="rgb(230,108,32)" fg:x="1070" fg:w="1"/><text x="88.4610%" y="431.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="88.2110%" y="405" width="0.0824%" height="15" fill="rgb(216,165,31)" fg:x="1070" fg:w="1"/><text x="88.4610%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="88.2110%" y="389" width="0.0824%" height="15" fill="rgb(218,122,21)" fg:x="1070" fg:w="1"/><text x="88.4610%" y="399.50"></text></g><g><title>engine::session::state::State::close (34 samples, 2.80%)</title><rect x="85.5730%" y="613" width="2.8030%" height="15" fill="rgb(223,224,47)" fg:x="1038" fg:w="34"/><text x="85.8230%" y="623.50">en..</text></g><g><title>engine::session::state::State::flush_entities (34 samples, 2.80%)</title><rect x="85.5730%" y="597" width="2.8030%" height="15" fill="rgb(238,102,44)" fg:x="1038" fg:w="34"/><text x="85.8230%" y="607.50">en..</text></g><g><title>core::iter::adapters::try_process (34 samples, 2.80%)</title><rect x="85.5730%" y="581" width="2.8030%" height="15" fill="rgb(236,46,40)" fg:x="1038" fg:w="34"/><text x="85.8230%" y="591.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (34 samples, 2.80%)</title><rect x="85.5730%" y="565" width="2.8030%" height="15" fill="rgb(247,202,50)" fg:x="1038" fg:w="34"/><text x="85.8230%" y="575.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (34 samples, 2.80%)</title><rect x="85.5730%" y="549" width="2.8030%" height="15" fill="rgb(209,99,20)" fg:x="1038" fg:w="34"/><text x="85.8230%" y="559.50">en..</text></g><g><title>kernel::model::any_entity_changes (24 samples, 1.98%)</title><rect x="86.3974%" y="533" width="1.9786%" height="15" fill="rgb(252,27,34)" fg:x="1048" fg:w="24"/><text x="86.6474%" y="543.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.25%)</title><rect x="88.1286%" y="517" width="0.2473%" height="15" fill="rgb(215,206,23)" fg:x="1069" fg:w="3"/><text x="88.3786%" y="527.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.25%)</title><rect x="88.1286%" y="501" width="0.2473%" height="15" fill="rgb(212,135,36)" fg:x="1069" fg:w="3"/><text x="88.3786%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="88.1286%" y="485" width="0.2473%" height="15" fill="rgb(240,189,1)" fg:x="1069" fg:w="3"/><text x="88.3786%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="88.1286%" y="469" width="0.2473%" height="15" fill="rgb(242,56,20)" fg:x="1069" fg:w="3"/><text x="88.3786%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="88.2935%" y="453" width="0.0824%" height="15" fill="rgb(247,132,33)" fg:x="1071" fg:w="1"/><text x="88.5435%" y="463.50"></text></g><g><title>engine::session::Session::close (35 samples, 2.89%)</title><rect x="85.5730%" y="629" width="2.8854%" height="15" fill="rgb(208,149,11)" fg:x="1038" fg:w="35"/><text x="85.8230%" y="639.50">en..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="88.3759%" y="613" width="0.0824%" height="15" fill="rgb(211,33,11)" fg:x="1072" fg:w="1"/><text x="88.6259%" y="623.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::stop (1 samples, 0.08%)</title><rect x="88.3759%" y="597" width="0.0824%" height="15" fill="rgb(221,29,38)" fg:x="1072" fg:w="1"/><text x="88.6259%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="88.4584%" y="501" width="0.0824%" height="15" fill="rgb(206,182,49)" fg:x="1073" fg:w="1"/><text x="88.7084%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.4584%" y="485" width="0.0824%" height="15" fill="rgb(216,140,1)" fg:x="1073" fg:w="1"/><text x="88.7084%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.4584%" y="469" width="0.0824%" height="15" fill="rgb(232,57,40)" fg:x="1073" fg:w="1"/><text x="88.7084%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.4584%" y="453" width="0.0824%" height="15" fill="rgb(224,186,18)" fg:x="1073" fg:w="1"/><text x="88.7084%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.4584%" y="437" width="0.0824%" height="15" fill="rgb(215,121,11)" fg:x="1073" fg:w="1"/><text x="88.7084%" y="447.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="88.5408%" y="437" width="0.0824%" height="15" fill="rgb(245,147,10)" fg:x="1074" fg:w="1"/><text x="88.7908%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.5408%" y="421" width="0.0824%" height="15" fill="rgb(238,153,13)" fg:x="1074" fg:w="1"/><text x="88.7908%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.5408%" y="405" width="0.0824%" height="15" fill="rgb(233,108,0)" fg:x="1074" fg:w="1"/><text x="88.7908%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.5408%" y="389" width="0.0824%" height="15" fill="rgb(212,157,17)" fg:x="1074" fg:w="1"/><text x="88.7908%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.5408%" y="373" width="0.0824%" height="15" fill="rgb(225,213,38)" fg:x="1074" fg:w="1"/><text x="88.7908%" y="383.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (3 samples, 0.25%)</title><rect x="88.4584%" y="533" width="0.2473%" height="15" fill="rgb(248,16,11)" fg:x="1073" fg:w="3"/><text x="88.7084%" y="543.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (3 samples, 0.25%)</title><rect x="88.4584%" y="517" width="0.2473%" height="15" fill="rgb(241,33,4)" fg:x="1073" fg:w="3"/><text x="88.7084%" y="527.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (2 samples, 0.16%)</title><rect x="88.5408%" y="501" width="0.1649%" height="15" fill="rgb(222,26,43)" fg:x="1074" fg:w="2"/><text x="88.7908%" y="511.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="88.5408%" y="485" width="0.1649%" height="15" fill="rgb(243,29,36)" fg:x="1074" fg:w="2"/><text x="88.7908%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="88.5408%" y="469" width="0.1649%" height="15" fill="rgb(241,9,27)" fg:x="1074" fg:w="2"/><text x="88.7908%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="88.5408%" y="453" width="0.1649%" height="15" fill="rgb(205,117,26)" fg:x="1074" fg:w="2"/><text x="88.7908%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="88.6232%" y="437" width="0.0824%" height="15" fill="rgb(209,80,39)" fg:x="1075" fg:w="1"/><text x="88.8732%" y="447.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="88.6232%" y="421" width="0.0824%" height="15" fill="rgb(239,155,6)" fg:x="1075" fg:w="1"/><text x="88.8732%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="88.6232%" y="405" width="0.0824%" height="15" fill="rgb(212,104,12)" fg:x="1075" fg:w="1"/><text x="88.8732%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="88.6232%" y="389" width="0.0824%" height="15" fill="rgb(234,204,3)" fg:x="1075" fg:w="1"/><text x="88.8732%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="88.6232%" y="373" width="0.0824%" height="15" fill="rgb(251,218,7)" fg:x="1075" fg:w="1"/><text x="88.8732%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="88.6232%" y="357" width="0.0824%" height="15" fill="rgb(221,81,32)" fg:x="1075" fg:w="1"/><text x="88.8732%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="88.6232%" y="341" width="0.0824%" height="15" fill="rgb(214,152,26)" fg:x="1075" fg:w="1"/><text x="88.8732%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="88.6232%" y="325" width="0.0824%" height="15" fill="rgb(223,22,3)" fg:x="1075" fg:w="1"/><text x="88.8732%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.6232%" y="309" width="0.0824%" height="15" fill="rgb(207,174,7)" fg:x="1075" fg:w="1"/><text x="88.8732%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.6232%" y="293" width="0.0824%" height="15" fill="rgb(224,19,52)" fg:x="1075" fg:w="1"/><text x="88.8732%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="88.8706%" y="325" width="0.1649%" height="15" fill="rgb(228,24,14)" fg:x="1078" fg:w="2"/><text x="89.1206%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="88.8706%" y="309" width="0.1649%" height="15" fill="rgb(230,153,43)" fg:x="1078" fg:w="2"/><text x="89.1206%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.9530%" y="293" width="0.0824%" height="15" fill="rgb(231,106,12)" fg:x="1079" fg:w="1"/><text x="89.2030%" y="303.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (4 samples, 0.33%)</title><rect x="88.7881%" y="373" width="0.3298%" height="15" fill="rgb(215,92,2)" fg:x="1077" fg:w="4"/><text x="89.0381%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (4 samples, 0.33%)</title><rect x="88.7881%" y="357" width="0.3298%" height="15" fill="rgb(249,143,25)" fg:x="1077" fg:w="4"/><text x="89.0381%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.33%)</title><rect x="88.7881%" y="341" width="0.3298%" height="15" fill="rgb(252,7,35)" fg:x="1077" fg:w="4"/><text x="89.0381%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="89.0354%" y="325" width="0.0824%" height="15" fill="rgb(216,69,40)" fg:x="1080" fg:w="1"/><text x="89.2854%" y="335.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (5 samples, 0.41%)</title><rect x="88.7881%" y="389" width="0.4122%" height="15" fill="rgb(240,36,33)" fg:x="1077" fg:w="5"/><text x="89.0381%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="89.1179%" y="373" width="0.0824%" height="15" fill="rgb(231,128,14)" fg:x="1081" fg:w="1"/><text x="89.3679%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.1179%" y="357" width="0.0824%" height="15" fill="rgb(245,143,14)" fg:x="1081" fg:w="1"/><text x="89.3679%" y="367.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="89.2003%" y="357" width="0.0824%" height="15" fill="rgb(222,130,28)" fg:x="1082" fg:w="1"/><text x="89.4503%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="89.2003%" y="341" width="0.0824%" height="15" fill="rgb(212,10,48)" fg:x="1082" fg:w="1"/><text x="89.4503%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="89.2003%" y="325" width="0.0824%" height="15" fill="rgb(254,118,45)" fg:x="1082" fg:w="1"/><text x="89.4503%" y="335.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="89.2828%" y="341" width="0.0824%" height="15" fill="rgb(228,6,45)" fg:x="1083" fg:w="1"/><text x="89.5328%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="89.2828%" y="325" width="0.0824%" height="15" fill="rgb(241,18,35)" fg:x="1083" fg:w="1"/><text x="89.5328%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="89.4477%" y="309" width="0.0824%" height="15" fill="rgb(227,214,53)" fg:x="1085" fg:w="1"/><text x="89.6977%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (5 samples, 0.41%)</title><rect x="89.2828%" y="357" width="0.4122%" height="15" fill="rgb(224,107,51)" fg:x="1083" fg:w="5"/><text x="89.5328%" y="367.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.33%)</title><rect x="89.3652%" y="341" width="0.3298%" height="15" fill="rgb(248,60,28)" fg:x="1084" fg:w="4"/><text x="89.6152%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="89.3652%" y="325" width="0.3298%" height="15" fill="rgb(249,101,23)" fg:x="1084" fg:w="4"/><text x="89.6152%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="89.5301%" y="309" width="0.1649%" height="15" fill="rgb(228,51,19)" fg:x="1086" fg:w="2"/><text x="89.7801%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="89.5301%" y="293" width="0.1649%" height="15" fill="rgb(213,20,6)" fg:x="1086" fg:w="2"/><text x="89.7801%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.8599%" y="229" width="0.0824%" height="15" fill="rgb(212,124,10)" fg:x="1090" fg:w="1"/><text x="90.1099%" y="239.50"></text></g><g><title>kernel::model::EntityPtr::gid (4 samples, 0.33%)</title><rect x="89.6950%" y="357" width="0.3298%" height="15" fill="rgb(248,3,40)" fg:x="1088" fg:w="4"/><text x="89.9450%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.25%)</title><rect x="89.7774%" y="341" width="0.2473%" height="15" fill="rgb(223,178,23)" fg:x="1089" fg:w="3"/><text x="90.0274%" y="351.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="89.8599%" y="325" width="0.1649%" height="15" fill="rgb(240,132,45)" fg:x="1090" fg:w="2"/><text x="90.1099%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="89.8599%" y="309" width="0.1649%" height="15" fill="rgb(245,164,36)" fg:x="1090" fg:w="2"/><text x="90.1099%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="89.8599%" y="293" width="0.1649%" height="15" fill="rgb(231,188,53)" fg:x="1090" fg:w="2"/><text x="90.1099%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="89.8599%" y="277" width="0.1649%" height="15" fill="rgb(237,198,39)" fg:x="1090" fg:w="2"/><text x="90.1099%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="89.8599%" y="261" width="0.1649%" height="15" fill="rgb(223,120,35)" fg:x="1090" fg:w="2"/><text x="90.1099%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="89.8599%" y="245" width="0.1649%" height="15" fill="rgb(253,107,49)" fg:x="1090" fg:w="2"/><text x="90.1099%" y="255.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="89.9423%" y="229" width="0.0824%" height="15" fill="rgb(216,44,31)" fg:x="1091" fg:w="1"/><text x="90.1923%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.9423%" y="213" width="0.0824%" height="15" fill="rgb(253,87,21)" fg:x="1091" fg:w="1"/><text x="90.1923%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.9423%" y="197" width="0.0824%" height="15" fill="rgb(226,18,2)" fg:x="1091" fg:w="1"/><text x="90.1923%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="90.1072%" y="229" width="0.1649%" height="15" fill="rgb(216,8,46)" fg:x="1093" fg:w="2"/><text x="90.3572%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="90.1072%" y="213" width="0.1649%" height="15" fill="rgb(226,140,39)" fg:x="1093" fg:w="2"/><text x="90.3572%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="90.1072%" y="197" width="0.1649%" height="15" fill="rgb(221,194,54)" fg:x="1093" fg:w="2"/><text x="90.3572%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="90.1072%" y="181" width="0.1649%" height="15" fill="rgb(213,92,11)" fg:x="1093" fg:w="2"/><text x="90.3572%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.1896%" y="165" width="0.0824%" height="15" fill="rgb(229,162,46)" fg:x="1094" fg:w="1"/><text x="90.4396%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.1896%" y="149" width="0.0824%" height="15" fill="rgb(214,111,36)" fg:x="1094" fg:w="1"/><text x="90.4396%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="90.2721%" y="229" width="0.0824%" height="15" fill="rgb(207,6,21)" fg:x="1095" fg:w="1"/><text x="90.5221%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.58%)</title><rect x="90.3545%" y="213" width="0.5771%" height="15" fill="rgb(213,127,38)" fg:x="1096" fg:w="7"/><text x="90.6045%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.58%)</title><rect x="90.3545%" y="197" width="0.5771%" height="15" fill="rgb(238,118,32)" fg:x="1096" fg:w="7"/><text x="90.6045%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.8491%" y="181" width="0.0824%" height="15" fill="rgb(240,139,39)" fg:x="1102" fg:w="1"/><text x="91.0991%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="90.9316%" y="213" width="0.0824%" height="15" fill="rgb(235,10,37)" fg:x="1103" fg:w="1"/><text x="91.1816%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="90.9316%" y="197" width="0.0824%" height="15" fill="rgb(249,171,38)" fg:x="1103" fg:w="1"/><text x="91.1816%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="91.0140%" y="213" width="0.0824%" height="15" fill="rgb(242,144,32)" fg:x="1104" fg:w="1"/><text x="91.2640%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="91.1789%" y="149" width="0.0824%" height="15" fill="rgb(217,117,21)" fg:x="1106" fg:w="1"/><text x="91.4289%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="91.1789%" y="133" width="0.0824%" height="15" fill="rgb(249,87,1)" fg:x="1106" fg:w="1"/><text x="91.4289%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="91.1789%" y="117" width="0.0824%" height="15" fill="rgb(248,196,48)" fg:x="1106" fg:w="1"/><text x="91.4289%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.1789%" y="101" width="0.0824%" height="15" fill="rgb(251,206,33)" fg:x="1106" fg:w="1"/><text x="91.4289%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (12 samples, 0.99%)</title><rect x="91.2613%" y="149" width="0.9893%" height="15" fill="rgb(232,141,28)" fg:x="1107" fg:w="12"/><text x="91.5113%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (12 samples, 0.99%)</title><rect x="91.2613%" y="133" width="0.9893%" height="15" fill="rgb(209,167,14)" fg:x="1107" fg:w="12"/><text x="91.5113%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (12 samples, 0.99%)</title><rect x="91.2613%" y="117" width="0.9893%" height="15" fill="rgb(225,11,50)" fg:x="1107" fg:w="12"/><text x="91.5113%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 1.24%)</title><rect x="91.0965%" y="197" width="1.2366%" height="15" fill="rgb(209,50,20)" fg:x="1105" fg:w="15"/><text x="91.3465%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (15 samples, 1.24%)</title><rect x="91.0965%" y="181" width="1.2366%" height="15" fill="rgb(212,17,46)" fg:x="1105" fg:w="15"/><text x="91.3465%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (15 samples, 1.24%)</title><rect x="91.0965%" y="165" width="1.2366%" height="15" fill="rgb(216,101,39)" fg:x="1105" fg:w="15"/><text x="91.3465%" y="175.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="92.2506%" y="149" width="0.0824%" height="15" fill="rgb(212,228,48)" fg:x="1119" fg:w="1"/><text x="92.5006%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="92.3331%" y="197" width="0.0824%" height="15" fill="rgb(250,6,50)" fg:x="1120" fg:w="1"/><text x="92.5831%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="92.3331%" y="181" width="0.0824%" height="15" fill="rgb(250,160,48)" fg:x="1120" fg:w="1"/><text x="92.5831%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (26 samples, 2.14%)</title><rect x="90.3545%" y="229" width="2.1434%" height="15" fill="rgb(244,216,33)" fg:x="1096" fg:w="26"/><text x="90.6045%" y="239.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (17 samples, 1.40%)</title><rect x="91.0965%" y="213" width="1.4015%" height="15" fill="rgb(207,157,5)" fg:x="1105" fg:w="17"/><text x="91.3465%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="92.4155%" y="197" width="0.0824%" height="15" fill="rgb(228,199,8)" fg:x="1121" fg:w="1"/><text x="92.6655%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="92.4155%" y="181" width="0.0824%" height="15" fill="rgb(227,80,20)" fg:x="1121" fg:w="1"/><text x="92.6655%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.25%)</title><rect x="92.4979%" y="229" width="0.2473%" height="15" fill="rgb(222,9,33)" fg:x="1122" fg:w="3"/><text x="92.7479%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.25%)</title><rect x="92.4979%" y="213" width="0.2473%" height="15" fill="rgb(239,44,28)" fg:x="1122" fg:w="3"/><text x="92.7479%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.25%)</title><rect x="92.4979%" y="197" width="0.2473%" height="15" fill="rgb(249,187,43)" fg:x="1122" fg:w="3"/><text x="92.7479%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.25%)</title><rect x="92.4979%" y="181" width="0.2473%" height="15" fill="rgb(216,141,28)" fg:x="1122" fg:w="3"/><text x="92.7479%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="92.4979%" y="165" width="0.2473%" height="15" fill="rgb(230,154,53)" fg:x="1122" fg:w="3"/><text x="92.7479%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="92.4979%" y="149" width="0.2473%" height="15" fill="rgb(227,82,4)" fg:x="1122" fg:w="3"/><text x="92.7479%" y="159.50"></text></g><g><title>__libc_malloc (3 samples, 0.25%)</title><rect x="92.4979%" y="133" width="0.2473%" height="15" fill="rgb(220,107,16)" fg:x="1122" fg:w="3"/><text x="92.7479%" y="143.50"></text></g><g><title>regex::regex::string::Regex::new (34 samples, 2.80%)</title><rect x="90.1072%" y="277" width="2.8030%" height="15" fill="rgb(207,187,2)" fg:x="1093" fg:w="34"/><text x="90.3572%" y="287.50">re..</text></g><g><title>regex::builders::Builder::build_one_string (34 samples, 2.80%)</title><rect x="90.1072%" y="261" width="2.8030%" height="15" fill="rgb(210,162,52)" fg:x="1093" fg:w="34"/><text x="90.3572%" y="271.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (34 samples, 2.80%)</title><rect x="90.1072%" y="245" width="2.8030%" height="15" fill="rgb(217,216,49)" fg:x="1093" fg:w="34"/><text x="90.3572%" y="255.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="92.7453%" y="229" width="0.1649%" height="15" fill="rgb(218,146,49)" fg:x="1125" fg:w="2"/><text x="92.9953%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="92.7453%" y="213" width="0.1649%" height="15" fill="rgb(216,55,40)" fg:x="1125" fg:w="2"/><text x="92.9953%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="92.8277%" y="197" width="0.0824%" height="15" fill="rgb(208,196,21)" fg:x="1126" fg:w="1"/><text x="93.0777%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="92.8277%" y="181" width="0.0824%" height="15" fill="rgb(242,117,42)" fg:x="1126" fg:w="1"/><text x="93.0777%" y="191.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="92.8277%" y="165" width="0.0824%" height="15" fill="rgb(210,11,23)" fg:x="1126" fg:w="1"/><text x="93.0777%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.8277%" y="149" width="0.0824%" height="15" fill="rgb(217,110,2)" fg:x="1126" fg:w="1"/><text x="93.0777%" y="159.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (38 samples, 3.13%)</title><rect x="90.1072%" y="293" width="3.1327%" height="15" fill="rgb(229,77,54)" fg:x="1093" fg:w="38"/><text x="90.3572%" y="303.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.33%)</title><rect x="92.9101%" y="277" width="0.3298%" height="15" fill="rgb(218,53,16)" fg:x="1127" fg:w="4"/><text x="93.1601%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.33%)</title><rect x="92.9101%" y="261" width="0.3298%" height="15" fill="rgb(215,38,13)" fg:x="1127" fg:w="4"/><text x="93.1601%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.33%)</title><rect x="92.9101%" y="245" width="0.3298%" height="15" fill="rgb(235,42,18)" fg:x="1127" fg:w="4"/><text x="93.1601%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.25%)</title><rect x="92.9926%" y="229" width="0.2473%" height="15" fill="rgb(219,66,54)" fg:x="1128" fg:w="3"/><text x="93.2426%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.25%)</title><rect x="92.9926%" y="213" width="0.2473%" height="15" fill="rgb(222,205,4)" fg:x="1128" fg:w="3"/><text x="93.2426%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="93.1575%" y="197" width="0.0824%" height="15" fill="rgb(227,213,46)" fg:x="1130" fg:w="1"/><text x="93.4075%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="93.2399%" y="277" width="0.0824%" height="15" fill="rgb(250,145,42)" fg:x="1131" fg:w="1"/><text x="93.4899%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="93.2399%" y="261" width="0.0824%" height="15" fill="rgb(219,15,2)" fg:x="1131" fg:w="1"/><text x="93.4899%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="93.2399%" y="245" width="0.0824%" height="15" fill="rgb(231,181,52)" fg:x="1131" fg:w="1"/><text x="93.4899%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="93.2399%" y="229" width="0.0824%" height="15" fill="rgb(235,1,42)" fg:x="1131" fg:w="1"/><text x="93.4899%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="93.3223%" y="261" width="0.0824%" height="15" fill="rgb(249,88,27)" fg:x="1132" fg:w="1"/><text x="93.5723%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="93.3223%" y="245" width="0.0824%" height="15" fill="rgb(235,145,16)" fg:x="1132" fg:w="1"/><text x="93.5723%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="93.3223%" y="229" width="0.0824%" height="15" fill="rgb(237,114,19)" fg:x="1132" fg:w="1"/><text x="93.5723%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="93.5697%" y="197" width="0.1649%" height="15" fill="rgb(238,51,50)" fg:x="1135" fg:w="2"/><text x="93.8197%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="93.5697%" y="181" width="0.1649%" height="15" fill="rgb(205,194,25)" fg:x="1135" fg:w="2"/><text x="93.8197%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (6 samples, 0.49%)</title><rect x="93.3223%" y="277" width="0.4946%" height="15" fill="rgb(215,203,17)" fg:x="1132" fg:w="6"/><text x="93.5723%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.41%)</title><rect x="93.4048%" y="261" width="0.4122%" height="15" fill="rgb(233,112,49)" fg:x="1133" fg:w="5"/><text x="93.6548%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.33%)</title><rect x="93.4872%" y="245" width="0.3298%" height="15" fill="rgb(241,130,26)" fg:x="1134" fg:w="4"/><text x="93.7372%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.33%)</title><rect x="93.4872%" y="229" width="0.3298%" height="15" fill="rgb(252,223,19)" fg:x="1134" fg:w="4"/><text x="93.7372%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.33%)</title><rect x="93.4872%" y="213" width="0.3298%" height="15" fill="rgb(211,95,25)" fg:x="1134" fg:w="4"/><text x="93.7372%" y="223.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="93.7345%" y="197" width="0.0824%" height="15" fill="rgb(251,182,27)" fg:x="1137" fg:w="1"/><text x="93.9845%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.7345%" y="181" width="0.0824%" height="15" fill="rgb(238,24,4)" fg:x="1137" fg:w="1"/><text x="93.9845%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.7345%" y="165" width="0.0824%" height="15" fill="rgb(224,220,25)" fg:x="1137" fg:w="1"/><text x="93.9845%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.7345%" y="149" width="0.0824%" height="15" fill="rgb(239,133,26)" fg:x="1137" fg:w="1"/><text x="93.9845%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="93.8170%" y="261" width="0.0824%" height="15" fill="rgb(211,94,48)" fg:x="1138" fg:w="1"/><text x="94.0670%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.8994%" y="229" width="0.0824%" height="15" fill="rgb(239,87,6)" fg:x="1139" fg:w="1"/><text x="94.1494%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.8994%" y="213" width="0.0824%" height="15" fill="rgb(227,62,0)" fg:x="1139" fg:w="1"/><text x="94.1494%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="93.8994%" y="197" width="0.0824%" height="15" fill="rgb(211,226,4)" fg:x="1139" fg:w="1"/><text x="94.1494%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.8994%" y="181" width="0.0824%" height="15" fill="rgb(253,38,52)" fg:x="1139" fg:w="1"/><text x="94.1494%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="93.9819%" y="229" width="0.0824%" height="15" fill="rgb(229,126,40)" fg:x="1140" fg:w="1"/><text x="94.2319%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.9819%" y="213" width="0.0824%" height="15" fill="rgb(229,165,44)" fg:x="1140" fg:w="1"/><text x="94.2319%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="93.9819%" y="197" width="0.0824%" height="15" fill="rgb(247,95,47)" fg:x="1140" fg:w="1"/><text x="94.2319%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.9819%" y="181" width="0.0824%" height="15" fill="rgb(216,140,30)" fg:x="1140" fg:w="1"/><text x="94.2319%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="93.9819%" y="165" width="0.0824%" height="15" fill="rgb(246,214,8)" fg:x="1140" fg:w="1"/><text x="94.2319%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.9819%" y="149" width="0.0824%" height="15" fill="rgb(227,224,15)" fg:x="1140" fg:w="1"/><text x="94.2319%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.9819%" y="133" width="0.0824%" height="15" fill="rgb(233,175,4)" fg:x="1140" fg:w="1"/><text x="94.2319%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.9819%" y="117" width="0.0824%" height="15" fill="rgb(221,66,45)" fg:x="1140" fg:w="1"/><text x="94.2319%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="94.0643%" y="213" width="0.1649%" height="15" fill="rgb(221,178,18)" fg:x="1141" fg:w="2"/><text x="94.3143%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="94.1467%" y="197" width="0.0824%" height="15" fill="rgb(213,81,29)" fg:x="1142" fg:w="1"/><text x="94.3967%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (6 samples, 0.49%)</title><rect x="94.2292%" y="213" width="0.4946%" height="15" fill="rgb(220,89,49)" fg:x="1143" fg:w="6"/><text x="94.4792%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (6 samples, 0.49%)</title><rect x="94.2292%" y="197" width="0.4946%" height="15" fill="rgb(227,60,33)" fg:x="1143" fg:w="6"/><text x="94.4792%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.33%)</title><rect x="94.3941%" y="181" width="0.3298%" height="15" fill="rgb(205,113,12)" fg:x="1145" fg:w="4"/><text x="94.6441%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.33%)</title><rect x="94.3941%" y="165" width="0.3298%" height="15" fill="rgb(211,32,1)" fg:x="1145" fg:w="4"/><text x="94.6441%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.25%)</title><rect x="94.4765%" y="149" width="0.2473%" height="15" fill="rgb(246,2,12)" fg:x="1146" fg:w="3"/><text x="94.7265%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="94.7238%" y="133" width="0.0824%" height="15" fill="rgb(243,37,27)" fg:x="1149" fg:w="1"/><text x="94.9738%" y="143.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.25%)</title><rect x="94.8887%" y="101" width="0.2473%" height="15" fill="rgb(248,211,31)" fg:x="1151" fg:w="3"/><text x="95.1387%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="95.1360%" y="101" width="0.0824%" height="15" fill="rgb(242,146,47)" fg:x="1154" fg:w="1"/><text x="95.3860%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="95.2185%" y="69" width="0.2473%" height="15" fill="rgb(206,70,20)" fg:x="1155" fg:w="3"/><text x="95.4685%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="95.3009%" y="53" width="0.1649%" height="15" fill="rgb(215,10,51)" fg:x="1156" fg:w="2"/><text x="95.5509%" y="63.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="95.3009%" y="37" width="0.1649%" height="15" fill="rgb(243,178,53)" fg:x="1156" fg:w="2"/><text x="95.5509%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.49%)</title><rect x="95.2185%" y="101" width="0.4946%" height="15" fill="rgb(233,221,20)" fg:x="1155" fg:w="6"/><text x="95.4685%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.49%)</title><rect x="95.2185%" y="85" width="0.4946%" height="15" fill="rgb(218,95,35)" fg:x="1155" fg:w="6"/><text x="95.4685%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.25%)</title><rect x="95.4658%" y="69" width="0.2473%" height="15" fill="rgb(229,13,5)" fg:x="1158" fg:w="3"/><text x="95.7158%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (10 samples, 0.82%)</title><rect x="95.7131%" y="101" width="0.8244%" height="15" fill="rgb(252,164,30)" fg:x="1161" fg:w="10"/><text x="95.9631%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (10 samples, 0.82%)</title><rect x="95.7131%" y="85" width="0.8244%" height="15" fill="rgb(232,68,36)" fg:x="1161" fg:w="10"/><text x="95.9631%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (10 samples, 0.82%)</title><rect x="95.7131%" y="69" width="0.8244%" height="15" fill="rgb(219,59,54)" fg:x="1161" fg:w="10"/><text x="95.9631%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 1.90%)</title><rect x="94.7238%" y="197" width="1.8961%" height="15" fill="rgb(250,92,33)" fg:x="1149" fg:w="23"/><text x="94.9738%" y="207.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (23 samples, 1.90%)</title><rect x="94.7238%" y="181" width="1.8961%" height="15" fill="rgb(229,162,54)" fg:x="1149" fg:w="23"/><text x="94.9738%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (23 samples, 1.90%)</title><rect x="94.7238%" y="165" width="1.8961%" height="15" fill="rgb(244,114,52)" fg:x="1149" fg:w="23"/><text x="94.9738%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (23 samples, 1.90%)</title><rect x="94.7238%" y="149" width="1.8961%" height="15" fill="rgb(212,211,43)" fg:x="1149" fg:w="23"/><text x="94.9738%" y="159.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (22 samples, 1.81%)</title><rect x="94.8063%" y="133" width="1.8137%" height="15" fill="rgb(226,147,8)" fg:x="1150" fg:w="22"/><text x="95.0563%" y="143.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (22 samples, 1.81%)</title><rect x="94.8063%" y="117" width="1.8137%" height="15" fill="rgb(226,23,13)" fg:x="1150" fg:w="22"/><text x="95.0563%" y="127.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="96.5375%" y="101" width="0.0824%" height="15" fill="rgb(240,63,4)" fg:x="1171" fg:w="1"/><text x="96.7875%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.6200%" y="181" width="0.0824%" height="15" fill="rgb(221,1,32)" fg:x="1172" fg:w="1"/><text x="96.8700%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.33%)</title><rect x="96.7024%" y="181" width="0.3298%" height="15" fill="rgb(242,117,10)" fg:x="1173" fg:w="4"/><text x="96.9524%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.25%)</title><rect x="97.0322%" y="181" width="0.2473%" height="15" fill="rgb(249,172,44)" fg:x="1177" fg:w="3"/><text x="97.2822%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.1970%" y="165" width="0.0824%" height="15" fill="rgb(244,46,45)" fg:x="1179" fg:w="1"/><text x="97.4470%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.1970%" y="149" width="0.0824%" height="15" fill="rgb(206,43,17)" fg:x="1179" fg:w="1"/><text x="97.4470%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.1970%" y="133" width="0.0824%" height="15" fill="rgb(239,218,39)" fg:x="1179" fg:w="1"/><text x="97.4470%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (40 samples, 3.30%)</title><rect x="94.0643%" y="229" width="3.2976%" height="15" fill="rgb(208,169,54)" fg:x="1141" fg:w="40"/><text x="94.3143%" y="239.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (32 samples, 2.64%)</title><rect x="94.7238%" y="213" width="2.6381%" height="15" fill="rgb(247,25,42)" fg:x="1149" fg:w="32"/><text x="94.9738%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.74%)</title><rect x="96.6200%" y="197" width="0.7420%" height="15" fill="rgb(226,23,31)" fg:x="1172" fg:w="9"/><text x="96.8700%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="97.2795%" y="181" width="0.0824%" height="15" fill="rgb(247,16,28)" fg:x="1180" fg:w="1"/><text x="97.5295%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="97.3619%" y="229" width="0.0824%" height="15" fill="rgb(231,147,38)" fg:x="1181" fg:w="1"/><text x="97.6119%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="97.3619%" y="213" width="0.0824%" height="15" fill="rgb(253,81,48)" fg:x="1181" fg:w="1"/><text x="97.6119%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="97.3619%" y="197" width="0.0824%" height="15" fill="rgb(249,222,43)" fg:x="1181" fg:w="1"/><text x="97.6119%" y="207.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="97.4444%" y="229" width="0.0824%" height="15" fill="rgb(221,3,27)" fg:x="1182" fg:w="1"/><text x="97.6944%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.4444%" y="213" width="0.0824%" height="15" fill="rgb(228,180,5)" fg:x="1182" fg:w="1"/><text x="97.6944%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="97.4444%" y="197" width="0.0824%" height="15" fill="rgb(227,131,42)" fg:x="1182" fg:w="1"/><text x="97.6944%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="97.4444%" y="181" width="0.0824%" height="15" fill="rgb(212,3,39)" fg:x="1182" fg:w="1"/><text x="97.6944%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.4444%" y="165" width="0.0824%" height="15" fill="rgb(226,45,5)" fg:x="1182" fg:w="1"/><text x="97.6944%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.4444%" y="149" width="0.0824%" height="15" fill="rgb(215,167,45)" fg:x="1182" fg:w="1"/><text x="97.6944%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.4444%" y="133" width="0.0824%" height="15" fill="rgb(250,218,53)" fg:x="1182" fg:w="1"/><text x="97.6944%" y="143.50"></text></g><g><title>indefinite::rules::number::Number::check (53 samples, 4.37%)</title><rect x="93.2399%" y="293" width="4.3693%" height="15" fill="rgb(207,140,0)" fg:x="1131" fg:w="53"/><text x="93.4899%" y="303.50">indef..</text></g><g><title>regex::regex::string::Regex::new (46 samples, 3.79%)</title><rect x="93.8170%" y="277" width="3.7923%" height="15" fill="rgb(238,133,51)" fg:x="1138" fg:w="46"/><text x="94.0670%" y="287.50">rege..</text></g><g><title>regex::builders::Builder::build_one_string (45 samples, 3.71%)</title><rect x="93.8994%" y="261" width="3.7098%" height="15" fill="rgb(218,203,53)" fg:x="1139" fg:w="45"/><text x="94.1494%" y="271.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (45 samples, 3.71%)</title><rect x="93.8994%" y="245" width="3.7098%" height="15" fill="rgb(226,184,25)" fg:x="1139" fg:w="45"/><text x="94.1494%" y="255.50">rege..</text></g><g><title>regex_syntax::hir::translate::TranslatorBuilder::build (1 samples, 0.08%)</title><rect x="97.5268%" y="229" width="0.0824%" height="15" fill="rgb(231,121,21)" fg:x="1183" fg:w="1"/><text x="97.7768%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.6917%" y="213" width="0.0824%" height="15" fill="rgb(251,14,34)" fg:x="1185" fg:w="1"/><text x="97.9417%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="97.7741%" y="213" width="0.0824%" height="15" fill="rgb(249,193,11)" fg:x="1186" fg:w="1"/><text x="98.0241%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.7741%" y="197" width="0.0824%" height="15" fill="rgb(220,172,37)" fg:x="1186" fg:w="1"/><text x="98.0241%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="97.7741%" y="181" width="0.0824%" height="15" fill="rgb(231,229,43)" fg:x="1186" fg:w="1"/><text x="98.0241%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.7741%" y="165" width="0.0824%" height="15" fill="rgb(250,161,5)" fg:x="1186" fg:w="1"/><text x="98.0241%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="97.7741%" y="149" width="0.0824%" height="15" fill="rgb(218,225,18)" fg:x="1186" fg:w="1"/><text x="98.0241%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (1 samples, 0.08%)</title><rect x="97.8566%" y="213" width="0.0824%" height="15" fill="rgb(245,45,42)" fg:x="1187" fg:w="1"/><text x="98.1066%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="97.8566%" y="197" width="0.0824%" height="15" fill="rgb(211,115,1)" fg:x="1187" fg:w="1"/><text x="98.1066%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="97.8566%" y="181" width="0.0824%" height="15" fill="rgb(248,133,52)" fg:x="1187" fg:w="1"/><text x="98.1066%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="97.9390%" y="181" width="0.0824%" height="15" fill="rgb(238,100,21)" fg:x="1188" fg:w="1"/><text x="98.1890%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="97.9390%" y="165" width="0.0824%" height="15" fill="rgb(247,144,11)" fg:x="1188" fg:w="1"/><text x="98.1890%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (5 samples, 0.41%)</title><rect x="97.6917%" y="261" width="0.4122%" height="15" fill="rgb(206,164,16)" fg:x="1185" fg:w="5"/><text x="97.9417%" y="271.50"></text></g><g><title>regex::builders::Builder::build_one_string (5 samples, 0.41%)</title><rect x="97.6917%" y="245" width="0.4122%" height="15" fill="rgb(222,34,3)" fg:x="1185" fg:w="5"/><text x="97.9417%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (5 samples, 0.41%)</title><rect x="97.6917%" y="229" width="0.4122%" height="15" fill="rgb(248,82,4)" fg:x="1185" fg:w="5"/><text x="97.9417%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="97.9390%" y="213" width="0.1649%" height="15" fill="rgb(228,81,46)" fg:x="1188" fg:w="2"/><text x="98.1890%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="97.9390%" y="197" width="0.1649%" height="15" fill="rgb(227,67,47)" fg:x="1188" fg:w="2"/><text x="98.1890%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="98.0214%" y="181" width="0.0824%" height="15" fill="rgb(215,93,53)" fg:x="1189" fg:w="1"/><text x="98.2714%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (110 samples, 9.07%)</title><rect x="89.2003%" y="373" width="9.0684%" height="15" fill="rgb(248,194,39)" fg:x="1082" fg:w="110"/><text x="89.4503%" y="383.50">&lt;&amp;kernel::mod..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (100 samples, 8.24%)</title><rect x="90.0247%" y="357" width="8.2440%" height="15" fill="rgb(215,5,19)" fg:x="1092" fg:w="100"/><text x="90.2747%" y="367.50">plugins_cor..</text></g><g><title>indefinite::indefinite (99 samples, 8.16%)</title><rect x="90.1072%" y="341" width="8.1616%" height="15" fill="rgb(226,215,51)" fg:x="1093" fg:w="99"/><text x="90.3572%" y="351.50">indefinite:..</text></g><g><title>indefinite::methods::indefinite (99 samples, 8.16%)</title><rect x="90.1072%" y="325" width="8.1616%" height="15" fill="rgb(225,56,26)" fg:x="1093" fg:w="99"/><text x="90.3572%" y="335.50">indefinite:..</text></g><g><title>indefinite::methods::apply_rules (99 samples, 8.16%)</title><rect x="90.1072%" y="309" width="8.1616%" height="15" fill="rgb(222,75,29)" fg:x="1093" fg:w="99"/><text x="90.3572%" y="319.50">indefinite:..</text></g><g><title>indefinite::rules::other::Other::run (8 samples, 0.66%)</title><rect x="97.6092%" y="293" width="0.6595%" height="15" fill="rgb(236,139,6)" fg:x="1184" fg:w="8"/><text x="97.8592%" y="303.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (7 samples, 0.58%)</title><rect x="97.6917%" y="277" width="0.5771%" height="15" fill="rgb(223,137,36)" fg:x="1185" fg:w="7"/><text x="97.9417%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="98.1039%" y="261" width="0.1649%" height="15" fill="rgb(226,99,2)" fg:x="1190" fg:w="2"/><text x="98.3539%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="98.1039%" y="245" width="0.1649%" height="15" fill="rgb(206,133,23)" fg:x="1190" fg:w="2"/><text x="98.3539%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="98.1039%" y="229" width="0.1649%" height="15" fill="rgb(243,173,15)" fg:x="1190" fg:w="2"/><text x="98.3539%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="98.1039%" y="213" width="0.1649%" height="15" fill="rgb(228,69,28)" fg:x="1190" fg:w="2"/><text x="98.3539%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="98.1039%" y="197" width="0.1649%" height="15" fill="rgb(212,51,22)" fg:x="1190" fg:w="2"/><text x="98.3539%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="98.1863%" y="181" width="0.0824%" height="15" fill="rgb(227,113,0)" fg:x="1191" fg:w="1"/><text x="98.4363%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2688%" y="357" width="0.0824%" height="15" fill="rgb(252,84,27)" fg:x="1192" fg:w="1"/><text x="98.5188%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.3512%" y="325" width="0.0824%" height="15" fill="rgb(223,145,39)" fg:x="1193" fg:w="1"/><text x="98.6012%" y="335.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.4336%" y="277" width="0.1649%" height="15" fill="rgb(239,219,30)" fg:x="1194" fg:w="2"/><text x="98.6836%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.5161%" y="261" width="0.0824%" height="15" fill="rgb(224,196,39)" fg:x="1195" fg:w="1"/><text x="98.7661%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5161%" y="245" width="0.0824%" height="15" fill="rgb(205,35,43)" fg:x="1195" fg:w="1"/><text x="98.7661%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.25%)</title><rect x="98.4336%" y="325" width="0.2473%" height="15" fill="rgb(228,201,21)" fg:x="1194" fg:w="3"/><text x="98.6836%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.25%)</title><rect x="98.4336%" y="309" width="0.2473%" height="15" fill="rgb(237,118,16)" fg:x="1194" fg:w="3"/><text x="98.6836%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.25%)</title><rect x="98.4336%" y="293" width="0.2473%" height="15" fill="rgb(241,17,19)" fg:x="1194" fg:w="3"/><text x="98.6836%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.5985%" y="277" width="0.0824%" height="15" fill="rgb(214,10,25)" fg:x="1196" fg:w="1"/><text x="98.8485%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5985%" y="261" width="0.0824%" height="15" fill="rgb(238,37,29)" fg:x="1196" fg:w="1"/><text x="98.8485%" y="271.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.49%)</title><rect x="98.2688%" y="373" width="0.4946%" height="15" fill="rgb(253,83,25)" fg:x="1192" fg:w="6"/><text x="98.5188%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="98.3512%" y="357" width="0.4122%" height="15" fill="rgb(234,192,12)" fg:x="1193" fg:w="5"/><text x="98.6012%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="98.3512%" y="341" width="0.4122%" height="15" fill="rgb(241,216,45)" fg:x="1193" fg:w="5"/><text x="98.6012%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u32 (1 samples, 0.08%)</title><rect x="98.6810%" y="325" width="0.0824%" height="15" fill="rgb(242,22,33)" fg:x="1197" fg:w="1"/><text x="98.9310%" y="335.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="98.7634%" y="309" width="0.1649%" height="15" fill="rgb(231,105,49)" fg:x="1198" fg:w="2"/><text x="99.0134%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.7634%" y="293" width="0.1649%" height="15" fill="rgb(218,204,15)" fg:x="1198" fg:w="2"/><text x="99.0134%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.7634%" y="277" width="0.1649%" height="15" fill="rgb(235,138,41)" fg:x="1198" fg:w="2"/><text x="99.0134%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="98.7634%" y="261" width="0.1649%" height="15" fill="rgb(246,0,9)" fg:x="1198" fg:w="2"/><text x="99.0134%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.7634%" y="245" width="0.1649%" height="15" fill="rgb(210,74,4)" fg:x="1198" fg:w="2"/><text x="99.0134%" y="255.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.7634%" y="229" width="0.1649%" height="15" fill="rgb(250,60,41)" fg:x="1198" fg:w="2"/><text x="99.0134%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.7634%" y="213" width="0.1649%" height="15" fill="rgb(220,115,12)" fg:x="1198" fg:w="2"/><text x="99.0134%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.7634%" y="197" width="0.1649%" height="15" fill="rgb(237,100,13)" fg:x="1198" fg:w="2"/><text x="99.0134%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.7634%" y="181" width="0.1649%" height="15" fill="rgb(213,55,26)" fg:x="1198" fg:w="2"/><text x="99.0134%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.7634%" y="165" width="0.1649%" height="15" fill="rgb(216,17,4)" fg:x="1198" fg:w="2"/><text x="99.0134%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.7634%" y="149" width="0.1649%" height="15" fill="rgb(220,153,47)" fg:x="1198" fg:w="2"/><text x="99.0134%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.7634%" y="133" width="0.1649%" height="15" fill="rgb(215,131,9)" fg:x="1198" fg:w="2"/><text x="99.0134%" y="143.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.8458%" y="117" width="0.0824%" height="15" fill="rgb(233,46,42)" fg:x="1199" fg:w="1"/><text x="99.0958%" y="127.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.8458%" y="101" width="0.0824%" height="15" fill="rgb(226,86,7)" fg:x="1199" fg:w="1"/><text x="99.0958%" y="111.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.25%)</title><rect x="98.7634%" y="373" width="0.2473%" height="15" fill="rgb(239,226,21)" fg:x="1198" fg:w="3"/><text x="99.0134%" y="383.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.25%)</title><rect x="98.7634%" y="357" width="0.2473%" height="15" fill="rgb(244,137,22)" fg:x="1198" fg:w="3"/><text x="99.0134%" y="367.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.25%)</title><rect x="98.7634%" y="341" width="0.2473%" height="15" fill="rgb(211,139,35)" fg:x="1198" fg:w="3"/><text x="99.0134%" y="351.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.25%)</title><rect x="98.7634%" y="325" width="0.2473%" height="15" fill="rgb(214,62,50)" fg:x="1198" fg:w="3"/><text x="99.0134%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="98.9283%" y="309" width="0.0824%" height="15" fill="rgb(212,113,44)" fg:x="1200" fg:w="1"/><text x="99.1783%" y="319.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.9283%" y="293" width="0.0824%" height="15" fill="rgb(226,150,43)" fg:x="1200" fg:w="1"/><text x="99.1783%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9283%" y="277" width="0.0824%" height="15" fill="rgb(250,71,37)" fg:x="1200" fg:w="1"/><text x="99.1783%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.9283%" y="261" width="0.0824%" height="15" fill="rgb(219,76,19)" fg:x="1200" fg:w="1"/><text x="99.1783%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.9283%" y="245" width="0.0824%" height="15" fill="rgb(250,39,11)" fg:x="1200" fg:w="1"/><text x="99.1783%" y="255.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (129 samples, 10.63%)</title><rect x="88.4584%" y="597" width="10.6348%" height="15" fill="rgb(230,64,31)" fg:x="1073" fg:w="129"/><text x="88.7084%" y="607.50">&lt;engine::session..</text></g><g><title>kernel::plugins::mw::apply_middleware (129 samples, 10.63%)</title><rect x="88.4584%" y="581" width="10.6348%" height="15" fill="rgb(208,222,23)" fg:x="1073" fg:w="129"/><text x="88.7084%" y="591.50">kernel::plugins:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (129 samples, 10.63%)</title><rect x="88.4584%" y="565" width="10.6348%" height="15" fill="rgb(227,125,18)" fg:x="1073" fg:w="129"/><text x="88.7084%" y="575.50">kernel::plugins:..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (129 samples, 10.63%)</title><rect x="88.4584%" y="549" width="10.6348%" height="15" fill="rgb(234,210,9)" fg:x="1073" fg:w="129"/><text x="88.7084%" y="559.50">&lt;engine::session..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (126 samples, 10.39%)</title><rect x="88.7057%" y="533" width="10.3875%" height="15" fill="rgb(217,127,24)" fg:x="1076" fg:w="126"/><text x="88.9557%" y="543.50">kernel::plugins..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (126 samples, 10.39%)</title><rect x="88.7057%" y="517" width="10.3875%" height="15" fill="rgb(239,141,48)" fg:x="1076" fg:w="126"/><text x="88.9557%" y="527.50">&lt;plugins_dynlib..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (126 samples, 10.39%)</title><rect x="88.7057%" y="501" width="10.3875%" height="15" fill="rgb(227,109,8)" fg:x="1076" fg:w="126"/><text x="88.9557%" y="511.50">kernel::plugins..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (126 samples, 10.39%)</title><rect x="88.7057%" y="485" width="10.3875%" height="15" fill="rgb(235,184,23)" fg:x="1076" fg:w="126"/><text x="88.9557%" y="495.50">core::ops::func..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (126 samples, 10.39%)</title><rect x="88.7057%" y="469" width="10.3875%" height="15" fill="rgb(227,226,48)" fg:x="1076" fg:w="126"/><text x="88.9557%" y="479.50">kernel::plugins..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (126 samples, 10.39%)</title><rect x="88.7057%" y="453" width="10.3875%" height="15" fill="rgb(206,150,11)" fg:x="1076" fg:w="126"/><text x="88.9557%" y="463.50">core::ops::func..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (126 samples, 10.39%)</title><rect x="88.7057%" y="437" width="10.3875%" height="15" fill="rgb(254,2,33)" fg:x="1076" fg:w="126"/><text x="88.9557%" y="447.50">&lt;alloc::boxed::..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (126 samples, 10.39%)</title><rect x="88.7057%" y="421" width="10.3875%" height="15" fill="rgb(243,160,20)" fg:x="1076" fg:w="126"/><text x="88.9557%" y="431.50">&lt;engine::sessio..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (125 samples, 10.31%)</title><rect x="88.7881%" y="405" width="10.3050%" height="15" fill="rgb(218,208,30)" fg:x="1077" fg:w="125"/><text x="89.0381%" y="415.50">&lt;plugins_core::..</text></g><g><title>plugins_core::looking::model::new_area_observation (120 samples, 9.89%)</title><rect x="89.2003%" y="389" width="9.8928%" height="15" fill="rgb(224,120,49)" fg:x="1082" fg:w="120"/><text x="89.4503%" y="399.50">plugins_core::..</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="99.0107%" y="373" width="0.0824%" height="15" fill="rgb(246,12,2)" fg:x="1201" fg:w="1"/><text x="99.2607%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.0107%" y="357" width="0.0824%" height="15" fill="rgb(236,117,3)" fg:x="1201" fg:w="1"/><text x="99.2607%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0932%" y="565" width="0.0824%" height="15" fill="rgb(216,128,52)" fg:x="1202" fg:w="1"/><text x="99.3432%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (2 samples, 0.16%)</title><rect x="99.0932%" y="597" width="0.1649%" height="15" fill="rgb(246,145,19)" fg:x="1202" fg:w="2"/><text x="99.3432%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="99.0932%" y="581" width="0.1649%" height="15" fill="rgb(222,11,46)" fg:x="1202" fg:w="2"/><text x="99.3432%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.1756%" y="565" width="0.0824%" height="15" fill="rgb(245,82,36)" fg:x="1203" fg:w="1"/><text x="99.4256%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.2580%" y="501" width="0.0824%" height="15" fill="rgb(250,73,51)" fg:x="1204" fg:w="1"/><text x="99.5080%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.2580%" y="485" width="0.0824%" height="15" fill="rgb(221,189,23)" fg:x="1204" fg:w="1"/><text x="99.5080%" y="495.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.2580%" y="469" width="0.0824%" height="15" fill="rgb(210,33,7)" fg:x="1204" fg:w="1"/><text x="99.5080%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.2580%" y="453" width="0.0824%" height="15" fill="rgb(210,107,22)" fg:x="1204" fg:w="1"/><text x="99.5080%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.2580%" y="437" width="0.0824%" height="15" fill="rgb(222,116,37)" fg:x="1204" fg:w="1"/><text x="99.5080%" y="447.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.2580%" y="421" width="0.0824%" height="15" fill="rgb(254,17,48)" fg:x="1204" fg:w="1"/><text x="99.5080%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.2580%" y="405" width="0.0824%" height="15" fill="rgb(224,36,32)" fg:x="1204" fg:w="1"/><text x="99.5080%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.2580%" y="389" width="0.0824%" height="15" fill="rgb(232,90,46)" fg:x="1204" fg:w="1"/><text x="99.5080%" y="399.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.2580%" y="373" width="0.0824%" height="15" fill="rgb(241,66,40)" fg:x="1204" fg:w="1"/><text x="99.5080%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.2580%" y="357" width="0.0824%" height="15" fill="rgb(249,184,29)" fg:x="1204" fg:w="1"/><text x="99.5080%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2580%" y="341" width="0.0824%" height="15" fill="rgb(231,181,1)" fg:x="1204" fg:w="1"/><text x="99.5080%" y="351.50"></text></g><g><title>engine::session::internal::Added::find_refs (2 samples, 0.16%)</title><rect x="99.2580%" y="581" width="0.1649%" height="15" fill="rgb(224,94,2)" fg:x="1204" fg:w="2"/><text x="99.5080%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.2580%" y="565" width="0.1649%" height="15" fill="rgb(229,170,15)" fg:x="1204" fg:w="2"/><text x="99.5080%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.2580%" y="549" width="0.1649%" height="15" fill="rgb(240,127,35)" fg:x="1204" fg:w="2"/><text x="99.5080%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="99.2580%" y="533" width="0.1649%" height="15" fill="rgb(248,196,34)" fg:x="1204" fg:w="2"/><text x="99.5080%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.2580%" y="517" width="0.1649%" height="15" fill="rgb(236,137,7)" fg:x="1204" fg:w="2"/><text x="99.5080%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.3405%" y="501" width="0.0824%" height="15" fill="rgb(235,127,16)" fg:x="1205" fg:w="1"/><text x="99.5905%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3405%" y="485" width="0.0824%" height="15" fill="rgb(250,192,54)" fg:x="1205" fg:w="1"/><text x="99.5905%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.3405%" y="469" width="0.0824%" height="15" fill="rgb(218,98,20)" fg:x="1205" fg:w="1"/><text x="99.5905%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="99.3405%" y="453" width="0.0824%" height="15" fill="rgb(230,176,47)" fg:x="1205" fg:w="1"/><text x="99.5905%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.3405%" y="437" width="0.0824%" height="15" fill="rgb(244,2,33)" fg:x="1205" fg:w="1"/><text x="99.5905%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.3405%" y="421" width="0.0824%" height="15" fill="rgb(231,100,17)" fg:x="1205" fg:w="1"/><text x="99.5905%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.3405%" y="405" width="0.0824%" height="15" fill="rgb(245,23,12)" fg:x="1205" fg:w="1"/><text x="99.5905%" y="415.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.25%)</title><rect x="99.2580%" y="597" width="0.2473%" height="15" fill="rgb(249,55,22)" fg:x="1204" fg:w="3"/><text x="99.5080%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="99.4229%" y="581" width="0.0824%" height="15" fill="rgb(207,134,9)" fg:x="1206" fg:w="1"/><text x="99.6729%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4229%" y="565" width="0.0824%" height="15" fill="rgb(218,134,0)" fg:x="1206" fg:w="1"/><text x="99.6729%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4229%" y="549" width="0.0824%" height="15" fill="rgb(213,212,33)" fg:x="1206" fg:w="1"/><text x="99.6729%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5054%" y="549" width="0.0824%" height="15" fill="rgb(252,106,18)" fg:x="1207" fg:w="1"/><text x="99.7554%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5054%" y="533" width="0.0824%" height="15" fill="rgb(208,126,42)" fg:x="1207" fg:w="1"/><text x="99.7554%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5054%" y="517" width="0.0824%" height="15" fill="rgb(246,175,29)" fg:x="1207" fg:w="1"/><text x="99.7554%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5054%" y="501" width="0.0824%" height="15" fill="rgb(215,13,50)" fg:x="1207" fg:w="1"/><text x="99.7554%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5054%" y="485" width="0.0824%" height="15" fill="rgb(216,172,15)" fg:x="1207" fg:w="1"/><text x="99.7554%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5054%" y="469" width="0.0824%" height="15" fill="rgb(212,103,13)" fg:x="1207" fg:w="1"/><text x="99.7554%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.5878%" y="469" width="0.0824%" height="15" fill="rgb(231,171,36)" fg:x="1208" fg:w="1"/><text x="99.8378%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6702%" y="453" width="0.0824%" height="15" fill="rgb(250,123,20)" fg:x="1209" fg:w="1"/><text x="99.9202%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6702%" y="437" width="0.0824%" height="15" fill="rgb(212,53,50)" fg:x="1209" fg:w="1"/><text x="99.9202%" y="447.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.6702%" y="421" width="0.0824%" height="15" fill="rgb(243,54,12)" fg:x="1209" fg:w="1"/><text x="99.9202%" y="431.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6702%" y="405" width="0.0824%" height="15" fill="rgb(234,101,34)" fg:x="1209" fg:w="1"/><text x="99.9202%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.25%)</title><rect x="99.5878%" y="549" width="0.2473%" height="15" fill="rgb(254,67,22)" fg:x="1208" fg:w="3"/><text x="99.8378%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="99.5878%" y="533" width="0.2473%" height="15" fill="rgb(250,35,47)" fg:x="1208" fg:w="3"/><text x="99.8378%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="99.5878%" y="517" width="0.2473%" height="15" fill="rgb(226,126,38)" fg:x="1208" fg:w="3"/><text x="99.8378%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.25%)</title><rect x="99.5878%" y="501" width="0.2473%" height="15" fill="rgb(216,138,53)" fg:x="1208" fg:w="3"/><text x="99.8378%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="99.5878%" y="485" width="0.2473%" height="15" fill="rgb(246,199,43)" fg:x="1208" fg:w="3"/><text x="99.8378%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.6702%" y="469" width="0.1649%" height="15" fill="rgb(232,125,11)" fg:x="1209" fg:w="2"/><text x="99.9202%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7527%" y="453" width="0.0824%" height="15" fill="rgb(218,219,45)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7527%" y="437" width="0.0824%" height="15" fill="rgb(216,102,54)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.7527%" y="421" width="0.0824%" height="15" fill="rgb(250,228,7)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7527%" y="405" width="0.0824%" height="15" fill="rgb(226,125,25)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7527%" y="389" width="0.0824%" height="15" fill="rgb(224,165,27)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.7527%" y="373" width="0.0824%" height="15" fill="rgb(233,86,3)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7527%" y="357" width="0.0824%" height="15" fill="rgb(228,116,20)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7527%" y="341" width="0.0824%" height="15" fill="rgb(209,192,17)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.7527%" y="325" width="0.0824%" height="15" fill="rgb(224,88,34)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8351%" y="485" width="0.0824%" height="15" fill="rgb(233,38,6)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8351%" y="469" width="0.0824%" height="15" fill="rgb(212,59,30)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8351%" y="453" width="0.0824%" height="15" fill="rgb(213,80,3)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="463.50"></text></g><g><title>all (1,213 samples, 100%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(251,178,7)" fg:x="0" fg:w="1213"/><text x="0.2500%" y="991.50"></text></g><g><title>simple-605d0d2e (1,213 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(213,154,26)" fg:x="0" fg:w="1213"/><text x="0.2500%" y="975.50">simple-605d0d2e</text></g><g><title>_start (1,213 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(238,165,49)" fg:x="0" fg:w="1213"/><text x="0.2500%" y="959.50">_start</text></g><g><title>__libc_start_main (1,213 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(248,91,46)" fg:x="0" fg:w="1213"/><text x="0.2500%" y="943.50">__libc_start_main</text></g><g><title>main (1,213 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(244,21,52)" fg:x="0" fg:w="1213"/><text x="0.2500%" y="927.50">main</text></g><g><title>std::rt::lang_start_internal (1,213 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(247,122,20)" fg:x="0" fg:w="1213"/><text x="0.2500%" y="911.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,213 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(218,27,9)" fg:x="0" fg:w="1213"/><text x="0.2500%" y="895.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,213 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(246,7,6)" fg:x="0" fg:w="1213"/><text x="0.2500%" y="879.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,213 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(227,135,54)" fg:x="0" fg:w="1213"/><text x="0.2500%" y="863.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,213 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(247,14,11)" fg:x="0" fg:w="1213"/><text x="0.2500%" y="847.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,213 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(206,149,34)" fg:x="0" fg:w="1213"/><text x="0.2500%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,213 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(227,228,4)" fg:x="0" fg:w="1213"/><text x="0.2500%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,213 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(238,218,28)" fg:x="0" fg:w="1213"/><text x="0.2500%" y="799.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,213 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(252,86,40)" fg:x="0" fg:w="1213"/><text x="0.2500%" y="783.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,213 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(251,225,11)" fg:x="0" fg:w="1213"/><text x="0.2500%" y="767.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,213 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(206,46,49)" fg:x="0" fg:w="1213"/><text x="0.2500%" y="751.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,213 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(245,128,24)" fg:x="0" fg:w="1213"/><text x="0.2500%" y="735.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,213 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(219,177,34)" fg:x="0" fg:w="1213"/><text x="0.2500%" y="719.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,213 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(218,60,48)" fg:x="0" fg:w="1213"/><text x="0.2500%" y="703.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (263 samples, 21.68%)</title><rect x="78.3182%" y="677" width="21.6818%" height="15" fill="rgb(221,11,5)" fg:x="950" fg:w="263"/><text x="78.5682%" y="687.50">&lt;criterion::routine::Function&lt;M,F,..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (263 samples, 21.68%)</title><rect x="78.3182%" y="661" width="21.6818%" height="15" fill="rgb(220,148,13)" fg:x="950" fg:w="263"/><text x="78.5682%" y="671.50">criterion::bencher::Bencher&lt;M&gt;::it..</text></g><g><title>tests::evaluate_text_in_new_domain (263 samples, 21.68%)</title><rect x="78.3182%" y="645" width="21.6818%" height="15" fill="rgb(210,16,3)" fg:x="950" fg:w="263"/><text x="78.5682%" y="655.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (140 samples, 11.54%)</title><rect x="88.4584%" y="629" width="11.5416%" height="15" fill="rgb(236,80,2)" fg:x="1073" fg:w="140"/><text x="88.7084%" y="639.50">engine::session::..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (140 samples, 11.54%)</title><rect x="88.4584%" y="613" width="11.5416%" height="15" fill="rgb(239,129,19)" fg:x="1073" fg:w="140"/><text x="88.7084%" y="623.50">engine::session::..</text></g><g><title>kernel::model::EntityPtrResolver::world (6 samples, 0.49%)</title><rect x="99.5054%" y="597" width="0.4946%" height="15" fill="rgb(220,106,35)" fg:x="1207" fg:w="6"/><text x="99.7554%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.49%)</title><rect x="99.5054%" y="581" width="0.4946%" height="15" fill="rgb(252,139,45)" fg:x="1207" fg:w="6"/><text x="99.7554%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.49%)</title><rect x="99.5054%" y="565" width="0.4946%" height="15" fill="rgb(229,8,36)" fg:x="1207" fg:w="6"/><text x="99.7554%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.8351%" y="549" width="0.1649%" height="15" fill="rgb(230,126,33)" fg:x="1211" fg:w="2"/><text x="100.0851%" y="559.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.8351%" y="533" width="0.1649%" height="15" fill="rgb(239,140,21)" fg:x="1211" fg:w="2"/><text x="100.0851%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8351%" y="517" width="0.1649%" height="15" fill="rgb(254,104,9)" fg:x="1211" fg:w="2"/><text x="100.0851%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8351%" y="501" width="0.1649%" height="15" fill="rgb(239,52,14)" fg:x="1211" fg:w="2"/><text x="100.0851%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.9176%" y="485" width="0.0824%" height="15" fill="rgb(208,227,44)" fg:x="1212" fg:w="1"/><text x="100.1676%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.9176%" y="469" width="0.0824%" height="15" fill="rgb(246,18,19)" fg:x="1212" fg:w="1"/><text x="100.1676%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="99.9176%" y="453" width="0.0824%" height="15" fill="rgb(235,228,25)" fg:x="1212" fg:w="1"/><text x="100.1676%" y="463.50"></text></g></svg></svg>