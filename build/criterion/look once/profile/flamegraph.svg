<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1244"><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0000%" y="725" width="0.0804%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0000%" y="741" width="0.1608%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.0804%" y="725" width="0.0804%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.3304%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0804%" y="709" width="0.0804%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.3304%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3215%" y="661" width="0.0804%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="1"/><text x="0.5715%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5627%" y="645" width="0.0804%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="1"/><text x="0.8127%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (7 samples, 0.56%)</title><rect x="0.1608%" y="725" width="0.5627%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="7"/><text x="0.4108%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.1608%" y="709" width="0.5627%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="7"/><text x="0.4108%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.40%)</title><rect x="0.3215%" y="693" width="0.4019%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="5"/><text x="0.5715%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (5 samples, 0.40%)</title><rect x="0.3215%" y="677" width="0.4019%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="5"/><text x="0.5715%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (4 samples, 0.32%)</title><rect x="0.4019%" y="661" width="0.3215%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="4"/><text x="0.6519%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::plugins::ArgumentType&gt; (1 samples, 0.08%)</title><rect x="0.6431%" y="645" width="0.0804%" height="15" fill="rgb(240,193,28)" fg:x="8" fg:w="1"/><text x="0.8931%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7235%" y="693" width="0.0804%" height="15" fill="rgb(216,20,37)" fg:x="9" fg:w="1"/><text x="0.9735%" y="703.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.8039%" y="661" width="0.1608%" height="15" fill="rgb(206,188,39)" fg:x="10" fg:w="2"/><text x="1.0539%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.9646%" y="661" width="0.0804%" height="15" fill="rgb(217,207,13)" fg:x="12" fg:w="1"/><text x="1.2146%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.0450%" y="629" width="0.0804%" height="15" fill="rgb(231,73,38)" fg:x="13" fg:w="1"/><text x="1.2950%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2058%" y="613" width="0.0804%" height="15" fill="rgb(225,20,46)" fg:x="15" fg:w="1"/><text x="1.4558%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="0.8039%" y="677" width="0.6431%" height="15" fill="rgb(210,31,41)" fg:x="10" fg:w="8"/><text x="1.0539%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="1.0450%" y="661" width="0.4019%" height="15" fill="rgb(221,200,47)" fg:x="13" fg:w="5"/><text x="1.2950%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="1.0450%" y="645" width="0.4019%" height="15" fill="rgb(226,26,5)" fg:x="13" fg:w="5"/><text x="1.2950%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="1.1254%" y="629" width="0.3215%" height="15" fill="rgb(249,33,26)" fg:x="14" fg:w="4"/><text x="1.3754%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.2862%" y="613" width="0.1608%" height="15" fill="rgb(235,183,28)" fg:x="16" fg:w="2"/><text x="1.5362%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.2862%" y="597" width="0.1608%" height="15" fill="rgb(221,5,38)" fg:x="16" fg:w="2"/><text x="1.5362%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.6077%" y="629" width="0.0804%" height="15" fill="rgb(247,18,42)" fg:x="20" fg:w="1"/><text x="1.8577%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.6881%" y="629" width="0.1608%" height="15" fill="rgb(241,131,45)" fg:x="21" fg:w="2"/><text x="1.9381%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.8489%" y="613" width="0.0804%" height="15" fill="rgb(249,31,29)" fg:x="23" fg:w="1"/><text x="2.0989%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.8489%" y="597" width="0.0804%" height="15" fill="rgb(225,111,53)" fg:x="23" fg:w="1"/><text x="2.0989%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8489%" y="581" width="0.0804%" height="15" fill="rgb(238,160,17)" fg:x="23" fg:w="1"/><text x="2.0989%" y="591.50"></text></g><g><title>__libc_free (5 samples, 0.40%)</title><rect x="1.9293%" y="613" width="0.4019%" height="15" fill="rgb(214,148,48)" fg:x="24" fg:w="5"/><text x="2.1793%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 1.05%)</title><rect x="1.4469%" y="677" width="1.0450%" height="15" fill="rgb(232,36,49)" fg:x="18" fg:w="13"/><text x="1.6969%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 1.05%)</title><rect x="1.4469%" y="661" width="1.0450%" height="15" fill="rgb(209,103,24)" fg:x="18" fg:w="13"/><text x="1.6969%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.96%)</title><rect x="1.5273%" y="645" width="0.9646%" height="15" fill="rgb(229,88,8)" fg:x="19" fg:w="12"/><text x="1.7773%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="1.8489%" y="629" width="0.6431%" height="15" fill="rgb(213,181,19)" fg:x="23" fg:w="8"/><text x="2.0989%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="2.3312%" y="613" width="0.1608%" height="15" fill="rgb(254,191,54)" fg:x="29" fg:w="2"/><text x="2.5812%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.4116%" y="597" width="0.0804%" height="15" fill="rgb(241,83,37)" fg:x="30" fg:w="1"/><text x="2.6616%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 2.41%)</title><rect x="0.1608%" y="741" width="2.4116%" height="15" fill="rgb(233,36,39)" fg:x="2" fg:w="30"/><text x="0.4108%" y="751.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (23 samples, 1.85%)</title><rect x="0.7235%" y="725" width="1.8489%" height="15" fill="rgb(226,3,54)" fg:x="9" fg:w="23"/><text x="0.9735%" y="735.50">c..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 1.85%)</title><rect x="0.7235%" y="709" width="1.8489%" height="15" fill="rgb(245,192,40)" fg:x="9" fg:w="23"/><text x="0.9735%" y="719.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (22 samples, 1.77%)</title><rect x="0.8039%" y="693" width="1.7685%" height="15" fill="rgb(238,167,29)" fg:x="10" fg:w="22"/><text x="1.0539%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.4920%" y="677" width="0.0804%" height="15" fill="rgb(232,182,51)" fg:x="31" fg:w="1"/><text x="2.7420%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::begin (1 samples, 0.08%)</title><rect x="2.6527%" y="693" width="0.0804%" height="15" fill="rgb(231,60,39)" fg:x="33" fg:w="1"/><text x="2.9027%" y="703.50"></text></g><g><title>anyhow::error::object_drop (1 samples, 0.08%)</title><rect x="2.9743%" y="645" width="0.0804%" height="15" fill="rgb(208,69,12)" fg:x="37" fg:w="1"/><text x="3.2243%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.9743%" y="629" width="0.0804%" height="15" fill="rgb(235,93,37)" fg:x="37" fg:w="1"/><text x="3.2243%" y="639.50"></text></g><g><title>dlerror (5 samples, 0.40%)</title><rect x="3.0547%" y="629" width="0.4019%" height="15" fill="rgb(213,116,39)" fg:x="38" fg:w="5"/><text x="3.3047%" y="639.50"></text></g><g><title>__asprintf (3 samples, 0.24%)</title><rect x="3.2154%" y="613" width="0.2412%" height="15" fill="rgb(222,207,29)" fg:x="40" fg:w="3"/><text x="3.4654%" y="623.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (16 samples, 1.29%)</title><rect x="2.7331%" y="661" width="1.2862%" height="15" fill="rgb(206,96,30)" fg:x="34" fg:w="16"/><text x="2.9831%" y="671.50"></text></g><g><title>libloading::os::unix::Library::open (12 samples, 0.96%)</title><rect x="3.0547%" y="645" width="0.9646%" height="15" fill="rgb(218,138,4)" fg:x="38" fg:w="12"/><text x="3.3047%" y="655.50"></text></g><g><title>dlopen (7 samples, 0.56%)</title><rect x="3.4566%" y="629" width="0.5627%" height="15" fill="rgb(250,191,14)" fg:x="43" fg:w="7"/><text x="3.7066%" y="639.50"></text></g><g><title>_dl_catch_error (7 samples, 0.56%)</title><rect x="3.4566%" y="613" width="0.5627%" height="15" fill="rgb(239,60,40)" fg:x="43" fg:w="7"/><text x="3.7066%" y="623.50"></text></g><g><title>_dl_catch_exception (7 samples, 0.56%)</title><rect x="3.4566%" y="597" width="0.5627%" height="15" fill="rgb(206,27,48)" fg:x="43" fg:w="7"/><text x="3.7066%" y="607.50"></text></g><g><title>_dl_catch_exception (6 samples, 0.48%)</title><rect x="3.5370%" y="581" width="0.4823%" height="15" fill="rgb(225,35,8)" fg:x="44" fg:w="6"/><text x="3.7870%" y="591.50"></text></g><g><title>_dl_catch_exception (6 samples, 0.48%)</title><rect x="3.5370%" y="565" width="0.4823%" height="15" fill="rgb(250,213,24)" fg:x="44" fg:w="6"/><text x="3.7870%" y="575.50"></text></g><g><title>_dl_signal_error (1 samples, 0.08%)</title><rect x="3.9389%" y="549" width="0.0804%" height="15" fill="rgb(247,123,22)" fg:x="49" fg:w="1"/><text x="4.1889%" y="559.50"></text></g><g><title>_dl_exception_create (1 samples, 0.08%)</title><rect x="3.9389%" y="533" width="0.0804%" height="15" fill="rgb(231,138,38)" fg:x="49" fg:w="1"/><text x="4.1889%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.0997%" y="613" width="0.0804%" height="15" fill="rgb(231,145,46)" fg:x="51" fg:w="1"/><text x="4.3497%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.0997%" y="597" width="0.0804%" height="15" fill="rgb(251,118,11)" fg:x="51" fg:w="1"/><text x="4.3497%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.0997%" y="581" width="0.0804%" height="15" fill="rgb(217,147,25)" fg:x="51" fg:w="1"/><text x="4.3497%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.0997%" y="565" width="0.0804%" height="15" fill="rgb(247,81,37)" fg:x="51" fg:w="1"/><text x="4.3497%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.0997%" y="549" width="0.0804%" height="15" fill="rgb(209,12,38)" fg:x="51" fg:w="1"/><text x="4.3497%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.0997%" y="533" width="0.0804%" height="15" fill="rgb(227,1,9)" fg:x="51" fg:w="1"/><text x="4.3497%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.0997%" y="517" width="0.0804%" height="15" fill="rgb(248,47,43)" fg:x="51" fg:w="1"/><text x="4.3497%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.0997%" y="501" width="0.0804%" height="15" fill="rgb(221,10,30)" fg:x="51" fg:w="1"/><text x="4.3497%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.0997%" y="485" width="0.0804%" height="15" fill="rgb(210,229,1)" fg:x="51" fg:w="1"/><text x="4.3497%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.0997%" y="469" width="0.0804%" height="15" fill="rgb(222,148,37)" fg:x="51" fg:w="1"/><text x="4.3497%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.0997%" y="453" width="0.0804%" height="15" fill="rgb(234,67,33)" fg:x="51" fg:w="1"/><text x="4.3497%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0997%" y="437" width="0.0804%" height="15" fill="rgb(247,98,35)" fg:x="51" fg:w="1"/><text x="4.3497%" y="447.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (3 samples, 0.24%)</title><rect x="4.0193%" y="645" width="0.2412%" height="15" fill="rgb(247,138,52)" fg:x="50" fg:w="3"/><text x="4.2693%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="4.0193%" y="629" width="0.2412%" height="15" fill="rgb(213,79,30)" fg:x="50" fg:w="3"/><text x="4.2693%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1801%" y="613" width="0.0804%" height="15" fill="rgb(246,177,23)" fg:x="52" fg:w="1"/><text x="4.4301%" y="623.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.2605%" y="629" width="0.0804%" height="15" fill="rgb(230,62,27)" fg:x="53" fg:w="1"/><text x="4.5105%" y="639.50"></text></g><g><title>glob::is_dir (8 samples, 0.64%)</title><rect x="4.4212%" y="597" width="0.6431%" height="15" fill="rgb(216,154,8)" fg:x="55" fg:w="8"/><text x="4.6712%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (8 samples, 0.64%)</title><rect x="4.4212%" y="581" width="0.6431%" height="15" fill="rgb(244,35,45)" fg:x="55" fg:w="8"/><text x="4.6712%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (8 samples, 0.64%)</title><rect x="4.4212%" y="565" width="0.6431%" height="15" fill="rgb(251,115,12)" fg:x="55" fg:w="8"/><text x="4.6712%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (8 samples, 0.64%)</title><rect x="4.4212%" y="549" width="0.6431%" height="15" fill="rgb(240,54,50)" fg:x="55" fg:w="8"/><text x="4.6712%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (8 samples, 0.64%)</title><rect x="4.4212%" y="533" width="0.6431%" height="15" fill="rgb(233,84,52)" fg:x="55" fg:w="8"/><text x="4.6712%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (8 samples, 0.64%)</title><rect x="4.4212%" y="517" width="0.6431%" height="15" fill="rgb(207,117,47)" fg:x="55" fg:w="8"/><text x="4.6712%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (8 samples, 0.64%)</title><rect x="4.4212%" y="501" width="0.6431%" height="15" fill="rgb(249,43,39)" fg:x="55" fg:w="8"/><text x="4.6712%" y="511.50"></text></g><g><title>statx (8 samples, 0.64%)</title><rect x="4.4212%" y="485" width="0.6431%" height="15" fill="rgb(209,38,44)" fg:x="55" fg:w="8"/><text x="4.6712%" y="495.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.80%)</title><rect x="4.3408%" y="629" width="0.8039%" height="15" fill="rgb(236,212,23)" fg:x="54" fg:w="10"/><text x="4.5908%" y="639.50"></text></g><g><title>glob::fill_todo (10 samples, 0.80%)</title><rect x="4.3408%" y="613" width="0.8039%" height="15" fill="rgb(242,79,21)" fg:x="54" fg:w="10"/><text x="4.5908%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="5.0643%" y="597" width="0.0804%" height="15" fill="rgb(211,96,35)" fg:x="63" fg:w="1"/><text x="5.3143%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="5.0643%" y="581" width="0.0804%" height="15" fill="rgb(253,215,40)" fg:x="63" fg:w="1"/><text x="5.3143%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="5.0643%" y="565" width="0.0804%" height="15" fill="rgb(211,81,21)" fg:x="63" fg:w="1"/><text x="5.3143%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="5.0643%" y="549" width="0.0804%" height="15" fill="rgb(208,190,38)" fg:x="63" fg:w="1"/><text x="5.3143%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="5.0643%" y="533" width="0.0804%" height="15" fill="rgb(235,213,38)" fg:x="63" fg:w="1"/><text x="5.3143%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="5.0643%" y="517" width="0.0804%" height="15" fill="rgb(237,122,38)" fg:x="63" fg:w="1"/><text x="5.3143%" y="527.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="5.0643%" y="501" width="0.0804%" height="15" fill="rgb(244,218,35)" fg:x="63" fg:w="1"/><text x="5.3143%" y="511.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.1447%" y="581" width="0.0804%" height="15" fill="rgb(240,68,47)" fg:x="64" fg:w="1"/><text x="5.3947%" y="591.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="5.1447%" y="597" width="0.1608%" height="15" fill="rgb(210,16,53)" fg:x="64" fg:w="2"/><text x="5.3947%" y="607.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.08%)</title><rect x="5.2251%" y="581" width="0.0804%" height="15" fill="rgb(235,124,12)" fg:x="65" fg:w="1"/><text x="5.4751%" y="591.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (18 samples, 1.45%)</title><rect x="4.0193%" y="661" width="1.4469%" height="15" fill="rgb(224,169,11)" fg:x="50" fg:w="18"/><text x="4.2693%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (15 samples, 1.21%)</title><rect x="4.2605%" y="645" width="1.2058%" height="15" fill="rgb(250,166,2)" fg:x="53" fg:w="15"/><text x="4.5105%" y="655.50"></text></g><g><title>glob::glob (4 samples, 0.32%)</title><rect x="5.1447%" y="629" width="0.3215%" height="15" fill="rgb(242,216,29)" fg:x="64" fg:w="4"/><text x="5.3947%" y="639.50"></text></g><g><title>glob::glob_with (4 samples, 0.32%)</title><rect x="5.1447%" y="613" width="0.3215%" height="15" fill="rgb(230,116,27)" fg:x="64" fg:w="4"/><text x="5.3947%" y="623.50"></text></g><g><title>std::ffi::os_str::&lt;impl core::convert::TryFrom&lt;&amp;std::ffi::os_str::OsStr&gt; for &amp;str&gt;::try_from (2 samples, 0.16%)</title><rect x="5.3055%" y="597" width="0.1608%" height="15" fill="rgb(228,99,48)" fg:x="66" fg:w="2"/><text x="5.5555%" y="607.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_str (2 samples, 0.16%)</title><rect x="5.3055%" y="581" width="0.1608%" height="15" fill="rgb(253,11,6)" fg:x="66" fg:w="2"/><text x="5.5555%" y="591.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.16%)</title><rect x="5.3055%" y="565" width="0.1608%" height="15" fill="rgb(247,143,39)" fg:x="66" fg:w="2"/><text x="5.5555%" y="575.50"></text></g><g><title>core::str::validations::run_utf8_validation (2 samples, 0.16%)</title><rect x="5.3055%" y="549" width="0.1608%" height="15" fill="rgb(236,97,10)" fg:x="66" fg:w="2"/><text x="5.5555%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="5.4662%" y="661" width="0.0804%" height="15" fill="rgb(233,208,19)" fg:x="68" fg:w="1"/><text x="5.7162%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.4662%" y="645" width="0.0804%" height="15" fill="rgb(216,164,2)" fg:x="68" fg:w="1"/><text x="5.7162%" y="655.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="5.5466%" y="629" width="0.1608%" height="15" fill="rgb(220,129,5)" fg:x="69" fg:w="2"/><text x="5.7966%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="5.5466%" y="613" width="0.1608%" height="15" fill="rgb(242,17,10)" fg:x="69" fg:w="2"/><text x="5.7966%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="5.6270%" y="597" width="0.0804%" height="15" fill="rgb(242,107,0)" fg:x="70" fg:w="1"/><text x="5.8770%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="5.7074%" y="629" width="0.0804%" height="15" fill="rgb(251,28,31)" fg:x="71" fg:w="1"/><text x="5.9574%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="5.7074%" y="613" width="0.0804%" height="15" fill="rgb(233,223,10)" fg:x="71" fg:w="1"/><text x="5.9574%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="5.7074%" y="597" width="0.0804%" height="15" fill="rgb(215,21,27)" fg:x="71" fg:w="1"/><text x="5.9574%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.7074%" y="581" width="0.0804%" height="15" fill="rgb(232,23,21)" fg:x="71" fg:w="1"/><text x="5.9574%" y="591.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="5.7878%" y="629" width="0.0804%" height="15" fill="rgb(244,5,23)" fg:x="72" fg:w="1"/><text x="6.0378%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="5.7878%" y="613" width="0.0804%" height="15" fill="rgb(226,81,46)" fg:x="72" fg:w="1"/><text x="6.0378%" y="623.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="5.7878%" y="597" width="0.0804%" height="15" fill="rgb(247,70,30)" fg:x="72" fg:w="1"/><text x="6.0378%" y="607.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="5.8682%" y="629" width="0.0804%" height="15" fill="rgb(212,68,19)" fg:x="73" fg:w="1"/><text x="6.1182%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="5.8682%" y="613" width="0.0804%" height="15" fill="rgb(240,187,13)" fg:x="73" fg:w="1"/><text x="6.1182%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.8682%" y="597" width="0.0804%" height="15" fill="rgb(223,113,26)" fg:x="73" fg:w="1"/><text x="6.1182%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="5.9486%" y="597" width="0.0804%" height="15" fill="rgb(206,192,2)" fg:x="74" fg:w="1"/><text x="6.1986%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="5.9486%" y="629" width="0.1608%" height="15" fill="rgb(241,108,4)" fg:x="74" fg:w="2"/><text x="6.1986%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="5.9486%" y="613" width="0.1608%" height="15" fill="rgb(247,173,49)" fg:x="74" fg:w="2"/><text x="6.1986%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="6.0289%" y="597" width="0.0804%" height="15" fill="rgb(224,114,35)" fg:x="75" fg:w="1"/><text x="6.2789%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.0289%" y="581" width="0.0804%" height="15" fill="rgb(245,159,27)" fg:x="75" fg:w="1"/><text x="6.2789%" y="591.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="6.1897%" y="565" width="0.0804%" height="15" fill="rgb(245,172,44)" fg:x="77" fg:w="1"/><text x="6.4397%" y="575.50"></text></g><g><title>&lt;plugins_rune::actions::RuneAction as kernel::plugins::HasActionSchema&gt;::action_schema (3 samples, 0.24%)</title><rect x="6.1093%" y="597" width="0.2412%" height="15" fill="rgb(236,23,11)" fg:x="76" fg:w="3"/><text x="6.3593%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (3 samples, 0.24%)</title><rect x="6.1093%" y="581" width="0.2412%" height="15" fill="rgb(205,117,38)" fg:x="76" fg:w="3"/><text x="6.3593%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="6.2701%" y="565" width="0.0804%" height="15" fill="rgb(237,72,25)" fg:x="78" fg:w="1"/><text x="6.5201%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.2701%" y="549" width="0.0804%" height="15" fill="rgb(244,70,9)" fg:x="78" fg:w="1"/><text x="6.5201%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.2701%" y="533" width="0.0804%" height="15" fill="rgb(217,125,39)" fg:x="78" fg:w="1"/><text x="6.5201%" y="543.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (46 samples, 3.70%)</title><rect x="2.7331%" y="677" width="3.6977%" height="15" fill="rgb(235,36,10)" fg:x="34" fg:w="46"/><text x="2.9831%" y="687.50">kern..</text></g><g><title>kernel::plugins::SessionPlugins::schema (11 samples, 0.88%)</title><rect x="5.5466%" y="661" width="0.8842%" height="15" fill="rgb(251,123,47)" fg:x="69" fg:w="11"/><text x="5.7966%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.88%)</title><rect x="5.5466%" y="645" width="0.8842%" height="15" fill="rgb(221,13,13)" fg:x="69" fg:w="11"/><text x="5.7966%" y="655.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (4 samples, 0.32%)</title><rect x="6.1093%" y="629" width="0.3215%" height="15" fill="rgb(238,131,9)" fg:x="76" fg:w="4"/><text x="6.3593%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (4 samples, 0.32%)</title><rect x="6.1093%" y="613" width="0.3215%" height="15" fill="rgb(211,50,8)" fg:x="76" fg:w="4"/><text x="6.3593%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="6.3505%" y="597" width="0.0804%" height="15" fill="rgb(245,182,24)" fg:x="79" fg:w="1"/><text x="6.6005%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.3505%" y="581" width="0.0804%" height="15" fill="rgb(242,14,37)" fg:x="79" fg:w="1"/><text x="6.6005%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.4309%" y="661" width="0.0804%" height="15" fill="rgb(246,228,12)" fg:x="80" fg:w="1"/><text x="6.6809%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="6.4309%" y="645" width="0.0804%" height="15" fill="rgb(213,55,15)" fg:x="80" fg:w="1"/><text x="6.6809%" y="655.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="6.4309%" y="629" width="0.0804%" height="15" fill="rgb(209,9,3)" fg:x="80" fg:w="1"/><text x="6.6809%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5113%" y="629" width="0.0804%" height="15" fill="rgb(230,59,30)" fg:x="81" fg:w="1"/><text x="6.7613%" y="639.50"></text></g><g><title>engine::session::Session::initialize (51 samples, 4.10%)</title><rect x="2.7331%" y="693" width="4.0997%" height="15" fill="rgb(209,121,21)" fg:x="34" fg:w="51"/><text x="2.9831%" y="703.50">engi..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (5 samples, 0.40%)</title><rect x="6.4309%" y="677" width="0.4019%" height="15" fill="rgb(220,109,13)" fg:x="80" fg:w="5"/><text x="6.6809%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.32%)</title><rect x="6.5113%" y="661" width="0.3215%" height="15" fill="rgb(232,18,1)" fg:x="81" fg:w="4"/><text x="6.7613%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="6.5113%" y="645" width="0.3215%" height="15" fill="rgb(215,41,42)" fg:x="81" fg:w="4"/><text x="6.7613%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="6.5916%" y="629" width="0.2412%" height="15" fill="rgb(224,123,36)" fg:x="82" fg:w="3"/><text x="6.8416%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="6.5916%" y="613" width="0.2412%" height="15" fill="rgb(240,125,3)" fg:x="82" fg:w="3"/><text x="6.8416%" y="623.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="6.6720%" y="597" width="0.1608%" height="15" fill="rgb(205,98,50)" fg:x="83" fg:w="2"/><text x="6.9220%" y="607.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (55 samples, 4.42%)</title><rect x="2.5723%" y="741" width="4.4212%" height="15" fill="rgb(205,185,37)" fg:x="32" fg:w="55"/><text x="2.8223%" y="751.50">&lt;engi..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (55 samples, 4.42%)</title><rect x="2.5723%" y="725" width="4.4212%" height="15" fill="rgb(238,207,15)" fg:x="32" fg:w="55"/><text x="2.8223%" y="735.50">engin..</text></g><g><title>engine::session::Session::new (55 samples, 4.42%)</title><rect x="2.5723%" y="709" width="4.4212%" height="15" fill="rgb(213,199,42)" fg:x="32" fg:w="55"/><text x="2.8223%" y="719.50">engin..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="6.8328%" y="693" width="0.1608%" height="15" fill="rgb(235,201,11)" fg:x="85" fg:w="2"/><text x="7.0828%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="6.8328%" y="677" width="0.1608%" height="15" fill="rgb(207,46,11)" fg:x="85" fg:w="2"/><text x="7.0828%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="6.8328%" y="661" width="0.1608%" height="15" fill="rgb(241,35,35)" fg:x="85" fg:w="2"/><text x="7.0828%" y="671.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (2 samples, 0.16%)</title><rect x="6.8328%" y="645" width="0.1608%" height="15" fill="rgb(243,32,47)" fg:x="85" fg:w="2"/><text x="7.0828%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.1543%" y="725" width="0.0804%" height="15" fill="rgb(247,202,23)" fg:x="89" fg:w="1"/><text x="7.4043%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="7.1543%" y="709" width="0.0804%" height="15" fill="rgb(219,102,11)" fg:x="89" fg:w="1"/><text x="7.4043%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.1543%" y="693" width="0.0804%" height="15" fill="rgb(243,110,44)" fg:x="89" fg:w="1"/><text x="7.4043%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.1543%" y="677" width="0.0804%" height="15" fill="rgb(222,74,54)" fg:x="89" fg:w="1"/><text x="7.4043%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.1543%" y="661" width="0.0804%" height="15" fill="rgb(216,99,12)" fg:x="89" fg:w="1"/><text x="7.4043%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.1543%" y="645" width="0.0804%" height="15" fill="rgb(226,22,26)" fg:x="89" fg:w="1"/><text x="7.4043%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="7.3151%" y="613" width="0.0804%" height="15" fill="rgb(217,163,10)" fg:x="91" fg:w="1"/><text x="7.5651%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="7.3955%" y="613" width="0.2412%" height="15" fill="rgb(213,25,53)" fg:x="92" fg:w="3"/><text x="7.6455%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="7.3955%" y="597" width="0.2412%" height="15" fill="rgb(252,105,26)" fg:x="92" fg:w="3"/><text x="7.6455%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.4759%" y="581" width="0.1608%" height="15" fill="rgb(220,39,43)" fg:x="93" fg:w="2"/><text x="7.7259%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="7.4759%" y="565" width="0.1608%" height="15" fill="rgb(229,68,48)" fg:x="93" fg:w="2"/><text x="7.7259%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="7.4759%" y="549" width="0.1608%" height="15" fill="rgb(252,8,32)" fg:x="93" fg:w="2"/><text x="7.7259%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.5563%" y="533" width="0.0804%" height="15" fill="rgb(223,20,43)" fg:x="94" fg:w="1"/><text x="7.8063%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.5563%" y="517" width="0.0804%" height="15" fill="rgb(229,81,49)" fg:x="94" fg:w="1"/><text x="7.8063%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.5563%" y="501" width="0.0804%" height="15" fill="rgb(236,28,36)" fg:x="94" fg:w="1"/><text x="7.8063%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="7.7170%" y="597" width="0.1608%" height="15" fill="rgb(249,185,26)" fg:x="96" fg:w="2"/><text x="7.9670%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.7170%" y="581" width="0.1608%" height="15" fill="rgb(249,174,33)" fg:x="96" fg:w="2"/><text x="7.9670%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.7974%" y="565" width="0.0804%" height="15" fill="rgb(233,201,37)" fg:x="97" fg:w="1"/><text x="8.0474%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.7974%" y="549" width="0.0804%" height="15" fill="rgb(221,78,26)" fg:x="97" fg:w="1"/><text x="8.0474%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.7974%" y="533" width="0.0804%" height="15" fill="rgb(250,127,30)" fg:x="97" fg:w="1"/><text x="8.0474%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.8778%" y="517" width="0.0804%" height="15" fill="rgb(230,49,44)" fg:x="98" fg:w="1"/><text x="8.1278%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.8778%" y="501" width="0.0804%" height="15" fill="rgb(229,67,23)" fg:x="98" fg:w="1"/><text x="8.1278%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.8778%" y="485" width="0.0804%" height="15" fill="rgb(249,83,47)" fg:x="98" fg:w="1"/><text x="8.1278%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="7.8778%" y="581" width="0.1608%" height="15" fill="rgb(215,43,3)" fg:x="98" fg:w="2"/><text x="8.1278%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="7.8778%" y="565" width="0.1608%" height="15" fill="rgb(238,154,13)" fg:x="98" fg:w="2"/><text x="8.1278%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="7.8778%" y="549" width="0.1608%" height="15" fill="rgb(219,56,2)" fg:x="98" fg:w="2"/><text x="8.1278%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="7.8778%" y="533" width="0.1608%" height="15" fill="rgb(233,0,4)" fg:x="98" fg:w="2"/><text x="8.1278%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.9582%" y="517" width="0.0804%" height="15" fill="rgb(235,30,7)" fg:x="99" fg:w="1"/><text x="8.2082%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.9582%" y="501" width="0.0804%" height="15" fill="rgb(250,79,13)" fg:x="99" fg:w="1"/><text x="8.2082%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="8.0386%" y="581" width="0.3215%" height="15" fill="rgb(211,146,34)" fg:x="100" fg:w="4"/><text x="8.2886%" y="591.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="8.1190%" y="565" width="0.2412%" height="15" fill="rgb(228,22,38)" fg:x="101" fg:w="3"/><text x="8.3690%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="8.1190%" y="549" width="0.2412%" height="15" fill="rgb(235,168,5)" fg:x="101" fg:w="3"/><text x="8.3690%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.2797%" y="533" width="0.0804%" height="15" fill="rgb(221,155,16)" fg:x="103" fg:w="1"/><text x="8.5297%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="8.3601%" y="565" width="0.3215%" height="15" fill="rgb(215,215,53)" fg:x="104" fg:w="4"/><text x="8.6101%" y="575.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="8.3601%" y="549" width="0.3215%" height="15" fill="rgb(223,4,10)" fg:x="104" fg:w="4"/><text x="8.6101%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="8.4405%" y="533" width="0.2412%" height="15" fill="rgb(234,103,6)" fg:x="105" fg:w="3"/><text x="8.6905%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="8.4405%" y="517" width="0.2412%" height="15" fill="rgb(227,97,0)" fg:x="105" fg:w="3"/><text x="8.6905%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="8.5209%" y="501" width="0.1608%" height="15" fill="rgb(234,150,53)" fg:x="106" fg:w="2"/><text x="8.7709%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="8.5209%" y="485" width="0.1608%" height="15" fill="rgb(228,201,54)" fg:x="106" fg:w="2"/><text x="8.7709%" y="495.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="8.5209%" y="469" width="0.1608%" height="15" fill="rgb(222,22,37)" fg:x="106" fg:w="2"/><text x="8.7709%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (21 samples, 1.69%)</title><rect x="7.2347%" y="629" width="1.6881%" height="15" fill="rgb(237,53,32)" fg:x="90" fg:w="21"/><text x="7.4847%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.29%)</title><rect x="7.6367%" y="613" width="1.2862%" height="15" fill="rgb(233,25,53)" fg:x="95" fg:w="16"/><text x="7.8867%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.05%)</title><rect x="7.8778%" y="597" width="1.0450%" height="15" fill="rgb(210,40,34)" fg:x="98" fg:w="13"/><text x="8.1278%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="8.3601%" y="581" width="0.5627%" height="15" fill="rgb(241,220,44)" fg:x="104" fg:w="7"/><text x="8.6101%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="8.6817%" y="565" width="0.2412%" height="15" fill="rgb(235,28,35)" fg:x="108" fg:w="3"/><text x="8.9317%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="8.6817%" y="549" width="0.2412%" height="15" fill="rgb(210,56,17)" fg:x="108" fg:w="3"/><text x="8.9317%" y="559.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="8.6817%" y="533" width="0.2412%" height="15" fill="rgb(224,130,29)" fg:x="108" fg:w="3"/><text x="8.9317%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.7621%" y="517" width="0.1608%" height="15" fill="rgb(235,212,8)" fg:x="109" fg:w="2"/><text x="9.0121%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.7621%" y="501" width="0.1608%" height="15" fill="rgb(223,33,50)" fg:x="109" fg:w="2"/><text x="9.0121%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.0032%" y="565" width="0.0804%" height="15" fill="rgb(219,149,13)" fg:x="112" fg:w="1"/><text x="9.2532%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="8.9228%" y="629" width="0.3215%" height="15" fill="rgb(250,156,29)" fg:x="111" fg:w="4"/><text x="9.1728%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="8.9228%" y="613" width="0.3215%" height="15" fill="rgb(216,193,19)" fg:x="111" fg:w="4"/><text x="9.1728%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="8.9228%" y="597" width="0.3215%" height="15" fill="rgb(216,135,14)" fg:x="111" fg:w="4"/><text x="9.1728%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="8.9228%" y="581" width="0.3215%" height="15" fill="rgb(241,47,5)" fg:x="111" fg:w="4"/><text x="9.1728%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.0836%" y="565" width="0.1608%" height="15" fill="rgb(233,42,35)" fg:x="113" fg:w="2"/><text x="9.3336%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="9.1640%" y="549" width="0.0804%" height="15" fill="rgb(231,13,6)" fg:x="114" fg:w="1"/><text x="9.4140%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="9.1640%" y="533" width="0.0804%" height="15" fill="rgb(207,181,40)" fg:x="114" fg:w="1"/><text x="9.4140%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="9.2444%" y="613" width="0.0804%" height="15" fill="rgb(254,173,49)" fg:x="115" fg:w="1"/><text x="9.4944%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.4051%" y="581" width="0.0804%" height="15" fill="rgb(221,1,38)" fg:x="117" fg:w="1"/><text x="9.6551%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="9.4051%" y="565" width="0.0804%" height="15" fill="rgb(206,124,46)" fg:x="117" fg:w="1"/><text x="9.6551%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="9.4855%" y="581" width="0.1608%" height="15" fill="rgb(249,21,11)" fg:x="118" fg:w="2"/><text x="9.7355%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.5659%" y="565" width="0.0804%" height="15" fill="rgb(222,201,40)" fg:x="119" fg:w="1"/><text x="9.8159%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="9.5659%" y="549" width="0.0804%" height="15" fill="rgb(235,61,29)" fg:x="119" fg:w="1"/><text x="9.8159%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="9.5659%" y="533" width="0.0804%" height="15" fill="rgb(219,207,3)" fg:x="119" fg:w="1"/><text x="9.8159%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="9.7267%" y="565" width="0.0804%" height="15" fill="rgb(222,56,46)" fg:x="121" fg:w="1"/><text x="9.9767%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.8071%" y="533" width="0.1608%" height="15" fill="rgb(239,76,54)" fg:x="122" fg:w="2"/><text x="10.0571%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.9678%" y="485" width="0.0804%" height="15" fill="rgb(231,124,27)" fg:x="124" fg:w="1"/><text x="10.2178%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.9678%" y="469" width="0.0804%" height="15" fill="rgb(249,195,6)" fg:x="124" fg:w="1"/><text x="10.2178%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="9.9678%" y="533" width="0.1608%" height="15" fill="rgb(237,174,47)" fg:x="124" fg:w="2"/><text x="10.2178%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="9.9678%" y="517" width="0.1608%" height="15" fill="rgb(206,201,31)" fg:x="124" fg:w="2"/><text x="10.2178%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="9.9678%" y="501" width="0.1608%" height="15" fill="rgb(231,57,52)" fg:x="124" fg:w="2"/><text x="10.2178%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.0482%" y="485" width="0.0804%" height="15" fill="rgb(248,177,22)" fg:x="125" fg:w="1"/><text x="10.2982%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.0482%" y="469" width="0.0804%" height="15" fill="rgb(215,211,37)" fg:x="125" fg:w="1"/><text x="10.2982%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="10.2090%" y="517" width="0.0804%" height="15" fill="rgb(241,128,51)" fg:x="127" fg:w="1"/><text x="10.4590%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.2894%" y="517" width="0.0804%" height="15" fill="rgb(227,165,31)" fg:x="128" fg:w="1"/><text x="10.5394%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.2894%" y="501" width="0.0804%" height="15" fill="rgb(228,167,24)" fg:x="128" fg:w="1"/><text x="10.5394%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.2894%" y="485" width="0.0804%" height="15" fill="rgb(228,143,12)" fg:x="128" fg:w="1"/><text x="10.5394%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.2894%" y="469" width="0.0804%" height="15" fill="rgb(249,149,8)" fg:x="128" fg:w="1"/><text x="10.5394%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.72%)</title><rect x="9.8071%" y="565" width="0.7235%" height="15" fill="rgb(243,35,44)" fg:x="122" fg:w="9"/><text x="10.0571%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.72%)</title><rect x="9.8071%" y="549" width="0.7235%" height="15" fill="rgb(246,89,9)" fg:x="122" fg:w="9"/><text x="10.0571%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="10.1286%" y="533" width="0.4019%" height="15" fill="rgb(233,213,13)" fg:x="126" fg:w="5"/><text x="10.3786%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="10.3698%" y="517" width="0.1608%" height="15" fill="rgb(233,141,41)" fg:x="129" fg:w="2"/><text x="10.6198%" y="527.50"></text></g><g><title>engine::session::Session::flush (42 samples, 3.38%)</title><rect x="7.2347%" y="725" width="3.3762%" height="15" fill="rgb(239,167,4)" fg:x="90" fg:w="42"/><text x="7.4847%" y="735.50">eng..</text></g><g><title>engine::session::state::State::close (42 samples, 3.38%)</title><rect x="7.2347%" y="709" width="3.3762%" height="15" fill="rgb(209,217,16)" fg:x="90" fg:w="42"/><text x="7.4847%" y="719.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (42 samples, 3.38%)</title><rect x="7.2347%" y="693" width="3.3762%" height="15" fill="rgb(219,88,35)" fg:x="90" fg:w="42"/><text x="7.4847%" y="703.50">eng..</text></g><g><title>core::iter::adapters::try_process (42 samples, 3.38%)</title><rect x="7.2347%" y="677" width="3.3762%" height="15" fill="rgb(220,193,23)" fg:x="90" fg:w="42"/><text x="7.4847%" y="687.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (42 samples, 3.38%)</title><rect x="7.2347%" y="661" width="3.3762%" height="15" fill="rgb(230,90,52)" fg:x="90" fg:w="42"/><text x="7.4847%" y="671.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (42 samples, 3.38%)</title><rect x="7.2347%" y="645" width="3.3762%" height="15" fill="rgb(252,106,19)" fg:x="90" fg:w="42"/><text x="7.4847%" y="655.50">eng..</text></g><g><title>kernel::model::any_entity_changes (17 samples, 1.37%)</title><rect x="9.2444%" y="629" width="1.3666%" height="15" fill="rgb(206,74,20)" fg:x="115" fg:w="17"/><text x="9.4944%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (16 samples, 1.29%)</title><rect x="9.3248%" y="613" width="1.2862%" height="15" fill="rgb(230,138,44)" fg:x="116" fg:w="16"/><text x="9.5748%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (15 samples, 1.21%)</title><rect x="9.4051%" y="597" width="1.2058%" height="15" fill="rgb(235,182,43)" fg:x="117" fg:w="15"/><text x="9.6551%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (12 samples, 0.96%)</title><rect x="9.6463%" y="581" width="0.9646%" height="15" fill="rgb(242,16,51)" fg:x="120" fg:w="12"/><text x="9.8963%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.5305%" y="565" width="0.0804%" height="15" fill="rgb(248,9,4)" fg:x="131" fg:w="1"/><text x="10.7805%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.6109%" y="677" width="0.0804%" height="15" fill="rgb(210,31,22)" fg:x="132" fg:w="1"/><text x="10.8609%" y="687.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="10.6109%" y="693" width="0.1608%" height="15" fill="rgb(239,54,39)" fg:x="132" fg:w="2"/><text x="10.8609%" y="703.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="10.6913%" y="677" width="0.0804%" height="15" fill="rgb(230,99,41)" fg:x="133" fg:w="1"/><text x="10.9413%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="10.7717%" y="677" width="0.0804%" height="15" fill="rgb(253,106,12)" fg:x="134" fg:w="1"/><text x="11.0217%" y="687.50"></text></g><g><title>plugins_core::build::Build::named (4 samples, 0.32%)</title><rect x="10.6109%" y="725" width="0.3215%" height="15" fill="rgb(213,46,41)" fg:x="132" fg:w="4"/><text x="10.8609%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (4 samples, 0.32%)</title><rect x="10.6109%" y="709" width="0.3215%" height="15" fill="rgb(215,133,35)" fg:x="132" fg:w="4"/><text x="10.8609%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="10.7717%" y="693" width="0.1608%" height="15" fill="rgb(213,28,5)" fg:x="134" fg:w="2"/><text x="11.0217%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.8521%" y="677" width="0.0804%" height="15" fill="rgb(215,77,49)" fg:x="135" fg:w="1"/><text x="11.1021%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="10.9325%" y="693" width="0.0804%" height="15" fill="rgb(248,100,22)" fg:x="136" fg:w="1"/><text x="11.1825%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.9325%" y="677" width="0.0804%" height="15" fill="rgb(208,67,9)" fg:x="136" fg:w="1"/><text x="11.1825%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.9325%" y="661" width="0.0804%" height="15" fill="rgb(219,133,21)" fg:x="136" fg:w="1"/><text x="11.1825%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="10.9325%" y="645" width="0.0804%" height="15" fill="rgb(246,46,29)" fg:x="136" fg:w="1"/><text x="11.1825%" y="655.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="11.0129%" y="677" width="0.1608%" height="15" fill="rgb(246,185,52)" fg:x="137" fg:w="2"/><text x="11.2629%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="11.0129%" y="661" width="0.1608%" height="15" fill="rgb(252,136,11)" fg:x="137" fg:w="2"/><text x="11.2629%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.0129%" y="645" width="0.1608%" height="15" fill="rgb(219,138,53)" fg:x="137" fg:w="2"/><text x="11.2629%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.0932%" y="629" width="0.0804%" height="15" fill="rgb(211,51,23)" fg:x="138" fg:w="1"/><text x="11.3432%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.0932%" y="613" width="0.0804%" height="15" fill="rgb(247,221,28)" fg:x="138" fg:w="1"/><text x="11.3432%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.0932%" y="597" width="0.0804%" height="15" fill="rgb(251,222,45)" fg:x="138" fg:w="1"/><text x="11.3432%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="11.1736%" y="661" width="0.0804%" height="15" fill="rgb(217,162,53)" fg:x="139" fg:w="1"/><text x="11.4236%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.1736%" y="645" width="0.0804%" height="15" fill="rgb(229,93,14)" fg:x="139" fg:w="1"/><text x="11.4236%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (4 samples, 0.32%)</title><rect x="11.0129%" y="693" width="0.3215%" height="15" fill="rgb(209,67,49)" fg:x="137" fg:w="4"/><text x="11.2629%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="11.1736%" y="677" width="0.1608%" height="15" fill="rgb(213,87,29)" fg:x="139" fg:w="2"/><text x="11.4236%" y="687.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="11.2540%" y="661" width="0.0804%" height="15" fill="rgb(205,151,52)" fg:x="140" fg:w="1"/><text x="11.5040%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.2540%" y="645" width="0.0804%" height="15" fill="rgb(253,215,39)" fg:x="140" fg:w="1"/><text x="11.5040%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="11.2540%" y="629" width="0.0804%" height="15" fill="rgb(221,220,41)" fg:x="140" fg:w="1"/><text x="11.5040%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.2540%" y="613" width="0.0804%" height="15" fill="rgb(218,133,21)" fg:x="140" fg:w="1"/><text x="11.5040%" y="623.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="11.3344%" y="693" width="0.0804%" height="15" fill="rgb(221,193,43)" fg:x="141" fg:w="1"/><text x="11.5844%" y="703.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="11.3344%" y="677" width="0.0804%" height="15" fill="rgb(240,128,52)" fg:x="141" fg:w="1"/><text x="11.5844%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="11.3344%" y="661" width="0.0804%" height="15" fill="rgb(253,114,12)" fg:x="141" fg:w="1"/><text x="11.5844%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="11.4148%" y="661" width="0.1608%" height="15" fill="rgb(215,223,47)" fg:x="142" fg:w="2"/><text x="11.6648%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="11.4148%" y="645" width="0.1608%" height="15" fill="rgb(248,225,23)" fg:x="142" fg:w="2"/><text x="11.6648%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.4148%" y="629" width="0.1608%" height="15" fill="rgb(250,108,0)" fg:x="142" fg:w="2"/><text x="11.6648%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.4952%" y="613" width="0.0804%" height="15" fill="rgb(228,208,7)" fg:x="143" fg:w="1"/><text x="11.7452%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.4952%" y="597" width="0.0804%" height="15" fill="rgb(244,45,10)" fg:x="143" fg:w="1"/><text x="11.7452%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.4952%" y="581" width="0.0804%" height="15" fill="rgb(207,125,25)" fg:x="143" fg:w="1"/><text x="11.7452%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.4952%" y="565" width="0.0804%" height="15" fill="rgb(210,195,18)" fg:x="143" fg:w="1"/><text x="11.7452%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.4952%" y="549" width="0.0804%" height="15" fill="rgb(249,80,12)" fg:x="143" fg:w="1"/><text x="11.7452%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="11.5756%" y="661" width="0.0804%" height="15" fill="rgb(221,65,9)" fg:x="144" fg:w="1"/><text x="11.8256%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.5756%" y="645" width="0.0804%" height="15" fill="rgb(235,49,36)" fg:x="144" fg:w="1"/><text x="11.8256%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="11.5756%" y="629" width="0.0804%" height="15" fill="rgb(225,32,20)" fg:x="144" fg:w="1"/><text x="11.8256%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.5756%" y="613" width="0.0804%" height="15" fill="rgb(215,141,46)" fg:x="144" fg:w="1"/><text x="11.8256%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="11.4148%" y="677" width="0.3215%" height="15" fill="rgb(250,160,47)" fg:x="142" fg:w="4"/><text x="11.6648%" y="687.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="11.6559%" y="661" width="0.0804%" height="15" fill="rgb(216,222,40)" fg:x="145" fg:w="1"/><text x="11.9059%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.6559%" y="645" width="0.0804%" height="15" fill="rgb(234,217,39)" fg:x="145" fg:w="1"/><text x="11.9059%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="11.6559%" y="629" width="0.0804%" height="15" fill="rgb(207,178,40)" fg:x="145" fg:w="1"/><text x="11.9059%" y="639.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="11.7363%" y="677" width="0.0804%" height="15" fill="rgb(221,136,13)" fg:x="146" fg:w="1"/><text x="11.9863%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.7363%" y="661" width="0.0804%" height="15" fill="rgb(249,199,10)" fg:x="146" fg:w="1"/><text x="11.9863%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="11.7363%" y="645" width="0.0804%" height="15" fill="rgb(249,222,13)" fg:x="146" fg:w="1"/><text x="11.9863%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="11.7363%" y="629" width="0.0804%" height="15" fill="rgb(244,185,38)" fg:x="146" fg:w="1"/><text x="11.9863%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.8167%" y="645" width="0.1608%" height="15" fill="rgb(236,202,9)" fg:x="147" fg:w="2"/><text x="12.0667%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.8971%" y="629" width="0.0804%" height="15" fill="rgb(250,229,37)" fg:x="148" fg:w="1"/><text x="12.1471%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (14 samples, 1.13%)</title><rect x="10.9325%" y="709" width="1.1254%" height="15" fill="rgb(206,174,23)" fg:x="136" fg:w="14"/><text x="11.1825%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (8 samples, 0.64%)</title><rect x="11.4148%" y="693" width="0.6431%" height="15" fill="rgb(211,33,43)" fg:x="142" fg:w="8"/><text x="11.6648%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="11.8167%" y="677" width="0.2412%" height="15" fill="rgb(245,58,50)" fg:x="147" fg:w="3"/><text x="12.0667%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="11.8167%" y="661" width="0.2412%" height="15" fill="rgb(244,68,36)" fg:x="147" fg:w="3"/><text x="12.0667%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="11.9775%" y="645" width="0.0804%" height="15" fill="rgb(232,229,15)" fg:x="149" fg:w="1"/><text x="12.2275%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="11.9775%" y="629" width="0.0804%" height="15" fill="rgb(254,30,23)" fg:x="149" fg:w="1"/><text x="12.2275%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="12.0579%" y="709" width="0.1608%" height="15" fill="rgb(235,160,14)" fg:x="150" fg:w="2"/><text x="12.3079%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.0579%" y="693" width="0.1608%" height="15" fill="rgb(212,155,44)" fg:x="150" fg:w="2"/><text x="12.3079%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1383%" y="677" width="0.0804%" height="15" fill="rgb(226,2,50)" fg:x="151" fg:w="1"/><text x="12.3883%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="12.2186%" y="709" width="0.2412%" height="15" fill="rgb(234,177,6)" fg:x="152" fg:w="3"/><text x="12.4686%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="12.2186%" y="693" width="0.2412%" height="15" fill="rgb(217,24,9)" fg:x="152" fg:w="3"/><text x="12.4686%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="12.2186%" y="677" width="0.2412%" height="15" fill="rgb(220,13,46)" fg:x="152" fg:w="3"/><text x="12.4686%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.3794%" y="661" width="0.0804%" height="15" fill="rgb(239,221,27)" fg:x="154" fg:w="1"/><text x="12.6294%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.3794%" y="645" width="0.0804%" height="15" fill="rgb(222,198,25)" fg:x="154" fg:w="1"/><text x="12.6294%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.3794%" y="629" width="0.0804%" height="15" fill="rgb(211,99,13)" fg:x="154" fg:w="1"/><text x="12.6294%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.3794%" y="613" width="0.0804%" height="15" fill="rgb(232,111,31)" fg:x="154" fg:w="1"/><text x="12.6294%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (20 samples, 1.61%)</title><rect x="10.9325%" y="725" width="1.6077%" height="15" fill="rgb(245,82,37)" fg:x="136" fg:w="20"/><text x="11.1825%" y="735.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="12.4598%" y="709" width="0.0804%" height="15" fill="rgb(227,149,46)" fg:x="155" fg:w="1"/><text x="12.7098%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.4598%" y="693" width="0.0804%" height="15" fill="rgb(218,36,50)" fg:x="155" fg:w="1"/><text x="12.7098%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="12.4598%" y="677" width="0.0804%" height="15" fill="rgb(226,80,48)" fg:x="155" fg:w="1"/><text x="12.7098%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="12.5402%" y="693" width="0.0804%" height="15" fill="rgb(238,224,15)" fg:x="156" fg:w="1"/><text x="12.7902%" y="703.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="12.5402%" y="677" width="0.0804%" height="15" fill="rgb(241,136,10)" fg:x="156" fg:w="1"/><text x="12.7902%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="12.6206%" y="677" width="0.0804%" height="15" fill="rgb(208,32,45)" fg:x="157" fg:w="1"/><text x="12.8706%" y="687.50"></text></g><g><title>&lt;replies::Json as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="12.6206%" y="661" width="0.0804%" height="15" fill="rgb(207,135,9)" fg:x="157" fg:w="1"/><text x="12.8706%" y="671.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;f32&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="12.7010%" y="645" width="0.0804%" height="15" fill="rgb(206,86,44)" fg:x="158" fg:w="1"/><text x="12.9510%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.7814%" y="581" width="0.0804%" height="15" fill="rgb(245,177,15)" fg:x="159" fg:w="1"/><text x="13.0314%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (5 samples, 0.40%)</title><rect x="12.5402%" y="725" width="0.4019%" height="15" fill="rgb(206,64,50)" fg:x="156" fg:w="5"/><text x="12.7902%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (5 samples, 0.40%)</title><rect x="12.5402%" y="709" width="0.4019%" height="15" fill="rgb(234,36,40)" fg:x="156" fg:w="5"/><text x="12.7902%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.32%)</title><rect x="12.6206%" y="693" width="0.3215%" height="15" fill="rgb(213,64,8)" fg:x="157" fg:w="4"/><text x="12.8706%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (3 samples, 0.24%)</title><rect x="12.7010%" y="677" width="0.2412%" height="15" fill="rgb(210,75,36)" fg:x="158" fg:w="3"/><text x="12.9510%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="12.7010%" y="661" width="0.2412%" height="15" fill="rgb(229,88,21)" fg:x="158" fg:w="3"/><text x="12.9510%" y="671.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="12.7814%" y="645" width="0.1608%" height="15" fill="rgb(252,204,47)" fg:x="159" fg:w="2"/><text x="13.0314%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="12.7814%" y="629" width="0.1608%" height="15" fill="rgb(208,77,27)" fg:x="159" fg:w="2"/><text x="13.0314%" y="639.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="12.7814%" y="613" width="0.1608%" height="15" fill="rgb(221,76,26)" fg:x="159" fg:w="2"/><text x="13.0314%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="12.7814%" y="597" width="0.1608%" height="15" fill="rgb(225,139,18)" fg:x="159" fg:w="2"/><text x="13.0314%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.8617%" y="581" width="0.0804%" height="15" fill="rgb(230,137,11)" fg:x="160" fg:w="1"/><text x="13.1117%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.1029%" y="581" width="0.0804%" height="15" fill="rgb(212,28,1)" fg:x="163" fg:w="1"/><text x="13.3529%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="13.0225%" y="693" width="0.3215%" height="15" fill="rgb(248,164,17)" fg:x="162" fg:w="4"/><text x="13.2725%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="13.1029%" y="677" width="0.2412%" height="15" fill="rgb(222,171,42)" fg:x="163" fg:w="3"/><text x="13.3529%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="13.1029%" y="661" width="0.2412%" height="15" fill="rgb(243,84,45)" fg:x="163" fg:w="3"/><text x="13.3529%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="13.1029%" y="645" width="0.2412%" height="15" fill="rgb(252,49,23)" fg:x="163" fg:w="3"/><text x="13.3529%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.1029%" y="629" width="0.2412%" height="15" fill="rgb(215,19,7)" fg:x="163" fg:w="3"/><text x="13.3529%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="13.1029%" y="613" width="0.2412%" height="15" fill="rgb(238,81,41)" fg:x="163" fg:w="3"/><text x="13.3529%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.1029%" y="597" width="0.2412%" height="15" fill="rgb(210,199,37)" fg:x="163" fg:w="3"/><text x="13.3529%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.1833%" y="581" width="0.1608%" height="15" fill="rgb(244,192,49)" fg:x="164" fg:w="2"/><text x="13.4333%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.1833%" y="565" width="0.1608%" height="15" fill="rgb(226,211,11)" fg:x="164" fg:w="2"/><text x="13.4333%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.2637%" y="549" width="0.0804%" height="15" fill="rgb(236,162,54)" fg:x="165" fg:w="1"/><text x="13.5137%" y="559.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="13.3441%" y="693" width="0.1608%" height="15" fill="rgb(220,229,9)" fg:x="166" fg:w="2"/><text x="13.5941%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="13.3441%" y="677" width="0.1608%" height="15" fill="rgb(250,87,22)" fg:x="166" fg:w="2"/><text x="13.5941%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.4244%" y="661" width="0.0804%" height="15" fill="rgb(239,43,17)" fg:x="167" fg:w="1"/><text x="13.6744%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.4244%" y="645" width="0.0804%" height="15" fill="rgb(231,177,25)" fg:x="167" fg:w="1"/><text x="13.6744%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.5048%" y="661" width="0.0804%" height="15" fill="rgb(219,179,1)" fg:x="168" fg:w="1"/><text x="13.7548%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="13.5048%" y="677" width="0.2412%" height="15" fill="rgb(238,219,53)" fg:x="168" fg:w="3"/><text x="13.7548%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.5852%" y="661" width="0.1608%" height="15" fill="rgb(232,167,36)" fg:x="169" fg:w="2"/><text x="13.8352%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.5852%" y="645" width="0.1608%" height="15" fill="rgb(244,19,51)" fg:x="169" fg:w="2"/><text x="13.8352%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.7460%" y="645" width="0.0804%" height="15" fill="rgb(224,6,22)" fg:x="171" fg:w="1"/><text x="13.9960%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.7460%" y="629" width="0.0804%" height="15" fill="rgb(224,145,5)" fg:x="171" fg:w="1"/><text x="13.9960%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.7460%" y="613" width="0.0804%" height="15" fill="rgb(234,130,49)" fg:x="171" fg:w="1"/><text x="13.9960%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.7460%" y="597" width="0.0804%" height="15" fill="rgb(254,6,2)" fg:x="171" fg:w="1"/><text x="13.9960%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.7460%" y="581" width="0.0804%" height="15" fill="rgb(208,96,46)" fg:x="171" fg:w="1"/><text x="13.9960%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.7460%" y="565" width="0.0804%" height="15" fill="rgb(239,3,39)" fg:x="171" fg:w="1"/><text x="13.9960%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.7460%" y="549" width="0.0804%" height="15" fill="rgb(233,210,1)" fg:x="171" fg:w="1"/><text x="13.9960%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.7460%" y="533" width="0.0804%" height="15" fill="rgb(244,137,37)" fg:x="171" fg:w="1"/><text x="13.9960%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.7460%" y="517" width="0.0804%" height="15" fill="rgb(240,136,2)" fg:x="171" fg:w="1"/><text x="13.9960%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.7460%" y="501" width="0.0804%" height="15" fill="rgb(239,18,37)" fg:x="171" fg:w="1"/><text x="13.9960%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.7460%" y="485" width="0.0804%" height="15" fill="rgb(218,185,22)" fg:x="171" fg:w="1"/><text x="13.9960%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.7460%" y="469" width="0.0804%" height="15" fill="rgb(225,218,4)" fg:x="171" fg:w="1"/><text x="13.9960%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="13.8264%" y="645" width="0.1608%" height="15" fill="rgb(230,182,32)" fg:x="172" fg:w="2"/><text x="14.0764%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.9068%" y="629" width="0.0804%" height="15" fill="rgb(242,56,43)" fg:x="173" fg:w="1"/><text x="14.1568%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.9068%" y="613" width="0.0804%" height="15" fill="rgb(233,99,24)" fg:x="173" fg:w="1"/><text x="14.1568%" y="623.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="13.9871%" y="645" width="0.0804%" height="15" fill="rgb(234,209,42)" fg:x="174" fg:w="1"/><text x="14.2371%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.9871%" y="629" width="0.0804%" height="15" fill="rgb(227,7,12)" fg:x="174" fg:w="1"/><text x="14.2371%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.9871%" y="613" width="0.0804%" height="15" fill="rgb(245,203,43)" fg:x="174" fg:w="1"/><text x="14.2371%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.9871%" y="597" width="0.0804%" height="15" fill="rgb(238,205,33)" fg:x="174" fg:w="1"/><text x="14.2371%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.9871%" y="581" width="0.0804%" height="15" fill="rgb(231,56,7)" fg:x="174" fg:w="1"/><text x="14.2371%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.9871%" y="565" width="0.0804%" height="15" fill="rgb(244,186,29)" fg:x="174" fg:w="1"/><text x="14.2371%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.9871%" y="549" width="0.0804%" height="15" fill="rgb(234,111,31)" fg:x="174" fg:w="1"/><text x="14.2371%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.9871%" y="533" width="0.0804%" height="15" fill="rgb(241,149,10)" fg:x="174" fg:w="1"/><text x="14.2371%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.9871%" y="517" width="0.0804%" height="15" fill="rgb(249,206,44)" fg:x="174" fg:w="1"/><text x="14.2371%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.9871%" y="501" width="0.0804%" height="15" fill="rgb(251,153,30)" fg:x="174" fg:w="1"/><text x="14.2371%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.9871%" y="485" width="0.0804%" height="15" fill="rgb(239,152,38)" fg:x="174" fg:w="1"/><text x="14.2371%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.9871%" y="469" width="0.0804%" height="15" fill="rgb(249,139,47)" fg:x="174" fg:w="1"/><text x="14.2371%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.9871%" y="453" width="0.0804%" height="15" fill="rgb(244,64,35)" fg:x="174" fg:w="1"/><text x="14.2371%" y="463.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (8 samples, 0.64%)</title><rect x="13.5048%" y="693" width="0.6431%" height="15" fill="rgb(216,46,15)" fg:x="168" fg:w="8"/><text x="13.7548%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (5 samples, 0.40%)</title><rect x="13.7460%" y="677" width="0.4019%" height="15" fill="rgb(250,74,19)" fg:x="171" fg:w="5"/><text x="13.9960%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (5 samples, 0.40%)</title><rect x="13.7460%" y="661" width="0.4019%" height="15" fill="rgb(249,42,33)" fg:x="171" fg:w="5"/><text x="13.9960%" y="671.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="14.0675%" y="645" width="0.0804%" height="15" fill="rgb(242,149,17)" fg:x="175" fg:w="1"/><text x="14.3175%" y="655.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="14.1479%" y="677" width="0.0804%" height="15" fill="rgb(244,29,21)" fg:x="176" fg:w="1"/><text x="14.3979%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::new (1 samples, 0.08%)</title><rect x="14.1479%" y="661" width="0.0804%" height="15" fill="rgb(220,130,37)" fg:x="176" fg:w="1"/><text x="14.3979%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (18 samples, 1.45%)</title><rect x="12.9421%" y="725" width="1.4469%" height="15" fill="rgb(211,67,2)" fg:x="161" fg:w="18"/><text x="13.1921%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (18 samples, 1.45%)</title><rect x="12.9421%" y="709" width="1.4469%" height="15" fill="rgb(235,68,52)" fg:x="161" fg:w="18"/><text x="13.1921%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (3 samples, 0.24%)</title><rect x="14.1479%" y="693" width="0.2412%" height="15" fill="rgb(246,142,3)" fg:x="176" fg:w="3"/><text x="14.3979%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="14.2283%" y="677" width="0.1608%" height="15" fill="rgb(241,25,7)" fg:x="177" fg:w="2"/><text x="14.4783%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="14.2283%" y="661" width="0.1608%" height="15" fill="rgb(242,119,39)" fg:x="177" fg:w="2"/><text x="14.4783%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="14.2283%" y="645" width="0.1608%" height="15" fill="rgb(241,98,45)" fg:x="177" fg:w="2"/><text x="14.4783%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="14.2283%" y="629" width="0.1608%" height="15" fill="rgb(254,28,30)" fg:x="177" fg:w="2"/><text x="14.4783%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="14.2283%" y="613" width="0.1608%" height="15" fill="rgb(241,142,54)" fg:x="177" fg:w="2"/><text x="14.4783%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="14.2283%" y="597" width="0.1608%" height="15" fill="rgb(222,85,15)" fg:x="177" fg:w="2"/><text x="14.4783%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="14.2283%" y="581" width="0.1608%" height="15" fill="rgb(210,85,47)" fg:x="177" fg:w="2"/><text x="14.4783%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="14.2283%" y="565" width="0.1608%" height="15" fill="rgb(224,206,25)" fg:x="177" fg:w="2"/><text x="14.4783%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="14.3891%" y="677" width="0.0804%" height="15" fill="rgb(243,201,19)" fg:x="179" fg:w="1"/><text x="14.6391%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="14.3891%" y="661" width="0.0804%" height="15" fill="rgb(236,59,4)" fg:x="179" fg:w="1"/><text x="14.6391%" y="671.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (2 samples, 0.16%)</title><rect x="14.3891%" y="709" width="0.1608%" height="15" fill="rgb(254,179,45)" fg:x="179" fg:w="2"/><text x="14.6391%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="14.3891%" y="693" width="0.1608%" height="15" fill="rgb(226,14,10)" fg:x="179" fg:w="2"/><text x="14.6391%" y="703.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="14.4695%" y="677" width="0.0804%" height="15" fill="rgb(244,27,41)" fg:x="180" fg:w="1"/><text x="14.7195%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.4695%" y="661" width="0.0804%" height="15" fill="rgb(235,35,32)" fg:x="180" fg:w="1"/><text x="14.7195%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.7106%" y="613" width="0.0804%" height="15" fill="rgb(218,68,31)" fg:x="183" fg:w="1"/><text x="14.9606%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.7910%" y="549" width="0.0804%" height="15" fill="rgb(207,120,37)" fg:x="184" fg:w="1"/><text x="15.0410%" y="559.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="14.5498%" y="709" width="0.4019%" height="15" fill="rgb(227,98,0)" fg:x="181" fg:w="5"/><text x="14.7998%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="14.5498%" y="693" width="0.4019%" height="15" fill="rgb(207,7,3)" fg:x="181" fg:w="5"/><text x="14.7998%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.32%)</title><rect x="14.6302%" y="677" width="0.3215%" height="15" fill="rgb(206,98,19)" fg:x="182" fg:w="4"/><text x="14.8802%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="14.6302%" y="661" width="0.3215%" height="15" fill="rgb(217,5,26)" fg:x="182" fg:w="4"/><text x="14.8802%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="14.6302%" y="645" width="0.3215%" height="15" fill="rgb(235,190,38)" fg:x="182" fg:w="4"/><text x="14.8802%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="14.6302%" y="629" width="0.3215%" height="15" fill="rgb(247,86,24)" fg:x="182" fg:w="4"/><text x="14.8802%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.7910%" y="613" width="0.1608%" height="15" fill="rgb(205,101,16)" fg:x="184" fg:w="2"/><text x="15.0410%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.7910%" y="597" width="0.1608%" height="15" fill="rgb(246,168,33)" fg:x="184" fg:w="2"/><text x="15.0410%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="14.7910%" y="581" width="0.1608%" height="15" fill="rgb(231,114,1)" fg:x="184" fg:w="2"/><text x="15.0410%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.7910%" y="565" width="0.1608%" height="15" fill="rgb(207,184,53)" fg:x="184" fg:w="2"/><text x="15.0410%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.8714%" y="549" width="0.0804%" height="15" fill="rgb(224,95,51)" fg:x="185" fg:w="1"/><text x="15.1214%" y="559.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="14.9518%" y="693" width="0.0804%" height="15" fill="rgb(212,188,45)" fg:x="186" fg:w="1"/><text x="15.2018%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.9518%" y="677" width="0.0804%" height="15" fill="rgb(223,154,38)" fg:x="186" fg:w="1"/><text x="15.2018%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="14.9518%" y="661" width="0.0804%" height="15" fill="rgb(251,22,52)" fg:x="186" fg:w="1"/><text x="15.2018%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="15.0322%" y="645" width="0.0804%" height="15" fill="rgb(229,209,22)" fg:x="187" fg:w="1"/><text x="15.2822%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="15.1125%" y="613" width="0.0804%" height="15" fill="rgb(234,138,34)" fg:x="188" fg:w="1"/><text x="15.3625%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="15.1125%" y="645" width="0.1608%" height="15" fill="rgb(212,95,11)" fg:x="188" fg:w="2"/><text x="15.3625%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="15.1125%" y="629" width="0.1608%" height="15" fill="rgb(240,179,47)" fg:x="188" fg:w="2"/><text x="15.3625%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="15.1929%" y="613" width="0.0804%" height="15" fill="rgb(240,163,11)" fg:x="189" fg:w="1"/><text x="15.4429%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="15.2733%" y="597" width="0.0804%" height="15" fill="rgb(236,37,12)" fg:x="190" fg:w="1"/><text x="15.5233%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="15.2733%" y="581" width="0.0804%" height="15" fill="rgb(232,164,16)" fg:x="190" fg:w="1"/><text x="15.5233%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.2733%" y="565" width="0.0804%" height="15" fill="rgb(244,205,15)" fg:x="190" fg:w="1"/><text x="15.5233%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="15.4341%" y="581" width="0.0804%" height="15" fill="rgb(223,117,47)" fg:x="192" fg:w="1"/><text x="15.6841%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="15.5949%" y="549" width="0.0804%" height="15" fill="rgb(244,107,35)" fg:x="194" fg:w="1"/><text x="15.8449%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="15.5949%" y="533" width="0.0804%" height="15" fill="rgb(205,140,8)" fg:x="194" fg:w="1"/><text x="15.8449%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="15.5949%" y="517" width="0.0804%" height="15" fill="rgb(228,84,46)" fg:x="194" fg:w="1"/><text x="15.8449%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.5949%" y="501" width="0.0804%" height="15" fill="rgb(254,188,9)" fg:x="194" fg:w="1"/><text x="15.8449%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.5949%" y="485" width="0.0804%" height="15" fill="rgb(206,112,54)" fg:x="194" fg:w="1"/><text x="15.8449%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.5949%" y="469" width="0.0804%" height="15" fill="rgb(216,84,49)" fg:x="194" fg:w="1"/><text x="15.8449%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.5949%" y="453" width="0.0804%" height="15" fill="rgb(214,194,35)" fg:x="194" fg:w="1"/><text x="15.8449%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.5949%" y="437" width="0.0804%" height="15" fill="rgb(249,28,3)" fg:x="194" fg:w="1"/><text x="15.8449%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.5949%" y="421" width="0.0804%" height="15" fill="rgb(222,56,52)" fg:x="194" fg:w="1"/><text x="15.8449%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="15.6752%" y="533" width="0.1608%" height="15" fill="rgb(245,217,50)" fg:x="195" fg:w="2"/><text x="15.9252%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="15.6752%" y="517" width="0.1608%" height="15" fill="rgb(213,201,24)" fg:x="195" fg:w="2"/><text x="15.9252%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.7556%" y="501" width="0.0804%" height="15" fill="rgb(248,116,28)" fg:x="196" fg:w="1"/><text x="16.0056%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.7556%" y="485" width="0.0804%" height="15" fill="rgb(219,72,43)" fg:x="196" fg:w="1"/><text x="16.0056%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.7556%" y="469" width="0.0804%" height="15" fill="rgb(209,138,14)" fg:x="196" fg:w="1"/><text x="16.0056%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.7556%" y="453" width="0.0804%" height="15" fill="rgb(222,18,33)" fg:x="196" fg:w="1"/><text x="16.0056%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.7556%" y="437" width="0.0804%" height="15" fill="rgb(213,199,7)" fg:x="196" fg:w="1"/><text x="16.0056%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="15.8360%" y="517" width="0.1608%" height="15" fill="rgb(250,110,10)" fg:x="197" fg:w="2"/><text x="16.0860%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="15.8360%" y="501" width="0.1608%" height="15" fill="rgb(248,123,6)" fg:x="197" fg:w="2"/><text x="16.0860%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="15.8360%" y="485" width="0.1608%" height="15" fill="rgb(206,91,31)" fg:x="197" fg:w="2"/><text x="16.0860%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="15.8360%" y="469" width="0.1608%" height="15" fill="rgb(211,154,13)" fg:x="197" fg:w="2"/><text x="16.0860%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="15.8360%" y="453" width="0.1608%" height="15" fill="rgb(225,148,7)" fg:x="197" fg:w="2"/><text x="16.0860%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="15.8360%" y="437" width="0.1608%" height="15" fill="rgb(220,160,43)" fg:x="197" fg:w="2"/><text x="16.0860%" y="447.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="15.8360%" y="421" width="0.1608%" height="15" fill="rgb(213,52,39)" fg:x="197" fg:w="2"/><text x="16.0860%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="15.8360%" y="533" width="0.2412%" height="15" fill="rgb(243,137,7)" fg:x="197" fg:w="3"/><text x="16.0860%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.9968%" y="517" width="0.0804%" height="15" fill="rgb(230,79,13)" fg:x="199" fg:w="1"/><text x="16.2468%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="15.5145%" y="581" width="0.6431%" height="15" fill="rgb(247,105,23)" fg:x="193" fg:w="8"/><text x="15.7645%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="15.5145%" y="565" width="0.6431%" height="15" fill="rgb(223,179,41)" fg:x="193" fg:w="8"/><text x="15.7645%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="15.6752%" y="549" width="0.4823%" height="15" fill="rgb(218,9,34)" fg:x="195" fg:w="6"/><text x="15.9252%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.0772%" y="533" width="0.0804%" height="15" fill="rgb(222,106,8)" fg:x="200" fg:w="1"/><text x="16.3272%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.88%)</title><rect x="15.3537%" y="597" width="0.8842%" height="15" fill="rgb(211,220,0)" fg:x="191" fg:w="11"/><text x="15.6037%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.1576%" y="581" width="0.0804%" height="15" fill="rgb(229,52,16)" fg:x="201" fg:w="1"/><text x="16.4076%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.1576%" y="565" width="0.0804%" height="15" fill="rgb(212,155,18)" fg:x="201" fg:w="1"/><text x="16.4076%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.1576%" y="549" width="0.0804%" height="15" fill="rgb(242,21,14)" fg:x="201" fg:w="1"/><text x="16.4076%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="16.1576%" y="533" width="0.0804%" height="15" fill="rgb(222,19,48)" fg:x="201" fg:w="1"/><text x="16.4076%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.1576%" y="517" width="0.0804%" height="15" fill="rgb(232,45,27)" fg:x="201" fg:w="1"/><text x="16.4076%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.1576%" y="501" width="0.0804%" height="15" fill="rgb(249,103,42)" fg:x="201" fg:w="1"/><text x="16.4076%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.2379%" y="565" width="0.0804%" height="15" fill="rgb(246,81,33)" fg:x="202" fg:w="1"/><text x="16.4879%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.3183%" y="549" width="0.0804%" height="15" fill="rgb(252,33,42)" fg:x="203" fg:w="1"/><text x="16.5683%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.3183%" y="533" width="0.0804%" height="15" fill="rgb(209,212,41)" fg:x="203" fg:w="1"/><text x="16.5683%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.3987%" y="517" width="0.0804%" height="15" fill="rgb(207,154,6)" fg:x="204" fg:w="1"/><text x="16.6487%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.4791%" y="469" width="0.0804%" height="15" fill="rgb(223,64,47)" fg:x="205" fg:w="1"/><text x="16.7291%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.4791%" y="453" width="0.0804%" height="15" fill="rgb(211,161,38)" fg:x="205" fg:w="1"/><text x="16.7291%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="16.4791%" y="517" width="0.1608%" height="15" fill="rgb(219,138,40)" fg:x="205" fg:w="2"/><text x="16.7291%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="16.4791%" y="501" width="0.1608%" height="15" fill="rgb(241,228,46)" fg:x="205" fg:w="2"/><text x="16.7291%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="16.4791%" y="485" width="0.1608%" height="15" fill="rgb(223,209,38)" fg:x="205" fg:w="2"/><text x="16.7291%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.5595%" y="469" width="0.0804%" height="15" fill="rgb(236,164,45)" fg:x="206" fg:w="1"/><text x="16.8095%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.5595%" y="453" width="0.0804%" height="15" fill="rgb(231,15,5)" fg:x="206" fg:w="1"/><text x="16.8095%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="16.2379%" y="597" width="0.4823%" height="15" fill="rgb(252,35,15)" fg:x="202" fg:w="6"/><text x="16.4879%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="16.2379%" y="581" width="0.4823%" height="15" fill="rgb(248,181,18)" fg:x="202" fg:w="6"/><text x="16.4879%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="16.3183%" y="565" width="0.4019%" height="15" fill="rgb(233,39,42)" fg:x="203" fg:w="5"/><text x="16.5683%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="16.3987%" y="549" width="0.3215%" height="15" fill="rgb(238,110,33)" fg:x="204" fg:w="4"/><text x="16.6487%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="16.3987%" y="533" width="0.3215%" height="15" fill="rgb(233,195,10)" fg:x="204" fg:w="4"/><text x="16.6487%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.6399%" y="517" width="0.0804%" height="15" fill="rgb(254,105,3)" fg:x="207" fg:w="1"/><text x="16.8899%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.6399%" y="501" width="0.0804%" height="15" fill="rgb(221,225,9)" fg:x="207" fg:w="1"/><text x="16.8899%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="16.8006%" y="549" width="0.0804%" height="15" fill="rgb(224,227,45)" fg:x="209" fg:w="1"/><text x="17.0506%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="16.8006%" y="533" width="0.0804%" height="15" fill="rgb(229,198,43)" fg:x="209" fg:w="1"/><text x="17.0506%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="16.8810%" y="533" width="0.0804%" height="15" fill="rgb(206,209,35)" fg:x="210" fg:w="1"/><text x="17.1310%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.9614%" y="501" width="0.0804%" height="15" fill="rgb(245,195,53)" fg:x="211" fg:w="1"/><text x="17.2114%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="17.0418%" y="501" width="0.0804%" height="15" fill="rgb(240,92,26)" fg:x="212" fg:w="1"/><text x="17.2918%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.0418%" y="485" width="0.0804%" height="15" fill="rgb(207,40,23)" fg:x="212" fg:w="1"/><text x="17.2918%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.0418%" y="469" width="0.0804%" height="15" fill="rgb(223,111,35)" fg:x="212" fg:w="1"/><text x="17.2918%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.0418%" y="453" width="0.0804%" height="15" fill="rgb(229,147,28)" fg:x="212" fg:w="1"/><text x="17.2918%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.0418%" y="437" width="0.0804%" height="15" fill="rgb(211,29,28)" fg:x="212" fg:w="1"/><text x="17.2918%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.0418%" y="421" width="0.0804%" height="15" fill="rgb(228,72,33)" fg:x="212" fg:w="1"/><text x="17.2918%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.0418%" y="405" width="0.0804%" height="15" fill="rgb(205,214,31)" fg:x="212" fg:w="1"/><text x="17.2918%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.2026%" y="485" width="0.0804%" height="15" fill="rgb(224,111,15)" fg:x="214" fg:w="1"/><text x="17.4526%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.2026%" y="469" width="0.0804%" height="15" fill="rgb(253,21,26)" fg:x="214" fg:w="1"/><text x="17.4526%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.2026%" y="453" width="0.0804%" height="15" fill="rgb(245,139,43)" fg:x="214" fg:w="1"/><text x="17.4526%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="16.9614%" y="517" width="0.4019%" height="15" fill="rgb(252,170,7)" fg:x="211" fg:w="5"/><text x="17.2114%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="17.1222%" y="501" width="0.2412%" height="15" fill="rgb(231,118,14)" fg:x="213" fg:w="3"/><text x="17.3722%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.2830%" y="485" width="0.0804%" height="15" fill="rgb(238,83,0)" fg:x="215" fg:w="1"/><text x="17.5330%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="16.9614%" y="533" width="0.4823%" height="15" fill="rgb(221,39,39)" fg:x="211" fg:w="6"/><text x="17.2114%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="17.3633%" y="517" width="0.0804%" height="15" fill="rgb(222,119,46)" fg:x="216" fg:w="1"/><text x="17.6133%" y="527.50"></text></g><g><title>engine::session::Session::flush (32 samples, 2.57%)</title><rect x="14.9518%" y="709" width="2.5723%" height="15" fill="rgb(222,165,49)" fg:x="186" fg:w="32"/><text x="15.2018%" y="719.50">en..</text></g><g><title>engine::session::Session::save_changes (31 samples, 2.49%)</title><rect x="15.0322%" y="693" width="2.4920%" height="15" fill="rgb(219,113,52)" fg:x="187" fg:w="31"/><text x="15.2822%" y="703.50">en..</text></g><g><title>engine::session::state::State::close (31 samples, 2.49%)</title><rect x="15.0322%" y="677" width="2.4920%" height="15" fill="rgb(214,7,15)" fg:x="187" fg:w="31"/><text x="15.2822%" y="687.50">en..</text></g><g><title>engine::session::state::State::flush_entities (31 samples, 2.49%)</title><rect x="15.0322%" y="661" width="2.4920%" height="15" fill="rgb(235,32,4)" fg:x="187" fg:w="31"/><text x="15.2822%" y="671.50">en..</text></g><g><title>core::iter::adapters::try_process (28 samples, 2.25%)</title><rect x="15.2733%" y="645" width="2.2508%" height="15" fill="rgb(238,90,54)" fg:x="190" fg:w="28"/><text x="15.5233%" y="655.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (28 samples, 2.25%)</title><rect x="15.2733%" y="629" width="2.2508%" height="15" fill="rgb(213,208,19)" fg:x="190" fg:w="28"/><text x="15.5233%" y="639.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (28 samples, 2.25%)</title><rect x="15.2733%" y="613" width="2.2508%" height="15" fill="rgb(233,156,4)" fg:x="190" fg:w="28"/><text x="15.5233%" y="623.50">e..</text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.80%)</title><rect x="16.7203%" y="597" width="0.8039%" height="15" fill="rgb(207,194,5)" fg:x="208" fg:w="10"/><text x="16.9703%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.80%)</title><rect x="16.7203%" y="581" width="0.8039%" height="15" fill="rgb(206,111,30)" fg:x="208" fg:w="10"/><text x="16.9703%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.80%)</title><rect x="16.7203%" y="565" width="0.8039%" height="15" fill="rgb(243,70,54)" fg:x="208" fg:w="10"/><text x="16.9703%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="16.8810%" y="549" width="0.6431%" height="15" fill="rgb(242,28,8)" fg:x="210" fg:w="8"/><text x="17.1310%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.4437%" y="533" width="0.0804%" height="15" fill="rgb(219,106,18)" fg:x="217" fg:w="1"/><text x="17.6937%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="17.5241%" y="677" width="0.0804%" height="15" fill="rgb(244,222,10)" fg:x="218" fg:w="1"/><text x="17.7741%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.5241%" y="661" width="0.0804%" height="15" fill="rgb(236,179,52)" fg:x="218" fg:w="1"/><text x="17.7741%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.5241%" y="645" width="0.0804%" height="15" fill="rgb(213,23,39)" fg:x="218" fg:w="1"/><text x="17.7741%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.5241%" y="629" width="0.0804%" height="15" fill="rgb(238,48,10)" fg:x="218" fg:w="1"/><text x="17.7741%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.5241%" y="613" width="0.0804%" height="15" fill="rgb(251,196,23)" fg:x="218" fg:w="1"/><text x="17.7741%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.5241%" y="597" width="0.0804%" height="15" fill="rgb(250,152,24)" fg:x="218" fg:w="1"/><text x="17.7741%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.5241%" y="581" width="0.0804%" height="15" fill="rgb(209,150,17)" fg:x="218" fg:w="1"/><text x="17.7741%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.5241%" y="565" width="0.0804%" height="15" fill="rgb(234,202,34)" fg:x="218" fg:w="1"/><text x="17.7741%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.5241%" y="549" width="0.0804%" height="15" fill="rgb(253,148,53)" fg:x="218" fg:w="1"/><text x="17.7741%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.5241%" y="533" width="0.0804%" height="15" fill="rgb(218,129,16)" fg:x="218" fg:w="1"/><text x="17.7741%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.5241%" y="517" width="0.0804%" height="15" fill="rgb(216,85,19)" fg:x="218" fg:w="1"/><text x="17.7741%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.5241%" y="501" width="0.0804%" height="15" fill="rgb(235,228,7)" fg:x="218" fg:w="1"/><text x="17.7741%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.5241%" y="485" width="0.0804%" height="15" fill="rgb(245,175,0)" fg:x="218" fg:w="1"/><text x="17.7741%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.5241%" y="469" width="0.0804%" height="15" fill="rgb(208,168,36)" fg:x="218" fg:w="1"/><text x="17.7741%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.5241%" y="453" width="0.0804%" height="15" fill="rgb(246,171,24)" fg:x="218" fg:w="1"/><text x="17.7741%" y="463.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="17.6045%" y="677" width="0.0804%" height="15" fill="rgb(215,142,24)" fg:x="219" fg:w="1"/><text x="17.8545%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="17.6045%" y="661" width="0.0804%" height="15" fill="rgb(250,187,7)" fg:x="219" fg:w="1"/><text x="17.8545%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="17.6045%" y="645" width="0.0804%" height="15" fill="rgb(228,66,33)" fg:x="219" fg:w="1"/><text x="17.8545%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="17.6045%" y="629" width="0.0804%" height="15" fill="rgb(234,215,21)" fg:x="219" fg:w="1"/><text x="17.8545%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="17.6045%" y="613" width="0.0804%" height="15" fill="rgb(222,191,20)" fg:x="219" fg:w="1"/><text x="17.8545%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="17.6849%" y="645" width="0.0804%" height="15" fill="rgb(245,79,54)" fg:x="220" fg:w="1"/><text x="17.9349%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.6849%" y="629" width="0.0804%" height="15" fill="rgb(240,10,37)" fg:x="220" fg:w="1"/><text x="17.9349%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.6849%" y="613" width="0.0804%" height="15" fill="rgb(214,192,32)" fg:x="220" fg:w="1"/><text x="17.9349%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.6849%" y="597" width="0.0804%" height="15" fill="rgb(209,36,54)" fg:x="220" fg:w="1"/><text x="17.9349%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.6849%" y="581" width="0.0804%" height="15" fill="rgb(220,10,11)" fg:x="220" fg:w="1"/><text x="17.9349%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.6849%" y="565" width="0.0804%" height="15" fill="rgb(221,106,17)" fg:x="220" fg:w="1"/><text x="17.9349%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="17.6849%" y="661" width="0.1608%" height="15" fill="rgb(251,142,44)" fg:x="220" fg:w="2"/><text x="17.9349%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="17.7653%" y="645" width="0.0804%" height="15" fill="rgb(238,13,15)" fg:x="221" fg:w="1"/><text x="18.0153%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.7653%" y="629" width="0.0804%" height="15" fill="rgb(208,107,27)" fg:x="221" fg:w="1"/><text x="18.0153%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.8457%" y="565" width="0.0804%" height="15" fill="rgb(205,136,37)" fg:x="222" fg:w="1"/><text x="18.0957%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.8457%" y="549" width="0.0804%" height="15" fill="rgb(250,205,27)" fg:x="222" fg:w="1"/><text x="18.0957%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.8457%" y="533" width="0.0804%" height="15" fill="rgb(210,80,43)" fg:x="222" fg:w="1"/><text x="18.0957%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="17.9260%" y="533" width="0.2412%" height="15" fill="rgb(247,160,36)" fg:x="223" fg:w="3"/><text x="18.1760%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.0868%" y="517" width="0.0804%" height="15" fill="rgb(234,13,49)" fg:x="225" fg:w="1"/><text x="18.3368%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="17.8457%" y="629" width="0.4823%" height="15" fill="rgb(234,122,0)" fg:x="222" fg:w="6"/><text x="18.0957%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="17.8457%" y="613" width="0.4823%" height="15" fill="rgb(207,146,38)" fg:x="222" fg:w="6"/><text x="18.0957%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="17.8457%" y="597" width="0.4823%" height="15" fill="rgb(207,177,25)" fg:x="222" fg:w="6"/><text x="18.0957%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="17.8457%" y="581" width="0.4823%" height="15" fill="rgb(211,178,42)" fg:x="222" fg:w="6"/><text x="18.0957%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="17.9260%" y="565" width="0.4019%" height="15" fill="rgb(230,69,54)" fg:x="223" fg:w="5"/><text x="18.1760%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="17.9260%" y="549" width="0.4019%" height="15" fill="rgb(214,135,41)" fg:x="223" fg:w="5"/><text x="18.1760%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="18.1672%" y="533" width="0.1608%" height="15" fill="rgb(237,67,25)" fg:x="226" fg:w="2"/><text x="18.4172%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.2476%" y="517" width="0.0804%" height="15" fill="rgb(222,189,50)" fg:x="227" fg:w="1"/><text x="18.4976%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.3280%" y="629" width="0.0804%" height="15" fill="rgb(245,148,34)" fg:x="228" fg:w="1"/><text x="18.5780%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.3280%" y="613" width="0.0804%" height="15" fill="rgb(222,29,6)" fg:x="228" fg:w="1"/><text x="18.5780%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.3280%" y="597" width="0.0804%" height="15" fill="rgb(221,189,43)" fg:x="228" fg:w="1"/><text x="18.5780%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="18.4084%" y="629" width="0.0804%" height="15" fill="rgb(207,36,27)" fg:x="229" fg:w="1"/><text x="18.6584%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.4084%" y="613" width="0.0804%" height="15" fill="rgb(217,90,24)" fg:x="229" fg:w="1"/><text x="18.6584%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.4084%" y="597" width="0.0804%" height="15" fill="rgb(224,66,35)" fg:x="229" fg:w="1"/><text x="18.6584%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.4084%" y="581" width="0.0804%" height="15" fill="rgb(221,13,50)" fg:x="229" fg:w="1"/><text x="18.6584%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.4084%" y="565" width="0.0804%" height="15" fill="rgb(236,68,49)" fg:x="229" fg:w="1"/><text x="18.6584%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_entity (11 samples, 0.88%)</title><rect x="17.6849%" y="677" width="0.8842%" height="15" fill="rgb(229,146,28)" fg:x="220" fg:w="11"/><text x="17.9349%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="17.8457%" y="661" width="0.7235%" height="15" fill="rgb(225,31,38)" fg:x="222" fg:w="9"/><text x="18.0957%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="17.8457%" y="645" width="0.7235%" height="15" fill="rgb(250,208,3)" fg:x="222" fg:w="9"/><text x="18.0957%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="18.4887%" y="629" width="0.0804%" height="15" fill="rgb(246,54,23)" fg:x="230" fg:w="1"/><text x="18.7387%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.4887%" y="613" width="0.0804%" height="15" fill="rgb(243,76,11)" fg:x="230" fg:w="1"/><text x="18.7387%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.4887%" y="597" width="0.0804%" height="15" fill="rgb(245,21,50)" fg:x="230" fg:w="1"/><text x="18.7387%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.4887%" y="581" width="0.0804%" height="15" fill="rgb(228,9,43)" fg:x="230" fg:w="1"/><text x="18.7387%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (14 samples, 1.13%)</title><rect x="17.5241%" y="693" width="1.1254%" height="15" fill="rgb(208,100,47)" fg:x="218" fg:w="14"/><text x="17.7741%" y="703.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="18.5691%" y="677" width="0.0804%" height="15" fill="rgb(232,26,8)" fg:x="231" fg:w="1"/><text x="18.8191%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="18.5691%" y="661" width="0.0804%" height="15" fill="rgb(216,166,38)" fg:x="231" fg:w="1"/><text x="18.8191%" y="671.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="18.5691%" y="645" width="0.0804%" height="15" fill="rgb(251,202,51)" fg:x="231" fg:w="1"/><text x="18.8191%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="18.5691%" y="629" width="0.0804%" height="15" fill="rgb(254,216,34)" fg:x="231" fg:w="1"/><text x="18.8191%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.6495%" y="677" width="0.0804%" height="15" fill="rgb(251,32,27)" fg:x="232" fg:w="1"/><text x="18.8995%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.6495%" y="661" width="0.0804%" height="15" fill="rgb(208,127,28)" fg:x="232" fg:w="1"/><text x="18.8995%" y="671.50"></text></g><g><title>plugins_core::build::Build::save (16 samples, 1.29%)</title><rect x="17.5241%" y="709" width="1.2862%" height="15" fill="rgb(224,137,22)" fg:x="218" fg:w="16"/><text x="17.7741%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="18.6495%" y="693" width="0.1608%" height="15" fill="rgb(254,70,32)" fg:x="232" fg:w="2"/><text x="18.8995%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.7299%" y="677" width="0.0804%" height="15" fill="rgb(229,75,37)" fg:x="233" fg:w="1"/><text x="18.9799%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.7299%" y="661" width="0.0804%" height="15" fill="rgb(252,64,23)" fg:x="233" fg:w="1"/><text x="18.9799%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="18.7299%" y="645" width="0.0804%" height="15" fill="rgb(232,162,48)" fg:x="233" fg:w="1"/><text x="18.9799%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.7299%" y="629" width="0.0804%" height="15" fill="rgb(246,160,12)" fg:x="233" fg:w="1"/><text x="18.9799%" y="639.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="18.7299%" y="613" width="0.0804%" height="15" fill="rgb(247,166,0)" fg:x="233" fg:w="1"/><text x="18.9799%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="18.8103%" y="709" width="0.0804%" height="15" fill="rgb(249,219,21)" fg:x="234" fg:w="1"/><text x="19.0603%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="18.8103%" y="693" width="0.0804%" height="15" fill="rgb(205,209,3)" fg:x="234" fg:w="1"/><text x="19.0603%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="18.8103%" y="677" width="0.0804%" height="15" fill="rgb(243,44,1)" fg:x="234" fg:w="1"/><text x="19.0603%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="18.8103%" y="661" width="0.0804%" height="15" fill="rgb(206,159,16)" fg:x="234" fg:w="1"/><text x="19.0603%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.8103%" y="645" width="0.0804%" height="15" fill="rgb(244,77,30)" fg:x="234" fg:w="1"/><text x="19.0603%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.8907%" y="629" width="0.0804%" height="15" fill="rgb(218,69,12)" fg:x="235" fg:w="1"/><text x="19.1407%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="18.8907%" y="645" width="0.1608%" height="15" fill="rgb(212,87,7)" fg:x="235" fg:w="2"/><text x="19.1407%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.9711%" y="629" width="0.0804%" height="15" fill="rgb(245,114,25)" fg:x="236" fg:w="1"/><text x="19.2211%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.9711%" y="613" width="0.0804%" height="15" fill="rgb(210,61,42)" fg:x="236" fg:w="1"/><text x="19.2211%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="18.9711%" y="597" width="0.0804%" height="15" fill="rgb(211,52,33)" fg:x="236" fg:w="1"/><text x="19.2211%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.9711%" y="581" width="0.0804%" height="15" fill="rgb(234,58,33)" fg:x="236" fg:w="1"/><text x="19.2211%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.9711%" y="565" width="0.0804%" height="15" fill="rgb(220,115,36)" fg:x="236" fg:w="1"/><text x="19.2211%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.9711%" y="549" width="0.0804%" height="15" fill="rgb(243,153,54)" fg:x="236" fg:w="1"/><text x="19.2211%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="18.8907%" y="677" width="0.2412%" height="15" fill="rgb(251,47,18)" fg:x="235" fg:w="3"/><text x="19.1407%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="18.8907%" y="661" width="0.2412%" height="15" fill="rgb(242,102,42)" fg:x="235" fg:w="3"/><text x="19.1407%" y="671.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="19.0514%" y="645" width="0.0804%" height="15" fill="rgb(234,31,38)" fg:x="237" fg:w="1"/><text x="19.3014%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="19.0514%" y="629" width="0.0804%" height="15" fill="rgb(221,117,51)" fg:x="237" fg:w="1"/><text x="19.3014%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (5 samples, 0.40%)</title><rect x="18.8907%" y="709" width="0.4019%" height="15" fill="rgb(212,20,18)" fg:x="235" fg:w="5"/><text x="19.1407%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (5 samples, 0.40%)</title><rect x="18.8907%" y="693" width="0.4019%" height="15" fill="rgb(245,133,36)" fg:x="235" fg:w="5"/><text x="19.1407%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="19.1318%" y="677" width="0.1608%" height="15" fill="rgb(212,6,19)" fg:x="238" fg:w="2"/><text x="19.3818%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (2 samples, 0.16%)</title><rect x="19.1318%" y="661" width="0.1608%" height="15" fill="rgb(218,1,36)" fg:x="238" fg:w="2"/><text x="19.3818%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.2122%" y="645" width="0.0804%" height="15" fill="rgb(246,84,54)" fg:x="239" fg:w="1"/><text x="19.4622%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="19.2122%" y="629" width="0.0804%" height="15" fill="rgb(242,110,6)" fg:x="239" fg:w="1"/><text x="19.4622%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.2122%" y="613" width="0.0804%" height="15" fill="rgb(214,47,5)" fg:x="239" fg:w="1"/><text x="19.4622%" y="623.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="19.2122%" y="597" width="0.0804%" height="15" fill="rgb(218,159,25)" fg:x="239" fg:w="1"/><text x="19.4622%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="19.2122%" y="581" width="0.0804%" height="15" fill="rgb(215,211,28)" fg:x="239" fg:w="1"/><text x="19.4622%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="19.2926%" y="677" width="0.0804%" height="15" fill="rgb(238,59,32)" fg:x="240" fg:w="1"/><text x="19.5426%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="19.2926%" y="693" width="0.2412%" height="15" fill="rgb(226,82,3)" fg:x="240" fg:w="3"/><text x="19.5426%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="19.3730%" y="677" width="0.1608%" height="15" fill="rgb(240,164,32)" fg:x="241" fg:w="2"/><text x="19.6230%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="19.3730%" y="661" width="0.1608%" height="15" fill="rgb(232,46,7)" fg:x="241" fg:w="2"/><text x="19.6230%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="19.4534%" y="645" width="0.0804%" height="15" fill="rgb(229,129,53)" fg:x="242" fg:w="1"/><text x="19.7034%" y="655.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="19.4534%" y="629" width="0.0804%" height="15" fill="rgb(234,188,29)" fg:x="242" fg:w="1"/><text x="19.7034%" y="639.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="19.4534%" y="613" width="0.0804%" height="15" fill="rgb(246,141,4)" fg:x="242" fg:w="1"/><text x="19.7034%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.4534%" y="597" width="0.0804%" height="15" fill="rgb(229,23,39)" fg:x="242" fg:w="1"/><text x="19.7034%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.4534%" y="581" width="0.0804%" height="15" fill="rgb(206,12,3)" fg:x="242" fg:w="1"/><text x="19.7034%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (4 samples, 0.32%)</title><rect x="19.2926%" y="709" width="0.3215%" height="15" fill="rgb(252,226,20)" fg:x="240" fg:w="4"/><text x="19.5426%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="19.5338%" y="693" width="0.0804%" height="15" fill="rgb(216,123,35)" fg:x="243" fg:w="1"/><text x="19.7838%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="19.5338%" y="677" width="0.0804%" height="15" fill="rgb(212,68,40)" fg:x="243" fg:w="1"/><text x="19.7838%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.5338%" y="661" width="0.0804%" height="15" fill="rgb(254,125,32)" fg:x="243" fg:w="1"/><text x="19.7838%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="19.6141%" y="693" width="0.0804%" height="15" fill="rgb(253,97,22)" fg:x="244" fg:w="1"/><text x="19.8641%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="19.6141%" y="677" width="0.0804%" height="15" fill="rgb(241,101,14)" fg:x="244" fg:w="1"/><text x="19.8641%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="19.6141%" y="661" width="0.0804%" height="15" fill="rgb(238,103,29)" fg:x="244" fg:w="1"/><text x="19.8641%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.6141%" y="645" width="0.0804%" height="15" fill="rgb(233,195,47)" fg:x="244" fg:w="1"/><text x="19.8641%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.6945%" y="629" width="0.0804%" height="15" fill="rgb(246,218,30)" fg:x="245" fg:w="1"/><text x="19.9445%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.7749%" y="629" width="0.0804%" height="15" fill="rgb(219,145,47)" fg:x="246" fg:w="1"/><text x="20.0249%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="19.6945%" y="645" width="0.2412%" height="15" fill="rgb(243,12,26)" fg:x="245" fg:w="3"/><text x="19.9445%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.8553%" y="629" width="0.0804%" height="15" fill="rgb(214,87,16)" fg:x="247" fg:w="1"/><text x="20.1053%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="19.6141%" y="709" width="0.4019%" height="15" fill="rgb(208,99,42)" fg:x="244" fg:w="5"/><text x="19.8641%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="19.6945%" y="693" width="0.3215%" height="15" fill="rgb(253,99,2)" fg:x="245" fg:w="4"/><text x="19.9445%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="19.6945%" y="677" width="0.3215%" height="15" fill="rgb(220,168,23)" fg:x="245" fg:w="4"/><text x="19.9445%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="19.6945%" y="661" width="0.3215%" height="15" fill="rgb(242,38,24)" fg:x="245" fg:w="4"/><text x="19.9445%" y="671.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="19.9357%" y="645" width="0.0804%" height="15" fill="rgb(225,182,9)" fg:x="248" fg:w="1"/><text x="20.1857%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="19.9357%" y="629" width="0.0804%" height="15" fill="rgb(243,178,37)" fg:x="248" fg:w="1"/><text x="20.1857%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="19.9357%" y="613" width="0.0804%" height="15" fill="rgb(232,139,19)" fg:x="248" fg:w="1"/><text x="20.1857%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (71 samples, 5.71%)</title><rect x="14.3891%" y="725" width="5.7074%" height="15" fill="rgb(225,201,24)" fg:x="179" fg:w="71"/><text x="14.6391%" y="735.50">plugins..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="20.0161%" y="709" width="0.0804%" height="15" fill="rgb(221,47,46)" fg:x="249" fg:w="1"/><text x="20.2661%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="20.0161%" y="693" width="0.0804%" height="15" fill="rgb(249,23,13)" fg:x="249" fg:w="1"/><text x="20.2661%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="20.0965%" y="677" width="0.0804%" height="15" fill="rgb(219,9,5)" fg:x="250" fg:w="1"/><text x="20.3465%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="20.0965%" y="661" width="0.0804%" height="15" fill="rgb(254,171,16)" fg:x="250" fg:w="1"/><text x="20.3465%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="20.0965%" y="645" width="0.0804%" height="15" fill="rgb(230,171,20)" fg:x="250" fg:w="1"/><text x="20.3465%" y="655.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="20.0965%" y="629" width="0.0804%" height="15" fill="rgb(210,71,41)" fg:x="250" fg:w="1"/><text x="20.3465%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="20.0965%" y="613" width="0.0804%" height="15" fill="rgb(206,173,20)" fg:x="250" fg:w="1"/><text x="20.3465%" y="623.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="20.0965%" y="597" width="0.0804%" height="15" fill="rgb(233,88,34)" fg:x="250" fg:w="1"/><text x="20.3465%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="20.0965%" y="581" width="0.0804%" height="15" fill="rgb(223,209,46)" fg:x="250" fg:w="1"/><text x="20.3465%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="20.0965%" y="565" width="0.0804%" height="15" fill="rgb(250,43,18)" fg:x="250" fg:w="1"/><text x="20.3465%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (2 samples, 0.16%)</title><rect x="20.0965%" y="725" width="0.1608%" height="15" fill="rgb(208,13,10)" fg:x="250" fg:w="2"/><text x="20.3465%" y="735.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="20.0965%" y="709" width="0.1608%" height="15" fill="rgb(212,200,36)" fg:x="250" fg:w="2"/><text x="20.3465%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="20.0965%" y="693" width="0.1608%" height="15" fill="rgb(225,90,30)" fg:x="250" fg:w="2"/><text x="20.3465%" y="703.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="20.1768%" y="677" width="0.0804%" height="15" fill="rgb(236,182,39)" fg:x="251" fg:w="1"/><text x="20.4268%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="20.1768%" y="661" width="0.0804%" height="15" fill="rgb(212,144,35)" fg:x="251" fg:w="1"/><text x="20.4268%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="20.1768%" y="645" width="0.0804%" height="15" fill="rgb(228,63,44)" fg:x="251" fg:w="1"/><text x="20.4268%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::hands (1 samples, 0.08%)</title><rect x="20.2572%" y="725" width="0.0804%" height="15" fill="rgb(228,109,6)" fg:x="252" fg:w="1"/><text x="20.5072%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="20.2572%" y="709" width="0.0804%" height="15" fill="rgb(238,117,24)" fg:x="252" fg:w="1"/><text x="20.5072%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.2572%" y="693" width="0.0804%" height="15" fill="rgb(242,26,26)" fg:x="252" fg:w="1"/><text x="20.5072%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="20.4180%" y="677" width="0.0804%" height="15" fill="rgb(221,92,48)" fg:x="254" fg:w="1"/><text x="20.6680%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.4180%" y="661" width="0.0804%" height="15" fill="rgb(209,209,32)" fg:x="254" fg:w="1"/><text x="20.6680%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="20.4180%" y="693" width="0.1608%" height="15" fill="rgb(221,70,22)" fg:x="254" fg:w="2"/><text x="20.6680%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="20.4984%" y="677" width="0.0804%" height="15" fill="rgb(248,145,5)" fg:x="255" fg:w="1"/><text x="20.7484%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.4984%" y="661" width="0.0804%" height="15" fill="rgb(226,116,26)" fg:x="255" fg:w="1"/><text x="20.7484%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="20.4984%" y="645" width="0.0804%" height="15" fill="rgb(244,5,17)" fg:x="255" fg:w="1"/><text x="20.7484%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="20.4984%" y="629" width="0.0804%" height="15" fill="rgb(252,159,33)" fg:x="255" fg:w="1"/><text x="20.7484%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="20.4984%" y="613" width="0.0804%" height="15" fill="rgb(206,71,0)" fg:x="255" fg:w="1"/><text x="20.7484%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="20.5788%" y="693" width="0.0804%" height="15" fill="rgb(233,118,54)" fg:x="256" fg:w="1"/><text x="20.8288%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.5788%" y="677" width="0.0804%" height="15" fill="rgb(234,83,48)" fg:x="256" fg:w="1"/><text x="20.8288%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="20.5788%" y="661" width="0.0804%" height="15" fill="rgb(228,3,54)" fg:x="256" fg:w="1"/><text x="20.8288%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.5788%" y="645" width="0.0804%" height="15" fill="rgb(226,155,13)" fg:x="256" fg:w="1"/><text x="20.8288%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.5788%" y="629" width="0.0804%" height="15" fill="rgb(241,28,37)" fg:x="256" fg:w="1"/><text x="20.8288%" y="639.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="20.6592%" y="661" width="0.0804%" height="15" fill="rgb(233,93,10)" fg:x="257" fg:w="1"/><text x="20.9092%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.6592%" y="645" width="0.0804%" height="15" fill="rgb(225,113,19)" fg:x="257" fg:w="1"/><text x="20.9092%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="20.6592%" y="629" width="0.0804%" height="15" fill="rgb(241,2,18)" fg:x="257" fg:w="1"/><text x="20.9092%" y="639.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="20.6592%" y="693" width="0.1608%" height="15" fill="rgb(228,207,21)" fg:x="257" fg:w="2"/><text x="20.9092%" y="703.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="20.6592%" y="677" width="0.1608%" height="15" fill="rgb(213,211,35)" fg:x="257" fg:w="2"/><text x="20.9092%" y="687.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="20.7395%" y="661" width="0.0804%" height="15" fill="rgb(209,83,10)" fg:x="258" fg:w="1"/><text x="20.9895%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="20.7395%" y="645" width="0.0804%" height="15" fill="rgb(209,164,1)" fg:x="258" fg:w="1"/><text x="20.9895%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="20.8199%" y="661" width="0.1608%" height="15" fill="rgb(213,184,43)" fg:x="259" fg:w="2"/><text x="21.0699%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="20.8199%" y="645" width="0.1608%" height="15" fill="rgb(231,61,34)" fg:x="259" fg:w="2"/><text x="21.0699%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="20.8199%" y="629" width="0.1608%" height="15" fill="rgb(235,75,3)" fg:x="259" fg:w="2"/><text x="21.0699%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.9003%" y="613" width="0.0804%" height="15" fill="rgb(220,106,47)" fg:x="260" fg:w="1"/><text x="21.1503%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="20.9003%" y="597" width="0.0804%" height="15" fill="rgb(210,196,33)" fg:x="260" fg:w="1"/><text x="21.1503%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="20.9807%" y="645" width="0.1608%" height="15" fill="rgb(229,154,42)" fg:x="261" fg:w="2"/><text x="21.2307%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="21.0611%" y="629" width="0.0804%" height="15" fill="rgb(228,114,26)" fg:x="262" fg:w="1"/><text x="21.3111%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.0611%" y="613" width="0.0804%" height="15" fill="rgb(208,144,1)" fg:x="262" fg:w="1"/><text x="21.3111%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.0611%" y="597" width="0.0804%" height="15" fill="rgb(239,112,37)" fg:x="262" fg:w="1"/><text x="21.3111%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.0611%" y="581" width="0.0804%" height="15" fill="rgb(210,96,50)" fg:x="262" fg:w="1"/><text x="21.3111%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="21.1415%" y="613" width="0.0804%" height="15" fill="rgb(222,178,2)" fg:x="263" fg:w="1"/><text x="21.3915%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="21.1415%" y="597" width="0.0804%" height="15" fill="rgb(226,74,18)" fg:x="263" fg:w="1"/><text x="21.3915%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="21.1415%" y="581" width="0.0804%" height="15" fill="rgb(225,67,54)" fg:x="263" fg:w="1"/><text x="21.3915%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="21.1415%" y="565" width="0.0804%" height="15" fill="rgb(251,92,32)" fg:x="263" fg:w="1"/><text x="21.3915%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.1415%" y="549" width="0.0804%" height="15" fill="rgb(228,149,22)" fg:x="263" fg:w="1"/><text x="21.3915%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.1415%" y="533" width="0.0804%" height="15" fill="rgb(243,54,13)" fg:x="263" fg:w="1"/><text x="21.3915%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.1415%" y="517" width="0.0804%" height="15" fill="rgb(243,180,28)" fg:x="263" fg:w="1"/><text x="21.3915%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.2219%" y="581" width="0.0804%" height="15" fill="rgb(208,167,24)" fg:x="264" fg:w="1"/><text x="21.4719%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="20.8199%" y="677" width="0.5627%" height="15" fill="rgb(245,73,45)" fg:x="259" fg:w="7"/><text x="21.0699%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="20.9807%" y="661" width="0.4019%" height="15" fill="rgb(237,203,48)" fg:x="261" fg:w="5"/><text x="21.2307%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="21.1415%" y="645" width="0.2412%" height="15" fill="rgb(211,197,16)" fg:x="263" fg:w="3"/><text x="21.3915%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="21.1415%" y="629" width="0.2412%" height="15" fill="rgb(243,99,51)" fg:x="263" fg:w="3"/><text x="21.3915%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="21.2219%" y="613" width="0.1608%" height="15" fill="rgb(215,123,29)" fg:x="264" fg:w="2"/><text x="21.4719%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="21.2219%" y="597" width="0.1608%" height="15" fill="rgb(239,186,37)" fg:x="264" fg:w="2"/><text x="21.4719%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.3023%" y="581" width="0.0804%" height="15" fill="rgb(252,136,39)" fg:x="265" fg:w="1"/><text x="21.5523%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.3826%" y="645" width="0.0804%" height="15" fill="rgb(223,213,32)" fg:x="266" fg:w="1"/><text x="21.6326%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.3826%" y="629" width="0.0804%" height="15" fill="rgb(233,115,5)" fg:x="266" fg:w="1"/><text x="21.6326%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="21.3826%" y="613" width="0.0804%" height="15" fill="rgb(207,226,44)" fg:x="266" fg:w="1"/><text x="21.6326%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="21.3826%" y="597" width="0.0804%" height="15" fill="rgb(208,126,0)" fg:x="266" fg:w="1"/><text x="21.6326%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="21.3826%" y="581" width="0.0804%" height="15" fill="rgb(244,66,21)" fg:x="266" fg:w="1"/><text x="21.6326%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.3826%" y="565" width="0.0804%" height="15" fill="rgb(222,97,12)" fg:x="266" fg:w="1"/><text x="21.6326%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.3826%" y="549" width="0.0804%" height="15" fill="rgb(219,213,19)" fg:x="266" fg:w="1"/><text x="21.6326%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="21.3826%" y="533" width="0.0804%" height="15" fill="rgb(252,169,30)" fg:x="266" fg:w="1"/><text x="21.6326%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="21.3826%" y="517" width="0.0804%" height="15" fill="rgb(206,32,51)" fg:x="266" fg:w="1"/><text x="21.6326%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="21.3826%" y="501" width="0.0804%" height="15" fill="rgb(250,172,42)" fg:x="266" fg:w="1"/><text x="21.6326%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="21.3826%" y="485" width="0.0804%" height="15" fill="rgb(209,34,43)" fg:x="266" fg:w="1"/><text x="21.6326%" y="495.50"></text></g><g><title>plugins_core::build::Build::save (9 samples, 0.72%)</title><rect x="20.8199%" y="693" width="0.7235%" height="15" fill="rgb(223,11,35)" fg:x="259" fg:w="9"/><text x="21.0699%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="21.3826%" y="677" width="0.1608%" height="15" fill="rgb(251,219,26)" fg:x="266" fg:w="2"/><text x="21.6326%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.3826%" y="661" width="0.1608%" height="15" fill="rgb(231,119,3)" fg:x="266" fg:w="2"/><text x="21.6326%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.4630%" y="645" width="0.0804%" height="15" fill="rgb(216,97,11)" fg:x="267" fg:w="1"/><text x="21.7130%" y="655.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="21.5434%" y="677" width="0.0804%" height="15" fill="rgb(223,59,9)" fg:x="268" fg:w="1"/><text x="21.7934%" y="687.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="21.7846%" y="629" width="0.0804%" height="15" fill="rgb(233,93,31)" fg:x="271" fg:w="1"/><text x="22.0346%" y="639.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="21.7846%" y="613" width="0.0804%" height="15" fill="rgb(239,81,33)" fg:x="271" fg:w="1"/><text x="22.0346%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (20 samples, 1.61%)</title><rect x="20.3376%" y="725" width="1.6077%" height="15" fill="rgb(213,120,34)" fg:x="253" fg:w="20"/><text x="20.5876%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (20 samples, 1.61%)</title><rect x="20.3376%" y="709" width="1.6077%" height="15" fill="rgb(243,49,53)" fg:x="253" fg:w="20"/><text x="20.5876%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (5 samples, 0.40%)</title><rect x="21.5434%" y="693" width="0.4019%" height="15" fill="rgb(247,216,33)" fg:x="268" fg:w="5"/><text x="21.7934%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.32%)</title><rect x="21.6238%" y="677" width="0.3215%" height="15" fill="rgb(226,26,14)" fg:x="269" fg:w="4"/><text x="21.8738%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (4 samples, 0.32%)</title><rect x="21.6238%" y="661" width="0.3215%" height="15" fill="rgb(215,49,53)" fg:x="269" fg:w="4"/><text x="21.8738%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="21.6238%" y="645" width="0.3215%" height="15" fill="rgb(245,162,40)" fg:x="269" fg:w="4"/><text x="21.8738%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.8650%" y="629" width="0.0804%" height="15" fill="rgb(229,68,17)" fg:x="272" fg:w="1"/><text x="22.1150%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="22.1061%" y="693" width="0.0804%" height="15" fill="rgb(213,182,10)" fg:x="275" fg:w="1"/><text x="22.3561%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="22.1061%" y="677" width="0.0804%" height="15" fill="rgb(245,125,30)" fg:x="275" fg:w="1"/><text x="22.3561%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="22.1061%" y="661" width="0.0804%" height="15" fill="rgb(232,202,2)" fg:x="275" fg:w="1"/><text x="22.3561%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="22.1061%" y="645" width="0.0804%" height="15" fill="rgb(237,140,51)" fg:x="275" fg:w="1"/><text x="22.3561%" y="655.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="22.1865%" y="693" width="0.0804%" height="15" fill="rgb(236,157,25)" fg:x="276" fg:w="1"/><text x="22.4365%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.1865%" y="677" width="0.0804%" height="15" fill="rgb(219,209,0)" fg:x="276" fg:w="1"/><text x="22.4365%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="22.1865%" y="661" width="0.0804%" height="15" fill="rgb(240,116,54)" fg:x="276" fg:w="1"/><text x="22.4365%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (4 samples, 0.32%)</title><rect x="22.0257%" y="709" width="0.3215%" height="15" fill="rgb(216,10,36)" fg:x="274" fg:w="4"/><text x="22.2757%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="22.2669%" y="693" width="0.0804%" height="15" fill="rgb(222,72,44)" fg:x="277" fg:w="1"/><text x="22.5169%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="22.2669%" y="677" width="0.0804%" height="15" fill="rgb(232,159,9)" fg:x="277" fg:w="1"/><text x="22.5169%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="22.2669%" y="661" width="0.0804%" height="15" fill="rgb(210,39,32)" fg:x="277" fg:w="1"/><text x="22.5169%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="22.2669%" y="645" width="0.0804%" height="15" fill="rgb(216,194,45)" fg:x="277" fg:w="1"/><text x="22.5169%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="22.2669%" y="629" width="0.0804%" height="15" fill="rgb(218,18,35)" fg:x="277" fg:w="1"/><text x="22.5169%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.2669%" y="613" width="0.0804%" height="15" fill="rgb(207,83,51)" fg:x="277" fg:w="1"/><text x="22.5169%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="22.3473%" y="709" width="0.1608%" height="15" fill="rgb(225,63,43)" fg:x="278" fg:w="2"/><text x="22.5973%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="22.3473%" y="693" width="0.1608%" height="15" fill="rgb(207,57,36)" fg:x="278" fg:w="2"/><text x="22.5973%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="22.4277%" y="677" width="0.0804%" height="15" fill="rgb(216,99,33)" fg:x="279" fg:w="1"/><text x="22.6777%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="22.4277%" y="661" width="0.0804%" height="15" fill="rgb(225,42,16)" fg:x="279" fg:w="1"/><text x="22.6777%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="22.4277%" y="645" width="0.0804%" height="15" fill="rgb(220,201,45)" fg:x="279" fg:w="1"/><text x="22.6777%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="22.4277%" y="629" width="0.0804%" height="15" fill="rgb(225,33,4)" fg:x="279" fg:w="1"/><text x="22.6777%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.4277%" y="613" width="0.0804%" height="15" fill="rgb(224,33,50)" fg:x="279" fg:w="1"/><text x="22.6777%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.5080%" y="709" width="0.0804%" height="15" fill="rgb(246,198,51)" fg:x="280" fg:w="1"/><text x="22.7580%" y="719.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="22.5884%" y="677" width="0.0804%" height="15" fill="rgb(205,22,4)" fg:x="281" fg:w="1"/><text x="22.8384%" y="687.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="22.5884%" y="709" width="0.1608%" height="15" fill="rgb(206,3,8)" fg:x="281" fg:w="2"/><text x="22.8384%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="22.5884%" y="693" width="0.1608%" height="15" fill="rgb(251,23,15)" fg:x="281" fg:w="2"/><text x="22.8384%" y="703.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="22.6688%" y="677" width="0.0804%" height="15" fill="rgb(252,88,28)" fg:x="282" fg:w="1"/><text x="22.9188%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="22.6688%" y="661" width="0.0804%" height="15" fill="rgb(212,127,14)" fg:x="282" fg:w="1"/><text x="22.9188%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="22.6688%" y="645" width="0.0804%" height="15" fill="rgb(247,145,37)" fg:x="282" fg:w="1"/><text x="22.9188%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="22.6688%" y="629" width="0.0804%" height="15" fill="rgb(209,117,53)" fg:x="282" fg:w="1"/><text x="22.9188%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="22.8296%" y="677" width="0.0804%" height="15" fill="rgb(212,90,42)" fg:x="284" fg:w="1"/><text x="23.0796%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.8296%" y="661" width="0.0804%" height="15" fill="rgb(218,164,37)" fg:x="284" fg:w="1"/><text x="23.0796%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.8296%" y="645" width="0.0804%" height="15" fill="rgb(246,65,34)" fg:x="284" fg:w="1"/><text x="23.0796%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.8296%" y="629" width="0.0804%" height="15" fill="rgb(231,100,33)" fg:x="284" fg:w="1"/><text x="23.0796%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.8296%" y="613" width="0.0804%" height="15" fill="rgb(228,126,14)" fg:x="284" fg:w="1"/><text x="23.0796%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="22.8296%" y="597" width="0.0804%" height="15" fill="rgb(215,173,21)" fg:x="284" fg:w="1"/><text x="23.0796%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="22.8296%" y="581" width="0.0804%" height="15" fill="rgb(210,6,40)" fg:x="284" fg:w="1"/><text x="23.0796%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="22.8296%" y="565" width="0.0804%" height="15" fill="rgb(212,48,18)" fg:x="284" fg:w="1"/><text x="23.0796%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.8296%" y="549" width="0.0804%" height="15" fill="rgb(230,214,11)" fg:x="284" fg:w="1"/><text x="23.0796%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.8296%" y="533" width="0.0804%" height="15" fill="rgb(254,105,39)" fg:x="284" fg:w="1"/><text x="23.0796%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="22.8296%" y="517" width="0.0804%" height="15" fill="rgb(245,158,5)" fg:x="284" fg:w="1"/><text x="23.0796%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="22.8296%" y="501" width="0.0804%" height="15" fill="rgb(249,208,11)" fg:x="284" fg:w="1"/><text x="23.0796%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="22.8296%" y="485" width="0.0804%" height="15" fill="rgb(210,39,28)" fg:x="284" fg:w="1"/><text x="23.0796%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="22.8296%" y="469" width="0.0804%" height="15" fill="rgb(211,56,53)" fg:x="284" fg:w="1"/><text x="23.0796%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.8296%" y="453" width="0.0804%" height="15" fill="rgb(226,201,30)" fg:x="284" fg:w="1"/><text x="23.0796%" y="463.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="22.9100%" y="677" width="0.0804%" height="15" fill="rgb(239,101,34)" fg:x="285" fg:w="1"/><text x="23.1600%" y="687.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="22.9100%" y="661" width="0.0804%" height="15" fill="rgb(226,209,5)" fg:x="285" fg:w="1"/><text x="23.1600%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="22.9100%" y="645" width="0.0804%" height="15" fill="rgb(250,105,47)" fg:x="285" fg:w="1"/><text x="23.1600%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="22.9100%" y="629" width="0.0804%" height="15" fill="rgb(230,72,3)" fg:x="285" fg:w="1"/><text x="23.1600%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="23.0707%" y="565" width="0.0804%" height="15" fill="rgb(232,218,39)" fg:x="287" fg:w="1"/><text x="23.3207%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="23.0707%" y="549" width="0.0804%" height="15" fill="rgb(248,166,6)" fg:x="287" fg:w="1"/><text x="23.3207%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.0707%" y="533" width="0.0804%" height="15" fill="rgb(247,89,20)" fg:x="287" fg:w="1"/><text x="23.3207%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="22.9904%" y="645" width="0.2412%" height="15" fill="rgb(248,130,54)" fg:x="286" fg:w="3"/><text x="23.2404%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="23.0707%" y="629" width="0.1608%" height="15" fill="rgb(234,196,4)" fg:x="287" fg:w="2"/><text x="23.3207%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="23.0707%" y="613" width="0.1608%" height="15" fill="rgb(250,143,31)" fg:x="287" fg:w="2"/><text x="23.3207%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="23.0707%" y="597" width="0.1608%" height="15" fill="rgb(211,110,34)" fg:x="287" fg:w="2"/><text x="23.3207%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="23.0707%" y="581" width="0.1608%" height="15" fill="rgb(215,124,48)" fg:x="287" fg:w="2"/><text x="23.3207%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.1511%" y="565" width="0.0804%" height="15" fill="rgb(216,46,13)" fg:x="288" fg:w="1"/><text x="23.4011%" y="575.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="23.2315%" y="645" width="0.0804%" height="15" fill="rgb(205,184,25)" fg:x="289" fg:w="1"/><text x="23.4815%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.2315%" y="629" width="0.0804%" height="15" fill="rgb(228,1,10)" fg:x="289" fg:w="1"/><text x="23.4815%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.3119%" y="565" width="0.0804%" height="15" fill="rgb(213,116,27)" fg:x="290" fg:w="1"/><text x="23.5619%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (6 samples, 0.48%)</title><rect x="22.9904%" y="661" width="0.4823%" height="15" fill="rgb(241,95,50)" fg:x="286" fg:w="6"/><text x="23.2404%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="23.3119%" y="645" width="0.1608%" height="15" fill="rgb(238,48,32)" fg:x="290" fg:w="2"/><text x="23.5619%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="23.3119%" y="629" width="0.1608%" height="15" fill="rgb(235,113,49)" fg:x="290" fg:w="2"/><text x="23.5619%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="23.3119%" y="613" width="0.1608%" height="15" fill="rgb(205,127,43)" fg:x="290" fg:w="2"/><text x="23.5619%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="23.3119%" y="597" width="0.1608%" height="15" fill="rgb(250,162,2)" fg:x="290" fg:w="2"/><text x="23.5619%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="23.3119%" y="581" width="0.1608%" height="15" fill="rgb(220,13,41)" fg:x="290" fg:w="2"/><text x="23.5619%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="23.3923%" y="565" width="0.0804%" height="15" fill="rgb(249,221,25)" fg:x="291" fg:w="1"/><text x="23.6423%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="23.4727%" y="629" width="0.0804%" height="15" fill="rgb(215,208,19)" fg:x="292" fg:w="1"/><text x="23.7227%" y="639.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="23.4727%" y="661" width="0.1608%" height="15" fill="rgb(236,175,2)" fg:x="292" fg:w="2"/><text x="23.7227%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="23.4727%" y="645" width="0.1608%" height="15" fill="rgb(241,52,2)" fg:x="292" fg:w="2"/><text x="23.7227%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="23.5531%" y="629" width="0.0804%" height="15" fill="rgb(248,140,14)" fg:x="293" fg:w="1"/><text x="23.8031%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.5531%" y="613" width="0.0804%" height="15" fill="rgb(253,22,42)" fg:x="293" fg:w="1"/><text x="23.8031%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="23.6334%" y="661" width="0.0804%" height="15" fill="rgb(234,61,47)" fg:x="294" fg:w="1"/><text x="23.8834%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="23.7942%" y="549" width="0.0804%" height="15" fill="rgb(208,226,15)" fg:x="296" fg:w="1"/><text x="24.0442%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.8746%" y="501" width="0.0804%" height="15" fill="rgb(217,221,4)" fg:x="297" fg:w="1"/><text x="24.1246%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="23.7942%" y="629" width="0.2412%" height="15" fill="rgb(212,174,34)" fg:x="296" fg:w="3"/><text x="24.0442%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="23.7942%" y="613" width="0.2412%" height="15" fill="rgb(253,83,4)" fg:x="296" fg:w="3"/><text x="24.0442%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="23.7942%" y="597" width="0.2412%" height="15" fill="rgb(250,195,49)" fg:x="296" fg:w="3"/><text x="24.0442%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="23.7942%" y="581" width="0.2412%" height="15" fill="rgb(241,192,25)" fg:x="296" fg:w="3"/><text x="24.0442%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="23.7942%" y="565" width="0.2412%" height="15" fill="rgb(208,124,10)" fg:x="296" fg:w="3"/><text x="24.0442%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="23.8746%" y="549" width="0.1608%" height="15" fill="rgb(222,33,0)" fg:x="297" fg:w="2"/><text x="24.1246%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="23.8746%" y="533" width="0.1608%" height="15" fill="rgb(234,209,28)" fg:x="297" fg:w="2"/><text x="24.1246%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="23.8746%" y="517" width="0.1608%" height="15" fill="rgb(224,11,23)" fg:x="297" fg:w="2"/><text x="24.1246%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="23.9550%" y="501" width="0.0804%" height="15" fill="rgb(232,99,1)" fg:x="298" fg:w="1"/><text x="24.2050%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.0354%" y="629" width="0.0804%" height="15" fill="rgb(237,95,45)" fg:x="299" fg:w="1"/><text x="24.2854%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (18 samples, 1.45%)</title><rect x="22.7492%" y="693" width="1.4469%" height="15" fill="rgb(208,109,11)" fg:x="283" fg:w="18"/><text x="22.9992%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (15 samples, 1.21%)</title><rect x="22.9904%" y="677" width="1.2058%" height="15" fill="rgb(216,190,48)" fg:x="286" fg:w="15"/><text x="23.2404%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="23.7138%" y="661" width="0.4823%" height="15" fill="rgb(251,171,36)" fg:x="295" fg:w="6"/><text x="23.9638%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="23.7138%" y="645" width="0.4823%" height="15" fill="rgb(230,62,22)" fg:x="295" fg:w="6"/><text x="23.9638%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="24.1158%" y="629" width="0.0804%" height="15" fill="rgb(225,114,35)" fg:x="300" fg:w="1"/><text x="24.3658%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="24.1158%" y="613" width="0.0804%" height="15" fill="rgb(215,118,42)" fg:x="300" fg:w="1"/><text x="24.3658%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.1158%" y="597" width="0.0804%" height="15" fill="rgb(243,119,21)" fg:x="300" fg:w="1"/><text x="24.3658%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.1158%" y="581" width="0.0804%" height="15" fill="rgb(252,177,53)" fg:x="300" fg:w="1"/><text x="24.3658%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.1158%" y="565" width="0.0804%" height="15" fill="rgb(237,209,29)" fg:x="300" fg:w="1"/><text x="24.3658%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.1961%" y="693" width="0.0804%" height="15" fill="rgb(212,65,23)" fg:x="301" fg:w="1"/><text x="24.4461%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.2765%" y="677" width="0.0804%" height="15" fill="rgb(230,222,46)" fg:x="302" fg:w="1"/><text x="24.5265%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.2765%" y="661" width="0.0804%" height="15" fill="rgb(215,135,32)" fg:x="302" fg:w="1"/><text x="24.5265%" y="671.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (217 samples, 17.44%)</title><rect x="6.9936%" y="741" width="17.4437%" height="15" fill="rgb(246,101,22)" fg:x="87" fg:w="217"/><text x="7.2436%" y="751.50">&lt;tests::HoldingKeyInVessel ..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (31 samples, 2.49%)</title><rect x="21.9453%" y="725" width="2.4920%" height="15" fill="rgb(206,107,13)" fg:x="273" fg:w="31"/><text x="22.1953%" y="735.50">pl..</text></g><g><title>plugins_core::build::Build::save (21 samples, 1.69%)</title><rect x="22.7492%" y="709" width="1.6881%" height="15" fill="rgb(250,100,44)" fg:x="283" fg:w="21"/><text x="22.9992%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="24.2765%" y="693" width="0.1608%" height="15" fill="rgb(231,147,38)" fg:x="302" fg:w="2"/><text x="24.5265%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="24.3569%" y="677" width="0.0804%" height="15" fill="rgb(229,8,40)" fg:x="303" fg:w="1"/><text x="24.6069%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.3569%" y="661" width="0.0804%" height="15" fill="rgb(221,135,30)" fg:x="303" fg:w="1"/><text x="24.6069%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="24.3569%" y="645" width="0.0804%" height="15" fill="rgb(249,193,18)" fg:x="303" fg:w="1"/><text x="24.6069%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.3569%" y="629" width="0.0804%" height="15" fill="rgb(209,133,39)" fg:x="303" fg:w="1"/><text x="24.6069%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.3569%" y="613" width="0.0804%" height="15" fill="rgb(232,100,14)" fg:x="303" fg:w="1"/><text x="24.6069%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="24.4373%" y="741" width="0.1608%" height="15" fill="rgb(224,185,1)" fg:x="304" fg:w="2"/><text x="24.6873%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="24.5981%" y="741" width="0.0804%" height="15" fill="rgb(223,139,8)" fg:x="306" fg:w="1"/><text x="24.8481%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="24.5981%" y="725" width="0.0804%" height="15" fill="rgb(232,213,38)" fg:x="306" fg:w="1"/><text x="24.8481%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="24.5981%" y="709" width="0.0804%" height="15" fill="rgb(207,94,22)" fg:x="306" fg:w="1"/><text x="24.8481%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="24.5981%" y="693" width="0.0804%" height="15" fill="rgb(219,183,54)" fg:x="306" fg:w="1"/><text x="24.8481%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.5981%" y="677" width="0.0804%" height="15" fill="rgb(216,185,54)" fg:x="306" fg:w="1"/><text x="24.8481%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="24.6785%" y="725" width="0.0804%" height="15" fill="rgb(254,217,39)" fg:x="307" fg:w="1"/><text x="24.9285%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.6785%" y="709" width="0.0804%" height="15" fill="rgb(240,178,23)" fg:x="307" fg:w="1"/><text x="24.9285%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.6785%" y="693" width="0.0804%" height="15" fill="rgb(218,11,47)" fg:x="307" fg:w="1"/><text x="24.9285%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="24.6785%" y="677" width="0.0804%" height="15" fill="rgb(218,51,51)" fg:x="307" fg:w="1"/><text x="24.9285%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="24.6785%" y="661" width="0.0804%" height="15" fill="rgb(238,126,27)" fg:x="307" fg:w="1"/><text x="24.9285%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="24.6785%" y="645" width="0.0804%" height="15" fill="rgb(249,202,22)" fg:x="307" fg:w="1"/><text x="24.9285%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.6785%" y="629" width="0.0804%" height="15" fill="rgb(254,195,49)" fg:x="307" fg:w="1"/><text x="24.9285%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.6785%" y="613" width="0.0804%" height="15" fill="rgb(208,123,14)" fg:x="307" fg:w="1"/><text x="24.9285%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="24.6785%" y="597" width="0.0804%" height="15" fill="rgb(224,200,8)" fg:x="307" fg:w="1"/><text x="24.9285%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="24.6785%" y="581" width="0.0804%" height="15" fill="rgb(217,61,36)" fg:x="307" fg:w="1"/><text x="24.9285%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="24.6785%" y="565" width="0.0804%" height="15" fill="rgb(206,35,45)" fg:x="307" fg:w="1"/><text x="24.9285%" y="575.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="24.6785%" y="549" width="0.0804%" height="15" fill="rgb(217,65,33)" fg:x="307" fg:w="1"/><text x="24.9285%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.6785%" y="533" width="0.0804%" height="15" fill="rgb(222,158,48)" fg:x="307" fg:w="1"/><text x="24.9285%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="24.7588%" y="725" width="0.0804%" height="15" fill="rgb(254,2,54)" fg:x="308" fg:w="1"/><text x="25.0088%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="24.7588%" y="709" width="0.0804%" height="15" fill="rgb(250,143,38)" fg:x="308" fg:w="1"/><text x="25.0088%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="24.7588%" y="693" width="0.0804%" height="15" fill="rgb(248,25,0)" fg:x="308" fg:w="1"/><text x="25.0088%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="24.7588%" y="677" width="0.0804%" height="15" fill="rgb(206,152,27)" fg:x="308" fg:w="1"/><text x="25.0088%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="24.7588%" y="661" width="0.0804%" height="15" fill="rgb(240,77,30)" fg:x="308" fg:w="1"/><text x="25.0088%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="24.7588%" y="645" width="0.0804%" height="15" fill="rgb(231,5,3)" fg:x="308" fg:w="1"/><text x="25.0088%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="24.7588%" y="629" width="0.0804%" height="15" fill="rgb(207,226,32)" fg:x="308" fg:w="1"/><text x="25.0088%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="24.7588%" y="613" width="0.0804%" height="15" fill="rgb(222,207,47)" fg:x="308" fg:w="1"/><text x="25.0088%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="24.7588%" y="597" width="0.0804%" height="15" fill="rgb(229,115,45)" fg:x="308" fg:w="1"/><text x="25.0088%" y="607.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="24.7588%" y="581" width="0.0804%" height="15" fill="rgb(224,191,6)" fg:x="308" fg:w="1"/><text x="25.0088%" y="591.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="24.7588%" y="565" width="0.0804%" height="15" fill="rgb(230,227,24)" fg:x="308" fg:w="1"/><text x="25.0088%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="24.7588%" y="549" width="0.0804%" height="15" fill="rgb(228,80,19)" fg:x="308" fg:w="1"/><text x="25.0088%" y="559.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="24.8392%" y="725" width="0.0804%" height="15" fill="rgb(247,229,0)" fg:x="309" fg:w="1"/><text x="25.0892%" y="735.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="24.8392%" y="709" width="0.0804%" height="15" fill="rgb(237,194,15)" fg:x="309" fg:w="1"/><text x="25.0892%" y="719.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="24.8392%" y="693" width="0.0804%" height="15" fill="rgb(219,203,20)" fg:x="309" fg:w="1"/><text x="25.0892%" y="703.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="24.8392%" y="677" width="0.0804%" height="15" fill="rgb(234,128,8)" fg:x="309" fg:w="1"/><text x="25.0892%" y="687.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="24.8392%" y="661" width="0.0804%" height="15" fill="rgb(248,202,8)" fg:x="309" fg:w="1"/><text x="25.0892%" y="671.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="24.8392%" y="645" width="0.0804%" height="15" fill="rgb(206,104,37)" fg:x="309" fg:w="1"/><text x="25.0892%" y="655.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="24.8392%" y="629" width="0.0804%" height="15" fill="rgb(223,8,27)" fg:x="309" fg:w="1"/><text x="25.0892%" y="639.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="24.8392%" y="613" width="0.0804%" height="15" fill="rgb(216,217,28)" fg:x="309" fg:w="1"/><text x="25.0892%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="24.9196%" y="693" width="0.1608%" height="15" fill="rgb(249,199,1)" fg:x="310" fg:w="2"/><text x="25.1696%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="24.9196%" y="677" width="0.1608%" height="15" fill="rgb(240,85,17)" fg:x="310" fg:w="2"/><text x="25.1696%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (2 samples, 0.16%)</title><rect x="24.9196%" y="661" width="0.1608%" height="15" fill="rgb(206,108,45)" fg:x="310" fg:w="2"/><text x="25.1696%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.0000%" y="645" width="0.0804%" height="15" fill="rgb(245,210,41)" fg:x="311" fg:w="1"/><text x="25.2500%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.0000%" y="629" width="0.0804%" height="15" fill="rgb(206,13,37)" fg:x="311" fg:w="1"/><text x="25.2500%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="25.0000%" y="613" width="0.0804%" height="15" fill="rgb(250,61,18)" fg:x="311" fg:w="1"/><text x="25.2500%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="25.0000%" y="597" width="0.0804%" height="15" fill="rgb(235,172,48)" fg:x="311" fg:w="1"/><text x="25.2500%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="25.0000%" y="581" width="0.0804%" height="15" fill="rgb(249,201,17)" fg:x="311" fg:w="1"/><text x="25.2500%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.0000%" y="565" width="0.0804%" height="15" fill="rgb(219,208,6)" fg:x="311" fg:w="1"/><text x="25.2500%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.0000%" y="549" width="0.0804%" height="15" fill="rgb(248,31,23)" fg:x="311" fg:w="1"/><text x="25.2500%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="25.0000%" y="533" width="0.0804%" height="15" fill="rgb(245,15,42)" fg:x="311" fg:w="1"/><text x="25.2500%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="25.0000%" y="517" width="0.0804%" height="15" fill="rgb(222,217,39)" fg:x="311" fg:w="1"/><text x="25.2500%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="25.0000%" y="501" width="0.0804%" height="15" fill="rgb(210,219,27)" fg:x="311" fg:w="1"/><text x="25.2500%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="25.0000%" y="485" width="0.0804%" height="15" fill="rgb(252,166,36)" fg:x="311" fg:w="1"/><text x="25.2500%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.0000%" y="469" width="0.0804%" height="15" fill="rgb(245,132,34)" fg:x="311" fg:w="1"/><text x="25.2500%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="25.0804%" y="661" width="0.0804%" height="15" fill="rgb(236,54,3)" fg:x="312" fg:w="1"/><text x="25.3304%" y="671.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="25.1608%" y="629" width="0.1608%" height="15" fill="rgb(241,173,43)" fg:x="313" fg:w="2"/><text x="25.4108%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="25.1608%" y="613" width="0.1608%" height="15" fill="rgb(215,190,9)" fg:x="313" fg:w="2"/><text x="25.4108%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="25.1608%" y="597" width="0.1608%" height="15" fill="rgb(242,101,16)" fg:x="313" fg:w="2"/><text x="25.4108%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="25.3215%" y="613" width="0.1608%" height="15" fill="rgb(223,190,21)" fg:x="315" fg:w="2"/><text x="25.5715%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="25.3215%" y="597" width="0.1608%" height="15" fill="rgb(215,228,25)" fg:x="315" fg:w="2"/><text x="25.5715%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="25.4019%" y="581" width="0.0804%" height="15" fill="rgb(225,36,22)" fg:x="316" fg:w="1"/><text x="25.6519%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.4019%" y="565" width="0.0804%" height="15" fill="rgb(251,106,46)" fg:x="316" fg:w="1"/><text x="25.6519%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="25.4823%" y="581" width="0.0804%" height="15" fill="rgb(208,90,1)" fg:x="317" fg:w="1"/><text x="25.7323%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="25.4823%" y="565" width="0.0804%" height="15" fill="rgb(243,10,4)" fg:x="317" fg:w="1"/><text x="25.7323%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.4823%" y="549" width="0.0804%" height="15" fill="rgb(212,137,27)" fg:x="317" fg:w="1"/><text x="25.7323%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="25.4823%" y="533" width="0.0804%" height="15" fill="rgb(231,220,49)" fg:x="317" fg:w="1"/><text x="25.7323%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.4823%" y="517" width="0.0804%" height="15" fill="rgb(237,96,20)" fg:x="317" fg:w="1"/><text x="25.7323%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="25.4823%" y="501" width="0.0804%" height="15" fill="rgb(239,229,30)" fg:x="317" fg:w="1"/><text x="25.7323%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.4823%" y="485" width="0.0804%" height="15" fill="rgb(219,65,33)" fg:x="317" fg:w="1"/><text x="25.7323%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="25.4823%" y="469" width="0.0804%" height="15" fill="rgb(243,134,7)" fg:x="317" fg:w="1"/><text x="25.7323%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="25.4823%" y="597" width="0.1608%" height="15" fill="rgb(216,177,54)" fg:x="317" fg:w="2"/><text x="25.7323%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.5627%" y="581" width="0.0804%" height="15" fill="rgb(211,160,20)" fg:x="318" fg:w="1"/><text x="25.8127%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="25.5627%" y="565" width="0.0804%" height="15" fill="rgb(239,85,39)" fg:x="318" fg:w="1"/><text x="25.8127%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="25.6431%" y="597" width="0.1608%" height="15" fill="rgb(232,125,22)" fg:x="319" fg:w="2"/><text x="25.8931%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="25.6431%" y="581" width="0.1608%" height="15" fill="rgb(244,57,34)" fg:x="319" fg:w="2"/><text x="25.8931%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="25.6431%" y="565" width="0.1608%" height="15" fill="rgb(214,203,32)" fg:x="319" fg:w="2"/><text x="25.8931%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="25.6431%" y="549" width="0.1608%" height="15" fill="rgb(207,58,43)" fg:x="319" fg:w="2"/><text x="25.8931%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="25.8039%" y="581" width="0.1608%" height="15" fill="rgb(215,193,15)" fg:x="321" fg:w="2"/><text x="26.0539%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.8842%" y="565" width="0.0804%" height="15" fill="rgb(232,15,44)" fg:x="322" fg:w="1"/><text x="26.1342%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="25.8842%" y="549" width="0.0804%" height="15" fill="rgb(212,3,48)" fg:x="322" fg:w="1"/><text x="26.1342%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.8842%" y="533" width="0.0804%" height="15" fill="rgb(218,128,7)" fg:x="322" fg:w="1"/><text x="26.1342%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="25.9646%" y="565" width="0.2412%" height="15" fill="rgb(226,216,39)" fg:x="323" fg:w="3"/><text x="26.2146%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="26.0450%" y="549" width="0.1608%" height="15" fill="rgb(243,47,51)" fg:x="324" fg:w="2"/><text x="26.2950%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="26.0450%" y="533" width="0.1608%" height="15" fill="rgb(241,183,40)" fg:x="324" fg:w="2"/><text x="26.2950%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="26.0450%" y="517" width="0.1608%" height="15" fill="rgb(231,217,32)" fg:x="324" fg:w="2"/><text x="26.2950%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="26.1254%" y="501" width="0.0804%" height="15" fill="rgb(229,61,38)" fg:x="325" fg:w="1"/><text x="26.3754%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.1254%" y="485" width="0.0804%" height="15" fill="rgb(225,210,5)" fg:x="325" fg:w="1"/><text x="26.3754%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="26.1254%" y="469" width="0.0804%" height="15" fill="rgb(231,79,45)" fg:x="325" fg:w="1"/><text x="26.3754%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="26.2058%" y="565" width="0.1608%" height="15" fill="rgb(224,100,7)" fg:x="326" fg:w="2"/><text x="26.4558%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="26.2862%" y="549" width="0.0804%" height="15" fill="rgb(241,198,18)" fg:x="327" fg:w="1"/><text x="26.5362%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="26.2862%" y="533" width="0.0804%" height="15" fill="rgb(252,97,53)" fg:x="327" fg:w="1"/><text x="26.5362%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="25.9646%" y="581" width="0.5627%" height="15" fill="rgb(220,88,7)" fg:x="323" fg:w="7"/><text x="26.2146%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="26.3666%" y="565" width="0.1608%" height="15" fill="rgb(213,176,14)" fg:x="328" fg:w="2"/><text x="26.6166%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="26.3666%" y="549" width="0.1608%" height="15" fill="rgb(246,73,7)" fg:x="328" fg:w="2"/><text x="26.6166%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="26.4469%" y="533" width="0.0804%" height="15" fill="rgb(245,64,36)" fg:x="329" fg:w="1"/><text x="26.6969%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="25.8039%" y="597" width="0.8039%" height="15" fill="rgb(245,80,10)" fg:x="321" fg:w="10"/><text x="26.0539%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="26.5273%" y="581" width="0.0804%" height="15" fill="rgb(232,107,50)" fg:x="330" fg:w="1"/><text x="26.7773%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.29%)</title><rect x="25.4823%" y="613" width="1.2862%" height="15" fill="rgb(253,3,0)" fg:x="317" fg:w="16"/><text x="25.7323%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="26.6077%" y="597" width="0.1608%" height="15" fill="rgb(212,99,53)" fg:x="331" fg:w="2"/><text x="26.8577%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="26.6881%" y="581" width="0.0804%" height="15" fill="rgb(249,111,54)" fg:x="332" fg:w="1"/><text x="26.9381%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (21 samples, 1.69%)</title><rect x="25.3215%" y="629" width="1.6881%" height="15" fill="rgb(249,55,30)" fg:x="315" fg:w="21"/><text x="25.5715%" y="639.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="26.7685%" y="613" width="0.2412%" height="15" fill="rgb(237,47,42)" fg:x="333" fg:w="3"/><text x="27.0185%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="26.8489%" y="597" width="0.1608%" height="15" fill="rgb(211,20,18)" fg:x="334" fg:w="2"/><text x="27.0989%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_str (2 samples, 0.16%)</title><rect x="26.8489%" y="581" width="0.1608%" height="15" fill="rgb(231,203,46)" fg:x="334" fg:w="2"/><text x="27.0989%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (24 samples, 1.93%)</title><rect x="25.1608%" y="645" width="1.9293%" height="15" fill="rgb(237,142,3)" fg:x="313" fg:w="24"/><text x="25.4108%" y="655.50">&lt;..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="27.0096%" y="629" width="0.0804%" height="15" fill="rgb(241,107,1)" fg:x="336" fg:w="1"/><text x="27.2596%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="27.0096%" y="613" width="0.0804%" height="15" fill="rgb(229,83,13)" fg:x="336" fg:w="1"/><text x="27.2596%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="27.0096%" y="597" width="0.0804%" height="15" fill="rgb(241,91,40)" fg:x="336" fg:w="1"/><text x="27.2596%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="27.0096%" y="581" width="0.0804%" height="15" fill="rgb(225,3,45)" fg:x="336" fg:w="1"/><text x="27.2596%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.0096%" y="565" width="0.0804%" height="15" fill="rgb(244,223,14)" fg:x="336" fg:w="1"/><text x="27.2596%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.0096%" y="549" width="0.0804%" height="15" fill="rgb(224,124,37)" fg:x="336" fg:w="1"/><text x="27.2596%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.0900%" y="613" width="0.0804%" height="15" fill="rgb(251,171,30)" fg:x="337" fg:w="1"/><text x="27.3400%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.1704%" y="597" width="0.0804%" height="15" fill="rgb(236,46,54)" fg:x="338" fg:w="1"/><text x="27.4204%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="27.2508%" y="597" width="0.1608%" height="15" fill="rgb(245,213,5)" fg:x="339" fg:w="2"/><text x="27.5008%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.4116%" y="581" width="0.0804%" height="15" fill="rgb(230,144,27)" fg:x="341" fg:w="1"/><text x="27.6616%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="27.0900%" y="645" width="0.4823%" height="15" fill="rgb(220,86,6)" fg:x="337" fg:w="6"/><text x="27.3400%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="27.0900%" y="629" width="0.4823%" height="15" fill="rgb(240,20,13)" fg:x="337" fg:w="6"/><text x="27.3400%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="27.1704%" y="613" width="0.4019%" height="15" fill="rgb(217,89,34)" fg:x="338" fg:w="5"/><text x="27.4204%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="27.4116%" y="597" width="0.1608%" height="15" fill="rgb(229,13,5)" fg:x="341" fg:w="2"/><text x="27.6616%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="27.4920%" y="581" width="0.0804%" height="15" fill="rgb(244,67,35)" fg:x="342" fg:w="1"/><text x="27.7420%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.4920%" y="565" width="0.0804%" height="15" fill="rgb(221,40,2)" fg:x="342" fg:w="1"/><text x="27.7420%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="27.7331%" y="565" width="0.1608%" height="15" fill="rgb(237,157,21)" fg:x="345" fg:w="2"/><text x="27.9831%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.8939%" y="549" width="0.0804%" height="15" fill="rgb(222,94,11)" fg:x="347" fg:w="1"/><text x="28.1439%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="27.9743%" y="549" width="0.1608%" height="15" fill="rgb(249,113,6)" fg:x="348" fg:w="2"/><text x="28.2243%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="27.9743%" y="533" width="0.1608%" height="15" fill="rgb(238,137,36)" fg:x="348" fg:w="2"/><text x="28.2243%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="28.1350%" y="549" width="0.0804%" height="15" fill="rgb(210,102,26)" fg:x="350" fg:w="1"/><text x="28.3850%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.80%)</title><rect x="27.6527%" y="613" width="0.8039%" height="15" fill="rgb(218,30,30)" fg:x="344" fg:w="10"/><text x="27.9027%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (10 samples, 0.80%)</title><rect x="27.6527%" y="597" width="0.8039%" height="15" fill="rgb(214,67,26)" fg:x="344" fg:w="10"/><text x="27.9027%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.80%)</title><rect x="27.6527%" y="581" width="0.8039%" height="15" fill="rgb(251,9,53)" fg:x="344" fg:w="10"/><text x="27.9027%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="27.8939%" y="565" width="0.5627%" height="15" fill="rgb(228,204,25)" fg:x="347" fg:w="7"/><text x="28.1439%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="28.2154%" y="549" width="0.2412%" height="15" fill="rgb(207,153,8)" fg:x="351" fg:w="3"/><text x="28.4654%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="28.2958%" y="533" width="0.1608%" height="15" fill="rgb(242,9,16)" fg:x="352" fg:w="2"/><text x="28.5458%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="28.4566%" y="597" width="0.2412%" height="15" fill="rgb(217,211,10)" fg:x="354" fg:w="3"/><text x="28.7066%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="28.4566%" y="581" width="0.2412%" height="15" fill="rgb(219,228,52)" fg:x="354" fg:w="3"/><text x="28.7066%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="28.5370%" y="565" width="0.1608%" height="15" fill="rgb(231,92,29)" fg:x="355" fg:w="2"/><text x="28.7870%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (14 samples, 1.13%)</title><rect x="27.6527%" y="629" width="1.1254%" height="15" fill="rgb(232,8,23)" fg:x="344" fg:w="14"/><text x="27.9027%" y="639.50"></text></g><g><title>treediff::diff::diff (4 samples, 0.32%)</title><rect x="28.4566%" y="613" width="0.3215%" height="15" fill="rgb(216,211,34)" fg:x="354" fg:w="4"/><text x="28.7066%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.6977%" y="597" width="0.0804%" height="15" fill="rgb(236,151,0)" fg:x="357" fg:w="1"/><text x="28.9477%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.9389%" y="597" width="0.0804%" height="15" fill="rgb(209,168,3)" fg:x="360" fg:w="1"/><text x="29.1889%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.0193%" y="597" width="0.0804%" height="15" fill="rgb(208,129,28)" fg:x="361" fg:w="1"/><text x="29.2693%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="29.0193%" y="581" width="0.0804%" height="15" fill="rgb(229,78,22)" fg:x="361" fg:w="1"/><text x="29.2693%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="29.0997%" y="597" width="0.1608%" height="15" fill="rgb(228,187,13)" fg:x="362" fg:w="2"/><text x="29.3497%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="29.1801%" y="581" width="0.0804%" height="15" fill="rgb(240,119,24)" fg:x="363" fg:w="1"/><text x="29.4301%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="29.2605%" y="597" width="0.0804%" height="15" fill="rgb(209,194,42)" fg:x="364" fg:w="1"/><text x="29.5105%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="29.2605%" y="581" width="0.0804%" height="15" fill="rgb(247,200,46)" fg:x="364" fg:w="1"/><text x="29.5105%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.2605%" y="565" width="0.0804%" height="15" fill="rgb(218,76,16)" fg:x="364" fg:w="1"/><text x="29.5105%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="29.4212%" y="549" width="0.1608%" height="15" fill="rgb(225,21,48)" fg:x="366" fg:w="2"/><text x="29.6712%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.5016%" y="533" width="0.0804%" height="15" fill="rgb(239,223,50)" fg:x="367" fg:w="1"/><text x="29.7516%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="29.6624%" y="517" width="0.0804%" height="15" fill="rgb(244,45,21)" fg:x="369" fg:w="1"/><text x="29.9124%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="29.5820%" y="549" width="0.2412%" height="15" fill="rgb(232,33,43)" fg:x="368" fg:w="3"/><text x="29.8320%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="29.6624%" y="533" width="0.1608%" height="15" fill="rgb(209,8,3)" fg:x="369" fg:w="2"/><text x="29.9124%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="29.7428%" y="517" width="0.0804%" height="15" fill="rgb(214,25,53)" fg:x="370" fg:w="1"/><text x="29.9928%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="29.4212%" y="565" width="0.5627%" height="15" fill="rgb(254,186,54)" fg:x="366" fg:w="7"/><text x="29.6712%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="29.8232%" y="549" width="0.1608%" height="15" fill="rgb(208,174,49)" fg:x="371" fg:w="2"/><text x="30.0732%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="29.8232%" y="533" width="0.1608%" height="15" fill="rgb(233,191,51)" fg:x="371" fg:w="2"/><text x="30.0732%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="29.8232%" y="517" width="0.1608%" height="15" fill="rgb(222,134,10)" fg:x="371" fg:w="2"/><text x="30.0732%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="29.9035%" y="501" width="0.0804%" height="15" fill="rgb(230,226,20)" fg:x="372" fg:w="1"/><text x="30.1535%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.72%)</title><rect x="29.3408%" y="581" width="0.7235%" height="15" fill="rgb(251,111,25)" fg:x="365" fg:w="9"/><text x="29.5908%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="29.9839%" y="565" width="0.0804%" height="15" fill="rgb(224,40,46)" fg:x="373" fg:w="1"/><text x="30.2339%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.9839%" y="549" width="0.0804%" height="15" fill="rgb(236,108,47)" fg:x="373" fg:w="1"/><text x="30.2339%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (17 samples, 1.37%)</title><rect x="28.7781%" y="629" width="1.3666%" height="15" fill="rgb(234,93,0)" fg:x="358" fg:w="17"/><text x="29.0281%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (17 samples, 1.37%)</title><rect x="28.7781%" y="613" width="1.3666%" height="15" fill="rgb(224,213,32)" fg:x="358" fg:w="17"/><text x="29.0281%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.80%)</title><rect x="29.3408%" y="597" width="0.8039%" height="15" fill="rgb(251,11,48)" fg:x="365" fg:w="10"/><text x="29.5908%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.0643%" y="581" width="0.0804%" height="15" fill="rgb(236,173,5)" fg:x="374" fg:w="1"/><text x="30.3143%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="30.0643%" y="565" width="0.0804%" height="15" fill="rgb(230,95,12)" fg:x="374" fg:w="1"/><text x="30.3143%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="30.6270%" y="389" width="0.1608%" height="15" fill="rgb(232,209,1)" fg:x="381" fg:w="2"/><text x="30.8770%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.6270%" y="373" width="0.1608%" height="15" fill="rgb(232,6,1)" fg:x="381" fg:w="2"/><text x="30.8770%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="30.6270%" y="453" width="0.2412%" height="15" fill="rgb(210,224,50)" fg:x="381" fg:w="3"/><text x="30.8770%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="30.6270%" y="437" width="0.2412%" height="15" fill="rgb(228,127,35)" fg:x="381" fg:w="3"/><text x="30.8770%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="30.6270%" y="421" width="0.2412%" height="15" fill="rgb(245,102,45)" fg:x="381" fg:w="3"/><text x="30.8770%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="30.6270%" y="405" width="0.2412%" height="15" fill="rgb(214,1,49)" fg:x="381" fg:w="3"/><text x="30.8770%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="30.7878%" y="389" width="0.0804%" height="15" fill="rgb(226,163,40)" fg:x="383" fg:w="1"/><text x="31.0378%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.7878%" y="373" width="0.0804%" height="15" fill="rgb(239,212,28)" fg:x="383" fg:w="1"/><text x="31.0378%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="30.5466%" y="485" width="0.4823%" height="15" fill="rgb(220,20,13)" fg:x="380" fg:w="6"/><text x="30.7966%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="30.5466%" y="469" width="0.4823%" height="15" fill="rgb(210,164,35)" fg:x="380" fg:w="6"/><text x="30.7966%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="30.8682%" y="453" width="0.1608%" height="15" fill="rgb(248,109,41)" fg:x="384" fg:w="2"/><text x="31.1182%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.9486%" y="437" width="0.0804%" height="15" fill="rgb(238,23,50)" fg:x="385" fg:w="1"/><text x="31.1986%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="31.1093%" y="437" width="0.0804%" height="15" fill="rgb(211,48,49)" fg:x="387" fg:w="1"/><text x="31.3593%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="31.1897%" y="437" width="0.1608%" height="15" fill="rgb(223,36,21)" fg:x="388" fg:w="2"/><text x="31.4397%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="31.1897%" y="421" width="0.1608%" height="15" fill="rgb(207,123,46)" fg:x="388" fg:w="2"/><text x="31.4397%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="31.1093%" y="453" width="0.3215%" height="15" fill="rgb(240,218,32)" fg:x="387" fg:w="4"/><text x="31.3593%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.3505%" y="437" width="0.0804%" height="15" fill="rgb(252,5,43)" fg:x="390" fg:w="1"/><text x="31.6005%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.3505%" y="421" width="0.0804%" height="15" fill="rgb(252,84,19)" fg:x="390" fg:w="1"/><text x="31.6005%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.96%)</title><rect x="30.5466%" y="501" width="0.9646%" height="15" fill="rgb(243,152,39)" fg:x="380" fg:w="12"/><text x="30.7966%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="31.0289%" y="485" width="0.4823%" height="15" fill="rgb(234,160,15)" fg:x="386" fg:w="6"/><text x="31.2789%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="31.1093%" y="469" width="0.4019%" height="15" fill="rgb(237,34,20)" fg:x="387" fg:w="5"/><text x="31.3593%" y="479.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="31.4309%" y="453" width="0.0804%" height="15" fill="rgb(229,97,13)" fg:x="391" fg:w="1"/><text x="31.6809%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (16 samples, 1.29%)</title><rect x="30.3859%" y="533" width="1.2862%" height="15" fill="rgb(234,71,50)" fg:x="378" fg:w="16"/><text x="30.6359%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (16 samples, 1.29%)</title><rect x="30.3859%" y="517" width="1.2862%" height="15" fill="rgb(253,155,4)" fg:x="378" fg:w="16"/><text x="30.6359%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="31.5113%" y="501" width="0.1608%" height="15" fill="rgb(222,185,37)" fg:x="392" fg:w="2"/><text x="31.7613%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="31.5916%" y="485" width="0.0804%" height="15" fill="rgb(251,177,13)" fg:x="393" fg:w="1"/><text x="31.8416%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="31.5916%" y="469" width="0.0804%" height="15" fill="rgb(250,179,40)" fg:x="393" fg:w="1"/><text x="31.8416%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="31.6720%" y="533" width="0.0804%" height="15" fill="rgb(242,44,2)" fg:x="394" fg:w="1"/><text x="31.9220%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.6720%" y="517" width="0.0804%" height="15" fill="rgb(216,177,13)" fg:x="394" fg:w="1"/><text x="31.9220%" y="527.50"></text></g><g><title>engine::session::state::State::close (86 samples, 6.91%)</title><rect x="24.9196%" y="725" width="6.9132%" height="15" fill="rgb(216,106,43)" fg:x="310" fg:w="86"/><text x="25.1696%" y="735.50">engine::s..</text></g><g><title>engine::session::state::State::flush_entities (86 samples, 6.91%)</title><rect x="24.9196%" y="709" width="6.9132%" height="15" fill="rgb(216,183,2)" fg:x="310" fg:w="86"/><text x="25.1696%" y="719.50">engine::s..</text></g><g><title>core::iter::adapters::try_process (84 samples, 6.75%)</title><rect x="25.0804%" y="693" width="6.7524%" height="15" fill="rgb(249,75,3)" fg:x="312" fg:w="84"/><text x="25.3304%" y="703.50">core::ite..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (84 samples, 6.75%)</title><rect x="25.0804%" y="677" width="6.7524%" height="15" fill="rgb(219,67,39)" fg:x="312" fg:w="84"/><text x="25.3304%" y="687.50">&lt;alloc::v..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (83 samples, 6.67%)</title><rect x="25.1608%" y="661" width="6.6720%" height="15" fill="rgb(253,228,2)" fg:x="313" fg:w="83"/><text x="25.4108%" y="671.50">engine::s..</text></g><g><title>kernel::model::any_entity_changes (53 samples, 4.26%)</title><rect x="27.5723%" y="645" width="4.2605%" height="15" fill="rgb(235,138,27)" fg:x="343" fg:w="53"/><text x="27.8223%" y="655.50">kerne..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (21 samples, 1.69%)</title><rect x="30.1447%" y="629" width="1.6881%" height="15" fill="rgb(236,97,51)" fg:x="375" fg:w="21"/><text x="30.3947%" y="639.50"></text></g><g><title>serde_json::de::from_trait (21 samples, 1.69%)</title><rect x="30.1447%" y="613" width="1.6881%" height="15" fill="rgb(240,80,30)" fg:x="375" fg:w="21"/><text x="30.3947%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (21 samples, 1.69%)</title><rect x="30.1447%" y="597" width="1.6881%" height="15" fill="rgb(230,178,19)" fg:x="375" fg:w="21"/><text x="30.3947%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (21 samples, 1.69%)</title><rect x="30.1447%" y="581" width="1.6881%" height="15" fill="rgb(210,190,27)" fg:x="375" fg:w="21"/><text x="30.3947%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (20 samples, 1.61%)</title><rect x="30.2251%" y="565" width="1.6077%" height="15" fill="rgb(222,107,31)" fg:x="376" fg:w="20"/><text x="30.4751%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (20 samples, 1.61%)</title><rect x="30.2251%" y="549" width="1.6077%" height="15" fill="rgb(216,127,34)" fg:x="376" fg:w="20"/><text x="30.4751%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.7524%" y="533" width="0.0804%" height="15" fill="rgb(234,116,52)" fg:x="395" fg:w="1"/><text x="32.0024%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.7524%" y="517" width="0.0804%" height="15" fill="rgb(222,124,15)" fg:x="395" fg:w="1"/><text x="32.0024%" y="527.50"></text></g><g><title>engine::session::Session::close (91 samples, 7.32%)</title><rect x="24.6785%" y="741" width="7.3151%" height="15" fill="rgb(231,179,28)" fg:x="307" fg:w="91"/><text x="24.9285%" y="751.50">engine::se..</text></g><g><title>kernel::plugins::SessionPlugins::stop (2 samples, 0.16%)</title><rect x="31.8328%" y="725" width="0.1608%" height="15" fill="rgb(226,93,45)" fg:x="396" fg:w="2"/><text x="32.0828%" y="735.50"></text></g><g><title>kernel::plugins::Plugin::stop (1 samples, 0.08%)</title><rect x="31.9132%" y="709" width="0.0804%" height="15" fill="rgb(215,8,51)" fg:x="397" fg:w="1"/><text x="32.1632%" y="719.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (2 samples, 0.16%)</title><rect x="32.0740%" y="709" width="0.1608%" height="15" fill="rgb(223,106,5)" fg:x="399" fg:w="2"/><text x="32.3240%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="32.0740%" y="693" width="0.1608%" height="15" fill="rgb(250,191,5)" fg:x="399" fg:w="2"/><text x="32.3240%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="32.1543%" y="677" width="0.0804%" height="15" fill="rgb(242,132,44)" fg:x="400" fg:w="1"/><text x="32.4043%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.1543%" y="661" width="0.0804%" height="15" fill="rgb(251,152,29)" fg:x="400" fg:w="1"/><text x="32.4043%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="32.1543%" y="645" width="0.0804%" height="15" fill="rgb(218,179,5)" fg:x="400" fg:w="1"/><text x="32.4043%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.1543%" y="629" width="0.0804%" height="15" fill="rgb(227,67,19)" fg:x="400" fg:w="1"/><text x="32.4043%" y="639.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="32.2347%" y="677" width="0.0804%" height="15" fill="rgb(233,119,31)" fg:x="401" fg:w="1"/><text x="32.4847%" y="687.50"></text></g><g><title>&lt;plugins_core::looking::parser::LookActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="32.2347%" y="661" width="0.0804%" height="15" fill="rgb(241,120,22)" fg:x="401" fg:w="1"/><text x="32.4847%" y="671.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (3 samples, 0.24%)</title><rect x="32.2347%" y="709" width="0.2412%" height="15" fill="rgb(224,102,30)" fg:x="401" fg:w="3"/><text x="32.4847%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="32.2347%" y="693" width="0.2412%" height="15" fill="rgb(210,164,37)" fg:x="401" fg:w="3"/><text x="32.4847%" y="703.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="32.3151%" y="677" width="0.1608%" height="15" fill="rgb(226,191,16)" fg:x="402" fg:w="2"/><text x="32.5651%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::base::DomainError&gt; (2 samples, 0.16%)</title><rect x="32.4759%" y="709" width="0.1608%" height="15" fill="rgb(214,40,45)" fg:x="404" fg:w="2"/><text x="32.7259%" y="719.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="32.7974%" y="549" width="0.1608%" height="15" fill="rgb(244,29,26)" fg:x="408" fg:w="2"/><text x="33.0474%" y="559.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (2 samples, 0.16%)</title><rect x="32.7974%" y="533" width="0.1608%" height="15" fill="rgb(216,16,5)" fg:x="408" fg:w="2"/><text x="33.0474%" y="543.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (2 samples, 0.16%)</title><rect x="32.7974%" y="517" width="0.1608%" height="15" fill="rgb(249,76,35)" fg:x="408" fg:w="2"/><text x="33.0474%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="32.7974%" y="501" width="0.1608%" height="15" fill="rgb(207,11,44)" fg:x="408" fg:w="2"/><text x="33.0474%" y="511.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (2 samples, 0.16%)</title><rect x="32.7974%" y="485" width="0.1608%" height="15" fill="rgb(228,190,49)" fg:x="408" fg:w="2"/><text x="33.0474%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="32.7974%" y="469" width="0.1608%" height="15" fill="rgb(214,173,12)" fg:x="408" fg:w="2"/><text x="33.0474%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="32.7974%" y="453" width="0.1608%" height="15" fill="rgb(218,26,35)" fg:x="408" fg:w="2"/><text x="33.0474%" y="463.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="32.7974%" y="437" width="0.1608%" height="15" fill="rgb(220,200,19)" fg:x="408" fg:w="2"/><text x="33.0474%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="32.7974%" y="421" width="0.1608%" height="15" fill="rgb(239,95,49)" fg:x="408" fg:w="2"/><text x="33.0474%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="32.7974%" y="405" width="0.1608%" height="15" fill="rgb(235,85,53)" fg:x="408" fg:w="2"/><text x="33.0474%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="32.7974%" y="389" width="0.1608%" height="15" fill="rgb(233,133,31)" fg:x="408" fg:w="2"/><text x="33.0474%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="32.7974%" y="373" width="0.1608%" height="15" fill="rgb(218,25,20)" fg:x="408" fg:w="2"/><text x="33.0474%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="32.7974%" y="357" width="0.1608%" height="15" fill="rgb(252,210,38)" fg:x="408" fg:w="2"/><text x="33.0474%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="32.7974%" y="341" width="0.1608%" height="15" fill="rgb(242,134,21)" fg:x="408" fg:w="2"/><text x="33.0474%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.16%)</title><rect x="32.7974%" y="325" width="0.1608%" height="15" fill="rgb(213,28,48)" fg:x="408" fg:w="2"/><text x="33.0474%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="32.7974%" y="309" width="0.1608%" height="15" fill="rgb(250,196,2)" fg:x="408" fg:w="2"/><text x="33.0474%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.16%)</title><rect x="32.7974%" y="293" width="0.1608%" height="15" fill="rgb(227,5,17)" fg:x="408" fg:w="2"/><text x="33.0474%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.16%)</title><rect x="32.7974%" y="277" width="0.1608%" height="15" fill="rgb(221,226,24)" fg:x="408" fg:w="2"/><text x="33.0474%" y="287.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.16%)</title><rect x="32.7974%" y="261" width="0.1608%" height="15" fill="rgb(211,5,48)" fg:x="408" fg:w="2"/><text x="33.0474%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="32.7974%" y="245" width="0.1608%" height="15" fill="rgb(219,150,6)" fg:x="408" fg:w="2"/><text x="33.0474%" y="255.50"></text></g><g><title>alloc::fmt::format::format_inner (4 samples, 0.32%)</title><rect x="32.7170%" y="693" width="0.3215%" height="15" fill="rgb(251,46,16)" fg:x="407" fg:w="4"/><text x="32.9670%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="32.7974%" y="677" width="0.2412%" height="15" fill="rgb(220,204,40)" fg:x="408" fg:w="3"/><text x="33.0474%" y="687.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="32.7974%" y="661" width="0.2412%" height="15" fill="rgb(211,85,2)" fg:x="408" fg:w="3"/><text x="33.0474%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="32.7974%" y="645" width="0.2412%" height="15" fill="rgb(229,17,7)" fg:x="408" fg:w="3"/><text x="33.0474%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (3 samples, 0.24%)</title><rect x="32.7974%" y="629" width="0.2412%" height="15" fill="rgb(239,72,28)" fg:x="408" fg:w="3"/><text x="33.0474%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (3 samples, 0.24%)</title><rect x="32.7974%" y="613" width="0.2412%" height="15" fill="rgb(230,47,54)" fg:x="408" fg:w="3"/><text x="33.0474%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (3 samples, 0.24%)</title><rect x="32.7974%" y="597" width="0.2412%" height="15" fill="rgb(214,50,8)" fg:x="408" fg:w="3"/><text x="33.0474%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (3 samples, 0.24%)</title><rect x="32.7974%" y="581" width="0.2412%" height="15" fill="rgb(216,198,43)" fg:x="408" fg:w="3"/><text x="33.0474%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (3 samples, 0.24%)</title><rect x="32.7974%" y="565" width="0.2412%" height="15" fill="rgb(234,20,35)" fg:x="408" fg:w="3"/><text x="33.0474%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="32.9582%" y="549" width="0.0804%" height="15" fill="rgb(254,45,19)" fg:x="410" fg:w="1"/><text x="33.2082%" y="559.50"></text></g><g><title>core::fmt::Formatter::debug_struct (1 samples, 0.08%)</title><rect x="32.9582%" y="533" width="0.0804%" height="15" fill="rgb(219,14,44)" fg:x="410" fg:w="1"/><text x="33.2082%" y="543.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="32.9582%" y="517" width="0.0804%" height="15" fill="rgb(217,220,26)" fg:x="410" fg:w="1"/><text x="33.2082%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="32.9582%" y="501" width="0.0804%" height="15" fill="rgb(213,158,28)" fg:x="410" fg:w="1"/><text x="33.2082%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="32.9582%" y="485" width="0.0804%" height="15" fill="rgb(252,51,52)" fg:x="410" fg:w="1"/><text x="33.2082%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="32.9582%" y="469" width="0.0804%" height="15" fill="rgb(246,89,16)" fg:x="410" fg:w="1"/><text x="33.2082%" y="479.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="32.9582%" y="453" width="0.0804%" height="15" fill="rgb(216,158,49)" fg:x="410" fg:w="1"/><text x="33.2082%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="32.9582%" y="437" width="0.0804%" height="15" fill="rgb(236,107,19)" fg:x="410" fg:w="1"/><text x="33.2082%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="32.9582%" y="421" width="0.0804%" height="15" fill="rgb(228,185,30)" fg:x="410" fg:w="1"/><text x="33.2082%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="32.9582%" y="405" width="0.0804%" height="15" fill="rgb(246,134,8)" fg:x="410" fg:w="1"/><text x="33.2082%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="32.9582%" y="389" width="0.0804%" height="15" fill="rgb(214,143,50)" fg:x="410" fg:w="1"/><text x="33.2082%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="32.9582%" y="373" width="0.0804%" height="15" fill="rgb(228,75,8)" fg:x="410" fg:w="1"/><text x="33.2082%" y="383.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::from_box (1 samples, 0.08%)</title><rect x="33.0386%" y="693" width="0.0804%" height="15" fill="rgb(207,175,4)" fg:x="411" fg:w="1"/><text x="33.2886%" y="703.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (1 samples, 0.08%)</title><rect x="33.1994%" y="645" width="0.0804%" height="15" fill="rgb(205,108,24)" fg:x="413" fg:w="1"/><text x="33.4494%" y="655.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="33.1994%" y="629" width="0.0804%" height="15" fill="rgb(244,120,49)" fg:x="413" fg:w="1"/><text x="33.4494%" y="639.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (2 samples, 0.16%)</title><rect x="33.1994%" y="677" width="0.1608%" height="15" fill="rgb(223,47,38)" fg:x="413" fg:w="2"/><text x="33.4494%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (2 samples, 0.16%)</title><rect x="33.1994%" y="661" width="0.1608%" height="15" fill="rgb(229,179,11)" fg:x="413" fg:w="2"/><text x="33.4494%" y="671.50"></text></g><g><title>tracing_core::callsite::dispatchers::Dispatchers::register_dispatch (1 samples, 0.08%)</title><rect x="33.2797%" y="645" width="0.0804%" height="15" fill="rgb(231,122,1)" fg:x="414" fg:w="1"/><text x="33.5297%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.08%)</title><rect x="33.2797%" y="629" width="0.0804%" height="15" fill="rgb(245,119,9)" fg:x="414" fg:w="1"/><text x="33.5297%" y="639.50"></text></g><g><title>tracing_core::dispatcher::get_default (1 samples, 0.08%)</title><rect x="33.3601%" y="677" width="0.0804%" height="15" fill="rgb(241,163,25)" fg:x="415" fg:w="1"/><text x="33.6101%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="33.6013%" y="565" width="0.1608%" height="15" fill="rgb(217,214,3)" fg:x="418" fg:w="2"/><text x="33.8513%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="33.6817%" y="549" width="0.0804%" height="15" fill="rgb(240,86,28)" fg:x="419" fg:w="1"/><text x="33.9317%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="33.6817%" y="533" width="0.0804%" height="15" fill="rgb(215,47,9)" fg:x="419" fg:w="1"/><text x="33.9317%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="33.6817%" y="517" width="0.0804%" height="15" fill="rgb(252,25,45)" fg:x="419" fg:w="1"/><text x="33.9317%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="33.8424%" y="309" width="0.0804%" height="15" fill="rgb(251,164,9)" fg:x="421" fg:w="1"/><text x="34.0924%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="33.8424%" y="293" width="0.0804%" height="15" fill="rgb(233,194,0)" fg:x="421" fg:w="1"/><text x="34.0924%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="33.8424%" y="277" width="0.0804%" height="15" fill="rgb(249,111,24)" fg:x="421" fg:w="1"/><text x="34.0924%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="33.8424%" y="261" width="0.0804%" height="15" fill="rgb(250,223,3)" fg:x="421" fg:w="1"/><text x="34.0924%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="33.8424%" y="245" width="0.0804%" height="15" fill="rgb(236,178,37)" fg:x="421" fg:w="1"/><text x="34.0924%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="33.8424%" y="229" width="0.0804%" height="15" fill="rgb(241,158,50)" fg:x="421" fg:w="1"/><text x="34.0924%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.8424%" y="213" width="0.0804%" height="15" fill="rgb(213,121,41)" fg:x="421" fg:w="1"/><text x="34.0924%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="33.8424%" y="421" width="0.1608%" height="15" fill="rgb(240,92,3)" fg:x="421" fg:w="2"/><text x="34.0924%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="33.8424%" y="405" width="0.1608%" height="15" fill="rgb(205,123,3)" fg:x="421" fg:w="2"/><text x="34.0924%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="33.8424%" y="389" width="0.1608%" height="15" fill="rgb(205,97,47)" fg:x="421" fg:w="2"/><text x="34.0924%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="33.8424%" y="373" width="0.1608%" height="15" fill="rgb(247,152,14)" fg:x="421" fg:w="2"/><text x="34.0924%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="33.8424%" y="357" width="0.1608%" height="15" fill="rgb(248,195,53)" fg:x="421" fg:w="2"/><text x="34.0924%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="33.8424%" y="341" width="0.1608%" height="15" fill="rgb(226,201,16)" fg:x="421" fg:w="2"/><text x="34.0924%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="33.8424%" y="325" width="0.1608%" height="15" fill="rgb(205,98,0)" fg:x="421" fg:w="2"/><text x="34.0924%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="33.9228%" y="309" width="0.0804%" height="15" fill="rgb(214,191,48)" fg:x="422" fg:w="1"/><text x="34.1728%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="33.9228%" y="293" width="0.0804%" height="15" fill="rgb(237,112,39)" fg:x="422" fg:w="1"/><text x="34.1728%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="33.8424%" y="501" width="0.2412%" height="15" fill="rgb(247,203,27)" fg:x="421" fg:w="3"/><text x="34.0924%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="33.8424%" y="485" width="0.2412%" height="15" fill="rgb(235,124,28)" fg:x="421" fg:w="3"/><text x="34.0924%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="33.8424%" y="469" width="0.2412%" height="15" fill="rgb(208,207,46)" fg:x="421" fg:w="3"/><text x="34.0924%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="33.8424%" y="453" width="0.2412%" height="15" fill="rgb(234,176,4)" fg:x="421" fg:w="3"/><text x="34.0924%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="33.8424%" y="437" width="0.2412%" height="15" fill="rgb(230,133,28)" fg:x="421" fg:w="3"/><text x="34.0924%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.0032%" y="421" width="0.0804%" height="15" fill="rgb(211,137,40)" fg:x="423" fg:w="1"/><text x="34.2532%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.0032%" y="405" width="0.0804%" height="15" fill="rgb(254,35,13)" fg:x="423" fg:w="1"/><text x="34.2532%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="34.0032%" y="389" width="0.0804%" height="15" fill="rgb(225,49,51)" fg:x="423" fg:w="1"/><text x="34.2532%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="34.0032%" y="373" width="0.0804%" height="15" fill="rgb(251,10,15)" fg:x="423" fg:w="1"/><text x="34.2532%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="34.0032%" y="357" width="0.0804%" height="15" fill="rgb(228,207,15)" fg:x="423" fg:w="1"/><text x="34.2532%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.0032%" y="341" width="0.0804%" height="15" fill="rgb(241,99,19)" fg:x="423" fg:w="1"/><text x="34.2532%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.0032%" y="325" width="0.0804%" height="15" fill="rgb(207,104,49)" fg:x="423" fg:w="1"/><text x="34.2532%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="34.0032%" y="309" width="0.0804%" height="15" fill="rgb(234,99,18)" fg:x="423" fg:w="1"/><text x="34.2532%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="34.0032%" y="293" width="0.0804%" height="15" fill="rgb(213,191,49)" fg:x="423" fg:w="1"/><text x="34.2532%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="34.0032%" y="277" width="0.0804%" height="15" fill="rgb(210,226,19)" fg:x="423" fg:w="1"/><text x="34.2532%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="34.0032%" y="261" width="0.0804%" height="15" fill="rgb(229,97,18)" fg:x="423" fg:w="1"/><text x="34.2532%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.0032%" y="245" width="0.0804%" height="15" fill="rgb(211,167,15)" fg:x="423" fg:w="1"/><text x="34.2532%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="34.0836%" y="373" width="0.0804%" height="15" fill="rgb(210,169,34)" fg:x="424" fg:w="1"/><text x="34.3336%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="34.0836%" y="357" width="0.0804%" height="15" fill="rgb(241,121,31)" fg:x="424" fg:w="1"/><text x="34.3336%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="34.1640%" y="309" width="0.0804%" height="15" fill="rgb(232,40,11)" fg:x="425" fg:w="1"/><text x="34.4140%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="34.1640%" y="293" width="0.0804%" height="15" fill="rgb(205,86,26)" fg:x="425" fg:w="1"/><text x="34.4140%" y="303.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="34.1640%" y="277" width="0.0804%" height="15" fill="rgb(231,126,28)" fg:x="425" fg:w="1"/><text x="34.4140%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="34.1640%" y="261" width="0.0804%" height="15" fill="rgb(219,221,18)" fg:x="425" fg:w="1"/><text x="34.4140%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="34.1640%" y="245" width="0.0804%" height="15" fill="rgb(211,40,0)" fg:x="425" fg:w="1"/><text x="34.4140%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="34.1640%" y="229" width="0.0804%" height="15" fill="rgb(239,85,43)" fg:x="425" fg:w="1"/><text x="34.4140%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="34.2444%" y="309" width="0.0804%" height="15" fill="rgb(231,55,21)" fg:x="426" fg:w="1"/><text x="34.4944%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="34.0836%" y="405" width="0.3215%" height="15" fill="rgb(225,184,43)" fg:x="424" fg:w="4"/><text x="34.3336%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="34.0836%" y="389" width="0.3215%" height="15" fill="rgb(251,158,41)" fg:x="424" fg:w="4"/><text x="34.3336%" y="399.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (3 samples, 0.24%)</title><rect x="34.1640%" y="373" width="0.2412%" height="15" fill="rgb(234,159,37)" fg:x="425" fg:w="3"/><text x="34.4140%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="34.1640%" y="357" width="0.2412%" height="15" fill="rgb(216,204,22)" fg:x="425" fg:w="3"/><text x="34.4140%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="34.1640%" y="341" width="0.2412%" height="15" fill="rgb(214,17,3)" fg:x="425" fg:w="3"/><text x="34.4140%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="34.1640%" y="325" width="0.2412%" height="15" fill="rgb(212,111,17)" fg:x="425" fg:w="3"/><text x="34.4140%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.3248%" y="309" width="0.0804%" height="15" fill="rgb(221,157,24)" fg:x="427" fg:w="1"/><text x="34.5748%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.3248%" y="293" width="0.0804%" height="15" fill="rgb(252,16,13)" fg:x="427" fg:w="1"/><text x="34.5748%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="34.4051%" y="405" width="0.1608%" height="15" fill="rgb(221,62,2)" fg:x="428" fg:w="2"/><text x="34.6551%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="34.4051%" y="389" width="0.1608%" height="15" fill="rgb(247,87,22)" fg:x="428" fg:w="2"/><text x="34.6551%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="34.4051%" y="373" width="0.1608%" height="15" fill="rgb(215,73,9)" fg:x="428" fg:w="2"/><text x="34.6551%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="34.4051%" y="357" width="0.1608%" height="15" fill="rgb(207,175,33)" fg:x="428" fg:w="2"/><text x="34.6551%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="34.4855%" y="341" width="0.0804%" height="15" fill="rgb(243,129,54)" fg:x="429" fg:w="1"/><text x="34.7355%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="34.4855%" y="325" width="0.0804%" height="15" fill="rgb(227,119,45)" fg:x="429" fg:w="1"/><text x="34.7355%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.4855%" y="309" width="0.0804%" height="15" fill="rgb(205,109,36)" fg:x="429" fg:w="1"/><text x="34.7355%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="34.5659%" y="357" width="0.0804%" height="15" fill="rgb(205,6,39)" fg:x="430" fg:w="1"/><text x="34.8159%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="34.5659%" y="341" width="0.0804%" height="15" fill="rgb(221,32,16)" fg:x="430" fg:w="1"/><text x="34.8159%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.5659%" y="325" width="0.0804%" height="15" fill="rgb(228,144,50)" fg:x="430" fg:w="1"/><text x="34.8159%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="34.5659%" y="309" width="0.0804%" height="15" fill="rgb(229,201,53)" fg:x="430" fg:w="1"/><text x="34.8159%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="34.5659%" y="293" width="0.0804%" height="15" fill="rgb(249,153,27)" fg:x="430" fg:w="1"/><text x="34.8159%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (8 samples, 0.64%)</title><rect x="34.0836%" y="453" width="0.6431%" height="15" fill="rgb(227,106,25)" fg:x="424" fg:w="8"/><text x="34.3336%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="34.0836%" y="437" width="0.6431%" height="15" fill="rgb(230,65,29)" fg:x="424" fg:w="8"/><text x="34.3336%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (8 samples, 0.64%)</title><rect x="34.0836%" y="421" width="0.6431%" height="15" fill="rgb(221,57,46)" fg:x="424" fg:w="8"/><text x="34.3336%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="34.5659%" y="405" width="0.1608%" height="15" fill="rgb(229,161,17)" fg:x="430" fg:w="2"/><text x="34.8159%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="34.5659%" y="389" width="0.1608%" height="15" fill="rgb(222,213,11)" fg:x="430" fg:w="2"/><text x="34.8159%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="34.5659%" y="373" width="0.1608%" height="15" fill="rgb(235,35,13)" fg:x="430" fg:w="2"/><text x="34.8159%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.6463%" y="357" width="0.0804%" height="15" fill="rgb(233,158,34)" fg:x="431" fg:w="1"/><text x="34.8963%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_value (9 samples, 0.72%)</title><rect x="34.0836%" y="501" width="0.7235%" height="15" fill="rgb(215,151,48)" fg:x="424" fg:w="9"/><text x="34.3336%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (9 samples, 0.72%)</title><rect x="34.0836%" y="485" width="0.7235%" height="15" fill="rgb(229,84,14)" fg:x="424" fg:w="9"/><text x="34.3336%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (9 samples, 0.72%)</title><rect x="34.0836%" y="469" width="0.7235%" height="15" fill="rgb(229,68,14)" fg:x="424" fg:w="9"/><text x="34.3336%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="34.7267%" y="453" width="0.0804%" height="15" fill="rgb(243,106,26)" fg:x="432" fg:w="1"/><text x="34.9767%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.7267%" y="437" width="0.0804%" height="15" fill="rgb(206,45,38)" fg:x="432" fg:w="1"/><text x="34.9767%" y="447.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (16 samples, 1.29%)</title><rect x="33.7621%" y="565" width="1.2862%" height="15" fill="rgb(226,6,15)" fg:x="420" fg:w="16"/><text x="34.0121%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (16 samples, 1.29%)</title><rect x="33.7621%" y="549" width="1.2862%" height="15" fill="rgb(232,22,54)" fg:x="420" fg:w="16"/><text x="34.0121%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (16 samples, 1.29%)</title><rect x="33.7621%" y="533" width="1.2862%" height="15" fill="rgb(229,222,32)" fg:x="420" fg:w="16"/><text x="34.0121%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (16 samples, 1.29%)</title><rect x="33.7621%" y="517" width="1.2862%" height="15" fill="rgb(228,62,29)" fg:x="420" fg:w="16"/><text x="34.0121%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="34.8071%" y="501" width="0.2412%" height="15" fill="rgb(251,103,34)" fg:x="433" fg:w="3"/><text x="35.0571%" y="511.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="34.8071%" y="485" width="0.2412%" height="15" fill="rgb(233,12,30)" fg:x="433" fg:w="3"/><text x="35.0571%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="34.8071%" y="469" width="0.2412%" height="15" fill="rgb(238,52,0)" fg:x="433" fg:w="3"/><text x="35.0571%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="34.8071%" y="453" width="0.2412%" height="15" fill="rgb(223,98,5)" fg:x="433" fg:w="3"/><text x="35.0571%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="34.8071%" y="437" width="0.2412%" height="15" fill="rgb(228,75,37)" fg:x="433" fg:w="3"/><text x="35.0571%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="34.8875%" y="421" width="0.1608%" height="15" fill="rgb(205,115,49)" fg:x="434" fg:w="2"/><text x="35.1375%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="34.8875%" y="405" width="0.1608%" height="15" fill="rgb(250,154,43)" fg:x="434" fg:w="2"/><text x="35.1375%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="34.8875%" y="389" width="0.1608%" height="15" fill="rgb(226,43,29)" fg:x="434" fg:w="2"/><text x="35.1375%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="34.9678%" y="373" width="0.0804%" height="15" fill="rgb(249,228,39)" fg:x="435" fg:w="1"/><text x="35.2178%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="34.9678%" y="357" width="0.0804%" height="15" fill="rgb(216,79,43)" fg:x="435" fg:w="1"/><text x="35.2178%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="34.9678%" y="341" width="0.0804%" height="15" fill="rgb(228,95,12)" fg:x="435" fg:w="1"/><text x="35.2178%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="34.9678%" y="325" width="0.0804%" height="15" fill="rgb(249,221,15)" fg:x="435" fg:w="1"/><text x="35.2178%" y="335.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (20 samples, 1.61%)</title><rect x="33.5209%" y="597" width="1.6077%" height="15" fill="rgb(233,34,13)" fg:x="417" fg:w="20"/><text x="33.7709%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (19 samples, 1.53%)</title><rect x="33.6013%" y="581" width="1.5273%" height="15" fill="rgb(214,103,39)" fg:x="418" fg:w="19"/><text x="33.8513%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.0482%" y="565" width="0.0804%" height="15" fill="rgb(251,126,39)" fg:x="436" fg:w="1"/><text x="35.2982%" y="575.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (2 samples, 0.16%)</title><rect x="35.4502%" y="421" width="0.1608%" height="15" fill="rgb(214,216,36)" fg:x="441" fg:w="2"/><text x="35.7002%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="35.4502%" y="405" width="0.1608%" height="15" fill="rgb(220,221,8)" fg:x="441" fg:w="2"/><text x="35.7002%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (2 samples, 0.16%)</title><rect x="35.4502%" y="389" width="0.1608%" height="15" fill="rgb(240,216,3)" fg:x="441" fg:w="2"/><text x="35.7002%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="35.4502%" y="373" width="0.1608%" height="15" fill="rgb(232,218,17)" fg:x="441" fg:w="2"/><text x="35.7002%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="35.4502%" y="357" width="0.1608%" height="15" fill="rgb(229,163,45)" fg:x="441" fg:w="2"/><text x="35.7002%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="35.4502%" y="341" width="0.1608%" height="15" fill="rgb(231,110,42)" fg:x="441" fg:w="2"/><text x="35.7002%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.5305%" y="325" width="0.0804%" height="15" fill="rgb(208,170,48)" fg:x="442" fg:w="1"/><text x="35.7805%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="35.6913%" y="389" width="0.2412%" height="15" fill="rgb(239,116,25)" fg:x="444" fg:w="3"/><text x="35.9413%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="35.6913%" y="373" width="0.2412%" height="15" fill="rgb(219,200,50)" fg:x="444" fg:w="3"/><text x="35.9413%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="35.6913%" y="357" width="0.2412%" height="15" fill="rgb(245,200,0)" fg:x="444" fg:w="3"/><text x="35.9413%" y="367.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Kind&gt;::deserialize (3 samples, 0.24%)</title><rect x="35.6913%" y="341" width="0.2412%" height="15" fill="rgb(245,119,33)" fg:x="444" fg:w="3"/><text x="35.9413%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="35.6913%" y="325" width="0.2412%" height="15" fill="rgb(231,125,12)" fg:x="444" fg:w="3"/><text x="35.9413%" y="335.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Identity&gt;::deserialize (3 samples, 0.24%)</title><rect x="35.6913%" y="309" width="0.2412%" height="15" fill="rgb(216,96,41)" fg:x="444" fg:w="3"/><text x="35.9413%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="35.6913%" y="293" width="0.2412%" height="15" fill="rgb(248,43,45)" fg:x="444" fg:w="3"/><text x="35.9413%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="35.8521%" y="277" width="0.0804%" height="15" fill="rgb(217,222,7)" fg:x="446" fg:w="1"/><text x="36.1021%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="36.0129%" y="357" width="0.0804%" height="15" fill="rgb(233,28,6)" fg:x="448" fg:w="1"/><text x="36.2629%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="36.0932%" y="261" width="0.0804%" height="15" fill="rgb(231,218,15)" fg:x="449" fg:w="1"/><text x="36.3432%" y="271.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="35.9325%" y="389" width="0.3215%" height="15" fill="rgb(226,171,48)" fg:x="447" fg:w="4"/><text x="36.1825%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="35.9325%" y="373" width="0.3215%" height="15" fill="rgb(235,201,9)" fg:x="447" fg:w="4"/><text x="36.1825%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="36.0932%" y="357" width="0.1608%" height="15" fill="rgb(217,80,15)" fg:x="449" fg:w="2"/><text x="36.3432%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="36.0932%" y="341" width="0.1608%" height="15" fill="rgb(219,152,8)" fg:x="449" fg:w="2"/><text x="36.3432%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="36.0932%" y="325" width="0.1608%" height="15" fill="rgb(243,107,38)" fg:x="449" fg:w="2"/><text x="36.3432%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="36.0932%" y="309" width="0.1608%" height="15" fill="rgb(231,17,5)" fg:x="449" fg:w="2"/><text x="36.3432%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="36.0932%" y="293" width="0.1608%" height="15" fill="rgb(209,25,54)" fg:x="449" fg:w="2"/><text x="36.3432%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="36.0932%" y="277" width="0.1608%" height="15" fill="rgb(219,0,2)" fg:x="449" fg:w="2"/><text x="36.3432%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="36.1736%" y="261" width="0.0804%" height="15" fill="rgb(246,9,5)" fg:x="450" fg:w="1"/><text x="36.4236%" y="271.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="36.2540%" y="389" width="0.0804%" height="15" fill="rgb(226,159,4)" fg:x="451" fg:w="1"/><text x="36.5040%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="36.2540%" y="373" width="0.0804%" height="15" fill="rgb(219,175,34)" fg:x="451" fg:w="1"/><text x="36.5040%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="36.2540%" y="357" width="0.0804%" height="15" fill="rgb(236,10,46)" fg:x="451" fg:w="1"/><text x="36.5040%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="36.2540%" y="341" width="0.0804%" height="15" fill="rgb(240,211,16)" fg:x="451" fg:w="1"/><text x="36.5040%" y="351.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="36.2540%" y="325" width="0.0804%" height="15" fill="rgb(205,3,43)" fg:x="451" fg:w="1"/><text x="36.5040%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="36.3344%" y="373" width="0.1608%" height="15" fill="rgb(245,7,22)" fg:x="452" fg:w="2"/><text x="36.5844%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="36.3344%" y="357" width="0.1608%" height="15" fill="rgb(239,132,32)" fg:x="452" fg:w="2"/><text x="36.5844%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="36.3344%" y="341" width="0.1608%" height="15" fill="rgb(228,202,34)" fg:x="452" fg:w="2"/><text x="36.5844%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.4952%" y="373" width="0.0804%" height="15" fill="rgb(254,200,22)" fg:x="454" fg:w="1"/><text x="36.7452%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.48%)</title><rect x="36.3344%" y="389" width="0.4823%" height="15" fill="rgb(219,10,39)" fg:x="452" fg:w="6"/><text x="36.5844%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="36.5756%" y="373" width="0.2412%" height="15" fill="rgb(226,210,39)" fg:x="455" fg:w="3"/><text x="36.8256%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="36.5756%" y="357" width="0.2412%" height="15" fill="rgb(208,219,16)" fg:x="455" fg:w="3"/><text x="36.8256%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="36.7363%" y="341" width="0.0804%" height="15" fill="rgb(216,158,51)" fg:x="457" fg:w="1"/><text x="36.9863%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="36.7363%" y="325" width="0.0804%" height="15" fill="rgb(233,14,44)" fg:x="457" fg:w="1"/><text x="36.9863%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="36.7363%" y="309" width="0.0804%" height="15" fill="rgb(237,97,39)" fg:x="457" fg:w="1"/><text x="36.9863%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.8167%" y="389" width="0.0804%" height="15" fill="rgb(218,198,43)" fg:x="458" fg:w="1"/><text x="37.0667%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="36.8971%" y="341" width="0.1608%" height="15" fill="rgb(231,104,20)" fg:x="459" fg:w="2"/><text x="37.1471%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="36.8971%" y="325" width="0.1608%" height="15" fill="rgb(254,36,13)" fg:x="459" fg:w="2"/><text x="37.1471%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.9775%" y="309" width="0.0804%" height="15" fill="rgb(248,14,50)" fg:x="460" fg:w="1"/><text x="37.2275%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.9775%" y="293" width="0.0804%" height="15" fill="rgb(217,107,29)" fg:x="460" fg:w="1"/><text x="37.2275%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="36.9775%" y="277" width="0.0804%" height="15" fill="rgb(251,169,33)" fg:x="460" fg:w="1"/><text x="37.2275%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="36.9775%" y="261" width="0.0804%" height="15" fill="rgb(217,108,32)" fg:x="460" fg:w="1"/><text x="37.2275%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="36.9775%" y="245" width="0.0804%" height="15" fill="rgb(219,66,42)" fg:x="460" fg:w="1"/><text x="37.2275%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="36.9775%" y="229" width="0.0804%" height="15" fill="rgb(206,180,7)" fg:x="460" fg:w="1"/><text x="37.2275%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="36.9775%" y="213" width="0.0804%" height="15" fill="rgb(208,226,31)" fg:x="460" fg:w="1"/><text x="37.2275%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="36.9775%" y="197" width="0.0804%" height="15" fill="rgb(218,26,49)" fg:x="460" fg:w="1"/><text x="37.2275%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="36.9775%" y="181" width="0.0804%" height="15" fill="rgb(233,197,48)" fg:x="460" fg:w="1"/><text x="37.2275%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="36.9775%" y="165" width="0.0804%" height="15" fill="rgb(252,181,51)" fg:x="460" fg:w="1"/><text x="37.2275%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="36.9775%" y="149" width="0.0804%" height="15" fill="rgb(253,90,19)" fg:x="460" fg:w="1"/><text x="37.2275%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.9775%" y="133" width="0.0804%" height="15" fill="rgb(215,171,30)" fg:x="460" fg:w="1"/><text x="37.2275%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="36.8971%" y="357" width="0.2412%" height="15" fill="rgb(214,222,9)" fg:x="459" fg:w="3"/><text x="37.1471%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="37.0579%" y="341" width="0.0804%" height="15" fill="rgb(223,3,22)" fg:x="461" fg:w="1"/><text x="37.3079%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="37.0579%" y="325" width="0.0804%" height="15" fill="rgb(225,196,46)" fg:x="461" fg:w="1"/><text x="37.3079%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="37.0579%" y="309" width="0.0804%" height="15" fill="rgb(209,110,37)" fg:x="461" fg:w="1"/><text x="37.3079%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="37.0579%" y="293" width="0.0804%" height="15" fill="rgb(249,89,12)" fg:x="461" fg:w="1"/><text x="37.3079%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="37.0579%" y="277" width="0.0804%" height="15" fill="rgb(226,27,33)" fg:x="461" fg:w="1"/><text x="37.3079%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="37.0579%" y="261" width="0.0804%" height="15" fill="rgb(213,82,22)" fg:x="461" fg:w="1"/><text x="37.3079%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="37.0579%" y="245" width="0.0804%" height="15" fill="rgb(248,140,0)" fg:x="461" fg:w="1"/><text x="37.3079%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="37.1383%" y="357" width="0.0804%" height="15" fill="rgb(228,106,3)" fg:x="462" fg:w="1"/><text x="37.3883%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="37.2186%" y="293" width="0.0804%" height="15" fill="rgb(209,23,37)" fg:x="463" fg:w="1"/><text x="37.4686%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="37.2186%" y="277" width="0.0804%" height="15" fill="rgb(241,93,50)" fg:x="463" fg:w="1"/><text x="37.4686%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::gid (7 samples, 0.56%)</title><rect x="36.8971%" y="389" width="0.5627%" height="15" fill="rgb(253,46,43)" fg:x="459" fg:w="7"/><text x="37.1471%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (7 samples, 0.56%)</title><rect x="36.8971%" y="373" width="0.5627%" height="15" fill="rgb(226,206,43)" fg:x="459" fg:w="7"/><text x="37.1471%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="37.2186%" y="357" width="0.2412%" height="15" fill="rgb(217,54,7)" fg:x="463" fg:w="3"/><text x="37.4686%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="37.2186%" y="341" width="0.2412%" height="15" fill="rgb(223,5,52)" fg:x="463" fg:w="3"/><text x="37.4686%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="37.2186%" y="325" width="0.2412%" height="15" fill="rgb(206,52,46)" fg:x="463" fg:w="3"/><text x="37.4686%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="37.2186%" y="309" width="0.2412%" height="15" fill="rgb(253,136,11)" fg:x="463" fg:w="3"/><text x="37.4686%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="37.2990%" y="293" width="0.1608%" height="15" fill="rgb(208,106,33)" fg:x="464" fg:w="2"/><text x="37.5490%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="37.2990%" y="277" width="0.1608%" height="15" fill="rgb(206,54,4)" fg:x="464" fg:w="2"/><text x="37.5490%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="37.4598%" y="309" width="0.3215%" height="15" fill="rgb(213,3,15)" fg:x="466" fg:w="4"/><text x="37.7098%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="37.4598%" y="293" width="0.3215%" height="15" fill="rgb(252,211,39)" fg:x="466" fg:w="4"/><text x="37.7098%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="37.5402%" y="277" width="0.2412%" height="15" fill="rgb(223,6,36)" fg:x="467" fg:w="3"/><text x="37.7902%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="37.5402%" y="261" width="0.2412%" height="15" fill="rgb(252,169,45)" fg:x="467" fg:w="3"/><text x="37.7902%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="37.6206%" y="245" width="0.1608%" height="15" fill="rgb(212,48,26)" fg:x="468" fg:w="2"/><text x="37.8706%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="37.6206%" y="229" width="0.1608%" height="15" fill="rgb(251,102,48)" fg:x="468" fg:w="2"/><text x="37.8706%" y="239.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="37.6206%" y="213" width="0.1608%" height="15" fill="rgb(243,208,16)" fg:x="468" fg:w="2"/><text x="37.8706%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.8617%" y="261" width="0.0804%" height="15" fill="rgb(219,96,24)" fg:x="471" fg:w="1"/><text x="38.1117%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="37.9421%" y="261" width="0.0804%" height="15" fill="rgb(219,33,29)" fg:x="472" fg:w="1"/><text x="38.1921%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="37.9421%" y="245" width="0.0804%" height="15" fill="rgb(223,176,5)" fg:x="472" fg:w="1"/><text x="38.1921%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (1 samples, 0.08%)</title><rect x="38.0225%" y="261" width="0.0804%" height="15" fill="rgb(228,140,14)" fg:x="473" fg:w="1"/><text x="38.2725%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.3441%" y="229" width="0.0804%" height="15" fill="rgb(217,179,31)" fg:x="477" fg:w="1"/><text x="38.5941%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.80%)</title><rect x="38.3441%" y="245" width="0.8039%" height="15" fill="rgb(230,9,30)" fg:x="477" fg:w="10"/><text x="38.5941%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.72%)</title><rect x="38.4244%" y="229" width="0.7235%" height="15" fill="rgb(230,136,20)" fg:x="478" fg:w="9"/><text x="38.6744%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="39.3891%" y="229" width="0.0804%" height="15" fill="rgb(215,210,22)" fg:x="490" fg:w="1"/><text x="39.6391%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="39.4695%" y="229" width="0.1608%" height="15" fill="rgb(218,43,5)" fg:x="491" fg:w="2"/><text x="39.7195%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="39.5498%" y="213" width="0.0804%" height="15" fill="rgb(216,11,5)" fg:x="492" fg:w="1"/><text x="39.7998%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="39.1479%" y="245" width="0.5627%" height="15" fill="rgb(209,82,29)" fg:x="487" fg:w="7"/><text x="39.3979%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="39.6302%" y="229" width="0.0804%" height="15" fill="rgb(244,115,12)" fg:x="493" fg:w="1"/><text x="39.8802%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="40.1125%" y="181" width="0.2412%" height="15" fill="rgb(222,82,18)" fg:x="499" fg:w="3"/><text x="40.3625%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="40.3537%" y="181" width="0.0804%" height="15" fill="rgb(249,227,8)" fg:x="502" fg:w="1"/><text x="40.6037%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="40.4341%" y="181" width="0.0804%" height="15" fill="rgb(253,141,45)" fg:x="503" fg:w="1"/><text x="40.6841%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.4341%" y="165" width="0.0804%" height="15" fill="rgb(234,184,4)" fg:x="503" fg:w="1"/><text x="40.6841%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.4341%" y="149" width="0.0804%" height="15" fill="rgb(218,194,23)" fg:x="503" fg:w="1"/><text x="40.6841%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.4341%" y="133" width="0.0804%" height="15" fill="rgb(235,66,41)" fg:x="503" fg:w="1"/><text x="40.6841%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.6752%" y="117" width="0.0804%" height="15" fill="rgb(245,217,1)" fg:x="506" fg:w="1"/><text x="40.9252%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="40.6752%" y="149" width="0.1608%" height="15" fill="rgb(229,91,1)" fg:x="506" fg:w="2"/><text x="40.9252%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="40.6752%" y="133" width="0.1608%" height="15" fill="rgb(207,101,30)" fg:x="506" fg:w="2"/><text x="40.9252%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.7556%" y="117" width="0.0804%" height="15" fill="rgb(223,82,49)" fg:x="507" fg:w="1"/><text x="41.0056%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.48%)</title><rect x="40.5145%" y="181" width="0.4823%" height="15" fill="rgb(218,167,17)" fg:x="504" fg:w="6"/><text x="40.7645%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="40.5949%" y="165" width="0.4019%" height="15" fill="rgb(208,103,14)" fg:x="505" fg:w="5"/><text x="40.8449%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="40.8360%" y="149" width="0.1608%" height="15" fill="rgb(238,20,8)" fg:x="508" fg:w="2"/><text x="41.0860%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="40.9164%" y="133" width="0.0804%" height="15" fill="rgb(218,80,54)" fg:x="509" fg:w="1"/><text x="41.1664%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (55 samples, 4.42%)</title><rect x="40.9968%" y="181" width="4.4212%" height="15" fill="rgb(240,144,17)" fg:x="510" fg:w="55"/><text x="41.2468%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (55 samples, 4.42%)</title><rect x="40.9968%" y="165" width="4.4212%" height="15" fill="rgb(245,27,50)" fg:x="510" fg:w="55"/><text x="41.2468%" y="175.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (55 samples, 4.42%)</title><rect x="40.9968%" y="149" width="4.4212%" height="15" fill="rgb(251,51,7)" fg:x="510" fg:w="55"/><text x="41.2468%" y="159.50">alloc..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="45.4180%" y="181" width="0.2412%" height="15" fill="rgb(245,217,29)" fg:x="565" fg:w="3"/><text x="45.6680%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.5788%" y="165" width="0.0804%" height="15" fill="rgb(221,176,29)" fg:x="567" fg:w="1"/><text x="45.8288%" y="175.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="45.6592%" y="181" width="0.0804%" height="15" fill="rgb(212,180,24)" fg:x="568" fg:w="1"/><text x="45.9092%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 6.19%)</title><rect x="39.7106%" y="229" width="6.1897%" height="15" fill="rgb(254,24,2)" fg:x="494" fg:w="77"/><text x="39.9606%" y="239.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (77 samples, 6.19%)</title><rect x="39.7106%" y="213" width="6.1897%" height="15" fill="rgb(230,100,2)" fg:x="494" fg:w="77"/><text x="39.9606%" y="223.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (77 samples, 6.19%)</title><rect x="39.7106%" y="197" width="6.1897%" height="15" fill="rgb(219,142,25)" fg:x="494" fg:w="77"/><text x="39.9606%" y="207.50">regex_au..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="45.7395%" y="181" width="0.1608%" height="15" fill="rgb(240,73,43)" fg:x="569" fg:w="2"/><text x="45.9895%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.8199%" y="165" width="0.0804%" height="15" fill="rgb(214,114,15)" fg:x="570" fg:w="1"/><text x="46.0699%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.8199%" y="149" width="0.0804%" height="15" fill="rgb(207,130,4)" fg:x="570" fg:w="1"/><text x="46.0699%" y="159.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="46.0611%" y="213" width="0.0804%" height="15" fill="rgb(221,25,40)" fg:x="573" fg:w="1"/><text x="46.3111%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.1415%" y="213" width="0.0804%" height="15" fill="rgb(241,184,7)" fg:x="574" fg:w="1"/><text x="46.3915%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="46.2219%" y="213" width="0.0804%" height="15" fill="rgb(235,159,4)" fg:x="575" fg:w="1"/><text x="46.4719%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.2219%" y="197" width="0.0804%" height="15" fill="rgb(214,87,48)" fg:x="575" fg:w="1"/><text x="46.4719%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.2219%" y="181" width="0.0804%" height="15" fill="rgb(246,198,24)" fg:x="575" fg:w="1"/><text x="46.4719%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (2 samples, 0.16%)</title><rect x="46.3023%" y="213" width="0.1608%" height="15" fill="rgb(209,66,40)" fg:x="576" fg:w="2"/><text x="46.5523%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.48%)</title><rect x="46.4630%" y="213" width="0.4823%" height="15" fill="rgb(233,147,39)" fg:x="578" fg:w="6"/><text x="46.7130%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="46.7042%" y="197" width="0.2412%" height="15" fill="rgb(231,145,52)" fg:x="581" fg:w="3"/><text x="46.9542%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="46.7042%" y="181" width="0.2412%" height="15" fill="rgb(206,20,26)" fg:x="581" fg:w="3"/><text x="46.9542%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="46.7846%" y="165" width="0.1608%" height="15" fill="rgb(238,220,4)" fg:x="582" fg:w="2"/><text x="47.0346%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="46.9453%" y="213" width="0.5627%" height="15" fill="rgb(252,195,42)" fg:x="584" fg:w="7"/><text x="47.1953%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.4277%" y="197" width="0.0804%" height="15" fill="rgb(209,10,6)" fg:x="590" fg:w="1"/><text x="47.6777%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="47.5080%" y="213" width="0.1608%" height="15" fill="rgb(229,3,52)" fg:x="591" fg:w="2"/><text x="47.7580%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (25 samples, 2.01%)</title><rect x="45.9003%" y="229" width="2.0096%" height="15" fill="rgb(253,49,37)" fg:x="571" fg:w="25"/><text x="46.1503%" y="239.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (3 samples, 0.24%)</title><rect x="47.6688%" y="213" width="0.2412%" height="15" fill="rgb(240,103,49)" fg:x="593" fg:w="3"/><text x="47.9188%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.8296%" y="197" width="0.0804%" height="15" fill="rgb(250,182,30)" fg:x="595" fg:w="1"/><text x="48.0796%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="47.9100%" y="229" width="0.1608%" height="15" fill="rgb(248,8,30)" fg:x="596" fg:w="2"/><text x="48.1600%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="47.9100%" y="213" width="0.1608%" height="15" fill="rgb(237,120,30)" fg:x="596" fg:w="2"/><text x="48.1600%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.9904%" y="197" width="0.0804%" height="15" fill="rgb(221,146,34)" fg:x="597" fg:w="1"/><text x="48.2404%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (106 samples, 8.52%)</title><rect x="39.7106%" y="245" width="8.5209%" height="15" fill="rgb(242,55,13)" fg:x="494" fg:w="106"/><text x="39.9606%" y="255.50">regex_automa..</text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.16%)</title><rect x="48.0707%" y="229" width="0.1608%" height="15" fill="rgb(242,112,31)" fg:x="598" fg:w="2"/><text x="48.3207%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="48.1511%" y="213" width="0.0804%" height="15" fill="rgb(249,192,27)" fg:x="599" fg:w="1"/><text x="48.4011%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.1511%" y="197" width="0.0804%" height="15" fill="rgb(208,204,44)" fg:x="599" fg:w="1"/><text x="48.4011%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (128 samples, 10.29%)</title><rect x="38.1029%" y="261" width="10.2894%" height="15" fill="rgb(208,93,54)" fg:x="474" fg:w="128"/><text x="38.3529%" y="271.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="48.2315%" y="245" width="0.1608%" height="15" fill="rgb(242,1,31)" fg:x="600" fg:w="2"/><text x="48.4815%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="48.2315%" y="229" width="0.1608%" height="15" fill="rgb(241,83,25)" fg:x="600" fg:w="2"/><text x="48.4815%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="48.3119%" y="213" width="0.0804%" height="15" fill="rgb(205,169,50)" fg:x="601" fg:w="1"/><text x="48.5619%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="48.7138%" y="213" width="0.0804%" height="15" fill="rgb(239,186,37)" fg:x="606" fg:w="1"/><text x="48.9638%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="48.7942%" y="213" width="0.0804%" height="15" fill="rgb(205,221,10)" fg:x="607" fg:w="1"/><text x="49.0442%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="48.7942%" y="197" width="0.0804%" height="15" fill="rgb(218,196,15)" fg:x="607" fg:w="1"/><text x="49.0442%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="48.7942%" y="181" width="0.0804%" height="15" fill="rgb(218,196,35)" fg:x="607" fg:w="1"/><text x="49.0442%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="48.7942%" y="165" width="0.0804%" height="15" fill="rgb(233,63,24)" fg:x="607" fg:w="1"/><text x="49.0442%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="49.0354%" y="197" width="0.3215%" height="15" fill="rgb(225,8,4)" fg:x="610" fg:w="4"/><text x="49.2854%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="49.0354%" y="181" width="0.3215%" height="15" fill="rgb(234,105,35)" fg:x="610" fg:w="4"/><text x="49.2854%" y="191.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="49.0354%" y="165" width="0.3215%" height="15" fill="rgb(236,21,32)" fg:x="610" fg:w="4"/><text x="49.2854%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (13 samples, 1.05%)</title><rect x="48.3923%" y="261" width="1.0450%" height="15" fill="rgb(228,109,6)" fg:x="602" fg:w="13"/><text x="48.6423%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (13 samples, 1.05%)</title><rect x="48.3923%" y="245" width="1.0450%" height="15" fill="rgb(229,215,31)" fg:x="602" fg:w="13"/><text x="48.6423%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (13 samples, 1.05%)</title><rect x="48.3923%" y="229" width="1.0450%" height="15" fill="rgb(221,52,54)" fg:x="602" fg:w="13"/><text x="48.6423%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (7 samples, 0.56%)</title><rect x="48.8746%" y="213" width="0.5627%" height="15" fill="rgb(252,129,43)" fg:x="608" fg:w="7"/><text x="49.1246%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="49.3569%" y="197" width="0.0804%" height="15" fill="rgb(248,183,27)" fg:x="614" fg:w="1"/><text x="49.6069%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserBuilder::build (1 samples, 0.08%)</title><rect x="49.4373%" y="261" width="0.0804%" height="15" fill="rgb(250,0,22)" fg:x="615" fg:w="1"/><text x="49.6873%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.5177%" y="213" width="0.0804%" height="15" fill="rgb(213,166,10)" fg:x="616" fg:w="1"/><text x="49.7677%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.5177%" y="197" width="0.0804%" height="15" fill="rgb(207,163,36)" fg:x="616" fg:w="1"/><text x="49.7677%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="49.5177%" y="181" width="0.0804%" height="15" fill="rgb(208,122,22)" fg:x="616" fg:w="1"/><text x="49.7677%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="49.5177%" y="229" width="0.1608%" height="15" fill="rgb(207,104,49)" fg:x="616" fg:w="2"/><text x="49.7677%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="49.5981%" y="213" width="0.0804%" height="15" fill="rgb(248,211,50)" fg:x="617" fg:w="1"/><text x="49.8481%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="49.5981%" y="197" width="0.0804%" height="15" fill="rgb(217,13,45)" fg:x="617" fg:w="1"/><text x="49.8481%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.5981%" y="181" width="0.0804%" height="15" fill="rgb(211,216,49)" fg:x="617" fg:w="1"/><text x="49.8481%" y="191.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (149 samples, 11.98%)</title><rect x="37.7814%" y="277" width="11.9775%" height="15" fill="rgb(221,58,53)" fg:x="470" fg:w="149"/><text x="38.0314%" y="287.50">regex_automata::me..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="49.5177%" y="261" width="0.2412%" height="15" fill="rgb(220,112,41)" fg:x="616" fg:w="3"/><text x="49.7677%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="49.5177%" y="245" width="0.2412%" height="15" fill="rgb(236,38,28)" fg:x="616" fg:w="3"/><text x="49.7677%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.6785%" y="229" width="0.0804%" height="15" fill="rgb(227,195,22)" fg:x="618" fg:w="1"/><text x="49.9285%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (150 samples, 12.06%)</title><rect x="37.7814%" y="309" width="12.0579%" height="15" fill="rgb(214,55,33)" fg:x="470" fg:w="150"/><text x="38.0314%" y="319.50">&lt;regex::regex::str..</text></g><g><title>regex::builders::Builder::build_one_string (150 samples, 12.06%)</title><rect x="37.7814%" y="293" width="12.0579%" height="15" fill="rgb(248,80,13)" fg:x="470" fg:w="150"/><text x="38.0314%" y="303.50">regex::builders::B..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="49.7588%" y="277" width="0.0804%" height="15" fill="rgb(238,52,6)" fg:x="619" fg:w="1"/><text x="50.0088%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="49.8392%" y="261" width="0.0804%" height="15" fill="rgb(224,198,47)" fg:x="620" fg:w="1"/><text x="50.0892%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.8392%" y="245" width="0.0804%" height="15" fill="rgb(233,171,20)" fg:x="620" fg:w="1"/><text x="50.0892%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="49.8392%" y="277" width="0.1608%" height="15" fill="rgb(241,30,25)" fg:x="620" fg:w="2"/><text x="50.0892%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="49.9196%" y="261" width="0.0804%" height="15" fill="rgb(207,171,38)" fg:x="621" fg:w="1"/><text x="50.1696%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="49.9196%" y="245" width="0.0804%" height="15" fill="rgb(234,70,1)" fg:x="621" fg:w="1"/><text x="50.1696%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="49.8392%" y="309" width="0.4019%" height="15" fill="rgb(232,178,18)" fg:x="620" fg:w="5"/><text x="50.0892%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="49.8392%" y="293" width="0.4019%" height="15" fill="rgb(241,78,40)" fg:x="620" fg:w="5"/><text x="50.0892%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="50.0000%" y="277" width="0.2412%" height="15" fill="rgb(222,35,25)" fg:x="622" fg:w="3"/><text x="50.2500%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="50.0804%" y="261" width="0.1608%" height="15" fill="rgb(207,92,16)" fg:x="623" fg:w="2"/><text x="50.3304%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.1608%" y="245" width="0.0804%" height="15" fill="rgb(216,59,51)" fg:x="624" fg:w="1"/><text x="50.4108%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="50.4019%" y="229" width="0.1608%" height="15" fill="rgb(213,80,28)" fg:x="627" fg:w="2"/><text x="50.6519%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="50.4823%" y="213" width="0.0804%" height="15" fill="rgb(220,93,7)" fg:x="628" fg:w="1"/><text x="50.7323%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="50.2412%" y="245" width="0.4019%" height="15" fill="rgb(225,24,44)" fg:x="625" fg:w="5"/><text x="50.4912%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="50.5627%" y="229" width="0.0804%" height="15" fill="rgb(243,74,40)" fg:x="629" fg:w="1"/><text x="50.8127%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="50.2412%" y="277" width="0.4823%" height="15" fill="rgb(228,39,7)" fg:x="625" fg:w="6"/><text x="50.4912%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="50.2412%" y="261" width="0.4823%" height="15" fill="rgb(227,79,8)" fg:x="625" fg:w="6"/><text x="50.4912%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="50.6431%" y="245" width="0.0804%" height="15" fill="rgb(236,58,11)" fg:x="630" fg:w="1"/><text x="50.8931%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (166 samples, 13.34%)</title><rect x="37.4598%" y="325" width="13.3441%" height="15" fill="rgb(249,63,35)" fg:x="466" fg:w="166"/><text x="37.7098%" y="335.50">indefinite::helper::..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="50.2412%" y="309" width="0.5627%" height="15" fill="rgb(252,114,16)" fg:x="625" fg:w="7"/><text x="50.4912%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="50.2412%" y="293" width="0.5627%" height="15" fill="rgb(254,151,24)" fg:x="625" fg:w="7"/><text x="50.4912%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::Core::is_match_nofail (1 samples, 0.08%)</title><rect x="50.7235%" y="277" width="0.0804%" height="15" fill="rgb(253,54,39)" fg:x="631" fg:w="1"/><text x="50.9735%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="50.8842%" y="293" width="0.0804%" height="15" fill="rgb(243,25,45)" fg:x="633" fg:w="1"/><text x="51.1342%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="50.8842%" y="277" width="0.0804%" height="15" fill="rgb(234,134,9)" fg:x="633" fg:w="1"/><text x="51.1342%" y="287.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="50.9646%" y="293" width="0.0804%" height="15" fill="rgb(227,166,31)" fg:x="634" fg:w="1"/><text x="51.2146%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Config::nfa_size_limit (1 samples, 0.08%)</title><rect x="50.9646%" y="277" width="0.0804%" height="15" fill="rgb(245,143,41)" fg:x="634" fg:w="1"/><text x="51.2146%" y="287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="51.0450%" y="261" width="0.0804%" height="15" fill="rgb(238,181,32)" fg:x="635" fg:w="1"/><text x="51.2950%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="51.1254%" y="261" width="0.0804%" height="15" fill="rgb(224,113,18)" fg:x="636" fg:w="1"/><text x="51.3754%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="51.1254%" y="245" width="0.0804%" height="15" fill="rgb(240,229,28)" fg:x="636" fg:w="1"/><text x="51.3754%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.1254%" y="229" width="0.0804%" height="15" fill="rgb(250,185,3)" fg:x="636" fg:w="1"/><text x="51.3754%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="51.2058%" y="261" width="0.0804%" height="15" fill="rgb(212,59,25)" fg:x="637" fg:w="1"/><text x="51.4558%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="51.2058%" y="245" width="0.0804%" height="15" fill="rgb(221,87,20)" fg:x="637" fg:w="1"/><text x="51.4558%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="51.2058%" y="229" width="0.0804%" height="15" fill="rgb(213,74,28)" fg:x="637" fg:w="1"/><text x="51.4558%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="51.2058%" y="213" width="0.0804%" height="15" fill="rgb(224,132,34)" fg:x="637" fg:w="1"/><text x="51.4558%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.4469%" y="229" width="0.0804%" height="15" fill="rgb(222,101,24)" fg:x="640" fg:w="1"/><text x="51.6969%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="51.4469%" y="245" width="0.1608%" height="15" fill="rgb(254,142,4)" fg:x="640" fg:w="2"/><text x="51.6969%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="51.5273%" y="229" width="0.0804%" height="15" fill="rgb(230,229,49)" fg:x="641" fg:w="1"/><text x="51.7773%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.5273%" y="213" width="0.0804%" height="15" fill="rgb(238,70,47)" fg:x="641" fg:w="1"/><text x="51.7773%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="51.6077%" y="245" width="0.3215%" height="15" fill="rgb(231,160,17)" fg:x="642" fg:w="4"/><text x="51.8577%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="51.6881%" y="229" width="0.2412%" height="15" fill="rgb(218,68,53)" fg:x="643" fg:w="3"/><text x="51.9381%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="51.8489%" y="213" width="0.0804%" height="15" fill="rgb(236,111,10)" fg:x="645" fg:w="1"/><text x="52.0989%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="51.9293%" y="229" width="0.0804%" height="15" fill="rgb(224,34,41)" fg:x="646" fg:w="1"/><text x="52.1793%" y="239.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="52.0900%" y="213" width="0.0804%" height="15" fill="rgb(241,118,19)" fg:x="648" fg:w="1"/><text x="52.3400%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.1704%" y="213" width="0.0804%" height="15" fill="rgb(238,129,25)" fg:x="649" fg:w="1"/><text x="52.4204%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9 samples, 0.72%)</title><rect x="51.9293%" y="245" width="0.7235%" height="15" fill="rgb(238,22,31)" fg:x="646" fg:w="9"/><text x="52.1793%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.64%)</title><rect x="52.0096%" y="229" width="0.6431%" height="15" fill="rgb(222,174,48)" fg:x="647" fg:w="8"/><text x="52.2596%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="52.2508%" y="213" width="0.4019%" height="15" fill="rgb(206,152,40)" fg:x="650" fg:w="5"/><text x="52.5008%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (18 samples, 1.45%)</title><rect x="51.2862%" y="261" width="1.4469%" height="15" fill="rgb(218,99,54)" fg:x="638" fg:w="18"/><text x="51.5362%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="52.6527%" y="245" width="0.0804%" height="15" fill="rgb(220,174,26)" fg:x="655" fg:w="1"/><text x="52.9027%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="52.6527%" y="229" width="0.0804%" height="15" fill="rgb(245,116,9)" fg:x="655" fg:w="1"/><text x="52.9027%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="52.6527%" y="213" width="0.0804%" height="15" fill="rgb(209,72,35)" fg:x="655" fg:w="1"/><text x="52.9027%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.6527%" y="197" width="0.0804%" height="15" fill="rgb(226,126,21)" fg:x="655" fg:w="1"/><text x="52.9027%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="52.8135%" y="213" width="0.0804%" height="15" fill="rgb(227,192,1)" fg:x="657" fg:w="1"/><text x="53.0635%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.8135%" y="197" width="0.0804%" height="15" fill="rgb(237,180,29)" fg:x="657" fg:w="1"/><text x="53.0635%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.8135%" y="181" width="0.0804%" height="15" fill="rgb(230,197,35)" fg:x="657" fg:w="1"/><text x="53.0635%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.8135%" y="165" width="0.0804%" height="15" fill="rgb(246,193,31)" fg:x="657" fg:w="1"/><text x="53.0635%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="52.8939%" y="213" width="0.0804%" height="15" fill="rgb(241,36,4)" fg:x="658" fg:w="1"/><text x="53.1439%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="52.8939%" y="197" width="0.0804%" height="15" fill="rgb(241,130,17)" fg:x="658" fg:w="1"/><text x="53.1439%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="52.8939%" y="181" width="0.0804%" height="15" fill="rgb(206,137,32)" fg:x="658" fg:w="1"/><text x="53.1439%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="52.7331%" y="261" width="0.4823%" height="15" fill="rgb(237,228,51)" fg:x="656" fg:w="6"/><text x="52.9831%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="52.7331%" y="245" width="0.4823%" height="15" fill="rgb(243,6,42)" fg:x="656" fg:w="6"/><text x="52.9831%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="52.7331%" y="229" width="0.4823%" height="15" fill="rgb(251,74,28)" fg:x="656" fg:w="6"/><text x="52.9831%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="52.9743%" y="213" width="0.2412%" height="15" fill="rgb(218,20,49)" fg:x="659" fg:w="3"/><text x="53.2243%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="52.9743%" y="197" width="0.2412%" height="15" fill="rgb(238,28,14)" fg:x="659" fg:w="3"/><text x="53.2243%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="52.9743%" y="181" width="0.2412%" height="15" fill="rgb(229,40,46)" fg:x="659" fg:w="3"/><text x="53.2243%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="52.9743%" y="165" width="0.2412%" height="15" fill="rgb(244,195,20)" fg:x="659" fg:w="3"/><text x="53.2243%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="53.2154%" y="229" width="0.2412%" height="15" fill="rgb(253,56,35)" fg:x="662" fg:w="3"/><text x="53.4654%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="53.2958%" y="213" width="0.1608%" height="15" fill="rgb(210,149,44)" fg:x="663" fg:w="2"/><text x="53.5458%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::merge_sort::RunVec&lt;alloc::slice::stable_sort&lt;regex_syntax::ast::Span,&lt;regex_syntax::ast::Span as core::cmp::PartialOrd&gt;::lt&gt;::{{closure}},alloc::slice::stable_sort&lt;regex_syntax::ast::Span,&lt;regex_syntax::ast::Span as core::cmp::PartialOrd&gt;::lt&gt;::{{closure}}&gt;&gt; (1 samples, 0.08%)</title><rect x="53.3762%" y="197" width="0.0804%" height="15" fill="rgb(240,135,12)" fg:x="664" fg:w="1"/><text x="53.6262%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (33 samples, 2.65%)</title><rect x="50.8842%" y="309" width="2.6527%" height="15" fill="rgb(251,24,50)" fg:x="633" fg:w="33"/><text x="51.1342%" y="319.50">&lt;r..</text></g><g><title>regex::builders::Builder::build_one_string (31 samples, 2.49%)</title><rect x="51.0450%" y="293" width="2.4920%" height="15" fill="rgb(243,200,47)" fg:x="635" fg:w="31"/><text x="51.2950%" y="303.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (31 samples, 2.49%)</title><rect x="51.0450%" y="277" width="2.4920%" height="15" fill="rgb(224,166,26)" fg:x="635" fg:w="31"/><text x="51.2950%" y="287.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="53.2154%" y="261" width="0.3215%" height="15" fill="rgb(233,0,47)" fg:x="662" fg:w="4"/><text x="53.4654%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="53.2154%" y="245" width="0.3215%" height="15" fill="rgb(253,80,5)" fg:x="662" fg:w="4"/><text x="53.4654%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="53.4566%" y="229" width="0.0804%" height="15" fill="rgb(214,133,25)" fg:x="665" fg:w="1"/><text x="53.7066%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="53.4566%" y="213" width="0.0804%" height="15" fill="rgb(209,27,14)" fg:x="665" fg:w="1"/><text x="53.7066%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.4566%" y="197" width="0.0804%" height="15" fill="rgb(219,102,51)" fg:x="665" fg:w="1"/><text x="53.7066%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="53.6174%" y="277" width="0.0804%" height="15" fill="rgb(237,18,16)" fg:x="667" fg:w="1"/><text x="53.8674%" y="287.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="53.6174%" y="261" width="0.0804%" height="15" fill="rgb(241,85,17)" fg:x="667" fg:w="1"/><text x="53.8674%" y="271.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="53.6174%" y="245" width="0.0804%" height="15" fill="rgb(236,90,42)" fg:x="667" fg:w="1"/><text x="53.8674%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="53.5370%" y="309" width="0.2412%" height="15" fill="rgb(249,57,21)" fg:x="666" fg:w="3"/><text x="53.7870%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="53.5370%" y="293" width="0.2412%" height="15" fill="rgb(243,12,36)" fg:x="666" fg:w="3"/><text x="53.7870%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="53.6977%" y="277" width="0.0804%" height="15" fill="rgb(253,128,47)" fg:x="668" fg:w="1"/><text x="53.9477%" y="287.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="53.6977%" y="261" width="0.0804%" height="15" fill="rgb(207,33,20)" fg:x="668" fg:w="1"/><text x="53.9477%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="53.7781%" y="277" width="0.0804%" height="15" fill="rgb(233,215,35)" fg:x="669" fg:w="1"/><text x="54.0281%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="53.7781%" y="261" width="0.0804%" height="15" fill="rgb(249,188,52)" fg:x="669" fg:w="1"/><text x="54.0281%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="53.7781%" y="245" width="0.0804%" height="15" fill="rgb(225,12,32)" fg:x="669" fg:w="1"/><text x="54.0281%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.7781%" y="229" width="0.0804%" height="15" fill="rgb(247,98,14)" fg:x="669" fg:w="1"/><text x="54.0281%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="53.7781%" y="309" width="0.2412%" height="15" fill="rgb(247,219,48)" fg:x="669" fg:w="3"/><text x="54.0281%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="53.7781%" y="293" width="0.2412%" height="15" fill="rgb(253,60,48)" fg:x="669" fg:w="3"/><text x="54.0281%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="53.8585%" y="277" width="0.1608%" height="15" fill="rgb(245,15,52)" fg:x="670" fg:w="2"/><text x="54.1085%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="53.8585%" y="261" width="0.1608%" height="15" fill="rgb(220,133,28)" fg:x="670" fg:w="2"/><text x="54.1085%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="53.8585%" y="245" width="0.1608%" height="15" fill="rgb(217,180,4)" fg:x="670" fg:w="2"/><text x="54.1085%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="54.0997%" y="229" width="0.0804%" height="15" fill="rgb(251,24,1)" fg:x="673" fg:w="1"/><text x="54.3497%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.0997%" y="213" width="0.0804%" height="15" fill="rgb(212,185,49)" fg:x="673" fg:w="1"/><text x="54.3497%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.0997%" y="197" width="0.0804%" height="15" fill="rgb(215,175,22)" fg:x="673" fg:w="1"/><text x="54.3497%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="54.0997%" y="261" width="0.1608%" height="15" fill="rgb(250,205,14)" fg:x="673" fg:w="2"/><text x="54.3497%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="54.0997%" y="245" width="0.1608%" height="15" fill="rgb(225,211,22)" fg:x="673" fg:w="2"/><text x="54.3497%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="54.1801%" y="229" width="0.0804%" height="15" fill="rgb(251,179,42)" fg:x="674" fg:w="1"/><text x="54.4301%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="54.1801%" y="213" width="0.0804%" height="15" fill="rgb(208,216,51)" fg:x="674" fg:w="1"/><text x="54.4301%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.1801%" y="197" width="0.0804%" height="15" fill="rgb(235,36,11)" fg:x="674" fg:w="1"/><text x="54.4301%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.1801%" y="181" width="0.0804%" height="15" fill="rgb(213,189,28)" fg:x="674" fg:w="1"/><text x="54.4301%" y="191.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (44 samples, 3.54%)</title><rect x="50.8039%" y="325" width="3.5370%" height="15" fill="rgb(227,203,42)" fg:x="632" fg:w="44"/><text x="51.0539%" y="335.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="54.0193%" y="309" width="0.3215%" height="15" fill="rgb(244,72,36)" fg:x="672" fg:w="4"/><text x="54.2693%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="54.0193%" y="293" width="0.3215%" height="15" fill="rgb(213,53,17)" fg:x="672" fg:w="4"/><text x="54.2693%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="54.0997%" y="277" width="0.2412%" height="15" fill="rgb(207,167,3)" fg:x="673" fg:w="3"/><text x="54.3497%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="54.2605%" y="261" width="0.0804%" height="15" fill="rgb(216,98,30)" fg:x="675" fg:w="1"/><text x="54.5105%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="54.2605%" y="245" width="0.0804%" height="15" fill="rgb(236,123,15)" fg:x="675" fg:w="1"/><text x="54.5105%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="54.2605%" y="229" width="0.0804%" height="15" fill="rgb(248,81,50)" fg:x="675" fg:w="1"/><text x="54.5105%" y="239.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="54.3408%" y="325" width="0.0804%" height="15" fill="rgb(214,120,4)" fg:x="676" fg:w="1"/><text x="54.5908%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="54.5016%" y="229" width="0.1608%" height="15" fill="rgb(208,179,34)" fg:x="678" fg:w="2"/><text x="54.7516%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="54.5016%" y="213" width="0.1608%" height="15" fill="rgb(227,140,7)" fg:x="678" fg:w="2"/><text x="54.7516%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="54.5016%" y="197" width="0.1608%" height="15" fill="rgb(214,22,6)" fg:x="678" fg:w="2"/><text x="54.7516%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="54.5016%" y="181" width="0.1608%" height="15" fill="rgb(207,137,27)" fg:x="678" fg:w="2"/><text x="54.7516%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="54.6624%" y="197" width="0.0804%" height="15" fill="rgb(210,8,46)" fg:x="680" fg:w="1"/><text x="54.9124%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="54.6624%" y="181" width="0.0804%" height="15" fill="rgb(240,16,54)" fg:x="680" fg:w="1"/><text x="54.9124%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.40%)</title><rect x="54.4212%" y="261" width="0.4019%" height="15" fill="rgb(211,209,29)" fg:x="677" fg:w="5"/><text x="54.6712%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="54.4212%" y="245" width="0.4019%" height="15" fill="rgb(226,228,24)" fg:x="677" fg:w="5"/><text x="54.6712%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="54.6624%" y="229" width="0.1608%" height="15" fill="rgb(222,84,9)" fg:x="680" fg:w="2"/><text x="54.9124%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="54.6624%" y="213" width="0.1608%" height="15" fill="rgb(234,203,30)" fg:x="680" fg:w="2"/><text x="54.9124%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.7428%" y="197" width="0.0804%" height="15" fill="rgb(238,109,14)" fg:x="681" fg:w="1"/><text x="54.9928%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.8232%" y="245" width="0.0804%" height="15" fill="rgb(233,206,34)" fg:x="682" fg:w="1"/><text x="55.0732%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (13 samples, 1.05%)</title><rect x="54.9035%" y="245" width="1.0450%" height="15" fill="rgb(220,167,47)" fg:x="683" fg:w="13"/><text x="55.1535%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (12 samples, 0.96%)</title><rect x="54.9839%" y="229" width="0.9646%" height="15" fill="rgb(238,105,10)" fg:x="684" fg:w="12"/><text x="55.2339%" y="239.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="55.7074%" y="213" width="0.2412%" height="15" fill="rgb(213,227,17)" fg:x="693" fg:w="3"/><text x="55.9574%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.64%)</title><rect x="55.9486%" y="245" width="0.6431%" height="15" fill="rgb(217,132,38)" fg:x="696" fg:w="8"/><text x="56.1986%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (8 samples, 0.64%)</title><rect x="55.9486%" y="229" width="0.6431%" height="15" fill="rgb(242,146,4)" fg:x="696" fg:w="8"/><text x="56.1986%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.7524%" y="213" width="0.0804%" height="15" fill="rgb(212,61,9)" fg:x="706" fg:w="1"/><text x="57.0024%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.7524%" y="197" width="0.0804%" height="15" fill="rgb(247,126,22)" fg:x="706" fg:w="1"/><text x="57.0024%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="56.7524%" y="181" width="0.0804%" height="15" fill="rgb(220,196,2)" fg:x="706" fg:w="1"/><text x="57.0024%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="56.7524%" y="165" width="0.0804%" height="15" fill="rgb(208,46,4)" fg:x="706" fg:w="1"/><text x="57.0024%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.0740%" y="181" width="0.0804%" height="15" fill="rgb(252,104,46)" fg:x="710" fg:w="1"/><text x="57.3240%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.0740%" y="165" width="0.0804%" height="15" fill="rgb(237,152,48)" fg:x="710" fg:w="1"/><text x="57.3240%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.0740%" y="149" width="0.0804%" height="15" fill="rgb(221,59,37)" fg:x="710" fg:w="1"/><text x="57.3240%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (5 samples, 0.40%)</title><rect x="56.8328%" y="213" width="0.4019%" height="15" fill="rgb(209,202,51)" fg:x="707" fg:w="5"/><text x="57.0828%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="56.9132%" y="197" width="0.3215%" height="15" fill="rgb(228,81,30)" fg:x="708" fg:w="4"/><text x="57.1632%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.1543%" y="181" width="0.0804%" height="15" fill="rgb(227,42,39)" fg:x="711" fg:w="1"/><text x="57.4043%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.1543%" y="165" width="0.0804%" height="15" fill="rgb(221,26,2)" fg:x="711" fg:w="1"/><text x="57.4043%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.1543%" y="149" width="0.0804%" height="15" fill="rgb(254,61,31)" fg:x="711" fg:w="1"/><text x="57.4043%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (18 samples, 1.45%)</title><rect x="56.5916%" y="245" width="1.4469%" height="15" fill="rgb(222,173,38)" fg:x="704" fg:w="18"/><text x="56.8416%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (18 samples, 1.45%)</title><rect x="56.5916%" y="229" width="1.4469%" height="15" fill="rgb(218,50,12)" fg:x="704" fg:w="18"/><text x="56.8416%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (10 samples, 0.80%)</title><rect x="57.2347%" y="213" width="0.8039%" height="15" fill="rgb(223,88,40)" fg:x="712" fg:w="10"/><text x="57.4847%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (9 samples, 0.72%)</title><rect x="57.3151%" y="197" width="0.7235%" height="15" fill="rgb(237,54,19)" fg:x="713" fg:w="9"/><text x="57.5651%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (9 samples, 0.72%)</title><rect x="57.3151%" y="181" width="0.7235%" height="15" fill="rgb(251,129,25)" fg:x="713" fg:w="9"/><text x="57.5651%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="58.0386%" y="213" width="0.0804%" height="15" fill="rgb(238,97,19)" fg:x="722" fg:w="1"/><text x="58.2886%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="58.1190%" y="197" width="0.0804%" height="15" fill="rgb(240,169,18)" fg:x="723" fg:w="1"/><text x="58.3690%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.1190%" y="181" width="0.0804%" height="15" fill="rgb(230,187,49)" fg:x="723" fg:w="1"/><text x="58.3690%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.1190%" y="165" width="0.0804%" height="15" fill="rgb(209,44,26)" fg:x="723" fg:w="1"/><text x="58.3690%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.1190%" y="149" width="0.0804%" height="15" fill="rgb(244,0,6)" fg:x="723" fg:w="1"/><text x="58.3690%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="58.1994%" y="165" width="0.0804%" height="15" fill="rgb(248,18,21)" fg:x="724" fg:w="1"/><text x="58.4494%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="58.2797%" y="149" width="0.0804%" height="15" fill="rgb(245,180,19)" fg:x="725" fg:w="1"/><text x="58.5297%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.2797%" y="133" width="0.0804%" height="15" fill="rgb(252,118,36)" fg:x="725" fg:w="1"/><text x="58.5297%" y="143.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="59.3248%" y="133" width="0.3215%" height="15" fill="rgb(210,224,19)" fg:x="738" fg:w="4"/><text x="59.5748%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.6463%" y="133" width="0.0804%" height="15" fill="rgb(218,30,24)" fg:x="742" fg:w="1"/><text x="59.8963%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.40%)</title><rect x="59.7267%" y="133" width="0.4019%" height="15" fill="rgb(219,75,50)" fg:x="743" fg:w="5"/><text x="59.9767%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="59.9678%" y="117" width="0.1608%" height="15" fill="rgb(234,72,50)" fg:x="746" fg:w="2"/><text x="60.2178%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="59.9678%" y="101" width="0.1608%" height="15" fill="rgb(219,100,48)" fg:x="746" fg:w="2"/><text x="60.2178%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="59.9678%" y="85" width="0.1608%" height="15" fill="rgb(253,5,41)" fg:x="746" fg:w="2"/><text x="60.2178%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="60.1286%" y="133" width="0.0804%" height="15" fill="rgb(247,181,11)" fg:x="748" fg:w="1"/><text x="60.3786%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.0129%" y="101" width="0.0804%" height="15" fill="rgb(222,223,25)" fg:x="759" fg:w="1"/><text x="61.2629%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="61.0932%" y="101" width="0.2412%" height="15" fill="rgb(214,198,28)" fg:x="760" fg:w="3"/><text x="61.3432%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="61.0932%" y="85" width="0.2412%" height="15" fill="rgb(230,46,43)" fg:x="760" fg:w="3"/><text x="61.3432%" y="95.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="61.1736%" y="69" width="0.1608%" height="15" fill="rgb(233,65,53)" fg:x="761" fg:w="2"/><text x="61.4236%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (22 samples, 1.77%)</title><rect x="60.2090%" y="133" width="1.7685%" height="15" fill="rgb(221,121,27)" fg:x="749" fg:w="22"/><text x="60.4590%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (19 samples, 1.53%)</title><rect x="60.4502%" y="117" width="1.5273%" height="15" fill="rgb(247,70,47)" fg:x="752" fg:w="19"/><text x="60.7002%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (8 samples, 0.64%)</title><rect x="61.3344%" y="101" width="0.6431%" height="15" fill="rgb(228,85,35)" fg:x="763" fg:w="8"/><text x="61.5844%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="61.8971%" y="85" width="0.0804%" height="15" fill="rgb(209,50,18)" fg:x="770" fg:w="1"/><text x="62.1471%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.8971%" y="69" width="0.0804%" height="15" fill="rgb(250,19,35)" fg:x="770" fg:w="1"/><text x="62.1471%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.8971%" y="53" width="0.0804%" height="15" fill="rgb(253,107,29)" fg:x="770" fg:w="1"/><text x="62.1471%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.8971%" y="37" width="0.0804%" height="15" fill="rgb(252,179,29)" fg:x="770" fg:w="1"/><text x="62.1471%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (63 samples, 5.06%)</title><rect x="61.9775%" y="133" width="5.0643%" height="15" fill="rgb(238,194,6)" fg:x="771" fg:w="63"/><text x="62.2275%" y="143.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (62 samples, 4.98%)</title><rect x="62.0579%" y="117" width="4.9839%" height="15" fill="rgb(238,164,29)" fg:x="772" fg:w="62"/><text x="62.3079%" y="127.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (62 samples, 4.98%)</title><rect x="62.0579%" y="101" width="4.9839%" height="15" fill="rgb(224,25,9)" fg:x="772" fg:w="62"/><text x="62.3079%" y="111.50">alloc:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="67.0418%" y="133" width="0.2412%" height="15" fill="rgb(244,153,23)" fg:x="834" fg:w="3"/><text x="67.2918%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.2026%" y="117" width="0.0804%" height="15" fill="rgb(212,203,14)" fg:x="836" fg:w="1"/><text x="67.4526%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (118 samples, 9.49%)</title><rect x="58.2797%" y="165" width="9.4855%" height="15" fill="rgb(220,164,20)" fg:x="725" fg:w="118"/><text x="58.5297%" y="175.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (117 samples, 9.41%)</title><rect x="58.3601%" y="149" width="9.4051%" height="15" fill="rgb(222,203,48)" fg:x="726" fg:w="117"/><text x="58.6101%" y="159.50">regex_automat..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (6 samples, 0.48%)</title><rect x="67.2830%" y="133" width="0.4823%" height="15" fill="rgb(215,159,22)" fg:x="837" fg:w="6"/><text x="67.5330%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (122 samples, 9.81%)</title><rect x="58.0386%" y="229" width="9.8071%" height="15" fill="rgb(216,183,47)" fg:x="722" fg:w="122"/><text x="58.2886%" y="239.50">&lt;core::iter::a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (121 samples, 9.73%)</title><rect x="58.1190%" y="213" width="9.7267%" height="15" fill="rgb(229,195,25)" fg:x="723" fg:w="121"/><text x="58.3690%" y="223.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (120 samples, 9.65%)</title><rect x="58.1994%" y="197" width="9.6463%" height="15" fill="rgb(224,132,51)" fg:x="724" fg:w="120"/><text x="58.4494%" y="207.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (120 samples, 9.65%)</title><rect x="58.1994%" y="181" width="9.6463%" height="15" fill="rgb(240,63,7)" fg:x="724" fg:w="120"/><text x="58.4494%" y="191.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_bounded (1 samples, 0.08%)</title><rect x="67.7653%" y="165" width="0.0804%" height="15" fill="rgb(249,182,41)" fg:x="843" fg:w="1"/><text x="68.0153%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="67.8457%" y="229" width="0.0804%" height="15" fill="rgb(243,47,26)" fg:x="844" fg:w="1"/><text x="68.0957%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="68.0064%" y="213" width="0.1608%" height="15" fill="rgb(233,48,2)" fg:x="846" fg:w="2"/><text x="68.2564%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="68.1672%" y="213" width="0.0804%" height="15" fill="rgb(244,165,34)" fg:x="848" fg:w="1"/><text x="68.4172%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="68.1672%" y="197" width="0.0804%" height="15" fill="rgb(207,89,7)" fg:x="848" fg:w="1"/><text x="68.4172%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.40%)</title><rect x="68.2476%" y="213" width="0.4019%" height="15" fill="rgb(244,117,36)" fg:x="849" fg:w="5"/><text x="68.4976%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.5691%" y="197" width="0.0804%" height="15" fill="rgb(226,144,34)" fg:x="853" fg:w="1"/><text x="68.8191%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.5691%" y="181" width="0.0804%" height="15" fill="rgb(213,23,19)" fg:x="853" fg:w="1"/><text x="68.8191%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.5691%" y="165" width="0.0804%" height="15" fill="rgb(217,75,12)" fg:x="853" fg:w="1"/><text x="68.8191%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="68.6495%" y="213" width="0.1608%" height="15" fill="rgb(224,159,17)" fg:x="854" fg:w="2"/><text x="68.8995%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.7299%" y="197" width="0.0804%" height="15" fill="rgb(217,118,1)" fg:x="855" fg:w="1"/><text x="68.9799%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="68.8103%" y="213" width="0.0804%" height="15" fill="rgb(232,180,48)" fg:x="856" fg:w="1"/><text x="69.0603%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (176 samples, 14.15%)</title><rect x="54.8232%" y="261" width="14.1479%" height="15" fill="rgb(230,27,33)" fg:x="682" fg:w="176"/><text x="55.0732%" y="271.50">regex_automata::meta:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (136 samples, 10.93%)</title><rect x="58.0386%" y="245" width="10.9325%" height="15" fill="rgb(205,31,21)" fg:x="722" fg:w="136"/><text x="58.2886%" y="255.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.05%)</title><rect x="67.9260%" y="229" width="1.0450%" height="15" fill="rgb(253,59,4)" fg:x="845" fg:w="13"/><text x="68.1760%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="68.8907%" y="213" width="0.0804%" height="15" fill="rgb(224,201,9)" fg:x="857" fg:w="1"/><text x="69.1407%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="69.1318%" y="213" width="0.0804%" height="15" fill="rgb(229,206,30)" fg:x="860" fg:w="1"/><text x="69.3818%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="69.1318%" y="197" width="0.0804%" height="15" fill="rgb(212,67,47)" fg:x="860" fg:w="1"/><text x="69.3818%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="69.1318%" y="181" width="0.0804%" height="15" fill="rgb(211,96,50)" fg:x="860" fg:w="1"/><text x="69.3818%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="69.1318%" y="229" width="0.1608%" height="15" fill="rgb(252,114,18)" fg:x="860" fg:w="2"/><text x="69.3818%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="69.2122%" y="213" width="0.0804%" height="15" fill="rgb(223,58,37)" fg:x="861" fg:w="1"/><text x="69.4622%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="69.2122%" y="197" width="0.0804%" height="15" fill="rgb(237,70,4)" fg:x="861" fg:w="1"/><text x="69.4622%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.2122%" y="181" width="0.0804%" height="15" fill="rgb(244,85,46)" fg:x="861" fg:w="1"/><text x="69.4622%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.2122%" y="165" width="0.0804%" height="15" fill="rgb(223,39,52)" fg:x="861" fg:w="1"/><text x="69.4622%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="69.2926%" y="229" width="0.1608%" height="15" fill="rgb(218,200,14)" fg:x="862" fg:w="2"/><text x="69.5426%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (2 samples, 0.16%)</title><rect x="69.2926%" y="213" width="0.1608%" height="15" fill="rgb(208,171,16)" fg:x="862" fg:w="2"/><text x="69.5426%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="68.9711%" y="261" width="0.5627%" height="15" fill="rgb(234,200,18)" fg:x="858" fg:w="7"/><text x="69.2211%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="68.9711%" y="245" width="0.5627%" height="15" fill="rgb(228,45,11)" fg:x="858" fg:w="7"/><text x="69.2211%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="69.4534%" y="229" width="0.0804%" height="15" fill="rgb(237,182,11)" fg:x="864" fg:w="1"/><text x="69.7034%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="69.6141%" y="213" width="0.0804%" height="15" fill="rgb(241,175,49)" fg:x="866" fg:w="1"/><text x="69.8641%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="69.6141%" y="197" width="0.0804%" height="15" fill="rgb(247,38,35)" fg:x="866" fg:w="1"/><text x="69.8641%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="69.6141%" y="229" width="0.2412%" height="15" fill="rgb(228,39,49)" fg:x="866" fg:w="3"/><text x="69.8641%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (2 samples, 0.16%)</title><rect x="69.6945%" y="213" width="0.1608%" height="15" fill="rgb(226,101,26)" fg:x="867" fg:w="2"/><text x="69.9445%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="69.7749%" y="197" width="0.0804%" height="15" fill="rgb(206,141,19)" fg:x="868" fg:w="1"/><text x="70.0249%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="69.7749%" y="181" width="0.0804%" height="15" fill="rgb(211,200,13)" fg:x="868" fg:w="1"/><text x="70.0249%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="69.8553%" y="213" width="0.0804%" height="15" fill="rgb(241,121,6)" fg:x="869" fg:w="1"/><text x="70.1053%" y="223.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="69.9357%" y="213" width="0.0804%" height="15" fill="rgb(234,221,29)" fg:x="870" fg:w="1"/><text x="70.1857%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.9357%" y="197" width="0.0804%" height="15" fill="rgb(229,136,5)" fg:x="870" fg:w="1"/><text x="70.1857%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (195 samples, 15.68%)</title><rect x="54.4212%" y="309" width="15.6752%" height="15" fill="rgb(238,36,11)" fg:x="677" fg:w="195"/><text x="54.6712%" y="319.50">&lt;regex::regex::string::R..</text></g><g><title>regex::builders::Builder::build_one_string (195 samples, 15.68%)</title><rect x="54.4212%" y="293" width="15.6752%" height="15" fill="rgb(251,55,41)" fg:x="677" fg:w="195"/><text x="54.6712%" y="303.50">regex::builders::Builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (195 samples, 15.68%)</title><rect x="54.4212%" y="277" width="15.6752%" height="15" fill="rgb(242,34,40)" fg:x="677" fg:w="195"/><text x="54.6712%" y="287.50">regex_automata::meta::re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="69.5338%" y="261" width="0.5627%" height="15" fill="rgb(215,42,17)" fg:x="865" fg:w="7"/><text x="69.7838%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="69.5338%" y="245" width="0.5627%" height="15" fill="rgb(207,44,46)" fg:x="865" fg:w="7"/><text x="69.7838%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="69.8553%" y="229" width="0.2412%" height="15" fill="rgb(211,206,28)" fg:x="869" fg:w="3"/><text x="70.1053%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::HirFrame::unwrap_expr (1 samples, 0.08%)</title><rect x="70.0161%" y="213" width="0.0804%" height="15" fill="rgb(237,167,16)" fg:x="871" fg:w="1"/><text x="70.2661%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;str&gt;&gt; (1 samples, 0.08%)</title><rect x="70.0965%" y="309" width="0.0804%" height="15" fill="rgb(233,66,6)" fg:x="872" fg:w="1"/><text x="70.3465%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="70.1768%" y="277" width="0.1608%" height="15" fill="rgb(246,123,29)" fg:x="873" fg:w="2"/><text x="70.4268%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="70.1768%" y="261" width="0.1608%" height="15" fill="rgb(209,62,40)" fg:x="873" fg:w="2"/><text x="70.4268%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="70.1768%" y="245" width="0.1608%" height="15" fill="rgb(218,4,25)" fg:x="873" fg:w="2"/><text x="70.4268%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="70.3376%" y="261" width="0.0804%" height="15" fill="rgb(253,91,49)" fg:x="875" fg:w="1"/><text x="70.5876%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.3376%" y="245" width="0.0804%" height="15" fill="rgb(228,155,29)" fg:x="875" fg:w="1"/><text x="70.5876%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="70.1768%" y="309" width="0.3215%" height="15" fill="rgb(243,57,37)" fg:x="873" fg:w="4"/><text x="70.4268%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="70.1768%" y="293" width="0.3215%" height="15" fill="rgb(244,167,17)" fg:x="873" fg:w="4"/><text x="70.4268%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="70.3376%" y="277" width="0.1608%" height="15" fill="rgb(207,181,38)" fg:x="875" fg:w="2"/><text x="70.5876%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="70.4180%" y="261" width="0.0804%" height="15" fill="rgb(211,8,23)" fg:x="876" fg:w="1"/><text x="70.6680%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.4180%" y="245" width="0.0804%" height="15" fill="rgb(235,11,44)" fg:x="876" fg:w="1"/><text x="70.6680%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="70.4984%" y="293" width="0.1608%" height="15" fill="rgb(248,18,52)" fg:x="877" fg:w="2"/><text x="70.7484%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="70.4984%" y="277" width="0.1608%" height="15" fill="rgb(208,4,7)" fg:x="877" fg:w="2"/><text x="70.7484%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="70.5788%" y="261" width="0.0804%" height="15" fill="rgb(240,17,39)" fg:x="878" fg:w="1"/><text x="70.8288%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="70.5788%" y="245" width="0.0804%" height="15" fill="rgb(207,170,3)" fg:x="878" fg:w="1"/><text x="70.8288%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.6592%" y="245" width="0.0804%" height="15" fill="rgb(236,100,52)" fg:x="879" fg:w="1"/><text x="70.9092%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.7395%" y="229" width="0.0804%" height="15" fill="rgb(246,78,51)" fg:x="880" fg:w="1"/><text x="70.9895%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="71.0611%" y="213" width="0.3215%" height="15" fill="rgb(211,17,15)" fg:x="884" fg:w="4"/><text x="71.3111%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="71.1415%" y="197" width="0.2412%" height="15" fill="rgb(209,59,46)" fg:x="885" fg:w="3"/><text x="71.3915%" y="207.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="71.1415%" y="181" width="0.2412%" height="15" fill="rgb(210,92,25)" fg:x="885" fg:w="3"/><text x="71.3915%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (447 samples, 35.93%)</title><rect x="35.6913%" y="405" width="35.9325%" height="15" fill="rgb(238,174,52)" fg:x="444" fg:w="447"/><text x="35.9413%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (425 samples, 34.16%)</title><rect x="37.4598%" y="389" width="34.1640%" height="15" fill="rgb(230,73,7)" fg:x="466" fg:w="425"/><text x="37.7098%" y="399.50">plugins_core::looking::model::Unqualified::qualify</text></g><g><title>indefinite::indefinite (425 samples, 34.16%)</title><rect x="37.4598%" y="373" width="34.1640%" height="15" fill="rgb(243,124,40)" fg:x="466" fg:w="425"/><text x="37.7098%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (425 samples, 34.16%)</title><rect x="37.4598%" y="357" width="34.1640%" height="15" fill="rgb(244,170,11)" fg:x="466" fg:w="425"/><text x="37.7098%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (425 samples, 34.16%)</title><rect x="37.4598%" y="341" width="34.1640%" height="15" fill="rgb(207,114,54)" fg:x="466" fg:w="425"/><text x="37.7098%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::number::Number::check (214 samples, 17.20%)</title><rect x="54.4212%" y="325" width="17.2026%" height="15" fill="rgb(205,42,20)" fg:x="677" fg:w="214"/><text x="54.6712%" y="335.50">indefinite::rules::number::..</text></g><g><title>regex::regex::string::Regex::is_match_at (14 samples, 1.13%)</title><rect x="70.4984%" y="309" width="1.1254%" height="15" fill="rgb(230,30,28)" fg:x="877" fg:w="14"/><text x="70.7484%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.96%)</title><rect x="70.6592%" y="293" width="0.9646%" height="15" fill="rgb(205,73,54)" fg:x="879" fg:w="12"/><text x="70.9092%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.96%)</title><rect x="70.6592%" y="277" width="0.9646%" height="15" fill="rgb(254,227,23)" fg:x="879" fg:w="12"/><text x="70.9092%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.96%)</title><rect x="70.6592%" y="261" width="0.9646%" height="15" fill="rgb(228,202,34)" fg:x="879" fg:w="12"/><text x="70.9092%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (11 samples, 0.88%)</title><rect x="70.7395%" y="245" width="0.8842%" height="15" fill="rgb(222,225,37)" fg:x="880" fg:w="11"/><text x="70.9895%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.80%)</title><rect x="70.8199%" y="229" width="0.8039%" height="15" fill="rgb(221,14,54)" fg:x="881" fg:w="10"/><text x="71.0699%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="71.3826%" y="213" width="0.2412%" height="15" fill="rgb(254,102,2)" fg:x="888" fg:w="3"/><text x="71.6326%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.6238%" y="341" width="0.0804%" height="15" fill="rgb(232,104,17)" fg:x="891" fg:w="1"/><text x="71.8738%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.6238%" y="389" width="0.1608%" height="15" fill="rgb(250,220,14)" fg:x="891" fg:w="2"/><text x="71.8738%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.6238%" y="373" width="0.1608%" height="15" fill="rgb(241,158,9)" fg:x="891" fg:w="2"/><text x="71.8738%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.6238%" y="357" width="0.1608%" height="15" fill="rgb(246,9,43)" fg:x="891" fg:w="2"/><text x="71.8738%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7042%" y="341" width="0.0804%" height="15" fill="rgb(206,73,33)" fg:x="892" fg:w="1"/><text x="71.9542%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7042%" y="325" width="0.0804%" height="15" fill="rgb(222,79,8)" fg:x="892" fg:w="1"/><text x="71.9542%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.7042%" y="309" width="0.0804%" height="15" fill="rgb(234,8,54)" fg:x="892" fg:w="1"/><text x="71.9542%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.7042%" y="293" width="0.0804%" height="15" fill="rgb(209,134,38)" fg:x="892" fg:w="1"/><text x="71.9542%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.7042%" y="277" width="0.0804%" height="15" fill="rgb(230,127,29)" fg:x="892" fg:w="1"/><text x="71.9542%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.7042%" y="261" width="0.0804%" height="15" fill="rgb(242,44,41)" fg:x="892" fg:w="1"/><text x="71.9542%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.7042%" y="245" width="0.0804%" height="15" fill="rgb(222,56,43)" fg:x="892" fg:w="1"/><text x="71.9542%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.7042%" y="229" width="0.0804%" height="15" fill="rgb(238,39,47)" fg:x="892" fg:w="1"/><text x="71.9542%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.7042%" y="213" width="0.0804%" height="15" fill="rgb(226,79,43)" fg:x="892" fg:w="1"/><text x="71.9542%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.7042%" y="197" width="0.0804%" height="15" fill="rgb(242,105,53)" fg:x="892" fg:w="1"/><text x="71.9542%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.7042%" y="181" width="0.0804%" height="15" fill="rgb(251,132,46)" fg:x="892" fg:w="1"/><text x="71.9542%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7042%" y="165" width="0.0804%" height="15" fill="rgb(231,77,14)" fg:x="892" fg:w="1"/><text x="71.9542%" y="175.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (2 samples, 0.16%)</title><rect x="71.7846%" y="389" width="0.1608%" height="15" fill="rgb(240,135,9)" fg:x="893" fg:w="2"/><text x="72.0346%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.9453%" y="357" width="0.0804%" height="15" fill="rgb(248,109,14)" fg:x="895" fg:w="1"/><text x="72.1953%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="72.0257%" y="357" width="0.0804%" height="15" fill="rgb(227,146,52)" fg:x="896" fg:w="1"/><text x="72.2757%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="72.0257%" y="341" width="0.0804%" height="15" fill="rgb(232,54,3)" fg:x="896" fg:w="1"/><text x="72.2757%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="72.0257%" y="325" width="0.0804%" height="15" fill="rgb(229,201,43)" fg:x="896" fg:w="1"/><text x="72.2757%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.0257%" y="309" width="0.0804%" height="15" fill="rgb(252,161,33)" fg:x="896" fg:w="1"/><text x="72.2757%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.56%)</title><rect x="71.6238%" y="405" width="0.5627%" height="15" fill="rgb(226,146,40)" fg:x="891" fg:w="7"/><text x="71.8738%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="71.9453%" y="389" width="0.2412%" height="15" fill="rgb(219,47,25)" fg:x="895" fg:w="3"/><text x="72.1953%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="71.9453%" y="373" width="0.2412%" height="15" fill="rgb(250,135,13)" fg:x="895" fg:w="3"/><text x="72.1953%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u32 (1 samples, 0.08%)</title><rect x="72.1061%" y="357" width="0.0804%" height="15" fill="rgb(219,229,18)" fg:x="897" fg:w="1"/><text x="72.3561%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (460 samples, 36.98%)</title><rect x="35.2894%" y="565" width="36.9775%" height="15" fill="rgb(217,152,27)" fg:x="439" fg:w="460"/><text x="35.5394%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (460 samples, 36.98%)</title><rect x="35.2894%" y="549" width="36.9775%" height="15" fill="rgb(225,71,47)" fg:x="439" fg:w="460"/><text x="35.5394%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::M..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (460 samples, 36.98%)</title><rect x="35.2894%" y="533" width="36.9775%" height="15" fill="rgb(220,139,14)" fg:x="439" fg:w="460"/><text x="35.5394%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (460 samples, 36.98%)</title><rect x="35.2894%" y="517" width="36.9775%" height="15" fill="rgb(247,54,32)" fg:x="439" fg:w="460"/><text x="35.5394%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (460 samples, 36.98%)</title><rect x="35.2894%" y="501" width="36.9775%" height="15" fill="rgb(252,131,39)" fg:x="439" fg:w="460"/><text x="35.5394%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (459 samples, 36.90%)</title><rect x="35.3698%" y="485" width="36.8971%" height="15" fill="rgb(210,108,39)" fg:x="440" fg:w="459"/><text x="35.6198%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (459 samples, 36.90%)</title><rect x="35.3698%" y="469" width="36.8971%" height="15" fill="rgb(205,23,29)" fg:x="440" fg:w="459"/><text x="35.6198%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (459 samples, 36.90%)</title><rect x="35.3698%" y="453" width="36.8971%" height="15" fill="rgb(246,139,46)" fg:x="440" fg:w="459"/><text x="35.6198%" y="463.50">&lt;engine::session::state::State as kernel::actions::Performer..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (458 samples, 36.82%)</title><rect x="35.4502%" y="437" width="36.8167%" height="15" fill="rgb(250,81,26)" fg:x="441" fg:w="458"/><text x="35.7002%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kernel::actio..</text></g><g><title>plugins_core::looking::model::new_area_observation (456 samples, 36.66%)</title><rect x="35.6109%" y="421" width="36.6559%" height="15" fill="rgb(214,104,7)" fg:x="443" fg:w="456"/><text x="35.8609%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="72.1865%" y="405" width="0.0804%" height="15" fill="rgb(233,189,8)" fg:x="898" fg:w="1"/><text x="72.4365%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.1865%" y="389" width="0.0804%" height="15" fill="rgb(228,141,17)" fg:x="898" fg:w="1"/><text x="72.4365%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.1865%" y="373" width="0.0804%" height="15" fill="rgb(247,157,1)" fg:x="898" fg:w="1"/><text x="72.4365%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.2669%" y="549" width="0.0804%" height="15" fill="rgb(249,225,5)" fg:x="899" fg:w="1"/><text x="72.5169%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="72.3473%" y="549" width="0.0804%" height="15" fill="rgb(242,55,13)" fg:x="900" fg:w="1"/><text x="72.5973%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.3473%" y="533" width="0.0804%" height="15" fill="rgb(230,49,50)" fg:x="900" fg:w="1"/><text x="72.5973%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.3473%" y="517" width="0.0804%" height="15" fill="rgb(241,111,38)" fg:x="900" fg:w="1"/><text x="72.5973%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.3473%" y="501" width="0.0804%" height="15" fill="rgb(252,155,4)" fg:x="900" fg:w="1"/><text x="72.5973%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.3473%" y="485" width="0.0804%" height="15" fill="rgb(212,69,32)" fg:x="900" fg:w="1"/><text x="72.5973%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.3473%" y="469" width="0.0804%" height="15" fill="rgb(243,107,47)" fg:x="900" fg:w="1"/><text x="72.5973%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.3473%" y="453" width="0.0804%" height="15" fill="rgb(247,130,12)" fg:x="900" fg:w="1"/><text x="72.5973%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.3473%" y="437" width="0.0804%" height="15" fill="rgb(233,74,16)" fg:x="900" fg:w="1"/><text x="72.5973%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.3473%" y="421" width="0.0804%" height="15" fill="rgb(208,58,18)" fg:x="900" fg:w="1"/><text x="72.5973%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.3473%" y="405" width="0.0804%" height="15" fill="rgb(242,225,1)" fg:x="900" fg:w="1"/><text x="72.5973%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.3473%" y="389" width="0.0804%" height="15" fill="rgb(249,39,40)" fg:x="900" fg:w="1"/><text x="72.5973%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.3473%" y="373" width="0.0804%" height="15" fill="rgb(207,72,44)" fg:x="900" fg:w="1"/><text x="72.5973%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.08%)</title><rect x="72.4277%" y="533" width="0.0804%" height="15" fill="rgb(215,193,12)" fg:x="901" fg:w="1"/><text x="72.6777%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.5884%" y="501" width="0.0804%" height="15" fill="rgb(248,41,39)" fg:x="903" fg:w="1"/><text x="72.8384%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.5884%" y="485" width="0.0804%" height="15" fill="rgb(253,85,4)" fg:x="903" fg:w="1"/><text x="72.8384%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="72.5884%" y="517" width="0.1608%" height="15" fill="rgb(243,70,31)" fg:x="903" fg:w="2"/><text x="72.8384%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.6688%" y="501" width="0.0804%" height="15" fill="rgb(253,195,26)" fg:x="904" fg:w="1"/><text x="72.9188%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6688%" y="485" width="0.0804%" height="15" fill="rgb(243,42,11)" fg:x="904" fg:w="1"/><text x="72.9188%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="72.6688%" y="469" width="0.0804%" height="15" fill="rgb(239,66,17)" fg:x="904" fg:w="1"/><text x="72.9188%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="72.6688%" y="453" width="0.0804%" height="15" fill="rgb(217,132,21)" fg:x="904" fg:w="1"/><text x="72.9188%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="72.6688%" y="437" width="0.0804%" height="15" fill="rgb(252,202,21)" fg:x="904" fg:w="1"/><text x="72.9188%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.6688%" y="421" width="0.0804%" height="15" fill="rgb(233,98,36)" fg:x="904" fg:w="1"/><text x="72.9188%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6688%" y="405" width="0.0804%" height="15" fill="rgb(216,153,54)" fg:x="904" fg:w="1"/><text x="72.9188%" y="415.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="72.7492%" y="469" width="0.0804%" height="15" fill="rgb(250,99,7)" fg:x="905" fg:w="1"/><text x="72.9992%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.7492%" y="453" width="0.0804%" height="15" fill="rgb(207,56,50)" fg:x="905" fg:w="1"/><text x="72.9992%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.7492%" y="437" width="0.0804%" height="15" fill="rgb(244,61,34)" fg:x="905" fg:w="1"/><text x="72.9992%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.7492%" y="421" width="0.0804%" height="15" fill="rgb(241,50,38)" fg:x="905" fg:w="1"/><text x="72.9992%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.7492%" y="405" width="0.0804%" height="15" fill="rgb(212,166,30)" fg:x="905" fg:w="1"/><text x="72.9992%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.7492%" y="389" width="0.0804%" height="15" fill="rgb(249,127,32)" fg:x="905" fg:w="1"/><text x="72.9992%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.7492%" y="373" width="0.0804%" height="15" fill="rgb(209,103,0)" fg:x="905" fg:w="1"/><text x="72.9992%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.7492%" y="357" width="0.0804%" height="15" fill="rgb(238,209,51)" fg:x="905" fg:w="1"/><text x="72.9992%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.7492%" y="341" width="0.0804%" height="15" fill="rgb(237,56,23)" fg:x="905" fg:w="1"/><text x="72.9992%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.7492%" y="325" width="0.0804%" height="15" fill="rgb(215,153,46)" fg:x="905" fg:w="1"/><text x="72.9992%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.7492%" y="309" width="0.0804%" height="15" fill="rgb(224,49,31)" fg:x="905" fg:w="1"/><text x="72.9992%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.7492%" y="293" width="0.0804%" height="15" fill="rgb(250,18,42)" fg:x="905" fg:w="1"/><text x="72.9992%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7492%" y="277" width="0.0804%" height="15" fill="rgb(215,176,39)" fg:x="905" fg:w="1"/><text x="72.9992%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="72.8296%" y="421" width="0.3215%" height="15" fill="rgb(223,77,29)" fg:x="906" fg:w="4"/><text x="73.0796%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="72.9100%" y="405" width="0.2412%" height="15" fill="rgb(234,94,52)" fg:x="907" fg:w="3"/><text x="73.1600%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="72.9904%" y="389" width="0.1608%" height="15" fill="rgb(220,154,50)" fg:x="908" fg:w="2"/><text x="73.2404%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="72.9904%" y="373" width="0.1608%" height="15" fill="rgb(212,11,10)" fg:x="908" fg:w="2"/><text x="73.2404%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="72.9904%" y="357" width="0.1608%" height="15" fill="rgb(205,166,19)" fg:x="908" fg:w="2"/><text x="73.2404%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="72.9904%" y="341" width="0.1608%" height="15" fill="rgb(244,198,16)" fg:x="908" fg:w="2"/><text x="73.2404%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="72.9904%" y="325" width="0.1608%" height="15" fill="rgb(219,69,12)" fg:x="908" fg:w="2"/><text x="73.2404%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="72.9904%" y="309" width="0.1608%" height="15" fill="rgb(245,30,7)" fg:x="908" fg:w="2"/><text x="73.2404%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="72.9904%" y="293" width="0.1608%" height="15" fill="rgb(218,221,48)" fg:x="908" fg:w="2"/><text x="73.2404%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="72.9904%" y="277" width="0.1608%" height="15" fill="rgb(216,66,15)" fg:x="908" fg:w="2"/><text x="73.2404%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="72.9904%" y="261" width="0.1608%" height="15" fill="rgb(226,122,50)" fg:x="908" fg:w="2"/><text x="73.2404%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="72.9904%" y="245" width="0.1608%" height="15" fill="rgb(239,156,16)" fg:x="908" fg:w="2"/><text x="73.2404%" y="255.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="72.9904%" y="229" width="0.1608%" height="15" fill="rgb(224,27,38)" fg:x="908" fg:w="2"/><text x="73.2404%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="72.9904%" y="213" width="0.1608%" height="15" fill="rgb(224,39,27)" fg:x="908" fg:w="2"/><text x="73.2404%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.40%)</title><rect x="72.8296%" y="453" width="0.4019%" height="15" fill="rgb(215,92,29)" fg:x="906" fg:w="5"/><text x="73.0796%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.40%)</title><rect x="72.8296%" y="437" width="0.4019%" height="15" fill="rgb(207,159,16)" fg:x="906" fg:w="5"/><text x="73.0796%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.1511%" y="421" width="0.0804%" height="15" fill="rgb(238,163,47)" fg:x="910" fg:w="1"/><text x="73.4011%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.1511%" y="405" width="0.0804%" height="15" fill="rgb(219,91,49)" fg:x="910" fg:w="1"/><text x="73.4011%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.1511%" y="389" width="0.0804%" height="15" fill="rgb(227,167,31)" fg:x="910" fg:w="1"/><text x="73.4011%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.1511%" y="373" width="0.0804%" height="15" fill="rgb(234,80,54)" fg:x="910" fg:w="1"/><text x="73.4011%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.1511%" y="357" width="0.0804%" height="15" fill="rgb(212,114,2)" fg:x="910" fg:w="1"/><text x="73.4011%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.1511%" y="341" width="0.0804%" height="15" fill="rgb(234,50,24)" fg:x="910" fg:w="1"/><text x="73.4011%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.1511%" y="325" width="0.0804%" height="15" fill="rgb(221,68,8)" fg:x="910" fg:w="1"/><text x="73.4011%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.1511%" y="309" width="0.0804%" height="15" fill="rgb(254,180,31)" fg:x="910" fg:w="1"/><text x="73.4011%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.1511%" y="293" width="0.0804%" height="15" fill="rgb(247,130,50)" fg:x="910" fg:w="1"/><text x="73.4011%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.1511%" y="277" width="0.0804%" height="15" fill="rgb(211,109,4)" fg:x="910" fg:w="1"/><text x="73.4011%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.1511%" y="261" width="0.0804%" height="15" fill="rgb(238,50,21)" fg:x="910" fg:w="1"/><text x="73.4011%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.1511%" y="245" width="0.0804%" height="15" fill="rgb(225,57,45)" fg:x="910" fg:w="1"/><text x="73.4011%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.2315%" y="245" width="0.0804%" height="15" fill="rgb(209,196,50)" fg:x="911" fg:w="1"/><text x="73.4815%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.2315%" y="357" width="0.1608%" height="15" fill="rgb(242,140,13)" fg:x="911" fg:w="2"/><text x="73.4815%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.2315%" y="341" width="0.1608%" height="15" fill="rgb(217,111,7)" fg:x="911" fg:w="2"/><text x="73.4815%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.2315%" y="325" width="0.1608%" height="15" fill="rgb(253,193,51)" fg:x="911" fg:w="2"/><text x="73.4815%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.2315%" y="309" width="0.1608%" height="15" fill="rgb(252,70,29)" fg:x="911" fg:w="2"/><text x="73.4815%" y="319.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="73.2315%" y="293" width="0.1608%" height="15" fill="rgb(232,127,12)" fg:x="911" fg:w="2"/><text x="73.4815%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.2315%" y="277" width="0.1608%" height="15" fill="rgb(211,180,21)" fg:x="911" fg:w="2"/><text x="73.4815%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.2315%" y="261" width="0.1608%" height="15" fill="rgb(229,72,13)" fg:x="911" fg:w="2"/><text x="73.4815%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.3119%" y="245" width="0.0804%" height="15" fill="rgb(240,211,49)" fg:x="912" fg:w="1"/><text x="73.5619%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="73.2315%" y="405" width="0.2412%" height="15" fill="rgb(219,149,40)" fg:x="911" fg:w="3"/><text x="73.4815%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="73.2315%" y="389" width="0.2412%" height="15" fill="rgb(210,127,46)" fg:x="911" fg:w="3"/><text x="73.4815%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="73.2315%" y="373" width="0.2412%" height="15" fill="rgb(220,106,7)" fg:x="911" fg:w="3"/><text x="73.4815%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="73.3923%" y="357" width="0.0804%" height="15" fill="rgb(249,31,22)" fg:x="913" fg:w="1"/><text x="73.6423%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.3923%" y="341" width="0.0804%" height="15" fill="rgb(253,1,49)" fg:x="913" fg:w="1"/><text x="73.6423%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.3923%" y="325" width="0.0804%" height="15" fill="rgb(227,144,33)" fg:x="913" fg:w="1"/><text x="73.6423%" y="335.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="73.2315%" y="453" width="0.3215%" height="15" fill="rgb(249,163,44)" fg:x="911" fg:w="4"/><text x="73.4815%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="73.2315%" y="437" width="0.3215%" height="15" fill="rgb(234,15,39)" fg:x="911" fg:w="4"/><text x="73.4815%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="73.2315%" y="421" width="0.3215%" height="15" fill="rgb(207,66,16)" fg:x="911" fg:w="4"/><text x="73.4815%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.4727%" y="405" width="0.0804%" height="15" fill="rgb(233,112,24)" fg:x="914" fg:w="1"/><text x="73.7227%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.4727%" y="389" width="0.0804%" height="15" fill="rgb(230,90,22)" fg:x="914" fg:w="1"/><text x="73.7227%" y="399.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="73.5531%" y="453" width="0.0804%" height="15" fill="rgb(229,61,13)" fg:x="915" fg:w="1"/><text x="73.8031%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.6334%" y="325" width="0.0804%" height="15" fill="rgb(225,57,24)" fg:x="916" fg:w="1"/><text x="73.8834%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.6334%" y="309" width="0.0804%" height="15" fill="rgb(208,169,48)" fg:x="916" fg:w="1"/><text x="73.8834%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.6334%" y="293" width="0.0804%" height="15" fill="rgb(244,218,51)" fg:x="916" fg:w="1"/><text x="73.8834%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.6334%" y="277" width="0.0804%" height="15" fill="rgb(214,148,10)" fg:x="916" fg:w="1"/><text x="73.8834%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.6334%" y="357" width="0.1608%" height="15" fill="rgb(225,174,27)" fg:x="916" fg:w="2"/><text x="73.8834%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.6334%" y="341" width="0.1608%" height="15" fill="rgb(230,96,26)" fg:x="916" fg:w="2"/><text x="73.8834%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.7138%" y="325" width="0.0804%" height="15" fill="rgb(232,10,30)" fg:x="917" fg:w="1"/><text x="73.9638%" y="335.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="73.7138%" y="309" width="0.0804%" height="15" fill="rgb(222,8,50)" fg:x="917" fg:w="1"/><text x="73.9638%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="73.6334%" y="389" width="0.3215%" height="15" fill="rgb(213,81,27)" fg:x="916" fg:w="4"/><text x="73.8834%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="73.6334%" y="373" width="0.3215%" height="15" fill="rgb(245,50,10)" fg:x="916" fg:w="4"/><text x="73.8834%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="73.7942%" y="357" width="0.1608%" height="15" fill="rgb(216,100,18)" fg:x="918" fg:w="2"/><text x="74.0442%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="73.9550%" y="373" width="0.0804%" height="15" fill="rgb(236,147,54)" fg:x="920" fg:w="1"/><text x="74.2050%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (17 samples, 1.37%)</title><rect x="72.7492%" y="517" width="1.3666%" height="15" fill="rgb(205,143,26)" fg:x="905" fg:w="17"/><text x="72.9992%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (17 samples, 1.37%)</title><rect x="72.7492%" y="501" width="1.3666%" height="15" fill="rgb(236,26,9)" fg:x="905" fg:w="17"/><text x="72.9992%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (17 samples, 1.37%)</title><rect x="72.7492%" y="485" width="1.3666%" height="15" fill="rgb(221,165,53)" fg:x="905" fg:w="17"/><text x="72.9992%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (16 samples, 1.29%)</title><rect x="72.8296%" y="469" width="1.2862%" height="15" fill="rgb(214,110,17)" fg:x="906" fg:w="16"/><text x="73.0796%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="73.6334%" y="453" width="0.4823%" height="15" fill="rgb(237,197,12)" fg:x="916" fg:w="6"/><text x="73.8834%" y="463.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="73.6334%" y="437" width="0.4823%" height="15" fill="rgb(205,84,17)" fg:x="916" fg:w="6"/><text x="73.8834%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="73.6334%" y="421" width="0.4823%" height="15" fill="rgb(237,18,45)" fg:x="916" fg:w="6"/><text x="73.8834%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="73.6334%" y="405" width="0.4823%" height="15" fill="rgb(221,87,14)" fg:x="916" fg:w="6"/><text x="73.8834%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="73.9550%" y="389" width="0.1608%" height="15" fill="rgb(238,186,15)" fg:x="920" fg:w="2"/><text x="74.2050%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.0354%" y="373" width="0.0804%" height="15" fill="rgb(208,115,11)" fg:x="921" fg:w="1"/><text x="74.2854%" y="383.50"></text></g><g><title>plugins_core::tools::contained_by (21 samples, 1.69%)</title><rect x="72.5080%" y="533" width="1.6881%" height="15" fill="rgb(254,175,0)" fg:x="902" fg:w="21"/><text x="72.7580%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="74.1158%" y="517" width="0.0804%" height="15" fill="rgb(227,24,42)" fg:x="922" fg:w="1"/><text x="74.3658%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.1158%" y="501" width="0.0804%" height="15" fill="rgb(223,211,37)" fg:x="922" fg:w="1"/><text x="74.3658%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.1961%" y="453" width="0.1608%" height="15" fill="rgb(235,49,27)" fg:x="923" fg:w="2"/><text x="74.4461%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.1961%" y="437" width="0.1608%" height="15" fill="rgb(254,97,51)" fg:x="923" fg:w="2"/><text x="74.4461%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.2765%" y="421" width="0.0804%" height="15" fill="rgb(249,51,40)" fg:x="924" fg:w="1"/><text x="74.5265%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.2765%" y="405" width="0.0804%" height="15" fill="rgb(210,128,45)" fg:x="924" fg:w="1"/><text x="74.5265%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.2765%" y="389" width="0.0804%" height="15" fill="rgb(224,137,50)" fg:x="924" fg:w="1"/><text x="74.5265%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.2765%" y="373" width="0.0804%" height="15" fill="rgb(242,15,9)" fg:x="924" fg:w="1"/><text x="74.5265%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.2765%" y="357" width="0.0804%" height="15" fill="rgb(233,187,41)" fg:x="924" fg:w="1"/><text x="74.5265%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.2765%" y="341" width="0.0804%" height="15" fill="rgb(227,2,29)" fg:x="924" fg:w="1"/><text x="74.5265%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.2765%" y="325" width="0.0804%" height="15" fill="rgb(222,70,3)" fg:x="924" fg:w="1"/><text x="74.5265%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.2765%" y="309" width="0.0804%" height="15" fill="rgb(213,11,42)" fg:x="924" fg:w="1"/><text x="74.5265%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.2765%" y="293" width="0.0804%" height="15" fill="rgb(225,150,9)" fg:x="924" fg:w="1"/><text x="74.5265%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.2765%" y="277" width="0.0804%" height="15" fill="rgb(230,162,45)" fg:x="924" fg:w="1"/><text x="74.5265%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.2765%" y="261" width="0.0804%" height="15" fill="rgb(222,14,52)" fg:x="924" fg:w="1"/><text x="74.5265%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.2765%" y="245" width="0.0804%" height="15" fill="rgb(254,198,14)" fg:x="924" fg:w="1"/><text x="74.5265%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="74.1961%" y="501" width="0.2412%" height="15" fill="rgb(220,217,30)" fg:x="923" fg:w="3"/><text x="74.4461%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="74.1961%" y="485" width="0.2412%" height="15" fill="rgb(215,146,41)" fg:x="923" fg:w="3"/><text x="74.4461%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="74.1961%" y="469" width="0.2412%" height="15" fill="rgb(217,27,36)" fg:x="923" fg:w="3"/><text x="74.4461%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3569%" y="453" width="0.0804%" height="15" fill="rgb(219,218,39)" fg:x="925" fg:w="1"/><text x="74.6069%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3569%" y="437" width="0.0804%" height="15" fill="rgb(219,4,42)" fg:x="925" fg:w="1"/><text x="74.6069%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.3569%" y="421" width="0.0804%" height="15" fill="rgb(249,119,36)" fg:x="925" fg:w="1"/><text x="74.6069%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.3569%" y="405" width="0.0804%" height="15" fill="rgb(209,23,33)" fg:x="925" fg:w="1"/><text x="74.6069%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.3569%" y="389" width="0.0804%" height="15" fill="rgb(211,10,0)" fg:x="925" fg:w="1"/><text x="74.6069%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.3569%" y="373" width="0.0804%" height="15" fill="rgb(208,99,37)" fg:x="925" fg:w="1"/><text x="74.6069%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.3569%" y="357" width="0.0804%" height="15" fill="rgb(213,132,31)" fg:x="925" fg:w="1"/><text x="74.6069%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.3569%" y="341" width="0.0804%" height="15" fill="rgb(243,129,40)" fg:x="925" fg:w="1"/><text x="74.6069%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.3569%" y="325" width="0.0804%" height="15" fill="rgb(210,66,33)" fg:x="925" fg:w="1"/><text x="74.6069%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.3569%" y="309" width="0.0804%" height="15" fill="rgb(209,189,4)" fg:x="925" fg:w="1"/><text x="74.6069%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.3569%" y="293" width="0.0804%" height="15" fill="rgb(214,107,37)" fg:x="925" fg:w="1"/><text x="74.6069%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.3569%" y="277" width="0.0804%" height="15" fill="rgb(245,88,54)" fg:x="925" fg:w="1"/><text x="74.6069%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="74.4373%" y="501" width="0.0804%" height="15" fill="rgb(205,146,20)" fg:x="926" fg:w="1"/><text x="74.6873%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.4373%" y="485" width="0.0804%" height="15" fill="rgb(220,161,25)" fg:x="926" fg:w="1"/><text x="74.6873%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.5981%" y="469" width="0.0804%" height="15" fill="rgb(215,152,15)" fg:x="928" fg:w="1"/><text x="74.8481%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Acls&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.6785%" y="469" width="0.1608%" height="15" fill="rgb(233,192,44)" fg:x="929" fg:w="2"/><text x="74.9285%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.6785%" y="453" width="0.1608%" height="15" fill="rgb(240,170,46)" fg:x="929" fg:w="2"/><text x="74.9285%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (9 samples, 0.72%)</title><rect x="74.1961%" y="517" width="0.7235%" height="15" fill="rgb(207,104,33)" fg:x="923" fg:w="9"/><text x="74.4461%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="74.5177%" y="501" width="0.4019%" height="15" fill="rgb(219,21,39)" fg:x="927" fg:w="5"/><text x="74.7677%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="74.5981%" y="485" width="0.3215%" height="15" fill="rgb(214,133,29)" fg:x="928" fg:w="4"/><text x="74.8481%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="74.8392%" y="469" width="0.0804%" height="15" fill="rgb(226,93,6)" fg:x="931" fg:w="1"/><text x="75.0892%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="74.8392%" y="453" width="0.0804%" height="15" fill="rgb(252,222,34)" fg:x="931" fg:w="1"/><text x="75.0892%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="74.8392%" y="437" width="0.0804%" height="15" fill="rgb(252,92,48)" fg:x="931" fg:w="1"/><text x="75.0892%" y="447.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.8392%" y="421" width="0.0804%" height="15" fill="rgb(245,223,24)" fg:x="931" fg:w="1"/><text x="75.0892%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.8392%" y="405" width="0.0804%" height="15" fill="rgb(205,176,3)" fg:x="931" fg:w="1"/><text x="75.0892%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.8392%" y="389" width="0.0804%" height="15" fill="rgb(235,151,15)" fg:x="931" fg:w="1"/><text x="75.0892%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.8392%" y="373" width="0.0804%" height="15" fill="rgb(237,209,11)" fg:x="931" fg:w="1"/><text x="75.0892%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (32 samples, 2.57%)</title><rect x="72.4277%" y="549" width="2.5723%" height="15" fill="rgb(243,227,24)" fg:x="901" fg:w="32"/><text x="72.6777%" y="559.50">pl..</text></g><g><title>plugins_core::tools::occupied_by (10 samples, 0.80%)</title><rect x="74.1961%" y="533" width="0.8039%" height="15" fill="rgb(239,193,16)" fg:x="923" fg:w="10"/><text x="74.4461%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="74.9196%" y="517" width="0.0804%" height="15" fill="rgb(231,27,9)" fg:x="932" fg:w="1"/><text x="75.1696%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="74.9196%" y="501" width="0.0804%" height="15" fill="rgb(219,169,10)" fg:x="932" fg:w="1"/><text x="75.1696%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.9196%" y="485" width="0.0804%" height="15" fill="rgb(244,229,43)" fg:x="932" fg:w="1"/><text x="75.1696%" y="495.50"></text></g><g><title>engine::session::Session::captured (528 samples, 42.44%)</title><rect x="32.6367%" y="709" width="42.4437%" height="15" fill="rgb(254,38,20)" fg:x="406" fg:w="528"/><text x="32.8867%" y="719.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (522 samples, 41.96%)</title><rect x="33.1190%" y="693" width="41.9614%" height="15" fill="rgb(250,47,30)" fg:x="412" fg:w="522"/><text x="33.3690%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (518 samples, 41.64%)</title><rect x="33.4405%" y="677" width="41.6399%" height="15" fill="rgb(224,124,36)" fg:x="416" fg:w="518"/><text x="33.6905%" y="687.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (518 samples, 41.64%)</title><rect x="33.4405%" y="661" width="41.6399%" height="15" fill="rgb(246,68,51)" fg:x="416" fg:w="518"/><text x="33.6905%" y="671.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (518 samples, 41.64%)</title><rect x="33.4405%" y="645" width="41.6399%" height="15" fill="rgb(253,43,49)" fg:x="416" fg:w="518"/><text x="33.6905%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (518 samples, 41.64%)</title><rect x="33.4405%" y="629" width="41.6399%" height="15" fill="rgb(219,54,36)" fg:x="416" fg:w="518"/><text x="33.6905%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (518 samples, 41.64%)</title><rect x="33.4405%" y="613" width="41.6399%" height="15" fill="rgb(227,133,34)" fg:x="416" fg:w="518"/><text x="33.6905%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::m..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (497 samples, 39.95%)</title><rect x="35.1286%" y="597" width="39.9518%" height="15" fill="rgb(247,227,15)" fg:x="437" fg:w="497"/><text x="35.3786%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (497 samples, 39.95%)</title><rect x="35.1286%" y="581" width="39.9518%" height="15" fill="rgb(229,96,14)" fg:x="437" fg:w="497"/><text x="35.3786%" y="591.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (35 samples, 2.81%)</title><rect x="72.2669%" y="565" width="2.8135%" height="15" fill="rgb(220,79,17)" fg:x="899" fg:w="35"/><text x="72.5169%" y="575.50">pl..</text></g><g><title>plugins_rune::sources::load_sources_from_entity (1 samples, 0.08%)</title><rect x="75.0000%" y="549" width="0.0804%" height="15" fill="rgb(205,131,53)" fg:x="933" fg:w="1"/><text x="75.2500%" y="559.50"></text></g><g><title>plugins_rune::sources::get_script (1 samples, 0.08%)</title><rect x="75.0000%" y="533" width="0.0804%" height="15" fill="rgb(209,50,29)" fg:x="933" fg:w="1"/><text x="75.2500%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="75.0000%" y="517" width="0.0804%" height="15" fill="rgb(245,86,46)" fg:x="933" fg:w="1"/><text x="75.2500%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="75.0000%" y="501" width="0.0804%" height="15" fill="rgb(235,66,46)" fg:x="933" fg:w="1"/><text x="75.2500%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="75.0000%" y="485" width="0.0804%" height="15" fill="rgb(232,148,31)" fg:x="933" fg:w="1"/><text x="75.2500%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="75.0000%" y="469" width="0.0804%" height="15" fill="rgb(217,149,8)" fg:x="933" fg:w="1"/><text x="75.2500%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.0804%" y="661" width="0.0804%" height="15" fill="rgb(209,183,11)" fg:x="934" fg:w="1"/><text x="75.3304%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="75.1608%" y="629" width="0.0804%" height="15" fill="rgb(208,55,20)" fg:x="935" fg:w="1"/><text x="75.4108%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.2412%" y="613" width="0.0804%" height="15" fill="rgb(218,39,14)" fg:x="936" fg:w="1"/><text x="75.4912%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.2412%" y="597" width="0.0804%" height="15" fill="rgb(216,169,33)" fg:x="936" fg:w="1"/><text x="75.4912%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.2412%" y="581" width="0.0804%" height="15" fill="rgb(233,80,24)" fg:x="936" fg:w="1"/><text x="75.4912%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.2412%" y="565" width="0.0804%" height="15" fill="rgb(213,179,31)" fg:x="936" fg:w="1"/><text x="75.4912%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.2412%" y="549" width="0.0804%" height="15" fill="rgb(209,19,5)" fg:x="936" fg:w="1"/><text x="75.4912%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.2412%" y="533" width="0.0804%" height="15" fill="rgb(219,18,35)" fg:x="936" fg:w="1"/><text x="75.4912%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.2412%" y="517" width="0.0804%" height="15" fill="rgb(209,169,16)" fg:x="936" fg:w="1"/><text x="75.4912%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.2412%" y="501" width="0.0804%" height="15" fill="rgb(245,90,51)" fg:x="936" fg:w="1"/><text x="75.4912%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="75.2412%" y="485" width="0.0804%" height="15" fill="rgb(220,99,45)" fg:x="936" fg:w="1"/><text x="75.4912%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="75.2412%" y="469" width="0.0804%" height="15" fill="rgb(249,89,25)" fg:x="936" fg:w="1"/><text x="75.4912%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.4019%" y="565" width="0.0804%" height="15" fill="rgb(239,193,0)" fg:x="938" fg:w="1"/><text x="75.6519%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.4019%" y="549" width="0.0804%" height="15" fill="rgb(231,126,1)" fg:x="938" fg:w="1"/><text x="75.6519%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.5627%" y="469" width="0.0804%" height="15" fill="rgb(243,166,3)" fg:x="940" fg:w="1"/><text x="75.8127%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="75.5627%" y="453" width="0.0804%" height="15" fill="rgb(223,22,34)" fg:x="940" fg:w="1"/><text x="75.8127%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="75.4823%" y="517" width="0.2412%" height="15" fill="rgb(251,52,51)" fg:x="939" fg:w="3"/><text x="75.7323%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="75.4823%" y="501" width="0.2412%" height="15" fill="rgb(221,165,28)" fg:x="939" fg:w="3"/><text x="75.7323%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="75.5627%" y="485" width="0.1608%" height="15" fill="rgb(218,121,47)" fg:x="940" fg:w="2"/><text x="75.8127%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.6431%" y="469" width="0.0804%" height="15" fill="rgb(209,120,9)" fg:x="941" fg:w="1"/><text x="75.8931%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6431%" y="453" width="0.0804%" height="15" fill="rgb(236,68,12)" fg:x="941" fg:w="1"/><text x="75.8931%" y="463.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="75.7235%" y="405" width="0.0804%" height="15" fill="rgb(225,194,26)" fg:x="942" fg:w="1"/><text x="75.9735%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="75.7235%" y="389" width="0.0804%" height="15" fill="rgb(231,84,39)" fg:x="942" fg:w="1"/><text x="75.9735%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.7235%" y="373" width="0.0804%" height="15" fill="rgb(210,11,45)" fg:x="942" fg:w="1"/><text x="75.9735%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.7235%" y="357" width="0.0804%" height="15" fill="rgb(224,54,52)" fg:x="942" fg:w="1"/><text x="75.9735%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.7235%" y="341" width="0.0804%" height="15" fill="rgb(238,102,14)" fg:x="942" fg:w="1"/><text x="75.9735%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.7235%" y="325" width="0.0804%" height="15" fill="rgb(243,160,52)" fg:x="942" fg:w="1"/><text x="75.9735%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.7235%" y="309" width="0.0804%" height="15" fill="rgb(216,114,19)" fg:x="942" fg:w="1"/><text x="75.9735%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.7235%" y="293" width="0.0804%" height="15" fill="rgb(244,166,37)" fg:x="942" fg:w="1"/><text x="75.9735%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.7235%" y="277" width="0.0804%" height="15" fill="rgb(246,29,44)" fg:x="942" fg:w="1"/><text x="75.9735%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="75.4823%" y="565" width="0.4019%" height="15" fill="rgb(215,56,53)" fg:x="939" fg:w="5"/><text x="75.7323%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="75.4823%" y="549" width="0.4019%" height="15" fill="rgb(217,60,2)" fg:x="939" fg:w="5"/><text x="75.7323%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="75.4823%" y="533" width="0.4019%" height="15" fill="rgb(207,26,24)" fg:x="939" fg:w="5"/><text x="75.7323%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.7235%" y="517" width="0.1608%" height="15" fill="rgb(252,210,15)" fg:x="942" fg:w="2"/><text x="75.9735%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.7235%" y="501" width="0.1608%" height="15" fill="rgb(253,209,26)" fg:x="942" fg:w="2"/><text x="75.9735%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (2 samples, 0.16%)</title><rect x="75.7235%" y="485" width="0.1608%" height="15" fill="rgb(238,170,14)" fg:x="942" fg:w="2"/><text x="75.9735%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (2 samples, 0.16%)</title><rect x="75.7235%" y="469" width="0.1608%" height="15" fill="rgb(216,178,15)" fg:x="942" fg:w="2"/><text x="75.9735%" y="479.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (2 samples, 0.16%)</title><rect x="75.7235%" y="453" width="0.1608%" height="15" fill="rgb(250,197,2)" fg:x="942" fg:w="2"/><text x="75.9735%" y="463.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (2 samples, 0.16%)</title><rect x="75.7235%" y="437" width="0.1608%" height="15" fill="rgb(212,70,42)" fg:x="942" fg:w="2"/><text x="75.9735%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="75.7235%" y="421" width="0.1608%" height="15" fill="rgb(227,213,9)" fg:x="942" fg:w="2"/><text x="75.9735%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="75.8039%" y="405" width="0.0804%" height="15" fill="rgb(245,99,25)" fg:x="943" fg:w="1"/><text x="76.0539%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="75.8039%" y="389" width="0.0804%" height="15" fill="rgb(250,82,29)" fg:x="943" fg:w="1"/><text x="76.0539%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.8039%" y="373" width="0.0804%" height="15" fill="rgb(241,226,54)" fg:x="943" fg:w="1"/><text x="76.0539%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.8039%" y="357" width="0.0804%" height="15" fill="rgb(221,99,41)" fg:x="943" fg:w="1"/><text x="76.0539%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="75.8039%" y="341" width="0.0804%" height="15" fill="rgb(213,90,21)" fg:x="943" fg:w="1"/><text x="76.0539%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="75.8039%" y="325" width="0.0804%" height="15" fill="rgb(205,208,24)" fg:x="943" fg:w="1"/><text x="76.0539%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="75.8039%" y="309" width="0.0804%" height="15" fill="rgb(246,31,12)" fg:x="943" fg:w="1"/><text x="76.0539%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="75.8039%" y="293" width="0.0804%" height="15" fill="rgb(213,154,6)" fg:x="943" fg:w="1"/><text x="76.0539%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="75.8039%" y="277" width="0.0804%" height="15" fill="rgb(222,163,29)" fg:x="943" fg:w="1"/><text x="76.0539%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.80%)</title><rect x="75.1608%" y="661" width="0.8039%" height="15" fill="rgb(227,201,8)" fg:x="935" fg:w="10"/><text x="75.4108%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.80%)</title><rect x="75.1608%" y="645" width="0.8039%" height="15" fill="rgb(233,9,32)" fg:x="935" fg:w="10"/><text x="75.4108%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (9 samples, 0.72%)</title><rect x="75.2412%" y="629" width="0.7235%" height="15" fill="rgb(217,54,24)" fg:x="936" fg:w="9"/><text x="75.4912%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="75.3215%" y="613" width="0.6431%" height="15" fill="rgb(235,192,0)" fg:x="937" fg:w="8"/><text x="75.5715%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.64%)</title><rect x="75.3215%" y="597" width="0.6431%" height="15" fill="rgb(235,45,9)" fg:x="937" fg:w="8"/><text x="75.5715%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.56%)</title><rect x="75.4019%" y="581" width="0.5627%" height="15" fill="rgb(246,42,40)" fg:x="938" fg:w="7"/><text x="75.6519%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.8842%" y="565" width="0.0804%" height="15" fill="rgb(248,111,24)" fg:x="944" fg:w="1"/><text x="76.1342%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.8842%" y="549" width="0.0804%" height="15" fill="rgb(249,65,22)" fg:x="944" fg:w="1"/><text x="76.1342%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.8842%" y="533" width="0.0804%" height="15" fill="rgb(238,111,51)" fg:x="944" fg:w="1"/><text x="76.1342%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.9646%" y="629" width="0.0804%" height="15" fill="rgb(250,118,22)" fg:x="945" fg:w="1"/><text x="76.2146%" y="639.50"></text></g><g><title>engine::session::internal::Added::find_refs (13 samples, 1.05%)</title><rect x="75.0804%" y="693" width="1.0450%" height="15" fill="rgb(234,84,26)" fg:x="934" fg:w="13"/><text x="75.3304%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (13 samples, 1.05%)</title><rect x="75.0804%" y="677" width="1.0450%" height="15" fill="rgb(243,172,12)" fg:x="934" fg:w="13"/><text x="75.3304%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.9646%" y="661" width="0.1608%" height="15" fill="rgb(236,150,49)" fg:x="945" fg:w="2"/><text x="76.2146%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.9646%" y="645" width="0.1608%" height="15" fill="rgb(225,197,26)" fg:x="945" fg:w="2"/><text x="76.2146%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.0450%" y="629" width="0.0804%" height="15" fill="rgb(214,17,42)" fg:x="946" fg:w="1"/><text x="76.2950%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.0450%" y="613" width="0.0804%" height="15" fill="rgb(224,165,40)" fg:x="946" fg:w="1"/><text x="76.2950%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.0450%" y="597" width="0.0804%" height="15" fill="rgb(246,100,4)" fg:x="946" fg:w="1"/><text x="76.2950%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.0450%" y="581" width="0.0804%" height="15" fill="rgb(222,103,0)" fg:x="946" fg:w="1"/><text x="76.2950%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="76.1254%" y="677" width="0.0804%" height="15" fill="rgb(227,189,26)" fg:x="947" fg:w="1"/><text x="76.3754%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.1254%" y="661" width="0.0804%" height="15" fill="rgb(214,202,17)" fg:x="947" fg:w="1"/><text x="76.3754%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1254%" y="645" width="0.0804%" height="15" fill="rgb(229,111,3)" fg:x="947" fg:w="1"/><text x="76.3754%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="76.2058%" y="629" width="0.0804%" height="15" fill="rgb(229,172,15)" fg:x="948" fg:w="1"/><text x="76.4558%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.3666%" y="517" width="0.0804%" height="15" fill="rgb(230,224,35)" fg:x="950" fg:w="1"/><text x="76.6166%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.3666%" y="501" width="0.0804%" height="15" fill="rgb(251,141,6)" fg:x="950" fg:w="1"/><text x="76.6166%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (18 samples, 1.45%)</title><rect x="75.0804%" y="709" width="1.4469%" height="15" fill="rgb(225,208,6)" fg:x="934" fg:w="18"/><text x="75.3304%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="76.1254%" y="693" width="0.4019%" height="15" fill="rgb(246,181,16)" fg:x="947" fg:w="5"/><text x="76.3754%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="76.2058%" y="677" width="0.3215%" height="15" fill="rgb(227,129,36)" fg:x="948" fg:w="4"/><text x="76.4558%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="76.2058%" y="661" width="0.3215%" height="15" fill="rgb(248,117,24)" fg:x="948" fg:w="4"/><text x="76.4558%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="76.2058%" y="645" width="0.3215%" height="15" fill="rgb(214,185,35)" fg:x="948" fg:w="4"/><text x="76.4558%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="76.2862%" y="629" width="0.2412%" height="15" fill="rgb(236,150,34)" fg:x="949" fg:w="3"/><text x="76.5362%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="76.2862%" y="613" width="0.2412%" height="15" fill="rgb(243,228,27)" fg:x="949" fg:w="3"/><text x="76.5362%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="76.2862%" y="597" width="0.2412%" height="15" fill="rgb(245,77,44)" fg:x="949" fg:w="3"/><text x="76.5362%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="76.2862%" y="581" width="0.2412%" height="15" fill="rgb(235,214,42)" fg:x="949" fg:w="3"/><text x="76.5362%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="76.2862%" y="565" width="0.2412%" height="15" fill="rgb(221,74,3)" fg:x="949" fg:w="3"/><text x="76.5362%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="76.3666%" y="549" width="0.1608%" height="15" fill="rgb(206,121,29)" fg:x="950" fg:w="2"/><text x="76.6166%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.3666%" y="533" width="0.1608%" height="15" fill="rgb(249,131,53)" fg:x="950" fg:w="2"/><text x="76.6166%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.4469%" y="517" width="0.0804%" height="15" fill="rgb(236,170,29)" fg:x="951" fg:w="1"/><text x="76.6969%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="76.4469%" y="501" width="0.0804%" height="15" fill="rgb(247,96,15)" fg:x="951" fg:w="1"/><text x="76.6969%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.4469%" y="485" width="0.0804%" height="15" fill="rgb(211,210,7)" fg:x="951" fg:w="1"/><text x="76.6969%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.4469%" y="469" width="0.0804%" height="15" fill="rgb(240,88,50)" fg:x="951" fg:w="1"/><text x="76.6969%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.4469%" y="453" width="0.0804%" height="15" fill="rgb(209,229,26)" fg:x="951" fg:w="1"/><text x="76.6969%" y="463.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="76.5273%" y="677" width="0.0804%" height="15" fill="rgb(210,68,23)" fg:x="952" fg:w="1"/><text x="76.7773%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="76.6881%" y="645" width="0.0804%" height="15" fill="rgb(229,180,13)" fg:x="954" fg:w="1"/><text x="76.9381%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="76.6881%" y="661" width="0.1608%" height="15" fill="rgb(236,53,44)" fg:x="954" fg:w="2"/><text x="76.9381%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.7685%" y="645" width="0.0804%" height="15" fill="rgb(244,214,29)" fg:x="955" fg:w="1"/><text x="77.0185%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.7685%" y="629" width="0.0804%" height="15" fill="rgb(220,75,29)" fg:x="955" fg:w="1"/><text x="77.0185%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.7685%" y="613" width="0.0804%" height="15" fill="rgb(214,183,37)" fg:x="955" fg:w="1"/><text x="77.0185%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.7685%" y="597" width="0.0804%" height="15" fill="rgb(239,117,29)" fg:x="955" fg:w="1"/><text x="77.0185%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.7685%" y="581" width="0.0804%" height="15" fill="rgb(237,171,35)" fg:x="955" fg:w="1"/><text x="77.0185%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.7685%" y="565" width="0.0804%" height="15" fill="rgb(229,178,53)" fg:x="955" fg:w="1"/><text x="77.0185%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.8489%" y="613" width="0.0804%" height="15" fill="rgb(210,102,19)" fg:x="956" fg:w="1"/><text x="77.0989%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.8489%" y="597" width="0.0804%" height="15" fill="rgb(235,127,22)" fg:x="956" fg:w="1"/><text x="77.0989%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="76.8489%" y="661" width="0.2412%" height="15" fill="rgb(244,31,31)" fg:x="956" fg:w="3"/><text x="77.0989%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="76.8489%" y="645" width="0.2412%" height="15" fill="rgb(231,43,21)" fg:x="956" fg:w="3"/><text x="77.0989%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="76.8489%" y="629" width="0.2412%" height="15" fill="rgb(217,131,35)" fg:x="956" fg:w="3"/><text x="77.0989%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="76.9293%" y="613" width="0.1608%" height="15" fill="rgb(221,149,4)" fg:x="957" fg:w="2"/><text x="77.1793%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.9293%" y="597" width="0.1608%" height="15" fill="rgb(232,170,28)" fg:x="957" fg:w="2"/><text x="77.1793%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.0096%" y="581" width="0.0804%" height="15" fill="rgb(238,56,10)" fg:x="958" fg:w="1"/><text x="77.2596%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.0096%" y="565" width="0.0804%" height="15" fill="rgb(235,196,14)" fg:x="958" fg:w="1"/><text x="77.2596%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.0096%" y="549" width="0.0804%" height="15" fill="rgb(216,45,48)" fg:x="958" fg:w="1"/><text x="77.2596%" y="559.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="77.0096%" y="533" width="0.0804%" height="15" fill="rgb(238,213,17)" fg:x="958" fg:w="1"/><text x="77.2596%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.1704%" y="565" width="0.1608%" height="15" fill="rgb(212,13,2)" fg:x="960" fg:w="2"/><text x="77.4204%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.2508%" y="549" width="0.0804%" height="15" fill="rgb(240,114,20)" fg:x="961" fg:w="1"/><text x="77.5008%" y="559.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (565 samples, 45.42%)</title><rect x="31.9936%" y="741" width="45.4180%" height="15" fill="rgb(228,41,40)" fg:x="398" fg:w="565"/><text x="32.2436%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (565 samples, 45.42%)</title><rect x="31.9936%" y="725" width="45.4180%" height="15" fill="rgb(244,132,35)" fg:x="398" fg:w="565"/><text x="32.2436%" y="735.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (11 samples, 0.88%)</title><rect x="76.5273%" y="709" width="0.8842%" height="15" fill="rgb(253,189,4)" fg:x="952" fg:w="11"/><text x="76.7773%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.88%)</title><rect x="76.5273%" y="693" width="0.8842%" height="15" fill="rgb(224,37,19)" fg:x="952" fg:w="11"/><text x="76.7773%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.80%)</title><rect x="76.6077%" y="677" width="0.8039%" height="15" fill="rgb(235,223,18)" fg:x="953" fg:w="10"/><text x="76.8577%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="77.0900%" y="661" width="0.3215%" height="15" fill="rgb(235,163,25)" fg:x="959" fg:w="4"/><text x="77.3400%" y="671.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="77.0900%" y="645" width="0.3215%" height="15" fill="rgb(217,145,28)" fg:x="959" fg:w="4"/><text x="77.3400%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="77.0900%" y="629" width="0.3215%" height="15" fill="rgb(223,223,32)" fg:x="959" fg:w="4"/><text x="77.3400%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="77.1704%" y="613" width="0.2412%" height="15" fill="rgb(227,189,39)" fg:x="960" fg:w="3"/><text x="77.4204%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="77.1704%" y="597" width="0.2412%" height="15" fill="rgb(248,10,22)" fg:x="960" fg:w="3"/><text x="77.4204%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="77.1704%" y="581" width="0.2412%" height="15" fill="rgb(248,46,39)" fg:x="960" fg:w="3"/><text x="77.4204%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.3312%" y="565" width="0.0804%" height="15" fill="rgb(248,113,48)" fg:x="962" fg:w="1"/><text x="77.5812%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.3312%" y="549" width="0.0804%" height="15" fill="rgb(245,16,25)" fg:x="962" fg:w="1"/><text x="77.5812%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (964 samples, 77.49%)</title><rect x="0.0000%" y="789" width="77.4920%" height="15" fill="rgb(249,152,16)" fg:x="0" fg:w="964"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (964 samples, 77.49%)</title><rect x="0.0000%" y="773" width="77.4920%" height="15" fill="rgb(250,16,1)" fg:x="0" fg:w="964"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (964 samples, 77.49%)</title><rect x="0.0000%" y="757" width="77.4920%" height="15" fill="rgb(249,138,3)" fg:x="0" fg:w="964"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="77.4116%" y="741" width="0.0804%" height="15" fill="rgb(227,71,41)" fg:x="963" fg:w="1"/><text x="77.6616%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.4116%" y="725" width="0.0804%" height="15" fill="rgb(209,184,23)" fg:x="963" fg:w="1"/><text x="77.6616%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.4116%" y="709" width="0.0804%" height="15" fill="rgb(223,215,31)" fg:x="963" fg:w="1"/><text x="77.6616%" y="719.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.4920%" y="645" width="0.0804%" height="15" fill="rgb(210,146,28)" fg:x="964" fg:w="1"/><text x="77.7420%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.4920%" y="629" width="0.0804%" height="15" fill="rgb(209,183,41)" fg:x="964" fg:w="1"/><text x="77.7420%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.5723%" y="629" width="0.0804%" height="15" fill="rgb(209,224,45)" fg:x="965" fg:w="1"/><text x="77.8223%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="77.4920%" y="677" width="0.2412%" height="15" fill="rgb(224,209,51)" fg:x="964" fg:w="3"/><text x="77.7420%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="77.4920%" y="661" width="0.2412%" height="15" fill="rgb(223,17,39)" fg:x="964" fg:w="3"/><text x="77.7420%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.5723%" y="645" width="0.1608%" height="15" fill="rgb(234,204,37)" fg:x="965" fg:w="2"/><text x="77.8223%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.6527%" y="629" width="0.0804%" height="15" fill="rgb(236,120,5)" fg:x="966" fg:w="1"/><text x="77.9027%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.8135%" y="613" width="0.0804%" height="15" fill="rgb(248,97,27)" fg:x="968" fg:w="1"/><text x="78.0635%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (6 samples, 0.48%)</title><rect x="77.4920%" y="725" width="0.4823%" height="15" fill="rgb(240,66,17)" fg:x="964" fg:w="6"/><text x="77.7420%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="77.4920%" y="709" width="0.4823%" height="15" fill="rgb(210,79,3)" fg:x="964" fg:w="6"/><text x="77.7420%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (6 samples, 0.48%)</title><rect x="77.4920%" y="693" width="0.4823%" height="15" fill="rgb(214,176,27)" fg:x="964" fg:w="6"/><text x="77.7420%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="77.7331%" y="677" width="0.2412%" height="15" fill="rgb(235,185,3)" fg:x="967" fg:w="3"/><text x="77.9831%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="77.7331%" y="661" width="0.2412%" height="15" fill="rgb(227,24,12)" fg:x="967" fg:w="3"/><text x="77.9831%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="77.7331%" y="645" width="0.2412%" height="15" fill="rgb(252,169,48)" fg:x="967" fg:w="3"/><text x="77.9831%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.8135%" y="629" width="0.1608%" height="15" fill="rgb(212,65,1)" fg:x="968" fg:w="2"/><text x="78.0635%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.8939%" y="613" width="0.0804%" height="15" fill="rgb(242,39,24)" fg:x="969" fg:w="1"/><text x="78.1439%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.8939%" y="597" width="0.0804%" height="15" fill="rgb(249,32,23)" fg:x="969" fg:w="1"/><text x="78.1439%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="77.4920%" y="741" width="0.5627%" height="15" fill="rgb(251,195,23)" fg:x="964" fg:w="7"/><text x="77.7420%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::Captured&gt; (1 samples, 0.08%)</title><rect x="77.9743%" y="725" width="0.0804%" height="15" fill="rgb(236,174,8)" fg:x="970" fg:w="1"/><text x="78.2243%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.9743%" y="709" width="0.0804%" height="15" fill="rgb(220,197,8)" fg:x="970" fg:w="1"/><text x="78.2243%" y="719.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="78.1350%" y="629" width="0.0804%" height="15" fill="rgb(240,108,37)" fg:x="972" fg:w="1"/><text x="78.3850%" y="639.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="78.1350%" y="613" width="0.0804%" height="15" fill="rgb(232,176,24)" fg:x="972" fg:w="1"/><text x="78.3850%" y="623.50"></text></g><g><title>dlopen (1 samples, 0.08%)</title><rect x="78.2154%" y="629" width="0.0804%" height="15" fill="rgb(243,35,29)" fg:x="973" fg:w="1"/><text x="78.4654%" y="639.50"></text></g><g><title>_dl_catch_error (1 samples, 0.08%)</title><rect x="78.2154%" y="613" width="0.0804%" height="15" fill="rgb(210,37,18)" fg:x="973" fg:w="1"/><text x="78.4654%" y="623.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="78.2154%" y="597" width="0.0804%" height="15" fill="rgb(224,184,40)" fg:x="973" fg:w="1"/><text x="78.4654%" y="607.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="78.2154%" y="581" width="0.0804%" height="15" fill="rgb(236,39,29)" fg:x="973" fg:w="1"/><text x="78.4654%" y="591.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="78.2154%" y="565" width="0.0804%" height="15" fill="rgb(232,48,39)" fg:x="973" fg:w="1"/><text x="78.4654%" y="575.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="78.1350%" y="661" width="0.2412%" height="15" fill="rgb(236,34,42)" fg:x="972" fg:w="3"/><text x="78.3850%" y="671.50"></text></g><g><title>libloading::os::unix::Library::open (3 samples, 0.24%)</title><rect x="78.1350%" y="645" width="0.2412%" height="15" fill="rgb(243,106,37)" fg:x="972" fg:w="3"/><text x="78.3850%" y="655.50"></text></g><g><title>libloading::util::cstr_cow_from_bytes (1 samples, 0.08%)</title><rect x="78.2958%" y="629" width="0.0804%" height="15" fill="rgb(218,96,6)" fg:x="974" fg:w="1"/><text x="78.5458%" y="639.50"></text></g><g><title>&lt;&amp;str as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (1 samples, 0.08%)</title><rect x="78.2958%" y="613" width="0.0804%" height="15" fill="rgb(235,130,12)" fg:x="974" fg:w="1"/><text x="78.5458%" y="623.50"></text></g><g><title>alloc::ffi::c_str::CString::new::spec_new_impl_bytes (1 samples, 0.08%)</title><rect x="78.2958%" y="597" width="0.0804%" height="15" fill="rgb(231,95,0)" fg:x="974" fg:w="1"/><text x="78.5458%" y="607.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.16%)</title><rect x="78.3762%" y="645" width="0.1608%" height="15" fill="rgb(228,12,23)" fg:x="975" fg:w="2"/><text x="78.6262%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="78.3762%" y="629" width="0.1608%" height="15" fill="rgb(216,12,1)" fg:x="975" fg:w="2"/><text x="78.6262%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.4566%" y="613" width="0.0804%" height="15" fill="rgb(219,59,3)" fg:x="976" fg:w="1"/><text x="78.7066%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.4566%" y="597" width="0.0804%" height="15" fill="rgb(215,208,46)" fg:x="976" fg:w="1"/><text x="78.7066%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.4566%" y="581" width="0.0804%" height="15" fill="rgb(254,224,29)" fg:x="976" fg:w="1"/><text x="78.7066%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.4566%" y="565" width="0.0804%" height="15" fill="rgb(232,14,29)" fg:x="976" fg:w="1"/><text x="78.7066%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.4566%" y="549" width="0.0804%" height="15" fill="rgb(208,45,52)" fg:x="976" fg:w="1"/><text x="78.7066%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.4566%" y="533" width="0.0804%" height="15" fill="rgb(234,191,28)" fg:x="976" fg:w="1"/><text x="78.7066%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.4566%" y="517" width="0.0804%" height="15" fill="rgb(244,67,43)" fg:x="976" fg:w="1"/><text x="78.7066%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.4566%" y="501" width="0.0804%" height="15" fill="rgb(236,189,24)" fg:x="976" fg:w="1"/><text x="78.7066%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.4566%" y="485" width="0.0804%" height="15" fill="rgb(239,214,33)" fg:x="976" fg:w="1"/><text x="78.7066%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.4566%" y="469" width="0.0804%" height="15" fill="rgb(226,176,41)" fg:x="976" fg:w="1"/><text x="78.7066%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.4566%" y="453" width="0.0804%" height="15" fill="rgb(248,47,8)" fg:x="976" fg:w="1"/><text x="78.7066%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.4566%" y="437" width="0.0804%" height="15" fill="rgb(218,81,44)" fg:x="976" fg:w="1"/><text x="78.7066%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.4566%" y="421" width="0.0804%" height="15" fill="rgb(213,98,6)" fg:x="976" fg:w="1"/><text x="78.7066%" y="431.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (7 samples, 0.56%)</title><rect x="78.3762%" y="661" width="0.5627%" height="15" fill="rgb(222,85,22)" fg:x="975" fg:w="7"/><text x="78.6262%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (5 samples, 0.40%)</title><rect x="78.5370%" y="645" width="0.4019%" height="15" fill="rgb(239,46,39)" fg:x="977" fg:w="5"/><text x="78.7870%" y="655.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="78.5370%" y="629" width="0.4019%" height="15" fill="rgb(237,12,29)" fg:x="977" fg:w="5"/><text x="78.7870%" y="639.50"></text></g><g><title>glob::fill_todo (5 samples, 0.40%)</title><rect x="78.5370%" y="613" width="0.4019%" height="15" fill="rgb(214,77,8)" fg:x="977" fg:w="5"/><text x="78.7870%" y="623.50"></text></g><g><title>glob::is_dir (4 samples, 0.32%)</title><rect x="78.6174%" y="597" width="0.3215%" height="15" fill="rgb(217,168,37)" fg:x="978" fg:w="4"/><text x="78.8674%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="78.6174%" y="581" width="0.3215%" height="15" fill="rgb(221,217,23)" fg:x="978" fg:w="4"/><text x="78.8674%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="78.6174%" y="565" width="0.3215%" height="15" fill="rgb(243,229,36)" fg:x="978" fg:w="4"/><text x="78.8674%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="78.6174%" y="549" width="0.3215%" height="15" fill="rgb(251,163,40)" fg:x="978" fg:w="4"/><text x="78.8674%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="78.6174%" y="533" width="0.3215%" height="15" fill="rgb(237,222,12)" fg:x="978" fg:w="4"/><text x="78.8674%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.32%)</title><rect x="78.6174%" y="517" width="0.3215%" height="15" fill="rgb(248,132,6)" fg:x="978" fg:w="4"/><text x="78.8674%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.32%)</title><rect x="78.6174%" y="501" width="0.3215%" height="15" fill="rgb(227,167,50)" fg:x="978" fg:w="4"/><text x="78.8674%" y="511.50"></text></g><g><title>statx (4 samples, 0.32%)</title><rect x="78.6174%" y="485" width="0.3215%" height="15" fill="rgb(242,84,37)" fg:x="978" fg:w="4"/><text x="78.8674%" y="495.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="78.9389%" y="629" width="0.1608%" height="15" fill="rgb(212,4,50)" fg:x="982" fg:w="2"/><text x="79.1889%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="78.9389%" y="613" width="0.1608%" height="15" fill="rgb(230,228,32)" fg:x="982" fg:w="2"/><text x="79.1889%" y="623.50"></text></g><g><title>&lt;plugins_core::building::actions::BidirectionalDigAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="78.9389%" y="597" width="0.1608%" height="15" fill="rgb(248,217,23)" fg:x="982" fg:w="2"/><text x="79.1889%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="78.9389%" y="581" width="0.1608%" height="15" fill="rgb(238,197,32)" fg:x="982" fg:w="2"/><text x="79.1889%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.0193%" y="565" width="0.0804%" height="15" fill="rgb(236,106,1)" fg:x="983" fg:w="1"/><text x="79.2693%" y="575.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="79.0997%" y="629" width="0.0804%" height="15" fill="rgb(219,228,13)" fg:x="984" fg:w="1"/><text x="79.3497%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="79.0997%" y="613" width="0.0804%" height="15" fill="rgb(238,30,35)" fg:x="984" fg:w="1"/><text x="79.3497%" y="623.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="79.1801%" y="629" width="0.0804%" height="15" fill="rgb(236,70,23)" fg:x="985" fg:w="1"/><text x="79.4301%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="79.1801%" y="613" width="0.0804%" height="15" fill="rgb(249,104,48)" fg:x="985" fg:w="1"/><text x="79.4301%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="79.1801%" y="597" width="0.0804%" height="15" fill="rgb(254,117,50)" fg:x="985" fg:w="1"/><text x="79.4301%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.1801%" y="581" width="0.0804%" height="15" fill="rgb(223,152,4)" fg:x="985" fg:w="1"/><text x="79.4301%" y="591.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (17 samples, 1.37%)</title><rect x="78.0547%" y="677" width="1.3666%" height="15" fill="rgb(245,6,2)" fg:x="971" fg:w="17"/><text x="78.3047%" y="687.50"></text></g><g><title>kernel::plugins::SessionPlugins::schema (6 samples, 0.48%)</title><rect x="78.9389%" y="661" width="0.4823%" height="15" fill="rgb(249,150,24)" fg:x="982" fg:w="6"/><text x="79.1889%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.48%)</title><rect x="78.9389%" y="645" width="0.4823%" height="15" fill="rgb(228,185,42)" fg:x="982" fg:w="6"/><text x="79.1889%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="79.2605%" y="629" width="0.1608%" height="15" fill="rgb(226,39,33)" fg:x="986" fg:w="2"/><text x="79.5105%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="79.3408%" y="613" width="0.0804%" height="15" fill="rgb(221,166,19)" fg:x="987" fg:w="1"/><text x="79.5908%" y="623.50"></text></g><g><title>engine::session::Session::initialize (18 samples, 1.45%)</title><rect x="78.0547%" y="693" width="1.4469%" height="15" fill="rgb(209,109,2)" fg:x="971" fg:w="18"/><text x="78.3047%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="79.4212%" y="677" width="0.0804%" height="15" fill="rgb(252,216,26)" fg:x="988" fg:w="1"/><text x="79.6712%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="79.4212%" y="661" width="0.0804%" height="15" fill="rgb(227,173,36)" fg:x="988" fg:w="1"/><text x="79.6712%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.4212%" y="645" width="0.0804%" height="15" fill="rgb(209,90,7)" fg:x="988" fg:w="1"/><text x="79.6712%" y="655.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="79.5016%" y="693" width="0.1608%" height="15" fill="rgb(250,194,11)" fg:x="989" fg:w="2"/><text x="79.7516%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="79.5016%" y="677" width="0.1608%" height="15" fill="rgb(220,72,50)" fg:x="989" fg:w="2"/><text x="79.7516%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.5820%" y="661" width="0.0804%" height="15" fill="rgb(222,106,48)" fg:x="990" fg:w="1"/><text x="79.8320%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.5820%" y="645" width="0.0804%" height="15" fill="rgb(216,220,45)" fg:x="990" fg:w="1"/><text x="79.8320%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.5820%" y="629" width="0.0804%" height="15" fill="rgb(234,112,18)" fg:x="990" fg:w="1"/><text x="79.8320%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.5820%" y="613" width="0.0804%" height="15" fill="rgb(206,179,9)" fg:x="990" fg:w="1"/><text x="79.8320%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (21 samples, 1.69%)</title><rect x="78.0547%" y="741" width="1.6881%" height="15" fill="rgb(215,115,40)" fg:x="971" fg:w="21"/><text x="78.3047%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (21 samples, 1.69%)</title><rect x="78.0547%" y="725" width="1.6881%" height="15" fill="rgb(222,69,34)" fg:x="971" fg:w="21"/><text x="78.3047%" y="735.50"></text></g><g><title>engine::session::Session::new (21 samples, 1.69%)</title><rect x="78.0547%" y="709" width="1.6881%" height="15" fill="rgb(209,161,10)" fg:x="971" fg:w="21"/><text x="78.3047%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="79.6624%" y="693" width="0.0804%" height="15" fill="rgb(217,6,38)" fg:x="991" fg:w="1"/><text x="79.9124%" y="703.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="79.6624%" y="677" width="0.0804%" height="15" fill="rgb(229,229,48)" fg:x="991" fg:w="1"/><text x="79.9124%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.8232%" y="645" width="0.0804%" height="15" fill="rgb(225,21,28)" fg:x="993" fg:w="1"/><text x="80.0732%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.8232%" y="629" width="0.0804%" height="15" fill="rgb(206,33,13)" fg:x="993" fg:w="1"/><text x="80.0732%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.8232%" y="613" width="0.0804%" height="15" fill="rgb(242,178,17)" fg:x="993" fg:w="1"/><text x="80.0732%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.9839%" y="581" width="0.0804%" height="15" fill="rgb(220,162,5)" fg:x="995" fg:w="1"/><text x="80.2339%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.9839%" y="565" width="0.0804%" height="15" fill="rgb(210,33,43)" fg:x="995" fg:w="1"/><text x="80.2339%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.9839%" y="549" width="0.0804%" height="15" fill="rgb(216,116,54)" fg:x="995" fg:w="1"/><text x="80.2339%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.9839%" y="533" width="0.0804%" height="15" fill="rgb(249,92,24)" fg:x="995" fg:w="1"/><text x="80.2339%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.0643%" y="565" width="0.0804%" height="15" fill="rgb(231,189,14)" fg:x="996" fg:w="1"/><text x="80.3143%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.0643%" y="549" width="0.0804%" height="15" fill="rgb(230,8,41)" fg:x="996" fg:w="1"/><text x="80.3143%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.0643%" y="533" width="0.0804%" height="15" fill="rgb(249,7,27)" fg:x="996" fg:w="1"/><text x="80.3143%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.0643%" y="517" width="0.0804%" height="15" fill="rgb(232,86,5)" fg:x="996" fg:w="1"/><text x="80.3143%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="80.0643%" y="501" width="0.0804%" height="15" fill="rgb(224,175,18)" fg:x="996" fg:w="1"/><text x="80.3143%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="79.9839%" y="629" width="0.2412%" height="15" fill="rgb(220,129,12)" fg:x="995" fg:w="3"/><text x="80.2339%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="79.9839%" y="613" width="0.2412%" height="15" fill="rgb(210,19,36)" fg:x="995" fg:w="3"/><text x="80.2339%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="79.9839%" y="597" width="0.2412%" height="15" fill="rgb(219,96,14)" fg:x="995" fg:w="3"/><text x="80.2339%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="80.0643%" y="581" width="0.1608%" height="15" fill="rgb(249,106,1)" fg:x="996" fg:w="2"/><text x="80.3143%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.1447%" y="565" width="0.0804%" height="15" fill="rgb(249,155,20)" fg:x="997" fg:w="1"/><text x="80.3947%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.2251%" y="581" width="0.0804%" height="15" fill="rgb(244,168,9)" fg:x="998" fg:w="1"/><text x="80.4751%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.3055%" y="581" width="0.0804%" height="15" fill="rgb(216,23,50)" fg:x="999" fg:w="1"/><text x="80.5555%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.3055%" y="565" width="0.0804%" height="15" fill="rgb(224,219,20)" fg:x="999" fg:w="1"/><text x="80.5555%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.3859%" y="565" width="0.0804%" height="15" fill="rgb(222,156,15)" fg:x="1000" fg:w="1"/><text x="80.6359%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="80.4662%" y="549" width="0.0804%" height="15" fill="rgb(231,97,17)" fg:x="1001" fg:w="1"/><text x="80.7162%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="80.4662%" y="533" width="0.0804%" height="15" fill="rgb(218,70,48)" fg:x="1001" fg:w="1"/><text x="80.7162%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.4662%" y="517" width="0.0804%" height="15" fill="rgb(212,196,52)" fg:x="1001" fg:w="1"/><text x="80.7162%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.4662%" y="501" width="0.0804%" height="15" fill="rgb(243,203,18)" fg:x="1001" fg:w="1"/><text x="80.7162%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.5466%" y="533" width="0.0804%" height="15" fill="rgb(252,125,41)" fg:x="1002" fg:w="1"/><text x="80.7966%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="80.2251%" y="629" width="0.4823%" height="15" fill="rgb(223,180,33)" fg:x="998" fg:w="6"/><text x="80.4751%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="80.2251%" y="613" width="0.4823%" height="15" fill="rgb(254,159,46)" fg:x="998" fg:w="6"/><text x="80.4751%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="80.2251%" y="597" width="0.4823%" height="15" fill="rgb(254,38,10)" fg:x="998" fg:w="6"/><text x="80.4751%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="80.3859%" y="581" width="0.3215%" height="15" fill="rgb(208,217,32)" fg:x="1000" fg:w="4"/><text x="80.6359%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="80.4662%" y="565" width="0.2412%" height="15" fill="rgb(221,120,13)" fg:x="1001" fg:w="3"/><text x="80.7162%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.5466%" y="549" width="0.1608%" height="15" fill="rgb(246,54,52)" fg:x="1002" fg:w="2"/><text x="80.7966%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.6270%" y="533" width="0.0804%" height="15" fill="rgb(242,34,25)" fg:x="1003" fg:w="1"/><text x="80.8770%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="80.7074%" y="581" width="0.0804%" height="15" fill="rgb(247,209,9)" fg:x="1004" fg:w="1"/><text x="80.9574%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.7074%" y="565" width="0.0804%" height="15" fill="rgb(228,71,26)" fg:x="1004" fg:w="1"/><text x="80.9574%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="80.7074%" y="549" width="0.0804%" height="15" fill="rgb(222,145,49)" fg:x="1004" fg:w="1"/><text x="80.9574%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.7878%" y="533" width="0.0804%" height="15" fill="rgb(218,121,17)" fg:x="1005" fg:w="1"/><text x="81.0378%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.7878%" y="517" width="0.0804%" height="15" fill="rgb(244,50,7)" fg:x="1005" fg:w="1"/><text x="81.0378%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="80.8682%" y="533" width="0.0804%" height="15" fill="rgb(246,229,37)" fg:x="1006" fg:w="1"/><text x="81.1182%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="80.8682%" y="517" width="0.0804%" height="15" fill="rgb(225,18,5)" fg:x="1006" fg:w="1"/><text x="81.1182%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.8682%" y="501" width="0.0804%" height="15" fill="rgb(213,204,8)" fg:x="1006" fg:w="1"/><text x="81.1182%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="80.7878%" y="549" width="0.2412%" height="15" fill="rgb(238,103,6)" fg:x="1005" fg:w="3"/><text x="81.0378%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.9486%" y="533" width="0.0804%" height="15" fill="rgb(222,25,35)" fg:x="1007" fg:w="1"/><text x="81.1986%" y="543.50"></text></g><g><title>engine::session::Session::flush (17 samples, 1.37%)</title><rect x="79.7428%" y="725" width="1.3666%" height="15" fill="rgb(213,203,35)" fg:x="992" fg:w="17"/><text x="79.9928%" y="735.50"></text></g><g><title>engine::session::state::State::close (17 samples, 1.37%)</title><rect x="79.7428%" y="709" width="1.3666%" height="15" fill="rgb(221,79,53)" fg:x="992" fg:w="17"/><text x="79.9928%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (17 samples, 1.37%)</title><rect x="79.7428%" y="693" width="1.3666%" height="15" fill="rgb(243,200,35)" fg:x="992" fg:w="17"/><text x="79.9928%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (16 samples, 1.29%)</title><rect x="79.8232%" y="677" width="1.2862%" height="15" fill="rgb(248,60,25)" fg:x="993" fg:w="16"/><text x="80.0732%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 1.29%)</title><rect x="79.8232%" y="661" width="1.2862%" height="15" fill="rgb(227,53,46)" fg:x="993" fg:w="16"/><text x="80.0732%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (15 samples, 1.21%)</title><rect x="79.9035%" y="645" width="1.2058%" height="15" fill="rgb(216,120,32)" fg:x="994" fg:w="15"/><text x="80.1535%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="80.7074%" y="629" width="0.4019%" height="15" fill="rgb(220,134,1)" fg:x="1004" fg:w="5"/><text x="80.9574%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="80.7074%" y="613" width="0.4019%" height="15" fill="rgb(237,168,5)" fg:x="1004" fg:w="5"/><text x="80.9574%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="80.7074%" y="597" width="0.4019%" height="15" fill="rgb(231,100,33)" fg:x="1004" fg:w="5"/><text x="80.9574%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="80.7878%" y="581" width="0.3215%" height="15" fill="rgb(236,177,47)" fg:x="1005" fg:w="4"/><text x="81.0378%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="80.7878%" y="565" width="0.3215%" height="15" fill="rgb(235,7,49)" fg:x="1005" fg:w="4"/><text x="81.0378%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="81.0289%" y="549" width="0.0804%" height="15" fill="rgb(232,119,22)" fg:x="1008" fg:w="1"/><text x="81.2789%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.0289%" y="533" width="0.0804%" height="15" fill="rgb(254,73,53)" fg:x="1008" fg:w="1"/><text x="81.2789%" y="543.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="81.1093%" y="725" width="0.0804%" height="15" fill="rgb(251,35,20)" fg:x="1009" fg:w="1"/><text x="81.3593%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="81.1093%" y="709" width="0.0804%" height="15" fill="rgb(241,119,20)" fg:x="1009" fg:w="1"/><text x="81.3593%" y="719.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.1897%" y="613" width="0.0804%" height="15" fill="rgb(207,102,14)" fg:x="1010" fg:w="1"/><text x="81.4397%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.2701%" y="581" width="0.0804%" height="15" fill="rgb(248,201,50)" fg:x="1011" fg:w="1"/><text x="81.5201%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="81.1897%" y="661" width="0.2412%" height="15" fill="rgb(222,185,44)" fg:x="1010" fg:w="3"/><text x="81.4397%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="81.1897%" y="645" width="0.2412%" height="15" fill="rgb(218,107,18)" fg:x="1010" fg:w="3"/><text x="81.4397%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="81.1897%" y="629" width="0.2412%" height="15" fill="rgb(237,177,39)" fg:x="1010" fg:w="3"/><text x="81.4397%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="81.2701%" y="613" width="0.1608%" height="15" fill="rgb(246,69,6)" fg:x="1011" fg:w="2"/><text x="81.5201%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="81.2701%" y="597" width="0.1608%" height="15" fill="rgb(234,208,37)" fg:x="1011" fg:w="2"/><text x="81.5201%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.3505%" y="581" width="0.0804%" height="15" fill="rgb(225,4,6)" fg:x="1012" fg:w="1"/><text x="81.6005%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.3505%" y="565" width="0.0804%" height="15" fill="rgb(233,45,0)" fg:x="1012" fg:w="1"/><text x="81.6005%" y="575.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="81.4309%" y="661" width="0.0804%" height="15" fill="rgb(226,136,5)" fg:x="1013" fg:w="1"/><text x="81.6809%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.4309%" y="645" width="0.0804%" height="15" fill="rgb(211,91,47)" fg:x="1013" fg:w="1"/><text x="81.6809%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="81.4309%" y="629" width="0.0804%" height="15" fill="rgb(242,88,51)" fg:x="1013" fg:w="1"/><text x="81.6809%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="81.4309%" y="613" width="0.0804%" height="15" fill="rgb(230,91,28)" fg:x="1013" fg:w="1"/><text x="81.6809%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (5 samples, 0.40%)</title><rect x="81.1897%" y="677" width="0.4019%" height="15" fill="rgb(254,186,29)" fg:x="1010" fg:w="5"/><text x="81.4397%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="81.5113%" y="661" width="0.0804%" height="15" fill="rgb(238,6,4)" fg:x="1014" fg:w="1"/><text x="81.7613%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.5113%" y="645" width="0.0804%" height="15" fill="rgb(221,151,16)" fg:x="1014" fg:w="1"/><text x="81.7613%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.5113%" y="629" width="0.0804%" height="15" fill="rgb(251,143,52)" fg:x="1014" fg:w="1"/><text x="81.7613%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.5113%" y="613" width="0.0804%" height="15" fill="rgb(206,90,15)" fg:x="1014" fg:w="1"/><text x="81.7613%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.5113%" y="597" width="0.0804%" height="15" fill="rgb(218,35,8)" fg:x="1014" fg:w="1"/><text x="81.7613%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="81.1897%" y="725" width="0.4823%" height="15" fill="rgb(239,215,6)" fg:x="1010" fg:w="6"/><text x="81.4397%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="81.1897%" y="709" width="0.4823%" height="15" fill="rgb(245,116,39)" fg:x="1010" fg:w="6"/><text x="81.4397%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.48%)</title><rect x="81.1897%" y="693" width="0.4823%" height="15" fill="rgb(242,65,28)" fg:x="1010" fg:w="6"/><text x="81.4397%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="81.5916%" y="677" width="0.0804%" height="15" fill="rgb(252,132,53)" fg:x="1015" fg:w="1"/><text x="81.8416%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.5916%" y="661" width="0.0804%" height="15" fill="rgb(224,159,50)" fg:x="1015" fg:w="1"/><text x="81.8416%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="81.5916%" y="645" width="0.0804%" height="15" fill="rgb(224,93,4)" fg:x="1015" fg:w="1"/><text x="81.8416%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.5916%" y="629" width="0.0804%" height="15" fill="rgb(208,81,34)" fg:x="1015" fg:w="1"/><text x="81.8416%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.5916%" y="613" width="0.0804%" height="15" fill="rgb(233,92,54)" fg:x="1015" fg:w="1"/><text x="81.8416%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.5916%" y="597" width="0.0804%" height="15" fill="rgb(237,21,14)" fg:x="1015" fg:w="1"/><text x="81.8416%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (2 samples, 0.16%)</title><rect x="81.6720%" y="725" width="0.1608%" height="15" fill="rgb(249,128,51)" fg:x="1016" fg:w="2"/><text x="81.9220%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="81.7524%" y="709" width="0.0804%" height="15" fill="rgb(223,129,24)" fg:x="1017" fg:w="1"/><text x="82.0024%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.7524%" y="693" width="0.0804%" height="15" fill="rgb(231,168,25)" fg:x="1017" fg:w="1"/><text x="82.0024%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="81.7524%" y="677" width="0.0804%" height="15" fill="rgb(224,39,20)" fg:x="1017" fg:w="1"/><text x="82.0024%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.7524%" y="661" width="0.0804%" height="15" fill="rgb(225,152,53)" fg:x="1017" fg:w="1"/><text x="82.0024%" y="671.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="81.7524%" y="645" width="0.0804%" height="15" fill="rgb(252,17,24)" fg:x="1017" fg:w="1"/><text x="82.0024%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.7524%" y="629" width="0.0804%" height="15" fill="rgb(250,114,30)" fg:x="1017" fg:w="1"/><text x="82.0024%" y="639.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="81.7524%" y="613" width="0.0804%" height="15" fill="rgb(229,5,4)" fg:x="1017" fg:w="1"/><text x="82.0024%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.7524%" y="597" width="0.0804%" height="15" fill="rgb(225,176,49)" fg:x="1017" fg:w="1"/><text x="82.0024%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.7524%" y="581" width="0.0804%" height="15" fill="rgb(224,221,49)" fg:x="1017" fg:w="1"/><text x="82.0024%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="81.8328%" y="709" width="0.0804%" height="15" fill="rgb(253,169,27)" fg:x="1018" fg:w="1"/><text x="82.0828%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.8328%" y="693" width="0.0804%" height="15" fill="rgb(211,206,16)" fg:x="1018" fg:w="1"/><text x="82.0828%" y="703.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="81.8328%" y="677" width="0.0804%" height="15" fill="rgb(244,87,35)" fg:x="1018" fg:w="1"/><text x="82.0828%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.8328%" y="661" width="0.0804%" height="15" fill="rgb(246,28,10)" fg:x="1018" fg:w="1"/><text x="82.0828%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.8328%" y="645" width="0.0804%" height="15" fill="rgb(229,12,44)" fg:x="1018" fg:w="1"/><text x="82.0828%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="81.9132%" y="709" width="0.0804%" height="15" fill="rgb(210,145,37)" fg:x="1019" fg:w="1"/><text x="82.1632%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="81.9132%" y="693" width="0.0804%" height="15" fill="rgb(227,112,52)" fg:x="1019" fg:w="1"/><text x="82.1632%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="81.9132%" y="677" width="0.0804%" height="15" fill="rgb(238,155,34)" fg:x="1019" fg:w="1"/><text x="82.1632%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="81.9132%" y="661" width="0.0804%" height="15" fill="rgb(239,226,36)" fg:x="1019" fg:w="1"/><text x="82.1632%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="81.9132%" y="645" width="0.0804%" height="15" fill="rgb(230,16,23)" fg:x="1019" fg:w="1"/><text x="82.1632%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="81.9132%" y="629" width="0.0804%" height="15" fill="rgb(236,171,36)" fg:x="1019" fg:w="1"/><text x="82.1632%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.9132%" y="613" width="0.0804%" height="15" fill="rgb(221,22,14)" fg:x="1019" fg:w="1"/><text x="82.1632%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.9132%" y="597" width="0.0804%" height="15" fill="rgb(242,43,11)" fg:x="1019" fg:w="1"/><text x="82.1632%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="81.9132%" y="581" width="0.0804%" height="15" fill="rgb(232,69,23)" fg:x="1019" fg:w="1"/><text x="82.1632%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.9132%" y="565" width="0.0804%" height="15" fill="rgb(216,180,54)" fg:x="1019" fg:w="1"/><text x="82.1632%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.9132%" y="549" width="0.0804%" height="15" fill="rgb(216,5,24)" fg:x="1019" fg:w="1"/><text x="82.1632%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.9132%" y="533" width="0.0804%" height="15" fill="rgb(225,89,9)" fg:x="1019" fg:w="1"/><text x="82.1632%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="81.9936%" y="645" width="0.0804%" height="15" fill="rgb(243,75,33)" fg:x="1020" fg:w="1"/><text x="82.2436%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="81.9936%" y="629" width="0.0804%" height="15" fill="rgb(247,141,45)" fg:x="1020" fg:w="1"/><text x="82.2436%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="81.9936%" y="613" width="0.0804%" height="15" fill="rgb(232,177,36)" fg:x="1020" fg:w="1"/><text x="82.2436%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="82.1543%" y="581" width="0.0804%" height="15" fill="rgb(219,125,36)" fg:x="1022" fg:w="1"/><text x="82.4043%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.1543%" y="565" width="0.0804%" height="15" fill="rgb(227,94,9)" fg:x="1022" fg:w="1"/><text x="82.4043%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.1543%" y="549" width="0.0804%" height="15" fill="rgb(240,34,52)" fg:x="1022" fg:w="1"/><text x="82.4043%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.1543%" y="533" width="0.0804%" height="15" fill="rgb(216,45,12)" fg:x="1022" fg:w="1"/><text x="82.4043%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.1543%" y="517" width="0.0804%" height="15" fill="rgb(246,21,19)" fg:x="1022" fg:w="1"/><text x="82.4043%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.1543%" y="501" width="0.0804%" height="15" fill="rgb(213,98,42)" fg:x="1022" fg:w="1"/><text x="82.4043%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.2347%" y="565" width="0.0804%" height="15" fill="rgb(250,136,47)" fg:x="1023" fg:w="1"/><text x="82.4847%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.3151%" y="549" width="0.0804%" height="15" fill="rgb(251,124,27)" fg:x="1024" fg:w="1"/><text x="82.5651%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.3151%" y="533" width="0.0804%" height="15" fill="rgb(229,180,14)" fg:x="1024" fg:w="1"/><text x="82.5651%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.3151%" y="517" width="0.0804%" height="15" fill="rgb(245,216,25)" fg:x="1024" fg:w="1"/><text x="82.5651%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.3151%" y="501" width="0.0804%" height="15" fill="rgb(251,43,5)" fg:x="1024" fg:w="1"/><text x="82.5651%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="82.3955%" y="533" width="0.1608%" height="15" fill="rgb(250,128,24)" fg:x="1025" fg:w="2"/><text x="82.6455%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="82.3955%" y="517" width="0.1608%" height="15" fill="rgb(217,117,27)" fg:x="1025" fg:w="2"/><text x="82.6455%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="82.3955%" y="501" width="0.1608%" height="15" fill="rgb(245,147,4)" fg:x="1025" fg:w="2"/><text x="82.6455%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.4759%" y="485" width="0.0804%" height="15" fill="rgb(242,201,35)" fg:x="1026" fg:w="1"/><text x="82.7259%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.4759%" y="469" width="0.0804%" height="15" fill="rgb(218,181,1)" fg:x="1026" fg:w="1"/><text x="82.7259%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.4759%" y="453" width="0.0804%" height="15" fill="rgb(222,6,29)" fg:x="1026" fg:w="1"/><text x="82.7259%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.4759%" y="437" width="0.0804%" height="15" fill="rgb(208,186,3)" fg:x="1026" fg:w="1"/><text x="82.7259%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.4759%" y="421" width="0.0804%" height="15" fill="rgb(216,36,26)" fg:x="1026" fg:w="1"/><text x="82.7259%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="82.1543%" y="597" width="0.4823%" height="15" fill="rgb(248,201,23)" fg:x="1022" fg:w="6"/><text x="82.4043%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="82.2347%" y="581" width="0.4019%" height="15" fill="rgb(251,170,31)" fg:x="1023" fg:w="5"/><text x="82.4847%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="82.3151%" y="565" width="0.3215%" height="15" fill="rgb(207,110,25)" fg:x="1024" fg:w="4"/><text x="82.5651%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="82.3955%" y="549" width="0.2412%" height="15" fill="rgb(250,54,15)" fg:x="1025" fg:w="3"/><text x="82.6455%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.5563%" y="533" width="0.0804%" height="15" fill="rgb(227,68,33)" fg:x="1027" fg:w="1"/><text x="82.8063%" y="543.50"></text></g><g><title>engine::session::Session::flush (10 samples, 0.80%)</title><rect x="81.9936%" y="709" width="0.8039%" height="15" fill="rgb(238,34,41)" fg:x="1020" fg:w="10"/><text x="82.2436%" y="719.50"></text></g><g><title>engine::session::Session::save_changes (10 samples, 0.80%)</title><rect x="81.9936%" y="693" width="0.8039%" height="15" fill="rgb(220,11,15)" fg:x="1020" fg:w="10"/><text x="82.2436%" y="703.50"></text></g><g><title>engine::session::state::State::close (10 samples, 0.80%)</title><rect x="81.9936%" y="677" width="0.8039%" height="15" fill="rgb(246,111,35)" fg:x="1020" fg:w="10"/><text x="82.2436%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (10 samples, 0.80%)</title><rect x="81.9936%" y="661" width="0.8039%" height="15" fill="rgb(209,88,53)" fg:x="1020" fg:w="10"/><text x="82.2436%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (9 samples, 0.72%)</title><rect x="82.0740%" y="645" width="0.7235%" height="15" fill="rgb(231,185,47)" fg:x="1021" fg:w="9"/><text x="82.3240%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="82.0740%" y="629" width="0.7235%" height="15" fill="rgb(233,154,1)" fg:x="1021" fg:w="9"/><text x="82.3240%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (9 samples, 0.72%)</title><rect x="82.0740%" y="613" width="0.7235%" height="15" fill="rgb(225,15,46)" fg:x="1021" fg:w="9"/><text x="82.3240%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="82.6367%" y="597" width="0.1608%" height="15" fill="rgb(211,135,41)" fg:x="1028" fg:w="2"/><text x="82.8867%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="82.6367%" y="581" width="0.1608%" height="15" fill="rgb(208,54,0)" fg:x="1028" fg:w="2"/><text x="82.8867%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="82.6367%" y="565" width="0.1608%" height="15" fill="rgb(244,136,14)" fg:x="1028" fg:w="2"/><text x="82.8867%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="82.6367%" y="549" width="0.1608%" height="15" fill="rgb(241,56,14)" fg:x="1028" fg:w="2"/><text x="82.8867%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="82.6367%" y="533" width="0.1608%" height="15" fill="rgb(205,80,24)" fg:x="1028" fg:w="2"/><text x="82.8867%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="82.6367%" y="517" width="0.1608%" height="15" fill="rgb(220,57,4)" fg:x="1028" fg:w="2"/><text x="82.8867%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="82.6367%" y="501" width="0.1608%" height="15" fill="rgb(226,193,50)" fg:x="1028" fg:w="2"/><text x="82.8867%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.7170%" y="485" width="0.0804%" height="15" fill="rgb(231,168,22)" fg:x="1029" fg:w="1"/><text x="82.9670%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.7170%" y="469" width="0.0804%" height="15" fill="rgb(254,215,14)" fg:x="1029" fg:w="1"/><text x="82.9670%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.7170%" y="453" width="0.0804%" height="15" fill="rgb(211,115,16)" fg:x="1029" fg:w="1"/><text x="82.9670%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="82.7974%" y="677" width="0.0804%" height="15" fill="rgb(236,210,16)" fg:x="1030" fg:w="1"/><text x="83.0474%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.7974%" y="661" width="0.0804%" height="15" fill="rgb(221,94,12)" fg:x="1030" fg:w="1"/><text x="83.0474%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.7974%" y="645" width="0.0804%" height="15" fill="rgb(235,218,49)" fg:x="1030" fg:w="1"/><text x="83.0474%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.7974%" y="629" width="0.0804%" height="15" fill="rgb(217,114,14)" fg:x="1030" fg:w="1"/><text x="83.0474%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="82.7974%" y="613" width="0.0804%" height="15" fill="rgb(216,145,22)" fg:x="1030" fg:w="1"/><text x="83.0474%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="82.7974%" y="597" width="0.0804%" height="15" fill="rgb(217,112,39)" fg:x="1030" fg:w="1"/><text x="83.0474%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="82.7974%" y="581" width="0.0804%" height="15" fill="rgb(225,85,32)" fg:x="1030" fg:w="1"/><text x="83.0474%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="82.7974%" y="565" width="0.0804%" height="15" fill="rgb(245,209,47)" fg:x="1030" fg:w="1"/><text x="83.0474%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="82.7974%" y="549" width="0.0804%" height="15" fill="rgb(218,220,15)" fg:x="1030" fg:w="1"/><text x="83.0474%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="82.7974%" y="533" width="0.0804%" height="15" fill="rgb(222,202,31)" fg:x="1030" fg:w="1"/><text x="83.0474%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="82.7974%" y="517" width="0.0804%" height="15" fill="rgb(243,203,4)" fg:x="1030" fg:w="1"/><text x="83.0474%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="82.7974%" y="501" width="0.0804%" height="15" fill="rgb(237,92,17)" fg:x="1030" fg:w="1"/><text x="83.0474%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="82.7974%" y="485" width="0.0804%" height="15" fill="rgb(231,119,7)" fg:x="1030" fg:w="1"/><text x="83.0474%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.7974%" y="469" width="0.0804%" height="15" fill="rgb(237,82,41)" fg:x="1030" fg:w="1"/><text x="83.0474%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.9582%" y="629" width="0.0804%" height="15" fill="rgb(226,81,48)" fg:x="1032" fg:w="1"/><text x="83.2082%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="82.7974%" y="693" width="0.3215%" height="15" fill="rgb(234,70,51)" fg:x="1030" fg:w="4"/><text x="83.0474%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="82.8778%" y="677" width="0.2412%" height="15" fill="rgb(251,86,4)" fg:x="1031" fg:w="3"/><text x="83.1278%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="82.8778%" y="661" width="0.2412%" height="15" fill="rgb(244,144,28)" fg:x="1031" fg:w="3"/><text x="83.1278%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="82.8778%" y="645" width="0.2412%" height="15" fill="rgb(232,161,39)" fg:x="1031" fg:w="3"/><text x="83.1278%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="83.0386%" y="629" width="0.0804%" height="15" fill="rgb(247,34,51)" fg:x="1033" fg:w="1"/><text x="83.2886%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.0386%" y="613" width="0.0804%" height="15" fill="rgb(225,132,2)" fg:x="1033" fg:w="1"/><text x="83.2886%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.0386%" y="597" width="0.0804%" height="15" fill="rgb(209,159,44)" fg:x="1033" fg:w="1"/><text x="83.2886%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="83.1190%" y="693" width="0.0804%" height="15" fill="rgb(251,214,1)" fg:x="1034" fg:w="1"/><text x="83.3690%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.1190%" y="677" width="0.0804%" height="15" fill="rgb(247,84,47)" fg:x="1034" fg:w="1"/><text x="83.3690%" y="687.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="82.7974%" y="709" width="0.4823%" height="15" fill="rgb(240,111,43)" fg:x="1030" fg:w="6"/><text x="83.0474%" y="719.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="83.1994%" y="693" width="0.0804%" height="15" fill="rgb(215,214,35)" fg:x="1035" fg:w="1"/><text x="83.4494%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.1994%" y="677" width="0.0804%" height="15" fill="rgb(248,207,23)" fg:x="1035" fg:w="1"/><text x="83.4494%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="83.1994%" y="661" width="0.0804%" height="15" fill="rgb(214,186,4)" fg:x="1035" fg:w="1"/><text x="83.4494%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="83.2797%" y="709" width="0.0804%" height="15" fill="rgb(220,133,22)" fg:x="1036" fg:w="1"/><text x="83.5297%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="83.2797%" y="693" width="0.0804%" height="15" fill="rgb(239,134,19)" fg:x="1036" fg:w="1"/><text x="83.5297%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="83.2797%" y="677" width="0.0804%" height="15" fill="rgb(250,140,9)" fg:x="1036" fg:w="1"/><text x="83.5297%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="83.2797%" y="661" width="0.0804%" height="15" fill="rgb(225,59,14)" fg:x="1036" fg:w="1"/><text x="83.5297%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.2797%" y="645" width="0.0804%" height="15" fill="rgb(214,152,51)" fg:x="1036" fg:w="1"/><text x="83.5297%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.2797%" y="629" width="0.0804%" height="15" fill="rgb(251,227,43)" fg:x="1036" fg:w="1"/><text x="83.5297%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (1 samples, 0.08%)</title><rect x="83.3601%" y="709" width="0.0804%" height="15" fill="rgb(241,96,17)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="83.3601%" y="693" width="0.0804%" height="15" fill="rgb(234,198,43)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="83.3601%" y="677" width="0.0804%" height="15" fill="rgb(220,108,29)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="83.3601%" y="661" width="0.0804%" height="15" fill="rgb(226,163,33)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="83.3601%" y="645" width="0.0804%" height="15" fill="rgb(205,194,45)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.3601%" y="629" width="0.0804%" height="15" fill="rgb(206,143,44)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.3601%" y="613" width="0.0804%" height="15" fill="rgb(236,136,36)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.3601%" y="597" width="0.0804%" height="15" fill="rgb(249,172,42)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.3601%" y="581" width="0.0804%" height="15" fill="rgb(216,139,23)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.3601%" y="565" width="0.0804%" height="15" fill="rgb(207,166,20)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="83.3601%" y="549" width="0.0804%" height="15" fill="rgb(210,209,22)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="83.3601%" y="533" width="0.0804%" height="15" fill="rgb(232,118,20)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="83.3601%" y="517" width="0.0804%" height="15" fill="rgb(238,113,42)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.3601%" y="501" width="0.0804%" height="15" fill="rgb(231,42,5)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.3601%" y="485" width="0.0804%" height="15" fill="rgb(243,166,24)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="83.3601%" y="469" width="0.0804%" height="15" fill="rgb(237,226,12)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="83.3601%" y="453" width="0.0804%" height="15" fill="rgb(229,133,24)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="83.3601%" y="437" width="0.0804%" height="15" fill="rgb(238,33,43)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="83.3601%" y="421" width="0.0804%" height="15" fill="rgb(227,59,38)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.3601%" y="405" width="0.0804%" height="15" fill="rgb(230,97,0)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="415.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="83.4405%" y="693" width="0.0804%" height="15" fill="rgb(250,173,50)" fg:x="1038" fg:w="1"/><text x="83.6905%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.4405%" y="677" width="0.0804%" height="15" fill="rgb(240,15,50)" fg:x="1038" fg:w="1"/><text x="83.6905%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.4405%" y="661" width="0.0804%" height="15" fill="rgb(221,93,22)" fg:x="1038" fg:w="1"/><text x="83.6905%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u32 (1 samples, 0.08%)</title><rect x="83.4405%" y="645" width="0.0804%" height="15" fill="rgb(245,180,53)" fg:x="1038" fg:w="1"/><text x="83.6905%" y="655.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (2 samples, 0.16%)</title><rect x="83.4405%" y="709" width="0.1608%" height="15" fill="rgb(231,88,51)" fg:x="1038" fg:w="2"/><text x="83.6905%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="83.5209%" y="693" width="0.0804%" height="15" fill="rgb(240,58,21)" fg:x="1039" fg:w="1"/><text x="83.7709%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="83.5209%" y="677" width="0.0804%" height="15" fill="rgb(237,21,10)" fg:x="1039" fg:w="1"/><text x="83.7709%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.5209%" y="661" width="0.0804%" height="15" fill="rgb(218,43,11)" fg:x="1039" fg:w="1"/><text x="83.7709%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.5209%" y="645" width="0.0804%" height="15" fill="rgb(218,221,29)" fg:x="1039" fg:w="1"/><text x="83.7709%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.5209%" y="629" width="0.0804%" height="15" fill="rgb(214,118,42)" fg:x="1039" fg:w="1"/><text x="83.7709%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (23 samples, 1.85%)</title><rect x="81.8328%" y="725" width="1.8489%" height="15" fill="rgb(251,200,26)" fg:x="1018" fg:w="23"/><text x="82.0828%" y="735.50">p..</text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="83.6013%" y="709" width="0.0804%" height="15" fill="rgb(237,101,39)" fg:x="1040" fg:w="1"/><text x="83.8513%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="83.6013%" y="693" width="0.0804%" height="15" fill="rgb(251,117,11)" fg:x="1040" fg:w="1"/><text x="83.8513%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="83.6013%" y="677" width="0.0804%" height="15" fill="rgb(216,223,23)" fg:x="1040" fg:w="1"/><text x="83.8513%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="83.6013%" y="661" width="0.0804%" height="15" fill="rgb(251,54,12)" fg:x="1040" fg:w="1"/><text x="83.8513%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.6013%" y="645" width="0.0804%" height="15" fill="rgb(254,176,54)" fg:x="1040" fg:w="1"/><text x="83.8513%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="83.6013%" y="629" width="0.0804%" height="15" fill="rgb(210,32,8)" fg:x="1040" fg:w="1"/><text x="83.8513%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="83.6817%" y="693" width="0.0804%" height="15" fill="rgb(235,52,38)" fg:x="1041" fg:w="1"/><text x="83.9317%" y="703.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="83.6817%" y="677" width="0.0804%" height="15" fill="rgb(231,4,44)" fg:x="1041" fg:w="1"/><text x="83.9317%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.6817%" y="661" width="0.0804%" height="15" fill="rgb(249,2,32)" fg:x="1041" fg:w="1"/><text x="83.9317%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="83.7621%" y="677" width="0.0804%" height="15" fill="rgb(224,65,26)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="83.7621%" y="661" width="0.0804%" height="15" fill="rgb(250,73,40)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.7621%" y="645" width="0.0804%" height="15" fill="rgb(253,177,16)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.7621%" y="629" width="0.0804%" height="15" fill="rgb(217,32,34)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.7621%" y="613" width="0.0804%" height="15" fill="rgb(212,7,10)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.7621%" y="597" width="0.0804%" height="15" fill="rgb(245,89,8)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="83.7621%" y="581" width="0.0804%" height="15" fill="rgb(237,16,53)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="83.7621%" y="565" width="0.0804%" height="15" fill="rgb(250,204,30)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="83.7621%" y="549" width="0.0804%" height="15" fill="rgb(208,77,27)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.7621%" y="533" width="0.0804%" height="15" fill="rgb(250,204,28)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.7621%" y="517" width="0.0804%" height="15" fill="rgb(244,63,21)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="83.7621%" y="501" width="0.0804%" height="15" fill="rgb(236,85,44)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="83.7621%" y="485" width="0.0804%" height="15" fill="rgb(215,98,4)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="83.7621%" y="469" width="0.0804%" height="15" fill="rgb(235,38,11)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="83.7621%" y="453" width="0.0804%" height="15" fill="rgb(254,186,25)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.7621%" y="437" width="0.0804%" height="15" fill="rgb(225,55,31)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="447.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="83.7621%" y="693" width="0.1608%" height="15" fill="rgb(211,15,21)" fg:x="1042" fg:w="2"/><text x="84.0121%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="83.8424%" y="677" width="0.0804%" height="15" fill="rgb(215,187,41)" fg:x="1043" fg:w="1"/><text x="84.0924%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.8424%" y="661" width="0.0804%" height="15" fill="rgb(248,69,32)" fg:x="1043" fg:w="1"/><text x="84.0924%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.8424%" y="645" width="0.0804%" height="15" fill="rgb(252,102,52)" fg:x="1043" fg:w="1"/><text x="84.0924%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="83.8424%" y="629" width="0.0804%" height="15" fill="rgb(253,140,32)" fg:x="1043" fg:w="1"/><text x="84.0924%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.8424%" y="613" width="0.0804%" height="15" fill="rgb(216,56,42)" fg:x="1043" fg:w="1"/><text x="84.0924%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.8424%" y="597" width="0.0804%" height="15" fill="rgb(216,184,14)" fg:x="1043" fg:w="1"/><text x="84.0924%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.32%)</title><rect x="83.6817%" y="725" width="0.3215%" height="15" fill="rgb(237,187,27)" fg:x="1041" fg:w="4"/><text x="83.9317%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="83.6817%" y="709" width="0.3215%" height="15" fill="rgb(219,65,3)" fg:x="1041" fg:w="4"/><text x="83.9317%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="83.9228%" y="693" width="0.0804%" height="15" fill="rgb(245,83,25)" fg:x="1044" fg:w="1"/><text x="84.1728%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="83.9228%" y="677" width="0.0804%" height="15" fill="rgb(214,205,45)" fg:x="1044" fg:w="1"/><text x="84.1728%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="83.9228%" y="661" width="0.0804%" height="15" fill="rgb(241,20,18)" fg:x="1044" fg:w="1"/><text x="84.1728%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.9228%" y="645" width="0.0804%" height="15" fill="rgb(232,163,23)" fg:x="1044" fg:w="1"/><text x="84.1728%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="83.9228%" y="629" width="0.0804%" height="15" fill="rgb(214,5,46)" fg:x="1044" fg:w="1"/><text x="84.1728%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.9228%" y="613" width="0.0804%" height="15" fill="rgb(229,78,17)" fg:x="1044" fg:w="1"/><text x="84.1728%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="84.0032%" y="709" width="0.0804%" height="15" fill="rgb(248,89,10)" fg:x="1045" fg:w="1"/><text x="84.2532%" y="719.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="84.0032%" y="693" width="0.0804%" height="15" fill="rgb(248,54,15)" fg:x="1045" fg:w="1"/><text x="84.2532%" y="703.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="84.0836%" y="709" width="0.0804%" height="15" fill="rgb(223,116,6)" fg:x="1046" fg:w="1"/><text x="84.3336%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="84.0836%" y="693" width="0.0804%" height="15" fill="rgb(205,125,38)" fg:x="1046" fg:w="1"/><text x="84.3336%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="84.1640%" y="661" width="0.0804%" height="15" fill="rgb(251,78,38)" fg:x="1047" fg:w="1"/><text x="84.4140%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="84.1640%" y="645" width="0.0804%" height="15" fill="rgb(253,78,28)" fg:x="1047" fg:w="1"/><text x="84.4140%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.1640%" y="629" width="0.0804%" height="15" fill="rgb(209,120,3)" fg:x="1047" fg:w="1"/><text x="84.4140%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.1640%" y="613" width="0.0804%" height="15" fill="rgb(238,229,9)" fg:x="1047" fg:w="1"/><text x="84.4140%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.1640%" y="597" width="0.0804%" height="15" fill="rgb(253,159,18)" fg:x="1047" fg:w="1"/><text x="84.4140%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.1640%" y="581" width="0.0804%" height="15" fill="rgb(244,42,34)" fg:x="1047" fg:w="1"/><text x="84.4140%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.1640%" y="565" width="0.0804%" height="15" fill="rgb(224,8,7)" fg:x="1047" fg:w="1"/><text x="84.4140%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="84.1640%" y="549" width="0.0804%" height="15" fill="rgb(210,201,45)" fg:x="1047" fg:w="1"/><text x="84.4140%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="84.1640%" y="533" width="0.0804%" height="15" fill="rgb(252,185,21)" fg:x="1047" fg:w="1"/><text x="84.4140%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="84.1640%" y="517" width="0.0804%" height="15" fill="rgb(223,131,1)" fg:x="1047" fg:w="1"/><text x="84.4140%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.1640%" y="501" width="0.0804%" height="15" fill="rgb(245,141,16)" fg:x="1047" fg:w="1"/><text x="84.4140%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.1640%" y="485" width="0.0804%" height="15" fill="rgb(229,55,45)" fg:x="1047" fg:w="1"/><text x="84.4140%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="84.1640%" y="469" width="0.0804%" height="15" fill="rgb(208,92,15)" fg:x="1047" fg:w="1"/><text x="84.4140%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="84.1640%" y="453" width="0.0804%" height="15" fill="rgb(234,185,47)" fg:x="1047" fg:w="1"/><text x="84.4140%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="84.1640%" y="437" width="0.0804%" height="15" fill="rgb(253,104,50)" fg:x="1047" fg:w="1"/><text x="84.4140%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="84.1640%" y="421" width="0.0804%" height="15" fill="rgb(205,70,7)" fg:x="1047" fg:w="1"/><text x="84.4140%" y="431.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="84.1640%" y="405" width="0.0804%" height="15" fill="rgb(240,178,43)" fg:x="1047" fg:w="1"/><text x="84.4140%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="84.1640%" y="389" width="0.0804%" height="15" fill="rgb(214,112,2)" fg:x="1047" fg:w="1"/><text x="84.4140%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="84.2444%" y="629" width="0.0804%" height="15" fill="rgb(206,46,17)" fg:x="1048" fg:w="1"/><text x="84.4944%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="84.2444%" y="613" width="0.0804%" height="15" fill="rgb(225,220,16)" fg:x="1048" fg:w="1"/><text x="84.4944%" y="623.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (58 samples, 4.66%)</title><rect x="79.7428%" y="741" width="4.6624%" height="15" fill="rgb(238,65,40)" fg:x="992" fg:w="58"/><text x="79.9928%" y="751.50">&lt;test..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (5 samples, 0.40%)</title><rect x="84.0032%" y="725" width="0.4019%" height="15" fill="rgb(230,151,21)" fg:x="1045" fg:w="5"/><text x="84.2532%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="84.1640%" y="709" width="0.2412%" height="15" fill="rgb(218,58,49)" fg:x="1047" fg:w="3"/><text x="84.4140%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="84.1640%" y="693" width="0.2412%" height="15" fill="rgb(219,179,14)" fg:x="1047" fg:w="3"/><text x="84.4140%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="84.1640%" y="677" width="0.2412%" height="15" fill="rgb(223,72,1)" fg:x="1047" fg:w="3"/><text x="84.4140%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="84.2444%" y="661" width="0.1608%" height="15" fill="rgb(238,126,10)" fg:x="1048" fg:w="2"/><text x="84.4944%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="84.2444%" y="645" width="0.1608%" height="15" fill="rgb(224,206,38)" fg:x="1048" fg:w="2"/><text x="84.4944%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="84.3248%" y="629" width="0.0804%" height="15" fill="rgb(212,201,54)" fg:x="1049" fg:w="1"/><text x="84.5748%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.3248%" y="613" width="0.0804%" height="15" fill="rgb(218,154,48)" fg:x="1049" fg:w="1"/><text x="84.5748%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="84.4051%" y="741" width="0.0804%" height="15" fill="rgb(232,93,24)" fg:x="1050" fg:w="1"/><text x="84.6551%" y="751.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="84.4855%" y="629" width="0.1608%" height="15" fill="rgb(245,30,21)" fg:x="1051" fg:w="2"/><text x="84.7355%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="84.5659%" y="613" width="0.0804%" height="15" fill="rgb(242,148,29)" fg:x="1052" fg:w="1"/><text x="84.8159%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="84.5659%" y="597" width="0.0804%" height="15" fill="rgb(244,153,54)" fg:x="1052" fg:w="1"/><text x="84.8159%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="84.5659%" y="581" width="0.0804%" height="15" fill="rgb(252,87,22)" fg:x="1052" fg:w="1"/><text x="84.8159%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="84.6463%" y="565" width="0.0804%" height="15" fill="rgb(210,51,29)" fg:x="1053" fg:w="1"/><text x="84.8963%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="84.6463%" y="613" width="0.1608%" height="15" fill="rgb(242,136,47)" fg:x="1053" fg:w="2"/><text x="84.8963%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="84.6463%" y="597" width="0.1608%" height="15" fill="rgb(238,68,4)" fg:x="1053" fg:w="2"/><text x="84.8963%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="84.6463%" y="581" width="0.1608%" height="15" fill="rgb(242,161,30)" fg:x="1053" fg:w="2"/><text x="84.8963%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="84.7267%" y="565" width="0.0804%" height="15" fill="rgb(218,58,44)" fg:x="1054" fg:w="1"/><text x="84.9767%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="84.8071%" y="581" width="0.0804%" height="15" fill="rgb(252,125,32)" fg:x="1055" fg:w="1"/><text x="85.0571%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="84.8071%" y="597" width="0.1608%" height="15" fill="rgb(219,178,0)" fg:x="1055" fg:w="2"/><text x="85.0571%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="84.8875%" y="581" width="0.0804%" height="15" fill="rgb(213,152,7)" fg:x="1056" fg:w="1"/><text x="85.1375%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="84.8875%" y="565" width="0.0804%" height="15" fill="rgb(249,109,34)" fg:x="1056" fg:w="1"/><text x="85.1375%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="84.8875%" y="549" width="0.0804%" height="15" fill="rgb(232,96,21)" fg:x="1056" fg:w="1"/><text x="85.1375%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="84.8875%" y="533" width="0.0804%" height="15" fill="rgb(228,27,39)" fg:x="1056" fg:w="1"/><text x="85.1375%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="84.4855%" y="645" width="0.5627%" height="15" fill="rgb(211,182,52)" fg:x="1051" fg:w="7"/><text x="84.7355%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="84.6463%" y="629" width="0.4019%" height="15" fill="rgb(234,178,38)" fg:x="1053" fg:w="5"/><text x="84.8963%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="84.8071%" y="613" width="0.2412%" height="15" fill="rgb(221,111,3)" fg:x="1055" fg:w="3"/><text x="85.0571%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="84.9678%" y="597" width="0.0804%" height="15" fill="rgb(228,175,21)" fg:x="1057" fg:w="1"/><text x="85.2178%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.0482%" y="645" width="0.0804%" height="15" fill="rgb(228,174,43)" fg:x="1058" fg:w="1"/><text x="85.2982%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="85.0482%" y="629" width="0.0804%" height="15" fill="rgb(211,191,0)" fg:x="1058" fg:w="1"/><text x="85.2982%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.0482%" y="613" width="0.0804%" height="15" fill="rgb(253,117,3)" fg:x="1058" fg:w="1"/><text x="85.2982%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.0482%" y="597" width="0.0804%" height="15" fill="rgb(241,127,19)" fg:x="1058" fg:w="1"/><text x="85.2982%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="85.1286%" y="581" width="0.0804%" height="15" fill="rgb(218,103,12)" fg:x="1059" fg:w="1"/><text x="85.3786%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.2090%" y="565" width="0.0804%" height="15" fill="rgb(236,214,43)" fg:x="1060" fg:w="1"/><text x="85.4590%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="85.1286%" y="613" width="0.2412%" height="15" fill="rgb(244,144,19)" fg:x="1059" fg:w="3"/><text x="85.3786%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="85.1286%" y="597" width="0.2412%" height="15" fill="rgb(246,188,10)" fg:x="1059" fg:w="3"/><text x="85.3786%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="85.2090%" y="581" width="0.1608%" height="15" fill="rgb(212,193,33)" fg:x="1060" fg:w="2"/><text x="85.4590%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.2894%" y="565" width="0.0804%" height="15" fill="rgb(241,51,29)" fg:x="1061" fg:w="1"/><text x="85.5394%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.2894%" y="549" width="0.0804%" height="15" fill="rgb(211,58,19)" fg:x="1061" fg:w="1"/><text x="85.5394%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="85.2894%" y="533" width="0.0804%" height="15" fill="rgb(229,111,26)" fg:x="1061" fg:w="1"/><text x="85.5394%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="85.2894%" y="517" width="0.0804%" height="15" fill="rgb(213,115,40)" fg:x="1061" fg:w="1"/><text x="85.5394%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.2894%" y="501" width="0.0804%" height="15" fill="rgb(209,56,44)" fg:x="1061" fg:w="1"/><text x="85.5394%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.2894%" y="485" width="0.0804%" height="15" fill="rgb(230,108,32)" fg:x="1061" fg:w="1"/><text x="85.5394%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.2894%" y="469" width="0.0804%" height="15" fill="rgb(216,165,31)" fg:x="1061" fg:w="1"/><text x="85.5394%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.32%)</title><rect x="85.1286%" y="629" width="0.3215%" height="15" fill="rgb(218,122,21)" fg:x="1059" fg:w="4"/><text x="85.3786%" y="639.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="85.3698%" y="613" width="0.0804%" height="15" fill="rgb(223,224,47)" fg:x="1062" fg:w="1"/><text x="85.6198%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="85.3698%" y="597" width="0.0804%" height="15" fill="rgb(238,102,44)" fg:x="1062" fg:w="1"/><text x="85.6198%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="85.3698%" y="581" width="0.0804%" height="15" fill="rgb(236,46,40)" fg:x="1062" fg:w="1"/><text x="85.6198%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="85.3698%" y="565" width="0.0804%" height="15" fill="rgb(247,202,50)" fg:x="1062" fg:w="1"/><text x="85.6198%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="85.3698%" y="549" width="0.0804%" height="15" fill="rgb(209,99,20)" fg:x="1062" fg:w="1"/><text x="85.6198%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="85.3698%" y="533" width="0.0804%" height="15" fill="rgb(252,27,34)" fg:x="1062" fg:w="1"/><text x="85.6198%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="85.4502%" y="597" width="0.1608%" height="15" fill="rgb(215,206,23)" fg:x="1063" fg:w="2"/><text x="85.7002%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="85.5305%" y="581" width="0.0804%" height="15" fill="rgb(212,135,36)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="85.6109%" y="597" width="0.0804%" height="15" fill="rgb(240,189,1)" fg:x="1065" fg:w="1"/><text x="85.8609%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="85.6109%" y="581" width="0.0804%" height="15" fill="rgb(242,56,20)" fg:x="1065" fg:w="1"/><text x="85.8609%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.6109%" y="565" width="0.0804%" height="15" fill="rgb(247,132,33)" fg:x="1065" fg:w="1"/><text x="85.8609%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.7717%" y="549" width="0.0804%" height="15" fill="rgb(208,149,11)" fg:x="1067" fg:w="1"/><text x="86.0217%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="85.8521%" y="533" width="0.0804%" height="15" fill="rgb(211,33,11)" fg:x="1068" fg:w="1"/><text x="86.1021%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="85.8521%" y="549" width="0.1608%" height="15" fill="rgb(221,29,38)" fg:x="1068" fg:w="2"/><text x="86.1021%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="85.9325%" y="533" width="0.0804%" height="15" fill="rgb(206,182,49)" fg:x="1069" fg:w="1"/><text x="86.1825%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="85.9325%" y="517" width="0.0804%" height="15" fill="rgb(216,140,1)" fg:x="1069" fg:w="1"/><text x="86.1825%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="85.9325%" y="501" width="0.0804%" height="15" fill="rgb(232,57,40)" fg:x="1069" fg:w="1"/><text x="86.1825%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="85.9325%" y="485" width="0.0804%" height="15" fill="rgb(224,186,18)" fg:x="1069" fg:w="1"/><text x="86.1825%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="85.9325%" y="469" width="0.0804%" height="15" fill="rgb(215,121,11)" fg:x="1069" fg:w="1"/><text x="86.1825%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="85.9325%" y="453" width="0.0804%" height="15" fill="rgb(245,147,10)" fg:x="1069" fg:w="1"/><text x="86.1825%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="85.9325%" y="437" width="0.0804%" height="15" fill="rgb(238,153,13)" fg:x="1069" fg:w="1"/><text x="86.1825%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.9325%" y="421" width="0.0804%" height="15" fill="rgb(233,108,0)" fg:x="1069" fg:w="1"/><text x="86.1825%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="86.0129%" y="501" width="0.0804%" height="15" fill="rgb(212,157,17)" fg:x="1070" fg:w="1"/><text x="86.2629%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.0129%" y="485" width="0.0804%" height="15" fill="rgb(225,213,38)" fg:x="1070" fg:w="1"/><text x="86.2629%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="85.4502%" y="629" width="0.7235%" height="15" fill="rgb(248,16,11)" fg:x="1063" fg:w="9"/><text x="85.7002%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="85.4502%" y="613" width="0.7235%" height="15" fill="rgb(241,33,4)" fg:x="1063" fg:w="9"/><text x="85.7002%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="85.6913%" y="597" width="0.4823%" height="15" fill="rgb(222,26,43)" fg:x="1066" fg:w="6"/><text x="85.9413%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="85.7717%" y="581" width="0.4019%" height="15" fill="rgb(243,29,36)" fg:x="1067" fg:w="5"/><text x="86.0217%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="85.7717%" y="565" width="0.4019%" height="15" fill="rgb(241,9,27)" fg:x="1067" fg:w="5"/><text x="86.0217%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="86.0129%" y="549" width="0.1608%" height="15" fill="rgb(205,117,26)" fg:x="1070" fg:w="2"/><text x="86.2629%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="86.0129%" y="533" width="0.1608%" height="15" fill="rgb(209,80,39)" fg:x="1070" fg:w="2"/><text x="86.2629%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="86.0129%" y="517" width="0.1608%" height="15" fill="rgb(239,155,6)" fg:x="1070" fg:w="2"/><text x="86.2629%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.0932%" y="501" width="0.0804%" height="15" fill="rgb(212,104,12)" fg:x="1071" fg:w="1"/><text x="86.3432%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="86.4952%" y="485" width="0.0804%" height="15" fill="rgb(234,204,3)" fg:x="1076" fg:w="1"/><text x="86.7452%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="86.4952%" y="469" width="0.0804%" height="15" fill="rgb(251,218,7)" fg:x="1076" fg:w="1"/><text x="86.7452%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="86.4952%" y="453" width="0.0804%" height="15" fill="rgb(221,81,32)" fg:x="1076" fg:w="1"/><text x="86.7452%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.4952%" y="437" width="0.0804%" height="15" fill="rgb(214,152,26)" fg:x="1076" fg:w="1"/><text x="86.7452%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="86.5756%" y="469" width="0.2412%" height="15" fill="rgb(223,22,3)" fg:x="1077" fg:w="3"/><text x="86.8256%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="86.6559%" y="453" width="0.1608%" height="15" fill="rgb(207,174,7)" fg:x="1078" fg:w="2"/><text x="86.9059%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="86.6559%" y="437" width="0.1608%" height="15" fill="rgb(224,19,52)" fg:x="1078" fg:w="2"/><text x="86.9059%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.7363%" y="421" width="0.0804%" height="15" fill="rgb(228,24,14)" fg:x="1079" fg:w="1"/><text x="86.9863%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="86.3344%" y="533" width="0.5627%" height="15" fill="rgb(230,153,43)" fg:x="1074" fg:w="7"/><text x="86.5844%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="86.4148%" y="517" width="0.4823%" height="15" fill="rgb(231,106,12)" fg:x="1075" fg:w="6"/><text x="86.6648%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="86.4148%" y="501" width="0.4823%" height="15" fill="rgb(215,92,2)" fg:x="1075" fg:w="6"/><text x="86.6648%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="86.5756%" y="485" width="0.3215%" height="15" fill="rgb(249,143,25)" fg:x="1077" fg:w="4"/><text x="86.8256%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="86.8167%" y="469" width="0.0804%" height="15" fill="rgb(252,7,35)" fg:x="1080" fg:w="1"/><text x="87.0667%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.8167%" y="453" width="0.0804%" height="15" fill="rgb(216,69,40)" fg:x="1080" fg:w="1"/><text x="87.0667%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.72%)</title><rect x="86.2540%" y="565" width="0.7235%" height="15" fill="rgb(240,36,33)" fg:x="1073" fg:w="9"/><text x="86.5040%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="86.3344%" y="549" width="0.6431%" height="15" fill="rgb(231,128,14)" fg:x="1074" fg:w="8"/><text x="86.5844%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.8971%" y="533" width="0.0804%" height="15" fill="rgb(245,143,14)" fg:x="1081" fg:w="1"/><text x="87.1471%" y="543.50"></text></g><g><title>engine::session::Session::close (32 samples, 2.57%)</title><rect x="84.4855%" y="741" width="2.5723%" height="15" fill="rgb(222,130,28)" fg:x="1051" fg:w="32"/><text x="84.7355%" y="751.50">en..</text></g><g><title>engine::session::state::State::close (32 samples, 2.57%)</title><rect x="84.4855%" y="725" width="2.5723%" height="15" fill="rgb(212,10,48)" fg:x="1051" fg:w="32"/><text x="84.7355%" y="735.50">en..</text></g><g><title>engine::session::state::State::flush_entities (32 samples, 2.57%)</title><rect x="84.4855%" y="709" width="2.5723%" height="15" fill="rgb(254,118,45)" fg:x="1051" fg:w="32"/><text x="84.7355%" y="719.50">en..</text></g><g><title>core::iter::adapters::try_process (32 samples, 2.57%)</title><rect x="84.4855%" y="693" width="2.5723%" height="15" fill="rgb(228,6,45)" fg:x="1051" fg:w="32"/><text x="84.7355%" y="703.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (32 samples, 2.57%)</title><rect x="84.4855%" y="677" width="2.5723%" height="15" fill="rgb(241,18,35)" fg:x="1051" fg:w="32"/><text x="84.7355%" y="687.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (32 samples, 2.57%)</title><rect x="84.4855%" y="661" width="2.5723%" height="15" fill="rgb(227,214,53)" fg:x="1051" fg:w="32"/><text x="84.7355%" y="671.50">en..</text></g><g><title>kernel::model::any_entity_changes (24 samples, 1.93%)</title><rect x="85.1286%" y="645" width="1.9293%" height="15" fill="rgb(224,107,51)" fg:x="1059" fg:w="24"/><text x="85.3786%" y="655.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (11 samples, 0.88%)</title><rect x="86.1736%" y="629" width="0.8842%" height="15" fill="rgb(248,60,28)" fg:x="1072" fg:w="11"/><text x="86.4236%" y="639.50"></text></g><g><title>serde_json::de::from_trait (11 samples, 0.88%)</title><rect x="86.1736%" y="613" width="0.8842%" height="15" fill="rgb(249,101,23)" fg:x="1072" fg:w="11"/><text x="86.4236%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.88%)</title><rect x="86.1736%" y="597" width="0.8842%" height="15" fill="rgb(228,51,19)" fg:x="1072" fg:w="11"/><text x="86.4236%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.88%)</title><rect x="86.1736%" y="581" width="0.8842%" height="15" fill="rgb(213,20,6)" fg:x="1072" fg:w="11"/><text x="86.4236%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="86.9775%" y="565" width="0.0804%" height="15" fill="rgb(212,124,10)" fg:x="1082" fg:w="1"/><text x="87.2275%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.9775%" y="549" width="0.0804%" height="15" fill="rgb(248,3,40)" fg:x="1082" fg:w="1"/><text x="87.2275%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="87.0579%" y="709" width="0.0804%" height="15" fill="rgb(223,178,23)" fg:x="1083" fg:w="1"/><text x="87.3079%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="87.0579%" y="693" width="0.0804%" height="15" fill="rgb(240,132,45)" fg:x="1083" fg:w="1"/><text x="87.3079%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="87.0579%" y="677" width="0.0804%" height="15" fill="rgb(245,164,36)" fg:x="1083" fg:w="1"/><text x="87.3079%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="87.1383%" y="693" width="0.0804%" height="15" fill="rgb(231,188,53)" fg:x="1084" fg:w="1"/><text x="87.3883%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="87.1383%" y="677" width="0.0804%" height="15" fill="rgb(237,198,39)" fg:x="1084" fg:w="1"/><text x="87.3883%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="87.1383%" y="661" width="0.0804%" height="15" fill="rgb(223,120,35)" fg:x="1084" fg:w="1"/><text x="87.3883%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="87.1383%" y="645" width="0.0804%" height="15" fill="rgb(253,107,49)" fg:x="1084" fg:w="1"/><text x="87.3883%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="87.1383%" y="629" width="0.0804%" height="15" fill="rgb(216,44,31)" fg:x="1084" fg:w="1"/><text x="87.3883%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (1 samples, 0.08%)</title><rect x="87.1383%" y="613" width="0.0804%" height="15" fill="rgb(253,87,21)" fg:x="1084" fg:w="1"/><text x="87.3883%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="87.1383%" y="597" width="0.0804%" height="15" fill="rgb(226,18,2)" fg:x="1084" fg:w="1"/><text x="87.3883%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="87.1383%" y="581" width="0.0804%" height="15" fill="rgb(216,8,46)" fg:x="1084" fg:w="1"/><text x="87.3883%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="87.1383%" y="565" width="0.0804%" height="15" fill="rgb(226,140,39)" fg:x="1084" fg:w="1"/><text x="87.3883%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="87.1383%" y="549" width="0.0804%" height="15" fill="rgb(221,194,54)" fg:x="1084" fg:w="1"/><text x="87.3883%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="87.2990%" y="565" width="0.1608%" height="15" fill="rgb(213,92,11)" fg:x="1086" fg:w="2"/><text x="87.5490%" y="575.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="87.3794%" y="549" width="0.0804%" height="15" fill="rgb(229,162,46)" fg:x="1087" fg:w="1"/><text x="87.6294%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.4598%" y="501" width="0.0804%" height="15" fill="rgb(214,111,36)" fg:x="1088" fg:w="1"/><text x="87.7098%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.4598%" y="485" width="0.0804%" height="15" fill="rgb(207,6,21)" fg:x="1088" fg:w="1"/><text x="87.7098%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.4598%" y="469" width="0.0804%" height="15" fill="rgb(213,127,38)" fg:x="1088" fg:w="1"/><text x="87.7098%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="87.4598%" y="453" width="0.0804%" height="15" fill="rgb(238,118,32)" fg:x="1088" fg:w="1"/><text x="87.7098%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="87.4598%" y="437" width="0.0804%" height="15" fill="rgb(240,139,39)" fg:x="1088" fg:w="1"/><text x="87.7098%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="87.4598%" y="421" width="0.0804%" height="15" fill="rgb(235,10,37)" fg:x="1088" fg:w="1"/><text x="87.7098%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.4598%" y="405" width="0.0804%" height="15" fill="rgb(249,171,38)" fg:x="1088" fg:w="1"/><text x="87.7098%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.4598%" y="389" width="0.0804%" height="15" fill="rgb(242,144,32)" fg:x="1088" fg:w="1"/><text x="87.7098%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="87.4598%" y="373" width="0.0804%" height="15" fill="rgb(217,117,21)" fg:x="1088" fg:w="1"/><text x="87.7098%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="87.4598%" y="357" width="0.0804%" height="15" fill="rgb(249,87,1)" fg:x="1088" fg:w="1"/><text x="87.7098%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="87.4598%" y="341" width="0.0804%" height="15" fill="rgb(248,196,48)" fg:x="1088" fg:w="1"/><text x="87.7098%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="87.4598%" y="325" width="0.0804%" height="15" fill="rgb(251,206,33)" fg:x="1088" fg:w="1"/><text x="87.7098%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.4598%" y="309" width="0.0804%" height="15" fill="rgb(232,141,28)" fg:x="1088" fg:w="1"/><text x="87.7098%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="87.5402%" y="453" width="0.0804%" height="15" fill="rgb(209,167,14)" fg:x="1089" fg:w="1"/><text x="87.7902%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.5402%" y="437" width="0.0804%" height="15" fill="rgb(225,11,50)" fg:x="1089" fg:w="1"/><text x="87.7902%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="87.5402%" y="421" width="0.0804%" height="15" fill="rgb(209,50,20)" fg:x="1089" fg:w="1"/><text x="87.7902%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="87.5402%" y="405" width="0.0804%" height="15" fill="rgb(212,17,46)" fg:x="1089" fg:w="1"/><text x="87.7902%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.5402%" y="389" width="0.0804%" height="15" fill="rgb(216,101,39)" fg:x="1089" fg:w="1"/><text x="87.7902%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="87.5402%" y="373" width="0.0804%" height="15" fill="rgb(212,228,48)" fg:x="1089" fg:w="1"/><text x="87.7902%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="87.5402%" y="357" width="0.0804%" height="15" fill="rgb(250,6,50)" fg:x="1089" fg:w="1"/><text x="87.7902%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="87.5402%" y="341" width="0.0804%" height="15" fill="rgb(250,160,48)" fg:x="1089" fg:w="1"/><text x="87.7902%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="87.5402%" y="501" width="0.1608%" height="15" fill="rgb(244,216,33)" fg:x="1089" fg:w="2"/><text x="87.7902%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="87.5402%" y="485" width="0.1608%" height="15" fill="rgb(207,157,5)" fg:x="1089" fg:w="2"/><text x="87.7902%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="87.5402%" y="469" width="0.1608%" height="15" fill="rgb(228,199,8)" fg:x="1089" fg:w="2"/><text x="87.7902%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.6206%" y="453" width="0.0804%" height="15" fill="rgb(227,80,20)" fg:x="1090" fg:w="1"/><text x="87.8706%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.6206%" y="437" width="0.0804%" height="15" fill="rgb(222,9,33)" fg:x="1090" fg:w="1"/><text x="87.8706%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="87.6206%" y="421" width="0.0804%" height="15" fill="rgb(239,44,28)" fg:x="1090" fg:w="1"/><text x="87.8706%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="87.7010%" y="325" width="0.0804%" height="15" fill="rgb(249,187,43)" fg:x="1091" fg:w="1"/><text x="87.9510%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="87.7010%" y="373" width="0.1608%" height="15" fill="rgb(216,141,28)" fg:x="1091" fg:w="2"/><text x="87.9510%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="87.7010%" y="357" width="0.1608%" height="15" fill="rgb(230,154,53)" fg:x="1091" fg:w="2"/><text x="87.9510%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="87.7010%" y="341" width="0.1608%" height="15" fill="rgb(227,82,4)" fg:x="1091" fg:w="2"/><text x="87.9510%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.7814%" y="325" width="0.0804%" height="15" fill="rgb(220,107,16)" fg:x="1092" fg:w="1"/><text x="88.0314%" y="335.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (9 samples, 0.72%)</title><rect x="87.2186%" y="597" width="0.7235%" height="15" fill="rgb(207,187,2)" fg:x="1085" fg:w="9"/><text x="87.4686%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (9 samples, 0.72%)</title><rect x="87.2186%" y="581" width="0.7235%" height="15" fill="rgb(210,162,52)" fg:x="1085" fg:w="9"/><text x="87.4686%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.48%)</title><rect x="87.4598%" y="565" width="0.4823%" height="15" fill="rgb(217,216,49)" fg:x="1088" fg:w="6"/><text x="87.7098%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.48%)</title><rect x="87.4598%" y="549" width="0.4823%" height="15" fill="rgb(218,146,49)" fg:x="1088" fg:w="6"/><text x="87.7098%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="87.4598%" y="533" width="0.4823%" height="15" fill="rgb(216,55,40)" fg:x="1088" fg:w="6"/><text x="87.7098%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="87.4598%" y="517" width="0.4823%" height="15" fill="rgb(208,196,21)" fg:x="1088" fg:w="6"/><text x="87.7098%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="87.7010%" y="501" width="0.2412%" height="15" fill="rgb(242,117,42)" fg:x="1091" fg:w="3"/><text x="87.9510%" y="511.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="87.7010%" y="485" width="0.2412%" height="15" fill="rgb(210,11,23)" fg:x="1091" fg:w="3"/><text x="87.9510%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="87.7010%" y="469" width="0.2412%" height="15" fill="rgb(217,110,2)" fg:x="1091" fg:w="3"/><text x="87.9510%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="87.7010%" y="453" width="0.2412%" height="15" fill="rgb(229,77,54)" fg:x="1091" fg:w="3"/><text x="87.9510%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="87.7010%" y="437" width="0.2412%" height="15" fill="rgb(218,53,16)" fg:x="1091" fg:w="3"/><text x="87.9510%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="87.7010%" y="421" width="0.2412%" height="15" fill="rgb(215,38,13)" fg:x="1091" fg:w="3"/><text x="87.9510%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="87.7010%" y="405" width="0.2412%" height="15" fill="rgb(235,42,18)" fg:x="1091" fg:w="3"/><text x="87.9510%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="87.7010%" y="389" width="0.2412%" height="15" fill="rgb(219,66,54)" fg:x="1091" fg:w="3"/><text x="87.9510%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="87.8617%" y="373" width="0.0804%" height="15" fill="rgb(222,205,4)" fg:x="1093" fg:w="1"/><text x="88.1117%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.8617%" y="357" width="0.0804%" height="15" fill="rgb(227,213,46)" fg:x="1093" fg:w="1"/><text x="88.1117%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.9421%" y="325" width="0.0804%" height="15" fill="rgb(250,145,42)" fg:x="1094" fg:w="1"/><text x="88.1921%" y="335.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (2 samples, 0.16%)</title><rect x="87.9421%" y="421" width="0.1608%" height="15" fill="rgb(219,15,2)" fg:x="1094" fg:w="2"/><text x="88.1921%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="87.9421%" y="405" width="0.1608%" height="15" fill="rgb(231,181,52)" fg:x="1094" fg:w="2"/><text x="88.1921%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (2 samples, 0.16%)</title><rect x="87.9421%" y="389" width="0.1608%" height="15" fill="rgb(235,1,42)" fg:x="1094" fg:w="2"/><text x="88.1921%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="87.9421%" y="373" width="0.1608%" height="15" fill="rgb(249,88,27)" fg:x="1094" fg:w="2"/><text x="88.1921%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="87.9421%" y="357" width="0.1608%" height="15" fill="rgb(235,145,16)" fg:x="1094" fg:w="2"/><text x="88.1921%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="87.9421%" y="341" width="0.1608%" height="15" fill="rgb(237,114,19)" fg:x="1094" fg:w="2"/><text x="88.1921%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.0225%" y="325" width="0.0804%" height="15" fill="rgb(238,51,50)" fg:x="1095" fg:w="1"/><text x="88.2725%" y="335.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="88.0225%" y="309" width="0.0804%" height="15" fill="rgb(205,194,25)" fg:x="1095" fg:w="1"/><text x="88.2725%" y="319.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="88.1029%" y="389" width="0.1608%" height="15" fill="rgb(215,203,17)" fg:x="1096" fg:w="2"/><text x="88.3529%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="88.1029%" y="373" width="0.1608%" height="15" fill="rgb(233,112,49)" fg:x="1096" fg:w="2"/><text x="88.3529%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="88.1029%" y="357" width="0.1608%" height="15" fill="rgb(241,130,26)" fg:x="1096" fg:w="2"/><text x="88.3529%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="88.1029%" y="341" width="0.1608%" height="15" fill="rgb(252,223,19)" fg:x="1096" fg:w="2"/><text x="88.3529%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="88.1029%" y="325" width="0.1608%" height="15" fill="rgb(211,95,25)" fg:x="1096" fg:w="2"/><text x="88.3529%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.1833%" y="309" width="0.0804%" height="15" fill="rgb(251,182,27)" fg:x="1097" fg:w="1"/><text x="88.4333%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.1833%" y="293" width="0.0804%" height="15" fill="rgb(238,24,4)" fg:x="1097" fg:w="1"/><text x="88.4333%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.1833%" y="277" width="0.0804%" height="15" fill="rgb(224,220,25)" fg:x="1097" fg:w="1"/><text x="88.4333%" y="287.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="88.2637%" y="389" width="0.0804%" height="15" fill="rgb(239,133,26)" fg:x="1098" fg:w="1"/><text x="88.5137%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="88.2637%" y="373" width="0.0804%" height="15" fill="rgb(211,94,48)" fg:x="1098" fg:w="1"/><text x="88.5137%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="88.2637%" y="357" width="0.0804%" height="15" fill="rgb(239,87,6)" fg:x="1098" fg:w="1"/><text x="88.5137%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="88.2637%" y="341" width="0.0804%" height="15" fill="rgb(227,62,0)" fg:x="1098" fg:w="1"/><text x="88.5137%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.3441%" y="373" width="0.0804%" height="15" fill="rgb(211,226,4)" fg:x="1099" fg:w="1"/><text x="88.5941%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="88.3441%" y="357" width="0.0804%" height="15" fill="rgb(253,38,52)" fg:x="1099" fg:w="1"/><text x="88.5941%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="88.4244%" y="373" width="0.0804%" height="15" fill="rgb(229,126,40)" fg:x="1100" fg:w="1"/><text x="88.6744%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="88.5048%" y="373" width="0.0804%" height="15" fill="rgb(229,165,44)" fg:x="1101" fg:w="1"/><text x="88.7548%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.5852%" y="277" width="0.0804%" height="15" fill="rgb(247,95,47)" fg:x="1102" fg:w="1"/><text x="88.8352%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.40%)</title><rect x="88.3441%" y="389" width="0.4019%" height="15" fill="rgb(216,140,30)" fg:x="1099" fg:w="5"/><text x="88.5941%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="88.5852%" y="373" width="0.1608%" height="15" fill="rgb(246,214,8)" fg:x="1102" fg:w="2"/><text x="88.8352%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="88.5852%" y="357" width="0.1608%" height="15" fill="rgb(227,224,15)" fg:x="1102" fg:w="2"/><text x="88.8352%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="88.5852%" y="341" width="0.1608%" height="15" fill="rgb(233,175,4)" fg:x="1102" fg:w="2"/><text x="88.8352%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="88.5852%" y="325" width="0.1608%" height="15" fill="rgb(221,66,45)" fg:x="1102" fg:w="2"/><text x="88.8352%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="88.5852%" y="309" width="0.1608%" height="15" fill="rgb(221,178,18)" fg:x="1102" fg:w="2"/><text x="88.8352%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="88.5852%" y="293" width="0.1608%" height="15" fill="rgb(213,81,29)" fg:x="1102" fg:w="2"/><text x="88.8352%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="88.6656%" y="277" width="0.0804%" height="15" fill="rgb(220,89,49)" fg:x="1103" fg:w="1"/><text x="88.9156%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.8264%" y="357" width="0.0804%" height="15" fill="rgb(227,60,33)" fg:x="1105" fg:w="1"/><text x="89.0764%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="88.7460%" y="373" width="0.2412%" height="15" fill="rgb(205,113,12)" fg:x="1104" fg:w="3"/><text x="88.9960%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.9068%" y="357" width="0.0804%" height="15" fill="rgb(211,32,1)" fg:x="1106" fg:w="1"/><text x="89.1568%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.9068%" y="341" width="0.0804%" height="15" fill="rgb(246,2,12)" fg:x="1106" fg:w="1"/><text x="89.1568%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="88.9068%" y="325" width="0.0804%" height="15" fill="rgb(243,37,27)" fg:x="1106" fg:w="1"/><text x="89.1568%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.9068%" y="309" width="0.0804%" height="15" fill="rgb(248,211,31)" fg:x="1106" fg:w="1"/><text x="89.1568%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.9068%" y="293" width="0.0804%" height="15" fill="rgb(242,146,47)" fg:x="1106" fg:w="1"/><text x="89.1568%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.9068%" y="277" width="0.0804%" height="15" fill="rgb(206,70,20)" fg:x="1106" fg:w="1"/><text x="89.1568%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::gid (4 samples, 0.32%)</title><rect x="88.7460%" y="389" width="0.3215%" height="15" fill="rgb(215,10,51)" fg:x="1104" fg:w="4"/><text x="88.9960%" y="399.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="88.9871%" y="373" width="0.0804%" height="15" fill="rgb(243,178,53)" fg:x="1107" fg:w="1"/><text x="89.2371%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="88.9871%" y="357" width="0.0804%" height="15" fill="rgb(233,221,20)" fg:x="1107" fg:w="1"/><text x="89.2371%" y="367.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="89.0675%" y="389" width="0.0804%" height="15" fill="rgb(218,95,35)" fg:x="1108" fg:w="1"/><text x="89.3175%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="89.0675%" y="373" width="0.0804%" height="15" fill="rgb(229,13,5)" fg:x="1108" fg:w="1"/><text x="89.3175%" y="383.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="89.1479%" y="325" width="0.0804%" height="15" fill="rgb(252,164,30)" fg:x="1109" fg:w="1"/><text x="89.3979%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="89.2283%" y="309" width="0.0804%" height="15" fill="rgb(232,68,36)" fg:x="1110" fg:w="1"/><text x="89.4783%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="89.2283%" y="293" width="0.0804%" height="15" fill="rgb(219,59,54)" fg:x="1110" fg:w="1"/><text x="89.4783%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="89.2283%" y="277" width="0.0804%" height="15" fill="rgb(250,92,33)" fg:x="1110" fg:w="1"/><text x="89.4783%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="89.2283%" y="261" width="0.0804%" height="15" fill="rgb(229,162,54)" fg:x="1110" fg:w="1"/><text x="89.4783%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="89.2283%" y="245" width="0.0804%" height="15" fill="rgb(244,114,52)" fg:x="1110" fg:w="1"/><text x="89.4783%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="89.3891%" y="245" width="0.3215%" height="15" fill="rgb(212,211,43)" fg:x="1112" fg:w="4"/><text x="89.6391%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="89.3891%" y="229" width="0.3215%" height="15" fill="rgb(226,147,8)" fg:x="1112" fg:w="4"/><text x="89.6391%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.6302%" y="213" width="0.0804%" height="15" fill="rgb(226,23,13)" fg:x="1115" fg:w="1"/><text x="89.8802%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="89.7106%" y="245" width="0.1608%" height="15" fill="rgb(240,63,4)" fg:x="1116" fg:w="2"/><text x="89.9606%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="89.7910%" y="229" width="0.0804%" height="15" fill="rgb(221,1,32)" fg:x="1117" fg:w="1"/><text x="90.0410%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="89.8714%" y="181" width="0.0804%" height="15" fill="rgb(242,117,10)" fg:x="1118" fg:w="1"/><text x="90.1214%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="89.9518%" y="181" width="0.0804%" height="15" fill="rgb(249,172,44)" fg:x="1119" fg:w="1"/><text x="90.2018%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.9518%" y="165" width="0.0804%" height="15" fill="rgb(244,46,45)" fg:x="1119" fg:w="1"/><text x="90.2018%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.9518%" y="149" width="0.0804%" height="15" fill="rgb(206,43,17)" fg:x="1119" fg:w="1"/><text x="90.2018%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (22 samples, 1.77%)</title><rect x="90.0322%" y="181" width="1.7685%" height="15" fill="rgb(239,218,39)" fg:x="1120" fg:w="22"/><text x="90.2822%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (22 samples, 1.77%)</title><rect x="90.0322%" y="165" width="1.7685%" height="15" fill="rgb(208,169,54)" fg:x="1120" fg:w="22"/><text x="90.2822%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (22 samples, 1.77%)</title><rect x="90.0322%" y="149" width="1.7685%" height="15" fill="rgb(247,25,42)" fg:x="1120" fg:w="22"/><text x="90.2822%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 2.01%)</title><rect x="89.8714%" y="229" width="2.0096%" height="15" fill="rgb(226,23,31)" fg:x="1118" fg:w="25"/><text x="90.1214%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (25 samples, 2.01%)</title><rect x="89.8714%" y="213" width="2.0096%" height="15" fill="rgb(247,16,28)" fg:x="1118" fg:w="25"/><text x="90.1214%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (25 samples, 2.01%)</title><rect x="89.8714%" y="197" width="2.0096%" height="15" fill="rgb(231,147,38)" fg:x="1118" fg:w="25"/><text x="90.1214%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="91.8006%" y="181" width="0.0804%" height="15" fill="rgb(253,81,48)" fg:x="1142" fg:w="1"/><text x="92.0506%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.8810%" y="213" width="0.0804%" height="15" fill="rgb(249,222,43)" fg:x="1143" fg:w="1"/><text x="92.1310%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="91.8810%" y="229" width="0.1608%" height="15" fill="rgb(221,3,27)" fg:x="1143" fg:w="2"/><text x="92.1310%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="91.9614%" y="213" width="0.0804%" height="15" fill="rgb(228,180,5)" fg:x="1144" fg:w="1"/><text x="92.2114%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="92.0418%" y="229" width="0.0804%" height="15" fill="rgb(227,131,42)" fg:x="1145" fg:w="1"/><text x="92.2918%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="92.0418%" y="213" width="0.0804%" height="15" fill="rgb(212,3,39)" fg:x="1145" fg:w="1"/><text x="92.2918%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (36 samples, 2.89%)</title><rect x="89.3087%" y="261" width="2.8939%" height="15" fill="rgb(226,45,5)" fg:x="1111" fg:w="36"/><text x="89.5587%" y="271.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (29 samples, 2.33%)</title><rect x="89.8714%" y="245" width="2.3312%" height="15" fill="rgb(215,167,45)" fg:x="1118" fg:w="29"/><text x="90.1214%" y="255.50">r..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="92.1222%" y="229" width="0.0804%" height="15" fill="rgb(250,218,53)" fg:x="1146" fg:w="1"/><text x="92.3722%" y="239.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="92.1222%" y="213" width="0.0804%" height="15" fill="rgb(207,140,0)" fg:x="1146" fg:w="1"/><text x="92.3722%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="92.2026%" y="213" width="0.0804%" height="15" fill="rgb(238,133,51)" fg:x="1147" fg:w="1"/><text x="92.4526%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="92.2830%" y="213" width="0.0804%" height="15" fill="rgb(218,203,53)" fg:x="1148" fg:w="1"/><text x="92.5330%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="92.2830%" y="197" width="0.0804%" height="15" fill="rgb(226,184,25)" fg:x="1148" fg:w="1"/><text x="92.5330%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="92.2830%" y="181" width="0.0804%" height="15" fill="rgb(231,121,21)" fg:x="1148" fg:w="1"/><text x="92.5330%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="92.2026%" y="261" width="0.2412%" height="15" fill="rgb(251,14,34)" fg:x="1147" fg:w="3"/><text x="92.4526%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="92.2026%" y="245" width="0.2412%" height="15" fill="rgb(249,193,11)" fg:x="1147" fg:w="3"/><text x="92.4526%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="92.2026%" y="229" width="0.2412%" height="15" fill="rgb(220,172,37)" fg:x="1147" fg:w="3"/><text x="92.4526%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="92.3633%" y="213" width="0.0804%" height="15" fill="rgb(231,229,43)" fg:x="1149" fg:w="1"/><text x="92.6133%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.3633%" y="197" width="0.0804%" height="15" fill="rgb(250,161,5)" fg:x="1149" fg:w="1"/><text x="92.6133%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.3633%" y="181" width="0.0804%" height="15" fill="rgb(218,225,18)" fg:x="1149" fg:w="1"/><text x="92.6133%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.3633%" y="165" width="0.0804%" height="15" fill="rgb(245,45,42)" fg:x="1149" fg:w="1"/><text x="92.6133%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (40 samples, 3.22%)</title><rect x="89.3087%" y="309" width="3.2154%" height="15" fill="rgb(211,115,1)" fg:x="1111" fg:w="40"/><text x="89.5587%" y="319.50">&lt;re..</text></g><g><title>regex::builders::Builder::build_one_string (40 samples, 3.22%)</title><rect x="89.3087%" y="293" width="3.2154%" height="15" fill="rgb(248,133,52)" fg:x="1111" fg:w="40"/><text x="89.5587%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (40 samples, 3.22%)</title><rect x="89.3087%" y="277" width="3.2154%" height="15" fill="rgb(238,100,21)" fg:x="1111" fg:w="40"/><text x="89.5587%" y="287.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="92.4437%" y="261" width="0.0804%" height="15" fill="rgb(247,144,11)" fg:x="1150" fg:w="1"/><text x="92.6937%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="92.4437%" y="245" width="0.0804%" height="15" fill="rgb(206,164,16)" fg:x="1150" fg:w="1"/><text x="92.6937%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="92.4437%" y="229" width="0.0804%" height="15" fill="rgb(222,34,3)" fg:x="1150" fg:w="1"/><text x="92.6937%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="92.4437%" y="213" width="0.0804%" height="15" fill="rgb(248,82,4)" fg:x="1150" fg:w="1"/><text x="92.6937%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="92.4437%" y="197" width="0.0804%" height="15" fill="rgb(228,81,46)" fg:x="1150" fg:w="1"/><text x="92.6937%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.4437%" y="181" width="0.0804%" height="15" fill="rgb(227,67,47)" fg:x="1150" fg:w="1"/><text x="92.6937%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="92.5241%" y="277" width="0.0804%" height="15" fill="rgb(215,93,53)" fg:x="1151" fg:w="1"/><text x="92.7741%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="92.5241%" y="261" width="0.0804%" height="15" fill="rgb(248,194,39)" fg:x="1151" fg:w="1"/><text x="92.7741%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.5241%" y="245" width="0.0804%" height="15" fill="rgb(215,5,19)" fg:x="1151" fg:w="1"/><text x="92.7741%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="92.5241%" y="309" width="0.1608%" height="15" fill="rgb(226,215,51)" fg:x="1151" fg:w="2"/><text x="92.7741%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="92.5241%" y="293" width="0.1608%" height="15" fill="rgb(225,56,26)" fg:x="1151" fg:w="2"/><text x="92.7741%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="92.6045%" y="277" width="0.0804%" height="15" fill="rgb(222,75,29)" fg:x="1152" fg:w="1"/><text x="92.8545%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="92.6045%" y="261" width="0.0804%" height="15" fill="rgb(236,139,6)" fg:x="1152" fg:w="1"/><text x="92.8545%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="92.6849%" y="261" width="0.0804%" height="15" fill="rgb(223,137,36)" fg:x="1153" fg:w="1"/><text x="92.9349%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="92.6849%" y="245" width="0.0804%" height="15" fill="rgb(226,99,2)" fg:x="1153" fg:w="1"/><text x="92.9349%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="92.6849%" y="229" width="0.0804%" height="15" fill="rgb(206,133,23)" fg:x="1153" fg:w="1"/><text x="92.9349%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (45 samples, 3.62%)</title><rect x="89.2283%" y="325" width="3.6174%" height="15" fill="rgb(243,173,15)" fg:x="1110" fg:w="45"/><text x="89.4783%" y="335.50">inde..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="92.6849%" y="309" width="0.1608%" height="15" fill="rgb(228,69,28)" fg:x="1153" fg:w="2"/><text x="92.9349%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="92.6849%" y="293" width="0.1608%" height="15" fill="rgb(212,51,22)" fg:x="1153" fg:w="2"/><text x="92.9349%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="92.6849%" y="277" width="0.1608%" height="15" fill="rgb(227,113,0)" fg:x="1153" fg:w="2"/><text x="92.9349%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="92.7653%" y="261" width="0.0804%" height="15" fill="rgb(252,84,27)" fg:x="1154" fg:w="1"/><text x="93.0153%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="92.7653%" y="245" width="0.0804%" height="15" fill="rgb(223,145,39)" fg:x="1154" fg:w="1"/><text x="93.0153%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.7653%" y="229" width="0.0804%" height="15" fill="rgb(239,219,30)" fg:x="1154" fg:w="1"/><text x="93.0153%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.8457%" y="245" width="0.0804%" height="15" fill="rgb(224,196,39)" fg:x="1155" fg:w="1"/><text x="93.0957%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="92.9260%" y="245" width="0.0804%" height="15" fill="rgb(205,35,43)" fg:x="1156" fg:w="1"/><text x="93.1760%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="92.9260%" y="229" width="0.0804%" height="15" fill="rgb(228,201,21)" fg:x="1156" fg:w="1"/><text x="93.1760%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="93.0064%" y="229" width="0.0804%" height="15" fill="rgb(237,118,16)" fg:x="1157" fg:w="1"/><text x="93.2564%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="93.0064%" y="213" width="0.0804%" height="15" fill="rgb(241,17,19)" fg:x="1157" fg:w="1"/><text x="93.2564%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.0064%" y="197" width="0.0804%" height="15" fill="rgb(214,10,25)" fg:x="1157" fg:w="1"/><text x="93.2564%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.0064%" y="181" width="0.0804%" height="15" fill="rgb(238,37,29)" fg:x="1157" fg:w="1"/><text x="93.2564%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.0868%" y="213" width="0.0804%" height="15" fill="rgb(253,83,25)" fg:x="1158" fg:w="1"/><text x="93.3368%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="93.1672%" y="213" width="0.0804%" height="15" fill="rgb(234,192,12)" fg:x="1159" fg:w="1"/><text x="93.4172%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (6 samples, 0.48%)</title><rect x="92.8457%" y="261" width="0.4823%" height="15" fill="rgb(241,216,45)" fg:x="1155" fg:w="6"/><text x="93.0957%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.32%)</title><rect x="93.0064%" y="245" width="0.3215%" height="15" fill="rgb(242,22,33)" fg:x="1157" fg:w="4"/><text x="93.2564%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="93.0868%" y="229" width="0.2412%" height="15" fill="rgb(231,105,49)" fg:x="1158" fg:w="3"/><text x="93.3368%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="93.2476%" y="213" width="0.0804%" height="15" fill="rgb(218,204,15)" fg:x="1160" fg:w="1"/><text x="93.4976%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="93.3280%" y="213" width="0.0804%" height="15" fill="rgb(235,138,41)" fg:x="1161" fg:w="1"/><text x="93.5780%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="93.3280%" y="261" width="0.1608%" height="15" fill="rgb(246,0,9)" fg:x="1161" fg:w="2"/><text x="93.5780%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="93.3280%" y="245" width="0.1608%" height="15" fill="rgb(210,74,4)" fg:x="1161" fg:w="2"/><text x="93.5780%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="93.3280%" y="229" width="0.1608%" height="15" fill="rgb(250,60,41)" fg:x="1161" fg:w="2"/><text x="93.5780%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="93.4084%" y="213" width="0.0804%" height="15" fill="rgb(220,115,12)" fg:x="1162" fg:w="1"/><text x="93.6584%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.4084%" y="197" width="0.0804%" height="15" fill="rgb(237,100,13)" fg:x="1162" fg:w="1"/><text x="93.6584%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.4084%" y="181" width="0.0804%" height="15" fill="rgb(213,55,26)" fg:x="1162" fg:w="1"/><text x="93.6584%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.4084%" y="165" width="0.0804%" height="15" fill="rgb(216,17,4)" fg:x="1162" fg:w="1"/><text x="93.6584%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (9 samples, 0.72%)</title><rect x="92.8457%" y="309" width="0.7235%" height="15" fill="rgb(220,153,47)" fg:x="1155" fg:w="9"/><text x="93.0957%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (9 samples, 0.72%)</title><rect x="92.8457%" y="293" width="0.7235%" height="15" fill="rgb(215,131,9)" fg:x="1155" fg:w="9"/><text x="93.0957%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (9 samples, 0.72%)</title><rect x="92.8457%" y="277" width="0.7235%" height="15" fill="rgb(233,46,42)" fg:x="1155" fg:w="9"/><text x="93.0957%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="93.4887%" y="261" width="0.0804%" height="15" fill="rgb(226,86,7)" fg:x="1163" fg:w="1"/><text x="93.7387%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="93.4887%" y="245" width="0.0804%" height="15" fill="rgb(239,226,21)" fg:x="1163" fg:w="1"/><text x="93.7387%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="93.4887%" y="229" width="0.0804%" height="15" fill="rgb(244,137,22)" fg:x="1163" fg:w="1"/><text x="93.7387%" y="239.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (11 samples, 0.88%)</title><rect x="92.8457%" y="325" width="0.8842%" height="15" fill="rgb(211,139,35)" fg:x="1155" fg:w="11"/><text x="93.0957%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="93.5691%" y="309" width="0.1608%" height="15" fill="rgb(214,62,50)" fg:x="1164" fg:w="2"/><text x="93.8191%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="93.5691%" y="293" width="0.1608%" height="15" fill="rgb(212,113,44)" fg:x="1164" fg:w="2"/><text x="93.8191%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="93.5691%" y="277" width="0.1608%" height="15" fill="rgb(226,150,43)" fg:x="1164" fg:w="2"/><text x="93.8191%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="93.5691%" y="261" width="0.1608%" height="15" fill="rgb(250,71,37)" fg:x="1164" fg:w="2"/><text x="93.8191%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="93.5691%" y="245" width="0.1608%" height="15" fill="rgb(219,76,19)" fg:x="1164" fg:w="2"/><text x="93.8191%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="93.6495%" y="229" width="0.0804%" height="15" fill="rgb(250,39,11)" fg:x="1165" fg:w="1"/><text x="93.8995%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="93.7299%" y="245" width="0.0804%" height="15" fill="rgb(230,64,31)" fg:x="1166" fg:w="1"/><text x="93.9799%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="93.7299%" y="229" width="0.0804%" height="15" fill="rgb(208,222,23)" fg:x="1166" fg:w="1"/><text x="93.9799%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="93.7299%" y="213" width="0.0804%" height="15" fill="rgb(227,125,18)" fg:x="1166" fg:w="1"/><text x="93.9799%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.7299%" y="197" width="0.0804%" height="15" fill="rgb(234,210,9)" fg:x="1166" fg:w="1"/><text x="93.9799%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.7299%" y="181" width="0.0804%" height="15" fill="rgb(217,127,24)" fg:x="1166" fg:w="1"/><text x="93.9799%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (2 samples, 0.16%)</title><rect x="93.8103%" y="245" width="0.1608%" height="15" fill="rgb(239,141,48)" fg:x="1167" fg:w="2"/><text x="94.0603%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="93.8103%" y="229" width="0.1608%" height="15" fill="rgb(227,109,8)" fg:x="1167" fg:w="2"/><text x="94.0603%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="93.8103%" y="213" width="0.1608%" height="15" fill="rgb(235,184,23)" fg:x="1167" fg:w="2"/><text x="94.0603%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="93.8907%" y="197" width="0.0804%" height="15" fill="rgb(227,226,48)" fg:x="1168" fg:w="1"/><text x="94.1407%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="93.8907%" y="181" width="0.0804%" height="15" fill="rgb(206,150,11)" fg:x="1168" fg:w="1"/><text x="94.1407%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="94.3730%" y="133" width="0.0804%" height="15" fill="rgb(254,2,33)" fg:x="1174" fg:w="1"/><text x="94.6230%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="94.4534%" y="133" width="0.1608%" height="15" fill="rgb(243,160,20)" fg:x="1175" fg:w="2"/><text x="94.7034%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="94.5338%" y="117" width="0.0804%" height="15" fill="rgb(218,208,30)" fg:x="1176" fg:w="1"/><text x="94.7838%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="94.6141%" y="133" width="0.0804%" height="15" fill="rgb(224,120,49)" fg:x="1177" fg:w="1"/><text x="94.8641%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="94.6141%" y="117" width="0.0804%" height="15" fill="rgb(246,12,2)" fg:x="1177" fg:w="1"/><text x="94.8641%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="94.6141%" y="101" width="0.0804%" height="15" fill="rgb(236,117,3)" fg:x="1177" fg:w="1"/><text x="94.8641%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (22 samples, 1.77%)</title><rect x="94.6945%" y="133" width="1.7685%" height="15" fill="rgb(216,128,52)" fg:x="1178" fg:w="22"/><text x="94.9445%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (22 samples, 1.77%)</title><rect x="94.6945%" y="117" width="1.7685%" height="15" fill="rgb(246,145,19)" fg:x="1178" fg:w="22"/><text x="94.9445%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (22 samples, 1.77%)</title><rect x="94.6945%" y="101" width="1.7685%" height="15" fill="rgb(222,11,46)" fg:x="1178" fg:w="22"/><text x="94.9445%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 2.57%)</title><rect x="93.9711%" y="229" width="2.5723%" height="15" fill="rgb(245,82,36)" fg:x="1169" fg:w="32"/><text x="94.2211%" y="239.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (32 samples, 2.57%)</title><rect x="93.9711%" y="213" width="2.5723%" height="15" fill="rgb(250,73,51)" fg:x="1169" fg:w="32"/><text x="94.2211%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (32 samples, 2.57%)</title><rect x="93.9711%" y="197" width="2.5723%" height="15" fill="rgb(221,189,23)" fg:x="1169" fg:w="32"/><text x="94.2211%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (32 samples, 2.57%)</title><rect x="93.9711%" y="181" width="2.5723%" height="15" fill="rgb(210,33,7)" fg:x="1169" fg:w="32"/><text x="94.2211%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (32 samples, 2.57%)</title><rect x="93.9711%" y="165" width="2.5723%" height="15" fill="rgb(210,107,22)" fg:x="1169" fg:w="32"/><text x="94.2211%" y="175.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (32 samples, 2.57%)</title><rect x="93.9711%" y="149" width="2.5723%" height="15" fill="rgb(222,116,37)" fg:x="1169" fg:w="32"/><text x="94.2211%" y="159.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="96.4630%" y="133" width="0.0804%" height="15" fill="rgb(254,17,48)" fg:x="1200" fg:w="1"/><text x="96.7130%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="96.5434%" y="213" width="0.0804%" height="15" fill="rgb(224,36,32)" fg:x="1201" fg:w="1"/><text x="96.7934%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.6238%" y="197" width="0.0804%" height="15" fill="rgb(232,90,46)" fg:x="1202" fg:w="1"/><text x="96.8738%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (38 samples, 3.05%)</title><rect x="93.7299%" y="261" width="3.0547%" height="15" fill="rgb(241,66,40)" fg:x="1166" fg:w="38"/><text x="93.9799%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (35 samples, 2.81%)</title><rect x="93.9711%" y="245" width="2.8135%" height="15" fill="rgb(249,184,29)" fg:x="1169" fg:w="35"/><text x="94.2211%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="96.5434%" y="229" width="0.2412%" height="15" fill="rgb(231,181,1)" fg:x="1201" fg:w="3"/><text x="96.7934%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="96.6238%" y="213" width="0.1608%" height="15" fill="rgb(224,94,2)" fg:x="1202" fg:w="2"/><text x="96.8738%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="96.7042%" y="197" width="0.0804%" height="15" fill="rgb(229,170,15)" fg:x="1203" fg:w="1"/><text x="96.9542%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.7042%" y="181" width="0.0804%" height="15" fill="rgb(240,127,35)" fg:x="1203" fg:w="1"/><text x="96.9542%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="96.7846%" y="261" width="0.1608%" height="15" fill="rgb(248,196,34)" fg:x="1204" fg:w="2"/><text x="97.0346%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="96.7846%" y="245" width="0.1608%" height="15" fill="rgb(236,137,7)" fg:x="1204" fg:w="2"/><text x="97.0346%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="96.7846%" y="229" width="0.1608%" height="15" fill="rgb(235,127,16)" fg:x="1204" fg:w="2"/><text x="97.0346%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="96.7846%" y="213" width="0.1608%" height="15" fill="rgb(250,192,54)" fg:x="1204" fg:w="2"/><text x="97.0346%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="96.7846%" y="197" width="0.1608%" height="15" fill="rgb(218,98,20)" fg:x="1204" fg:w="2"/><text x="97.0346%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="96.7846%" y="181" width="0.1608%" height="15" fill="rgb(230,176,47)" fg:x="1204" fg:w="2"/><text x="97.0346%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="96.7846%" y="165" width="0.1608%" height="15" fill="rgb(244,2,33)" fg:x="1204" fg:w="2"/><text x="97.0346%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="96.9453%" y="229" width="0.0804%" height="15" fill="rgb(231,100,17)" fg:x="1206" fg:w="1"/><text x="97.1953%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.9453%" y="213" width="0.0804%" height="15" fill="rgb(245,23,12)" fg:x="1206" fg:w="1"/><text x="97.1953%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.9453%" y="197" width="0.0804%" height="15" fill="rgb(249,55,22)" fg:x="1206" fg:w="1"/><text x="97.1953%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.9453%" y="181" width="0.0804%" height="15" fill="rgb(207,134,9)" fg:x="1206" fg:w="1"/><text x="97.1953%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (42 samples, 3.38%)</title><rect x="93.7299%" y="309" width="3.3762%" height="15" fill="rgb(218,134,0)" fg:x="1166" fg:w="42"/><text x="93.9799%" y="319.50">&lt;re..</text></g><g><title>regex::builders::Builder::build_one_string (42 samples, 3.38%)</title><rect x="93.7299%" y="293" width="3.3762%" height="15" fill="rgb(213,212,33)" fg:x="1166" fg:w="42"/><text x="93.9799%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (42 samples, 3.38%)</title><rect x="93.7299%" y="277" width="3.3762%" height="15" fill="rgb(252,106,18)" fg:x="1166" fg:w="42"/><text x="93.9799%" y="287.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="96.9453%" y="261" width="0.1608%" height="15" fill="rgb(208,126,42)" fg:x="1206" fg:w="2"/><text x="97.1953%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="96.9453%" y="245" width="0.1608%" height="15" fill="rgb(246,175,29)" fg:x="1206" fg:w="2"/><text x="97.1953%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="97.0257%" y="229" width="0.0804%" height="15" fill="rgb(215,13,50)" fg:x="1207" fg:w="1"/><text x="97.2757%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.1061%" y="277" width="0.0804%" height="15" fill="rgb(216,172,15)" fg:x="1208" fg:w="1"/><text x="97.3561%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.1865%" y="277" width="0.0804%" height="15" fill="rgb(212,103,13)" fg:x="1209" fg:w="1"/><text x="97.4365%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="97.1865%" y="261" width="0.0804%" height="15" fill="rgb(231,171,36)" fg:x="1209" fg:w="1"/><text x="97.4365%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.1865%" y="245" width="0.0804%" height="15" fill="rgb(250,123,20)" fg:x="1209" fg:w="1"/><text x="97.4365%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.1865%" y="229" width="0.0804%" height="15" fill="rgb(212,53,50)" fg:x="1209" fg:w="1"/><text x="97.4365%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="97.1061%" y="309" width="0.2412%" height="15" fill="rgb(243,54,12)" fg:x="1208" fg:w="3"/><text x="97.3561%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="97.1061%" y="293" width="0.2412%" height="15" fill="rgb(234,101,34)" fg:x="1208" fg:w="3"/><text x="97.3561%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="97.2669%" y="277" width="0.0804%" height="15" fill="rgb(254,67,22)" fg:x="1210" fg:w="1"/><text x="97.5169%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="97.2669%" y="261" width="0.0804%" height="15" fill="rgb(250,35,47)" fg:x="1210" fg:w="1"/><text x="97.5169%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.2669%" y="245" width="0.0804%" height="15" fill="rgb(226,126,38)" fg:x="1210" fg:w="1"/><text x="97.5169%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.5080%" y="213" width="0.0804%" height="15" fill="rgb(216,138,53)" fg:x="1213" fg:w="1"/><text x="97.7580%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.5080%" y="197" width="0.0804%" height="15" fill="rgb(246,199,43)" fg:x="1213" fg:w="1"/><text x="97.7580%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5080%" y="181" width="0.0804%" height="15" fill="rgb(232,125,11)" fg:x="1213" fg:w="1"/><text x="97.7580%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="97.3473%" y="229" width="0.3215%" height="15" fill="rgb(218,219,45)" fg:x="1211" fg:w="4"/><text x="97.5973%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.5884%" y="213" width="0.0804%" height="15" fill="rgb(216,102,54)" fg:x="1214" fg:w="1"/><text x="97.8384%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (120 samples, 9.65%)</title><rect x="88.1029%" y="405" width="9.6463%" height="15" fill="rgb(250,228,7)" fg:x="1096" fg:w="120"/><text x="88.3529%" y="415.50">&lt;&amp;kernel::mode..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (107 samples, 8.60%)</title><rect x="89.1479%" y="389" width="8.6013%" height="15" fill="rgb(226,125,25)" fg:x="1109" fg:w="107"/><text x="89.3979%" y="399.50">plugins_core..</text></g><g><title>indefinite::indefinite (107 samples, 8.60%)</title><rect x="89.1479%" y="373" width="8.6013%" height="15" fill="rgb(224,165,27)" fg:x="1109" fg:w="107"/><text x="89.3979%" y="383.50">indefinite::..</text></g><g><title>indefinite::methods::indefinite (107 samples, 8.60%)</title><rect x="89.1479%" y="357" width="8.6013%" height="15" fill="rgb(233,86,3)" fg:x="1109" fg:w="107"/><text x="89.3979%" y="367.50">indefinite::..</text></g><g><title>indefinite::methods::apply_rules (107 samples, 8.60%)</title><rect x="89.1479%" y="341" width="8.6013%" height="15" fill="rgb(228,116,20)" fg:x="1109" fg:w="107"/><text x="89.3979%" y="351.50">indefinite::..</text></g><g><title>indefinite::rules::number::Number::check (50 samples, 4.02%)</title><rect x="93.7299%" y="325" width="4.0193%" height="15" fill="rgb(209,192,17)" fg:x="1166" fg:w="50"/><text x="93.9799%" y="335.50">inde..</text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.40%)</title><rect x="97.3473%" y="309" width="0.4019%" height="15" fill="rgb(224,88,34)" fg:x="1211" fg:w="5"/><text x="97.5973%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="97.3473%" y="293" width="0.4019%" height="15" fill="rgb(233,38,6)" fg:x="1211" fg:w="5"/><text x="97.5973%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="97.3473%" y="277" width="0.4019%" height="15" fill="rgb(212,59,30)" fg:x="1211" fg:w="5"/><text x="97.5973%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="97.3473%" y="261" width="0.4019%" height="15" fill="rgb(213,80,3)" fg:x="1211" fg:w="5"/><text x="97.5973%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="97.3473%" y="245" width="0.4019%" height="15" fill="rgb(251,178,7)" fg:x="1211" fg:w="5"/><text x="97.5973%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="97.6688%" y="229" width="0.0804%" height="15" fill="rgb(213,154,26)" fg:x="1215" fg:w="1"/><text x="97.9188%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.6688%" y="213" width="0.0804%" height="15" fill="rgb(238,165,49)" fg:x="1215" fg:w="1"/><text x="97.9188%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.6688%" y="197" width="0.0804%" height="15" fill="rgb(248,91,46)" fg:x="1215" fg:w="1"/><text x="97.9188%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.6688%" y="181" width="0.0804%" height="15" fill="rgb(244,21,52)" fg:x="1215" fg:w="1"/><text x="97.9188%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.7492%" y="389" width="0.0804%" height="15" fill="rgb(247,122,20)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.7492%" y="373" width="0.0804%" height="15" fill="rgb(218,27,9)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.7492%" y="357" width="0.0804%" height="15" fill="rgb(246,7,6)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.7492%" y="341" width="0.0804%" height="15" fill="rgb(227,135,54)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.7492%" y="325" width="0.0804%" height="15" fill="rgb(247,14,11)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.7492%" y="309" width="0.0804%" height="15" fill="rgb(206,149,34)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.7492%" y="293" width="0.0804%" height="15" fill="rgb(227,228,4)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.7492%" y="277" width="0.0804%" height="15" fill="rgb(238,218,28)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.7492%" y="261" width="0.0804%" height="15" fill="rgb(252,86,40)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.7492%" y="245" width="0.0804%" height="15" fill="rgb(251,225,11)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.7492%" y="229" width="0.0804%" height="15" fill="rgb(206,46,49)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.7492%" y="213" width="0.0804%" height="15" fill="rgb(245,128,24)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.7492%" y="197" width="0.0804%" height="15" fill="rgb(219,177,34)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="207.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (125 samples, 10.05%)</title><rect x="87.9421%" y="565" width="10.0482%" height="15" fill="rgb(218,60,48)" fg:x="1094" fg:w="125"/><text x="88.1921%" y="575.50">kernel::plugins..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (125 samples, 10.05%)</title><rect x="87.9421%" y="549" width="10.0482%" height="15" fill="rgb(221,11,5)" fg:x="1094" fg:w="125"/><text x="88.1921%" y="559.50">&lt;plugins_dynlib..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (125 samples, 10.05%)</title><rect x="87.9421%" y="533" width="10.0482%" height="15" fill="rgb(220,148,13)" fg:x="1094" fg:w="125"/><text x="88.1921%" y="543.50">kernel::plugins..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (125 samples, 10.05%)</title><rect x="87.9421%" y="517" width="10.0482%" height="15" fill="rgb(210,16,3)" fg:x="1094" fg:w="125"/><text x="88.1921%" y="527.50">core::ops::func..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (125 samples, 10.05%)</title><rect x="87.9421%" y="501" width="10.0482%" height="15" fill="rgb(236,80,2)" fg:x="1094" fg:w="125"/><text x="88.1921%" y="511.50">kernel::plugins..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (125 samples, 10.05%)</title><rect x="87.9421%" y="485" width="10.0482%" height="15" fill="rgb(239,129,19)" fg:x="1094" fg:w="125"/><text x="88.1921%" y="495.50">core::ops::func..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (125 samples, 10.05%)</title><rect x="87.9421%" y="469" width="10.0482%" height="15" fill="rgb(220,106,35)" fg:x="1094" fg:w="125"/><text x="88.1921%" y="479.50">&lt;alloc::boxed::..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (125 samples, 10.05%)</title><rect x="87.9421%" y="453" width="10.0482%" height="15" fill="rgb(252,139,45)" fg:x="1094" fg:w="125"/><text x="88.1921%" y="463.50">&lt;engine::sessio..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (125 samples, 10.05%)</title><rect x="87.9421%" y="437" width="10.0482%" height="15" fill="rgb(229,8,36)" fg:x="1094" fg:w="125"/><text x="88.1921%" y="447.50">&lt;plugins_core::..</text></g><g><title>plugins_core::looking::model::new_area_observation (123 samples, 9.89%)</title><rect x="88.1029%" y="421" width="9.8875%" height="15" fill="rgb(230,126,33)" fg:x="1096" fg:w="123"/><text x="88.3529%" y="431.50">plugins_core::..</text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="97.7492%" y="405" width="0.2412%" height="15" fill="rgb(239,140,21)" fg:x="1216" fg:w="3"/><text x="97.9992%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.8296%" y="389" width="0.1608%" height="15" fill="rgb(254,104,9)" fg:x="1217" fg:w="2"/><text x="98.0796%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.8296%" y="373" width="0.1608%" height="15" fill="rgb(239,52,14)" fg:x="1217" fg:w="2"/><text x="98.0796%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.9100%" y="357" width="0.0804%" height="15" fill="rgb(208,227,44)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.9100%" y="341" width="0.0804%" height="15" fill="rgb(246,18,19)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.9100%" y="325" width="0.0804%" height="15" fill="rgb(235,228,25)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.9100%" y="309" width="0.0804%" height="15" fill="rgb(240,156,20)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="319.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.9904%" y="533" width="0.0804%" height="15" fill="rgb(224,8,20)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.9904%" y="517" width="0.0804%" height="15" fill="rgb(214,12,52)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="98.0707%" y="453" width="0.0804%" height="15" fill="rgb(211,220,47)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.0707%" y="437" width="0.0804%" height="15" fill="rgb(250,173,5)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0707%" y="421" width="0.0804%" height="15" fill="rgb(250,125,52)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.0707%" y="405" width="0.0804%" height="15" fill="rgb(209,133,18)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0707%" y="389" width="0.0804%" height="15" fill="rgb(216,173,22)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.0707%" y="373" width="0.0804%" height="15" fill="rgb(205,3,22)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.0707%" y="357" width="0.0804%" height="15" fill="rgb(248,22,20)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.0707%" y="341" width="0.0804%" height="15" fill="rgb(233,6,29)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="351.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.0707%" y="325" width="0.0804%" height="15" fill="rgb(240,22,54)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.0707%" y="309" width="0.0804%" height="15" fill="rgb(231,133,32)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.0707%" y="293" width="0.0804%" height="15" fill="rgb(248,193,4)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.0707%" y="277" width="0.0804%" height="15" fill="rgb(211,178,46)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.0707%" y="261" width="0.0804%" height="15" fill="rgb(224,5,42)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="98.0707%" y="245" width="0.0804%" height="15" fill="rgb(239,176,25)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.2315%" y="325" width="0.0804%" height="15" fill="rgb(245,187,50)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2315%" y="309" width="0.0804%" height="15" fill="rgb(248,24,15)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.2315%" y="293" width="0.0804%" height="15" fill="rgb(205,166,13)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="303.50"></text></g><g><title>plugins_core::tools::contained_by (4 samples, 0.32%)</title><rect x="98.0707%" y="533" width="0.3215%" height="15" fill="rgb(208,114,23)" fg:x="1220" fg:w="4"/><text x="98.3207%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.32%)</title><rect x="98.0707%" y="517" width="0.3215%" height="15" fill="rgb(239,127,18)" fg:x="1220" fg:w="4"/><text x="98.3207%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.32%)</title><rect x="98.0707%" y="501" width="0.3215%" height="15" fill="rgb(219,154,28)" fg:x="1220" fg:w="4"/><text x="98.3207%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="98.0707%" y="485" width="0.3215%" height="15" fill="rgb(225,157,23)" fg:x="1220" fg:w="4"/><text x="98.3207%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="98.0707%" y="469" width="0.3215%" height="15" fill="rgb(219,8,6)" fg:x="1220" fg:w="4"/><text x="98.3207%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="98.1511%" y="453" width="0.2412%" height="15" fill="rgb(212,47,6)" fg:x="1221" fg:w="3"/><text x="98.4011%" y="463.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="98.1511%" y="437" width="0.2412%" height="15" fill="rgb(224,190,4)" fg:x="1221" fg:w="3"/><text x="98.4011%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="98.1511%" y="421" width="0.2412%" height="15" fill="rgb(239,183,29)" fg:x="1221" fg:w="3"/><text x="98.4011%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="98.1511%" y="405" width="0.2412%" height="15" fill="rgb(213,57,7)" fg:x="1221" fg:w="3"/><text x="98.4011%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="98.1511%" y="389" width="0.2412%" height="15" fill="rgb(216,148,1)" fg:x="1221" fg:w="3"/><text x="98.4011%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.2315%" y="373" width="0.1608%" height="15" fill="rgb(236,182,29)" fg:x="1222" fg:w="2"/><text x="98.4815%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.2315%" y="357" width="0.1608%" height="15" fill="rgb(244,120,48)" fg:x="1222" fg:w="2"/><text x="98.4815%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.2315%" y="341" width="0.1608%" height="15" fill="rgb(206,71,34)" fg:x="1222" fg:w="2"/><text x="98.4815%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.3119%" y="325" width="0.0804%" height="15" fill="rgb(242,32,6)" fg:x="1223" fg:w="1"/><text x="98.5619%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3119%" y="309" width="0.0804%" height="15" fill="rgb(241,35,3)" fg:x="1223" fg:w="1"/><text x="98.5619%" y="319.50"></text></g><g><title>engine::session::Session::captured (142 samples, 11.41%)</title><rect x="87.1383%" y="709" width="11.4148%" height="15" fill="rgb(222,62,19)" fg:x="1084" fg:w="142"/><text x="87.3883%" y="719.50">engine::session::..</text></g><g><title>engine::session::logs::capture (141 samples, 11.33%)</title><rect x="87.2186%" y="693" width="11.3344%" height="15" fill="rgb(223,110,41)" fg:x="1085" fg:w="141"/><text x="87.4686%" y="703.50">engine::session::..</text></g><g><title>tracing_core::dispatcher::with_default (141 samples, 11.33%)</title><rect x="87.2186%" y="677" width="11.3344%" height="15" fill="rgb(208,224,4)" fg:x="1085" fg:w="141"/><text x="87.4686%" y="687.50">tracing_core::dis..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (141 samples, 11.33%)</title><rect x="87.2186%" y="661" width="11.3344%" height="15" fill="rgb(241,137,19)" fg:x="1085" fg:w="141"/><text x="87.4686%" y="671.50">&lt;engine::session:..</text></g><g><title>kernel::plugins::mw::apply_middleware (141 samples, 11.33%)</title><rect x="87.2186%" y="645" width="11.3344%" height="15" fill="rgb(244,24,17)" fg:x="1085" fg:w="141"/><text x="87.4686%" y="655.50">kernel::plugins::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (141 samples, 11.33%)</title><rect x="87.2186%" y="629" width="11.3344%" height="15" fill="rgb(245,178,49)" fg:x="1085" fg:w="141"/><text x="87.4686%" y="639.50">kernel::plugins::..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (141 samples, 11.33%)</title><rect x="87.2186%" y="613" width="11.3344%" height="15" fill="rgb(219,160,38)" fg:x="1085" fg:w="141"/><text x="87.4686%" y="623.50">&lt;engine::session:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (132 samples, 10.61%)</title><rect x="87.9421%" y="597" width="10.6109%" height="15" fill="rgb(228,137,14)" fg:x="1094" fg:w="132"/><text x="88.1921%" y="607.50">kernel::plugins..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (132 samples, 10.61%)</title><rect x="87.9421%" y="581" width="10.6109%" height="15" fill="rgb(237,134,11)" fg:x="1094" fg:w="132"/><text x="88.1921%" y="591.50">&lt;plugins_rune::..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (7 samples, 0.56%)</title><rect x="97.9904%" y="565" width="0.5627%" height="15" fill="rgb(211,126,44)" fg:x="1219" fg:w="7"/><text x="98.2404%" y="575.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (7 samples, 0.56%)</title><rect x="97.9904%" y="549" width="0.5627%" height="15" fill="rgb(226,171,33)" fg:x="1219" fg:w="7"/><text x="98.2404%" y="559.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="98.3923%" y="533" width="0.1608%" height="15" fill="rgb(253,99,13)" fg:x="1224" fg:w="2"/><text x="98.6423%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.3923%" y="517" width="0.1608%" height="15" fill="rgb(244,48,7)" fg:x="1224" fg:w="2"/><text x="98.6423%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.3923%" y="501" width="0.1608%" height="15" fill="rgb(244,217,54)" fg:x="1224" fg:w="2"/><text x="98.6423%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.3923%" y="485" width="0.1608%" height="15" fill="rgb(224,15,18)" fg:x="1224" fg:w="2"/><text x="98.6423%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.4727%" y="469" width="0.0804%" height="15" fill="rgb(244,99,12)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.4727%" y="453" width="0.0804%" height="15" fill="rgb(233,226,8)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.4727%" y="437" width="0.0804%" height="15" fill="rgb(229,211,3)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.4727%" y="421" width="0.0804%" height="15" fill="rgb(216,140,21)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4727%" y="405" width="0.0804%" height="15" fill="rgb(234,122,30)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5531%" y="629" width="0.0804%" height="15" fill="rgb(236,25,46)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.5531%" y="613" width="0.0804%" height="15" fill="rgb(217,52,54)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5531%" y="597" width="0.0804%" height="15" fill="rgb(222,29,26)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.5531%" y="661" width="0.1608%" height="15" fill="rgb(216,177,29)" fg:x="1226" fg:w="2"/><text x="98.8031%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.5531%" y="645" width="0.1608%" height="15" fill="rgb(247,136,51)" fg:x="1226" fg:w="2"/><text x="98.8031%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.6334%" y="629" width="0.0804%" height="15" fill="rgb(231,47,47)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.6334%" y="613" width="0.0804%" height="15" fill="rgb(211,192,36)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.6334%" y="597" width="0.0804%" height="15" fill="rgb(229,156,32)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.6334%" y="581" width="0.0804%" height="15" fill="rgb(248,213,20)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.6334%" y="565" width="0.0804%" height="15" fill="rgb(217,64,7)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.6334%" y="549" width="0.0804%" height="15" fill="rgb(232,142,8)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.6334%" y="533" width="0.0804%" height="15" fill="rgb(224,92,44)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.6334%" y="517" width="0.0804%" height="15" fill="rgb(214,169,17)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.6334%" y="501" width="0.0804%" height="15" fill="rgb(210,59,37)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.6334%" y="485" width="0.0804%" height="15" fill="rgb(214,116,48)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.6334%" y="469" width="0.0804%" height="15" fill="rgb(244,191,6)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.6334%" y="453" width="0.0804%" height="15" fill="rgb(241,50,52)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7942%" y="581" width="0.0804%" height="15" fill="rgb(236,75,39)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7942%" y="565" width="0.0804%" height="15" fill="rgb(236,99,0)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.7942%" y="613" width="0.1608%" height="15" fill="rgb(207,202,15)" fg:x="1229" fg:w="2"/><text x="99.0442%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.7942%" y="597" width="0.1608%" height="15" fill="rgb(233,207,14)" fg:x="1229" fg:w="2"/><text x="99.0442%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8746%" y="581" width="0.0804%" height="15" fill="rgb(226,27,51)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8746%" y="565" width="0.0804%" height="15" fill="rgb(206,104,42)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8746%" y="549" width="0.0804%" height="15" fill="rgb(212,225,4)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8746%" y="533" width="0.0804%" height="15" fill="rgb(233,96,42)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.8746%" y="517" width="0.0804%" height="15" fill="rgb(229,21,32)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.8746%" y="501" width="0.0804%" height="15" fill="rgb(226,216,24)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.8746%" y="485" width="0.0804%" height="15" fill="rgb(221,163,17)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.8746%" y="469" width="0.0804%" height="15" fill="rgb(216,216,42)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.8746%" y="453" width="0.0804%" height="15" fill="rgb(240,118,7)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.8746%" y="437" width="0.0804%" height="15" fill="rgb(221,67,37)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.8746%" y="421" width="0.0804%" height="15" fill="rgb(241,32,44)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.8746%" y="405" width="0.0804%" height="15" fill="rgb(235,204,43)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.8746%" y="389" width="0.0804%" height="15" fill="rgb(213,116,10)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8746%" y="373" width="0.0804%" height="15" fill="rgb(239,15,48)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.9550%" y="613" width="0.0804%" height="15" fill="rgb(207,123,36)" fg:x="1231" fg:w="1"/><text x="99.2050%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.9550%" y="597" width="0.0804%" height="15" fill="rgb(209,103,30)" fg:x="1231" fg:w="1"/><text x="99.2050%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.9550%" y="581" width="0.0804%" height="15" fill="rgb(238,100,19)" fg:x="1231" fg:w="1"/><text x="99.2050%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.9550%" y="565" width="0.0804%" height="15" fill="rgb(244,30,14)" fg:x="1231" fg:w="1"/><text x="99.2050%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.9550%" y="549" width="0.0804%" height="15" fill="rgb(249,174,6)" fg:x="1231" fg:w="1"/><text x="99.2050%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.9550%" y="533" width="0.0804%" height="15" fill="rgb(235,213,41)" fg:x="1231" fg:w="1"/><text x="99.2050%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="98.7138%" y="661" width="0.4019%" height="15" fill="rgb(213,118,6)" fg:x="1228" fg:w="5"/><text x="98.9638%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="98.7138%" y="645" width="0.4019%" height="15" fill="rgb(235,44,51)" fg:x="1228" fg:w="5"/><text x="98.9638%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="98.7942%" y="629" width="0.3215%" height="15" fill="rgb(217,9,53)" fg:x="1229" fg:w="4"/><text x="99.0442%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.0354%" y="613" width="0.0804%" height="15" fill="rgb(237,172,34)" fg:x="1232" fg:w="1"/><text x="99.2854%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0354%" y="597" width="0.0804%" height="15" fill="rgb(206,206,11)" fg:x="1232" fg:w="1"/><text x="99.2854%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.0354%" y="581" width="0.0804%" height="15" fill="rgb(214,149,29)" fg:x="1232" fg:w="1"/><text x="99.2854%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.1158%" y="629" width="0.0804%" height="15" fill="rgb(208,123,3)" fg:x="1233" fg:w="1"/><text x="99.3658%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.1961%" y="581" width="0.0804%" height="15" fill="rgb(229,126,4)" fg:x="1234" fg:w="1"/><text x="99.4461%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.2765%" y="565" width="0.0804%" height="15" fill="rgb(222,92,36)" fg:x="1235" fg:w="1"/><text x="99.5265%" y="575.50"></text></g><g><title>engine::session::internal::Added::find_refs (11 samples, 0.88%)</title><rect x="98.5531%" y="693" width="0.8842%" height="15" fill="rgb(216,39,41)" fg:x="1226" fg:w="11"/><text x="98.8031%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (11 samples, 0.88%)</title><rect x="98.5531%" y="677" width="0.8842%" height="15" fill="rgb(253,127,28)" fg:x="1226" fg:w="11"/><text x="98.8031%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="99.1158%" y="661" width="0.3215%" height="15" fill="rgb(249,152,51)" fg:x="1233" fg:w="4"/><text x="99.3658%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="99.1158%" y="645" width="0.3215%" height="15" fill="rgb(209,123,42)" fg:x="1233" fg:w="4"/><text x="99.3658%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="99.1961%" y="629" width="0.2412%" height="15" fill="rgb(241,118,22)" fg:x="1234" fg:w="3"/><text x="99.4461%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="99.1961%" y="613" width="0.2412%" height="15" fill="rgb(208,25,7)" fg:x="1234" fg:w="3"/><text x="99.4461%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="99.1961%" y="597" width="0.2412%" height="15" fill="rgb(243,144,39)" fg:x="1234" fg:w="3"/><text x="99.4461%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="99.2765%" y="581" width="0.1608%" height="15" fill="rgb(250,50,5)" fg:x="1235" fg:w="2"/><text x="99.5265%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="99.3569%" y="565" width="0.0804%" height="15" fill="rgb(207,67,11)" fg:x="1236" fg:w="1"/><text x="99.6069%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="99.3569%" y="549" width="0.0804%" height="15" fill="rgb(245,204,40)" fg:x="1236" fg:w="1"/><text x="99.6069%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.3569%" y="533" width="0.0804%" height="15" fill="rgb(238,228,24)" fg:x="1236" fg:w="1"/><text x="99.6069%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.4373%" y="677" width="0.0804%" height="15" fill="rgb(217,116,22)" fg:x="1237" fg:w="1"/><text x="99.6873%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4373%" y="661" width="0.0804%" height="15" fill="rgb(234,98,12)" fg:x="1237" fg:w="1"/><text x="99.6873%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4373%" y="645" width="0.0804%" height="15" fill="rgb(242,170,50)" fg:x="1237" fg:w="1"/><text x="99.6873%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.4373%" y="629" width="0.0804%" height="15" fill="rgb(235,7,5)" fg:x="1237" fg:w="1"/><text x="99.6873%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4373%" y="613" width="0.0804%" height="15" fill="rgb(241,114,28)" fg:x="1237" fg:w="1"/><text x="99.6873%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4373%" y="597" width="0.0804%" height="15" fill="rgb(246,112,42)" fg:x="1237" fg:w="1"/><text x="99.6873%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4373%" y="581" width="0.0804%" height="15" fill="rgb(248,228,14)" fg:x="1237" fg:w="1"/><text x="99.6873%" y="591.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="99.4373%" y="565" width="0.0804%" height="15" fill="rgb(208,133,18)" fg:x="1237" fg:w="1"/><text x="99.6873%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5177%" y="581" width="0.0804%" height="15" fill="rgb(207,35,49)" fg:x="1238" fg:w="1"/><text x="99.7677%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5177%" y="565" width="0.0804%" height="15" fill="rgb(205,68,36)" fg:x="1238" fg:w="1"/><text x="99.7677%" y="575.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.5177%" y="549" width="0.0804%" height="15" fill="rgb(245,62,40)" fg:x="1238" fg:w="1"/><text x="99.7677%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5177%" y="533" width="0.0804%" height="15" fill="rgb(228,27,24)" fg:x="1238" fg:w="1"/><text x="99.7677%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5177%" y="517" width="0.0804%" height="15" fill="rgb(253,19,12)" fg:x="1238" fg:w="1"/><text x="99.7677%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5177%" y="501" width="0.0804%" height="15" fill="rgb(232,28,20)" fg:x="1238" fg:w="1"/><text x="99.7677%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5177%" y="485" width="0.0804%" height="15" fill="rgb(218,35,51)" fg:x="1238" fg:w="1"/><text x="99.7677%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5177%" y="469" width="0.0804%" height="15" fill="rgb(212,90,40)" fg:x="1238" fg:w="1"/><text x="99.7677%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.5981%" y="581" width="0.0804%" height="15" fill="rgb(220,172,12)" fg:x="1239" fg:w="1"/><text x="99.8481%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.5981%" y="565" width="0.0804%" height="15" fill="rgb(226,159,20)" fg:x="1239" fg:w="1"/><text x="99.8481%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.5981%" y="549" width="0.0804%" height="15" fill="rgb(234,205,16)" fg:x="1239" fg:w="1"/><text x="99.8481%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.5981%" y="533" width="0.0804%" height="15" fill="rgb(207,9,39)" fg:x="1239" fg:w="1"/><text x="99.8481%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.5981%" y="517" width="0.0804%" height="15" fill="rgb(249,143,15)" fg:x="1239" fg:w="1"/><text x="99.8481%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (15 samples, 1.21%)</title><rect x="98.5531%" y="709" width="1.2058%" height="15" fill="rgb(253,133,29)" fg:x="1226" fg:w="15"/><text x="98.8031%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="99.4373%" y="693" width="0.3215%" height="15" fill="rgb(221,187,0)" fg:x="1237" fg:w="4"/><text x="99.6873%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="99.5177%" y="677" width="0.2412%" height="15" fill="rgb(205,204,26)" fg:x="1238" fg:w="3"/><text x="99.7677%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.5177%" y="661" width="0.2412%" height="15" fill="rgb(224,68,54)" fg:x="1238" fg:w="3"/><text x="99.7677%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.5177%" y="645" width="0.2412%" height="15" fill="rgb(209,67,4)" fg:x="1238" fg:w="3"/><text x="99.7677%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="99.5177%" y="629" width="0.2412%" height="15" fill="rgb(228,229,18)" fg:x="1238" fg:w="3"/><text x="99.7677%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.5177%" y="613" width="0.2412%" height="15" fill="rgb(231,89,13)" fg:x="1238" fg:w="3"/><text x="99.7677%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="99.5177%" y="597" width="0.2412%" height="15" fill="rgb(210,182,18)" fg:x="1238" fg:w="3"/><text x="99.7677%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6785%" y="581" width="0.0804%" height="15" fill="rgb(240,105,2)" fg:x="1240" fg:w="1"/><text x="99.9285%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6785%" y="565" width="0.0804%" height="15" fill="rgb(207,170,50)" fg:x="1240" fg:w="1"/><text x="99.9285%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.6785%" y="549" width="0.0804%" height="15" fill="rgb(232,133,24)" fg:x="1240" fg:w="1"/><text x="99.9285%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8392%" y="581" width="0.0804%" height="15" fill="rgb(235,166,27)" fg:x="1242" fg:w="1"/><text x="100.0892%" y="591.50"></text></g><g><title>all (1,244 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(209,19,13)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-5eaf11f8 (1,244 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(226,79,39)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1087.50">simple-5eaf11f8</text></g><g><title>_start (1,244 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(222,163,10)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,244 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(214,44,19)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,244 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(210,217,13)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,244 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(237,61,54)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,244 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(226,184,24)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,244 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(223,226,4)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,244 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(210,26,41)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,244 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(220,221,6)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,244 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(225,89,49)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,244 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(218,70,45)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,244 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(238,166,21)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,244 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(224,141,44)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,244 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(230,12,49)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,244 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(212,174,12)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,244 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(246,67,9)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,244 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(239,35,23)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,244 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(211,167,0)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (280 samples, 22.51%)</title><rect x="77.4920%" y="789" width="22.5080%" height="15" fill="rgb(225,119,45)" fg:x="964" fg:w="280"/><text x="77.7420%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt;..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (280 samples, 22.51%)</title><rect x="77.4920%" y="773" width="22.5080%" height="15" fill="rgb(210,162,6)" fg:x="964" fg:w="280"/><text x="77.7420%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (280 samples, 22.51%)</title><rect x="77.4920%" y="757" width="22.5080%" height="15" fill="rgb(208,118,35)" fg:x="964" fg:w="280"/><text x="77.7420%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (161 samples, 12.94%)</title><rect x="87.0579%" y="741" width="12.9421%" height="15" fill="rgb(239,4,53)" fg:x="1083" fg:w="161"/><text x="87.3079%" y="751.50">engine::session::Se..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (161 samples, 12.94%)</title><rect x="87.0579%" y="725" width="12.9421%" height="15" fill="rgb(213,130,21)" fg:x="1083" fg:w="161"/><text x="87.3079%" y="735.50">engine::session::Se..</text></g><g><title>kernel::model::EntityPtrResolver::world (3 samples, 0.24%)</title><rect x="99.7588%" y="709" width="0.2412%" height="15" fill="rgb(235,148,0)" fg:x="1241" fg:w="3"/><text x="100.0088%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="99.7588%" y="693" width="0.2412%" height="15" fill="rgb(244,224,18)" fg:x="1241" fg:w="3"/><text x="100.0088%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.7588%" y="677" width="0.2412%" height="15" fill="rgb(211,214,4)" fg:x="1241" fg:w="3"/><text x="100.0088%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="99.7588%" y="661" width="0.2412%" height="15" fill="rgb(206,119,25)" fg:x="1241" fg:w="3"/><text x="100.0088%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.7588%" y="645" width="0.2412%" height="15" fill="rgb(243,93,47)" fg:x="1241" fg:w="3"/><text x="100.0088%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.7588%" y="629" width="0.2412%" height="15" fill="rgb(224,194,6)" fg:x="1241" fg:w="3"/><text x="100.0088%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.8392%" y="613" width="0.1608%" height="15" fill="rgb(243,229,6)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.8392%" y="597" width="0.1608%" height="15" fill="rgb(207,23,50)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.9196%" y="581" width="0.0804%" height="15" fill="rgb(253,192,32)" fg:x="1243" fg:w="1"/><text x="100.1696%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9196%" y="565" width="0.0804%" height="15" fill="rgb(213,21,6)" fg:x="1243" fg:w="1"/><text x="100.1696%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9196%" y="549" width="0.0804%" height="15" fill="rgb(243,151,13)" fg:x="1243" fg:w="1"/><text x="100.1696%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.9196%" y="533" width="0.0804%" height="15" fill="rgb(233,165,41)" fg:x="1243" fg:w="1"/><text x="100.1696%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9196%" y="517" width="0.0804%" height="15" fill="rgb(246,176,45)" fg:x="1243" fg:w="1"/><text x="100.1696%" y="527.50"></text></g></svg></svg>