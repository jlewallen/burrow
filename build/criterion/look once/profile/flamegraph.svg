<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1030" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1013.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1013.00"> </text><svg id="frames" x="10" width="1180" total_samples="1232"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0000%" y="597" width="0.3247%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0000%" y="581" width="0.3247%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="591.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="0.0000%" y="565" width="0.3247%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="4"/><text x="0.2500%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="0.0000%" y="629" width="0.4058%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="0.0000%" y="613" width="0.4058%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.3247%" y="597" width="0.0812%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="1"/><text x="0.5747%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.4870%" y="533" width="0.0812%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="1"/><text x="0.7370%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.6494%" y="517" width="0.1623%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="2"/><text x="0.8994%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8929%" y="501" width="0.0812%" height="15" fill="rgb(218,30,26)" fg:x="11" fg:w="1"/><text x="1.1429%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.9740%" y="501" width="0.0812%" height="15" fill="rgb(220,122,19)" fg:x="12" fg:w="1"/><text x="1.2240%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1364%" y="453" width="0.0812%" height="15" fill="rgb(250,228,42)" fg:x="14" fg:w="1"/><text x="1.3864%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="1.1364%" y="485" width="0.1623%" height="15" fill="rgb(240,193,28)" fg:x="14" fg:w="2"/><text x="1.3864%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="1.1364%" y="469" width="0.1623%" height="15" fill="rgb(216,20,37)" fg:x="14" fg:w="2"/><text x="1.3864%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.2175%" y="453" width="0.0812%" height="15" fill="rgb(206,188,39)" fg:x="15" fg:w="1"/><text x="1.4675%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2175%" y="437" width="0.0812%" height="15" fill="rgb(217,207,13)" fg:x="15" fg:w="1"/><text x="1.4675%" y="447.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.2987%" y="485" width="0.1623%" height="15" fill="rgb(231,73,38)" fg:x="16" fg:w="2"/><text x="1.5487%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.14%)</title><rect x="0.4870%" y="549" width="1.1364%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="14"/><text x="0.7370%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (13 samples, 1.06%)</title><rect x="0.5682%" y="533" width="1.0552%" height="15" fill="rgb(210,31,41)" fg:x="7" fg:w="13"/><text x="0.8182%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.81%)</title><rect x="0.8117%" y="517" width="0.8117%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="10"/><text x="1.0617%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="1.0552%" y="501" width="0.5682%" height="15" fill="rgb(226,26,5)" fg:x="13" fg:w="7"/><text x="1.3052%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.4610%" y="485" width="0.1623%" height="15" fill="rgb(249,33,26)" fg:x="18" fg:w="2"/><text x="1.7110%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5422%" y="469" width="0.0812%" height="15" fill="rgb(235,183,28)" fg:x="19" fg:w="1"/><text x="1.7922%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.6234%" y="517" width="0.0812%" height="15" fill="rgb(221,5,38)" fg:x="20" fg:w="1"/><text x="1.8734%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.7045%" y="517" width="0.0812%" height="15" fill="rgb(247,18,42)" fg:x="21" fg:w="1"/><text x="1.9545%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7045%" y="501" width="0.0812%" height="15" fill="rgb(241,131,45)" fg:x="21" fg:w="1"/><text x="1.9545%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="1.7857%" y="501" width="0.1623%" height="15" fill="rgb(249,31,29)" fg:x="22" fg:w="2"/><text x="2.0357%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.8669%" y="485" width="0.0812%" height="15" fill="rgb(225,111,53)" fg:x="23" fg:w="1"/><text x="2.1169%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.8669%" y="469" width="0.0812%" height="15" fill="rgb(238,160,17)" fg:x="23" fg:w="1"/><text x="2.1169%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.9481%" y="501" width="0.0812%" height="15" fill="rgb(214,148,48)" fg:x="24" fg:w="1"/><text x="2.1981%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="2.0292%" y="485" width="0.1623%" height="15" fill="rgb(232,36,49)" fg:x="25" fg:w="2"/><text x="2.2792%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.81%)</title><rect x="1.6234%" y="549" width="0.8117%" height="15" fill="rgb(209,103,24)" fg:x="20" fg:w="10"/><text x="1.8734%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.81%)</title><rect x="1.6234%" y="533" width="0.8117%" height="15" fill="rgb(229,88,8)" fg:x="20" fg:w="10"/><text x="1.8734%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.65%)</title><rect x="1.7857%" y="517" width="0.6494%" height="15" fill="rgb(213,181,19)" fg:x="22" fg:w="8"/><text x="2.0357%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="2.0292%" y="501" width="0.4058%" height="15" fill="rgb(254,191,54)" fg:x="25" fg:w="5"/><text x="2.2792%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="2.1916%" y="485" width="0.2435%" height="15" fill="rgb(241,83,37)" fg:x="27" fg:w="3"/><text x="2.4416%" y="495.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="2.2727%" y="469" width="0.1623%" height="15" fill="rgb(233,36,39)" fg:x="28" fg:w="2"/><text x="2.5227%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 2.11%)</title><rect x="0.4058%" y="597" width="2.1104%" height="15" fill="rgb(226,3,54)" fg:x="5" fg:w="26"/><text x="0.6558%" y="607.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (26 samples, 2.11%)</title><rect x="0.4058%" y="581" width="2.1104%" height="15" fill="rgb(245,192,40)" fg:x="5" fg:w="26"/><text x="0.6558%" y="591.50">c..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 2.03%)</title><rect x="0.4870%" y="565" width="2.0292%" height="15" fill="rgb(238,167,29)" fg:x="6" fg:w="25"/><text x="0.7370%" y="575.50">&lt;..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.4351%" y="549" width="0.0812%" height="15" fill="rgb(232,182,51)" fg:x="30" fg:w="1"/><text x="2.6851%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 2.19%)</title><rect x="0.4058%" y="629" width="2.1916%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="27"/><text x="0.6558%" y="639.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (27 samples, 2.19%)</title><rect x="0.4058%" y="613" width="2.1916%" height="15" fill="rgb(208,69,12)" fg:x="5" fg:w="27"/><text x="0.6558%" y="623.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.5162%" y="597" width="0.0812%" height="15" fill="rgb(235,93,37)" fg:x="31" fg:w="1"/><text x="2.7662%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.6786%" y="581" width="0.0812%" height="15" fill="rgb(213,116,39)" fg:x="33" fg:w="1"/><text x="2.9286%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::begin (1 samples, 0.08%)</title><rect x="2.7597%" y="581" width="0.0812%" height="15" fill="rgb(222,207,29)" fg:x="34" fg:w="1"/><text x="3.0097%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.8409%" y="565" width="0.0812%" height="15" fill="rgb(206,96,30)" fg:x="35" fg:w="1"/><text x="3.0909%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.8409%" y="549" width="0.0812%" height="15" fill="rgb(218,138,4)" fg:x="35" fg:w="1"/><text x="3.0909%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.8409%" y="533" width="0.0812%" height="15" fill="rgb(250,191,14)" fg:x="35" fg:w="1"/><text x="3.0909%" y="543.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="3.1656%" y="517" width="0.1623%" height="15" fill="rgb(239,60,40)" fg:x="39" fg:w="2"/><text x="3.4156%" y="527.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="3.2468%" y="501" width="0.0812%" height="15" fill="rgb(206,27,48)" fg:x="40" fg:w="1"/><text x="3.4968%" y="511.50"></text></g><g><title>__pthread_mutex_unlock (1 samples, 0.08%)</title><rect x="3.6526%" y="453" width="0.0812%" height="15" fill="rgb(225,35,8)" fg:x="45" fg:w="1"/><text x="3.9026%" y="463.50"></text></g><g><title>dlopen (16 samples, 1.30%)</title><rect x="3.3279%" y="517" width="1.2987%" height="15" fill="rgb(250,213,24)" fg:x="41" fg:w="16"/><text x="3.5779%" y="527.50"></text></g><g><title>_dl_catch_error (15 samples, 1.22%)</title><rect x="3.4091%" y="501" width="1.2175%" height="15" fill="rgb(247,123,22)" fg:x="42" fg:w="15"/><text x="3.6591%" y="511.50"></text></g><g><title>_dl_catch_exception (15 samples, 1.22%)</title><rect x="3.4091%" y="485" width="1.2175%" height="15" fill="rgb(231,138,38)" fg:x="42" fg:w="15"/><text x="3.6591%" y="495.50"></text></g><g><title>_dl_catch_exception (13 samples, 1.06%)</title><rect x="3.5714%" y="469" width="1.0552%" height="15" fill="rgb(231,145,46)" fg:x="44" fg:w="13"/><text x="3.8214%" y="479.50"></text></g><g><title>_dl_catch_exception (11 samples, 0.89%)</title><rect x="3.7338%" y="453" width="0.8929%" height="15" fill="rgb(251,118,11)" fg:x="46" fg:w="11"/><text x="3.9838%" y="463.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (22 samples, 1.79%)</title><rect x="2.9221%" y="549" width="1.7857%" height="15" fill="rgb(217,147,25)" fg:x="36" fg:w="22"/><text x="3.1721%" y="559.50">&lt;..</text></g><g><title>libloading::safe::Library::new (19 samples, 1.54%)</title><rect x="3.1656%" y="533" width="1.5422%" height="15" fill="rgb(247,81,37)" fg:x="39" fg:w="19"/><text x="3.4156%" y="543.50"></text></g><g><title>libloading::util::cstr_cow_from_bytes (1 samples, 0.08%)</title><rect x="4.6266%" y="517" width="0.0812%" height="15" fill="rgb(209,12,38)" fg:x="57" fg:w="1"/><text x="4.8766%" y="527.50"></text></g><g><title>&lt;&amp;str as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (1 samples, 0.08%)</title><rect x="4.6266%" y="501" width="0.0812%" height="15" fill="rgb(227,1,9)" fg:x="57" fg:w="1"/><text x="4.8766%" y="511.50"></text></g><g><title>alloc::ffi::c_str::CString::new::spec_new_impl_bytes (1 samples, 0.08%)</title><rect x="4.6266%" y="485" width="0.0812%" height="15" fill="rgb(248,47,43)" fg:x="57" fg:w="1"/><text x="4.8766%" y="495.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.08%)</title><rect x="4.6266%" y="469" width="0.0812%" height="15" fill="rgb(221,10,30)" fg:x="57" fg:w="1"/><text x="4.8766%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="4.7078%" y="549" width="0.0812%" height="15" fill="rgb(210,229,1)" fg:x="58" fg:w="1"/><text x="4.9578%" y="559.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="4.7078%" y="533" width="0.0812%" height="15" fill="rgb(222,148,37)" fg:x="58" fg:w="1"/><text x="4.9578%" y="543.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (24 samples, 1.95%)</title><rect x="2.9221%" y="565" width="1.9481%" height="15" fill="rgb(234,67,33)" fg:x="36" fg:w="24"/><text x="3.1721%" y="575.50">k..</text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="4.7890%" y="549" width="0.0812%" height="15" fill="rgb(247,98,35)" fg:x="59" fg:w="1"/><text x="5.0390%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="4.7890%" y="533" width="0.0812%" height="15" fill="rgb(247,138,52)" fg:x="59" fg:w="1"/><text x="5.0390%" y="543.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="4.8701%" y="565" width="0.0812%" height="15" fill="rgb(213,79,30)" fg:x="60" fg:w="1"/><text x="5.1201%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.8701%" y="549" width="0.0812%" height="15" fill="rgb(246,177,23)" fg:x="60" fg:w="1"/><text x="5.1201%" y="559.50"></text></g><g><title>engine::session::Session::initialize (28 samples, 2.27%)</title><rect x="2.8409%" y="581" width="2.2727%" height="15" fill="rgb(230,62,27)" fg:x="35" fg:w="28"/><text x="3.0909%" y="591.50">e..</text></g><g><title>kernel::session::SetSession&lt;T&gt;::new (2 samples, 0.16%)</title><rect x="4.9513%" y="565" width="0.1623%" height="15" fill="rgb(216,154,8)" fg:x="61" fg:w="2"/><text x="5.2013%" y="575.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (32 samples, 2.60%)</title><rect x="2.5974%" y="629" width="2.5974%" height="15" fill="rgb(244,35,45)" fg:x="32" fg:w="32"/><text x="2.8474%" y="639.50">&lt;e..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (32 samples, 2.60%)</title><rect x="2.5974%" y="613" width="2.5974%" height="15" fill="rgb(251,115,12)" fg:x="32" fg:w="32"/><text x="2.8474%" y="623.50">en..</text></g><g><title>engine::session::Session::new (31 samples, 2.52%)</title><rect x="2.6786%" y="597" width="2.5162%" height="15" fill="rgb(240,54,50)" fg:x="33" fg:w="31"/><text x="2.9286%" y="607.50">en..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="5.1136%" y="581" width="0.0812%" height="15" fill="rgb(233,84,52)" fg:x="63" fg:w="1"/><text x="5.3636%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.1136%" y="565" width="0.0812%" height="15" fill="rgb(207,117,47)" fg:x="63" fg:w="1"/><text x="5.3636%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.1136%" y="549" width="0.0812%" height="15" fill="rgb(249,43,39)" fg:x="63" fg:w="1"/><text x="5.3636%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.1136%" y="533" width="0.0812%" height="15" fill="rgb(209,38,44)" fg:x="63" fg:w="1"/><text x="5.3636%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.1136%" y="517" width="0.0812%" height="15" fill="rgb(236,212,23)" fg:x="63" fg:w="1"/><text x="5.3636%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.2760%" y="613" width="0.0812%" height="15" fill="rgb(242,79,21)" fg:x="65" fg:w="1"/><text x="5.5260%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.2760%" y="597" width="0.0812%" height="15" fill="rgb(211,96,35)" fg:x="65" fg:w="1"/><text x="5.5260%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::BuildSurroundings&gt; (1 samples, 0.08%)</title><rect x="5.3571%" y="613" width="0.0812%" height="15" fill="rgb(253,215,40)" fg:x="66" fg:w="1"/><text x="5.6071%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.3571%" y="597" width="0.0812%" height="15" fill="rgb(211,81,21)" fg:x="66" fg:w="1"/><text x="5.6071%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::begin (1 samples, 0.08%)</title><rect x="5.4383%" y="597" width="0.0812%" height="15" fill="rgb(208,190,38)" fg:x="67" fg:w="1"/><text x="5.6883%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="5.5195%" y="597" width="0.1623%" height="15" fill="rgb(235,213,38)" fg:x="68" fg:w="2"/><text x="5.7695%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="6.0065%" y="501" width="0.1623%" height="15" fill="rgb(237,122,38)" fg:x="74" fg:w="2"/><text x="6.2565%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.0065%" y="485" width="0.1623%" height="15" fill="rgb(244,218,35)" fg:x="74" fg:w="2"/><text x="6.2565%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.0877%" y="469" width="0.0812%" height="15" fill="rgb(240,68,47)" fg:x="75" fg:w="1"/><text x="6.3377%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.41%)</title><rect x="6.3312%" y="485" width="0.4058%" height="15" fill="rgb(210,16,53)" fg:x="78" fg:w="5"/><text x="6.5812%" y="495.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="6.4123%" y="469" width="0.3247%" height="15" fill="rgb(235,124,12)" fg:x="79" fg:w="4"/><text x="6.6623%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="6.4123%" y="453" width="0.3247%" height="15" fill="rgb(224,169,11)" fg:x="79" fg:w="4"/><text x="6.6623%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="6.4935%" y="437" width="0.2435%" height="15" fill="rgb(250,166,2)" fg:x="80" fg:w="3"/><text x="6.7435%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="6.5747%" y="421" width="0.1623%" height="15" fill="rgb(242,216,29)" fg:x="81" fg:w="2"/><text x="6.8247%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="6.5747%" y="405" width="0.1623%" height="15" fill="rgb(230,116,27)" fg:x="81" fg:w="2"/><text x="6.8247%" y="415.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="6.5747%" y="389" width="0.1623%" height="15" fill="rgb(228,99,48)" fg:x="81" fg:w="2"/><text x="6.8247%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.7370%" y="437" width="0.0812%" height="15" fill="rgb(253,11,6)" fg:x="83" fg:w="1"/><text x="6.9870%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.7370%" y="421" width="0.0812%" height="15" fill="rgb(247,143,39)" fg:x="83" fg:w="1"/><text x="6.9870%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.7370%" y="405" width="0.0812%" height="15" fill="rgb(236,97,10)" fg:x="83" fg:w="1"/><text x="6.9870%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.7370%" y="389" width="0.0812%" height="15" fill="rgb(233,208,19)" fg:x="83" fg:w="1"/><text x="6.9870%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.7370%" y="373" width="0.0812%" height="15" fill="rgb(216,164,2)" fg:x="83" fg:w="1"/><text x="6.9870%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.7370%" y="357" width="0.0812%" height="15" fill="rgb(220,129,5)" fg:x="83" fg:w="1"/><text x="6.9870%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.7370%" y="341" width="0.0812%" height="15" fill="rgb(242,17,10)" fg:x="83" fg:w="1"/><text x="6.9870%" y="351.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.8994%" y="421" width="0.0812%" height="15" fill="rgb(242,107,0)" fg:x="85" fg:w="1"/><text x="7.1494%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="6.7370%" y="469" width="0.3247%" height="15" fill="rgb(251,28,31)" fg:x="83" fg:w="4"/><text x="6.9870%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="6.7370%" y="453" width="0.3247%" height="15" fill="rgb(233,223,10)" fg:x="83" fg:w="4"/><text x="6.9870%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="6.8182%" y="437" width="0.2435%" height="15" fill="rgb(215,21,27)" fg:x="84" fg:w="3"/><text x="7.0682%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.9805%" y="421" width="0.0812%" height="15" fill="rgb(232,23,21)" fg:x="86" fg:w="1"/><text x="7.2305%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.9805%" y="405" width="0.0812%" height="15" fill="rgb(244,5,23)" fg:x="86" fg:w="1"/><text x="7.2305%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.9805%" y="389" width="0.0812%" height="15" fill="rgb(226,81,46)" fg:x="86" fg:w="1"/><text x="7.2305%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.0617%" y="469" width="0.0812%" height="15" fill="rgb(247,70,30)" fg:x="87" fg:w="1"/><text x="7.3117%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.0617%" y="453" width="0.0812%" height="15" fill="rgb(212,68,19)" fg:x="87" fg:w="1"/><text x="7.3117%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.0617%" y="437" width="0.0812%" height="15" fill="rgb(240,187,13)" fg:x="87" fg:w="1"/><text x="7.3117%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.0617%" y="421" width="0.0812%" height="15" fill="rgb(223,113,26)" fg:x="87" fg:w="1"/><text x="7.3117%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.0617%" y="405" width="0.0812%" height="15" fill="rgb(206,192,2)" fg:x="87" fg:w="1"/><text x="7.3117%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.0617%" y="389" width="0.0812%" height="15" fill="rgb(241,108,4)" fg:x="87" fg:w="1"/><text x="7.3117%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.0617%" y="373" width="0.0812%" height="15" fill="rgb(247,173,49)" fg:x="87" fg:w="1"/><text x="7.3117%" y="383.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.2240%" y="453" width="0.0812%" height="15" fill="rgb(224,114,35)" fg:x="89" fg:w="1"/><text x="7.4740%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.2240%" y="437" width="0.0812%" height="15" fill="rgb(245,159,27)" fg:x="89" fg:w="1"/><text x="7.4740%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.2240%" y="421" width="0.0812%" height="15" fill="rgb(245,172,44)" fg:x="89" fg:w="1"/><text x="7.4740%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.2240%" y="405" width="0.0812%" height="15" fill="rgb(236,23,11)" fg:x="89" fg:w="1"/><text x="7.4740%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.2240%" y="389" width="0.0812%" height="15" fill="rgb(205,117,38)" fg:x="89" fg:w="1"/><text x="7.4740%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.2240%" y="373" width="0.0812%" height="15" fill="rgb(237,72,25)" fg:x="89" fg:w="1"/><text x="7.4740%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.2240%" y="357" width="0.0812%" height="15" fill="rgb(244,70,9)" fg:x="89" fg:w="1"/><text x="7.4740%" y="367.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="7.3052%" y="437" width="0.3247%" height="15" fill="rgb(217,125,39)" fg:x="90" fg:w="4"/><text x="7.5552%" y="447.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="7.3052%" y="421" width="0.3247%" height="15" fill="rgb(235,36,10)" fg:x="90" fg:w="4"/><text x="7.5552%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.5487%" y="405" width="0.0812%" height="15" fill="rgb(251,123,47)" fg:x="93" fg:w="1"/><text x="7.7987%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.6299%" y="437" width="0.0812%" height="15" fill="rgb(221,13,13)" fg:x="94" fg:w="1"/><text x="7.8799%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="7.3052%" y="453" width="0.4870%" height="15" fill="rgb(238,131,9)" fg:x="90" fg:w="6"/><text x="7.5552%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.7110%" y="437" width="0.0812%" height="15" fill="rgb(211,50,8)" fg:x="95" fg:w="1"/><text x="7.9610%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.7110%" y="421" width="0.0812%" height="15" fill="rgb(245,182,24)" fg:x="95" fg:w="1"/><text x="7.9610%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.7110%" y="405" width="0.0812%" height="15" fill="rgb(242,14,37)" fg:x="95" fg:w="1"/><text x="7.9610%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.14%)</title><rect x="6.7370%" y="485" width="1.1364%" height="15" fill="rgb(246,228,12)" fg:x="83" fg:w="14"/><text x="6.9870%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.73%)</title><rect x="7.1429%" y="469" width="0.7305%" height="15" fill="rgb(213,55,15)" fg:x="88" fg:w="9"/><text x="7.3929%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.7922%" y="453" width="0.0812%" height="15" fill="rgb(209,9,3)" fg:x="96" fg:w="1"/><text x="8.0422%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.7922%" y="437" width="0.0812%" height="15" fill="rgb(230,59,30)" fg:x="96" fg:w="1"/><text x="8.0422%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.8734%" y="453" width="0.0812%" height="15" fill="rgb(209,121,21)" fg:x="97" fg:w="1"/><text x="8.1234%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.8734%" y="437" width="0.0812%" height="15" fill="rgb(220,109,13)" fg:x="97" fg:w="1"/><text x="8.1234%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.8734%" y="421" width="0.0812%" height="15" fill="rgb(232,18,1)" fg:x="97" fg:w="1"/><text x="8.1234%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.8734%" y="405" width="0.0812%" height="15" fill="rgb(215,41,42)" fg:x="97" fg:w="1"/><text x="8.1234%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (27 samples, 2.19%)</title><rect x="5.8442%" y="517" width="2.1916%" height="15" fill="rgb(224,123,36)" fg:x="72" fg:w="27"/><text x="6.0942%" y="527.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (23 samples, 1.87%)</title><rect x="6.1688%" y="501" width="1.8669%" height="15" fill="rgb(240,125,3)" fg:x="76" fg:w="23"/><text x="6.4188%" y="511.50">s..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.8734%" y="485" width="0.1623%" height="15" fill="rgb(205,98,50)" fg:x="97" fg:w="2"/><text x="8.1234%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="7.8734%" y="469" width="0.1623%" height="15" fill="rgb(205,185,37)" fg:x="97" fg:w="2"/><text x="8.1234%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="7.9545%" y="453" width="0.0812%" height="15" fill="rgb(238,207,15)" fg:x="98" fg:w="1"/><text x="8.2045%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.1169%" y="469" width="0.0812%" height="15" fill="rgb(213,199,42)" fg:x="100" fg:w="1"/><text x="8.3669%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.1981%" y="453" width="0.0812%" height="15" fill="rgb(235,201,11)" fg:x="101" fg:w="1"/><text x="8.4481%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.2792%" y="437" width="0.0812%" height="15" fill="rgb(207,46,11)" fg:x="102" fg:w="1"/><text x="8.5292%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="8.0357%" y="517" width="0.4870%" height="15" fill="rgb(241,35,35)" fg:x="99" fg:w="6"/><text x="8.2857%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.49%)</title><rect x="8.0357%" y="501" width="0.4870%" height="15" fill="rgb(243,32,47)" fg:x="99" fg:w="6"/><text x="8.2857%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="8.0357%" y="485" width="0.4870%" height="15" fill="rgb(247,202,23)" fg:x="99" fg:w="6"/><text x="8.2857%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="8.1981%" y="469" width="0.3247%" height="15" fill="rgb(219,102,11)" fg:x="101" fg:w="4"/><text x="8.4481%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.2792%" y="453" width="0.2435%" height="15" fill="rgb(243,110,44)" fg:x="102" fg:w="3"/><text x="8.5292%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.3604%" y="437" width="0.1623%" height="15" fill="rgb(222,74,54)" fg:x="103" fg:w="2"/><text x="8.6104%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="8.3604%" y="421" width="0.1623%" height="15" fill="rgb(216,99,12)" fg:x="103" fg:w="2"/><text x="8.6104%" y="431.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="8.5227%" y="501" width="0.0812%" height="15" fill="rgb(226,22,26)" fg:x="105" fg:w="1"/><text x="8.7727%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="8.5227%" y="485" width="0.0812%" height="15" fill="rgb(217,163,10)" fg:x="105" fg:w="1"/><text x="8.7727%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.5227%" y="469" width="0.0812%" height="15" fill="rgb(213,25,53)" fg:x="105" fg:w="1"/><text x="8.7727%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.6851%" y="469" width="0.0812%" height="15" fill="rgb(252,105,26)" fg:x="107" fg:w="1"/><text x="8.9351%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="8.7662%" y="469" width="0.0812%" height="15" fill="rgb(220,39,43)" fg:x="108" fg:w="1"/><text x="9.0162%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.7662%" y="453" width="0.0812%" height="15" fill="rgb(229,68,48)" fg:x="108" fg:w="1"/><text x="9.0162%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.7662%" y="437" width="0.0812%" height="15" fill="rgb(252,8,32)" fg:x="108" fg:w="1"/><text x="9.0162%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="8.8474%" y="469" width="0.0812%" height="15" fill="rgb(223,20,43)" fg:x="109" fg:w="1"/><text x="9.0974%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.8474%" y="453" width="0.0812%" height="15" fill="rgb(229,81,49)" fg:x="109" fg:w="1"/><text x="9.0974%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.8474%" y="437" width="0.0812%" height="15" fill="rgb(236,28,36)" fg:x="109" fg:w="1"/><text x="9.0974%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.0909%" y="357" width="0.0812%" height="15" fill="rgb(249,185,26)" fg:x="112" fg:w="1"/><text x="9.3409%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.0909%" y="341" width="0.0812%" height="15" fill="rgb(249,174,33)" fg:x="112" fg:w="1"/><text x="9.3409%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.0909%" y="325" width="0.0812%" height="15" fill="rgb(233,201,37)" fg:x="112" fg:w="1"/><text x="9.3409%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.0909%" y="309" width="0.0812%" height="15" fill="rgb(221,78,26)" fg:x="112" fg:w="1"/><text x="9.3409%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.0909%" y="293" width="0.0812%" height="15" fill="rgb(250,127,30)" fg:x="112" fg:w="1"/><text x="9.3409%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="9.0909%" y="389" width="0.1623%" height="15" fill="rgb(230,49,44)" fg:x="112" fg:w="2"/><text x="9.3409%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="9.0909%" y="373" width="0.1623%" height="15" fill="rgb(229,67,23)" fg:x="112" fg:w="2"/><text x="9.3409%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.1721%" y="357" width="0.0812%" height="15" fill="rgb(249,83,47)" fg:x="113" fg:w="1"/><text x="9.4221%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="9.0909%" y="421" width="0.2435%" height="15" fill="rgb(215,43,3)" fg:x="112" fg:w="3"/><text x="9.3409%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="9.0909%" y="405" width="0.2435%" height="15" fill="rgb(238,154,13)" fg:x="112" fg:w="3"/><text x="9.3409%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.2532%" y="389" width="0.0812%" height="15" fill="rgb(219,56,2)" fg:x="114" fg:w="1"/><text x="9.5032%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.4156%" y="389" width="0.0812%" height="15" fill="rgb(233,0,4)" fg:x="116" fg:w="1"/><text x="9.6656%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.4968%" y="373" width="0.0812%" height="15" fill="rgb(235,30,7)" fg:x="117" fg:w="1"/><text x="9.7468%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.4968%" y="357" width="0.0812%" height="15" fill="rgb(250,79,13)" fg:x="117" fg:w="1"/><text x="9.7468%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.73%)</title><rect x="8.9286%" y="453" width="0.7305%" height="15" fill="rgb(211,146,34)" fg:x="110" fg:w="9"/><text x="9.1786%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.57%)</title><rect x="9.0909%" y="437" width="0.5682%" height="15" fill="rgb(228,22,38)" fg:x="112" fg:w="7"/><text x="9.3409%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="9.3344%" y="421" width="0.3247%" height="15" fill="rgb(235,168,5)" fg:x="115" fg:w="4"/><text x="9.5844%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="9.3344%" y="405" width="0.3247%" height="15" fill="rgb(221,155,16)" fg:x="115" fg:w="4"/><text x="9.5844%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="9.4968%" y="389" width="0.1623%" height="15" fill="rgb(215,215,53)" fg:x="117" fg:w="2"/><text x="9.7468%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.5779%" y="373" width="0.0812%" height="15" fill="rgb(223,4,10)" fg:x="118" fg:w="1"/><text x="9.8279%" y="383.50"></text></g><g><title>engine::session::Session::flush (53 samples, 4.30%)</title><rect x="5.4383%" y="613" width="4.3019%" height="15" fill="rgb(234,103,6)" fg:x="67" fg:w="53"/><text x="5.6883%" y="623.50">engin..</text></g><g><title>engine::session::state::State::close (50 samples, 4.06%)</title><rect x="5.6818%" y="597" width="4.0584%" height="15" fill="rgb(227,97,0)" fg:x="70" fg:w="50"/><text x="5.9318%" y="607.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (50 samples, 4.06%)</title><rect x="5.6818%" y="581" width="4.0584%" height="15" fill="rgb(234,150,53)" fg:x="70" fg:w="50"/><text x="5.9318%" y="591.50">engi..</text></g><g><title>core::iter::adapters::try_process (50 samples, 4.06%)</title><rect x="5.6818%" y="565" width="4.0584%" height="15" fill="rgb(228,201,54)" fg:x="70" fg:w="50"/><text x="5.9318%" y="575.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (50 samples, 4.06%)</title><rect x="5.6818%" y="549" width="4.0584%" height="15" fill="rgb(222,22,37)" fg:x="70" fg:w="50"/><text x="5.9318%" y="559.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (50 samples, 4.06%)</title><rect x="5.6818%" y="533" width="4.0584%" height="15" fill="rgb(237,53,32)" fg:x="70" fg:w="50"/><text x="5.9318%" y="543.50">engi..</text></g><g><title>kernel::model::any_entity_changes (15 samples, 1.22%)</title><rect x="8.5227%" y="517" width="1.2175%" height="15" fill="rgb(233,25,53)" fg:x="105" fg:w="15"/><text x="8.7727%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (14 samples, 1.14%)</title><rect x="8.6039%" y="501" width="1.1364%" height="15" fill="rgb(210,40,34)" fg:x="106" fg:w="14"/><text x="8.8539%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.06%)</title><rect x="8.6851%" y="485" width="1.0552%" height="15" fill="rgb(241,220,44)" fg:x="107" fg:w="13"/><text x="8.9351%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.81%)</title><rect x="8.9286%" y="469" width="0.8117%" height="15" fill="rgb(235,28,35)" fg:x="110" fg:w="10"/><text x="9.1786%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.6591%" y="453" width="0.0812%" height="15" fill="rgb(210,56,17)" fg:x="119" fg:w="1"/><text x="9.9091%" y="463.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="9.7403%" y="581" width="0.0812%" height="15" fill="rgb(224,130,29)" fg:x="120" fg:w="1"/><text x="9.9903%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="9.7403%" y="565" width="0.0812%" height="15" fill="rgb(235,212,8)" fg:x="120" fg:w="1"/><text x="9.9903%" y="575.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="9.7403%" y="549" width="0.0812%" height="15" fill="rgb(223,33,50)" fg:x="120" fg:w="1"/><text x="9.9903%" y="559.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="9.7403%" y="613" width="0.1623%" height="15" fill="rgb(219,149,13)" fg:x="120" fg:w="2"/><text x="9.9903%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="9.7403%" y="597" width="0.1623%" height="15" fill="rgb(250,156,29)" fg:x="120" fg:w="2"/><text x="9.9903%" y="607.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="9.8214%" y="581" width="0.0812%" height="15" fill="rgb(216,193,19)" fg:x="121" fg:w="1"/><text x="10.0714%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="9.8214%" y="565" width="0.0812%" height="15" fill="rgb(216,135,14)" fg:x="121" fg:w="1"/><text x="10.0714%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8214%" y="549" width="0.0812%" height="15" fill="rgb(241,47,5)" fg:x="121" fg:w="1"/><text x="10.0714%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8214%" y="533" width="0.0812%" height="15" fill="rgb(233,42,35)" fg:x="121" fg:w="1"/><text x="10.0714%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="9.9026%" y="581" width="0.1623%" height="15" fill="rgb(231,13,6)" fg:x="122" fg:w="2"/><text x="10.1526%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="9.9026%" y="565" width="0.1623%" height="15" fill="rgb(207,181,40)" fg:x="122" fg:w="2"/><text x="10.1526%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="9.9838%" y="549" width="0.0812%" height="15" fill="rgb(254,173,49)" fg:x="123" fg:w="1"/><text x="10.2338%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.9838%" y="533" width="0.0812%" height="15" fill="rgb(221,1,38)" fg:x="123" fg:w="1"/><text x="10.2338%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.9838%" y="517" width="0.0812%" height="15" fill="rgb(206,124,46)" fg:x="123" fg:w="1"/><text x="10.2338%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.9838%" y="501" width="0.0812%" height="15" fill="rgb(249,21,11)" fg:x="123" fg:w="1"/><text x="10.2338%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.9838%" y="485" width="0.0812%" height="15" fill="rgb(222,201,40)" fg:x="123" fg:w="1"/><text x="10.2338%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.9838%" y="469" width="0.0812%" height="15" fill="rgb(235,61,29)" fg:x="123" fg:w="1"/><text x="10.2338%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.9838%" y="453" width="0.0812%" height="15" fill="rgb(219,207,3)" fg:x="123" fg:w="1"/><text x="10.2338%" y="463.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="10.0649%" y="581" width="0.1623%" height="15" fill="rgb(222,56,46)" fg:x="124" fg:w="2"/><text x="10.3149%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="10.0649%" y="565" width="0.1623%" height="15" fill="rgb(239,76,54)" fg:x="124" fg:w="2"/><text x="10.3149%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.0649%" y="549" width="0.1623%" height="15" fill="rgb(231,124,27)" fg:x="124" fg:w="2"/><text x="10.3149%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.0649%" y="533" width="0.1623%" height="15" fill="rgb(249,195,6)" fg:x="124" fg:w="2"/><text x="10.3149%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="10.0649%" y="517" width="0.1623%" height="15" fill="rgb(237,174,47)" fg:x="124" fg:w="2"/><text x="10.3149%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="10.0649%" y="501" width="0.1623%" height="15" fill="rgb(206,201,31)" fg:x="124" fg:w="2"/><text x="10.3149%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="10.0649%" y="485" width="0.1623%" height="15" fill="rgb(231,57,52)" fg:x="124" fg:w="2"/><text x="10.3149%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="10.0649%" y="469" width="0.1623%" height="15" fill="rgb(248,177,22)" fg:x="124" fg:w="2"/><text x="10.3149%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="10.0649%" y="453" width="0.1623%" height="15" fill="rgb(215,211,37)" fg:x="124" fg:w="2"/><text x="10.3149%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="10.0649%" y="437" width="0.1623%" height="15" fill="rgb(241,128,51)" fg:x="124" fg:w="2"/><text x="10.3149%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="10.0649%" y="421" width="0.1623%" height="15" fill="rgb(227,165,31)" fg:x="124" fg:w="2"/><text x="10.3149%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="10.0649%" y="405" width="0.1623%" height="15" fill="rgb(228,167,24)" fg:x="124" fg:w="2"/><text x="10.3149%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="10.0649%" y="389" width="0.1623%" height="15" fill="rgb(228,143,12)" fg:x="124" fg:w="2"/><text x="10.3149%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="10.0649%" y="373" width="0.1623%" height="15" fill="rgb(249,149,8)" fg:x="124" fg:w="2"/><text x="10.3149%" y="383.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="10.0649%" y="357" width="0.1623%" height="15" fill="rgb(243,35,44)" fg:x="124" fg:w="2"/><text x="10.3149%" y="367.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="10.0649%" y="341" width="0.1623%" height="15" fill="rgb(246,89,9)" fg:x="124" fg:w="2"/><text x="10.3149%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.41%)</title><rect x="9.9026%" y="597" width="0.4058%" height="15" fill="rgb(233,213,13)" fg:x="122" fg:w="5"/><text x="10.1526%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="10.2273%" y="581" width="0.0812%" height="15" fill="rgb(233,141,41)" fg:x="126" fg:w="1"/><text x="10.4773%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="10.2273%" y="565" width="0.0812%" height="15" fill="rgb(239,167,4)" fg:x="126" fg:w="1"/><text x="10.4773%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.2273%" y="549" width="0.0812%" height="15" fill="rgb(209,217,16)" fg:x="126" fg:w="1"/><text x="10.4773%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="10.2273%" y="533" width="0.0812%" height="15" fill="rgb(219,88,35)" fg:x="126" fg:w="1"/><text x="10.4773%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="10.2273%" y="517" width="0.0812%" height="15" fill="rgb(220,193,23)" fg:x="126" fg:w="1"/><text x="10.4773%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="10.2273%" y="501" width="0.0812%" height="15" fill="rgb(230,90,52)" fg:x="126" fg:w="1"/><text x="10.4773%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.2273%" y="485" width="0.0812%" height="15" fill="rgb(252,106,19)" fg:x="126" fg:w="1"/><text x="10.4773%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="10.2273%" y="469" width="0.0812%" height="15" fill="rgb(206,74,20)" fg:x="126" fg:w="1"/><text x="10.4773%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.2273%" y="453" width="0.0812%" height="15" fill="rgb(230,138,44)" fg:x="126" fg:w="1"/><text x="10.4773%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="10.2273%" y="437" width="0.0812%" height="15" fill="rgb(235,182,43)" fg:x="126" fg:w="1"/><text x="10.4773%" y="447.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.49%)</title><rect x="9.9026%" y="613" width="0.4870%" height="15" fill="rgb(242,16,51)" fg:x="122" fg:w="6"/><text x="10.1526%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="10.3084%" y="597" width="0.0812%" height="15" fill="rgb(248,9,4)" fg:x="127" fg:w="1"/><text x="10.5584%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.3084%" y="581" width="0.0812%" height="15" fill="rgb(210,31,22)" fg:x="127" fg:w="1"/><text x="10.5584%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="10.3084%" y="565" width="0.0812%" height="15" fill="rgb(239,54,39)" fg:x="127" fg:w="1"/><text x="10.5584%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.3084%" y="549" width="0.0812%" height="15" fill="rgb(230,99,41)" fg:x="127" fg:w="1"/><text x="10.5584%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.3084%" y="533" width="0.0812%" height="15" fill="rgb(253,106,12)" fg:x="127" fg:w="1"/><text x="10.5584%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.3084%" y="517" width="0.0812%" height="15" fill="rgb(213,46,41)" fg:x="127" fg:w="1"/><text x="10.5584%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.3084%" y="501" width="0.0812%" height="15" fill="rgb(215,133,35)" fg:x="127" fg:w="1"/><text x="10.5584%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.3084%" y="485" width="0.0812%" height="15" fill="rgb(213,28,5)" fg:x="127" fg:w="1"/><text x="10.5584%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.3084%" y="469" width="0.0812%" height="15" fill="rgb(215,77,49)" fg:x="127" fg:w="1"/><text x="10.5584%" y="479.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="10.3896%" y="613" width="0.0812%" height="15" fill="rgb(248,100,22)" fg:x="128" fg:w="1"/><text x="10.6396%" y="623.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="10.3896%" y="597" width="0.0812%" height="15" fill="rgb(208,67,9)" fg:x="128" fg:w="1"/><text x="10.6396%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="10.3896%" y="581" width="0.0812%" height="15" fill="rgb(219,133,21)" fg:x="128" fg:w="1"/><text x="10.6396%" y="591.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="10.3896%" y="565" width="0.0812%" height="15" fill="rgb(246,46,29)" fg:x="128" fg:w="1"/><text x="10.6396%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.3896%" y="549" width="0.0812%" height="15" fill="rgb(246,185,52)" fg:x="128" fg:w="1"/><text x="10.6396%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="10.3896%" y="533" width="0.0812%" height="15" fill="rgb(252,136,11)" fg:x="128" fg:w="1"/><text x="10.6396%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.3896%" y="517" width="0.0812%" height="15" fill="rgb(219,138,53)" fg:x="128" fg:w="1"/><text x="10.6396%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="10.3896%" y="501" width="0.0812%" height="15" fill="rgb(211,51,23)" fg:x="128" fg:w="1"/><text x="10.6396%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.3896%" y="485" width="0.0812%" height="15" fill="rgb(247,221,28)" fg:x="128" fg:w="1"/><text x="10.6396%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3896%" y="469" width="0.0812%" height="15" fill="rgb(251,222,45)" fg:x="128" fg:w="1"/><text x="10.6396%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3896%" y="453" width="0.0812%" height="15" fill="rgb(217,162,53)" fg:x="128" fg:w="1"/><text x="10.6396%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.3896%" y="437" width="0.0812%" height="15" fill="rgb(229,93,14)" fg:x="128" fg:w="1"/><text x="10.6396%" y="447.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="10.4708%" y="581" width="0.0812%" height="15" fill="rgb(209,67,49)" fg:x="129" fg:w="1"/><text x="10.7208%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="10.4708%" y="565" width="0.0812%" height="15" fill="rgb(213,87,29)" fg:x="129" fg:w="1"/><text x="10.7208%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="10.4708%" y="549" width="0.0812%" height="15" fill="rgb(205,151,52)" fg:x="129" fg:w="1"/><text x="10.7208%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.4708%" y="533" width="0.0812%" height="15" fill="rgb(253,215,39)" fg:x="129" fg:w="1"/><text x="10.7208%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="10.4708%" y="517" width="0.0812%" height="15" fill="rgb(221,220,41)" fg:x="129" fg:w="1"/><text x="10.7208%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.4708%" y="501" width="0.0812%" height="15" fill="rgb(218,133,21)" fg:x="129" fg:w="1"/><text x="10.7208%" y="511.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="10.5519%" y="581" width="0.0812%" height="15" fill="rgb(221,193,43)" fg:x="130" fg:w="1"/><text x="10.8019%" y="591.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="10.5519%" y="565" width="0.0812%" height="15" fill="rgb(240,128,52)" fg:x="130" fg:w="1"/><text x="10.8019%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.5519%" y="549" width="0.0812%" height="15" fill="rgb(253,114,12)" fg:x="130" fg:w="1"/><text x="10.8019%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.5519%" y="533" width="0.0812%" height="15" fill="rgb(215,223,47)" fg:x="130" fg:w="1"/><text x="10.8019%" y="543.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="10.5519%" y="517" width="0.0812%" height="15" fill="rgb(248,225,23)" fg:x="130" fg:w="1"/><text x="10.8019%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.5519%" y="501" width="0.0812%" height="15" fill="rgb(250,108,0)" fg:x="130" fg:w="1"/><text x="10.8019%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.5519%" y="485" width="0.0812%" height="15" fill="rgb(228,208,7)" fg:x="130" fg:w="1"/><text x="10.8019%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.6331%" y="549" width="0.0812%" height="15" fill="rgb(244,45,10)" fg:x="131" fg:w="1"/><text x="10.8831%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.6331%" y="533" width="0.0812%" height="15" fill="rgb(207,125,25)" fg:x="131" fg:w="1"/><text x="10.8831%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.6331%" y="517" width="0.0812%" height="15" fill="rgb(210,195,18)" fg:x="131" fg:w="1"/><text x="10.8831%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.6331%" y="501" width="0.0812%" height="15" fill="rgb(249,80,12)" fg:x="131" fg:w="1"/><text x="10.8831%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.6331%" y="485" width="0.0812%" height="15" fill="rgb(221,65,9)" fg:x="131" fg:w="1"/><text x="10.8831%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.6331%" y="469" width="0.0812%" height="15" fill="rgb(235,49,36)" fg:x="131" fg:w="1"/><text x="10.8831%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.6331%" y="453" width="0.0812%" height="15" fill="rgb(225,32,20)" fg:x="131" fg:w="1"/><text x="10.8831%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.6331%" y="437" width="0.0812%" height="15" fill="rgb(215,141,46)" fg:x="131" fg:w="1"/><text x="10.8831%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.6331%" y="421" width="0.0812%" height="15" fill="rgb(250,160,47)" fg:x="131" fg:w="1"/><text x="10.8831%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.6331%" y="405" width="0.0812%" height="15" fill="rgb(216,222,40)" fg:x="131" fg:w="1"/><text x="10.8831%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.6331%" y="389" width="0.0812%" height="15" fill="rgb(234,217,39)" fg:x="131" fg:w="1"/><text x="10.8831%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.6331%" y="373" width="0.0812%" height="15" fill="rgb(207,178,40)" fg:x="131" fg:w="1"/><text x="10.8831%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.6331%" y="357" width="0.0812%" height="15" fill="rgb(221,136,13)" fg:x="131" fg:w="1"/><text x="10.8831%" y="367.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="10.7143%" y="549" width="0.0812%" height="15" fill="rgb(249,199,10)" fg:x="132" fg:w="1"/><text x="10.9643%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="10.6331%" y="565" width="0.2435%" height="15" fill="rgb(249,222,13)" fg:x="131" fg:w="3"/><text x="10.8831%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.7955%" y="549" width="0.0812%" height="15" fill="rgb(244,185,38)" fg:x="133" fg:w="1"/><text x="11.0455%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.7955%" y="533" width="0.0812%" height="15" fill="rgb(236,202,9)" fg:x="133" fg:w="1"/><text x="11.0455%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.7955%" y="517" width="0.0812%" height="15" fill="rgb(250,229,37)" fg:x="133" fg:w="1"/><text x="11.0455%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="10.8766%" y="517" width="0.0812%" height="15" fill="rgb(206,174,23)" fg:x="134" fg:w="1"/><text x="11.1266%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.9578%" y="485" width="0.0812%" height="15" fill="rgb(211,33,43)" fg:x="135" fg:w="1"/><text x="11.2078%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.9578%" y="469" width="0.0812%" height="15" fill="rgb(245,58,50)" fg:x="135" fg:w="1"/><text x="11.2078%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.9578%" y="453" width="0.0812%" height="15" fill="rgb(244,68,36)" fg:x="135" fg:w="1"/><text x="11.2078%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="10.8766%" y="533" width="0.2435%" height="15" fill="rgb(232,229,15)" fg:x="134" fg:w="3"/><text x="11.1266%" y="543.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="10.9578%" y="517" width="0.1623%" height="15" fill="rgb(254,30,23)" fg:x="135" fg:w="2"/><text x="11.2078%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="10.9578%" y="501" width="0.1623%" height="15" fill="rgb(235,160,14)" fg:x="135" fg:w="2"/><text x="11.2078%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.0390%" y="485" width="0.0812%" height="15" fill="rgb(212,155,44)" fg:x="136" fg:w="1"/><text x="11.2890%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.0390%" y="469" width="0.0812%" height="15" fill="rgb(226,2,50)" fg:x="136" fg:w="1"/><text x="11.2890%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.0390%" y="453" width="0.0812%" height="15" fill="rgb(234,177,6)" fg:x="136" fg:w="1"/><text x="11.2890%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.0390%" y="437" width="0.0812%" height="15" fill="rgb(217,24,9)" fg:x="136" fg:w="1"/><text x="11.2890%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.0390%" y="421" width="0.0812%" height="15" fill="rgb(220,13,46)" fg:x="136" fg:w="1"/><text x="11.2890%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="11.0390%" y="405" width="0.0812%" height="15" fill="rgb(239,221,27)" fg:x="136" fg:w="1"/><text x="11.2890%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.1201%" y="421" width="0.0812%" height="15" fill="rgb(222,198,25)" fg:x="137" fg:w="1"/><text x="11.3701%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="11.1201%" y="405" width="0.0812%" height="15" fill="rgb(211,99,13)" fg:x="137" fg:w="1"/><text x="11.3701%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="11.1201%" y="389" width="0.0812%" height="15" fill="rgb(232,111,31)" fg:x="137" fg:w="1"/><text x="11.3701%" y="399.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (10 samples, 0.81%)</title><rect x="10.4708%" y="613" width="0.8117%" height="15" fill="rgb(245,82,37)" fg:x="129" fg:w="10"/><text x="10.7208%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (10 samples, 0.81%)</title><rect x="10.4708%" y="597" width="0.8117%" height="15" fill="rgb(227,149,46)" fg:x="129" fg:w="10"/><text x="10.7208%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (8 samples, 0.65%)</title><rect x="10.6331%" y="581" width="0.6494%" height="15" fill="rgb(218,36,50)" fg:x="131" fg:w="8"/><text x="10.8831%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (5 samples, 0.41%)</title><rect x="10.8766%" y="565" width="0.4058%" height="15" fill="rgb(226,80,48)" fg:x="134" fg:w="5"/><text x="11.1266%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (5 samples, 0.41%)</title><rect x="10.8766%" y="549" width="0.4058%" height="15" fill="rgb(238,224,15)" fg:x="134" fg:w="5"/><text x="11.1266%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="11.1201%" y="533" width="0.1623%" height="15" fill="rgb(241,136,10)" fg:x="137" fg:w="2"/><text x="11.3701%" y="543.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="11.1201%" y="517" width="0.1623%" height="15" fill="rgb(208,32,45)" fg:x="137" fg:w="2"/><text x="11.3701%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="11.1201%" y="501" width="0.1623%" height="15" fill="rgb(207,135,9)" fg:x="137" fg:w="2"/><text x="11.3701%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="11.1201%" y="485" width="0.1623%" height="15" fill="rgb(206,86,44)" fg:x="137" fg:w="2"/><text x="11.3701%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.1201%" y="469" width="0.1623%" height="15" fill="rgb(245,177,15)" fg:x="137" fg:w="2"/><text x="11.3701%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="11.1201%" y="453" width="0.1623%" height="15" fill="rgb(206,64,50)" fg:x="137" fg:w="2"/><text x="11.3701%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.1201%" y="437" width="0.1623%" height="15" fill="rgb(234,36,40)" fg:x="137" fg:w="2"/><text x="11.3701%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.2013%" y="421" width="0.0812%" height="15" fill="rgb(213,64,8)" fg:x="138" fg:w="1"/><text x="11.4513%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.2013%" y="405" width="0.0812%" height="15" fill="rgb(210,75,36)" fg:x="138" fg:w="1"/><text x="11.4513%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.2013%" y="389" width="0.0812%" height="15" fill="rgb(229,88,21)" fg:x="138" fg:w="1"/><text x="11.4513%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="11.3636%" y="597" width="0.0812%" height="15" fill="rgb(252,204,47)" fg:x="140" fg:w="1"/><text x="11.6136%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.3636%" y="581" width="0.0812%" height="15" fill="rgb(208,77,27)" fg:x="140" fg:w="1"/><text x="11.6136%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="11.4448%" y="597" width="0.1623%" height="15" fill="rgb(221,76,26)" fg:x="141" fg:w="2"/><text x="11.6948%" y="607.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="11.4448%" y="581" width="0.1623%" height="15" fill="rgb(225,139,18)" fg:x="141" fg:w="2"/><text x="11.6948%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="11.4448%" y="565" width="0.1623%" height="15" fill="rgb(230,137,11)" fg:x="141" fg:w="2"/><text x="11.6948%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.5260%" y="549" width="0.0812%" height="15" fill="rgb(212,28,1)" fg:x="142" fg:w="1"/><text x="11.7760%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.5260%" y="533" width="0.0812%" height="15" fill="rgb(248,164,17)" fg:x="142" fg:w="1"/><text x="11.7760%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.5260%" y="517" width="0.0812%" height="15" fill="rgb(222,171,42)" fg:x="142" fg:w="1"/><text x="11.7760%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.5260%" y="501" width="0.0812%" height="15" fill="rgb(243,84,45)" fg:x="142" fg:w="1"/><text x="11.7760%" y="511.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="11.5260%" y="485" width="0.0812%" height="15" fill="rgb(252,49,23)" fg:x="142" fg:w="1"/><text x="11.7760%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="11.6071%" y="597" width="0.0812%" height="15" fill="rgb(215,19,7)" fg:x="143" fg:w="1"/><text x="11.8571%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.6071%" y="581" width="0.0812%" height="15" fill="rgb(238,81,41)" fg:x="143" fg:w="1"/><text x="11.8571%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="11.6071%" y="565" width="0.0812%" height="15" fill="rgb(210,199,37)" fg:x="143" fg:w="1"/><text x="11.8571%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="11.6071%" y="549" width="0.0812%" height="15" fill="rgb(244,192,49)" fg:x="143" fg:w="1"/><text x="11.8571%" y="559.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="11.6071%" y="533" width="0.0812%" height="15" fill="rgb(226,211,11)" fg:x="143" fg:w="1"/><text x="11.8571%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.6071%" y="517" width="0.0812%" height="15" fill="rgb(236,162,54)" fg:x="143" fg:w="1"/><text x="11.8571%" y="527.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="11.6071%" y="501" width="0.0812%" height="15" fill="rgb(220,229,9)" fg:x="143" fg:w="1"/><text x="11.8571%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="11.6071%" y="485" width="0.0812%" height="15" fill="rgb(250,87,22)" fg:x="143" fg:w="1"/><text x="11.8571%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.7695%" y="565" width="0.0812%" height="15" fill="rgb(239,43,17)" fg:x="145" fg:w="1"/><text x="12.0195%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.7695%" y="549" width="0.0812%" height="15" fill="rgb(231,177,25)" fg:x="145" fg:w="1"/><text x="12.0195%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.7695%" y="533" width="0.0812%" height="15" fill="rgb(219,179,1)" fg:x="145" fg:w="1"/><text x="12.0195%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.7695%" y="517" width="0.0812%" height="15" fill="rgb(238,219,53)" fg:x="145" fg:w="1"/><text x="12.0195%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.7695%" y="501" width="0.0812%" height="15" fill="rgb(232,167,36)" fg:x="145" fg:w="1"/><text x="12.0195%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="11.7695%" y="485" width="0.0812%" height="15" fill="rgb(244,19,51)" fg:x="145" fg:w="1"/><text x="12.0195%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="11.7695%" y="469" width="0.0812%" height="15" fill="rgb(224,6,22)" fg:x="145" fg:w="1"/><text x="12.0195%" y="479.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (3 samples, 0.24%)</title><rect x="11.6883%" y="581" width="0.2435%" height="15" fill="rgb(224,145,5)" fg:x="144" fg:w="3"/><text x="11.9383%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.8506%" y="565" width="0.0812%" height="15" fill="rgb(234,130,49)" fg:x="146" fg:w="1"/><text x="12.1006%" y="575.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="11.9318%" y="565" width="0.0812%" height="15" fill="rgb(254,6,2)" fg:x="147" fg:w="1"/><text x="12.1818%" y="575.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="11.9318%" y="549" width="0.0812%" height="15" fill="rgb(208,96,46)" fg:x="147" fg:w="1"/><text x="12.1818%" y="559.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="11.9318%" y="533" width="0.0812%" height="15" fill="rgb(239,3,39)" fg:x="147" fg:w="1"/><text x="12.1818%" y="543.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="11.9318%" y="517" width="0.0812%" height="15" fill="rgb(233,210,1)" fg:x="147" fg:w="1"/><text x="12.1818%" y="527.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="11.9318%" y="501" width="0.0812%" height="15" fill="rgb(244,137,37)" fg:x="147" fg:w="1"/><text x="12.1818%" y="511.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="11.9318%" y="485" width="0.0812%" height="15" fill="rgb(240,136,2)" fg:x="147" fg:w="1"/><text x="12.1818%" y="495.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="11.9318%" y="469" width="0.0812%" height="15" fill="rgb(239,18,37)" fg:x="147" fg:w="1"/><text x="12.1818%" y="479.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="11.9318%" y="453" width="0.0812%" height="15" fill="rgb(218,185,22)" fg:x="147" fg:w="1"/><text x="12.1818%" y="463.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="12.0942%" y="533" width="0.0812%" height="15" fill="rgb(225,218,4)" fg:x="149" fg:w="1"/><text x="12.3442%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.0942%" y="517" width="0.0812%" height="15" fill="rgb(230,182,32)" fg:x="149" fg:w="1"/><text x="12.3442%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="12.4188%" y="469" width="0.0812%" height="15" fill="rgb(242,56,43)" fg:x="153" fg:w="1"/><text x="12.6688%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="12.4188%" y="453" width="0.0812%" height="15" fill="rgb(233,99,24)" fg:x="153" fg:w="1"/><text x="12.6688%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.4188%" y="437" width="0.0812%" height="15" fill="rgb(234,209,42)" fg:x="153" fg:w="1"/><text x="12.6688%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="12.5812%" y="453" width="0.0812%" height="15" fill="rgb(227,7,12)" fg:x="155" fg:w="1"/><text x="12.8312%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="12.6623%" y="437" width="0.1623%" height="15" fill="rgb(245,203,43)" fg:x="156" fg:w="2"/><text x="12.9123%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="12.6623%" y="421" width="0.1623%" height="15" fill="rgb(238,205,33)" fg:x="156" fg:w="2"/><text x="12.9123%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="12.7435%" y="405" width="0.0812%" height="15" fill="rgb(231,56,7)" fg:x="157" fg:w="1"/><text x="12.9935%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="12.7435%" y="389" width="0.0812%" height="15" fill="rgb(244,186,29)" fg:x="157" fg:w="1"/><text x="12.9935%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="12.8247%" y="437" width="0.0812%" height="15" fill="rgb(234,111,31)" fg:x="158" fg:w="1"/><text x="13.0747%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.8247%" y="421" width="0.0812%" height="15" fill="rgb(241,149,10)" fg:x="158" fg:w="1"/><text x="13.0747%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="12.9058%" y="421" width="0.1623%" height="15" fill="rgb(249,206,44)" fg:x="159" fg:w="2"/><text x="13.1558%" y="431.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.9058%" y="405" width="0.1623%" height="15" fill="rgb(251,153,30)" fg:x="159" fg:w="2"/><text x="13.1558%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="12.9058%" y="389" width="0.1623%" height="15" fill="rgb(239,152,38)" fg:x="159" fg:w="2"/><text x="13.1558%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.9870%" y="373" width="0.0812%" height="15" fill="rgb(249,139,47)" fg:x="160" fg:w="1"/><text x="13.2370%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.9870%" y="357" width="0.0812%" height="15" fill="rgb(244,64,35)" fg:x="160" fg:w="1"/><text x="13.2370%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.9870%" y="341" width="0.0812%" height="15" fill="rgb(216,46,15)" fg:x="160" fg:w="1"/><text x="13.2370%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="12.9870%" y="325" width="0.0812%" height="15" fill="rgb(250,74,19)" fg:x="160" fg:w="1"/><text x="13.2370%" y="335.50"></text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 0.49%)</title><rect x="13.1494%" y="405" width="0.4870%" height="15" fill="rgb(249,42,33)" fg:x="162" fg:w="6"/><text x="13.3994%" y="415.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.41%)</title><rect x="13.2305%" y="389" width="0.4058%" height="15" fill="rgb(242,149,17)" fg:x="163" fg:w="5"/><text x="13.4805%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="13.4740%" y="373" width="0.1623%" height="15" fill="rgb(244,29,21)" fg:x="166" fg:w="2"/><text x="13.7240%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="13.4740%" y="357" width="0.1623%" height="15" fill="rgb(220,130,37)" fg:x="166" fg:w="2"/><text x="13.7240%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.5552%" y="341" width="0.0812%" height="15" fill="rgb(211,67,2)" fg:x="167" fg:w="1"/><text x="13.8052%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.5552%" y="325" width="0.0812%" height="15" fill="rgb(235,68,52)" fg:x="167" fg:w="1"/><text x="13.8052%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.5552%" y="309" width="0.0812%" height="15" fill="rgb(246,142,3)" fg:x="167" fg:w="1"/><text x="13.8052%" y="319.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="13.0682%" y="421" width="0.6494%" height="15" fill="rgb(241,25,7)" fg:x="161" fg:w="8"/><text x="13.3182%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.6364%" y="405" width="0.0812%" height="15" fill="rgb(242,119,39)" fg:x="168" fg:w="1"/><text x="13.8864%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.6364%" y="389" width="0.0812%" height="15" fill="rgb(241,98,45)" fg:x="168" fg:w="1"/><text x="13.8864%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.6364%" y="373" width="0.0812%" height="15" fill="rgb(254,28,30)" fg:x="168" fg:w="1"/><text x="13.8864%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.97%)</title><rect x="12.9058%" y="437" width="0.9740%" height="15" fill="rgb(241,142,54)" fg:x="159" fg:w="12"/><text x="13.1558%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.7175%" y="421" width="0.1623%" height="15" fill="rgb(222,85,15)" fg:x="169" fg:w="2"/><text x="13.9675%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.7987%" y="405" width="0.0812%" height="15" fill="rgb(210,85,47)" fg:x="170" fg:w="1"/><text x="14.0487%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.30%)</title><rect x="12.6623%" y="453" width="1.2987%" height="15" fill="rgb(224,206,25)" fg:x="156" fg:w="16"/><text x="12.9123%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.8799%" y="437" width="0.0812%" height="15" fill="rgb(243,201,19)" fg:x="171" fg:w="1"/><text x="14.1299%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.8799%" y="421" width="0.0812%" height="15" fill="rgb(236,59,4)" fg:x="171" fg:w="1"/><text x="14.1299%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.8799%" y="405" width="0.0812%" height="15" fill="rgb(254,179,45)" fg:x="171" fg:w="1"/><text x="14.1299%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (21 samples, 1.70%)</title><rect x="12.3377%" y="485" width="1.7045%" height="15" fill="rgb(226,14,10)" fg:x="152" fg:w="21"/><text x="12.5877%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (19 samples, 1.54%)</title><rect x="12.5000%" y="469" width="1.5422%" height="15" fill="rgb(244,27,41)" fg:x="154" fg:w="19"/><text x="12.7500%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.9610%" y="453" width="0.0812%" height="15" fill="rgb(235,35,32)" fg:x="172" fg:w="1"/><text x="14.2110%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.1234%" y="453" width="0.0812%" height="15" fill="rgb(218,68,31)" fg:x="174" fg:w="1"/><text x="14.3734%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.1234%" y="437" width="0.0812%" height="15" fill="rgb(207,120,37)" fg:x="174" fg:w="1"/><text x="14.3734%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="14.2857%" y="437" width="0.1623%" height="15" fill="rgb(227,98,0)" fg:x="176" fg:w="2"/><text x="14.5357%" y="447.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="14.2857%" y="421" width="0.1623%" height="15" fill="rgb(207,7,3)" fg:x="176" fg:w="2"/><text x="14.5357%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.81%)</title><rect x="14.0422%" y="485" width="0.8117%" height="15" fill="rgb(206,98,19)" fg:x="173" fg:w="10"/><text x="14.2922%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (10 samples, 0.81%)</title><rect x="14.0422%" y="469" width="0.8117%" height="15" fill="rgb(217,5,26)" fg:x="173" fg:w="10"/><text x="14.2922%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.65%)</title><rect x="14.2045%" y="453" width="0.6494%" height="15" fill="rgb(235,190,38)" fg:x="175" fg:w="8"/><text x="14.4545%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="14.4481%" y="437" width="0.4058%" height="15" fill="rgb(247,86,24)" fg:x="178" fg:w="5"/><text x="14.6981%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="14.6916%" y="421" width="0.1623%" height="15" fill="rgb(205,101,16)" fg:x="181" fg:w="2"/><text x="14.9416%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="14.6916%" y="405" width="0.1623%" height="15" fill="rgb(246,168,33)" fg:x="181" fg:w="2"/><text x="14.9416%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="14.6916%" y="389" width="0.1623%" height="15" fill="rgb(231,114,1)" fg:x="181" fg:w="2"/><text x="14.9416%" y="399.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="14.8539%" y="469" width="0.0812%" height="15" fill="rgb(207,184,53)" fg:x="183" fg:w="1"/><text x="15.1039%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.8539%" y="453" width="0.0812%" height="15" fill="rgb(224,95,51)" fg:x="183" fg:w="1"/><text x="15.1039%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="15.0974%" y="437" width="0.2435%" height="15" fill="rgb(212,188,45)" fg:x="186" fg:w="3"/><text x="15.3474%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.2597%" y="421" width="0.0812%" height="15" fill="rgb(223,154,38)" fg:x="188" fg:w="1"/><text x="15.5097%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="15.3409%" y="437" width="0.0812%" height="15" fill="rgb(251,22,52)" fg:x="189" fg:w="1"/><text x="15.5909%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.3409%" y="421" width="0.0812%" height="15" fill="rgb(229,209,22)" fg:x="189" fg:w="1"/><text x="15.5909%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="15.4221%" y="437" width="0.0812%" height="15" fill="rgb(234,138,34)" fg:x="190" fg:w="1"/><text x="15.6721%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="15.5032%" y="437" width="0.0812%" height="15" fill="rgb(212,95,11)" fg:x="191" fg:w="1"/><text x="15.7532%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.5032%" y="421" width="0.0812%" height="15" fill="rgb(240,179,47)" fg:x="191" fg:w="1"/><text x="15.7532%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.5032%" y="405" width="0.0812%" height="15" fill="rgb(240,163,11)" fg:x="191" fg:w="1"/><text x="15.7532%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="15.6656%" y="405" width="0.0812%" height="15" fill="rgb(236,37,12)" fg:x="193" fg:w="1"/><text x="15.9156%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.7468%" y="389" width="0.0812%" height="15" fill="rgb(232,164,16)" fg:x="194" fg:w="1"/><text x="15.9968%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.7468%" y="373" width="0.0812%" height="15" fill="rgb(244,205,15)" fg:x="194" fg:w="1"/><text x="15.9968%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="15.8279%" y="389" width="0.0812%" height="15" fill="rgb(223,117,47)" fg:x="195" fg:w="1"/><text x="16.0779%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="15.8279%" y="373" width="0.0812%" height="15" fill="rgb(244,107,35)" fg:x="195" fg:w="1"/><text x="16.0779%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.8279%" y="357" width="0.0812%" height="15" fill="rgb(205,140,8)" fg:x="195" fg:w="1"/><text x="16.0779%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="15.8279%" y="341" width="0.0812%" height="15" fill="rgb(228,84,46)" fg:x="195" fg:w="1"/><text x="16.0779%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.8279%" y="325" width="0.0812%" height="15" fill="rgb(254,188,9)" fg:x="195" fg:w="1"/><text x="16.0779%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="15.8279%" y="309" width="0.0812%" height="15" fill="rgb(206,112,54)" fg:x="195" fg:w="1"/><text x="16.0779%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.8279%" y="293" width="0.0812%" height="15" fill="rgb(216,84,49)" fg:x="195" fg:w="1"/><text x="16.0779%" y="303.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="15.8279%" y="277" width="0.0812%" height="15" fill="rgb(214,194,35)" fg:x="195" fg:w="1"/><text x="16.0779%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="15.9091%" y="373" width="0.3247%" height="15" fill="rgb(249,28,3)" fg:x="196" fg:w="4"/><text x="16.1591%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="15.9091%" y="357" width="0.3247%" height="15" fill="rgb(222,56,52)" fg:x="196" fg:w="4"/><text x="16.1591%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="16.0714%" y="341" width="0.1623%" height="15" fill="rgb(245,217,50)" fg:x="198" fg:w="2"/><text x="16.3214%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="16.0714%" y="325" width="0.1623%" height="15" fill="rgb(213,201,24)" fg:x="198" fg:w="2"/><text x="16.3214%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="16.0714%" y="309" width="0.1623%" height="15" fill="rgb(248,116,28)" fg:x="198" fg:w="2"/><text x="16.3214%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="16.0714%" y="293" width="0.1623%" height="15" fill="rgb(219,72,43)" fg:x="198" fg:w="2"/><text x="16.3214%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.65%)</title><rect x="15.6656%" y="421" width="0.6494%" height="15" fill="rgb(209,138,14)" fg:x="193" fg:w="8"/><text x="15.9156%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.57%)</title><rect x="15.7468%" y="405" width="0.5682%" height="15" fill="rgb(222,18,33)" fg:x="194" fg:w="7"/><text x="15.9968%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="15.9091%" y="389" width="0.4058%" height="15" fill="rgb(213,199,7)" fg:x="196" fg:w="5"/><text x="16.1591%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.2338%" y="373" width="0.0812%" height="15" fill="rgb(250,110,10)" fg:x="200" fg:w="1"/><text x="16.4838%" y="383.50"></text></g><g><title>engine::session::Session::flush (58 samples, 4.71%)</title><rect x="11.6883%" y="597" width="4.7078%" height="15" fill="rgb(248,123,6)" fg:x="144" fg:w="58"/><text x="11.9383%" y="607.50">engin..</text></g><g><title>engine::session::Session::save_changes (55 samples, 4.46%)</title><rect x="11.9318%" y="581" width="4.4643%" height="15" fill="rgb(206,91,31)" fg:x="147" fg:w="55"/><text x="12.1818%" y="591.50">engin..</text></g><g><title>engine::session::state::State::close (54 samples, 4.38%)</title><rect x="12.0130%" y="565" width="4.3831%" height="15" fill="rgb(211,154,13)" fg:x="148" fg:w="54"/><text x="12.2630%" y="575.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (54 samples, 4.38%)</title><rect x="12.0130%" y="549" width="4.3831%" height="15" fill="rgb(225,148,7)" fg:x="148" fg:w="54"/><text x="12.2630%" y="559.50">engin..</text></g><g><title>core::iter::adapters::try_process (52 samples, 4.22%)</title><rect x="12.1753%" y="533" width="4.2208%" height="15" fill="rgb(220,160,43)" fg:x="150" fg:w="52"/><text x="12.4253%" y="543.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (52 samples, 4.22%)</title><rect x="12.1753%" y="517" width="4.2208%" height="15" fill="rgb(213,52,39)" fg:x="150" fg:w="52"/><text x="12.4253%" y="527.50">&lt;allo..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (52 samples, 4.22%)</title><rect x="12.1753%" y="501" width="4.2208%" height="15" fill="rgb(243,137,7)" fg:x="150" fg:w="52"/><text x="12.4253%" y="511.50">engin..</text></g><g><title>kernel::model::any_entity_changes (19 samples, 1.54%)</title><rect x="14.8539%" y="485" width="1.5422%" height="15" fill="rgb(230,79,13)" fg:x="183" fg:w="19"/><text x="15.1039%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (18 samples, 1.46%)</title><rect x="14.9351%" y="469" width="1.4610%" height="15" fill="rgb(247,105,23)" fg:x="184" fg:w="18"/><text x="15.1851%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (18 samples, 1.46%)</title><rect x="14.9351%" y="453" width="1.4610%" height="15" fill="rgb(223,179,41)" fg:x="184" fg:w="18"/><text x="15.1851%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.81%)</title><rect x="15.5844%" y="437" width="0.8117%" height="15" fill="rgb(218,9,34)" fg:x="192" fg:w="10"/><text x="15.8344%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.3149%" y="421" width="0.0812%" height="15" fill="rgb(222,106,8)" fg:x="201" fg:w="1"/><text x="16.5649%" y="431.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="16.3961%" y="597" width="0.1623%" height="15" fill="rgb(211,220,0)" fg:x="202" fg:w="2"/><text x="16.6461%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="16.3961%" y="581" width="0.1623%" height="15" fill="rgb(229,52,16)" fg:x="202" fg:w="2"/><text x="16.6461%" y="591.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="16.3961%" y="565" width="0.1623%" height="15" fill="rgb(212,155,18)" fg:x="202" fg:w="2"/><text x="16.6461%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="16.3961%" y="549" width="0.1623%" height="15" fill="rgb(242,21,14)" fg:x="202" fg:w="2"/><text x="16.6461%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="16.3961%" y="533" width="0.1623%" height="15" fill="rgb(222,19,48)" fg:x="202" fg:w="2"/><text x="16.6461%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="16.3961%" y="517" width="0.1623%" height="15" fill="rgb(232,45,27)" fg:x="202" fg:w="2"/><text x="16.6461%" y="527.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="16.3961%" y="501" width="0.1623%" height="15" fill="rgb(249,103,42)" fg:x="202" fg:w="2"/><text x="16.6461%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="16.3961%" y="485" width="0.1623%" height="15" fill="rgb(246,81,33)" fg:x="202" fg:w="2"/><text x="16.6461%" y="495.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="16.5584%" y="597" width="0.0812%" height="15" fill="rgb(252,33,42)" fg:x="204" fg:w="1"/><text x="16.8084%" y="607.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="16.5584%" y="581" width="0.0812%" height="15" fill="rgb(209,212,41)" fg:x="204" fg:w="1"/><text x="16.8084%" y="591.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="16.5584%" y="565" width="0.0812%" height="15" fill="rgb(207,154,6)" fg:x="204" fg:w="1"/><text x="16.8084%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="16.5584%" y="549" width="0.0812%" height="15" fill="rgb(223,64,47)" fg:x="204" fg:w="1"/><text x="16.8084%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.6396%" y="581" width="0.0812%" height="15" fill="rgb(211,161,38)" fg:x="205" fg:w="1"/><text x="16.8896%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.6396%" y="565" width="0.0812%" height="15" fill="rgb(219,138,40)" fg:x="205" fg:w="1"/><text x="16.8896%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.6396%" y="549" width="0.0812%" height="15" fill="rgb(241,228,46)" fg:x="205" fg:w="1"/><text x="16.8896%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.6396%" y="533" width="0.0812%" height="15" fill="rgb(223,209,38)" fg:x="205" fg:w="1"/><text x="16.8896%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.6396%" y="517" width="0.0812%" height="15" fill="rgb(236,164,45)" fg:x="205" fg:w="1"/><text x="16.8896%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.6396%" y="501" width="0.0812%" height="15" fill="rgb(231,15,5)" fg:x="205" fg:w="1"/><text x="16.8896%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.6396%" y="485" width="0.0812%" height="15" fill="rgb(252,35,15)" fg:x="205" fg:w="1"/><text x="16.8896%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.6396%" y="469" width="0.0812%" height="15" fill="rgb(248,181,18)" fg:x="205" fg:w="1"/><text x="16.8896%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.6396%" y="453" width="0.0812%" height="15" fill="rgb(233,39,42)" fg:x="205" fg:w="1"/><text x="16.8896%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.6396%" y="437" width="0.0812%" height="15" fill="rgb(238,110,33)" fg:x="205" fg:w="1"/><text x="16.8896%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.6396%" y="421" width="0.0812%" height="15" fill="rgb(233,195,10)" fg:x="205" fg:w="1"/><text x="16.8896%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.6396%" y="405" width="0.0812%" height="15" fill="rgb(254,105,3)" fg:x="205" fg:w="1"/><text x="16.8896%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.7208%" y="517" width="0.0812%" height="15" fill="rgb(221,225,9)" fg:x="206" fg:w="1"/><text x="16.9708%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.7208%" y="501" width="0.0812%" height="15" fill="rgb(224,227,45)" fg:x="206" fg:w="1"/><text x="16.9708%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.7208%" y="485" width="0.0812%" height="15" fill="rgb(229,198,43)" fg:x="206" fg:w="1"/><text x="16.9708%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.7208%" y="469" width="0.0812%" height="15" fill="rgb(206,209,35)" fg:x="206" fg:w="1"/><text x="16.9708%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.7208%" y="453" width="0.0812%" height="15" fill="rgb(245,195,53)" fg:x="206" fg:w="1"/><text x="16.9708%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.7208%" y="437" width="0.0812%" height="15" fill="rgb(240,92,26)" fg:x="206" fg:w="1"/><text x="16.9708%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.7208%" y="421" width="0.0812%" height="15" fill="rgb(207,40,23)" fg:x="206" fg:w="1"/><text x="16.9708%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.7208%" y="405" width="0.0812%" height="15" fill="rgb(223,111,35)" fg:x="206" fg:w="1"/><text x="16.9708%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.7208%" y="389" width="0.0812%" height="15" fill="rgb(229,147,28)" fg:x="206" fg:w="1"/><text x="16.9708%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.7208%" y="373" width="0.0812%" height="15" fill="rgb(211,29,28)" fg:x="206" fg:w="1"/><text x="16.9708%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.7208%" y="357" width="0.0812%" height="15" fill="rgb(228,72,33)" fg:x="206" fg:w="1"/><text x="16.9708%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.7208%" y="341" width="0.0812%" height="15" fill="rgb(205,214,31)" fg:x="206" fg:w="1"/><text x="16.9708%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.7208%" y="325" width="0.0812%" height="15" fill="rgb(224,111,15)" fg:x="206" fg:w="1"/><text x="16.9708%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.7208%" y="309" width="0.0812%" height="15" fill="rgb(253,21,26)" fg:x="206" fg:w="1"/><text x="16.9708%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="16.7208%" y="565" width="0.1623%" height="15" fill="rgb(245,139,43)" fg:x="206" fg:w="2"/><text x="16.9708%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="16.7208%" y="549" width="0.1623%" height="15" fill="rgb(252,170,7)" fg:x="206" fg:w="2"/><text x="16.9708%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="16.7208%" y="533" width="0.1623%" height="15" fill="rgb(231,118,14)" fg:x="206" fg:w="2"/><text x="16.9708%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.8019%" y="517" width="0.0812%" height="15" fill="rgb(238,83,0)" fg:x="207" fg:w="1"/><text x="17.0519%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.8019%" y="501" width="0.0812%" height="15" fill="rgb(221,39,39)" fg:x="207" fg:w="1"/><text x="17.0519%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.8019%" y="485" width="0.0812%" height="15" fill="rgb(222,119,46)" fg:x="207" fg:w="1"/><text x="17.0519%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.8019%" y="469" width="0.0812%" height="15" fill="rgb(222,165,49)" fg:x="207" fg:w="1"/><text x="17.0519%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="16.8019%" y="453" width="0.0812%" height="15" fill="rgb(219,113,52)" fg:x="207" fg:w="1"/><text x="17.0519%" y="463.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="16.8831%" y="565" width="0.0812%" height="15" fill="rgb(214,7,15)" fg:x="208" fg:w="1"/><text x="17.1331%" y="575.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="16.8831%" y="549" width="0.0812%" height="15" fill="rgb(235,32,4)" fg:x="208" fg:w="1"/><text x="17.1331%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.8831%" y="533" width="0.0812%" height="15" fill="rgb(238,90,54)" fg:x="208" fg:w="1"/><text x="17.1331%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.8831%" y="517" width="0.0812%" height="15" fill="rgb(213,208,19)" fg:x="208" fg:w="1"/><text x="17.1331%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="16.9643%" y="501" width="0.2435%" height="15" fill="rgb(233,156,4)" fg:x="209" fg:w="3"/><text x="17.2143%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.24%)</title><rect x="16.9643%" y="485" width="0.2435%" height="15" fill="rgb(207,194,5)" fg:x="209" fg:w="3"/><text x="17.2143%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="16.9643%" y="469" width="0.2435%" height="15" fill="rgb(206,111,30)" fg:x="209" fg:w="3"/><text x="17.2143%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="17.0455%" y="453" width="0.1623%" height="15" fill="rgb(243,70,54)" fg:x="210" fg:w="2"/><text x="17.2955%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="17.0455%" y="437" width="0.1623%" height="15" fill="rgb(242,28,8)" fg:x="210" fg:w="2"/><text x="17.2955%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="17.0455%" y="421" width="0.1623%" height="15" fill="rgb(219,106,18)" fg:x="210" fg:w="2"/><text x="17.2955%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="17.0455%" y="405" width="0.1623%" height="15" fill="rgb(244,222,10)" fg:x="210" fg:w="2"/><text x="17.2955%" y="415.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="17.1266%" y="389" width="0.0812%" height="15" fill="rgb(236,179,52)" fg:x="211" fg:w="1"/><text x="17.3766%" y="399.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="16.9643%" y="517" width="0.3247%" height="15" fill="rgb(213,23,39)" fg:x="209" fg:w="4"/><text x="17.2143%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.2078%" y="501" width="0.0812%" height="15" fill="rgb(238,48,10)" fg:x="212" fg:w="1"/><text x="17.4578%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (5 samples, 0.41%)</title><rect x="16.9643%" y="549" width="0.4058%" height="15" fill="rgb(251,196,23)" fg:x="209" fg:w="5"/><text x="17.2143%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (5 samples, 0.41%)</title><rect x="16.9643%" y="533" width="0.4058%" height="15" fill="rgb(250,152,24)" fg:x="209" fg:w="5"/><text x="17.2143%" y="543.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="17.2890%" y="517" width="0.0812%" height="15" fill="rgb(209,150,17)" fg:x="213" fg:w="1"/><text x="17.5390%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="17.2890%" y="501" width="0.0812%" height="15" fill="rgb(234,202,34)" fg:x="213" fg:w="1"/><text x="17.5390%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.2890%" y="485" width="0.0812%" height="15" fill="rgb(253,148,53)" fg:x="213" fg:w="1"/><text x="17.5390%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.2890%" y="469" width="0.0812%" height="15" fill="rgb(218,129,16)" fg:x="213" fg:w="1"/><text x="17.5390%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.2890%" y="453" width="0.0812%" height="15" fill="rgb(216,85,19)" fg:x="213" fg:w="1"/><text x="17.5390%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.2890%" y="437" width="0.0812%" height="15" fill="rgb(235,228,7)" fg:x="213" fg:w="1"/><text x="17.5390%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="17.5325%" y="517" width="0.0812%" height="15" fill="rgb(245,175,0)" fg:x="216" fg:w="1"/><text x="17.7825%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.5325%" y="501" width="0.0812%" height="15" fill="rgb(208,168,36)" fg:x="216" fg:w="1"/><text x="17.7825%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.5325%" y="485" width="0.0812%" height="15" fill="rgb(246,171,24)" fg:x="216" fg:w="1"/><text x="17.7825%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.5325%" y="469" width="0.0812%" height="15" fill="rgb(215,142,24)" fg:x="216" fg:w="1"/><text x="17.7825%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.5325%" y="453" width="0.0812%" height="15" fill="rgb(250,187,7)" fg:x="216" fg:w="1"/><text x="17.7825%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="17.6136%" y="517" width="0.0812%" height="15" fill="rgb(228,66,33)" fg:x="217" fg:w="1"/><text x="17.8636%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.6136%" y="501" width="0.0812%" height="15" fill="rgb(234,215,21)" fg:x="217" fg:w="1"/><text x="17.8636%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.6136%" y="485" width="0.0812%" height="15" fill="rgb(222,191,20)" fg:x="217" fg:w="1"/><text x="17.8636%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="17.6948%" y="501" width="0.2435%" height="15" fill="rgb(245,79,54)" fg:x="218" fg:w="3"/><text x="17.9448%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="17.6948%" y="485" width="0.2435%" height="15" fill="rgb(240,10,37)" fg:x="218" fg:w="3"/><text x="17.9448%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="17.6948%" y="469" width="0.2435%" height="15" fill="rgb(214,192,32)" fg:x="218" fg:w="3"/><text x="17.9448%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="17.6948%" y="453" width="0.2435%" height="15" fill="rgb(209,36,54)" fg:x="218" fg:w="3"/><text x="17.9448%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="17.6948%" y="437" width="0.2435%" height="15" fill="rgb(220,10,11)" fg:x="218" fg:w="3"/><text x="17.9448%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="17.6948%" y="421" width="0.2435%" height="15" fill="rgb(221,106,17)" fg:x="218" fg:w="3"/><text x="17.9448%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.8571%" y="405" width="0.0812%" height="15" fill="rgb(251,142,44)" fg:x="220" fg:w="1"/><text x="18.1071%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (16 samples, 1.30%)</title><rect x="16.7208%" y="581" width="1.2987%" height="15" fill="rgb(238,13,15)" fg:x="206" fg:w="16"/><text x="16.9708%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (13 samples, 1.06%)</title><rect x="16.9643%" y="565" width="1.0552%" height="15" fill="rgb(208,107,27)" fg:x="209" fg:w="13"/><text x="17.2143%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.65%)</title><rect x="17.3701%" y="549" width="0.6494%" height="15" fill="rgb(205,136,37)" fg:x="214" fg:w="8"/><text x="17.6201%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.65%)</title><rect x="17.3701%" y="533" width="0.6494%" height="15" fill="rgb(250,205,27)" fg:x="214" fg:w="8"/><text x="17.6201%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="17.6948%" y="517" width="0.3247%" height="15" fill="rgb(210,80,43)" fg:x="218" fg:w="4"/><text x="17.9448%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.9383%" y="501" width="0.0812%" height="15" fill="rgb(247,160,36)" fg:x="221" fg:w="1"/><text x="18.1883%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.0195%" y="533" width="0.0812%" height="15" fill="rgb(234,13,49)" fg:x="222" fg:w="1"/><text x="18.2695%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.0195%" y="517" width="0.0812%" height="15" fill="rgb(234,122,0)" fg:x="222" fg:w="1"/><text x="18.2695%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.0195%" y="501" width="0.0812%" height="15" fill="rgb(207,146,38)" fg:x="222" fg:w="1"/><text x="18.2695%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.0195%" y="485" width="0.0812%" height="15" fill="rgb(207,177,25)" fg:x="222" fg:w="1"/><text x="18.2695%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.1006%" y="501" width="0.0812%" height="15" fill="rgb(211,178,42)" fg:x="223" fg:w="1"/><text x="18.3506%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.1006%" y="485" width="0.0812%" height="15" fill="rgb(230,69,54)" fg:x="223" fg:w="1"/><text x="18.3506%" y="495.50"></text></g><g><title>plugins_core::build::Build::save (20 samples, 1.62%)</title><rect x="16.6396%" y="597" width="1.6234%" height="15" fill="rgb(214,135,41)" fg:x="205" fg:w="20"/><text x="16.8896%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="18.0195%" y="581" width="0.2435%" height="15" fill="rgb(237,67,25)" fg:x="222" fg:w="3"/><text x="18.2695%" y="591.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="18.0195%" y="565" width="0.2435%" height="15" fill="rgb(222,189,50)" fg:x="222" fg:w="3"/><text x="18.2695%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="18.0195%" y="549" width="0.2435%" height="15" fill="rgb(245,148,34)" fg:x="222" fg:w="3"/><text x="18.2695%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="18.1006%" y="533" width="0.1623%" height="15" fill="rgb(222,29,6)" fg:x="223" fg:w="2"/><text x="18.3506%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.1006%" y="517" width="0.1623%" height="15" fill="rgb(221,189,43)" fg:x="223" fg:w="2"/><text x="18.3506%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="18.1818%" y="501" width="0.0812%" height="15" fill="rgb(207,36,27)" fg:x="224" fg:w="1"/><text x="18.4318%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.1818%" y="485" width="0.0812%" height="15" fill="rgb(217,90,24)" fg:x="224" fg:w="1"/><text x="18.4318%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="18.1818%" y="469" width="0.0812%" height="15" fill="rgb(224,66,35)" fg:x="224" fg:w="1"/><text x="18.4318%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.1818%" y="453" width="0.0812%" height="15" fill="rgb(221,13,50)" fg:x="224" fg:w="1"/><text x="18.4318%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.2630%" y="565" width="0.0812%" height="15" fill="rgb(236,68,49)" fg:x="225" fg:w="1"/><text x="18.5130%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.2630%" y="549" width="0.0812%" height="15" fill="rgb(229,146,28)" fg:x="225" fg:w="1"/><text x="18.5130%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="18.3442%" y="485" width="0.1623%" height="15" fill="rgb(225,31,38)" fg:x="226" fg:w="2"/><text x="18.5942%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.4253%" y="469" width="0.0812%" height="15" fill="rgb(250,208,3)" fg:x="227" fg:w="1"/><text x="18.6753%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.4253%" y="453" width="0.0812%" height="15" fill="rgb(246,54,23)" fg:x="227" fg:w="1"/><text x="18.6753%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.4253%" y="437" width="0.0812%" height="15" fill="rgb(243,76,11)" fg:x="227" fg:w="1"/><text x="18.6753%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.4253%" y="421" width="0.0812%" height="15" fill="rgb(245,21,50)" fg:x="227" fg:w="1"/><text x="18.6753%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.4253%" y="405" width="0.0812%" height="15" fill="rgb(228,9,43)" fg:x="227" fg:w="1"/><text x="18.6753%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.4253%" y="389" width="0.0812%" height="15" fill="rgb(208,100,47)" fg:x="227" fg:w="1"/><text x="18.6753%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.4253%" y="373" width="0.0812%" height="15" fill="rgb(232,26,8)" fg:x="227" fg:w="1"/><text x="18.6753%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.4253%" y="357" width="0.0812%" height="15" fill="rgb(216,166,38)" fg:x="227" fg:w="1"/><text x="18.6753%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.4253%" y="341" width="0.0812%" height="15" fill="rgb(251,202,51)" fg:x="227" fg:w="1"/><text x="18.6753%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.4253%" y="325" width="0.0812%" height="15" fill="rgb(254,216,34)" fg:x="227" fg:w="1"/><text x="18.6753%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.4253%" y="309" width="0.0812%" height="15" fill="rgb(251,32,27)" fg:x="227" fg:w="1"/><text x="18.6753%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.4253%" y="293" width="0.0812%" height="15" fill="rgb(208,127,28)" fg:x="227" fg:w="1"/><text x="18.6753%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.4253%" y="277" width="0.0812%" height="15" fill="rgb(224,137,22)" fg:x="227" fg:w="1"/><text x="18.6753%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.4253%" y="261" width="0.0812%" height="15" fill="rgb(254,70,32)" fg:x="227" fg:w="1"/><text x="18.6753%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="18.3442%" y="565" width="0.3247%" height="15" fill="rgb(229,75,37)" fg:x="226" fg:w="4"/><text x="18.5942%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="18.3442%" y="549" width="0.3247%" height="15" fill="rgb(252,64,23)" fg:x="226" fg:w="4"/><text x="18.5942%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="18.3442%" y="533" width="0.3247%" height="15" fill="rgb(232,162,48)" fg:x="226" fg:w="4"/><text x="18.5942%" y="543.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="18.3442%" y="517" width="0.3247%" height="15" fill="rgb(246,160,12)" fg:x="226" fg:w="4"/><text x="18.5942%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="18.3442%" y="501" width="0.3247%" height="15" fill="rgb(247,166,0)" fg:x="226" fg:w="4"/><text x="18.5942%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="18.5065%" y="485" width="0.1623%" height="15" fill="rgb(249,219,21)" fg:x="228" fg:w="2"/><text x="18.7565%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.5065%" y="469" width="0.1623%" height="15" fill="rgb(205,209,3)" fg:x="228" fg:w="2"/><text x="18.7565%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="18.5065%" y="453" width="0.1623%" height="15" fill="rgb(243,44,1)" fg:x="228" fg:w="2"/><text x="18.7565%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.5065%" y="437" width="0.1623%" height="15" fill="rgb(206,159,16)" fg:x="228" fg:w="2"/><text x="18.7565%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="18.5877%" y="421" width="0.0812%" height="15" fill="rgb(244,77,30)" fg:x="229" fg:w="1"/><text x="18.8377%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.5877%" y="405" width="0.0812%" height="15" fill="rgb(218,69,12)" fg:x="229" fg:w="1"/><text x="18.8377%" y="415.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="18.6688%" y="517" width="0.0812%" height="15" fill="rgb(212,87,7)" fg:x="230" fg:w="1"/><text x="18.9188%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.6688%" y="501" width="0.0812%" height="15" fill="rgb(245,114,25)" fg:x="230" fg:w="1"/><text x="18.9188%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.6688%" y="485" width="0.0812%" height="15" fill="rgb(210,61,42)" fg:x="230" fg:w="1"/><text x="18.9188%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.6688%" y="469" width="0.0812%" height="15" fill="rgb(211,52,33)" fg:x="230" fg:w="1"/><text x="18.9188%" y="479.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (7 samples, 0.57%)</title><rect x="18.2630%" y="597" width="0.5682%" height="15" fill="rgb(234,58,33)" fg:x="225" fg:w="7"/><text x="18.5130%" y="607.50"></text></g><g><title>plugins_core::tools::set_occupying (7 samples, 0.57%)</title><rect x="18.2630%" y="581" width="0.5682%" height="15" fill="rgb(220,115,36)" fg:x="225" fg:w="7"/><text x="18.5130%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="18.6688%" y="565" width="0.1623%" height="15" fill="rgb(243,153,54)" fg:x="230" fg:w="2"/><text x="18.9188%" y="575.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="18.6688%" y="549" width="0.1623%" height="15" fill="rgb(251,47,18)" fg:x="230" fg:w="2"/><text x="18.9188%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="18.6688%" y="533" width="0.1623%" height="15" fill="rgb(242,102,42)" fg:x="230" fg:w="2"/><text x="18.9188%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="18.7500%" y="517" width="0.0812%" height="15" fill="rgb(234,31,38)" fg:x="231" fg:w="1"/><text x="19.0000%" y="527.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="18.7500%" y="501" width="0.0812%" height="15" fill="rgb(221,117,51)" fg:x="231" fg:w="1"/><text x="19.0000%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.7500%" y="485" width="0.0812%" height="15" fill="rgb(212,20,18)" fg:x="231" fg:w="1"/><text x="19.0000%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.7500%" y="469" width="0.0812%" height="15" fill="rgb(245,133,36)" fg:x="231" fg:w="1"/><text x="19.0000%" y="479.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="18.8312%" y="581" width="0.1623%" height="15" fill="rgb(212,6,19)" fg:x="232" fg:w="2"/><text x="19.0812%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="18.8312%" y="565" width="0.1623%" height="15" fill="rgb(218,1,36)" fg:x="232" fg:w="2"/><text x="19.0812%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.8312%" y="549" width="0.1623%" height="15" fill="rgb(246,84,54)" fg:x="232" fg:w="2"/><text x="19.0812%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="18.8312%" y="533" width="0.1623%" height="15" fill="rgb(242,110,6)" fg:x="232" fg:w="2"/><text x="19.0812%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.8312%" y="517" width="0.1623%" height="15" fill="rgb(214,47,5)" fg:x="232" fg:w="2"/><text x="19.0812%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="18.9123%" y="501" width="0.0812%" height="15" fill="rgb(218,159,25)" fg:x="233" fg:w="1"/><text x="19.1623%" y="511.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="18.9123%" y="485" width="0.0812%" height="15" fill="rgb(215,211,28)" fg:x="233" fg:w="1"/><text x="19.1623%" y="495.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="18.9123%" y="469" width="0.0812%" height="15" fill="rgb(238,59,32)" fg:x="233" fg:w="1"/><text x="19.1623%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.9935%" y="469" width="0.0812%" height="15" fill="rgb(226,82,3)" fg:x="234" fg:w="1"/><text x="19.2435%" y="479.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (4 samples, 0.32%)</title><rect x="18.8312%" y="597" width="0.3247%" height="15" fill="rgb(240,164,32)" fg:x="232" fg:w="4"/><text x="19.0812%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="18.9935%" y="581" width="0.1623%" height="15" fill="rgb(232,46,7)" fg:x="234" fg:w="2"/><text x="19.2435%" y="591.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="18.9935%" y="565" width="0.1623%" height="15" fill="rgb(229,129,53)" fg:x="234" fg:w="2"/><text x="19.2435%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="18.9935%" y="549" width="0.1623%" height="15" fill="rgb(234,188,29)" fg:x="234" fg:w="2"/><text x="19.2435%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="18.9935%" y="533" width="0.1623%" height="15" fill="rgb(246,141,4)" fg:x="234" fg:w="2"/><text x="19.2435%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_variant (2 samples, 0.16%)</title><rect x="18.9935%" y="517" width="0.1623%" height="15" fill="rgb(229,23,39)" fg:x="234" fg:w="2"/><text x="19.2435%" y="527.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (2 samples, 0.16%)</title><rect x="18.9935%" y="501" width="0.1623%" height="15" fill="rgb(206,12,3)" fg:x="234" fg:w="2"/><text x="19.2435%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="18.9935%" y="485" width="0.1623%" height="15" fill="rgb(252,226,20)" fg:x="234" fg:w="2"/><text x="19.2435%" y="495.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="19.0747%" y="469" width="0.0812%" height="15" fill="rgb(216,123,35)" fg:x="235" fg:w="1"/><text x="19.3247%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.0747%" y="453" width="0.0812%" height="15" fill="rgb(212,68,40)" fg:x="235" fg:w="1"/><text x="19.3247%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.0747%" y="437" width="0.0812%" height="15" fill="rgb(254,125,32)" fg:x="235" fg:w="1"/><text x="19.3247%" y="447.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="19.1558%" y="581" width="0.0812%" height="15" fill="rgb(253,97,22)" fg:x="236" fg:w="1"/><text x="19.4058%" y="591.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="19.1558%" y="565" width="0.0812%" height="15" fill="rgb(241,101,14)" fg:x="236" fg:w="1"/><text x="19.4058%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.1558%" y="549" width="0.0812%" height="15" fill="rgb(238,103,29)" fg:x="236" fg:w="1"/><text x="19.4058%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="19.2370%" y="533" width="0.0812%" height="15" fill="rgb(233,195,47)" fg:x="237" fg:w="1"/><text x="19.4870%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="19.2370%" y="517" width="0.0812%" height="15" fill="rgb(246,218,30)" fg:x="237" fg:w="1"/><text x="19.4870%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="19.2370%" y="501" width="0.0812%" height="15" fill="rgb(219,145,47)" fg:x="237" fg:w="1"/><text x="19.4870%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.2370%" y="485" width="0.0812%" height="15" fill="rgb(243,12,26)" fg:x="237" fg:w="1"/><text x="19.4870%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.2370%" y="469" width="0.0812%" height="15" fill="rgb(214,87,16)" fg:x="237" fg:w="1"/><text x="19.4870%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.2370%" y="453" width="0.0812%" height="15" fill="rgb(208,99,42)" fg:x="237" fg:w="1"/><text x="19.4870%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.2370%" y="437" width="0.0812%" height="15" fill="rgb(253,99,2)" fg:x="237" fg:w="1"/><text x="19.4870%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.3182%" y="485" width="0.0812%" height="15" fill="rgb(220,168,23)" fg:x="238" fg:w="1"/><text x="19.5682%" y="495.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="19.1558%" y="597" width="0.3247%" height="15" fill="rgb(242,38,24)" fg:x="236" fg:w="4"/><text x="19.4058%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="19.2370%" y="581" width="0.2435%" height="15" fill="rgb(225,182,9)" fg:x="237" fg:w="3"/><text x="19.4870%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="19.2370%" y="565" width="0.2435%" height="15" fill="rgb(243,178,37)" fg:x="237" fg:w="3"/><text x="19.4870%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="19.2370%" y="549" width="0.2435%" height="15" fill="rgb(232,139,19)" fg:x="237" fg:w="3"/><text x="19.4870%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="19.3182%" y="533" width="0.1623%" height="15" fill="rgb(225,201,24)" fg:x="238" fg:w="2"/><text x="19.5682%" y="543.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="19.3182%" y="517" width="0.1623%" height="15" fill="rgb(221,47,46)" fg:x="238" fg:w="2"/><text x="19.5682%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="19.3182%" y="501" width="0.1623%" height="15" fill="rgb(249,23,13)" fg:x="238" fg:w="2"/><text x="19.5682%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="19.3994%" y="485" width="0.0812%" height="15" fill="rgb(219,9,5)" fg:x="239" fg:w="1"/><text x="19.6494%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.3994%" y="469" width="0.0812%" height="15" fill="rgb(254,171,16)" fg:x="239" fg:w="1"/><text x="19.6494%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="19.3994%" y="453" width="0.0812%" height="15" fill="rgb(230,171,20)" fg:x="239" fg:w="1"/><text x="19.6494%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.3994%" y="437" width="0.0812%" height="15" fill="rgb(210,71,41)" fg:x="239" fg:w="1"/><text x="19.6494%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="19.3994%" y="421" width="0.0812%" height="15" fill="rgb(206,173,20)" fg:x="239" fg:w="1"/><text x="19.6494%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.3994%" y="405" width="0.0812%" height="15" fill="rgb(233,88,34)" fg:x="239" fg:w="1"/><text x="19.6494%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.3994%" y="389" width="0.0812%" height="15" fill="rgb(223,209,46)" fg:x="239" fg:w="1"/><text x="19.6494%" y="399.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="19.4805%" y="581" width="0.0812%" height="15" fill="rgb(250,43,18)" fg:x="240" fg:w="1"/><text x="19.7305%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (103 samples, 8.36%)</title><rect x="11.2825%" y="613" width="8.3604%" height="15" fill="rgb(208,13,10)" fg:x="139" fg:w="103"/><text x="11.5325%" y="623.50">plugins_core..</text></g><g><title>plugins_core::tools::set_wearing (2 samples, 0.16%)</title><rect x="19.4805%" y="597" width="0.1623%" height="15" fill="rgb(212,200,36)" fg:x="240" fg:w="2"/><text x="19.7305%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="19.5617%" y="581" width="0.0812%" height="15" fill="rgb(225,90,30)" fg:x="241" fg:w="1"/><text x="19.8117%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="19.5617%" y="565" width="0.0812%" height="15" fill="rgb(236,182,39)" fg:x="241" fg:w="1"/><text x="19.8117%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="19.6429%" y="613" width="0.0812%" height="15" fill="rgb(212,144,35)" fg:x="242" fg:w="1"/><text x="19.8929%" y="623.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="19.6429%" y="597" width="0.0812%" height="15" fill="rgb(228,63,44)" fg:x="242" fg:w="1"/><text x="19.8929%" y="607.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="19.6429%" y="581" width="0.0812%" height="15" fill="rgb(228,109,6)" fg:x="242" fg:w="1"/><text x="19.8929%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.6429%" y="565" width="0.0812%" height="15" fill="rgb(238,117,24)" fg:x="242" fg:w="1"/><text x="19.8929%" y="575.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="19.7240%" y="581" width="0.0812%" height="15" fill="rgb(242,26,26)" fg:x="243" fg:w="1"/><text x="19.9740%" y="591.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="19.7240%" y="565" width="0.0812%" height="15" fill="rgb(221,92,48)" fg:x="243" fg:w="1"/><text x="19.9740%" y="575.50"></text></g><g><title>kernel::model::builder::EntityBuilder::new (1 samples, 0.08%)</title><rect x="19.7240%" y="549" width="0.0812%" height="15" fill="rgb(209,209,32)" fg:x="243" fg:w="1"/><text x="19.9740%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.7240%" y="533" width="0.0812%" height="15" fill="rgb(221,70,22)" fg:x="243" fg:w="1"/><text x="19.9740%" y="543.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="19.8052%" y="533" width="0.0812%" height="15" fill="rgb(248,145,5)" fg:x="244" fg:w="1"/><text x="20.0552%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="19.8052%" y="517" width="0.0812%" height="15" fill="rgb(226,116,26)" fg:x="244" fg:w="1"/><text x="20.0552%" y="527.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="19.8052%" y="549" width="0.1623%" height="15" fill="rgb(244,5,17)" fg:x="244" fg:w="2"/><text x="20.0552%" y="559.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="19.8864%" y="533" width="0.0812%" height="15" fill="rgb(252,159,33)" fg:x="245" fg:w="1"/><text x="20.1364%" y="543.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="19.8864%" y="517" width="0.0812%" height="15" fill="rgb(206,71,0)" fg:x="245" fg:w="1"/><text x="20.1364%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.8864%" y="501" width="0.0812%" height="15" fill="rgb(233,118,54)" fg:x="245" fg:w="1"/><text x="20.1364%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.8864%" y="485" width="0.0812%" height="15" fill="rgb(234,83,48)" fg:x="245" fg:w="1"/><text x="20.1364%" y="495.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="19.9675%" y="501" width="0.0812%" height="15" fill="rgb(228,3,54)" fg:x="246" fg:w="1"/><text x="20.2175%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="19.9675%" y="485" width="0.0812%" height="15" fill="rgb(226,155,13)" fg:x="246" fg:w="1"/><text x="20.2175%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="19.9675%" y="469" width="0.0812%" height="15" fill="rgb(241,28,37)" fg:x="246" fg:w="1"/><text x="20.2175%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.9675%" y="453" width="0.0812%" height="15" fill="rgb(233,93,10)" fg:x="246" fg:w="1"/><text x="20.2175%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="19.9675%" y="437" width="0.0812%" height="15" fill="rgb(225,113,19)" fg:x="246" fg:w="1"/><text x="20.2175%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.9675%" y="421" width="0.0812%" height="15" fill="rgb(241,2,18)" fg:x="246" fg:w="1"/><text x="20.2175%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.9675%" y="405" width="0.0812%" height="15" fill="rgb(228,207,21)" fg:x="246" fg:w="1"/><text x="20.2175%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="19.9675%" y="389" width="0.0812%" height="15" fill="rgb(213,211,35)" fg:x="246" fg:w="1"/><text x="20.2175%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.0487%" y="421" width="0.0812%" height="15" fill="rgb(209,83,10)" fg:x="247" fg:w="1"/><text x="20.2987%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.0487%" y="405" width="0.0812%" height="15" fill="rgb(209,164,1)" fg:x="247" fg:w="1"/><text x="20.2987%" y="415.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="19.9675%" y="533" width="0.2435%" height="15" fill="rgb(213,184,43)" fg:x="246" fg:w="3"/><text x="20.2175%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="19.9675%" y="517" width="0.2435%" height="15" fill="rgb(231,61,34)" fg:x="246" fg:w="3"/><text x="20.2175%" y="527.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="20.0487%" y="501" width="0.1623%" height="15" fill="rgb(235,75,3)" fg:x="247" fg:w="2"/><text x="20.2987%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="20.0487%" y="485" width="0.1623%" height="15" fill="rgb(220,106,47)" fg:x="247" fg:w="2"/><text x="20.2987%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="20.0487%" y="469" width="0.1623%" height="15" fill="rgb(210,196,33)" fg:x="247" fg:w="2"/><text x="20.2987%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="20.0487%" y="453" width="0.1623%" height="15" fill="rgb(229,154,42)" fg:x="247" fg:w="2"/><text x="20.2987%" y="463.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="20.0487%" y="437" width="0.1623%" height="15" fill="rgb(228,114,26)" fg:x="247" fg:w="2"/><text x="20.2987%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.1299%" y="421" width="0.0812%" height="15" fill="rgb(208,144,1)" fg:x="248" fg:w="1"/><text x="20.3799%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.49%)</title><rect x="19.8052%" y="565" width="0.4870%" height="15" fill="rgb(239,112,37)" fg:x="244" fg:w="6"/><text x="20.0552%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="19.9675%" y="549" width="0.3247%" height="15" fill="rgb(210,96,50)" fg:x="246" fg:w="4"/><text x="20.2175%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="20.2110%" y="533" width="0.0812%" height="15" fill="rgb(222,178,2)" fg:x="249" fg:w="1"/><text x="20.4610%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.2110%" y="517" width="0.0812%" height="15" fill="rgb(226,74,18)" fg:x="249" fg:w="1"/><text x="20.4610%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.2110%" y="501" width="0.0812%" height="15" fill="rgb(225,67,54)" fg:x="249" fg:w="1"/><text x="20.4610%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.2922%" y="533" width="0.0812%" height="15" fill="rgb(251,92,32)" fg:x="250" fg:w="1"/><text x="20.5422%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="20.2922%" y="565" width="0.1623%" height="15" fill="rgb(228,149,22)" fg:x="250" fg:w="2"/><text x="20.5422%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="20.2922%" y="549" width="0.1623%" height="15" fill="rgb(243,54,13)" fg:x="250" fg:w="2"/><text x="20.5422%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.3734%" y="533" width="0.0812%" height="15" fill="rgb(243,180,28)" fg:x="251" fg:w="1"/><text x="20.6234%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.4545%" y="549" width="0.0812%" height="15" fill="rgb(208,167,24)" fg:x="252" fg:w="1"/><text x="20.7045%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.5357%" y="517" width="0.0812%" height="15" fill="rgb(245,73,45)" fg:x="253" fg:w="1"/><text x="20.7857%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.5357%" y="501" width="0.0812%" height="15" fill="rgb(237,203,48)" fg:x="253" fg:w="1"/><text x="20.7857%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.5357%" y="485" width="0.0812%" height="15" fill="rgb(211,197,16)" fg:x="253" fg:w="1"/><text x="20.7857%" y="495.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (12 samples, 0.97%)</title><rect x="19.7240%" y="613" width="0.9740%" height="15" fill="rgb(243,99,51)" fg:x="243" fg:w="12"/><text x="19.9740%" y="623.50"></text></g><g><title>plugins_core::build::QuickThing::make (12 samples, 0.97%)</title><rect x="19.7240%" y="597" width="0.9740%" height="15" fill="rgb(215,123,29)" fg:x="243" fg:w="12"/><text x="19.9740%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (11 samples, 0.89%)</title><rect x="19.8052%" y="581" width="0.8929%" height="15" fill="rgb(239,186,37)" fg:x="244" fg:w="11"/><text x="20.0552%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="20.4545%" y="565" width="0.2435%" height="15" fill="rgb(252,136,39)" fg:x="252" fg:w="3"/><text x="20.7045%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="20.5357%" y="549" width="0.1623%" height="15" fill="rgb(223,213,32)" fg:x="253" fg:w="2"/><text x="20.7857%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="20.5357%" y="533" width="0.1623%" height="15" fill="rgb(233,115,5)" fg:x="253" fg:w="2"/><text x="20.7857%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="20.6169%" y="517" width="0.0812%" height="15" fill="rgb(207,226,44)" fg:x="254" fg:w="1"/><text x="20.8669%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.6169%" y="501" width="0.0812%" height="15" fill="rgb(208,126,0)" fg:x="254" fg:w="1"/><text x="20.8669%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="20.6169%" y="485" width="0.0812%" height="15" fill="rgb(244,66,21)" fg:x="254" fg:w="1"/><text x="20.8669%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.6169%" y="469" width="0.0812%" height="15" fill="rgb(222,97,12)" fg:x="254" fg:w="1"/><text x="20.8669%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="20.6169%" y="453" width="0.0812%" height="15" fill="rgb(219,213,19)" fg:x="254" fg:w="1"/><text x="20.8669%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.6169%" y="437" width="0.0812%" height="15" fill="rgb(252,169,30)" fg:x="254" fg:w="1"/><text x="20.8669%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.6169%" y="421" width="0.0812%" height="15" fill="rgb(206,32,51)" fg:x="254" fg:w="1"/><text x="20.8669%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="20.6981%" y="597" width="0.0812%" height="15" fill="rgb(250,172,42)" fg:x="255" fg:w="1"/><text x="20.9481%" y="607.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="20.6981%" y="581" width="0.0812%" height="15" fill="rgb(209,34,43)" fg:x="255" fg:w="1"/><text x="20.9481%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.6981%" y="565" width="0.0812%" height="15" fill="rgb(223,11,35)" fg:x="255" fg:w="1"/><text x="20.9481%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.6981%" y="549" width="0.0812%" height="15" fill="rgb(251,219,26)" fg:x="255" fg:w="1"/><text x="20.9481%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="20.6981%" y="533" width="0.0812%" height="15" fill="rgb(231,119,3)" fg:x="255" fg:w="1"/><text x="20.9481%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.6981%" y="517" width="0.0812%" height="15" fill="rgb(216,97,11)" fg:x="255" fg:w="1"/><text x="20.9481%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.8604%" y="517" width="0.0812%" height="15" fill="rgb(223,59,9)" fg:x="257" fg:w="1"/><text x="21.1104%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.8604%" y="501" width="0.0812%" height="15" fill="rgb(233,93,31)" fg:x="257" fg:w="1"/><text x="21.1104%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.8604%" y="485" width="0.0812%" height="15" fill="rgb(239,81,33)" fg:x="257" fg:w="1"/><text x="21.1104%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.8604%" y="469" width="0.0812%" height="15" fill="rgb(213,120,34)" fg:x="257" fg:w="1"/><text x="21.1104%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.8604%" y="453" width="0.0812%" height="15" fill="rgb(243,49,53)" fg:x="257" fg:w="1"/><text x="21.1104%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.8604%" y="437" width="0.0812%" height="15" fill="rgb(247,216,33)" fg:x="257" fg:w="1"/><text x="21.1104%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.8604%" y="421" width="0.0812%" height="15" fill="rgb(226,26,14)" fg:x="257" fg:w="1"/><text x="21.1104%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.8604%" y="405" width="0.0812%" height="15" fill="rgb(215,49,53)" fg:x="257" fg:w="1"/><text x="21.1104%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.8604%" y="389" width="0.0812%" height="15" fill="rgb(245,162,40)" fg:x="257" fg:w="1"/><text x="21.1104%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="20.8604%" y="373" width="0.0812%" height="15" fill="rgb(229,68,17)" fg:x="257" fg:w="1"/><text x="21.1104%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="20.8604%" y="357" width="0.0812%" height="15" fill="rgb(213,182,10)" fg:x="257" fg:w="1"/><text x="21.1104%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="20.8604%" y="341" width="0.0812%" height="15" fill="rgb(245,125,30)" fg:x="257" fg:w="1"/><text x="21.1104%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="20.8604%" y="325" width="0.0812%" height="15" fill="rgb(232,202,2)" fg:x="257" fg:w="1"/><text x="21.1104%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.8604%" y="309" width="0.0812%" height="15" fill="rgb(237,140,51)" fg:x="257" fg:w="1"/><text x="21.1104%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="20.8604%" y="565" width="0.1623%" height="15" fill="rgb(236,157,25)" fg:x="257" fg:w="2"/><text x="21.1104%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="20.8604%" y="549" width="0.1623%" height="15" fill="rgb(219,209,0)" fg:x="257" fg:w="2"/><text x="21.1104%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="20.8604%" y="533" width="0.1623%" height="15" fill="rgb(240,116,54)" fg:x="257" fg:w="2"/><text x="21.1104%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="20.9416%" y="517" width="0.0812%" height="15" fill="rgb(216,10,36)" fg:x="258" fg:w="1"/><text x="21.1916%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.9416%" y="501" width="0.0812%" height="15" fill="rgb(222,72,44)" fg:x="258" fg:w="1"/><text x="21.1916%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="20.9416%" y="485" width="0.0812%" height="15" fill="rgb(232,159,9)" fg:x="258" fg:w="1"/><text x="21.1916%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.9416%" y="469" width="0.0812%" height="15" fill="rgb(210,39,32)" fg:x="258" fg:w="1"/><text x="21.1916%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="20.9416%" y="453" width="0.0812%" height="15" fill="rgb(216,194,45)" fg:x="258" fg:w="1"/><text x="21.1916%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.9416%" y="437" width="0.0812%" height="15" fill="rgb(218,18,35)" fg:x="258" fg:w="1"/><text x="21.1916%" y="447.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="21.0227%" y="549" width="0.0812%" height="15" fill="rgb(207,83,51)" fg:x="259" fg:w="1"/><text x="21.2727%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="21.0227%" y="533" width="0.0812%" height="15" fill="rgb(225,63,43)" fg:x="259" fg:w="1"/><text x="21.2727%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="21.0227%" y="517" width="0.0812%" height="15" fill="rgb(207,57,36)" fg:x="259" fg:w="1"/><text x="21.2727%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="21.0227%" y="501" width="0.0812%" height="15" fill="rgb(216,99,33)" fg:x="259" fg:w="1"/><text x="21.2727%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.0227%" y="485" width="0.0812%" height="15" fill="rgb(225,42,16)" fg:x="259" fg:w="1"/><text x="21.2727%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.0227%" y="469" width="0.0812%" height="15" fill="rgb(220,201,45)" fg:x="259" fg:w="1"/><text x="21.2727%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.0227%" y="453" width="0.0812%" height="15" fill="rgb(225,33,4)" fg:x="259" fg:w="1"/><text x="21.2727%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.0227%" y="437" width="0.0812%" height="15" fill="rgb(224,33,50)" fg:x="259" fg:w="1"/><text x="21.2727%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="21.0227%" y="421" width="0.0812%" height="15" fill="rgb(246,198,51)" fg:x="259" fg:w="1"/><text x="21.2727%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="21.0227%" y="405" width="0.0812%" height="15" fill="rgb(205,22,4)" fg:x="259" fg:w="1"/><text x="21.2727%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="21.0227%" y="389" width="0.0812%" height="15" fill="rgb(206,3,8)" fg:x="259" fg:w="1"/><text x="21.2727%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.0227%" y="373" width="0.0812%" height="15" fill="rgb(251,23,15)" fg:x="259" fg:w="1"/><text x="21.2727%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.0227%" y="357" width="0.0812%" height="15" fill="rgb(252,88,28)" fg:x="259" fg:w="1"/><text x="21.2727%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="21.0227%" y="341" width="0.0812%" height="15" fill="rgb(212,127,14)" fg:x="259" fg:w="1"/><text x="21.2727%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="21.0227%" y="325" width="0.0812%" height="15" fill="rgb(247,145,37)" fg:x="259" fg:w="1"/><text x="21.2727%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="21.0227%" y="309" width="0.0812%" height="15" fill="rgb(209,117,53)" fg:x="259" fg:w="1"/><text x="21.2727%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="21.0227%" y="293" width="0.0812%" height="15" fill="rgb(212,90,42)" fg:x="259" fg:w="1"/><text x="21.2727%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.0227%" y="277" width="0.0812%" height="15" fill="rgb(218,164,37)" fg:x="259" fg:w="1"/><text x="21.2727%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="21.1039%" y="549" width="0.0812%" height="15" fill="rgb(246,65,34)" fg:x="260" fg:w="1"/><text x="21.3539%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.2662%" y="517" width="0.0812%" height="15" fill="rgb(231,100,33)" fg:x="262" fg:w="1"/><text x="21.5162%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.2662%" y="501" width="0.0812%" height="15" fill="rgb(228,126,14)" fg:x="262" fg:w="1"/><text x="21.5162%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="21.2662%" y="485" width="0.0812%" height="15" fill="rgb(215,173,21)" fg:x="262" fg:w="1"/><text x="21.5162%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.57%)</title><rect x="20.8604%" y="581" width="0.5682%" height="15" fill="rgb(210,6,40)" fg:x="257" fg:w="7"/><text x="21.1104%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.41%)</title><rect x="21.0227%" y="565" width="0.4058%" height="15" fill="rgb(212,48,18)" fg:x="259" fg:w="5"/><text x="21.2727%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="21.1851%" y="549" width="0.2435%" height="15" fill="rgb(230,214,11)" fg:x="261" fg:w="3"/><text x="21.4351%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="21.2662%" y="533" width="0.1623%" height="15" fill="rgb(254,105,39)" fg:x="262" fg:w="2"/><text x="21.5162%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="21.3474%" y="517" width="0.0812%" height="15" fill="rgb(245,158,5)" fg:x="263" fg:w="1"/><text x="21.5974%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="21.3474%" y="501" width="0.0812%" height="15" fill="rgb(249,208,11)" fg:x="263" fg:w="1"/><text x="21.5974%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="21.3474%" y="485" width="0.0812%" height="15" fill="rgb(210,39,28)" fg:x="263" fg:w="1"/><text x="21.5974%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="21.3474%" y="469" width="0.0812%" height="15" fill="rgb(211,56,53)" fg:x="263" fg:w="1"/><text x="21.5974%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="21.3474%" y="453" width="0.0812%" height="15" fill="rgb(226,201,30)" fg:x="263" fg:w="1"/><text x="21.5974%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.3474%" y="437" width="0.0812%" height="15" fill="rgb(239,101,34)" fg:x="263" fg:w="1"/><text x="21.5974%" y="447.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (201 samples, 16.31%)</title><rect x="5.1948%" y="629" width="16.3149%" height="15" fill="rgb(226,209,5)" fg:x="64" fg:w="201"/><text x="5.4448%" y="639.50">&lt;tests::HoldingKeyInVesse..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (10 samples, 0.81%)</title><rect x="20.6981%" y="613" width="0.8117%" height="15" fill="rgb(250,105,47)" fg:x="255" fg:w="10"/><text x="20.9481%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (9 samples, 0.73%)</title><rect x="20.7792%" y="597" width="0.7305%" height="15" fill="rgb(230,72,3)" fg:x="256" fg:w="9"/><text x="21.0292%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="21.4286%" y="581" width="0.0812%" height="15" fill="rgb(232,218,39)" fg:x="264" fg:w="1"/><text x="21.6786%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="21.5097%" y="629" width="0.0812%" height="15" fill="rgb(248,166,6)" fg:x="265" fg:w="1"/><text x="21.7597%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="21.6721%" y="613" width="0.1623%" height="15" fill="rgb(247,89,20)" fg:x="267" fg:w="2"/><text x="21.9221%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="21.6721%" y="597" width="0.1623%" height="15" fill="rgb(248,130,54)" fg:x="267" fg:w="2"/><text x="21.9221%" y="607.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="21.6721%" y="581" width="0.1623%" height="15" fill="rgb(234,196,4)" fg:x="267" fg:w="2"/><text x="21.9221%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="21.6721%" y="565" width="0.1623%" height="15" fill="rgb(250,143,31)" fg:x="267" fg:w="2"/><text x="21.9221%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="21.6721%" y="549" width="0.1623%" height="15" fill="rgb(211,110,34)" fg:x="267" fg:w="2"/><text x="21.9221%" y="559.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="21.7532%" y="533" width="0.0812%" height="15" fill="rgb(215,124,48)" fg:x="268" fg:w="1"/><text x="22.0032%" y="543.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="21.7532%" y="517" width="0.0812%" height="15" fill="rgb(216,46,13)" fg:x="268" fg:w="1"/><text x="22.0032%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="21.7532%" y="501" width="0.0812%" height="15" fill="rgb(205,184,25)" fg:x="268" fg:w="1"/><text x="22.0032%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="21.7532%" y="485" width="0.0812%" height="15" fill="rgb(228,1,10)" fg:x="268" fg:w="1"/><text x="22.0032%" y="495.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="21.8344%" y="613" width="0.0812%" height="15" fill="rgb(213,116,27)" fg:x="269" fg:w="1"/><text x="22.0844%" y="623.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="21.8344%" y="597" width="0.0812%" height="15" fill="rgb(241,95,50)" fg:x="269" fg:w="1"/><text x="22.0844%" y="607.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="21.8344%" y="581" width="0.0812%" height="15" fill="rgb(238,48,32)" fg:x="269" fg:w="1"/><text x="22.0844%" y="591.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="21.8344%" y="565" width="0.0812%" height="15" fill="rgb(235,113,49)" fg:x="269" fg:w="1"/><text x="22.0844%" y="575.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="21.8344%" y="549" width="0.0812%" height="15" fill="rgb(205,127,43)" fg:x="269" fg:w="1"/><text x="22.0844%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="21.8344%" y="533" width="0.0812%" height="15" fill="rgb(250,162,2)" fg:x="269" fg:w="1"/><text x="22.0844%" y="543.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="21.8344%" y="517" width="0.0812%" height="15" fill="rgb(220,13,41)" fg:x="269" fg:w="1"/><text x="22.0844%" y="527.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="21.8344%" y="501" width="0.0812%" height="15" fill="rgb(249,221,25)" fg:x="269" fg:w="1"/><text x="22.0844%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="21.9968%" y="581" width="0.1623%" height="15" fill="rgb(215,208,19)" fg:x="271" fg:w="2"/><text x="22.2468%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="22.0779%" y="565" width="0.0812%" height="15" fill="rgb(236,175,2)" fg:x="272" fg:w="1"/><text x="22.3279%" y="575.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="22.0779%" y="549" width="0.0812%" height="15" fill="rgb(241,52,2)" fg:x="272" fg:w="1"/><text x="22.3279%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="22.1591%" y="549" width="0.0812%" height="15" fill="rgb(248,140,14)" fg:x="273" fg:w="1"/><text x="22.4091%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.1591%" y="533" width="0.0812%" height="15" fill="rgb(253,22,42)" fg:x="273" fg:w="1"/><text x="22.4091%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="22.1591%" y="517" width="0.0812%" height="15" fill="rgb(234,61,47)" fg:x="273" fg:w="1"/><text x="22.4091%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="22.3214%" y="501" width="0.0812%" height="15" fill="rgb(208,226,15)" fg:x="275" fg:w="1"/><text x="22.5714%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.3214%" y="485" width="0.0812%" height="15" fill="rgb(217,221,4)" fg:x="275" fg:w="1"/><text x="22.5714%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="22.3214%" y="469" width="0.0812%" height="15" fill="rgb(212,174,34)" fg:x="275" fg:w="1"/><text x="22.5714%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.3214%" y="453" width="0.0812%" height="15" fill="rgb(253,83,4)" fg:x="275" fg:w="1"/><text x="22.5714%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="22.3214%" y="517" width="0.2435%" height="15" fill="rgb(250,195,49)" fg:x="275" fg:w="3"/><text x="22.5714%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="22.4026%" y="501" width="0.1623%" height="15" fill="rgb(241,192,25)" fg:x="276" fg:w="2"/><text x="22.6526%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="22.4026%" y="485" width="0.1623%" height="15" fill="rgb(208,124,10)" fg:x="276" fg:w="2"/><text x="22.6526%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="22.4026%" y="469" width="0.1623%" height="15" fill="rgb(222,33,0)" fg:x="276" fg:w="2"/><text x="22.6526%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.6461%" y="501" width="0.0812%" height="15" fill="rgb(234,209,28)" fg:x="279" fg:w="1"/><text x="22.8961%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="22.7273%" y="501" width="0.2435%" height="15" fill="rgb(224,11,23)" fg:x="280" fg:w="3"/><text x="22.9773%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.8896%" y="485" width="0.0812%" height="15" fill="rgb(232,99,1)" fg:x="282" fg:w="1"/><text x="23.1396%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="22.8896%" y="469" width="0.0812%" height="15" fill="rgb(237,95,45)" fg:x="282" fg:w="1"/><text x="23.1396%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.8896%" y="453" width="0.0812%" height="15" fill="rgb(208,109,11)" fg:x="282" fg:w="1"/><text x="23.1396%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="22.8896%" y="437" width="0.0812%" height="15" fill="rgb(216,190,48)" fg:x="282" fg:w="1"/><text x="23.1396%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.8896%" y="421" width="0.0812%" height="15" fill="rgb(251,171,36)" fg:x="282" fg:w="1"/><text x="23.1396%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="22.8896%" y="405" width="0.0812%" height="15" fill="rgb(230,62,22)" fg:x="282" fg:w="1"/><text x="23.1396%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="22.9708%" y="485" width="0.0812%" height="15" fill="rgb(225,114,35)" fg:x="283" fg:w="1"/><text x="23.2208%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="22.9708%" y="469" width="0.0812%" height="15" fill="rgb(215,118,42)" fg:x="283" fg:w="1"/><text x="23.2208%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.41%)</title><rect x="23.0519%" y="485" width="0.4058%" height="15" fill="rgb(243,119,21)" fg:x="284" fg:w="5"/><text x="23.3019%" y="495.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="23.1331%" y="469" width="0.3247%" height="15" fill="rgb(252,177,53)" fg:x="285" fg:w="4"/><text x="23.3831%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="23.2955%" y="453" width="0.1623%" height="15" fill="rgb(237,209,29)" fg:x="287" fg:w="2"/><text x="23.5455%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.3766%" y="437" width="0.0812%" height="15" fill="rgb(212,65,23)" fg:x="288" fg:w="1"/><text x="23.6266%" y="447.50"></text></g><g><title>ryu::pretty::format64 (2 samples, 0.16%)</title><rect x="23.4578%" y="469" width="0.1623%" height="15" fill="rgb(230,222,46)" fg:x="289" fg:w="2"/><text x="23.7078%" y="479.50"></text></g><g><title>ryu::d2s::d2d (2 samples, 0.16%)</title><rect x="23.4578%" y="453" width="0.1623%" height="15" fill="rgb(215,135,32)" fg:x="289" fg:w="2"/><text x="23.7078%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="23.6201%" y="469" width="0.0812%" height="15" fill="rgb(246,101,22)" fg:x="291" fg:w="1"/><text x="23.8701%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.6201%" y="453" width="0.0812%" height="15" fill="rgb(206,107,13)" fg:x="291" fg:w="1"/><text x="23.8701%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="23.6201%" y="437" width="0.0812%" height="15" fill="rgb(250,100,44)" fg:x="291" fg:w="1"/><text x="23.8701%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.6201%" y="421" width="0.0812%" height="15" fill="rgb(231,147,38)" fg:x="291" fg:w="1"/><text x="23.8701%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="23.6201%" y="405" width="0.0812%" height="15" fill="rgb(229,8,40)" fg:x="291" fg:w="1"/><text x="23.8701%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.6201%" y="389" width="0.0812%" height="15" fill="rgb(221,135,30)" fg:x="291" fg:w="1"/><text x="23.8701%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.6201%" y="373" width="0.0812%" height="15" fill="rgb(249,193,18)" fg:x="291" fg:w="1"/><text x="23.8701%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="23.7013%" y="469" width="0.0812%" height="15" fill="rgb(209,133,39)" fg:x="292" fg:w="1"/><text x="23.9513%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="23.7013%" y="453" width="0.0812%" height="15" fill="rgb(232,100,14)" fg:x="292" fg:w="1"/><text x="23.9513%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.7013%" y="437" width="0.0812%" height="15" fill="rgb(224,185,1)" fg:x="292" fg:w="1"/><text x="23.9513%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="23.7013%" y="421" width="0.0812%" height="15" fill="rgb(223,139,8)" fg:x="292" fg:w="1"/><text x="23.9513%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.7013%" y="405" width="0.0812%" height="15" fill="rgb(232,213,38)" fg:x="292" fg:w="1"/><text x="23.9513%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="23.7013%" y="389" width="0.0812%" height="15" fill="rgb(207,94,22)" fg:x="292" fg:w="1"/><text x="23.9513%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.7013%" y="373" width="0.0812%" height="15" fill="rgb(219,183,54)" fg:x="292" fg:w="1"/><text x="23.9513%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.7013%" y="357" width="0.0812%" height="15" fill="rgb(216,185,54)" fg:x="292" fg:w="1"/><text x="23.9513%" y="367.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="23.4578%" y="485" width="0.4870%" height="15" fill="rgb(254,217,39)" fg:x="289" fg:w="6"/><text x="23.7078%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="23.7825%" y="469" width="0.1623%" height="15" fill="rgb(240,178,23)" fg:x="293" fg:w="2"/><text x="24.0325%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.06%)</title><rect x="22.9708%" y="501" width="1.0552%" height="15" fill="rgb(218,11,47)" fg:x="283" fg:w="13"/><text x="23.2208%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.9448%" y="485" width="0.0812%" height="15" fill="rgb(218,51,51)" fg:x="295" fg:w="1"/><text x="24.1948%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (23 samples, 1.87%)</title><rect x="22.3214%" y="533" width="1.8669%" height="15" fill="rgb(238,126,27)" fg:x="275" fg:w="23"/><text x="22.5714%" y="543.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (20 samples, 1.62%)</title><rect x="22.5649%" y="517" width="1.6234%" height="15" fill="rgb(249,202,22)" fg:x="278" fg:w="20"/><text x="22.8149%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="24.0260%" y="501" width="0.1623%" height="15" fill="rgb(254,195,49)" fg:x="296" fg:w="2"/><text x="24.2760%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="24.0260%" y="485" width="0.1623%" height="15" fill="rgb(208,123,14)" fg:x="296" fg:w="2"/><text x="24.2760%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="24.0260%" y="469" width="0.1623%" height="15" fill="rgb(224,200,8)" fg:x="296" fg:w="2"/><text x="24.2760%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="24.1071%" y="453" width="0.0812%" height="15" fill="rgb(217,61,36)" fg:x="297" fg:w="1"/><text x="24.3571%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.1071%" y="437" width="0.0812%" height="15" fill="rgb(206,35,45)" fg:x="297" fg:w="1"/><text x="24.3571%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="24.1071%" y="421" width="0.0812%" height="15" fill="rgb(217,65,33)" fg:x="297" fg:w="1"/><text x="24.3571%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.1883%" y="485" width="0.0812%" height="15" fill="rgb(222,158,48)" fg:x="298" fg:w="1"/><text x="24.4383%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.3506%" y="453" width="0.0812%" height="15" fill="rgb(254,2,54)" fg:x="300" fg:w="1"/><text x="24.6006%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="24.1883%" y="533" width="0.3247%" height="15" fill="rgb(250,143,38)" fg:x="298" fg:w="4"/><text x="24.4383%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="24.1883%" y="517" width="0.3247%" height="15" fill="rgb(248,25,0)" fg:x="298" fg:w="4"/><text x="24.4383%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="24.1883%" y="501" width="0.3247%" height="15" fill="rgb(206,152,27)" fg:x="298" fg:w="4"/><text x="24.4383%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="24.2695%" y="485" width="0.2435%" height="15" fill="rgb(240,77,30)" fg:x="299" fg:w="3"/><text x="24.5195%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="24.2695%" y="469" width="0.2435%" height="15" fill="rgb(231,5,3)" fg:x="299" fg:w="3"/><text x="24.5195%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="24.4318%" y="453" width="0.0812%" height="15" fill="rgb(207,226,32)" fg:x="301" fg:w="1"/><text x="24.6818%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.4318%" y="437" width="0.0812%" height="15" fill="rgb(222,207,47)" fg:x="301" fg:w="1"/><text x="24.6818%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="24.5942%" y="501" width="0.1623%" height="15" fill="rgb(229,115,45)" fg:x="303" fg:w="2"/><text x="24.8442%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.7565%" y="501" width="0.0812%" height="15" fill="rgb(224,191,6)" fg:x="305" fg:w="1"/><text x="25.0065%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.8377%" y="469" width="0.0812%" height="15" fill="rgb(230,227,24)" fg:x="306" fg:w="1"/><text x="25.0877%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.8377%" y="453" width="0.0812%" height="15" fill="rgb(228,80,19)" fg:x="306" fg:w="1"/><text x="25.0877%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="25.1623%" y="453" width="0.0812%" height="15" fill="rgb(247,229,0)" fg:x="310" fg:w="1"/><text x="25.4123%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.1623%" y="437" width="0.0812%" height="15" fill="rgb(237,194,15)" fg:x="310" fg:w="1"/><text x="25.4123%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.2435%" y="437" width="0.0812%" height="15" fill="rgb(219,203,20)" fg:x="311" fg:w="1"/><text x="25.4935%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="25.3247%" y="437" width="0.0812%" height="15" fill="rgb(234,128,8)" fg:x="312" fg:w="1"/><text x="25.5747%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.3247%" y="421" width="0.0812%" height="15" fill="rgb(248,202,8)" fg:x="312" fg:w="1"/><text x="25.5747%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.4058%" y="421" width="0.0812%" height="15" fill="rgb(206,104,37)" fg:x="313" fg:w="1"/><text x="25.6558%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="25.4870%" y="421" width="0.0812%" height="15" fill="rgb(223,8,27)" fg:x="314" fg:w="1"/><text x="25.7370%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.4870%" y="405" width="0.0812%" height="15" fill="rgb(216,217,28)" fg:x="314" fg:w="1"/><text x="25.7370%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.89%)</title><rect x="24.8377%" y="501" width="0.8929%" height="15" fill="rgb(249,199,1)" fg:x="306" fg:w="11"/><text x="25.0877%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (11 samples, 0.89%)</title><rect x="24.8377%" y="485" width="0.8929%" height="15" fill="rgb(240,85,17)" fg:x="306" fg:w="11"/><text x="25.0877%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.81%)</title><rect x="24.9188%" y="469" width="0.8117%" height="15" fill="rgb(206,108,45)" fg:x="307" fg:w="10"/><text x="25.1688%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="25.2435%" y="453" width="0.4870%" height="15" fill="rgb(245,210,41)" fg:x="311" fg:w="6"/><text x="25.4935%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="25.4058%" y="437" width="0.3247%" height="15" fill="rgb(206,13,37)" fg:x="313" fg:w="4"/><text x="25.6558%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="25.5682%" y="421" width="0.1623%" height="15" fill="rgb(250,61,18)" fg:x="315" fg:w="2"/><text x="25.8182%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="25.5682%" y="405" width="0.1623%" height="15" fill="rgb(235,172,48)" fg:x="315" fg:w="2"/><text x="25.8182%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.6494%" y="389" width="0.0812%" height="15" fill="rgb(249,201,17)" fg:x="316" fg:w="1"/><text x="25.8994%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="25.7305%" y="405" width="0.0812%" height="15" fill="rgb(219,208,6)" fg:x="317" fg:w="1"/><text x="25.9805%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="25.7305%" y="485" width="0.1623%" height="15" fill="rgb(248,31,23)" fg:x="317" fg:w="2"/><text x="25.9805%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="25.7305%" y="469" width="0.1623%" height="15" fill="rgb(245,15,42)" fg:x="317" fg:w="2"/><text x="25.9805%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="25.7305%" y="453" width="0.1623%" height="15" fill="rgb(222,217,39)" fg:x="317" fg:w="2"/><text x="25.9805%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.16%)</title><rect x="25.7305%" y="437" width="0.1623%" height="15" fill="rgb(210,219,27)" fg:x="317" fg:w="2"/><text x="25.9805%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="25.7305%" y="421" width="0.1623%" height="15" fill="rgb(252,166,36)" fg:x="317" fg:w="2"/><text x="25.9805%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="25.8117%" y="405" width="0.0812%" height="15" fill="rgb(245,132,34)" fg:x="318" fg:w="1"/><text x="26.0617%" y="415.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (18 samples, 1.46%)</title><rect x="24.5130%" y="517" width="1.4610%" height="15" fill="rgb(236,54,3)" fg:x="302" fg:w="18"/><text x="24.7630%" y="527.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="25.7305%" y="501" width="0.2435%" height="15" fill="rgb(241,173,43)" fg:x="317" fg:w="3"/><text x="25.9805%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.8929%" y="485" width="0.0812%" height="15" fill="rgb(215,190,9)" fg:x="319" fg:w="1"/><text x="26.1429%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.41%)</title><rect x="26.2175%" y="485" width="0.4058%" height="15" fill="rgb(242,101,16)" fg:x="323" fg:w="5"/><text x="26.4675%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="26.3799%" y="469" width="0.2435%" height="15" fill="rgb(223,190,21)" fg:x="325" fg:w="3"/><text x="26.6299%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="26.4610%" y="453" width="0.1623%" height="15" fill="rgb(215,228,25)" fg:x="326" fg:w="2"/><text x="26.7110%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="26.6234%" y="485" width="0.0812%" height="15" fill="rgb(225,36,22)" fg:x="328" fg:w="1"/><text x="26.8734%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.6234%" y="469" width="0.0812%" height="15" fill="rgb(251,106,46)" fg:x="328" fg:w="1"/><text x="26.8734%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="26.6234%" y="453" width="0.0812%" height="15" fill="rgb(208,90,1)" fg:x="328" fg:w="1"/><text x="26.8734%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="26.7045%" y="469" width="0.0812%" height="15" fill="rgb(243,10,4)" fg:x="329" fg:w="1"/><text x="26.9545%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (3 samples, 0.24%)</title><rect x="26.7045%" y="485" width="0.2435%" height="15" fill="rgb(212,137,27)" fg:x="329" fg:w="3"/><text x="26.9545%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="26.7857%" y="469" width="0.1623%" height="15" fill="rgb(231,220,49)" fg:x="330" fg:w="2"/><text x="27.0357%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.8669%" y="453" width="0.0812%" height="15" fill="rgb(237,96,20)" fg:x="331" fg:w="1"/><text x="27.1169%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="26.9481%" y="485" width="0.0812%" height="15" fill="rgb(239,229,30)" fg:x="332" fg:w="1"/><text x="27.1981%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.9481%" y="469" width="0.0812%" height="15" fill="rgb(219,65,33)" fg:x="332" fg:w="1"/><text x="27.1981%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.9481%" y="453" width="0.0812%" height="15" fill="rgb(243,134,7)" fg:x="332" fg:w="1"/><text x="27.1981%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.9481%" y="437" width="0.0812%" height="15" fill="rgb(216,177,54)" fg:x="332" fg:w="1"/><text x="27.1981%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="26.9481%" y="421" width="0.0812%" height="15" fill="rgb(211,160,20)" fg:x="332" fg:w="1"/><text x="27.1981%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="27.1916%" y="453" width="0.1623%" height="15" fill="rgb(239,85,39)" fg:x="335" fg:w="2"/><text x="27.4416%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.3539%" y="437" width="0.0812%" height="15" fill="rgb(232,125,22)" fg:x="337" fg:w="1"/><text x="27.6039%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.3539%" y="421" width="0.0812%" height="15" fill="rgb(244,57,34)" fg:x="337" fg:w="1"/><text x="27.6039%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.3539%" y="405" width="0.0812%" height="15" fill="rgb(214,203,32)" fg:x="337" fg:w="1"/><text x="27.6039%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="27.4351%" y="389" width="0.1623%" height="15" fill="rgb(207,58,43)" fg:x="338" fg:w="2"/><text x="27.6851%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="27.4351%" y="373" width="0.1623%" height="15" fill="rgb(215,193,15)" fg:x="338" fg:w="2"/><text x="27.6851%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="27.4351%" y="437" width="0.3247%" height="15" fill="rgb(232,15,44)" fg:x="338" fg:w="4"/><text x="27.6851%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="27.4351%" y="421" width="0.3247%" height="15" fill="rgb(212,3,48)" fg:x="338" fg:w="4"/><text x="27.6851%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="27.4351%" y="405" width="0.3247%" height="15" fill="rgb(218,128,7)" fg:x="338" fg:w="4"/><text x="27.6851%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="27.5974%" y="389" width="0.1623%" height="15" fill="rgb(226,216,39)" fg:x="340" fg:w="2"/><text x="27.8474%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="27.6786%" y="373" width="0.0812%" height="15" fill="rgb(243,47,51)" fg:x="341" fg:w="1"/><text x="27.9286%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="27.6786%" y="357" width="0.0812%" height="15" fill="rgb(241,183,40)" fg:x="341" fg:w="1"/><text x="27.9286%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="27.6786%" y="341" width="0.0812%" height="15" fill="rgb(231,217,32)" fg:x="341" fg:w="1"/><text x="27.9286%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.6786%" y="325" width="0.0812%" height="15" fill="rgb(229,61,38)" fg:x="341" fg:w="1"/><text x="27.9286%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.7597%" y="405" width="0.0812%" height="15" fill="rgb(225,210,5)" fg:x="342" fg:w="1"/><text x="28.0097%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="28.0844%" y="389" width="0.1623%" height="15" fill="rgb(231,79,45)" fg:x="346" fg:w="2"/><text x="28.3344%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="28.1656%" y="373" width="0.0812%" height="15" fill="rgb(224,100,7)" fg:x="347" fg:w="1"/><text x="28.4156%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_map (1 samples, 0.08%)</title><rect x="28.2468%" y="389" width="0.0812%" height="15" fill="rgb(241,198,18)" fg:x="348" fg:w="1"/><text x="28.4968%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.65%)</title><rect x="27.7597%" y="421" width="0.6494%" height="15" fill="rgb(252,97,53)" fg:x="342" fg:w="8"/><text x="28.0097%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.57%)</title><rect x="27.8409%" y="405" width="0.5682%" height="15" fill="rgb(220,88,7)" fg:x="343" fg:w="7"/><text x="28.0909%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.3279%" y="389" width="0.0812%" height="15" fill="rgb(213,176,14)" fg:x="349" fg:w="1"/><text x="28.5779%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (15 samples, 1.22%)</title><rect x="27.3539%" y="453" width="1.2175%" height="15" fill="rgb(246,73,7)" fg:x="337" fg:w="15"/><text x="27.6039%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (10 samples, 0.81%)</title><rect x="27.7597%" y="437" width="0.8117%" height="15" fill="rgb(245,64,36)" fg:x="342" fg:w="10"/><text x="28.0097%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="28.4091%" y="421" width="0.1623%" height="15" fill="rgb(245,80,10)" fg:x="350" fg:w="2"/><text x="28.6591%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (21 samples, 1.70%)</title><rect x="27.0292%" y="469" width="1.7045%" height="15" fill="rgb(232,107,50)" fg:x="333" fg:w="21"/><text x="27.2792%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="28.5714%" y="453" width="0.1623%" height="15" fill="rgb(253,3,0)" fg:x="352" fg:w="2"/><text x="28.8214%" y="463.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (35 samples, 2.84%)</title><rect x="25.9740%" y="517" width="2.8409%" height="15" fill="rgb(212,99,53)" fg:x="320" fg:w="35"/><text x="26.2240%" y="527.50">ke..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (35 samples, 2.84%)</title><rect x="25.9740%" y="501" width="2.8409%" height="15" fill="rgb(249,111,54)" fg:x="320" fg:w="35"/><text x="26.2240%" y="511.50">&lt;s..</text></g><g><title>serde::ser::Serializer::collect_map (22 samples, 1.79%)</title><rect x="27.0292%" y="485" width="1.7857%" height="15" fill="rgb(249,55,30)" fg:x="333" fg:w="22"/><text x="27.2792%" y="495.50">s..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.7338%" y="469" width="0.0812%" height="15" fill="rgb(237,47,42)" fg:x="354" fg:w="1"/><text x="28.9838%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.7338%" y="453" width="0.0812%" height="15" fill="rgb(211,20,18)" fg:x="354" fg:w="1"/><text x="28.9838%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="28.7338%" y="437" width="0.0812%" height="15" fill="rgb(231,203,46)" fg:x="354" fg:w="1"/><text x="28.9838%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.9773%" y="309" width="0.0812%" height="15" fill="rgb(237,142,3)" fg:x="357" fg:w="1"/><text x="29.2273%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.9773%" y="293" width="0.0812%" height="15" fill="rgb(241,107,1)" fg:x="357" fg:w="1"/><text x="29.2273%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="28.9773%" y="277" width="0.0812%" height="15" fill="rgb(229,83,13)" fg:x="357" fg:w="1"/><text x="29.2273%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.9773%" y="261" width="0.0812%" height="15" fill="rgb(241,91,40)" fg:x="357" fg:w="1"/><text x="29.2273%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="28.9773%" y="325" width="0.1623%" height="15" fill="rgb(225,3,45)" fg:x="357" fg:w="2"/><text x="29.2273%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="29.0584%" y="309" width="0.0812%" height="15" fill="rgb(244,223,14)" fg:x="358" fg:w="1"/><text x="29.3084%" y="319.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="29.0584%" y="293" width="0.0812%" height="15" fill="rgb(224,124,37)" fg:x="358" fg:w="1"/><text x="29.3084%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="28.9773%" y="341" width="0.2435%" height="15" fill="rgb(251,171,30)" fg:x="357" fg:w="3"/><text x="29.2273%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.1396%" y="325" width="0.0812%" height="15" fill="rgb(236,46,54)" fg:x="359" fg:w="1"/><text x="29.3896%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="28.9773%" y="373" width="0.4058%" height="15" fill="rgb(245,213,5)" fg:x="357" fg:w="5"/><text x="29.2273%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="28.9773%" y="357" width="0.4058%" height="15" fill="rgb(230,144,27)" fg:x="357" fg:w="5"/><text x="29.2273%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="29.2208%" y="341" width="0.1623%" height="15" fill="rgb(220,86,6)" fg:x="360" fg:w="2"/><text x="29.4708%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="29.2208%" y="325" width="0.1623%" height="15" fill="rgb(240,20,13)" fg:x="360" fg:w="2"/><text x="29.4708%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="29.5455%" y="325" width="0.0812%" height="15" fill="rgb(217,89,34)" fg:x="364" fg:w="1"/><text x="29.7955%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.5455%" y="309" width="0.0812%" height="15" fill="rgb(229,13,5)" fg:x="364" fg:w="1"/><text x="29.7955%" y="319.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="29.6266%" y="309" width="0.0812%" height="15" fill="rgb(244,67,35)" fg:x="365" fg:w="1"/><text x="29.8766%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="29.4643%" y="341" width="0.3247%" height="15" fill="rgb(221,40,2)" fg:x="363" fg:w="4"/><text x="29.7143%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="29.6266%" y="325" width="0.1623%" height="15" fill="rgb(237,157,21)" fg:x="365" fg:w="2"/><text x="29.8766%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.7078%" y="309" width="0.0812%" height="15" fill="rgb(222,94,11)" fg:x="366" fg:w="1"/><text x="29.9578%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="29.3831%" y="357" width="0.4870%" height="15" fill="rgb(249,113,6)" fg:x="362" fg:w="6"/><text x="29.6331%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.7890%" y="341" width="0.0812%" height="15" fill="rgb(238,137,36)" fg:x="367" fg:w="1"/><text x="30.0390%" y="351.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="29.8701%" y="341" width="0.0812%" height="15" fill="rgb(210,102,26)" fg:x="368" fg:w="1"/><text x="30.1201%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="29.8701%" y="357" width="0.1623%" height="15" fill="rgb(218,30,30)" fg:x="368" fg:w="2"/><text x="30.1201%" y="367.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="29.9513%" y="341" width="0.0812%" height="15" fill="rgb(214,67,26)" fg:x="369" fg:w="1"/><text x="30.2013%" y="351.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="29.9513%" y="325" width="0.0812%" height="15" fill="rgb(251,9,53)" fg:x="369" fg:w="1"/><text x="30.2013%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.0325%" y="325" width="0.0812%" height="15" fill="rgb(228,204,25)" fg:x="370" fg:w="1"/><text x="30.2825%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (15 samples, 1.22%)</title><rect x="28.9773%" y="389" width="1.2175%" height="15" fill="rgb(207,153,8)" fg:x="357" fg:w="15"/><text x="29.2273%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.81%)</title><rect x="29.3831%" y="373" width="0.8117%" height="15" fill="rgb(242,9,16)" fg:x="362" fg:w="10"/><text x="29.6331%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.0325%" y="357" width="0.1623%" height="15" fill="rgb(217,211,10)" fg:x="370" fg:w="2"/><text x="30.2825%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.0325%" y="341" width="0.1623%" height="15" fill="rgb(219,228,52)" fg:x="370" fg:w="2"/><text x="30.2825%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="30.1136%" y="325" width="0.0812%" height="15" fill="rgb(231,92,29)" fg:x="371" fg:w="1"/><text x="30.3636%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="30.1948%" y="389" width="0.0812%" height="15" fill="rgb(232,8,23)" fg:x="372" fg:w="1"/><text x="30.4448%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (20 samples, 1.62%)</title><rect x="28.8149%" y="421" width="1.6234%" height="15" fill="rgb(216,211,34)" fg:x="355" fg:w="20"/><text x="29.0649%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (19 samples, 1.54%)</title><rect x="28.8961%" y="405" width="1.5422%" height="15" fill="rgb(236,151,0)" fg:x="356" fg:w="19"/><text x="29.1461%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.2760%" y="389" width="0.1623%" height="15" fill="rgb(209,168,3)" fg:x="373" fg:w="2"/><text x="30.5260%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.2760%" y="373" width="0.1623%" height="15" fill="rgb(208,129,28)" fg:x="373" fg:w="2"/><text x="30.5260%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.2760%" y="357" width="0.1623%" height="15" fill="rgb(229,78,22)" fg:x="373" fg:w="2"/><text x="30.5260%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="30.4383%" y="421" width="0.1623%" height="15" fill="rgb(228,187,13)" fg:x="375" fg:w="2"/><text x="30.6883%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.5195%" y="405" width="0.0812%" height="15" fill="rgb(240,119,24)" fg:x="376" fg:w="1"/><text x="30.7695%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (24 samples, 1.95%)</title><rect x="28.8149%" y="437" width="1.9481%" height="15" fill="rgb(209,194,42)" fg:x="355" fg:w="24"/><text x="29.0649%" y="447.50">&lt;..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.6006%" y="421" width="0.1623%" height="15" fill="rgb(247,200,46)" fg:x="377" fg:w="2"/><text x="30.8506%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.6006%" y="405" width="0.1623%" height="15" fill="rgb(218,76,16)" fg:x="377" fg:w="2"/><text x="30.8506%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.6006%" y="389" width="0.1623%" height="15" fill="rgb(225,21,48)" fg:x="377" fg:w="2"/><text x="30.8506%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (25 samples, 2.03%)</title><rect x="28.8149%" y="453" width="2.0292%" height="15" fill="rgb(239,223,50)" fg:x="355" fg:w="25"/><text x="29.0649%" y="463.50">&lt;..</text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.7630%" y="437" width="0.0812%" height="15" fill="rgb(244,45,21)" fg:x="379" fg:w="1"/><text x="31.0130%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="30.8442%" y="453" width="0.2435%" height="15" fill="rgb(232,33,43)" fg:x="380" fg:w="3"/><text x="31.0942%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (3 samples, 0.24%)</title><rect x="30.8442%" y="437" width="0.2435%" height="15" fill="rgb(209,8,3)" fg:x="380" fg:w="3"/><text x="31.0942%" y="447.50"></text></g><g><title>engine::session::state::State::close (114 samples, 9.25%)</title><rect x="21.9156%" y="613" width="9.2532%" height="15" fill="rgb(214,25,53)" fg:x="270" fg:w="114"/><text x="22.1656%" y="623.50">engine::sessi..</text></g><g><title>engine::session::state::State::flush_entities (113 samples, 9.17%)</title><rect x="21.9968%" y="597" width="9.1721%" height="15" fill="rgb(254,186,54)" fg:x="271" fg:w="113"/><text x="22.2468%" y="607.50">engine::sessi..</text></g><g><title>core::iter::adapters::try_process (111 samples, 9.01%)</title><rect x="22.1591%" y="581" width="9.0097%" height="15" fill="rgb(208,174,49)" fg:x="273" fg:w="111"/><text x="22.4091%" y="591.50">core::iter::a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (111 samples, 9.01%)</title><rect x="22.1591%" y="565" width="9.0097%" height="15" fill="rgb(233,191,51)" fg:x="273" fg:w="111"/><text x="22.4091%" y="575.50">&lt;alloc::vec::..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (110 samples, 8.93%)</title><rect x="22.2403%" y="549" width="8.9286%" height="15" fill="rgb(222,134,10)" fg:x="274" fg:w="110"/><text x="22.4903%" y="559.50">engine::sessi..</text></g><g><title>kernel::model::any_entity_changes (82 samples, 6.66%)</title><rect x="24.5130%" y="533" width="6.6558%" height="15" fill="rgb(230,226,20)" fg:x="302" fg:w="82"/><text x="24.7630%" y="543.50">kernel::m..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (29 samples, 2.35%)</title><rect x="28.8149%" y="517" width="2.3539%" height="15" fill="rgb(251,111,25)" fg:x="355" fg:w="29"/><text x="29.0649%" y="527.50">s..</text></g><g><title>serde_json::de::from_trait (29 samples, 2.35%)</title><rect x="28.8149%" y="501" width="2.3539%" height="15" fill="rgb(224,40,46)" fg:x="355" fg:w="29"/><text x="29.0649%" y="511.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (29 samples, 2.35%)</title><rect x="28.8149%" y="485" width="2.3539%" height="15" fill="rgb(236,108,47)" fg:x="355" fg:w="29"/><text x="29.0649%" y="495.50">&lt;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (29 samples, 2.35%)</title><rect x="28.8149%" y="469" width="2.3539%" height="15" fill="rgb(234,93,0)" fg:x="355" fg:w="29"/><text x="29.0649%" y="479.50">&lt;..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.0877%" y="453" width="0.0812%" height="15" fill="rgb(224,213,32)" fg:x="383" fg:w="1"/><text x="31.3377%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.0877%" y="437" width="0.0812%" height="15" fill="rgb(251,11,48)" fg:x="383" fg:w="1"/><text x="31.3377%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.0877%" y="421" width="0.0812%" height="15" fill="rgb(236,173,5)" fg:x="383" fg:w="1"/><text x="31.3377%" y="431.50"></text></g><g><title>engine::session::Session::close (119 samples, 9.66%)</title><rect x="21.5909%" y="629" width="9.6591%" height="15" fill="rgb(230,95,12)" fg:x="266" fg:w="119"/><text x="21.8409%" y="639.50">engine::sessio..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="31.1688%" y="613" width="0.0812%" height="15" fill="rgb(232,209,1)" fg:x="384" fg:w="1"/><text x="31.4188%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.4935%" y="485" width="0.0812%" height="15" fill="rgb(232,6,1)" fg:x="388" fg:w="1"/><text x="31.7435%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.4935%" y="469" width="0.0812%" height="15" fill="rgb(210,224,50)" fg:x="388" fg:w="1"/><text x="31.7435%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.4935%" y="453" width="0.0812%" height="15" fill="rgb(228,127,35)" fg:x="388" fg:w="1"/><text x="31.7435%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.4935%" y="437" width="0.0812%" height="15" fill="rgb(245,102,45)" fg:x="388" fg:w="1"/><text x="31.7435%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="31.4935%" y="421" width="0.0812%" height="15" fill="rgb(214,1,49)" fg:x="388" fg:w="1"/><text x="31.7435%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="31.4935%" y="405" width="0.0812%" height="15" fill="rgb(226,163,40)" fg:x="388" fg:w="1"/><text x="31.7435%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="31.4935%" y="389" width="0.0812%" height="15" fill="rgb(239,212,28)" fg:x="388" fg:w="1"/><text x="31.7435%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="31.4935%" y="373" width="0.0812%" height="15" fill="rgb(220,20,13)" fg:x="388" fg:w="1"/><text x="31.7435%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="31.4935%" y="357" width="0.0812%" height="15" fill="rgb(210,164,35)" fg:x="388" fg:w="1"/><text x="31.7435%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="31.5747%" y="485" width="0.0812%" height="15" fill="rgb(248,109,41)" fg:x="389" fg:w="1"/><text x="31.8247%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="31.5747%" y="469" width="0.0812%" height="15" fill="rgb(238,23,50)" fg:x="389" fg:w="1"/><text x="31.8247%" y="479.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.49%)</title><rect x="31.4123%" y="501" width="0.4870%" height="15" fill="rgb(211,48,49)" fg:x="387" fg:w="6"/><text x="31.6623%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="31.6558%" y="485" width="0.2435%" height="15" fill="rgb(223,36,21)" fg:x="390" fg:w="3"/><text x="31.9058%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="31.6558%" y="469" width="0.2435%" height="15" fill="rgb(207,123,46)" fg:x="390" fg:w="3"/><text x="31.9058%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="31.6558%" y="453" width="0.2435%" height="15" fill="rgb(240,218,32)" fg:x="390" fg:w="3"/><text x="31.9058%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="31.6558%" y="437" width="0.2435%" height="15" fill="rgb(252,5,43)" fg:x="390" fg:w="3"/><text x="31.9058%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.9805%" y="389" width="0.0812%" height="15" fill="rgb(252,84,19)" fg:x="394" fg:w="1"/><text x="32.2305%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.9805%" y="373" width="0.0812%" height="15" fill="rgb(243,152,39)" fg:x="394" fg:w="1"/><text x="32.2305%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="31.9805%" y="357" width="0.0812%" height="15" fill="rgb(234,160,15)" fg:x="394" fg:w="1"/><text x="32.2305%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="31.9805%" y="341" width="0.0812%" height="15" fill="rgb(237,34,20)" fg:x="394" fg:w="1"/><text x="32.2305%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="31.9805%" y="325" width="0.0812%" height="15" fill="rgb(229,97,13)" fg:x="394" fg:w="1"/><text x="32.2305%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.9805%" y="309" width="0.0812%" height="15" fill="rgb(234,71,50)" fg:x="394" fg:w="1"/><text x="32.2305%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.9805%" y="293" width="0.0812%" height="15" fill="rgb(253,155,4)" fg:x="394" fg:w="1"/><text x="32.2305%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="31.9805%" y="277" width="0.0812%" height="15" fill="rgb(222,185,37)" fg:x="394" fg:w="1"/><text x="32.2305%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="31.9805%" y="261" width="0.0812%" height="15" fill="rgb(251,177,13)" fg:x="394" fg:w="1"/><text x="32.2305%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="31.9805%" y="245" width="0.0812%" height="15" fill="rgb(250,179,40)" fg:x="394" fg:w="1"/><text x="32.2305%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="31.9805%" y="229" width="0.0812%" height="15" fill="rgb(242,44,2)" fg:x="394" fg:w="1"/><text x="32.2305%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.9805%" y="213" width="0.0812%" height="15" fill="rgb(216,177,13)" fg:x="394" fg:w="1"/><text x="32.2305%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="31.9805%" y="437" width="0.2435%" height="15" fill="rgb(216,106,43)" fg:x="394" fg:w="3"/><text x="32.2305%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="31.9805%" y="421" width="0.2435%" height="15" fill="rgb(216,183,2)" fg:x="394" fg:w="3"/><text x="32.2305%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="31.9805%" y="405" width="0.2435%" height="15" fill="rgb(249,75,3)" fg:x="394" fg:w="3"/><text x="32.2305%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="32.0617%" y="389" width="0.1623%" height="15" fill="rgb(219,67,39)" fg:x="395" fg:w="2"/><text x="32.3117%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="32.0617%" y="373" width="0.1623%" height="15" fill="rgb(253,228,2)" fg:x="395" fg:w="2"/><text x="32.3117%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="32.0617%" y="357" width="0.1623%" height="15" fill="rgb(235,138,27)" fg:x="395" fg:w="2"/><text x="32.3117%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="32.0617%" y="341" width="0.1623%" height="15" fill="rgb(236,97,51)" fg:x="395" fg:w="2"/><text x="32.3117%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.1429%" y="325" width="0.0812%" height="15" fill="rgb(240,80,30)" fg:x="396" fg:w="1"/><text x="32.3929%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.1429%" y="309" width="0.0812%" height="15" fill="rgb(230,178,19)" fg:x="396" fg:w="1"/><text x="32.3929%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="32.1429%" y="293" width="0.0812%" height="15" fill="rgb(210,190,27)" fg:x="396" fg:w="1"/><text x="32.3929%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="32.1429%" y="277" width="0.0812%" height="15" fill="rgb(222,107,31)" fg:x="396" fg:w="1"/><text x="32.3929%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="32.1429%" y="261" width="0.0812%" height="15" fill="rgb(216,127,34)" fg:x="396" fg:w="1"/><text x="32.3929%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="32.1429%" y="245" width="0.0812%" height="15" fill="rgb(234,116,52)" fg:x="396" fg:w="1"/><text x="32.3929%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="32.1429%" y="229" width="0.0812%" height="15" fill="rgb(222,124,15)" fg:x="396" fg:w="1"/><text x="32.3929%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="32.1429%" y="213" width="0.0812%" height="15" fill="rgb(231,179,28)" fg:x="396" fg:w="1"/><text x="32.3929%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="32.1429%" y="197" width="0.0812%" height="15" fill="rgb(226,93,45)" fg:x="396" fg:w="1"/><text x="32.3929%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="32.1429%" y="181" width="0.0812%" height="15" fill="rgb(215,8,51)" fg:x="396" fg:w="1"/><text x="32.3929%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="32.1429%" y="165" width="0.0812%" height="15" fill="rgb(223,106,5)" fg:x="396" fg:w="1"/><text x="32.3929%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.1429%" y="149" width="0.0812%" height="15" fill="rgb(250,191,5)" fg:x="396" fg:w="1"/><text x="32.3929%" y="159.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="32.2240%" y="437" width="0.0812%" height="15" fill="rgb(242,132,44)" fg:x="397" fg:w="1"/><text x="32.4740%" y="447.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="32.2240%" y="421" width="0.0812%" height="15" fill="rgb(251,152,29)" fg:x="397" fg:w="1"/><text x="32.4740%" y="431.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="32.2240%" y="405" width="0.0812%" height="15" fill="rgb(218,179,5)" fg:x="397" fg:w="1"/><text x="32.4740%" y="415.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="32.2240%" y="389" width="0.0812%" height="15" fill="rgb(227,67,19)" fg:x="397" fg:w="1"/><text x="32.4740%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.2240%" y="373" width="0.0812%" height="15" fill="rgb(233,119,31)" fg:x="397" fg:w="1"/><text x="32.4740%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="32.2240%" y="357" width="0.0812%" height="15" fill="rgb(241,120,22)" fg:x="397" fg:w="1"/><text x="32.4740%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.2240%" y="341" width="0.0812%" height="15" fill="rgb(224,102,30)" fg:x="397" fg:w="1"/><text x="32.4740%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="32.2240%" y="325" width="0.0812%" height="15" fill="rgb(210,164,37)" fg:x="397" fg:w="1"/><text x="32.4740%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.2240%" y="309" width="0.0812%" height="15" fill="rgb(226,191,16)" fg:x="397" fg:w="1"/><text x="32.4740%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.3052%" y="309" width="0.0812%" height="15" fill="rgb(214,40,45)" fg:x="398" fg:w="1"/><text x="32.5552%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.3052%" y="293" width="0.0812%" height="15" fill="rgb(244,29,26)" fg:x="398" fg:w="1"/><text x="32.5552%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.3052%" y="277" width="0.0812%" height="15" fill="rgb(216,16,5)" fg:x="398" fg:w="1"/><text x="32.5552%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.3052%" y="261" width="0.0812%" height="15" fill="rgb(249,76,35)" fg:x="398" fg:w="1"/><text x="32.5552%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.3052%" y="245" width="0.0812%" height="15" fill="rgb(207,11,44)" fg:x="398" fg:w="1"/><text x="32.5552%" y="255.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.3052%" y="229" width="0.0812%" height="15" fill="rgb(228,190,49)" fg:x="398" fg:w="1"/><text x="32.5552%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="32.3052%" y="341" width="0.1623%" height="15" fill="rgb(214,173,12)" fg:x="398" fg:w="2"/><text x="32.5552%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="32.3052%" y="325" width="0.1623%" height="15" fill="rgb(218,26,35)" fg:x="398" fg:w="2"/><text x="32.5552%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="32.3864%" y="309" width="0.0812%" height="15" fill="rgb(220,200,19)" fg:x="399" fg:w="1"/><text x="32.6364%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.3864%" y="293" width="0.0812%" height="15" fill="rgb(239,95,49)" fg:x="399" fg:w="1"/><text x="32.6364%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.24%)</title><rect x="32.4675%" y="341" width="0.2435%" height="15" fill="rgb(235,85,53)" fg:x="400" fg:w="3"/><text x="32.7175%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="32.5487%" y="325" width="0.1623%" height="15" fill="rgb(233,133,31)" fg:x="401" fg:w="2"/><text x="32.7987%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="32.5487%" y="309" width="0.1623%" height="15" fill="rgb(218,25,20)" fg:x="401" fg:w="2"/><text x="32.7987%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="32.6299%" y="293" width="0.0812%" height="15" fill="rgb(252,210,38)" fg:x="402" fg:w="1"/><text x="32.8799%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="32.6299%" y="277" width="0.0812%" height="15" fill="rgb(242,134,21)" fg:x="402" fg:w="1"/><text x="32.8799%" y="287.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.49%)</title><rect x="32.3052%" y="437" width="0.4870%" height="15" fill="rgb(213,28,48)" fg:x="398" fg:w="6"/><text x="32.5552%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.49%)</title><rect x="32.3052%" y="421" width="0.4870%" height="15" fill="rgb(250,196,2)" fg:x="398" fg:w="6"/><text x="32.5552%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="32.3052%" y="405" width="0.4870%" height="15" fill="rgb(227,5,17)" fg:x="398" fg:w="6"/><text x="32.5552%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.49%)</title><rect x="32.3052%" y="389" width="0.4870%" height="15" fill="rgb(221,226,24)" fg:x="398" fg:w="6"/><text x="32.5552%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="32.3052%" y="373" width="0.4870%" height="15" fill="rgb(211,5,48)" fg:x="398" fg:w="6"/><text x="32.5552%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.49%)</title><rect x="32.3052%" y="357" width="0.4870%" height="15" fill="rgb(219,150,6)" fg:x="398" fg:w="6"/><text x="32.5552%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.7110%" y="341" width="0.0812%" height="15" fill="rgb(251,46,16)" fg:x="403" fg:w="1"/><text x="32.9610%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.7110%" y="325" width="0.0812%" height="15" fill="rgb(220,204,40)" fg:x="403" fg:w="1"/><text x="32.9610%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="32.7110%" y="309" width="0.0812%" height="15" fill="rgb(211,85,2)" fg:x="403" fg:w="1"/><text x="32.9610%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="32.7110%" y="293" width="0.0812%" height="15" fill="rgb(229,17,7)" fg:x="403" fg:w="1"/><text x="32.9610%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="32.7110%" y="277" width="0.0812%" height="15" fill="rgb(239,72,28)" fg:x="403" fg:w="1"/><text x="32.9610%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.7110%" y="261" width="0.0812%" height="15" fill="rgb(230,47,54)" fg:x="403" fg:w="1"/><text x="32.9610%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.7110%" y="245" width="0.0812%" height="15" fill="rgb(214,50,8)" fg:x="403" fg:w="1"/><text x="32.9610%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="32.7110%" y="229" width="0.0812%" height="15" fill="rgb(216,198,43)" fg:x="403" fg:w="1"/><text x="32.9610%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.7110%" y="213" width="0.0812%" height="15" fill="rgb(234,20,35)" fg:x="403" fg:w="1"/><text x="32.9610%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.7110%" y="197" width="0.0812%" height="15" fill="rgb(254,45,19)" fg:x="403" fg:w="1"/><text x="32.9610%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="32.7110%" y="181" width="0.0812%" height="15" fill="rgb(219,14,44)" fg:x="403" fg:w="1"/><text x="32.9610%" y="191.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (18 samples, 1.46%)</title><rect x="31.4123%" y="533" width="1.4610%" height="15" fill="rgb(217,220,26)" fg:x="387" fg:w="18"/><text x="31.6623%" y="543.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (18 samples, 1.46%)</title><rect x="31.4123%" y="517" width="1.4610%" height="15" fill="rgb(213,158,28)" fg:x="387" fg:w="18"/><text x="31.6623%" y="527.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (12 samples, 0.97%)</title><rect x="31.8994%" y="501" width="0.9740%" height="15" fill="rgb(252,51,52)" fg:x="393" fg:w="12"/><text x="32.1494%" y="511.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (12 samples, 0.97%)</title><rect x="31.8994%" y="485" width="0.9740%" height="15" fill="rgb(246,89,16)" fg:x="393" fg:w="12"/><text x="32.1494%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.97%)</title><rect x="31.8994%" y="469" width="0.9740%" height="15" fill="rgb(216,158,49)" fg:x="393" fg:w="12"/><text x="32.1494%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.97%)</title><rect x="31.8994%" y="453" width="0.9740%" height="15" fill="rgb(236,107,19)" fg:x="393" fg:w="12"/><text x="32.1494%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="32.7922%" y="437" width="0.0812%" height="15" fill="rgb(228,185,30)" fg:x="404" fg:w="1"/><text x="33.0422%" y="447.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="32.7922%" y="421" width="0.0812%" height="15" fill="rgb(246,134,8)" fg:x="404" fg:w="1"/><text x="33.0422%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.7922%" y="405" width="0.0812%" height="15" fill="rgb(214,143,50)" fg:x="404" fg:w="1"/><text x="33.0422%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.7922%" y="389" width="0.0812%" height="15" fill="rgb(228,75,8)" fg:x="404" fg:w="1"/><text x="33.0422%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.7922%" y="373" width="0.0812%" height="15" fill="rgb(207,175,4)" fg:x="404" fg:w="1"/><text x="33.0422%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.7922%" y="357" width="0.0812%" height="15" fill="rgb(205,108,24)" fg:x="404" fg:w="1"/><text x="33.0422%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.7922%" y="341" width="0.0812%" height="15" fill="rgb(244,120,49)" fg:x="404" fg:w="1"/><text x="33.0422%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.7922%" y="325" width="0.0812%" height="15" fill="rgb(223,47,38)" fg:x="404" fg:w="1"/><text x="33.0422%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.7922%" y="309" width="0.0812%" height="15" fill="rgb(229,179,11)" fg:x="404" fg:w="1"/><text x="33.0422%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.7922%" y="293" width="0.0812%" height="15" fill="rgb(231,122,1)" fg:x="404" fg:w="1"/><text x="33.0422%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (4 samples, 0.32%)</title><rect x="33.1981%" y="325" width="0.3247%" height="15" fill="rgb(245,119,9)" fg:x="409" fg:w="4"/><text x="33.4481%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="33.1981%" y="309" width="0.3247%" height="15" fill="rgb(241,163,25)" fg:x="409" fg:w="4"/><text x="33.4481%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="33.2792%" y="293" width="0.2435%" height="15" fill="rgb(217,214,3)" fg:x="410" fg:w="3"/><text x="33.5292%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.4416%" y="277" width="0.0812%" height="15" fill="rgb(240,86,28)" fg:x="412" fg:w="1"/><text x="33.6916%" y="287.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (6 samples, 0.49%)</title><rect x="33.1981%" y="373" width="0.4870%" height="15" fill="rgb(215,47,9)" fg:x="409" fg:w="6"/><text x="33.4481%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (6 samples, 0.49%)</title><rect x="33.1981%" y="357" width="0.4870%" height="15" fill="rgb(252,25,45)" fg:x="409" fg:w="6"/><text x="33.4481%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="33.1981%" y="341" width="0.4870%" height="15" fill="rgb(251,164,9)" fg:x="409" fg:w="6"/><text x="33.4481%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="33.5227%" y="325" width="0.1623%" height="15" fill="rgb(233,194,0)" fg:x="413" fg:w="2"/><text x="33.7727%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="33.5227%" y="309" width="0.1623%" height="15" fill="rgb(249,111,24)" fg:x="413" fg:w="2"/><text x="33.7727%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="33.5227%" y="293" width="0.1623%" height="15" fill="rgb(250,223,3)" fg:x="413" fg:w="2"/><text x="33.7727%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="33.5227%" y="277" width="0.1623%" height="15" fill="rgb(236,178,37)" fg:x="413" fg:w="2"/><text x="33.7727%" y="287.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (8 samples, 0.65%)</title><rect x="33.1169%" y="389" width="0.6494%" height="15" fill="rgb(241,158,50)" fg:x="408" fg:w="8"/><text x="33.3669%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="33.6851%" y="373" width="0.0812%" height="15" fill="rgb(213,121,41)" fg:x="415" fg:w="1"/><text x="33.9351%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="33.6851%" y="357" width="0.0812%" height="15" fill="rgb(240,92,3)" fg:x="415" fg:w="1"/><text x="33.9351%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.6851%" y="341" width="0.0812%" height="15" fill="rgb(205,123,3)" fg:x="415" fg:w="1"/><text x="33.9351%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="33.9286%" y="341" width="0.0812%" height="15" fill="rgb(205,97,47)" fg:x="418" fg:w="1"/><text x="34.1786%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="33.9286%" y="325" width="0.0812%" height="15" fill="rgb(247,152,14)" fg:x="418" fg:w="1"/><text x="34.1786%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="33.9286%" y="309" width="0.0812%" height="15" fill="rgb(248,195,53)" fg:x="418" fg:w="1"/><text x="34.1786%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="33.9286%" y="293" width="0.0812%" height="15" fill="rgb(226,201,16)" fg:x="418" fg:w="1"/><text x="34.1786%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="33.9286%" y="277" width="0.0812%" height="15" fill="rgb(205,98,0)" fg:x="418" fg:w="1"/><text x="34.1786%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="33.9286%" y="261" width="0.0812%" height="15" fill="rgb(214,191,48)" fg:x="418" fg:w="1"/><text x="34.1786%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="33.9286%" y="245" width="0.0812%" height="15" fill="rgb(237,112,39)" fg:x="418" fg:w="1"/><text x="34.1786%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="33.9286%" y="229" width="0.0812%" height="15" fill="rgb(247,203,27)" fg:x="418" fg:w="1"/><text x="34.1786%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="33.9286%" y="213" width="0.0812%" height="15" fill="rgb(235,124,28)" fg:x="418" fg:w="1"/><text x="34.1786%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="33.9286%" y="197" width="0.0812%" height="15" fill="rgb(208,207,46)" fg:x="418" fg:w="1"/><text x="34.1786%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="33.9286%" y="181" width="0.0812%" height="15" fill="rgb(234,176,4)" fg:x="418" fg:w="1"/><text x="34.1786%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="33.9286%" y="165" width="0.0812%" height="15" fill="rgb(230,133,28)" fg:x="418" fg:w="1"/><text x="34.1786%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.9286%" y="149" width="0.0812%" height="15" fill="rgb(211,137,40)" fg:x="418" fg:w="1"/><text x="34.1786%" y="159.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (3 samples, 0.24%)</title><rect x="34.0097%" y="341" width="0.2435%" height="15" fill="rgb(254,35,13)" fg:x="419" fg:w="3"/><text x="34.2597%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="34.1721%" y="325" width="0.0812%" height="15" fill="rgb(225,49,51)" fg:x="421" fg:w="1"/><text x="34.4221%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="34.1721%" y="309" width="0.0812%" height="15" fill="rgb(251,10,15)" fg:x="421" fg:w="1"/><text x="34.4221%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.41%)</title><rect x="33.9286%" y="357" width="0.4058%" height="15" fill="rgb(228,207,15)" fg:x="418" fg:w="5"/><text x="34.1786%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="34.2532%" y="341" width="0.0812%" height="15" fill="rgb(241,99,19)" fg:x="422" fg:w="1"/><text x="34.5032%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.2532%" y="325" width="0.0812%" height="15" fill="rgb(207,104,49)" fg:x="422" fg:w="1"/><text x="34.5032%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="34.2532%" y="309" width="0.0812%" height="15" fill="rgb(234,99,18)" fg:x="422" fg:w="1"/><text x="34.5032%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.2532%" y="293" width="0.0812%" height="15" fill="rgb(213,191,49)" fg:x="422" fg:w="1"/><text x="34.5032%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="34.2532%" y="277" width="0.0812%" height="15" fill="rgb(210,226,19)" fg:x="422" fg:w="1"/><text x="34.5032%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.2532%" y="261" width="0.0812%" height="15" fill="rgb(229,97,18)" fg:x="422" fg:w="1"/><text x="34.5032%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="34.2532%" y="245" width="0.0812%" height="15" fill="rgb(211,167,15)" fg:x="422" fg:w="1"/><text x="34.5032%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.3344%" y="341" width="0.0812%" height="15" fill="rgb(210,169,34)" fg:x="423" fg:w="1"/><text x="34.5844%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="34.4968%" y="309" width="0.0812%" height="15" fill="rgb(241,121,31)" fg:x="425" fg:w="1"/><text x="34.7468%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="34.4968%" y="293" width="0.0812%" height="15" fill="rgb(232,40,11)" fg:x="425" fg:w="1"/><text x="34.7468%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="34.4968%" y="277" width="0.0812%" height="15" fill="rgb(205,86,26)" fg:x="425" fg:w="1"/><text x="34.7468%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.4968%" y="261" width="0.0812%" height="15" fill="rgb(231,126,28)" fg:x="425" fg:w="1"/><text x="34.7468%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.4968%" y="245" width="0.0812%" height="15" fill="rgb(219,221,18)" fg:x="425" fg:w="1"/><text x="34.7468%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="34.4968%" y="229" width="0.0812%" height="15" fill="rgb(211,40,0)" fg:x="425" fg:w="1"/><text x="34.7468%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="34.4968%" y="213" width="0.0812%" height="15" fill="rgb(239,85,43)" fg:x="425" fg:w="1"/><text x="34.7468%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="34.4968%" y="197" width="0.0812%" height="15" fill="rgb(231,55,21)" fg:x="425" fg:w="1"/><text x="34.7468%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.4968%" y="181" width="0.0812%" height="15" fill="rgb(225,184,43)" fg:x="425" fg:w="1"/><text x="34.7468%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.4968%" y="165" width="0.0812%" height="15" fill="rgb(251,158,41)" fg:x="425" fg:w="1"/><text x="34.7468%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="34.4968%" y="149" width="0.0812%" height="15" fill="rgb(234,159,37)" fg:x="425" fg:w="1"/><text x="34.7468%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="34.4968%" y="133" width="0.0812%" height="15" fill="rgb(216,204,22)" fg:x="425" fg:w="1"/><text x="34.7468%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="34.4968%" y="117" width="0.0812%" height="15" fill="rgb(214,17,3)" fg:x="425" fg:w="1"/><text x="34.7468%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="34.4968%" y="101" width="0.0812%" height="15" fill="rgb(212,111,17)" fg:x="425" fg:w="1"/><text x="34.7468%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.4968%" y="85" width="0.0812%" height="15" fill="rgb(221,157,24)" fg:x="425" fg:w="1"/><text x="34.7468%" y="95.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (5 samples, 0.41%)</title><rect x="34.3344%" y="357" width="0.4058%" height="15" fill="rgb(252,16,13)" fg:x="423" fg:w="5"/><text x="34.5844%" y="367.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="34.4156%" y="341" width="0.3247%" height="15" fill="rgb(221,62,2)" fg:x="424" fg:w="4"/><text x="34.6656%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="34.4156%" y="325" width="0.3247%" height="15" fill="rgb(247,87,22)" fg:x="424" fg:w="4"/><text x="34.6656%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="34.5779%" y="309" width="0.1623%" height="15" fill="rgb(215,73,9)" fg:x="426" fg:w="2"/><text x="34.8279%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="34.5779%" y="293" width="0.1623%" height="15" fill="rgb(207,175,33)" fg:x="426" fg:w="2"/><text x="34.8279%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="34.5779%" y="277" width="0.1623%" height="15" fill="rgb(243,129,54)" fg:x="426" fg:w="2"/><text x="34.8279%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="34.5779%" y="261" width="0.1623%" height="15" fill="rgb(227,119,45)" fg:x="426" fg:w="2"/><text x="34.8279%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="34.6591%" y="245" width="0.0812%" height="15" fill="rgb(205,109,36)" fg:x="427" fg:w="1"/><text x="34.9091%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.6591%" y="229" width="0.0812%" height="15" fill="rgb(205,6,39)" fg:x="427" fg:w="1"/><text x="34.9091%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.6591%" y="213" width="0.0812%" height="15" fill="rgb(221,32,16)" fg:x="427" fg:w="1"/><text x="34.9091%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="34.7403%" y="341" width="0.0812%" height="15" fill="rgb(228,144,50)" fg:x="428" fg:w="1"/><text x="34.9903%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.7403%" y="325" width="0.0812%" height="15" fill="rgb(229,201,53)" fg:x="428" fg:w="1"/><text x="34.9903%" y="335.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="34.8214%" y="341" width="0.0812%" height="15" fill="rgb(249,153,27)" fg:x="429" fg:w="1"/><text x="35.0714%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.9026%" y="309" width="0.0812%" height="15" fill="rgb(227,106,25)" fg:x="430" fg:w="1"/><text x="35.1526%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.0649%" y="277" width="0.0812%" height="15" fill="rgb(230,65,29)" fg:x="432" fg:w="1"/><text x="35.3149%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="35.2273%" y="245" width="0.1623%" height="15" fill="rgb(221,57,46)" fg:x="434" fg:w="2"/><text x="35.4773%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.3896%" y="245" width="0.0812%" height="15" fill="rgb(229,161,17)" fg:x="436" fg:w="1"/><text x="35.6396%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="35.3896%" y="229" width="0.0812%" height="15" fill="rgb(222,213,11)" fg:x="436" fg:w="1"/><text x="35.6396%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (10 samples, 0.81%)</title><rect x="34.7403%" y="357" width="0.8117%" height="15" fill="rgb(235,35,13)" fg:x="428" fg:w="10"/><text x="34.9903%" y="367.50"></text></g><g><title>kernel::model::props::load_props (8 samples, 0.65%)</title><rect x="34.9026%" y="341" width="0.6494%" height="15" fill="rgb(233,158,34)" fg:x="430" fg:w="8"/><text x="35.1526%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (8 samples, 0.65%)</title><rect x="34.9026%" y="325" width="0.6494%" height="15" fill="rgb(215,151,48)" fg:x="430" fg:w="8"/><text x="35.1526%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (7 samples, 0.57%)</title><rect x="34.9838%" y="309" width="0.5682%" height="15" fill="rgb(229,84,14)" fg:x="431" fg:w="7"/><text x="35.2338%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.57%)</title><rect x="34.9838%" y="293" width="0.5682%" height="15" fill="rgb(229,68,14)" fg:x="431" fg:w="7"/><text x="35.2338%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (5 samples, 0.41%)</title><rect x="35.1461%" y="277" width="0.4058%" height="15" fill="rgb(243,106,26)" fg:x="433" fg:w="5"/><text x="35.3961%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="35.1461%" y="261" width="0.4058%" height="15" fill="rgb(206,45,38)" fg:x="433" fg:w="5"/><text x="35.3961%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="35.4708%" y="245" width="0.0812%" height="15" fill="rgb(226,6,15)" fg:x="437" fg:w="1"/><text x="35.7208%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.4708%" y="229" width="0.0812%" height="15" fill="rgb(232,22,54)" fg:x="437" fg:w="1"/><text x="35.7208%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="35.4708%" y="213" width="0.0812%" height="15" fill="rgb(229,222,32)" fg:x="437" fg:w="1"/><text x="35.7208%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="35.6331%" y="325" width="0.0812%" height="15" fill="rgb(228,62,29)" fg:x="439" fg:w="1"/><text x="35.8831%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.6331%" y="309" width="0.0812%" height="15" fill="rgb(251,103,34)" fg:x="439" fg:w="1"/><text x="35.8831%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.7143%" y="277" width="0.0812%" height="15" fill="rgb(233,12,30)" fg:x="440" fg:w="1"/><text x="35.9643%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.7143%" y="261" width="0.0812%" height="15" fill="rgb(238,52,0)" fg:x="440" fg:w="1"/><text x="35.9643%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.7143%" y="245" width="0.0812%" height="15" fill="rgb(223,98,5)" fg:x="440" fg:w="1"/><text x="35.9643%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.7143%" y="229" width="0.0812%" height="15" fill="rgb(228,75,37)" fg:x="440" fg:w="1"/><text x="35.9643%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="35.7143%" y="213" width="0.0812%" height="15" fill="rgb(205,115,49)" fg:x="440" fg:w="1"/><text x="35.9643%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="35.7143%" y="197" width="0.0812%" height="15" fill="rgb(250,154,43)" fg:x="440" fg:w="1"/><text x="35.9643%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="35.7143%" y="181" width="0.0812%" height="15" fill="rgb(226,43,29)" fg:x="440" fg:w="1"/><text x="35.9643%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="35.7143%" y="165" width="0.0812%" height="15" fill="rgb(249,228,39)" fg:x="440" fg:w="1"/><text x="35.9643%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="35.7143%" y="149" width="0.0812%" height="15" fill="rgb(216,79,43)" fg:x="440" fg:w="1"/><text x="35.9643%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="35.7143%" y="133" width="0.0812%" height="15" fill="rgb(228,95,12)" fg:x="440" fg:w="1"/><text x="35.9643%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="35.7143%" y="117" width="0.0812%" height="15" fill="rgb(249,221,15)" fg:x="440" fg:w="1"/><text x="35.9643%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="35.7143%" y="101" width="0.0812%" height="15" fill="rgb(233,34,13)" fg:x="440" fg:w="1"/><text x="35.9643%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="35.7143%" y="85" width="0.0812%" height="15" fill="rgb(214,103,39)" fg:x="440" fg:w="1"/><text x="35.9643%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.7143%" y="69" width="0.0812%" height="15" fill="rgb(251,126,39)" fg:x="440" fg:w="1"/><text x="35.9643%" y="79.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="35.7143%" y="293" width="0.1623%" height="15" fill="rgb(214,216,36)" fg:x="440" fg:w="2"/><text x="35.9643%" y="303.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="35.7955%" y="277" width="0.0812%" height="15" fill="rgb(220,221,8)" fg:x="441" fg:w="1"/><text x="36.0455%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::gid (8 samples, 0.65%)</title><rect x="35.5519%" y="357" width="0.6494%" height="15" fill="rgb(240,216,3)" fg:x="438" fg:w="8"/><text x="35.8019%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (8 samples, 0.65%)</title><rect x="35.5519%" y="341" width="0.6494%" height="15" fill="rgb(232,218,17)" fg:x="438" fg:w="8"/><text x="35.8019%" y="351.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.49%)</title><rect x="35.7143%" y="325" width="0.4870%" height="15" fill="rgb(229,163,45)" fg:x="440" fg:w="6"/><text x="35.9643%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.49%)</title><rect x="35.7143%" y="309" width="0.4870%" height="15" fill="rgb(231,110,42)" fg:x="440" fg:w="6"/><text x="35.9643%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (4 samples, 0.32%)</title><rect x="35.8766%" y="293" width="0.3247%" height="15" fill="rgb(208,170,48)" fg:x="442" fg:w="4"/><text x="36.1266%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="35.8766%" y="277" width="0.3247%" height="15" fill="rgb(239,116,25)" fg:x="442" fg:w="4"/><text x="36.1266%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (4 samples, 0.32%)</title><rect x="35.8766%" y="261" width="0.3247%" height="15" fill="rgb(219,200,50)" fg:x="442" fg:w="4"/><text x="36.1266%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="35.8766%" y="245" width="0.3247%" height="15" fill="rgb(245,200,0)" fg:x="442" fg:w="4"/><text x="36.1266%" y="255.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (4 samples, 0.32%)</title><rect x="35.8766%" y="229" width="0.3247%" height="15" fill="rgb(245,119,33)" fg:x="442" fg:w="4"/><text x="36.1266%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="35.8766%" y="213" width="0.3247%" height="15" fill="rgb(231,125,12)" fg:x="442" fg:w="4"/><text x="36.1266%" y="223.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="36.2013%" y="293" width="0.0812%" height="15" fill="rgb(216,96,41)" fg:x="446" fg:w="1"/><text x="36.4513%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="36.2825%" y="197" width="0.0812%" height="15" fill="rgb(248,43,45)" fg:x="447" fg:w="1"/><text x="36.5325%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="36.2825%" y="181" width="0.0812%" height="15" fill="rgb(217,222,7)" fg:x="447" fg:w="1"/><text x="36.5325%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="36.2825%" y="165" width="0.0812%" height="15" fill="rgb(233,28,6)" fg:x="447" fg:w="1"/><text x="36.5325%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.3636%" y="181" width="0.0812%" height="15" fill="rgb(231,218,15)" fg:x="448" fg:w="1"/><text x="36.6136%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.3636%" y="165" width="0.0812%" height="15" fill="rgb(226,171,48)" fg:x="448" fg:w="1"/><text x="36.6136%" y="175.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="36.4448%" y="181" width="0.0812%" height="15" fill="rgb(235,201,9)" fg:x="449" fg:w="1"/><text x="36.6948%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="36.2825%" y="277" width="0.3247%" height="15" fill="rgb(217,80,15)" fg:x="447" fg:w="4"/><text x="36.5325%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="36.2825%" y="261" width="0.3247%" height="15" fill="rgb(219,152,8)" fg:x="447" fg:w="4"/><text x="36.5325%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.32%)</title><rect x="36.2825%" y="245" width="0.3247%" height="15" fill="rgb(243,107,38)" fg:x="447" fg:w="4"/><text x="36.5325%" y="255.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.32%)</title><rect x="36.2825%" y="229" width="0.3247%" height="15" fill="rgb(231,17,5)" fg:x="447" fg:w="4"/><text x="36.5325%" y="239.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="36.2825%" y="213" width="0.3247%" height="15" fill="rgb(209,25,54)" fg:x="447" fg:w="4"/><text x="36.5325%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="36.3636%" y="197" width="0.2435%" height="15" fill="rgb(219,0,2)" fg:x="448" fg:w="3"/><text x="36.6136%" y="207.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="36.5260%" y="181" width="0.0812%" height="15" fill="rgb(246,9,5)" fg:x="450" fg:w="1"/><text x="36.7760%" y="191.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="36.6071%" y="261" width="0.0812%" height="15" fill="rgb(226,159,4)" fg:x="451" fg:w="1"/><text x="36.8571%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="36.6883%" y="229" width="0.0812%" height="15" fill="rgb(219,175,34)" fg:x="452" fg:w="1"/><text x="36.9383%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="36.6883%" y="213" width="0.0812%" height="15" fill="rgb(236,10,46)" fg:x="452" fg:w="1"/><text x="36.9383%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.24%)</title><rect x="36.7695%" y="229" width="0.2435%" height="15" fill="rgb(240,211,16)" fg:x="453" fg:w="3"/><text x="37.0195%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="36.7695%" y="213" width="0.2435%" height="15" fill="rgb(205,3,43)" fg:x="453" fg:w="3"/><text x="37.0195%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.9318%" y="197" width="0.0812%" height="15" fill="rgb(245,7,22)" fg:x="455" fg:w="1"/><text x="37.1818%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="37.0130%" y="229" width="0.0812%" height="15" fill="rgb(239,132,32)" fg:x="456" fg:w="1"/><text x="37.2630%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.0130%" y="213" width="0.0812%" height="15" fill="rgb(228,202,34)" fg:x="456" fg:w="1"/><text x="37.2630%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.2565%" y="213" width="0.0812%" height="15" fill="rgb(254,200,22)" fg:x="459" fg:w="1"/><text x="37.5065%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.4188%" y="197" width="0.0812%" height="15" fill="rgb(219,10,39)" fg:x="461" fg:w="1"/><text x="37.6688%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.57%)</title><rect x="37.5000%" y="197" width="0.5682%" height="15" fill="rgb(226,210,39)" fg:x="462" fg:w="7"/><text x="37.7500%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.9870%" y="181" width="0.0812%" height="15" fill="rgb(208,219,16)" fg:x="468" fg:w="1"/><text x="38.2370%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (11 samples, 0.89%)</title><rect x="37.3377%" y="213" width="0.8929%" height="15" fill="rgb(216,158,51)" fg:x="460" fg:w="11"/><text x="37.5877%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (2 samples, 0.16%)</title><rect x="38.0682%" y="197" width="0.1623%" height="15" fill="rgb(233,14,44)" fg:x="469" fg:w="2"/><text x="38.3182%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="38.3117%" y="197" width="0.0812%" height="15" fill="rgb(237,97,39)" fg:x="472" fg:w="1"/><text x="38.5617%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="38.3117%" y="181" width="0.0812%" height="15" fill="rgb(218,198,43)" fg:x="472" fg:w="1"/><text x="38.5617%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.3117%" y="165" width="0.0812%" height="15" fill="rgb(231,104,20)" fg:x="472" fg:w="1"/><text x="38.5617%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.41%)</title><rect x="38.2305%" y="213" width="0.4058%" height="15" fill="rgb(254,36,13)" fg:x="471" fg:w="5"/><text x="38.4805%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="38.3929%" y="197" width="0.2435%" height="15" fill="rgb(248,14,50)" fg:x="473" fg:w="3"/><text x="38.6429%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.5552%" y="181" width="0.0812%" height="15" fill="rgb(217,107,29)" fg:x="475" fg:w="1"/><text x="38.8052%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="38.8799%" y="149" width="0.0812%" height="15" fill="rgb(251,169,33)" fg:x="479" fg:w="1"/><text x="39.1299%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="38.9610%" y="149" width="0.0812%" height="15" fill="rgb(217,108,32)" fg:x="480" fg:w="1"/><text x="39.2110%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="39.0422%" y="85" width="0.1623%" height="15" fill="rgb(219,66,42)" fg:x="481" fg:w="2"/><text x="39.2922%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="39.0422%" y="117" width="0.2435%" height="15" fill="rgb(206,180,7)" fg:x="481" fg:w="3"/><text x="39.2922%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="39.0422%" y="101" width="0.2435%" height="15" fill="rgb(208,226,31)" fg:x="481" fg:w="3"/><text x="39.2922%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.2045%" y="85" width="0.0812%" height="15" fill="rgb(218,26,49)" fg:x="483" fg:w="1"/><text x="39.4545%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.41%)</title><rect x="39.0422%" y="149" width="0.4058%" height="15" fill="rgb(233,197,48)" fg:x="481" fg:w="5"/><text x="39.2922%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.41%)</title><rect x="39.0422%" y="133" width="0.4058%" height="15" fill="rgb(252,181,51)" fg:x="481" fg:w="5"/><text x="39.2922%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="39.2857%" y="117" width="0.1623%" height="15" fill="rgb(253,90,19)" fg:x="484" fg:w="2"/><text x="39.5357%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.3669%" y="101" width="0.0812%" height="15" fill="rgb(215,171,30)" fg:x="485" fg:w="1"/><text x="39.6169%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.4481%" y="133" width="0.0812%" height="15" fill="rgb(214,222,9)" fg:x="486" fg:w="1"/><text x="39.6981%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (59 samples, 4.79%)</title><rect x="39.4481%" y="149" width="4.7890%" height="15" fill="rgb(223,3,22)" fg:x="486" fg:w="59"/><text x="39.6981%" y="159.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (58 samples, 4.71%)</title><rect x="39.5292%" y="133" width="4.7078%" height="15" fill="rgb(225,196,46)" fg:x="487" fg:w="58"/><text x="39.7792%" y="143.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (58 samples, 4.71%)</title><rect x="39.5292%" y="117" width="4.7078%" height="15" fill="rgb(209,110,37)" fg:x="487" fg:w="58"/><text x="39.7792%" y="127.50">alloc..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 5.76%)</title><rect x="38.6364%" y="197" width="5.7630%" height="15" fill="rgb(249,89,12)" fg:x="476" fg:w="71"/><text x="38.8864%" y="207.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (71 samples, 5.76%)</title><rect x="38.6364%" y="181" width="5.7630%" height="15" fill="rgb(226,27,33)" fg:x="476" fg:w="71"/><text x="38.8864%" y="191.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (71 samples, 5.76%)</title><rect x="38.6364%" y="165" width="5.7630%" height="15" fill="rgb(213,82,22)" fg:x="476" fg:w="71"/><text x="38.8864%" y="175.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="44.2370%" y="149" width="0.1623%" height="15" fill="rgb(248,140,0)" fg:x="545" fg:w="2"/><text x="44.4870%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.4805%" y="181" width="0.0812%" height="15" fill="rgb(228,106,3)" fg:x="548" fg:w="1"/><text x="44.7305%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="44.5617%" y="181" width="0.0812%" height="15" fill="rgb(209,23,37)" fg:x="549" fg:w="1"/><text x="44.8117%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="44.6429%" y="181" width="0.0812%" height="15" fill="rgb(241,93,50)" fg:x="550" fg:w="1"/><text x="44.8929%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.6429%" y="165" width="0.0812%" height="15" fill="rgb(253,46,43)" fg:x="550" fg:w="1"/><text x="44.8929%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.6429%" y="149" width="0.0812%" height="15" fill="rgb(226,206,43)" fg:x="550" fg:w="1"/><text x="44.8929%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="44.6429%" y="133" width="0.0812%" height="15" fill="rgb(217,54,7)" fg:x="550" fg:w="1"/><text x="44.8929%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.41%)</title><rect x="44.7240%" y="181" width="0.4058%" height="15" fill="rgb(223,5,52)" fg:x="551" fg:w="5"/><text x="44.9740%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.0487%" y="165" width="0.0812%" height="15" fill="rgb(206,52,46)" fg:x="555" fg:w="1"/><text x="45.2987%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="45.1299%" y="181" width="0.0812%" height="15" fill="rgb(253,136,11)" fg:x="556" fg:w="1"/><text x="45.3799%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.97%)</title><rect x="44.3994%" y="197" width="0.9740%" height="15" fill="rgb(208,106,33)" fg:x="547" fg:w="12"/><text x="44.6494%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="45.2110%" y="181" width="0.1623%" height="15" fill="rgb(206,54,4)" fg:x="557" fg:w="2"/><text x="45.4610%" y="191.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="45.2922%" y="165" width="0.0812%" height="15" fill="rgb(213,3,15)" fg:x="558" fg:w="1"/><text x="45.5422%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="45.3734%" y="197" width="0.0812%" height="15" fill="rgb(252,211,39)" fg:x="559" fg:w="1"/><text x="45.6234%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="45.3734%" y="181" width="0.0812%" height="15" fill="rgb(223,6,36)" fg:x="559" fg:w="1"/><text x="45.6234%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.3734%" y="165" width="0.0812%" height="15" fill="rgb(252,169,45)" fg:x="559" fg:w="1"/><text x="45.6234%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.3734%" y="149" width="0.0812%" height="15" fill="rgb(212,48,26)" fg:x="559" fg:w="1"/><text x="45.6234%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.3734%" y="133" width="0.0812%" height="15" fill="rgb(251,102,48)" fg:x="559" fg:w="1"/><text x="45.6234%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (85 samples, 6.90%)</title><rect x="38.6364%" y="213" width="6.8994%" height="15" fill="rgb(243,208,16)" fg:x="476" fg:w="85"/><text x="38.8864%" y="223.50">regex_aut..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="45.4545%" y="197" width="0.0812%" height="15" fill="rgb(219,96,24)" fg:x="560" fg:w="1"/><text x="45.7045%" y="207.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (1 samples, 0.08%)</title><rect x="45.4545%" y="181" width="0.0812%" height="15" fill="rgb(219,33,29)" fg:x="560" fg:w="1"/><text x="45.7045%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="45.5357%" y="213" width="0.0812%" height="15" fill="rgb(223,176,5)" fg:x="561" fg:w="1"/><text x="45.7857%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="45.5357%" y="197" width="0.0812%" height="15" fill="rgb(228,140,14)" fg:x="561" fg:w="1"/><text x="45.7857%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="45.5357%" y="181" width="0.0812%" height="15" fill="rgb(217,179,31)" fg:x="561" fg:w="1"/><text x="45.7857%" y="191.50"></text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="45.6169%" y="213" width="0.0812%" height="15" fill="rgb(230,9,30)" fg:x="562" fg:w="1"/><text x="45.8669%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (108 samples, 8.77%)</title><rect x="37.0942%" y="229" width="8.7662%" height="15" fill="rgb(230,136,20)" fg:x="457" fg:w="108"/><text x="37.3442%" y="239.50">regex_automa..</text></g><g><title>regex_automata::util::prefilter::suffixes (2 samples, 0.16%)</title><rect x="45.6981%" y="213" width="0.1623%" height="15" fill="rgb(215,210,22)" fg:x="563" fg:w="2"/><text x="45.9481%" y="223.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="45.7792%" y="197" width="0.0812%" height="15" fill="rgb(218,43,5)" fg:x="564" fg:w="1"/><text x="46.0292%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="45.8604%" y="181" width="0.0812%" height="15" fill="rgb(216,11,5)" fg:x="565" fg:w="1"/><text x="46.1104%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="45.8604%" y="165" width="0.0812%" height="15" fill="rgb(209,82,29)" fg:x="565" fg:w="1"/><text x="46.1104%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.49%)</title><rect x="45.8604%" y="229" width="0.4870%" height="15" fill="rgb(244,115,12)" fg:x="565" fg:w="6"/><text x="46.1104%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.49%)</title><rect x="45.8604%" y="213" width="0.4870%" height="15" fill="rgb(222,82,18)" fg:x="565" fg:w="6"/><text x="46.1104%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.49%)</title><rect x="45.8604%" y="197" width="0.4870%" height="15" fill="rgb(249,227,8)" fg:x="565" fg:w="6"/><text x="46.1104%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.41%)</title><rect x="45.9416%" y="181" width="0.4058%" height="15" fill="rgb(253,141,45)" fg:x="566" fg:w="5"/><text x="46.1916%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.41%)</title><rect x="45.9416%" y="165" width="0.4058%" height="15" fill="rgb(234,184,4)" fg:x="566" fg:w="5"/><text x="46.1916%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.41%)</title><rect x="45.9416%" y="149" width="0.4058%" height="15" fill="rgb(218,194,23)" fg:x="566" fg:w="5"/><text x="46.1916%" y="159.50"></text></g><g><title>__libc_malloc (5 samples, 0.41%)</title><rect x="45.9416%" y="133" width="0.4058%" height="15" fill="rgb(235,66,41)" fg:x="566" fg:w="5"/><text x="46.1916%" y="143.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="46.4286%" y="197" width="0.0812%" height="15" fill="rgb(245,217,1)" fg:x="572" fg:w="1"/><text x="46.6786%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="46.4286%" y="181" width="0.0812%" height="15" fill="rgb(229,91,1)" fg:x="572" fg:w="1"/><text x="46.6786%" y="191.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="46.4286%" y="165" width="0.0812%" height="15" fill="rgb(207,101,30)" fg:x="572" fg:w="1"/><text x="46.6786%" y="175.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::literal (1 samples, 0.08%)</title><rect x="46.5097%" y="165" width="0.0812%" height="15" fill="rgb(223,82,49)" fg:x="573" fg:w="1"/><text x="46.7597%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="46.5097%" y="197" width="0.1623%" height="15" fill="rgb(218,167,17)" fg:x="573" fg:w="2"/><text x="46.7597%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::class (2 samples, 0.16%)</title><rect x="46.5097%" y="181" width="0.1623%" height="15" fill="rgb(208,103,14)" fg:x="573" fg:w="2"/><text x="46.7597%" y="191.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="46.5909%" y="165" width="0.0812%" height="15" fill="rgb(238,20,8)" fg:x="574" fg:w="1"/><text x="46.8409%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="46.6721%" y="197" width="0.0812%" height="15" fill="rgb(218,80,54)" fg:x="575" fg:w="1"/><text x="46.9221%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (125 samples, 10.15%)</title><rect x="36.6883%" y="245" width="10.1461%" height="15" fill="rgb(240,144,17)" fg:x="452" fg:w="125"/><text x="36.9383%" y="255.50">regex_automata:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.49%)</title><rect x="46.3474%" y="229" width="0.4870%" height="15" fill="rgb(245,27,50)" fg:x="571" fg:w="6"/><text x="46.5974%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.49%)</title><rect x="46.3474%" y="213" width="0.4870%" height="15" fill="rgb(251,51,7)" fg:x="571" fg:w="6"/><text x="46.5974%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.7532%" y="197" width="0.0812%" height="15" fill="rgb(245,217,29)" fg:x="576" fg:w="1"/><text x="47.0032%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (127 samples, 10.31%)</title><rect x="36.6071%" y="277" width="10.3084%" height="15" fill="rgb(221,176,29)" fg:x="451" fg:w="127"/><text x="36.8571%" y="287.50">&lt;regex::regex::..</text></g><g><title>regex::builders::Builder::build_one_string (126 samples, 10.23%)</title><rect x="36.6883%" y="261" width="10.2273%" height="15" fill="rgb(212,180,24)" fg:x="452" fg:w="126"/><text x="36.9383%" y="271.50">regex::builders..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="46.8344%" y="245" width="0.0812%" height="15" fill="rgb(254,24,2)" fg:x="577" fg:w="1"/><text x="47.0844%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="46.9156%" y="229" width="0.0812%" height="15" fill="rgb(230,100,2)" fg:x="578" fg:w="1"/><text x="47.1656%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="46.9156%" y="213" width="0.0812%" height="15" fill="rgb(219,142,25)" fg:x="578" fg:w="1"/><text x="47.1656%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.9156%" y="197" width="0.0812%" height="15" fill="rgb(240,73,43)" fg:x="578" fg:w="1"/><text x="47.1656%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="46.9156%" y="245" width="0.2435%" height="15" fill="rgb(214,114,15)" fg:x="578" fg:w="3"/><text x="47.1656%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="46.9968%" y="229" width="0.1623%" height="15" fill="rgb(207,130,4)" fg:x="579" fg:w="2"/><text x="47.2468%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="47.0779%" y="213" width="0.0812%" height="15" fill="rgb(221,25,40)" fg:x="580" fg:w="1"/><text x="47.3279%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="47.0779%" y="197" width="0.0812%" height="15" fill="rgb(241,184,7)" fg:x="580" fg:w="1"/><text x="47.3279%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.0779%" y="181" width="0.0812%" height="15" fill="rgb(235,159,4)" fg:x="580" fg:w="1"/><text x="47.3279%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="47.1591%" y="229" width="0.0812%" height="15" fill="rgb(214,87,48)" fg:x="581" fg:w="1"/><text x="47.4091%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.1591%" y="213" width="0.0812%" height="15" fill="rgb(246,198,24)" fg:x="581" fg:w="1"/><text x="47.4091%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.41%)</title><rect x="46.9156%" y="277" width="0.4058%" height="15" fill="rgb(209,66,40)" fg:x="578" fg:w="5"/><text x="47.1656%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (5 samples, 0.41%)</title><rect x="46.9156%" y="261" width="0.4058%" height="15" fill="rgb(233,147,39)" fg:x="578" fg:w="5"/><text x="47.1656%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="47.1591%" y="245" width="0.1623%" height="15" fill="rgb(231,145,52)" fg:x="581" fg:w="2"/><text x="47.4091%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="47.2403%" y="229" width="0.0812%" height="15" fill="rgb(206,20,26)" fg:x="582" fg:w="1"/><text x="47.4903%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="47.2403%" y="213" width="0.0812%" height="15" fill="rgb(238,220,4)" fg:x="582" fg:w="1"/><text x="47.4903%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="47.2403%" y="197" width="0.0812%" height="15" fill="rgb(252,195,42)" fg:x="582" fg:w="1"/><text x="47.4903%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="47.7273%" y="197" width="0.0812%" height="15" fill="rgb(209,10,6)" fg:x="588" fg:w="1"/><text x="47.9773%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.7273%" y="181" width="0.0812%" height="15" fill="rgb(229,3,52)" fg:x="588" fg:w="1"/><text x="47.9773%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="47.7273%" y="165" width="0.0812%" height="15" fill="rgb(253,49,37)" fg:x="588" fg:w="1"/><text x="47.9773%" y="175.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (145 samples, 11.77%)</title><rect x="36.2825%" y="293" width="11.7695%" height="15" fill="rgb(240,103,49)" fg:x="447" fg:w="145"/><text x="36.5325%" y="303.50">indefinite::helpe..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.73%)</title><rect x="47.3214%" y="277" width="0.7305%" height="15" fill="rgb(250,182,30)" fg:x="583" fg:w="9"/><text x="47.5714%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.73%)</title><rect x="47.3214%" y="261" width="0.7305%" height="15" fill="rgb(248,8,30)" fg:x="583" fg:w="9"/><text x="47.5714%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.73%)</title><rect x="47.3214%" y="245" width="0.7305%" height="15" fill="rgb(237,120,30)" fg:x="583" fg:w="9"/><text x="47.5714%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.65%)</title><rect x="47.4026%" y="229" width="0.6494%" height="15" fill="rgb(221,146,34)" fg:x="584" fg:w="8"/><text x="47.6526%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.65%)</title><rect x="47.4026%" y="213" width="0.6494%" height="15" fill="rgb(242,55,13)" fg:x="584" fg:w="8"/><text x="47.6526%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="47.8084%" y="197" width="0.2435%" height="15" fill="rgb(242,112,31)" fg:x="589" fg:w="3"/><text x="48.0584%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.0519%" y="261" width="0.0812%" height="15" fill="rgb(249,192,27)" fg:x="592" fg:w="1"/><text x="48.3019%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.2143%" y="229" width="0.0812%" height="15" fill="rgb(208,204,44)" fg:x="594" fg:w="1"/><text x="48.4643%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.2955%" y="197" width="0.0812%" height="15" fill="rgb(208,93,54)" fg:x="595" fg:w="1"/><text x="48.5455%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="48.2955%" y="229" width="0.1623%" height="15" fill="rgb(242,1,31)" fg:x="595" fg:w="2"/><text x="48.5455%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="48.2955%" y="213" width="0.1623%" height="15" fill="rgb(241,83,25)" fg:x="595" fg:w="2"/><text x="48.5455%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="48.3766%" y="197" width="0.0812%" height="15" fill="rgb(205,169,50)" fg:x="596" fg:w="1"/><text x="48.6266%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="48.3766%" y="181" width="0.0812%" height="15" fill="rgb(239,186,37)" fg:x="596" fg:w="1"/><text x="48.6266%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.7825%" y="197" width="0.0812%" height="15" fill="rgb(205,221,10)" fg:x="601" fg:w="1"/><text x="49.0325%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.81%)</title><rect x="48.7013%" y="213" width="0.8117%" height="15" fill="rgb(218,196,15)" fg:x="600" fg:w="10"/><text x="48.9513%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.65%)</title><rect x="48.8636%" y="197" width="0.6494%" height="15" fill="rgb(218,196,35)" fg:x="602" fg:w="8"/><text x="49.1136%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.41%)</title><rect x="49.5130%" y="213" width="0.4058%" height="15" fill="rgb(233,63,24)" fg:x="610" fg:w="5"/><text x="49.7630%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="49.5942%" y="197" width="0.3247%" height="15" fill="rgb(225,8,4)" fg:x="611" fg:w="4"/><text x="49.8442%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="50.1623%" y="181" width="0.1623%" height="15" fill="rgb(234,105,35)" fg:x="618" fg:w="2"/><text x="50.4123%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.2435%" y="165" width="0.0812%" height="15" fill="rgb(236,21,32)" fg:x="619" fg:w="1"/><text x="50.4935%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.2435%" y="149" width="0.0812%" height="15" fill="rgb(228,109,6)" fg:x="619" fg:w="1"/><text x="50.4935%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.2435%" y="133" width="0.0812%" height="15" fill="rgb(229,215,31)" fg:x="619" fg:w="1"/><text x="50.4935%" y="143.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (8 samples, 0.65%)</title><rect x="50.3247%" y="181" width="0.6494%" height="15" fill="rgb(221,52,54)" fg:x="620" fg:w="8"/><text x="50.5747%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.41%)</title><rect x="50.5682%" y="165" width="0.4058%" height="15" fill="rgb(252,129,43)" fg:x="623" fg:w="5"/><text x="50.8182%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="50.9740%" y="181" width="0.0812%" height="15" fill="rgb(248,183,27)" fg:x="628" fg:w="1"/><text x="51.2240%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (15 samples, 1.22%)</title><rect x="49.9188%" y="213" width="1.2175%" height="15" fill="rgb(250,0,22)" fg:x="615" fg:w="15"/><text x="50.1688%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (14 samples, 1.14%)</title><rect x="50.0000%" y="197" width="1.1364%" height="15" fill="rgb(213,166,10)" fg:x="616" fg:w="14"/><text x="50.2500%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="51.0552%" y="181" width="0.0812%" height="15" fill="rgb(207,163,36)" fg:x="629" fg:w="1"/><text x="51.3052%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="51.1364%" y="213" width="0.0812%" height="15" fill="rgb(208,122,22)" fg:x="630" fg:w="1"/><text x="51.3864%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="51.1364%" y="197" width="0.0812%" height="15" fill="rgb(207,104,49)" fg:x="630" fg:w="1"/><text x="51.3864%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="51.1364%" y="181" width="0.0812%" height="15" fill="rgb(248,211,50)" fg:x="630" fg:w="1"/><text x="51.3864%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="51.1364%" y="165" width="0.0812%" height="15" fill="rgb(217,13,45)" fg:x="630" fg:w="1"/><text x="51.3864%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.1364%" y="149" width="0.0812%" height="15" fill="rgb(211,216,49)" fg:x="630" fg:w="1"/><text x="51.3864%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.1364%" y="133" width="0.0812%" height="15" fill="rgb(221,58,53)" fg:x="630" fg:w="1"/><text x="51.3864%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="51.2175%" y="165" width="0.0812%" height="15" fill="rgb(220,112,41)" fg:x="631" fg:w="1"/><text x="51.4675%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.2175%" y="149" width="0.0812%" height="15" fill="rgb(236,38,28)" fg:x="631" fg:w="1"/><text x="51.4675%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.2175%" y="133" width="0.0812%" height="15" fill="rgb(227,195,22)" fg:x="631" fg:w="1"/><text x="51.4675%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.2175%" y="117" width="0.0812%" height="15" fill="rgb(214,55,33)" fg:x="631" fg:w="1"/><text x="51.4675%" y="127.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.65%)</title><rect x="52.3539%" y="101" width="0.6494%" height="15" fill="rgb(248,80,13)" fg:x="645" fg:w="8"/><text x="52.6039%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.0032%" y="101" width="0.0812%" height="15" fill="rgb(238,52,6)" fg:x="653" fg:w="1"/><text x="53.2532%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="53.0844%" y="101" width="0.3247%" height="15" fill="rgb(224,198,47)" fg:x="654" fg:w="4"/><text x="53.3344%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.3279%" y="85" width="0.0812%" height="15" fill="rgb(233,171,20)" fg:x="657" fg:w="1"/><text x="53.5779%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.3279%" y="69" width="0.0812%" height="15" fill="rgb(241,30,25)" fg:x="657" fg:w="1"/><text x="53.5779%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.3279%" y="53" width="0.0812%" height="15" fill="rgb(207,171,38)" fg:x="657" fg:w="1"/><text x="53.5779%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="53.4091%" y="101" width="0.1623%" height="15" fill="rgb(234,70,1)" fg:x="658" fg:w="2"/><text x="53.6591%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.4903%" y="85" width="0.0812%" height="15" fill="rgb(232,178,18)" fg:x="659" fg:w="1"/><text x="53.7403%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.4903%" y="69" width="0.0812%" height="15" fill="rgb(241,78,40)" fg:x="659" fg:w="1"/><text x="53.7403%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.4903%" y="53" width="0.0812%" height="15" fill="rgb(222,35,25)" fg:x="659" fg:w="1"/><text x="53.7403%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="53.8961%" y="69" width="0.2435%" height="15" fill="rgb(207,92,16)" fg:x="664" fg:w="3"/><text x="54.1461%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="53.9773%" y="53" width="0.1623%" height="15" fill="rgb(216,59,51)" fg:x="665" fg:w="2"/><text x="54.2273%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (12 samples, 0.97%)</title><rect x="53.5714%" y="101" width="0.9740%" height="15" fill="rgb(213,80,28)" fg:x="660" fg:w="12"/><text x="53.8214%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (9 samples, 0.73%)</title><rect x="53.8149%" y="85" width="0.7305%" height="15" fill="rgb(220,93,7)" fg:x="663" fg:w="9"/><text x="54.0649%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.41%)</title><rect x="54.1396%" y="69" width="0.4058%" height="15" fill="rgb(225,24,44)" fg:x="667" fg:w="5"/><text x="54.3896%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.4643%" y="53" width="0.0812%" height="15" fill="rgb(243,74,40)" fg:x="671" fg:w="1"/><text x="54.7143%" y="63.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="54.5455%" y="69" width="0.0812%" height="15" fill="rgb(228,39,7)" fg:x="672" fg:w="1"/><text x="54.7955%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (55 samples, 4.46%)</title><rect x="54.5455%" y="101" width="4.4643%" height="15" fill="rgb(227,79,8)" fg:x="672" fg:w="55"/><text x="54.7955%" y="111.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (55 samples, 4.46%)</title><rect x="54.5455%" y="85" width="4.4643%" height="15" fill="rgb(236,58,11)" fg:x="672" fg:w="55"/><text x="54.7955%" y="95.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (54 samples, 4.38%)</title><rect x="54.6266%" y="69" width="4.3831%" height="15" fill="rgb(249,63,35)" fg:x="673" fg:w="54"/><text x="54.8766%" y="79.50">alloc..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (7 samples, 0.57%)</title><rect x="59.0097%" y="101" width="0.5682%" height="15" fill="rgb(252,114,16)" fg:x="727" fg:w="7"/><text x="59.2597%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (105 samples, 8.52%)</title><rect x="51.2175%" y="197" width="8.5227%" height="15" fill="rgb(254,151,24)" fg:x="631" fg:w="105"/><text x="51.4675%" y="207.50">&lt;core::iter:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (105 samples, 8.52%)</title><rect x="51.2175%" y="181" width="8.5227%" height="15" fill="rgb(253,54,39)" fg:x="631" fg:w="105"/><text x="51.4675%" y="191.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (104 samples, 8.44%)</title><rect x="51.2987%" y="165" width="8.4416%" height="15" fill="rgb(243,25,45)" fg:x="632" fg:w="104"/><text x="51.5487%" y="175.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (102 samples, 8.28%)</title><rect x="51.4610%" y="149" width="8.2792%" height="15" fill="rgb(234,134,9)" fg:x="634" fg:w="102"/><text x="51.7110%" y="159.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (102 samples, 8.28%)</title><rect x="51.4610%" y="133" width="8.2792%" height="15" fill="rgb(227,166,31)" fg:x="634" fg:w="102"/><text x="51.7110%" y="143.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (102 samples, 8.28%)</title><rect x="51.4610%" y="117" width="8.2792%" height="15" fill="rgb(245,143,41)" fg:x="634" fg:w="102"/><text x="51.7110%" y="127.50">regex_automa..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="59.5779%" y="101" width="0.1623%" height="15" fill="rgb(238,181,32)" fg:x="734" fg:w="2"/><text x="59.8279%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="59.5779%" y="85" width="0.1623%" height="15" fill="rgb(224,113,18)" fg:x="734" fg:w="2"/><text x="59.8279%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.6591%" y="69" width="0.0812%" height="15" fill="rgb(240,229,28)" fg:x="735" fg:w="1"/><text x="59.9091%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="59.7403%" y="197" width="0.0812%" height="15" fill="rgb(250,185,3)" fg:x="736" fg:w="1"/><text x="59.9903%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.7403%" y="181" width="0.0812%" height="15" fill="rgb(212,59,25)" fg:x="736" fg:w="1"/><text x="59.9903%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.7403%" y="165" width="0.0812%" height="15" fill="rgb(221,87,20)" fg:x="736" fg:w="1"/><text x="59.9903%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="59.9838%" y="181" width="0.1623%" height="15" fill="rgb(213,74,28)" fg:x="739" fg:w="2"/><text x="60.2338%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (7 samples, 0.57%)</title><rect x="60.1461%" y="181" width="0.5682%" height="15" fill="rgb(224,132,34)" fg:x="741" fg:w="7"/><text x="60.3961%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="60.4708%" y="165" width="0.2435%" height="15" fill="rgb(222,101,24)" fg:x="745" fg:w="3"/><text x="60.7208%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.6331%" y="149" width="0.0812%" height="15" fill="rgb(254,142,4)" fg:x="747" fg:w="1"/><text x="60.8831%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.6331%" y="133" width="0.0812%" height="15" fill="rgb(230,229,49)" fg:x="747" fg:w="1"/><text x="60.8831%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="60.7143%" y="181" width="0.2435%" height="15" fill="rgb(238,70,47)" fg:x="748" fg:w="3"/><text x="60.9643%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.8766%" y="165" width="0.0812%" height="15" fill="rgb(231,160,17)" fg:x="750" fg:w="1"/><text x="61.1266%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="60.9578%" y="181" width="0.2435%" height="15" fill="rgb(218,68,53)" fg:x="751" fg:w="3"/><text x="61.2078%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (158 samples, 12.82%)</title><rect x="48.4578%" y="229" width="12.8247%" height="15" fill="rgb(236,111,10)" fg:x="597" fg:w="158"/><text x="48.7078%" y="239.50">regex_automata::met..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (124 samples, 10.06%)</title><rect x="51.2175%" y="213" width="10.0649%" height="15" fill="rgb(224,34,41)" fg:x="631" fg:w="124"/><text x="51.4675%" y="223.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (18 samples, 1.46%)</title><rect x="59.8214%" y="197" width="1.4610%" height="15" fill="rgb(241,118,19)" fg:x="737" fg:w="18"/><text x="60.0714%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="61.2013%" y="181" width="0.0812%" height="15" fill="rgb(238,129,25)" fg:x="754" fg:w="1"/><text x="61.4513%" y="191.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="61.2013%" y="165" width="0.0812%" height="15" fill="rgb(238,22,31)" fg:x="754" fg:w="1"/><text x="61.4513%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.2825%" y="165" width="0.0812%" height="15" fill="rgb(222,174,48)" fg:x="755" fg:w="1"/><text x="61.5325%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.2825%" y="149" width="0.0812%" height="15" fill="rgb(206,152,40)" fg:x="755" fg:w="1"/><text x="61.5325%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.2825%" y="133" width="0.0812%" height="15" fill="rgb(218,99,54)" fg:x="755" fg:w="1"/><text x="61.5325%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="61.2825%" y="197" width="0.1623%" height="15" fill="rgb(220,174,26)" fg:x="755" fg:w="2"/><text x="61.5325%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="61.2825%" y="181" width="0.1623%" height="15" fill="rgb(245,116,9)" fg:x="755" fg:w="2"/><text x="61.5325%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="61.3636%" y="165" width="0.0812%" height="15" fill="rgb(209,72,35)" fg:x="756" fg:w="1"/><text x="61.6136%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="61.4448%" y="197" width="0.0812%" height="15" fill="rgb(226,126,21)" fg:x="757" fg:w="1"/><text x="61.6948%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="61.5260%" y="197" width="0.0812%" height="15" fill="rgb(227,192,1)" fg:x="758" fg:w="1"/><text x="61.7760%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.5260%" y="181" width="0.0812%" height="15" fill="rgb(237,180,29)" fg:x="758" fg:w="1"/><text x="61.7760%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.5260%" y="165" width="0.0812%" height="15" fill="rgb(230,197,35)" fg:x="758" fg:w="1"/><text x="61.7760%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.5260%" y="149" width="0.0812%" height="15" fill="rgb(246,193,31)" fg:x="758" fg:w="1"/><text x="61.7760%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.41%)</title><rect x="61.2825%" y="229" width="0.4058%" height="15" fill="rgb(241,36,4)" fg:x="755" fg:w="5"/><text x="61.5325%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.41%)</title><rect x="61.2825%" y="213" width="0.4058%" height="15" fill="rgb(241,130,17)" fg:x="755" fg:w="5"/><text x="61.5325%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="61.6071%" y="197" width="0.0812%" height="15" fill="rgb(206,137,32)" fg:x="759" fg:w="1"/><text x="61.8571%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.6071%" y="181" width="0.0812%" height="15" fill="rgb(237,228,51)" fg:x="759" fg:w="1"/><text x="61.8571%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.6071%" y="165" width="0.0812%" height="15" fill="rgb(243,6,42)" fg:x="759" fg:w="1"/><text x="61.8571%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.6071%" y="149" width="0.0812%" height="15" fill="rgb(251,74,28)" fg:x="759" fg:w="1"/><text x="61.8571%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="61.7695%" y="197" width="0.0812%" height="15" fill="rgb(218,20,49)" fg:x="761" fg:w="1"/><text x="62.0195%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="61.7695%" y="181" width="0.0812%" height="15" fill="rgb(238,28,14)" fg:x="761" fg:w="1"/><text x="62.0195%" y="191.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="61.7695%" y="165" width="0.0812%" height="15" fill="rgb(229,40,46)" fg:x="761" fg:w="1"/><text x="62.0195%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="61.8506%" y="197" width="0.1623%" height="15" fill="rgb(244,195,20)" fg:x="762" fg:w="2"/><text x="62.1006%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (173 samples, 14.04%)</title><rect x="48.0519%" y="277" width="14.0422%" height="15" fill="rgb(253,56,35)" fg:x="592" fg:w="173"/><text x="48.3019%" y="287.50">&lt;regex::regex::string..</text></g><g><title>regex::builders::Builder::build_one_string (172 samples, 13.96%)</title><rect x="48.1331%" y="261" width="13.9610%" height="15" fill="rgb(210,149,44)" fg:x="593" fg:w="172"/><text x="48.3831%" y="271.50">regex::builders::Buil..</text></g><g><title>regex_automata::meta::regex::Builder::build (172 samples, 13.96%)</title><rect x="48.1331%" y="245" width="13.9610%" height="15" fill="rgb(240,135,12)" fg:x="593" fg:w="172"/><text x="48.3831%" y="255.50">regex_automata::meta:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.41%)</title><rect x="61.6883%" y="229" width="0.4058%" height="15" fill="rgb(251,24,50)" fg:x="760" fg:w="5"/><text x="61.9383%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.41%)</title><rect x="61.6883%" y="213" width="0.4058%" height="15" fill="rgb(243,200,47)" fg:x="760" fg:w="5"/><text x="61.9383%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="62.0130%" y="197" width="0.0812%" height="15" fill="rgb(224,166,26)" fg:x="764" fg:w="1"/><text x="62.2630%" y="207.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="62.0130%" y="181" width="0.0812%" height="15" fill="rgb(233,0,47)" fg:x="764" fg:w="1"/><text x="62.2630%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.0130%" y="165" width="0.0812%" height="15" fill="rgb(253,80,5)" fg:x="764" fg:w="1"/><text x="62.2630%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.0130%" y="149" width="0.0812%" height="15" fill="rgb(214,133,25)" fg:x="764" fg:w="1"/><text x="62.2630%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.1753%" y="197" width="0.0812%" height="15" fill="rgb(209,27,14)" fg:x="766" fg:w="1"/><text x="62.4253%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.1753%" y="181" width="0.0812%" height="15" fill="rgb(219,102,51)" fg:x="766" fg:w="1"/><text x="62.4253%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="62.1753%" y="245" width="0.1623%" height="15" fill="rgb(237,18,16)" fg:x="766" fg:w="2"/><text x="62.4253%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="62.1753%" y="229" width="0.1623%" height="15" fill="rgb(241,85,17)" fg:x="766" fg:w="2"/><text x="62.4253%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="62.1753%" y="213" width="0.1623%" height="15" fill="rgb(236,90,42)" fg:x="766" fg:w="2"/><text x="62.4253%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.2565%" y="197" width="0.0812%" height="15" fill="rgb(249,57,21)" fg:x="767" fg:w="1"/><text x="62.5065%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="62.3377%" y="229" width="0.0812%" height="15" fill="rgb(243,12,36)" fg:x="768" fg:w="1"/><text x="62.5877%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.49%)</title><rect x="62.0942%" y="277" width="0.4870%" height="15" fill="rgb(253,128,47)" fg:x="765" fg:w="6"/><text x="62.3442%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (5 samples, 0.41%)</title><rect x="62.1753%" y="261" width="0.4058%" height="15" fill="rgb(207,33,20)" fg:x="766" fg:w="5"/><text x="62.4253%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="62.3377%" y="245" width="0.2435%" height="15" fill="rgb(233,215,35)" fg:x="768" fg:w="3"/><text x="62.5877%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="62.4188%" y="229" width="0.1623%" height="15" fill="rgb(249,188,52)" fg:x="769" fg:w="2"/><text x="62.6688%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="62.4188%" y="213" width="0.1623%" height="15" fill="rgb(225,12,32)" fg:x="769" fg:w="2"/><text x="62.6688%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.5000%" y="197" width="0.0812%" height="15" fill="rgb(247,98,14)" fg:x="770" fg:w="1"/><text x="62.7500%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.6623%" y="213" width="0.0812%" height="15" fill="rgb(247,219,48)" fg:x="772" fg:w="1"/><text x="62.9123%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.6623%" y="197" width="0.0812%" height="15" fill="rgb(253,60,48)" fg:x="772" fg:w="1"/><text x="62.9123%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.6623%" y="181" width="0.0812%" height="15" fill="rgb(245,15,52)" fg:x="772" fg:w="1"/><text x="62.9123%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::next_state_id (1 samples, 0.08%)</title><rect x="62.7435%" y="213" width="0.0812%" height="15" fill="rgb(220,133,28)" fg:x="773" fg:w="1"/><text x="62.9935%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (4 samples, 0.32%)</title><rect x="62.5812%" y="261" width="0.3247%" height="15" fill="rgb(217,180,4)" fg:x="771" fg:w="4"/><text x="62.8312%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="62.6623%" y="245" width="0.2435%" height="15" fill="rgb(251,24,1)" fg:x="772" fg:w="3"/><text x="62.9123%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="62.6623%" y="229" width="0.2435%" height="15" fill="rgb(212,185,49)" fg:x="772" fg:w="3"/><text x="62.9123%" y="239.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="62.8247%" y="213" width="0.0812%" height="15" fill="rgb(215,175,22)" fg:x="774" fg:w="1"/><text x="63.0747%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="63.3929%" y="181" width="0.2435%" height="15" fill="rgb(250,205,14)" fg:x="781" fg:w="3"/><text x="63.6429%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.4740%" y="165" width="0.1623%" height="15" fill="rgb(225,211,22)" fg:x="782" fg:w="2"/><text x="63.7240%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="63.4740%" y="149" width="0.1623%" height="15" fill="rgb(251,179,42)" fg:x="782" fg:w="2"/><text x="63.7240%" y="159.50"></text></g><g><title>indefinite::rules::number::Number::check (195 samples, 15.83%)</title><rect x="48.0519%" y="293" width="15.8279%" height="15" fill="rgb(208,216,51)" fg:x="592" fg:w="195"/><text x="48.3019%" y="303.50">indefinite::rules::numbe..</text></g><g><title>regex::regex::string::Regex::is_match_at (16 samples, 1.30%)</title><rect x="62.5812%" y="277" width="1.2987%" height="15" fill="rgb(235,36,11)" fg:x="771" fg:w="16"/><text x="62.8312%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.97%)</title><rect x="62.9058%" y="261" width="0.9740%" height="15" fill="rgb(213,189,28)" fg:x="775" fg:w="12"/><text x="63.1558%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.97%)</title><rect x="62.9058%" y="245" width="0.9740%" height="15" fill="rgb(227,203,42)" fg:x="775" fg:w="12"/><text x="63.1558%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.97%)</title><rect x="62.9058%" y="229" width="0.9740%" height="15" fill="rgb(244,72,36)" fg:x="775" fg:w="12"/><text x="63.1558%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.81%)</title><rect x="63.0682%" y="213" width="0.8117%" height="15" fill="rgb(213,53,17)" fg:x="777" fg:w="10"/><text x="63.3182%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.81%)</title><rect x="63.0682%" y="197" width="0.8117%" height="15" fill="rgb(207,167,3)" fg:x="777" fg:w="10"/><text x="63.3182%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="63.6364%" y="181" width="0.2435%" height="15" fill="rgb(216,98,30)" fg:x="784" fg:w="3"/><text x="63.8864%" y="191.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="63.8799%" y="245" width="0.0812%" height="15" fill="rgb(236,123,15)" fg:x="787" fg:w="1"/><text x="64.1299%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Config::nfa_size_limit (1 samples, 0.08%)</title><rect x="63.8799%" y="229" width="0.0812%" height="15" fill="rgb(248,81,50)" fg:x="787" fg:w="1"/><text x="64.1299%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.0422%" y="213" width="0.0812%" height="15" fill="rgb(214,120,4)" fg:x="789" fg:w="1"/><text x="64.2922%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.0422%" y="197" width="0.0812%" height="15" fill="rgb(208,179,34)" fg:x="789" fg:w="1"/><text x="64.2922%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.0422%" y="181" width="0.0812%" height="15" fill="rgb(227,140,7)" fg:x="789" fg:w="1"/><text x="64.2922%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.1234%" y="213" width="0.0812%" height="15" fill="rgb(214,22,6)" fg:x="790" fg:w="1"/><text x="64.3734%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="64.2045%" y="213" width="0.0812%" height="15" fill="rgb(207,137,27)" fg:x="791" fg:w="1"/><text x="64.4545%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.2045%" y="197" width="0.0812%" height="15" fill="rgb(210,8,46)" fg:x="791" fg:w="1"/><text x="64.4545%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="64.2045%" y="181" width="0.0812%" height="15" fill="rgb(240,16,54)" fg:x="791" fg:w="1"/><text x="64.4545%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.2045%" y="165" width="0.0812%" height="15" fill="rgb(211,209,29)" fg:x="791" fg:w="1"/><text x="64.4545%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="64.2045%" y="149" width="0.0812%" height="15" fill="rgb(226,228,24)" fg:x="791" fg:w="1"/><text x="64.4545%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="64.3669%" y="197" width="0.2435%" height="15" fill="rgb(222,84,9)" fg:x="793" fg:w="3"/><text x="64.6169%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="64.3669%" y="181" width="0.2435%" height="15" fill="rgb(234,203,30)" fg:x="793" fg:w="3"/><text x="64.6169%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="64.4481%" y="165" width="0.1623%" height="15" fill="rgb(238,109,14)" fg:x="794" fg:w="2"/><text x="64.6981%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="64.8539%" y="165" width="0.3247%" height="15" fill="rgb(233,206,34)" fg:x="799" fg:w="4"/><text x="65.1039%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.57%)</title><rect x="64.6916%" y="181" width="0.5682%" height="15" fill="rgb(220,167,47)" fg:x="797" fg:w="7"/><text x="64.9416%" y="191.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="65.1786%" y="165" width="0.0812%" height="15" fill="rgb(238,105,10)" fg:x="803" fg:w="1"/><text x="65.4286%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9 samples, 0.73%)</title><rect x="64.6104%" y="197" width="0.7305%" height="15" fill="rgb(213,227,17)" fg:x="796" fg:w="9"/><text x="64.8604%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="65.2597%" y="181" width="0.0812%" height="15" fill="rgb(217,132,38)" fg:x="804" fg:w="1"/><text x="65.5097%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (14 samples, 1.14%)</title><rect x="64.2857%" y="213" width="1.1364%" height="15" fill="rgb(242,146,4)" fg:x="792" fg:w="14"/><text x="64.5357%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="65.3409%" y="197" width="0.0812%" height="15" fill="rgb(212,61,9)" fg:x="805" fg:w="1"/><text x="65.5909%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="65.3409%" y="181" width="0.0812%" height="15" fill="rgb(247,126,22)" fg:x="805" fg:w="1"/><text x="65.5909%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="65.3409%" y="165" width="0.0812%" height="15" fill="rgb(220,196,2)" fg:x="805" fg:w="1"/><text x="65.5909%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.4221%" y="181" width="0.0812%" height="15" fill="rgb(208,46,4)" fg:x="806" fg:w="1"/><text x="65.6721%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.4221%" y="165" width="0.0812%" height="15" fill="rgb(252,104,46)" fg:x="806" fg:w="1"/><text x="65.6721%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.4221%" y="149" width="0.0812%" height="15" fill="rgb(237,152,48)" fg:x="806" fg:w="1"/><text x="65.6721%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="65.5844%" y="133" width="0.0812%" height="15" fill="rgb(221,59,37)" fg:x="808" fg:w="1"/><text x="65.8344%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="65.5844%" y="117" width="0.0812%" height="15" fill="rgb(209,202,51)" fg:x="808" fg:w="1"/><text x="65.8344%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="65.5844%" y="165" width="0.1623%" height="15" fill="rgb(228,81,30)" fg:x="808" fg:w="2"/><text x="65.8344%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (2 samples, 0.16%)</title><rect x="65.5844%" y="149" width="0.1623%" height="15" fill="rgb(227,42,39)" fg:x="808" fg:w="2"/><text x="65.8344%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="65.6656%" y="133" width="0.0812%" height="15" fill="rgb(221,26,2)" fg:x="809" fg:w="1"/><text x="65.9156%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="65.5032%" y="181" width="0.3247%" height="15" fill="rgb(254,61,31)" fg:x="807" fg:w="4"/><text x="65.7532%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="65.7468%" y="165" width="0.0812%" height="15" fill="rgb(222,173,38)" fg:x="810" fg:w="1"/><text x="65.9968%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.7468%" y="149" width="0.0812%" height="15" fill="rgb(218,50,12)" fg:x="810" fg:w="1"/><text x="65.9968%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.7468%" y="133" width="0.0812%" height="15" fill="rgb(223,88,40)" fg:x="810" fg:w="1"/><text x="65.9968%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.7468%" y="117" width="0.0812%" height="15" fill="rgb(237,54,19)" fg:x="810" fg:w="1"/><text x="65.9968%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.65%)</title><rect x="65.4221%" y="213" width="0.6494%" height="15" fill="rgb(251,129,25)" fg:x="806" fg:w="8"/><text x="65.6721%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.65%)</title><rect x="65.4221%" y="197" width="0.6494%" height="15" fill="rgb(238,97,19)" fg:x="806" fg:w="8"/><text x="65.6721%" y="207.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="65.8279%" y="181" width="0.2435%" height="15" fill="rgb(240,169,18)" fg:x="811" fg:w="3"/><text x="66.0779%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (31 samples, 2.52%)</title><rect x="63.8799%" y="261" width="2.5162%" height="15" fill="rgb(230,187,49)" fg:x="787" fg:w="31"/><text x="64.1299%" y="271.50">&lt;r..</text></g><g><title>regex::builders::Builder::build_one_string (30 samples, 2.44%)</title><rect x="63.9610%" y="245" width="2.4351%" height="15" fill="rgb(209,44,26)" fg:x="788" fg:w="30"/><text x="64.2110%" y="255.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (29 samples, 2.35%)</title><rect x="64.0422%" y="229" width="2.3539%" height="15" fill="rgb(244,0,6)" fg:x="789" fg:w="29"/><text x="64.2922%" y="239.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="66.0714%" y="213" width="0.3247%" height="15" fill="rgb(248,18,21)" fg:x="814" fg:w="4"/><text x="66.3214%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="66.0714%" y="197" width="0.3247%" height="15" fill="rgb(245,180,19)" fg:x="814" fg:w="4"/><text x="66.3214%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="66.0714%" y="181" width="0.3247%" height="15" fill="rgb(252,118,36)" fg:x="814" fg:w="4"/><text x="66.3214%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="66.2338%" y="165" width="0.1623%" height="15" fill="rgb(210,224,19)" fg:x="816" fg:w="2"/><text x="66.4838%" y="175.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="66.3961%" y="261" width="0.0812%" height="15" fill="rgb(218,30,24)" fg:x="818" fg:w="1"/><text x="66.6461%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="66.3961%" y="245" width="0.0812%" height="15" fill="rgb(219,75,50)" fg:x="818" fg:w="1"/><text x="66.6461%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="66.3961%" y="229" width="0.0812%" height="15" fill="rgb(234,72,50)" fg:x="818" fg:w="1"/><text x="66.6461%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="66.3961%" y="213" width="0.0812%" height="15" fill="rgb(219,100,48)" fg:x="818" fg:w="1"/><text x="66.6461%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.5584%" y="245" width="0.0812%" height="15" fill="rgb(253,5,41)" fg:x="820" fg:w="1"/><text x="66.8084%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="66.6396%" y="213" width="0.0812%" height="15" fill="rgb(247,181,11)" fg:x="821" fg:w="1"/><text x="66.8896%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.6396%" y="197" width="0.0812%" height="15" fill="rgb(222,223,25)" fg:x="821" fg:w="1"/><text x="66.8896%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="66.4773%" y="261" width="0.3247%" height="15" fill="rgb(214,198,28)" fg:x="819" fg:w="4"/><text x="66.7273%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="66.6396%" y="245" width="0.1623%" height="15" fill="rgb(230,46,43)" fg:x="821" fg:w="2"/><text x="66.8896%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="66.6396%" y="229" width="0.1623%" height="15" fill="rgb(233,65,53)" fg:x="821" fg:w="2"/><text x="66.8896%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="66.7208%" y="213" width="0.0812%" height="15" fill="rgb(221,121,27)" fg:x="822" fg:w="1"/><text x="66.9708%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.7208%" y="197" width="0.0812%" height="15" fill="rgb(247,70,47)" fg:x="822" fg:w="1"/><text x="66.9708%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.7208%" y="181" width="0.0812%" height="15" fill="rgb(228,85,35)" fg:x="822" fg:w="1"/><text x="66.9708%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.0455%" y="181" width="0.0812%" height="15" fill="rgb(209,50,18)" fg:x="826" fg:w="1"/><text x="67.2955%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.0455%" y="165" width="0.0812%" height="15" fill="rgb(250,19,35)" fg:x="826" fg:w="1"/><text x="67.2955%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.0455%" y="149" width="0.0812%" height="15" fill="rgb(253,107,29)" fg:x="826" fg:w="1"/><text x="67.2955%" y="159.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="66.8831%" y="213" width="0.3247%" height="15" fill="rgb(252,179,29)" fg:x="824" fg:w="4"/><text x="67.1331%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="66.8831%" y="197" width="0.3247%" height="15" fill="rgb(238,194,6)" fg:x="824" fg:w="4"/><text x="67.1331%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="67.1266%" y="181" width="0.0812%" height="15" fill="rgb(238,164,29)" fg:x="827" fg:w="1"/><text x="67.3766%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (412 samples, 33.44%)</title><rect x="33.8474%" y="373" width="33.4416%" height="15" fill="rgb(224,25,9)" fg:x="417" fg:w="412"/><text x="34.0974%" y="383.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::m..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (383 samples, 31.09%)</title><rect x="36.2013%" y="357" width="31.0877%" height="15" fill="rgb(244,153,23)" fg:x="446" fg:w="383"/><text x="36.4513%" y="367.50">plugins_core::looking::model::Unqualified::qualify</text></g><g><title>indefinite::indefinite (383 samples, 31.09%)</title><rect x="36.2013%" y="341" width="31.0877%" height="15" fill="rgb(212,203,14)" fg:x="446" fg:w="383"/><text x="36.4513%" y="351.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (383 samples, 31.09%)</title><rect x="36.2013%" y="325" width="31.0877%" height="15" fill="rgb(220,164,20)" fg:x="446" fg:w="383"/><text x="36.4513%" y="335.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (383 samples, 31.09%)</title><rect x="36.2013%" y="309" width="31.0877%" height="15" fill="rgb(222,203,48)" fg:x="446" fg:w="383"/><text x="36.4513%" y="319.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (42 samples, 3.41%)</title><rect x="63.8799%" y="293" width="3.4091%" height="15" fill="rgb(215,159,22)" fg:x="787" fg:w="42"/><text x="64.1299%" y="303.50">ind..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (42 samples, 3.41%)</title><rect x="63.8799%" y="277" width="3.4091%" height="15" fill="rgb(216,183,47)" fg:x="787" fg:w="42"/><text x="64.1299%" y="287.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.49%)</title><rect x="66.8019%" y="261" width="0.4870%" height="15" fill="rgb(229,195,25)" fg:x="823" fg:w="6"/><text x="67.0519%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.49%)</title><rect x="66.8019%" y="245" width="0.4870%" height="15" fill="rgb(224,132,51)" fg:x="823" fg:w="6"/><text x="67.0519%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.49%)</title><rect x="66.8019%" y="229" width="0.4870%" height="15" fill="rgb(240,63,7)" fg:x="823" fg:w="6"/><text x="67.0519%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="67.2078%" y="213" width="0.0812%" height="15" fill="rgb(249,182,41)" fg:x="828" fg:w="1"/><text x="67.4578%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.4513%" y="293" width="0.0812%" height="15" fill="rgb(243,47,26)" fg:x="831" fg:w="1"/><text x="67.7013%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.4513%" y="277" width="0.0812%" height="15" fill="rgb(233,48,2)" fg:x="831" fg:w="1"/><text x="67.7013%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.4513%" y="261" width="0.0812%" height="15" fill="rgb(244,165,34)" fg:x="831" fg:w="1"/><text x="67.7013%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.4513%" y="245" width="0.0812%" height="15" fill="rgb(207,89,7)" fg:x="831" fg:w="1"/><text x="67.7013%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.4513%" y="229" width="0.0812%" height="15" fill="rgb(244,117,36)" fg:x="831" fg:w="1"/><text x="67.7013%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.4513%" y="213" width="0.0812%" height="15" fill="rgb(226,144,34)" fg:x="831" fg:w="1"/><text x="67.7013%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.4513%" y="197" width="0.0812%" height="15" fill="rgb(213,23,19)" fg:x="831" fg:w="1"/><text x="67.7013%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.4513%" y="181" width="0.0812%" height="15" fill="rgb(217,75,12)" fg:x="831" fg:w="1"/><text x="67.7013%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.4513%" y="165" width="0.0812%" height="15" fill="rgb(224,159,17)" fg:x="831" fg:w="1"/><text x="67.7013%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.4513%" y="149" width="0.0812%" height="15" fill="rgb(217,118,1)" fg:x="831" fg:w="1"/><text x="67.7013%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.4513%" y="133" width="0.0812%" height="15" fill="rgb(232,180,48)" fg:x="831" fg:w="1"/><text x="67.7013%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.4513%" y="117" width="0.0812%" height="15" fill="rgb(230,27,33)" fg:x="831" fg:w="1"/><text x="67.7013%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.4513%" y="309" width="0.1623%" height="15" fill="rgb(205,31,21)" fg:x="831" fg:w="2"/><text x="67.7013%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.5325%" y="293" width="0.0812%" height="15" fill="rgb(253,59,4)" fg:x="832" fg:w="1"/><text x="67.7825%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="67.3701%" y="357" width="0.3247%" height="15" fill="rgb(224,201,9)" fg:x="830" fg:w="4"/><text x="67.6201%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="67.4513%" y="341" width="0.2435%" height="15" fill="rgb(229,206,30)" fg:x="831" fg:w="3"/><text x="67.7013%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="67.4513%" y="325" width="0.2435%" height="15" fill="rgb(212,67,47)" fg:x="831" fg:w="3"/><text x="67.7013%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.6136%" y="309" width="0.0812%" height="15" fill="rgb(211,96,50)" fg:x="833" fg:w="1"/><text x="67.8636%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.6136%" y="293" width="0.0812%" height="15" fill="rgb(252,114,18)" fg:x="833" fg:w="1"/><text x="67.8636%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.6136%" y="277" width="0.0812%" height="15" fill="rgb(223,58,37)" fg:x="833" fg:w="1"/><text x="67.8636%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.6136%" y="261" width="0.0812%" height="15" fill="rgb(237,70,4)" fg:x="833" fg:w="1"/><text x="67.8636%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.6136%" y="245" width="0.0812%" height="15" fill="rgb(244,85,46)" fg:x="833" fg:w="1"/><text x="67.8636%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.6136%" y="229" width="0.0812%" height="15" fill="rgb(223,39,52)" fg:x="833" fg:w="1"/><text x="67.8636%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.6136%" y="213" width="0.0812%" height="15" fill="rgb(218,200,14)" fg:x="833" fg:w="1"/><text x="67.8636%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.6136%" y="197" width="0.0812%" height="15" fill="rgb(208,171,16)" fg:x="833" fg:w="1"/><text x="67.8636%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.6136%" y="181" width="0.0812%" height="15" fill="rgb(234,200,18)" fg:x="833" fg:w="1"/><text x="67.8636%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.6136%" y="165" width="0.0812%" height="15" fill="rgb(228,45,11)" fg:x="833" fg:w="1"/><text x="67.8636%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.6136%" y="149" width="0.0812%" height="15" fill="rgb(237,182,11)" fg:x="833" fg:w="1"/><text x="67.8636%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.6136%" y="133" width="0.0812%" height="15" fill="rgb(241,175,49)" fg:x="833" fg:w="1"/><text x="67.8636%" y="143.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.0195%" y="325" width="0.0812%" height="15" fill="rgb(247,38,35)" fg:x="838" fg:w="1"/><text x="68.2695%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.1006%" y="325" width="0.0812%" height="15" fill="rgb(228,39,49)" fg:x="839" fg:w="1"/><text x="68.3506%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.1006%" y="309" width="0.0812%" height="15" fill="rgb(226,101,26)" fg:x="839" fg:w="1"/><text x="68.3506%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.2630%" y="229" width="0.0812%" height="15" fill="rgb(206,141,19)" fg:x="841" fg:w="1"/><text x="68.5130%" y="239.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.2630%" y="277" width="0.1623%" height="15" fill="rgb(211,200,13)" fg:x="841" fg:w="2"/><text x="68.5130%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.2630%" y="261" width="0.1623%" height="15" fill="rgb(241,121,6)" fg:x="841" fg:w="2"/><text x="68.5130%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.2630%" y="245" width="0.1623%" height="15" fill="rgb(234,221,29)" fg:x="841" fg:w="2"/><text x="68.5130%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.3442%" y="229" width="0.0812%" height="15" fill="rgb(229,136,5)" fg:x="842" fg:w="1"/><text x="68.5942%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.3442%" y="213" width="0.0812%" height="15" fill="rgb(238,36,11)" fg:x="842" fg:w="1"/><text x="68.5942%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.3442%" y="197" width="0.0812%" height="15" fill="rgb(251,55,41)" fg:x="842" fg:w="1"/><text x="68.5942%" y="207.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.3442%" y="181" width="0.0812%" height="15" fill="rgb(242,34,40)" fg:x="842" fg:w="1"/><text x="68.5942%" y="191.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (15 samples, 1.22%)</title><rect x="67.2890%" y="373" width="1.2175%" height="15" fill="rgb(215,42,17)" fg:x="829" fg:w="15"/><text x="67.5390%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (10 samples, 0.81%)</title><rect x="67.6948%" y="357" width="0.8117%" height="15" fill="rgb(207,44,46)" fg:x="834" fg:w="10"/><text x="67.9448%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (10 samples, 0.81%)</title><rect x="67.6948%" y="341" width="0.8117%" height="15" fill="rgb(211,206,28)" fg:x="834" fg:w="10"/><text x="67.9448%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (4 samples, 0.32%)</title><rect x="68.1818%" y="325" width="0.3247%" height="15" fill="rgb(237,167,16)" fg:x="840" fg:w="4"/><text x="68.4318%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (4 samples, 0.32%)</title><rect x="68.1818%" y="309" width="0.3247%" height="15" fill="rgb(233,66,6)" fg:x="840" fg:w="4"/><text x="68.4318%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (4 samples, 0.32%)</title><rect x="68.1818%" y="293" width="0.3247%" height="15" fill="rgb(246,123,29)" fg:x="840" fg:w="4"/><text x="68.4318%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.4253%" y="277" width="0.0812%" height="15" fill="rgb(209,62,40)" fg:x="843" fg:w="1"/><text x="68.6753%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.4253%" y="261" width="0.0812%" height="15" fill="rgb(218,4,25)" fg:x="843" fg:w="1"/><text x="68.6753%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.5065%" y="261" width="0.0812%" height="15" fill="rgb(253,91,49)" fg:x="844" fg:w="1"/><text x="68.7565%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.5065%" y="245" width="0.0812%" height="15" fill="rgb(228,155,29)" fg:x="844" fg:w="1"/><text x="68.7565%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.5065%" y="229" width="0.0812%" height="15" fill="rgb(243,57,37)" fg:x="844" fg:w="1"/><text x="68.7565%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.5065%" y="213" width="0.0812%" height="15" fill="rgb(244,167,17)" fg:x="844" fg:w="1"/><text x="68.7565%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.5065%" y="197" width="0.0812%" height="15" fill="rgb(207,181,38)" fg:x="844" fg:w="1"/><text x="68.7565%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.5065%" y="181" width="0.0812%" height="15" fill="rgb(211,8,23)" fg:x="844" fg:w="1"/><text x="68.7565%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.5065%" y="165" width="0.0812%" height="15" fill="rgb(235,11,44)" fg:x="844" fg:w="1"/><text x="68.7565%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.5065%" y="149" width="0.0812%" height="15" fill="rgb(248,18,52)" fg:x="844" fg:w="1"/><text x="68.7565%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.5065%" y="133" width="0.0812%" height="15" fill="rgb(208,4,7)" fg:x="844" fg:w="1"/><text x="68.7565%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.5065%" y="117" width="0.0812%" height="15" fill="rgb(240,17,39)" fg:x="844" fg:w="1"/><text x="68.7565%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.5065%" y="101" width="0.0812%" height="15" fill="rgb(207,170,3)" fg:x="844" fg:w="1"/><text x="68.7565%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.5065%" y="85" width="0.0812%" height="15" fill="rgb(236,100,52)" fg:x="844" fg:w="1"/><text x="68.7565%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.5065%" y="69" width="0.0812%" height="15" fill="rgb(246,78,51)" fg:x="844" fg:w="1"/><text x="68.7565%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.5065%" y="53" width="0.0812%" height="15" fill="rgb(211,17,15)" fg:x="844" fg:w="1"/><text x="68.7565%" y="63.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.5065%" y="293" width="0.1623%" height="15" fill="rgb(209,59,46)" fg:x="844" fg:w="2"/><text x="68.7565%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.5065%" y="277" width="0.1623%" height="15" fill="rgb(210,92,25)" fg:x="844" fg:w="2"/><text x="68.7565%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.5877%" y="261" width="0.0812%" height="15" fill="rgb(238,174,52)" fg:x="845" fg:w="1"/><text x="68.8377%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.5877%" y="245" width="0.0812%" height="15" fill="rgb(230,73,7)" fg:x="845" fg:w="1"/><text x="68.8377%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.5877%" y="229" width="0.0812%" height="15" fill="rgb(243,124,40)" fg:x="845" fg:w="1"/><text x="68.8377%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.5877%" y="213" width="0.0812%" height="15" fill="rgb(244,170,11)" fg:x="845" fg:w="1"/><text x="68.8377%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.5877%" y="197" width="0.0812%" height="15" fill="rgb(207,114,54)" fg:x="845" fg:w="1"/><text x="68.8377%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.5877%" y="181" width="0.0812%" height="15" fill="rgb(205,42,20)" fg:x="845" fg:w="1"/><text x="68.8377%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.5877%" y="165" width="0.0812%" height="15" fill="rgb(230,30,28)" fg:x="845" fg:w="1"/><text x="68.8377%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.5877%" y="149" width="0.0812%" height="15" fill="rgb(205,73,54)" fg:x="845" fg:w="1"/><text x="68.8377%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.5877%" y="133" width="0.0812%" height="15" fill="rgb(254,227,23)" fg:x="845" fg:w="1"/><text x="68.8377%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.5877%" y="117" width="0.0812%" height="15" fill="rgb(228,202,34)" fg:x="845" fg:w="1"/><text x="68.8377%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.5877%" y="101" width="0.0812%" height="15" fill="rgb(222,225,37)" fg:x="845" fg:w="1"/><text x="68.8377%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.5877%" y="85" width="0.0812%" height="15" fill="rgb(221,14,54)" fg:x="845" fg:w="1"/><text x="68.8377%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.5877%" y="69" width="0.0812%" height="15" fill="rgb(254,102,2)" fg:x="845" fg:w="1"/><text x="68.8377%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.5877%" y="53" width="0.0812%" height="15" fill="rgb(232,104,17)" fg:x="845" fg:w="1"/><text x="68.8377%" y="63.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="68.5065%" y="309" width="0.2435%" height="15" fill="rgb(250,220,14)" fg:x="844" fg:w="3"/><text x="68.7565%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.6688%" y="293" width="0.0812%" height="15" fill="rgb(241,158,9)" fg:x="846" fg:w="1"/><text x="68.9188%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.6688%" y="277" width="0.0812%" height="15" fill="rgb(246,9,43)" fg:x="846" fg:w="1"/><text x="68.9188%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.6688%" y="261" width="0.0812%" height="15" fill="rgb(206,73,33)" fg:x="846" fg:w="1"/><text x="68.9188%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.6688%" y="245" width="0.0812%" height="15" fill="rgb(222,79,8)" fg:x="846" fg:w="1"/><text x="68.9188%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.6688%" y="229" width="0.0812%" height="15" fill="rgb(234,8,54)" fg:x="846" fg:w="1"/><text x="68.9188%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.6688%" y="213" width="0.0812%" height="15" fill="rgb(209,134,38)" fg:x="846" fg:w="1"/><text x="68.9188%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.6688%" y="197" width="0.0812%" height="15" fill="rgb(230,127,29)" fg:x="846" fg:w="1"/><text x="68.9188%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.6688%" y="181" width="0.0812%" height="15" fill="rgb(242,44,41)" fg:x="846" fg:w="1"/><text x="68.9188%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.6688%" y="165" width="0.0812%" height="15" fill="rgb(222,56,43)" fg:x="846" fg:w="1"/><text x="68.9188%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.6688%" y="149" width="0.0812%" height="15" fill="rgb(238,39,47)" fg:x="846" fg:w="1"/><text x="68.9188%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.6688%" y="133" width="0.0812%" height="15" fill="rgb(226,79,43)" fg:x="846" fg:w="1"/><text x="68.9188%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.6688%" y="117" width="0.0812%" height="15" fill="rgb(242,105,53)" fg:x="846" fg:w="1"/><text x="68.9188%" y="127.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.7500%" y="309" width="0.0812%" height="15" fill="rgb(251,132,46)" fg:x="847" fg:w="1"/><text x="69.0000%" y="319.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.7500%" y="293" width="0.0812%" height="15" fill="rgb(231,77,14)" fg:x="847" fg:w="1"/><text x="69.0000%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="68.7500%" y="277" width="0.0812%" height="15" fill="rgb(240,135,9)" fg:x="847" fg:w="1"/><text x="69.0000%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.7500%" y="261" width="0.0812%" height="15" fill="rgb(248,109,14)" fg:x="847" fg:w="1"/><text x="69.0000%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.7500%" y="245" width="0.0812%" height="15" fill="rgb(227,146,52)" fg:x="847" fg:w="1"/><text x="69.0000%" y="255.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.7500%" y="229" width="0.0812%" height="15" fill="rgb(232,54,3)" fg:x="847" fg:w="1"/><text x="69.0000%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.7500%" y="213" width="0.0812%" height="15" fill="rgb(229,201,43)" fg:x="847" fg:w="1"/><text x="69.0000%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.7500%" y="197" width="0.0812%" height="15" fill="rgb(252,161,33)" fg:x="847" fg:w="1"/><text x="69.0000%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.7500%" y="181" width="0.0812%" height="15" fill="rgb(226,146,40)" fg:x="847" fg:w="1"/><text x="69.0000%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.8312%" y="213" width="0.0812%" height="15" fill="rgb(219,47,25)" fg:x="848" fg:w="1"/><text x="69.0812%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.8312%" y="197" width="0.0812%" height="15" fill="rgb(250,135,13)" fg:x="848" fg:w="1"/><text x="69.0812%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.8312%" y="181" width="0.0812%" height="15" fill="rgb(219,229,18)" fg:x="848" fg:w="1"/><text x="69.0812%" y="191.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.8312%" y="165" width="0.0812%" height="15" fill="rgb(217,152,27)" fg:x="848" fg:w="1"/><text x="69.0812%" y="175.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="68.9123%" y="165" width="0.1623%" height="15" fill="rgb(225,71,47)" fg:x="849" fg:w="2"/><text x="69.1623%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="68.9123%" y="149" width="0.1623%" height="15" fill="rgb(220,139,14)" fg:x="849" fg:w="2"/><text x="69.1623%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.9123%" y="133" width="0.1623%" height="15" fill="rgb(247,54,32)" fg:x="849" fg:w="2"/><text x="69.1623%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.9123%" y="117" width="0.1623%" height="15" fill="rgb(252,131,39)" fg:x="849" fg:w="2"/><text x="69.1623%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.9935%" y="101" width="0.0812%" height="15" fill="rgb(210,108,39)" fg:x="850" fg:w="1"/><text x="69.2435%" y="111.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.0747%" y="133" width="0.0812%" height="15" fill="rgb(205,23,29)" fg:x="851" fg:w="1"/><text x="69.3247%" y="143.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.0747%" y="117" width="0.0812%" height="15" fill="rgb(246,139,46)" fg:x="851" fg:w="1"/><text x="69.3247%" y="127.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.0747%" y="101" width="0.0812%" height="15" fill="rgb(250,81,26)" fg:x="851" fg:w="1"/><text x="69.3247%" y="111.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="69.1558%" y="133" width="0.0812%" height="15" fill="rgb(214,104,7)" fg:x="852" fg:w="1"/><text x="69.4058%" y="143.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1558%" y="117" width="0.0812%" height="15" fill="rgb(233,189,8)" fg:x="852" fg:w="1"/><text x="69.4058%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.1558%" y="101" width="0.0812%" height="15" fill="rgb(228,141,17)" fg:x="852" fg:w="1"/><text x="69.4058%" y="111.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.49%)</title><rect x="68.8312%" y="309" width="0.4870%" height="15" fill="rgb(247,157,1)" fg:x="848" fg:w="6"/><text x="69.0812%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.49%)</title><rect x="68.8312%" y="293" width="0.4870%" height="15" fill="rgb(249,225,5)" fg:x="848" fg:w="6"/><text x="69.0812%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="68.8312%" y="277" width="0.4870%" height="15" fill="rgb(242,55,13)" fg:x="848" fg:w="6"/><text x="69.0812%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.49%)</title><rect x="68.8312%" y="261" width="0.4870%" height="15" fill="rgb(230,49,50)" fg:x="848" fg:w="6"/><text x="69.0812%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="68.8312%" y="245" width="0.4870%" height="15" fill="rgb(241,111,38)" fg:x="848" fg:w="6"/><text x="69.0812%" y="255.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.49%)</title><rect x="68.8312%" y="229" width="0.4870%" height="15" fill="rgb(252,155,4)" fg:x="848" fg:w="6"/><text x="69.0812%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="68.9123%" y="213" width="0.4058%" height="15" fill="rgb(212,69,32)" fg:x="849" fg:w="5"/><text x="69.1623%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="68.9123%" y="197" width="0.4058%" height="15" fill="rgb(243,107,47)" fg:x="849" fg:w="5"/><text x="69.1623%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (5 samples, 0.41%)</title><rect x="68.9123%" y="181" width="0.4058%" height="15" fill="rgb(247,130,12)" fg:x="849" fg:w="5"/><text x="69.1623%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="69.0747%" y="165" width="0.2435%" height="15" fill="rgb(233,74,16)" fg:x="851" fg:w="3"/><text x="69.3247%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="69.0747%" y="149" width="0.2435%" height="15" fill="rgb(208,58,18)" fg:x="851" fg:w="3"/><text x="69.3247%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.2370%" y="133" width="0.0812%" height="15" fill="rgb(242,225,1)" fg:x="853" fg:w="1"/><text x="69.4870%" y="143.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (11 samples, 0.89%)</title><rect x="68.5065%" y="373" width="0.8929%" height="15" fill="rgb(249,39,40)" fg:x="844" fg:w="11"/><text x="68.7565%" y="383.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (11 samples, 0.89%)</title><rect x="68.5065%" y="357" width="0.8929%" height="15" fill="rgb(207,72,44)" fg:x="844" fg:w="11"/><text x="68.7565%" y="367.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.89%)</title><rect x="68.5065%" y="341" width="0.8929%" height="15" fill="rgb(215,193,12)" fg:x="844" fg:w="11"/><text x="68.7565%" y="351.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.89%)</title><rect x="68.5065%" y="325" width="0.8929%" height="15" fill="rgb(248,41,39)" fg:x="844" fg:w="11"/><text x="68.7565%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="69.3182%" y="309" width="0.0812%" height="15" fill="rgb(253,85,4)" fg:x="854" fg:w="1"/><text x="69.5682%" y="319.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="69.3182%" y="293" width="0.0812%" height="15" fill="rgb(243,70,31)" fg:x="854" fg:w="1"/><text x="69.5682%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.3182%" y="277" width="0.0812%" height="15" fill="rgb(253,195,26)" fg:x="854" fg:w="1"/><text x="69.5682%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.3182%" y="261" width="0.0812%" height="15" fill="rgb(243,42,11)" fg:x="854" fg:w="1"/><text x="69.5682%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.3182%" y="245" width="0.0812%" height="15" fill="rgb(239,66,17)" fg:x="854" fg:w="1"/><text x="69.5682%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.3182%" y="229" width="0.0812%" height="15" fill="rgb(217,132,21)" fg:x="854" fg:w="1"/><text x="69.5682%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.3182%" y="213" width="0.0812%" height="15" fill="rgb(252,202,21)" fg:x="854" fg:w="1"/><text x="69.5682%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.3182%" y="197" width="0.0812%" height="15" fill="rgb(233,98,36)" fg:x="854" fg:w="1"/><text x="69.5682%" y="207.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.3182%" y="181" width="0.0812%" height="15" fill="rgb(216,153,54)" fg:x="854" fg:w="1"/><text x="69.5682%" y="191.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="69.3182%" y="165" width="0.0812%" height="15" fill="rgb(250,99,7)" fg:x="854" fg:w="1"/><text x="69.5682%" y="175.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (470 samples, 38.15%)</title><rect x="31.3312%" y="597" width="38.1494%" height="15" fill="rgb(207,56,50)" fg:x="386" fg:w="470"/><text x="31.5812%" y="607.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perf..</text></g><g><title>kernel::plugins::mw::apply_middleware (469 samples, 38.07%)</title><rect x="31.4123%" y="581" width="38.0682%" height="15" fill="rgb(244,61,34)" fg:x="387" fg:w="469"/><text x="31.6623%" y="591.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (469 samples, 38.07%)</title><rect x="31.4123%" y="565" width="38.0682%" height="15" fill="rgb(241,50,38)" fg:x="387" fg:w="469"/><text x="31.6623%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (469 samples, 38.07%)</title><rect x="31.4123%" y="549" width="38.0682%" height="15" fill="rgb(212,166,30)" fg:x="387" fg:w="469"/><text x="31.6623%" y="559.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plug..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (451 samples, 36.61%)</title><rect x="32.8734%" y="533" width="36.6071%" height="15" fill="rgb(249,127,32)" fg:x="405" fg:w="451"/><text x="33.1234%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (450 samples, 36.53%)</title><rect x="32.9545%" y="517" width="36.5260%" height="15" fill="rgb(209,103,0)" fg:x="406" fg:w="450"/><text x="33.2045%" y="527.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (450 samples, 36.53%)</title><rect x="32.9545%" y="501" width="36.5260%" height="15" fill="rgb(238,209,51)" fg:x="406" fg:w="450"/><text x="33.2045%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (450 samples, 36.53%)</title><rect x="32.9545%" y="485" width="36.5260%" height="15" fill="rgb(237,56,23)" fg:x="406" fg:w="450"/><text x="33.2045%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (450 samples, 36.53%)</title><rect x="32.9545%" y="469" width="36.5260%" height="15" fill="rgb(215,153,46)" fg:x="406" fg:w="450"/><text x="33.2045%" y="479.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (450 samples, 36.53%)</title><rect x="32.9545%" y="453" width="36.5260%" height="15" fill="rgb(224,49,31)" fg:x="406" fg:w="450"/><text x="33.2045%" y="463.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (450 samples, 36.53%)</title><rect x="32.9545%" y="437" width="36.5260%" height="15" fill="rgb(250,18,42)" fg:x="406" fg:w="450"/><text x="33.2045%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (450 samples, 36.53%)</title><rect x="32.9545%" y="421" width="36.5260%" height="15" fill="rgb(215,176,39)" fg:x="406" fg:w="450"/><text x="33.2045%" y="431.50">&lt;engine::session::state::State as kernel::actions::Performe..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (449 samples, 36.44%)</title><rect x="33.0357%" y="405" width="36.4448%" height="15" fill="rgb(223,77,29)" fg:x="407" fg:w="449"/><text x="33.2857%" y="415.50">&lt;plugins_core::looking::actions::LookAction as kernel::acti..</text></g><g><title>plugins_core::looking::model::new_area_observation (440 samples, 35.71%)</title><rect x="33.7662%" y="389" width="35.7143%" height="15" fill="rgb(234,94,52)" fg:x="416" fg:w="440"/><text x="34.0162%" y="399.50">plugins_core::looking::model::new_area_observation</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="69.3994%" y="373" width="0.0812%" height="15" fill="rgb(220,154,50)" fg:x="855" fg:w="1"/><text x="69.6494%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.3994%" y="357" width="0.0812%" height="15" fill="rgb(212,11,10)" fg:x="855" fg:w="1"/><text x="69.6494%" y="367.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="69.4805%" y="597" width="0.0812%" height="15" fill="rgb(205,166,19)" fg:x="856" fg:w="1"/><text x="69.7305%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="69.4805%" y="581" width="0.0812%" height="15" fill="rgb(244,198,16)" fg:x="856" fg:w="1"/><text x="69.7305%" y="591.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="69.4805%" y="565" width="0.0812%" height="15" fill="rgb(219,69,12)" fg:x="856" fg:w="1"/><text x="69.7305%" y="575.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="69.4805%" y="549" width="0.0812%" height="15" fill="rgb(245,30,7)" fg:x="856" fg:w="1"/><text x="69.7305%" y="559.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="69.4805%" y="533" width="0.0812%" height="15" fill="rgb(218,221,48)" fg:x="856" fg:w="1"/><text x="69.7305%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (2 samples, 0.16%)</title><rect x="69.5617%" y="581" width="0.1623%" height="15" fill="rgb(216,66,15)" fg:x="857" fg:w="2"/><text x="69.8117%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.6429%" y="565" width="0.0812%" height="15" fill="rgb(226,122,50)" fg:x="858" fg:w="1"/><text x="69.8929%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.6429%" y="549" width="0.0812%" height="15" fill="rgb(239,156,16)" fg:x="858" fg:w="1"/><text x="69.8929%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.6429%" y="533" width="0.0812%" height="15" fill="rgb(224,27,38)" fg:x="858" fg:w="1"/><text x="69.8929%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.6429%" y="517" width="0.0812%" height="15" fill="rgb(224,39,27)" fg:x="858" fg:w="1"/><text x="69.8929%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.6429%" y="501" width="0.0812%" height="15" fill="rgb(215,92,29)" fg:x="858" fg:w="1"/><text x="69.8929%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.6429%" y="485" width="0.0812%" height="15" fill="rgb(207,159,16)" fg:x="858" fg:w="1"/><text x="69.8929%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.6429%" y="469" width="0.0812%" height="15" fill="rgb(238,163,47)" fg:x="858" fg:w="1"/><text x="69.8929%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.6429%" y="453" width="0.0812%" height="15" fill="rgb(219,91,49)" fg:x="858" fg:w="1"/><text x="69.8929%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.6429%" y="437" width="0.0812%" height="15" fill="rgb(227,167,31)" fg:x="858" fg:w="1"/><text x="69.8929%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.6429%" y="421" width="0.0812%" height="15" fill="rgb(234,80,54)" fg:x="858" fg:w="1"/><text x="69.8929%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.6429%" y="405" width="0.0812%" height="15" fill="rgb(212,114,2)" fg:x="858" fg:w="1"/><text x="69.8929%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.6429%" y="389" width="0.0812%" height="15" fill="rgb(234,50,24)" fg:x="858" fg:w="1"/><text x="69.8929%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8052%" y="437" width="0.0812%" height="15" fill="rgb(221,68,8)" fg:x="860" fg:w="1"/><text x="70.0552%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8052%" y="421" width="0.0812%" height="15" fill="rgb(254,180,31)" fg:x="860" fg:w="1"/><text x="70.0552%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.8052%" y="405" width="0.0812%" height="15" fill="rgb(247,130,50)" fg:x="860" fg:w="1"/><text x="70.0552%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.8052%" y="389" width="0.0812%" height="15" fill="rgb(211,109,4)" fg:x="860" fg:w="1"/><text x="70.0552%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.8052%" y="373" width="0.0812%" height="15" fill="rgb(238,50,21)" fg:x="860" fg:w="1"/><text x="70.0552%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="69.8052%" y="357" width="0.0812%" height="15" fill="rgb(225,57,45)" fg:x="860" fg:w="1"/><text x="70.0552%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="69.8052%" y="341" width="0.0812%" height="15" fill="rgb(209,196,50)" fg:x="860" fg:w="1"/><text x="70.0552%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="69.7240%" y="453" width="0.2435%" height="15" fill="rgb(242,140,13)" fg:x="859" fg:w="3"/><text x="69.9740%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.8864%" y="437" width="0.0812%" height="15" fill="rgb(217,111,7)" fg:x="861" fg:w="1"/><text x="70.1364%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="69.7240%" y="469" width="0.3247%" height="15" fill="rgb(253,193,51)" fg:x="859" fg:w="4"/><text x="69.9740%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.9675%" y="453" width="0.0812%" height="15" fill="rgb(252,70,29)" fg:x="862" fg:w="1"/><text x="70.2175%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.41%)</title><rect x="69.7240%" y="485" width="0.4058%" height="15" fill="rgb(232,127,12)" fg:x="859" fg:w="5"/><text x="69.9740%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.0487%" y="469" width="0.0812%" height="15" fill="rgb(211,180,21)" fg:x="863" fg:w="1"/><text x="70.2987%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.49%)</title><rect x="69.7240%" y="501" width="0.4870%" height="15" fill="rgb(229,72,13)" fg:x="859" fg:w="6"/><text x="69.9740%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1299%" y="485" width="0.0812%" height="15" fill="rgb(240,211,49)" fg:x="864" fg:w="1"/><text x="70.3799%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2922%" y="453" width="0.0812%" height="15" fill="rgb(219,149,40)" fg:x="866" fg:w="1"/><text x="70.5422%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="70.3734%" y="309" width="0.0812%" height="15" fill="rgb(210,127,46)" fg:x="867" fg:w="1"/><text x="70.6234%" y="319.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="70.3734%" y="293" width="0.0812%" height="15" fill="rgb(220,106,7)" fg:x="867" fg:w="1"/><text x="70.6234%" y="303.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="70.3734%" y="277" width="0.0812%" height="15" fill="rgb(249,31,22)" fg:x="867" fg:w="1"/><text x="70.6234%" y="287.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="70.3734%" y="261" width="0.0812%" height="15" fill="rgb(253,1,49)" fg:x="867" fg:w="1"/><text x="70.6234%" y="271.50"></text></g><g><title>&lt;serde::de::Unexpected as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="70.3734%" y="245" width="0.0812%" height="15" fill="rgb(227,144,33)" fg:x="867" fg:w="1"/><text x="70.6234%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="70.3734%" y="453" width="0.1623%" height="15" fill="rgb(249,163,44)" fg:x="867" fg:w="2"/><text x="70.6234%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="70.3734%" y="437" width="0.1623%" height="15" fill="rgb(234,15,39)" fg:x="867" fg:w="2"/><text x="70.6234%" y="447.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="70.3734%" y="421" width="0.1623%" height="15" fill="rgb(207,66,16)" fg:x="867" fg:w="2"/><text x="70.6234%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.3734%" y="405" width="0.1623%" height="15" fill="rgb(233,112,24)" fg:x="867" fg:w="2"/><text x="70.6234%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.3734%" y="389" width="0.1623%" height="15" fill="rgb(230,90,22)" fg:x="867" fg:w="2"/><text x="70.6234%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (2 samples, 0.16%)</title><rect x="70.3734%" y="373" width="0.1623%" height="15" fill="rgb(229,61,13)" fg:x="867" fg:w="2"/><text x="70.6234%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (2 samples, 0.16%)</title><rect x="70.3734%" y="357" width="0.1623%" height="15" fill="rgb(225,57,24)" fg:x="867" fg:w="2"/><text x="70.6234%" y="367.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (2 samples, 0.16%)</title><rect x="70.3734%" y="341" width="0.1623%" height="15" fill="rgb(208,169,48)" fg:x="867" fg:w="2"/><text x="70.6234%" y="351.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (2 samples, 0.16%)</title><rect x="70.3734%" y="325" width="0.1623%" height="15" fill="rgb(244,218,51)" fg:x="867" fg:w="2"/><text x="70.6234%" y="335.50"></text></g><g><title>serde_json::error::make_error (1 samples, 0.08%)</title><rect x="70.4545%" y="309" width="0.0812%" height="15" fill="rgb(214,148,10)" fg:x="868" fg:w="1"/><text x="70.7045%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.5357%" y="421" width="0.0812%" height="15" fill="rgb(225,174,27)" fg:x="869" fg:w="1"/><text x="70.7857%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.5357%" y="405" width="0.0812%" height="15" fill="rgb(230,96,26)" fg:x="869" fg:w="1"/><text x="70.7857%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.49%)</title><rect x="70.2110%" y="501" width="0.4870%" height="15" fill="rgb(232,10,30)" fg:x="865" fg:w="6"/><text x="70.4610%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.49%)</title><rect x="70.2110%" y="485" width="0.4870%" height="15" fill="rgb(222,8,50)" fg:x="865" fg:w="6"/><text x="70.4610%" y="495.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.49%)</title><rect x="70.2110%" y="469" width="0.4870%" height="15" fill="rgb(213,81,27)" fg:x="865" fg:w="6"/><text x="70.4610%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.5357%" y="453" width="0.1623%" height="15" fill="rgb(245,50,10)" fg:x="869" fg:w="2"/><text x="70.7857%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.5357%" y="437" width="0.1623%" height="15" fill="rgb(216,100,18)" fg:x="869" fg:w="2"/><text x="70.7857%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.6169%" y="421" width="0.0812%" height="15" fill="rgb(236,147,54)" fg:x="870" fg:w="1"/><text x="70.8669%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="70.6169%" y="405" width="0.0812%" height="15" fill="rgb(205,143,26)" fg:x="870" fg:w="1"/><text x="70.8669%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.6169%" y="389" width="0.0812%" height="15" fill="rgb(236,26,9)" fg:x="870" fg:w="1"/><text x="70.8669%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.6981%" y="469" width="0.0812%" height="15" fill="rgb(221,165,53)" fg:x="871" fg:w="1"/><text x="70.9481%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.6981%" y="453" width="0.0812%" height="15" fill="rgb(214,110,17)" fg:x="871" fg:w="1"/><text x="70.9481%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 1.14%)</title><rect x="69.7240%" y="549" width="1.1364%" height="15" fill="rgb(237,197,12)" fg:x="859" fg:w="14"/><text x="69.9740%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 1.14%)</title><rect x="69.7240%" y="533" width="1.1364%" height="15" fill="rgb(205,84,17)" fg:x="859" fg:w="14"/><text x="69.9740%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (14 samples, 1.14%)</title><rect x="69.7240%" y="517" width="1.1364%" height="15" fill="rgb(237,18,45)" fg:x="859" fg:w="14"/><text x="69.9740%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.6981%" y="501" width="0.1623%" height="15" fill="rgb(221,87,14)" fg:x="871" fg:w="2"/><text x="70.9481%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.6981%" y="485" width="0.1623%" height="15" fill="rgb(238,186,15)" fg:x="871" fg:w="2"/><text x="70.9481%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.7792%" y="469" width="0.0812%" height="15" fill="rgb(208,115,11)" fg:x="872" fg:w="1"/><text x="71.0292%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="70.7792%" y="453" width="0.0812%" height="15" fill="rgb(254,175,0)" fg:x="872" fg:w="1"/><text x="71.0292%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.7792%" y="437" width="0.0812%" height="15" fill="rgb(227,24,42)" fg:x="872" fg:w="1"/><text x="71.0292%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.7792%" y="421" width="0.0812%" height="15" fill="rgb(223,211,37)" fg:x="872" fg:w="1"/><text x="71.0292%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.9416%" y="485" width="0.0812%" height="15" fill="rgb(235,49,27)" fg:x="874" fg:w="1"/><text x="71.1916%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.9416%" y="469" width="0.0812%" height="15" fill="rgb(254,97,51)" fg:x="874" fg:w="1"/><text x="71.1916%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.9416%" y="517" width="0.1623%" height="15" fill="rgb(249,51,40)" fg:x="874" fg:w="2"/><text x="71.1916%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="70.9416%" y="501" width="0.1623%" height="15" fill="rgb(210,128,45)" fg:x="874" fg:w="2"/><text x="71.1916%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.0227%" y="485" width="0.0812%" height="15" fill="rgb(224,137,50)" fg:x="875" fg:w="1"/><text x="71.2727%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.0227%" y="469" width="0.0812%" height="15" fill="rgb(242,15,9)" fg:x="875" fg:w="1"/><text x="71.2727%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="71.0227%" y="453" width="0.0812%" height="15" fill="rgb(233,187,41)" fg:x="875" fg:w="1"/><text x="71.2727%" y="463.50"></text></g><g><title>engine::session::internal::Added::find_refs (18 samples, 1.46%)</title><rect x="69.7240%" y="581" width="1.4610%" height="15" fill="rgb(227,2,29)" fg:x="859" fg:w="18"/><text x="69.9740%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (18 samples, 1.46%)</title><rect x="69.7240%" y="565" width="1.4610%" height="15" fill="rgb(222,70,3)" fg:x="859" fg:w="18"/><text x="69.9740%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="70.8604%" y="549" width="0.3247%" height="15" fill="rgb(213,11,42)" fg:x="873" fg:w="4"/><text x="71.1104%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="70.8604%" y="533" width="0.3247%" height="15" fill="rgb(225,150,9)" fg:x="873" fg:w="4"/><text x="71.1104%" y="543.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="71.1039%" y="517" width="0.0812%" height="15" fill="rgb(230,162,45)" fg:x="876" fg:w="1"/><text x="71.3539%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.1851%" y="549" width="0.0812%" height="15" fill="rgb(222,14,52)" fg:x="877" fg:w="1"/><text x="71.4351%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1851%" y="533" width="0.0812%" height="15" fill="rgb(254,198,14)" fg:x="877" fg:w="1"/><text x="71.4351%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.1851%" y="565" width="0.1623%" height="15" fill="rgb(220,217,30)" fg:x="877" fg:w="2"/><text x="71.4351%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2662%" y="549" width="0.0812%" height="15" fill="rgb(215,146,41)" fg:x="878" fg:w="1"/><text x="71.5162%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2662%" y="533" width="0.0812%" height="15" fill="rgb(217,27,36)" fg:x="878" fg:w="1"/><text x="71.5162%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.2662%" y="517" width="0.0812%" height="15" fill="rgb(219,218,39)" fg:x="878" fg:w="1"/><text x="71.5162%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.2662%" y="501" width="0.0812%" height="15" fill="rgb(219,4,42)" fg:x="878" fg:w="1"/><text x="71.5162%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.2662%" y="485" width="0.0812%" height="15" fill="rgb(249,119,36)" fg:x="878" fg:w="1"/><text x="71.5162%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.2662%" y="469" width="0.0812%" height="15" fill="rgb(209,23,33)" fg:x="878" fg:w="1"/><text x="71.5162%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.2662%" y="453" width="0.0812%" height="15" fill="rgb(211,10,0)" fg:x="878" fg:w="1"/><text x="71.5162%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.2662%" y="437" width="0.0812%" height="15" fill="rgb(208,99,37)" fg:x="878" fg:w="1"/><text x="71.5162%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.2662%" y="421" width="0.0812%" height="15" fill="rgb(213,132,31)" fg:x="878" fg:w="1"/><text x="71.5162%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.2662%" y="405" width="0.0812%" height="15" fill="rgb(243,129,40)" fg:x="878" fg:w="1"/><text x="71.5162%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.2662%" y="389" width="0.0812%" height="15" fill="rgb(210,66,33)" fg:x="878" fg:w="1"/><text x="71.5162%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2662%" y="373" width="0.0812%" height="15" fill="rgb(209,189,4)" fg:x="878" fg:w="1"/><text x="71.5162%" y="383.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="71.3474%" y="565" width="0.0812%" height="15" fill="rgb(214,107,37)" fg:x="879" fg:w="1"/><text x="71.5974%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.4286%" y="485" width="0.0812%" height="15" fill="rgb(245,88,54)" fg:x="880" fg:w="1"/><text x="71.6786%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="71.5097%" y="437" width="0.1623%" height="15" fill="rgb(205,146,20)" fg:x="881" fg:w="2"/><text x="71.7597%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.5097%" y="421" width="0.1623%" height="15" fill="rgb(220,161,25)" fg:x="881" fg:w="2"/><text x="71.7597%" y="431.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="71.5097%" y="405" width="0.1623%" height="15" fill="rgb(215,152,15)" fg:x="881" fg:w="2"/><text x="71.7597%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.5909%" y="389" width="0.0812%" height="15" fill="rgb(233,192,44)" fg:x="882" fg:w="1"/><text x="71.8409%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.5909%" y="373" width="0.0812%" height="15" fill="rgb(240,170,46)" fg:x="882" fg:w="1"/><text x="71.8409%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.5909%" y="357" width="0.0812%" height="15" fill="rgb(207,104,33)" fg:x="882" fg:w="1"/><text x="71.8409%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.5909%" y="341" width="0.0812%" height="15" fill="rgb(219,21,39)" fg:x="882" fg:w="1"/><text x="71.8409%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="71.5097%" y="469" width="0.2435%" height="15" fill="rgb(214,133,29)" fg:x="881" fg:w="3"/><text x="71.7597%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="71.5097%" y="453" width="0.2435%" height="15" fill="rgb(226,93,6)" fg:x="881" fg:w="3"/><text x="71.7597%" y="463.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="71.6721%" y="437" width="0.0812%" height="15" fill="rgb(252,222,34)" fg:x="883" fg:w="1"/><text x="71.9221%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.6721%" y="421" width="0.0812%" height="15" fill="rgb(252,92,48)" fg:x="883" fg:w="1"/><text x="71.9221%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.6721%" y="405" width="0.0812%" height="15" fill="rgb(245,223,24)" fg:x="883" fg:w="1"/><text x="71.9221%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.6721%" y="389" width="0.0812%" height="15" fill="rgb(205,176,3)" fg:x="883" fg:w="1"/><text x="71.9221%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.6721%" y="373" width="0.0812%" height="15" fill="rgb(235,151,15)" fg:x="883" fg:w="1"/><text x="71.9221%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="71.7532%" y="469" width="0.0812%" height="15" fill="rgb(237,209,11)" fg:x="884" fg:w="1"/><text x="72.0032%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.7532%" y="453" width="0.0812%" height="15" fill="rgb(243,227,24)" fg:x="884" fg:w="1"/><text x="72.0032%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="71.7532%" y="437" width="0.0812%" height="15" fill="rgb(239,193,16)" fg:x="884" fg:w="1"/><text x="72.0032%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="71.7532%" y="421" width="0.0812%" height="15" fill="rgb(231,27,9)" fg:x="884" fg:w="1"/><text x="72.0032%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="71.7532%" y="405" width="0.0812%" height="15" fill="rgb(219,169,10)" fg:x="884" fg:w="1"/><text x="72.0032%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.49%)</title><rect x="71.4286%" y="565" width="0.4870%" height="15" fill="rgb(244,229,43)" fg:x="880" fg:w="6"/><text x="71.6786%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.49%)</title><rect x="71.4286%" y="549" width="0.4870%" height="15" fill="rgb(254,38,20)" fg:x="880" fg:w="6"/><text x="71.6786%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="71.4286%" y="533" width="0.4870%" height="15" fill="rgb(250,47,30)" fg:x="880" fg:w="6"/><text x="71.6786%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.49%)</title><rect x="71.4286%" y="517" width="0.4870%" height="15" fill="rgb(224,124,36)" fg:x="880" fg:w="6"/><text x="71.6786%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="71.4286%" y="501" width="0.4870%" height="15" fill="rgb(246,68,51)" fg:x="880" fg:w="6"/><text x="71.6786%" y="511.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.41%)</title><rect x="71.5097%" y="485" width="0.4058%" height="15" fill="rgb(253,43,49)" fg:x="881" fg:w="5"/><text x="71.7597%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.8344%" y="469" width="0.0812%" height="15" fill="rgb(219,54,36)" fg:x="885" fg:w="1"/><text x="72.0844%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.8344%" y="453" width="0.0812%" height="15" fill="rgb(227,133,34)" fg:x="885" fg:w="1"/><text x="72.0844%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="71.8344%" y="437" width="0.0812%" height="15" fill="rgb(247,227,15)" fg:x="885" fg:w="1"/><text x="72.0844%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="71.8344%" y="421" width="0.0812%" height="15" fill="rgb(229,96,14)" fg:x="885" fg:w="1"/><text x="72.0844%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="71.8344%" y="405" width="0.0812%" height="15" fill="rgb(220,79,17)" fg:x="885" fg:w="1"/><text x="72.0844%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.8344%" y="389" width="0.0812%" height="15" fill="rgb(205,131,53)" fg:x="885" fg:w="1"/><text x="72.0844%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.8344%" y="373" width="0.0812%" height="15" fill="rgb(209,50,29)" fg:x="885" fg:w="1"/><text x="72.0844%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="71.8344%" y="357" width="0.0812%" height="15" fill="rgb(245,86,46)" fg:x="885" fg:w="1"/><text x="72.0844%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.0779%" y="437" width="0.1623%" height="15" fill="rgb(235,66,46)" fg:x="888" fg:w="2"/><text x="72.3279%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.0779%" y="421" width="0.1623%" height="15" fill="rgb(232,148,31)" fg:x="888" fg:w="2"/><text x="72.3279%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.1591%" y="405" width="0.0812%" height="15" fill="rgb(217,149,8)" fg:x="889" fg:w="1"/><text x="72.4091%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.1591%" y="389" width="0.0812%" height="15" fill="rgb(209,183,11)" fg:x="889" fg:w="1"/><text x="72.4091%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.1591%" y="373" width="0.0812%" height="15" fill="rgb(208,55,20)" fg:x="889" fg:w="1"/><text x="72.4091%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.2403%" y="437" width="0.0812%" height="15" fill="rgb(218,39,14)" fg:x="890" fg:w="1"/><text x="72.4903%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="72.2403%" y="421" width="0.0812%" height="15" fill="rgb(216,169,33)" fg:x="890" fg:w="1"/><text x="72.4903%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="71.9968%" y="453" width="0.4058%" height="15" fill="rgb(233,80,24)" fg:x="887" fg:w="5"/><text x="72.2468%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.3214%" y="437" width="0.0812%" height="15" fill="rgb(213,179,31)" fg:x="891" fg:w="1"/><text x="72.5714%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.3214%" y="421" width="0.0812%" height="15" fill="rgb(209,19,5)" fg:x="891" fg:w="1"/><text x="72.5714%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.3214%" y="405" width="0.0812%" height="15" fill="rgb(219,18,35)" fg:x="891" fg:w="1"/><text x="72.5714%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.57%)</title><rect x="71.9156%" y="469" width="0.5682%" height="15" fill="rgb(209,169,16)" fg:x="886" fg:w="7"/><text x="72.1656%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.4026%" y="453" width="0.0812%" height="15" fill="rgb(245,90,51)" fg:x="892" fg:w="1"/><text x="72.6526%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.65%)</title><rect x="71.9156%" y="501" width="0.6494%" height="15" fill="rgb(220,99,45)" fg:x="886" fg:w="8"/><text x="72.1656%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.65%)</title><rect x="71.9156%" y="485" width="0.6494%" height="15" fill="rgb(249,89,25)" fg:x="886" fg:w="8"/><text x="72.1656%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.4838%" y="469" width="0.0812%" height="15" fill="rgb(239,193,0)" fg:x="893" fg:w="1"/><text x="72.7338%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.4838%" y="453" width="0.0812%" height="15" fill="rgb(231,126,1)" fg:x="893" fg:w="1"/><text x="72.7338%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.4838%" y="437" width="0.0812%" height="15" fill="rgb(243,166,3)" fg:x="893" fg:w="1"/><text x="72.7338%" y="447.50"></text></g><g><title>engine::session::Session::load_entity (39 samples, 3.17%)</title><rect x="69.5617%" y="597" width="3.1656%" height="15" fill="rgb(223,22,34)" fg:x="857" fg:w="39"/><text x="69.8117%" y="607.50">eng..</text></g><g><title>engine::session::internal::Entities::add_persisted (19 samples, 1.54%)</title><rect x="71.1851%" y="581" width="1.5422%" height="15" fill="rgb(251,52,51)" fg:x="877" fg:w="19"/><text x="71.4351%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (10 samples, 0.81%)</title><rect x="71.9156%" y="565" width="0.8117%" height="15" fill="rgb(221,165,28)" fg:x="886" fg:w="10"/><text x="72.1656%" y="575.50"></text></g><g><title>serde_json::de::from_trait (10 samples, 0.81%)</title><rect x="71.9156%" y="549" width="0.8117%" height="15" fill="rgb(218,121,47)" fg:x="886" fg:w="10"/><text x="72.1656%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.81%)</title><rect x="71.9156%" y="533" width="0.8117%" height="15" fill="rgb(209,120,9)" fg:x="886" fg:w="10"/><text x="72.1656%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.81%)</title><rect x="71.9156%" y="517" width="0.8117%" height="15" fill="rgb(236,68,12)" fg:x="886" fg:w="10"/><text x="72.1656%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="72.5649%" y="501" width="0.1623%" height="15" fill="rgb(225,194,26)" fg:x="894" fg:w="2"/><text x="72.8149%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.6461%" y="485" width="0.0812%" height="15" fill="rgb(231,84,39)" fg:x="895" fg:w="1"/><text x="72.8961%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="72.6461%" y="469" width="0.0812%" height="15" fill="rgb(210,11,45)" fg:x="895" fg:w="1"/><text x="72.8961%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8084%" y="533" width="0.0812%" height="15" fill="rgb(224,54,52)" fg:x="897" fg:w="1"/><text x="73.0584%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8084%" y="517" width="0.0812%" height="15" fill="rgb(238,102,14)" fg:x="897" fg:w="1"/><text x="73.0584%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.8896%" y="453" width="0.0812%" height="15" fill="rgb(243,160,52)" fg:x="898" fg:w="1"/><text x="73.1396%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.8896%" y="437" width="0.0812%" height="15" fill="rgb(216,114,19)" fg:x="898" fg:w="1"/><text x="73.1396%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.8896%" y="421" width="0.0812%" height="15" fill="rgb(244,166,37)" fg:x="898" fg:w="1"/><text x="73.1396%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.8896%" y="405" width="0.0812%" height="15" fill="rgb(246,29,44)" fg:x="898" fg:w="1"/><text x="73.1396%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.8896%" y="389" width="0.0812%" height="15" fill="rgb(215,56,53)" fg:x="898" fg:w="1"/><text x="73.1396%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.8896%" y="373" width="0.0812%" height="15" fill="rgb(217,60,2)" fg:x="898" fg:w="1"/><text x="73.1396%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.8896%" y="357" width="0.0812%" height="15" fill="rgb(207,26,24)" fg:x="898" fg:w="1"/><text x="73.1396%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="72.8084%" y="549" width="0.2435%" height="15" fill="rgb(252,210,15)" fg:x="897" fg:w="3"/><text x="73.0584%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="72.8896%" y="533" width="0.1623%" height="15" fill="rgb(253,209,26)" fg:x="898" fg:w="2"/><text x="73.1396%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="72.8896%" y="517" width="0.1623%" height="15" fill="rgb(238,170,14)" fg:x="898" fg:w="2"/><text x="73.1396%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="72.8896%" y="501" width="0.1623%" height="15" fill="rgb(216,178,15)" fg:x="898" fg:w="2"/><text x="73.1396%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="72.8896%" y="485" width="0.1623%" height="15" fill="rgb(250,197,2)" fg:x="898" fg:w="2"/><text x="73.1396%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="72.8896%" y="469" width="0.1623%" height="15" fill="rgb(212,70,42)" fg:x="898" fg:w="2"/><text x="73.1396%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="72.9708%" y="453" width="0.0812%" height="15" fill="rgb(227,213,9)" fg:x="899" fg:w="1"/><text x="73.2208%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="72.9708%" y="437" width="0.0812%" height="15" fill="rgb(245,99,25)" fg:x="899" fg:w="1"/><text x="73.2208%" y="447.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="73.0519%" y="549" width="0.0812%" height="15" fill="rgb(250,82,29)" fg:x="900" fg:w="1"/><text x="73.3019%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.0519%" y="533" width="0.0812%" height="15" fill="rgb(241,226,54)" fg:x="900" fg:w="1"/><text x="73.3019%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.1331%" y="453" width="0.1623%" height="15" fill="rgb(221,99,41)" fg:x="901" fg:w="2"/><text x="73.3831%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.2143%" y="437" width="0.0812%" height="15" fill="rgb(213,90,21)" fg:x="902" fg:w="1"/><text x="73.4643%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.2143%" y="421" width="0.0812%" height="15" fill="rgb(205,208,24)" fg:x="902" fg:w="1"/><text x="73.4643%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.2143%" y="405" width="0.0812%" height="15" fill="rgb(246,31,12)" fg:x="902" fg:w="1"/><text x="73.4643%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.2143%" y="389" width="0.0812%" height="15" fill="rgb(213,154,6)" fg:x="902" fg:w="1"/><text x="73.4643%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.2143%" y="373" width="0.0812%" height="15" fill="rgb(222,163,29)" fg:x="902" fg:w="1"/><text x="73.4643%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.2143%" y="357" width="0.0812%" height="15" fill="rgb(227,201,8)" fg:x="902" fg:w="1"/><text x="73.4643%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="73.1331%" y="549" width="0.2435%" height="15" fill="rgb(233,9,32)" fg:x="901" fg:w="3"/><text x="73.3831%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="73.1331%" y="533" width="0.2435%" height="15" fill="rgb(217,54,24)" fg:x="901" fg:w="3"/><text x="73.3831%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="73.1331%" y="517" width="0.2435%" height="15" fill="rgb(235,192,0)" fg:x="901" fg:w="3"/><text x="73.3831%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="73.1331%" y="501" width="0.2435%" height="15" fill="rgb(235,45,9)" fg:x="901" fg:w="3"/><text x="73.3831%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="73.1331%" y="485" width="0.2435%" height="15" fill="rgb(246,42,40)" fg:x="901" fg:w="3"/><text x="73.3831%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="73.1331%" y="469" width="0.2435%" height="15" fill="rgb(248,111,24)" fg:x="901" fg:w="3"/><text x="73.3831%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="73.2955%" y="453" width="0.0812%" height="15" fill="rgb(249,65,22)" fg:x="903" fg:w="1"/><text x="73.5455%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.2955%" y="437" width="0.0812%" height="15" fill="rgb(238,111,51)" fg:x="903" fg:w="1"/><text x="73.5455%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="73.2955%" y="421" width="0.0812%" height="15" fill="rgb(250,118,22)" fg:x="903" fg:w="1"/><text x="73.5455%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.2955%" y="405" width="0.0812%" height="15" fill="rgb(234,84,26)" fg:x="903" fg:w="1"/><text x="73.5455%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="73.4578%" y="437" width="0.0812%" height="15" fill="rgb(243,172,12)" fg:x="905" fg:w="1"/><text x="73.7078%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.5390%" y="421" width="0.0812%" height="15" fill="rgb(236,150,49)" fg:x="906" fg:w="1"/><text x="73.7890%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.5390%" y="405" width="0.0812%" height="15" fill="rgb(225,197,26)" fg:x="906" fg:w="1"/><text x="73.7890%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.5390%" y="389" width="0.0812%" height="15" fill="rgb(214,17,42)" fg:x="906" fg:w="1"/><text x="73.7890%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="73.3766%" y="485" width="0.3247%" height="15" fill="rgb(224,165,40)" fg:x="904" fg:w="4"/><text x="73.6266%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="73.3766%" y="469" width="0.3247%" height="15" fill="rgb(246,100,4)" fg:x="904" fg:w="4"/><text x="73.6266%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="73.4578%" y="453" width="0.2435%" height="15" fill="rgb(222,103,0)" fg:x="905" fg:w="3"/><text x="73.7078%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.5390%" y="437" width="0.1623%" height="15" fill="rgb(227,189,26)" fg:x="906" fg:w="2"/><text x="73.7890%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.6201%" y="421" width="0.0812%" height="15" fill="rgb(214,202,17)" fg:x="907" fg:w="1"/><text x="73.8701%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.6201%" y="405" width="0.0812%" height="15" fill="rgb(229,111,3)" fg:x="907" fg:w="1"/><text x="73.8701%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.7013%" y="485" width="0.0812%" height="15" fill="rgb(229,172,15)" fg:x="908" fg:w="1"/><text x="73.9513%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (910 samples, 73.86%)</title><rect x="0.0000%" y="677" width="73.8636%" height="15" fill="rgb(230,224,35)" fg:x="0" fg:w="910"/><text x="0.2500%" y="687.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (910 samples, 73.86%)</title><rect x="0.0000%" y="661" width="73.8636%" height="15" fill="rgb(251,141,6)" fg:x="0" fg:w="910"/><text x="0.2500%" y="671.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (910 samples, 73.86%)</title><rect x="0.0000%" y="645" width="73.8636%" height="15" fill="rgb(225,208,6)" fg:x="0" fg:w="910"/><text x="0.2500%" y="655.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (525 samples, 42.61%)</title><rect x="31.2500%" y="629" width="42.6136%" height="15" fill="rgb(246,181,16)" fg:x="385" fg:w="525"/><text x="31.5000%" y="639.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (525 samples, 42.61%)</title><rect x="31.2500%" y="613" width="42.6136%" height="15" fill="rgb(227,129,36)" fg:x="385" fg:w="525"/><text x="31.5000%" y="623.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (14 samples, 1.14%)</title><rect x="72.7273%" y="597" width="1.1364%" height="15" fill="rgb(248,117,24)" fg:x="896" fg:w="14"/><text x="72.9773%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (14 samples, 1.14%)</title><rect x="72.7273%" y="581" width="1.1364%" height="15" fill="rgb(214,185,35)" fg:x="896" fg:w="14"/><text x="72.9773%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.06%)</title><rect x="72.8084%" y="565" width="1.0552%" height="15" fill="rgb(236,150,34)" fg:x="897" fg:w="13"/><text x="73.0584%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.49%)</title><rect x="73.3766%" y="549" width="0.4870%" height="15" fill="rgb(243,228,27)" fg:x="904" fg:w="6"/><text x="73.6266%" y="559.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.49%)</title><rect x="73.3766%" y="533" width="0.4870%" height="15" fill="rgb(245,77,44)" fg:x="904" fg:w="6"/><text x="73.6266%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="73.3766%" y="517" width="0.4870%" height="15" fill="rgb(235,214,42)" fg:x="904" fg:w="6"/><text x="73.6266%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="73.3766%" y="501" width="0.4870%" height="15" fill="rgb(221,74,3)" fg:x="904" fg:w="6"/><text x="73.6266%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.7825%" y="485" width="0.0812%" height="15" fill="rgb(206,121,29)" fg:x="909" fg:w="1"/><text x="74.0325%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.9448%" y="613" width="0.0812%" height="15" fill="rgb(249,131,53)" fg:x="911" fg:w="1"/><text x="74.1948%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="74.0260%" y="613" width="0.0812%" height="15" fill="rgb(236,170,29)" fg:x="912" fg:w="1"/><text x="74.2760%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.0260%" y="597" width="0.0812%" height="15" fill="rgb(247,96,15)" fg:x="912" fg:w="1"/><text x="74.2760%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.1883%" y="533" width="0.0812%" height="15" fill="rgb(211,210,7)" fg:x="914" fg:w="1"/><text x="74.4383%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.2695%" y="517" width="0.0812%" height="15" fill="rgb(240,88,50)" fg:x="915" fg:w="1"/><text x="74.5195%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="74.3506%" y="501" width="0.1623%" height="15" fill="rgb(209,229,26)" fg:x="916" fg:w="2"/><text x="74.6006%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.5130%" y="485" width="0.1623%" height="15" fill="rgb(210,68,23)" fg:x="918" fg:w="2"/><text x="74.7630%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.5130%" y="469" width="0.1623%" height="15" fill="rgb(229,180,13)" fg:x="918" fg:w="2"/><text x="74.7630%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.5942%" y="453" width="0.0812%" height="15" fill="rgb(236,53,44)" fg:x="919" fg:w="1"/><text x="74.8442%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.65%)</title><rect x="74.1883%" y="549" width="0.6494%" height="15" fill="rgb(244,214,29)" fg:x="914" fg:w="8"/><text x="74.4383%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="74.2695%" y="533" width="0.5682%" height="15" fill="rgb(220,75,29)" fg:x="915" fg:w="7"/><text x="74.5195%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="74.3506%" y="517" width="0.4870%" height="15" fill="rgb(214,183,37)" fg:x="916" fg:w="6"/><text x="74.6006%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="74.5130%" y="501" width="0.3247%" height="15" fill="rgb(239,117,29)" fg:x="918" fg:w="4"/><text x="74.7630%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.6753%" y="485" width="0.1623%" height="15" fill="rgb(237,171,35)" fg:x="920" fg:w="2"/><text x="74.9253%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.7565%" y="469" width="0.0812%" height="15" fill="rgb(229,178,53)" fg:x="921" fg:w="1"/><text x="75.0065%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="74.8377%" y="517" width="0.1623%" height="15" fill="rgb(210,102,19)" fg:x="922" fg:w="2"/><text x="75.0877%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.0000%" y="501" width="0.0812%" height="15" fill="rgb(235,127,22)" fg:x="924" fg:w="1"/><text x="75.2500%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.0000%" y="485" width="0.0812%" height="15" fill="rgb(244,31,31)" fg:x="924" fg:w="1"/><text x="75.2500%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.0000%" y="469" width="0.0812%" height="15" fill="rgb(231,43,21)" fg:x="924" fg:w="1"/><text x="75.2500%" y="479.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.30%)</title><rect x="73.8636%" y="629" width="1.2987%" height="15" fill="rgb(217,131,35)" fg:x="910" fg:w="16"/><text x="74.1136%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (13 samples, 1.06%)</title><rect x="74.1071%" y="613" width="1.0552%" height="15" fill="rgb(221,149,4)" fg:x="913" fg:w="13"/><text x="74.3571%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.97%)</title><rect x="74.1883%" y="597" width="0.9740%" height="15" fill="rgb(232,170,28)" fg:x="914" fg:w="12"/><text x="74.4383%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (12 samples, 0.97%)</title><rect x="74.1883%" y="581" width="0.9740%" height="15" fill="rgb(238,56,10)" fg:x="914" fg:w="12"/><text x="74.4383%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.97%)</title><rect x="74.1883%" y="565" width="0.9740%" height="15" fill="rgb(235,196,14)" fg:x="914" fg:w="12"/><text x="74.4383%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="74.8377%" y="549" width="0.3247%" height="15" fill="rgb(216,45,48)" fg:x="922" fg:w="4"/><text x="75.0877%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="74.8377%" y="533" width="0.3247%" height="15" fill="rgb(238,213,17)" fg:x="922" fg:w="4"/><text x="75.0877%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.0000%" y="517" width="0.1623%" height="15" fill="rgb(212,13,2)" fg:x="924" fg:w="2"/><text x="75.2500%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.0812%" y="501" width="0.0812%" height="15" fill="rgb(240,114,20)" fg:x="925" fg:w="1"/><text x="75.3312%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.0812%" y="485" width="0.0812%" height="15" fill="rgb(228,41,40)" fg:x="925" fg:w="1"/><text x="75.3312%" y="495.50"></text></g><g><title>dlopen (3 samples, 0.24%)</title><rect x="75.1623%" y="517" width="0.2435%" height="15" fill="rgb(244,132,35)" fg:x="926" fg:w="3"/><text x="75.4123%" y="527.50"></text></g><g><title>_dl_catch_error (2 samples, 0.16%)</title><rect x="75.2435%" y="501" width="0.1623%" height="15" fill="rgb(253,189,4)" fg:x="927" fg:w="2"/><text x="75.4935%" y="511.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="75.2435%" y="485" width="0.1623%" height="15" fill="rgb(224,37,19)" fg:x="927" fg:w="2"/><text x="75.4935%" y="495.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="75.2435%" y="469" width="0.1623%" height="15" fill="rgb(235,223,18)" fg:x="927" fg:w="2"/><text x="75.4935%" y="479.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="75.2435%" y="453" width="0.1623%" height="15" fill="rgb(235,163,25)" fg:x="927" fg:w="2"/><text x="75.4935%" y="463.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (4 samples, 0.32%)</title><rect x="75.1623%" y="565" width="0.3247%" height="15" fill="rgb(217,145,28)" fg:x="926" fg:w="4"/><text x="75.4123%" y="575.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="75.1623%" y="549" width="0.3247%" height="15" fill="rgb(223,223,32)" fg:x="926" fg:w="4"/><text x="75.4123%" y="559.50"></text></g><g><title>libloading::safe::Library::new (4 samples, 0.32%)</title><rect x="75.1623%" y="533" width="0.3247%" height="15" fill="rgb(227,189,39)" fg:x="926" fg:w="4"/><text x="75.4123%" y="543.50"></text></g><g><title>libloading::util::cstr_cow_from_bytes (1 samples, 0.08%)</title><rect x="75.4058%" y="517" width="0.0812%" height="15" fill="rgb(248,10,22)" fg:x="929" fg:w="1"/><text x="75.6558%" y="527.50"></text></g><g><title>&lt;&amp;str as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (1 samples, 0.08%)</title><rect x="75.4058%" y="501" width="0.0812%" height="15" fill="rgb(248,46,39)" fg:x="929" fg:w="1"/><text x="75.6558%" y="511.50"></text></g><g><title>alloc::ffi::c_str::CString::new::spec_new_impl_bytes (1 samples, 0.08%)</title><rect x="75.4058%" y="485" width="0.0812%" height="15" fill="rgb(248,113,48)" fg:x="929" fg:w="1"/><text x="75.6558%" y="495.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.08%)</title><rect x="75.4058%" y="469" width="0.0812%" height="15" fill="rgb(245,16,25)" fg:x="929" fg:w="1"/><text x="75.6558%" y="479.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.08%)</title><rect x="75.4058%" y="453" width="0.0812%" height="15" fill="rgb(249,152,16)" fg:x="929" fg:w="1"/><text x="75.6558%" y="463.50"></text></g><g><title>engine::session::Session::initialize (5 samples, 0.41%)</title><rect x="75.1623%" y="581" width="0.4058%" height="15" fill="rgb(250,16,1)" fg:x="926" fg:w="5"/><text x="75.4123%" y="591.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="75.4870%" y="565" width="0.0812%" height="15" fill="rgb(249,138,3)" fg:x="930" fg:w="1"/><text x="75.7370%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.4870%" y="549" width="0.0812%" height="15" fill="rgb(227,71,41)" fg:x="930" fg:w="1"/><text x="75.7370%" y="559.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (6 samples, 0.49%)</title><rect x="75.1623%" y="629" width="0.4870%" height="15" fill="rgb(209,184,23)" fg:x="926" fg:w="6"/><text x="75.4123%" y="639.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (6 samples, 0.49%)</title><rect x="75.1623%" y="613" width="0.4870%" height="15" fill="rgb(223,215,31)" fg:x="926" fg:w="6"/><text x="75.4123%" y="623.50"></text></g><g><title>engine::session::Session::new (6 samples, 0.49%)</title><rect x="75.1623%" y="597" width="0.4870%" height="15" fill="rgb(210,146,28)" fg:x="926" fg:w="6"/><text x="75.4123%" y="607.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="75.5682%" y="581" width="0.0812%" height="15" fill="rgb(209,183,41)" fg:x="931" fg:w="1"/><text x="75.8182%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.5682%" y="565" width="0.0812%" height="15" fill="rgb(209,224,45)" fg:x="931" fg:w="1"/><text x="75.8182%" y="575.50"></text></g><g><title>&lt;plugins_core::emote::EmotePluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="75.5682%" y="549" width="0.0812%" height="15" fill="rgb(224,209,51)" fg:x="931" fg:w="1"/><text x="75.8182%" y="559.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.6494%" y="565" width="0.0812%" height="15" fill="rgb(223,17,39)" fg:x="932" fg:w="1"/><text x="75.8994%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="75.6494%" y="549" width="0.0812%" height="15" fill="rgb(234,204,37)" fg:x="932" fg:w="1"/><text x="75.8994%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="75.8117%" y="469" width="0.1623%" height="15" fill="rgb(236,120,5)" fg:x="934" fg:w="2"/><text x="76.0617%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="75.8117%" y="453" width="0.1623%" height="15" fill="rgb(248,97,27)" fg:x="934" fg:w="2"/><text x="76.0617%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="75.8117%" y="437" width="0.1623%" height="15" fill="rgb(240,66,17)" fg:x="934" fg:w="2"/><text x="76.0617%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="75.8117%" y="421" width="0.1623%" height="15" fill="rgb(210,79,3)" fg:x="934" fg:w="2"/><text x="76.0617%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.8929%" y="405" width="0.0812%" height="15" fill="rgb(214,176,27)" fg:x="935" fg:w="1"/><text x="76.1429%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="75.8929%" y="389" width="0.0812%" height="15" fill="rgb(235,185,3)" fg:x="935" fg:w="1"/><text x="76.1429%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="75.7305%" y="485" width="0.3247%" height="15" fill="rgb(227,24,12)" fg:x="933" fg:w="4"/><text x="75.9805%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.9740%" y="469" width="0.0812%" height="15" fill="rgb(252,169,48)" fg:x="936" fg:w="1"/><text x="76.2240%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.9740%" y="453" width="0.0812%" height="15" fill="rgb(212,65,1)" fg:x="936" fg:w="1"/><text x="76.2240%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.9740%" y="437" width="0.0812%" height="15" fill="rgb(242,39,24)" fg:x="936" fg:w="1"/><text x="76.2240%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.9740%" y="421" width="0.0812%" height="15" fill="rgb(249,32,23)" fg:x="936" fg:w="1"/><text x="76.2240%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.41%)</title><rect x="75.7305%" y="517" width="0.4058%" height="15" fill="rgb(251,195,23)" fg:x="933" fg:w="5"/><text x="75.9805%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="75.7305%" y="501" width="0.4058%" height="15" fill="rgb(236,174,8)" fg:x="933" fg:w="5"/><text x="75.9805%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.0552%" y="485" width="0.0812%" height="15" fill="rgb(220,197,8)" fg:x="937" fg:w="1"/><text x="76.3052%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.0552%" y="469" width="0.0812%" height="15" fill="rgb(240,108,37)" fg:x="937" fg:w="1"/><text x="76.3052%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.0552%" y="453" width="0.0812%" height="15" fill="rgb(232,176,24)" fg:x="937" fg:w="1"/><text x="76.3052%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.1364%" y="469" width="0.0812%" height="15" fill="rgb(243,35,29)" fg:x="938" fg:w="1"/><text x="76.3864%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.1364%" y="453" width="0.0812%" height="15" fill="rgb(210,37,18)" fg:x="938" fg:w="1"/><text x="76.3864%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1364%" y="437" width="0.0812%" height="15" fill="rgb(224,184,40)" fg:x="938" fg:w="1"/><text x="76.3864%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.2175%" y="421" width="0.0812%" height="15" fill="rgb(236,39,29)" fg:x="939" fg:w="1"/><text x="76.4675%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.4610%" y="357" width="0.0812%" height="15" fill="rgb(232,48,39)" fg:x="942" fg:w="1"/><text x="76.7110%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="76.3799%" y="389" width="0.2435%" height="15" fill="rgb(236,34,42)" fg:x="941" fg:w="3"/><text x="76.6299%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="76.4610%" y="373" width="0.1623%" height="15" fill="rgb(243,106,37)" fg:x="942" fg:w="2"/><text x="76.7110%" y="383.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="76.5422%" y="357" width="0.0812%" height="15" fill="rgb(218,96,6)" fg:x="943" fg:w="1"/><text x="76.7922%" y="367.50"></text></g><g><title>engine::session::Session::flush (13 samples, 1.06%)</title><rect x="75.6494%" y="613" width="1.0552%" height="15" fill="rgb(235,130,12)" fg:x="932" fg:w="13"/><text x="75.8994%" y="623.50"></text></g><g><title>engine::session::state::State::close (13 samples, 1.06%)</title><rect x="75.6494%" y="597" width="1.0552%" height="15" fill="rgb(231,95,0)" fg:x="932" fg:w="13"/><text x="75.8994%" y="607.50"></text></g><g><title>engine::session::state::State::flush_entities (13 samples, 1.06%)</title><rect x="75.6494%" y="581" width="1.0552%" height="15" fill="rgb(228,12,23)" fg:x="932" fg:w="13"/><text x="75.8994%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (12 samples, 0.97%)</title><rect x="75.7305%" y="565" width="0.9740%" height="15" fill="rgb(216,12,1)" fg:x="933" fg:w="12"/><text x="75.9805%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.97%)</title><rect x="75.7305%" y="549" width="0.9740%" height="15" fill="rgb(219,59,3)" fg:x="933" fg:w="12"/><text x="75.9805%" y="559.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (12 samples, 0.97%)</title><rect x="75.7305%" y="533" width="0.9740%" height="15" fill="rgb(215,208,46)" fg:x="933" fg:w="12"/><text x="75.9805%" y="543.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.57%)</title><rect x="76.1364%" y="517" width="0.5682%" height="15" fill="rgb(254,224,29)" fg:x="938" fg:w="7"/><text x="76.3864%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.57%)</title><rect x="76.1364%" y="501" width="0.5682%" height="15" fill="rgb(232,14,29)" fg:x="938" fg:w="7"/><text x="76.3864%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.57%)</title><rect x="76.1364%" y="485" width="0.5682%" height="15" fill="rgb(208,45,52)" fg:x="938" fg:w="7"/><text x="76.3864%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.49%)</title><rect x="76.2175%" y="469" width="0.4870%" height="15" fill="rgb(234,191,28)" fg:x="939" fg:w="6"/><text x="76.4675%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.49%)</title><rect x="76.2175%" y="453" width="0.4870%" height="15" fill="rgb(244,67,43)" fg:x="939" fg:w="6"/><text x="76.4675%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="76.2175%" y="437" width="0.4870%" height="15" fill="rgb(236,189,24)" fg:x="939" fg:w="6"/><text x="76.4675%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="76.2987%" y="421" width="0.4058%" height="15" fill="rgb(239,214,33)" fg:x="940" fg:w="5"/><text x="76.5487%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="76.3799%" y="405" width="0.3247%" height="15" fill="rgb(226,176,41)" fg:x="941" fg:w="4"/><text x="76.6299%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6234%" y="389" width="0.0812%" height="15" fill="rgb(248,47,8)" fg:x="944" fg:w="1"/><text x="76.8734%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.6234%" y="373" width="0.0812%" height="15" fill="rgb(218,81,44)" fg:x="944" fg:w="1"/><text x="76.8734%" y="383.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="76.7045%" y="613" width="0.0812%" height="15" fill="rgb(213,98,6)" fg:x="945" fg:w="1"/><text x="76.9545%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="76.7045%" y="597" width="0.0812%" height="15" fill="rgb(222,85,22)" fg:x="945" fg:w="1"/><text x="76.9545%" y="607.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="76.7045%" y="581" width="0.0812%" height="15" fill="rgb(239,46,39)" fg:x="945" fg:w="1"/><text x="76.9545%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="76.7045%" y="565" width="0.0812%" height="15" fill="rgb(237,12,29)" fg:x="945" fg:w="1"/><text x="76.9545%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.7045%" y="549" width="0.0812%" height="15" fill="rgb(214,77,8)" fg:x="945" fg:w="1"/><text x="76.9545%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.7045%" y="533" width="0.0812%" height="15" fill="rgb(217,168,37)" fg:x="945" fg:w="1"/><text x="76.9545%" y="543.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="76.7857%" y="581" width="0.1623%" height="15" fill="rgb(221,217,23)" fg:x="946" fg:w="2"/><text x="77.0357%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="76.7857%" y="565" width="0.1623%" height="15" fill="rgb(243,229,36)" fg:x="946" fg:w="2"/><text x="77.0357%" y="575.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (2 samples, 0.16%)</title><rect x="76.7857%" y="549" width="0.1623%" height="15" fill="rgb(251,163,40)" fg:x="946" fg:w="2"/><text x="77.0357%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="76.7857%" y="533" width="0.1623%" height="15" fill="rgb(237,222,12)" fg:x="946" fg:w="2"/><text x="77.0357%" y="543.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="76.7857%" y="613" width="0.2435%" height="15" fill="rgb(248,132,6)" fg:x="946" fg:w="3"/><text x="77.0357%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="76.7857%" y="597" width="0.2435%" height="15" fill="rgb(227,167,50)" fg:x="946" fg:w="3"/><text x="77.0357%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="76.9481%" y="581" width="0.0812%" height="15" fill="rgb(242,84,37)" fg:x="948" fg:w="1"/><text x="77.1981%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.9481%" y="565" width="0.0812%" height="15" fill="rgb(212,4,50)" fg:x="948" fg:w="1"/><text x="77.1981%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.9481%" y="549" width="0.0812%" height="15" fill="rgb(230,228,32)" fg:x="948" fg:w="1"/><text x="77.1981%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.9481%" y="533" width="0.0812%" height="15" fill="rgb(248,217,23)" fg:x="948" fg:w="1"/><text x="77.1981%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="76.9481%" y="517" width="0.0812%" height="15" fill="rgb(238,197,32)" fg:x="948" fg:w="1"/><text x="77.1981%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="76.9481%" y="501" width="0.0812%" height="15" fill="rgb(236,106,1)" fg:x="948" fg:w="1"/><text x="77.1981%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.9481%" y="485" width="0.0812%" height="15" fill="rgb(219,228,13)" fg:x="948" fg:w="1"/><text x="77.1981%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="76.9481%" y="469" width="0.0812%" height="15" fill="rgb(238,30,35)" fg:x="948" fg:w="1"/><text x="77.1981%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.9481%" y="453" width="0.0812%" height="15" fill="rgb(236,70,23)" fg:x="948" fg:w="1"/><text x="77.1981%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="76.9481%" y="437" width="0.0812%" height="15" fill="rgb(249,104,48)" fg:x="948" fg:w="1"/><text x="77.1981%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.9481%" y="421" width="0.0812%" height="15" fill="rgb(254,117,50)" fg:x="948" fg:w="1"/><text x="77.1981%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.9481%" y="405" width="0.0812%" height="15" fill="rgb(223,152,4)" fg:x="948" fg:w="1"/><text x="77.1981%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.9481%" y="389" width="0.0812%" height="15" fill="rgb(245,6,2)" fg:x="948" fg:w="1"/><text x="77.1981%" y="399.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="77.0292%" y="613" width="0.0812%" height="15" fill="rgb(249,150,24)" fg:x="949" fg:w="1"/><text x="77.2792%" y="623.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="77.0292%" y="597" width="0.0812%" height="15" fill="rgb(228,185,42)" fg:x="949" fg:w="1"/><text x="77.2792%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="77.1916%" y="581" width="0.0812%" height="15" fill="rgb(226,39,33)" fg:x="951" fg:w="1"/><text x="77.4416%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="77.1916%" y="565" width="0.0812%" height="15" fill="rgb(221,166,19)" fg:x="951" fg:w="1"/><text x="77.4416%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="77.1916%" y="549" width="0.0812%" height="15" fill="rgb(209,109,2)" fg:x="951" fg:w="1"/><text x="77.4416%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.1916%" y="533" width="0.0812%" height="15" fill="rgb(252,216,26)" fg:x="951" fg:w="1"/><text x="77.4416%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.1916%" y="517" width="0.0812%" height="15" fill="rgb(227,173,36)" fg:x="951" fg:w="1"/><text x="77.4416%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="77.1916%" y="501" width="0.0812%" height="15" fill="rgb(209,90,7)" fg:x="951" fg:w="1"/><text x="77.4416%" y="511.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (3 samples, 0.24%)</title><rect x="77.1104%" y="613" width="0.2435%" height="15" fill="rgb(250,194,11)" fg:x="950" fg:w="3"/><text x="77.3604%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="77.1916%" y="597" width="0.1623%" height="15" fill="rgb(220,72,50)" fg:x="951" fg:w="2"/><text x="77.4416%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="77.2727%" y="581" width="0.0812%" height="15" fill="rgb(222,106,48)" fg:x="952" fg:w="1"/><text x="77.5227%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="77.2727%" y="565" width="0.0812%" height="15" fill="rgb(216,220,45)" fg:x="952" fg:w="1"/><text x="77.5227%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="77.2727%" y="549" width="0.0812%" height="15" fill="rgb(234,112,18)" fg:x="952" fg:w="1"/><text x="77.5227%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.2727%" y="533" width="0.0812%" height="15" fill="rgb(206,179,9)" fg:x="952" fg:w="1"/><text x="77.5227%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.2727%" y="517" width="0.0812%" height="15" fill="rgb(215,115,40)" fg:x="952" fg:w="1"/><text x="77.5227%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.2727%" y="501" width="0.0812%" height="15" fill="rgb(222,69,34)" fg:x="952" fg:w="1"/><text x="77.5227%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.2727%" y="485" width="0.0812%" height="15" fill="rgb(209,161,10)" fg:x="952" fg:w="1"/><text x="77.5227%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.2727%" y="469" width="0.0812%" height="15" fill="rgb(217,6,38)" fg:x="952" fg:w="1"/><text x="77.5227%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.2727%" y="453" width="0.0812%" height="15" fill="rgb(229,229,48)" fg:x="952" fg:w="1"/><text x="77.5227%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.2727%" y="437" width="0.0812%" height="15" fill="rgb(225,21,28)" fg:x="952" fg:w="1"/><text x="77.5227%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="77.3539%" y="597" width="0.1623%" height="15" fill="rgb(206,33,13)" fg:x="953" fg:w="2"/><text x="77.6039%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="77.3539%" y="581" width="0.1623%" height="15" fill="rgb(242,178,17)" fg:x="953" fg:w="2"/><text x="77.6039%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="77.3539%" y="565" width="0.1623%" height="15" fill="rgb(220,162,5)" fg:x="953" fg:w="2"/><text x="77.6039%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.3539%" y="549" width="0.1623%" height="15" fill="rgb(210,33,43)" fg:x="953" fg:w="2"/><text x="77.6039%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.4351%" y="533" width="0.0812%" height="15" fill="rgb(216,116,54)" fg:x="954" fg:w="1"/><text x="77.6851%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.4351%" y="517" width="0.0812%" height="15" fill="rgb(249,92,24)" fg:x="954" fg:w="1"/><text x="77.6851%" y="527.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="77.5162%" y="597" width="0.0812%" height="15" fill="rgb(231,189,14)" fg:x="955" fg:w="1"/><text x="77.7662%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.5162%" y="581" width="0.0812%" height="15" fill="rgb(230,8,41)" fg:x="955" fg:w="1"/><text x="77.7662%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="77.5162%" y="565" width="0.0812%" height="15" fill="rgb(249,7,27)" fg:x="955" fg:w="1"/><text x="77.7662%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="77.5162%" y="549" width="0.0812%" height="15" fill="rgb(232,86,5)" fg:x="955" fg:w="1"/><text x="77.7662%" y="559.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="77.5162%" y="533" width="0.0812%" height="15" fill="rgb(224,175,18)" fg:x="955" fg:w="1"/><text x="77.7662%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="77.5162%" y="517" width="0.0812%" height="15" fill="rgb(220,129,12)" fg:x="955" fg:w="1"/><text x="77.7662%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.5162%" y="501" width="0.0812%" height="15" fill="rgb(210,19,36)" fg:x="955" fg:w="1"/><text x="77.7662%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.5162%" y="485" width="0.0812%" height="15" fill="rgb(219,96,14)" fg:x="955" fg:w="1"/><text x="77.7662%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.5162%" y="469" width="0.0812%" height="15" fill="rgb(249,106,1)" fg:x="955" fg:w="1"/><text x="77.7662%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.5162%" y="453" width="0.0812%" height="15" fill="rgb(249,155,20)" fg:x="955" fg:w="1"/><text x="77.7662%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="77.7597%" y="469" width="0.0812%" height="15" fill="rgb(244,168,9)" fg:x="958" fg:w="1"/><text x="78.0097%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.7597%" y="453" width="0.0812%" height="15" fill="rgb(216,23,50)" fg:x="958" fg:w="1"/><text x="78.0097%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.7597%" y="437" width="0.0812%" height="15" fill="rgb(224,219,20)" fg:x="958" fg:w="1"/><text x="78.0097%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.7597%" y="421" width="0.0812%" height="15" fill="rgb(222,156,15)" fg:x="958" fg:w="1"/><text x="78.0097%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.7597%" y="405" width="0.0812%" height="15" fill="rgb(231,97,17)" fg:x="958" fg:w="1"/><text x="78.0097%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.7597%" y="389" width="0.0812%" height="15" fill="rgb(218,70,48)" fg:x="958" fg:w="1"/><text x="78.0097%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.7597%" y="373" width="0.0812%" height="15" fill="rgb(212,196,52)" fg:x="958" fg:w="1"/><text x="78.0097%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.7597%" y="357" width="0.0812%" height="15" fill="rgb(243,203,18)" fg:x="958" fg:w="1"/><text x="78.0097%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="77.8409%" y="453" width="0.0812%" height="15" fill="rgb(252,125,41)" fg:x="959" fg:w="1"/><text x="78.0909%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.9221%" y="437" width="0.0812%" height="15" fill="rgb(223,180,33)" fg:x="960" fg:w="1"/><text x="78.1721%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.9221%" y="421" width="0.0812%" height="15" fill="rgb(254,159,46)" fg:x="960" fg:w="1"/><text x="78.1721%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.9221%" y="405" width="0.0812%" height="15" fill="rgb(254,38,10)" fg:x="960" fg:w="1"/><text x="78.1721%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.0032%" y="421" width="0.0812%" height="15" fill="rgb(208,217,32)" fg:x="961" fg:w="1"/><text x="78.2532%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.0032%" y="405" width="0.0812%" height="15" fill="rgb(221,120,13)" fg:x="961" fg:w="1"/><text x="78.2532%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.0032%" y="389" width="0.0812%" height="15" fill="rgb(246,54,52)" fg:x="961" fg:w="1"/><text x="78.2532%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.0032%" y="373" width="0.0812%" height="15" fill="rgb(242,34,25)" fg:x="961" fg:w="1"/><text x="78.2532%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.0032%" y="357" width="0.0812%" height="15" fill="rgb(247,209,9)" fg:x="961" fg:w="1"/><text x="78.2532%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.0032%" y="341" width="0.0812%" height="15" fill="rgb(228,71,26)" fg:x="961" fg:w="1"/><text x="78.2532%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.0032%" y="325" width="0.0812%" height="15" fill="rgb(222,145,49)" fg:x="961" fg:w="1"/><text x="78.2532%" y="335.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="77.9221%" y="453" width="0.2435%" height="15" fill="rgb(218,121,17)" fg:x="960" fg:w="3"/><text x="78.1721%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="78.0032%" y="437" width="0.1623%" height="15" fill="rgb(244,50,7)" fg:x="961" fg:w="2"/><text x="78.2532%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.0844%" y="421" width="0.0812%" height="15" fill="rgb(246,229,37)" fg:x="962" fg:w="1"/><text x="78.3344%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.49%)</title><rect x="77.7597%" y="485" width="0.4870%" height="15" fill="rgb(225,18,5)" fg:x="958" fg:w="6"/><text x="78.0097%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="77.8409%" y="469" width="0.4058%" height="15" fill="rgb(213,204,8)" fg:x="959" fg:w="5"/><text x="78.0909%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.1656%" y="453" width="0.0812%" height="15" fill="rgb(238,103,6)" fg:x="963" fg:w="1"/><text x="78.4156%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.1656%" y="437" width="0.0812%" height="15" fill="rgb(222,25,35)" fg:x="963" fg:w="1"/><text x="78.4156%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.2468%" y="437" width="0.0812%" height="15" fill="rgb(213,203,35)" fg:x="964" fg:w="1"/><text x="78.4968%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="78.4091%" y="405" width="0.0812%" height="15" fill="rgb(221,79,53)" fg:x="966" fg:w="1"/><text x="78.6591%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.4091%" y="389" width="0.0812%" height="15" fill="rgb(243,200,35)" fg:x="966" fg:w="1"/><text x="78.6591%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="78.2468%" y="485" width="0.3247%" height="15" fill="rgb(248,60,25)" fg:x="964" fg:w="4"/><text x="78.4968%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="78.2468%" y="469" width="0.3247%" height="15" fill="rgb(227,53,46)" fg:x="964" fg:w="4"/><text x="78.4968%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="78.2468%" y="453" width="0.3247%" height="15" fill="rgb(216,120,32)" fg:x="964" fg:w="4"/><text x="78.4968%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="78.3279%" y="437" width="0.2435%" height="15" fill="rgb(220,134,1)" fg:x="965" fg:w="3"/><text x="78.5779%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="78.4091%" y="421" width="0.1623%" height="15" fill="rgb(237,168,5)" fg:x="966" fg:w="2"/><text x="78.6591%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.4903%" y="405" width="0.0812%" height="15" fill="rgb(231,100,33)" fg:x="967" fg:w="1"/><text x="78.7403%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.4903%" y="389" width="0.0812%" height="15" fill="rgb(236,177,47)" fg:x="967" fg:w="1"/><text x="78.7403%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.4903%" y="373" width="0.0812%" height="15" fill="rgb(235,7,49)" fg:x="967" fg:w="1"/><text x="78.7403%" y="383.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="78.6526%" y="437" width="0.0812%" height="15" fill="rgb(232,119,22)" fg:x="969" fg:w="1"/><text x="78.9026%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.6526%" y="421" width="0.0812%" height="15" fill="rgb(254,73,53)" fg:x="969" fg:w="1"/><text x="78.9026%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="78.6526%" y="405" width="0.0812%" height="15" fill="rgb(251,35,20)" fg:x="969" fg:w="1"/><text x="78.9026%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="78.6526%" y="389" width="0.0812%" height="15" fill="rgb(241,119,20)" fg:x="969" fg:w="1"/><text x="78.9026%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="78.7338%" y="405" width="0.0812%" height="15" fill="rgb(207,102,14)" fg:x="970" fg:w="1"/><text x="78.9838%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="78.8149%" y="405" width="0.1623%" height="15" fill="rgb(248,201,50)" fg:x="971" fg:w="2"/><text x="79.0649%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="78.8149%" y="389" width="0.1623%" height="15" fill="rgb(222,185,44)" fg:x="971" fg:w="2"/><text x="79.0649%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.8961%" y="373" width="0.0812%" height="15" fill="rgb(218,107,18)" fg:x="972" fg:w="1"/><text x="79.1461%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.8961%" y="357" width="0.0812%" height="15" fill="rgb(237,177,39)" fg:x="972" fg:w="1"/><text x="79.1461%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.8961%" y="341" width="0.0812%" height="15" fill="rgb(246,69,6)" fg:x="972" fg:w="1"/><text x="79.1461%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.8961%" y="325" width="0.0812%" height="15" fill="rgb(234,208,37)" fg:x="972" fg:w="1"/><text x="79.1461%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.8961%" y="309" width="0.0812%" height="15" fill="rgb(225,4,6)" fg:x="972" fg:w="1"/><text x="79.1461%" y="319.50"></text></g><g><title>engine::session::Session::flush (18 samples, 1.46%)</title><rect x="77.5974%" y="597" width="1.4610%" height="15" fill="rgb(233,45,0)" fg:x="956" fg:w="18"/><text x="77.8474%" y="607.50"></text></g><g><title>engine::session::Session::save_changes (16 samples, 1.30%)</title><rect x="77.7597%" y="581" width="1.2987%" height="15" fill="rgb(226,136,5)" fg:x="958" fg:w="16"/><text x="78.0097%" y="591.50"></text></g><g><title>engine::session::state::State::close (16 samples, 1.30%)</title><rect x="77.7597%" y="565" width="1.2987%" height="15" fill="rgb(211,91,47)" fg:x="958" fg:w="16"/><text x="78.0097%" y="575.50"></text></g><g><title>engine::session::state::State::flush_entities (16 samples, 1.30%)</title><rect x="77.7597%" y="549" width="1.2987%" height="15" fill="rgb(242,88,51)" fg:x="958" fg:w="16"/><text x="78.0097%" y="559.50"></text></g><g><title>core::iter::adapters::try_process (16 samples, 1.30%)</title><rect x="77.7597%" y="533" width="1.2987%" height="15" fill="rgb(230,91,28)" fg:x="958" fg:w="16"/><text x="78.0097%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 1.30%)</title><rect x="77.7597%" y="517" width="1.2987%" height="15" fill="rgb(254,186,29)" fg:x="958" fg:w="16"/><text x="78.0097%" y="527.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (16 samples, 1.30%)</title><rect x="77.7597%" y="501" width="1.2987%" height="15" fill="rgb(238,6,4)" fg:x="958" fg:w="16"/><text x="78.0097%" y="511.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.49%)</title><rect x="78.5714%" y="485" width="0.4870%" height="15" fill="rgb(221,151,16)" fg:x="968" fg:w="6"/><text x="78.8214%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.41%)</title><rect x="78.6526%" y="469" width="0.4058%" height="15" fill="rgb(251,143,52)" fg:x="969" fg:w="5"/><text x="78.9026%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.41%)</title><rect x="78.6526%" y="453" width="0.4058%" height="15" fill="rgb(206,90,15)" fg:x="969" fg:w="5"/><text x="78.9026%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="78.7338%" y="437" width="0.3247%" height="15" fill="rgb(218,35,8)" fg:x="970" fg:w="4"/><text x="78.9838%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="78.7338%" y="421" width="0.3247%" height="15" fill="rgb(239,215,6)" fg:x="970" fg:w="4"/><text x="78.9838%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="78.9773%" y="405" width="0.0812%" height="15" fill="rgb(245,116,39)" fg:x="973" fg:w="1"/><text x="79.2273%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.9773%" y="389" width="0.0812%" height="15" fill="rgb(242,65,28)" fg:x="973" fg:w="1"/><text x="79.2273%" y="399.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="79.0584%" y="597" width="0.0812%" height="15" fill="rgb(252,132,53)" fg:x="974" fg:w="1"/><text x="79.3084%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="79.1396%" y="565" width="0.0812%" height="15" fill="rgb(224,159,50)" fg:x="975" fg:w="1"/><text x="79.3896%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="79.1396%" y="549" width="0.0812%" height="15" fill="rgb(224,93,4)" fg:x="975" fg:w="1"/><text x="79.3896%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="79.1396%" y="533" width="0.0812%" height="15" fill="rgb(208,81,34)" fg:x="975" fg:w="1"/><text x="79.3896%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.1396%" y="517" width="0.0812%" height="15" fill="rgb(233,92,54)" fg:x="975" fg:w="1"/><text x="79.3896%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.1396%" y="501" width="0.0812%" height="15" fill="rgb(237,21,14)" fg:x="975" fg:w="1"/><text x="79.3896%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.1396%" y="485" width="0.0812%" height="15" fill="rgb(249,128,51)" fg:x="975" fg:w="1"/><text x="79.3896%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.1396%" y="469" width="0.0812%" height="15" fill="rgb(223,129,24)" fg:x="975" fg:w="1"/><text x="79.3896%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.1396%" y="453" width="0.0812%" height="15" fill="rgb(231,168,25)" fg:x="975" fg:w="1"/><text x="79.3896%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.1396%" y="437" width="0.0812%" height="15" fill="rgb(224,39,20)" fg:x="975" fg:w="1"/><text x="79.3896%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.1396%" y="421" width="0.0812%" height="15" fill="rgb(225,152,53)" fg:x="975" fg:w="1"/><text x="79.3896%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.1396%" y="405" width="0.0812%" height="15" fill="rgb(252,17,24)" fg:x="975" fg:w="1"/><text x="79.3896%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.1396%" y="389" width="0.0812%" height="15" fill="rgb(250,114,30)" fg:x="975" fg:w="1"/><text x="79.3896%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.1396%" y="373" width="0.0812%" height="15" fill="rgb(229,5,4)" fg:x="975" fg:w="1"/><text x="79.3896%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.1396%" y="357" width="0.0812%" height="15" fill="rgb(225,176,49)" fg:x="975" fg:w="1"/><text x="79.3896%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.1396%" y="341" width="0.0812%" height="15" fill="rgb(224,221,49)" fg:x="975" fg:w="1"/><text x="79.3896%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.1396%" y="325" width="0.0812%" height="15" fill="rgb(253,169,27)" fg:x="975" fg:w="1"/><text x="79.3896%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.1396%" y="309" width="0.0812%" height="15" fill="rgb(211,206,16)" fg:x="975" fg:w="1"/><text x="79.3896%" y="319.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="79.1396%" y="293" width="0.0812%" height="15" fill="rgb(244,87,35)" fg:x="975" fg:w="1"/><text x="79.3896%" y="303.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="79.2208%" y="565" width="0.0812%" height="15" fill="rgb(246,28,10)" fg:x="976" fg:w="1"/><text x="79.4708%" y="575.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="79.2208%" y="549" width="0.0812%" height="15" fill="rgb(229,12,44)" fg:x="976" fg:w="1"/><text x="79.4708%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.2208%" y="533" width="0.0812%" height="15" fill="rgb(210,145,37)" fg:x="976" fg:w="1"/><text x="79.4708%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2208%" y="517" width="0.0812%" height="15" fill="rgb(227,112,52)" fg:x="976" fg:w="1"/><text x="79.4708%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.2208%" y="501" width="0.0812%" height="15" fill="rgb(238,155,34)" fg:x="976" fg:w="1"/><text x="79.4708%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="79.3019%" y="501" width="0.0812%" height="15" fill="rgb(239,226,36)" fg:x="977" fg:w="1"/><text x="79.5519%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.3019%" y="485" width="0.0812%" height="15" fill="rgb(230,16,23)" fg:x="977" fg:w="1"/><text x="79.5519%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="79.3019%" y="469" width="0.0812%" height="15" fill="rgb(236,171,36)" fg:x="977" fg:w="1"/><text x="79.5519%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="79.3019%" y="565" width="0.1623%" height="15" fill="rgb(221,22,14)" fg:x="977" fg:w="2"/><text x="79.5519%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="79.3019%" y="549" width="0.1623%" height="15" fill="rgb(242,43,11)" fg:x="977" fg:w="2"/><text x="79.5519%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="79.3019%" y="533" width="0.1623%" height="15" fill="rgb(232,69,23)" fg:x="977" fg:w="2"/><text x="79.5519%" y="543.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="79.3019%" y="517" width="0.1623%" height="15" fill="rgb(216,180,54)" fg:x="977" fg:w="2"/><text x="79.5519%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="79.3831%" y="501" width="0.0812%" height="15" fill="rgb(216,5,24)" fg:x="978" fg:w="1"/><text x="79.6331%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.3831%" y="485" width="0.0812%" height="15" fill="rgb(225,89,9)" fg:x="978" fg:w="1"/><text x="79.6331%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="79.3831%" y="469" width="0.0812%" height="15" fill="rgb(243,75,33)" fg:x="978" fg:w="1"/><text x="79.6331%" y="479.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="79.3831%" y="453" width="0.0812%" height="15" fill="rgb(247,141,45)" fg:x="978" fg:w="1"/><text x="79.6331%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.41%)</title><rect x="79.1396%" y="581" width="0.4058%" height="15" fill="rgb(232,177,36)" fg:x="975" fg:w="5"/><text x="79.3896%" y="591.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="79.4643%" y="565" width="0.0812%" height="15" fill="rgb(219,125,36)" fg:x="979" fg:w="1"/><text x="79.7143%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.4643%" y="549" width="0.0812%" height="15" fill="rgb(227,94,9)" fg:x="979" fg:w="1"/><text x="79.7143%" y="559.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.49%)</title><rect x="79.1396%" y="597" width="0.4870%" height="15" fill="rgb(240,34,52)" fg:x="975" fg:w="6"/><text x="79.3896%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="79.5455%" y="581" width="0.0812%" height="15" fill="rgb(216,45,12)" fg:x="980" fg:w="1"/><text x="79.7955%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="79.5455%" y="565" width="0.0812%" height="15" fill="rgb(246,21,19)" fg:x="980" fg:w="1"/><text x="79.7955%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="79.5455%" y="549" width="0.0812%" height="15" fill="rgb(213,98,42)" fg:x="980" fg:w="1"/><text x="79.7955%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.5455%" y="533" width="0.0812%" height="15" fill="rgb(250,136,47)" fg:x="980" fg:w="1"/><text x="79.7955%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.5455%" y="517" width="0.0812%" height="15" fill="rgb(251,124,27)" fg:x="980" fg:w="1"/><text x="79.7955%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.6266%" y="485" width="0.0812%" height="15" fill="rgb(229,180,14)" fg:x="981" fg:w="1"/><text x="79.8766%" y="495.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (2 samples, 0.16%)</title><rect x="79.6266%" y="597" width="0.1623%" height="15" fill="rgb(245,216,25)" fg:x="981" fg:w="2"/><text x="79.8766%" y="607.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="79.6266%" y="581" width="0.1623%" height="15" fill="rgb(251,43,5)" fg:x="981" fg:w="2"/><text x="79.8766%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="79.6266%" y="565" width="0.1623%" height="15" fill="rgb(250,128,24)" fg:x="981" fg:w="2"/><text x="79.8766%" y="575.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (2 samples, 0.16%)</title><rect x="79.6266%" y="549" width="0.1623%" height="15" fill="rgb(217,117,27)" fg:x="981" fg:w="2"/><text x="79.8766%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="79.6266%" y="533" width="0.1623%" height="15" fill="rgb(245,147,4)" fg:x="981" fg:w="2"/><text x="79.8766%" y="543.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="79.6266%" y="517" width="0.1623%" height="15" fill="rgb(242,201,35)" fg:x="981" fg:w="2"/><text x="79.8766%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="79.6266%" y="501" width="0.1623%" height="15" fill="rgb(218,181,1)" fg:x="981" fg:w="2"/><text x="79.8766%" y="511.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="79.7078%" y="485" width="0.0812%" height="15" fill="rgb(222,6,29)" fg:x="982" fg:w="1"/><text x="79.9578%" y="495.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="79.7078%" y="469" width="0.0812%" height="15" fill="rgb(208,186,3)" fg:x="982" fg:w="1"/><text x="79.9578%" y="479.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="79.7890%" y="581" width="0.0812%" height="15" fill="rgb(216,36,26)" fg:x="983" fg:w="1"/><text x="80.0390%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.7890%" y="565" width="0.0812%" height="15" fill="rgb(248,201,23)" fg:x="983" fg:w="1"/><text x="80.0390%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.7890%" y="549" width="0.0812%" height="15" fill="rgb(251,170,31)" fg:x="983" fg:w="1"/><text x="80.0390%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.7890%" y="533" width="0.0812%" height="15" fill="rgb(207,110,25)" fg:x="983" fg:w="1"/><text x="80.0390%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (2 samples, 0.16%)</title><rect x="79.7890%" y="597" width="0.1623%" height="15" fill="rgb(250,54,15)" fg:x="983" fg:w="2"/><text x="80.0390%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="79.8701%" y="581" width="0.0812%" height="15" fill="rgb(227,68,33)" fg:x="984" fg:w="1"/><text x="80.1201%" y="591.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="79.8701%" y="565" width="0.0812%" height="15" fill="rgb(238,34,41)" fg:x="984" fg:w="1"/><text x="80.1201%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.8701%" y="549" width="0.0812%" height="15" fill="rgb(220,11,15)" fg:x="984" fg:w="1"/><text x="80.1201%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="79.8701%" y="533" width="0.0812%" height="15" fill="rgb(246,111,35)" fg:x="984" fg:w="1"/><text x="80.1201%" y="543.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="79.8701%" y="517" width="0.0812%" height="15" fill="rgb(209,88,53)" fg:x="984" fg:w="1"/><text x="80.1201%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.8701%" y="501" width="0.0812%" height="15" fill="rgb(231,185,47)" fg:x="984" fg:w="1"/><text x="80.1201%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.8701%" y="485" width="0.0812%" height="15" fill="rgb(233,154,1)" fg:x="984" fg:w="1"/><text x="80.1201%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.8701%" y="469" width="0.0812%" height="15" fill="rgb(225,15,46)" fg:x="984" fg:w="1"/><text x="80.1201%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.9513%" y="421" width="0.0812%" height="15" fill="rgb(211,135,41)" fg:x="985" fg:w="1"/><text x="80.2013%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="79.9513%" y="405" width="0.0812%" height="15" fill="rgb(208,54,0)" fg:x="985" fg:w="1"/><text x="80.2013%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="79.9513%" y="389" width="0.0812%" height="15" fill="rgb(244,136,14)" fg:x="985" fg:w="1"/><text x="80.2013%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="79.9513%" y="533" width="0.1623%" height="15" fill="rgb(241,56,14)" fg:x="985" fg:w="2"/><text x="80.2013%" y="543.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="79.9513%" y="517" width="0.1623%" height="15" fill="rgb(205,80,24)" fg:x="985" fg:w="2"/><text x="80.2013%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="79.9513%" y="501" width="0.1623%" height="15" fill="rgb(220,57,4)" fg:x="985" fg:w="2"/><text x="80.2013%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="79.9513%" y="485" width="0.1623%" height="15" fill="rgb(226,193,50)" fg:x="985" fg:w="2"/><text x="80.2013%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="79.9513%" y="469" width="0.1623%" height="15" fill="rgb(231,168,22)" fg:x="985" fg:w="2"/><text x="80.2013%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="79.9513%" y="453" width="0.1623%" height="15" fill="rgb(254,215,14)" fg:x="985" fg:w="2"/><text x="80.2013%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="79.9513%" y="437" width="0.1623%" height="15" fill="rgb(211,115,16)" fg:x="985" fg:w="2"/><text x="80.2013%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.0325%" y="421" width="0.0812%" height="15" fill="rgb(236,210,16)" fg:x="986" fg:w="1"/><text x="80.2825%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.0325%" y="405" width="0.0812%" height="15" fill="rgb(221,94,12)" fg:x="986" fg:w="1"/><text x="80.2825%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.0325%" y="389" width="0.0812%" height="15" fill="rgb(235,218,49)" fg:x="986" fg:w="1"/><text x="80.2825%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.0325%" y="373" width="0.0812%" height="15" fill="rgb(217,114,14)" fg:x="986" fg:w="1"/><text x="80.2825%" y="383.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="79.9513%" y="581" width="0.2435%" height="15" fill="rgb(216,145,22)" fg:x="985" fg:w="3"/><text x="80.2013%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="79.9513%" y="565" width="0.2435%" height="15" fill="rgb(217,112,39)" fg:x="985" fg:w="3"/><text x="80.2013%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="79.9513%" y="549" width="0.2435%" height="15" fill="rgb(225,85,32)" fg:x="985" fg:w="3"/><text x="80.2013%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="80.1136%" y="533" width="0.0812%" height="15" fill="rgb(245,209,47)" fg:x="987" fg:w="1"/><text x="80.3636%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="80.1136%" y="517" width="0.0812%" height="15" fill="rgb(218,220,15)" fg:x="987" fg:w="1"/><text x="80.3636%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.1136%" y="501" width="0.0812%" height="15" fill="rgb(222,202,31)" fg:x="987" fg:w="1"/><text x="80.3636%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.1136%" y="485" width="0.0812%" height="15" fill="rgb(243,203,4)" fg:x="987" fg:w="1"/><text x="80.3636%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.1136%" y="469" width="0.0812%" height="15" fill="rgb(237,92,17)" fg:x="987" fg:w="1"/><text x="80.3636%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.1136%" y="453" width="0.0812%" height="15" fill="rgb(231,119,7)" fg:x="987" fg:w="1"/><text x="80.3636%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.1136%" y="437" width="0.0812%" height="15" fill="rgb(237,82,41)" fg:x="987" fg:w="1"/><text x="80.3636%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.1136%" y="421" width="0.0812%" height="15" fill="rgb(226,81,48)" fg:x="987" fg:w="1"/><text x="80.3636%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="80.1136%" y="405" width="0.0812%" height="15" fill="rgb(234,70,51)" fg:x="987" fg:w="1"/><text x="80.3636%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="80.1136%" y="389" width="0.0812%" height="15" fill="rgb(251,86,4)" fg:x="987" fg:w="1"/><text x="80.3636%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="80.1136%" y="373" width="0.0812%" height="15" fill="rgb(244,144,28)" fg:x="987" fg:w="1"/><text x="80.3636%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="80.1136%" y="357" width="0.0812%" height="15" fill="rgb(232,161,39)" fg:x="987" fg:w="1"/><text x="80.3636%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="80.1136%" y="341" width="0.0812%" height="15" fill="rgb(247,34,51)" fg:x="987" fg:w="1"/><text x="80.3636%" y="351.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (36 samples, 2.92%)</title><rect x="77.3539%" y="613" width="2.9221%" height="15" fill="rgb(225,132,2)" fg:x="953" fg:w="36"/><text x="77.6039%" y="623.50">pl..</text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="79.9513%" y="597" width="0.3247%" height="15" fill="rgb(209,159,44)" fg:x="985" fg:w="4"/><text x="80.2013%" y="607.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="80.1948%" y="581" width="0.0812%" height="15" fill="rgb(251,214,1)" fg:x="988" fg:w="1"/><text x="80.4448%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.1948%" y="565" width="0.0812%" height="15" fill="rgb(247,84,47)" fg:x="988" fg:w="1"/><text x="80.4448%" y="575.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="80.1948%" y="549" width="0.0812%" height="15" fill="rgb(240,111,43)" fg:x="988" fg:w="1"/><text x="80.4448%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.1948%" y="533" width="0.0812%" height="15" fill="rgb(215,214,35)" fg:x="988" fg:w="1"/><text x="80.4448%" y="543.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="80.1948%" y="517" width="0.0812%" height="15" fill="rgb(248,207,23)" fg:x="988" fg:w="1"/><text x="80.4448%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.1948%" y="501" width="0.0812%" height="15" fill="rgb(214,186,4)" fg:x="988" fg:w="1"/><text x="80.4448%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.1948%" y="485" width="0.0812%" height="15" fill="rgb(220,133,22)" fg:x="988" fg:w="1"/><text x="80.4448%" y="495.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="80.2760%" y="581" width="0.0812%" height="15" fill="rgb(239,134,19)" fg:x="989" fg:w="1"/><text x="80.5260%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="80.2760%" y="613" width="0.1623%" height="15" fill="rgb(250,140,9)" fg:x="989" fg:w="2"/><text x="80.5260%" y="623.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="80.2760%" y="597" width="0.1623%" height="15" fill="rgb(225,59,14)" fg:x="989" fg:w="2"/><text x="80.5260%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="80.3571%" y="581" width="0.0812%" height="15" fill="rgb(214,152,51)" fg:x="990" fg:w="1"/><text x="80.6071%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="80.3571%" y="565" width="0.0812%" height="15" fill="rgb(251,227,43)" fg:x="990" fg:w="1"/><text x="80.6071%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="80.3571%" y="549" width="0.0812%" height="15" fill="rgb(241,96,17)" fg:x="990" fg:w="1"/><text x="80.6071%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="80.3571%" y="533" width="0.0812%" height="15" fill="rgb(234,198,43)" fg:x="990" fg:w="1"/><text x="80.6071%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.3571%" y="517" width="0.0812%" height="15" fill="rgb(220,108,29)" fg:x="990" fg:w="1"/><text x="80.6071%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="80.3571%" y="501" width="0.0812%" height="15" fill="rgb(226,163,33)" fg:x="990" fg:w="1"/><text x="80.6071%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.3571%" y="485" width="0.0812%" height="15" fill="rgb(205,194,45)" fg:x="990" fg:w="1"/><text x="80.6071%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="80.4383%" y="597" width="0.0812%" height="15" fill="rgb(206,143,44)" fg:x="991" fg:w="1"/><text x="80.6883%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="80.4383%" y="581" width="0.0812%" height="15" fill="rgb(236,136,36)" fg:x="991" fg:w="1"/><text x="80.6883%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.4383%" y="565" width="0.0812%" height="15" fill="rgb(249,172,42)" fg:x="991" fg:w="1"/><text x="80.6883%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.4383%" y="549" width="0.0812%" height="15" fill="rgb(216,139,23)" fg:x="991" fg:w="1"/><text x="80.6883%" y="559.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="80.5195%" y="597" width="0.0812%" height="15" fill="rgb(207,166,20)" fg:x="992" fg:w="1"/><text x="80.7695%" y="607.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="80.5195%" y="581" width="0.0812%" height="15" fill="rgb(210,209,22)" fg:x="992" fg:w="1"/><text x="80.7695%" y="591.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (62 samples, 5.03%)</title><rect x="75.6494%" y="629" width="5.0325%" height="15" fill="rgb(232,118,20)" fg:x="932" fg:w="62"/><text x="75.8994%" y="639.50">&lt;tests..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.24%)</title><rect x="80.4383%" y="613" width="0.2435%" height="15" fill="rgb(238,113,42)" fg:x="991" fg:w="3"/><text x="80.6883%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="80.6006%" y="597" width="0.0812%" height="15" fill="rgb(231,42,5)" fg:x="993" fg:w="1"/><text x="80.8506%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="80.6006%" y="581" width="0.0812%" height="15" fill="rgb(243,166,24)" fg:x="993" fg:w="1"/><text x="80.8506%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="80.6006%" y="565" width="0.0812%" height="15" fill="rgb(237,226,12)" fg:x="993" fg:w="1"/><text x="80.8506%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.6006%" y="549" width="0.0812%" height="15" fill="rgb(229,133,24)" fg:x="993" fg:w="1"/><text x="80.8506%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.6006%" y="533" width="0.0812%" height="15" fill="rgb(238,33,43)" fg:x="993" fg:w="1"/><text x="80.8506%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.6006%" y="517" width="0.0812%" height="15" fill="rgb(227,59,38)" fg:x="993" fg:w="1"/><text x="80.8506%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.6006%" y="501" width="0.0812%" height="15" fill="rgb(230,97,0)" fg:x="993" fg:w="1"/><text x="80.8506%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.6006%" y="485" width="0.0812%" height="15" fill="rgb(250,173,50)" fg:x="993" fg:w="1"/><text x="80.8506%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.6006%" y="469" width="0.0812%" height="15" fill="rgb(240,15,50)" fg:x="993" fg:w="1"/><text x="80.8506%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="80.6006%" y="453" width="0.0812%" height="15" fill="rgb(221,93,22)" fg:x="993" fg:w="1"/><text x="80.8506%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="80.6006%" y="437" width="0.0812%" height="15" fill="rgb(245,180,53)" fg:x="993" fg:w="1"/><text x="80.8506%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="80.6006%" y="421" width="0.0812%" height="15" fill="rgb(231,88,51)" fg:x="993" fg:w="1"/><text x="80.8506%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.6006%" y="405" width="0.0812%" height="15" fill="rgb(240,58,21)" fg:x="993" fg:w="1"/><text x="80.8506%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.6006%" y="389" width="0.0812%" height="15" fill="rgb(237,21,10)" fg:x="993" fg:w="1"/><text x="80.8506%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="80.6006%" y="373" width="0.0812%" height="15" fill="rgb(218,43,11)" fg:x="993" fg:w="1"/><text x="80.8506%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="80.6006%" y="357" width="0.0812%" height="15" fill="rgb(218,221,29)" fg:x="993" fg:w="1"/><text x="80.8506%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="80.6006%" y="341" width="0.0812%" height="15" fill="rgb(214,118,42)" fg:x="993" fg:w="1"/><text x="80.8506%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="80.6006%" y="325" width="0.0812%" height="15" fill="rgb(251,200,26)" fg:x="993" fg:w="1"/><text x="80.8506%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.6006%" y="309" width="0.0812%" height="15" fill="rgb(237,101,39)" fg:x="993" fg:w="1"/><text x="80.8506%" y="319.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="80.6818%" y="613" width="0.0812%" height="15" fill="rgb(251,117,11)" fg:x="994" fg:w="1"/><text x="80.9318%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="80.6818%" y="597" width="0.0812%" height="15" fill="rgb(216,223,23)" fg:x="994" fg:w="1"/><text x="80.9318%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="80.6818%" y="581" width="0.0812%" height="15" fill="rgb(251,54,12)" fg:x="994" fg:w="1"/><text x="80.9318%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="80.6818%" y="565" width="0.0812%" height="15" fill="rgb(254,176,54)" fg:x="994" fg:w="1"/><text x="80.9318%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="80.6818%" y="549" width="0.0812%" height="15" fill="rgb(210,32,8)" fg:x="994" fg:w="1"/><text x="80.9318%" y="559.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="80.6818%" y="533" width="0.0812%" height="15" fill="rgb(235,52,38)" fg:x="994" fg:w="1"/><text x="80.9318%" y="543.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="80.6818%" y="517" width="0.0812%" height="15" fill="rgb(231,4,44)" fg:x="994" fg:w="1"/><text x="80.9318%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="80.6818%" y="501" width="0.0812%" height="15" fill="rgb(249,2,32)" fg:x="994" fg:w="1"/><text x="80.9318%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="80.7630%" y="581" width="0.0812%" height="15" fill="rgb(224,65,26)" fg:x="995" fg:w="1"/><text x="81.0130%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="80.7630%" y="565" width="0.0812%" height="15" fill="rgb(250,73,40)" fg:x="995" fg:w="1"/><text x="81.0130%" y="575.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="80.7630%" y="549" width="0.0812%" height="15" fill="rgb(253,177,16)" fg:x="995" fg:w="1"/><text x="81.0130%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.7630%" y="533" width="0.0812%" height="15" fill="rgb(217,32,34)" fg:x="995" fg:w="1"/><text x="81.0130%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="80.9253%" y="517" width="0.1623%" height="15" fill="rgb(212,7,10)" fg:x="997" fg:w="2"/><text x="81.1753%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="80.9253%" y="501" width="0.1623%" height="15" fill="rgb(245,89,8)" fg:x="997" fg:w="2"/><text x="81.1753%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.0065%" y="485" width="0.0812%" height="15" fill="rgb(237,16,53)" fg:x="998" fg:w="1"/><text x="81.2565%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.0065%" y="469" width="0.0812%" height="15" fill="rgb(250,204,30)" fg:x="998" fg:w="1"/><text x="81.2565%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.0065%" y="453" width="0.0812%" height="15" fill="rgb(208,77,27)" fg:x="998" fg:w="1"/><text x="81.2565%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.0065%" y="437" width="0.0812%" height="15" fill="rgb(250,204,28)" fg:x="998" fg:w="1"/><text x="81.2565%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.0065%" y="421" width="0.0812%" height="15" fill="rgb(244,63,21)" fg:x="998" fg:w="1"/><text x="81.2565%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.0065%" y="405" width="0.0812%" height="15" fill="rgb(236,85,44)" fg:x="998" fg:w="1"/><text x="81.2565%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.0877%" y="501" width="0.0812%" height="15" fill="rgb(215,98,4)" fg:x="999" fg:w="1"/><text x="81.3377%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.0877%" y="485" width="0.0812%" height="15" fill="rgb(235,38,11)" fg:x="999" fg:w="1"/><text x="81.3377%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="81.1688%" y="485" width="0.0812%" height="15" fill="rgb(254,186,25)" fg:x="1000" fg:w="1"/><text x="81.4188%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="81.1688%" y="469" width="0.0812%" height="15" fill="rgb(225,55,31)" fg:x="1000" fg:w="1"/><text x="81.4188%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="81.1688%" y="453" width="0.0812%" height="15" fill="rgb(211,15,21)" fg:x="1000" fg:w="1"/><text x="81.4188%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="81.1688%" y="437" width="0.0812%" height="15" fill="rgb(215,187,41)" fg:x="1000" fg:w="1"/><text x="81.4188%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="81.1688%" y="421" width="0.0812%" height="15" fill="rgb(248,69,32)" fg:x="1000" fg:w="1"/><text x="81.4188%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.1688%" y="405" width="0.0812%" height="15" fill="rgb(252,102,52)" fg:x="1000" fg:w="1"/><text x="81.4188%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.1688%" y="389" width="0.0812%" height="15" fill="rgb(253,140,32)" fg:x="1000" fg:w="1"/><text x="81.4188%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.1688%" y="373" width="0.0812%" height="15" fill="rgb(216,56,42)" fg:x="1000" fg:w="1"/><text x="81.4188%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.1688%" y="357" width="0.0812%" height="15" fill="rgb(216,184,14)" fg:x="1000" fg:w="1"/><text x="81.4188%" y="367.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.2500%" y="469" width="0.0812%" height="15" fill="rgb(237,187,27)" fg:x="1001" fg:w="1"/><text x="81.5000%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.2500%" y="453" width="0.0812%" height="15" fill="rgb(219,65,3)" fg:x="1001" fg:w="1"/><text x="81.5000%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="81.4123%" y="453" width="0.0812%" height="15" fill="rgb(245,83,25)" fg:x="1003" fg:w="1"/><text x="81.6623%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="81.3312%" y="469" width="0.2435%" height="15" fill="rgb(214,205,45)" fg:x="1002" fg:w="3"/><text x="81.5812%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.4935%" y="453" width="0.0812%" height="15" fill="rgb(241,20,18)" fg:x="1004" fg:w="1"/><text x="81.7435%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.4935%" y="437" width="0.0812%" height="15" fill="rgb(232,163,23)" fg:x="1004" fg:w="1"/><text x="81.7435%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.4935%" y="421" width="0.0812%" height="15" fill="rgb(214,5,46)" fg:x="1004" fg:w="1"/><text x="81.7435%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.4935%" y="405" width="0.0812%" height="15" fill="rgb(229,78,17)" fg:x="1004" fg:w="1"/><text x="81.7435%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="81.2500%" y="485" width="0.4058%" height="15" fill="rgb(248,89,10)" fg:x="1001" fg:w="5"/><text x="81.5000%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.5747%" y="469" width="0.0812%" height="15" fill="rgb(248,54,15)" fg:x="1005" fg:w="1"/><text x="81.8247%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.5747%" y="453" width="0.0812%" height="15" fill="rgb(223,116,6)" fg:x="1005" fg:w="1"/><text x="81.8247%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.5747%" y="437" width="0.0812%" height="15" fill="rgb(205,125,38)" fg:x="1005" fg:w="1"/><text x="81.8247%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.81%)</title><rect x="80.9253%" y="533" width="0.8117%" height="15" fill="rgb(251,78,38)" fg:x="997" fg:w="10"/><text x="81.1753%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="81.0877%" y="517" width="0.6494%" height="15" fill="rgb(253,78,28)" fg:x="999" fg:w="8"/><text x="81.3377%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="81.1688%" y="501" width="0.5682%" height="15" fill="rgb(209,120,3)" fg:x="1000" fg:w="7"/><text x="81.4188%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.6558%" y="485" width="0.0812%" height="15" fill="rgb(238,229,9)" fg:x="1006" fg:w="1"/><text x="81.9058%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.6558%" y="469" width="0.0812%" height="15" fill="rgb(253,159,18)" fg:x="1006" fg:w="1"/><text x="81.9058%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.8994%" y="437" width="0.0812%" height="15" fill="rgb(244,42,34)" fg:x="1009" fg:w="1"/><text x="82.1494%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="81.7370%" y="501" width="0.3247%" height="15" fill="rgb(224,8,7)" fg:x="1007" fg:w="4"/><text x="81.9870%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="81.7370%" y="485" width="0.3247%" height="15" fill="rgb(210,201,45)" fg:x="1007" fg:w="4"/><text x="81.9870%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="81.7370%" y="469" width="0.3247%" height="15" fill="rgb(252,185,21)" fg:x="1007" fg:w="4"/><text x="81.9870%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="81.7370%" y="453" width="0.3247%" height="15" fill="rgb(223,131,1)" fg:x="1007" fg:w="4"/><text x="81.9870%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.9805%" y="437" width="0.0812%" height="15" fill="rgb(245,141,16)" fg:x="1010" fg:w="1"/><text x="82.2305%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.9805%" y="421" width="0.0812%" height="15" fill="rgb(229,55,45)" fg:x="1010" fg:w="1"/><text x="82.2305%" y="431.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (5 samples, 0.41%)</title><rect x="81.7370%" y="517" width="0.4058%" height="15" fill="rgb(208,92,15)" fg:x="1007" fg:w="5"/><text x="81.9870%" y="527.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="82.0617%" y="501" width="0.0812%" height="15" fill="rgb(234,185,47)" fg:x="1011" fg:w="1"/><text x="82.3117%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="82.0617%" y="485" width="0.0812%" height="15" fill="rgb(253,104,50)" fg:x="1011" fg:w="1"/><text x="82.3117%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.0617%" y="469" width="0.0812%" height="15" fill="rgb(205,70,7)" fg:x="1011" fg:w="1"/><text x="82.3117%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="82.1429%" y="485" width="0.1623%" height="15" fill="rgb(240,178,43)" fg:x="1012" fg:w="2"/><text x="82.3929%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="82.3052%" y="485" width="0.0812%" height="15" fill="rgb(214,112,2)" fg:x="1014" fg:w="1"/><text x="82.5552%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.3052%" y="469" width="0.0812%" height="15" fill="rgb(206,46,17)" fg:x="1014" fg:w="1"/><text x="82.5552%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::contains_key (1 samples, 0.08%)</title><rect x="82.3052%" y="453" width="0.0812%" height="15" fill="rgb(225,220,16)" fg:x="1014" fg:w="1"/><text x="82.5552%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="82.4675%" y="389" width="0.1623%" height="15" fill="rgb(238,65,40)" fg:x="1016" fg:w="2"/><text x="82.7175%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="82.4675%" y="373" width="0.1623%" height="15" fill="rgb(230,151,21)" fg:x="1016" fg:w="2"/><text x="82.7175%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="82.4675%" y="357" width="0.1623%" height="15" fill="rgb(218,58,49)" fg:x="1016" fg:w="2"/><text x="82.7175%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="82.4675%" y="405" width="0.3247%" height="15" fill="rgb(219,179,14)" fg:x="1016" fg:w="4"/><text x="82.7175%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="82.6299%" y="389" width="0.1623%" height="15" fill="rgb(223,72,1)" fg:x="1018" fg:w="2"/><text x="82.8799%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.7110%" y="373" width="0.0812%" height="15" fill="rgb(238,126,10)" fg:x="1019" fg:w="1"/><text x="82.9610%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.7922%" y="405" width="0.0812%" height="15" fill="rgb(224,206,38)" fg:x="1020" fg:w="1"/><text x="83.0422%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (6 samples, 0.49%)</title><rect x="82.4675%" y="437" width="0.4870%" height="15" fill="rgb(212,201,54)" fg:x="1016" fg:w="6"/><text x="82.7175%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.49%)</title><rect x="82.4675%" y="421" width="0.4870%" height="15" fill="rgb(218,154,48)" fg:x="1016" fg:w="6"/><text x="82.7175%" y="431.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="82.8734%" y="405" width="0.0812%" height="15" fill="rgb(232,93,24)" fg:x="1021" fg:w="1"/><text x="83.1234%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.65%)</title><rect x="82.4675%" y="469" width="0.6494%" height="15" fill="rgb(245,30,21)" fg:x="1016" fg:w="8"/><text x="82.7175%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.65%)</title><rect x="82.4675%" y="453" width="0.6494%" height="15" fill="rgb(242,148,29)" fg:x="1016" fg:w="8"/><text x="82.7175%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="82.9545%" y="437" width="0.1623%" height="15" fill="rgb(244,153,54)" fg:x="1022" fg:w="2"/><text x="83.2045%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="83.0357%" y="421" width="0.0812%" height="15" fill="rgb(252,87,22)" fg:x="1023" fg:w="1"/><text x="83.2857%" y="431.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (13 samples, 1.06%)</title><rect x="82.1429%" y="517" width="1.0552%" height="15" fill="rgb(210,51,29)" fg:x="1012" fg:w="13"/><text x="82.3929%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.06%)</title><rect x="82.1429%" y="501" width="1.0552%" height="15" fill="rgb(242,136,47)" fg:x="1012" fg:w="13"/><text x="82.3929%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.81%)</title><rect x="82.3864%" y="485" width="0.8117%" height="15" fill="rgb(238,68,4)" fg:x="1015" fg:w="10"/><text x="82.6364%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.1169%" y="469" width="0.0812%" height="15" fill="rgb(242,161,30)" fg:x="1024" fg:w="1"/><text x="83.3669%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="83.2792%" y="373" width="0.0812%" height="15" fill="rgb(218,58,44)" fg:x="1026" fg:w="1"/><text x="83.5292%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="83.2792%" y="357" width="0.0812%" height="15" fill="rgb(252,125,32)" fg:x="1026" fg:w="1"/><text x="83.5292%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="83.2792%" y="341" width="0.0812%" height="15" fill="rgb(219,178,0)" fg:x="1026" fg:w="1"/><text x="83.5292%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.2792%" y="325" width="0.0812%" height="15" fill="rgb(213,152,7)" fg:x="1026" fg:w="1"/><text x="83.5292%" y="335.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="83.3604%" y="341" width="0.0812%" height="15" fill="rgb(249,109,34)" fg:x="1027" fg:w="1"/><text x="83.6104%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="83.2792%" y="389" width="0.2435%" height="15" fill="rgb(232,96,21)" fg:x="1026" fg:w="3"/><text x="83.5292%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="83.3604%" y="373" width="0.1623%" height="15" fill="rgb(228,27,39)" fg:x="1027" fg:w="2"/><text x="83.6104%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="83.3604%" y="357" width="0.1623%" height="15" fill="rgb(211,182,52)" fg:x="1027" fg:w="2"/><text x="83.6104%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.4416%" y="341" width="0.0812%" height="15" fill="rgb(234,178,38)" fg:x="1028" fg:w="1"/><text x="83.6916%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="83.2792%" y="405" width="0.3247%" height="15" fill="rgb(221,111,3)" fg:x="1026" fg:w="4"/><text x="83.5292%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.5227%" y="389" width="0.0812%" height="15" fill="rgb(228,175,21)" fg:x="1029" fg:w="1"/><text x="83.7727%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.5227%" y="373" width="0.0812%" height="15" fill="rgb(228,174,43)" fg:x="1029" fg:w="1"/><text x="83.7727%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.5227%" y="357" width="0.0812%" height="15" fill="rgb(211,191,0)" fg:x="1029" fg:w="1"/><text x="83.7727%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="83.2792%" y="421" width="0.4058%" height="15" fill="rgb(253,117,3)" fg:x="1026" fg:w="5"/><text x="83.5292%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.6039%" y="405" width="0.0812%" height="15" fill="rgb(241,127,19)" fg:x="1030" fg:w="1"/><text x="83.8539%" y="415.50"></text></g><g><title>engine::session::Session::close (38 samples, 3.08%)</title><rect x="80.6818%" y="629" width="3.0844%" height="15" fill="rgb(218,103,12)" fg:x="994" fg:w="38"/><text x="80.9318%" y="639.50">eng..</text></g><g><title>engine::session::state::State::close (37 samples, 3.00%)</title><rect x="80.7630%" y="613" width="3.0032%" height="15" fill="rgb(236,214,43)" fg:x="995" fg:w="37"/><text x="81.0130%" y="623.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (37 samples, 3.00%)</title><rect x="80.7630%" y="597" width="3.0032%" height="15" fill="rgb(244,144,19)" fg:x="995" fg:w="37"/><text x="81.0130%" y="607.50">eng..</text></g><g><title>core::iter::adapters::try_process (36 samples, 2.92%)</title><rect x="80.8442%" y="581" width="2.9221%" height="15" fill="rgb(246,188,10)" fg:x="996" fg:w="36"/><text x="81.0942%" y="591.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (36 samples, 2.92%)</title><rect x="80.8442%" y="565" width="2.9221%" height="15" fill="rgb(212,193,33)" fg:x="996" fg:w="36"/><text x="81.0942%" y="575.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (36 samples, 2.92%)</title><rect x="80.8442%" y="549" width="2.9221%" height="15" fill="rgb(241,51,29)" fg:x="996" fg:w="36"/><text x="81.0942%" y="559.50">en..</text></g><g><title>kernel::model::any_entity_changes (25 samples, 2.03%)</title><rect x="81.7370%" y="533" width="2.0292%" height="15" fill="rgb(211,58,19)" fg:x="1007" fg:w="25"/><text x="81.9870%" y="543.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.57%)</title><rect x="83.1981%" y="517" width="0.5682%" height="15" fill="rgb(229,111,26)" fg:x="1025" fg:w="7"/><text x="83.4481%" y="527.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.57%)</title><rect x="83.1981%" y="501" width="0.5682%" height="15" fill="rgb(213,115,40)" fg:x="1025" fg:w="7"/><text x="83.4481%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.57%)</title><rect x="83.1981%" y="485" width="0.5682%" height="15" fill="rgb(209,56,44)" fg:x="1025" fg:w="7"/><text x="83.4481%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.57%)</title><rect x="83.1981%" y="469" width="0.5682%" height="15" fill="rgb(230,108,32)" fg:x="1025" fg:w="7"/><text x="83.4481%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="83.2792%" y="453" width="0.4870%" height="15" fill="rgb(216,165,31)" fg:x="1026" fg:w="6"/><text x="83.5292%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="83.2792%" y="437" width="0.4870%" height="15" fill="rgb(218,122,21)" fg:x="1026" fg:w="6"/><text x="83.5292%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="83.6851%" y="421" width="0.0812%" height="15" fill="rgb(223,224,47)" fg:x="1031" fg:w="1"/><text x="83.9351%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.6851%" y="405" width="0.0812%" height="15" fill="rgb(238,102,44)" fg:x="1031" fg:w="1"/><text x="83.9351%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="83.9286%" y="501" width="0.2435%" height="15" fill="rgb(236,46,40)" fg:x="1034" fg:w="3"/><text x="84.1786%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="83.9286%" y="485" width="0.2435%" height="15" fill="rgb(247,202,50)" fg:x="1034" fg:w="3"/><text x="84.1786%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="83.9286%" y="469" width="0.2435%" height="15" fill="rgb(209,99,20)" fg:x="1034" fg:w="3"/><text x="84.1786%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="83.9286%" y="453" width="0.2435%" height="15" fill="rgb(252,27,34)" fg:x="1034" fg:w="3"/><text x="84.1786%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="83.9286%" y="437" width="0.2435%" height="15" fill="rgb(215,206,23)" fg:x="1034" fg:w="3"/><text x="84.1786%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="84.1721%" y="437" width="0.1623%" height="15" fill="rgb(212,135,36)" fg:x="1037" fg:w="2"/><text x="84.4221%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.2532%" y="421" width="0.0812%" height="15" fill="rgb(240,189,1)" fg:x="1038" fg:w="1"/><text x="84.5032%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.2532%" y="405" width="0.0812%" height="15" fill="rgb(242,56,20)" fg:x="1038" fg:w="1"/><text x="84.5032%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.2532%" y="389" width="0.0812%" height="15" fill="rgb(247,132,33)" fg:x="1038" fg:w="1"/><text x="84.5032%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="84.2532%" y="373" width="0.0812%" height="15" fill="rgb(208,149,11)" fg:x="1038" fg:w="1"/><text x="84.5032%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="84.2532%" y="357" width="0.0812%" height="15" fill="rgb(211,33,11)" fg:x="1038" fg:w="1"/><text x="84.5032%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="84.2532%" y="341" width="0.0812%" height="15" fill="rgb(221,29,38)" fg:x="1038" fg:w="1"/><text x="84.5032%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.2532%" y="325" width="0.0812%" height="15" fill="rgb(206,182,49)" fg:x="1038" fg:w="1"/><text x="84.5032%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.2532%" y="309" width="0.0812%" height="15" fill="rgb(216,140,1)" fg:x="1038" fg:w="1"/><text x="84.5032%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="84.2532%" y="293" width="0.0812%" height="15" fill="rgb(232,57,40)" fg:x="1038" fg:w="1"/><text x="84.5032%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="84.2532%" y="277" width="0.0812%" height="15" fill="rgb(224,186,18)" fg:x="1038" fg:w="1"/><text x="84.5032%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="84.2532%" y="261" width="0.0812%" height="15" fill="rgb(215,121,11)" fg:x="1038" fg:w="1"/><text x="84.5032%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="84.2532%" y="245" width="0.0812%" height="15" fill="rgb(245,147,10)" fg:x="1038" fg:w="1"/><text x="84.5032%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.2532%" y="229" width="0.0812%" height="15" fill="rgb(238,153,13)" fg:x="1038" fg:w="1"/><text x="84.5032%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="84.3344%" y="437" width="0.1623%" height="15" fill="rgb(233,108,0)" fg:x="1039" fg:w="2"/><text x="84.5844%" y="447.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="84.3344%" y="421" width="0.1623%" height="15" fill="rgb(212,157,17)" fg:x="1039" fg:w="2"/><text x="84.5844%" y="431.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="84.3344%" y="405" width="0.1623%" height="15" fill="rgb(225,213,38)" fg:x="1039" fg:w="2"/><text x="84.5844%" y="415.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="84.3344%" y="389" width="0.1623%" height="15" fill="rgb(248,16,11)" fg:x="1039" fg:w="2"/><text x="84.5844%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="84.3344%" y="373" width="0.1623%" height="15" fill="rgb(241,33,4)" fg:x="1039" fg:w="2"/><text x="84.5844%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="84.3344%" y="357" width="0.1623%" height="15" fill="rgb(222,26,43)" fg:x="1039" fg:w="2"/><text x="84.5844%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="84.3344%" y="341" width="0.1623%" height="15" fill="rgb(243,29,36)" fg:x="1039" fg:w="2"/><text x="84.5844%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="84.3344%" y="325" width="0.1623%" height="15" fill="rgb(241,9,27)" fg:x="1039" fg:w="2"/><text x="84.5844%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.4156%" y="309" width="0.0812%" height="15" fill="rgb(205,117,26)" fg:x="1040" fg:w="1"/><text x="84.6656%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="84.4968%" y="437" width="0.0812%" height="15" fill="rgb(209,80,39)" fg:x="1041" fg:w="1"/><text x="84.7468%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.4968%" y="421" width="0.0812%" height="15" fill="rgb(239,155,6)" fg:x="1041" fg:w="1"/><text x="84.7468%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.4968%" y="405" width="0.0812%" height="15" fill="rgb(212,104,12)" fg:x="1041" fg:w="1"/><text x="84.7468%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.4968%" y="389" width="0.0812%" height="15" fill="rgb(234,204,3)" fg:x="1041" fg:w="1"/><text x="84.7468%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.4968%" y="373" width="0.0812%" height="15" fill="rgb(251,218,7)" fg:x="1041" fg:w="1"/><text x="84.7468%" y="383.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (7 samples, 0.57%)</title><rect x="84.1721%" y="485" width="0.5682%" height="15" fill="rgb(221,81,32)" fg:x="1037" fg:w="7"/><text x="84.4221%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.57%)</title><rect x="84.1721%" y="469" width="0.5682%" height="15" fill="rgb(214,152,26)" fg:x="1037" fg:w="7"/><text x="84.4221%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="84.1721%" y="453" width="0.5682%" height="15" fill="rgb(223,22,3)" fg:x="1037" fg:w="7"/><text x="84.4221%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="84.5779%" y="437" width="0.1623%" height="15" fill="rgb(207,174,7)" fg:x="1042" fg:w="2"/><text x="84.8279%" y="447.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="84.5779%" y="421" width="0.1623%" height="15" fill="rgb(224,19,52)" fg:x="1042" fg:w="2"/><text x="84.8279%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="84.5779%" y="405" width="0.1623%" height="15" fill="rgb(228,24,14)" fg:x="1042" fg:w="2"/><text x="84.8279%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="84.5779%" y="389" width="0.1623%" height="15" fill="rgb(230,153,43)" fg:x="1042" fg:w="2"/><text x="84.8279%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.6591%" y="373" width="0.0812%" height="15" fill="rgb(231,106,12)" fg:x="1043" fg:w="1"/><text x="84.9091%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.6591%" y="357" width="0.0812%" height="15" fill="rgb(215,92,2)" fg:x="1043" fg:w="1"/><text x="84.9091%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.6591%" y="341" width="0.0812%" height="15" fill="rgb(249,143,25)" fg:x="1043" fg:w="1"/><text x="84.9091%" y="351.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="84.6591%" y="325" width="0.0812%" height="15" fill="rgb(252,7,35)" fg:x="1043" fg:w="1"/><text x="84.9091%" y="335.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (11 samples, 0.89%)</title><rect x="83.9286%" y="533" width="0.8929%" height="15" fill="rgb(216,69,40)" fg:x="1034" fg:w="11"/><text x="84.1786%" y="543.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (11 samples, 0.89%)</title><rect x="83.9286%" y="517" width="0.8929%" height="15" fill="rgb(240,36,33)" fg:x="1034" fg:w="11"/><text x="84.1786%" y="527.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (8 samples, 0.65%)</title><rect x="84.1721%" y="501" width="0.6494%" height="15" fill="rgb(231,128,14)" fg:x="1037" fg:w="8"/><text x="84.4221%" y="511.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="84.7403%" y="485" width="0.0812%" height="15" fill="rgb(245,143,14)" fg:x="1044" fg:w="1"/><text x="84.9903%" y="495.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (2 samples, 0.16%)</title><rect x="84.9026%" y="389" width="0.1623%" height="15" fill="rgb(222,130,28)" fg:x="1046" fg:w="2"/><text x="85.1526%" y="399.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="84.9026%" y="373" width="0.1623%" height="15" fill="rgb(212,10,48)" fg:x="1046" fg:w="2"/><text x="85.1526%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (2 samples, 0.16%)</title><rect x="84.9026%" y="357" width="0.1623%" height="15" fill="rgb(254,118,45)" fg:x="1046" fg:w="2"/><text x="85.1526%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="84.9026%" y="341" width="0.1623%" height="15" fill="rgb(228,6,45)" fg:x="1046" fg:w="2"/><text x="85.1526%" y="351.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="84.9026%" y="325" width="0.1623%" height="15" fill="rgb(241,18,35)" fg:x="1046" fg:w="2"/><text x="85.1526%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="84.9026%" y="309" width="0.1623%" height="15" fill="rgb(227,214,53)" fg:x="1046" fg:w="2"/><text x="85.1526%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.9838%" y="293" width="0.0812%" height="15" fill="rgb(224,107,51)" fg:x="1047" fg:w="1"/><text x="85.2338%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.0649%" y="309" width="0.0812%" height="15" fill="rgb(248,60,28)" fg:x="1048" fg:w="1"/><text x="85.3149%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.0649%" y="293" width="0.0812%" height="15" fill="rgb(249,101,23)" fg:x="1048" fg:w="1"/><text x="85.3149%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.0649%" y="277" width="0.0812%" height="15" fill="rgb(228,51,19)" fg:x="1048" fg:w="1"/><text x="85.3149%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.0649%" y="261" width="0.0812%" height="15" fill="rgb(213,20,6)" fg:x="1048" fg:w="1"/><text x="85.3149%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="85.0649%" y="245" width="0.0812%" height="15" fill="rgb(212,124,10)" fg:x="1048" fg:w="1"/><text x="85.3149%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="85.0649%" y="229" width="0.0812%" height="15" fill="rgb(248,3,40)" fg:x="1048" fg:w="1"/><text x="85.3149%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="85.0649%" y="213" width="0.0812%" height="15" fill="rgb(223,178,23)" fg:x="1048" fg:w="1"/><text x="85.3149%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.0649%" y="197" width="0.0812%" height="15" fill="rgb(240,132,45)" fg:x="1048" fg:w="1"/><text x="85.3149%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.0649%" y="181" width="0.0812%" height="15" fill="rgb(245,164,36)" fg:x="1048" fg:w="1"/><text x="85.3149%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="85.0649%" y="165" width="0.0812%" height="15" fill="rgb(231,188,53)" fg:x="1048" fg:w="1"/><text x="85.3149%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="85.0649%" y="149" width="0.0812%" height="15" fill="rgb(237,198,39)" fg:x="1048" fg:w="1"/><text x="85.3149%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="85.0649%" y="133" width="0.0812%" height="15" fill="rgb(223,120,35)" fg:x="1048" fg:w="1"/><text x="85.3149%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="85.0649%" y="117" width="0.0812%" height="15" fill="rgb(253,107,49)" fg:x="1048" fg:w="1"/><text x="85.3149%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.0649%" y="101" width="0.0812%" height="15" fill="rgb(216,44,31)" fg:x="1048" fg:w="1"/><text x="85.3149%" y="111.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (3 samples, 0.24%)</title><rect x="85.0649%" y="357" width="0.2435%" height="15" fill="rgb(253,87,21)" fg:x="1048" fg:w="3"/><text x="85.3149%" y="367.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="85.0649%" y="341" width="0.2435%" height="15" fill="rgb(226,18,2)" fg:x="1048" fg:w="3"/><text x="85.3149%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="85.0649%" y="325" width="0.2435%" height="15" fill="rgb(216,8,46)" fg:x="1048" fg:w="3"/><text x="85.3149%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="85.1461%" y="309" width="0.1623%" height="15" fill="rgb(226,140,39)" fg:x="1049" fg:w="2"/><text x="85.3961%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.1461%" y="293" width="0.1623%" height="15" fill="rgb(221,194,54)" fg:x="1049" fg:w="2"/><text x="85.3961%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="85.1461%" y="277" width="0.1623%" height="15" fill="rgb(213,92,11)" fg:x="1049" fg:w="2"/><text x="85.3961%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.1461%" y="261" width="0.1623%" height="15" fill="rgb(229,162,46)" fg:x="1049" fg:w="2"/><text x="85.3961%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="85.1461%" y="245" width="0.1623%" height="15" fill="rgb(214,111,36)" fg:x="1049" fg:w="2"/><text x="85.3961%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.3084%" y="341" width="0.0812%" height="15" fill="rgb(207,6,21)" fg:x="1051" fg:w="1"/><text x="85.5584%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="85.3896%" y="341" width="0.0812%" height="15" fill="rgb(213,127,38)" fg:x="1052" fg:w="1"/><text x="85.6396%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.3896%" y="325" width="0.0812%" height="15" fill="rgb(238,118,32)" fg:x="1052" fg:w="1"/><text x="85.6396%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="85.4708%" y="309" width="0.0812%" height="15" fill="rgb(240,139,39)" fg:x="1053" fg:w="1"/><text x="85.7208%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="85.3084%" y="357" width="0.3247%" height="15" fill="rgb(235,10,37)" fg:x="1051" fg:w="4"/><text x="85.5584%" y="367.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="85.4708%" y="341" width="0.1623%" height="15" fill="rgb(249,171,38)" fg:x="1053" fg:w="2"/><text x="85.7208%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="85.4708%" y="325" width="0.1623%" height="15" fill="rgb(242,144,32)" fg:x="1053" fg:w="2"/><text x="85.7208%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="85.5519%" y="309" width="0.0812%" height="15" fill="rgb(217,117,21)" fg:x="1054" fg:w="1"/><text x="85.8019%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.5519%" y="293" width="0.0812%" height="15" fill="rgb(249,87,1)" fg:x="1054" fg:w="1"/><text x="85.8019%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="85.5519%" y="277" width="0.0812%" height="15" fill="rgb(248,196,48)" fg:x="1054" fg:w="1"/><text x="85.8019%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.5519%" y="261" width="0.0812%" height="15" fill="rgb(251,206,33)" fg:x="1054" fg:w="1"/><text x="85.8019%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="85.5519%" y="245" width="0.0812%" height="15" fill="rgb(232,141,28)" fg:x="1054" fg:w="1"/><text x="85.8019%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="85.7143%" y="261" width="0.0812%" height="15" fill="rgb(209,167,14)" fg:x="1056" fg:w="1"/><text x="85.9643%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.7143%" y="245" width="0.0812%" height="15" fill="rgb(225,11,50)" fg:x="1056" fg:w="1"/><text x="85.9643%" y="255.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.24%)</title><rect x="85.6331%" y="357" width="0.2435%" height="15" fill="rgb(209,50,20)" fg:x="1055" fg:w="3"/><text x="85.8831%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="85.6331%" y="341" width="0.2435%" height="15" fill="rgb(212,17,46)" fg:x="1055" fg:w="3"/><text x="85.8831%" y="351.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="85.6331%" y="325" width="0.2435%" height="15" fill="rgb(216,101,39)" fg:x="1055" fg:w="3"/><text x="85.8831%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="85.6331%" y="309" width="0.2435%" height="15" fill="rgb(212,228,48)" fg:x="1055" fg:w="3"/><text x="85.8831%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.24%)</title><rect x="85.6331%" y="293" width="0.2435%" height="15" fill="rgb(250,6,50)" fg:x="1055" fg:w="3"/><text x="85.8831%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="85.6331%" y="277" width="0.2435%" height="15" fill="rgb(250,160,48)" fg:x="1055" fg:w="3"/><text x="85.8831%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="85.7955%" y="261" width="0.0812%" height="15" fill="rgb(244,216,33)" fg:x="1057" fg:w="1"/><text x="86.0455%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.7955%" y="245" width="0.0812%" height="15" fill="rgb(207,157,5)" fg:x="1057" fg:w="1"/><text x="86.0455%" y="255.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="85.7955%" y="229" width="0.0812%" height="15" fill="rgb(228,199,8)" fg:x="1057" fg:w="1"/><text x="86.0455%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.7955%" y="213" width="0.0812%" height="15" fill="rgb(227,80,20)" fg:x="1057" fg:w="1"/><text x="86.0455%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="85.7955%" y="197" width="0.0812%" height="15" fill="rgb(222,9,33)" fg:x="1057" fg:w="1"/><text x="86.0455%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.7955%" y="181" width="0.0812%" height="15" fill="rgb(239,44,28)" fg:x="1057" fg:w="1"/><text x="86.0455%" y="191.50"></text></g><g><title>kernel::model::EntityPtr::key (2 samples, 0.16%)</title><rect x="85.8766%" y="357" width="0.1623%" height="15" fill="rgb(249,187,43)" fg:x="1058" fg:w="2"/><text x="86.1266%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.9578%" y="341" width="0.0812%" height="15" fill="rgb(216,141,28)" fg:x="1059" fg:w="1"/><text x="86.2078%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.9578%" y="325" width="0.0812%" height="15" fill="rgb(230,154,53)" fg:x="1059" fg:w="1"/><text x="86.2078%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="85.9578%" y="309" width="0.0812%" height="15" fill="rgb(227,82,4)" fg:x="1059" fg:w="1"/><text x="86.2078%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="85.9578%" y="293" width="0.0812%" height="15" fill="rgb(220,107,16)" fg:x="1059" fg:w="1"/><text x="86.2078%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="85.9578%" y="277" width="0.0812%" height="15" fill="rgb(207,187,2)" fg:x="1059" fg:w="1"/><text x="86.2078%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.9578%" y="261" width="0.0812%" height="15" fill="rgb(210,162,52)" fg:x="1059" fg:w="1"/><text x="86.2078%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.9578%" y="245" width="0.0812%" height="15" fill="rgb(217,216,49)" fg:x="1059" fg:w="1"/><text x="86.2078%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="85.9578%" y="229" width="0.0812%" height="15" fill="rgb(218,146,49)" fg:x="1059" fg:w="1"/><text x="86.2078%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="85.9578%" y="213" width="0.0812%" height="15" fill="rgb(216,55,40)" fg:x="1059" fg:w="1"/><text x="86.2078%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="85.9578%" y="197" width="0.0812%" height="15" fill="rgb(208,196,21)" fg:x="1059" fg:w="1"/><text x="86.2078%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="85.9578%" y="181" width="0.0812%" height="15" fill="rgb(242,117,42)" fg:x="1059" fg:w="1"/><text x="86.2078%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.9578%" y="165" width="0.0812%" height="15" fill="rgb(210,11,23)" fg:x="1059" fg:w="1"/><text x="86.2078%" y="175.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="86.0390%" y="309" width="0.0812%" height="15" fill="rgb(217,110,2)" fg:x="1060" fg:w="1"/><text x="86.2890%" y="319.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="86.0390%" y="293" width="0.0812%" height="15" fill="rgb(229,77,54)" fg:x="1060" fg:w="1"/><text x="86.2890%" y="303.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="86.0390%" y="277" width="0.0812%" height="15" fill="rgb(218,53,16)" fg:x="1060" fg:w="1"/><text x="86.2890%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="86.2013%" y="277" width="0.2435%" height="15" fill="rgb(215,38,13)" fg:x="1062" fg:w="3"/><text x="86.4513%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="86.2013%" y="261" width="0.2435%" height="15" fill="rgb(235,42,18)" fg:x="1062" fg:w="3"/><text x="86.4513%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="86.2013%" y="245" width="0.2435%" height="15" fill="rgb(219,66,54)" fg:x="1062" fg:w="3"/><text x="86.4513%" y="255.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (3 samples, 0.24%)</title><rect x="86.2013%" y="229" width="0.2435%" height="15" fill="rgb(222,205,4)" fg:x="1062" fg:w="3"/><text x="86.4513%" y="239.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="86.2013%" y="213" width="0.2435%" height="15" fill="rgb(227,213,46)" fg:x="1062" fg:w="3"/><text x="86.4513%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="86.2825%" y="197" width="0.1623%" height="15" fill="rgb(250,145,42)" fg:x="1063" fg:w="2"/><text x="86.5325%" y="207.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="86.2825%" y="181" width="0.1623%" height="15" fill="rgb(219,15,2)" fg:x="1063" fg:w="2"/><text x="86.5325%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="86.2825%" y="165" width="0.1623%" height="15" fill="rgb(231,181,52)" fg:x="1063" fg:w="2"/><text x="86.5325%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="86.2825%" y="149" width="0.1623%" height="15" fill="rgb(235,1,42)" fg:x="1063" fg:w="2"/><text x="86.5325%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.3636%" y="133" width="0.0812%" height="15" fill="rgb(249,88,27)" fg:x="1064" fg:w="1"/><text x="86.6136%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="86.4448%" y="229" width="0.0812%" height="15" fill="rgb(235,145,16)" fg:x="1065" fg:w="1"/><text x="86.6948%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.4448%" y="213" width="0.0812%" height="15" fill="rgb(237,114,19)" fg:x="1065" fg:w="1"/><text x="86.6948%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="86.4448%" y="197" width="0.0812%" height="15" fill="rgb(238,51,50)" fg:x="1065" fg:w="1"/><text x="86.6948%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="86.6071%" y="213" width="0.1623%" height="15" fill="rgb(205,194,25)" fg:x="1067" fg:w="2"/><text x="86.8571%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="86.6071%" y="197" width="0.1623%" height="15" fill="rgb(215,203,17)" fg:x="1067" fg:w="2"/><text x="86.8571%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="86.7695%" y="197" width="0.0812%" height="15" fill="rgb(233,112,49)" fg:x="1069" fg:w="1"/><text x="87.0195%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="86.7695%" y="213" width="0.1623%" height="15" fill="rgb(241,130,26)" fg:x="1069" fg:w="2"/><text x="87.0195%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="86.8506%" y="197" width="0.0812%" height="15" fill="rgb(252,223,19)" fg:x="1070" fg:w="1"/><text x="87.1006%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="87.0130%" y="149" width="0.1623%" height="15" fill="rgb(211,95,25)" fg:x="1072" fg:w="2"/><text x="87.2630%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="87.1753%" y="149" width="0.0812%" height="15" fill="rgb(251,182,27)" fg:x="1074" fg:w="1"/><text x="87.4253%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.1753%" y="133" width="0.0812%" height="15" fill="rgb(238,24,4)" fg:x="1074" fg:w="1"/><text x="87.4253%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.1753%" y="117" width="0.0812%" height="15" fill="rgb(224,220,25)" fg:x="1074" fg:w="1"/><text x="87.4253%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.1753%" y="101" width="0.0812%" height="15" fill="rgb(239,133,26)" fg:x="1074" fg:w="1"/><text x="87.4253%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (17 samples, 1.38%)</title><rect x="87.2565%" y="149" width="1.3799%" height="15" fill="rgb(211,94,48)" fg:x="1075" fg:w="17"/><text x="87.5065%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (17 samples, 1.38%)</title><rect x="87.2565%" y="133" width="1.3799%" height="15" fill="rgb(239,87,6)" fg:x="1075" fg:w="17"/><text x="87.5065%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (17 samples, 1.38%)</title><rect x="87.2565%" y="117" width="1.3799%" height="15" fill="rgb(227,62,0)" fg:x="1075" fg:w="17"/><text x="87.5065%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 1.79%)</title><rect x="87.0130%" y="197" width="1.7857%" height="15" fill="rgb(211,226,4)" fg:x="1072" fg:w="22"/><text x="87.2630%" y="207.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (22 samples, 1.79%)</title><rect x="87.0130%" y="181" width="1.7857%" height="15" fill="rgb(253,38,52)" fg:x="1072" fg:w="22"/><text x="87.2630%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (22 samples, 1.79%)</title><rect x="87.0130%" y="165" width="1.7857%" height="15" fill="rgb(229,126,40)" fg:x="1072" fg:w="22"/><text x="87.2630%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="88.6364%" y="149" width="0.1623%" height="15" fill="rgb(229,165,44)" fg:x="1092" fg:w="2"/><text x="88.8864%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="88.9610%" y="181" width="0.0812%" height="15" fill="rgb(247,95,47)" fg:x="1096" fg:w="1"/><text x="89.2110%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.9610%" y="165" width="0.0812%" height="15" fill="rgb(216,140,30)" fg:x="1096" fg:w="1"/><text x="89.2110%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.9610%" y="149" width="0.0812%" height="15" fill="rgb(246,214,8)" fg:x="1096" fg:w="1"/><text x="89.2110%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.9610%" y="133" width="0.0812%" height="15" fill="rgb(227,224,15)" fg:x="1096" fg:w="1"/><text x="89.2110%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="89.0422%" y="181" width="0.0812%" height="15" fill="rgb(233,175,4)" fg:x="1097" fg:w="1"/><text x="89.2922%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (28 samples, 2.27%)</title><rect x="86.9318%" y="213" width="2.2727%" height="15" fill="rgb(221,66,45)" fg:x="1071" fg:w="28"/><text x="87.1818%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.41%)</title><rect x="88.7987%" y="197" width="0.4058%" height="15" fill="rgb(221,178,18)" fg:x="1094" fg:w="5"/><text x="89.0487%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="89.1234%" y="181" width="0.0812%" height="15" fill="rgb(213,81,29)" fg:x="1098" fg:w="1"/><text x="89.3734%" y="191.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="89.1234%" y="165" width="0.0812%" height="15" fill="rgb(220,89,49)" fg:x="1098" fg:w="1"/><text x="89.3734%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (34 samples, 2.76%)</title><rect x="86.5260%" y="229" width="2.7597%" height="15" fill="rgb(227,60,33)" fg:x="1066" fg:w="34"/><text x="86.7760%" y="239.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="89.2045%" y="213" width="0.0812%" height="15" fill="rgb(205,113,12)" fg:x="1099" fg:w="1"/><text x="89.4545%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="89.2045%" y="197" width="0.0812%" height="15" fill="rgb(211,32,1)" fg:x="1099" fg:w="1"/><text x="89.4545%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="89.2045%" y="181" width="0.0812%" height="15" fill="rgb(246,2,12)" fg:x="1099" fg:w="1"/><text x="89.4545%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.2045%" y="165" width="0.0812%" height="15" fill="rgb(243,37,27)" fg:x="1099" fg:w="1"/><text x="89.4545%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.2045%" y="149" width="0.0812%" height="15" fill="rgb(248,211,31)" fg:x="1099" fg:w="1"/><text x="89.4545%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.2045%" y="133" width="0.0812%" height="15" fill="rgb(242,146,47)" fg:x="1099" fg:w="1"/><text x="89.4545%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="89.2857%" y="181" width="0.1623%" height="15" fill="rgb(206,70,20)" fg:x="1100" fg:w="2"/><text x="89.5357%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (2 samples, 0.16%)</title><rect x="89.2857%" y="165" width="0.1623%" height="15" fill="rgb(215,10,51)" fg:x="1100" fg:w="2"/><text x="89.5357%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (2 samples, 0.16%)</title><rect x="89.2857%" y="149" width="0.1623%" height="15" fill="rgb(243,178,53)" fg:x="1100" fg:w="2"/><text x="89.5357%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="89.3669%" y="133" width="0.0812%" height="15" fill="rgb(233,221,20)" fg:x="1101" fg:w="1"/><text x="89.6169%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="89.2857%" y="229" width="0.3247%" height="15" fill="rgb(218,95,35)" fg:x="1100" fg:w="4"/><text x="89.5357%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="89.2857%" y="213" width="0.3247%" height="15" fill="rgb(229,13,5)" fg:x="1100" fg:w="4"/><text x="89.5357%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="89.2857%" y="197" width="0.3247%" height="15" fill="rgb(252,164,30)" fg:x="1100" fg:w="4"/><text x="89.5357%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="89.4481%" y="181" width="0.1623%" height="15" fill="rgb(232,68,36)" fg:x="1102" fg:w="2"/><text x="89.6981%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (40 samples, 3.25%)</title><rect x="86.4448%" y="277" width="3.2468%" height="15" fill="rgb(219,59,54)" fg:x="1065" fg:w="40"/><text x="86.6948%" y="287.50">&lt;re..</text></g><g><title>regex::builders::Builder::build_one_string (40 samples, 3.25%)</title><rect x="86.4448%" y="261" width="3.2468%" height="15" fill="rgb(250,92,33)" fg:x="1065" fg:w="40"/><text x="86.6948%" y="271.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (40 samples, 3.25%)</title><rect x="86.4448%" y="245" width="3.2468%" height="15" fill="rgb(229,162,54)" fg:x="1065" fg:w="40"/><text x="86.6948%" y="255.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="89.6104%" y="229" width="0.0812%" height="15" fill="rgb(244,114,52)" fg:x="1104" fg:w="1"/><text x="89.8604%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="89.6104%" y="213" width="0.0812%" height="15" fill="rgb(212,211,43)" fg:x="1104" fg:w="1"/><text x="89.8604%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="89.6104%" y="197" width="0.0812%" height="15" fill="rgb(226,147,8)" fg:x="1104" fg:w="1"/><text x="89.8604%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="89.6104%" y="181" width="0.0812%" height="15" fill="rgb(226,23,13)" fg:x="1104" fg:w="1"/><text x="89.8604%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="89.6916%" y="277" width="0.0812%" height="15" fill="rgb(240,63,4)" fg:x="1105" fg:w="1"/><text x="89.9416%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="89.6916%" y="261" width="0.0812%" height="15" fill="rgb(221,1,32)" fg:x="1105" fg:w="1"/><text x="89.9416%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="89.6916%" y="245" width="0.0812%" height="15" fill="rgb(242,117,10)" fg:x="1105" fg:w="1"/><text x="89.9416%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="89.6916%" y="229" width="0.0812%" height="15" fill="rgb(249,172,44)" fg:x="1105" fg:w="1"/><text x="89.9416%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="89.6916%" y="213" width="0.0812%" height="15" fill="rgb(244,46,45)" fg:x="1105" fg:w="1"/><text x="89.9416%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.6916%" y="197" width="0.0812%" height="15" fill="rgb(206,43,17)" fg:x="1105" fg:w="1"/><text x="89.9416%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.6916%" y="181" width="0.0812%" height="15" fill="rgb(239,218,39)" fg:x="1105" fg:w="1"/><text x="89.9416%" y="191.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (46 samples, 3.73%)</title><rect x="86.1201%" y="293" width="3.7338%" height="15" fill="rgb(208,169,54)" fg:x="1061" fg:w="46"/><text x="86.3701%" y="303.50">inde..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="89.7727%" y="277" width="0.0812%" height="15" fill="rgb(247,25,42)" fg:x="1106" fg:w="1"/><text x="90.0227%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="89.7727%" y="261" width="0.0812%" height="15" fill="rgb(226,23,31)" fg:x="1106" fg:w="1"/><text x="90.0227%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="89.7727%" y="245" width="0.0812%" height="15" fill="rgb(247,16,28)" fg:x="1106" fg:w="1"/><text x="90.0227%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="89.7727%" y="229" width="0.0812%" height="15" fill="rgb(231,147,38)" fg:x="1106" fg:w="1"/><text x="90.0227%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="89.7727%" y="213" width="0.0812%" height="15" fill="rgb(253,81,48)" fg:x="1106" fg:w="1"/><text x="90.0227%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="89.7727%" y="197" width="0.0812%" height="15" fill="rgb(249,222,43)" fg:x="1106" fg:w="1"/><text x="90.0227%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="89.8539%" y="261" width="0.0812%" height="15" fill="rgb(221,3,27)" fg:x="1107" fg:w="1"/><text x="90.1039%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="89.8539%" y="245" width="0.0812%" height="15" fill="rgb(228,180,5)" fg:x="1107" fg:w="1"/><text x="90.1039%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.0162%" y="229" width="0.0812%" height="15" fill="rgb(227,131,42)" fg:x="1109" fg:w="1"/><text x="90.2662%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.0162%" y="213" width="0.0812%" height="15" fill="rgb(212,3,39)" fg:x="1109" fg:w="1"/><text x="90.2662%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="90.0162%" y="197" width="0.0812%" height="15" fill="rgb(226,45,5)" fg:x="1109" fg:w="1"/><text x="90.2662%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.0162%" y="181" width="0.0812%" height="15" fill="rgb(215,167,45)" fg:x="1109" fg:w="1"/><text x="90.2662%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.1786%" y="213" width="0.0812%" height="15" fill="rgb(250,218,53)" fg:x="1111" fg:w="1"/><text x="90.4286%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="90.2597%" y="213" width="0.3247%" height="15" fill="rgb(207,140,0)" fg:x="1112" fg:w="4"/><text x="90.5097%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="90.3409%" y="197" width="0.2435%" height="15" fill="rgb(238,133,51)" fg:x="1113" fg:w="3"/><text x="90.5909%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.5032%" y="181" width="0.0812%" height="15" fill="rgb(218,203,53)" fg:x="1115" fg:w="1"/><text x="90.7532%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="90.5844%" y="213" width="0.0812%" height="15" fill="rgb(226,184,25)" fg:x="1116" fg:w="1"/><text x="90.8344%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="90.5844%" y="197" width="0.0812%" height="15" fill="rgb(231,121,21)" fg:x="1116" fg:w="1"/><text x="90.8344%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="90.5844%" y="181" width="0.0812%" height="15" fill="rgb(251,14,34)" fg:x="1116" fg:w="1"/><text x="90.8344%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="90.5844%" y="165" width="0.0812%" height="15" fill="rgb(249,193,11)" fg:x="1116" fg:w="1"/><text x="90.8344%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="90.6656%" y="213" width="0.0812%" height="15" fill="rgb(220,172,37)" fg:x="1117" fg:w="1"/><text x="90.9156%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="90.6656%" y="197" width="0.0812%" height="15" fill="rgb(231,229,43)" fg:x="1117" fg:w="1"/><text x="90.9156%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="90.7468%" y="181" width="0.0812%" height="15" fill="rgb(250,161,5)" fg:x="1118" fg:w="1"/><text x="90.9968%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="90.7468%" y="165" width="0.0812%" height="15" fill="rgb(218,225,18)" fg:x="1118" fg:w="1"/><text x="90.9968%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (4 samples, 0.32%)</title><rect x="90.7468%" y="213" width="0.3247%" height="15" fill="rgb(245,45,42)" fg:x="1118" fg:w="4"/><text x="90.9968%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="90.7468%" y="197" width="0.3247%" height="15" fill="rgb(211,115,1)" fg:x="1118" fg:w="4"/><text x="90.9968%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="90.8279%" y="181" width="0.2435%" height="15" fill="rgb(248,133,52)" fg:x="1119" fg:w="3"/><text x="91.0779%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="90.8279%" y="165" width="0.2435%" height="15" fill="rgb(238,100,21)" fg:x="1119" fg:w="3"/><text x="91.0779%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="90.8279%" y="149" width="0.2435%" height="15" fill="rgb(247,144,11)" fg:x="1119" fg:w="3"/><text x="91.0779%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="91.0714%" y="117" width="0.0812%" height="15" fill="rgb(206,164,16)" fg:x="1122" fg:w="1"/><text x="91.3214%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.0714%" y="101" width="0.0812%" height="15" fill="rgb(222,34,3)" fg:x="1122" fg:w="1"/><text x="91.3214%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.0714%" y="85" width="0.0812%" height="15" fill="rgb(248,82,4)" fg:x="1122" fg:w="1"/><text x="91.3214%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.0714%" y="69" width="0.0812%" height="15" fill="rgb(228,81,46)" fg:x="1122" fg:w="1"/><text x="91.3214%" y="79.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="91.5584%" y="101" width="0.2435%" height="15" fill="rgb(227,67,47)" fg:x="1128" fg:w="3"/><text x="91.8084%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="91.8019%" y="101" width="0.0812%" height="15" fill="rgb(215,93,53)" fg:x="1131" fg:w="1"/><text x="92.0519%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="91.8831%" y="101" width="0.1623%" height="15" fill="rgb(248,194,39)" fg:x="1132" fg:w="2"/><text x="92.1331%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.9643%" y="85" width="0.0812%" height="15" fill="rgb(215,5,19)" fg:x="1133" fg:w="1"/><text x="92.2143%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.9643%" y="69" width="0.0812%" height="15" fill="rgb(226,215,51)" fg:x="1133" fg:w="1"/><text x="92.2143%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.9643%" y="53" width="0.0812%" height="15" fill="rgb(225,56,26)" fg:x="1133" fg:w="1"/><text x="92.2143%" y="63.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.1266%" y="69" width="0.0812%" height="15" fill="rgb(222,75,29)" fg:x="1135" fg:w="1"/><text x="92.3766%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.2078%" y="69" width="0.0812%" height="15" fill="rgb(236,139,6)" fg:x="1136" fg:w="1"/><text x="92.4578%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.2078%" y="53" width="0.0812%" height="15" fill="rgb(223,137,36)" fg:x="1136" fg:w="1"/><text x="92.4578%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.2078%" y="37" width="0.0812%" height="15" fill="rgb(226,99,2)" fg:x="1136" fg:w="1"/><text x="92.4578%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.41%)</title><rect x="92.0455%" y="101" width="0.4058%" height="15" fill="rgb(206,133,23)" fg:x="1134" fg:w="5"/><text x="92.2955%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="92.1266%" y="85" width="0.3247%" height="15" fill="rgb(243,173,15)" fg:x="1135" fg:w="4"/><text x="92.3766%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="92.2890%" y="69" width="0.1623%" height="15" fill="rgb(228,69,28)" fg:x="1137" fg:w="2"/><text x="92.5390%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (20 samples, 1.62%)</title><rect x="92.4513%" y="101" width="1.6234%" height="15" fill="rgb(212,51,22)" fg:x="1139" fg:w="20"/><text x="92.7013%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (20 samples, 1.62%)</title><rect x="92.4513%" y="85" width="1.6234%" height="15" fill="rgb(227,113,0)" fg:x="1139" fg:w="20"/><text x="92.7013%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (20 samples, 1.62%)</title><rect x="92.4513%" y="69" width="1.6234%" height="15" fill="rgb(252,84,27)" fg:x="1139" fg:w="20"/><text x="92.7013%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="94.0747%" y="101" width="0.0812%" height="15" fill="rgb(223,145,39)" fg:x="1159" fg:w="1"/><text x="94.3247%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 3.33%)</title><rect x="91.0714%" y="197" width="3.3279%" height="15" fill="rgb(239,219,30)" fg:x="1122" fg:w="41"/><text x="91.3214%" y="207.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (41 samples, 3.33%)</title><rect x="91.0714%" y="181" width="3.3279%" height="15" fill="rgb(224,196,39)" fg:x="1122" fg:w="41"/><text x="91.3214%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (41 samples, 3.33%)</title><rect x="91.0714%" y="165" width="3.3279%" height="15" fill="rgb(205,35,43)" fg:x="1122" fg:w="41"/><text x="91.3214%" y="175.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (41 samples, 3.33%)</title><rect x="91.0714%" y="149" width="3.3279%" height="15" fill="rgb(228,201,21)" fg:x="1122" fg:w="41"/><text x="91.3214%" y="159.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (41 samples, 3.33%)</title><rect x="91.0714%" y="133" width="3.3279%" height="15" fill="rgb(237,118,16)" fg:x="1122" fg:w="41"/><text x="91.3214%" y="143.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (40 samples, 3.25%)</title><rect x="91.1526%" y="117" width="3.2468%" height="15" fill="rgb(241,17,19)" fg:x="1123" fg:w="40"/><text x="91.4026%" y="127.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="94.1558%" y="101" width="0.2435%" height="15" fill="rgb(214,10,25)" fg:x="1160" fg:w="3"/><text x="94.4058%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="94.1558%" y="85" width="0.2435%" height="15" fill="rgb(238,37,29)" fg:x="1160" fg:w="3"/><text x="94.4058%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.2370%" y="69" width="0.1623%" height="15" fill="rgb(253,83,25)" fg:x="1161" fg:w="2"/><text x="94.4870%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.7240%" y="133" width="0.0812%" height="15" fill="rgb(234,192,12)" fg:x="1167" fg:w="1"/><text x="94.9740%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.41%)</title><rect x="94.4805%" y="181" width="0.4058%" height="15" fill="rgb(241,216,45)" fg:x="1164" fg:w="5"/><text x="94.7305%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.7240%" y="165" width="0.1623%" height="15" fill="rgb(242,22,33)" fg:x="1167" fg:w="2"/><text x="94.9740%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.7240%" y="149" width="0.1623%" height="15" fill="rgb(231,105,49)" fg:x="1167" fg:w="2"/><text x="94.9740%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.8052%" y="133" width="0.0812%" height="15" fill="rgb(218,204,15)" fg:x="1168" fg:w="1"/><text x="95.0552%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (62 samples, 5.03%)</title><rect x="90.0974%" y="229" width="5.0325%" height="15" fill="rgb(235,138,41)" fg:x="1110" fg:w="62"/><text x="90.3474%" y="239.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (50 samples, 4.06%)</title><rect x="91.0714%" y="213" width="4.0584%" height="15" fill="rgb(246,0,9)" fg:x="1122" fg:w="50"/><text x="91.3214%" y="223.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.73%)</title><rect x="94.3994%" y="197" width="0.7305%" height="15" fill="rgb(210,74,4)" fg:x="1163" fg:w="9"/><text x="94.6494%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="94.8864%" y="181" width="0.2435%" height="15" fill="rgb(250,60,41)" fg:x="1169" fg:w="3"/><text x="95.1364%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.0487%" y="165" width="0.0812%" height="15" fill="rgb(220,115,12)" fg:x="1171" fg:w="1"/><text x="95.2987%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.0487%" y="149" width="0.0812%" height="15" fill="rgb(237,100,13)" fg:x="1171" fg:w="1"/><text x="95.2987%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="95.0487%" y="133" width="0.0812%" height="15" fill="rgb(213,55,26)" fg:x="1171" fg:w="1"/><text x="95.2987%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="95.0487%" y="117" width="0.0812%" height="15" fill="rgb(216,17,4)" fg:x="1171" fg:w="1"/><text x="95.2987%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="95.2110%" y="181" width="0.0812%" height="15" fill="rgb(220,153,47)" fg:x="1173" fg:w="1"/><text x="95.4610%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="95.2922%" y="181" width="0.0812%" height="15" fill="rgb(215,131,9)" fg:x="1174" fg:w="1"/><text x="95.5422%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="95.2110%" y="197" width="0.2435%" height="15" fill="rgb(233,46,42)" fg:x="1173" fg:w="3"/><text x="95.4610%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="95.3734%" y="181" width="0.0812%" height="15" fill="rgb(226,86,7)" fg:x="1175" fg:w="1"/><text x="95.6234%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.3734%" y="165" width="0.0812%" height="15" fill="rgb(239,226,21)" fg:x="1175" fg:w="1"/><text x="95.6234%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.3734%" y="149" width="0.0812%" height="15" fill="rgb(244,137,22)" fg:x="1175" fg:w="1"/><text x="95.6234%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.3734%" y="133" width="0.0812%" height="15" fill="rgb(211,139,35)" fg:x="1175" fg:w="1"/><text x="95.6234%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="95.4545%" y="197" width="0.0812%" height="15" fill="rgb(214,62,50)" fg:x="1176" fg:w="1"/><text x="95.7045%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="95.5357%" y="197" width="0.0812%" height="15" fill="rgb(212,113,44)" fg:x="1177" fg:w="1"/><text x="95.7857%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="95.5357%" y="181" width="0.0812%" height="15" fill="rgb(226,150,43)" fg:x="1177" fg:w="1"/><text x="95.7857%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.65%)</title><rect x="95.1299%" y="229" width="0.6494%" height="15" fill="rgb(250,71,37)" fg:x="1172" fg:w="8"/><text x="95.3799%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.65%)</title><rect x="95.1299%" y="213" width="0.6494%" height="15" fill="rgb(219,76,19)" fg:x="1172" fg:w="8"/><text x="95.3799%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="95.6169%" y="197" width="0.1623%" height="15" fill="rgb(250,39,11)" fg:x="1178" fg:w="2"/><text x="95.8669%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.6981%" y="181" width="0.0812%" height="15" fill="rgb(230,64,31)" fg:x="1179" fg:w="1"/><text x="95.9481%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="95.7792%" y="197" width="0.0812%" height="15" fill="rgb(208,222,23)" fg:x="1180" fg:w="1"/><text x="96.0292%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="95.7792%" y="181" width="0.0812%" height="15" fill="rgb(227,125,18)" fg:x="1180" fg:w="1"/><text x="96.0292%" y="191.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="95.7792%" y="165" width="0.0812%" height="15" fill="rgb(234,210,9)" fg:x="1180" fg:w="1"/><text x="96.0292%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.8604%" y="181" width="0.0812%" height="15" fill="rgb(217,127,24)" fg:x="1181" fg:w="1"/><text x="96.1104%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (76 samples, 6.17%)</title><rect x="89.8539%" y="277" width="6.1688%" height="15" fill="rgb(239,141,48)" fg:x="1107" fg:w="76"/><text x="90.1039%" y="287.50">&lt;regex::..</text></g><g><title>regex::builders::Builder::build_one_string (75 samples, 6.09%)</title><rect x="89.9351%" y="261" width="6.0877%" height="15" fill="rgb(227,109,8)" fg:x="1108" fg:w="75"/><text x="90.1851%" y="271.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (75 samples, 6.09%)</title><rect x="89.9351%" y="245" width="6.0877%" height="15" fill="rgb(235,184,23)" fg:x="1108" fg:w="75"/><text x="90.1851%" y="255.50">regex_au..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="95.7792%" y="229" width="0.2435%" height="15" fill="rgb(227,226,48)" fg:x="1180" fg:w="3"/><text x="96.0292%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="95.7792%" y="213" width="0.2435%" height="15" fill="rgb(206,150,11)" fg:x="1180" fg:w="3"/><text x="96.0292%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="95.8604%" y="197" width="0.1623%" height="15" fill="rgb(254,2,33)" fg:x="1181" fg:w="2"/><text x="96.1104%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="95.9416%" y="181" width="0.0812%" height="15" fill="rgb(243,160,20)" fg:x="1182" fg:w="1"/><text x="96.1916%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="95.9416%" y="165" width="0.0812%" height="15" fill="rgb(218,208,30)" fg:x="1182" fg:w="1"/><text x="96.1916%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="96.0227%" y="229" width="0.0812%" height="15" fill="rgb(224,120,49)" fg:x="1183" fg:w="1"/><text x="96.2727%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.0227%" y="213" width="0.0812%" height="15" fill="rgb(246,12,2)" fg:x="1183" fg:w="1"/><text x="96.2727%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="96.1039%" y="229" width="0.0812%" height="15" fill="rgb(236,117,3)" fg:x="1184" fg:w="1"/><text x="96.3539%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="96.1039%" y="213" width="0.0812%" height="15" fill="rgb(216,128,52)" fg:x="1184" fg:w="1"/><text x="96.3539%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.1039%" y="197" width="0.0812%" height="15" fill="rgb(246,145,19)" fg:x="1184" fg:w="1"/><text x="96.3539%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="96.0227%" y="277" width="0.2435%" height="15" fill="rgb(222,11,46)" fg:x="1183" fg:w="3"/><text x="96.2727%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="96.0227%" y="261" width="0.2435%" height="15" fill="rgb(245,82,36)" fg:x="1183" fg:w="3"/><text x="96.2727%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="96.0227%" y="245" width="0.2435%" height="15" fill="rgb(250,73,51)" fg:x="1183" fg:w="3"/><text x="96.2727%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="96.1851%" y="229" width="0.0812%" height="15" fill="rgb(221,189,23)" fg:x="1185" fg:w="1"/><text x="96.4351%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="96.1851%" y="213" width="0.0812%" height="15" fill="rgb(210,33,7)" fg:x="1185" fg:w="1"/><text x="96.4351%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.1851%" y="197" width="0.0812%" height="15" fill="rgb(210,107,22)" fg:x="1185" fg:w="1"/><text x="96.4351%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.1851%" y="181" width="0.0812%" height="15" fill="rgb(222,116,37)" fg:x="1185" fg:w="1"/><text x="96.4351%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="96.3474%" y="181" width="0.1623%" height="15" fill="rgb(254,17,48)" fg:x="1187" fg:w="2"/><text x="96.5974%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="96.2662%" y="197" width="0.3247%" height="15" fill="rgb(224,36,32)" fg:x="1186" fg:w="4"/><text x="96.5162%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="96.5097%" y="181" width="0.0812%" height="15" fill="rgb(232,90,46)" fg:x="1189" fg:w="1"/><text x="96.7597%" y="191.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="96.5097%" y="165" width="0.0812%" height="15" fill="rgb(241,66,40)" fg:x="1189" fg:w="1"/><text x="96.7597%" y="175.50"></text></g><g><title>indefinite::rules::number::Number::check (84 samples, 6.82%)</title><rect x="89.8539%" y="293" width="6.8182%" height="15" fill="rgb(249,184,29)" fg:x="1107" fg:w="84"/><text x="90.1039%" y="303.50">indefinit..</text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.41%)</title><rect x="96.2662%" y="277" width="0.4058%" height="15" fill="rgb(231,181,1)" fg:x="1186" fg:w="5"/><text x="96.5162%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.41%)</title><rect x="96.2662%" y="261" width="0.4058%" height="15" fill="rgb(224,94,2)" fg:x="1186" fg:w="5"/><text x="96.5162%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.41%)</title><rect x="96.2662%" y="245" width="0.4058%" height="15" fill="rgb(229,170,15)" fg:x="1186" fg:w="5"/><text x="96.5162%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.41%)</title><rect x="96.2662%" y="229" width="0.4058%" height="15" fill="rgb(240,127,35)" fg:x="1186" fg:w="5"/><text x="96.5162%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.41%)</title><rect x="96.2662%" y="213" width="0.4058%" height="15" fill="rgb(248,196,34)" fg:x="1186" fg:w="5"/><text x="96.5162%" y="223.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="96.5909%" y="197" width="0.0812%" height="15" fill="rgb(236,137,7)" fg:x="1190" fg:w="1"/><text x="96.8409%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.5909%" y="181" width="0.0812%" height="15" fill="rgb(235,127,16)" fg:x="1190" fg:w="1"/><text x="96.8409%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.5909%" y="165" width="0.0812%" height="15" fill="rgb(250,192,54)" fg:x="1190" fg:w="1"/><text x="96.8409%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.5909%" y="149" width="0.0812%" height="15" fill="rgb(218,98,20)" fg:x="1190" fg:w="1"/><text x="96.8409%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="96.6721%" y="213" width="0.0812%" height="15" fill="rgb(230,176,47)" fg:x="1191" fg:w="1"/><text x="96.9221%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.6721%" y="197" width="0.0812%" height="15" fill="rgb(244,2,33)" fg:x="1191" fg:w="1"/><text x="96.9221%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="96.6721%" y="181" width="0.0812%" height="15" fill="rgb(231,100,17)" fg:x="1191" fg:w="1"/><text x="96.9221%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.6721%" y="165" width="0.0812%" height="15" fill="rgb(245,23,12)" fg:x="1191" fg:w="1"/><text x="96.9221%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="96.7532%" y="181" width="0.0812%" height="15" fill="rgb(249,55,22)" fg:x="1192" fg:w="1"/><text x="97.0032%" y="191.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="96.7532%" y="165" width="0.0812%" height="15" fill="rgb(207,134,9)" fg:x="1192" fg:w="1"/><text x="97.0032%" y="175.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="96.7532%" y="149" width="0.0812%" height="15" fill="rgb(218,134,0)" fg:x="1192" fg:w="1"/><text x="97.0032%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="96.7532%" y="197" width="0.2435%" height="15" fill="rgb(213,212,33)" fg:x="1192" fg:w="3"/><text x="97.0032%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="96.8344%" y="181" width="0.1623%" height="15" fill="rgb(252,106,18)" fg:x="1193" fg:w="2"/><text x="97.0844%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="96.8344%" y="165" width="0.1623%" height="15" fill="rgb(208,126,42)" fg:x="1193" fg:w="2"/><text x="97.0844%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (2 samples, 0.16%)</title><rect x="96.8344%" y="149" width="0.1623%" height="15" fill="rgb(246,175,29)" fg:x="1193" fg:w="2"/><text x="97.0844%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.9156%" y="133" width="0.0812%" height="15" fill="rgb(215,13,50)" fg:x="1194" fg:w="1"/><text x="97.1656%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.9156%" y="117" width="0.0812%" height="15" fill="rgb(216,172,15)" fg:x="1194" fg:w="1"/><text x="97.1656%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.9156%" y="101" width="0.0812%" height="15" fill="rgb(212,103,13)" fg:x="1194" fg:w="1"/><text x="97.1656%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="96.9968%" y="181" width="0.2435%" height="15" fill="rgb(231,171,36)" fg:x="1195" fg:w="3"/><text x="97.2468%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="96.9968%" y="165" width="0.2435%" height="15" fill="rgb(250,123,20)" fg:x="1195" fg:w="3"/><text x="97.2468%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="96.9968%" y="149" width="0.2435%" height="15" fill="rgb(212,53,50)" fg:x="1195" fg:w="3"/><text x="97.2468%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="97.0779%" y="133" width="0.1623%" height="15" fill="rgb(243,54,12)" fg:x="1196" fg:w="2"/><text x="97.3279%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="97.1591%" y="117" width="0.0812%" height="15" fill="rgb(234,101,34)" fg:x="1197" fg:w="1"/><text x="97.4091%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.1591%" y="101" width="0.0812%" height="15" fill="rgb(254,67,22)" fg:x="1197" fg:w="1"/><text x="97.4091%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.1591%" y="85" width="0.0812%" height="15" fill="rgb(250,35,47)" fg:x="1197" fg:w="1"/><text x="97.4091%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.1591%" y="69" width="0.0812%" height="15" fill="rgb(226,126,38)" fg:x="1197" fg:w="1"/><text x="97.4091%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="97.2403%" y="165" width="0.0812%" height="15" fill="rgb(216,138,53)" fg:x="1198" fg:w="1"/><text x="97.4903%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (9 samples, 0.73%)</title><rect x="96.7532%" y="213" width="0.7305%" height="15" fill="rgb(246,199,43)" fg:x="1192" fg:w="9"/><text x="97.0032%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (6 samples, 0.49%)</title><rect x="96.9968%" y="197" width="0.4870%" height="15" fill="rgb(232,125,11)" fg:x="1195" fg:w="6"/><text x="97.2468%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="97.2403%" y="181" width="0.2435%" height="15" fill="rgb(218,219,45)" fg:x="1198" fg:w="3"/><text x="97.4903%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="97.3214%" y="165" width="0.1623%" height="15" fill="rgb(216,102,54)" fg:x="1199" fg:w="2"/><text x="97.5714%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.4026%" y="149" width="0.0812%" height="15" fill="rgb(250,228,7)" fg:x="1200" fg:w="1"/><text x="97.6526%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.4026%" y="133" width="0.0812%" height="15" fill="rgb(226,125,25)" fg:x="1200" fg:w="1"/><text x="97.6526%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.4026%" y="117" width="0.0812%" height="15" fill="rgb(224,165,27)" fg:x="1200" fg:w="1"/><text x="97.6526%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="97.4838%" y="213" width="0.0812%" height="15" fill="rgb(233,86,3)" fg:x="1201" fg:w="1"/><text x="97.7338%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="97.4838%" y="197" width="0.0812%" height="15" fill="rgb(228,116,20)" fg:x="1201" fg:w="1"/><text x="97.7338%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="97.4838%" y="181" width="0.0812%" height="15" fill="rgb(209,192,17)" fg:x="1201" fg:w="1"/><text x="97.7338%" y="191.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="97.4838%" y="165" width="0.0812%" height="15" fill="rgb(224,88,34)" fg:x="1201" fg:w="1"/><text x="97.7338%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (12 samples, 0.97%)</title><rect x="96.6721%" y="261" width="0.9740%" height="15" fill="rgb(233,38,6)" fg:x="1191" fg:w="12"/><text x="96.9221%" y="271.50"></text></g><g><title>regex::builders::Builder::build_one_string (12 samples, 0.97%)</title><rect x="96.6721%" y="245" width="0.9740%" height="15" fill="rgb(212,59,30)" fg:x="1191" fg:w="12"/><text x="96.9221%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (12 samples, 0.97%)</title><rect x="96.6721%" y="229" width="0.9740%" height="15" fill="rgb(213,80,3)" fg:x="1191" fg:w="12"/><text x="96.9221%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="97.5649%" y="213" width="0.0812%" height="15" fill="rgb(251,178,7)" fg:x="1202" fg:w="1"/><text x="97.8149%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.5649%" y="197" width="0.0812%" height="15" fill="rgb(213,154,26)" fg:x="1202" fg:w="1"/><text x="97.8149%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="97.6461%" y="213" width="0.0812%" height="15" fill="rgb(238,165,49)" fg:x="1203" fg:w="1"/><text x="97.8961%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="97.6461%" y="261" width="0.1623%" height="15" fill="rgb(248,91,46)" fg:x="1203" fg:w="2"/><text x="97.8961%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="97.6461%" y="245" width="0.1623%" height="15" fill="rgb(244,21,52)" fg:x="1203" fg:w="2"/><text x="97.8961%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="97.6461%" y="229" width="0.1623%" height="15" fill="rgb(247,122,20)" fg:x="1203" fg:w="2"/><text x="97.8961%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="97.7273%" y="213" width="0.0812%" height="15" fill="rgb(218,27,9)" fg:x="1204" fg:w="1"/><text x="97.9773%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.8896%" y="181" width="0.0812%" height="15" fill="rgb(246,7,6)" fg:x="1206" fg:w="1"/><text x="98.1396%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.8896%" y="165" width="0.0812%" height="15" fill="rgb(227,135,54)" fg:x="1206" fg:w="1"/><text x="98.1396%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.8896%" y="149" width="0.0812%" height="15" fill="rgb(247,14,11)" fg:x="1206" fg:w="1"/><text x="98.1396%" y="159.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (17 samples, 1.38%)</title><rect x="96.6721%" y="277" width="1.3799%" height="15" fill="rgb(206,149,34)" fg:x="1191" fg:w="17"/><text x="96.9221%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="97.8084%" y="261" width="0.2435%" height="15" fill="rgb(227,228,4)" fg:x="1205" fg:w="3"/><text x="98.0584%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="97.8084%" y="245" width="0.2435%" height="15" fill="rgb(238,218,28)" fg:x="1205" fg:w="3"/><text x="98.0584%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="97.8084%" y="229" width="0.2435%" height="15" fill="rgb(252,86,40)" fg:x="1205" fg:w="3"/><text x="98.0584%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="97.8084%" y="213" width="0.2435%" height="15" fill="rgb(251,225,11)" fg:x="1205" fg:w="3"/><text x="98.0584%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="97.8084%" y="197" width="0.2435%" height="15" fill="rgb(206,46,49)" fg:x="1205" fg:w="3"/><text x="98.0584%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="97.9708%" y="181" width="0.0812%" height="15" fill="rgb(245,128,24)" fg:x="1207" fg:w="1"/><text x="98.2208%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (161 samples, 13.07%)</title><rect x="85.0649%" y="373" width="13.0682%" height="15" fill="rgb(219,177,34)" fg:x="1048" fg:w="161"/><text x="85.3149%" y="383.50">&lt;&amp;kernel::model::Ent..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (149 samples, 12.09%)</title><rect x="86.0390%" y="357" width="12.0942%" height="15" fill="rgb(218,60,48)" fg:x="1060" fg:w="149"/><text x="86.2890%" y="367.50">plugins_core::look..</text></g><g><title>indefinite::indefinite (149 samples, 12.09%)</title><rect x="86.0390%" y="341" width="12.0942%" height="15" fill="rgb(221,11,5)" fg:x="1060" fg:w="149"/><text x="86.2890%" y="351.50">indefinite::indefi..</text></g><g><title>indefinite::methods::indefinite (149 samples, 12.09%)</title><rect x="86.0390%" y="325" width="12.0942%" height="15" fill="rgb(220,148,13)" fg:x="1060" fg:w="149"/><text x="86.2890%" y="335.50">indefinite::method..</text></g><g><title>indefinite::methods::apply_rules (148 samples, 12.01%)</title><rect x="86.1201%" y="309" width="12.0130%" height="15" fill="rgb(210,16,3)" fg:x="1061" fg:w="148"/><text x="86.3701%" y="319.50">indefinite::method..</text></g><g><title>indefinite::rules::other::Other::run (18 samples, 1.46%)</title><rect x="96.6721%" y="293" width="1.4610%" height="15" fill="rgb(236,80,2)" fg:x="1191" fg:w="18"/><text x="96.9221%" y="303.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="98.0519%" y="277" width="0.0812%" height="15" fill="rgb(239,129,19)" fg:x="1208" fg:w="1"/><text x="98.3019%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.1331%" y="261" width="0.0812%" height="15" fill="rgb(220,106,35)" fg:x="1209" fg:w="1"/><text x="98.3831%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.1331%" y="245" width="0.0812%" height="15" fill="rgb(252,139,45)" fg:x="1209" fg:w="1"/><text x="98.3831%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.1331%" y="229" width="0.0812%" height="15" fill="rgb(229,8,36)" fg:x="1209" fg:w="1"/><text x="98.3831%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.1331%" y="213" width="0.0812%" height="15" fill="rgb(230,126,33)" fg:x="1209" fg:w="1"/><text x="98.3831%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.1331%" y="197" width="0.0812%" height="15" fill="rgb(239,140,21)" fg:x="1209" fg:w="1"/><text x="98.3831%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.1331%" y="181" width="0.0812%" height="15" fill="rgb(254,104,9)" fg:x="1209" fg:w="1"/><text x="98.3831%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.1331%" y="165" width="0.0812%" height="15" fill="rgb(239,52,14)" fg:x="1209" fg:w="1"/><text x="98.3831%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="98.1331%" y="341" width="0.1623%" height="15" fill="rgb(208,227,44)" fg:x="1209" fg:w="2"/><text x="98.3831%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="98.1331%" y="325" width="0.1623%" height="15" fill="rgb(246,18,19)" fg:x="1209" fg:w="2"/><text x="98.3831%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="98.1331%" y="309" width="0.1623%" height="15" fill="rgb(235,228,25)" fg:x="1209" fg:w="2"/><text x="98.3831%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="98.1331%" y="293" width="0.1623%" height="15" fill="rgb(240,156,20)" fg:x="1209" fg:w="2"/><text x="98.3831%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="98.1331%" y="277" width="0.1623%" height="15" fill="rgb(224,8,20)" fg:x="1209" fg:w="2"/><text x="98.3831%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.2143%" y="261" width="0.0812%" height="15" fill="rgb(214,12,52)" fg:x="1210" fg:w="1"/><text x="98.4643%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.2143%" y="245" width="0.0812%" height="15" fill="rgb(211,220,47)" fg:x="1210" fg:w="1"/><text x="98.4643%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="98.1331%" y="357" width="0.2435%" height="15" fill="rgb(250,173,5)" fg:x="1209" fg:w="3"/><text x="98.3831%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2955%" y="341" width="0.0812%" height="15" fill="rgb(250,125,52)" fg:x="1211" fg:w="1"/><text x="98.5455%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2955%" y="325" width="0.0812%" height="15" fill="rgb(209,133,18)" fg:x="1211" fg:w="1"/><text x="98.5455%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2955%" y="309" width="0.0812%" height="15" fill="rgb(216,173,22)" fg:x="1211" fg:w="1"/><text x="98.5455%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2955%" y="293" width="0.0812%" height="15" fill="rgb(205,3,22)" fg:x="1211" fg:w="1"/><text x="98.5455%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.2955%" y="277" width="0.0812%" height="15" fill="rgb(248,22,20)" fg:x="1211" fg:w="1"/><text x="98.5455%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.2955%" y="261" width="0.0812%" height="15" fill="rgb(233,6,29)" fg:x="1211" fg:w="1"/><text x="98.5455%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.2955%" y="245" width="0.0812%" height="15" fill="rgb(240,22,54)" fg:x="1211" fg:w="1"/><text x="98.5455%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.2955%" y="229" width="0.0812%" height="15" fill="rgb(231,133,32)" fg:x="1211" fg:w="1"/><text x="98.5455%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.2955%" y="213" width="0.0812%" height="15" fill="rgb(248,193,4)" fg:x="1211" fg:w="1"/><text x="98.5455%" y="223.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="98.1331%" y="373" width="0.3247%" height="15" fill="rgb(211,178,46)" fg:x="1209" fg:w="4"/><text x="98.3831%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3766%" y="357" width="0.0812%" height="15" fill="rgb(224,5,42)" fg:x="1212" fg:w="1"/><text x="98.6266%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3766%" y="341" width="0.0812%" height="15" fill="rgb(239,176,25)" fg:x="1212" fg:w="1"/><text x="98.6266%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.3766%" y="325" width="0.0812%" height="15" fill="rgb(245,187,50)" fg:x="1212" fg:w="1"/><text x="98.6266%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.3766%" y="309" width="0.0812%" height="15" fill="rgb(248,24,15)" fg:x="1212" fg:w="1"/><text x="98.6266%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.3766%" y="293" width="0.0812%" height="15" fill="rgb(205,166,13)" fg:x="1212" fg:w="1"/><text x="98.6266%" y="303.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.3766%" y="277" width="0.0812%" height="15" fill="rgb(208,114,23)" fg:x="1212" fg:w="1"/><text x="98.6266%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3766%" y="261" width="0.0812%" height="15" fill="rgb(239,127,18)" fg:x="1212" fg:w="1"/><text x="98.6266%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3766%" y="245" width="0.0812%" height="15" fill="rgb(219,154,28)" fg:x="1212" fg:w="1"/><text x="98.6266%" y="255.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="98.4578%" y="325" width="0.0812%" height="15" fill="rgb(225,157,23)" fg:x="1213" fg:w="1"/><text x="98.7078%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4578%" y="309" width="0.0812%" height="15" fill="rgb(219,8,6)" fg:x="1213" fg:w="1"/><text x="98.7078%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4578%" y="293" width="0.0812%" height="15" fill="rgb(212,47,6)" fg:x="1213" fg:w="1"/><text x="98.7078%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.4578%" y="277" width="0.0812%" height="15" fill="rgb(224,190,4)" fg:x="1213" fg:w="1"/><text x="98.7078%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.4578%" y="261" width="0.0812%" height="15" fill="rgb(239,183,29)" fg:x="1213" fg:w="1"/><text x="98.7078%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.4578%" y="245" width="0.0812%" height="15" fill="rgb(213,57,7)" fg:x="1213" fg:w="1"/><text x="98.7078%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.4578%" y="229" width="0.0812%" height="15" fill="rgb(216,148,1)" fg:x="1213" fg:w="1"/><text x="98.7078%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.4578%" y="213" width="0.0812%" height="15" fill="rgb(236,182,29)" fg:x="1213" fg:w="1"/><text x="98.7078%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5390%" y="277" width="0.0812%" height="15" fill="rgb(244,120,48)" fg:x="1214" fg:w="1"/><text x="98.7890%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5390%" y="261" width="0.0812%" height="15" fill="rgb(206,71,34)" fg:x="1214" fg:w="1"/><text x="98.7890%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.5390%" y="309" width="0.1623%" height="15" fill="rgb(242,32,6)" fg:x="1214" fg:w="2"/><text x="98.7890%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.5390%" y="293" width="0.1623%" height="15" fill="rgb(241,35,3)" fg:x="1214" fg:w="2"/><text x="98.7890%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.6201%" y="277" width="0.0812%" height="15" fill="rgb(222,62,19)" fg:x="1215" fg:w="1"/><text x="98.8701%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.6201%" y="261" width="0.0812%" height="15" fill="rgb(223,110,41)" fg:x="1215" fg:w="1"/><text x="98.8701%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.6201%" y="245" width="0.0812%" height="15" fill="rgb(208,224,4)" fg:x="1215" fg:w="1"/><text x="98.8701%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.6201%" y="229" width="0.0812%" height="15" fill="rgb(241,137,19)" fg:x="1215" fg:w="1"/><text x="98.8701%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.6201%" y="213" width="0.0812%" height="15" fill="rgb(244,24,17)" fg:x="1215" fg:w="1"/><text x="98.8701%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.6201%" y="197" width="0.0812%" height="15" fill="rgb(245,178,49)" fg:x="1215" fg:w="1"/><text x="98.8701%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.6201%" y="181" width="0.0812%" height="15" fill="rgb(219,160,38)" fg:x="1215" fg:w="1"/><text x="98.8701%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.6201%" y="165" width="0.0812%" height="15" fill="rgb(228,137,14)" fg:x="1215" fg:w="1"/><text x="98.8701%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.6201%" y="149" width="0.0812%" height="15" fill="rgb(237,134,11)" fg:x="1215" fg:w="1"/><text x="98.8701%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.6201%" y="133" width="0.0812%" height="15" fill="rgb(211,126,44)" fg:x="1215" fg:w="1"/><text x="98.8701%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.6201%" y="117" width="0.0812%" height="15" fill="rgb(226,171,33)" fg:x="1215" fg:w="1"/><text x="98.8701%" y="127.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="98.7013%" y="309" width="0.0812%" height="15" fill="rgb(253,99,13)" fg:x="1216" fg:w="1"/><text x="98.9513%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.7013%" y="293" width="0.0812%" height="15" fill="rgb(244,48,7)" fg:x="1216" fg:w="1"/><text x="98.9513%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.7013%" y="277" width="0.0812%" height="15" fill="rgb(244,217,54)" fg:x="1216" fg:w="1"/><text x="98.9513%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.7825%" y="165" width="0.0812%" height="15" fill="rgb(224,15,18)" fg:x="1217" fg:w="1"/><text x="99.0325%" y="175.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (186 samples, 15.10%)</title><rect x="83.8474%" y="597" width="15.0974%" height="15" fill="rgb(244,99,12)" fg:x="1033" fg:w="186"/><text x="84.0974%" y="607.50">&lt;engine::session::Sessi..</text></g><g><title>kernel::plugins::mw::apply_middleware (186 samples, 15.10%)</title><rect x="83.8474%" y="581" width="15.0974%" height="15" fill="rgb(233,226,8)" fg:x="1033" fg:w="186"/><text x="84.0974%" y="591.50">kernel::plugins::mw::ap..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (185 samples, 15.02%)</title><rect x="83.9286%" y="565" width="15.0162%" height="15" fill="rgb(229,211,3)" fg:x="1034" fg:w="185"/><text x="84.1786%" y="575.50">kernel::plugins::mw::Mi..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (185 samples, 15.02%)</title><rect x="83.9286%" y="549" width="15.0162%" height="15" fill="rgb(216,140,21)" fg:x="1034" fg:w="185"/><text x="84.1786%" y="559.50">&lt;engine::session::Expan..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (174 samples, 14.12%)</title><rect x="84.8214%" y="533" width="14.1234%" height="15" fill="rgb(234,122,30)" fg:x="1045" fg:w="174"/><text x="85.0714%" y="543.50">kernel::plugins::mw::..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (174 samples, 14.12%)</title><rect x="84.8214%" y="517" width="14.1234%" height="15" fill="rgb(236,25,46)" fg:x="1045" fg:w="174"/><text x="85.0714%" y="527.50">&lt;plugins_dynlib::Dyna..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (174 samples, 14.12%)</title><rect x="84.8214%" y="501" width="14.1234%" height="15" fill="rgb(217,52,54)" fg:x="1045" fg:w="174"/><text x="85.0714%" y="511.50">kernel::plugins::mw::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (173 samples, 14.04%)</title><rect x="84.9026%" y="485" width="14.0422%" height="15" fill="rgb(222,29,26)" fg:x="1046" fg:w="173"/><text x="85.1526%" y="495.50">core::ops::function::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (173 samples, 14.04%)</title><rect x="84.9026%" y="469" width="14.0422%" height="15" fill="rgb(216,177,29)" fg:x="1046" fg:w="173"/><text x="85.1526%" y="479.50">kernel::plugins::mw::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (173 samples, 14.04%)</title><rect x="84.9026%" y="453" width="14.0422%" height="15" fill="rgb(247,136,51)" fg:x="1046" fg:w="173"/><text x="85.1526%" y="463.50">core::ops::function::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (173 samples, 14.04%)</title><rect x="84.9026%" y="437" width="14.0422%" height="15" fill="rgb(231,47,47)" fg:x="1046" fg:w="173"/><text x="85.1526%" y="447.50">&lt;alloc::boxed::Box&lt;F,..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (173 samples, 14.04%)</title><rect x="84.9026%" y="421" width="14.0422%" height="15" fill="rgb(211,192,36)" fg:x="1046" fg:w="173"/><text x="85.1526%" y="431.50">&lt;engine::session::sta..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (173 samples, 14.04%)</title><rect x="84.9026%" y="405" width="14.0422%" height="15" fill="rgb(229,156,32)" fg:x="1046" fg:w="173"/><text x="85.1526%" y="415.50">&lt;plugins_core::lookin..</text></g><g><title>plugins_core::looking::model::new_area_observation (171 samples, 13.88%)</title><rect x="85.0649%" y="389" width="13.8799%" height="15" fill="rgb(248,213,20)" fg:x="1048" fg:w="171"/><text x="85.3149%" y="399.50">plugins_core::looking..</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.49%)</title><rect x="98.4578%" y="373" width="0.4870%" height="15" fill="rgb(217,64,7)" fg:x="1213" fg:w="6"/><text x="98.7078%" y="383.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.49%)</title><rect x="98.4578%" y="357" width="0.4870%" height="15" fill="rgb(232,142,8)" fg:x="1213" fg:w="6"/><text x="98.7078%" y="367.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.49%)</title><rect x="98.4578%" y="341" width="0.4870%" height="15" fill="rgb(224,92,44)" fg:x="1213" fg:w="6"/><text x="98.7078%" y="351.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.41%)</title><rect x="98.5390%" y="325" width="0.4058%" height="15" fill="rgb(214,169,17)" fg:x="1214" fg:w="5"/><text x="98.7890%" y="335.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="98.7825%" y="309" width="0.1623%" height="15" fill="rgb(210,59,37)" fg:x="1217" fg:w="2"/><text x="99.0325%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.7825%" y="293" width="0.1623%" height="15" fill="rgb(214,116,48)" fg:x="1217" fg:w="2"/><text x="99.0325%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.7825%" y="277" width="0.1623%" height="15" fill="rgb(244,191,6)" fg:x="1217" fg:w="2"/><text x="99.0325%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="98.7825%" y="261" width="0.1623%" height="15" fill="rgb(241,50,52)" fg:x="1217" fg:w="2"/><text x="99.0325%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.7825%" y="245" width="0.1623%" height="15" fill="rgb(236,75,39)" fg:x="1217" fg:w="2"/><text x="99.0325%" y="255.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.7825%" y="229" width="0.1623%" height="15" fill="rgb(236,99,0)" fg:x="1217" fg:w="2"/><text x="99.0325%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="98.7825%" y="213" width="0.1623%" height="15" fill="rgb(207,202,15)" fg:x="1217" fg:w="2"/><text x="99.0325%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="98.7825%" y="197" width="0.1623%" height="15" fill="rgb(233,207,14)" fg:x="1217" fg:w="2"/><text x="99.0325%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="98.7825%" y="181" width="0.1623%" height="15" fill="rgb(226,27,51)" fg:x="1217" fg:w="2"/><text x="99.0325%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.8636%" y="165" width="0.0812%" height="15" fill="rgb(206,104,42)" fg:x="1218" fg:w="1"/><text x="99.1136%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.8636%" y="149" width="0.0812%" height="15" fill="rgb(212,225,4)" fg:x="1218" fg:w="1"/><text x="99.1136%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9448%" y="549" width="0.0812%" height="15" fill="rgb(233,96,42)" fg:x="1219" fg:w="1"/><text x="99.1948%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9448%" y="533" width="0.0812%" height="15" fill="rgb(229,21,32)" fg:x="1219" fg:w="1"/><text x="99.1948%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9448%" y="517" width="0.0812%" height="15" fill="rgb(226,216,24)" fg:x="1219" fg:w="1"/><text x="99.1948%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.9448%" y="501" width="0.0812%" height="15" fill="rgb(221,163,17)" fg:x="1219" fg:w="1"/><text x="99.1948%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9448%" y="485" width="0.0812%" height="15" fill="rgb(216,216,42)" fg:x="1219" fg:w="1"/><text x="99.1948%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.9448%" y="469" width="0.0812%" height="15" fill="rgb(240,118,7)" fg:x="1219" fg:w="1"/><text x="99.1948%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.9448%" y="453" width="0.0812%" height="15" fill="rgb(221,67,37)" fg:x="1219" fg:w="1"/><text x="99.1948%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.9448%" y="437" width="0.0812%" height="15" fill="rgb(241,32,44)" fg:x="1219" fg:w="1"/><text x="99.1948%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.9448%" y="421" width="0.0812%" height="15" fill="rgb(235,204,43)" fg:x="1219" fg:w="1"/><text x="99.1948%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.9448%" y="405" width="0.0812%" height="15" fill="rgb(213,116,10)" fg:x="1219" fg:w="1"/><text x="99.1948%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.9448%" y="389" width="0.0812%" height="15" fill="rgb(239,15,48)" fg:x="1219" fg:w="1"/><text x="99.1948%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.9448%" y="373" width="0.0812%" height="15" fill="rgb(207,123,36)" fg:x="1219" fg:w="1"/><text x="99.1948%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.9448%" y="357" width="0.0812%" height="15" fill="rgb(209,103,30)" fg:x="1219" fg:w="1"/><text x="99.1948%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.9448%" y="341" width="0.0812%" height="15" fill="rgb(238,100,19)" fg:x="1219" fg:w="1"/><text x="99.1948%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.9448%" y="325" width="0.0812%" height="15" fill="rgb(244,30,14)" fg:x="1219" fg:w="1"/><text x="99.1948%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.9448%" y="309" width="0.0812%" height="15" fill="rgb(249,174,6)" fg:x="1219" fg:w="1"/><text x="99.1948%" y="319.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="98.9448%" y="293" width="0.0812%" height="15" fill="rgb(235,213,41)" fg:x="1219" fg:w="1"/><text x="99.1948%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0260%" y="501" width="0.0812%" height="15" fill="rgb(213,118,6)" fg:x="1220" fg:w="1"/><text x="99.2760%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0260%" y="485" width="0.0812%" height="15" fill="rgb(235,44,51)" fg:x="1220" fg:w="1"/><text x="99.2760%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.0260%" y="549" width="0.1623%" height="15" fill="rgb(217,9,53)" fg:x="1220" fg:w="2"/><text x="99.2760%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="99.0260%" y="533" width="0.1623%" height="15" fill="rgb(237,172,34)" fg:x="1220" fg:w="2"/><text x="99.2760%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.0260%" y="517" width="0.1623%" height="15" fill="rgb(206,206,11)" fg:x="1220" fg:w="2"/><text x="99.2760%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.1071%" y="501" width="0.0812%" height="15" fill="rgb(214,149,29)" fg:x="1221" fg:w="1"/><text x="99.3571%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.1071%" y="485" width="0.0812%" height="15" fill="rgb(208,123,3)" fg:x="1221" fg:w="1"/><text x="99.3571%" y="495.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.1071%" y="469" width="0.0812%" height="15" fill="rgb(229,126,4)" fg:x="1221" fg:w="1"/><text x="99.3571%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.1071%" y="453" width="0.0812%" height="15" fill="rgb(222,92,36)" fg:x="1221" fg:w="1"/><text x="99.3571%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.1071%" y="437" width="0.0812%" height="15" fill="rgb(216,39,41)" fg:x="1221" fg:w="1"/><text x="99.3571%" y="447.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.1071%" y="421" width="0.0812%" height="15" fill="rgb(253,127,28)" fg:x="1221" fg:w="1"/><text x="99.3571%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1071%" y="405" width="0.0812%" height="15" fill="rgb(249,152,51)" fg:x="1221" fg:w="1"/><text x="99.3571%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1071%" y="389" width="0.0812%" height="15" fill="rgb(209,123,42)" fg:x="1221" fg:w="1"/><text x="99.3571%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="99.1071%" y="373" width="0.0812%" height="15" fill="rgb(241,118,22)" fg:x="1221" fg:w="1"/><text x="99.3571%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="99.1071%" y="357" width="0.0812%" height="15" fill="rgb(208,25,7)" fg:x="1221" fg:w="1"/><text x="99.3571%" y="367.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="99.1071%" y="341" width="0.0812%" height="15" fill="rgb(243,144,39)" fg:x="1221" fg:w="1"/><text x="99.3571%" y="351.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="99.1071%" y="325" width="0.0812%" height="15" fill="rgb(250,50,5)" fg:x="1221" fg:w="1"/><text x="99.3571%" y="335.50"></text></g><g><title>serde_json::error::make_error (1 samples, 0.08%)</title><rect x="99.1071%" y="309" width="0.0812%" height="15" fill="rgb(207,67,11)" fg:x="1221" fg:w="1"/><text x="99.3571%" y="319.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.08%)</title><rect x="99.1071%" y="293" width="0.0812%" height="15" fill="rgb(245,204,40)" fg:x="1221" fg:w="1"/><text x="99.3571%" y="303.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (1 samples, 0.08%)</title><rect x="99.1071%" y="277" width="0.0812%" height="15" fill="rgb(238,228,24)" fg:x="1221" fg:w="1"/><text x="99.3571%" y="287.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::maximal_suffix (1 samples, 0.08%)</title><rect x="99.1071%" y="261" width="0.0812%" height="15" fill="rgb(217,116,22)" fg:x="1221" fg:w="1"/><text x="99.3571%" y="271.50"></text></g><g><title>engine::session::internal::Added::find_refs (4 samples, 0.32%)</title><rect x="98.9448%" y="581" width="0.3247%" height="15" fill="rgb(234,98,12)" fg:x="1219" fg:w="4"/><text x="99.1948%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="98.9448%" y="565" width="0.3247%" height="15" fill="rgb(242,170,50)" fg:x="1219" fg:w="4"/><text x="99.1948%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1883%" y="549" width="0.0812%" height="15" fill="rgb(235,7,5)" fg:x="1222" fg:w="1"/><text x="99.4383%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3506%" y="517" width="0.0812%" height="15" fill="rgb(241,114,28)" fg:x="1224" fg:w="1"/><text x="99.6006%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3506%" y="501" width="0.0812%" height="15" fill="rgb(246,112,42)" fg:x="1224" fg:w="1"/><text x="99.6006%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="99.2695%" y="565" width="0.2435%" height="15" fill="rgb(248,228,14)" fg:x="1223" fg:w="3"/><text x="99.5195%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.3506%" y="549" width="0.1623%" height="15" fill="rgb(208,133,18)" fg:x="1224" fg:w="2"/><text x="99.6006%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.3506%" y="533" width="0.1623%" height="15" fill="rgb(207,35,49)" fg:x="1224" fg:w="2"/><text x="99.6006%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.4318%" y="517" width="0.0812%" height="15" fill="rgb(205,68,36)" fg:x="1225" fg:w="1"/><text x="99.6818%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4318%" y="501" width="0.0812%" height="15" fill="rgb(245,62,40)" fg:x="1225" fg:w="1"/><text x="99.6818%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.4318%" y="485" width="0.0812%" height="15" fill="rgb(228,27,24)" fg:x="1225" fg:w="1"/><text x="99.6818%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.4318%" y="469" width="0.0812%" height="15" fill="rgb(253,19,12)" fg:x="1225" fg:w="1"/><text x="99.6818%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.4318%" y="453" width="0.0812%" height="15" fill="rgb(232,28,20)" fg:x="1225" fg:w="1"/><text x="99.6818%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.4318%" y="437" width="0.0812%" height="15" fill="rgb(218,35,51)" fg:x="1225" fg:w="1"/><text x="99.6818%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.4318%" y="421" width="0.0812%" height="15" fill="rgb(212,90,40)" fg:x="1225" fg:w="1"/><text x="99.6818%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.4318%" y="405" width="0.0812%" height="15" fill="rgb(220,172,12)" fg:x="1225" fg:w="1"/><text x="99.6818%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.4318%" y="389" width="0.0812%" height="15" fill="rgb(226,159,20)" fg:x="1225" fg:w="1"/><text x="99.6818%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.4318%" y="373" width="0.0812%" height="15" fill="rgb(234,205,16)" fg:x="1225" fg:w="1"/><text x="99.6818%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.4318%" y="357" width="0.0812%" height="15" fill="rgb(207,9,39)" fg:x="1225" fg:w="1"/><text x="99.6818%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.4318%" y="341" width="0.0812%" height="15" fill="rgb(249,143,15)" fg:x="1225" fg:w="1"/><text x="99.6818%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.4318%" y="325" width="0.0812%" height="15" fill="rgb(253,133,29)" fg:x="1225" fg:w="1"/><text x="99.6818%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4318%" y="309" width="0.0812%" height="15" fill="rgb(221,187,0)" fg:x="1225" fg:w="1"/><text x="99.6818%" y="319.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.65%)</title><rect x="98.9448%" y="597" width="0.6494%" height="15" fill="rgb(205,204,26)" fg:x="1219" fg:w="8"/><text x="99.1948%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="99.2695%" y="581" width="0.3247%" height="15" fill="rgb(224,68,54)" fg:x="1223" fg:w="4"/><text x="99.5195%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.5130%" y="565" width="0.0812%" height="15" fill="rgb(209,67,4)" fg:x="1226" fg:w="1"/><text x="99.7630%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.5130%" y="549" width="0.0812%" height="15" fill="rgb(228,229,18)" fg:x="1226" fg:w="1"/><text x="99.7630%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.5130%" y="533" width="0.0812%" height="15" fill="rgb(231,89,13)" fg:x="1226" fg:w="1"/><text x="99.7630%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5130%" y="517" width="0.0812%" height="15" fill="rgb(210,182,18)" fg:x="1226" fg:w="1"/><text x="99.7630%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5130%" y="501" width="0.0812%" height="15" fill="rgb(240,105,2)" fg:x="1226" fg:w="1"/><text x="99.7630%" y="511.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="99.5130%" y="485" width="0.0812%" height="15" fill="rgb(207,170,50)" fg:x="1226" fg:w="1"/><text x="99.7630%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5942%" y="549" width="0.0812%" height="15" fill="rgb(232,133,24)" fg:x="1227" fg:w="1"/><text x="99.8442%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5942%" y="533" width="0.0812%" height="15" fill="rgb(235,166,27)" fg:x="1227" fg:w="1"/><text x="99.8442%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5942%" y="517" width="0.0812%" height="15" fill="rgb(209,19,13)" fg:x="1227" fg:w="1"/><text x="99.8442%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.5942%" y="501" width="0.0812%" height="15" fill="rgb(226,79,39)" fg:x="1227" fg:w="1"/><text x="99.8442%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.5942%" y="485" width="0.0812%" height="15" fill="rgb(222,163,10)" fg:x="1227" fg:w="1"/><text x="99.8442%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.5942%" y="469" width="0.0812%" height="15" fill="rgb(214,44,19)" fg:x="1227" fg:w="1"/><text x="99.8442%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.5942%" y="453" width="0.0812%" height="15" fill="rgb(210,217,13)" fg:x="1227" fg:w="1"/><text x="99.8442%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.5942%" y="437" width="0.0812%" height="15" fill="rgb(237,61,54)" fg:x="1227" fg:w="1"/><text x="99.8442%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.5942%" y="421" width="0.0812%" height="15" fill="rgb(226,184,24)" fg:x="1227" fg:w="1"/><text x="99.8442%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.5942%" y="405" width="0.0812%" height="15" fill="rgb(223,226,4)" fg:x="1227" fg:w="1"/><text x="99.8442%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.5942%" y="389" width="0.0812%" height="15" fill="rgb(210,26,41)" fg:x="1227" fg:w="1"/><text x="99.8442%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.5942%" y="373" width="0.0812%" height="15" fill="rgb(220,221,6)" fg:x="1227" fg:w="1"/><text x="99.8442%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5942%" y="357" width="0.0812%" height="15" fill="rgb(225,89,49)" fg:x="1227" fg:w="1"/><text x="99.8442%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.6753%" y="549" width="0.1623%" height="15" fill="rgb(218,70,45)" fg:x="1228" fg:w="2"/><text x="99.9253%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.6753%" y="533" width="0.1623%" height="15" fill="rgb(238,166,21)" fg:x="1228" fg:w="2"/><text x="99.9253%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6753%" y="517" width="0.1623%" height="15" fill="rgb(224,141,44)" fg:x="1228" fg:w="2"/><text x="99.9253%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.6753%" y="501" width="0.1623%" height="15" fill="rgb(230,12,49)" fg:x="1228" fg:w="2"/><text x="99.9253%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6753%" y="485" width="0.1623%" height="15" fill="rgb(212,174,12)" fg:x="1228" fg:w="2"/><text x="99.9253%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.6753%" y="469" width="0.1623%" height="15" fill="rgb(246,67,9)" fg:x="1228" fg:w="2"/><text x="99.9253%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6753%" y="453" width="0.1623%" height="15" fill="rgb(239,35,23)" fg:x="1228" fg:w="2"/><text x="99.9253%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6753%" y="437" width="0.1623%" height="15" fill="rgb(211,167,0)" fg:x="1228" fg:w="2"/><text x="99.9253%" y="447.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.7565%" y="421" width="0.0812%" height="15" fill="rgb(225,119,45)" fg:x="1229" fg:w="1"/><text x="100.0065%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7565%" y="405" width="0.0812%" height="15" fill="rgb(210,162,6)" fg:x="1229" fg:w="1"/><text x="100.0065%" y="415.50"></text></g><g><title>all (1,232 samples, 100%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(208,118,35)" fg:x="0" fg:w="1232"/><text x="0.2500%" y="991.50"></text></g><g><title>simple-e01ff2e0 (1,232 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(239,4,53)" fg:x="0" fg:w="1232"/><text x="0.2500%" y="975.50">simple-e01ff2e0</text></g><g><title>_start (1,232 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(213,130,21)" fg:x="0" fg:w="1232"/><text x="0.2500%" y="959.50">_start</text></g><g><title>__libc_start_main (1,232 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(235,148,0)" fg:x="0" fg:w="1232"/><text x="0.2500%" y="943.50">__libc_start_main</text></g><g><title>main (1,232 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(244,224,18)" fg:x="0" fg:w="1232"/><text x="0.2500%" y="927.50">main</text></g><g><title>std::rt::lang_start_internal (1,232 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(211,214,4)" fg:x="0" fg:w="1232"/><text x="0.2500%" y="911.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,232 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(206,119,25)" fg:x="0" fg:w="1232"/><text x="0.2500%" y="895.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,232 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(243,93,47)" fg:x="0" fg:w="1232"/><text x="0.2500%" y="879.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,232 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(224,194,6)" fg:x="0" fg:w="1232"/><text x="0.2500%" y="863.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,232 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(243,229,6)" fg:x="0" fg:w="1232"/><text x="0.2500%" y="847.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,232 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(207,23,50)" fg:x="0" fg:w="1232"/><text x="0.2500%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,232 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(253,192,32)" fg:x="0" fg:w="1232"/><text x="0.2500%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,232 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(213,21,6)" fg:x="0" fg:w="1232"/><text x="0.2500%" y="799.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,232 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(243,151,13)" fg:x="0" fg:w="1232"/><text x="0.2500%" y="783.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,232 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(233,165,41)" fg:x="0" fg:w="1232"/><text x="0.2500%" y="767.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,232 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(246,176,45)" fg:x="0" fg:w="1232"/><text x="0.2500%" y="751.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,232 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(217,170,52)" fg:x="0" fg:w="1232"/><text x="0.2500%" y="735.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,232 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(214,203,54)" fg:x="0" fg:w="1232"/><text x="0.2500%" y="719.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,232 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(248,215,49)" fg:x="0" fg:w="1232"/><text x="0.2500%" y="703.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (322 samples, 26.14%)</title><rect x="73.8636%" y="677" width="26.1364%" height="15" fill="rgb(208,46,10)" fg:x="910" fg:w="322"/><text x="74.1136%" y="687.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as cr..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (322 samples, 26.14%)</title><rect x="73.8636%" y="661" width="26.1364%" height="15" fill="rgb(254,5,31)" fg:x="910" fg:w="322"/><text x="74.1136%" y="671.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (322 samples, 26.14%)</title><rect x="73.8636%" y="645" width="26.1364%" height="15" fill="rgb(222,104,33)" fg:x="910" fg:w="322"/><text x="74.1136%" y="655.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (200 samples, 16.23%)</title><rect x="83.7662%" y="629" width="16.2338%" height="15" fill="rgb(248,49,16)" fg:x="1032" fg:w="200"/><text x="84.0162%" y="639.50">engine::session::Session:..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (200 samples, 16.23%)</title><rect x="83.7662%" y="613" width="16.2338%" height="15" fill="rgb(232,198,41)" fg:x="1032" fg:w="200"/><text x="84.0162%" y="623.50">engine::session::Session:..</text></g><g><title>kernel::model::EntityPtrResolver::world (5 samples, 0.41%)</title><rect x="99.5942%" y="597" width="0.4058%" height="15" fill="rgb(214,125,3)" fg:x="1227" fg:w="5"/><text x="99.8442%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.41%)</title><rect x="99.5942%" y="581" width="0.4058%" height="15" fill="rgb(229,220,28)" fg:x="1227" fg:w="5"/><text x="99.8442%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.41%)</title><rect x="99.5942%" y="565" width="0.4058%" height="15" fill="rgb(222,64,37)" fg:x="1227" fg:w="5"/><text x="99.8442%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.8377%" y="549" width="0.1623%" height="15" fill="rgb(249,184,13)" fg:x="1230" fg:w="2"/><text x="100.0877%" y="559.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.8377%" y="533" width="0.1623%" height="15" fill="rgb(252,176,6)" fg:x="1230" fg:w="2"/><text x="100.0877%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8377%" y="517" width="0.1623%" height="15" fill="rgb(228,153,7)" fg:x="1230" fg:w="2"/><text x="100.0877%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8377%" y="501" width="0.1623%" height="15" fill="rgb(242,193,5)" fg:x="1230" fg:w="2"/><text x="100.0877%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8377%" y="485" width="0.1623%" height="15" fill="rgb(232,140,9)" fg:x="1230" fg:w="2"/><text x="100.0877%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8377%" y="469" width="0.1623%" height="15" fill="rgb(213,222,16)" fg:x="1230" fg:w="2"/><text x="100.0877%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8377%" y="453" width="0.1623%" height="15" fill="rgb(222,75,50)" fg:x="1230" fg:w="2"/><text x="100.0877%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8377%" y="437" width="0.1623%" height="15" fill="rgb(205,180,2)" fg:x="1230" fg:w="2"/><text x="100.0877%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8377%" y="421" width="0.1623%" height="15" fill="rgb(216,34,7)" fg:x="1230" fg:w="2"/><text x="100.0877%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9188%" y="405" width="0.0812%" height="15" fill="rgb(253,16,32)" fg:x="1231" fg:w="1"/><text x="100.1688%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9188%" y="389" width="0.0812%" height="15" fill="rgb(208,97,28)" fg:x="1231" fg:w="1"/><text x="100.1688%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9188%" y="373" width="0.0812%" height="15" fill="rgb(225,92,11)" fg:x="1231" fg:w="1"/><text x="100.1688%" y="383.50"></text></g></svg></svg>