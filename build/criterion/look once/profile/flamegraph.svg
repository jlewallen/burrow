<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1078" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1061.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1061.00"> </text><svg id="frames" x="10" width="1180" total_samples="1297"><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="0.0000%" y="597" width="0.2313%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.15%)</title><rect x="0.0771%" y="581" width="0.1542%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.3271%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.15%)</title><rect x="0.0771%" y="565" width="0.1542%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="2"/><text x="0.3271%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.15%)</title><rect x="0.0771%" y="549" width="0.1542%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="2"/><text x="0.3271%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1542%" y="533" width="0.0771%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.4042%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="0.0000%" y="677" width="0.3084%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="4"/><text x="0.2500%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (4 samples, 0.31%)</title><rect x="0.0000%" y="661" width="0.3084%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="0.0000%" y="645" width="0.3084%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="4"/><text x="0.2500%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (4 samples, 0.31%)</title><rect x="0.0000%" y="629" width="0.3084%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="0.0000%" y="613" width="0.3084%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="4"/><text x="0.2500%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2313%" y="597" width="0.0771%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="1"/><text x="0.4813%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.3084%" y="533" width="0.0771%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="1"/><text x="0.5584%" y="543.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.15%)</title><rect x="0.3084%" y="597" width="0.1542%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="2"/><text x="0.5584%" y="607.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.15%)</title><rect x="0.3084%" y="581" width="0.1542%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="2"/><text x="0.5584%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="0.3084%" y="565" width="0.1542%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="2"/><text x="0.5584%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="0.3084%" y="549" width="0.1542%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="2"/><text x="0.5584%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.3855%" y="533" width="0.0771%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="0.6355%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.3855%" y="517" width="0.0771%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="1"/><text x="0.6355%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="0.3855%" y="501" width="0.0771%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="1"/><text x="0.6355%" y="511.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="0.3855%" y="485" width="0.0771%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="1"/><text x="0.6355%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.3855%" y="469" width="0.0771%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="1"/><text x="0.6355%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.23%)</title><rect x="0.3084%" y="645" width="0.2313%" height="15" fill="rgb(235,183,28)" fg:x="4" fg:w="3"/><text x="0.5584%" y="655.50"></text></g><g><title>engine::internal::Entities::prepare_entity (3 samples, 0.23%)</title><rect x="0.3084%" y="629" width="0.2313%" height="15" fill="rgb(221,5,38)" fg:x="4" fg:w="3"/><text x="0.5584%" y="639.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.23%)</title><rect x="0.3084%" y="613" width="0.2313%" height="15" fill="rgb(247,18,42)" fg:x="4" fg:w="3"/><text x="0.5584%" y="623.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="0.4626%" y="597" width="0.0771%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="1"/><text x="0.7126%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.4626%" y="581" width="0.0771%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="1"/><text x="0.7126%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.4626%" y="565" width="0.0771%" height="15" fill="rgb(225,111,53)" fg:x="6" fg:w="1"/><text x="0.7126%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.4626%" y="549" width="0.0771%" height="15" fill="rgb(238,160,17)" fg:x="6" fg:w="1"/><text x="0.7126%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityKey as core::convert::From&lt;&amp;str&gt;&gt;::from (2 samples, 0.15%)</title><rect x="0.5397%" y="645" width="0.1542%" height="15" fill="rgb(214,148,48)" fg:x="7" fg:w="2"/><text x="0.7897%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="0.6168%" y="629" width="0.0771%" height="15" fill="rgb(232,36,49)" fg:x="8" fg:w="1"/><text x="0.8668%" y="639.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="0.7710%" y="581" width="0.0771%" height="15" fill="rgb(209,103,24)" fg:x="10" fg:w="1"/><text x="1.0210%" y="591.50"></text></g><g><title>engine::session::Session::initialize (6 samples, 0.46%)</title><rect x="0.6939%" y="645" width="0.4626%" height="15" fill="rgb(229,88,8)" fg:x="9" fg:w="6"/><text x="0.9439%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (6 samples, 0.46%)</title><rect x="0.6939%" y="629" width="0.4626%" height="15" fill="rgb(213,181,19)" fg:x="9" fg:w="6"/><text x="0.9439%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.46%)</title><rect x="0.6939%" y="613" width="0.4626%" height="15" fill="rgb(254,191,54)" fg:x="9" fg:w="6"/><text x="0.9439%" y="623.50"></text></g><g><title>libloading::os::unix::Library::open (5 samples, 0.39%)</title><rect x="0.7710%" y="597" width="0.3855%" height="15" fill="rgb(241,83,37)" fg:x="10" fg:w="5"/><text x="1.0210%" y="607.50"></text></g><g><title>dlopen (4 samples, 0.31%)</title><rect x="0.8481%" y="581" width="0.3084%" height="15" fill="rgb(233,36,39)" fg:x="11" fg:w="4"/><text x="1.0981%" y="591.50"></text></g><g><title>_dl_catch_error (4 samples, 0.31%)</title><rect x="0.8481%" y="565" width="0.3084%" height="15" fill="rgb(226,3,54)" fg:x="11" fg:w="4"/><text x="1.0981%" y="575.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.31%)</title><rect x="0.8481%" y="549" width="0.3084%" height="15" fill="rgb(245,192,40)" fg:x="11" fg:w="4"/><text x="1.0981%" y="559.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.31%)</title><rect x="0.8481%" y="533" width="0.3084%" height="15" fill="rgb(238,167,29)" fg:x="11" fg:w="4"/><text x="1.0981%" y="543.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.31%)</title><rect x="0.8481%" y="517" width="0.3084%" height="15" fill="rgb(232,182,51)" fg:x="11" fg:w="4"/><text x="1.0981%" y="527.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.15%)</title><rect x="1.1565%" y="645" width="0.1542%" height="15" fill="rgb(231,60,39)" fg:x="15" fg:w="2"/><text x="1.4065%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.15%)</title><rect x="1.1565%" y="629" width="0.1542%" height="15" fill="rgb(208,69,12)" fg:x="15" fg:w="2"/><text x="1.4065%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.15%)</title><rect x="1.1565%" y="613" width="0.1542%" height="15" fill="rgb(235,93,37)" fg:x="15" fg:w="2"/><text x="1.4065%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.2336%" y="597" width="0.0771%" height="15" fill="rgb(213,116,39)" fg:x="16" fg:w="1"/><text x="1.4836%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.2336%" y="581" width="0.0771%" height="15" fill="rgb(222,207,29)" fg:x="16" fg:w="1"/><text x="1.4836%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.2336%" y="565" width="0.0771%" height="15" fill="rgb(206,96,30)" fg:x="16" fg:w="1"/><text x="1.4836%" y="575.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (14 samples, 1.08%)</title><rect x="0.3084%" y="677" width="1.0794%" height="15" fill="rgb(218,138,4)" fg:x="4" fg:w="14"/><text x="0.5584%" y="687.50"></text></g><g><title>engine::session::Session::new (14 samples, 1.08%)</title><rect x="0.3084%" y="661" width="1.0794%" height="15" fill="rgb(250,191,14)" fg:x="4" fg:w="14"/><text x="0.5584%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="1.3107%" y="645" width="0.0771%" height="15" fill="rgb(239,60,40)" fg:x="17" fg:w="1"/><text x="1.5607%" y="655.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="1.3107%" y="629" width="0.0771%" height="15" fill="rgb(206,27,48)" fg:x="17" fg:w="1"/><text x="1.5607%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="1.4649%" y="661" width="0.0771%" height="15" fill="rgb(225,35,8)" fg:x="19" fg:w="1"/><text x="1.7149%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.4649%" y="645" width="0.0771%" height="15" fill="rgb(250,213,24)" fg:x="19" fg:w="1"/><text x="1.7149%" y="655.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.5420%" y="629" width="0.0771%" height="15" fill="rgb(247,123,22)" fg:x="20" fg:w="1"/><text x="1.7920%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="1.5420%" y="613" width="0.0771%" height="15" fill="rgb(231,138,38)" fg:x="20" fg:w="1"/><text x="1.7920%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="1.5420%" y="597" width="0.0771%" height="15" fill="rgb(231,145,46)" fg:x="20" fg:w="1"/><text x="1.7920%" y="607.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="1.6191%" y="629" width="0.0771%" height="15" fill="rgb(251,118,11)" fg:x="21" fg:w="1"/><text x="1.8691%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="1.6191%" y="613" width="0.0771%" height="15" fill="rgb(217,147,25)" fg:x="21" fg:w="1"/><text x="1.8691%" y="623.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="1.6191%" y="597" width="0.0771%" height="15" fill="rgb(247,81,37)" fg:x="21" fg:w="1"/><text x="1.8691%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="1.6191%" y="581" width="0.0771%" height="15" fill="rgb(209,12,38)" fg:x="21" fg:w="1"/><text x="1.8691%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.15%)</title><rect x="1.7733%" y="565" width="0.1542%" height="15" fill="rgb(227,1,9)" fg:x="23" fg:w="2"/><text x="2.0233%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.15%)</title><rect x="1.7733%" y="549" width="0.1542%" height="15" fill="rgb(248,47,43)" fg:x="23" fg:w="2"/><text x="2.0233%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.8504%" y="533" width="0.0771%" height="15" fill="rgb(221,10,30)" fg:x="24" fg:w="1"/><text x="2.1004%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.8504%" y="517" width="0.0771%" height="15" fill="rgb(210,229,1)" fg:x="24" fg:w="1"/><text x="2.1004%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.8504%" y="501" width="0.0771%" height="15" fill="rgb(222,148,37)" fg:x="24" fg:w="1"/><text x="2.1004%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.8504%" y="485" width="0.0771%" height="15" fill="rgb(234,67,33)" fg:x="24" fg:w="1"/><text x="2.1004%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.8504%" y="469" width="0.0771%" height="15" fill="rgb(247,98,35)" fg:x="24" fg:w="1"/><text x="2.1004%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.9275%" y="549" width="0.0771%" height="15" fill="rgb(247,138,52)" fg:x="25" fg:w="1"/><text x="2.1775%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.9275%" y="533" width="0.0771%" height="15" fill="rgb(213,79,30)" fg:x="25" fg:w="1"/><text x="2.1775%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.9275%" y="517" width="0.0771%" height="15" fill="rgb(246,177,23)" fg:x="25" fg:w="1"/><text x="2.1775%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.0046%" y="533" width="0.0771%" height="15" fill="rgb(230,62,27)" fg:x="26" fg:w="1"/><text x="2.2546%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.0046%" y="517" width="0.0771%" height="15" fill="rgb(216,154,8)" fg:x="26" fg:w="1"/><text x="2.2546%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.0046%" y="501" width="0.0771%" height="15" fill="rgb(244,35,45)" fg:x="26" fg:w="1"/><text x="2.2546%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.0046%" y="485" width="0.0771%" height="15" fill="rgb(251,115,12)" fg:x="26" fg:w="1"/><text x="2.2546%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.62%)</title><rect x="1.6962%" y="597" width="0.6168%" height="15" fill="rgb(240,54,50)" fg:x="22" fg:w="8"/><text x="1.9462%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.62%)</title><rect x="1.6962%" y="581" width="0.6168%" height="15" fill="rgb(233,84,52)" fg:x="22" fg:w="8"/><text x="1.9462%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="1.9275%" y="565" width="0.3855%" height="15" fill="rgb(207,117,47)" fg:x="25" fg:w="5"/><text x="2.1775%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.31%)</title><rect x="2.0046%" y="549" width="0.3084%" height="15" fill="rgb(249,43,39)" fg:x="26" fg:w="4"/><text x="2.2546%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="2.0817%" y="533" width="0.2313%" height="15" fill="rgb(209,38,44)" fg:x="27" fg:w="3"/><text x="2.3317%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.23%)</title><rect x="2.0817%" y="517" width="0.2313%" height="15" fill="rgb(236,212,23)" fg:x="27" fg:w="3"/><text x="2.3317%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.2359%" y="501" width="0.0771%" height="15" fill="rgb(242,79,21)" fg:x="29" fg:w="1"/><text x="2.4859%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.2359%" y="485" width="0.0771%" height="15" fill="rgb(211,96,35)" fg:x="29" fg:w="1"/><text x="2.4859%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.2359%" y="469" width="0.0771%" height="15" fill="rgb(253,215,40)" fg:x="29" fg:w="1"/><text x="2.4859%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.3901%" y="549" width="0.0771%" height="15" fill="rgb(211,81,21)" fg:x="31" fg:w="1"/><text x="2.6401%" y="559.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4672%" y="549" width="0.0771%" height="15" fill="rgb(208,190,38)" fg:x="32" fg:w="1"/><text x="2.7172%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.4672%" y="533" width="0.0771%" height="15" fill="rgb(235,213,38)" fg:x="32" fg:w="1"/><text x="2.7172%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="2.4672%" y="517" width="0.0771%" height="15" fill="rgb(237,122,38)" fg:x="32" fg:w="1"/><text x="2.7172%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.4672%" y="501" width="0.0771%" height="15" fill="rgb(244,218,35)" fg:x="32" fg:w="1"/><text x="2.7172%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.4672%" y="485" width="0.0771%" height="15" fill="rgb(240,68,47)" fg:x="32" fg:w="1"/><text x="2.7172%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.4672%" y="469" width="0.0771%" height="15" fill="rgb(210,16,53)" fg:x="32" fg:w="1"/><text x="2.7172%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.23%)</title><rect x="2.5443%" y="517" width="0.2313%" height="15" fill="rgb(235,124,12)" fg:x="33" fg:w="3"/><text x="2.7943%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.15%)</title><rect x="2.6214%" y="501" width="0.1542%" height="15" fill="rgb(224,169,11)" fg:x="34" fg:w="2"/><text x="2.8714%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.6985%" y="485" width="0.0771%" height="15" fill="rgb(250,166,2)" fg:x="35" fg:w="1"/><text x="2.9485%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.6985%" y="469" width="0.0771%" height="15" fill="rgb(242,216,29)" fg:x="35" fg:w="1"/><text x="2.9485%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.6985%" y="453" width="0.0771%" height="15" fill="rgb(230,116,27)" fg:x="35" fg:w="1"/><text x="2.9485%" y="463.50"></text></g><g><title>kernel::compare::any_entity_changes (7 samples, 0.54%)</title><rect x="2.3130%" y="597" width="0.5397%" height="15" fill="rgb(228,99,48)" fg:x="30" fg:w="7"/><text x="2.5630%" y="607.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (7 samples, 0.54%)</title><rect x="2.3130%" y="581" width="0.5397%" height="15" fill="rgb(253,11,6)" fg:x="30" fg:w="7"/><text x="2.5630%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.54%)</title><rect x="2.3130%" y="565" width="0.5397%" height="15" fill="rgb(247,143,39)" fg:x="30" fg:w="7"/><text x="2.5630%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.31%)</title><rect x="2.5443%" y="549" width="0.3084%" height="15" fill="rgb(236,97,10)" fg:x="33" fg:w="4"/><text x="2.7943%" y="559.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (4 samples, 0.31%)</title><rect x="2.5443%" y="533" width="0.3084%" height="15" fill="rgb(233,208,19)" fg:x="33" fg:w="4"/><text x="2.7943%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="2.7756%" y="517" width="0.0771%" height="15" fill="rgb(216,164,2)" fg:x="36" fg:w="1"/><text x="3.0256%" y="527.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (16 samples, 1.23%)</title><rect x="1.6962%" y="629" width="1.2336%" height="15" fill="rgb(220,129,5)" fg:x="22" fg:w="16"/><text x="1.9462%" y="639.50"></text></g><g><title>engine::session::Session::check_for_changes (16 samples, 1.23%)</title><rect x="1.6962%" y="613" width="1.2336%" height="15" fill="rgb(242,17,10)" fg:x="22" fg:w="16"/><text x="1.9462%" y="623.50"></text></g><g><title>kernel::model::Entity::set_gid (1 samples, 0.08%)</title><rect x="2.8527%" y="597" width="0.0771%" height="15" fill="rgb(242,107,0)" fg:x="37" fg:w="1"/><text x="3.1027%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.8527%" y="581" width="0.0771%" height="15" fill="rgb(251,28,31)" fg:x="37" fg:w="1"/><text x="3.1027%" y="591.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.46%)</title><rect x="1.5420%" y="661" width="1.4649%" height="15" fill="rgb(233,223,10)" fg:x="20" fg:w="19"/><text x="1.7920%" y="671.50"></text></g><g><title>engine::session::Session::save_entity_changes (19 samples, 1.46%)</title><rect x="1.5420%" y="645" width="1.4649%" height="15" fill="rgb(215,21,27)" fg:x="20" fg:w="19"/><text x="1.7920%" y="655.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="2.9298%" y="629" width="0.0771%" height="15" fill="rgb(232,23,21)" fg:x="38" fg:w="1"/><text x="3.1798%" y="639.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="3.0069%" y="629" width="0.0771%" height="15" fill="rgb(244,5,23)" fg:x="39" fg:w="1"/><text x="3.2569%" y="639.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="3.0069%" y="613" width="0.0771%" height="15" fill="rgb(226,81,46)" fg:x="39" fg:w="1"/><text x="3.2569%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0069%" y="597" width="0.0771%" height="15" fill="rgb(247,70,30)" fg:x="39" fg:w="1"/><text x="3.2569%" y="607.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.15%)</title><rect x="3.0069%" y="661" width="0.1542%" height="15" fill="rgb(212,68,19)" fg:x="39" fg:w="2"/><text x="3.2569%" y="671.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.15%)</title><rect x="3.0069%" y="645" width="0.1542%" height="15" fill="rgb(240,187,13)" fg:x="39" fg:w="2"/><text x="3.2569%" y="655.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="3.0840%" y="629" width="0.0771%" height="15" fill="rgb(223,113,26)" fg:x="40" fg:w="1"/><text x="3.3340%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="3.0840%" y="613" width="0.0771%" height="15" fill="rgb(206,192,2)" fg:x="40" fg:w="1"/><text x="3.3340%" y="623.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="3.0840%" y="597" width="0.0771%" height="15" fill="rgb(241,108,4)" fg:x="40" fg:w="1"/><text x="3.3340%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="3.0840%" y="581" width="0.0771%" height="15" fill="rgb(247,173,49)" fg:x="40" fg:w="1"/><text x="3.3340%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="3.0840%" y="565" width="0.0771%" height="15" fill="rgb(224,114,35)" fg:x="40" fg:w="1"/><text x="3.3340%" y="575.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="3.0840%" y="549" width="0.0771%" height="15" fill="rgb(245,159,27)" fg:x="40" fg:w="1"/><text x="3.3340%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="3.0840%" y="533" width="0.0771%" height="15" fill="rgb(245,172,44)" fg:x="40" fg:w="1"/><text x="3.3340%" y="543.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="3.0840%" y="517" width="0.0771%" height="15" fill="rgb(236,23,11)" fg:x="40" fg:w="1"/><text x="3.3340%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="3.0840%" y="501" width="0.0771%" height="15" fill="rgb(205,117,38)" fg:x="40" fg:w="1"/><text x="3.3340%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.0840%" y="485" width="0.0771%" height="15" fill="rgb(237,72,25)" fg:x="40" fg:w="1"/><text x="3.3340%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.0840%" y="469" width="0.0771%" height="15" fill="rgb(244,70,9)" fg:x="40" fg:w="1"/><text x="3.3340%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.0840%" y="453" width="0.0771%" height="15" fill="rgb(217,125,39)" fg:x="40" fg:w="1"/><text x="3.3340%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.0840%" y="437" width="0.0771%" height="15" fill="rgb(235,36,10)" fg:x="40" fg:w="1"/><text x="3.3340%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.0840%" y="421" width="0.0771%" height="15" fill="rgb(251,123,47)" fg:x="40" fg:w="1"/><text x="3.3340%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.0840%" y="405" width="0.0771%" height="15" fill="rgb(221,13,13)" fg:x="40" fg:w="1"/><text x="3.3340%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.0840%" y="389" width="0.0771%" height="15" fill="rgb(238,131,9)" fg:x="40" fg:w="1"/><text x="3.3340%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityKey as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.08%)</title><rect x="3.1611%" y="645" width="0.0771%" height="15" fill="rgb(211,50,8)" fg:x="41" fg:w="1"/><text x="3.4111%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.2382%" y="613" width="0.0771%" height="15" fill="rgb(245,182,24)" fg:x="42" fg:w="1"/><text x="3.4882%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.2382%" y="597" width="0.0771%" height="15" fill="rgb(242,14,37)" fg:x="42" fg:w="1"/><text x="3.4882%" y="607.50"></text></g><g><title>engine::identifiers::model::set_gid (1 samples, 0.08%)</title><rect x="3.3153%" y="613" width="0.0771%" height="15" fill="rgb(246,228,12)" fg:x="43" fg:w="1"/><text x="3.5653%" y="623.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="3.3153%" y="597" width="0.0771%" height="15" fill="rgb(213,55,15)" fg:x="43" fg:w="1"/><text x="3.5653%" y="607.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="3.3153%" y="581" width="0.0771%" height="15" fill="rgb(209,9,3)" fg:x="43" fg:w="1"/><text x="3.5653%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.3924%" y="597" width="0.0771%" height="15" fill="rgb(230,59,30)" fg:x="44" fg:w="1"/><text x="3.6424%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.3924%" y="581" width="0.0771%" height="15" fill="rgb(209,121,21)" fg:x="44" fg:w="1"/><text x="3.6424%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.3924%" y="565" width="0.0771%" height="15" fill="rgb(220,109,13)" fg:x="44" fg:w="1"/><text x="3.6424%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.15%)</title><rect x="3.4695%" y="549" width="0.1542%" height="15" fill="rgb(232,18,1)" fg:x="45" fg:w="2"/><text x="3.7195%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.15%)</title><rect x="3.4695%" y="533" width="0.1542%" height="15" fill="rgb(215,41,42)" fg:x="45" fg:w="2"/><text x="3.7195%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.15%)</title><rect x="3.4695%" y="517" width="0.1542%" height="15" fill="rgb(224,123,36)" fg:x="45" fg:w="2"/><text x="3.7195%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.23%)</title><rect x="3.4695%" y="565" width="0.2313%" height="15" fill="rgb(240,125,3)" fg:x="45" fg:w="3"/><text x="3.7195%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.6237%" y="549" width="0.0771%" height="15" fill="rgb(205,98,50)" fg:x="47" fg:w="1"/><text x="3.8737%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.6237%" y="533" width="0.0771%" height="15" fill="rgb(205,185,37)" fg:x="47" fg:w="1"/><text x="3.8737%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.6237%" y="517" width="0.0771%" height="15" fill="rgb(238,207,15)" fg:x="47" fg:w="1"/><text x="3.8737%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.6237%" y="501" width="0.0771%" height="15" fill="rgb(213,199,42)" fg:x="47" fg:w="1"/><text x="3.8737%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.7008%" y="549" width="0.0771%" height="15" fill="rgb(235,201,11)" fg:x="48" fg:w="1"/><text x="3.9508%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.7008%" y="533" width="0.0771%" height="15" fill="rgb(207,46,11)" fg:x="48" fg:w="1"/><text x="3.9508%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.7008%" y="517" width="0.0771%" height="15" fill="rgb(241,35,35)" fg:x="48" fg:w="1"/><text x="3.9508%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="3.7779%" y="501" width="0.0771%" height="15" fill="rgb(243,32,47)" fg:x="49" fg:w="1"/><text x="4.0279%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.7779%" y="485" width="0.0771%" height="15" fill="rgb(247,202,23)" fg:x="49" fg:w="1"/><text x="4.0279%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.15%)</title><rect x="3.7779%" y="533" width="0.1542%" height="15" fill="rgb(219,102,11)" fg:x="49" fg:w="2"/><text x="4.0279%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.15%)</title><rect x="3.7779%" y="517" width="0.1542%" height="15" fill="rgb(243,110,44)" fg:x="49" fg:w="2"/><text x="4.0279%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.8551%" y="501" width="0.0771%" height="15" fill="rgb(222,74,54)" fg:x="50" fg:w="1"/><text x="4.1051%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.9322%" y="517" width="0.0771%" height="15" fill="rgb(216,99,12)" fg:x="51" fg:w="1"/><text x="4.1822%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.9322%" y="501" width="0.0771%" height="15" fill="rgb(226,22,26)" fg:x="51" fg:w="1"/><text x="4.1822%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.31%)</title><rect x="3.7779%" y="549" width="0.3084%" height="15" fill="rgb(217,163,10)" fg:x="49" fg:w="4"/><text x="4.0279%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.15%)</title><rect x="3.9322%" y="533" width="0.1542%" height="15" fill="rgb(213,25,53)" fg:x="51" fg:w="2"/><text x="4.1822%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.0093%" y="517" width="0.0771%" height="15" fill="rgb(252,105,26)" fg:x="52" fg:w="1"/><text x="4.2593%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.0093%" y="501" width="0.0771%" height="15" fill="rgb(220,39,43)" fg:x="52" fg:w="1"/><text x="4.2593%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.0093%" y="485" width="0.0771%" height="15" fill="rgb(229,68,48)" fg:x="52" fg:w="1"/><text x="4.2593%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.0093%" y="469" width="0.0771%" height="15" fill="rgb(252,8,32)" fg:x="52" fg:w="1"/><text x="4.2593%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.0093%" y="453" width="0.0771%" height="15" fill="rgb(223,20,43)" fg:x="52" fg:w="1"/><text x="4.2593%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.54%)</title><rect x="3.7008%" y="565" width="0.5397%" height="15" fill="rgb(229,81,49)" fg:x="48" fg:w="7"/><text x="3.9508%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.15%)</title><rect x="4.0864%" y="549" width="0.1542%" height="15" fill="rgb(236,28,36)" fg:x="53" fg:w="2"/><text x="4.3364%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.15%)</title><rect x="4.0864%" y="533" width="0.1542%" height="15" fill="rgb(249,185,26)" fg:x="53" fg:w="2"/><text x="4.3364%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.15%)</title><rect x="4.0864%" y="517" width="0.1542%" height="15" fill="rgb(249,174,33)" fg:x="53" fg:w="2"/><text x="4.3364%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.85%)</title><rect x="3.4695%" y="581" width="0.8481%" height="15" fill="rgb(233,201,37)" fg:x="45" fg:w="11"/><text x="3.7195%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.2406%" y="565" width="0.0771%" height="15" fill="rgb(221,78,26)" fg:x="55" fg:w="1"/><text x="4.4906%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.2406%" y="549" width="0.0771%" height="15" fill="rgb(250,127,30)" fg:x="55" fg:w="1"/><text x="4.4906%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.2406%" y="533" width="0.0771%" height="15" fill="rgb(230,49,44)" fg:x="55" fg:w="1"/><text x="4.4906%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.3177%" y="549" width="0.0771%" height="15" fill="rgb(229,67,23)" fg:x="56" fg:w="1"/><text x="4.5677%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.3948%" y="549" width="0.0771%" height="15" fill="rgb(249,83,47)" fg:x="57" fg:w="1"/><text x="4.6448%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.4719%" y="501" width="0.0771%" height="15" fill="rgb(215,43,3)" fg:x="58" fg:w="1"/><text x="4.7219%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="4.3177%" y="581" width="0.3084%" height="15" fill="rgb(238,154,13)" fg:x="56" fg:w="4"/><text x="4.5677%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.31%)</title><rect x="4.3177%" y="565" width="0.3084%" height="15" fill="rgb(219,56,2)" fg:x="56" fg:w="4"/><text x="4.5677%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.15%)</title><rect x="4.4719%" y="549" width="0.1542%" height="15" fill="rgb(233,0,4)" fg:x="58" fg:w="2"/><text x="4.7219%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.15%)</title><rect x="4.4719%" y="533" width="0.1542%" height="15" fill="rgb(235,30,7)" fg:x="58" fg:w="2"/><text x="4.7219%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.15%)</title><rect x="4.4719%" y="517" width="0.1542%" height="15" fill="rgb(250,79,13)" fg:x="58" fg:w="2"/><text x="4.7219%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="4.5490%" y="501" width="0.0771%" height="15" fill="rgb(211,146,34)" fg:x="59" fg:w="1"/><text x="4.7990%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.5490%" y="485" width="0.0771%" height="15" fill="rgb(228,22,38)" fg:x="59" fg:w="1"/><text x="4.7990%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="4.6261%" y="533" width="0.0771%" height="15" fill="rgb(235,168,5)" fg:x="60" fg:w="1"/><text x="4.8761%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="4.7032%" y="533" width="0.0771%" height="15" fill="rgb(221,155,16)" fg:x="61" fg:w="1"/><text x="4.9532%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.7032%" y="517" width="0.0771%" height="15" fill="rgb(215,215,53)" fg:x="61" fg:w="1"/><text x="4.9532%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="4.7032%" y="501" width="0.0771%" height="15" fill="rgb(223,4,10)" fg:x="61" fg:w="1"/><text x="4.9532%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="4.7032%" y="485" width="0.0771%" height="15" fill="rgb(234,103,6)" fg:x="61" fg:w="1"/><text x="4.9532%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.7032%" y="469" width="0.0771%" height="15" fill="rgb(227,97,0)" fg:x="61" fg:w="1"/><text x="4.9532%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.7032%" y="453" width="0.0771%" height="15" fill="rgb(234,150,53)" fg:x="61" fg:w="1"/><text x="4.9532%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.7032%" y="437" width="0.0771%" height="15" fill="rgb(228,201,54)" fg:x="61" fg:w="1"/><text x="4.9532%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.7032%" y="421" width="0.0771%" height="15" fill="rgb(222,22,37)" fg:x="61" fg:w="1"/><text x="4.9532%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="4.7803%" y="453" width="0.0771%" height="15" fill="rgb(237,53,32)" fg:x="62" fg:w="1"/><text x="5.0303%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="4.7803%" y="437" width="0.0771%" height="15" fill="rgb(233,25,53)" fg:x="62" fg:w="1"/><text x="5.0303%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.7803%" y="421" width="0.0771%" height="15" fill="rgb(210,40,34)" fg:x="62" fg:w="1"/><text x="5.0303%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.15%)</title><rect x="4.7803%" y="485" width="0.1542%" height="15" fill="rgb(241,220,44)" fg:x="62" fg:w="2"/><text x="5.0303%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.15%)</title><rect x="4.7803%" y="469" width="0.1542%" height="15" fill="rgb(235,28,35)" fg:x="62" fg:w="2"/><text x="5.0303%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.8574%" y="453" width="0.0771%" height="15" fill="rgb(210,56,17)" fg:x="63" fg:w="1"/><text x="5.1074%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.39%)</title><rect x="4.7803%" y="501" width="0.3855%" height="15" fill="rgb(224,130,29)" fg:x="62" fg:w="5"/><text x="5.0303%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.23%)</title><rect x="4.9345%" y="485" width="0.2313%" height="15" fill="rgb(235,212,8)" fg:x="64" fg:w="3"/><text x="5.1845%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.0887%" y="469" width="0.0771%" height="15" fill="rgb(223,33,50)" fg:x="66" fg:w="1"/><text x="5.3387%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.0887%" y="453" width="0.0771%" height="15" fill="rgb(219,149,13)" fg:x="66" fg:w="1"/><text x="5.3387%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.0887%" y="437" width="0.0771%" height="15" fill="rgb(250,156,29)" fg:x="66" fg:w="1"/><text x="5.3387%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="5.0887%" y="421" width="0.0771%" height="15" fill="rgb(216,193,19)" fg:x="66" fg:w="1"/><text x="5.3387%" y="431.50"></text></g><g><title>engine::session::Session::flush (26 samples, 2.00%)</title><rect x="3.2382%" y="645" width="2.0046%" height="15" fill="rgb(216,135,14)" fg:x="42" fg:w="26"/><text x="3.4882%" y="655.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (26 samples, 2.00%)</title><rect x="3.2382%" y="629" width="2.0046%" height="15" fill="rgb(241,47,5)" fg:x="42" fg:w="26"/><text x="3.4882%" y="639.50">e..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (24 samples, 1.85%)</title><rect x="3.3924%" y="613" width="1.8504%" height="15" fill="rgb(233,42,35)" fg:x="44" fg:w="24"/><text x="3.6424%" y="623.50">e..</text></g><g><title>engine::session::Session::check_for_changes (23 samples, 1.77%)</title><rect x="3.4695%" y="597" width="1.7733%" height="15" fill="rgb(231,13,6)" fg:x="45" fg:w="23"/><text x="3.7195%" y="607.50">e..</text></g><g><title>kernel::compare::any_entity_changes (8 samples, 0.62%)</title><rect x="4.6261%" y="581" width="0.6168%" height="15" fill="rgb(207,181,40)" fg:x="60" fg:w="8"/><text x="4.8761%" y="591.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (8 samples, 0.62%)</title><rect x="4.6261%" y="565" width="0.6168%" height="15" fill="rgb(254,173,49)" fg:x="60" fg:w="8"/><text x="4.8761%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.62%)</title><rect x="4.6261%" y="549" width="0.6168%" height="15" fill="rgb(221,1,38)" fg:x="60" fg:w="8"/><text x="4.8761%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.46%)</title><rect x="4.7803%" y="533" width="0.4626%" height="15" fill="rgb(206,124,46)" fg:x="62" fg:w="6"/><text x="5.0303%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (6 samples, 0.46%)</title><rect x="4.7803%" y="517" width="0.4626%" height="15" fill="rgb(249,21,11)" fg:x="62" fg:w="6"/><text x="5.0303%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="5.1658%" y="501" width="0.0771%" height="15" fill="rgb(222,201,40)" fg:x="67" fg:w="1"/><text x="5.4158%" y="511.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="5.2429%" y="645" width="0.0771%" height="15" fill="rgb(235,61,29)" fg:x="68" fg:w="1"/><text x="5.4929%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="5.3200%" y="629" width="0.0771%" height="15" fill="rgb(219,207,3)" fg:x="69" fg:w="1"/><text x="5.5700%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="5.3200%" y="613" width="0.0771%" height="15" fill="rgb(222,56,46)" fg:x="69" fg:w="1"/><text x="5.5700%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.3200%" y="597" width="0.0771%" height="15" fill="rgb(239,76,54)" fg:x="69" fg:w="1"/><text x="5.5700%" y="607.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.15%)</title><rect x="5.3200%" y="645" width="0.1542%" height="15" fill="rgb(231,124,27)" fg:x="69" fg:w="2"/><text x="5.5700%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="5.3971%" y="629" width="0.0771%" height="15" fill="rgb(249,195,6)" fg:x="70" fg:w="1"/><text x="5.6471%" y="639.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="5.3971%" y="613" width="0.0771%" height="15" fill="rgb(237,174,47)" fg:x="70" fg:w="1"/><text x="5.6471%" y="623.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="5.4742%" y="645" width="0.0771%" height="15" fill="rgb(206,201,31)" fg:x="71" fg:w="1"/><text x="5.7242%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="5.4742%" y="629" width="0.0771%" height="15" fill="rgb(231,57,52)" fg:x="71" fg:w="1"/><text x="5.7242%" y="639.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="5.4742%" y="613" width="0.0771%" height="15" fill="rgb(248,177,22)" fg:x="71" fg:w="1"/><text x="5.7242%" y="623.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="5.4742%" y="597" width="0.0771%" height="15" fill="rgb(215,211,37)" fg:x="71" fg:w="1"/><text x="5.7242%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.4742%" y="581" width="0.0771%" height="15" fill="rgb(241,128,51)" fg:x="71" fg:w="1"/><text x="5.7242%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.4742%" y="565" width="0.0771%" height="15" fill="rgb(227,165,31)" fg:x="71" fg:w="1"/><text x="5.7242%" y="575.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="5.5513%" y="581" width="0.0771%" height="15" fill="rgb(228,167,24)" fg:x="72" fg:w="1"/><text x="5.8013%" y="591.50"></text></g><g><title>plugins_core::build::Build::occupying (2 samples, 0.15%)</title><rect x="5.5513%" y="645" width="0.1542%" height="15" fill="rgb(228,143,12)" fg:x="72" fg:w="2"/><text x="5.8013%" y="655.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.15%)</title><rect x="5.5513%" y="629" width="0.1542%" height="15" fill="rgb(249,149,8)" fg:x="72" fg:w="2"/><text x="5.8013%" y="639.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.15%)</title><rect x="5.5513%" y="613" width="0.1542%" height="15" fill="rgb(243,35,44)" fg:x="72" fg:w="2"/><text x="5.8013%" y="623.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.15%)</title><rect x="5.5513%" y="597" width="0.1542%" height="15" fill="rgb(246,89,9)" fg:x="72" fg:w="2"/><text x="5.8013%" y="607.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="5.6284%" y="581" width="0.0771%" height="15" fill="rgb(233,213,13)" fg:x="73" fg:w="1"/><text x="5.8784%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.6284%" y="565" width="0.0771%" height="15" fill="rgb(233,141,41)" fg:x="73" fg:w="1"/><text x="5.8784%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="5.6284%" y="549" width="0.0771%" height="15" fill="rgb(239,167,4)" fg:x="73" fg:w="1"/><text x="5.8784%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.6284%" y="533" width="0.0771%" height="15" fill="rgb(209,217,16)" fg:x="73" fg:w="1"/><text x="5.8784%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (34 samples, 2.62%)</title><rect x="3.1611%" y="661" width="2.6214%" height="15" fill="rgb(219,88,35)" fg:x="41" fg:w="34"/><text x="3.4111%" y="671.50">pl..</text></g><g><title>plugins_core::build::Build::with_username (1 samples, 0.08%)</title><rect x="5.7055%" y="645" width="0.0771%" height="15" fill="rgb(220,193,23)" fg:x="74" fg:w="1"/><text x="5.9555%" y="655.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="5.7055%" y="629" width="0.0771%" height="15" fill="rgb(230,90,52)" fg:x="74" fg:w="1"/><text x="5.9555%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;engine::users::model::Usernames&gt;&gt; (1 samples, 0.08%)</title><rect x="5.7055%" y="613" width="0.0771%" height="15" fill="rgb(252,106,19)" fg:x="74" fg:w="1"/><text x="5.9555%" y="623.50"></text></g><g><title>&lt;kernel::model::entry::OpenedScopeMut&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.7055%" y="597" width="0.0771%" height="15" fill="rgb(206,74,20)" fg:x="74" fg:w="1"/><text x="5.9555%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="5.7826%" y="629" width="0.0771%" height="15" fill="rgb(230,138,44)" fg:x="75" fg:w="1"/><text x="6.0326%" y="639.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="5.7826%" y="613" width="0.0771%" height="15" fill="rgb(235,182,43)" fg:x="75" fg:w="1"/><text x="6.0326%" y="623.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (59 samples, 4.55%)</title><rect x="1.3878%" y="677" width="4.5490%" height="15" fill="rgb(242,16,51)" fg:x="18" fg:w="59"/><text x="1.6378%" y="687.50">&lt;test..</text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.15%)</title><rect x="5.7826%" y="661" width="0.1542%" height="15" fill="rgb(248,9,4)" fg:x="75" fg:w="2"/><text x="6.0326%" y="671.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.15%)</title><rect x="5.7826%" y="645" width="0.1542%" height="15" fill="rgb(210,31,22)" fg:x="75" fg:w="2"/><text x="6.0326%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="5.8597%" y="629" width="0.0771%" height="15" fill="rgb(239,54,39)" fg:x="76" fg:w="1"/><text x="6.1097%" y="639.50"></text></g><g><title>kernel::model::Entity::new_blank (1 samples, 0.08%)</title><rect x="5.8597%" y="613" width="0.0771%" height="15" fill="rgb(230,99,41)" fg:x="76" fg:w="1"/><text x="6.1097%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="5.8597%" y="597" width="0.0771%" height="15" fill="rgb(253,106,12)" fg:x="76" fg:w="1"/><text x="6.1097%" y="607.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="5.8597%" y="581" width="0.0771%" height="15" fill="rgb(213,46,41)" fg:x="76" fg:w="1"/><text x="6.1097%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="5.8597%" y="565" width="0.0771%" height="15" fill="rgb(215,133,35)" fg:x="76" fg:w="1"/><text x="6.1097%" y="575.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="5.8597%" y="549" width="0.0771%" height="15" fill="rgb(213,28,5)" fg:x="76" fg:w="1"/><text x="6.1097%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="5.8597%" y="533" width="0.0771%" height="15" fill="rgb(215,77,49)" fg:x="76" fg:w="1"/><text x="6.1097%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.8597%" y="517" width="0.0771%" height="15" fill="rgb(248,100,22)" fg:x="76" fg:w="1"/><text x="6.1097%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.8597%" y="501" width="0.0771%" height="15" fill="rgb(208,67,9)" fg:x="76" fg:w="1"/><text x="6.1097%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.8597%" y="485" width="0.0771%" height="15" fill="rgb(219,133,21)" fg:x="76" fg:w="1"/><text x="6.1097%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.8597%" y="469" width="0.0771%" height="15" fill="rgb(246,46,29)" fg:x="76" fg:w="1"/><text x="6.1097%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.8597%" y="453" width="0.0771%" height="15" fill="rgb(246,185,52)" fg:x="76" fg:w="1"/><text x="6.1097%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.8597%" y="437" width="0.0771%" height="15" fill="rgb(252,136,11)" fg:x="76" fg:w="1"/><text x="6.1097%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.8597%" y="421" width="0.0771%" height="15" fill="rgb(219,138,53)" fg:x="76" fg:w="1"/><text x="6.1097%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="5.9368%" y="629" width="0.0771%" height="15" fill="rgb(211,51,23)" fg:x="77" fg:w="1"/><text x="6.1868%" y="639.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.15%)</title><rect x="5.9368%" y="645" width="0.1542%" height="15" fill="rgb(247,221,28)" fg:x="77" fg:w="2"/><text x="6.1868%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.0139%" y="629" width="0.0771%" height="15" fill="rgb(251,222,45)" fg:x="78" fg:w="1"/><text x="6.2639%" y="639.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="6.0910%" y="645" width="0.0771%" height="15" fill="rgb(217,162,53)" fg:x="79" fg:w="1"/><text x="6.3410%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="6.0910%" y="629" width="0.0771%" height="15" fill="rgb(229,93,14)" fg:x="79" fg:w="1"/><text x="6.3410%" y="639.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="6.0910%" y="613" width="0.0771%" height="15" fill="rgb(209,67,49)" fg:x="79" fg:w="1"/><text x="6.3410%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.0910%" y="597" width="0.0771%" height="15" fill="rgb(213,87,29)" fg:x="79" fg:w="1"/><text x="6.3410%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.0910%" y="581" width="0.0771%" height="15" fill="rgb(205,151,52)" fg:x="79" fg:w="1"/><text x="6.3410%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.0910%" y="565" width="0.0771%" height="15" fill="rgb(253,215,39)" fg:x="79" fg:w="1"/><text x="6.3410%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.0910%" y="549" width="0.0771%" height="15" fill="rgb(221,220,41)" fg:x="79" fg:w="1"/><text x="6.3410%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.0910%" y="533" width="0.0771%" height="15" fill="rgb(218,133,21)" fg:x="79" fg:w="1"/><text x="6.3410%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.0910%" y="517" width="0.0771%" height="15" fill="rgb(221,193,43)" fg:x="79" fg:w="1"/><text x="6.3410%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="6.0910%" y="501" width="0.0771%" height="15" fill="rgb(240,128,52)" fg:x="79" fg:w="1"/><text x="6.3410%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="6.0910%" y="485" width="0.0771%" height="15" fill="rgb(253,114,12)" fg:x="79" fg:w="1"/><text x="6.3410%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.15%)</title><rect x="6.2452%" y="597" width="0.1542%" height="15" fill="rgb(215,223,47)" fg:x="81" fg:w="2"/><text x="6.4952%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.15%)</title><rect x="6.2452%" y="581" width="0.1542%" height="15" fill="rgb(248,225,23)" fg:x="81" fg:w="2"/><text x="6.4952%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.3223%" y="565" width="0.0771%" height="15" fill="rgb(250,108,0)" fg:x="82" fg:w="1"/><text x="6.5723%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.3223%" y="549" width="0.0771%" height="15" fill="rgb(228,208,7)" fg:x="82" fg:w="1"/><text x="6.5723%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.3994%" y="581" width="0.0771%" height="15" fill="rgb(244,45,10)" fg:x="83" fg:w="1"/><text x="6.6494%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.5536%" y="565" width="0.0771%" height="15" fill="rgb(207,125,25)" fg:x="85" fg:w="1"/><text x="6.8036%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5536%" y="549" width="0.0771%" height="15" fill="rgb(210,195,18)" fg:x="85" fg:w="1"/><text x="6.8036%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5536%" y="533" width="0.0771%" height="15" fill="rgb(249,80,12)" fg:x="85" fg:w="1"/><text x="6.8036%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.5536%" y="517" width="0.0771%" height="15" fill="rgb(221,65,9)" fg:x="85" fg:w="1"/><text x="6.8036%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.5536%" y="501" width="0.0771%" height="15" fill="rgb(235,49,36)" fg:x="85" fg:w="1"/><text x="6.8036%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.6307%" y="565" width="0.0771%" height="15" fill="rgb(225,32,20)" fg:x="86" fg:w="1"/><text x="6.8807%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.6307%" y="549" width="0.0771%" height="15" fill="rgb(215,141,46)" fg:x="86" fg:w="1"/><text x="6.8807%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.6307%" y="533" width="0.0771%" height="15" fill="rgb(250,160,47)" fg:x="86" fg:w="1"/><text x="6.8807%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.6307%" y="517" width="0.0771%" height="15" fill="rgb(216,222,40)" fg:x="86" fg:w="1"/><text x="6.8807%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.7078%" y="549" width="0.0771%" height="15" fill="rgb(234,217,39)" fg:x="87" fg:w="1"/><text x="6.9578%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.7078%" y="533" width="0.0771%" height="15" fill="rgb(207,178,40)" fg:x="87" fg:w="1"/><text x="6.9578%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.7849%" y="549" width="0.0771%" height="15" fill="rgb(221,136,13)" fg:x="88" fg:w="1"/><text x="7.0349%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.7849%" y="533" width="0.0771%" height="15" fill="rgb(249,199,10)" fg:x="88" fg:w="1"/><text x="7.0349%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.7849%" y="517" width="0.0771%" height="15" fill="rgb(249,222,13)" fg:x="88" fg:w="1"/><text x="7.0349%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.7849%" y="501" width="0.0771%" height="15" fill="rgb(244,185,38)" fg:x="88" fg:w="1"/><text x="7.0349%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.69%)</title><rect x="6.2452%" y="613" width="0.6939%" height="15" fill="rgb(236,202,9)" fg:x="81" fg:w="9"/><text x="6.4952%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.54%)</title><rect x="6.3994%" y="597" width="0.5397%" height="15" fill="rgb(250,229,37)" fg:x="83" fg:w="7"/><text x="6.6494%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.46%)</title><rect x="6.4765%" y="581" width="0.4626%" height="15" fill="rgb(206,174,23)" fg:x="84" fg:w="6"/><text x="6.7265%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="6.7078%" y="565" width="0.2313%" height="15" fill="rgb(211,33,43)" fg:x="87" fg:w="3"/><text x="6.9578%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.8620%" y="549" width="0.0771%" height="15" fill="rgb(245,58,50)" fg:x="89" fg:w="1"/><text x="7.1120%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.8620%" y="533" width="0.0771%" height="15" fill="rgb(244,68,36)" fg:x="89" fg:w="1"/><text x="7.1120%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.8620%" y="517" width="0.0771%" height="15" fill="rgb(232,229,15)" fg:x="89" fg:w="1"/><text x="7.1120%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.9391%" y="581" width="0.0771%" height="15" fill="rgb(254,30,23)" fg:x="90" fg:w="1"/><text x="7.1891%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.15%)</title><rect x="6.9391%" y="613" width="0.1542%" height="15" fill="rgb(235,160,14)" fg:x="90" fg:w="2"/><text x="7.1891%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.15%)</title><rect x="6.9391%" y="597" width="0.1542%" height="15" fill="rgb(212,155,44)" fg:x="90" fg:w="2"/><text x="7.1891%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.0162%" y="581" width="0.0771%" height="15" fill="rgb(226,2,50)" fg:x="91" fg:w="1"/><text x="7.2662%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.0162%" y="565" width="0.0771%" height="15" fill="rgb(234,177,6)" fg:x="91" fg:w="1"/><text x="7.2662%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.0162%" y="549" width="0.0771%" height="15" fill="rgb(217,24,9)" fg:x="91" fg:w="1"/><text x="7.2662%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.0162%" y="533" width="0.0771%" height="15" fill="rgb(220,13,46)" fg:x="91" fg:w="1"/><text x="7.2662%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.0162%" y="517" width="0.0771%" height="15" fill="rgb(239,221,27)" fg:x="91" fg:w="1"/><text x="7.2662%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.15%)</title><rect x="7.0933%" y="565" width="0.1542%" height="15" fill="rgb(222,198,25)" fg:x="92" fg:w="2"/><text x="7.3433%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.2475%" y="565" width="0.0771%" height="15" fill="rgb(211,99,13)" fg:x="94" fg:w="1"/><text x="7.4975%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.4017%" y="549" width="0.0771%" height="15" fill="rgb(232,111,31)" fg:x="96" fg:w="1"/><text x="7.6517%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.4788%" y="533" width="0.0771%" height="15" fill="rgb(245,82,37)" fg:x="97" fg:w="1"/><text x="7.7288%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.5559%" y="517" width="0.0771%" height="15" fill="rgb(227,149,46)" fg:x="98" fg:w="1"/><text x="7.8059%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.23%)</title><rect x="7.6330%" y="517" width="0.2313%" height="15" fill="rgb(218,36,50)" fg:x="99" fg:w="3"/><text x="7.8830%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.23%)</title><rect x="7.6330%" y="501" width="0.2313%" height="15" fill="rgb(226,80,48)" fg:x="99" fg:w="3"/><text x="7.8830%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.15%)</title><rect x="7.7101%" y="485" width="0.1542%" height="15" fill="rgb(238,224,15)" fg:x="100" fg:w="2"/><text x="7.9601%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.85%)</title><rect x="7.0933%" y="597" width="0.8481%" height="15" fill="rgb(241,136,10)" fg:x="92" fg:w="11"/><text x="7.3433%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (11 samples, 0.85%)</title><rect x="7.0933%" y="581" width="0.8481%" height="15" fill="rgb(208,32,45)" fg:x="92" fg:w="11"/><text x="7.3433%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.62%)</title><rect x="7.3246%" y="565" width="0.6168%" height="15" fill="rgb(207,135,9)" fg:x="95" fg:w="8"/><text x="7.5746%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.46%)</title><rect x="7.4788%" y="549" width="0.4626%" height="15" fill="rgb(206,86,44)" fg:x="97" fg:w="6"/><text x="7.7288%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.39%)</title><rect x="7.5559%" y="533" width="0.3855%" height="15" fill="rgb(245,177,15)" fg:x="98" fg:w="5"/><text x="7.8059%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.8643%" y="517" width="0.0771%" height="15" fill="rgb(206,64,50)" fg:x="102" fg:w="1"/><text x="8.1143%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.8643%" y="501" width="0.0771%" height="15" fill="rgb(234,36,40)" fg:x="102" fg:w="1"/><text x="8.1143%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="7.9414%" y="581" width="0.0771%" height="15" fill="rgb(213,64,8)" fg:x="103" fg:w="1"/><text x="8.1914%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.0956%" y="565" width="0.0771%" height="15" fill="rgb(210,75,36)" fg:x="105" fg:w="1"/><text x="8.3456%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.31%)</title><rect x="8.1727%" y="565" width="0.3084%" height="15" fill="rgb(229,88,21)" fg:x="106" fg:w="4"/><text x="8.4227%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.23%)</title><rect x="8.2498%" y="549" width="0.2313%" height="15" fill="rgb(252,204,47)" fg:x="107" fg:w="3"/><text x="8.4998%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (3 samples, 0.23%)</title><rect x="8.2498%" y="533" width="0.2313%" height="15" fill="rgb(208,77,27)" fg:x="107" fg:w="3"/><text x="8.4998%" y="543.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="8.4811%" y="565" width="0.0771%" height="15" fill="rgb(221,76,26)" fg:x="110" fg:w="1"/><text x="8.7311%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="8.5582%" y="565" width="0.0771%" height="15" fill="rgb(225,139,18)" fg:x="111" fg:w="1"/><text x="8.8082%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.5582%" y="549" width="0.0771%" height="15" fill="rgb(230,137,11)" fg:x="111" fg:w="1"/><text x="8.8082%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.5582%" y="533" width="0.0771%" height="15" fill="rgb(212,28,1)" fg:x="111" fg:w="1"/><text x="8.8082%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="8.5582%" y="517" width="0.0771%" height="15" fill="rgb(248,164,17)" fg:x="111" fg:w="1"/><text x="8.8082%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.15%)</title><rect x="8.6353%" y="517" width="0.1542%" height="15" fill="rgb(222,171,42)" fg:x="112" fg:w="2"/><text x="8.8853%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.15%)</title><rect x="8.6353%" y="501" width="0.1542%" height="15" fill="rgb(243,84,45)" fg:x="112" fg:w="2"/><text x="8.8853%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.7124%" y="485" width="0.0771%" height="15" fill="rgb(252,49,23)" fg:x="113" fg:w="1"/><text x="8.9624%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.8666%" y="501" width="0.0771%" height="15" fill="rgb(215,19,7)" fg:x="115" fg:w="1"/><text x="9.1166%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.8666%" y="485" width="0.0771%" height="15" fill="rgb(238,81,41)" fg:x="115" fg:w="1"/><text x="9.1166%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.9437%" y="501" width="0.0771%" height="15" fill="rgb(210,199,37)" fg:x="116" fg:w="1"/><text x="9.1937%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="8.9437%" y="485" width="0.0771%" height="15" fill="rgb(244,192,49)" fg:x="116" fg:w="1"/><text x="9.1937%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (6 samples, 0.46%)</title><rect x="8.6353%" y="565" width="0.4626%" height="15" fill="rgb(226,211,11)" fg:x="112" fg:w="6"/><text x="8.8853%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.46%)</title><rect x="8.6353%" y="549" width="0.4626%" height="15" fill="rgb(236,162,54)" fg:x="112" fg:w="6"/><text x="8.8853%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.46%)</title><rect x="8.6353%" y="533" width="0.4626%" height="15" fill="rgb(220,229,9)" fg:x="112" fg:w="6"/><text x="8.8853%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (4 samples, 0.31%)</title><rect x="8.7895%" y="517" width="0.3084%" height="15" fill="rgb(250,87,22)" fg:x="114" fg:w="4"/><text x="9.0395%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="9.0208%" y="501" width="0.0771%" height="15" fill="rgb(239,43,17)" fg:x="117" fg:w="1"/><text x="9.2708%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (16 samples, 1.23%)</title><rect x="7.9414%" y="597" width="1.2336%" height="15" fill="rgb(231,177,25)" fg:x="103" fg:w="16"/><text x="8.1914%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (15 samples, 1.16%)</title><rect x="8.0185%" y="581" width="1.1565%" height="15" fill="rgb(219,179,1)" fg:x="104" fg:w="15"/><text x="8.2685%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="9.0979%" y="565" width="0.0771%" height="15" fill="rgb(238,219,53)" fg:x="118" fg:w="1"/><text x="9.3479%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="9.0979%" y="549" width="0.0771%" height="15" fill="rgb(232,167,36)" fg:x="118" fg:w="1"/><text x="9.3479%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.0979%" y="533" width="0.0771%" height="15" fill="rgb(244,19,51)" fg:x="118" fg:w="1"/><text x="9.3479%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="9.0979%" y="517" width="0.0771%" height="15" fill="rgb(224,6,22)" fg:x="118" fg:w="1"/><text x="9.3479%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.0979%" y="501" width="0.0771%" height="15" fill="rgb(224,145,5)" fg:x="118" fg:w="1"/><text x="9.3479%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="9.4063%" y="405" width="0.0771%" height="15" fill="rgb(234,130,49)" fg:x="122" fg:w="1"/><text x="9.6563%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.31%)</title><rect x="9.2521%" y="437" width="0.3084%" height="15" fill="rgb(254,6,2)" fg:x="120" fg:w="4"/><text x="9.5021%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="9.3292%" y="421" width="0.2313%" height="15" fill="rgb(208,96,46)" fg:x="121" fg:w="3"/><text x="9.5792%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.4834%" y="405" width="0.0771%" height="15" fill="rgb(239,3,39)" fg:x="123" fg:w="1"/><text x="9.7334%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.4834%" y="389" width="0.0771%" height="15" fill="rgb(233,210,1)" fg:x="123" fg:w="1"/><text x="9.7334%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.4834%" y="373" width="0.0771%" height="15" fill="rgb(244,137,37)" fg:x="123" fg:w="1"/><text x="9.7334%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.46%)</title><rect x="9.2521%" y="501" width="0.4626%" height="15" fill="rgb(240,136,2)" fg:x="120" fg:w="6"/><text x="9.5021%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.46%)</title><rect x="9.2521%" y="485" width="0.4626%" height="15" fill="rgb(239,18,37)" fg:x="120" fg:w="6"/><text x="9.5021%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.46%)</title><rect x="9.2521%" y="469" width="0.4626%" height="15" fill="rgb(218,185,22)" fg:x="120" fg:w="6"/><text x="9.5021%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.46%)</title><rect x="9.2521%" y="453" width="0.4626%" height="15" fill="rgb(225,218,4)" fg:x="120" fg:w="6"/><text x="9.5021%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.15%)</title><rect x="9.5605%" y="437" width="0.1542%" height="15" fill="rgb(230,182,32)" fg:x="124" fg:w="2"/><text x="9.8105%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.15%)</title><rect x="9.5605%" y="421" width="0.1542%" height="15" fill="rgb(242,56,43)" fg:x="124" fg:w="2"/><text x="9.8105%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="9.7147%" y="501" width="0.0771%" height="15" fill="rgb(233,99,24)" fg:x="126" fg:w="1"/><text x="9.9647%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="9.7147%" y="485" width="0.0771%" height="15" fill="rgb(234,209,42)" fg:x="126" fg:w="1"/><text x="9.9647%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.69%)</title><rect x="9.2521%" y="517" width="0.6939%" height="15" fill="rgb(227,7,12)" fg:x="120" fg:w="9"/><text x="9.5021%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.15%)</title><rect x="9.7918%" y="501" width="0.1542%" height="15" fill="rgb(245,203,43)" fg:x="127" fg:w="2"/><text x="10.0418%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.15%)</title><rect x="9.7918%" y="485" width="0.1542%" height="15" fill="rgb(238,205,33)" fg:x="127" fg:w="2"/><text x="10.0418%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="9.8689%" y="469" width="0.0771%" height="15" fill="rgb(231,56,7)" fg:x="128" fg:w="1"/><text x="10.1189%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.85%)</title><rect x="9.1750%" y="533" width="0.8481%" height="15" fill="rgb(244,186,29)" fg:x="119" fg:w="11"/><text x="9.4250%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.9460%" y="517" width="0.0771%" height="15" fill="rgb(234,111,31)" fg:x="129" fg:w="1"/><text x="10.1960%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (12 samples, 0.93%)</title><rect x="9.1750%" y="597" width="0.9252%" height="15" fill="rgb(241,149,10)" fg:x="119" fg:w="12"/><text x="9.4250%" y="607.50"></text></g><g><title>serde_json::de::from_trait (12 samples, 0.93%)</title><rect x="9.1750%" y="581" width="0.9252%" height="15" fill="rgb(249,206,44)" fg:x="119" fg:w="12"/><text x="9.4250%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.93%)</title><rect x="9.1750%" y="565" width="0.9252%" height="15" fill="rgb(251,153,30)" fg:x="119" fg:w="12"/><text x="9.4250%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (12 samples, 0.93%)</title><rect x="9.1750%" y="549" width="0.9252%" height="15" fill="rgb(239,152,38)" fg:x="119" fg:w="12"/><text x="9.4250%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.0231%" y="533" width="0.0771%" height="15" fill="rgb(249,139,47)" fg:x="130" fg:w="1"/><text x="10.2731%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.0231%" y="517" width="0.0771%" height="15" fill="rgb(244,64,35)" fg:x="130" fg:w="1"/><text x="10.2731%" y="527.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (53 samples, 4.09%)</title><rect x="6.1681%" y="645" width="4.0864%" height="15" fill="rgb(216,46,15)" fg:x="80" fg:w="53"/><text x="6.4181%" y="655.50">engi..</text></g><g><title>engine::session::Session::check_for_changes (52 samples, 4.01%)</title><rect x="6.2452%" y="629" width="4.0093%" height="15" fill="rgb(250,74,19)" fg:x="81" fg:w="52"/><text x="6.4952%" y="639.50">engi..</text></g><g><title>kernel::compare::any_entity_changes (41 samples, 3.16%)</title><rect x="7.0933%" y="613" width="3.1611%" height="15" fill="rgb(249,42,33)" fg:x="92" fg:w="41"/><text x="7.3433%" y="623.50">ker..</text></g><g><title>treediff::diff::diff (2 samples, 0.15%)</title><rect x="10.1002%" y="597" width="0.1542%" height="15" fill="rgb(242,149,17)" fg:x="131" fg:w="2"/><text x="10.3502%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.15%)</title><rect x="10.1002%" y="581" width="0.1542%" height="15" fill="rgb(244,29,21)" fg:x="131" fg:w="2"/><text x="10.3502%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="10.1773%" y="565" width="0.0771%" height="15" fill="rgb(220,130,37)" fg:x="132" fg:w="1"/><text x="10.4273%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.1773%" y="549" width="0.0771%" height="15" fill="rgb(211,67,2)" fg:x="132" fg:w="1"/><text x="10.4273%" y="559.50"></text></g><g><title>engine::session::Session::close (57 samples, 4.39%)</title><rect x="5.9368%" y="677" width="4.3948%" height="15" fill="rgb(235,68,52)" fg:x="77" fg:w="57"/><text x="6.1868%" y="687.50">engin..</text></g><g><title>engine::session::Session::save_entity_changes (57 samples, 4.39%)</title><rect x="5.9368%" y="661" width="4.3948%" height="15" fill="rgb(246,142,3)" fg:x="77" fg:w="57"/><text x="6.1868%" y="671.50">engin..</text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="10.2544%" y="645" width="0.0771%" height="15" fill="rgb(241,25,7)" fg:x="133" fg:w="1"/><text x="10.5044%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="10.2544%" y="629" width="0.0771%" height="15" fill="rgb(242,119,39)" fg:x="133" fg:w="1"/><text x="10.5044%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="10.2544%" y="613" width="0.0771%" height="15" fill="rgb(241,98,45)" fg:x="133" fg:w="1"/><text x="10.5044%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="10.2544%" y="597" width="0.0771%" height="15" fill="rgb(254,28,30)" fg:x="133" fg:w="1"/><text x="10.5044%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="10.2544%" y="581" width="0.0771%" height="15" fill="rgb(241,142,54)" fg:x="133" fg:w="1"/><text x="10.5044%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="10.2544%" y="565" width="0.0771%" height="15" fill="rgb(222,85,15)" fg:x="133" fg:w="1"/><text x="10.5044%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="10.2544%" y="549" width="0.0771%" height="15" fill="rgb(210,85,47)" fg:x="133" fg:w="1"/><text x="10.5044%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="10.2544%" y="533" width="0.0771%" height="15" fill="rgb(224,206,25)" fg:x="133" fg:w="1"/><text x="10.5044%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="10.2544%" y="517" width="0.0771%" height="15" fill="rgb(243,201,19)" fg:x="133" fg:w="1"/><text x="10.5044%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="10.2544%" y="501" width="0.0771%" height="15" fill="rgb(236,59,4)" fg:x="133" fg:w="1"/><text x="10.5044%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="10.2544%" y="485" width="0.0771%" height="15" fill="rgb(254,179,45)" fg:x="133" fg:w="1"/><text x="10.5044%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.2544%" y="469" width="0.0771%" height="15" fill="rgb(226,14,10)" fg:x="133" fg:w="1"/><text x="10.5044%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.2544%" y="453" width="0.0771%" height="15" fill="rgb(244,27,41)" fg:x="133" fg:w="1"/><text x="10.5044%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="10.2544%" y="437" width="0.0771%" height="15" fill="rgb(235,35,32)" fg:x="133" fg:w="1"/><text x="10.5044%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="10.2544%" y="421" width="0.0771%" height="15" fill="rgb(218,68,31)" fg:x="133" fg:w="1"/><text x="10.5044%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="10.2544%" y="405" width="0.0771%" height="15" fill="rgb(207,120,37)" fg:x="133" fg:w="1"/><text x="10.5044%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="10.2544%" y="389" width="0.0771%" height="15" fill="rgb(227,98,0)" fg:x="133" fg:w="1"/><text x="10.5044%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="10.2544%" y="373" width="0.0771%" height="15" fill="rgb(207,7,3)" fg:x="133" fg:w="1"/><text x="10.5044%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="10.2544%" y="357" width="0.0771%" height="15" fill="rgb(206,98,19)" fg:x="133" fg:w="1"/><text x="10.5044%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.2544%" y="341" width="0.0771%" height="15" fill="rgb(217,5,26)" fg:x="133" fg:w="1"/><text x="10.5044%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="10.2544%" y="325" width="0.0771%" height="15" fill="rgb(235,190,38)" fg:x="133" fg:w="1"/><text x="10.5044%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.2544%" y="309" width="0.0771%" height="15" fill="rgb(247,86,24)" fg:x="133" fg:w="1"/><text x="10.5044%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="10.2544%" y="293" width="0.0771%" height="15" fill="rgb(205,101,16)" fg:x="133" fg:w="1"/><text x="10.5044%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="10.2544%" y="277" width="0.0771%" height="15" fill="rgb(246,168,33)" fg:x="133" fg:w="1"/><text x="10.5044%" y="287.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="10.2544%" y="261" width="0.0771%" height="15" fill="rgb(231,114,1)" fg:x="133" fg:w="1"/><text x="10.5044%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="10.2544%" y="245" width="0.0771%" height="15" fill="rgb(207,184,53)" fg:x="133" fg:w="1"/><text x="10.5044%" y="255.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="10.4857%" y="597" width="0.0771%" height="15" fill="rgb(224,95,51)" fg:x="136" fg:w="1"/><text x="10.7357%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="10.4857%" y="581" width="0.0771%" height="15" fill="rgb(212,188,45)" fg:x="136" fg:w="1"/><text x="10.7357%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.15%)</title><rect x="10.7170%" y="501" width="0.1542%" height="15" fill="rgb(223,154,38)" fg:x="139" fg:w="2"/><text x="10.9670%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::desc (1 samples, 0.08%)</title><rect x="10.8712%" y="501" width="0.0771%" height="15" fill="rgb(251,22,52)" fg:x="141" fg:w="1"/><text x="11.1212%" y="511.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="10.8712%" y="485" width="0.0771%" height="15" fill="rgb(229,209,22)" fg:x="141" fg:w="1"/><text x="11.1212%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.8712%" y="469" width="0.0771%" height="15" fill="rgb(234,138,34)" fg:x="141" fg:w="1"/><text x="11.1212%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="10.8712%" y="453" width="0.0771%" height="15" fill="rgb(212,95,11)" fg:x="141" fg:w="1"/><text x="11.1212%" y="463.50"></text></g><g><title>kernel::model::entry::Entry::name (1 samples, 0.08%)</title><rect x="10.9483%" y="501" width="0.0771%" height="15" fill="rgb(240,179,47)" fg:x="142" fg:w="1"/><text x="11.1983%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="11.0254%" y="501" width="0.0771%" height="15" fill="rgb(240,163,11)" fg:x="143" fg:w="1"/><text x="11.2754%" y="511.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="11.0254%" y="485" width="0.0771%" height="15" fill="rgb(236,37,12)" fg:x="143" fg:w="1"/><text x="11.2754%" y="495.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="11.0254%" y="469" width="0.0771%" height="15" fill="rgb(232,164,16)" fg:x="143" fg:w="1"/><text x="11.2754%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="11.0254%" y="453" width="0.0771%" height="15" fill="rgb(244,205,15)" fg:x="143" fg:w="1"/><text x="11.2754%" y="463.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="11.0254%" y="437" width="0.0771%" height="15" fill="rgb(223,117,47)" fg:x="143" fg:w="1"/><text x="11.2754%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="11.1796%" y="453" width="0.0771%" height="15" fill="rgb(244,107,35)" fg:x="145" fg:w="1"/><text x="11.4296%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="11.1796%" y="437" width="0.0771%" height="15" fill="rgb(205,140,8)" fg:x="145" fg:w="1"/><text x="11.4296%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="11.1796%" y="421" width="0.0771%" height="15" fill="rgb(228,84,46)" fg:x="145" fg:w="1"/><text x="11.4296%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="11.1796%" y="405" width="0.0771%" height="15" fill="rgb(254,188,9)" fg:x="145" fg:w="1"/><text x="11.4296%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.3338%" y="421" width="0.0771%" height="15" fill="rgb(206,112,54)" fg:x="147" fg:w="1"/><text x="11.5838%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.3338%" y="405" width="0.0771%" height="15" fill="rgb(216,84,49)" fg:x="147" fg:w="1"/><text x="11.5838%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.5652%" y="325" width="0.0771%" height="15" fill="rgb(214,194,35)" fg:x="150" fg:w="1"/><text x="11.8152%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.5652%" y="309" width="0.0771%" height="15" fill="rgb(249,28,3)" fg:x="150" fg:w="1"/><text x="11.8152%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.5652%" y="293" width="0.0771%" height="15" fill="rgb(222,56,52)" fg:x="150" fg:w="1"/><text x="11.8152%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.31%)</title><rect x="11.4109%" y="421" width="0.3084%" height="15" fill="rgb(245,217,50)" fg:x="148" fg:w="4"/><text x="11.6609%" y="431.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.31%)</title><rect x="11.4109%" y="405" width="0.3084%" height="15" fill="rgb(213,201,24)" fg:x="148" fg:w="4"/><text x="11.6609%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.23%)</title><rect x="11.4880%" y="389" width="0.2313%" height="15" fill="rgb(248,116,28)" fg:x="149" fg:w="3"/><text x="11.7380%" y="399.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (3 samples, 0.23%)</title><rect x="11.4880%" y="373" width="0.2313%" height="15" fill="rgb(219,72,43)" fg:x="149" fg:w="3"/><text x="11.7380%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.23%)</title><rect x="11.4880%" y="357" width="0.2313%" height="15" fill="rgb(209,138,14)" fg:x="149" fg:w="3"/><text x="11.7380%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.15%)</title><rect x="11.5652%" y="341" width="0.1542%" height="15" fill="rgb(222,18,33)" fg:x="150" fg:w="2"/><text x="11.8152%" y="351.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="11.6423%" y="325" width="0.0771%" height="15" fill="rgb(213,199,7)" fg:x="151" fg:w="1"/><text x="11.8923%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.15%)</title><rect x="11.8736%" y="373" width="0.1542%" height="15" fill="rgb(250,110,10)" fg:x="154" fg:w="2"/><text x="12.1236%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.9507%" y="357" width="0.0771%" height="15" fill="rgb(248,123,6)" fg:x="155" fg:w="1"/><text x="12.2007%" y="367.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.1049%" y="325" width="0.0771%" height="15" fill="rgb(206,91,31)" fg:x="157" fg:w="1"/><text x="12.3549%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.23%)</title><rect x="12.0278%" y="373" width="0.2313%" height="15" fill="rgb(211,154,13)" fg:x="156" fg:w="3"/><text x="12.2778%" y="383.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="12.0278%" y="357" width="0.2313%" height="15" fill="rgb(225,148,7)" fg:x="156" fg:w="3"/><text x="12.2778%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.23%)</title><rect x="12.0278%" y="341" width="0.2313%" height="15" fill="rgb(220,160,43)" fg:x="156" fg:w="3"/><text x="12.2778%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.1820%" y="325" width="0.0771%" height="15" fill="rgb(213,52,39)" fg:x="158" fg:w="1"/><text x="12.4320%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.1820%" y="309" width="0.0771%" height="15" fill="rgb(243,137,7)" fg:x="158" fg:w="1"/><text x="12.4320%" y="319.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="12.1820%" y="293" width="0.0771%" height="15" fill="rgb(230,79,13)" fg:x="158" fg:w="1"/><text x="12.4320%" y="303.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="12.2591%" y="373" width="0.0771%" height="15" fill="rgb(247,105,23)" fg:x="159" fg:w="1"/><text x="12.5091%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.2591%" y="357" width="0.0771%" height="15" fill="rgb(223,179,41)" fg:x="159" fg:w="1"/><text x="12.5091%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.4133%" y="357" width="0.0771%" height="15" fill="rgb(218,9,34)" fg:x="161" fg:w="1"/><text x="12.6633%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.5675%" y="341" width="0.0771%" height="15" fill="rgb(222,106,8)" fg:x="163" fg:w="1"/><text x="12.8175%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (37 samples, 2.85%)</title><rect x="12.6446%" y="341" width="2.8527%" height="15" fill="rgb(211,220,0)" fg:x="164" fg:w="37"/><text x="12.8946%" y="351.50">co..</text></g><g><title>__libc_free (2 samples, 0.15%)</title><rect x="15.3431%" y="325" width="0.1542%" height="15" fill="rgb(229,52,16)" fg:x="199" fg:w="2"/><text x="15.5931%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (40 samples, 3.08%)</title><rect x="12.4904%" y="357" width="3.0840%" height="15" fill="rgb(212,155,18)" fg:x="162" fg:w="40"/><text x="12.7404%" y="367.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="15.4973%" y="341" width="0.0771%" height="15" fill="rgb(242,21,14)" fg:x="201" fg:w="1"/><text x="15.7473%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.4973%" y="325" width="0.0771%" height="15" fill="rgb(222,19,48)" fg:x="201" fg:w="1"/><text x="15.7473%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.23%)</title><rect x="15.6515%" y="341" width="0.2313%" height="15" fill="rgb(232,45,27)" fg:x="203" fg:w="3"/><text x="15.9015%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.46%)</title><rect x="15.5744%" y="357" width="0.4626%" height="15" fill="rgb(249,103,42)" fg:x="202" fg:w="6"/><text x="15.8244%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.15%)</title><rect x="15.8828%" y="341" width="0.1542%" height="15" fill="rgb(246,81,33)" fg:x="206" fg:w="2"/><text x="16.1328%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="15.9599%" y="325" width="0.0771%" height="15" fill="rgb(252,33,42)" fg:x="207" fg:w="1"/><text x="16.2099%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="15.9599%" y="309" width="0.0771%" height="15" fill="rgb(209,212,41)" fg:x="207" fg:w="1"/><text x="16.2099%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="15.9599%" y="293" width="0.0771%" height="15" fill="rgb(207,154,6)" fg:x="207" fg:w="1"/><text x="16.2099%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.15%)</title><rect x="16.0370%" y="357" width="0.1542%" height="15" fill="rgb(223,64,47)" fg:x="208" fg:w="2"/><text x="16.2870%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="16.1141%" y="341" width="0.0771%" height="15" fill="rgb(211,161,38)" fg:x="209" fg:w="1"/><text x="16.3641%" y="351.50"></text></g><g><title>regex_syntax::parser::ParserBuilder::new (1 samples, 0.08%)</title><rect x="16.1141%" y="325" width="0.0771%" height="15" fill="rgb(219,138,40)" fg:x="209" fg:w="1"/><text x="16.3641%" y="335.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.15%)</title><rect x="16.2683%" y="293" width="0.1542%" height="15" fill="rgb(241,228,46)" fg:x="211" fg:w="2"/><text x="16.5183%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.15%)</title><rect x="16.5767%" y="261" width="0.1542%" height="15" fill="rgb(223,209,38)" fg:x="215" fg:w="2"/><text x="16.8267%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.15%)</title><rect x="16.5767%" y="245" width="0.1542%" height="15" fill="rgb(236,164,45)" fg:x="215" fg:w="2"/><text x="16.8267%" y="255.50"></text></g><g><title>realloc (2 samples, 0.15%)</title><rect x="16.5767%" y="229" width="0.1542%" height="15" fill="rgb(231,15,5)" fg:x="215" fg:w="2"/><text x="16.8267%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.62%)</title><rect x="16.4225%" y="293" width="0.6168%" height="15" fill="rgb(252,35,15)" fg:x="213" fg:w="8"/><text x="16.6725%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.46%)</title><rect x="16.5767%" y="277" width="0.4626%" height="15" fill="rgb(248,181,18)" fg:x="215" fg:w="6"/><text x="16.8267%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.31%)</title><rect x="16.7309%" y="261" width="0.3084%" height="15" fill="rgb(233,39,42)" fg:x="217" fg:w="4"/><text x="16.9809%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="16.9622%" y="245" width="0.0771%" height="15" fill="rgb(238,110,33)" fg:x="220" fg:w="1"/><text x="17.2122%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="16.9622%" y="229" width="0.0771%" height="15" fill="rgb(233,195,10)" fg:x="220" fg:w="1"/><text x="17.2122%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.9622%" y="213" width="0.0771%" height="15" fill="rgb(254,105,3)" fg:x="220" fg:w="1"/><text x="17.2122%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="16.9622%" y="197" width="0.0771%" height="15" fill="rgb(221,225,9)" fg:x="220" fg:w="1"/><text x="17.2122%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.0393%" y="277" width="0.0771%" height="15" fill="rgb(224,227,45)" fg:x="221" fg:w="1"/><text x="17.2893%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.0393%" y="261" width="0.0771%" height="15" fill="rgb(229,198,43)" fg:x="221" fg:w="1"/><text x="17.2893%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.0393%" y="245" width="0.0771%" height="15" fill="rgb(206,209,35)" fg:x="221" fg:w="1"/><text x="17.2893%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="17.1164%" y="277" width="0.0771%" height="15" fill="rgb(245,195,53)" fg:x="222" fg:w="1"/><text x="17.3664%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.1164%" y="261" width="0.0771%" height="15" fill="rgb(240,92,26)" fg:x="222" fg:w="1"/><text x="17.3664%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.1935%" y="261" width="0.0771%" height="15" fill="rgb(207,40,23)" fg:x="223" fg:w="1"/><text x="17.4435%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (144 samples, 11.10%)</title><rect x="17.0393%" y="293" width="11.1025%" height="15" fill="rgb(223,111,35)" fg:x="221" fg:w="144"/><text x="17.2893%" y="303.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (142 samples, 10.95%)</title><rect x="17.1935%" y="277" width="10.9483%" height="15" fill="rgb(229,147,28)" fg:x="223" fg:w="142"/><text x="17.4435%" y="287.50">regex_automata::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (141 samples, 10.87%)</title><rect x="17.2706%" y="261" width="10.8712%" height="15" fill="rgb(211,29,28)" fg:x="224" fg:w="141"/><text x="17.5206%" y="271.50">alloc::vec::Vec&lt;..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (7 samples, 0.54%)</title><rect x="28.1419%" y="293" width="0.5397%" height="15" fill="rgb(228,72,33)" fg:x="365" fg:w="7"/><text x="28.3919%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (163 samples, 12.57%)</title><rect x="16.1912%" y="341" width="12.5675%" height="15" fill="rgb(205,214,31)" fg:x="210" fg:w="163"/><text x="16.4412%" y="351.50">&lt;core::iter::adapte..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (163 samples, 12.57%)</title><rect x="16.1912%" y="325" width="12.5675%" height="15" fill="rgb(224,111,15)" fg:x="210" fg:w="163"/><text x="16.4412%" y="335.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (163 samples, 12.57%)</title><rect x="16.1912%" y="309" width="12.5675%" height="15" fill="rgb(253,21,26)" fg:x="210" fg:w="163"/><text x="16.4412%" y="319.50">regex_automata::nfa..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="28.6816%" y="293" width="0.0771%" height="15" fill="rgb(245,139,43)" fg:x="372" fg:w="1"/><text x="28.9316%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.9900%" y="325" width="0.0771%" height="15" fill="rgb(252,170,7)" fg:x="376" fg:w="1"/><text x="29.2400%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (7 samples, 0.54%)</title><rect x="29.0671%" y="325" width="0.5397%" height="15" fill="rgb(231,118,14)" fg:x="377" fg:w="7"/><text x="29.3171%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.23%)</title><rect x="29.3755%" y="309" width="0.2313%" height="15" fill="rgb(238,83,0)" fg:x="381" fg:w="3"/><text x="29.6255%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.15%)</title><rect x="29.4526%" y="293" width="0.1542%" height="15" fill="rgb(221,39,39)" fg:x="382" fg:w="2"/><text x="29.7026%" y="303.50"></text></g><g><title>realloc (2 samples, 0.15%)</title><rect x="29.4526%" y="277" width="0.1542%" height="15" fill="rgb(222,119,46)" fg:x="382" fg:w="2"/><text x="29.7026%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.46%)</title><rect x="29.6068%" y="325" width="0.4626%" height="15" fill="rgb(222,165,49)" fg:x="384" fg:w="6"/><text x="29.8568%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="30.0694%" y="325" width="0.0771%" height="15" fill="rgb(219,113,52)" fg:x="390" fg:w="1"/><text x="30.3194%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (19 samples, 1.46%)</title><rect x="28.7587%" y="341" width="1.4649%" height="15" fill="rgb(214,7,15)" fg:x="373" fg:w="19"/><text x="29.0087%" y="351.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="30.1465%" y="325" width="0.0771%" height="15" fill="rgb(235,32,4)" fg:x="391" fg:w="1"/><text x="30.3965%" y="335.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="30.1465%" y="309" width="0.0771%" height="15" fill="rgb(238,90,54)" fg:x="391" fg:w="1"/><text x="30.3965%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="30.1465%" y="293" width="0.0771%" height="15" fill="rgb(213,208,19)" fg:x="391" fg:w="1"/><text x="30.3965%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.1465%" y="277" width="0.0771%" height="15" fill="rgb(233,156,4)" fg:x="391" fg:w="1"/><text x="30.3965%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.1465%" y="261" width="0.0771%" height="15" fill="rgb(207,194,5)" fg:x="391" fg:w="1"/><text x="30.3965%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="30.2236%" y="341" width="0.0771%" height="15" fill="rgb(206,111,30)" fg:x="392" fg:w="1"/><text x="30.4736%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (185 samples, 14.26%)</title><rect x="16.1912%" y="357" width="14.2637%" height="15" fill="rgb(243,70,54)" fg:x="210" fg:w="185"/><text x="16.4412%" y="367.50">regex_automata::nfa::t..</text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.15%)</title><rect x="30.3007%" y="341" width="0.1542%" height="15" fill="rgb(242,28,8)" fg:x="393" fg:w="2"/><text x="30.5507%" y="351.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="30.3778%" y="325" width="0.0771%" height="15" fill="rgb(219,106,18)" fg:x="394" fg:w="1"/><text x="30.6278%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.3778%" y="309" width="0.0771%" height="15" fill="rgb(244,222,10)" fg:x="394" fg:w="1"/><text x="30.6278%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="30.4549%" y="357" width="0.0771%" height="15" fill="rgb(236,179,52)" fg:x="395" fg:w="1"/><text x="30.7049%" y="367.50"></text></g><g><title>regex_automata::meta::reverse_inner::flatten (1 samples, 0.08%)</title><rect x="30.4549%" y="341" width="0.0771%" height="15" fill="rgb(213,23,39)" fg:x="395" fg:w="1"/><text x="30.7049%" y="351.50"></text></g><g><title>regex_automata::meta::strategy::new (237 samples, 18.27%)</title><rect x="12.3362%" y="373" width="18.2729%" height="15" fill="rgb(238,48,10)" fg:x="160" fg:w="237"/><text x="12.5862%" y="383.50">regex_automata::meta::strate..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="30.5320%" y="357" width="0.0771%" height="15" fill="rgb(251,196,23)" fg:x="396" fg:w="1"/><text x="30.7820%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="30.8404%" y="325" width="0.0771%" height="15" fill="rgb(250,152,24)" fg:x="400" fg:w="1"/><text x="31.0904%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="30.8404%" y="309" width="0.0771%" height="15" fill="rgb(209,150,17)" fg:x="400" fg:w="1"/><text x="31.0904%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.23%)</title><rect x="31.0717%" y="309" width="0.2313%" height="15" fill="rgb(234,202,34)" fg:x="403" fg:w="3"/><text x="31.3217%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.23%)</title><rect x="31.0717%" y="293" width="0.2313%" height="15" fill="rgb(253,148,53)" fg:x="403" fg:w="3"/><text x="31.3217%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.15%)</title><rect x="31.1488%" y="277" width="0.1542%" height="15" fill="rgb(218,129,16)" fg:x="404" fg:w="2"/><text x="31.3988%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (10 samples, 0.77%)</title><rect x="30.6091%" y="373" width="0.7710%" height="15" fill="rgb(216,85,19)" fg:x="397" fg:w="10"/><text x="30.8591%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (10 samples, 0.77%)</title><rect x="30.6091%" y="357" width="0.7710%" height="15" fill="rgb(235,228,7)" fg:x="397" fg:w="10"/><text x="30.8591%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.62%)</title><rect x="30.7633%" y="341" width="0.6168%" height="15" fill="rgb(245,175,0)" fg:x="399" fg:w="8"/><text x="31.0133%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (6 samples, 0.46%)</title><rect x="30.9175%" y="325" width="0.4626%" height="15" fill="rgb(208,168,36)" fg:x="401" fg:w="6"/><text x="31.1675%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="31.3030%" y="309" width="0.0771%" height="15" fill="rgb(246,171,24)" fg:x="406" fg:w="1"/><text x="31.5530%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="31.3030%" y="293" width="0.0771%" height="15" fill="rgb(215,142,24)" fg:x="406" fg:w="1"/><text x="31.5530%" y="303.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (258 samples, 19.89%)</title><rect x="11.7194%" y="421" width="19.8921%" height="15" fill="rgb(250,187,7)" fg:x="152" fg:w="258"/><text x="11.9694%" y="431.50">&lt;regex::regex::string::Regex as..</text></g><g><title>regex::builders::Builder::build_one_string (258 samples, 19.89%)</title><rect x="11.7194%" y="405" width="19.8921%" height="15" fill="rgb(228,66,33)" fg:x="152" fg:w="258"/><text x="11.9694%" y="415.50">regex::builders::Builder::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (257 samples, 19.81%)</title><rect x="11.7965%" y="389" width="19.8150%" height="15" fill="rgb(234,215,21)" fg:x="153" fg:w="257"/><text x="12.0465%" y="399.50">regex_automata::meta::regex::Bu..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.23%)</title><rect x="31.3801%" y="373" width="0.2313%" height="15" fill="rgb(222,191,20)" fg:x="407" fg:w="3"/><text x="31.6301%" y="383.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.23%)</title><rect x="31.3801%" y="357" width="0.2313%" height="15" fill="rgb(245,79,54)" fg:x="407" fg:w="3"/><text x="31.6301%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.15%)</title><rect x="31.4572%" y="341" width="0.1542%" height="15" fill="rgb(240,10,37)" fg:x="408" fg:w="2"/><text x="31.7072%" y="351.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.15%)</title><rect x="31.4572%" y="325" width="0.1542%" height="15" fill="rgb(214,192,32)" fg:x="408" fg:w="2"/><text x="31.7072%" y="335.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="31.5343%" y="309" width="0.0771%" height="15" fill="rgb(209,36,54)" fg:x="409" fg:w="1"/><text x="31.7843%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.6114%" y="421" width="0.0771%" height="15" fill="rgb(220,10,11)" fg:x="410" fg:w="1"/><text x="31.8614%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.7656%" y="373" width="0.0771%" height="15" fill="rgb(221,106,17)" fg:x="412" fg:w="1"/><text x="32.0156%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="31.8427%" y="373" width="0.0771%" height="15" fill="rgb(251,142,44)" fg:x="413" fg:w="1"/><text x="32.0927%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="31.8427%" y="357" width="0.0771%" height="15" fill="rgb(238,13,15)" fg:x="413" fg:w="1"/><text x="32.0927%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.8427%" y="341" width="0.0771%" height="15" fill="rgb(208,107,27)" fg:x="413" fg:w="1"/><text x="32.0927%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.9198%" y="341" width="0.0771%" height="15" fill="rgb(205,136,37)" fg:x="414" fg:w="1"/><text x="32.1698%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.9198%" y="325" width="0.0771%" height="15" fill="rgb(250,205,27)" fg:x="414" fg:w="1"/><text x="32.1698%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.31%)</title><rect x="31.7656%" y="389" width="0.3084%" height="15" fill="rgb(210,80,43)" fg:x="412" fg:w="4"/><text x="32.0156%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.15%)</title><rect x="31.9198%" y="373" width="0.1542%" height="15" fill="rgb(247,160,36)" fg:x="414" fg:w="2"/><text x="32.1698%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.15%)</title><rect x="31.9198%" y="357" width="0.1542%" height="15" fill="rgb(234,13,49)" fg:x="414" fg:w="2"/><text x="32.1698%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.9969%" y="341" width="0.0771%" height="15" fill="rgb(234,122,0)" fg:x="415" fg:w="1"/><text x="32.2469%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.46%)</title><rect x="31.6885%" y="421" width="0.4626%" height="15" fill="rgb(207,146,38)" fg:x="411" fg:w="6"/><text x="31.9385%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.46%)</title><rect x="31.6885%" y="405" width="0.4626%" height="15" fill="rgb(207,177,25)" fg:x="411" fg:w="6"/><text x="31.9385%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="32.0740%" y="389" width="0.0771%" height="15" fill="rgb(211,178,42)" fg:x="416" fg:w="1"/><text x="32.3240%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="32.0740%" y="373" width="0.0771%" height="15" fill="rgb(230,69,54)" fg:x="416" fg:w="1"/><text x="32.3240%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.0740%" y="357" width="0.0771%" height="15" fill="rgb(214,135,41)" fg:x="416" fg:w="1"/><text x="32.3240%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.2282%" y="357" width="0.0771%" height="15" fill="rgb(237,67,25)" fg:x="418" fg:w="1"/><text x="32.4782%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="32.9221%" y="341" width="0.0771%" height="15" fill="rgb(222,189,50)" fg:x="427" fg:w="1"/><text x="33.1721%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.9221%" y="325" width="0.0771%" height="15" fill="rgb(245,148,34)" fg:x="427" fg:w="1"/><text x="33.1721%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.9221%" y="309" width="0.0771%" height="15" fill="rgb(222,29,6)" fg:x="427" fg:w="1"/><text x="33.1721%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.9992%" y="341" width="0.0771%" height="15" fill="rgb(221,189,43)" fg:x="428" fg:w="1"/><text x="33.2492%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="32.9992%" y="325" width="0.0771%" height="15" fill="rgb(207,36,27)" fg:x="428" fg:w="1"/><text x="33.2492%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (13 samples, 1.00%)</title><rect x="32.3053%" y="357" width="1.0023%" height="15" fill="rgb(217,90,24)" fg:x="419" fg:w="13"/><text x="32.5553%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.23%)</title><rect x="33.0763%" y="341" width="0.2313%" height="15" fill="rgb(224,66,35)" fg:x="429" fg:w="3"/><text x="33.3263%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (16 samples, 1.23%)</title><rect x="32.2282%" y="373" width="1.2336%" height="15" fill="rgb(221,13,50)" fg:x="418" fg:w="16"/><text x="32.4782%" y="383.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.15%)</title><rect x="33.3076%" y="357" width="0.1542%" height="15" fill="rgb(236,68,49)" fg:x="432" fg:w="2"/><text x="33.5576%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.15%)</title><rect x="33.3076%" y="341" width="0.1542%" height="15" fill="rgb(229,146,28)" fg:x="432" fg:w="2"/><text x="33.5576%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.3847%" y="325" width="0.0771%" height="15" fill="rgb(225,31,38)" fg:x="433" fg:w="1"/><text x="33.6347%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.3847%" y="309" width="0.0771%" height="15" fill="rgb(250,208,3)" fg:x="433" fg:w="1"/><text x="33.6347%" y="319.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (289 samples, 22.28%)</title><rect x="11.2567%" y="437" width="22.2822%" height="15" fill="rgb(246,54,23)" fg:x="146" fg:w="289"/><text x="11.5067%" y="447.50">indefinite::helper::Helper::get_fir..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (18 samples, 1.39%)</title><rect x="32.1511%" y="421" width="1.3878%" height="15" fill="rgb(243,76,11)" fg:x="417" fg:w="18"/><text x="32.4011%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (17 samples, 1.31%)</title><rect x="32.2282%" y="405" width="1.3107%" height="15" fill="rgb(245,21,50)" fg:x="418" fg:w="17"/><text x="32.4782%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (17 samples, 1.31%)</title><rect x="32.2282%" y="389" width="1.3107%" height="15" fill="rgb(228,9,43)" fg:x="418" fg:w="17"/><text x="32.4782%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="33.4618%" y="373" width="0.0771%" height="15" fill="rgb(208,100,47)" fg:x="434" fg:w="1"/><text x="33.7118%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="33.4618%" y="357" width="0.0771%" height="15" fill="rgb(232,26,8)" fg:x="434" fg:w="1"/><text x="33.7118%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.4618%" y="341" width="0.0771%" height="15" fill="rgb(216,166,38)" fg:x="434" fg:w="1"/><text x="33.7118%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.4618%" y="325" width="0.0771%" height="15" fill="rgb(251,202,51)" fg:x="434" fg:w="1"/><text x="33.7118%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="33.8473%" y="341" width="0.0771%" height="15" fill="rgb(254,216,34)" fg:x="439" fg:w="1"/><text x="34.0973%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.8473%" y="325" width="0.0771%" height="15" fill="rgb(251,32,27)" fg:x="439" fg:w="1"/><text x="34.0973%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.8473%" y="309" width="0.0771%" height="15" fill="rgb(208,127,28)" fg:x="439" fg:w="1"/><text x="34.0973%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="33.7702%" y="357" width="0.3084%" height="15" fill="rgb(224,137,22)" fg:x="438" fg:w="4"/><text x="34.0202%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (2 samples, 0.15%)</title><rect x="33.9244%" y="341" width="0.1542%" height="15" fill="rgb(254,70,32)" fg:x="440" fg:w="2"/><text x="34.1744%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.39%)</title><rect x="33.7702%" y="373" width="0.3855%" height="15" fill="rgb(229,75,37)" fg:x="438" fg:w="5"/><text x="34.0202%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="34.0786%" y="357" width="0.0771%" height="15" fill="rgb(252,64,23)" fg:x="442" fg:w="1"/><text x="34.3286%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.1557%" y="373" width="0.0771%" height="15" fill="rgb(232,162,48)" fg:x="443" fg:w="1"/><text x="34.4057%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="34.3099%" y="341" width="0.0771%" height="15" fill="rgb(246,160,12)" fg:x="445" fg:w="1"/><text x="34.5599%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.3099%" y="325" width="0.0771%" height="15" fill="rgb(247,166,0)" fg:x="445" fg:w="1"/><text x="34.5599%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.3099%" y="309" width="0.0771%" height="15" fill="rgb(249,219,21)" fg:x="445" fg:w="1"/><text x="34.5599%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="34.3099%" y="293" width="0.0771%" height="15" fill="rgb(205,209,3)" fg:x="445" fg:w="1"/><text x="34.5599%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.3870%" y="341" width="0.0771%" height="15" fill="rgb(243,44,1)" fg:x="446" fg:w="1"/><text x="34.6370%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.39%)</title><rect x="34.2328%" y="373" width="0.3855%" height="15" fill="rgb(206,159,16)" fg:x="444" fg:w="5"/><text x="34.4828%" y="383.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.39%)</title><rect x="34.2328%" y="357" width="0.3855%" height="15" fill="rgb(244,77,30)" fg:x="444" fg:w="5"/><text x="34.4828%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.15%)</title><rect x="34.4641%" y="341" width="0.1542%" height="15" fill="rgb(218,69,12)" fg:x="447" fg:w="2"/><text x="34.7141%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.15%)</title><rect x="34.4641%" y="325" width="0.1542%" height="15" fill="rgb(212,87,7)" fg:x="447" fg:w="2"/><text x="34.7141%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="34.5412%" y="309" width="0.0771%" height="15" fill="rgb(245,114,25)" fg:x="448" fg:w="1"/><text x="34.7912%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.5412%" y="293" width="0.0771%" height="15" fill="rgb(210,61,42)" fg:x="448" fg:w="1"/><text x="34.7912%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.5412%" y="277" width="0.0771%" height="15" fill="rgb(211,52,33)" fg:x="448" fg:w="1"/><text x="34.7912%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="34.5412%" y="261" width="0.0771%" height="15" fill="rgb(234,58,33)" fg:x="448" fg:w="1"/><text x="34.7912%" y="271.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="34.6184%" y="373" width="0.0771%" height="15" fill="rgb(220,115,36)" fg:x="449" fg:w="1"/><text x="34.8684%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.0810%" y="357" width="0.0771%" height="15" fill="rgb(243,153,54)" fg:x="455" fg:w="1"/><text x="35.3310%" y="367.50"></text></g><g><title>__libc_free (2 samples, 0.15%)</title><rect x="35.2352%" y="341" width="0.1542%" height="15" fill="rgb(251,47,18)" fg:x="457" fg:w="2"/><text x="35.4852%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (33 samples, 2.54%)</title><rect x="35.1581%" y="357" width="2.5443%" height="15" fill="rgb(242,102,42)" fg:x="456" fg:w="33"/><text x="35.4081%" y="367.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (30 samples, 2.31%)</title><rect x="35.3894%" y="341" width="2.3130%" height="15" fill="rgb(234,31,38)" fg:x="459" fg:w="30"/><text x="35.6394%" y="351.50">c..</text></g><g><title>__libc_free (4 samples, 0.31%)</title><rect x="37.3940%" y="325" width="0.3084%" height="15" fill="rgb(221,117,51)" fg:x="485" fg:w="4"/><text x="37.6440%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="37.7024%" y="357" width="0.0771%" height="15" fill="rgb(212,20,18)" fg:x="489" fg:w="1"/><text x="37.9524%" y="367.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.39%)</title><rect x="37.7795%" y="357" width="0.3855%" height="15" fill="rgb(245,133,36)" fg:x="490" fg:w="5"/><text x="38.0295%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.31%)</title><rect x="37.8566%" y="341" width="0.3084%" height="15" fill="rgb(212,6,19)" fg:x="491" fg:w="4"/><text x="38.1066%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="38.0879%" y="325" width="0.0771%" height="15" fill="rgb(218,1,36)" fg:x="494" fg:w="1"/><text x="38.3379%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.0879%" y="309" width="0.0771%" height="15" fill="rgb(246,84,54)" fg:x="494" fg:w="1"/><text x="38.3379%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.15%)</title><rect x="38.3192%" y="325" width="0.1542%" height="15" fill="rgb(242,110,6)" fg:x="497" fg:w="2"/><text x="38.5692%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.15%)</title><rect x="38.3192%" y="309" width="0.1542%" height="15" fill="rgb(214,47,5)" fg:x="497" fg:w="2"/><text x="38.5692%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.15%)</title><rect x="38.3192%" y="293" width="0.1542%" height="15" fill="rgb(218,159,25)" fg:x="497" fg:w="2"/><text x="38.5692%" y="303.50"></text></g><g><title>realloc (2 samples, 0.15%)</title><rect x="38.3192%" y="277" width="0.1542%" height="15" fill="rgb(215,211,28)" fg:x="497" fg:w="2"/><text x="38.5692%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (10 samples, 0.77%)</title><rect x="38.4734%" y="325" width="0.7710%" height="15" fill="rgb(238,59,32)" fg:x="499" fg:w="10"/><text x="38.7234%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (7 samples, 0.54%)</title><rect x="38.7047%" y="309" width="0.5397%" height="15" fill="rgb(226,82,3)" fg:x="502" fg:w="7"/><text x="38.9547%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.23%)</title><rect x="39.0131%" y="293" width="0.2313%" height="15" fill="rgb(240,164,32)" fg:x="506" fg:w="3"/><text x="39.2631%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.23%)</title><rect x="39.0131%" y="277" width="0.2313%" height="15" fill="rgb(232,46,7)" fg:x="506" fg:w="3"/><text x="39.2631%" y="287.50"></text></g><g><title>realloc (3 samples, 0.23%)</title><rect x="39.0131%" y="261" width="0.2313%" height="15" fill="rgb(229,129,53)" fg:x="506" fg:w="3"/><text x="39.2631%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (6 samples, 0.46%)</title><rect x="39.2444%" y="309" width="0.4626%" height="15" fill="rgb(234,188,29)" fg:x="509" fg:w="6"/><text x="39.4944%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (6 samples, 0.46%)</title><rect x="39.2444%" y="293" width="0.4626%" height="15" fill="rgb(246,141,4)" fg:x="509" fg:w="6"/><text x="39.4944%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (19 samples, 1.46%)</title><rect x="38.3192%" y="341" width="1.4649%" height="15" fill="rgb(229,23,39)" fg:x="497" fg:w="19"/><text x="38.5692%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (7 samples, 0.54%)</title><rect x="39.2444%" y="325" width="0.5397%" height="15" fill="rgb(206,12,3)" fg:x="509" fg:w="7"/><text x="39.4944%" y="335.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="39.7070%" y="309" width="0.0771%" height="15" fill="rgb(252,226,20)" fg:x="515" fg:w="1"/><text x="39.9570%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (22 samples, 1.70%)</title><rect x="38.1650%" y="357" width="1.6962%" height="15" fill="rgb(216,123,35)" fg:x="495" fg:w="22"/><text x="38.4150%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="39.7841%" y="341" width="0.0771%" height="15" fill="rgb(212,68,40)" fg:x="516" fg:w="1"/><text x="40.0341%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="39.8612%" y="357" width="0.0771%" height="15" fill="rgb(254,125,32)" fg:x="517" fg:w="1"/><text x="40.1112%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="40.0925%" y="325" width="0.0771%" height="15" fill="rgb(253,97,22)" fg:x="520" fg:w="1"/><text x="40.3425%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="41.7116%" y="245" width="0.0771%" height="15" fill="rgb(241,101,14)" fg:x="541" fg:w="1"/><text x="41.9616%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.77%)</title><rect x="41.7887%" y="245" width="0.7710%" height="15" fill="rgb(238,103,29)" fg:x="542" fg:w="10"/><text x="42.0387%" y="255.50"></text></g><g><title>__libc_free (4 samples, 0.31%)</title><rect x="42.5598%" y="245" width="0.3084%" height="15" fill="rgb(233,195,47)" fg:x="552" fg:w="4"/><text x="42.8098%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (8 samples, 0.62%)</title><rect x="42.8682%" y="245" width="0.6168%" height="15" fill="rgb(246,218,30)" fg:x="556" fg:w="8"/><text x="43.1182%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.15%)</title><rect x="43.3308%" y="229" width="0.1542%" height="15" fill="rgb(219,145,47)" fg:x="562" fg:w="2"/><text x="43.5808%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.15%)</title><rect x="43.3308%" y="213" width="0.1542%" height="15" fill="rgb(243,12,26)" fg:x="562" fg:w="2"/><text x="43.5808%" y="223.50"></text></g><g><title>realloc (2 samples, 0.15%)</title><rect x="43.3308%" y="197" width="0.1542%" height="15" fill="rgb(214,87,16)" fg:x="562" fg:w="2"/><text x="43.5808%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.15%)</title><rect x="43.4850%" y="245" width="0.1542%" height="15" fill="rgb(208,99,42)" fg:x="564" fg:w="2"/><text x="43.7350%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.5621%" y="229" width="0.0771%" height="15" fill="rgb(253,99,2)" fg:x="565" fg:w="1"/><text x="43.8121%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.5621%" y="213" width="0.0771%" height="15" fill="rgb(220,168,23)" fg:x="565" fg:w="1"/><text x="43.8121%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.5621%" y="197" width="0.0771%" height="15" fill="rgb(242,38,24)" fg:x="565" fg:w="1"/><text x="43.8121%" y="207.50"></text></g><g><title>__libc_free (2 samples, 0.15%)</title><rect x="43.7934%" y="213" width="0.1542%" height="15" fill="rgb(225,182,9)" fg:x="568" fg:w="2"/><text x="44.0434%" y="223.50"></text></g><g><title>__libc_malloc (5 samples, 0.39%)</title><rect x="44.1789%" y="181" width="0.3855%" height="15" fill="rgb(243,178,37)" fg:x="573" fg:w="5"/><text x="44.4289%" y="191.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="44.5644%" y="181" width="0.0771%" height="15" fill="rgb(232,139,19)" fg:x="578" fg:w="1"/><text x="44.8144%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.85%)</title><rect x="43.9476%" y="213" width="0.8481%" height="15" fill="rgb(225,201,24)" fg:x="570" fg:w="11"/><text x="44.1976%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.69%)</title><rect x="44.1018%" y="197" width="0.6939%" height="15" fill="rgb(221,47,46)" fg:x="572" fg:w="9"/><text x="44.3518%" y="207.50"></text></g><g><title>realloc (2 samples, 0.15%)</title><rect x="44.6415%" y="181" width="0.1542%" height="15" fill="rgb(249,23,13)" fg:x="579" fg:w="2"/><text x="44.8915%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.15%)</title><rect x="45.5667%" y="197" width="0.1542%" height="15" fill="rgb(219,9,5)" fg:x="591" fg:w="2"/><text x="45.8167%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (30 samples, 2.31%)</title><rect x="43.6392%" y="245" width="2.3130%" height="15" fill="rgb(254,171,16)" fg:x="566" fg:w="30"/><text x="43.8892%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (28 samples, 2.16%)</title><rect x="43.7934%" y="229" width="2.1588%" height="15" fill="rgb(230,171,20)" fg:x="568" fg:w="28"/><text x="44.0434%" y="239.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (15 samples, 1.16%)</title><rect x="44.7957%" y="213" width="1.1565%" height="15" fill="rgb(210,71,41)" fg:x="581" fg:w="15"/><text x="45.0457%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.23%)</title><rect x="45.7209%" y="197" width="0.2313%" height="15" fill="rgb(206,173,20)" fg:x="593" fg:w="3"/><text x="45.9709%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.15%)</title><rect x="45.7980%" y="181" width="0.1542%" height="15" fill="rgb(233,88,34)" fg:x="594" fg:w="2"/><text x="46.0480%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.15%)</title><rect x="45.7980%" y="165" width="0.1542%" height="15" fill="rgb(223,209,46)" fg:x="594" fg:w="2"/><text x="46.0480%" y="175.50"></text></g><g><title>realloc (2 samples, 0.15%)</title><rect x="45.7980%" y="149" width="0.1542%" height="15" fill="rgb(250,43,18)" fg:x="594" fg:w="2"/><text x="46.0480%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.15%)</title><rect x="45.9522%" y="245" width="0.1542%" height="15" fill="rgb(208,13,10)" fg:x="596" fg:w="2"/><text x="46.2022%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.15%)</title><rect x="45.9522%" y="229" width="0.1542%" height="15" fill="rgb(212,200,36)" fg:x="596" fg:w="2"/><text x="46.2022%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.15%)</title><rect x="45.9522%" y="213" width="0.1542%" height="15" fill="rgb(225,90,30)" fg:x="596" fg:w="2"/><text x="46.2022%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (141 samples, 10.87%)</title><rect x="46.1064%" y="245" width="10.8712%" height="15" fill="rgb(236,182,39)" fg:x="598" fg:w="141"/><text x="46.3564%" y="255.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (141 samples, 10.87%)</title><rect x="46.1064%" y="229" width="10.8712%" height="15" fill="rgb(212,144,35)" fg:x="598" fg:w="141"/><text x="46.3564%" y="239.50">regex_automata::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (141 samples, 10.87%)</title><rect x="46.1064%" y="213" width="10.8712%" height="15" fill="rgb(228,63,44)" fg:x="598" fg:w="141"/><text x="46.3564%" y="223.50">alloc::vec::Vec&lt;..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (8 samples, 0.62%)</title><rect x="56.9776%" y="245" width="0.6168%" height="15" fill="rgb(228,109,6)" fg:x="739" fg:w="8"/><text x="57.2276%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.5173%" y="229" width="0.0771%" height="15" fill="rgb(238,117,24)" fg:x="746" fg:w="1"/><text x="57.7673%" y="239.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="57.5944%" y="245" width="0.0771%" height="15" fill="rgb(242,26,26)" fg:x="747" fg:w="1"/><text x="57.8444%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (233 samples, 17.96%)</title><rect x="40.0154%" y="341" width="17.9645%" height="15" fill="rgb(221,92,48)" fg:x="519" fg:w="233"/><text x="40.2654%" y="351.50">&lt;core::iter::adapters::map::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (231 samples, 17.81%)</title><rect x="40.1696%" y="325" width="17.8103%" height="15" fill="rgb(209,209,32)" fg:x="521" fg:w="231"/><text x="40.4196%" y="335.50">regex_automata::nfa::thompso..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (231 samples, 17.81%)</title><rect x="40.1696%" y="309" width="17.8103%" height="15" fill="rgb(221,70,22)" fg:x="521" fg:w="231"/><text x="40.4196%" y="319.50">regex_automata::nfa::thompso..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (231 samples, 17.81%)</title><rect x="40.1696%" y="293" width="17.8103%" height="15" fill="rgb(248,145,5)" fg:x="521" fg:w="231"/><text x="40.4196%" y="303.50">regex_automata::nfa::thompso..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (231 samples, 17.81%)</title><rect x="40.1696%" y="277" width="17.8103%" height="15" fill="rgb(226,116,26)" fg:x="521" fg:w="231"/><text x="40.4196%" y="287.50">regex_automata::nfa::thompso..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (231 samples, 17.81%)</title><rect x="40.1696%" y="261" width="17.8103%" height="15" fill="rgb(244,5,17)" fg:x="521" fg:w="231"/><text x="40.4196%" y="271.50">regex_automata::nfa::thompso..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.31%)</title><rect x="57.6715%" y="245" width="0.3084%" height="15" fill="rgb(252,159,33)" fg:x="748" fg:w="4"/><text x="57.9215%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.23%)</title><rect x="57.7487%" y="229" width="0.2313%" height="15" fill="rgb(206,71,0)" fg:x="749" fg:w="3"/><text x="57.9987%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.1342%" y="325" width="0.0771%" height="15" fill="rgb(233,118,54)" fg:x="754" fg:w="1"/><text x="58.3842%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.1342%" y="309" width="0.0771%" height="15" fill="rgb(234,83,48)" fg:x="754" fg:w="1"/><text x="58.3842%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.1342%" y="293" width="0.0771%" height="15" fill="rgb(228,3,54)" fg:x="754" fg:w="1"/><text x="58.3842%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.2113%" y="325" width="0.0771%" height="15" fill="rgb(226,155,13)" fg:x="755" fg:w="1"/><text x="58.4613%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.2113%" y="309" width="0.0771%" height="15" fill="rgb(241,28,37)" fg:x="755" fg:w="1"/><text x="58.4613%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.2113%" y="293" width="0.0771%" height="15" fill="rgb(233,93,10)" fg:x="755" fg:w="1"/><text x="58.4613%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (12 samples, 0.93%)</title><rect x="58.2884%" y="325" width="0.9252%" height="15" fill="rgb(225,113,19)" fg:x="756" fg:w="12"/><text x="58.5384%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.46%)</title><rect x="58.7510%" y="309" width="0.4626%" height="15" fill="rgb(241,2,18)" fg:x="762" fg:w="6"/><text x="59.0010%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.46%)</title><rect x="58.7510%" y="293" width="0.4626%" height="15" fill="rgb(228,207,21)" fg:x="762" fg:w="6"/><text x="59.0010%" y="303.50"></text></g><g><title>realloc (5 samples, 0.39%)</title><rect x="58.8281%" y="277" width="0.3855%" height="15" fill="rgb(213,211,35)" fg:x="763" fg:w="5"/><text x="59.0781%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.5991%" y="309" width="0.0771%" height="15" fill="rgb(209,83,10)" fg:x="773" fg:w="1"/><text x="59.8491%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.54%)</title><rect x="59.2136%" y="325" width="0.5397%" height="15" fill="rgb(209,164,1)" fg:x="768" fg:w="7"/><text x="59.4636%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.6762%" y="309" width="0.0771%" height="15" fill="rgb(213,184,43)" fg:x="774" fg:w="1"/><text x="59.9262%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.6762%" y="293" width="0.0771%" height="15" fill="rgb(231,61,34)" fg:x="774" fg:w="1"/><text x="59.9262%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.6762%" y="277" width="0.0771%" height="15" fill="rgb(235,75,3)" fg:x="774" fg:w="1"/><text x="59.9262%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="59.7533%" y="325" width="0.0771%" height="15" fill="rgb(220,106,47)" fg:x="775" fg:w="1"/><text x="60.0033%" y="335.50"></text></g><g><title>regex_automata::meta::strategy::new (329 samples, 25.37%)</title><rect x="34.6955%" y="373" width="25.3662%" height="15" fill="rgb(210,196,33)" fg:x="450" fg:w="329"/><text x="34.9455%" y="383.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (261 samples, 20.12%)</title><rect x="39.9383%" y="357" width="20.1234%" height="15" fill="rgb(229,154,42)" fg:x="518" fg:w="261"/><text x="40.1883%" y="367.50">regex_automata::nfa::thompson::c..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (27 samples, 2.08%)</title><rect x="57.9800%" y="341" width="2.0817%" height="15" fill="rgb(228,114,26)" fg:x="752" fg:w="27"/><text x="58.2300%" y="351.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (3 samples, 0.23%)</title><rect x="59.8304%" y="325" width="0.2313%" height="15" fill="rgb(208,144,1)" fg:x="776" fg:w="3"/><text x="60.0804%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.9846%" y="309" width="0.0771%" height="15" fill="rgb(239,112,37)" fg:x="778" fg:w="1"/><text x="60.2346%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.9846%" y="293" width="0.0771%" height="15" fill="rgb(210,96,50)" fg:x="778" fg:w="1"/><text x="60.2346%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="60.0617%" y="341" width="0.0771%" height="15" fill="rgb(222,178,2)" fg:x="779" fg:w="1"/><text x="60.3117%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="60.0617%" y="325" width="0.0771%" height="15" fill="rgb(226,74,18)" fg:x="779" fg:w="1"/><text x="60.3117%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="60.0617%" y="309" width="0.0771%" height="15" fill="rgb(225,67,54)" fg:x="779" fg:w="1"/><text x="60.3117%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="60.0617%" y="293" width="0.0771%" height="15" fill="rgb(251,92,32)" fg:x="779" fg:w="1"/><text x="60.3117%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="60.1388%" y="341" width="0.0771%" height="15" fill="rgb(228,149,22)" fg:x="780" fg:w="1"/><text x="60.3888%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (3 samples, 0.23%)</title><rect x="60.2159%" y="341" width="0.2313%" height="15" fill="rgb(243,54,13)" fg:x="781" fg:w="3"/><text x="60.4659%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (2 samples, 0.15%)</title><rect x="60.2930%" y="325" width="0.1542%" height="15" fill="rgb(243,180,28)" fg:x="782" fg:w="2"/><text x="60.5430%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.3701%" y="309" width="0.0771%" height="15" fill="rgb(208,167,24)" fg:x="783" fg:w="1"/><text x="60.6201%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.46%)</title><rect x="60.0617%" y="373" width="0.4626%" height="15" fill="rgb(245,73,45)" fg:x="779" fg:w="6"/><text x="60.3117%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.46%)</title><rect x="60.0617%" y="357" width="0.4626%" height="15" fill="rgb(237,203,48)" fg:x="779" fg:w="6"/><text x="60.3117%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="60.4472%" y="341" width="0.0771%" height="15" fill="rgb(211,197,16)" fg:x="784" fg:w="1"/><text x="60.6972%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.8327%" y="325" width="0.0771%" height="15" fill="rgb(243,99,51)" fg:x="789" fg:w="1"/><text x="61.0827%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (5 samples, 0.39%)</title><rect x="60.9098%" y="325" width="0.3855%" height="15" fill="rgb(215,123,29)" fg:x="790" fg:w="5"/><text x="61.1598%" y="335.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.15%)</title><rect x="61.1411%" y="309" width="0.1542%" height="15" fill="rgb(239,186,37)" fg:x="793" fg:w="2"/><text x="61.3911%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (9 samples, 0.69%)</title><rect x="60.6785%" y="341" width="0.6939%" height="15" fill="rgb(252,136,39)" fg:x="787" fg:w="9"/><text x="60.9285%" y="351.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="61.2953%" y="325" width="0.0771%" height="15" fill="rgb(223,213,32)" fg:x="795" fg:w="1"/><text x="61.5453%" y="335.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="61.4495%" y="325" width="0.0771%" height="15" fill="rgb(233,115,5)" fg:x="797" fg:w="1"/><text x="61.6995%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.23%)</title><rect x="61.3724%" y="341" width="0.2313%" height="15" fill="rgb(207,226,44)" fg:x="796" fg:w="3"/><text x="61.6224%" y="351.50"></text></g><g><title>regex_syntax::hir::Properties::repetition (1 samples, 0.08%)</title><rect x="61.5266%" y="325" width="0.0771%" height="15" fill="rgb(208,126,0)" fg:x="798" fg:w="1"/><text x="61.7766%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.15%)</title><rect x="61.6037%" y="341" width="0.1542%" height="15" fill="rgb(244,66,21)" fg:x="799" fg:w="2"/><text x="61.8537%" y="351.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="61.6808%" y="325" width="0.0771%" height="15" fill="rgb(222,97,12)" fg:x="800" fg:w="1"/><text x="61.9308%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.6808%" y="309" width="0.0771%" height="15" fill="rgb(219,213,19)" fg:x="800" fg:w="1"/><text x="61.9308%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.6808%" y="293" width="0.0771%" height="15" fill="rgb(252,169,30)" fg:x="800" fg:w="1"/><text x="61.9308%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.6808%" y="277" width="0.0771%" height="15" fill="rgb(206,32,51)" fg:x="800" fg:w="1"/><text x="61.9308%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (366 samples, 28.22%)</title><rect x="33.6931%" y="421" width="28.2190%" height="15" fill="rgb(250,172,42)" fg:x="437" fg:w="366"/><text x="33.9431%" y="431.50">&lt;regex::regex::string::Regex as core::str::tr..</text></g><g><title>regex::builders::Builder::build_one_string (366 samples, 28.22%)</title><rect x="33.6931%" y="405" width="28.2190%" height="15" fill="rgb(209,34,43)" fg:x="437" fg:w="366"/><text x="33.9431%" y="415.50">regex::builders::Builder::build_one_string</text></g><g><title>regex_automata::meta::regex::Builder::build (366 samples, 28.22%)</title><rect x="33.6931%" y="389" width="28.2190%" height="15" fill="rgb(223,11,35)" fg:x="437" fg:w="366"/><text x="33.9431%" y="399.50">regex_automata::meta::regex::Builder::build</text></g><g><title>regex_syntax::hir::translate::Translator::translate (18 samples, 1.39%)</title><rect x="60.5243%" y="373" width="1.3878%" height="15" fill="rgb(251,219,26)" fg:x="785" fg:w="18"/><text x="60.7743%" y="383.50"></text></g><g><title>regex_syntax::ast::visitor::visit (18 samples, 1.39%)</title><rect x="60.5243%" y="357" width="1.3878%" height="15" fill="rgb(231,119,3)" fg:x="785" fg:w="18"/><text x="60.7743%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.15%)</title><rect x="61.7579%" y="341" width="0.1542%" height="15" fill="rgb(216,97,11)" fg:x="801" fg:w="2"/><text x="62.0079%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.9121%" y="389" width="0.0771%" height="15" fill="rgb(223,59,9)" fg:x="803" fg:w="1"/><text x="62.1621%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.0663%" y="357" width="0.0771%" height="15" fill="rgb(233,93,31)" fg:x="805" fg:w="1"/><text x="62.3163%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.15%)</title><rect x="62.0663%" y="373" width="0.1542%" height="15" fill="rgb(239,81,33)" fg:x="805" fg:w="2"/><text x="62.3163%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.1434%" y="357" width="0.0771%" height="15" fill="rgb(213,120,34)" fg:x="806" fg:w="1"/><text x="62.3934%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.15%)</title><rect x="62.2205%" y="373" width="0.1542%" height="15" fill="rgb(243,49,53)" fg:x="807" fg:w="2"/><text x="62.4705%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (6 samples, 0.46%)</title><rect x="61.9892%" y="389" width="0.4626%" height="15" fill="rgb(247,216,33)" fg:x="804" fg:w="6"/><text x="62.2392%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="62.3747%" y="373" width="0.0771%" height="15" fill="rgb(226,26,14)" fg:x="809" fg:w="1"/><text x="62.6247%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="62.3747%" y="357" width="0.0771%" height="15" fill="rgb(215,49,53)" fg:x="809" fg:w="1"/><text x="62.6247%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.3747%" y="341" width="0.0771%" height="15" fill="rgb(245,162,40)" fg:x="809" fg:w="1"/><text x="62.6247%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.3747%" y="325" width="0.0771%" height="15" fill="rgb(229,68,17)" fg:x="809" fg:w="1"/><text x="62.6247%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;regex_automata::meta::regex::Regex as core::clone::Clone&gt;::clone::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="62.4518%" y="389" width="0.0771%" height="15" fill="rgb(213,182,10)" fg:x="810" fg:w="1"/><text x="62.7018%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.5289%" y="373" width="0.0771%" height="15" fill="rgb(245,125,30)" fg:x="811" fg:w="1"/><text x="62.7789%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (10 samples, 0.77%)</title><rect x="61.9121%" y="421" width="0.7710%" height="15" fill="rgb(232,202,2)" fg:x="803" fg:w="10"/><text x="62.1621%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (10 samples, 0.77%)</title><rect x="61.9121%" y="405" width="0.7710%" height="15" fill="rgb(237,140,51)" fg:x="803" fg:w="10"/><text x="62.1621%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.15%)</title><rect x="62.5289%" y="389" width="0.1542%" height="15" fill="rgb(236,157,25)" fg:x="811" fg:w="2"/><text x="62.7789%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="62.6060%" y="373" width="0.0771%" height="15" fill="rgb(219,209,0)" fg:x="812" fg:w="1"/><text x="62.8560%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.6060%" y="357" width="0.0771%" height="15" fill="rgb(240,116,54)" fg:x="812" fg:w="1"/><text x="62.8560%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.23%)</title><rect x="62.6831%" y="405" width="0.2313%" height="15" fill="rgb(216,10,36)" fg:x="813" fg:w="3"/><text x="62.9331%" y="415.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.23%)</title><rect x="62.6831%" y="389" width="0.2313%" height="15" fill="rgb(222,72,44)" fg:x="813" fg:w="3"/><text x="62.9331%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.23%)</title><rect x="62.6831%" y="373" width="0.2313%" height="15" fill="rgb(232,159,9)" fg:x="813" fg:w="3"/><text x="62.9331%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="62.8373%" y="357" width="0.0771%" height="15" fill="rgb(210,39,32)" fg:x="815" fg:w="1"/><text x="63.0873%" y="367.50"></text></g><g><title>regex_automata::dfa::onepass::Cache::new (1 samples, 0.08%)</title><rect x="62.9915%" y="357" width="0.0771%" height="15" fill="rgb(216,194,45)" fg:x="817" fg:w="1"/><text x="63.2415%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.15%)</title><rect x="63.6854%" y="325" width="0.1542%" height="15" fill="rgb(218,18,35)" fg:x="826" fg:w="2"/><text x="63.9354%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.15%)</title><rect x="63.6854%" y="309" width="0.1542%" height="15" fill="rgb(207,83,51)" fg:x="826" fg:w="2"/><text x="63.9354%" y="319.50"></text></g><g><title>realloc (2 samples, 0.15%)</title><rect x="63.6854%" y="293" width="0.1542%" height="15" fill="rgb(225,63,43)" fg:x="826" fg:w="2"/><text x="63.9354%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.15%)</title><rect x="63.8396%" y="325" width="0.1542%" height="15" fill="rgb(207,57,36)" fg:x="828" fg:w="2"/><text x="64.0896%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="63.9167%" y="309" width="0.0771%" height="15" fill="rgb(216,99,33)" fg:x="829" fg:w="1"/><text x="64.1667%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (15 samples, 1.16%)</title><rect x="63.0686%" y="341" width="1.1565%" height="15" fill="rgb(225,42,16)" fg:x="818" fg:w="15"/><text x="63.3186%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.23%)</title><rect x="63.9938%" y="325" width="0.2313%" height="15" fill="rgb(220,201,45)" fg:x="830" fg:w="3"/><text x="64.2438%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (17 samples, 1.31%)</title><rect x="63.0686%" y="357" width="1.3107%" height="15" fill="rgb(225,33,4)" fg:x="818" fg:w="17"/><text x="63.3186%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.15%)</title><rect x="64.2251%" y="341" width="0.1542%" height="15" fill="rgb(224,33,50)" fg:x="833" fg:w="2"/><text x="64.4751%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.15%)</title><rect x="64.2251%" y="325" width="0.1542%" height="15" fill="rgb(246,198,51)" fg:x="833" fg:w="2"/><text x="64.4751%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.3022%" y="309" width="0.0771%" height="15" fill="rgb(205,22,4)" fg:x="834" fg:w="1"/><text x="64.5522%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.3022%" y="293" width="0.0771%" height="15" fill="rgb(206,3,8)" fg:x="834" fg:w="1"/><text x="64.5522%" y="303.50"></text></g><g><title>indefinite::rules::number::Number::check (402 samples, 30.99%)</title><rect x="33.5389%" y="437" width="30.9946%" height="15" fill="rgb(251,23,15)" fg:x="435" fg:w="402"/><text x="33.7889%" y="447.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::is_match_at (24 samples, 1.85%)</title><rect x="62.6831%" y="421" width="1.8504%" height="15" fill="rgb(252,88,28)" fg:x="813" fg:w="24"/><text x="62.9331%" y="431.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (21 samples, 1.62%)</title><rect x="62.9144%" y="405" width="1.6191%" height="15" fill="rgb(212,127,14)" fg:x="816" fg:w="21"/><text x="63.1644%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (21 samples, 1.62%)</title><rect x="62.9144%" y="389" width="1.6191%" height="15" fill="rgb(247,145,37)" fg:x="816" fg:w="21"/><text x="63.1644%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (21 samples, 1.62%)</title><rect x="62.9144%" y="373" width="1.6191%" height="15" fill="rgb(209,117,53)" fg:x="816" fg:w="21"/><text x="63.1644%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.15%)</title><rect x="64.3793%" y="357" width="0.1542%" height="15" fill="rgb(212,90,42)" fg:x="835" fg:w="2"/><text x="64.6293%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="64.4564%" y="341" width="0.0771%" height="15" fill="rgb(218,164,37)" fg:x="836" fg:w="1"/><text x="64.7064%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.4564%" y="325" width="0.0771%" height="15" fill="rgb(246,65,34)" fg:x="836" fg:w="1"/><text x="64.7064%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.4564%" y="309" width="0.0771%" height="15" fill="rgb(231,100,33)" fg:x="836" fg:w="1"/><text x="64.7064%" y="319.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="64.6106%" y="389" width="0.0771%" height="15" fill="rgb(228,126,14)" fg:x="838" fg:w="1"/><text x="64.8606%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Config::nfa_size_limit (1 samples, 0.08%)</title><rect x="64.6106%" y="373" width="0.0771%" height="15" fill="rgb(215,173,21)" fg:x="838" fg:w="1"/><text x="64.8606%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.7648%" y="373" width="0.0771%" height="15" fill="rgb(210,6,40)" fg:x="840" fg:w="1"/><text x="65.0148%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.8419%" y="325" width="0.0771%" height="15" fill="rgb(212,48,18)" fg:x="841" fg:w="1"/><text x="65.0919%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.31%)</title><rect x="64.8419%" y="357" width="0.3084%" height="15" fill="rgb(230,214,11)" fg:x="841" fg:w="4"/><text x="65.0919%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="64.8419%" y="341" width="0.3084%" height="15" fill="rgb(254,105,39)" fg:x="841" fg:w="4"/><text x="65.0919%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.23%)</title><rect x="64.9190%" y="325" width="0.2313%" height="15" fill="rgb(245,158,5)" fg:x="842" fg:w="3"/><text x="65.1690%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="64.9190%" y="309" width="0.2313%" height="15" fill="rgb(249,208,11)" fg:x="842" fg:w="3"/><text x="65.1690%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.23%)</title><rect x="64.9190%" y="293" width="0.2313%" height="15" fill="rgb(210,39,28)" fg:x="842" fg:w="3"/><text x="65.1690%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.15%)</title><rect x="64.9961%" y="277" width="0.1542%" height="15" fill="rgb(211,56,53)" fg:x="843" fg:w="2"/><text x="65.2461%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.15%)</title><rect x="64.9961%" y="261" width="0.1542%" height="15" fill="rgb(226,201,30)" fg:x="843" fg:w="2"/><text x="65.2461%" y="271.50"></text></g><g><title>realloc (2 samples, 0.15%)</title><rect x="64.9961%" y="245" width="0.1542%" height="15" fill="rgb(239,101,34)" fg:x="843" fg:w="2"/><text x="65.2461%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="65.4588%" y="341" width="0.0771%" height="15" fill="rgb(226,209,5)" fg:x="849" fg:w="1"/><text x="65.7088%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.4588%" y="325" width="0.0771%" height="15" fill="rgb(250,105,47)" fg:x="849" fg:w="1"/><text x="65.7088%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="65.6130%" y="325" width="0.0771%" height="15" fill="rgb(230,72,3)" fg:x="851" fg:w="1"/><text x="65.8630%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.15%)</title><rect x="65.6901%" y="325" width="0.1542%" height="15" fill="rgb(232,218,39)" fg:x="852" fg:w="2"/><text x="65.9401%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.54%)</title><rect x="65.5359%" y="341" width="0.5397%" height="15" fill="rgb(248,166,6)" fg:x="850" fg:w="7"/><text x="65.7859%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (3 samples, 0.23%)</title><rect x="65.8443%" y="325" width="0.2313%" height="15" fill="rgb(247,89,20)" fg:x="854" fg:w="3"/><text x="66.0943%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.15%)</title><rect x="65.9214%" y="309" width="0.1542%" height="15" fill="rgb(248,130,54)" fg:x="855" fg:w="2"/><text x="66.1714%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="65.9985%" y="293" width="0.0771%" height="15" fill="rgb(234,196,4)" fg:x="856" fg:w="1"/><text x="66.2485%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="66.1527%" y="293" width="0.0771%" height="15" fill="rgb(250,143,31)" fg:x="858" fg:w="1"/><text x="66.4027%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="66.1527%" y="277" width="0.0771%" height="15" fill="rgb(211,110,34)" fg:x="858" fg:w="1"/><text x="66.4027%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="66.4611%" y="261" width="0.0771%" height="15" fill="rgb(215,124,48)" fg:x="862" fg:w="1"/><text x="66.7111%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.54%)</title><rect x="66.1527%" y="325" width="0.5397%" height="15" fill="rgb(216,46,13)" fg:x="858" fg:w="7"/><text x="66.4027%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (7 samples, 0.54%)</title><rect x="66.1527%" y="309" width="0.5397%" height="15" fill="rgb(205,184,25)" fg:x="858" fg:w="7"/><text x="66.4027%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (6 samples, 0.46%)</title><rect x="66.2298%" y="293" width="0.4626%" height="15" fill="rgb(228,1,10)" fg:x="859" fg:w="6"/><text x="66.4798%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (5 samples, 0.39%)</title><rect x="66.3069%" y="277" width="0.3855%" height="15" fill="rgb(213,116,27)" fg:x="860" fg:w="5"/><text x="66.5569%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.15%)</title><rect x="66.5382%" y="261" width="0.1542%" height="15" fill="rgb(241,95,50)" fg:x="863" fg:w="2"/><text x="66.7882%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.6153%" y="245" width="0.0771%" height="15" fill="rgb(238,48,32)" fg:x="864" fg:w="1"/><text x="66.8653%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="66.6924%" y="325" width="0.0771%" height="15" fill="rgb(235,113,49)" fg:x="865" fg:w="1"/><text x="66.9424%" y="335.50"></text></g><g><title>__libc_calloc (2 samples, 0.15%)</title><rect x="66.8466%" y="309" width="0.1542%" height="15" fill="rgb(205,127,43)" fg:x="867" fg:w="2"/><text x="67.0966%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.0008%" y="309" width="0.0771%" height="15" fill="rgb(250,162,2)" fg:x="869" fg:w="1"/><text x="67.2508%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="67.0779%" y="309" width="0.0771%" height="15" fill="rgb(220,13,41)" fg:x="870" fg:w="1"/><text x="67.3279%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.31%)</title><rect x="67.1550%" y="309" width="0.3084%" height="15" fill="rgb(249,221,25)" fg:x="871" fg:w="4"/><text x="67.4050%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (31 samples, 2.39%)</title><rect x="65.1503%" y="357" width="2.3901%" height="15" fill="rgb(215,208,19)" fg:x="845" fg:w="31"/><text x="65.4003%" y="367.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (19 samples, 1.46%)</title><rect x="66.0756%" y="341" width="1.4649%" height="15" fill="rgb(236,175,2)" fg:x="857" fg:w="19"/><text x="66.3256%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.77%)</title><rect x="66.7695%" y="325" width="0.7710%" height="15" fill="rgb(241,52,2)" fg:x="866" fg:w="10"/><text x="67.0195%" y="335.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="67.4634%" y="309" width="0.0771%" height="15" fill="rgb(248,140,14)" fg:x="875" fg:w="1"/><text x="67.7134%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="67.4634%" y="293" width="0.0771%" height="15" fill="rgb(253,22,42)" fg:x="875" fg:w="1"/><text x="67.7134%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.15%)</title><rect x="67.5405%" y="325" width="0.1542%" height="15" fill="rgb(234,61,47)" fg:x="876" fg:w="2"/><text x="67.7905%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.15%)</title><rect x="67.5405%" y="309" width="0.1542%" height="15" fill="rgb(208,226,15)" fg:x="876" fg:w="2"/><text x="67.7905%" y="319.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="67.8489%" y="309" width="0.0771%" height="15" fill="rgb(217,221,4)" fg:x="880" fg:w="1"/><text x="68.0989%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.8489%" y="293" width="0.0771%" height="15" fill="rgb(212,174,34)" fg:x="880" fg:w="1"/><text x="68.0989%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.8489%" y="277" width="0.0771%" height="15" fill="rgb(253,83,4)" fg:x="880" fg:w="1"/><text x="68.0989%" y="287.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="67.8489%" y="261" width="0.0771%" height="15" fill="rgb(250,195,49)" fg:x="880" fg:w="1"/><text x="68.0989%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="68.0031%" y="277" width="0.0771%" height="15" fill="rgb(241,192,25)" fg:x="882" fg:w="1"/><text x="68.2531%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="68.0031%" y="261" width="0.0771%" height="15" fill="rgb(208,124,10)" fg:x="882" fg:w="1"/><text x="68.2531%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (3 samples, 0.23%)</title><rect x="67.9260%" y="309" width="0.2313%" height="15" fill="rgb(222,33,0)" fg:x="881" fg:w="3"/><text x="68.1760%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (2 samples, 0.15%)</title><rect x="68.0031%" y="293" width="0.1542%" height="15" fill="rgb(234,209,28)" fg:x="882" fg:w="2"/><text x="68.2531%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="68.0802%" y="277" width="0.0771%" height="15" fill="rgb(224,11,23)" fg:x="883" fg:w="1"/><text x="68.3302%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.15%)</title><rect x="68.1573%" y="309" width="0.1542%" height="15" fill="rgb(232,99,1)" fg:x="884" fg:w="2"/><text x="68.4073%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (2 samples, 0.15%)</title><rect x="68.1573%" y="293" width="0.1542%" height="15" fill="rgb(237,95,45)" fg:x="884" fg:w="2"/><text x="68.4073%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (11 samples, 0.85%)</title><rect x="67.5405%" y="357" width="0.8481%" height="15" fill="rgb(208,109,11)" fg:x="876" fg:w="11"/><text x="67.7905%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.85%)</title><rect x="67.5405%" y="341" width="0.8481%" height="15" fill="rgb(216,190,48)" fg:x="876" fg:w="11"/><text x="67.7905%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (9 samples, 0.69%)</title><rect x="67.6947%" y="325" width="0.6939%" height="15" fill="rgb(251,171,36)" fg:x="878" fg:w="9"/><text x="67.9447%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="68.3115%" y="309" width="0.0771%" height="15" fill="rgb(230,62,22)" fg:x="886" fg:w="1"/><text x="68.5615%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.3115%" y="293" width="0.0771%" height="15" fill="rgb(225,114,35)" fg:x="886" fg:w="1"/><text x="68.5615%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.3115%" y="277" width="0.0771%" height="15" fill="rgb(215,118,42)" fg:x="886" fg:w="1"/><text x="68.5615%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.3115%" y="261" width="0.0771%" height="15" fill="rgb(243,119,21)" fg:x="886" fg:w="1"/><text x="68.5615%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.6199%" y="293" width="0.0771%" height="15" fill="rgb(252,177,53)" fg:x="890" fg:w="1"/><text x="68.8699%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.6199%" y="277" width="0.0771%" height="15" fill="rgb(237,209,29)" fg:x="890" fg:w="1"/><text x="68.8699%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.6199%" y="261" width="0.0771%" height="15" fill="rgb(212,65,23)" fg:x="890" fg:w="1"/><text x="68.8699%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.23%)</title><rect x="68.5428%" y="325" width="0.2313%" height="15" fill="rgb(230,222,46)" fg:x="889" fg:w="3"/><text x="68.7928%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.15%)</title><rect x="68.6199%" y="309" width="0.1542%" height="15" fill="rgb(215,135,32)" fg:x="890" fg:w="2"/><text x="68.8699%" y="319.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="68.6970%" y="293" width="0.0771%" height="15" fill="rgb(246,101,22)" fg:x="891" fg:w="1"/><text x="68.9470%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="68.7741%" y="309" width="0.0771%" height="15" fill="rgb(206,107,13)" fg:x="892" fg:w="1"/><text x="69.0241%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.7741%" y="293" width="0.0771%" height="15" fill="rgb(250,100,44)" fg:x="892" fg:w="1"/><text x="69.0241%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.15%)</title><rect x="68.7741%" y="325" width="0.1542%" height="15" fill="rgb(231,147,38)" fg:x="892" fg:w="2"/><text x="69.0241%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="68.8512%" y="309" width="0.0771%" height="15" fill="rgb(229,8,40)" fg:x="893" fg:w="1"/><text x="69.1012%" y="319.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (58 samples, 4.47%)</title><rect x="64.5335%" y="405" width="4.4719%" height="15" fill="rgb(221,135,30)" fg:x="837" fg:w="58"/><text x="64.7835%" y="415.50">&lt;rege..</text></g><g><title>regex::builders::Builder::build_one_string (56 samples, 4.32%)</title><rect x="64.6877%" y="389" width="4.3177%" height="15" fill="rgb(249,193,18)" fg:x="839" fg:w="56"/><text x="64.9377%" y="399.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (54 samples, 4.16%)</title><rect x="64.8419%" y="373" width="4.1635%" height="15" fill="rgb(209,133,39)" fg:x="841" fg:w="54"/><text x="65.0919%" y="383.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.62%)</title><rect x="68.3886%" y="357" width="0.6168%" height="15" fill="rgb(232,100,14)" fg:x="887" fg:w="8"/><text x="68.6386%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.62%)</title><rect x="68.3886%" y="341" width="0.6168%" height="15" fill="rgb(224,185,1)" fg:x="887" fg:w="8"/><text x="68.6386%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.9283%" y="325" width="0.0771%" height="15" fill="rgb(223,139,8)" fg:x="894" fg:w="1"/><text x="69.1783%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.9283%" y="309" width="0.0771%" height="15" fill="rgb(232,213,38)" fg:x="894" fg:w="1"/><text x="69.1783%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="68.9283%" y="293" width="0.0771%" height="15" fill="rgb(207,94,22)" fg:x="894" fg:w="1"/><text x="69.1783%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="68.9283%" y="277" width="0.0771%" height="15" fill="rgb(219,183,54)" fg:x="894" fg:w="1"/><text x="69.1783%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="69.0054%" y="373" width="0.0771%" height="15" fill="rgb(216,185,54)" fg:x="895" fg:w="1"/><text x="69.2554%" y="383.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="69.0054%" y="357" width="0.0771%" height="15" fill="rgb(254,217,39)" fg:x="895" fg:w="1"/><text x="69.2554%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.15%)</title><rect x="69.0054%" y="405" width="0.1542%" height="15" fill="rgb(240,178,23)" fg:x="895" fg:w="2"/><text x="69.2554%" y="415.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.15%)</title><rect x="69.0054%" y="389" width="0.1542%" height="15" fill="rgb(218,11,47)" fg:x="895" fg:w="2"/><text x="69.2554%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="69.0825%" y="373" width="0.0771%" height="15" fill="rgb(218,51,51)" fg:x="896" fg:w="1"/><text x="69.3325%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="69.1596%" y="357" width="0.0771%" height="15" fill="rgb(238,126,27)" fg:x="897" fg:w="1"/><text x="69.4096%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="69.2367%" y="357" width="0.0771%" height="15" fill="rgb(249,202,22)" fg:x="898" fg:w="1"/><text x="69.4867%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="69.2367%" y="341" width="0.0771%" height="15" fill="rgb(254,195,49)" fg:x="898" fg:w="1"/><text x="69.4867%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2367%" y="325" width="0.0771%" height="15" fill="rgb(208,123,14)" fg:x="898" fg:w="1"/><text x="69.4867%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.3138%" y="325" width="0.0771%" height="15" fill="rgb(224,200,8)" fg:x="899" fg:w="1"/><text x="69.5638%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.31%)</title><rect x="69.1596%" y="405" width="0.3084%" height="15" fill="rgb(217,61,36)" fg:x="897" fg:w="4"/><text x="69.4096%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.31%)</title><rect x="69.1596%" y="389" width="0.3084%" height="15" fill="rgb(206,35,45)" fg:x="897" fg:w="4"/><text x="69.4096%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.31%)</title><rect x="69.1596%" y="373" width="0.3084%" height="15" fill="rgb(217,65,33)" fg:x="897" fg:w="4"/><text x="69.4096%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.15%)</title><rect x="69.3138%" y="357" width="0.1542%" height="15" fill="rgb(222,158,48)" fg:x="899" fg:w="2"/><text x="69.5638%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.15%)</title><rect x="69.3138%" y="341" width="0.1542%" height="15" fill="rgb(254,2,54)" fg:x="899" fg:w="2"/><text x="69.5638%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.3909%" y="325" width="0.0771%" height="15" fill="rgb(250,143,38)" fg:x="900" fg:w="1"/><text x="69.6409%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.23%)</title><rect x="70.1619%" y="325" width="0.2313%" height="15" fill="rgb(248,25,0)" fg:x="910" fg:w="3"/><text x="70.4119%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.23%)</title><rect x="70.1619%" y="309" width="0.2313%" height="15" fill="rgb(206,152,27)" fg:x="910" fg:w="3"/><text x="70.4119%" y="319.50"></text></g><g><title>realloc (3 samples, 0.23%)</title><rect x="70.1619%" y="293" width="0.2313%" height="15" fill="rgb(240,77,30)" fg:x="910" fg:w="3"/><text x="70.4119%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="70.3932%" y="325" width="0.0771%" height="15" fill="rgb(231,5,3)" fg:x="913" fg:w="1"/><text x="70.6432%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.3932%" y="309" width="0.0771%" height="15" fill="rgb(207,226,32)" fg:x="913" fg:w="1"/><text x="70.6432%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3932%" y="293" width="0.0771%" height="15" fill="rgb(222,207,47)" fg:x="913" fg:w="1"/><text x="70.6432%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (15 samples, 1.16%)</title><rect x="69.4680%" y="341" width="1.1565%" height="15" fill="rgb(229,115,45)" fg:x="901" fg:w="15"/><text x="69.7180%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.15%)</title><rect x="70.4703%" y="325" width="0.1542%" height="15" fill="rgb(224,191,6)" fg:x="914" fg:w="2"/><text x="70.7203%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (80 samples, 6.17%)</title><rect x="64.5335%" y="421" width="6.1681%" height="15" fill="rgb(230,227,24)" fg:x="837" fg:w="80"/><text x="64.7835%" y="431.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (16 samples, 1.23%)</title><rect x="69.4680%" y="405" width="1.2336%" height="15" fill="rgb(228,80,19)" fg:x="901" fg:w="16"/><text x="69.7180%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (16 samples, 1.23%)</title><rect x="69.4680%" y="389" width="1.2336%" height="15" fill="rgb(247,229,0)" fg:x="901" fg:w="16"/><text x="69.7180%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (16 samples, 1.23%)</title><rect x="69.4680%" y="373" width="1.2336%" height="15" fill="rgb(237,194,15)" fg:x="901" fg:w="16"/><text x="69.7180%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (16 samples, 1.23%)</title><rect x="69.4680%" y="357" width="1.2336%" height="15" fill="rgb(219,203,20)" fg:x="901" fg:w="16"/><text x="69.7180%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="70.6245%" y="341" width="0.0771%" height="15" fill="rgb(234,128,8)" fg:x="916" fg:w="1"/><text x="70.8745%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="70.6245%" y="325" width="0.0771%" height="15" fill="rgb(248,202,8)" fg:x="916" fg:w="1"/><text x="70.8745%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.6245%" y="309" width="0.0771%" height="15" fill="rgb(206,104,37)" fg:x="916" fg:w="1"/><text x="70.8745%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.6245%" y="293" width="0.0771%" height="15" fill="rgb(223,8,27)" fg:x="916" fg:w="1"/><text x="70.8745%" y="303.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (781 samples, 60.22%)</title><rect x="10.6399%" y="517" width="60.2159%" height="15" fill="rgb(216,217,28)" fg:x="138" fg:w="781"/><text x="10.8899%" y="527.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::ob..</text></g><g><title>plugins_core::looking::model::qualify_name (775 samples, 59.75%)</title><rect x="11.1025%" y="501" width="59.7533%" height="15" fill="rgb(249,199,1)" fg:x="144" fg:w="775"/><text x="11.3525%" y="511.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (774 samples, 59.68%)</title><rect x="11.1796%" y="485" width="59.6762%" height="15" fill="rgb(240,85,17)" fg:x="145" fg:w="774"/><text x="11.4296%" y="495.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (774 samples, 59.68%)</title><rect x="11.1796%" y="469" width="59.6762%" height="15" fill="rgb(206,108,45)" fg:x="145" fg:w="774"/><text x="11.4296%" y="479.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (773 samples, 59.60%)</title><rect x="11.2567%" y="453" width="59.5991%" height="15" fill="rgb(245,210,41)" fg:x="146" fg:w="773"/><text x="11.5067%" y="463.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (82 samples, 6.32%)</title><rect x="64.5335%" y="437" width="6.3223%" height="15" fill="rgb(206,13,37)" fg:x="837" fg:w="82"/><text x="64.7835%" y="447.50">indefini..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.15%)</title><rect x="70.7016%" y="421" width="0.1542%" height="15" fill="rgb(250,61,18)" fg:x="917" fg:w="2"/><text x="70.9516%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.7787%" y="405" width="0.0771%" height="15" fill="rgb(235,172,48)" fg:x="918" fg:w="1"/><text x="71.0287%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8558%" y="469" width="0.0771%" height="15" fill="rgb(249,201,17)" fg:x="919" fg:w="1"/><text x="71.1058%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8558%" y="453" width="0.0771%" height="15" fill="rgb(219,208,6)" fg:x="919" fg:w="1"/><text x="71.1058%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.8558%" y="437" width="0.0771%" height="15" fill="rgb(248,31,23)" fg:x="919" fg:w="1"/><text x="71.1058%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.8558%" y="421" width="0.0771%" height="15" fill="rgb(245,15,42)" fg:x="919" fg:w="1"/><text x="71.1058%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.8558%" y="405" width="0.0771%" height="15" fill="rgb(222,217,39)" fg:x="919" fg:w="1"/><text x="71.1058%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.8558%" y="389" width="0.0771%" height="15" fill="rgb(210,219,27)" fg:x="919" fg:w="1"/><text x="71.1058%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.8558%" y="373" width="0.0771%" height="15" fill="rgb(252,166,36)" fg:x="919" fg:w="1"/><text x="71.1058%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.8558%" y="357" width="0.0771%" height="15" fill="rgb(245,132,34)" fg:x="919" fg:w="1"/><text x="71.1058%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.8558%" y="341" width="0.0771%" height="15" fill="rgb(236,54,3)" fg:x="919" fg:w="1"/><text x="71.1058%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.8558%" y="325" width="0.0771%" height="15" fill="rgb(241,173,43)" fg:x="919" fg:w="1"/><text x="71.1058%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.8558%" y="309" width="0.0771%" height="15" fill="rgb(215,190,9)" fg:x="919" fg:w="1"/><text x="71.1058%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8558%" y="293" width="0.0771%" height="15" fill="rgb(242,101,16)" fg:x="919" fg:w="1"/><text x="71.1058%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="71.0100%" y="261" width="0.0771%" height="15" fill="rgb(223,190,21)" fg:x="921" fg:w="1"/><text x="71.2600%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="71.0100%" y="245" width="0.0771%" height="15" fill="rgb(215,228,25)" fg:x="921" fg:w="1"/><text x="71.2600%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.0100%" y="229" width="0.0771%" height="15" fill="rgb(225,36,22)" fg:x="921" fg:w="1"/><text x="71.2600%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="71.0100%" y="213" width="0.0771%" height="15" fill="rgb(251,106,46)" fg:x="921" fg:w="1"/><text x="71.2600%" y="223.50"></text></g><g><title>core::cmp::max (1 samples, 0.08%)</title><rect x="71.0100%" y="197" width="0.0771%" height="15" fill="rgb(208,90,1)" fg:x="921" fg:w="1"/><text x="71.2600%" y="207.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.08%)</title><rect x="71.0100%" y="181" width="0.0771%" height="15" fill="rgb(243,10,4)" fg:x="921" fg:w="1"/><text x="71.2600%" y="191.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.08%)</title><rect x="71.0100%" y="165" width="0.0771%" height="15" fill="rgb(212,137,27)" fg:x="921" fg:w="1"/><text x="71.2600%" y="175.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.15%)</title><rect x="71.0100%" y="357" width="0.1542%" height="15" fill="rgb(231,220,49)" fg:x="921" fg:w="2"/><text x="71.2600%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.15%)</title><rect x="71.0100%" y="341" width="0.1542%" height="15" fill="rgb(237,96,20)" fg:x="921" fg:w="2"/><text x="71.2600%" y="351.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.15%)</title><rect x="71.0100%" y="325" width="0.1542%" height="15" fill="rgb(239,229,30)" fg:x="921" fg:w="2"/><text x="71.2600%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.15%)</title><rect x="71.0100%" y="309" width="0.1542%" height="15" fill="rgb(219,65,33)" fg:x="921" fg:w="2"/><text x="71.2600%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.15%)</title><rect x="71.0100%" y="293" width="0.1542%" height="15" fill="rgb(243,134,7)" fg:x="921" fg:w="2"/><text x="71.2600%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.15%)</title><rect x="71.0100%" y="277" width="0.1542%" height="15" fill="rgb(216,177,54)" fg:x="921" fg:w="2"/><text x="71.2600%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.0871%" y="261" width="0.0771%" height="15" fill="rgb(211,160,20)" fg:x="922" fg:w="1"/><text x="71.3371%" y="271.50"></text></g><g><title>kernel::model::EntityRef::into_entry (5 samples, 0.39%)</title><rect x="70.8558%" y="517" width="0.3855%" height="15" fill="rgb(239,85,39)" fg:x="919" fg:w="5"/><text x="71.1058%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (5 samples, 0.39%)</title><rect x="70.8558%" y="501" width="0.3855%" height="15" fill="rgb(232,125,22)" fg:x="919" fg:w="5"/><text x="71.1058%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::new (5 samples, 0.39%)</title><rect x="70.8558%" y="485" width="0.3855%" height="15" fill="rgb(244,57,34)" fg:x="919" fg:w="5"/><text x="71.1058%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (4 samples, 0.31%)</title><rect x="70.9329%" y="469" width="0.3084%" height="15" fill="rgb(214,203,32)" fg:x="920" fg:w="4"/><text x="71.1829%" y="479.50"></text></g><g><title>core::fmt::Write::write_fmt (4 samples, 0.31%)</title><rect x="70.9329%" y="453" width="0.3084%" height="15" fill="rgb(207,58,43)" fg:x="920" fg:w="4"/><text x="71.1829%" y="463.50"></text></g><g><title>core::fmt::write (4 samples, 0.31%)</title><rect x="70.9329%" y="437" width="0.3084%" height="15" fill="rgb(215,193,15)" fg:x="920" fg:w="4"/><text x="71.1829%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (4 samples, 0.31%)</title><rect x="70.9329%" y="421" width="0.3084%" height="15" fill="rgb(232,15,44)" fg:x="920" fg:w="4"/><text x="71.1829%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (4 samples, 0.31%)</title><rect x="70.9329%" y="405" width="0.3084%" height="15" fill="rgb(212,3,48)" fg:x="920" fg:w="4"/><text x="71.1829%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_fmt (3 samples, 0.23%)</title><rect x="71.0100%" y="389" width="0.2313%" height="15" fill="rgb(218,128,7)" fg:x="921" fg:w="3"/><text x="71.2600%" y="399.50"></text></g><g><title>core::fmt::write (3 samples, 0.23%)</title><rect x="71.0100%" y="373" width="0.2313%" height="15" fill="rgb(226,216,39)" fg:x="921" fg:w="3"/><text x="71.2600%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="71.1642%" y="357" width="0.0771%" height="15" fill="rgb(243,47,51)" fg:x="923" fg:w="1"/><text x="71.4142%" y="367.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="71.1642%" y="341" width="0.0771%" height="15" fill="rgb(241,183,40)" fg:x="923" fg:w="1"/><text x="71.4142%" y="351.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="71.1642%" y="325" width="0.0771%" height="15" fill="rgb(231,217,32)" fg:x="923" fg:w="1"/><text x="71.4142%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="71.1642%" y="309" width="0.0771%" height="15" fill="rgb(229,61,38)" fg:x="923" fg:w="1"/><text x="71.4142%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="71.1642%" y="293" width="0.0771%" height="15" fill="rgb(225,210,5)" fg:x="923" fg:w="1"/><text x="71.4142%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.1642%" y="277" width="0.0771%" height="15" fill="rgb(231,79,45)" fg:x="923" fg:w="1"/><text x="71.4142%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.15%)</title><rect x="71.3184%" y="485" width="0.1542%" height="15" fill="rgb(224,100,7)" fg:x="925" fg:w="2"/><text x="71.5684%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.3955%" y="469" width="0.0771%" height="15" fill="rgb(241,198,18)" fg:x="926" fg:w="1"/><text x="71.6455%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3955%" y="453" width="0.0771%" height="15" fill="rgb(252,97,53)" fg:x="926" fg:w="1"/><text x="71.6455%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.3955%" y="437" width="0.0771%" height="15" fill="rgb(220,88,7)" fg:x="926" fg:w="1"/><text x="71.6455%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.3955%" y="421" width="0.0771%" height="15" fill="rgb(213,176,14)" fg:x="926" fg:w="1"/><text x="71.6455%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.3955%" y="405" width="0.0771%" height="15" fill="rgb(246,73,7)" fg:x="926" fg:w="1"/><text x="71.6455%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.3955%" y="389" width="0.0771%" height="15" fill="rgb(245,64,36)" fg:x="926" fg:w="1"/><text x="71.6455%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.3955%" y="373" width="0.0771%" height="15" fill="rgb(245,80,10)" fg:x="926" fg:w="1"/><text x="71.6455%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="71.3955%" y="357" width="0.0771%" height="15" fill="rgb(232,107,50)" fg:x="926" fg:w="1"/><text x="71.6455%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.3955%" y="341" width="0.0771%" height="15" fill="rgb(253,3,0)" fg:x="926" fg:w="1"/><text x="71.6455%" y="351.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="71.4726%" y="485" width="0.0771%" height="15" fill="rgb(212,99,53)" fg:x="927" fg:w="1"/><text x="71.7226%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.4726%" y="469" width="0.0771%" height="15" fill="rgb(249,111,54)" fg:x="927" fg:w="1"/><text x="71.7226%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="71.4726%" y="453" width="0.0771%" height="15" fill="rgb(249,55,30)" fg:x="927" fg:w="1"/><text x="71.7226%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="71.4726%" y="437" width="0.0771%" height="15" fill="rgb(237,47,42)" fg:x="927" fg:w="1"/><text x="71.7226%" y="447.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="71.4726%" y="421" width="0.0771%" height="15" fill="rgb(211,20,18)" fg:x="927" fg:w="1"/><text x="71.7226%" y="431.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="71.4726%" y="405" width="0.0771%" height="15" fill="rgb(231,203,46)" fg:x="927" fg:w="1"/><text x="71.7226%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4726%" y="389" width="0.0771%" height="15" fill="rgb(237,142,3)" fg:x="927" fg:w="1"/><text x="71.7226%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4726%" y="373" width="0.0771%" height="15" fill="rgb(241,107,1)" fg:x="927" fg:w="1"/><text x="71.7226%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4726%" y="357" width="0.0771%" height="15" fill="rgb(229,83,13)" fg:x="927" fg:w="1"/><text x="71.7226%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.4726%" y="341" width="0.0771%" height="15" fill="rgb(241,91,40)" fg:x="927" fg:w="1"/><text x="71.7226%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.4726%" y="325" width="0.0771%" height="15" fill="rgb(225,3,45)" fg:x="927" fg:w="1"/><text x="71.7226%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.4726%" y="309" width="0.0771%" height="15" fill="rgb(244,223,14)" fg:x="927" fg:w="1"/><text x="71.7226%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="71.4726%" y="293" width="0.0771%" height="15" fill="rgb(224,124,37)" fg:x="927" fg:w="1"/><text x="71.7226%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.4726%" y="277" width="0.0771%" height="15" fill="rgb(251,171,30)" fg:x="927" fg:w="1"/><text x="71.7226%" y="287.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (791 samples, 60.99%)</title><rect x="10.6399%" y="549" width="60.9869%" height="15" fill="rgb(236,46,54)" fg:x="138" fg:w="791"/><text x="10.8899%" y="559.50">&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (791 samples, 60.99%)</title><rect x="10.6399%" y="533" width="60.9869%" height="15" fill="rgb(245,213,5)" fg:x="138" fg:w="791"/><text x="10.8899%" y="543.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.39%)</title><rect x="71.2413%" y="517" width="0.3855%" height="15" fill="rgb(230,144,27)" fg:x="924" fg:w="5"/><text x="71.4913%" y="527.50"></text></g><g><title>kernel::model::Entity::load_scope (5 samples, 0.39%)</title><rect x="71.2413%" y="501" width="0.3855%" height="15" fill="rgb(220,86,6)" fg:x="924" fg:w="5"/><text x="71.4913%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.5497%" y="485" width="0.0771%" height="15" fill="rgb(240,20,13)" fg:x="928" fg:w="1"/><text x="71.7997%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.5497%" y="469" width="0.0771%" height="15" fill="rgb(217,89,34)" fg:x="928" fg:w="1"/><text x="71.7997%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="71.5497%" y="453" width="0.0771%" height="15" fill="rgb(229,13,5)" fg:x="928" fg:w="1"/><text x="71.7997%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="71.5497%" y="437" width="0.0771%" height="15" fill="rgb(244,67,35)" fg:x="928" fg:w="1"/><text x="71.7997%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="71.5497%" y="421" width="0.0771%" height="15" fill="rgb(221,40,2)" fg:x="928" fg:w="1"/><text x="71.7997%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.5497%" y="405" width="0.0771%" height="15" fill="rgb(237,157,21)" fg:x="928" fg:w="1"/><text x="71.7997%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.5497%" y="389" width="0.0771%" height="15" fill="rgb(222,94,11)" fg:x="928" fg:w="1"/><text x="71.7997%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.15%)</title><rect x="71.6268%" y="485" width="0.1542%" height="15" fill="rgb(249,113,6)" fg:x="929" fg:w="2"/><text x="71.8768%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.15%)</title><rect x="71.6268%" y="469" width="0.1542%" height="15" fill="rgb(238,137,36)" fg:x="929" fg:w="2"/><text x="71.8768%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7039%" y="453" width="0.0771%" height="15" fill="rgb(210,102,26)" fg:x="930" fg:w="1"/><text x="71.9539%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.15%)</title><rect x="71.7810%" y="437" width="0.1542%" height="15" fill="rgb(218,30,30)" fg:x="931" fg:w="2"/><text x="72.0310%" y="447.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.15%)</title><rect x="71.7810%" y="421" width="0.1542%" height="15" fill="rgb(214,67,26)" fg:x="931" fg:w="2"/><text x="72.0310%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="71.7810%" y="405" width="0.1542%" height="15" fill="rgb(251,9,53)" fg:x="931" fg:w="2"/><text x="72.0310%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="71.7810%" y="389" width="0.1542%" height="15" fill="rgb(228,204,25)" fg:x="931" fg:w="2"/><text x="72.0310%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.8581%" y="373" width="0.0771%" height="15" fill="rgb(207,153,8)" fg:x="932" fg:w="1"/><text x="72.1081%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.8581%" y="357" width="0.0771%" height="15" fill="rgb(242,9,16)" fg:x="932" fg:w="1"/><text x="72.1081%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.8581%" y="341" width="0.0771%" height="15" fill="rgb(217,211,10)" fg:x="932" fg:w="1"/><text x="72.1081%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.8581%" y="325" width="0.0771%" height="15" fill="rgb(219,228,52)" fg:x="932" fg:w="1"/><text x="72.1081%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.8581%" y="309" width="0.0771%" height="15" fill="rgb(231,92,29)" fg:x="932" fg:w="1"/><text x="72.1081%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="71.8581%" y="293" width="0.0771%" height="15" fill="rgb(232,8,23)" fg:x="932" fg:w="1"/><text x="72.1081%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.8581%" y="277" width="0.0771%" height="15" fill="rgb(216,211,34)" fg:x="932" fg:w="1"/><text x="72.1081%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.8581%" y="261" width="0.0771%" height="15" fill="rgb(236,151,0)" fg:x="932" fg:w="1"/><text x="72.1081%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.8581%" y="245" width="0.0771%" height="15" fill="rgb(209,168,3)" fg:x="932" fg:w="1"/><text x="72.1081%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.9352%" y="389" width="0.0771%" height="15" fill="rgb(208,129,28)" fg:x="933" fg:w="1"/><text x="72.1852%" y="399.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="71.9352%" y="373" width="0.0771%" height="15" fill="rgb(229,78,22)" fg:x="933" fg:w="1"/><text x="72.1852%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.0123%" y="389" width="0.0771%" height="15" fill="rgb(228,187,13)" fg:x="934" fg:w="1"/><text x="72.2623%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.0123%" y="373" width="0.0771%" height="15" fill="rgb(240,119,24)" fg:x="934" fg:w="1"/><text x="72.2623%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.0894%" y="325" width="0.0771%" height="15" fill="rgb(209,194,42)" fg:x="935" fg:w="1"/><text x="72.3394%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.0894%" y="309" width="0.0771%" height="15" fill="rgb(247,200,46)" fg:x="935" fg:w="1"/><text x="72.3394%" y="319.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (9 samples, 0.69%)</title><rect x="71.6268%" y="549" width="0.6939%" height="15" fill="rgb(218,76,16)" fg:x="929" fg:w="9"/><text x="71.8768%" y="559.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (9 samples, 0.69%)</title><rect x="71.6268%" y="533" width="0.6939%" height="15" fill="rgb(225,21,48)" fg:x="929" fg:w="9"/><text x="71.8768%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (9 samples, 0.69%)</title><rect x="71.6268%" y="517" width="0.6939%" height="15" fill="rgb(239,223,50)" fg:x="929" fg:w="9"/><text x="71.8768%" y="527.50"></text></g><g><title>kernel::model::Entity::load_scope (9 samples, 0.69%)</title><rect x="71.6268%" y="501" width="0.6939%" height="15" fill="rgb(244,45,21)" fg:x="929" fg:w="9"/><text x="71.8768%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (7 samples, 0.54%)</title><rect x="71.7810%" y="485" width="0.5397%" height="15" fill="rgb(232,33,43)" fg:x="931" fg:w="7"/><text x="72.0310%" y="495.50"></text></g><g><title>engine::internal::Entities::prepare_entity (7 samples, 0.54%)</title><rect x="71.7810%" y="469" width="0.5397%" height="15" fill="rgb(209,8,3)" fg:x="931" fg:w="7"/><text x="72.0310%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity (7 samples, 0.54%)</title><rect x="71.7810%" y="453" width="0.5397%" height="15" fill="rgb(214,25,53)" fg:x="931" fg:w="7"/><text x="72.0310%" y="463.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.39%)</title><rect x="71.9352%" y="437" width="0.3855%" height="15" fill="rgb(254,186,54)" fg:x="933" fg:w="5"/><text x="72.1852%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.39%)</title><rect x="71.9352%" y="421" width="0.3855%" height="15" fill="rgb(208,174,49)" fg:x="933" fg:w="5"/><text x="72.1852%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.39%)</title><rect x="71.9352%" y="405" width="0.3855%" height="15" fill="rgb(233,191,51)" fg:x="933" fg:w="5"/><text x="72.1852%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.23%)</title><rect x="72.0894%" y="389" width="0.2313%" height="15" fill="rgb(222,134,10)" fg:x="935" fg:w="3"/><text x="72.3394%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="72.0894%" y="373" width="0.2313%" height="15" fill="rgb(230,226,20)" fg:x="935" fg:w="3"/><text x="72.3394%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.23%)</title><rect x="72.0894%" y="357" width="0.2313%" height="15" fill="rgb(251,111,25)" fg:x="935" fg:w="3"/><text x="72.3394%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="72.0894%" y="341" width="0.2313%" height="15" fill="rgb(224,40,46)" fg:x="935" fg:w="3"/><text x="72.3394%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.15%)</title><rect x="72.1665%" y="325" width="0.1542%" height="15" fill="rgb(236,108,47)" fg:x="936" fg:w="2"/><text x="72.4165%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.15%)</title><rect x="72.1665%" y="309" width="0.1542%" height="15" fill="rgb(234,93,0)" fg:x="936" fg:w="2"/><text x="72.4165%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.2436%" y="293" width="0.0771%" height="15" fill="rgb(224,213,32)" fg:x="937" fg:w="1"/><text x="72.4936%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.2436%" y="277" width="0.0771%" height="15" fill="rgb(251,11,48)" fg:x="937" fg:w="1"/><text x="72.4936%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.2436%" y="261" width="0.0771%" height="15" fill="rgb(236,173,5)" fg:x="937" fg:w="1"/><text x="72.4936%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.15%)</title><rect x="72.3978%" y="453" width="0.1542%" height="15" fill="rgb(230,95,12)" fg:x="939" fg:w="2"/><text x="72.6478%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.4749%" y="437" width="0.0771%" height="15" fill="rgb(232,209,1)" fg:x="940" fg:w="1"/><text x="72.7249%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="72.3978%" y="469" width="0.2313%" height="15" fill="rgb(232,6,1)" fg:x="939" fg:w="3"/><text x="72.6478%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.5520%" y="453" width="0.0771%" height="15" fill="rgb(210,224,50)" fg:x="941" fg:w="1"/><text x="72.8020%" y="463.50"></text></g><g><title>__libc_free (2 samples, 0.15%)</title><rect x="72.6291%" y="469" width="0.1542%" height="15" fill="rgb(228,127,35)" fg:x="942" fg:w="2"/><text x="72.8791%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (6 samples, 0.46%)</title><rect x="72.3978%" y="517" width="0.4626%" height="15" fill="rgb(245,102,45)" fg:x="939" fg:w="6"/><text x="72.6478%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.46%)</title><rect x="72.3978%" y="501" width="0.4626%" height="15" fill="rgb(214,1,49)" fg:x="939" fg:w="6"/><text x="72.6478%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.46%)</title><rect x="72.3978%" y="485" width="0.4626%" height="15" fill="rgb(226,163,40)" fg:x="939" fg:w="6"/><text x="72.6478%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="72.7833%" y="469" width="0.0771%" height="15" fill="rgb(239,212,28)" fg:x="944" fg:w="1"/><text x="73.0333%" y="479.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.08%)</title><rect x="72.8604%" y="469" width="0.0771%" height="15" fill="rgb(220,20,13)" fg:x="945" fg:w="1"/><text x="73.1104%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="72.8604%" y="453" width="0.0771%" height="15" fill="rgb(210,164,35)" fg:x="945" fg:w="1"/><text x="73.1104%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="72.8604%" y="437" width="0.0771%" height="15" fill="rgb(248,109,41)" fg:x="945" fg:w="1"/><text x="73.1104%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.8604%" y="421" width="0.0771%" height="15" fill="rgb(238,23,50)" fg:x="945" fg:w="1"/><text x="73.1104%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.15%)</title><rect x="72.8604%" y="485" width="0.1542%" height="15" fill="rgb(211,48,49)" fg:x="945" fg:w="2"/><text x="73.1104%" y="495.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="72.9375%" y="469" width="0.0771%" height="15" fill="rgb(223,36,21)" fg:x="946" fg:w="1"/><text x="73.1875%" y="479.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="73.0146%" y="485" width="0.0771%" height="15" fill="rgb(207,123,46)" fg:x="947" fg:w="1"/><text x="73.2646%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="73.0146%" y="469" width="0.0771%" height="15" fill="rgb(240,218,32)" fg:x="947" fg:w="1"/><text x="73.2646%" y="479.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="73.0918%" y="341" width="0.0771%" height="15" fill="rgb(252,5,43)" fg:x="948" fg:w="1"/><text x="73.3418%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0918%" y="325" width="0.0771%" height="15" fill="rgb(252,84,19)" fg:x="948" fg:w="1"/><text x="73.3418%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0918%" y="309" width="0.0771%" height="15" fill="rgb(243,152,39)" fg:x="948" fg:w="1"/><text x="73.3418%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.0918%" y="293" width="0.0771%" height="15" fill="rgb(234,160,15)" fg:x="948" fg:w="1"/><text x="73.3418%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.0918%" y="277" width="0.0771%" height="15" fill="rgb(237,34,20)" fg:x="948" fg:w="1"/><text x="73.3418%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.0918%" y="261" width="0.0771%" height="15" fill="rgb(229,97,13)" fg:x="948" fg:w="1"/><text x="73.3418%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0918%" y="245" width="0.0771%" height="15" fill="rgb(234,71,50)" fg:x="948" fg:w="1"/><text x="73.3418%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0918%" y="229" width="0.0771%" height="15" fill="rgb(253,155,4)" fg:x="948" fg:w="1"/><text x="73.3418%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.0918%" y="213" width="0.0771%" height="15" fill="rgb(222,185,37)" fg:x="948" fg:w="1"/><text x="73.3418%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.0918%" y="197" width="0.0771%" height="15" fill="rgb(251,177,13)" fg:x="948" fg:w="1"/><text x="73.3418%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.0918%" y="181" width="0.0771%" height="15" fill="rgb(250,179,40)" fg:x="948" fg:w="1"/><text x="73.3418%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.0918%" y="165" width="0.0771%" height="15" fill="rgb(242,44,2)" fg:x="948" fg:w="1"/><text x="73.3418%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="73.0918%" y="149" width="0.0771%" height="15" fill="rgb(216,177,13)" fg:x="948" fg:w="1"/><text x="73.3418%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="73.0918%" y="133" width="0.0771%" height="15" fill="rgb(216,106,43)" fg:x="948" fg:w="1"/><text x="73.3418%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.15%)</title><rect x="73.0918%" y="405" width="0.1542%" height="15" fill="rgb(216,183,2)" fg:x="948" fg:w="2"/><text x="73.3418%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.15%)</title><rect x="73.0918%" y="389" width="0.1542%" height="15" fill="rgb(249,75,3)" fg:x="948" fg:w="2"/><text x="73.3418%" y="399.50"></text></g><g><title>kernel::model::EntityRef::into_entry (2 samples, 0.15%)</title><rect x="73.0918%" y="373" width="0.1542%" height="15" fill="rgb(219,67,39)" fg:x="948" fg:w="2"/><text x="73.3418%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.15%)</title><rect x="73.0918%" y="357" width="0.1542%" height="15" fill="rgb(253,228,2)" fg:x="948" fg:w="2"/><text x="73.3418%" y="367.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="73.1689%" y="341" width="0.0771%" height="15" fill="rgb(235,138,27)" fg:x="949" fg:w="1"/><text x="73.4189%" y="351.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="73.1689%" y="325" width="0.0771%" height="15" fill="rgb(236,97,51)" fg:x="949" fg:w="1"/><text x="73.4189%" y="335.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="73.1689%" y="309" width="0.0771%" height="15" fill="rgb(240,80,30)" fg:x="949" fg:w="1"/><text x="73.4189%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.1689%" y="293" width="0.0771%" height="15" fill="rgb(230,178,19)" fg:x="949" fg:w="1"/><text x="73.4189%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="73.1689%" y="277" width="0.0771%" height="15" fill="rgb(210,190,27)" fg:x="949" fg:w="1"/><text x="73.4189%" y="287.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="73.1689%" y="261" width="0.0771%" height="15" fill="rgb(222,107,31)" fg:x="949" fg:w="1"/><text x="73.4189%" y="271.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="73.1689%" y="245" width="0.0771%" height="15" fill="rgb(216,127,34)" fg:x="949" fg:w="1"/><text x="73.4189%" y="255.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.1689%" y="229" width="0.0771%" height="15" fill="rgb(234,116,52)" fg:x="949" fg:w="1"/><text x="73.4189%" y="239.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.1689%" y="213" width="0.0771%" height="15" fill="rgb(222,124,15)" fg:x="949" fg:w="1"/><text x="73.4189%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.1689%" y="197" width="0.0771%" height="15" fill="rgb(231,179,28)" fg:x="949" fg:w="1"/><text x="73.4189%" y="207.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="73.1689%" y="181" width="0.0771%" height="15" fill="rgb(226,93,45)" fg:x="949" fg:w="1"/><text x="73.4189%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="73.1689%" y="165" width="0.0771%" height="15" fill="rgb(215,8,51)" fg:x="949" fg:w="1"/><text x="73.4189%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="73.1689%" y="149" width="0.0771%" height="15" fill="rgb(223,106,5)" fg:x="949" fg:w="1"/><text x="73.4189%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="73.1689%" y="133" width="0.0771%" height="15" fill="rgb(250,191,5)" fg:x="949" fg:w="1"/><text x="73.4189%" y="143.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="73.2460%" y="341" width="0.0771%" height="15" fill="rgb(242,132,44)" fg:x="950" fg:w="1"/><text x="73.4960%" y="351.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="73.2460%" y="325" width="0.0771%" height="15" fill="rgb(251,152,29)" fg:x="950" fg:w="1"/><text x="73.4960%" y="335.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="73.2460%" y="309" width="0.0771%" height="15" fill="rgb(218,179,5)" fg:x="950" fg:w="1"/><text x="73.4960%" y="319.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="73.2460%" y="293" width="0.0771%" height="15" fill="rgb(227,67,19)" fg:x="950" fg:w="1"/><text x="73.4960%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.2460%" y="277" width="0.0771%" height="15" fill="rgb(233,119,31)" fg:x="950" fg:w="1"/><text x="73.4960%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.2460%" y="261" width="0.0771%" height="15" fill="rgb(241,120,22)" fg:x="950" fg:w="1"/><text x="73.4960%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.2460%" y="245" width="0.0771%" height="15" fill="rgb(224,102,30)" fg:x="950" fg:w="1"/><text x="73.4960%" y="255.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.31%)</title><rect x="73.0918%" y="421" width="0.3084%" height="15" fill="rgb(210,164,37)" fg:x="948" fg:w="4"/><text x="73.3418%" y="431.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.15%)</title><rect x="73.2460%" y="405" width="0.1542%" height="15" fill="rgb(226,191,16)" fg:x="950" fg:w="2"/><text x="73.4960%" y="415.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (2 samples, 0.15%)</title><rect x="73.2460%" y="389" width="0.1542%" height="15" fill="rgb(214,40,45)" fg:x="950" fg:w="2"/><text x="73.4960%" y="399.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (2 samples, 0.15%)</title><rect x="73.2460%" y="373" width="0.1542%" height="15" fill="rgb(244,29,26)" fg:x="950" fg:w="2"/><text x="73.4960%" y="383.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.15%)</title><rect x="73.2460%" y="357" width="0.1542%" height="15" fill="rgb(216,16,5)" fg:x="950" fg:w="2"/><text x="73.4960%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.3231%" y="341" width="0.0771%" height="15" fill="rgb(249,76,35)" fg:x="951" fg:w="1"/><text x="73.5731%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.3231%" y="325" width="0.0771%" height="15" fill="rgb(207,11,44)" fg:x="951" fg:w="1"/><text x="73.5731%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.23%)</title><rect x="73.4002%" y="389" width="0.2313%" height="15" fill="rgb(228,190,49)" fg:x="952" fg:w="3"/><text x="73.6502%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.23%)</title><rect x="73.4002%" y="373" width="0.2313%" height="15" fill="rgb(214,173,12)" fg:x="952" fg:w="3"/><text x="73.6502%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.15%)</title><rect x="73.4773%" y="357" width="0.1542%" height="15" fill="rgb(218,26,35)" fg:x="953" fg:w="2"/><text x="73.7273%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.5544%" y="341" width="0.0771%" height="15" fill="rgb(220,200,19)" fg:x="954" fg:w="1"/><text x="73.8044%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.5544%" y="325" width="0.0771%" height="15" fill="rgb(239,95,49)" fg:x="954" fg:w="1"/><text x="73.8044%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.5544%" y="309" width="0.0771%" height="15" fill="rgb(235,85,53)" fg:x="954" fg:w="1"/><text x="73.8044%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.5544%" y="293" width="0.0771%" height="15" fill="rgb(233,133,31)" fg:x="954" fg:w="1"/><text x="73.8044%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.5544%" y="277" width="0.0771%" height="15" fill="rgb(218,25,20)" fg:x="954" fg:w="1"/><text x="73.8044%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.5544%" y="261" width="0.0771%" height="15" fill="rgb(252,210,38)" fg:x="954" fg:w="1"/><text x="73.8044%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.5544%" y="245" width="0.0771%" height="15" fill="rgb(242,134,21)" fg:x="954" fg:w="1"/><text x="73.8044%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.5544%" y="229" width="0.0771%" height="15" fill="rgb(213,28,48)" fg:x="954" fg:w="1"/><text x="73.8044%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.5544%" y="213" width="0.0771%" height="15" fill="rgb(250,196,2)" fg:x="954" fg:w="1"/><text x="73.8044%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.5544%" y="197" width="0.0771%" height="15" fill="rgb(227,5,17)" fg:x="954" fg:w="1"/><text x="73.8044%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.5544%" y="181" width="0.0771%" height="15" fill="rgb(221,226,24)" fg:x="954" fg:w="1"/><text x="73.8044%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.5544%" y="165" width="0.0771%" height="15" fill="rgb(211,5,48)" fg:x="954" fg:w="1"/><text x="73.8044%" y="175.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (8 samples, 0.62%)</title><rect x="73.0918%" y="437" width="0.6168%" height="15" fill="rgb(219,150,6)" fg:x="948" fg:w="8"/><text x="73.3418%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.31%)</title><rect x="73.4002%" y="421" width="0.3084%" height="15" fill="rgb(251,46,16)" fg:x="952" fg:w="4"/><text x="73.6502%" y="431.50"></text></g><g><title>kernel::model::Entity::load_scope (4 samples, 0.31%)</title><rect x="73.4002%" y="405" width="0.3084%" height="15" fill="rgb(220,204,40)" fg:x="952" fg:w="4"/><text x="73.6502%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.6315%" y="389" width="0.0771%" height="15" fill="rgb(211,85,2)" fg:x="955" fg:w="1"/><text x="73.8815%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="73.6315%" y="373" width="0.0771%" height="15" fill="rgb(229,17,7)" fg:x="955" fg:w="1"/><text x="73.8815%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="73.7857%" y="165" width="0.0771%" height="15" fill="rgb(239,72,28)" fg:x="957" fg:w="1"/><text x="74.0357%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.7857%" y="149" width="0.0771%" height="15" fill="rgb(230,47,54)" fg:x="957" fg:w="1"/><text x="74.0357%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="73.7857%" y="133" width="0.0771%" height="15" fill="rgb(214,50,8)" fg:x="957" fg:w="1"/><text x="74.0357%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.7857%" y="117" width="0.0771%" height="15" fill="rgb(216,198,43)" fg:x="957" fg:w="1"/><text x="74.0357%" y="127.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.15%)</title><rect x="73.7857%" y="213" width="0.1542%" height="15" fill="rgb(234,20,35)" fg:x="957" fg:w="2"/><text x="74.0357%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="73.7857%" y="197" width="0.1542%" height="15" fill="rgb(254,45,19)" fg:x="957" fg:w="2"/><text x="74.0357%" y="207.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (2 samples, 0.15%)</title><rect x="73.7857%" y="181" width="0.1542%" height="15" fill="rgb(219,14,44)" fg:x="957" fg:w="2"/><text x="74.0357%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8628%" y="165" width="0.0771%" height="15" fill="rgb(217,220,26)" fg:x="958" fg:w="1"/><text x="74.1128%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.8628%" y="149" width="0.0771%" height="15" fill="rgb(213,158,28)" fg:x="958" fg:w="1"/><text x="74.1128%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="73.8628%" y="133" width="0.0771%" height="15" fill="rgb(252,51,52)" fg:x="958" fg:w="1"/><text x="74.1128%" y="143.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8628%" y="117" width="0.0771%" height="15" fill="rgb(246,89,16)" fg:x="958" fg:w="1"/><text x="74.1128%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.8628%" y="101" width="0.0771%" height="15" fill="rgb(216,158,49)" fg:x="958" fg:w="1"/><text x="74.1128%" y="111.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="73.8628%" y="85" width="0.0771%" height="15" fill="rgb(236,107,19)" fg:x="958" fg:w="1"/><text x="74.1128%" y="95.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.23%)</title><rect x="73.7857%" y="277" width="0.2313%" height="15" fill="rgb(228,185,30)" fg:x="957" fg:w="3"/><text x="74.0357%" y="287.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.23%)</title><rect x="73.7857%" y="261" width="0.2313%" height="15" fill="rgb(246,134,8)" fg:x="957" fg:w="3"/><text x="74.0357%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.23%)</title><rect x="73.7857%" y="245" width="0.2313%" height="15" fill="rgb(214,143,50)" fg:x="957" fg:w="3"/><text x="74.0357%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="73.7857%" y="229" width="0.2313%" height="15" fill="rgb(228,75,8)" fg:x="957" fg:w="3"/><text x="74.0357%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.9399%" y="213" width="0.0771%" height="15" fill="rgb(207,175,4)" fg:x="959" fg:w="1"/><text x="74.1899%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.9399%" y="197" width="0.0771%" height="15" fill="rgb(205,108,24)" fg:x="959" fg:w="1"/><text x="74.1899%" y="207.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.1712%" y="117" width="0.0771%" height="15" fill="rgb(244,120,49)" fg:x="962" fg:w="1"/><text x="74.4212%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.1712%" y="101" width="0.0771%" height="15" fill="rgb(223,47,38)" fg:x="962" fg:w="1"/><text x="74.4212%" y="111.50"></text></g><g><title>core::iter::adapters::try_process (8 samples, 0.62%)</title><rect x="73.7086%" y="373" width="0.6168%" height="15" fill="rgb(229,179,11)" fg:x="956" fg:w="8"/><text x="73.9586%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.62%)</title><rect x="73.7086%" y="357" width="0.6168%" height="15" fill="rgb(231,122,1)" fg:x="956" fg:w="8"/><text x="73.9586%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.62%)</title><rect x="73.7086%" y="341" width="0.6168%" height="15" fill="rgb(245,119,9)" fg:x="956" fg:w="8"/><text x="73.9586%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (8 samples, 0.62%)</title><rect x="73.7086%" y="325" width="0.6168%" height="15" fill="rgb(241,163,25)" fg:x="956" fg:w="8"/><text x="73.9586%" y="335.50"></text></g><g><title>engine::internal::Entities::prepare_entity (7 samples, 0.54%)</title><rect x="73.7857%" y="309" width="0.5397%" height="15" fill="rgb(217,214,3)" fg:x="957" fg:w="7"/><text x="74.0357%" y="319.50"></text></g><g><title>kernel::model::deserialize_entity (7 samples, 0.54%)</title><rect x="73.7857%" y="293" width="0.5397%" height="15" fill="rgb(240,86,28)" fg:x="957" fg:w="7"/><text x="74.0357%" y="303.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.31%)</title><rect x="74.0170%" y="277" width="0.3084%" height="15" fill="rgb(215,47,9)" fg:x="960" fg:w="4"/><text x="74.2670%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.31%)</title><rect x="74.0170%" y="261" width="0.3084%" height="15" fill="rgb(252,25,45)" fg:x="960" fg:w="4"/><text x="74.2670%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.31%)</title><rect x="74.0170%" y="245" width="0.3084%" height="15" fill="rgb(251,164,9)" fg:x="960" fg:w="4"/><text x="74.2670%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.31%)</title><rect x="74.0170%" y="229" width="0.3084%" height="15" fill="rgb(233,194,0)" fg:x="960" fg:w="4"/><text x="74.2670%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.31%)</title><rect x="74.0170%" y="213" width="0.3084%" height="15" fill="rgb(249,111,24)" fg:x="960" fg:w="4"/><text x="74.2670%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.23%)</title><rect x="74.0941%" y="197" width="0.2313%" height="15" fill="rgb(250,223,3)" fg:x="961" fg:w="3"/><text x="74.3441%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="74.0941%" y="181" width="0.2313%" height="15" fill="rgb(236,178,37)" fg:x="961" fg:w="3"/><text x="74.3441%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.15%)</title><rect x="74.1712%" y="165" width="0.1542%" height="15" fill="rgb(241,158,50)" fg:x="962" fg:w="2"/><text x="74.4212%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.15%)</title><rect x="74.1712%" y="149" width="0.1542%" height="15" fill="rgb(213,121,41)" fg:x="962" fg:w="2"/><text x="74.4212%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="74.1712%" y="133" width="0.1542%" height="15" fill="rgb(240,92,3)" fg:x="962" fg:w="2"/><text x="74.4212%" y="143.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.2483%" y="117" width="0.0771%" height="15" fill="rgb(205,123,3)" fg:x="963" fg:w="1"/><text x="74.4983%" y="127.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (9 samples, 0.69%)</title><rect x="73.7086%" y="389" width="0.6939%" height="15" fill="rgb(205,97,47)" fg:x="956" fg:w="9"/><text x="73.9586%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="74.3254%" y="373" width="0.0771%" height="15" fill="rgb(247,152,14)" fg:x="964" fg:w="1"/><text x="74.5754%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 1.46%)</title><rect x="73.0918%" y="469" width="1.4649%" height="15" fill="rgb(248,195,53)" fg:x="948" fg:w="19"/><text x="73.3418%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (19 samples, 1.46%)</title><rect x="73.0918%" y="453" width="1.4649%" height="15" fill="rgb(226,201,16)" fg:x="948" fg:w="19"/><text x="73.3418%" y="463.50"></text></g><g><title>plugins_core::tools::get_contained_keys (11 samples, 0.85%)</title><rect x="73.7086%" y="437" width="0.8481%" height="15" fill="rgb(205,98,0)" fg:x="956" fg:w="11"/><text x="73.9586%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::scope (11 samples, 0.85%)</title><rect x="73.7086%" y="421" width="0.8481%" height="15" fill="rgb(214,191,48)" fg:x="956" fg:w="11"/><text x="73.9586%" y="431.50"></text></g><g><title>kernel::model::Entity::load_scope (11 samples, 0.85%)</title><rect x="73.7086%" y="405" width="0.8481%" height="15" fill="rgb(237,112,39)" fg:x="956" fg:w="11"/><text x="73.9586%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="74.4025%" y="389" width="0.1542%" height="15" fill="rgb(247,203,27)" fg:x="965" fg:w="2"/><text x="74.6525%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="74.4025%" y="373" width="0.1542%" height="15" fill="rgb(235,124,28)" fg:x="965" fg:w="2"/><text x="74.6525%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.4796%" y="357" width="0.0771%" height="15" fill="rgb(208,207,46)" fg:x="966" fg:w="1"/><text x="74.7296%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.4796%" y="341" width="0.0771%" height="15" fill="rgb(234,176,4)" fg:x="966" fg:w="1"/><text x="74.7296%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.5567%" y="421" width="0.0771%" height="15" fill="rgb(230,133,28)" fg:x="967" fg:w="1"/><text x="74.8067%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.5567%" y="405" width="0.0771%" height="15" fill="rgb(211,137,40)" fg:x="967" fg:w="1"/><text x="74.8067%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.5567%" y="389" width="0.0771%" height="15" fill="rgb(254,35,13)" fg:x="967" fg:w="1"/><text x="74.8067%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.5567%" y="373" width="0.0771%" height="15" fill="rgb(225,49,51)" fg:x="967" fg:w="1"/><text x="74.8067%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.5567%" y="357" width="0.0771%" height="15" fill="rgb(251,10,15)" fg:x="967" fg:w="1"/><text x="74.8067%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.5567%" y="341" width="0.0771%" height="15" fill="rgb(228,207,15)" fg:x="967" fg:w="1"/><text x="74.8067%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.5567%" y="325" width="0.0771%" height="15" fill="rgb(241,99,19)" fg:x="967" fg:w="1"/><text x="74.8067%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.5567%" y="309" width="0.0771%" height="15" fill="rgb(207,104,49)" fg:x="967" fg:w="1"/><text x="74.8067%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.5567%" y="293" width="0.0771%" height="15" fill="rgb(234,99,18)" fg:x="967" fg:w="1"/><text x="74.8067%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.5567%" y="277" width="0.0771%" height="15" fill="rgb(213,191,49)" fg:x="967" fg:w="1"/><text x="74.8067%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.5567%" y="261" width="0.0771%" height="15" fill="rgb(210,226,19)" fg:x="967" fg:w="1"/><text x="74.8067%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.5567%" y="245" width="0.0771%" height="15" fill="rgb(229,97,18)" fg:x="967" fg:w="1"/><text x="74.8067%" y="255.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="74.6338%" y="405" width="0.0771%" height="15" fill="rgb(211,167,15)" fg:x="968" fg:w="1"/><text x="74.8838%" y="415.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="74.6338%" y="389" width="0.0771%" height="15" fill="rgb(210,169,34)" fg:x="968" fg:w="1"/><text x="74.8838%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.6338%" y="373" width="0.0771%" height="15" fill="rgb(241,121,31)" fg:x="968" fg:w="1"/><text x="74.8838%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.6338%" y="357" width="0.0771%" height="15" fill="rgb(232,40,11)" fg:x="968" fg:w="1"/><text x="74.8838%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.6338%" y="341" width="0.0771%" height="15" fill="rgb(205,86,26)" fg:x="968" fg:w="1"/><text x="74.8838%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.6338%" y="325" width="0.0771%" height="15" fill="rgb(231,126,28)" fg:x="968" fg:w="1"/><text x="74.8838%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.6338%" y="309" width="0.0771%" height="15" fill="rgb(219,221,18)" fg:x="968" fg:w="1"/><text x="74.8838%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.6338%" y="293" width="0.0771%" height="15" fill="rgb(211,40,0)" fg:x="968" fg:w="1"/><text x="74.8838%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.6338%" y="277" width="0.0771%" height="15" fill="rgb(239,85,43)" fg:x="968" fg:w="1"/><text x="74.8838%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.6338%" y="261" width="0.0771%" height="15" fill="rgb(231,55,21)" fg:x="968" fg:w="1"/><text x="74.8838%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.6338%" y="245" width="0.0771%" height="15" fill="rgb(225,184,43)" fg:x="968" fg:w="1"/><text x="74.8838%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.6338%" y="229" width="0.0771%" height="15" fill="rgb(251,158,41)" fg:x="968" fg:w="1"/><text x="74.8838%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.6338%" y="213" width="0.0771%" height="15" fill="rgb(234,159,37)" fg:x="968" fg:w="1"/><text x="74.8838%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.6338%" y="197" width="0.0771%" height="15" fill="rgb(216,204,22)" fg:x="968" fg:w="1"/><text x="74.8838%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.6338%" y="181" width="0.0771%" height="15" fill="rgb(214,17,3)" fg:x="968" fg:w="1"/><text x="74.8838%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.7109%" y="389" width="0.0771%" height="15" fill="rgb(212,111,17)" fg:x="969" fg:w="1"/><text x="74.9609%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.7109%" y="373" width="0.0771%" height="15" fill="rgb(221,157,24)" fg:x="969" fg:w="1"/><text x="74.9609%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.7109%" y="357" width="0.0771%" height="15" fill="rgb(252,16,13)" fg:x="969" fg:w="1"/><text x="74.9609%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.7109%" y="341" width="0.0771%" height="15" fill="rgb(221,62,2)" fg:x="969" fg:w="1"/><text x="74.9609%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.7109%" y="325" width="0.0771%" height="15" fill="rgb(247,87,22)" fg:x="969" fg:w="1"/><text x="74.9609%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.7109%" y="309" width="0.0771%" height="15" fill="rgb(215,73,9)" fg:x="969" fg:w="1"/><text x="74.9609%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.7109%" y="293" width="0.0771%" height="15" fill="rgb(207,175,33)" fg:x="969" fg:w="1"/><text x="74.9609%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.7109%" y="277" width="0.0771%" height="15" fill="rgb(243,129,54)" fg:x="969" fg:w="1"/><text x="74.9609%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.7109%" y="261" width="0.0771%" height="15" fill="rgb(227,119,45)" fg:x="969" fg:w="1"/><text x="74.9609%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.7109%" y="245" width="0.0771%" height="15" fill="rgb(205,109,36)" fg:x="969" fg:w="1"/><text x="74.9609%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.7109%" y="229" width="0.0771%" height="15" fill="rgb(205,6,39)" fg:x="969" fg:w="1"/><text x="74.9609%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.7109%" y="213" width="0.0771%" height="15" fill="rgb(221,32,16)" fg:x="969" fg:w="1"/><text x="74.9609%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.23%)</title><rect x="74.6338%" y="421" width="0.2313%" height="15" fill="rgb(228,144,50)" fg:x="968" fg:w="3"/><text x="74.8838%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.15%)</title><rect x="74.7109%" y="405" width="0.1542%" height="15" fill="rgb(229,201,53)" fg:x="969" fg:w="2"/><text x="74.9609%" y="415.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="74.7880%" y="389" width="0.0771%" height="15" fill="rgb(249,153,27)" fg:x="970" fg:w="1"/><text x="75.0380%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="74.7880%" y="373" width="0.0771%" height="15" fill="rgb(227,106,25)" fg:x="970" fg:w="1"/><text x="75.0380%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="74.7880%" y="357" width="0.0771%" height="15" fill="rgb(230,65,29)" fg:x="970" fg:w="1"/><text x="75.0380%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="74.7880%" y="341" width="0.0771%" height="15" fill="rgb(221,57,46)" fg:x="970" fg:w="1"/><text x="75.0380%" y="351.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="74.7880%" y="325" width="0.0771%" height="15" fill="rgb(229,161,17)" fg:x="970" fg:w="1"/><text x="75.0380%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="74.7880%" y="309" width="0.0771%" height="15" fill="rgb(222,213,11)" fg:x="970" fg:w="1"/><text x="75.0380%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="74.7880%" y="293" width="0.0771%" height="15" fill="rgb(235,35,13)" fg:x="970" fg:w="1"/><text x="75.0380%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="74.7880%" y="277" width="0.0771%" height="15" fill="rgb(233,158,34)" fg:x="970" fg:w="1"/><text x="75.0380%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.7880%" y="261" width="0.0771%" height="15" fill="rgb(215,151,48)" fg:x="970" fg:w="1"/><text x="75.0380%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.7880%" y="245" width="0.0771%" height="15" fill="rgb(229,84,14)" fg:x="970" fg:w="1"/><text x="75.0380%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="74.7880%" y="229" width="0.0771%" height="15" fill="rgb(229,68,14)" fg:x="970" fg:w="1"/><text x="75.0380%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="74.7880%" y="213" width="0.0771%" height="15" fill="rgb(243,106,26)" fg:x="970" fg:w="1"/><text x="75.0380%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="74.7880%" y="197" width="0.0771%" height="15" fill="rgb(206,45,38)" fg:x="970" fg:w="1"/><text x="75.0380%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="74.7880%" y="181" width="0.0771%" height="15" fill="rgb(226,6,15)" fg:x="970" fg:w="1"/><text x="75.0380%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="74.7880%" y="165" width="0.0771%" height="15" fill="rgb(232,22,54)" fg:x="970" fg:w="1"/><text x="75.0380%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="74.7880%" y="149" width="0.0771%" height="15" fill="rgb(229,222,32)" fg:x="970" fg:w="1"/><text x="75.0380%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.7880%" y="133" width="0.0771%" height="15" fill="rgb(228,62,29)" fg:x="970" fg:w="1"/><text x="75.0380%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="74.7880%" y="117" width="0.0771%" height="15" fill="rgb(251,103,34)" fg:x="970" fg:w="1"/><text x="75.0380%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.7880%" y="101" width="0.0771%" height="15" fill="rgb(233,12,30)" fg:x="970" fg:w="1"/><text x="75.0380%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="74.7880%" y="85" width="0.0771%" height="15" fill="rgb(238,52,0)" fg:x="970" fg:w="1"/><text x="75.0380%" y="95.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="74.7880%" y="69" width="0.0771%" height="15" fill="rgb(223,98,5)" fg:x="970" fg:w="1"/><text x="75.0380%" y="79.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="74.7880%" y="53" width="0.0771%" height="15" fill="rgb(228,75,37)" fg:x="970" fg:w="1"/><text x="75.0380%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.7880%" y="37" width="0.0771%" height="15" fill="rgb(205,115,49)" fg:x="970" fg:w="1"/><text x="75.0380%" y="47.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="75.3277%" y="197" width="0.0771%" height="15" fill="rgb(250,154,43)" fg:x="977" fg:w="1"/><text x="75.5777%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="75.3277%" y="181" width="0.0771%" height="15" fill="rgb(226,43,29)" fg:x="977" fg:w="1"/><text x="75.5777%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.31%)</title><rect x="75.1735%" y="245" width="0.3084%" height="15" fill="rgb(249,228,39)" fg:x="975" fg:w="4"/><text x="75.4235%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.31%)</title><rect x="75.1735%" y="229" width="0.3084%" height="15" fill="rgb(216,79,43)" fg:x="975" fg:w="4"/><text x="75.4235%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.23%)</title><rect x="75.2506%" y="213" width="0.2313%" height="15" fill="rgb(228,95,12)" fg:x="976" fg:w="3"/><text x="75.5006%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.4048%" y="197" width="0.0771%" height="15" fill="rgb(249,221,15)" fg:x="978" fg:w="1"/><text x="75.6548%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.23%)</title><rect x="75.5590%" y="181" width="0.2313%" height="15" fill="rgb(233,34,13)" fg:x="980" fg:w="3"/><text x="75.8090%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.15%)</title><rect x="75.6361%" y="165" width="0.1542%" height="15" fill="rgb(214,103,39)" fg:x="981" fg:w="2"/><text x="75.8861%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="75.7132%" y="149" width="0.0771%" height="15" fill="rgb(251,126,39)" fg:x="982" fg:w="1"/><text x="75.9632%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="75.7132%" y="133" width="0.0771%" height="15" fill="rgb(214,216,36)" fg:x="982" fg:w="1"/><text x="75.9632%" y="143.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (9 samples, 0.69%)</title><rect x="75.1735%" y="261" width="0.6939%" height="15" fill="rgb(220,221,8)" fg:x="975" fg:w="9"/><text x="75.4235%" y="271.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (5 samples, 0.39%)</title><rect x="75.4819%" y="245" width="0.3855%" height="15" fill="rgb(240,216,3)" fg:x="979" fg:w="5"/><text x="75.7319%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.39%)</title><rect x="75.4819%" y="229" width="0.3855%" height="15" fill="rgb(232,218,17)" fg:x="979" fg:w="5"/><text x="75.7319%" y="239.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.31%)</title><rect x="75.5590%" y="213" width="0.3084%" height="15" fill="rgb(229,163,45)" fg:x="980" fg:w="4"/><text x="75.8090%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.31%)</title><rect x="75.5590%" y="197" width="0.3084%" height="15" fill="rgb(231,110,42)" fg:x="980" fg:w="4"/><text x="75.8090%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="75.7903%" y="181" width="0.0771%" height="15" fill="rgb(208,170,48)" fg:x="983" fg:w="1"/><text x="76.0403%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.7903%" y="165" width="0.0771%" height="15" fill="rgb(239,116,25)" fg:x="983" fg:w="1"/><text x="76.0403%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.77%)</title><rect x="75.1735%" y="277" width="0.7710%" height="15" fill="rgb(219,200,50)" fg:x="975" fg:w="10"/><text x="75.4235%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.8674%" y="261" width="0.0771%" height="15" fill="rgb(245,200,0)" fg:x="984" fg:w="1"/><text x="76.1174%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (12 samples, 0.93%)</title><rect x="75.1735%" y="309" width="0.9252%" height="15" fill="rgb(245,119,33)" fg:x="975" fg:w="12"/><text x="75.4235%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (12 samples, 0.93%)</title><rect x="75.1735%" y="293" width="0.9252%" height="15" fill="rgb(231,125,12)" fg:x="975" fg:w="12"/><text x="75.4235%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.15%)</title><rect x="75.9445%" y="277" width="0.1542%" height="15" fill="rgb(216,96,41)" fg:x="985" fg:w="2"/><text x="76.1945%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.15%)</title><rect x="75.9445%" y="261" width="0.1542%" height="15" fill="rgb(248,43,45)" fg:x="985" fg:w="2"/><text x="76.1945%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.0987%" y="309" width="0.0771%" height="15" fill="rgb(217,222,7)" fg:x="987" fg:w="1"/><text x="76.3487%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 1.08%)</title><rect x="75.1735%" y="325" width="1.0794%" height="15" fill="rgb(233,28,6)" fg:x="975" fg:w="14"/><text x="75.4235%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1758%" y="309" width="0.0771%" height="15" fill="rgb(231,218,15)" fg:x="988" fg:w="1"/><text x="76.4258%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1758%" y="293" width="0.0771%" height="15" fill="rgb(226,171,48)" fg:x="988" fg:w="1"/><text x="76.4258%" y="303.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (17 samples, 1.31%)</title><rect x="75.0193%" y="357" width="1.3107%" height="15" fill="rgb(235,201,9)" fg:x="973" fg:w="17"/><text x="75.2693%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (15 samples, 1.16%)</title><rect x="75.1735%" y="341" width="1.1565%" height="15" fill="rgb(217,80,15)" fg:x="975" fg:w="15"/><text x="75.4235%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="76.2529%" y="325" width="0.0771%" height="15" fill="rgb(219,152,8)" fg:x="989" fg:w="1"/><text x="76.5029%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.2529%" y="309" width="0.0771%" height="15" fill="rgb(243,107,38)" fg:x="989" fg:w="1"/><text x="76.5029%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="76.3300%" y="341" width="0.0771%" height="15" fill="rgb(231,17,5)" fg:x="990" fg:w="1"/><text x="76.5800%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="76.3300%" y="325" width="0.0771%" height="15" fill="rgb(209,25,54)" fg:x="990" fg:w="1"/><text x="76.5800%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 1.62%)</title><rect x="74.8651%" y="373" width="1.6191%" height="15" fill="rgb(219,0,2)" fg:x="971" fg:w="21"/><text x="75.1151%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.15%)</title><rect x="76.3300%" y="357" width="0.1542%" height="15" fill="rgb(246,9,5)" fg:x="990" fg:w="2"/><text x="76.5800%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.4071%" y="341" width="0.0771%" height="15" fill="rgb(226,159,4)" fg:x="991" fg:w="1"/><text x="76.6571%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (25 samples, 1.93%)</title><rect x="74.8651%" y="405" width="1.9275%" height="15" fill="rgb(219,175,34)" fg:x="971" fg:w="25"/><text x="75.1151%" y="415.50">&lt;..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (25 samples, 1.93%)</title><rect x="74.8651%" y="389" width="1.9275%" height="15" fill="rgb(236,10,46)" fg:x="971" fg:w="25"/><text x="75.1151%" y="399.50">&lt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.31%)</title><rect x="76.4842%" y="373" width="0.3084%" height="15" fill="rgb(240,211,16)" fg:x="992" fg:w="4"/><text x="76.7342%" y="383.50"></text></g><g><title>__libc_malloc (4 samples, 0.31%)</title><rect x="76.4842%" y="357" width="0.3084%" height="15" fill="rgb(205,3,43)" fg:x="992" fg:w="4"/><text x="76.7342%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.7926%" y="357" width="0.0771%" height="15" fill="rgb(245,7,22)" fg:x="996" fg:w="1"/><text x="77.0426%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.15%)</title><rect x="76.8697%" y="357" width="0.1542%" height="15" fill="rgb(239,132,32)" fg:x="997" fg:w="2"/><text x="77.1197%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.9468%" y="341" width="0.0771%" height="15" fill="rgb(228,202,34)" fg:x="998" fg:w="1"/><text x="77.1968%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.1781%" y="293" width="0.0771%" height="15" fill="rgb(254,200,22)" fg:x="1001" fg:w="1"/><text x="77.4281%" y="303.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1781%" y="277" width="0.0771%" height="15" fill="rgb(219,10,39)" fg:x="1001" fg:w="1"/><text x="77.4281%" y="287.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (4 samples, 0.31%)</title><rect x="77.0239%" y="357" width="0.3084%" height="15" fill="rgb(226,210,39)" fg:x="999" fg:w="4"/><text x="77.2739%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.31%)</title><rect x="77.0239%" y="341" width="0.3084%" height="15" fill="rgb(208,219,16)" fg:x="999" fg:w="4"/><text x="77.2739%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.31%)</title><rect x="77.0239%" y="325" width="0.3084%" height="15" fill="rgb(216,158,51)" fg:x="999" fg:w="4"/><text x="77.2739%" y="335.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (3 samples, 0.23%)</title><rect x="77.1010%" y="309" width="0.2313%" height="15" fill="rgb(233,14,44)" fg:x="1000" fg:w="3"/><text x="77.3510%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.2552%" y="293" width="0.0771%" height="15" fill="rgb(237,97,39)" fg:x="1002" fg:w="1"/><text x="77.5052%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.3323%" y="341" width="0.0771%" height="15" fill="rgb(218,198,43)" fg:x="1003" fg:w="1"/><text x="77.5823%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.4094%" y="341" width="0.0771%" height="15" fill="rgb(231,104,20)" fg:x="1004" fg:w="1"/><text x="77.6594%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.4094%" y="325" width="0.0771%" height="15" fill="rgb(254,36,13)" fg:x="1004" fg:w="1"/><text x="77.6594%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.4094%" y="309" width="0.0771%" height="15" fill="rgb(248,14,50)" fg:x="1004" fg:w="1"/><text x="77.6594%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.5636%" y="261" width="0.0771%" height="15" fill="rgb(217,107,29)" fg:x="1006" fg:w="1"/><text x="77.8136%" y="271.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.23%)</title><rect x="77.4865%" y="309" width="0.2313%" height="15" fill="rgb(251,169,33)" fg:x="1005" fg:w="3"/><text x="77.7365%" y="319.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.23%)</title><rect x="77.4865%" y="293" width="0.2313%" height="15" fill="rgb(217,108,32)" fg:x="1005" fg:w="3"/><text x="77.7365%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.15%)</title><rect x="77.5636%" y="277" width="0.1542%" height="15" fill="rgb(219,66,42)" fg:x="1006" fg:w="2"/><text x="77.8136%" y="287.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.6407%" y="261" width="0.0771%" height="15" fill="rgb(206,180,7)" fg:x="1007" fg:w="1"/><text x="77.8907%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.39%)</title><rect x="77.4865%" y="325" width="0.3855%" height="15" fill="rgb(208,226,31)" fg:x="1005" fg:w="5"/><text x="77.7365%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.15%)</title><rect x="77.7178%" y="309" width="0.1542%" height="15" fill="rgb(218,26,49)" fg:x="1008" fg:w="2"/><text x="77.9678%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.15%)</title><rect x="77.7178%" y="293" width="0.1542%" height="15" fill="rgb(233,197,48)" fg:x="1008" fg:w="2"/><text x="77.9678%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.15%)</title><rect x="77.7178%" y="277" width="0.1542%" height="15" fill="rgb(252,181,51)" fg:x="1008" fg:w="2"/><text x="77.9678%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.15%)</title><rect x="77.7178%" y="261" width="0.1542%" height="15" fill="rgb(253,90,19)" fg:x="1008" fg:w="2"/><text x="77.9678%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.15%)</title><rect x="77.7178%" y="245" width="0.1542%" height="15" fill="rgb(215,171,30)" fg:x="1008" fg:w="2"/><text x="77.9678%" y="255.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (40 samples, 3.08%)</title><rect x="74.8651%" y="421" width="3.0840%" height="15" fill="rgb(214,222,9)" fg:x="971" fg:w="40"/><text x="75.1151%" y="431.50">&lt;rp..</text></g><g><title>kernel::model::EntityPtr::to_json_value (15 samples, 1.16%)</title><rect x="76.7926%" y="405" width="1.1565%" height="15" fill="rgb(223,3,22)" fg:x="996" fg:w="15"/><text x="77.0426%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (15 samples, 1.16%)</title><rect x="76.7926%" y="389" width="1.1565%" height="15" fill="rgb(225,196,46)" fg:x="996" fg:w="15"/><text x="77.0426%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (15 samples, 1.16%)</title><rect x="76.7926%" y="373" width="1.1565%" height="15" fill="rgb(209,110,37)" fg:x="996" fg:w="15"/><text x="77.0426%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.62%)</title><rect x="77.3323%" y="357" width="0.6168%" height="15" fill="rgb(249,89,12)" fg:x="1003" fg:w="8"/><text x="77.5823%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (6 samples, 0.46%)</title><rect x="77.4865%" y="341" width="0.4626%" height="15" fill="rgb(226,27,33)" fg:x="1005" fg:w="6"/><text x="77.7365%" y="351.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="77.8720%" y="325" width="0.0771%" height="15" fill="rgb(213,82,22)" fg:x="1010" fg:w="1"/><text x="78.1220%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.8720%" y="309" width="0.0771%" height="15" fill="rgb(248,140,0)" fg:x="1010" fg:w="1"/><text x="78.1220%" y="319.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (875 samples, 67.46%)</title><rect x="10.5628%" y="565" width="67.4634%" height="15" fill="rgb(228,106,3)" fg:x="137" fg:w="875"/><text x="10.8128%" y="575.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (74 samples, 5.71%)</title><rect x="72.3207%" y="549" width="5.7055%" height="15" fill="rgb(209,23,37)" fg:x="938" fg:w="74"/><text x="72.5707%" y="559.50">kernel:..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (73 samples, 5.63%)</title><rect x="72.3978%" y="533" width="5.6284%" height="15" fill="rgb(241,93,50)" fg:x="939" fg:w="73"/><text x="72.6478%" y="543.50">&lt;plugin..</text></g><g><title>plugins_rpc::querying::have_surroundings (67 samples, 5.17%)</title><rect x="72.8604%" y="517" width="5.1658%" height="15" fill="rgb(253,46,43)" fg:x="945" fg:w="67"/><text x="73.1104%" y="527.50">plugin..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (67 samples, 5.17%)</title><rect x="72.8604%" y="501" width="5.1658%" height="15" fill="rgb(226,206,43)" fg:x="945" fg:w="67"/><text x="73.1104%" y="511.50">&lt;plugi..</text></g><g><title>core::iter::adapters::try_process (64 samples, 4.93%)</title><rect x="73.0918%" y="485" width="4.9345%" height="15" fill="rgb(217,54,7)" fg:x="948" fg:w="64"/><text x="73.3418%" y="495.50">core::..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (45 samples, 3.47%)</title><rect x="74.5567%" y="469" width="3.4695%" height="15" fill="rgb(223,5,52)" fg:x="967" fg:w="45"/><text x="74.8067%" y="479.50">all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (45 samples, 3.47%)</title><rect x="74.5567%" y="453" width="3.4695%" height="15" fill="rgb(206,52,46)" fg:x="967" fg:w="45"/><text x="74.8067%" y="463.50">&lt;co..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (45 samples, 3.47%)</title><rect x="74.5567%" y="437" width="3.4695%" height="15" fill="rgb(253,136,11)" fg:x="967" fg:w="45"/><text x="74.8067%" y="447.50">plu..</text></g><g><title>rpc_proto::&lt;impl core::convert::From&lt;&amp;rpc_proto::EntityKey&gt; for kernel::model::EntityKey&gt;::from (1 samples, 0.08%)</title><rect x="77.9491%" y="421" width="0.0771%" height="15" fill="rgb(208,106,33)" fg:x="1011" fg:w="1"/><text x="78.1991%" y="431.50"></text></g><g><title>kernel::model::EntityKey::new (1 samples, 0.08%)</title><rect x="77.9491%" y="405" width="0.0771%" height="15" fill="rgb(206,54,4)" fg:x="1011" fg:w="1"/><text x="78.1991%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.9491%" y="389" width="0.0771%" height="15" fill="rgb(213,3,15)" fg:x="1011" fg:w="1"/><text x="78.1991%" y="399.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="78.0262%" y="517" width="0.0771%" height="15" fill="rgb(252,211,39)" fg:x="1012" fg:w="1"/><text x="78.2762%" y="527.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.15%)</title><rect x="78.0262%" y="533" width="0.1542%" height="15" fill="rgb(223,6,36)" fg:x="1012" fg:w="2"/><text x="78.2762%" y="543.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="78.1033%" y="517" width="0.0771%" height="15" fill="rgb(252,169,45)" fg:x="1013" fg:w="1"/><text x="78.3533%" y="527.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="78.1033%" y="501" width="0.0771%" height="15" fill="rgb(212,48,26)" fg:x="1013" fg:w="1"/><text x="78.3533%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.1033%" y="485" width="0.0771%" height="15" fill="rgb(251,102,48)" fg:x="1013" fg:w="1"/><text x="78.3533%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.1033%" y="469" width="0.0771%" height="15" fill="rgb(243,208,16)" fg:x="1013" fg:w="1"/><text x="78.3533%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.1033%" y="453" width="0.0771%" height="15" fill="rgb(219,96,24)" fg:x="1013" fg:w="1"/><text x="78.3533%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.1033%" y="437" width="0.0771%" height="15" fill="rgb(219,33,29)" fg:x="1013" fg:w="1"/><text x="78.3533%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.1033%" y="421" width="0.0771%" height="15" fill="rgb(223,176,5)" fg:x="1013" fg:w="1"/><text x="78.3533%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.1033%" y="405" width="0.0771%" height="15" fill="rgb(228,140,14)" fg:x="1013" fg:w="1"/><text x="78.3533%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.1033%" y="389" width="0.0771%" height="15" fill="rgb(217,179,31)" fg:x="1013" fg:w="1"/><text x="78.3533%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.1033%" y="373" width="0.0771%" height="15" fill="rgb(230,9,30)" fg:x="1013" fg:w="1"/><text x="78.3533%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.1033%" y="357" width="0.0771%" height="15" fill="rgb(230,136,20)" fg:x="1013" fg:w="1"/><text x="78.3533%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.1033%" y="341" width="0.0771%" height="15" fill="rgb(215,210,22)" fg:x="1013" fg:w="1"/><text x="78.3533%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.1033%" y="325" width="0.0771%" height="15" fill="rgb(218,43,5)" fg:x="1013" fg:w="1"/><text x="78.3533%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.1033%" y="309" width="0.0771%" height="15" fill="rgb(216,11,5)" fg:x="1013" fg:w="1"/><text x="78.3533%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.1033%" y="293" width="0.0771%" height="15" fill="rgb(209,82,29)" fg:x="1013" fg:w="1"/><text x="78.3533%" y="303.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (878 samples, 67.69%)</title><rect x="10.5628%" y="581" width="67.6947%" height="15" fill="rgb(244,115,12)" fg:x="137" fg:w="878"/><text x="10.8128%" y="591.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (3 samples, 0.23%)</title><rect x="78.0262%" y="565" width="0.2313%" height="15" fill="rgb(222,82,18)" fg:x="1012" fg:w="3"/><text x="78.2762%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.23%)</title><rect x="78.0262%" y="549" width="0.2313%" height="15" fill="rgb(249,227,8)" fg:x="1012" fg:w="3"/><text x="78.2762%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="78.1804%" y="533" width="0.0771%" height="15" fill="rgb(253,141,45)" fg:x="1014" fg:w="1"/><text x="78.4304%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="78.1804%" y="517" width="0.0771%" height="15" fill="rgb(234,184,4)" fg:x="1014" fg:w="1"/><text x="78.4304%" y="527.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="78.1804%" y="501" width="0.0771%" height="15" fill="rgb(218,194,23)" fg:x="1014" fg:w="1"/><text x="78.4304%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="78.1804%" y="485" width="0.0771%" height="15" fill="rgb(235,66,41)" fg:x="1014" fg:w="1"/><text x="78.4304%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="78.1804%" y="469" width="0.0771%" height="15" fill="rgb(245,217,1)" fg:x="1014" fg:w="1"/><text x="78.4304%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="78.1804%" y="453" width="0.0771%" height="15" fill="rgb(229,91,1)" fg:x="1014" fg:w="1"/><text x="78.4304%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="78.1804%" y="437" width="0.0771%" height="15" fill="rgb(207,101,30)" fg:x="1014" fg:w="1"/><text x="78.4304%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="78.1804%" y="421" width="0.0771%" height="15" fill="rgb(223,82,49)" fg:x="1014" fg:w="1"/><text x="78.4304%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="78.1804%" y="405" width="0.0771%" height="15" fill="rgb(218,167,17)" fg:x="1014" fg:w="1"/><text x="78.4304%" y="415.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="78.1804%" y="389" width="0.0771%" height="15" fill="rgb(208,103,14)" fg:x="1014" fg:w="1"/><text x="78.4304%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="78.1804%" y="373" width="0.0771%" height="15" fill="rgb(238,20,8)" fg:x="1014" fg:w="1"/><text x="78.4304%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="78.1804%" y="357" width="0.0771%" height="15" fill="rgb(218,80,54)" fg:x="1014" fg:w="1"/><text x="78.4304%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,016 samples, 78.33%)</title><rect x="0.0000%" y="725" width="78.3346%" height="15" fill="rgb(240,144,17)" fg:x="0" fg:w="1016"/><text x="0.2500%" y="735.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (1,016 samples, 78.33%)</title><rect x="0.0000%" y="709" width="78.3346%" height="15" fill="rgb(245,27,50)" fg:x="0" fg:w="1016"/><text x="0.2500%" y="719.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (1,016 samples, 78.33%)</title><rect x="0.0000%" y="693" width="78.3346%" height="15" fill="rgb(251,51,7)" fg:x="0" fg:w="1016"/><text x="0.2500%" y="703.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (882 samples, 68.00%)</title><rect x="10.3315%" y="677" width="68.0031%" height="15" fill="rgb(245,217,29)" fg:x="134" fg:w="882"/><text x="10.5815%" y="687.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (882 samples, 68.00%)</title><rect x="10.3315%" y="661" width="68.0031%" height="15" fill="rgb(221,176,29)" fg:x="134" fg:w="882"/><text x="10.5815%" y="671.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (881 samples, 67.93%)</title><rect x="10.4086%" y="645" width="67.9260%" height="15" fill="rgb(212,180,24)" fg:x="135" fg:w="881"/><text x="10.6586%" y="655.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>core::iter::adapters::try_process (881 samples, 67.93%)</title><rect x="10.4086%" y="629" width="67.9260%" height="15" fill="rgb(254,24,2)" fg:x="135" fg:w="881"/><text x="10.6586%" y="639.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (881 samples, 67.93%)</title><rect x="10.4086%" y="613" width="67.9260%" height="15" fill="rgb(230,100,2)" fg:x="135" fg:w="881"/><text x="10.6586%" y="623.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (879 samples, 67.77%)</title><rect x="10.5628%" y="597" width="67.7718%" height="15" fill="rgb(219,142,25)" fg:x="137" fg:w="879"/><text x="10.8128%" y="607.50">&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>&lt;plugins_core::looking::parser::LookActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="78.2575%" y="581" width="0.0771%" height="15" fill="rgb(240,73,43)" fg:x="1015" fg:w="1"/><text x="78.5075%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="78.2575%" y="565" width="0.0771%" height="15" fill="rgb(214,114,15)" fg:x="1015" fg:w="1"/><text x="78.5075%" y="575.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="78.2575%" y="549" width="0.0771%" height="15" fill="rgb(207,130,4)" fg:x="1015" fg:w="1"/><text x="78.5075%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.15%)</title><rect x="78.3346%" y="677" width="0.1542%" height="15" fill="rgb(221,25,40)" fg:x="1016" fg:w="2"/><text x="78.5846%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (2 samples, 0.15%)</title><rect x="78.3346%" y="661" width="0.1542%" height="15" fill="rgb(241,184,7)" fg:x="1016" fg:w="2"/><text x="78.5846%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.15%)</title><rect x="78.3346%" y="645" width="0.1542%" height="15" fill="rgb(235,159,4)" fg:x="1016" fg:w="2"/><text x="78.5846%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (2 samples, 0.15%)</title><rect x="78.3346%" y="629" width="0.1542%" height="15" fill="rgb(214,87,48)" fg:x="1016" fg:w="2"/><text x="78.5846%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.15%)</title><rect x="78.3346%" y="613" width="0.1542%" height="15" fill="rgb(246,198,24)" fg:x="1016" fg:w="2"/><text x="78.5846%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.4117%" y="597" width="0.0771%" height="15" fill="rgb(209,66,40)" fg:x="1017" fg:w="1"/><text x="78.6617%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.4117%" y="581" width="0.0771%" height="15" fill="rgb(233,147,39)" fg:x="1017" fg:w="1"/><text x="78.6617%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.4117%" y="565" width="0.0771%" height="15" fill="rgb(231,145,52)" fg:x="1017" fg:w="1"/><text x="78.6617%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.4117%" y="549" width="0.0771%" height="15" fill="rgb(206,20,26)" fg:x="1017" fg:w="1"/><text x="78.6617%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="78.4888%" y="613" width="0.0771%" height="15" fill="rgb(238,220,4)" fg:x="1018" fg:w="1"/><text x="78.7388%" y="623.50"></text></g><g><title>kernel::model::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="78.4888%" y="597" width="0.0771%" height="15" fill="rgb(252,195,42)" fg:x="1018" fg:w="1"/><text x="78.7388%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.4888%" y="581" width="0.0771%" height="15" fill="rgb(209,10,6)" fg:x="1018" fg:w="1"/><text x="78.7388%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.4888%" y="565" width="0.0771%" height="15" fill="rgb(229,3,52)" fg:x="1018" fg:w="1"/><text x="78.7388%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.4888%" y="549" width="0.0771%" height="15" fill="rgb(253,49,37)" fg:x="1018" fg:w="1"/><text x="78.7388%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.4888%" y="533" width="0.0771%" height="15" fill="rgb(240,103,49)" fg:x="1018" fg:w="1"/><text x="78.7388%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.4888%" y="517" width="0.0771%" height="15" fill="rgb(250,182,30)" fg:x="1018" fg:w="1"/><text x="78.7388%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.4888%" y="501" width="0.0771%" height="15" fill="rgb(248,8,30)" fg:x="1018" fg:w="1"/><text x="78.7388%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.4888%" y="485" width="0.0771%" height="15" fill="rgb(237,120,30)" fg:x="1018" fg:w="1"/><text x="78.7388%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.4888%" y="469" width="0.0771%" height="15" fill="rgb(221,146,34)" fg:x="1018" fg:w="1"/><text x="78.7388%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="78.5659%" y="597" width="0.0771%" height="15" fill="rgb(242,55,13)" fg:x="1019" fg:w="1"/><text x="78.8159%" y="607.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="78.5659%" y="581" width="0.0771%" height="15" fill="rgb(242,112,31)" fg:x="1019" fg:w="1"/><text x="78.8159%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.5659%" y="565" width="0.0771%" height="15" fill="rgb(249,192,27)" fg:x="1019" fg:w="1"/><text x="78.8159%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.5659%" y="549" width="0.0771%" height="15" fill="rgb(208,204,44)" fg:x="1019" fg:w="1"/><text x="78.8159%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.5659%" y="533" width="0.0771%" height="15" fill="rgb(208,93,54)" fg:x="1019" fg:w="1"/><text x="78.8159%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.5659%" y="517" width="0.0771%" height="15" fill="rgb(242,1,31)" fg:x="1019" fg:w="1"/><text x="78.8159%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.5659%" y="501" width="0.0771%" height="15" fill="rgb(241,83,25)" fg:x="1019" fg:w="1"/><text x="78.8159%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.5659%" y="485" width="0.0771%" height="15" fill="rgb(205,169,50)" fg:x="1019" fg:w="1"/><text x="78.8159%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.5659%" y="469" width="0.0771%" height="15" fill="rgb(239,186,37)" fg:x="1019" fg:w="1"/><text x="78.8159%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.5659%" y="453" width="0.0771%" height="15" fill="rgb(205,221,10)" fg:x="1019" fg:w="1"/><text x="78.8159%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.5659%" y="437" width="0.0771%" height="15" fill="rgb(218,196,15)" fg:x="1019" fg:w="1"/><text x="78.8159%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.5659%" y="421" width="0.0771%" height="15" fill="rgb(218,196,35)" fg:x="1019" fg:w="1"/><text x="78.8159%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.5659%" y="405" width="0.0771%" height="15" fill="rgb(233,63,24)" fg:x="1019" fg:w="1"/><text x="78.8159%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.5659%" y="389" width="0.0771%" height="15" fill="rgb(225,8,4)" fg:x="1019" fg:w="1"/><text x="78.8159%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.23%)</title><rect x="78.4888%" y="645" width="0.2313%" height="15" fill="rgb(234,105,35)" fg:x="1018" fg:w="3"/><text x="78.7388%" y="655.50"></text></g><g><title>engine::internal::Entities::prepare_entity (3 samples, 0.23%)</title><rect x="78.4888%" y="629" width="0.2313%" height="15" fill="rgb(236,21,32)" fg:x="1018" fg:w="3"/><text x="78.7388%" y="639.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.15%)</title><rect x="78.5659%" y="613" width="0.1542%" height="15" fill="rgb(228,109,6)" fg:x="1019" fg:w="2"/><text x="78.8159%" y="623.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="78.6430%" y="597" width="0.0771%" height="15" fill="rgb(229,215,31)" fg:x="1020" fg:w="1"/><text x="78.8930%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.6430%" y="581" width="0.0771%" height="15" fill="rgb(221,52,54)" fg:x="1020" fg:w="1"/><text x="78.8930%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.6430%" y="565" width="0.0771%" height="15" fill="rgb(252,129,43)" fg:x="1020" fg:w="1"/><text x="78.8930%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.6430%" y="549" width="0.0771%" height="15" fill="rgb(248,183,27)" fg:x="1020" fg:w="1"/><text x="78.8930%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.6430%" y="533" width="0.0771%" height="15" fill="rgb(250,0,22)" fg:x="1020" fg:w="1"/><text x="78.8930%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.6430%" y="517" width="0.0771%" height="15" fill="rgb(213,166,10)" fg:x="1020" fg:w="1"/><text x="78.8930%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="78.6430%" y="501" width="0.0771%" height="15" fill="rgb(207,163,36)" fg:x="1020" fg:w="1"/><text x="78.8930%" y="511.50"></text></g><g><title>dlerror (2 samples, 0.15%)</title><rect x="78.7201%" y="581" width="0.1542%" height="15" fill="rgb(208,122,22)" fg:x="1021" fg:w="2"/><text x="78.9701%" y="591.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="78.7972%" y="565" width="0.0771%" height="15" fill="rgb(207,104,49)" fg:x="1022" fg:w="1"/><text x="79.0472%" y="575.50"></text></g><g><title>_IO_default_xsputn (1 samples, 0.08%)</title><rect x="78.7972%" y="549" width="0.0771%" height="15" fill="rgb(248,211,50)" fg:x="1022" fg:w="1"/><text x="79.0472%" y="559.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (9 samples, 0.69%)</title><rect x="78.4888%" y="677" width="0.6939%" height="15" fill="rgb(217,13,45)" fg:x="1018" fg:w="9"/><text x="78.7388%" y="687.50"></text></g><g><title>engine::session::Session::new (9 samples, 0.69%)</title><rect x="78.4888%" y="661" width="0.6939%" height="15" fill="rgb(211,216,49)" fg:x="1018" fg:w="9"/><text x="78.7388%" y="671.50"></text></g><g><title>engine::session::Session::initialize (6 samples, 0.46%)</title><rect x="78.7201%" y="645" width="0.4626%" height="15" fill="rgb(221,58,53)" fg:x="1021" fg:w="6"/><text x="78.9701%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (6 samples, 0.46%)</title><rect x="78.7201%" y="629" width="0.4626%" height="15" fill="rgb(220,112,41)" fg:x="1021" fg:w="6"/><text x="78.9701%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.46%)</title><rect x="78.7201%" y="613" width="0.4626%" height="15" fill="rgb(236,38,28)" fg:x="1021" fg:w="6"/><text x="78.9701%" y="623.50"></text></g><g><title>libloading::os::unix::Library::open (6 samples, 0.46%)</title><rect x="78.7201%" y="597" width="0.4626%" height="15" fill="rgb(227,195,22)" fg:x="1021" fg:w="6"/><text x="78.9701%" y="607.50"></text></g><g><title>dlopen (4 samples, 0.31%)</title><rect x="78.8743%" y="581" width="0.3084%" height="15" fill="rgb(214,55,33)" fg:x="1023" fg:w="4"/><text x="79.1243%" y="591.50"></text></g><g><title>_dl_catch_error (4 samples, 0.31%)</title><rect x="78.8743%" y="565" width="0.3084%" height="15" fill="rgb(248,80,13)" fg:x="1023" fg:w="4"/><text x="79.1243%" y="575.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.31%)</title><rect x="78.8743%" y="549" width="0.3084%" height="15" fill="rgb(238,52,6)" fg:x="1023" fg:w="4"/><text x="79.1243%" y="559.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.31%)</title><rect x="78.8743%" y="533" width="0.3084%" height="15" fill="rgb(224,198,47)" fg:x="1023" fg:w="4"/><text x="79.1243%" y="543.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.31%)</title><rect x="78.8743%" y="517" width="0.3084%" height="15" fill="rgb(233,171,20)" fg:x="1023" fg:w="4"/><text x="79.1243%" y="527.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.1827%" y="661" width="0.0771%" height="15" fill="rgb(241,30,25)" fg:x="1027" fg:w="1"/><text x="79.4327%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.1827%" y="645" width="0.0771%" height="15" fill="rgb(207,171,38)" fg:x="1027" fg:w="1"/><text x="79.4327%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.1827%" y="629" width="0.0771%" height="15" fill="rgb(234,70,1)" fg:x="1027" fg:w="1"/><text x="79.4327%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.1827%" y="613" width="0.0771%" height="15" fill="rgb(232,178,18)" fg:x="1027" fg:w="1"/><text x="79.4327%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.1827%" y="597" width="0.0771%" height="15" fill="rgb(241,78,40)" fg:x="1027" fg:w="1"/><text x="79.4327%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.1827%" y="581" width="0.0771%" height="15" fill="rgb(222,35,25)" fg:x="1027" fg:w="1"/><text x="79.4327%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.1827%" y="565" width="0.0771%" height="15" fill="rgb(207,92,16)" fg:x="1027" fg:w="1"/><text x="79.4327%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.1827%" y="549" width="0.0771%" height="15" fill="rgb(216,59,51)" fg:x="1027" fg:w="1"/><text x="79.4327%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.1827%" y="533" width="0.0771%" height="15" fill="rgb(213,80,28)" fg:x="1027" fg:w="1"/><text x="79.4327%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="79.2598%" y="597" width="0.0771%" height="15" fill="rgb(220,93,7)" fg:x="1028" fg:w="1"/><text x="79.5098%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.2598%" y="581" width="0.0771%" height="15" fill="rgb(225,24,44)" fg:x="1028" fg:w="1"/><text x="79.5098%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.2598%" y="565" width="0.0771%" height="15" fill="rgb(243,74,40)" fg:x="1028" fg:w="1"/><text x="79.5098%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.2598%" y="549" width="0.0771%" height="15" fill="rgb(228,39,7)" fg:x="1028" fg:w="1"/><text x="79.5098%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.2598%" y="533" width="0.0771%" height="15" fill="rgb(227,79,8)" fg:x="1028" fg:w="1"/><text x="79.5098%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.2598%" y="517" width="0.0771%" height="15" fill="rgb(236,58,11)" fg:x="1028" fg:w="1"/><text x="79.5098%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.2598%" y="501" width="0.0771%" height="15" fill="rgb(249,63,35)" fg:x="1028" fg:w="1"/><text x="79.5098%" y="511.50"></text></g><g><title>engine::session::Session::flush (2 samples, 0.15%)</title><rect x="79.2598%" y="661" width="0.1542%" height="15" fill="rgb(252,114,16)" fg:x="1028" fg:w="2"/><text x="79.5098%" y="671.50"></text></g><g><title>engine::session::Session::save_entity_changes (2 samples, 0.15%)</title><rect x="79.2598%" y="645" width="0.1542%" height="15" fill="rgb(254,151,24)" fg:x="1028" fg:w="2"/><text x="79.5098%" y="655.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (2 samples, 0.15%)</title><rect x="79.2598%" y="629" width="0.1542%" height="15" fill="rgb(253,54,39)" fg:x="1028" fg:w="2"/><text x="79.5098%" y="639.50"></text></g><g><title>engine::session::Session::check_for_changes (2 samples, 0.15%)</title><rect x="79.2598%" y="613" width="0.1542%" height="15" fill="rgb(243,25,45)" fg:x="1028" fg:w="2"/><text x="79.5098%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.3369%" y="597" width="0.0771%" height="15" fill="rgb(234,134,9)" fg:x="1029" fg:w="1"/><text x="79.5869%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="79.3369%" y="581" width="0.0771%" height="15" fill="rgb(227,166,31)" fg:x="1029" fg:w="1"/><text x="79.5869%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.3369%" y="565" width="0.0771%" height="15" fill="rgb(245,143,41)" fg:x="1029" fg:w="1"/><text x="79.5869%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.3369%" y="549" width="0.0771%" height="15" fill="rgb(238,181,32)" fg:x="1029" fg:w="1"/><text x="79.5869%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.3369%" y="533" width="0.0771%" height="15" fill="rgb(224,113,18)" fg:x="1029" fg:w="1"/><text x="79.5869%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.3369%" y="517" width="0.0771%" height="15" fill="rgb(240,229,28)" fg:x="1029" fg:w="1"/><text x="79.5869%" y="527.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="79.4140%" y="661" width="0.0771%" height="15" fill="rgb(250,185,3)" fg:x="1030" fg:w="1"/><text x="79.6640%" y="671.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="79.4140%" y="645" width="0.0771%" height="15" fill="rgb(212,59,25)" fg:x="1030" fg:w="1"/><text x="79.6640%" y="655.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="79.4140%" y="629" width="0.0771%" height="15" fill="rgb(221,87,20)" fg:x="1030" fg:w="1"/><text x="79.6640%" y="639.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="79.4140%" y="613" width="0.0771%" height="15" fill="rgb(213,74,28)" fg:x="1030" fg:w="1"/><text x="79.6640%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="79.4140%" y="597" width="0.0771%" height="15" fill="rgb(224,132,34)" fg:x="1030" fg:w="1"/><text x="79.6640%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.4140%" y="581" width="0.0771%" height="15" fill="rgb(222,101,24)" fg:x="1030" fg:w="1"/><text x="79.6640%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="79.4140%" y="565" width="0.0771%" height="15" fill="rgb(254,142,4)" fg:x="1030" fg:w="1"/><text x="79.6640%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="79.4140%" y="549" width="0.0771%" height="15" fill="rgb(230,229,49)" fg:x="1030" fg:w="1"/><text x="79.6640%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.4140%" y="533" width="0.0771%" height="15" fill="rgb(238,70,47)" fg:x="1030" fg:w="1"/><text x="79.6640%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.4140%" y="517" width="0.0771%" height="15" fill="rgb(231,160,17)" fg:x="1030" fg:w="1"/><text x="79.6640%" y="527.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="79.4911%" y="661" width="0.0771%" height="15" fill="rgb(218,68,53)" fg:x="1031" fg:w="1"/><text x="79.7411%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="79.4911%" y="645" width="0.0771%" height="15" fill="rgb(236,111,10)" fg:x="1031" fg:w="1"/><text x="79.7411%" y="655.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="79.4911%" y="629" width="0.0771%" height="15" fill="rgb(224,34,41)" fg:x="1031" fg:w="1"/><text x="79.7411%" y="639.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="79.4911%" y="613" width="0.0771%" height="15" fill="rgb(241,118,19)" fg:x="1031" fg:w="1"/><text x="79.7411%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.4911%" y="597" width="0.0771%" height="15" fill="rgb(238,129,25)" fg:x="1031" fg:w="1"/><text x="79.7411%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="79.4911%" y="581" width="0.0771%" height="15" fill="rgb(238,22,31)" fg:x="1031" fg:w="1"/><text x="79.7411%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="79.4911%" y="565" width="0.0771%" height="15" fill="rgb(222,174,48)" fg:x="1031" fg:w="1"/><text x="79.7411%" y="575.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.5682%" y="645" width="0.0771%" height="15" fill="rgb(206,152,40)" fg:x="1032" fg:w="1"/><text x="79.8182%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.5682%" y="629" width="0.0771%" height="15" fill="rgb(218,99,54)" fg:x="1032" fg:w="1"/><text x="79.8182%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.5682%" y="613" width="0.0771%" height="15" fill="rgb(220,174,26)" fg:x="1032" fg:w="1"/><text x="79.8182%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.5682%" y="597" width="0.0771%" height="15" fill="rgb(245,116,9)" fg:x="1032" fg:w="1"/><text x="79.8182%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.5682%" y="581" width="0.0771%" height="15" fill="rgb(209,72,35)" fg:x="1032" fg:w="1"/><text x="79.8182%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.5682%" y="565" width="0.0771%" height="15" fill="rgb(226,126,21)" fg:x="1032" fg:w="1"/><text x="79.8182%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.5682%" y="549" width="0.0771%" height="15" fill="rgb(227,192,1)" fg:x="1032" fg:w="1"/><text x="79.8182%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.5682%" y="533" width="0.0771%" height="15" fill="rgb(237,180,29)" fg:x="1032" fg:w="1"/><text x="79.8182%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.5682%" y="517" width="0.0771%" height="15" fill="rgb(230,197,35)" fg:x="1032" fg:w="1"/><text x="79.8182%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.5682%" y="501" width="0.0771%" height="15" fill="rgb(246,193,31)" fg:x="1032" fg:w="1"/><text x="79.8182%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.5682%" y="485" width="0.0771%" height="15" fill="rgb(241,36,4)" fg:x="1032" fg:w="1"/><text x="79.8182%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.5682%" y="469" width="0.0771%" height="15" fill="rgb(241,130,17)" fg:x="1032" fg:w="1"/><text x="79.8182%" y="479.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="79.6453%" y="565" width="0.0771%" height="15" fill="rgb(206,137,32)" fg:x="1033" fg:w="1"/><text x="79.8953%" y="575.50"></text></g><g><title>kernel::model::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="79.6453%" y="549" width="0.0771%" height="15" fill="rgb(237,228,51)" fg:x="1033" fg:w="1"/><text x="79.8953%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.6453%" y="533" width="0.0771%" height="15" fill="rgb(243,6,42)" fg:x="1033" fg:w="1"/><text x="79.8953%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.6453%" y="517" width="0.0771%" height="15" fill="rgb(251,74,28)" fg:x="1033" fg:w="1"/><text x="79.8953%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.6453%" y="501" width="0.0771%" height="15" fill="rgb(218,20,49)" fg:x="1033" fg:w="1"/><text x="79.8953%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.6453%" y="485" width="0.0771%" height="15" fill="rgb(238,28,14)" fg:x="1033" fg:w="1"/><text x="79.8953%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.6453%" y="469" width="0.0771%" height="15" fill="rgb(229,40,46)" fg:x="1033" fg:w="1"/><text x="79.8953%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.6453%" y="453" width="0.0771%" height="15" fill="rgb(244,195,20)" fg:x="1033" fg:w="1"/><text x="79.8953%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.6453%" y="437" width="0.0771%" height="15" fill="rgb(253,56,35)" fg:x="1033" fg:w="1"/><text x="79.8953%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.6453%" y="421" width="0.0771%" height="15" fill="rgb(210,149,44)" fg:x="1033" fg:w="1"/><text x="79.8953%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.6453%" y="405" width="0.0771%" height="15" fill="rgb(240,135,12)" fg:x="1033" fg:w="1"/><text x="79.8953%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.6453%" y="389" width="0.0771%" height="15" fill="rgb(251,24,50)" fg:x="1033" fg:w="1"/><text x="79.8953%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.6453%" y="373" width="0.0771%" height="15" fill="rgb(243,200,47)" fg:x="1033" fg:w="1"/><text x="79.8953%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.6453%" y="357" width="0.0771%" height="15" fill="rgb(224,166,26)" fg:x="1033" fg:w="1"/><text x="79.8953%" y="367.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.15%)</title><rect x="79.6453%" y="645" width="0.1542%" height="15" fill="rgb(233,0,47)" fg:x="1033" fg:w="2"/><text x="79.8953%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.15%)</title><rect x="79.6453%" y="629" width="0.1542%" height="15" fill="rgb(253,80,5)" fg:x="1033" fg:w="2"/><text x="79.8953%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.15%)</title><rect x="79.6453%" y="613" width="0.1542%" height="15" fill="rgb(214,133,25)" fg:x="1033" fg:w="2"/><text x="79.8953%" y="623.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.15%)</title><rect x="79.6453%" y="597" width="0.1542%" height="15" fill="rgb(209,27,14)" fg:x="1033" fg:w="2"/><text x="79.8953%" y="607.50"></text></g><g><title>plugins_core::tools::leads_to (2 samples, 0.15%)</title><rect x="79.6453%" y="581" width="0.1542%" height="15" fill="rgb(219,102,51)" fg:x="1033" fg:w="2"/><text x="79.8953%" y="591.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="79.7224%" y="565" width="0.0771%" height="15" fill="rgb(237,18,16)" fg:x="1034" fg:w="1"/><text x="79.9724%" y="575.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="79.7224%" y="549" width="0.0771%" height="15" fill="rgb(241,85,17)" fg:x="1034" fg:w="1"/><text x="79.9724%" y="559.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Exit&gt;::serialize (1 samples, 0.08%)</title><rect x="79.7224%" y="533" width="0.0771%" height="15" fill="rgb(236,90,42)" fg:x="1034" fg:w="1"/><text x="79.9724%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.7224%" y="517" width="0.0771%" height="15" fill="rgb(249,57,21)" fg:x="1034" fg:w="1"/><text x="79.9724%" y="527.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="79.7224%" y="501" width="0.0771%" height="15" fill="rgb(243,12,36)" fg:x="1034" fg:w="1"/><text x="79.9724%" y="511.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="79.7224%" y="485" width="0.0771%" height="15" fill="rgb(253,128,47)" fg:x="1034" fg:w="1"/><text x="79.9724%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="79.7995%" y="581" width="0.0771%" height="15" fill="rgb(207,33,20)" fg:x="1035" fg:w="1"/><text x="80.0495%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.7995%" y="565" width="0.0771%" height="15" fill="rgb(233,215,35)" fg:x="1035" fg:w="1"/><text x="80.0495%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.7995%" y="549" width="0.0771%" height="15" fill="rgb(249,188,52)" fg:x="1035" fg:w="1"/><text x="80.0495%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.8766%" y="533" width="0.0771%" height="15" fill="rgb(225,12,32)" fg:x="1036" fg:w="1"/><text x="80.1266%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.15%)</title><rect x="79.8766%" y="581" width="0.1542%" height="15" fill="rgb(247,98,14)" fg:x="1036" fg:w="2"/><text x="80.1266%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.15%)</title><rect x="79.8766%" y="565" width="0.1542%" height="15" fill="rgb(247,219,48)" fg:x="1036" fg:w="2"/><text x="80.1266%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.15%)</title><rect x="79.8766%" y="549" width="0.1542%" height="15" fill="rgb(253,60,48)" fg:x="1036" fg:w="2"/><text x="80.1266%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.9537%" y="533" width="0.0771%" height="15" fill="rgb(245,15,52)" fg:x="1037" fg:w="1"/><text x="80.2037%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.9537%" y="517" width="0.0771%" height="15" fill="rgb(220,133,28)" fg:x="1037" fg:w="1"/><text x="80.2037%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="80.0308%" y="549" width="0.0771%" height="15" fill="rgb(217,180,4)" fg:x="1038" fg:w="1"/><text x="80.2808%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.1079%" y="533" width="0.0771%" height="15" fill="rgb(251,24,1)" fg:x="1039" fg:w="1"/><text x="80.3579%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.1850%" y="533" width="0.0771%" height="15" fill="rgb(212,185,49)" fg:x="1040" fg:w="1"/><text x="80.4350%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.1850%" y="517" width="0.0771%" height="15" fill="rgb(215,175,22)" fg:x="1040" fg:w="1"/><text x="80.4350%" y="527.50"></text></g><g><title>engine::session::Session::flush (7 samples, 0.54%)</title><rect x="79.7995%" y="645" width="0.5397%" height="15" fill="rgb(250,205,14)" fg:x="1035" fg:w="7"/><text x="80.0495%" y="655.50"></text></g><g><title>engine::session::Session::save_entity_changes (7 samples, 0.54%)</title><rect x="79.7995%" y="629" width="0.5397%" height="15" fill="rgb(225,211,22)" fg:x="1035" fg:w="7"/><text x="80.0495%" y="639.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (7 samples, 0.54%)</title><rect x="79.7995%" y="613" width="0.5397%" height="15" fill="rgb(251,179,42)" fg:x="1035" fg:w="7"/><text x="80.0495%" y="623.50"></text></g><g><title>engine::session::Session::check_for_changes (7 samples, 0.54%)</title><rect x="79.7995%" y="597" width="0.5397%" height="15" fill="rgb(208,216,51)" fg:x="1035" fg:w="7"/><text x="80.0495%" y="607.50"></text></g><g><title>kernel::compare::any_entity_changes (4 samples, 0.31%)</title><rect x="80.0308%" y="581" width="0.3084%" height="15" fill="rgb(235,36,11)" fg:x="1038" fg:w="4"/><text x="80.2808%" y="591.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (4 samples, 0.31%)</title><rect x="80.0308%" y="565" width="0.3084%" height="15" fill="rgb(213,189,28)" fg:x="1038" fg:w="4"/><text x="80.2808%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.23%)</title><rect x="80.1079%" y="549" width="0.2313%" height="15" fill="rgb(227,203,42)" fg:x="1039" fg:w="3"/><text x="80.3579%" y="559.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="80.2621%" y="533" width="0.0771%" height="15" fill="rgb(244,72,36)" fg:x="1041" fg:w="1"/><text x="80.5121%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.2621%" y="517" width="0.0771%" height="15" fill="rgb(213,53,17)" fg:x="1041" fg:w="1"/><text x="80.5121%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="80.2621%" y="501" width="0.0771%" height="15" fill="rgb(207,167,3)" fg:x="1041" fg:w="1"/><text x="80.5121%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="80.2621%" y="485" width="0.0771%" height="15" fill="rgb(216,98,30)" fg:x="1041" fg:w="1"/><text x="80.5121%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.2621%" y="469" width="0.0771%" height="15" fill="rgb(236,123,15)" fg:x="1041" fg:w="1"/><text x="80.5121%" y="479.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (16 samples, 1.23%)</title><rect x="79.1827%" y="677" width="1.2336%" height="15" fill="rgb(248,81,50)" fg:x="1027" fg:w="16"/><text x="79.4327%" y="687.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (11 samples, 0.85%)</title><rect x="79.5682%" y="661" width="0.8481%" height="15" fill="rgb(214,120,4)" fg:x="1032" fg:w="11"/><text x="79.8182%" y="671.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="80.3392%" y="645" width="0.0771%" height="15" fill="rgb(208,179,34)" fg:x="1042" fg:w="1"/><text x="80.5892%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="80.3392%" y="629" width="0.0771%" height="15" fill="rgb(227,140,7)" fg:x="1042" fg:w="1"/><text x="80.5892%" y="639.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="80.3392%" y="613" width="0.0771%" height="15" fill="rgb(214,22,6)" fg:x="1042" fg:w="1"/><text x="80.5892%" y="623.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="80.3392%" y="597" width="0.0771%" height="15" fill="rgb(207,137,27)" fg:x="1042" fg:w="1"/><text x="80.5892%" y="607.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="80.3392%" y="581" width="0.0771%" height="15" fill="rgb(210,8,46)" fg:x="1042" fg:w="1"/><text x="80.5892%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.3392%" y="565" width="0.0771%" height="15" fill="rgb(240,16,54)" fg:x="1042" fg:w="1"/><text x="80.5892%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.3392%" y="549" width="0.0771%" height="15" fill="rgb(211,209,29)" fg:x="1042" fg:w="1"/><text x="80.5892%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.3392%" y="533" width="0.0771%" height="15" fill="rgb(226,228,24)" fg:x="1042" fg:w="1"/><text x="80.5892%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="80.3392%" y="517" width="0.0771%" height="15" fill="rgb(222,84,9)" fg:x="1042" fg:w="1"/><text x="80.5892%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="80.4163%" y="613" width="0.0771%" height="15" fill="rgb(234,203,30)" fg:x="1043" fg:w="1"/><text x="80.6663%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.4163%" y="597" width="0.0771%" height="15" fill="rgb(238,109,14)" fg:x="1043" fg:w="1"/><text x="80.6663%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.4163%" y="581" width="0.0771%" height="15" fill="rgb(233,206,34)" fg:x="1043" fg:w="1"/><text x="80.6663%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.4163%" y="565" width="0.0771%" height="15" fill="rgb(220,167,47)" fg:x="1043" fg:w="1"/><text x="80.6663%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.15%)</title><rect x="80.4934%" y="613" width="0.1542%" height="15" fill="rgb(238,105,10)" fg:x="1044" fg:w="2"/><text x="80.7434%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.15%)</title><rect x="80.4934%" y="597" width="0.1542%" height="15" fill="rgb(213,227,17)" fg:x="1044" fg:w="2"/><text x="80.7434%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.5705%" y="581" width="0.0771%" height="15" fill="rgb(217,132,38)" fg:x="1045" fg:w="1"/><text x="80.8205%" y="591.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="80.6476%" y="565" width="0.0771%" height="15" fill="rgb(242,146,4)" fg:x="1046" fg:w="1"/><text x="80.8976%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.6476%" y="549" width="0.0771%" height="15" fill="rgb(212,61,9)" fg:x="1046" fg:w="1"/><text x="80.8976%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="80.6476%" y="533" width="0.0771%" height="15" fill="rgb(247,126,22)" fg:x="1046" fg:w="1"/><text x="80.8976%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="80.6476%" y="517" width="0.0771%" height="15" fill="rgb(220,196,2)" fg:x="1046" fg:w="1"/><text x="80.8976%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.6476%" y="501" width="0.0771%" height="15" fill="rgb(208,46,4)" fg:x="1046" fg:w="1"/><text x="80.8976%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.6476%" y="485" width="0.0771%" height="15" fill="rgb(252,104,46)" fg:x="1046" fg:w="1"/><text x="80.8976%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="80.7247%" y="533" width="0.0771%" height="15" fill="rgb(237,152,48)" fg:x="1047" fg:w="1"/><text x="80.9747%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.8019%" y="517" width="0.0771%" height="15" fill="rgb(221,59,37)" fg:x="1048" fg:w="1"/><text x="81.0519%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.8019%" y="501" width="0.0771%" height="15" fill="rgb(209,202,51)" fg:x="1048" fg:w="1"/><text x="81.0519%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.8019%" y="485" width="0.0771%" height="15" fill="rgb(228,81,30)" fg:x="1048" fg:w="1"/><text x="81.0519%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.15%)</title><rect x="80.8790%" y="517" width="0.1542%" height="15" fill="rgb(227,42,39)" fg:x="1049" fg:w="2"/><text x="81.1290%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.15%)</title><rect x="80.8790%" y="501" width="0.1542%" height="15" fill="rgb(221,26,2)" fg:x="1049" fg:w="2"/><text x="81.1290%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.15%)</title><rect x="80.8790%" y="485" width="0.1542%" height="15" fill="rgb(254,61,31)" fg:x="1049" fg:w="2"/><text x="81.1290%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.15%)</title><rect x="80.8790%" y="469" width="0.1542%" height="15" fill="rgb(222,173,38)" fg:x="1049" fg:w="2"/><text x="81.1290%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.0332%" y="501" width="0.0771%" height="15" fill="rgb(218,50,12)" fg:x="1051" fg:w="1"/><text x="81.2832%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.0332%" y="485" width="0.0771%" height="15" fill="rgb(223,88,40)" fg:x="1051" fg:w="1"/><text x="81.2832%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.0332%" y="469" width="0.0771%" height="15" fill="rgb(237,54,19)" fg:x="1051" fg:w="1"/><text x="81.2832%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.0332%" y="453" width="0.0771%" height="15" fill="rgb(251,129,25)" fg:x="1051" fg:w="1"/><text x="81.2832%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (7 samples, 0.54%)</title><rect x="80.6476%" y="597" width="0.5397%" height="15" fill="rgb(238,97,19)" fg:x="1046" fg:w="7"/><text x="80.8976%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.54%)</title><rect x="80.6476%" y="581" width="0.5397%" height="15" fill="rgb(240,169,18)" fg:x="1046" fg:w="7"/><text x="80.8976%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.46%)</title><rect x="80.7247%" y="565" width="0.4626%" height="15" fill="rgb(230,187,49)" fg:x="1047" fg:w="6"/><text x="80.9747%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (6 samples, 0.46%)</title><rect x="80.7247%" y="549" width="0.4626%" height="15" fill="rgb(209,44,26)" fg:x="1047" fg:w="6"/><text x="80.9747%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.39%)</title><rect x="80.8019%" y="533" width="0.3855%" height="15" fill="rgb(244,0,6)" fg:x="1048" fg:w="5"/><text x="81.0519%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.15%)</title><rect x="81.0332%" y="517" width="0.1542%" height="15" fill="rgb(248,18,21)" fg:x="1051" fg:w="2"/><text x="81.2832%" y="527.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="81.1103%" y="501" width="0.0771%" height="15" fill="rgb(245,180,19)" fg:x="1052" fg:w="1"/><text x="81.3603%" y="511.50"></text></g><g><title>engine::session::Session::close (11 samples, 0.85%)</title><rect x="80.4163%" y="677" width="0.8481%" height="15" fill="rgb(252,118,36)" fg:x="1043" fg:w="11"/><text x="80.6663%" y="687.50"></text></g><g><title>engine::session::Session::save_entity_changes (11 samples, 0.85%)</title><rect x="80.4163%" y="661" width="0.8481%" height="15" fill="rgb(210,224,19)" fg:x="1043" fg:w="11"/><text x="80.6663%" y="671.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (11 samples, 0.85%)</title><rect x="80.4163%" y="645" width="0.8481%" height="15" fill="rgb(218,30,24)" fg:x="1043" fg:w="11"/><text x="80.6663%" y="655.50"></text></g><g><title>engine::session::Session::check_for_changes (11 samples, 0.85%)</title><rect x="80.4163%" y="629" width="0.8481%" height="15" fill="rgb(219,75,50)" fg:x="1043" fg:w="11"/><text x="80.6663%" y="639.50"></text></g><g><title>kernel::compare::any_entity_changes (8 samples, 0.62%)</title><rect x="80.6476%" y="613" width="0.6168%" height="15" fill="rgb(234,72,50)" fg:x="1046" fg:w="8"/><text x="80.8976%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="81.1874%" y="597" width="0.0771%" height="15" fill="rgb(219,100,48)" fg:x="1053" fg:w="1"/><text x="81.4374%" y="607.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="81.1874%" y="581" width="0.0771%" height="15" fill="rgb(253,5,41)" fg:x="1053" fg:w="1"/><text x="81.4374%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="81.1874%" y="565" width="0.0771%" height="15" fill="rgb(247,181,11)" fg:x="1053" fg:w="1"/><text x="81.4374%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="81.1874%" y="549" width="0.0771%" height="15" fill="rgb(222,223,25)" fg:x="1053" fg:w="1"/><text x="81.4374%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="81.1874%" y="533" width="0.0771%" height="15" fill="rgb(214,198,28)" fg:x="1053" fg:w="1"/><text x="81.4374%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="81.1874%" y="517" width="0.0771%" height="15" fill="rgb(230,46,43)" fg:x="1053" fg:w="1"/><text x="81.4374%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.1874%" y="501" width="0.0771%" height="15" fill="rgb(233,65,53)" fg:x="1053" fg:w="1"/><text x="81.4374%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.1874%" y="485" width="0.0771%" height="15" fill="rgb(221,121,27)" fg:x="1053" fg:w="1"/><text x="81.4374%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.1874%" y="469" width="0.0771%" height="15" fill="rgb(247,70,47)" fg:x="1053" fg:w="1"/><text x="81.4374%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="81.3416%" y="501" width="0.0771%" height="15" fill="rgb(228,85,35)" fg:x="1055" fg:w="1"/><text x="81.5916%" y="511.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="81.3416%" y="485" width="0.0771%" height="15" fill="rgb(209,50,18)" fg:x="1055" fg:w="1"/><text x="81.5916%" y="495.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="81.3416%" y="469" width="0.0771%" height="15" fill="rgb(250,19,35)" fg:x="1055" fg:w="1"/><text x="81.5916%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="81.3416%" y="453" width="0.0771%" height="15" fill="rgb(253,107,29)" fg:x="1055" fg:w="1"/><text x="81.5916%" y="463.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="81.3416%" y="437" width="0.0771%" height="15" fill="rgb(252,179,29)" fg:x="1055" fg:w="1"/><text x="81.5916%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="81.3416%" y="421" width="0.0771%" height="15" fill="rgb(238,194,6)" fg:x="1055" fg:w="1"/><text x="81.5916%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="81.3416%" y="405" width="0.0771%" height="15" fill="rgb(238,164,29)" fg:x="1055" fg:w="1"/><text x="81.5916%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="81.3416%" y="389" width="0.0771%" height="15" fill="rgb(224,25,9)" fg:x="1055" fg:w="1"/><text x="81.5916%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="81.3416%" y="373" width="0.0771%" height="15" fill="rgb(244,153,23)" fg:x="1055" fg:w="1"/><text x="81.5916%" y="383.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="81.3416%" y="357" width="0.0771%" height="15" fill="rgb(212,203,14)" fg:x="1055" fg:w="1"/><text x="81.5916%" y="367.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="81.3416%" y="341" width="0.0771%" height="15" fill="rgb(220,164,20)" fg:x="1055" fg:w="1"/><text x="81.5916%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.3416%" y="325" width="0.0771%" height="15" fill="rgb(222,203,48)" fg:x="1055" fg:w="1"/><text x="81.5916%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.3416%" y="309" width="0.0771%" height="15" fill="rgb(215,159,22)" fg:x="1055" fg:w="1"/><text x="81.5916%" y="319.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="81.3416%" y="293" width="0.0771%" height="15" fill="rgb(216,183,47)" fg:x="1055" fg:w="1"/><text x="81.5916%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="81.3416%" y="277" width="0.0771%" height="15" fill="rgb(229,195,25)" fg:x="1055" fg:w="1"/><text x="81.5916%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="81.3416%" y="261" width="0.0771%" height="15" fill="rgb(224,132,51)" fg:x="1055" fg:w="1"/><text x="81.5916%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="81.3416%" y="245" width="0.0771%" height="15" fill="rgb(240,63,7)" fg:x="1055" fg:w="1"/><text x="81.5916%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="81.3416%" y="229" width="0.0771%" height="15" fill="rgb(249,182,41)" fg:x="1055" fg:w="1"/><text x="81.5916%" y="239.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="81.4958%" y="453" width="0.0771%" height="15" fill="rgb(243,47,26)" fg:x="1057" fg:w="1"/><text x="81.7458%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="81.5729%" y="421" width="0.0771%" height="15" fill="rgb(233,48,2)" fg:x="1058" fg:w="1"/><text x="81.8229%" y="431.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="81.5729%" y="405" width="0.0771%" height="15" fill="rgb(244,165,34)" fg:x="1058" fg:w="1"/><text x="81.8229%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="81.5729%" y="389" width="0.0771%" height="15" fill="rgb(207,89,7)" fg:x="1058" fg:w="1"/><text x="81.8229%" y="399.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="81.5729%" y="373" width="0.0771%" height="15" fill="rgb(244,117,36)" fg:x="1058" fg:w="1"/><text x="81.8229%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="81.5729%" y="357" width="0.0771%" height="15" fill="rgb(226,144,34)" fg:x="1058" fg:w="1"/><text x="81.8229%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="81.5729%" y="341" width="0.0771%" height="15" fill="rgb(213,23,19)" fg:x="1058" fg:w="1"/><text x="81.8229%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.5729%" y="325" width="0.0771%" height="15" fill="rgb(217,75,12)" fg:x="1058" fg:w="1"/><text x="81.8229%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.5729%" y="309" width="0.0771%" height="15" fill="rgb(224,159,17)" fg:x="1058" fg:w="1"/><text x="81.8229%" y="319.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="81.5729%" y="293" width="0.0771%" height="15" fill="rgb(217,118,1)" fg:x="1058" fg:w="1"/><text x="81.8229%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="81.6500%" y="373" width="0.0771%" height="15" fill="rgb(232,180,48)" fg:x="1059" fg:w="1"/><text x="81.9000%" y="383.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.6500%" y="357" width="0.0771%" height="15" fill="rgb(230,27,33)" fg:x="1059" fg:w="1"/><text x="81.9000%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (18 samples, 1.39%)</title><rect x="81.7271%" y="357" width="1.3878%" height="15" fill="rgb(205,31,21)" fg:x="1060" fg:w="18"/><text x="81.9771%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (18 samples, 1.39%)</title><rect x="81.7271%" y="341" width="1.3878%" height="15" fill="rgb(253,59,4)" fg:x="1060" fg:w="18"/><text x="81.9771%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.31%)</title><rect x="83.1149%" y="357" width="0.3084%" height="15" fill="rgb(224,201,9)" fg:x="1078" fg:w="4"/><text x="83.3649%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.31%)</title><rect x="83.1149%" y="341" width="0.3084%" height="15" fill="rgb(229,206,30)" fg:x="1078" fg:w="4"/><text x="83.3649%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="83.3462%" y="325" width="0.0771%" height="15" fill="rgb(212,67,47)" fg:x="1081" fg:w="1"/><text x="83.5962%" y="335.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="83.3462%" y="309" width="0.0771%" height="15" fill="rgb(211,96,50)" fg:x="1081" fg:w="1"/><text x="83.5962%" y="319.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="83.3462%" y="293" width="0.0771%" height="15" fill="rgb(252,114,18)" fg:x="1081" fg:w="1"/><text x="83.5962%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="83.4233%" y="293" width="0.0771%" height="15" fill="rgb(223,58,37)" fg:x="1082" fg:w="1"/><text x="83.6733%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.4233%" y="277" width="0.0771%" height="15" fill="rgb(237,70,4)" fg:x="1082" fg:w="1"/><text x="83.6733%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.4233%" y="261" width="0.0771%" height="15" fill="rgb(244,85,46)" fg:x="1082" fg:w="1"/><text x="83.6733%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.4233%" y="245" width="0.0771%" height="15" fill="rgb(223,39,52)" fg:x="1082" fg:w="1"/><text x="83.6733%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="83.5004%" y="293" width="0.0771%" height="15" fill="rgb(218,200,14)" fg:x="1083" fg:w="1"/><text x="83.7504%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.5004%" y="277" width="0.0771%" height="15" fill="rgb(208,171,16)" fg:x="1083" fg:w="1"/><text x="83.7504%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.5004%" y="261" width="0.0771%" height="15" fill="rgb(234,200,18)" fg:x="1083" fg:w="1"/><text x="83.7504%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.5004%" y="245" width="0.0771%" height="15" fill="rgb(228,45,11)" fg:x="1083" fg:w="1"/><text x="83.7504%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="83.5775%" y="293" width="0.0771%" height="15" fill="rgb(237,182,11)" fg:x="1084" fg:w="1"/><text x="83.8275%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="83.5775%" y="277" width="0.0771%" height="15" fill="rgb(241,175,49)" fg:x="1084" fg:w="1"/><text x="83.8275%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="83.5775%" y="261" width="0.0771%" height="15" fill="rgb(247,38,35)" fg:x="1084" fg:w="1"/><text x="83.8275%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="83.5775%" y="245" width="0.0771%" height="15" fill="rgb(228,39,49)" fg:x="1084" fg:w="1"/><text x="83.8275%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (32 samples, 2.47%)</title><rect x="83.6546%" y="293" width="2.4672%" height="15" fill="rgb(226,101,26)" fg:x="1085" fg:w="32"/><text x="83.9046%" y="303.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (32 samples, 2.47%)</title><rect x="83.6546%" y="277" width="2.4672%" height="15" fill="rgb(206,141,19)" fg:x="1085" fg:w="32"/><text x="83.9046%" y="287.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (32 samples, 2.47%)</title><rect x="83.6546%" y="261" width="2.4672%" height="15" fill="rgb(211,200,13)" fg:x="1085" fg:w="32"/><text x="83.9046%" y="271.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 2.78%)</title><rect x="83.4233%" y="341" width="2.7756%" height="15" fill="rgb(241,121,6)" fg:x="1082" fg:w="36"/><text x="83.6733%" y="351.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (36 samples, 2.78%)</title><rect x="83.4233%" y="325" width="2.7756%" height="15" fill="rgb(234,221,29)" fg:x="1082" fg:w="36"/><text x="83.6733%" y="335.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (36 samples, 2.78%)</title><rect x="83.4233%" y="309" width="2.7756%" height="15" fill="rgb(229,136,5)" fg:x="1082" fg:w="36"/><text x="83.6733%" y="319.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="86.1218%" y="293" width="0.0771%" height="15" fill="rgb(238,36,11)" fg:x="1117" fg:w="1"/><text x="86.3718%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.1218%" y="277" width="0.0771%" height="15" fill="rgb(251,55,41)" fg:x="1117" fg:w="1"/><text x="86.3718%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.1218%" y="261" width="0.0771%" height="15" fill="rgb(242,34,40)" fg:x="1117" fg:w="1"/><text x="86.3718%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.1218%" y="245" width="0.0771%" height="15" fill="rgb(215,42,17)" fg:x="1117" fg:w="1"/><text x="86.3718%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.3531%" y="325" width="0.0771%" height="15" fill="rgb(207,44,46)" fg:x="1120" fg:w="1"/><text x="86.6031%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.4302%" y="325" width="0.0771%" height="15" fill="rgb(211,206,28)" fg:x="1121" fg:w="1"/><text x="86.6802%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.31%)</title><rect x="86.5073%" y="325" width="0.3084%" height="15" fill="rgb(237,167,16)" fg:x="1122" fg:w="4"/><text x="86.7573%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.23%)</title><rect x="86.5844%" y="309" width="0.2313%" height="15" fill="rgb(233,66,6)" fg:x="1123" fg:w="3"/><text x="86.8344%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.23%)</title><rect x="86.5844%" y="293" width="0.2313%" height="15" fill="rgb(246,123,29)" fg:x="1123" fg:w="3"/><text x="86.8344%" y="303.50"></text></g><g><title>realloc (3 samples, 0.23%)</title><rect x="86.5844%" y="277" width="0.2313%" height="15" fill="rgb(209,62,40)" fg:x="1123" fg:w="3"/><text x="86.8344%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.77%)</title><rect x="86.1989%" y="341" width="0.7710%" height="15" fill="rgb(218,4,25)" fg:x="1118" fg:w="10"/><text x="86.4489%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.15%)</title><rect x="86.8157%" y="325" width="0.1542%" height="15" fill="rgb(253,91,49)" fg:x="1126" fg:w="2"/><text x="87.0657%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (47 samples, 3.62%)</title><rect x="83.4233%" y="357" width="3.6237%" height="15" fill="rgb(228,155,29)" fg:x="1082" fg:w="47"/><text x="83.6733%" y="367.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="86.9699%" y="341" width="0.0771%" height="15" fill="rgb(243,57,37)" fg:x="1128" fg:w="1"/><text x="87.2199%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="86.9699%" y="325" width="0.0771%" height="15" fill="rgb(244,167,17)" fg:x="1128" fg:w="1"/><text x="87.2199%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="87.0470%" y="357" width="0.0771%" height="15" fill="rgb(207,181,38)" fg:x="1129" fg:w="1"/><text x="87.2970%" y="367.50"></text></g><g><title>regex_automata::meta::strategy::new (71 samples, 5.47%)</title><rect x="81.7271%" y="373" width="5.4742%" height="15" fill="rgb(211,8,23)" fg:x="1060" fg:w="71"/><text x="81.9771%" y="383.50">regex_a..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="87.1241%" y="357" width="0.0771%" height="15" fill="rgb(235,11,44)" fg:x="1130" fg:w="1"/><text x="87.3741%" y="367.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (75 samples, 5.78%)</title><rect x="81.6500%" y="421" width="5.7826%" height="15" fill="rgb(248,18,52)" fg:x="1059" fg:w="75"/><text x="81.9000%" y="431.50">&lt;regex:..</text></g><g><title>regex::builders::Builder::build_one_string (75 samples, 5.78%)</title><rect x="81.6500%" y="405" width="5.7826%" height="15" fill="rgb(208,4,7)" fg:x="1059" fg:w="75"/><text x="81.9000%" y="415.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (75 samples, 5.78%)</title><rect x="81.6500%" y="389" width="5.7826%" height="15" fill="rgb(240,17,39)" fg:x="1059" fg:w="75"/><text x="81.9000%" y="399.50">regex_a..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.23%)</title><rect x="87.2012%" y="373" width="0.2313%" height="15" fill="rgb(207,170,3)" fg:x="1131" fg:w="3"/><text x="87.4512%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.15%)</title><rect x="87.2783%" y="357" width="0.1542%" height="15" fill="rgb(236,100,52)" fg:x="1132" fg:w="2"/><text x="87.5283%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.15%)</title><rect x="87.2783%" y="341" width="0.1542%" height="15" fill="rgb(246,78,51)" fg:x="1132" fg:w="2"/><text x="87.5283%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.15%)</title><rect x="87.2783%" y="325" width="0.1542%" height="15" fill="rgb(211,17,15)" fg:x="1132" fg:w="2"/><text x="87.5283%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.15%)</title><rect x="87.2783%" y="309" width="0.1542%" height="15" fill="rgb(209,59,46)" fg:x="1132" fg:w="2"/><text x="87.5283%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.15%)</title><rect x="87.2783%" y="293" width="0.1542%" height="15" fill="rgb(210,92,25)" fg:x="1132" fg:w="2"/><text x="87.5283%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.15%)</title><rect x="87.2783%" y="277" width="0.1542%" height="15" fill="rgb(238,174,52)" fg:x="1132" fg:w="2"/><text x="87.5283%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="87.4325%" y="421" width="0.0771%" height="15" fill="rgb(230,73,7)" fg:x="1134" fg:w="1"/><text x="87.6825%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="87.4325%" y="405" width="0.0771%" height="15" fill="rgb(243,124,40)" fg:x="1134" fg:w="1"/><text x="87.6825%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="87.4325%" y="389" width="0.0771%" height="15" fill="rgb(244,170,11)" fg:x="1134" fg:w="1"/><text x="87.6825%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="87.4325%" y="373" width="0.0771%" height="15" fill="rgb(207,114,54)" fg:x="1134" fg:w="1"/><text x="87.6825%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="87.4325%" y="357" width="0.0771%" height="15" fill="rgb(205,42,20)" fg:x="1134" fg:w="1"/><text x="87.6825%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.4325%" y="341" width="0.0771%" height="15" fill="rgb(230,30,28)" fg:x="1134" fg:w="1"/><text x="87.6825%" y="351.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (80 samples, 6.17%)</title><rect x="81.5729%" y="437" width="6.1681%" height="15" fill="rgb(205,73,54)" fg:x="1058" fg:w="80"/><text x="81.8229%" y="447.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.23%)</title><rect x="87.5096%" y="421" width="0.2313%" height="15" fill="rgb(254,227,23)" fg:x="1135" fg:w="3"/><text x="87.7596%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.23%)</title><rect x="87.5096%" y="405" width="0.2313%" height="15" fill="rgb(228,202,34)" fg:x="1135" fg:w="3"/><text x="87.7596%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.23%)</title><rect x="87.5096%" y="389" width="0.2313%" height="15" fill="rgb(222,225,37)" fg:x="1135" fg:w="3"/><text x="87.7596%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.23%)</title><rect x="87.5096%" y="373" width="0.2313%" height="15" fill="rgb(221,14,54)" fg:x="1135" fg:w="3"/><text x="87.7596%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.23%)</title><rect x="87.5096%" y="357" width="0.2313%" height="15" fill="rgb(254,102,2)" fg:x="1135" fg:w="3"/><text x="87.7596%" y="367.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="87.6638%" y="341" width="0.0771%" height="15" fill="rgb(232,104,17)" fg:x="1137" fg:w="1"/><text x="87.9138%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.8180%" y="341" width="0.0771%" height="15" fill="rgb(250,220,14)" fg:x="1139" fg:w="1"/><text x="88.0680%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.15%)</title><rect x="87.8180%" y="373" width="0.1542%" height="15" fill="rgb(241,158,9)" fg:x="1139" fg:w="2"/><text x="88.0680%" y="383.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.15%)</title><rect x="87.8180%" y="357" width="0.1542%" height="15" fill="rgb(246,9,43)" fg:x="1139" fg:w="2"/><text x="88.0680%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="87.8951%" y="341" width="0.0771%" height="15" fill="rgb(206,73,33)" fg:x="1140" fg:w="1"/><text x="88.1451%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.8951%" y="325" width="0.0771%" height="15" fill="rgb(222,79,8)" fg:x="1140" fg:w="1"/><text x="88.1451%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="87.8951%" y="309" width="0.0771%" height="15" fill="rgb(234,8,54)" fg:x="1140" fg:w="1"/><text x="88.1451%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.8951%" y="293" width="0.0771%" height="15" fill="rgb(209,134,38)" fg:x="1140" fg:w="1"/><text x="88.1451%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.8951%" y="277" width="0.0771%" height="15" fill="rgb(230,127,29)" fg:x="1140" fg:w="1"/><text x="88.1451%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.8951%" y="261" width="0.0771%" height="15" fill="rgb(242,44,41)" fg:x="1140" fg:w="1"/><text x="88.1451%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.69%)</title><rect x="87.9722%" y="357" width="0.6939%" height="15" fill="rgb(222,56,43)" fg:x="1141" fg:w="9"/><text x="88.2222%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.69%)</title><rect x="87.9722%" y="341" width="0.6939%" height="15" fill="rgb(238,39,47)" fg:x="1141" fg:w="9"/><text x="88.2222%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.15%)</title><rect x="88.5120%" y="325" width="0.1542%" height="15" fill="rgb(226,79,43)" fg:x="1148" fg:w="2"/><text x="88.7620%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="88.9746%" y="325" width="0.0771%" height="15" fill="rgb(242,105,53)" fg:x="1154" fg:w="1"/><text x="89.2246%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.9746%" y="309" width="0.0771%" height="15" fill="rgb(251,132,46)" fg:x="1154" fg:w="1"/><text x="89.2246%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.9746%" y="293" width="0.0771%" height="15" fill="rgb(231,77,14)" fg:x="1154" fg:w="1"/><text x="89.2246%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.9746%" y="277" width="0.0771%" height="15" fill="rgb(240,135,9)" fg:x="1154" fg:w="1"/><text x="89.2246%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (5 samples, 0.39%)</title><rect x="89.0517%" y="325" width="0.3855%" height="15" fill="rgb(248,109,14)" fg:x="1155" fg:w="5"/><text x="89.3017%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.39%)</title><rect x="89.0517%" y="309" width="0.3855%" height="15" fill="rgb(227,146,52)" fg:x="1155" fg:w="5"/><text x="89.3017%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.3601%" y="293" width="0.0771%" height="15" fill="rgb(232,54,3)" fg:x="1159" fg:w="1"/><text x="89.6101%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.3601%" y="277" width="0.0771%" height="15" fill="rgb(229,201,43)" fg:x="1159" fg:w="1"/><text x="89.6101%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.3601%" y="261" width="0.0771%" height="15" fill="rgb(252,161,33)" fg:x="1159" fg:w="1"/><text x="89.6101%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (12 samples, 0.93%)</title><rect x="88.6662%" y="357" width="0.9252%" height="15" fill="rgb(226,146,40)" fg:x="1150" fg:w="12"/><text x="88.9162%" y="367.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (11 samples, 0.85%)</title><rect x="88.7433%" y="341" width="0.8481%" height="15" fill="rgb(219,47,25)" fg:x="1151" fg:w="11"/><text x="88.9933%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.15%)</title><rect x="89.4372%" y="325" width="0.1542%" height="15" fill="rgb(250,135,13)" fg:x="1160" fg:w="2"/><text x="89.6872%" y="335.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.15%)</title><rect x="89.4372%" y="309" width="0.1542%" height="15" fill="rgb(219,229,18)" fg:x="1160" fg:w="2"/><text x="89.6872%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.15%)</title><rect x="89.4372%" y="293" width="0.1542%" height="15" fill="rgb(217,152,27)" fg:x="1160" fg:w="2"/><text x="89.6872%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.15%)</title><rect x="90.0540%" y="245" width="0.1542%" height="15" fill="rgb(225,71,47)" fg:x="1168" fg:w="2"/><text x="90.3040%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.1311%" y="229" width="0.0771%" height="15" fill="rgb(220,139,14)" fg:x="1169" fg:w="1"/><text x="90.3811%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.1311%" y="213" width="0.0771%" height="15" fill="rgb(247,54,32)" fg:x="1169" fg:w="1"/><text x="90.3811%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.1311%" y="197" width="0.0771%" height="15" fill="rgb(252,131,39)" fg:x="1169" fg:w="1"/><text x="90.3811%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.15%)</title><rect x="90.2082%" y="245" width="0.1542%" height="15" fill="rgb(210,108,39)" fg:x="1170" fg:w="2"/><text x="90.4582%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.2853%" y="229" width="0.0771%" height="15" fill="rgb(205,23,29)" fg:x="1171" fg:w="1"/><text x="90.5353%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.2853%" y="213" width="0.0771%" height="15" fill="rgb(246,139,46)" fg:x="1171" fg:w="1"/><text x="90.5353%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.2853%" y="197" width="0.0771%" height="15" fill="rgb(250,81,26)" fg:x="1171" fg:w="1"/><text x="90.5353%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.7479%" y="181" width="0.0771%" height="15" fill="rgb(214,104,7)" fg:x="1177" fg:w="1"/><text x="90.9979%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.15%)</title><rect x="90.7479%" y="213" width="0.1542%" height="15" fill="rgb(233,189,8)" fg:x="1177" fg:w="2"/><text x="90.9979%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.15%)</title><rect x="90.7479%" y="197" width="0.1542%" height="15" fill="rgb(228,141,17)" fg:x="1177" fg:w="2"/><text x="90.9979%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.8250%" y="181" width="0.0771%" height="15" fill="rgb(247,157,1)" fg:x="1178" fg:w="1"/><text x="91.0750%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.62%)</title><rect x="90.3624%" y="245" width="0.6168%" height="15" fill="rgb(249,225,5)" fg:x="1172" fg:w="8"/><text x="90.6124%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.46%)</title><rect x="90.5166%" y="229" width="0.4626%" height="15" fill="rgb(242,55,13)" fg:x="1174" fg:w="6"/><text x="90.7666%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="90.9021%" y="213" width="0.0771%" height="15" fill="rgb(230,49,50)" fg:x="1179" fg:w="1"/><text x="91.1521%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="90.9021%" y="197" width="0.0771%" height="15" fill="rgb(241,111,38)" fg:x="1179" fg:w="1"/><text x="91.1521%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.9021%" y="181" width="0.0771%" height="15" fill="rgb(252,155,4)" fg:x="1179" fg:w="1"/><text x="91.1521%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.9021%" y="165" width="0.0771%" height="15" fill="rgb(212,69,32)" fg:x="1179" fg:w="1"/><text x="91.1521%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.9021%" y="149" width="0.0771%" height="15" fill="rgb(243,107,47)" fg:x="1179" fg:w="1"/><text x="91.1521%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (45 samples, 3.47%)</title><rect x="90.9792%" y="245" width="3.4695%" height="15" fill="rgb(247,130,12)" fg:x="1180" fg:w="45"/><text x="91.2292%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (45 samples, 3.47%)</title><rect x="90.9792%" y="229" width="3.4695%" height="15" fill="rgb(233,74,16)" fg:x="1180" fg:w="45"/><text x="91.2292%" y="239.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (45 samples, 3.47%)</title><rect x="90.9792%" y="213" width="3.4695%" height="15" fill="rgb(208,58,18)" fg:x="1180" fg:w="45"/><text x="91.2292%" y="223.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="94.4487%" y="245" width="0.0771%" height="15" fill="rgb(242,225,1)" fg:x="1225" fg:w="1"/><text x="94.6987%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 5.01%)</title><rect x="89.5914%" y="341" width="5.0116%" height="15" fill="rgb(249,39,40)" fg:x="1162" fg:w="65"/><text x="89.8414%" y="351.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (65 samples, 5.01%)</title><rect x="89.5914%" y="325" width="5.0116%" height="15" fill="rgb(207,72,44)" fg:x="1162" fg:w="65"/><text x="89.8414%" y="335.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (65 samples, 5.01%)</title><rect x="89.5914%" y="309" width="5.0116%" height="15" fill="rgb(215,193,12)" fg:x="1162" fg:w="65"/><text x="89.8414%" y="319.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (65 samples, 5.01%)</title><rect x="89.5914%" y="293" width="5.0116%" height="15" fill="rgb(248,41,39)" fg:x="1162" fg:w="65"/><text x="89.8414%" y="303.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (64 samples, 4.93%)</title><rect x="89.6685%" y="277" width="4.9345%" height="15" fill="rgb(253,85,4)" fg:x="1163" fg:w="64"/><text x="89.9185%" y="287.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (64 samples, 4.93%)</title><rect x="89.6685%" y="261" width="4.9345%" height="15" fill="rgb(243,70,31)" fg:x="1163" fg:w="64"/><text x="89.9185%" y="271.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="94.5258%" y="245" width="0.0771%" height="15" fill="rgb(253,195,26)" fg:x="1226" fg:w="1"/><text x="94.7758%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.6029%" y="325" width="0.0771%" height="15" fill="rgb(243,42,11)" fg:x="1227" fg:w="1"/><text x="94.8529%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.39%)</title><rect x="94.6800%" y="325" width="0.3855%" height="15" fill="rgb(239,66,17)" fg:x="1228" fg:w="5"/><text x="94.9300%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.15%)</title><rect x="94.9113%" y="309" width="0.1542%" height="15" fill="rgb(217,132,21)" fg:x="1231" fg:w="2"/><text x="95.1613%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.15%)</title><rect x="94.9113%" y="293" width="0.1542%" height="15" fill="rgb(252,202,21)" fg:x="1231" fg:w="2"/><text x="95.1613%" y="303.50"></text></g><g><title>realloc (2 samples, 0.15%)</title><rect x="94.9113%" y="277" width="0.1542%" height="15" fill="rgb(233,98,36)" fg:x="1231" fg:w="2"/><text x="95.1613%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (95 samples, 7.32%)</title><rect x="87.9722%" y="373" width="7.3246%" height="15" fill="rgb(216,153,54)" fg:x="1141" fg:w="95"/><text x="88.2222%" y="383.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (74 samples, 5.71%)</title><rect x="89.5914%" y="357" width="5.7055%" height="15" fill="rgb(250,99,7)" fg:x="1162" fg:w="74"/><text x="89.8414%" y="367.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.69%)</title><rect x="94.6029%" y="341" width="0.6939%" height="15" fill="rgb(207,56,50)" fg:x="1227" fg:w="9"/><text x="94.8529%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.23%)</title><rect x="95.0655%" y="325" width="0.2313%" height="15" fill="rgb(244,61,34)" fg:x="1233" fg:w="3"/><text x="95.3155%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="95.2968%" y="341" width="0.0771%" height="15" fill="rgb(241,50,38)" fg:x="1236" fg:w="1"/><text x="95.5468%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.15%)</title><rect x="95.3739%" y="341" width="0.1542%" height="15" fill="rgb(212,166,30)" fg:x="1237" fg:w="2"/><text x="95.6239%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="95.4510%" y="325" width="0.0771%" height="15" fill="rgb(249,127,32)" fg:x="1238" fg:w="1"/><text x="95.7010%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="95.4510%" y="309" width="0.0771%" height="15" fill="rgb(209,103,0)" fg:x="1238" fg:w="1"/><text x="95.7010%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="95.4510%" y="293" width="0.0771%" height="15" fill="rgb(238,209,51)" fg:x="1238" fg:w="1"/><text x="95.7010%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.31%)</title><rect x="95.2968%" y="373" width="0.3084%" height="15" fill="rgb(237,56,23)" fg:x="1236" fg:w="4"/><text x="95.5468%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.31%)</title><rect x="95.2968%" y="357" width="0.3084%" height="15" fill="rgb(215,153,46)" fg:x="1236" fg:w="4"/><text x="95.5468%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="95.5281%" y="341" width="0.0771%" height="15" fill="rgb(224,49,31)" fg:x="1239" fg:w="1"/><text x="95.7781%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.31%)</title><rect x="95.6052%" y="341" width="0.3084%" height="15" fill="rgb(250,18,42)" fg:x="1240" fg:w="4"/><text x="95.8552%" y="351.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.31%)</title><rect x="95.6052%" y="325" width="0.3084%" height="15" fill="rgb(215,176,39)" fg:x="1240" fg:w="4"/><text x="95.8552%" y="335.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.15%)</title><rect x="95.7594%" y="309" width="0.1542%" height="15" fill="rgb(223,77,29)" fg:x="1242" fg:w="2"/><text x="96.0094%" y="319.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (107 samples, 8.25%)</title><rect x="87.7409%" y="421" width="8.2498%" height="15" fill="rgb(234,94,52)" fg:x="1138" fg:w="107"/><text x="87.9909%" y="431.50">&lt;regex::reg..</text></g><g><title>regex::builders::Builder::build_one_string (107 samples, 8.25%)</title><rect x="87.7409%" y="405" width="8.2498%" height="15" fill="rgb(220,154,50)" fg:x="1138" fg:w="107"/><text x="87.9909%" y="415.50">regex::buil..</text></g><g><title>regex_automata::meta::regex::Builder::build (106 samples, 8.17%)</title><rect x="87.8180%" y="389" width="8.1727%" height="15" fill="rgb(212,11,10)" fg:x="1139" fg:w="106"/><text x="88.0680%" y="399.50">regex_autom..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.39%)</title><rect x="95.6052%" y="373" width="0.3855%" height="15" fill="rgb(205,166,19)" fg:x="1240" fg:w="5"/><text x="95.8552%" y="383.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.39%)</title><rect x="95.6052%" y="357" width="0.3855%" height="15" fill="rgb(244,198,16)" fg:x="1240" fg:w="5"/><text x="95.8552%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.9136%" y="341" width="0.0771%" height="15" fill="rgb(219,69,12)" fg:x="1244" fg:w="1"/><text x="96.1636%" y="351.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="95.9136%" y="325" width="0.0771%" height="15" fill="rgb(245,30,7)" fg:x="1244" fg:w="1"/><text x="96.1636%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.15%)</title><rect x="95.9907%" y="421" width="0.1542%" height="15" fill="rgb(218,221,48)" fg:x="1245" fg:w="2"/><text x="96.2407%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.15%)</title><rect x="95.9907%" y="405" width="0.1542%" height="15" fill="rgb(216,66,15)" fg:x="1245" fg:w="2"/><text x="96.2407%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.15%)</title><rect x="95.9907%" y="389" width="0.1542%" height="15" fill="rgb(226,122,50)" fg:x="1245" fg:w="2"/><text x="96.2407%" y="399.50"></text></g><g><title>__libc_free (2 samples, 0.15%)</title><rect x="95.9907%" y="373" width="0.1542%" height="15" fill="rgb(239,156,16)" fg:x="1245" fg:w="2"/><text x="96.2407%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.15%)</title><rect x="96.1449%" y="405" width="0.1542%" height="15" fill="rgb(224,27,38)" fg:x="1247" fg:w="2"/><text x="96.3949%" y="415.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.15%)</title><rect x="96.1449%" y="389" width="0.1542%" height="15" fill="rgb(224,39,27)" fg:x="1247" fg:w="2"/><text x="96.3949%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="96.2221%" y="373" width="0.0771%" height="15" fill="rgb(215,92,29)" fg:x="1248" fg:w="1"/><text x="96.4721%" y="383.50"></text></g><g><title>regex_automata::dfa::onepass::Cache::new (1 samples, 0.08%)</title><rect x="96.4534%" y="357" width="0.0771%" height="15" fill="rgb(207,159,16)" fg:x="1251" fg:w="1"/><text x="96.7034%" y="367.50"></text></g><g><title>indefinite::rules::number::Number::check (115 samples, 8.87%)</title><rect x="87.7409%" y="437" width="8.8666%" height="15" fill="rgb(238,163,47)" fg:x="1138" fg:w="115"/><text x="87.9909%" y="447.50">indefinite::r..</text></g><g><title>regex::regex::string::Regex::is_match_at (6 samples, 0.46%)</title><rect x="96.1449%" y="421" width="0.4626%" height="15" fill="rgb(219,91,49)" fg:x="1247" fg:w="6"/><text x="96.3949%" y="431.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.31%)</title><rect x="96.2992%" y="405" width="0.3084%" height="15" fill="rgb(227,167,31)" fg:x="1249" fg:w="4"/><text x="96.5492%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.23%)</title><rect x="96.3763%" y="389" width="0.2313%" height="15" fill="rgb(234,80,54)" fg:x="1250" fg:w="3"/><text x="96.6263%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.23%)</title><rect x="96.3763%" y="373" width="0.2313%" height="15" fill="rgb(212,114,2)" fg:x="1250" fg:w="3"/><text x="96.6263%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="96.5305%" y="357" width="0.0771%" height="15" fill="rgb(234,50,24)" fg:x="1252" fg:w="1"/><text x="96.7805%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="96.5305%" y="341" width="0.0771%" height="15" fill="rgb(221,68,8)" fg:x="1252" fg:w="1"/><text x="96.7805%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.5305%" y="325" width="0.0771%" height="15" fill="rgb(254,180,31)" fg:x="1252" fg:w="1"/><text x="96.7805%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.5305%" y="309" width="0.0771%" height="15" fill="rgb(247,130,50)" fg:x="1252" fg:w="1"/><text x="96.7805%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.5305%" y="293" width="0.0771%" height="15" fill="rgb(211,109,4)" fg:x="1252" fg:w="1"/><text x="96.7805%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="96.6076%" y="357" width="0.0771%" height="15" fill="rgb(238,50,21)" fg:x="1253" fg:w="1"/><text x="96.8576%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.6076%" y="341" width="0.0771%" height="15" fill="rgb(225,57,45)" fg:x="1253" fg:w="1"/><text x="96.8576%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="96.6076%" y="325" width="0.0771%" height="15" fill="rgb(209,196,50)" fg:x="1253" fg:w="1"/><text x="96.8576%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.6076%" y="309" width="0.0771%" height="15" fill="rgb(242,140,13)" fg:x="1253" fg:w="1"/><text x="96.8576%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="96.6076%" y="293" width="0.0771%" height="15" fill="rgb(217,111,7)" fg:x="1253" fg:w="1"/><text x="96.8576%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.6076%" y="277" width="0.0771%" height="15" fill="rgb(253,193,51)" fg:x="1253" fg:w="1"/><text x="96.8576%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (1 samples, 0.08%)</title><rect x="96.6847%" y="357" width="0.0771%" height="15" fill="rgb(252,70,29)" fg:x="1254" fg:w="1"/><text x="96.9347%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.08%)</title><rect x="96.6847%" y="341" width="0.0771%" height="15" fill="rgb(232,127,12)" fg:x="1254" fg:w="1"/><text x="96.9347%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="96.6847%" y="325" width="0.0771%" height="15" fill="rgb(211,180,21)" fg:x="1254" fg:w="1"/><text x="96.9347%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="96.6847%" y="309" width="0.0771%" height="15" fill="rgb(229,72,13)" fg:x="1254" fg:w="1"/><text x="96.9347%" y="319.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (4 samples, 0.31%)</title><rect x="96.6076%" y="405" width="0.3084%" height="15" fill="rgb(240,211,49)" fg:x="1253" fg:w="4"/><text x="96.8576%" y="415.50"></text></g><g><title>regex::builders::Builder::build_one_string (4 samples, 0.31%)</title><rect x="96.6076%" y="389" width="0.3084%" height="15" fill="rgb(219,149,40)" fg:x="1253" fg:w="4"/><text x="96.8576%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (4 samples, 0.31%)</title><rect x="96.6076%" y="373" width="0.3084%" height="15" fill="rgb(210,127,46)" fg:x="1253" fg:w="4"/><text x="96.8576%" y="383.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.15%)</title><rect x="96.7618%" y="357" width="0.1542%" height="15" fill="rgb(220,106,7)" fg:x="1255" fg:w="2"/><text x="97.0118%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.15%)</title><rect x="96.7618%" y="341" width="0.1542%" height="15" fill="rgb(249,31,22)" fg:x="1255" fg:w="2"/><text x="97.0118%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.15%)</title><rect x="96.7618%" y="325" width="0.1542%" height="15" fill="rgb(253,1,49)" fg:x="1255" fg:w="2"/><text x="97.0118%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.15%)</title><rect x="96.7618%" y="309" width="0.1542%" height="15" fill="rgb(227,144,33)" fg:x="1255" fg:w="2"/><text x="97.0118%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="96.9160%" y="405" width="0.0771%" height="15" fill="rgb(249,163,44)" fg:x="1257" fg:w="1"/><text x="97.1660%" y="415.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="96.9160%" y="389" width="0.0771%" height="15" fill="rgb(234,15,39)" fg:x="1257" fg:w="1"/><text x="97.1660%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="96.9160%" y="373" width="0.0771%" height="15" fill="rgb(207,66,16)" fg:x="1257" fg:w="1"/><text x="97.1660%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.0702%" y="325" width="0.0771%" height="15" fill="rgb(233,112,24)" fg:x="1259" fg:w="1"/><text x="97.3202%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.23%)</title><rect x="96.9931%" y="357" width="0.2313%" height="15" fill="rgb(230,90,22)" fg:x="1258" fg:w="3"/><text x="97.2431%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.23%)</title><rect x="96.9931%" y="341" width="0.2313%" height="15" fill="rgb(229,61,13)" fg:x="1258" fg:w="3"/><text x="97.2431%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.1473%" y="325" width="0.0771%" height="15" fill="rgb(225,57,24)" fg:x="1260" fg:w="1"/><text x="97.3973%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.1473%" y="309" width="0.0771%" height="15" fill="rgb(208,169,48)" fg:x="1260" fg:w="1"/><text x="97.3973%" y="319.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (208 samples, 16.04%)</title><rect x="81.2645%" y="517" width="16.0370%" height="15" fill="rgb(244,218,51)" fg:x="1054" fg:w="208"/><text x="81.5145%" y="527.50">&lt;&amp;kernel::model::entry::E..</text></g><g><title>plugins_core::looking::model::qualify_name (206 samples, 15.88%)</title><rect x="81.4187%" y="501" width="15.8828%" height="15" fill="rgb(214,148,10)" fg:x="1056" fg:w="206"/><text x="81.6687%" y="511.50">plugins_core::looking::m..</text></g><g><title>indefinite::indefinite (206 samples, 15.88%)</title><rect x="81.4187%" y="485" width="15.8828%" height="15" fill="rgb(225,174,27)" fg:x="1056" fg:w="206"/><text x="81.6687%" y="495.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (205 samples, 15.81%)</title><rect x="81.4958%" y="469" width="15.8057%" height="15" fill="rgb(230,96,26)" fg:x="1057" fg:w="205"/><text x="81.7458%" y="479.50">indefinite::methods::ind..</text></g><g><title>indefinite::methods::apply_rules (204 samples, 15.73%)</title><rect x="81.5729%" y="453" width="15.7286%" height="15" fill="rgb(232,10,30)" fg:x="1058" fg:w="204"/><text x="81.8229%" y="463.50">indefinite::methods::app..</text></g><g><title>indefinite::rules::other::Other::run (9 samples, 0.69%)</title><rect x="96.6076%" y="437" width="0.6939%" height="15" fill="rgb(222,8,50)" fg:x="1253" fg:w="9"/><text x="96.8576%" y="447.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (9 samples, 0.69%)</title><rect x="96.6076%" y="421" width="0.6939%" height="15" fill="rgb(213,81,27)" fg:x="1253" fg:w="9"/><text x="96.8576%" y="431.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.31%)</title><rect x="96.9931%" y="405" width="0.3084%" height="15" fill="rgb(245,50,10)" fg:x="1258" fg:w="4"/><text x="97.2431%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.31%)</title><rect x="96.9931%" y="389" width="0.3084%" height="15" fill="rgb(216,100,18)" fg:x="1258" fg:w="4"/><text x="97.2431%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.31%)</title><rect x="96.9931%" y="373" width="0.3084%" height="15" fill="rgb(236,147,54)" fg:x="1258" fg:w="4"/><text x="97.2431%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="97.2244%" y="357" width="0.0771%" height="15" fill="rgb(205,143,26)" fg:x="1261" fg:w="1"/><text x="97.4744%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="97.2244%" y="341" width="0.0771%" height="15" fill="rgb(236,26,9)" fg:x="1261" fg:w="1"/><text x="97.4744%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.3015%" y="517" width="0.0771%" height="15" fill="rgb(221,165,53)" fg:x="1262" fg:w="1"/><text x="97.5515%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="97.3786%" y="517" width="0.0771%" height="15" fill="rgb(214,110,17)" fg:x="1263" fg:w="1"/><text x="97.6286%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.3786%" y="501" width="0.0771%" height="15" fill="rgb(237,197,12)" fg:x="1263" fg:w="1"/><text x="97.6286%" y="511.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="97.4557%" y="517" width="0.0771%" height="15" fill="rgb(205,84,17)" fg:x="1264" fg:w="1"/><text x="97.7057%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="97.4557%" y="501" width="0.0771%" height="15" fill="rgb(237,18,45)" fg:x="1264" fg:w="1"/><text x="97.7057%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="97.4557%" y="485" width="0.0771%" height="15" fill="rgb(221,87,14)" fg:x="1264" fg:w="1"/><text x="97.7057%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="97.4557%" y="469" width="0.0771%" height="15" fill="rgb(238,186,15)" fg:x="1264" fg:w="1"/><text x="97.7057%" y="479.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="97.4557%" y="453" width="0.0771%" height="15" fill="rgb(208,115,11)" fg:x="1264" fg:w="1"/><text x="97.7057%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="97.4557%" y="437" width="0.0771%" height="15" fill="rgb(254,175,0)" fg:x="1264" fg:w="1"/><text x="97.7057%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="97.4557%" y="421" width="0.0771%" height="15" fill="rgb(227,24,42)" fg:x="1264" fg:w="1"/><text x="97.7057%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="97.4557%" y="405" width="0.0771%" height="15" fill="rgb(223,211,37)" fg:x="1264" fg:w="1"/><text x="97.7057%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="97.4557%" y="389" width="0.0771%" height="15" fill="rgb(235,49,27)" fg:x="1264" fg:w="1"/><text x="97.7057%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="97.4557%" y="373" width="0.0771%" height="15" fill="rgb(254,97,51)" fg:x="1264" fg:w="1"/><text x="97.7057%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="97.4557%" y="357" width="0.0771%" height="15" fill="rgb(249,51,40)" fg:x="1264" fg:w="1"/><text x="97.7057%" y="367.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.15%)</title><rect x="97.5328%" y="485" width="0.1542%" height="15" fill="rgb(210,128,45)" fg:x="1265" fg:w="2"/><text x="97.7828%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="97.6099%" y="469" width="0.0771%" height="15" fill="rgb(224,137,50)" fg:x="1266" fg:w="1"/><text x="97.8599%" y="479.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (214 samples, 16.50%)</title><rect x="81.2645%" y="549" width="16.4996%" height="15" fill="rgb(242,15,9)" fg:x="1054" fg:w="214"/><text x="81.5145%" y="559.50">&lt;plugins_core::looking::a..</text></g><g><title>plugins_core::looking::model::new_area_observation (214 samples, 16.50%)</title><rect x="81.2645%" y="533" width="16.4996%" height="15" fill="rgb(233,187,41)" fg:x="1054" fg:w="214"/><text x="81.5145%" y="543.50">plugins_core::looking::mo..</text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.23%)</title><rect x="97.5328%" y="517" width="0.2313%" height="15" fill="rgb(227,2,29)" fg:x="1265" fg:w="3"/><text x="97.7828%" y="527.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.23%)</title><rect x="97.5328%" y="501" width="0.2313%" height="15" fill="rgb(222,70,3)" fg:x="1265" fg:w="3"/><text x="97.7828%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6870%" y="485" width="0.0771%" height="15" fill="rgb(213,11,42)" fg:x="1267" fg:w="1"/><text x="97.9370%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6870%" y="469" width="0.0771%" height="15" fill="rgb(225,150,9)" fg:x="1267" fg:w="1"/><text x="97.9370%" y="479.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="97.7641%" y="517" width="0.0771%" height="15" fill="rgb(230,162,45)" fg:x="1268" fg:w="1"/><text x="98.0141%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="97.7641%" y="501" width="0.0771%" height="15" fill="rgb(222,14,52)" fg:x="1268" fg:w="1"/><text x="98.0141%" y="511.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="97.7641%" y="485" width="0.0771%" height="15" fill="rgb(254,198,14)" fg:x="1268" fg:w="1"/><text x="98.0141%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.8412%" y="325" width="0.0771%" height="15" fill="rgb(220,217,30)" fg:x="1269" fg:w="1"/><text x="98.0912%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.8412%" y="309" width="0.0771%" height="15" fill="rgb(215,146,41)" fg:x="1269" fg:w="1"/><text x="98.0912%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.8412%" y="293" width="0.0771%" height="15" fill="rgb(217,27,36)" fg:x="1269" fg:w="1"/><text x="98.0912%" y="303.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.15%)</title><rect x="97.8412%" y="437" width="0.1542%" height="15" fill="rgb(219,218,39)" fg:x="1269" fg:w="2"/><text x="98.0912%" y="447.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.15%)</title><rect x="97.8412%" y="421" width="0.1542%" height="15" fill="rgb(219,4,42)" fg:x="1269" fg:w="2"/><text x="98.0912%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="97.8412%" y="405" width="0.1542%" height="15" fill="rgb(249,119,36)" fg:x="1269" fg:w="2"/><text x="98.0912%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="97.8412%" y="389" width="0.1542%" height="15" fill="rgb(209,23,33)" fg:x="1269" fg:w="2"/><text x="98.0912%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.15%)</title><rect x="97.8412%" y="373" width="0.1542%" height="15" fill="rgb(211,10,0)" fg:x="1269" fg:w="2"/><text x="98.0912%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="97.8412%" y="357" width="0.1542%" height="15" fill="rgb(208,99,37)" fg:x="1269" fg:w="2"/><text x="98.0912%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (2 samples, 0.15%)</title><rect x="97.8412%" y="341" width="0.1542%" height="15" fill="rgb(213,132,31)" fg:x="1269" fg:w="2"/><text x="98.0912%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.9183%" y="325" width="0.0771%" height="15" fill="rgb(243,129,40)" fg:x="1270" fg:w="1"/><text x="98.1683%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.9183%" y="309" width="0.0771%" height="15" fill="rgb(210,66,33)" fg:x="1270" fg:w="1"/><text x="98.1683%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.9183%" y="293" width="0.0771%" height="15" fill="rgb(209,189,4)" fg:x="1270" fg:w="1"/><text x="98.1683%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.9183%" y="277" width="0.0771%" height="15" fill="rgb(214,107,37)" fg:x="1270" fg:w="1"/><text x="98.1683%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.9183%" y="261" width="0.0771%" height="15" fill="rgb(245,88,54)" fg:x="1270" fg:w="1"/><text x="98.1683%" y="271.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (4 samples, 0.31%)</title><rect x="97.7641%" y="533" width="0.3084%" height="15" fill="rgb(205,146,20)" fg:x="1268" fg:w="4"/><text x="98.0141%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.23%)</title><rect x="97.8412%" y="517" width="0.2313%" height="15" fill="rgb(220,161,25)" fg:x="1269" fg:w="3"/><text x="98.0912%" y="527.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.23%)</title><rect x="97.8412%" y="501" width="0.2313%" height="15" fill="rgb(215,152,15)" fg:x="1269" fg:w="3"/><text x="98.0912%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.23%)</title><rect x="97.8412%" y="485" width="0.2313%" height="15" fill="rgb(233,192,44)" fg:x="1269" fg:w="3"/><text x="98.0912%" y="495.50"></text></g><g><title>engine::internal::Entities::prepare_entity (3 samples, 0.23%)</title><rect x="97.8412%" y="469" width="0.2313%" height="15" fill="rgb(240,170,46)" fg:x="1269" fg:w="3"/><text x="98.0912%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.23%)</title><rect x="97.8412%" y="453" width="0.2313%" height="15" fill="rgb(207,104,33)" fg:x="1269" fg:w="3"/><text x="98.0912%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="97.9954%" y="437" width="0.0771%" height="15" fill="rgb(219,21,39)" fg:x="1271" fg:w="1"/><text x="98.2454%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.9954%" y="421" width="0.0771%" height="15" fill="rgb(214,133,29)" fg:x="1271" fg:w="1"/><text x="98.2454%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9954%" y="405" width="0.0771%" height="15" fill="rgb(226,93,6)" fg:x="1271" fg:w="1"/><text x="98.2454%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.9954%" y="389" width="0.0771%" height="15" fill="rgb(252,222,34)" fg:x="1271" fg:w="1"/><text x="98.2454%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9954%" y="373" width="0.0771%" height="15" fill="rgb(252,92,48)" fg:x="1271" fg:w="1"/><text x="98.2454%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.9954%" y="357" width="0.0771%" height="15" fill="rgb(245,223,24)" fg:x="1271" fg:w="1"/><text x="98.2454%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9954%" y="341" width="0.0771%" height="15" fill="rgb(205,176,3)" fg:x="1271" fg:w="1"/><text x="98.2454%" y="351.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (5 samples, 0.39%)</title><rect x="97.7641%" y="549" width="0.3855%" height="15" fill="rgb(235,151,15)" fg:x="1268" fg:w="5"/><text x="98.0141%" y="559.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="98.0725%" y="533" width="0.0771%" height="15" fill="rgb(237,209,11)" fg:x="1272" fg:w="1"/><text x="98.3225%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="98.0725%" y="517" width="0.0771%" height="15" fill="rgb(243,227,24)" fg:x="1272" fg:w="1"/><text x="98.3225%" y="527.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="98.0725%" y="501" width="0.0771%" height="15" fill="rgb(239,193,16)" fg:x="1272" fg:w="1"/><text x="98.3225%" y="511.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="98.0725%" y="485" width="0.0771%" height="15" fill="rgb(231,27,9)" fg:x="1272" fg:w="1"/><text x="98.3225%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0725%" y="469" width="0.0771%" height="15" fill="rgb(219,169,10)" fg:x="1272" fg:w="1"/><text x="98.3225%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.1496%" y="485" width="0.0771%" height="15" fill="rgb(244,229,43)" fg:x="1273" fg:w="1"/><text x="98.3996%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.1496%" y="469" width="0.0771%" height="15" fill="rgb(254,38,20)" fg:x="1273" fg:w="1"/><text x="98.3996%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (2 samples, 0.15%)</title><rect x="98.1496%" y="517" width="0.1542%" height="15" fill="rgb(250,47,30)" fg:x="1273" fg:w="2"/><text x="98.3996%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.15%)</title><rect x="98.1496%" y="501" width="0.1542%" height="15" fill="rgb(224,124,36)" fg:x="1273" fg:w="2"/><text x="98.3996%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.2267%" y="485" width="0.0771%" height="15" fill="rgb(246,68,51)" fg:x="1274" fg:w="1"/><text x="98.4767%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.3038%" y="437" width="0.0771%" height="15" fill="rgb(253,43,49)" fg:x="1275" fg:w="1"/><text x="98.5538%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.3038%" y="421" width="0.0771%" height="15" fill="rgb(219,54,36)" fg:x="1275" fg:w="1"/><text x="98.5538%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3038%" y="405" width="0.0771%" height="15" fill="rgb(227,133,34)" fg:x="1275" fg:w="1"/><text x="98.5538%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.3809%" y="421" width="0.0771%" height="15" fill="rgb(247,227,15)" fg:x="1276" fg:w="1"/><text x="98.6309%" y="431.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (2 samples, 0.15%)</title><rect x="98.3809%" y="437" width="0.1542%" height="15" fill="rgb(229,96,14)" fg:x="1276" fg:w="2"/><text x="98.6309%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="98.4580%" y="421" width="0.0771%" height="15" fill="rgb(220,79,17)" fg:x="1277" fg:w="1"/><text x="98.7080%" y="431.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.4580%" y="405" width="0.0771%" height="15" fill="rgb(205,131,53)" fg:x="1277" fg:w="1"/><text x="98.7080%" y="415.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (1 samples, 0.08%)</title><rect x="98.4580%" y="389" width="0.0771%" height="15" fill="rgb(209,50,29)" fg:x="1277" fg:w="1"/><text x="98.7080%" y="399.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (1 samples, 0.08%)</title><rect x="98.4580%" y="373" width="0.0771%" height="15" fill="rgb(245,86,46)" fg:x="1277" fg:w="1"/><text x="98.7080%" y="383.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="98.4580%" y="357" width="0.0771%" height="15" fill="rgb(235,66,46)" fg:x="1277" fg:w="1"/><text x="98.7080%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="98.4580%" y="341" width="0.0771%" height="15" fill="rgb(232,148,31)" fg:x="1277" fg:w="1"/><text x="98.7080%" y="351.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="98.4580%" y="325" width="0.0771%" height="15" fill="rgb(217,149,8)" fg:x="1277" fg:w="1"/><text x="98.7080%" y="335.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="98.4580%" y="309" width="0.0771%" height="15" fill="rgb(209,183,11)" fg:x="1277" fg:w="1"/><text x="98.7080%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.4580%" y="293" width="0.0771%" height="15" fill="rgb(208,55,20)" fg:x="1277" fg:w="1"/><text x="98.7080%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="98.4580%" y="277" width="0.0771%" height="15" fill="rgb(218,39,14)" fg:x="1277" fg:w="1"/><text x="98.7080%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.5351%" y="213" width="0.0771%" height="15" fill="rgb(216,169,33)" fg:x="1278" fg:w="1"/><text x="98.7851%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5351%" y="197" width="0.0771%" height="15" fill="rgb(233,80,24)" fg:x="1278" fg:w="1"/><text x="98.7851%" y="207.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.5351%" y="181" width="0.0771%" height="15" fill="rgb(213,179,31)" fg:x="1278" fg:w="1"/><text x="98.7851%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5351%" y="165" width="0.0771%" height="15" fill="rgb(209,19,5)" fg:x="1278" fg:w="1"/><text x="98.7851%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.5351%" y="149" width="0.0771%" height="15" fill="rgb(219,18,35)" fg:x="1278" fg:w="1"/><text x="98.7851%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.5351%" y="133" width="0.0771%" height="15" fill="rgb(209,169,16)" fg:x="1278" fg:w="1"/><text x="98.7851%" y="143.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5351%" y="117" width="0.0771%" height="15" fill="rgb(245,90,51)" fg:x="1278" fg:w="1"/><text x="98.7851%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.5351%" y="101" width="0.0771%" height="15" fill="rgb(220,99,45)" fg:x="1278" fg:w="1"/><text x="98.7851%" y="111.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.5351%" y="85" width="0.0771%" height="15" fill="rgb(249,89,25)" fg:x="1278" fg:w="1"/><text x="98.7851%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.39%)</title><rect x="98.3038%" y="469" width="0.3855%" height="15" fill="rgb(239,193,0)" fg:x="1275" fg:w="5"/><text x="98.5538%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.39%)</title><rect x="98.3038%" y="453" width="0.3855%" height="15" fill="rgb(231,126,1)" fg:x="1275" fg:w="5"/><text x="98.5538%" y="463.50"></text></g><g><title>plugins_core::tools::get_contained_keys (2 samples, 0.15%)</title><rect x="98.5351%" y="437" width="0.1542%" height="15" fill="rgb(243,166,3)" fg:x="1278" fg:w="2"/><text x="98.7851%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.15%)</title><rect x="98.5351%" y="421" width="0.1542%" height="15" fill="rgb(223,22,34)" fg:x="1278" fg:w="2"/><text x="98.7851%" y="431.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.15%)</title><rect x="98.5351%" y="405" width="0.1542%" height="15" fill="rgb(251,52,51)" fg:x="1278" fg:w="2"/><text x="98.7851%" y="415.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.15%)</title><rect x="98.5351%" y="389" width="0.1542%" height="15" fill="rgb(221,165,28)" fg:x="1278" fg:w="2"/><text x="98.7851%" y="399.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.15%)</title><rect x="98.5351%" y="373" width="0.1542%" height="15" fill="rgb(218,121,47)" fg:x="1278" fg:w="2"/><text x="98.7851%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.15%)</title><rect x="98.5351%" y="357" width="0.1542%" height="15" fill="rgb(209,120,9)" fg:x="1278" fg:w="2"/><text x="98.7851%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.15%)</title><rect x="98.5351%" y="341" width="0.1542%" height="15" fill="rgb(236,68,12)" fg:x="1278" fg:w="2"/><text x="98.7851%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.15%)</title><rect x="98.5351%" y="325" width="0.1542%" height="15" fill="rgb(225,194,26)" fg:x="1278" fg:w="2"/><text x="98.7851%" y="335.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.15%)</title><rect x="98.5351%" y="309" width="0.1542%" height="15" fill="rgb(231,84,39)" fg:x="1278" fg:w="2"/><text x="98.7851%" y="319.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.15%)</title><rect x="98.5351%" y="293" width="0.1542%" height="15" fill="rgb(210,11,45)" fg:x="1278" fg:w="2"/><text x="98.7851%" y="303.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.15%)</title><rect x="98.5351%" y="277" width="0.1542%" height="15" fill="rgb(224,54,52)" fg:x="1278" fg:w="2"/><text x="98.7851%" y="287.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.15%)</title><rect x="98.5351%" y="261" width="0.1542%" height="15" fill="rgb(238,102,14)" fg:x="1278" fg:w="2"/><text x="98.7851%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="98.5351%" y="245" width="0.1542%" height="15" fill="rgb(243,160,52)" fg:x="1278" fg:w="2"/><text x="98.7851%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="98.5351%" y="229" width="0.1542%" height="15" fill="rgb(216,114,19)" fg:x="1278" fg:w="2"/><text x="98.7851%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.6122%" y="213" width="0.0771%" height="15" fill="rgb(244,166,37)" fg:x="1279" fg:w="1"/><text x="98.8622%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6122%" y="197" width="0.0771%" height="15" fill="rgb(246,29,44)" fg:x="1279" fg:w="1"/><text x="98.8622%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.8435%" y="325" width="0.0771%" height="15" fill="rgb(215,56,53)" fg:x="1282" fg:w="1"/><text x="99.0935%" y="335.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.8435%" y="309" width="0.0771%" height="15" fill="rgb(217,60,2)" fg:x="1282" fg:w="1"/><text x="99.0935%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.8435%" y="293" width="0.0771%" height="15" fill="rgb(207,26,24)" fg:x="1282" fg:w="1"/><text x="99.0935%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.8435%" y="277" width="0.0771%" height="15" fill="rgb(252,210,15)" fg:x="1282" fg:w="1"/><text x="99.0935%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8435%" y="261" width="0.0771%" height="15" fill="rgb(253,209,26)" fg:x="1282" fg:w="1"/><text x="99.0935%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.23%)</title><rect x="98.7664%" y="357" width="0.2313%" height="15" fill="rgb(238,170,14)" fg:x="1281" fg:w="3"/><text x="99.0164%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.15%)</title><rect x="98.8435%" y="341" width="0.1542%" height="15" fill="rgb(216,178,15)" fg:x="1282" fg:w="2"/><text x="99.0935%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.9206%" y="325" width="0.0771%" height="15" fill="rgb(250,197,2)" fg:x="1283" fg:w="1"/><text x="99.1706%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.9206%" y="309" width="0.0771%" height="15" fill="rgb(212,70,42)" fg:x="1283" fg:w="1"/><text x="99.1706%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.31%)</title><rect x="98.7664%" y="373" width="0.3084%" height="15" fill="rgb(227,213,9)" fg:x="1281" fg:w="4"/><text x="99.0164%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.9977%" y="357" width="0.0771%" height="15" fill="rgb(245,99,25)" fg:x="1284" fg:w="1"/><text x="99.2477%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.9977%" y="341" width="0.0771%" height="15" fill="rgb(250,82,29)" fg:x="1284" fg:w="1"/><text x="99.2477%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (6 samples, 0.46%)</title><rect x="98.7664%" y="405" width="0.4626%" height="15" fill="rgb(241,226,54)" fg:x="1281" fg:w="6"/><text x="99.0164%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (6 samples, 0.46%)</title><rect x="98.7664%" y="389" width="0.4626%" height="15" fill="rgb(221,99,41)" fg:x="1281" fg:w="6"/><text x="99.0164%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.15%)</title><rect x="99.0748%" y="373" width="0.1542%" height="15" fill="rgb(213,90,21)" fg:x="1285" fg:w="2"/><text x="99.3248%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.15%)</title><rect x="99.0748%" y="357" width="0.1542%" height="15" fill="rgb(205,208,24)" fg:x="1285" fg:w="2"/><text x="99.3248%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2290%" y="357" width="0.0771%" height="15" fill="rgb(246,31,12)" fg:x="1287" fg:w="1"/><text x="99.4790%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2290%" y="341" width="0.0771%" height="15" fill="rgb(213,154,6)" fg:x="1287" fg:w="1"/><text x="99.4790%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="99.2290%" y="325" width="0.0771%" height="15" fill="rgb(222,163,29)" fg:x="1287" fg:w="1"/><text x="99.4790%" y="335.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Version&gt;::serialize (1 samples, 0.08%)</title><rect x="99.3061%" y="357" width="0.0771%" height="15" fill="rgb(227,201,8)" fg:x="1288" fg:w="1"/><text x="99.5561%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.3832%" y="341" width="0.0771%" height="15" fill="rgb(233,9,32)" fg:x="1289" fg:w="1"/><text x="99.6332%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.4603%" y="309" width="0.0771%" height="15" fill="rgb(217,54,24)" fg:x="1290" fg:w="1"/><text x="99.7103%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.4603%" y="293" width="0.0771%" height="15" fill="rgb(235,192,0)" fg:x="1290" fg:w="1"/><text x="99.7103%" y="303.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (11 samples, 0.85%)</title><rect x="98.7664%" y="421" width="0.8481%" height="15" fill="rgb(235,45,9)" fg:x="1281" fg:w="11"/><text x="99.0164%" y="431.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (5 samples, 0.39%)</title><rect x="99.2290%" y="405" width="0.3855%" height="15" fill="rgb(246,42,40)" fg:x="1287" fg:w="5"/><text x="99.4790%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (5 samples, 0.39%)</title><rect x="99.2290%" y="389" width="0.3855%" height="15" fill="rgb(248,111,24)" fg:x="1287" fg:w="5"/><text x="99.4790%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.39%)</title><rect x="99.2290%" y="373" width="0.3855%" height="15" fill="rgb(249,65,22)" fg:x="1287" fg:w="5"/><text x="99.4790%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.23%)</title><rect x="99.3832%" y="357" width="0.2313%" height="15" fill="rgb(238,111,51)" fg:x="1289" fg:w="3"/><text x="99.6332%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.15%)</title><rect x="99.4603%" y="341" width="0.1542%" height="15" fill="rgb(250,118,22)" fg:x="1290" fg:w="2"/><text x="99.7103%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.15%)</title><rect x="99.4603%" y="325" width="0.1542%" height="15" fill="rgb(234,84,26)" fg:x="1290" fg:w="2"/><text x="99.7103%" y="335.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="99.5374%" y="309" width="0.0771%" height="15" fill="rgb(243,172,12)" fg:x="1291" fg:w="1"/><text x="99.7874%" y="319.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.5374%" y="293" width="0.0771%" height="15" fill="rgb(236,150,49)" fg:x="1291" fg:w="1"/><text x="99.7874%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.5374%" y="277" width="0.0771%" height="15" fill="rgb(225,197,26)" fg:x="1291" fg:w="1"/><text x="99.7874%" y="287.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.5374%" y="261" width="0.0771%" height="15" fill="rgb(214,17,42)" fg:x="1291" fg:w="1"/><text x="99.7874%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5374%" y="245" width="0.0771%" height="15" fill="rgb(224,165,40)" fg:x="1291" fg:w="1"/><text x="99.7874%" y="255.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (18 samples, 1.39%)</title><rect x="98.3038%" y="501" width="1.3878%" height="15" fill="rgb(246,100,4)" fg:x="1275" fg:w="18"/><text x="98.5538%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (18 samples, 1.39%)</title><rect x="98.3038%" y="485" width="1.3878%" height="15" fill="rgb(222,103,0)" fg:x="1275" fg:w="18"/><text x="98.5538%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (13 samples, 1.00%)</title><rect x="98.6893%" y="469" width="1.0023%" height="15" fill="rgb(227,189,26)" fg:x="1280" fg:w="13"/><text x="98.9393%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13 samples, 1.00%)</title><rect x="98.6893%" y="453" width="1.0023%" height="15" fill="rgb(214,202,17)" fg:x="1280" fg:w="13"/><text x="98.9393%" y="463.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (13 samples, 1.00%)</title><rect x="98.6893%" y="437" width="1.0023%" height="15" fill="rgb(229,111,3)" fg:x="1280" fg:w="13"/><text x="98.9393%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="99.6145%" y="421" width="0.0771%" height="15" fill="rgb(229,172,15)" fg:x="1292" fg:w="1"/><text x="99.8645%" y="431.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.6145%" y="405" width="0.0771%" height="15" fill="rgb(230,224,35)" fg:x="1292" fg:w="1"/><text x="99.8645%" y="415.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (240 samples, 18.50%)</title><rect x="81.2645%" y="565" width="18.5042%" height="15" fill="rgb(251,141,6)" fg:x="1054" fg:w="240"/><text x="81.5145%" y="575.50">&lt;engine::perform::StandardPer..</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (21 samples, 1.62%)</title><rect x="98.1496%" y="549" width="1.6191%" height="15" fill="rgb(225,208,6)" fg:x="1273" fg:w="21"/><text x="98.3996%" y="559.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (21 samples, 1.62%)</title><rect x="98.1496%" y="533" width="1.6191%" height="15" fill="rgb(246,181,16)" fg:x="1273" fg:w="21"/><text x="98.3996%" y="543.50"></text></g><g><title>plugins_rpc::querying::have_surroundings (19 samples, 1.46%)</title><rect x="98.3038%" y="517" width="1.4649%" height="15" fill="rgb(227,129,36)" fg:x="1275" fg:w="19"/><text x="98.5538%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.6916%" y="501" width="0.0771%" height="15" fill="rgb(248,117,24)" fg:x="1293" fg:w="1"/><text x="99.9416%" y="511.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (241 samples, 18.58%)</title><rect x="81.2645%" y="597" width="18.5813%" height="15" fill="rgb(214,185,35)" fg:x="1054" fg:w="241"/><text x="81.5145%" y="607.50">&lt;plugins_core::looking::Looki..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (241 samples, 18.58%)</title><rect x="81.2645%" y="581" width="18.5813%" height="15" fill="rgb(236,150,34)" fg:x="1054" fg:w="241"/><text x="81.5145%" y="591.50">&lt;engine::perform::StandardPer..</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (1 samples, 0.08%)</title><rect x="99.7687%" y="565" width="0.0771%" height="15" fill="rgb(243,228,27)" fg:x="1294" fg:w="1"/><text x="100.0187%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="99.7687%" y="549" width="0.0771%" height="15" fill="rgb(245,77,44)" fg:x="1294" fg:w="1"/><text x="100.0187%" y="559.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="99.7687%" y="533" width="0.0771%" height="15" fill="rgb(235,214,42)" fg:x="1294" fg:w="1"/><text x="100.0187%" y="543.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="99.7687%" y="517" width="0.0771%" height="15" fill="rgb(221,74,3)" fg:x="1294" fg:w="1"/><text x="100.0187%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="99.7687%" y="501" width="0.0771%" height="15" fill="rgb(206,121,29)" fg:x="1294" fg:w="1"/><text x="100.0187%" y="511.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="99.7687%" y="485" width="0.0771%" height="15" fill="rgb(249,131,53)" fg:x="1294" fg:w="1"/><text x="100.0187%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7687%" y="469" width="0.0771%" height="15" fill="rgb(236,170,29)" fg:x="1294" fg:w="1"/><text x="100.0187%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7687%" y="453" width="0.0771%" height="15" fill="rgb(247,96,15)" fg:x="1294" fg:w="1"/><text x="100.0187%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7687%" y="437" width="0.0771%" height="15" fill="rgb(211,210,7)" fg:x="1294" fg:w="1"/><text x="100.0187%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7687%" y="421" width="0.0771%" height="15" fill="rgb(240,88,50)" fg:x="1294" fg:w="1"/><text x="100.0187%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.7687%" y="405" width="0.0771%" height="15" fill="rgb(209,229,26)" fg:x="1294" fg:w="1"/><text x="100.0187%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7687%" y="389" width="0.0771%" height="15" fill="rgb(210,68,23)" fg:x="1294" fg:w="1"/><text x="100.0187%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7687%" y="373" width="0.0771%" height="15" fill="rgb(229,180,13)" fg:x="1294" fg:w="1"/><text x="100.0187%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7687%" y="357" width="0.0771%" height="15" fill="rgb(236,53,44)" fg:x="1294" fg:w="1"/><text x="100.0187%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7687%" y="341" width="0.0771%" height="15" fill="rgb(244,214,29)" fg:x="1294" fg:w="1"/><text x="100.0187%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7687%" y="325" width="0.0771%" height="15" fill="rgb(220,75,29)" fg:x="1294" fg:w="1"/><text x="100.0187%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.7687%" y="309" width="0.0771%" height="15" fill="rgb(214,183,37)" fg:x="1294" fg:w="1"/><text x="100.0187%" y="319.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (242 samples, 18.66%)</title><rect x="81.2645%" y="645" width="18.6584%" height="15" fill="rgb(239,117,29)" fg:x="1054" fg:w="242"/><text x="81.5145%" y="655.50">&lt;kernel::plugins::SessionPlug..</text></g><g><title>core::iter::adapters::try_process (242 samples, 18.66%)</title><rect x="81.2645%" y="629" width="18.6584%" height="15" fill="rgb(237,171,35)" fg:x="1054" fg:w="242"/><text x="81.5145%" y="639.50">core::iter::adapters::try_pro..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (242 samples, 18.66%)</title><rect x="81.2645%" y="613" width="18.6584%" height="15" fill="rgb(229,178,53)" fg:x="1054" fg:w="242"/><text x="81.5145%" y="623.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc:..</text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="99.8458%" y="597" width="0.0771%" height="15" fill="rgb(210,102,19)" fg:x="1295" fg:w="1"/><text x="100.0958%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::parser::GoActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="99.8458%" y="581" width="0.0771%" height="15" fill="rgb(235,127,22)" fg:x="1295" fg:w="1"/><text x="100.0958%" y="591.50"></text></g><g><title>all (1,297 samples, 100%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(244,31,31)" fg:x="0" fg:w="1297"/><text x="0.2500%" y="1039.50"></text></g><g><title>simple-bd24e590 (1,297 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(231,43,21)" fg:x="0" fg:w="1297"/><text x="0.2500%" y="1023.50">simple-bd24e590</text></g><g><title>_start (1,297 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(217,131,35)" fg:x="0" fg:w="1297"/><text x="0.2500%" y="1007.50">_start</text></g><g><title>__libc_start_main (1,297 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(221,149,4)" fg:x="0" fg:w="1297"/><text x="0.2500%" y="991.50">__libc_start_main</text></g><g><title>main (1,297 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(232,170,28)" fg:x="0" fg:w="1297"/><text x="0.2500%" y="975.50">main</text></g><g><title>std::rt::lang_start_internal (1,297 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(238,56,10)" fg:x="0" fg:w="1297"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,297 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(235,196,14)" fg:x="0" fg:w="1297"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,297 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(216,45,48)" fg:x="0" fg:w="1297"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,297 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(238,213,17)" fg:x="0" fg:w="1297"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,297 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(212,13,2)" fg:x="0" fg:w="1297"/><text x="0.2500%" y="895.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,297 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(240,114,20)" fg:x="0" fg:w="1297"/><text x="0.2500%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,297 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(228,41,40)" fg:x="0" fg:w="1297"/><text x="0.2500%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,297 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(244,132,35)" fg:x="0" fg:w="1297"/><text x="0.2500%" y="847.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,297 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(253,189,4)" fg:x="0" fg:w="1297"/><text x="0.2500%" y="831.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,297 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(224,37,19)" fg:x="0" fg:w="1297"/><text x="0.2500%" y="815.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,297 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(235,223,18)" fg:x="0" fg:w="1297"/><text x="0.2500%" y="799.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,297 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(235,163,25)" fg:x="0" fg:w="1297"/><text x="0.2500%" y="783.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,297 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(217,145,28)" fg:x="0" fg:w="1297"/><text x="0.2500%" y="767.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,297 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(223,223,32)" fg:x="0" fg:w="1297"/><text x="0.2500%" y="751.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (281 samples, 21.67%)</title><rect x="78.3346%" y="725" width="21.6654%" height="15" fill="rgb(227,189,39)" fg:x="1016" fg:w="281"/><text x="78.5846%" y="735.50">&lt;criterion::routine::Function&lt;M,F,..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (281 samples, 21.67%)</title><rect x="78.3346%" y="709" width="21.6654%" height="15" fill="rgb(248,10,22)" fg:x="1016" fg:w="281"/><text x="78.5846%" y="719.50">criterion::bencher::Bencher&lt;M&gt;::it..</text></g><g><title>tests::evaluate_text_in_new_domain (281 samples, 21.67%)</title><rect x="78.3346%" y="693" width="21.6654%" height="15" fill="rgb(248,46,39)" fg:x="1016" fg:w="281"/><text x="78.5846%" y="703.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (243 samples, 18.74%)</title><rect x="81.2645%" y="677" width="18.7355%" height="15" fill="rgb(248,113,48)" fg:x="1054" fg:w="243"/><text x="81.5145%" y="687.50">engine::session::Session::eva..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (243 samples, 18.74%)</title><rect x="81.2645%" y="661" width="18.7355%" height="15" fill="rgb(245,16,25)" fg:x="1054" fg:w="243"/><text x="81.5145%" y="671.50">engine::perform::StandardPerf..</text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.9229%" y="645" width="0.0771%" height="15" fill="rgb(249,152,16)" fg:x="1296" fg:w="1"/><text x="100.1729%" y="655.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="99.9229%" y="629" width="0.0771%" height="15" fill="rgb(250,16,1)" fg:x="1296" fg:w="1"/><text x="100.1729%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="99.9229%" y="613" width="0.0771%" height="15" fill="rgb(249,138,3)" fg:x="1296" fg:w="1"/><text x="100.1729%" y="623.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="99.9229%" y="597" width="0.0771%" height="15" fill="rgb(227,71,41)" fg:x="1296" fg:w="1"/><text x="100.1729%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="99.9229%" y="581" width="0.0771%" height="15" fill="rgb(209,184,23)" fg:x="1296" fg:w="1"/><text x="100.1729%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="99.9229%" y="565" width="0.0771%" height="15" fill="rgb(223,215,31)" fg:x="1296" fg:w="1"/><text x="100.1729%" y="575.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="99.9229%" y="549" width="0.0771%" height="15" fill="rgb(210,146,28)" fg:x="1296" fg:w="1"/><text x="100.1729%" y="559.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="99.9229%" y="533" width="0.0771%" height="15" fill="rgb(209,183,41)" fg:x="1296" fg:w="1"/><text x="100.1729%" y="543.50"></text></g></svg></svg>