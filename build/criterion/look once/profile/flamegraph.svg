<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1062" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1045.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1045.00"> </text><svg id="frames" x="10" width="1180" total_samples="1261"><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.0793%" y="645" width="0.0793%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.3293%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0793%" y="629" width="0.0793%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.3293%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2379%" y="549" width="0.0793%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.4879%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.3172%" y="549" width="0.0793%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.5672%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3172%" y="533" width="0.0793%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="1"/><text x="0.5672%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.3965%" y="533" width="0.0793%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="1"/><text x="0.6465%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.3965%" y="517" width="0.0793%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="1"/><text x="0.6465%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3965%" y="501" width="0.0793%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="1"/><text x="0.6465%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.4758%" y="533" width="0.0793%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="1"/><text x="0.7258%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4758%" y="517" width="0.0793%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="1"/><text x="0.7258%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.1586%" y="581" width="0.5551%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="7"/><text x="0.4086%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.1586%" y="565" width="0.5551%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="7"/><text x="0.4086%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.3965%" y="549" width="0.3172%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="4"/><text x="0.6465%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.5551%" y="533" width="0.1586%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="2"/><text x="0.8051%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.5551%" y="517" width="0.1586%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="2"/><text x="0.8051%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.6344%" y="501" width="0.0793%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="1"/><text x="0.8844%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6344%" y="485" width="0.0793%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="1"/><text x="0.8844%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.79%)</title><rect x="0.0000%" y="661" width="0.7930%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="10"/><text x="0.2500%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::state::State&gt;&gt; (8 samples, 0.63%)</title><rect x="0.1586%" y="645" width="0.6344%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="8"/><text x="0.4086%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.63%)</title><rect x="0.1586%" y="629" width="0.6344%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="8"/><text x="0.4086%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (8 samples, 0.63%)</title><rect x="0.1586%" y="613" width="0.6344%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="8"/><text x="0.4086%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.63%)</title><rect x="0.1586%" y="597" width="0.6344%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="8"/><text x="0.4086%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7137%" y="581" width="0.0793%" height="15" fill="rgb(221,5,38)" fg:x="9" fg:w="1"/><text x="0.9637%" y="591.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="0.7930%" y="565" width="0.0793%" height="15" fill="rgb(247,18,42)" fg:x="10" fg:w="1"/><text x="1.0430%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.7930%" y="549" width="0.0793%" height="15" fill="rgb(241,131,45)" fg:x="10" fg:w="1"/><text x="1.0430%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.7930%" y="533" width="0.0793%" height="15" fill="rgb(249,31,29)" fg:x="10" fg:w="1"/><text x="1.0430%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.7930%" y="517" width="0.0793%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="1"/><text x="1.0430%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.7930%" y="501" width="0.0793%" height="15" fill="rgb(238,160,17)" fg:x="10" fg:w="1"/><text x="1.0430%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="0.7930%" y="485" width="0.0793%" height="15" fill="rgb(214,148,48)" fg:x="10" fg:w="1"/><text x="1.0430%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="0.7930%" y="629" width="0.1586%" height="15" fill="rgb(232,36,49)" fg:x="10" fg:w="2"/><text x="1.0430%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="0.7930%" y="613" width="0.1586%" height="15" fill="rgb(209,103,24)" fg:x="10" fg:w="2"/><text x="1.0430%" y="623.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="0.7930%" y="597" width="0.1586%" height="15" fill="rgb(229,88,8)" fg:x="10" fg:w="2"/><text x="1.0430%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::from_str (2 samples, 0.16%)</title><rect x="0.7930%" y="581" width="0.1586%" height="15" fill="rgb(213,181,19)" fg:x="10" fg:w="2"/><text x="1.0430%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.8723%" y="565" width="0.0793%" height="15" fill="rgb(254,191,54)" fg:x="11" fg:w="1"/><text x="1.1223%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.8723%" y="549" width="0.0793%" height="15" fill="rgb(241,83,37)" fg:x="11" fg:w="1"/><text x="1.1223%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.8723%" y="533" width="0.0793%" height="15" fill="rgb(233,36,39)" fg:x="11" fg:w="1"/><text x="1.1223%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.8723%" y="517" width="0.0793%" height="15" fill="rgb(226,3,54)" fg:x="11" fg:w="1"/><text x="1.1223%" y="527.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="0.9516%" y="581" width="0.1586%" height="15" fill="rgb(245,192,40)" fg:x="12" fg:w="2"/><text x="1.2016%" y="591.50"></text></g><g><title>__asprintf (2 samples, 0.16%)</title><rect x="0.9516%" y="565" width="0.1586%" height="15" fill="rgb(238,167,29)" fg:x="12" fg:w="2"/><text x="1.2016%" y="575.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (6 samples, 0.48%)</title><rect x="0.9516%" y="629" width="0.4758%" height="15" fill="rgb(232,182,51)" fg:x="12" fg:w="6"/><text x="1.2016%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.48%)</title><rect x="0.9516%" y="613" width="0.4758%" height="15" fill="rgb(231,60,39)" fg:x="12" fg:w="6"/><text x="1.2016%" y="623.50"></text></g><g><title>libloading::os::unix::Library::open (6 samples, 0.48%)</title><rect x="0.9516%" y="597" width="0.4758%" height="15" fill="rgb(208,69,12)" fg:x="12" fg:w="6"/><text x="1.2016%" y="607.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="1.1102%" y="581" width="0.3172%" height="15" fill="rgb(235,93,37)" fg:x="14" fg:w="4"/><text x="1.3602%" y="591.50"></text></g><g><title>_dl_catch_error (4 samples, 0.32%)</title><rect x="1.1102%" y="565" width="0.3172%" height="15" fill="rgb(213,116,39)" fg:x="14" fg:w="4"/><text x="1.3602%" y="575.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.1102%" y="549" width="0.3172%" height="15" fill="rgb(222,207,29)" fg:x="14" fg:w="4"/><text x="1.3602%" y="559.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.1102%" y="533" width="0.3172%" height="15" fill="rgb(206,96,30)" fg:x="14" fg:w="4"/><text x="1.3602%" y="543.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.1102%" y="517" width="0.3172%" height="15" fill="rgb(218,138,4)" fg:x="14" fg:w="4"/><text x="1.3602%" y="527.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (10 samples, 0.79%)</title><rect x="0.7930%" y="661" width="0.7930%" height="15" fill="rgb(250,191,14)" fg:x="10" fg:w="10"/><text x="1.0430%" y="671.50"></text></g><g><title>engine::session::Session::new (10 samples, 0.79%)</title><rect x="0.7930%" y="645" width="0.7930%" height="15" fill="rgb(239,60,40)" fg:x="10" fg:w="10"/><text x="1.0430%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="1.4274%" y="629" width="0.1586%" height="15" fill="rgb(206,27,48)" fg:x="18" fg:w="2"/><text x="1.6774%" y="639.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="1.4274%" y="613" width="0.1586%" height="15" fill="rgb(225,35,8)" fg:x="18" fg:w="2"/><text x="1.6774%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="1.4274%" y="597" width="0.1586%" height="15" fill="rgb(250,213,24)" fg:x="18" fg:w="2"/><text x="1.6774%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.5067%" y="581" width="0.0793%" height="15" fill="rgb(247,123,22)" fg:x="19" fg:w="1"/><text x="1.7567%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.5067%" y="565" width="0.0793%" height="15" fill="rgb(231,138,38)" fg:x="19" fg:w="1"/><text x="1.7567%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.5067%" y="549" width="0.0793%" height="15" fill="rgb(231,145,46)" fg:x="19" fg:w="1"/><text x="1.7567%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="1.5860%" y="613" width="0.0793%" height="15" fill="rgb(251,118,11)" fg:x="20" fg:w="1"/><text x="1.8360%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="1.5860%" y="597" width="0.0793%" height="15" fill="rgb(217,147,25)" fg:x="20" fg:w="1"/><text x="1.8360%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5860%" y="581" width="0.0793%" height="15" fill="rgb(247,81,37)" fg:x="20" fg:w="1"/><text x="1.8360%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="1.6653%" y="565" width="0.3172%" height="15" fill="rgb(209,12,38)" fg:x="21" fg:w="4"/><text x="1.9153%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="1.6653%" y="549" width="0.3172%" height="15" fill="rgb(227,1,9)" fg:x="21" fg:w="4"/><text x="1.9153%" y="559.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="1.6653%" y="533" width="0.3172%" height="15" fill="rgb(248,47,43)" fg:x="21" fg:w="4"/><text x="1.9153%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="1.7446%" y="517" width="0.2379%" height="15" fill="rgb(221,10,30)" fg:x="22" fg:w="3"/><text x="1.9946%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="1.8239%" y="501" width="0.1586%" height="15" fill="rgb(210,229,1)" fg:x="23" fg:w="2"/><text x="2.0739%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.9033%" y="485" width="0.0793%" height="15" fill="rgb(222,148,37)" fg:x="24" fg:w="1"/><text x="2.1533%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.9033%" y="469" width="0.0793%" height="15" fill="rgb(234,67,33)" fg:x="24" fg:w="1"/><text x="2.1533%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.9033%" y="453" width="0.0793%" height="15" fill="rgb(247,98,35)" fg:x="24" fg:w="1"/><text x="2.1533%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="1.9826%" y="549" width="0.0793%" height="15" fill="rgb(247,138,52)" fg:x="25" fg:w="1"/><text x="2.2326%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="2.0619%" y="533" width="0.1586%" height="15" fill="rgb(213,79,30)" fg:x="26" fg:w="2"/><text x="2.3119%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.0619%" y="517" width="0.1586%" height="15" fill="rgb(246,177,23)" fg:x="26" fg:w="2"/><text x="2.3119%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.1412%" y="501" width="0.0793%" height="15" fill="rgb(230,62,27)" fg:x="27" fg:w="1"/><text x="2.3912%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.1412%" y="485" width="0.0793%" height="15" fill="rgb(216,154,8)" fg:x="27" fg:w="1"/><text x="2.3912%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.2205%" y="533" width="0.0793%" height="15" fill="rgb(244,35,45)" fg:x="28" fg:w="1"/><text x="2.4705%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.2205%" y="517" width="0.0793%" height="15" fill="rgb(251,115,12)" fg:x="28" fg:w="1"/><text x="2.4705%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.2205%" y="501" width="0.0793%" height="15" fill="rgb(240,54,50)" fg:x="28" fg:w="1"/><text x="2.4705%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.2205%" y="485" width="0.0793%" height="15" fill="rgb(233,84,52)" fg:x="28" fg:w="1"/><text x="2.4705%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.2998%" y="517" width="0.0793%" height="15" fill="rgb(207,117,47)" fg:x="29" fg:w="1"/><text x="2.5498%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.3791%" y="517" width="0.0793%" height="15" fill="rgb(249,43,39)" fg:x="30" fg:w="1"/><text x="2.6291%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.95%)</title><rect x="1.6653%" y="581" width="0.9516%" height="15" fill="rgb(209,38,44)" fg:x="21" fg:w="12"/><text x="1.9153%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.63%)</title><rect x="1.9826%" y="565" width="0.6344%" height="15" fill="rgb(236,212,23)" fg:x="25" fg:w="8"/><text x="2.2326%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="2.0619%" y="549" width="0.5551%" height="15" fill="rgb(242,79,21)" fg:x="26" fg:w="7"/><text x="2.3119%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="2.2998%" y="533" width="0.3172%" height="15" fill="rgb(211,96,35)" fg:x="29" fg:w="4"/><text x="2.5498%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.4584%" y="517" width="0.1586%" height="15" fill="rgb(253,215,40)" fg:x="31" fg:w="2"/><text x="2.7084%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.4584%" y="501" width="0.1586%" height="15" fill="rgb(211,81,21)" fg:x="31" fg:w="2"/><text x="2.7084%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="2.4584%" y="485" width="0.1586%" height="15" fill="rgb(208,190,38)" fg:x="31" fg:w="2"/><text x="2.7084%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.5377%" y="469" width="0.0793%" height="15" fill="rgb(235,213,38)" fg:x="32" fg:w="1"/><text x="2.7877%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.5377%" y="453" width="0.0793%" height="15" fill="rgb(237,122,38)" fg:x="32" fg:w="1"/><text x="2.7877%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.5377%" y="437" width="0.0793%" height="15" fill="rgb(244,218,35)" fg:x="32" fg:w="1"/><text x="2.7877%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="2.6170%" y="501" width="0.1586%" height="15" fill="rgb(240,68,47)" fg:x="33" fg:w="2"/><text x="2.8670%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.6963%" y="485" width="0.0793%" height="15" fill="rgb(210,16,53)" fg:x="34" fg:w="1"/><text x="2.9463%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="2.6170%" y="581" width="0.2379%" height="15" fill="rgb(235,124,12)" fg:x="33" fg:w="3"/><text x="2.8670%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="2.6170%" y="565" width="0.2379%" height="15" fill="rgb(224,169,11)" fg:x="33" fg:w="3"/><text x="2.8670%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="2.6170%" y="549" width="0.2379%" height="15" fill="rgb(250,166,2)" fg:x="33" fg:w="3"/><text x="2.8670%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="2.6170%" y="533" width="0.2379%" height="15" fill="rgb(242,216,29)" fg:x="33" fg:w="3"/><text x="2.8670%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="2.6170%" y="517" width="0.2379%" height="15" fill="rgb(230,116,27)" fg:x="33" fg:w="3"/><text x="2.8670%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.7756%" y="501" width="0.0793%" height="15" fill="rgb(228,99,48)" fg:x="35" fg:w="1"/><text x="3.0256%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.7756%" y="485" width="0.0793%" height="15" fill="rgb(253,11,6)" fg:x="35" fg:w="1"/><text x="3.0256%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.7756%" y="469" width="0.0793%" height="15" fill="rgb(247,143,39)" fg:x="35" fg:w="1"/><text x="3.0256%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.7756%" y="453" width="0.0793%" height="15" fill="rgb(236,97,10)" fg:x="35" fg:w="1"/><text x="3.0256%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.7756%" y="437" width="0.0793%" height="15" fill="rgb(233,208,19)" fg:x="35" fg:w="1"/><text x="3.0256%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="2.9342%" y="517" width="0.0793%" height="15" fill="rgb(216,164,2)" fg:x="37" fg:w="1"/><text x="3.1842%" y="527.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.51%)</title><rect x="1.5860%" y="645" width="1.5067%" height="15" fill="rgb(220,129,5)" fg:x="20" fg:w="19"/><text x="1.8360%" y="655.50"></text></g><g><title>engine::session::Session::save_entity_changes (19 samples, 1.51%)</title><rect x="1.5860%" y="629" width="1.5067%" height="15" fill="rgb(242,17,10)" fg:x="20" fg:w="19"/><text x="1.8360%" y="639.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (18 samples, 1.43%)</title><rect x="1.6653%" y="613" width="1.4274%" height="15" fill="rgb(242,107,0)" fg:x="21" fg:w="18"/><text x="1.9153%" y="623.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (18 samples, 1.43%)</title><rect x="1.6653%" y="597" width="1.4274%" height="15" fill="rgb(251,28,31)" fg:x="21" fg:w="18"/><text x="1.9153%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="2.8549%" y="581" width="0.2379%" height="15" fill="rgb(233,223,10)" fg:x="36" fg:w="3"/><text x="3.1049%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="2.8549%" y="565" width="0.2379%" height="15" fill="rgb(215,21,27)" fg:x="36" fg:w="3"/><text x="3.1049%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="2.8549%" y="549" width="0.2379%" height="15" fill="rgb(232,23,21)" fg:x="36" fg:w="3"/><text x="3.1049%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="2.9342%" y="533" width="0.1586%" height="15" fill="rgb(244,5,23)" fg:x="37" fg:w="2"/><text x="3.1842%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="3.0135%" y="517" width="0.0793%" height="15" fill="rgb(226,81,46)" fg:x="38" fg:w="1"/><text x="3.2635%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.0135%" y="501" width="0.0793%" height="15" fill="rgb(247,70,30)" fg:x="38" fg:w="1"/><text x="3.2635%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0135%" y="485" width="0.0793%" height="15" fill="rgb(212,68,19)" fg:x="38" fg:w="1"/><text x="3.2635%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.0135%" y="469" width="0.0793%" height="15" fill="rgb(240,187,13)" fg:x="38" fg:w="1"/><text x="3.2635%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.0928%" y="629" width="0.0793%" height="15" fill="rgb(223,113,26)" fg:x="39" fg:w="1"/><text x="3.3428%" y="639.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.0928%" y="613" width="0.0793%" height="15" fill="rgb(206,192,2)" fg:x="39" fg:w="1"/><text x="3.3428%" y="623.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.0928%" y="597" width="0.0793%" height="15" fill="rgb(241,108,4)" fg:x="39" fg:w="1"/><text x="3.3428%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="3.0928%" y="581" width="0.0793%" height="15" fill="rgb(247,173,49)" fg:x="39" fg:w="1"/><text x="3.3428%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.0928%" y="565" width="0.0793%" height="15" fill="rgb(224,114,35)" fg:x="39" fg:w="1"/><text x="3.3428%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.0928%" y="549" width="0.0793%" height="15" fill="rgb(245,159,27)" fg:x="39" fg:w="1"/><text x="3.3428%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.0928%" y="533" width="0.0793%" height="15" fill="rgb(245,172,44)" fg:x="39" fg:w="1"/><text x="3.3428%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.0928%" y="517" width="0.0793%" height="15" fill="rgb(236,23,11)" fg:x="39" fg:w="1"/><text x="3.3428%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.0928%" y="501" width="0.0793%" height="15" fill="rgb(205,117,38)" fg:x="39" fg:w="1"/><text x="3.3428%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.0928%" y="485" width="0.0793%" height="15" fill="rgb(237,72,25)" fg:x="39" fg:w="1"/><text x="3.3428%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.0928%" y="469" width="0.0793%" height="15" fill="rgb(244,70,9)" fg:x="39" fg:w="1"/><text x="3.3428%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.0928%" y="453" width="0.0793%" height="15" fill="rgb(217,125,39)" fg:x="39" fg:w="1"/><text x="3.3428%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.0928%" y="437" width="0.0793%" height="15" fill="rgb(235,36,10)" fg:x="39" fg:w="1"/><text x="3.3428%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.0928%" y="421" width="0.0793%" height="15" fill="rgb(251,123,47)" fg:x="39" fg:w="1"/><text x="3.3428%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.0928%" y="405" width="0.0793%" height="15" fill="rgb(221,13,13)" fg:x="39" fg:w="1"/><text x="3.3428%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.0928%" y="389" width="0.0793%" height="15" fill="rgb(238,131,9)" fg:x="39" fg:w="1"/><text x="3.3428%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.1721%" y="501" width="0.0793%" height="15" fill="rgb(211,50,8)" fg:x="40" fg:w="1"/><text x="3.4221%" y="511.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="3.1721%" y="613" width="0.1586%" height="15" fill="rgb(245,182,24)" fg:x="40" fg:w="2"/><text x="3.4221%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="3.1721%" y="597" width="0.1586%" height="15" fill="rgb(242,14,37)" fg:x="40" fg:w="2"/><text x="3.4221%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.1721%" y="581" width="0.1586%" height="15" fill="rgb(246,228,12)" fg:x="40" fg:w="2"/><text x="3.4221%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="3.1721%" y="565" width="0.1586%" height="15" fill="rgb(213,55,15)" fg:x="40" fg:w="2"/><text x="3.4221%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="3.1721%" y="549" width="0.1586%" height="15" fill="rgb(209,9,3)" fg:x="40" fg:w="2"/><text x="3.4221%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (2 samples, 0.16%)</title><rect x="3.1721%" y="533" width="0.1586%" height="15" fill="rgb(230,59,30)" fg:x="40" fg:w="2"/><text x="3.4221%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="3.1721%" y="517" width="0.1586%" height="15" fill="rgb(209,121,21)" fg:x="40" fg:w="2"/><text x="3.4221%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.2514%" y="501" width="0.0793%" height="15" fill="rgb(220,109,13)" fg:x="41" fg:w="1"/><text x="3.5014%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.2514%" y="485" width="0.0793%" height="15" fill="rgb(232,18,1)" fg:x="41" fg:w="1"/><text x="3.5014%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.2514%" y="469" width="0.0793%" height="15" fill="rgb(215,41,42)" fg:x="41" fg:w="1"/><text x="3.5014%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.2514%" y="453" width="0.0793%" height="15" fill="rgb(224,123,36)" fg:x="41" fg:w="1"/><text x="3.5014%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.2514%" y="437" width="0.0793%" height="15" fill="rgb(240,125,3)" fg:x="41" fg:w="1"/><text x="3.5014%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="3.3307%" y="549" width="0.0793%" height="15" fill="rgb(205,98,50)" fg:x="42" fg:w="1"/><text x="3.5807%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.3307%" y="533" width="0.0793%" height="15" fill="rgb(205,185,37)" fg:x="42" fg:w="1"/><text x="3.5807%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.3307%" y="565" width="0.1586%" height="15" fill="rgb(238,207,15)" fg:x="42" fg:w="2"/><text x="3.5807%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.4100%" y="549" width="0.0793%" height="15" fill="rgb(213,199,42)" fg:x="43" fg:w="1"/><text x="3.6600%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.4100%" y="533" width="0.0793%" height="15" fill="rgb(235,201,11)" fg:x="43" fg:w="1"/><text x="3.6600%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.4100%" y="517" width="0.0793%" height="15" fill="rgb(207,46,11)" fg:x="43" fg:w="1"/><text x="3.6600%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.4100%" y="501" width="0.0793%" height="15" fill="rgb(241,35,35)" fg:x="43" fg:w="1"/><text x="3.6600%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.4100%" y="485" width="0.0793%" height="15" fill="rgb(243,32,47)" fg:x="43" fg:w="1"/><text x="3.6600%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.4100%" y="469" width="0.0793%" height="15" fill="rgb(247,202,23)" fg:x="43" fg:w="1"/><text x="3.6600%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.4100%" y="453" width="0.0793%" height="15" fill="rgb(219,102,11)" fg:x="43" fg:w="1"/><text x="3.6600%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.4100%" y="437" width="0.0793%" height="15" fill="rgb(243,110,44)" fg:x="43" fg:w="1"/><text x="3.6600%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.4100%" y="421" width="0.0793%" height="15" fill="rgb(222,74,54)" fg:x="43" fg:w="1"/><text x="3.6600%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.4100%" y="405" width="0.0793%" height="15" fill="rgb(216,99,12)" fg:x="43" fg:w="1"/><text x="3.6600%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.4100%" y="389" width="0.0793%" height="15" fill="rgb(226,22,26)" fg:x="43" fg:w="1"/><text x="3.6600%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.4100%" y="373" width="0.0793%" height="15" fill="rgb(217,163,10)" fg:x="43" fg:w="1"/><text x="3.6600%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.4100%" y="357" width="0.0793%" height="15" fill="rgb(213,25,53)" fg:x="43" fg:w="1"/><text x="3.6600%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.4100%" y="341" width="0.0793%" height="15" fill="rgb(252,105,26)" fg:x="43" fg:w="1"/><text x="3.6600%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.4100%" y="325" width="0.0793%" height="15" fill="rgb(220,39,43)" fg:x="43" fg:w="1"/><text x="3.6600%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.4100%" y="309" width="0.0793%" height="15" fill="rgb(229,68,48)" fg:x="43" fg:w="1"/><text x="3.6600%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.4100%" y="293" width="0.0793%" height="15" fill="rgb(252,8,32)" fg:x="43" fg:w="1"/><text x="3.6600%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.4100%" y="277" width="0.0793%" height="15" fill="rgb(223,20,43)" fg:x="43" fg:w="1"/><text x="3.6600%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.4893%" y="501" width="0.0793%" height="15" fill="rgb(229,81,49)" fg:x="44" fg:w="1"/><text x="3.7393%" y="511.50"></text></g><g><title>plugins_core::build::Build::holding (7 samples, 0.56%)</title><rect x="3.0928%" y="645" width="0.5551%" height="15" fill="rgb(236,28,36)" fg:x="39" fg:w="7"/><text x="3.3428%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="3.1721%" y="629" width="0.4758%" height="15" fill="rgb(249,185,26)" fg:x="40" fg:w="6"/><text x="3.4221%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="3.3307%" y="613" width="0.3172%" height="15" fill="rgb(249,174,33)" fg:x="42" fg:w="4"/><text x="3.5807%" y="623.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (4 samples, 0.32%)</title><rect x="3.3307%" y="597" width="0.3172%" height="15" fill="rgb(233,201,37)" fg:x="42" fg:w="4"/><text x="3.5807%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (4 samples, 0.32%)</title><rect x="3.3307%" y="581" width="0.3172%" height="15" fill="rgb(221,78,26)" fg:x="42" fg:w="4"/><text x="3.5807%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="3.4893%" y="565" width="0.1586%" height="15" fill="rgb(250,127,30)" fg:x="44" fg:w="2"/><text x="3.7393%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="3.4893%" y="549" width="0.1586%" height="15" fill="rgb(230,49,44)" fg:x="44" fg:w="2"/><text x="3.7393%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="3.4893%" y="533" width="0.1586%" height="15" fill="rgb(229,67,23)" fg:x="44" fg:w="2"/><text x="3.7393%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="3.4893%" y="517" width="0.1586%" height="15" fill="rgb(249,83,47)" fg:x="44" fg:w="2"/><text x="3.7393%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.5686%" y="501" width="0.0793%" height="15" fill="rgb(215,43,3)" fg:x="45" fg:w="1"/><text x="3.8186%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="3.6479%" y="613" width="0.0793%" height="15" fill="rgb(238,154,13)" fg:x="46" fg:w="1"/><text x="3.8979%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="3.6479%" y="597" width="0.0793%" height="15" fill="rgb(219,56,2)" fg:x="46" fg:w="1"/><text x="3.8979%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="3.6479%" y="581" width="0.0793%" height="15" fill="rgb(233,0,4)" fg:x="46" fg:w="1"/><text x="3.8979%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="3.6479%" y="565" width="0.0793%" height="15" fill="rgb(235,30,7)" fg:x="46" fg:w="1"/><text x="3.8979%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.6479%" y="549" width="0.0793%" height="15" fill="rgb(250,79,13)" fg:x="46" fg:w="1"/><text x="3.8979%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="3.6479%" y="533" width="0.0793%" height="15" fill="rgb(211,146,34)" fg:x="46" fg:w="1"/><text x="3.8979%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="3.6479%" y="517" width="0.0793%" height="15" fill="rgb(228,22,38)" fg:x="46" fg:w="1"/><text x="3.8979%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="3.6479%" y="501" width="0.0793%" height="15" fill="rgb(235,168,5)" fg:x="46" fg:w="1"/><text x="3.8979%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.6479%" y="485" width="0.0793%" height="15" fill="rgb(221,155,16)" fg:x="46" fg:w="1"/><text x="3.8979%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="3.6479%" y="469" width="0.0793%" height="15" fill="rgb(215,215,53)" fg:x="46" fg:w="1"/><text x="3.8979%" y="479.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="3.6479%" y="453" width="0.0793%" height="15" fill="rgb(223,4,10)" fg:x="46" fg:w="1"/><text x="3.8979%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="3.6479%" y="437" width="0.0793%" height="15" fill="rgb(234,103,6)" fg:x="46" fg:w="1"/><text x="3.8979%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.6479%" y="421" width="0.0793%" height="15" fill="rgb(227,97,0)" fg:x="46" fg:w="1"/><text x="3.8979%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="3.6479%" y="405" width="0.0793%" height="15" fill="rgb(234,150,53)" fg:x="46" fg:w="1"/><text x="3.8979%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.6479%" y="389" width="0.0793%" height="15" fill="rgb(228,201,54)" fg:x="46" fg:w="1"/><text x="3.8979%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.6479%" y="373" width="0.0793%" height="15" fill="rgb(222,22,37)" fg:x="46" fg:w="1"/><text x="3.8979%" y="383.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="3.6479%" y="357" width="0.0793%" height="15" fill="rgb(237,53,32)" fg:x="46" fg:w="1"/><text x="3.8979%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="3.6479%" y="341" width="0.0793%" height="15" fill="rgb(233,25,53)" fg:x="46" fg:w="1"/><text x="3.8979%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="3.6479%" y="325" width="0.0793%" height="15" fill="rgb(210,40,34)" fg:x="46" fg:w="1"/><text x="3.8979%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="3.6479%" y="309" width="0.0793%" height="15" fill="rgb(241,220,44)" fg:x="46" fg:w="1"/><text x="3.8979%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="3.6479%" y="293" width="0.0793%" height="15" fill="rgb(235,28,35)" fg:x="46" fg:w="1"/><text x="3.8979%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="3.6479%" y="277" width="0.0793%" height="15" fill="rgb(210,56,17)" fg:x="46" fg:w="1"/><text x="3.8979%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.6479%" y="261" width="0.0793%" height="15" fill="rgb(224,130,29)" fg:x="46" fg:w="1"/><text x="3.8979%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="3.6479%" y="245" width="0.0793%" height="15" fill="rgb(235,212,8)" fg:x="46" fg:w="1"/><text x="3.8979%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.6479%" y="229" width="0.0793%" height="15" fill="rgb(223,33,50)" fg:x="46" fg:w="1"/><text x="3.8979%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="3.6479%" y="213" width="0.0793%" height="15" fill="rgb(219,149,13)" fg:x="46" fg:w="1"/><text x="3.8979%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="3.6479%" y="197" width="0.0793%" height="15" fill="rgb(250,156,29)" fg:x="46" fg:w="1"/><text x="3.8979%" y="207.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="3.6479%" y="181" width="0.0793%" height="15" fill="rgb(216,193,19)" fg:x="46" fg:w="1"/><text x="3.8979%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.6479%" y="165" width="0.0793%" height="15" fill="rgb(216,135,14)" fg:x="46" fg:w="1"/><text x="3.8979%" y="175.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.7272%" y="581" width="0.0793%" height="15" fill="rgb(241,47,5)" fg:x="47" fg:w="1"/><text x="3.9772%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.7272%" y="565" width="0.0793%" height="15" fill="rgb(233,42,35)" fg:x="47" fg:w="1"/><text x="3.9772%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.7272%" y="549" width="0.0793%" height="15" fill="rgb(231,13,6)" fg:x="47" fg:w="1"/><text x="3.9772%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="3.7272%" y="533" width="0.0793%" height="15" fill="rgb(207,181,40)" fg:x="47" fg:w="1"/><text x="3.9772%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.7272%" y="517" width="0.0793%" height="15" fill="rgb(254,173,49)" fg:x="47" fg:w="1"/><text x="3.9772%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.7272%" y="501" width="0.0793%" height="15" fill="rgb(221,1,38)" fg:x="47" fg:w="1"/><text x="3.9772%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.7272%" y="485" width="0.0793%" height="15" fill="rgb(206,124,46)" fg:x="47" fg:w="1"/><text x="3.9772%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.7272%" y="469" width="0.0793%" height="15" fill="rgb(249,21,11)" fg:x="47" fg:w="1"/><text x="3.9772%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.7272%" y="453" width="0.0793%" height="15" fill="rgb(222,201,40)" fg:x="47" fg:w="1"/><text x="3.9772%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="3.8065%" y="533" width="0.0793%" height="15" fill="rgb(235,61,29)" fg:x="48" fg:w="1"/><text x="4.0565%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.8065%" y="517" width="0.0793%" height="15" fill="rgb(219,207,3)" fg:x="48" fg:w="1"/><text x="4.0565%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.8065%" y="501" width="0.0793%" height="15" fill="rgb(222,56,46)" fg:x="48" fg:w="1"/><text x="4.0565%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.8065%" y="485" width="0.0793%" height="15" fill="rgb(239,76,54)" fg:x="48" fg:w="1"/><text x="4.0565%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.8065%" y="469" width="0.0793%" height="15" fill="rgb(231,124,27)" fg:x="48" fg:w="1"/><text x="4.0565%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.8065%" y="453" width="0.0793%" height="15" fill="rgb(249,195,6)" fg:x="48" fg:w="1"/><text x="4.0565%" y="463.50"></text></g><g><title>plugins_core::build::Build::into_entry (4 samples, 0.32%)</title><rect x="3.6479%" y="645" width="0.3172%" height="15" fill="rgb(237,174,47)" fg:x="46" fg:w="4"/><text x="3.8979%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="3.6479%" y="629" width="0.3172%" height="15" fill="rgb(206,201,31)" fg:x="46" fg:w="4"/><text x="3.8979%" y="639.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="3.7272%" y="613" width="0.2379%" height="15" fill="rgb(231,57,52)" fg:x="47" fg:w="3"/><text x="3.9772%" y="623.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="3.7272%" y="597" width="0.2379%" height="15" fill="rgb(248,177,22)" fg:x="47" fg:w="3"/><text x="3.9772%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="3.8065%" y="581" width="0.1586%" height="15" fill="rgb(215,211,37)" fg:x="48" fg:w="2"/><text x="4.0565%" y="591.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="3.8065%" y="565" width="0.1586%" height="15" fill="rgb(241,128,51)" fg:x="48" fg:w="2"/><text x="4.0565%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="3.8065%" y="549" width="0.1586%" height="15" fill="rgb(227,165,31)" fg:x="48" fg:w="2"/><text x="4.0565%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="3.8858%" y="533" width="0.0793%" height="15" fill="rgb(228,167,24)" fg:x="49" fg:w="1"/><text x="4.1358%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.8858%" y="517" width="0.0793%" height="15" fill="rgb(228,143,12)" fg:x="49" fg:w="1"/><text x="4.1358%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="3.8858%" y="501" width="0.0793%" height="15" fill="rgb(249,149,8)" fg:x="49" fg:w="1"/><text x="4.1358%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.8858%" y="485" width="0.0793%" height="15" fill="rgb(243,35,44)" fg:x="49" fg:w="1"/><text x="4.1358%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="3.8858%" y="469" width="0.0793%" height="15" fill="rgb(246,89,9)" fg:x="49" fg:w="1"/><text x="4.1358%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="3.8858%" y="453" width="0.0793%" height="15" fill="rgb(233,213,13)" fg:x="49" fg:w="1"/><text x="4.1358%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.8858%" y="437" width="0.0793%" height="15" fill="rgb(233,141,41)" fg:x="49" fg:w="1"/><text x="4.1358%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.8858%" y="421" width="0.0793%" height="15" fill="rgb(239,167,4)" fg:x="49" fg:w="1"/><text x="4.1358%" y="431.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="3.9651%" y="645" width="0.0793%" height="15" fill="rgb(209,217,16)" fg:x="50" fg:w="1"/><text x="4.2151%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="3.9651%" y="629" width="0.0793%" height="15" fill="rgb(219,88,35)" fg:x="50" fg:w="1"/><text x="4.2151%" y="639.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="3.9651%" y="613" width="0.0793%" height="15" fill="rgb(220,193,23)" fg:x="50" fg:w="1"/><text x="4.2151%" y="623.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.9651%" y="597" width="0.0793%" height="15" fill="rgb(230,90,52)" fg:x="50" fg:w="1"/><text x="4.2151%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="3.9651%" y="581" width="0.0793%" height="15" fill="rgb(252,106,19)" fg:x="50" fg:w="1"/><text x="4.2151%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.9651%" y="565" width="0.0793%" height="15" fill="rgb(206,74,20)" fg:x="50" fg:w="1"/><text x="4.2151%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="3.9651%" y="549" width="0.0793%" height="15" fill="rgb(230,138,44)" fg:x="50" fg:w="1"/><text x="4.2151%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.9651%" y="533" width="0.0793%" height="15" fill="rgb(235,182,43)" fg:x="50" fg:w="1"/><text x="4.2151%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="3.9651%" y="517" width="0.0793%" height="15" fill="rgb(242,16,51)" fg:x="50" fg:w="1"/><text x="4.2151%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0444%" y="469" width="0.0793%" height="15" fill="rgb(248,9,4)" fg:x="51" fg:w="1"/><text x="4.2944%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0444%" y="453" width="0.0793%" height="15" fill="rgb(210,31,22)" fg:x="51" fg:w="1"/><text x="4.2944%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="4.0444%" y="629" width="0.1586%" height="15" fill="rgb(239,54,39)" fg:x="51" fg:w="2"/><text x="4.2944%" y="639.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="4.0444%" y="613" width="0.1586%" height="15" fill="rgb(230,99,41)" fg:x="51" fg:w="2"/><text x="4.2944%" y="623.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="4.0444%" y="597" width="0.1586%" height="15" fill="rgb(253,106,12)" fg:x="51" fg:w="2"/><text x="4.2944%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="4.0444%" y="581" width="0.1586%" height="15" fill="rgb(213,46,41)" fg:x="51" fg:w="2"/><text x="4.2944%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="4.0444%" y="565" width="0.1586%" height="15" fill="rgb(215,133,35)" fg:x="51" fg:w="2"/><text x="4.2944%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="4.0444%" y="549" width="0.1586%" height="15" fill="rgb(213,28,5)" fg:x="51" fg:w="2"/><text x="4.2944%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.0444%" y="533" width="0.1586%" height="15" fill="rgb(215,77,49)" fg:x="51" fg:w="2"/><text x="4.2944%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.0444%" y="517" width="0.1586%" height="15" fill="rgb(248,100,22)" fg:x="51" fg:w="2"/><text x="4.2944%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.0444%" y="501" width="0.1586%" height="15" fill="rgb(208,67,9)" fg:x="51" fg:w="2"/><text x="4.2944%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.0444%" y="485" width="0.1586%" height="15" fill="rgb(219,133,21)" fg:x="51" fg:w="2"/><text x="4.2944%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.1237%" y="469" width="0.0793%" height="15" fill="rgb(246,46,29)" fg:x="52" fg:w="1"/><text x="4.3737%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.2030%" y="517" width="0.0793%" height="15" fill="rgb(246,185,52)" fg:x="53" fg:w="1"/><text x="4.4530%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.2030%" y="501" width="0.0793%" height="15" fill="rgb(252,136,11)" fg:x="53" fg:w="1"/><text x="4.4530%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.2030%" y="485" width="0.0793%" height="15" fill="rgb(219,138,53)" fg:x="53" fg:w="1"/><text x="4.4530%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.2030%" y="469" width="0.0793%" height="15" fill="rgb(211,51,23)" fg:x="53" fg:w="1"/><text x="4.4530%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="4.2030%" y="629" width="0.1586%" height="15" fill="rgb(247,221,28)" fg:x="53" fg:w="2"/><text x="4.4530%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="4.2030%" y="613" width="0.1586%" height="15" fill="rgb(251,222,45)" fg:x="53" fg:w="2"/><text x="4.4530%" y="623.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="4.2030%" y="597" width="0.1586%" height="15" fill="rgb(217,162,53)" fg:x="53" fg:w="2"/><text x="4.4530%" y="607.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="4.2030%" y="581" width="0.1586%" height="15" fill="rgb(229,93,14)" fg:x="53" fg:w="2"/><text x="4.4530%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="4.2030%" y="565" width="0.1586%" height="15" fill="rgb(209,67,49)" fg:x="53" fg:w="2"/><text x="4.4530%" y="575.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="4.2030%" y="549" width="0.1586%" height="15" fill="rgb(213,87,29)" fg:x="53" fg:w="2"/><text x="4.4530%" y="559.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="4.2030%" y="533" width="0.1586%" height="15" fill="rgb(205,151,52)" fg:x="53" fg:w="2"/><text x="4.4530%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="4.2823%" y="517" width="0.0793%" height="15" fill="rgb(253,215,39)" fg:x="54" fg:w="1"/><text x="4.5323%" y="527.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="4.2823%" y="501" width="0.0793%" height="15" fill="rgb(221,220,41)" fg:x="54" fg:w="1"/><text x="4.5323%" y="511.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.2823%" y="485" width="0.0793%" height="15" fill="rgb(218,133,21)" fg:x="54" fg:w="1"/><text x="4.5323%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="4.2823%" y="469" width="0.0793%" height="15" fill="rgb(221,193,43)" fg:x="54" fg:w="1"/><text x="4.5323%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.2823%" y="453" width="0.0793%" height="15" fill="rgb(240,128,52)" fg:x="54" fg:w="1"/><text x="4.5323%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="4.2823%" y="437" width="0.0793%" height="15" fill="rgb(253,114,12)" fg:x="54" fg:w="1"/><text x="4.5323%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.2823%" y="421" width="0.0793%" height="15" fill="rgb(215,223,47)" fg:x="54" fg:w="1"/><text x="4.5323%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.2823%" y="405" width="0.0793%" height="15" fill="rgb(248,225,23)" fg:x="54" fg:w="1"/><text x="4.5323%" y="415.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="4.3616%" y="597" width="0.0793%" height="15" fill="rgb(250,108,0)" fg:x="55" fg:w="1"/><text x="4.6116%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.3616%" y="581" width="0.0793%" height="15" fill="rgb(228,208,7)" fg:x="55" fg:w="1"/><text x="4.6116%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.3616%" y="565" width="0.0793%" height="15" fill="rgb(244,45,10)" fg:x="55" fg:w="1"/><text x="4.6116%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="4.3616%" y="549" width="0.0793%" height="15" fill="rgb(207,125,25)" fg:x="55" fg:w="1"/><text x="4.6116%" y="559.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="4.3616%" y="533" width="0.0793%" height="15" fill="rgb(210,195,18)" fg:x="55" fg:w="1"/><text x="4.6116%" y="543.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="4.3616%" y="517" width="0.0793%" height="15" fill="rgb(249,80,12)" fg:x="55" fg:w="1"/><text x="4.6116%" y="527.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.4409%" y="597" width="0.0793%" height="15" fill="rgb(221,65,9)" fg:x="56" fg:w="1"/><text x="4.6909%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="4.4409%" y="581" width="0.0793%" height="15" fill="rgb(235,49,36)" fg:x="56" fg:w="1"/><text x="4.6909%" y="591.50"></text></g><g><title>engine::identifiers::model::set_gid (1 samples, 0.08%)</title><rect x="4.5202%" y="597" width="0.0793%" height="15" fill="rgb(225,32,20)" fg:x="57" fg:w="1"/><text x="4.7702%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.5202%" y="581" width="0.0793%" height="15" fill="rgb(215,141,46)" fg:x="57" fg:w="1"/><text x="4.7702%" y="591.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="4.5202%" y="565" width="0.0793%" height="15" fill="rgb(250,160,47)" fg:x="57" fg:w="1"/><text x="4.7702%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.5202%" y="549" width="0.0793%" height="15" fill="rgb(216,222,40)" fg:x="57" fg:w="1"/><text x="4.7702%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.6788%" y="549" width="0.0793%" height="15" fill="rgb(234,217,39)" fg:x="59" fg:w="1"/><text x="4.9288%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="4.7581%" y="533" width="0.1586%" height="15" fill="rgb(207,178,40)" fg:x="60" fg:w="2"/><text x="5.0081%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.8374%" y="517" width="0.0793%" height="15" fill="rgb(221,136,13)" fg:x="61" fg:w="1"/><text x="5.0874%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.8374%" y="501" width="0.0793%" height="15" fill="rgb(249,199,10)" fg:x="61" fg:w="1"/><text x="5.0874%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.8374%" y="485" width="0.0793%" height="15" fill="rgb(249,222,13)" fg:x="61" fg:w="1"/><text x="5.0874%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.8374%" y="469" width="0.0793%" height="15" fill="rgb(244,185,38)" fg:x="61" fg:w="1"/><text x="5.0874%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.8374%" y="453" width="0.0793%" height="15" fill="rgb(236,202,9)" fg:x="61" fg:w="1"/><text x="5.0874%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.8374%" y="437" width="0.0793%" height="15" fill="rgb(250,229,37)" fg:x="61" fg:w="1"/><text x="5.0874%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.9167%" y="517" width="0.0793%" height="15" fill="rgb(206,174,23)" fg:x="62" fg:w="1"/><text x="5.1667%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.9167%" y="501" width="0.0793%" height="15" fill="rgb(211,33,43)" fg:x="62" fg:w="1"/><text x="5.1667%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.9167%" y="485" width="0.0793%" height="15" fill="rgb(245,58,50)" fg:x="62" fg:w="1"/><text x="5.1667%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.9167%" y="469" width="0.0793%" height="15" fill="rgb(244,68,36)" fg:x="62" fg:w="1"/><text x="5.1667%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.9960%" y="485" width="0.0793%" height="15" fill="rgb(232,229,15)" fg:x="63" fg:w="1"/><text x="5.2460%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.9960%" y="469" width="0.0793%" height="15" fill="rgb(254,30,23)" fg:x="63" fg:w="1"/><text x="5.2460%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.9960%" y="453" width="0.0793%" height="15" fill="rgb(235,160,14)" fg:x="63" fg:w="1"/><text x="5.2460%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.0753%" y="469" width="0.0793%" height="15" fill="rgb(212,155,44)" fg:x="64" fg:w="1"/><text x="5.3253%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.1546%" y="453" width="0.0793%" height="15" fill="rgb(226,2,50)" fg:x="65" fg:w="1"/><text x="5.4046%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="4.9960%" y="517" width="0.3965%" height="15" fill="rgb(234,177,6)" fg:x="63" fg:w="5"/><text x="5.2460%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="4.9960%" y="501" width="0.3965%" height="15" fill="rgb(217,24,9)" fg:x="63" fg:w="5"/><text x="5.2460%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="5.0753%" y="485" width="0.3172%" height="15" fill="rgb(220,13,46)" fg:x="64" fg:w="4"/><text x="5.3253%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="5.1546%" y="469" width="0.2379%" height="15" fill="rgb(239,221,27)" fg:x="65" fg:w="3"/><text x="5.4046%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.2339%" y="453" width="0.1586%" height="15" fill="rgb(222,198,25)" fg:x="66" fg:w="2"/><text x="5.4839%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.3132%" y="437" width="0.0793%" height="15" fill="rgb(211,99,13)" fg:x="67" fg:w="1"/><text x="5.5632%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.3132%" y="421" width="0.0793%" height="15" fill="rgb(232,111,31)" fg:x="67" fg:w="1"/><text x="5.5632%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.3132%" y="405" width="0.0793%" height="15" fill="rgb(245,82,37)" fg:x="67" fg:w="1"/><text x="5.5632%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.79%)</title><rect x="4.6788%" y="565" width="0.7930%" height="15" fill="rgb(227,149,46)" fg:x="59" fg:w="10"/><text x="4.9288%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.71%)</title><rect x="4.7581%" y="549" width="0.7137%" height="15" fill="rgb(218,36,50)" fg:x="60" fg:w="9"/><text x="5.0081%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="4.9167%" y="533" width="0.5551%" height="15" fill="rgb(226,80,48)" fg:x="62" fg:w="7"/><text x="5.1667%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.3925%" y="517" width="0.0793%" height="15" fill="rgb(238,224,15)" fg:x="68" fg:w="1"/><text x="5.6425%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.3925%" y="501" width="0.0793%" height="15" fill="rgb(241,136,10)" fg:x="68" fg:w="1"/><text x="5.6425%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.4718%" y="533" width="0.0793%" height="15" fill="rgb(208,32,45)" fg:x="69" fg:w="1"/><text x="5.7218%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="5.5511%" y="485" width="0.0793%" height="15" fill="rgb(207,135,9)" fg:x="70" fg:w="1"/><text x="5.8011%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.5511%" y="469" width="0.0793%" height="15" fill="rgb(206,86,44)" fg:x="70" fg:w="1"/><text x="5.8011%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.5511%" y="453" width="0.0793%" height="15" fill="rgb(245,177,15)" fg:x="70" fg:w="1"/><text x="5.8011%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="5.4718%" y="565" width="0.2379%" height="15" fill="rgb(206,64,50)" fg:x="69" fg:w="3"/><text x="5.7218%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="5.4718%" y="549" width="0.2379%" height="15" fill="rgb(234,36,40)" fg:x="69" fg:w="3"/><text x="5.7218%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.5511%" y="533" width="0.1586%" height="15" fill="rgb(213,64,8)" fg:x="70" fg:w="2"/><text x="5.8011%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.5511%" y="517" width="0.1586%" height="15" fill="rgb(210,75,36)" fg:x="70" fg:w="2"/><text x="5.8011%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.5511%" y="501" width="0.1586%" height="15" fill="rgb(229,88,21)" fg:x="70" fg:w="2"/><text x="5.8011%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.6305%" y="485" width="0.0793%" height="15" fill="rgb(252,204,47)" fg:x="71" fg:w="1"/><text x="5.8805%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.8684%" y="517" width="0.0793%" height="15" fill="rgb(208,77,27)" fg:x="74" fg:w="1"/><text x="6.1184%" y="527.50"></text></g><g><title>engine::session::Session::flush (21 samples, 1.67%)</title><rect x="4.3616%" y="629" width="1.6653%" height="15" fill="rgb(221,76,26)" fg:x="55" fg:w="21"/><text x="4.6116%" y="639.50"></text></g><g><title>engine::session::Session::save_entity_changes (21 samples, 1.67%)</title><rect x="4.3616%" y="613" width="1.6653%" height="15" fill="rgb(225,139,18)" fg:x="55" fg:w="21"/><text x="4.6116%" y="623.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (18 samples, 1.43%)</title><rect x="4.5995%" y="597" width="1.4274%" height="15" fill="rgb(230,137,11)" fg:x="58" fg:w="18"/><text x="4.8495%" y="607.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (17 samples, 1.35%)</title><rect x="4.6788%" y="581" width="1.3481%" height="15" fill="rgb(212,28,1)" fg:x="59" fg:w="17"/><text x="4.9288%" y="591.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="5.7098%" y="565" width="0.3172%" height="15" fill="rgb(248,164,17)" fg:x="72" fg:w="4"/><text x="5.9598%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="5.7098%" y="549" width="0.3172%" height="15" fill="rgb(222,171,42)" fg:x="72" fg:w="4"/><text x="5.9598%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="5.7891%" y="533" width="0.2379%" height="15" fill="rgb(243,84,45)" fg:x="73" fg:w="3"/><text x="6.0391%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="5.9477%" y="517" width="0.0793%" height="15" fill="rgb(252,49,23)" fg:x="75" fg:w="1"/><text x="6.1977%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="5.9477%" y="501" width="0.0793%" height="15" fill="rgb(215,19,7)" fg:x="75" fg:w="1"/><text x="6.1977%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.9477%" y="485" width="0.0793%" height="15" fill="rgb(238,81,41)" fg:x="75" fg:w="1"/><text x="6.1977%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.9477%" y="469" width="0.0793%" height="15" fill="rgb(210,199,37)" fg:x="75" fg:w="1"/><text x="6.1977%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.9477%" y="453" width="0.0793%" height="15" fill="rgb(244,192,49)" fg:x="75" fg:w="1"/><text x="6.1977%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.9477%" y="437" width="0.0793%" height="15" fill="rgb(226,211,11)" fg:x="75" fg:w="1"/><text x="6.1977%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.9477%" y="421" width="0.0793%" height="15" fill="rgb(236,162,54)" fg:x="75" fg:w="1"/><text x="6.1977%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.9477%" y="405" width="0.0793%" height="15" fill="rgb(220,229,9)" fg:x="75" fg:w="1"/><text x="6.1977%" y="415.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.1063%" y="581" width="0.0793%" height="15" fill="rgb(250,87,22)" fg:x="77" fg:w="1"/><text x="6.3563%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="6.1063%" y="565" width="0.0793%" height="15" fill="rgb(239,43,17)" fg:x="77" fg:w="1"/><text x="6.3563%" y="575.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="6.1063%" y="549" width="0.0793%" height="15" fill="rgb(231,177,25)" fg:x="77" fg:w="1"/><text x="6.3563%" y="559.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.1063%" y="533" width="0.0793%" height="15" fill="rgb(219,179,1)" fg:x="77" fg:w="1"/><text x="6.3563%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="6.0270%" y="613" width="0.3172%" height="15" fill="rgb(238,219,53)" fg:x="76" fg:w="4"/><text x="6.2770%" y="623.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="6.1063%" y="597" width="0.2379%" height="15" fill="rgb(232,167,36)" fg:x="77" fg:w="3"/><text x="6.3563%" y="607.50"></text></g><g><title>engine::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="6.1856%" y="581" width="0.1586%" height="15" fill="rgb(244,19,51)" fg:x="78" fg:w="2"/><text x="6.4356%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="6.1856%" y="565" width="0.1586%" height="15" fill="rgb(224,6,22)" fg:x="78" fg:w="2"/><text x="6.4356%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="6.1856%" y="549" width="0.1586%" height="15" fill="rgb(224,145,5)" fg:x="78" fg:w="2"/><text x="6.4356%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="6.1856%" y="533" width="0.1586%" height="15" fill="rgb(234,130,49)" fg:x="78" fg:w="2"/><text x="6.4356%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="6.1856%" y="517" width="0.1586%" height="15" fill="rgb(254,6,2)" fg:x="78" fg:w="2"/><text x="6.4356%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;plugins_core::carrying::model::Location&gt;&gt; (1 samples, 0.08%)</title><rect x="6.3442%" y="597" width="0.0793%" height="15" fill="rgb(208,96,46)" fg:x="80" fg:w="1"/><text x="6.5942%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="6.3442%" y="581" width="0.0793%" height="15" fill="rgb(239,3,39)" fg:x="80" fg:w="1"/><text x="6.5942%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.4235%" y="565" width="0.0793%" height="15" fill="rgb(233,210,1)" fg:x="81" fg:w="1"/><text x="6.6735%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.4235%" y="549" width="0.0793%" height="15" fill="rgb(244,137,37)" fg:x="81" fg:w="1"/><text x="6.6735%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.4235%" y="533" width="0.0793%" height="15" fill="rgb(240,136,2)" fg:x="81" fg:w="1"/><text x="6.6735%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4235%" y="517" width="0.0793%" height="15" fill="rgb(239,18,37)" fg:x="81" fg:w="1"/><text x="6.6735%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4235%" y="501" width="0.0793%" height="15" fill="rgb(218,185,22)" fg:x="81" fg:w="1"/><text x="6.6735%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4235%" y="485" width="0.0793%" height="15" fill="rgb(225,218,4)" fg:x="81" fg:w="1"/><text x="6.6735%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4235%" y="469" width="0.0793%" height="15" fill="rgb(230,182,32)" fg:x="81" fg:w="1"/><text x="6.6735%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4235%" y="453" width="0.0793%" height="15" fill="rgb(242,56,43)" fg:x="81" fg:w="1"/><text x="6.6735%" y="463.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="6.4235%" y="597" width="0.1586%" height="15" fill="rgb(233,99,24)" fg:x="81" fg:w="2"/><text x="6.6735%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="6.4235%" y="581" width="0.1586%" height="15" fill="rgb(234,209,42)" fg:x="81" fg:w="2"/><text x="6.6735%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.5028%" y="565" width="0.0793%" height="15" fill="rgb(227,7,12)" fg:x="82" fg:w="1"/><text x="6.7528%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.5028%" y="549" width="0.0793%" height="15" fill="rgb(245,203,43)" fg:x="82" fg:w="1"/><text x="6.7528%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.5028%" y="533" width="0.0793%" height="15" fill="rgb(238,205,33)" fg:x="82" fg:w="1"/><text x="6.7528%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="6.5028%" y="517" width="0.0793%" height="15" fill="rgb(231,56,7)" fg:x="82" fg:w="1"/><text x="6.7528%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.5028%" y="501" width="0.0793%" height="15" fill="rgb(244,186,29)" fg:x="82" fg:w="1"/><text x="6.7528%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.5028%" y="485" width="0.0793%" height="15" fill="rgb(234,111,31)" fg:x="82" fg:w="1"/><text x="6.7528%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.5028%" y="469" width="0.0793%" height="15" fill="rgb(241,149,10)" fg:x="82" fg:w="1"/><text x="6.7528%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.5028%" y="453" width="0.0793%" height="15" fill="rgb(249,206,44)" fg:x="82" fg:w="1"/><text x="6.7528%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.5028%" y="437" width="0.0793%" height="15" fill="rgb(251,153,30)" fg:x="82" fg:w="1"/><text x="6.7528%" y="447.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.5821%" y="597" width="0.0793%" height="15" fill="rgb(239,152,38)" fg:x="83" fg:w="1"/><text x="6.8321%" y="607.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5821%" y="581" width="0.0793%" height="15" fill="rgb(249,139,47)" fg:x="83" fg:w="1"/><text x="6.8321%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.5821%" y="565" width="0.0793%" height="15" fill="rgb(244,64,35)" fg:x="83" fg:w="1"/><text x="6.8321%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.5821%" y="549" width="0.0793%" height="15" fill="rgb(216,46,15)" fg:x="83" fg:w="1"/><text x="6.8321%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5821%" y="533" width="0.0793%" height="15" fill="rgb(250,74,19)" fg:x="83" fg:w="1"/><text x="6.8321%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.5821%" y="517" width="0.0793%" height="15" fill="rgb(249,42,33)" fg:x="83" fg:w="1"/><text x="6.8321%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="6.6614%" y="549" width="0.1586%" height="15" fill="rgb(242,149,17)" fg:x="84" fg:w="2"/><text x="6.9114%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.6614%" y="533" width="0.1586%" height="15" fill="rgb(244,29,21)" fg:x="84" fg:w="2"/><text x="6.9114%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="6.6614%" y="517" width="0.1586%" height="15" fill="rgb(220,130,37)" fg:x="84" fg:w="2"/><text x="6.9114%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7407%" y="501" width="0.0793%" height="15" fill="rgb(211,67,2)" fg:x="85" fg:w="1"/><text x="6.9907%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7407%" y="485" width="0.0793%" height="15" fill="rgb(235,68,52)" fg:x="85" fg:w="1"/><text x="6.9907%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7407%" y="469" width="0.0793%" height="15" fill="rgb(246,142,3)" fg:x="85" fg:w="1"/><text x="6.9907%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7407%" y="453" width="0.0793%" height="15" fill="rgb(241,25,7)" fg:x="85" fg:w="1"/><text x="6.9907%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.7407%" y="437" width="0.0793%" height="15" fill="rgb(242,119,39)" fg:x="85" fg:w="1"/><text x="6.9907%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.7407%" y="421" width="0.0793%" height="15" fill="rgb(241,98,45)" fg:x="85" fg:w="1"/><text x="6.9907%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.7407%" y="405" width="0.0793%" height="15" fill="rgb(254,28,30)" fg:x="85" fg:w="1"/><text x="6.9907%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.7407%" y="389" width="0.0793%" height="15" fill="rgb(241,142,54)" fg:x="85" fg:w="1"/><text x="6.9907%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.7407%" y="373" width="0.0793%" height="15" fill="rgb(222,85,15)" fg:x="85" fg:w="1"/><text x="6.9907%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.7407%" y="357" width="0.0793%" height="15" fill="rgb(210,85,47)" fg:x="85" fg:w="1"/><text x="6.9907%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.7407%" y="341" width="0.0793%" height="15" fill="rgb(224,206,25)" fg:x="85" fg:w="1"/><text x="6.9907%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.7407%" y="325" width="0.0793%" height="15" fill="rgb(243,201,19)" fg:x="85" fg:w="1"/><text x="6.9907%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.7407%" y="309" width="0.0793%" height="15" fill="rgb(236,59,4)" fg:x="85" fg:w="1"/><text x="6.9907%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.7407%" y="293" width="0.0793%" height="15" fill="rgb(254,179,45)" fg:x="85" fg:w="1"/><text x="6.9907%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.7407%" y="277" width="0.0793%" height="15" fill="rgb(226,14,10)" fg:x="85" fg:w="1"/><text x="6.9907%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.7407%" y="261" width="0.0793%" height="15" fill="rgb(244,27,41)" fg:x="85" fg:w="1"/><text x="6.9907%" y="271.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="6.6614%" y="581" width="0.2379%" height="15" fill="rgb(235,35,32)" fg:x="84" fg:w="3"/><text x="6.9114%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="6.6614%" y="565" width="0.2379%" height="15" fill="rgb(218,68,31)" fg:x="84" fg:w="3"/><text x="6.9114%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.8200%" y="549" width="0.0793%" height="15" fill="rgb(207,120,37)" fg:x="86" fg:w="1"/><text x="7.0700%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.8200%" y="533" width="0.0793%" height="15" fill="rgb(227,98,0)" fg:x="86" fg:w="1"/><text x="7.0700%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.8200%" y="517" width="0.0793%" height="15" fill="rgb(207,7,3)" fg:x="86" fg:w="1"/><text x="7.0700%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="6.8200%" y="501" width="0.0793%" height="15" fill="rgb(206,98,19)" fg:x="86" fg:w="1"/><text x="7.0700%" y="511.50"></text></g><g><title>plugins_core::build::Build::holding (12 samples, 0.95%)</title><rect x="6.0270%" y="629" width="0.9516%" height="15" fill="rgb(217,5,26)" fg:x="76" fg:w="12"/><text x="6.2770%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (8 samples, 0.63%)</title><rect x="6.3442%" y="613" width="0.6344%" height="15" fill="rgb(235,190,38)" fg:x="80" fg:w="8"/><text x="6.5942%" y="623.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="6.6614%" y="597" width="0.3172%" height="15" fill="rgb(247,86,24)" fg:x="84" fg:w="4"/><text x="6.9114%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="6.8993%" y="581" width="0.0793%" height="15" fill="rgb(205,101,16)" fg:x="87" fg:w="1"/><text x="7.1493%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.8993%" y="565" width="0.0793%" height="15" fill="rgb(246,168,33)" fg:x="87" fg:w="1"/><text x="7.1493%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="6.8993%" y="549" width="0.0793%" height="15" fill="rgb(231,114,1)" fg:x="87" fg:w="1"/><text x="7.1493%" y="559.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="6.8993%" y="533" width="0.0793%" height="15" fill="rgb(207,184,53)" fg:x="87" fg:w="1"/><text x="7.1493%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="6.8993%" y="517" width="0.0793%" height="15" fill="rgb(224,95,51)" fg:x="87" fg:w="1"/><text x="7.1493%" y="527.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="6.8993%" y="501" width="0.0793%" height="15" fill="rgb(212,188,45)" fg:x="87" fg:w="1"/><text x="7.1493%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.8993%" y="485" width="0.0793%" height="15" fill="rgb(223,154,38)" fg:x="87" fg:w="1"/><text x="7.1493%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.8993%" y="469" width="0.0793%" height="15" fill="rgb(251,22,52)" fg:x="87" fg:w="1"/><text x="7.1493%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.8993%" y="453" width="0.0793%" height="15" fill="rgb(229,209,22)" fg:x="87" fg:w="1"/><text x="7.1493%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="6.8993%" y="437" width="0.0793%" height="15" fill="rgb(234,138,34)" fg:x="87" fg:w="1"/><text x="7.1493%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="6.8993%" y="421" width="0.0793%" height="15" fill="rgb(212,95,11)" fg:x="87" fg:w="1"/><text x="7.1493%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="6.8993%" y="405" width="0.0793%" height="15" fill="rgb(240,179,47)" fg:x="87" fg:w="1"/><text x="7.1493%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="6.8993%" y="389" width="0.0793%" height="15" fill="rgb(240,163,11)" fg:x="87" fg:w="1"/><text x="7.1493%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="6.8993%" y="373" width="0.0793%" height="15" fill="rgb(236,37,12)" fg:x="87" fg:w="1"/><text x="7.1493%" y="383.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="6.9786%" y="629" width="0.0793%" height="15" fill="rgb(232,164,16)" fg:x="88" fg:w="1"/><text x="7.2286%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.9786%" y="613" width="0.0793%" height="15" fill="rgb(244,205,15)" fg:x="88" fg:w="1"/><text x="7.2286%" y="623.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.9786%" y="597" width="0.0793%" height="15" fill="rgb(223,117,47)" fg:x="88" fg:w="1"/><text x="7.2286%" y="607.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.9786%" y="581" width="0.0793%" height="15" fill="rgb(244,107,35)" fg:x="88" fg:w="1"/><text x="7.2286%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.9786%" y="565" width="0.0793%" height="15" fill="rgb(205,140,8)" fg:x="88" fg:w="1"/><text x="7.2286%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.9786%" y="549" width="0.0793%" height="15" fill="rgb(228,84,46)" fg:x="88" fg:w="1"/><text x="7.2286%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.9786%" y="533" width="0.0793%" height="15" fill="rgb(254,188,9)" fg:x="88" fg:w="1"/><text x="7.2286%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.9786%" y="517" width="0.0793%" height="15" fill="rgb(206,112,54)" fg:x="88" fg:w="1"/><text x="7.2286%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="6.9786%" y="501" width="0.0793%" height="15" fill="rgb(216,84,49)" fg:x="88" fg:w="1"/><text x="7.2286%" y="511.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="7.0579%" y="629" width="0.0793%" height="15" fill="rgb(214,194,35)" fg:x="89" fg:w="1"/><text x="7.3079%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="7.0579%" y="613" width="0.0793%" height="15" fill="rgb(249,28,3)" fg:x="89" fg:w="1"/><text x="7.3079%" y="623.50"></text></g><g><title>kernel::model::props::Props::set_property (1 samples, 0.08%)</title><rect x="7.0579%" y="597" width="0.0793%" height="15" fill="rgb(222,56,52)" fg:x="89" fg:w="1"/><text x="7.3079%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="7.1372%" y="597" width="0.0793%" height="15" fill="rgb(245,217,50)" fg:x="90" fg:w="1"/><text x="7.3872%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="7.1372%" y="581" width="0.0793%" height="15" fill="rgb(213,201,24)" fg:x="90" fg:w="1"/><text x="7.3872%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="7.1372%" y="565" width="0.0793%" height="15" fill="rgb(248,116,28)" fg:x="90" fg:w="1"/><text x="7.3872%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="7.1372%" y="549" width="0.0793%" height="15" fill="rgb(219,72,43)" fg:x="90" fg:w="1"/><text x="7.3872%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.1372%" y="533" width="0.0793%" height="15" fill="rgb(209,138,14)" fg:x="90" fg:w="1"/><text x="7.3872%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.1372%" y="517" width="0.0793%" height="15" fill="rgb(222,18,33)" fg:x="90" fg:w="1"/><text x="7.3872%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="7.1372%" y="501" width="0.0793%" height="15" fill="rgb(213,199,7)" fg:x="90" fg:w="1"/><text x="7.3872%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="7.1372%" y="485" width="0.0793%" height="15" fill="rgb(250,110,10)" fg:x="90" fg:w="1"/><text x="7.3872%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.1372%" y="469" width="0.0793%" height="15" fill="rgb(248,123,6)" fg:x="90" fg:w="1"/><text x="7.3872%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.1372%" y="453" width="0.0793%" height="15" fill="rgb(206,91,31)" fg:x="90" fg:w="1"/><text x="7.3872%" y="463.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="7.1372%" y="437" width="0.0793%" height="15" fill="rgb(211,154,13)" fg:x="90" fg:w="1"/><text x="7.3872%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="7.1372%" y="613" width="0.1586%" height="15" fill="rgb(225,148,7)" fg:x="90" fg:w="2"/><text x="7.3872%" y="623.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="7.2165%" y="597" width="0.0793%" height="15" fill="rgb(220,160,43)" fg:x="91" fg:w="1"/><text x="7.4665%" y="607.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="7.2165%" y="581" width="0.0793%" height="15" fill="rgb(213,52,39)" fg:x="91" fg:w="1"/><text x="7.4665%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="7.2165%" y="565" width="0.0793%" height="15" fill="rgb(243,137,7)" fg:x="91" fg:w="1"/><text x="7.4665%" y="575.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.2165%" y="549" width="0.0793%" height="15" fill="rgb(230,79,13)" fg:x="91" fg:w="1"/><text x="7.4665%" y="559.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.2165%" y="533" width="0.0793%" height="15" fill="rgb(247,105,23)" fg:x="91" fg:w="1"/><text x="7.4665%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2165%" y="517" width="0.0793%" height="15" fill="rgb(223,179,41)" fg:x="91" fg:w="1"/><text x="7.4665%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2165%" y="501" width="0.0793%" height="15" fill="rgb(218,9,34)" fg:x="91" fg:w="1"/><text x="7.4665%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2165%" y="485" width="0.0793%" height="15" fill="rgb(222,106,8)" fg:x="91" fg:w="1"/><text x="7.4665%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.2165%" y="469" width="0.0793%" height="15" fill="rgb(211,220,0)" fg:x="91" fg:w="1"/><text x="7.4665%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.2165%" y="453" width="0.0793%" height="15" fill="rgb(229,52,16)" fg:x="91" fg:w="1"/><text x="7.4665%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.2165%" y="437" width="0.0793%" height="15" fill="rgb(212,155,18)" fg:x="91" fg:w="1"/><text x="7.4665%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.2165%" y="421" width="0.0793%" height="15" fill="rgb(242,21,14)" fg:x="91" fg:w="1"/><text x="7.4665%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.2165%" y="405" width="0.0793%" height="15" fill="rgb(222,19,48)" fg:x="91" fg:w="1"/><text x="7.4665%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.2165%" y="389" width="0.0793%" height="15" fill="rgb(232,45,27)" fg:x="91" fg:w="1"/><text x="7.4665%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.2165%" y="373" width="0.0793%" height="15" fill="rgb(249,103,42)" fg:x="91" fg:w="1"/><text x="7.4665%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.2165%" y="357" width="0.0793%" height="15" fill="rgb(246,81,33)" fg:x="91" fg:w="1"/><text x="7.4665%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.2165%" y="341" width="0.0793%" height="15" fill="rgb(252,33,42)" fg:x="91" fg:w="1"/><text x="7.4665%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.2165%" y="325" width="0.0793%" height="15" fill="rgb(209,212,41)" fg:x="91" fg:w="1"/><text x="7.4665%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.2165%" y="309" width="0.0793%" height="15" fill="rgb(207,154,6)" fg:x="91" fg:w="1"/><text x="7.4665%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2165%" y="293" width="0.0793%" height="15" fill="rgb(223,64,47)" fg:x="91" fg:w="1"/><text x="7.4665%" y="303.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="7.2958%" y="597" width="0.0793%" height="15" fill="rgb(211,161,38)" fg:x="92" fg:w="1"/><text x="7.5458%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="7.2958%" y="581" width="0.0793%" height="15" fill="rgb(219,138,40)" fg:x="92" fg:w="1"/><text x="7.5458%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="7.2958%" y="565" width="0.0793%" height="15" fill="rgb(241,228,46)" fg:x="92" fg:w="1"/><text x="7.5458%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.2958%" y="549" width="0.0793%" height="15" fill="rgb(223,209,38)" fg:x="92" fg:w="1"/><text x="7.5458%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.2958%" y="533" width="0.0793%" height="15" fill="rgb(236,164,45)" fg:x="92" fg:w="1"/><text x="7.5458%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.2958%" y="517" width="0.0793%" height="15" fill="rgb(231,15,5)" fg:x="92" fg:w="1"/><text x="7.5458%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.2958%" y="501" width="0.0793%" height="15" fill="rgb(252,35,15)" fg:x="92" fg:w="1"/><text x="7.5458%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.3751%" y="549" width="0.0793%" height="15" fill="rgb(248,181,18)" fg:x="93" fg:w="1"/><text x="7.6251%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.3751%" y="533" width="0.0793%" height="15" fill="rgb(233,39,42)" fg:x="93" fg:w="1"/><text x="7.6251%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.3751%" y="517" width="0.0793%" height="15" fill="rgb(238,110,33)" fg:x="93" fg:w="1"/><text x="7.6251%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.3751%" y="501" width="0.0793%" height="15" fill="rgb(233,195,10)" fg:x="93" fg:w="1"/><text x="7.6251%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.3751%" y="485" width="0.0793%" height="15" fill="rgb(254,105,3)" fg:x="93" fg:w="1"/><text x="7.6251%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.3751%" y="469" width="0.0793%" height="15" fill="rgb(221,225,9)" fg:x="93" fg:w="1"/><text x="7.6251%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.3751%" y="453" width="0.0793%" height="15" fill="rgb(224,227,45)" fg:x="93" fg:w="1"/><text x="7.6251%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.3751%" y="437" width="0.0793%" height="15" fill="rgb(229,198,43)" fg:x="93" fg:w="1"/><text x="7.6251%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.3751%" y="421" width="0.0793%" height="15" fill="rgb(206,209,35)" fg:x="93" fg:w="1"/><text x="7.6251%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.3751%" y="405" width="0.0793%" height="15" fill="rgb(245,195,53)" fg:x="93" fg:w="1"/><text x="7.6251%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.3751%" y="389" width="0.0793%" height="15" fill="rgb(240,92,26)" fg:x="93" fg:w="1"/><text x="7.6251%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.3751%" y="373" width="0.0793%" height="15" fill="rgb(207,40,23)" fg:x="93" fg:w="1"/><text x="7.6251%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.3751%" y="357" width="0.0793%" height="15" fill="rgb(223,111,35)" fg:x="93" fg:w="1"/><text x="7.6251%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.3751%" y="341" width="0.0793%" height="15" fill="rgb(229,147,28)" fg:x="93" fg:w="1"/><text x="7.6251%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.3751%" y="325" width="0.0793%" height="15" fill="rgb(211,29,28)" fg:x="93" fg:w="1"/><text x="7.6251%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.3751%" y="309" width="0.0793%" height="15" fill="rgb(228,72,33)" fg:x="93" fg:w="1"/><text x="7.6251%" y="319.50"></text></g><g><title>plugins_core::build::Build::occupying (5 samples, 0.40%)</title><rect x="7.1372%" y="629" width="0.3965%" height="15" fill="rgb(205,214,31)" fg:x="90" fg:w="5"/><text x="7.3872%" y="639.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="7.2958%" y="613" width="0.2379%" height="15" fill="rgb(224,111,15)" fg:x="92" fg:w="3"/><text x="7.5458%" y="623.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (2 samples, 0.16%)</title><rect x="7.3751%" y="597" width="0.1586%" height="15" fill="rgb(253,21,26)" fg:x="93" fg:w="2"/><text x="7.6251%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="7.3751%" y="581" width="0.1586%" height="15" fill="rgb(245,139,43)" fg:x="93" fg:w="2"/><text x="7.6251%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="7.3751%" y="565" width="0.1586%" height="15" fill="rgb(252,170,7)" fg:x="93" fg:w="2"/><text x="7.6251%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="7.4544%" y="549" width="0.0793%" height="15" fill="rgb(231,118,14)" fg:x="94" fg:w="1"/><text x="7.7044%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.4544%" y="533" width="0.0793%" height="15" fill="rgb(238,83,0)" fg:x="94" fg:w="1"/><text x="7.7044%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.4544%" y="517" width="0.0793%" height="15" fill="rgb(221,39,39)" fg:x="94" fg:w="1"/><text x="7.7044%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="7.4544%" y="501" width="0.0793%" height="15" fill="rgb(222,119,46)" fg:x="94" fg:w="1"/><text x="7.7044%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.4544%" y="485" width="0.0793%" height="15" fill="rgb(222,165,49)" fg:x="94" fg:w="1"/><text x="7.7044%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.4544%" y="469" width="0.0793%" height="15" fill="rgb(219,113,52)" fg:x="94" fg:w="1"/><text x="7.7044%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.4544%" y="453" width="0.0793%" height="15" fill="rgb(214,7,15)" fg:x="94" fg:w="1"/><text x="7.7044%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.4544%" y="437" width="0.0793%" height="15" fill="rgb(235,32,4)" fg:x="94" fg:w="1"/><text x="7.7044%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.4544%" y="421" width="0.0793%" height="15" fill="rgb(238,90,54)" fg:x="94" fg:w="1"/><text x="7.7044%" y="431.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (45 samples, 3.57%)</title><rect x="4.0444%" y="645" width="3.5686%" height="15" fill="rgb(213,208,19)" fg:x="51" fg:w="45"/><text x="4.2944%" y="655.50">plug..</text></g><g><title>plugins_core::build::Build::with_username (1 samples, 0.08%)</title><rect x="7.5337%" y="629" width="0.0793%" height="15" fill="rgb(233,156,4)" fg:x="95" fg:w="1"/><text x="7.7837%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="7.5337%" y="613" width="0.0793%" height="15" fill="rgb(207,194,5)" fg:x="95" fg:w="1"/><text x="7.7837%" y="623.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="7.5337%" y="597" width="0.0793%" height="15" fill="rgb(206,111,30)" fg:x="95" fg:w="1"/><text x="7.7837%" y="607.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="7.5337%" y="581" width="0.0793%" height="15" fill="rgb(243,70,54)" fg:x="95" fg:w="1"/><text x="7.7837%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.5337%" y="565" width="0.0793%" height="15" fill="rgb(242,28,8)" fg:x="95" fg:w="1"/><text x="7.7837%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.5337%" y="549" width="0.0793%" height="15" fill="rgb(219,106,18)" fg:x="95" fg:w="1"/><text x="7.7837%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.5337%" y="533" width="0.0793%" height="15" fill="rgb(244,222,10)" fg:x="95" fg:w="1"/><text x="7.7837%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.5337%" y="517" width="0.0793%" height="15" fill="rgb(236,179,52)" fg:x="95" fg:w="1"/><text x="7.7837%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.5337%" y="501" width="0.0793%" height="15" fill="rgb(213,23,39)" fg:x="95" fg:w="1"/><text x="7.7837%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.5337%" y="485" width="0.0793%" height="15" fill="rgb(238,48,10)" fg:x="95" fg:w="1"/><text x="7.7837%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.5337%" y="469" width="0.0793%" height="15" fill="rgb(251,196,23)" fg:x="95" fg:w="1"/><text x="7.7837%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.5337%" y="453" width="0.0793%" height="15" fill="rgb(250,152,24)" fg:x="95" fg:w="1"/><text x="7.7837%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.5337%" y="437" width="0.0793%" height="15" fill="rgb(209,150,17)" fg:x="95" fg:w="1"/><text x="7.7837%" y="447.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="7.6130%" y="645" width="0.0793%" height="15" fill="rgb(234,202,34)" fg:x="96" fg:w="1"/><text x="7.8630%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="7.6130%" y="629" width="0.0793%" height="15" fill="rgb(253,148,53)" fg:x="96" fg:w="1"/><text x="7.8630%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="7.6923%" y="613" width="0.0793%" height="15" fill="rgb(218,129,16)" fg:x="97" fg:w="1"/><text x="7.9423%" y="623.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="7.6923%" y="597" width="0.0793%" height="15" fill="rgb(216,85,19)" fg:x="97" fg:w="1"/><text x="7.9423%" y="607.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="7.6923%" y="581" width="0.0793%" height="15" fill="rgb(235,228,7)" fg:x="97" fg:w="1"/><text x="7.9423%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.6923%" y="565" width="0.0793%" height="15" fill="rgb(245,175,0)" fg:x="97" fg:w="1"/><text x="7.9423%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.6923%" y="549" width="0.0793%" height="15" fill="rgb(208,168,36)" fg:x="97" fg:w="1"/><text x="7.9423%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.6923%" y="533" width="0.0793%" height="15" fill="rgb(246,171,24)" fg:x="97" fg:w="1"/><text x="7.9423%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.6923%" y="517" width="0.0793%" height="15" fill="rgb(215,142,24)" fg:x="97" fg:w="1"/><text x="7.9423%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.6923%" y="501" width="0.0793%" height="15" fill="rgb(250,187,7)" fg:x="97" fg:w="1"/><text x="7.9423%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.6923%" y="485" width="0.0793%" height="15" fill="rgb(228,66,33)" fg:x="97" fg:w="1"/><text x="7.9423%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.6923%" y="469" width="0.0793%" height="15" fill="rgb(234,215,21)" fg:x="97" fg:w="1"/><text x="7.9423%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.6923%" y="453" width="0.0793%" height="15" fill="rgb(222,191,20)" fg:x="97" fg:w="1"/><text x="7.9423%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.6923%" y="437" width="0.0793%" height="15" fill="rgb(245,79,54)" fg:x="97" fg:w="1"/><text x="7.9423%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.6923%" y="421" width="0.0793%" height="15" fill="rgb(240,10,37)" fg:x="97" fg:w="1"/><text x="7.9423%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.6923%" y="405" width="0.0793%" height="15" fill="rgb(214,192,32)" fg:x="97" fg:w="1"/><text x="7.9423%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.6923%" y="389" width="0.0793%" height="15" fill="rgb(209,36,54)" fg:x="97" fg:w="1"/><text x="7.9423%" y="399.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (79 samples, 6.26%)</title><rect x="1.5860%" y="661" width="6.2649%" height="15" fill="rgb(220,10,11)" fg:x="20" fg:w="79"/><text x="1.8360%" y="671.50">&lt;tests::..</text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="7.6923%" y="645" width="0.1586%" height="15" fill="rgb(221,106,17)" fg:x="97" fg:w="2"/><text x="7.9423%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="7.6923%" y="629" width="0.1586%" height="15" fill="rgb(251,142,44)" fg:x="97" fg:w="2"/><text x="7.9423%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="7.7716%" y="613" width="0.0793%" height="15" fill="rgb(238,13,15)" fg:x="98" fg:w="1"/><text x="8.0216%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="7.8509%" y="629" width="0.0793%" height="15" fill="rgb(208,107,27)" fg:x="99" fg:w="1"/><text x="8.1009%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="7.8509%" y="613" width="0.0793%" height="15" fill="rgb(205,136,37)" fg:x="99" fg:w="1"/><text x="8.1009%" y="623.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="7.8509%" y="597" width="0.0793%" height="15" fill="rgb(250,205,27)" fg:x="99" fg:w="1"/><text x="8.1009%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="7.8509%" y="581" width="0.0793%" height="15" fill="rgb(210,80,43)" fg:x="99" fg:w="1"/><text x="8.1009%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="7.8509%" y="565" width="0.0793%" height="15" fill="rgb(247,160,36)" fg:x="99" fg:w="1"/><text x="8.1009%" y="575.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="7.9302%" y="629" width="0.0793%" height="15" fill="rgb(234,13,49)" fg:x="100" fg:w="1"/><text x="8.1802%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.9302%" y="613" width="0.0793%" height="15" fill="rgb(234,122,0)" fg:x="100" fg:w="1"/><text x="8.1802%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.9302%" y="597" width="0.0793%" height="15" fill="rgb(207,146,38)" fg:x="100" fg:w="1"/><text x="8.1802%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.9302%" y="581" width="0.0793%" height="15" fill="rgb(207,177,25)" fg:x="100" fg:w="1"/><text x="8.1802%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.9302%" y="565" width="0.0793%" height="15" fill="rgb(211,178,42)" fg:x="100" fg:w="1"/><text x="8.1802%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.9302%" y="549" width="0.0793%" height="15" fill="rgb(230,69,54)" fg:x="100" fg:w="1"/><text x="8.1802%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.9302%" y="533" width="0.0793%" height="15" fill="rgb(214,135,41)" fg:x="100" fg:w="1"/><text x="8.1802%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.9302%" y="517" width="0.0793%" height="15" fill="rgb(237,67,25)" fg:x="100" fg:w="1"/><text x="8.1802%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.9302%" y="501" width="0.0793%" height="15" fill="rgb(222,189,50)" fg:x="100" fg:w="1"/><text x="8.1802%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.9302%" y="485" width="0.0793%" height="15" fill="rgb(245,148,34)" fg:x="100" fg:w="1"/><text x="8.1802%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.9302%" y="469" width="0.0793%" height="15" fill="rgb(222,29,6)" fg:x="100" fg:w="1"/><text x="8.1802%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.9302%" y="453" width="0.0793%" height="15" fill="rgb(221,189,43)" fg:x="100" fg:w="1"/><text x="8.1802%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.9302%" y="437" width="0.0793%" height="15" fill="rgb(207,36,27)" fg:x="100" fg:w="1"/><text x="8.1802%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.0095%" y="629" width="0.0793%" height="15" fill="rgb(217,90,24)" fg:x="101" fg:w="1"/><text x="8.2595%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="8.0888%" y="581" width="0.0793%" height="15" fill="rgb(224,66,35)" fg:x="102" fg:w="1"/><text x="8.3388%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.0888%" y="565" width="0.0793%" height="15" fill="rgb(221,13,50)" fg:x="102" fg:w="1"/><text x="8.3388%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.0888%" y="549" width="0.0793%" height="15" fill="rgb(236,68,49)" fg:x="102" fg:w="1"/><text x="8.3388%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.0888%" y="533" width="0.0793%" height="15" fill="rgb(229,146,28)" fg:x="102" fg:w="1"/><text x="8.3388%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.0888%" y="517" width="0.0793%" height="15" fill="rgb(225,31,38)" fg:x="102" fg:w="1"/><text x="8.3388%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.0888%" y="501" width="0.0793%" height="15" fill="rgb(250,208,3)" fg:x="102" fg:w="1"/><text x="8.3388%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.0888%" y="485" width="0.0793%" height="15" fill="rgb(246,54,23)" fg:x="102" fg:w="1"/><text x="8.3388%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.0888%" y="469" width="0.0793%" height="15" fill="rgb(243,76,11)" fg:x="102" fg:w="1"/><text x="8.3388%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.1681%" y="565" width="0.0793%" height="15" fill="rgb(245,21,50)" fg:x="103" fg:w="1"/><text x="8.4181%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.1681%" y="549" width="0.0793%" height="15" fill="rgb(228,9,43)" fg:x="103" fg:w="1"/><text x="8.4181%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.1681%" y="533" width="0.0793%" height="15" fill="rgb(208,100,47)" fg:x="103" fg:w="1"/><text x="8.4181%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.1681%" y="517" width="0.0793%" height="15" fill="rgb(232,26,8)" fg:x="103" fg:w="1"/><text x="8.4181%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.1681%" y="501" width="0.0793%" height="15" fill="rgb(216,166,38)" fg:x="103" fg:w="1"/><text x="8.4181%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.1681%" y="485" width="0.0793%" height="15" fill="rgb(251,202,51)" fg:x="103" fg:w="1"/><text x="8.4181%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.1681%" y="469" width="0.0793%" height="15" fill="rgb(254,216,34)" fg:x="103" fg:w="1"/><text x="8.4181%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.2474%" y="549" width="0.0793%" height="15" fill="rgb(251,32,27)" fg:x="104" fg:w="1"/><text x="8.4974%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2474%" y="533" width="0.0793%" height="15" fill="rgb(208,127,28)" fg:x="104" fg:w="1"/><text x="8.4974%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.2474%" y="517" width="0.0793%" height="15" fill="rgb(224,137,22)" fg:x="104" fg:w="1"/><text x="8.4974%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.2474%" y="501" width="0.0793%" height="15" fill="rgb(254,70,32)" fg:x="104" fg:w="1"/><text x="8.4974%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.2474%" y="485" width="0.0793%" height="15" fill="rgb(229,75,37)" fg:x="104" fg:w="1"/><text x="8.4974%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.2474%" y="469" width="0.0793%" height="15" fill="rgb(252,64,23)" fg:x="104" fg:w="1"/><text x="8.4974%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="8.3267%" y="533" width="0.2379%" height="15" fill="rgb(232,162,48)" fg:x="105" fg:w="3"/><text x="8.5767%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="8.3267%" y="517" width="0.2379%" height="15" fill="rgb(246,160,12)" fg:x="105" fg:w="3"/><text x="8.5767%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.4853%" y="501" width="0.0793%" height="15" fill="rgb(247,166,0)" fg:x="107" fg:w="1"/><text x="8.7353%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.4853%" y="485" width="0.0793%" height="15" fill="rgb(249,219,21)" fg:x="107" fg:w="1"/><text x="8.7353%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="8.1681%" y="581" width="0.5551%" height="15" fill="rgb(205,209,3)" fg:x="103" fg:w="7"/><text x="8.4181%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="8.2474%" y="565" width="0.4758%" height="15" fill="rgb(243,44,1)" fg:x="104" fg:w="6"/><text x="8.4974%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="8.3267%" y="549" width="0.3965%" height="15" fill="rgb(206,159,16)" fg:x="105" fg:w="5"/><text x="8.5767%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.5646%" y="533" width="0.1586%" height="15" fill="rgb(244,77,30)" fg:x="108" fg:w="2"/><text x="8.8146%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.5646%" y="517" width="0.1586%" height="15" fill="rgb(218,69,12)" fg:x="108" fg:w="2"/><text x="8.8146%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.5646%" y="501" width="0.1586%" height="15" fill="rgb(212,87,7)" fg:x="108" fg:w="2"/><text x="8.8146%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.71%)</title><rect x="8.0888%" y="597" width="0.7137%" height="15" fill="rgb(245,114,25)" fg:x="102" fg:w="9"/><text x="8.3388%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.7232%" y="581" width="0.0793%" height="15" fill="rgb(210,61,42)" fg:x="110" fg:w="1"/><text x="8.9732%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.7232%" y="565" width="0.0793%" height="15" fill="rgb(211,52,33)" fg:x="110" fg:w="1"/><text x="8.9732%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="8.7232%" y="549" width="0.0793%" height="15" fill="rgb(234,58,33)" fg:x="110" fg:w="1"/><text x="8.9732%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.8025%" y="565" width="0.0793%" height="15" fill="rgb(220,115,36)" fg:x="111" fg:w="1"/><text x="9.0525%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.8025%" y="549" width="0.0793%" height="15" fill="rgb(243,153,54)" fg:x="111" fg:w="1"/><text x="9.0525%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.8025%" y="597" width="0.1586%" height="15" fill="rgb(251,47,18)" fg:x="111" fg:w="2"/><text x="9.0525%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="8.8025%" y="581" width="0.1586%" height="15" fill="rgb(242,102,42)" fg:x="111" fg:w="2"/><text x="9.0525%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.8818%" y="565" width="0.0793%" height="15" fill="rgb(234,31,38)" fg:x="112" fg:w="1"/><text x="9.1318%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.8818%" y="549" width="0.0793%" height="15" fill="rgb(221,117,51)" fg:x="112" fg:w="1"/><text x="9.1318%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.8818%" y="533" width="0.0793%" height="15" fill="rgb(212,20,18)" fg:x="112" fg:w="1"/><text x="9.1318%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.9611%" y="565" width="0.1586%" height="15" fill="rgb(245,133,36)" fg:x="113" fg:w="2"/><text x="9.2111%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="8.9611%" y="549" width="0.1586%" height="15" fill="rgb(212,6,19)" fg:x="113" fg:w="2"/><text x="9.2111%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.9611%" y="533" width="0.1586%" height="15" fill="rgb(218,1,36)" fg:x="113" fg:w="2"/><text x="9.2111%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="8.9611%" y="517" width="0.1586%" height="15" fill="rgb(246,84,54)" fg:x="113" fg:w="2"/><text x="9.2111%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.32%)</title><rect x="8.9611%" y="581" width="0.3172%" height="15" fill="rgb(242,110,6)" fg:x="113" fg:w="4"/><text x="9.2111%" y="591.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="9.1197%" y="565" width="0.1586%" height="15" fill="rgb(214,47,5)" fg:x="115" fg:w="2"/><text x="9.3697%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.1197%" y="549" width="0.1586%" height="15" fill="rgb(218,159,25)" fg:x="115" fg:w="2"/><text x="9.3697%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.1197%" y="533" width="0.1586%" height="15" fill="rgb(215,211,28)" fg:x="115" fg:w="2"/><text x="9.3697%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.1990%" y="517" width="0.0793%" height="15" fill="rgb(238,59,32)" fg:x="116" fg:w="1"/><text x="9.4490%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.1990%" y="501" width="0.0793%" height="15" fill="rgb(226,82,3)" fg:x="116" fg:w="1"/><text x="9.4490%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="9.2784%" y="581" width="0.0793%" height="15" fill="rgb(240,164,32)" fg:x="117" fg:w="1"/><text x="9.5284%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="9.4370%" y="549" width="0.0793%" height="15" fill="rgb(232,46,7)" fg:x="119" fg:w="1"/><text x="9.6870%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.4370%" y="533" width="0.0793%" height="15" fill="rgb(229,129,53)" fg:x="119" fg:w="1"/><text x="9.6870%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.5163%" y="501" width="0.0793%" height="15" fill="rgb(234,188,29)" fg:x="120" fg:w="1"/><text x="9.7663%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.5163%" y="485" width="0.0793%" height="15" fill="rgb(246,141,4)" fg:x="120" fg:w="1"/><text x="9.7663%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.5163%" y="469" width="0.0793%" height="15" fill="rgb(229,23,39)" fg:x="120" fg:w="1"/><text x="9.7663%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="9.5956%" y="501" width="0.1586%" height="15" fill="rgb(206,12,3)" fg:x="121" fg:w="2"/><text x="9.8456%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="9.5956%" y="485" width="0.1586%" height="15" fill="rgb(252,226,20)" fg:x="121" fg:w="2"/><text x="9.8456%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.6749%" y="469" width="0.0793%" height="15" fill="rgb(216,123,35)" fg:x="122" fg:w="1"/><text x="9.9249%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.6749%" y="453" width="0.0793%" height="15" fill="rgb(212,68,40)" fg:x="122" fg:w="1"/><text x="9.9249%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8335%" y="469" width="0.0793%" height="15" fill="rgb(254,125,32)" fg:x="124" fg:w="1"/><text x="10.0835%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8335%" y="453" width="0.0793%" height="15" fill="rgb(253,97,22)" fg:x="124" fg:w="1"/><text x="10.0835%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.8335%" y="437" width="0.0793%" height="15" fill="rgb(241,101,14)" fg:x="124" fg:w="1"/><text x="10.0835%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.9128%" y="437" width="0.0793%" height="15" fill="rgb(238,103,29)" fg:x="125" fg:w="1"/><text x="10.1628%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.9921%" y="389" width="0.0793%" height="15" fill="rgb(233,195,47)" fg:x="126" fg:w="1"/><text x="10.2421%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="9.8335%" y="485" width="0.3172%" height="15" fill="rgb(246,218,30)" fg:x="124" fg:w="4"/><text x="10.0835%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="9.9128%" y="469" width="0.2379%" height="15" fill="rgb(219,145,47)" fg:x="125" fg:w="3"/><text x="10.1628%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="9.9128%" y="453" width="0.2379%" height="15" fill="rgb(243,12,26)" fg:x="125" fg:w="3"/><text x="10.1628%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="9.9921%" y="437" width="0.1586%" height="15" fill="rgb(214,87,16)" fg:x="126" fg:w="2"/><text x="10.2421%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="9.9921%" y="421" width="0.1586%" height="15" fill="rgb(208,99,42)" fg:x="126" fg:w="2"/><text x="10.2421%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="9.9921%" y="405" width="0.1586%" height="15" fill="rgb(253,99,2)" fg:x="126" fg:w="2"/><text x="10.2421%" y="415.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="10.0714%" y="389" width="0.0793%" height="15" fill="rgb(220,168,23)" fg:x="127" fg:w="1"/><text x="10.3214%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="10.0714%" y="373" width="0.0793%" height="15" fill="rgb(242,38,24)" fg:x="127" fg:w="1"/><text x="10.3214%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.71%)</title><rect x="9.5163%" y="533" width="0.7137%" height="15" fill="rgb(225,182,9)" fg:x="120" fg:w="9"/><text x="9.7663%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.71%)</title><rect x="9.5163%" y="517" width="0.7137%" height="15" fill="rgb(243,178,37)" fg:x="120" fg:w="9"/><text x="9.7663%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="9.7542%" y="501" width="0.4758%" height="15" fill="rgb(232,139,19)" fg:x="123" fg:w="6"/><text x="10.0042%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.1507%" y="485" width="0.0793%" height="15" fill="rgb(225,201,24)" fg:x="128" fg:w="1"/><text x="10.4007%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (14 samples, 1.11%)</title><rect x="9.3577%" y="581" width="1.1102%" height="15" fill="rgb(221,47,46)" fg:x="118" fg:w="14"/><text x="9.6077%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (14 samples, 1.11%)</title><rect x="9.3577%" y="565" width="1.1102%" height="15" fill="rgb(249,23,13)" fg:x="118" fg:w="14"/><text x="9.6077%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (12 samples, 0.95%)</title><rect x="9.5163%" y="549" width="0.9516%" height="15" fill="rgb(219,9,5)" fg:x="120" fg:w="12"/><text x="9.7663%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="10.2300%" y="533" width="0.2379%" height="15" fill="rgb(254,171,16)" fg:x="129" fg:w="3"/><text x="10.4800%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3886%" y="517" width="0.0793%" height="15" fill="rgb(230,171,20)" fg:x="131" fg:w="1"/><text x="10.6386%" y="527.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="10.3886%" y="501" width="0.0793%" height="15" fill="rgb(210,71,41)" fg:x="131" fg:w="1"/><text x="10.6386%" y="511.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="10.3886%" y="485" width="0.0793%" height="15" fill="rgb(206,173,20)" fg:x="131" fg:w="1"/><text x="10.6386%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.9437%" y="421" width="0.0793%" height="15" fill="rgb(233,88,34)" fg:x="138" fg:w="1"/><text x="11.1937%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.9437%" y="405" width="0.0793%" height="15" fill="rgb(223,209,46)" fg:x="138" fg:w="1"/><text x="11.1937%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.9437%" y="389" width="0.0793%" height="15" fill="rgb(250,43,18)" fg:x="138" fg:w="1"/><text x="11.1937%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.9437%" y="373" width="0.0793%" height="15" fill="rgb(208,13,10)" fg:x="138" fg:w="1"/><text x="11.1937%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.9437%" y="357" width="0.0793%" height="15" fill="rgb(212,200,36)" fg:x="138" fg:w="1"/><text x="11.1937%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.9437%" y="341" width="0.0793%" height="15" fill="rgb(225,90,30)" fg:x="138" fg:w="1"/><text x="11.1937%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9437%" y="325" width="0.0793%" height="15" fill="rgb(236,182,39)" fg:x="138" fg:w="1"/><text x="11.1937%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9437%" y="309" width="0.0793%" height="15" fill="rgb(212,144,35)" fg:x="138" fg:w="1"/><text x="11.1937%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.9437%" y="293" width="0.0793%" height="15" fill="rgb(228,63,44)" fg:x="138" fg:w="1"/><text x="11.1937%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="10.7851%" y="453" width="0.3965%" height="15" fill="rgb(228,109,6)" fg:x="136" fg:w="5"/><text x="11.0351%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="10.8644%" y="437" width="0.3172%" height="15" fill="rgb(238,117,24)" fg:x="137" fg:w="4"/><text x="11.1144%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.0230%" y="421" width="0.1586%" height="15" fill="rgb(242,26,26)" fg:x="139" fg:w="2"/><text x="11.2730%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.1023%" y="405" width="0.0793%" height="15" fill="rgb(221,92,48)" fg:x="140" fg:w="1"/><text x="11.3523%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.1023%" y="389" width="0.0793%" height="15" fill="rgb(209,209,32)" fg:x="140" fg:w="1"/><text x="11.3523%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.63%)</title><rect x="10.6265%" y="485" width="0.6344%" height="15" fill="rgb(221,70,22)" fg:x="134" fg:w="8"/><text x="10.8765%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="10.7058%" y="469" width="0.5551%" height="15" fill="rgb(248,145,5)" fg:x="135" fg:w="7"/><text x="10.9558%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.1816%" y="453" width="0.0793%" height="15" fill="rgb(226,116,26)" fg:x="141" fg:w="1"/><text x="11.4316%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.1816%" y="437" width="0.0793%" height="15" fill="rgb(244,5,17)" fg:x="141" fg:w="1"/><text x="11.4316%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="11.2609%" y="485" width="0.1586%" height="15" fill="rgb(252,159,33)" fg:x="142" fg:w="2"/><text x="11.5109%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.3402%" y="469" width="0.0793%" height="15" fill="rgb(206,71,0)" fg:x="143" fg:w="1"/><text x="11.5902%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.95%)</title><rect x="10.5472%" y="517" width="0.9516%" height="15" fill="rgb(233,118,54)" fg:x="133" fg:w="12"/><text x="10.7972%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (12 samples, 0.95%)</title><rect x="10.5472%" y="501" width="0.9516%" height="15" fill="rgb(234,83,48)" fg:x="133" fg:w="12"/><text x="10.7972%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.4195%" y="485" width="0.0793%" height="15" fill="rgb(228,3,54)" fg:x="144" fg:w="1"/><text x="11.6695%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.4195%" y="469" width="0.0793%" height="15" fill="rgb(226,155,13)" fg:x="144" fg:w="1"/><text x="11.6695%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.4195%" y="453" width="0.0793%" height="15" fill="rgb(241,28,37)" fg:x="144" fg:w="1"/><text x="11.6695%" y="463.50"></text></g><g><title>engine::session::Session::save_entity_changes (47 samples, 3.73%)</title><rect x="7.8509%" y="645" width="3.7272%" height="15" fill="rgb(233,93,10)" fg:x="99" fg:w="47"/><text x="8.1009%" y="655.50">engi..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (44 samples, 3.49%)</title><rect x="8.0888%" y="629" width="3.4893%" height="15" fill="rgb(225,113,19)" fg:x="102" fg:w="44"/><text x="8.3388%" y="639.50">eng..</text></g><g><title>engine::session::SavesEntities::check_for_changes (44 samples, 3.49%)</title><rect x="8.0888%" y="613" width="3.4893%" height="15" fill="rgb(241,2,18)" fg:x="102" fg:w="44"/><text x="8.3388%" y="623.50">eng..</text></g><g><title>kernel::model::any_entity_changes (33 samples, 2.62%)</title><rect x="8.9611%" y="597" width="2.6170%" height="15" fill="rgb(228,207,21)" fg:x="113" fg:w="33"/><text x="9.2111%" y="607.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (14 samples, 1.11%)</title><rect x="10.4679%" y="581" width="1.1102%" height="15" fill="rgb(213,211,35)" fg:x="132" fg:w="14"/><text x="10.7179%" y="591.50"></text></g><g><title>serde_json::de::from_trait (14 samples, 1.11%)</title><rect x="10.4679%" y="565" width="1.1102%" height="15" fill="rgb(209,83,10)" fg:x="132" fg:w="14"/><text x="10.7179%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (14 samples, 1.11%)</title><rect x="10.4679%" y="549" width="1.1102%" height="15" fill="rgb(209,164,1)" fg:x="132" fg:w="14"/><text x="10.7179%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 1.03%)</title><rect x="10.5472%" y="533" width="1.0309%" height="15" fill="rgb(213,184,43)" fg:x="133" fg:w="13"/><text x="10.7972%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.4988%" y="517" width="0.0793%" height="15" fill="rgb(231,61,34)" fg:x="145" fg:w="1"/><text x="11.7488%" y="527.50"></text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="11.5781%" y="645" width="0.0793%" height="15" fill="rgb(235,75,3)" fg:x="146" fg:w="1"/><text x="11.8281%" y="655.50"></text></g><g><title>engine::session::Session::close (49 samples, 3.89%)</title><rect x="7.8509%" y="661" width="3.8858%" height="15" fill="rgb(220,106,47)" fg:x="99" fg:w="49"/><text x="8.1009%" y="671.50">engi..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="11.6574%" y="645" width="0.0793%" height="15" fill="rgb(210,196,33)" fg:x="147" fg:w="1"/><text x="11.9074%" y="655.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="11.6574%" y="629" width="0.0793%" height="15" fill="rgb(229,154,42)" fg:x="147" fg:w="1"/><text x="11.9074%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="11.6574%" y="613" width="0.0793%" height="15" fill="rgb(228,114,26)" fg:x="147" fg:w="1"/><text x="11.9074%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="11.8953%" y="501" width="0.0793%" height="15" fill="rgb(208,144,1)" fg:x="150" fg:w="1"/><text x="12.1453%" y="511.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="11.8953%" y="485" width="0.0793%" height="15" fill="rgb(239,112,37)" fg:x="150" fg:w="1"/><text x="12.1453%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.8953%" y="469" width="0.0793%" height="15" fill="rgb(210,96,50)" fg:x="150" fg:w="1"/><text x="12.1453%" y="479.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.8953%" y="453" width="0.0793%" height="15" fill="rgb(222,178,2)" fg:x="150" fg:w="1"/><text x="12.1453%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="11.8953%" y="437" width="0.0793%" height="15" fill="rgb(226,74,18)" fg:x="150" fg:w="1"/><text x="12.1453%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.8953%" y="421" width="0.0793%" height="15" fill="rgb(225,67,54)" fg:x="150" fg:w="1"/><text x="12.1453%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.8953%" y="405" width="0.0793%" height="15" fill="rgb(251,92,32)" fg:x="150" fg:w="1"/><text x="12.1453%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.8953%" y="389" width="0.0793%" height="15" fill="rgb(228,149,22)" fg:x="150" fg:w="1"/><text x="12.1453%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.8953%" y="373" width="0.0793%" height="15" fill="rgb(243,54,13)" fg:x="150" fg:w="1"/><text x="12.1453%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.8953%" y="357" width="0.0793%" height="15" fill="rgb(243,180,28)" fg:x="150" fg:w="1"/><text x="12.1453%" y="367.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (2 samples, 0.16%)</title><rect x="11.8953%" y="597" width="0.1586%" height="15" fill="rgb(208,167,24)" fg:x="150" fg:w="2"/><text x="12.1453%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="11.8953%" y="581" width="0.1586%" height="15" fill="rgb(245,73,45)" fg:x="150" fg:w="2"/><text x="12.1453%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="11.8953%" y="565" width="0.1586%" height="15" fill="rgb(237,203,48)" fg:x="150" fg:w="2"/><text x="12.1453%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="11.8953%" y="549" width="0.1586%" height="15" fill="rgb(211,197,16)" fg:x="150" fg:w="2"/><text x="12.1453%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="11.8953%" y="533" width="0.1586%" height="15" fill="rgb(243,99,51)" fg:x="150" fg:w="2"/><text x="12.1453%" y="543.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="11.8953%" y="517" width="0.1586%" height="15" fill="rgb(215,123,29)" fg:x="150" fg:w="2"/><text x="12.1453%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_str (1 samples, 0.08%)</title><rect x="11.9746%" y="501" width="0.0793%" height="15" fill="rgb(239,186,37)" fg:x="151" fg:w="1"/><text x="12.2246%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.9746%" y="485" width="0.0793%" height="15" fill="rgb(252,136,39)" fg:x="151" fg:w="1"/><text x="12.2246%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9746%" y="469" width="0.0793%" height="15" fill="rgb(223,213,32)" fg:x="151" fg:w="1"/><text x="12.2246%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.9746%" y="453" width="0.0793%" height="15" fill="rgb(233,115,5)" fg:x="151" fg:w="1"/><text x="12.2246%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9746%" y="437" width="0.0793%" height="15" fill="rgb(207,226,44)" fg:x="151" fg:w="1"/><text x="12.2246%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.9746%" y="421" width="0.0793%" height="15" fill="rgb(208,126,0)" fg:x="151" fg:w="1"/><text x="12.2246%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.9746%" y="405" width="0.0793%" height="15" fill="rgb(244,66,21)" fg:x="151" fg:w="1"/><text x="12.2246%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.9746%" y="389" width="0.0793%" height="15" fill="rgb(222,97,12)" fg:x="151" fg:w="1"/><text x="12.2246%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.9746%" y="373" width="0.0793%" height="15" fill="rgb(219,213,19)" fg:x="151" fg:w="1"/><text x="12.2246%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.9746%" y="357" width="0.0793%" height="15" fill="rgb(252,169,30)" fg:x="151" fg:w="1"/><text x="12.2246%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.9746%" y="341" width="0.0793%" height="15" fill="rgb(206,32,51)" fg:x="151" fg:w="1"/><text x="12.2246%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.9746%" y="325" width="0.0793%" height="15" fill="rgb(250,172,42)" fg:x="151" fg:w="1"/><text x="12.2246%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.9746%" y="309" width="0.0793%" height="15" fill="rgb(209,34,43)" fg:x="151" fg:w="1"/><text x="12.2246%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.9746%" y="293" width="0.0793%" height="15" fill="rgb(223,11,35)" fg:x="151" fg:w="1"/><text x="12.2246%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.9746%" y="277" width="0.0793%" height="15" fill="rgb(251,219,26)" fg:x="151" fg:w="1"/><text x="12.2246%" y="287.50"></text></g><g><title>&lt;engine::perform::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (3 samples, 0.24%)</title><rect x="11.8953%" y="613" width="0.2379%" height="15" fill="rgb(231,119,3)" fg:x="150" fg:w="3"/><text x="12.1453%" y="623.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="12.0539%" y="597" width="0.0793%" height="15" fill="rgb(216,97,11)" fg:x="152" fg:w="1"/><text x="12.3039%" y="607.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="12.0539%" y="581" width="0.0793%" height="15" fill="rgb(223,59,9)" fg:x="152" fg:w="1"/><text x="12.3039%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="12.0539%" y="565" width="0.0793%" height="15" fill="rgb(233,93,31)" fg:x="152" fg:w="1"/><text x="12.3039%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="12.0539%" y="549" width="0.0793%" height="15" fill="rgb(239,81,33)" fg:x="152" fg:w="1"/><text x="12.3039%" y="559.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="12.0539%" y="533" width="0.0793%" height="15" fill="rgb(213,120,34)" fg:x="152" fg:w="1"/><text x="12.3039%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.0539%" y="517" width="0.0793%" height="15" fill="rgb(243,49,53)" fg:x="152" fg:w="1"/><text x="12.3039%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="12.0539%" y="501" width="0.0793%" height="15" fill="rgb(247,216,33)" fg:x="152" fg:w="1"/><text x="12.3039%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.2125%" y="469" width="0.0793%" height="15" fill="rgb(226,26,14)" fg:x="154" fg:w="1"/><text x="12.4625%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="12.2125%" y="501" width="0.1586%" height="15" fill="rgb(215,49,53)" fg:x="154" fg:w="2"/><text x="12.4625%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="12.2125%" y="485" width="0.1586%" height="15" fill="rgb(245,162,40)" fg:x="154" fg:w="2"/><text x="12.4625%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="12.2918%" y="469" width="0.0793%" height="15" fill="rgb(229,68,17)" fg:x="155" fg:w="1"/><text x="12.5418%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="12.1332%" y="533" width="0.3172%" height="15" fill="rgb(213,182,10)" fg:x="153" fg:w="4"/><text x="12.3832%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="12.2125%" y="517" width="0.2379%" height="15" fill="rgb(245,125,30)" fg:x="154" fg:w="3"/><text x="12.4625%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.3711%" y="501" width="0.0793%" height="15" fill="rgb(232,202,2)" fg:x="156" fg:w="1"/><text x="12.6211%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (5 samples, 0.40%)</title><rect x="12.1332%" y="581" width="0.3965%" height="15" fill="rgb(237,140,51)" fg:x="153" fg:w="5"/><text x="12.3832%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="12.1332%" y="565" width="0.3965%" height="15" fill="rgb(236,157,25)" fg:x="153" fg:w="5"/><text x="12.3832%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="12.1332%" y="549" width="0.3965%" height="15" fill="rgb(219,209,0)" fg:x="153" fg:w="5"/><text x="12.3832%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.4504%" y="533" width="0.0793%" height="15" fill="rgb(240,116,54)" fg:x="157" fg:w="1"/><text x="12.7004%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="12.6090%" y="549" width="0.1586%" height="15" fill="rgb(216,10,36)" fg:x="159" fg:w="2"/><text x="12.8590%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="12.6090%" y="533" width="0.1586%" height="15" fill="rgb(222,72,44)" fg:x="159" fg:w="2"/><text x="12.8590%" y="543.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="12.7676%" y="549" width="0.0793%" height="15" fill="rgb(232,159,9)" fg:x="161" fg:w="1"/><text x="13.0176%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="12.7676%" y="533" width="0.0793%" height="15" fill="rgb(210,39,32)" fg:x="161" fg:w="1"/><text x="13.0176%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.7676%" y="517" width="0.0793%" height="15" fill="rgb(216,194,45)" fg:x="161" fg:w="1"/><text x="13.0176%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="12.7676%" y="501" width="0.0793%" height="15" fill="rgb(218,18,35)" fg:x="161" fg:w="1"/><text x="13.0176%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="12.9262%" y="469" width="0.0793%" height="15" fill="rgb(207,83,51)" fg:x="163" fg:w="1"/><text x="13.1762%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.9262%" y="453" width="0.0793%" height="15" fill="rgb(225,63,43)" fg:x="163" fg:w="1"/><text x="13.1762%" y="463.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="13.0056%" y="357" width="0.0793%" height="15" fill="rgb(207,57,36)" fg:x="164" fg:w="1"/><text x="13.2556%" y="367.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="13.0056%" y="341" width="0.0793%" height="15" fill="rgb(216,99,33)" fg:x="164" fg:w="1"/><text x="13.2556%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="13.0056%" y="325" width="0.0793%" height="15" fill="rgb(225,42,16)" fg:x="164" fg:w="1"/><text x="13.2556%" y="335.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="13.0056%" y="309" width="0.0793%" height="15" fill="rgb(220,201,45)" fg:x="164" fg:w="1"/><text x="13.2556%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="13.0056%" y="293" width="0.0793%" height="15" fill="rgb(225,33,4)" fg:x="164" fg:w="1"/><text x="13.2556%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.0056%" y="277" width="0.0793%" height="15" fill="rgb(224,33,50)" fg:x="164" fg:w="1"/><text x="13.2556%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.0056%" y="261" width="0.0793%" height="15" fill="rgb(246,198,51)" fg:x="164" fg:w="1"/><text x="13.2556%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.0056%" y="245" width="0.0793%" height="15" fill="rgb(205,22,4)" fg:x="164" fg:w="1"/><text x="13.2556%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.0056%" y="229" width="0.0793%" height="15" fill="rgb(206,3,8)" fg:x="164" fg:w="1"/><text x="13.2556%" y="239.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="13.0849%" y="341" width="0.1586%" height="15" fill="rgb(251,23,15)" fg:x="165" fg:w="2"/><text x="13.3349%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="13.0849%" y="325" width="0.1586%" height="15" fill="rgb(252,88,28)" fg:x="165" fg:w="2"/><text x="13.3349%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="13.0849%" y="309" width="0.1586%" height="15" fill="rgb(212,127,14)" fg:x="165" fg:w="2"/><text x="13.3349%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.1642%" y="293" width="0.0793%" height="15" fill="rgb(247,145,37)" fg:x="166" fg:w="1"/><text x="13.4142%" y="303.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="12.9262%" y="485" width="0.3965%" height="15" fill="rgb(209,117,53)" fg:x="163" fg:w="5"/><text x="13.1762%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="13.0056%" y="469" width="0.3172%" height="15" fill="rgb(212,90,42)" fg:x="164" fg:w="4"/><text x="13.2556%" y="479.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (4 samples, 0.32%)</title><rect x="13.0056%" y="453" width="0.3172%" height="15" fill="rgb(218,164,37)" fg:x="164" fg:w="4"/><text x="13.2556%" y="463.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (4 samples, 0.32%)</title><rect x="13.0056%" y="437" width="0.3172%" height="15" fill="rgb(246,65,34)" fg:x="164" fg:w="4"/><text x="13.2556%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="13.0056%" y="421" width="0.3172%" height="15" fill="rgb(231,100,33)" fg:x="164" fg:w="4"/><text x="13.2556%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.32%)</title><rect x="13.0056%" y="405" width="0.3172%" height="15" fill="rgb(228,126,14)" fg:x="164" fg:w="4"/><text x="13.2556%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="13.0056%" y="389" width="0.3172%" height="15" fill="rgb(215,173,21)" fg:x="164" fg:w="4"/><text x="13.2556%" y="399.50"></text></g><g><title>engine::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="13.0056%" y="373" width="0.3172%" height="15" fill="rgb(210,6,40)" fg:x="164" fg:w="4"/><text x="13.2556%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::from_str (3 samples, 0.24%)</title><rect x="13.0849%" y="357" width="0.2379%" height="15" fill="rgb(212,48,18)" fg:x="165" fg:w="3"/><text x="13.3349%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.2435%" y="341" width="0.0793%" height="15" fill="rgb(230,214,11)" fg:x="167" fg:w="1"/><text x="13.4935%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.2435%" y="325" width="0.0793%" height="15" fill="rgb(254,105,39)" fg:x="167" fg:w="1"/><text x="13.4935%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.2435%" y="309" width="0.0793%" height="15" fill="rgb(245,158,5)" fg:x="167" fg:w="1"/><text x="13.4935%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.2435%" y="293" width="0.0793%" height="15" fill="rgb(249,208,11)" fg:x="167" fg:w="1"/><text x="13.4935%" y="303.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.3228%" y="453" width="0.0793%" height="15" fill="rgb(210,39,28)" fg:x="168" fg:w="1"/><text x="13.5728%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.3228%" y="437" width="0.0793%" height="15" fill="rgb(211,56,53)" fg:x="168" fg:w="1"/><text x="13.5728%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.3228%" y="421" width="0.0793%" height="15" fill="rgb(226,201,30)" fg:x="168" fg:w="1"/><text x="13.5728%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.3228%" y="405" width="0.0793%" height="15" fill="rgb(239,101,34)" fg:x="168" fg:w="1"/><text x="13.5728%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.3228%" y="389" width="0.0793%" height="15" fill="rgb(226,209,5)" fg:x="168" fg:w="1"/><text x="13.5728%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.3228%" y="373" width="0.0793%" height="15" fill="rgb(250,105,47)" fg:x="168" fg:w="1"/><text x="13.5728%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.3228%" y="357" width="0.0793%" height="15" fill="rgb(230,72,3)" fg:x="168" fg:w="1"/><text x="13.5728%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.3228%" y="341" width="0.0793%" height="15" fill="rgb(232,218,39)" fg:x="168" fg:w="1"/><text x="13.5728%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.3228%" y="325" width="0.0793%" height="15" fill="rgb(248,166,6)" fg:x="168" fg:w="1"/><text x="13.5728%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.3228%" y="309" width="0.0793%" height="15" fill="rgb(247,89,20)" fg:x="168" fg:w="1"/><text x="13.5728%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.3228%" y="293" width="0.0793%" height="15" fill="rgb(248,130,54)" fg:x="168" fg:w="1"/><text x="13.5728%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.3228%" y="277" width="0.0793%" height="15" fill="rgb(234,196,4)" fg:x="168" fg:w="1"/><text x="13.5728%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.3228%" y="261" width="0.0793%" height="15" fill="rgb(250,143,31)" fg:x="168" fg:w="1"/><text x="13.5728%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.3228%" y="245" width="0.0793%" height="15" fill="rgb(211,110,34)" fg:x="168" fg:w="1"/><text x="13.5728%" y="255.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="13.4021%" y="437" width="0.0793%" height="15" fill="rgb(215,124,48)" fg:x="169" fg:w="1"/><text x="13.6521%" y="447.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="13.4021%" y="453" width="0.1586%" height="15" fill="rgb(216,46,13)" fg:x="169" fg:w="2"/><text x="13.6521%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="13.4814%" y="437" width="0.0793%" height="15" fill="rgb(205,184,25)" fg:x="170" fg:w="1"/><text x="13.7314%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.4814%" y="421" width="0.0793%" height="15" fill="rgb(228,1,10)" fg:x="170" fg:w="1"/><text x="13.7314%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.5607%" y="421" width="0.0793%" height="15" fill="rgb(213,116,27)" fg:x="171" fg:w="1"/><text x="13.8107%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.5607%" y="405" width="0.0793%" height="15" fill="rgb(241,95,50)" fg:x="171" fg:w="1"/><text x="13.8107%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.5607%" y="389" width="0.0793%" height="15" fill="rgb(238,48,32)" fg:x="171" fg:w="1"/><text x="13.8107%" y="399.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (10 samples, 0.79%)</title><rect x="12.9262%" y="501" width="0.7930%" height="15" fill="rgb(235,113,49)" fg:x="163" fg:w="10"/><text x="13.1762%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.40%)</title><rect x="13.3228%" y="485" width="0.3965%" height="15" fill="rgb(205,127,43)" fg:x="168" fg:w="5"/><text x="13.5728%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="13.3228%" y="469" width="0.3965%" height="15" fill="rgb(250,162,2)" fg:x="168" fg:w="5"/><text x="13.5728%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.5607%" y="453" width="0.1586%" height="15" fill="rgb(220,13,41)" fg:x="171" fg:w="2"/><text x="13.8107%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.5607%" y="437" width="0.1586%" height="15" fill="rgb(249,221,25)" fg:x="171" fg:w="2"/><text x="13.8107%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="13.6400%" y="421" width="0.0793%" height="15" fill="rgb(215,208,19)" fg:x="172" fg:w="1"/><text x="13.8900%" y="431.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="13.6400%" y="405" width="0.0793%" height="15" fill="rgb(236,175,2)" fg:x="172" fg:w="1"/><text x="13.8900%" y="415.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="13.6400%" y="389" width="0.0793%" height="15" fill="rgb(241,52,2)" fg:x="172" fg:w="1"/><text x="13.8900%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.6400%" y="373" width="0.0793%" height="15" fill="rgb(248,140,14)" fg:x="172" fg:w="1"/><text x="13.8900%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.6400%" y="357" width="0.0793%" height="15" fill="rgb(253,22,42)" fg:x="172" fg:w="1"/><text x="13.8900%" y="367.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.7193%" y="453" width="0.0793%" height="15" fill="rgb(234,61,47)" fg:x="173" fg:w="1"/><text x="13.9693%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.7193%" y="437" width="0.0793%" height="15" fill="rgb(208,226,15)" fg:x="173" fg:w="1"/><text x="13.9693%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.7193%" y="421" width="0.0793%" height="15" fill="rgb(217,221,4)" fg:x="173" fg:w="1"/><text x="13.9693%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.7193%" y="405" width="0.0793%" height="15" fill="rgb(212,174,34)" fg:x="173" fg:w="1"/><text x="13.9693%" y="415.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="13.7986%" y="373" width="0.0793%" height="15" fill="rgb(253,83,4)" fg:x="174" fg:w="1"/><text x="14.0486%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.7986%" y="357" width="0.0793%" height="15" fill="rgb(250,195,49)" fg:x="174" fg:w="1"/><text x="14.0486%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.7986%" y="341" width="0.0793%" height="15" fill="rgb(241,192,25)" fg:x="174" fg:w="1"/><text x="14.0486%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.7986%" y="325" width="0.0793%" height="15" fill="rgb(208,124,10)" fg:x="174" fg:w="1"/><text x="14.0486%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.7986%" y="309" width="0.0793%" height="15" fill="rgb(222,33,0)" fg:x="174" fg:w="1"/><text x="14.0486%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.7986%" y="293" width="0.0793%" height="15" fill="rgb(234,209,28)" fg:x="174" fg:w="1"/><text x="14.0486%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.7986%" y="277" width="0.0793%" height="15" fill="rgb(224,11,23)" fg:x="174" fg:w="1"/><text x="14.0486%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.7986%" y="261" width="0.0793%" height="15" fill="rgb(232,99,1)" fg:x="174" fg:w="1"/><text x="14.0486%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.7986%" y="245" width="0.0793%" height="15" fill="rgb(237,95,45)" fg:x="174" fg:w="1"/><text x="14.0486%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.7986%" y="229" width="0.0793%" height="15" fill="rgb(208,109,11)" fg:x="174" fg:w="1"/><text x="14.0486%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.7986%" y="213" width="0.0793%" height="15" fill="rgb(216,190,48)" fg:x="174" fg:w="1"/><text x="14.0486%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.7986%" y="197" width="0.0793%" height="15" fill="rgb(251,171,36)" fg:x="174" fg:w="1"/><text x="14.0486%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.7986%" y="181" width="0.0793%" height="15" fill="rgb(230,62,22)" fg:x="174" fg:w="1"/><text x="14.0486%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.1158%" y="277" width="0.0793%" height="15" fill="rgb(225,114,35)" fg:x="178" fg:w="1"/><text x="14.3658%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.1158%" y="261" width="0.0793%" height="15" fill="rgb(215,118,42)" fg:x="178" fg:w="1"/><text x="14.3658%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.1158%" y="245" width="0.0793%" height="15" fill="rgb(243,119,21)" fg:x="178" fg:w="1"/><text x="14.3658%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.1158%" y="229" width="0.0793%" height="15" fill="rgb(252,177,53)" fg:x="178" fg:w="1"/><text x="14.3658%" y="239.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (4 samples, 0.32%)</title><rect x="13.9572%" y="357" width="0.3172%" height="15" fill="rgb(237,209,29)" fg:x="176" fg:w="4"/><text x="14.2072%" y="367.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (4 samples, 0.32%)</title><rect x="13.9572%" y="341" width="0.3172%" height="15" fill="rgb(212,65,23)" fg:x="176" fg:w="4"/><text x="14.2072%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="13.9572%" y="325" width="0.3172%" height="15" fill="rgb(230,222,46)" fg:x="176" fg:w="4"/><text x="14.2072%" y="335.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="14.0365%" y="309" width="0.2379%" height="15" fill="rgb(215,135,32)" fg:x="177" fg:w="3"/><text x="14.2865%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="14.0365%" y="293" width="0.2379%" height="15" fill="rgb(246,101,22)" fg:x="177" fg:w="3"/><text x="14.2865%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.1951%" y="277" width="0.0793%" height="15" fill="rgb(206,107,13)" fg:x="179" fg:w="1"/><text x="14.4451%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.1951%" y="261" width="0.0793%" height="15" fill="rgb(250,100,44)" fg:x="179" fg:w="1"/><text x="14.4451%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.1951%" y="245" width="0.0793%" height="15" fill="rgb(231,147,38)" fg:x="179" fg:w="1"/><text x="14.4451%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.1951%" y="229" width="0.0793%" height="15" fill="rgb(229,8,40)" fg:x="179" fg:w="1"/><text x="14.4451%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.1951%" y="213" width="0.0793%" height="15" fill="rgb(221,135,30)" fg:x="179" fg:w="1"/><text x="14.4451%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.1951%" y="197" width="0.0793%" height="15" fill="rgb(249,193,18)" fg:x="179" fg:w="1"/><text x="14.4451%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.1951%" y="181" width="0.0793%" height="15" fill="rgb(209,133,39)" fg:x="179" fg:w="1"/><text x="14.4451%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.1951%" y="165" width="0.0793%" height="15" fill="rgb(232,100,14)" fg:x="179" fg:w="1"/><text x="14.4451%" y="175.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="14.2744%" y="357" width="0.0793%" height="15" fill="rgb(224,185,1)" fg:x="180" fg:w="1"/><text x="14.5244%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="14.2744%" y="341" width="0.0793%" height="15" fill="rgb(223,139,8)" fg:x="180" fg:w="1"/><text x="14.5244%" y="351.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="14.2744%" y="325" width="0.0793%" height="15" fill="rgb(232,213,38)" fg:x="180" fg:w="1"/><text x="14.5244%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.2744%" y="309" width="0.0793%" height="15" fill="rgb(207,94,22)" fg:x="180" fg:w="1"/><text x="14.5244%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.2744%" y="293" width="0.0793%" height="15" fill="rgb(219,183,54)" fg:x="180" fg:w="1"/><text x="14.5244%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.2744%" y="277" width="0.0793%" height="15" fill="rgb(216,185,54)" fg:x="180" fg:w="1"/><text x="14.5244%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.2744%" y="261" width="0.0793%" height="15" fill="rgb(254,217,39)" fg:x="180" fg:w="1"/><text x="14.5244%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.2744%" y="245" width="0.0793%" height="15" fill="rgb(240,178,23)" fg:x="180" fg:w="1"/><text x="14.5244%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.2744%" y="229" width="0.0793%" height="15" fill="rgb(218,11,47)" fg:x="180" fg:w="1"/><text x="14.5244%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.2744%" y="213" width="0.0793%" height="15" fill="rgb(218,51,51)" fg:x="180" fg:w="1"/><text x="14.5244%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.3537%" y="261" width="0.0793%" height="15" fill="rgb(238,126,27)" fg:x="181" fg:w="1"/><text x="14.6037%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.3537%" y="245" width="0.0793%" height="15" fill="rgb(249,202,22)" fg:x="181" fg:w="1"/><text x="14.6037%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.3537%" y="229" width="0.0793%" height="15" fill="rgb(254,195,49)" fg:x="181" fg:w="1"/><text x="14.6037%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.4330%" y="229" width="0.0793%" height="15" fill="rgb(208,123,14)" fg:x="182" fg:w="1"/><text x="14.6830%" y="239.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="14.4330%" y="213" width="0.0793%" height="15" fill="rgb(224,200,8)" fg:x="182" fg:w="1"/><text x="14.6830%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.5916%" y="213" width="0.0793%" height="15" fill="rgb(217,61,36)" fg:x="184" fg:w="1"/><text x="14.8416%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.5916%" y="197" width="0.0793%" height="15" fill="rgb(206,35,45)" fg:x="184" fg:w="1"/><text x="14.8416%" y="207.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="14.3537%" y="341" width="0.3965%" height="15" fill="rgb(217,65,33)" fg:x="181" fg:w="5"/><text x="14.6037%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.40%)</title><rect x="14.3537%" y="325" width="0.3965%" height="15" fill="rgb(222,158,48)" fg:x="181" fg:w="5"/><text x="14.6037%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="14.3537%" y="309" width="0.3965%" height="15" fill="rgb(254,2,54)" fg:x="181" fg:w="5"/><text x="14.6037%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.40%)</title><rect x="14.3537%" y="293" width="0.3965%" height="15" fill="rgb(250,143,38)" fg:x="181" fg:w="5"/><text x="14.6037%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="14.3537%" y="277" width="0.3965%" height="15" fill="rgb(248,25,0)" fg:x="181" fg:w="5"/><text x="14.6037%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="14.4330%" y="261" width="0.3172%" height="15" fill="rgb(206,152,27)" fg:x="182" fg:w="4"/><text x="14.6830%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="14.4330%" y="245" width="0.3172%" height="15" fill="rgb(240,77,30)" fg:x="182" fg:w="4"/><text x="14.6830%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="14.5123%" y="229" width="0.2379%" height="15" fill="rgb(231,5,3)" fg:x="183" fg:w="3"/><text x="14.7623%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.6709%" y="213" width="0.0793%" height="15" fill="rgb(207,226,32)" fg:x="185" fg:w="1"/><text x="14.9209%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.6709%" y="197" width="0.0793%" height="15" fill="rgb(222,207,47)" fg:x="185" fg:w="1"/><text x="14.9209%" y="207.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.6709%" y="181" width="0.0793%" height="15" fill="rgb(229,115,45)" fg:x="185" fg:w="1"/><text x="14.9209%" y="191.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="14.6709%" y="165" width="0.0793%" height="15" fill="rgb(224,191,6)" fg:x="185" fg:w="1"/><text x="14.9209%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.8295%" y="277" width="0.0793%" height="15" fill="rgb(230,227,24)" fg:x="187" fg:w="1"/><text x="15.0795%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.8295%" y="261" width="0.0793%" height="15" fill="rgb(228,80,19)" fg:x="187" fg:w="1"/><text x="15.0795%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.8295%" y="245" width="0.0793%" height="15" fill="rgb(247,229,0)" fg:x="187" fg:w="1"/><text x="15.0795%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.9088%" y="229" width="0.0793%" height="15" fill="rgb(237,194,15)" fg:x="188" fg:w="1"/><text x="15.1588%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="14.9088%" y="261" width="0.1586%" height="15" fill="rgb(219,203,20)" fg:x="188" fg:w="2"/><text x="15.1588%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="14.9088%" y="245" width="0.1586%" height="15" fill="rgb(234,128,8)" fg:x="188" fg:w="2"/><text x="15.1588%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="14.9881%" y="229" width="0.0793%" height="15" fill="rgb(248,202,8)" fg:x="189" fg:w="1"/><text x="15.2381%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.9881%" y="213" width="0.0793%" height="15" fill="rgb(206,104,37)" fg:x="189" fg:w="1"/><text x="15.2381%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="15.0674%" y="229" width="0.0793%" height="15" fill="rgb(223,8,27)" fg:x="190" fg:w="1"/><text x="15.3174%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.0674%" y="213" width="0.0793%" height="15" fill="rgb(216,217,28)" fg:x="190" fg:w="1"/><text x="15.3174%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.0674%" y="197" width="0.0793%" height="15" fill="rgb(249,199,1)" fg:x="190" fg:w="1"/><text x="15.3174%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (30 samples, 2.38%)</title><rect x="12.8469%" y="533" width="2.3791%" height="15" fill="rgb(240,85,17)" fg:x="162" fg:w="30"/><text x="13.0969%" y="543.50">&lt;a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (30 samples, 2.38%)</title><rect x="12.8469%" y="517" width="2.3791%" height="15" fill="rgb(206,108,45)" fg:x="162" fg:w="30"/><text x="13.0969%" y="527.50">&lt;c..</text></g><g><title>plugins_core::tools::get_contained_keys (19 samples, 1.51%)</title><rect x="13.7193%" y="501" width="1.5067%" height="15" fill="rgb(245,210,41)" fg:x="173" fg:w="19"/><text x="13.9693%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (19 samples, 1.51%)</title><rect x="13.7193%" y="485" width="1.5067%" height="15" fill="rgb(206,13,37)" fg:x="173" fg:w="19"/><text x="13.9693%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (19 samples, 1.51%)</title><rect x="13.7193%" y="469" width="1.5067%" height="15" fill="rgb(250,61,18)" fg:x="173" fg:w="19"/><text x="13.9693%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (18 samples, 1.43%)</title><rect x="13.7986%" y="453" width="1.4274%" height="15" fill="rgb(235,172,48)" fg:x="174" fg:w="18"/><text x="14.0486%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (18 samples, 1.43%)</title><rect x="13.7986%" y="437" width="1.4274%" height="15" fill="rgb(249,201,17)" fg:x="174" fg:w="18"/><text x="14.0486%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18 samples, 1.43%)</title><rect x="13.7986%" y="421" width="1.4274%" height="15" fill="rgb(219,208,6)" fg:x="174" fg:w="18"/><text x="14.0486%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (18 samples, 1.43%)</title><rect x="13.7986%" y="405" width="1.4274%" height="15" fill="rgb(248,31,23)" fg:x="174" fg:w="18"/><text x="14.0486%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (18 samples, 1.43%)</title><rect x="13.7986%" y="389" width="1.4274%" height="15" fill="rgb(245,15,42)" fg:x="174" fg:w="18"/><text x="14.0486%" y="399.50"></text></g><g><title>engine::internal::Entities::add_persisted (17 samples, 1.35%)</title><rect x="13.8779%" y="373" width="1.3481%" height="15" fill="rgb(222,217,39)" fg:x="175" fg:w="17"/><text x="14.1279%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::from_str (11 samples, 0.87%)</title><rect x="14.3537%" y="357" width="0.8723%" height="15" fill="rgb(210,219,27)" fg:x="181" fg:w="11"/><text x="14.6037%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="14.7502%" y="341" width="0.4758%" height="15" fill="rgb(252,166,36)" fg:x="186" fg:w="6"/><text x="15.0002%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="14.7502%" y="325" width="0.4758%" height="15" fill="rgb(245,132,34)" fg:x="186" fg:w="6"/><text x="15.0002%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="14.8295%" y="309" width="0.3965%" height="15" fill="rgb(236,54,3)" fg:x="187" fg:w="5"/><text x="15.0795%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="14.8295%" y="293" width="0.3965%" height="15" fill="rgb(241,173,43)" fg:x="187" fg:w="5"/><text x="15.0795%" y="303.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="14.9088%" y="277" width="0.3172%" height="15" fill="rgb(215,190,9)" fg:x="188" fg:w="4"/><text x="15.1588%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.0674%" y="261" width="0.1586%" height="15" fill="rgb(242,101,16)" fg:x="190" fg:w="2"/><text x="15.3174%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="15.0674%" y="245" width="0.1586%" height="15" fill="rgb(223,190,21)" fg:x="190" fg:w="2"/><text x="15.3174%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="15.1467%" y="229" width="0.0793%" height="15" fill="rgb(215,228,25)" fg:x="191" fg:w="1"/><text x="15.3967%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.1467%" y="213" width="0.0793%" height="15" fill="rgb(225,36,22)" fg:x="191" fg:w="1"/><text x="15.3967%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="15.1467%" y="197" width="0.0793%" height="15" fill="rgb(251,106,46)" fg:x="191" fg:w="1"/><text x="15.3967%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="15.1467%" y="181" width="0.0793%" height="15" fill="rgb(208,90,1)" fg:x="191" fg:w="1"/><text x="15.3967%" y="191.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="15.2260%" y="469" width="0.0793%" height="15" fill="rgb(243,10,4)" fg:x="192" fg:w="1"/><text x="15.4760%" y="479.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="15.2260%" y="453" width="0.0793%" height="15" fill="rgb(212,137,27)" fg:x="192" fg:w="1"/><text x="15.4760%" y="463.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.2260%" y="437" width="0.0793%" height="15" fill="rgb(231,220,49)" fg:x="192" fg:w="1"/><text x="15.4760%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.2260%" y="421" width="0.0793%" height="15" fill="rgb(237,96,20)" fg:x="192" fg:w="1"/><text x="15.4760%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.2260%" y="405" width="0.0793%" height="15" fill="rgb(239,229,30)" fg:x="192" fg:w="1"/><text x="15.4760%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.2260%" y="389" width="0.0793%" height="15" fill="rgb(219,65,33)" fg:x="192" fg:w="1"/><text x="15.4760%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.2260%" y="373" width="0.0793%" height="15" fill="rgb(243,134,7)" fg:x="192" fg:w="1"/><text x="15.4760%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.2260%" y="357" width="0.0793%" height="15" fill="rgb(216,177,54)" fg:x="192" fg:w="1"/><text x="15.4760%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.2260%" y="341" width="0.0793%" height="15" fill="rgb(211,160,20)" fg:x="192" fg:w="1"/><text x="15.4760%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.2260%" y="325" width="0.0793%" height="15" fill="rgb(239,85,39)" fg:x="192" fg:w="1"/><text x="15.4760%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.2260%" y="309" width="0.0793%" height="15" fill="rgb(232,125,22)" fg:x="192" fg:w="1"/><text x="15.4760%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.3053%" y="453" width="0.0793%" height="15" fill="rgb(244,57,34)" fg:x="193" fg:w="1"/><text x="15.5553%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.3053%" y="437" width="0.0793%" height="15" fill="rgb(214,203,32)" fg:x="193" fg:w="1"/><text x="15.5553%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.3053%" y="421" width="0.0793%" height="15" fill="rgb(207,58,43)" fg:x="193" fg:w="1"/><text x="15.5553%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.3053%" y="405" width="0.0793%" height="15" fill="rgb(215,193,15)" fg:x="193" fg:w="1"/><text x="15.5553%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.3053%" y="389" width="0.0793%" height="15" fill="rgb(232,15,44)" fg:x="193" fg:w="1"/><text x="15.5553%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.3053%" y="373" width="0.0793%" height="15" fill="rgb(212,3,48)" fg:x="193" fg:w="1"/><text x="15.5553%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.3053%" y="357" width="0.0793%" height="15" fill="rgb(218,128,7)" fg:x="193" fg:w="1"/><text x="15.5553%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.3053%" y="341" width="0.0793%" height="15" fill="rgb(226,216,39)" fg:x="193" fg:w="1"/><text x="15.5553%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.3053%" y="325" width="0.0793%" height="15" fill="rgb(243,47,51)" fg:x="193" fg:w="1"/><text x="15.5553%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.3053%" y="309" width="0.0793%" height="15" fill="rgb(241,183,40)" fg:x="193" fg:w="1"/><text x="15.5553%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.3053%" y="293" width="0.0793%" height="15" fill="rgb(231,217,32)" fg:x="193" fg:w="1"/><text x="15.5553%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.3846%" y="373" width="0.0793%" height="15" fill="rgb(229,61,38)" fg:x="194" fg:w="1"/><text x="15.6346%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.3846%" y="357" width="0.0793%" height="15" fill="rgb(225,210,5)" fg:x="194" fg:w="1"/><text x="15.6346%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.3846%" y="341" width="0.0793%" height="15" fill="rgb(231,79,45)" fg:x="194" fg:w="1"/><text x="15.6346%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.3846%" y="325" width="0.0793%" height="15" fill="rgb(224,100,7)" fg:x="194" fg:w="1"/><text x="15.6346%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.3846%" y="309" width="0.0793%" height="15" fill="rgb(241,198,18)" fg:x="194" fg:w="1"/><text x="15.6346%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.3846%" y="293" width="0.0793%" height="15" fill="rgb(252,97,53)" fg:x="194" fg:w="1"/><text x="15.6346%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.3846%" y="277" width="0.0793%" height="15" fill="rgb(220,88,7)" fg:x="194" fg:w="1"/><text x="15.6346%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.3846%" y="261" width="0.0793%" height="15" fill="rgb(213,176,14)" fg:x="194" fg:w="1"/><text x="15.6346%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.3846%" y="245" width="0.0793%" height="15" fill="rgb(246,73,7)" fg:x="194" fg:w="1"/><text x="15.6346%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.3846%" y="229" width="0.0793%" height="15" fill="rgb(245,64,36)" fg:x="194" fg:w="1"/><text x="15.6346%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.3846%" y="213" width="0.0793%" height="15" fill="rgb(245,80,10)" fg:x="194" fg:w="1"/><text x="15.6346%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.3846%" y="197" width="0.0793%" height="15" fill="rgb(232,107,50)" fg:x="194" fg:w="1"/><text x="15.6346%" y="207.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (4 samples, 0.32%)</title><rect x="15.2260%" y="485" width="0.3172%" height="15" fill="rgb(253,3,0)" fg:x="192" fg:w="4"/><text x="15.4760%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="15.3053%" y="469" width="0.2379%" height="15" fill="rgb(212,99,53)" fg:x="193" fg:w="3"/><text x="15.5553%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="15.3846%" y="453" width="0.1586%" height="15" fill="rgb(249,111,54)" fg:x="194" fg:w="2"/><text x="15.6346%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="15.3846%" y="437" width="0.1586%" height="15" fill="rgb(249,55,30)" fg:x="194" fg:w="2"/><text x="15.6346%" y="447.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="15.3846%" y="421" width="0.1586%" height="15" fill="rgb(237,47,42)" fg:x="194" fg:w="2"/><text x="15.6346%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="15.3846%" y="405" width="0.1586%" height="15" fill="rgb(211,20,18)" fg:x="194" fg:w="2"/><text x="15.6346%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="15.3846%" y="389" width="0.1586%" height="15" fill="rgb(231,203,46)" fg:x="194" fg:w="2"/><text x="15.6346%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="15.4639%" y="373" width="0.0793%" height="15" fill="rgb(237,142,3)" fg:x="195" fg:w="1"/><text x="15.7139%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.4639%" y="357" width="0.0793%" height="15" fill="rgb(241,107,1)" fg:x="195" fg:w="1"/><text x="15.7139%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="16.1776%" y="149" width="0.0793%" height="15" fill="rgb(229,83,13)" fg:x="204" fg:w="1"/><text x="16.4276%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.1776%" y="133" width="0.0793%" height="15" fill="rgb(241,91,40)" fg:x="204" fg:w="1"/><text x="16.4276%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.1776%" y="117" width="0.0793%" height="15" fill="rgb(225,3,45)" fg:x="204" fg:w="1"/><text x="16.4276%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.40%)</title><rect x="15.9397%" y="197" width="0.3965%" height="15" fill="rgb(244,223,14)" fg:x="201" fg:w="5"/><text x="16.1897%" y="207.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="16.0190%" y="181" width="0.3172%" height="15" fill="rgb(224,124,37)" fg:x="202" fg:w="4"/><text x="16.2690%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="16.1776%" y="165" width="0.1586%" height="15" fill="rgb(251,171,30)" fg:x="204" fg:w="2"/><text x="16.4276%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="16.2569%" y="149" width="0.0793%" height="15" fill="rgb(236,46,54)" fg:x="205" fg:w="1"/><text x="16.5069%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.2569%" y="133" width="0.0793%" height="15" fill="rgb(245,213,5)" fg:x="205" fg:w="1"/><text x="16.5069%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.79%)</title><rect x="15.7811%" y="293" width="0.7930%" height="15" fill="rgb(230,144,27)" fg:x="199" fg:w="10"/><text x="16.0311%" y="303.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (10 samples, 0.79%)</title><rect x="15.7811%" y="277" width="0.7930%" height="15" fill="rgb(220,86,6)" fg:x="199" fg:w="10"/><text x="16.0311%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9 samples, 0.71%)</title><rect x="15.8604%" y="261" width="0.7137%" height="15" fill="rgb(240,20,13)" fg:x="200" fg:w="9"/><text x="16.1104%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.71%)</title><rect x="15.8604%" y="245" width="0.7137%" height="15" fill="rgb(217,89,34)" fg:x="200" fg:w="9"/><text x="16.1104%" y="255.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (8 samples, 0.63%)</title><rect x="15.9397%" y="229" width="0.6344%" height="15" fill="rgb(229,13,5)" fg:x="201" fg:w="8"/><text x="16.1897%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (8 samples, 0.63%)</title><rect x="15.9397%" y="213" width="0.6344%" height="15" fill="rgb(244,67,35)" fg:x="201" fg:w="8"/><text x="16.1897%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.24%)</title><rect x="16.3362%" y="197" width="0.2379%" height="15" fill="rgb(221,40,2)" fg:x="206" fg:w="3"/><text x="16.5862%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="16.4155%" y="181" width="0.1586%" height="15" fill="rgb(237,157,21)" fg:x="207" fg:w="2"/><text x="16.6655%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (11 samples, 0.87%)</title><rect x="15.7811%" y="309" width="0.8723%" height="15" fill="rgb(222,94,11)" fg:x="199" fg:w="11"/><text x="16.0311%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="16.5741%" y="293" width="0.0793%" height="15" fill="rgb(249,113,6)" fg:x="209" fg:w="1"/><text x="16.8241%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.5741%" y="277" width="0.0793%" height="15" fill="rgb(238,137,36)" fg:x="209" fg:w="1"/><text x="16.8241%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="16.6534%" y="245" width="0.1586%" height="15" fill="rgb(210,102,26)" fg:x="210" fg:w="2"/><text x="16.9034%" y="255.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="16.6534%" y="229" width="0.1586%" height="15" fill="rgb(218,30,30)" fg:x="210" fg:w="2"/><text x="16.9034%" y="239.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (15 samples, 1.19%)</title><rect x="15.7811%" y="325" width="1.1895%" height="15" fill="rgb(214,67,26)" fg:x="199" fg:w="15"/><text x="16.0311%" y="335.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="16.6534%" y="309" width="0.3172%" height="15" fill="rgb(251,9,53)" fg:x="210" fg:w="4"/><text x="16.9034%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="16.6534%" y="293" width="0.3172%" height="15" fill="rgb(228,204,25)" fg:x="210" fg:w="4"/><text x="16.9034%" y="303.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="16.6534%" y="277" width="0.3172%" height="15" fill="rgb(207,153,8)" fg:x="210" fg:w="4"/><text x="16.9034%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="16.6534%" y="261" width="0.3172%" height="15" fill="rgb(242,9,16)" fg:x="210" fg:w="4"/><text x="16.9034%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="16.8121%" y="245" width="0.1586%" height="15" fill="rgb(217,211,10)" fg:x="212" fg:w="2"/><text x="17.0621%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.8914%" y="229" width="0.0793%" height="15" fill="rgb(219,228,52)" fg:x="213" fg:w="1"/><text x="17.1414%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 1.35%)</title><rect x="15.7018%" y="341" width="1.3481%" height="15" fill="rgb(231,92,29)" fg:x="198" fg:w="17"/><text x="15.9518%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.9707%" y="325" width="0.0793%" height="15" fill="rgb(232,8,23)" fg:x="214" fg:w="1"/><text x="17.2207%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (18 samples, 1.43%)</title><rect x="15.7018%" y="357" width="1.4274%" height="15" fill="rgb(216,211,34)" fg:x="198" fg:w="18"/><text x="15.9518%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="17.0500%" y="341" width="0.0793%" height="15" fill="rgb(236,151,0)" fg:x="215" fg:w="1"/><text x="17.3000%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.0500%" y="325" width="0.0793%" height="15" fill="rgb(209,168,3)" fg:x="215" fg:w="1"/><text x="17.3000%" y="335.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (20 samples, 1.59%)</title><rect x="15.6225%" y="373" width="1.5860%" height="15" fill="rgb(208,129,28)" fg:x="197" fg:w="20"/><text x="15.8725%" y="383.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="17.1293%" y="357" width="0.0793%" height="15" fill="rgb(229,78,22)" fg:x="216" fg:w="1"/><text x="17.3793%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="17.1293%" y="341" width="0.0793%" height="15" fill="rgb(228,187,13)" fg:x="216" fg:w="1"/><text x="17.3793%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="17.2086%" y="373" width="0.1586%" height="15" fill="rgb(240,119,24)" fg:x="217" fg:w="2"/><text x="17.4586%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.2879%" y="357" width="0.0793%" height="15" fill="rgb(209,194,42)" fg:x="218" fg:w="1"/><text x="17.5379%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (26 samples, 2.06%)</title><rect x="15.5432%" y="421" width="2.0619%" height="15" fill="rgb(247,200,46)" fg:x="196" fg:w="26"/><text x="15.7932%" y="431.50">&lt;..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (25 samples, 1.98%)</title><rect x="15.6225%" y="405" width="1.9826%" height="15" fill="rgb(218,76,16)" fg:x="197" fg:w="25"/><text x="15.8725%" y="415.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (25 samples, 1.98%)</title><rect x="15.6225%" y="389" width="1.9826%" height="15" fill="rgb(225,21,48)" fg:x="197" fg:w="25"/><text x="15.8725%" y="399.50">&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="17.3672%" y="373" width="0.2379%" height="15" fill="rgb(239,223,50)" fg:x="219" fg:w="3"/><text x="17.6172%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="17.4465%" y="357" width="0.1586%" height="15" fill="rgb(244,45,21)" fg:x="220" fg:w="2"/><text x="17.6965%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27 samples, 2.14%)</title><rect x="15.5432%" y="437" width="2.1412%" height="15" fill="rgb(232,33,43)" fg:x="196" fg:w="27"/><text x="15.7932%" y="447.50">&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.6051%" y="421" width="0.0793%" height="15" fill="rgb(209,8,3)" fg:x="222" fg:w="1"/><text x="17.8551%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.6051%" y="405" width="0.0793%" height="15" fill="rgb(214,25,53)" fg:x="222" fg:w="1"/><text x="17.8551%" y="415.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (29 samples, 2.30%)</title><rect x="15.5432%" y="469" width="2.2998%" height="15" fill="rgb(254,186,54)" fg:x="196" fg:w="29"/><text x="15.7932%" y="479.50">&lt;..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (29 samples, 2.30%)</title><rect x="15.5432%" y="453" width="2.2998%" height="15" fill="rgb(208,174,49)" fg:x="196" fg:w="29"/><text x="15.7932%" y="463.50">&lt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="17.6844%" y="437" width="0.1586%" height="15" fill="rgb(233,191,51)" fg:x="223" fg:w="2"/><text x="17.9344%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="17.6844%" y="421" width="0.1586%" height="15" fill="rgb(222,134,10)" fg:x="223" fg:w="2"/><text x="17.9344%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="17.8430%" y="421" width="0.1586%" height="15" fill="rgb(230,226,20)" fg:x="225" fg:w="2"/><text x="18.0930%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.0016%" y="421" width="0.0793%" height="15" fill="rgb(251,111,25)" fg:x="227" fg:w="1"/><text x="18.2516%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="18.0809%" y="421" width="0.0793%" height="15" fill="rgb(224,40,46)" fg:x="228" fg:w="1"/><text x="18.3309%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.0809%" y="405" width="0.0793%" height="15" fill="rgb(236,108,47)" fg:x="228" fg:w="1"/><text x="18.3309%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.0809%" y="389" width="0.0793%" height="15" fill="rgb(234,93,0)" fg:x="228" fg:w="1"/><text x="18.3309%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.0809%" y="373" width="0.0793%" height="15" fill="rgb(224,213,32)" fg:x="228" fg:w="1"/><text x="18.3309%" y="383.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="18.0809%" y="357" width="0.0793%" height="15" fill="rgb(251,11,48)" fg:x="228" fg:w="1"/><text x="18.3309%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.2395%" y="373" width="0.0793%" height="15" fill="rgb(236,173,5)" fg:x="230" fg:w="1"/><text x="18.4895%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.2395%" y="357" width="0.0793%" height="15" fill="rgb(230,95,12)" fg:x="230" fg:w="1"/><text x="18.4895%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.2395%" y="341" width="0.0793%" height="15" fill="rgb(232,209,1)" fg:x="230" fg:w="1"/><text x="18.4895%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="18.3188%" y="373" width="0.0793%" height="15" fill="rgb(232,6,1)" fg:x="231" fg:w="1"/><text x="18.5688%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.3188%" y="357" width="0.0793%" height="15" fill="rgb(210,224,50)" fg:x="231" fg:w="1"/><text x="18.5688%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.3188%" y="341" width="0.0793%" height="15" fill="rgb(228,127,35)" fg:x="231" fg:w="1"/><text x="18.5688%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.3188%" y="325" width="0.0793%" height="15" fill="rgb(245,102,45)" fg:x="231" fg:w="1"/><text x="18.5688%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.3188%" y="309" width="0.0793%" height="15" fill="rgb(214,1,49)" fg:x="231" fg:w="1"/><text x="18.5688%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.5567%" y="309" width="0.0793%" height="15" fill="rgb(226,163,40)" fg:x="234" fg:w="1"/><text x="18.8067%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.6360%" y="261" width="0.0793%" height="15" fill="rgb(239,212,28)" fg:x="235" fg:w="1"/><text x="18.8860%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="18.6360%" y="293" width="0.2379%" height="15" fill="rgb(220,20,13)" fg:x="235" fg:w="3"/><text x="18.8860%" y="303.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="18.6360%" y="277" width="0.2379%" height="15" fill="rgb(210,164,35)" fg:x="235" fg:w="3"/><text x="18.8860%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="18.7153%" y="261" width="0.1586%" height="15" fill="rgb(248,109,41)" fg:x="236" fg:w="2"/><text x="18.9653%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="18.4774%" y="325" width="0.4758%" height="15" fill="rgb(238,23,50)" fg:x="233" fg:w="6"/><text x="18.7274%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="18.6360%" y="309" width="0.3172%" height="15" fill="rgb(211,48,49)" fg:x="235" fg:w="4"/><text x="18.8860%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.8739%" y="293" width="0.0793%" height="15" fill="rgb(223,36,21)" fg:x="238" fg:w="1"/><text x="19.1239%" y="303.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (45 samples, 3.57%)</title><rect x="15.5432%" y="485" width="3.5686%" height="15" fill="rgb(207,123,46)" fg:x="196" fg:w="45"/><text x="15.7932%" y="495.50">&lt;rpc..</text></g><g><title>kernel::model::EntityPtr::to_json_value (16 samples, 1.27%)</title><rect x="17.8430%" y="469" width="1.2688%" height="15" fill="rgb(240,218,32)" fg:x="225" fg:w="16"/><text x="18.0930%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (16 samples, 1.27%)</title><rect x="17.8430%" y="453" width="1.2688%" height="15" fill="rgb(252,5,43)" fg:x="225" fg:w="16"/><text x="18.0930%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.27%)</title><rect x="17.8430%" y="437" width="1.2688%" height="15" fill="rgb(252,84,19)" fg:x="225" fg:w="16"/><text x="18.0930%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (12 samples, 0.95%)</title><rect x="18.1602%" y="421" width="0.9516%" height="15" fill="rgb(243,152,39)" fg:x="229" fg:w="12"/><text x="18.4102%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (12 samples, 0.95%)</title><rect x="18.1602%" y="405" width="0.9516%" height="15" fill="rgb(234,160,15)" fg:x="229" fg:w="12"/><text x="18.4102%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (12 samples, 0.95%)</title><rect x="18.1602%" y="389" width="0.9516%" height="15" fill="rgb(237,34,20)" fg:x="229" fg:w="12"/><text x="18.4102%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.71%)</title><rect x="18.3981%" y="373" width="0.7137%" height="15" fill="rgb(229,97,13)" fg:x="232" fg:w="9"/><text x="18.6481%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.71%)</title><rect x="18.3981%" y="357" width="0.7137%" height="15" fill="rgb(234,71,50)" fg:x="232" fg:w="9"/><text x="18.6481%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.71%)</title><rect x="18.3981%" y="341" width="0.7137%" height="15" fill="rgb(253,155,4)" fg:x="232" fg:w="9"/><text x="18.6481%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="18.9532%" y="325" width="0.1586%" height="15" fill="rgb(222,185,37)" fg:x="239" fg:w="2"/><text x="19.2032%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (50 samples, 3.97%)</title><rect x="15.2260%" y="517" width="3.9651%" height="15" fill="rgb(251,177,13)" fg:x="192" fg:w="50"/><text x="15.4760%" y="527.50">&lt;cor..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (50 samples, 3.97%)</title><rect x="15.2260%" y="501" width="3.9651%" height="15" fill="rgb(250,179,40)" fg:x="192" fg:w="50"/><text x="15.4760%" y="511.50">plug..</text></g><g><title>rpc_proto::&lt;impl core::convert::From&lt;&amp;rpc_proto::EntityKey&gt; for kernel::model::base::EntityKey&gt;::from (1 samples, 0.08%)</title><rect x="19.1118%" y="485" width="0.0793%" height="15" fill="rgb(242,44,2)" fg:x="241" fg:w="1"/><text x="19.3618%" y="495.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="19.1118%" y="469" width="0.0793%" height="15" fill="rgb(216,177,13)" fg:x="241" fg:w="1"/><text x="19.3618%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.1118%" y="453" width="0.0793%" height="15" fill="rgb(216,106,43)" fg:x="241" fg:w="1"/><text x="19.3618%" y="463.50"></text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (90 samples, 7.14%)</title><rect x="12.1332%" y="613" width="7.1372%" height="15" fill="rgb(216,183,2)" fg:x="153" fg:w="90"/><text x="12.3832%" y="623.50">kernel::pl..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (90 samples, 7.14%)</title><rect x="12.1332%" y="597" width="7.1372%" height="15" fill="rgb(249,75,3)" fg:x="153" fg:w="90"/><text x="12.3832%" y="607.50">&lt;plugins_d..</text></g><g><title>plugins_rpc::querying::have_surroundings (85 samples, 6.74%)</title><rect x="12.5297%" y="581" width="6.7407%" height="15" fill="rgb(219,67,39)" fg:x="158" fg:w="85"/><text x="12.7797%" y="591.50">plugins_r..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (84 samples, 6.66%)</title><rect x="12.6090%" y="565" width="6.6614%" height="15" fill="rgb(253,228,2)" fg:x="159" fg:w="84"/><text x="12.8590%" y="575.50">&lt;plugins_..</text></g><g><title>core::iter::adapters::try_process (81 samples, 6.42%)</title><rect x="12.8469%" y="549" width="6.4235%" height="15" fill="rgb(235,138,27)" fg:x="162" fg:w="81"/><text x="13.0969%" y="559.50">core::it..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (51 samples, 4.04%)</title><rect x="15.2260%" y="533" width="4.0444%" height="15" fill="rgb(236,97,51)" fg:x="192" fg:w="51"/><text x="15.4760%" y="543.50">allo..</text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.1911%" y="517" width="0.0793%" height="15" fill="rgb(240,80,30)" fg:x="242" fg:w="1"/><text x="19.4411%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="19.3497%" y="389" width="0.1586%" height="15" fill="rgb(230,178,19)" fg:x="244" fg:w="2"/><text x="19.5997%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="19.3497%" y="373" width="0.1586%" height="15" fill="rgb(210,190,27)" fg:x="244" fg:w="2"/><text x="19.5997%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.4290%" y="357" width="0.0793%" height="15" fill="rgb(222,107,31)" fg:x="245" fg:w="1"/><text x="19.6790%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.4290%" y="341" width="0.0793%" height="15" fill="rgb(216,127,34)" fg:x="245" fg:w="1"/><text x="19.6790%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.4290%" y="325" width="0.0793%" height="15" fill="rgb(234,116,52)" fg:x="245" fg:w="1"/><text x="19.6790%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.4290%" y="309" width="0.0793%" height="15" fill="rgb(222,124,15)" fg:x="245" fg:w="1"/><text x="19.6790%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="19.5083%" y="293" width="0.0793%" height="15" fill="rgb(231,179,28)" fg:x="246" fg:w="1"/><text x="19.7583%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.5083%" y="277" width="0.0793%" height="15" fill="rgb(226,93,45)" fg:x="246" fg:w="1"/><text x="19.7583%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.5876%" y="293" width="0.0793%" height="15" fill="rgb(215,8,51)" fg:x="247" fg:w="1"/><text x="19.8376%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (5 samples, 0.40%)</title><rect x="19.3497%" y="437" width="0.3965%" height="15" fill="rgb(223,106,5)" fg:x="244" fg:w="5"/><text x="19.5997%" y="447.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.40%)</title><rect x="19.3497%" y="421" width="0.3965%" height="15" fill="rgb(250,191,5)" fg:x="244" fg:w="5"/><text x="19.5997%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="19.3497%" y="405" width="0.3965%" height="15" fill="rgb(242,132,44)" fg:x="244" fg:w="5"/><text x="19.5997%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="19.5083%" y="389" width="0.2379%" height="15" fill="rgb(251,152,29)" fg:x="246" fg:w="3"/><text x="19.7583%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="19.5083%" y="373" width="0.2379%" height="15" fill="rgb(218,179,5)" fg:x="246" fg:w="3"/><text x="19.7583%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="19.5083%" y="357" width="0.2379%" height="15" fill="rgb(227,67,19)" fg:x="246" fg:w="3"/><text x="19.7583%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="19.5083%" y="341" width="0.2379%" height="15" fill="rgb(233,119,31)" fg:x="246" fg:w="3"/><text x="19.7583%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="19.5083%" y="325" width="0.2379%" height="15" fill="rgb(241,120,22)" fg:x="246" fg:w="3"/><text x="19.7583%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="19.5083%" y="309" width="0.2379%" height="15" fill="rgb(224,102,30)" fg:x="246" fg:w="3"/><text x="19.7583%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.6669%" y="293" width="0.0793%" height="15" fill="rgb(210,164,37)" fg:x="248" fg:w="1"/><text x="19.9169%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.6669%" y="277" width="0.0793%" height="15" fill="rgb(226,191,16)" fg:x="248" fg:w="1"/><text x="19.9169%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.6669%" y="261" width="0.0793%" height="15" fill="rgb(214,40,45)" fg:x="248" fg:w="1"/><text x="19.9169%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.8255%" y="421" width="0.0793%" height="15" fill="rgb(244,29,26)" fg:x="250" fg:w="1"/><text x="20.0755%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.8255%" y="405" width="0.0793%" height="15" fill="rgb(216,16,5)" fg:x="250" fg:w="1"/><text x="20.0755%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.8255%" y="389" width="0.0793%" height="15" fill="rgb(249,76,35)" fg:x="250" fg:w="1"/><text x="20.0755%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.8255%" y="373" width="0.0793%" height="15" fill="rgb(207,11,44)" fg:x="250" fg:w="1"/><text x="20.0755%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.8255%" y="357" width="0.0793%" height="15" fill="rgb(228,190,49)" fg:x="250" fg:w="1"/><text x="20.0755%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.8255%" y="341" width="0.0793%" height="15" fill="rgb(214,173,12)" fg:x="250" fg:w="1"/><text x="20.0755%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.8255%" y="325" width="0.0793%" height="15" fill="rgb(218,26,35)" fg:x="250" fg:w="1"/><text x="20.0755%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.8255%" y="309" width="0.0793%" height="15" fill="rgb(220,200,19)" fg:x="250" fg:w="1"/><text x="20.0755%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.8255%" y="293" width="0.0793%" height="15" fill="rgb(239,95,49)" fg:x="250" fg:w="1"/><text x="20.0755%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.8255%" y="277" width="0.0793%" height="15" fill="rgb(235,85,53)" fg:x="250" fg:w="1"/><text x="20.0755%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.8255%" y="261" width="0.0793%" height="15" fill="rgb(233,133,31)" fg:x="250" fg:w="1"/><text x="20.0755%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="19.8255%" y="245" width="0.0793%" height="15" fill="rgb(218,25,20)" fg:x="250" fg:w="1"/><text x="20.0755%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="19.8255%" y="229" width="0.0793%" height="15" fill="rgb(252,210,38)" fg:x="250" fg:w="1"/><text x="20.0755%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="19.9841%" y="389" width="0.1586%" height="15" fill="rgb(242,134,21)" fg:x="252" fg:w="2"/><text x="20.2341%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="19.9841%" y="373" width="0.1586%" height="15" fill="rgb(213,28,48)" fg:x="252" fg:w="2"/><text x="20.2341%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="19.9841%" y="357" width="0.1586%" height="15" fill="rgb(250,196,2)" fg:x="252" fg:w="2"/><text x="20.2341%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.0634%" y="341" width="0.0793%" height="15" fill="rgb(227,5,17)" fg:x="253" fg:w="1"/><text x="20.3134%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.0634%" y="325" width="0.0793%" height="15" fill="rgb(221,226,24)" fg:x="253" fg:w="1"/><text x="20.3134%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.0634%" y="309" width="0.0793%" height="15" fill="rgb(211,5,48)" fg:x="253" fg:w="1"/><text x="20.3134%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="20.1427%" y="389" width="0.0793%" height="15" fill="rgb(219,150,6)" fg:x="254" fg:w="1"/><text x="20.3927%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="20.1427%" y="373" width="0.0793%" height="15" fill="rgb(251,46,16)" fg:x="254" fg:w="1"/><text x="20.3927%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.1427%" y="357" width="0.0793%" height="15" fill="rgb(220,204,40)" fg:x="254" fg:w="1"/><text x="20.3927%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.1427%" y="341" width="0.0793%" height="15" fill="rgb(211,85,2)" fg:x="254" fg:w="1"/><text x="20.3927%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.1427%" y="325" width="0.0793%" height="15" fill="rgb(229,17,7)" fg:x="254" fg:w="1"/><text x="20.3927%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.1427%" y="309" width="0.0793%" height="15" fill="rgb(239,72,28)" fg:x="254" fg:w="1"/><text x="20.3927%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.1427%" y="293" width="0.0793%" height="15" fill="rgb(230,47,54)" fg:x="254" fg:w="1"/><text x="20.3927%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="20.3013%" y="293" width="0.0793%" height="15" fill="rgb(214,50,8)" fg:x="256" fg:w="1"/><text x="20.5513%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (10 samples, 0.79%)</title><rect x="19.7462%" y="437" width="0.7930%" height="15" fill="rgb(216,198,43)" fg:x="249" fg:w="10"/><text x="19.9962%" y="447.50"></text></g><g><title>kernel::model::props::load_props (8 samples, 0.63%)</title><rect x="19.9048%" y="421" width="0.6344%" height="15" fill="rgb(234,20,35)" fg:x="251" fg:w="8"/><text x="20.1548%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (8 samples, 0.63%)</title><rect x="19.9048%" y="405" width="0.6344%" height="15" fill="rgb(254,45,19)" fg:x="251" fg:w="8"/><text x="20.1548%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="20.2220%" y="389" width="0.3172%" height="15" fill="rgb(219,14,44)" fg:x="255" fg:w="4"/><text x="20.4720%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="20.2220%" y="373" width="0.3172%" height="15" fill="rgb(217,220,26)" fg:x="255" fg:w="4"/><text x="20.4720%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="20.3013%" y="357" width="0.2379%" height="15" fill="rgb(213,158,28)" fg:x="256" fg:w="3"/><text x="20.5513%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="20.3013%" y="341" width="0.2379%" height="15" fill="rgb(252,51,52)" fg:x="256" fg:w="3"/><text x="20.5513%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="20.3013%" y="325" width="0.2379%" height="15" fill="rgb(246,89,16)" fg:x="256" fg:w="3"/><text x="20.5513%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="20.3013%" y="309" width="0.2379%" height="15" fill="rgb(216,158,49)" fg:x="256" fg:w="3"/><text x="20.5513%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="20.3807%" y="293" width="0.1586%" height="15" fill="rgb(236,107,19)" fg:x="257" fg:w="2"/><text x="20.6307%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="20.3807%" y="277" width="0.1586%" height="15" fill="rgb(228,185,30)" fg:x="257" fg:w="2"/><text x="20.6307%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="20.3807%" y="261" width="0.1586%" height="15" fill="rgb(246,134,8)" fg:x="257" fg:w="2"/><text x="20.6307%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="20.3807%" y="245" width="0.1586%" height="15" fill="rgb(214,143,50)" fg:x="257" fg:w="2"/><text x="20.6307%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.4600%" y="229" width="0.0793%" height="15" fill="rgb(228,75,8)" fg:x="258" fg:w="1"/><text x="20.7100%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.4600%" y="213" width="0.0793%" height="15" fill="rgb(207,175,4)" fg:x="258" fg:w="1"/><text x="20.7100%" y="223.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="20.6186%" y="373" width="0.0793%" height="15" fill="rgb(205,108,24)" fg:x="260" fg:w="1"/><text x="20.8686%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="20.6979%" y="277" width="0.0793%" height="15" fill="rgb(244,120,49)" fg:x="261" fg:w="1"/><text x="20.9479%" y="287.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="20.6979%" y="261" width="0.0793%" height="15" fill="rgb(223,47,38)" fg:x="261" fg:w="1"/><text x="20.9479%" y="271.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="20.6979%" y="245" width="0.0793%" height="15" fill="rgb(229,179,11)" fg:x="261" fg:w="1"/><text x="20.9479%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="20.6979%" y="357" width="0.1586%" height="15" fill="rgb(231,122,1)" fg:x="261" fg:w="2"/><text x="20.9479%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="20.6979%" y="341" width="0.1586%" height="15" fill="rgb(245,119,9)" fg:x="261" fg:w="2"/><text x="20.9479%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="20.6979%" y="325" width="0.1586%" height="15" fill="rgb(241,163,25)" fg:x="261" fg:w="2"/><text x="20.9479%" y="335.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="20.6979%" y="309" width="0.1586%" height="15" fill="rgb(217,214,3)" fg:x="261" fg:w="2"/><text x="20.9479%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="20.6979%" y="293" width="0.1586%" height="15" fill="rgb(240,86,28)" fg:x="261" fg:w="2"/><text x="20.9479%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="20.7772%" y="277" width="0.0793%" height="15" fill="rgb(215,47,9)" fg:x="262" fg:w="1"/><text x="21.0272%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="20.7772%" y="261" width="0.0793%" height="15" fill="rgb(252,25,45)" fg:x="262" fg:w="1"/><text x="21.0272%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="20.7772%" y="245" width="0.0793%" height="15" fill="rgb(251,164,9)" fg:x="262" fg:w="1"/><text x="21.0272%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="20.8565%" y="309" width="0.0793%" height="15" fill="rgb(233,194,0)" fg:x="263" fg:w="1"/><text x="21.1065%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.8565%" y="293" width="0.0793%" height="15" fill="rgb(249,111,24)" fg:x="263" fg:w="1"/><text x="21.1065%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.9358%" y="309" width="0.0793%" height="15" fill="rgb(250,223,3)" fg:x="264" fg:w="1"/><text x="21.1858%" y="319.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="21.0944%" y="261" width="0.0793%" height="15" fill="rgb(236,178,37)" fg:x="266" fg:w="1"/><text x="21.3444%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.24%)</title><rect x="21.0151%" y="309" width="0.2379%" height="15" fill="rgb(241,158,50)" fg:x="265" fg:w="3"/><text x="21.2651%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="21.0151%" y="293" width="0.2379%" height="15" fill="rgb(213,121,41)" fg:x="265" fg:w="3"/><text x="21.2651%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="21.0944%" y="277" width="0.1586%" height="15" fill="rgb(240,92,3)" fg:x="266" fg:w="2"/><text x="21.3444%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="21.1737%" y="261" width="0.0793%" height="15" fill="rgb(205,123,3)" fg:x="267" fg:w="1"/><text x="21.4237%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="21.1737%" y="245" width="0.0793%" height="15" fill="rgb(205,97,47)" fg:x="267" fg:w="1"/><text x="21.4237%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="21.1737%" y="229" width="0.0793%" height="15" fill="rgb(247,152,14)" fg:x="267" fg:w="1"/><text x="21.4237%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="21.2530%" y="309" width="0.0793%" height="15" fill="rgb(248,195,53)" fg:x="268" fg:w="1"/><text x="21.5030%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.2530%" y="293" width="0.0793%" height="15" fill="rgb(226,201,16)" fg:x="268" fg:w="1"/><text x="21.5030%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.4909%" y="293" width="0.0793%" height="15" fill="rgb(205,98,0)" fg:x="271" fg:w="1"/><text x="21.7409%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.6495%" y="277" width="0.0793%" height="15" fill="rgb(214,191,48)" fg:x="273" fg:w="1"/><text x="21.8995%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (34 samples, 2.70%)</title><rect x="21.5702%" y="293" width="2.6963%" height="15" fill="rgb(237,112,39)" fg:x="272" fg:w="34"/><text x="21.8202%" y="303.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (32 samples, 2.54%)</title><rect x="21.7288%" y="277" width="2.5377%" height="15" fill="rgb(247,203,27)" fg:x="274" fg:w="32"/><text x="21.9788%" y="287.50">co..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.1872%" y="261" width="0.0793%" height="15" fill="rgb(235,124,28)" fg:x="305" fg:w="1"/><text x="24.4372%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (8 samples, 0.63%)</title><rect x="24.4251%" y="277" width="0.6344%" height="15" fill="rgb(208,207,46)" fg:x="308" fg:w="8"/><text x="24.6751%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (11 samples, 0.87%)</title><rect x="24.2665%" y="293" width="0.8723%" height="15" fill="rgb(234,176,4)" fg:x="306" fg:w="11"/><text x="24.5165%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="25.0595%" y="277" width="0.0793%" height="15" fill="rgb(230,133,28)" fg:x="316" fg:w="1"/><text x="25.3095%" y="287.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="25.5353%" y="229" width="0.0793%" height="15" fill="rgb(211,137,40)" fg:x="322" fg:w="1"/><text x="25.7853%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.6146%" y="229" width="0.0793%" height="15" fill="rgb(254,35,13)" fg:x="323" fg:w="1"/><text x="25.8646%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="25.6939%" y="229" width="0.0793%" height="15" fill="rgb(225,49,51)" fg:x="324" fg:w="1"/><text x="25.9439%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="25.6939%" y="213" width="0.0793%" height="15" fill="rgb(251,10,15)" fg:x="324" fg:w="1"/><text x="25.9439%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.6939%" y="197" width="0.0793%" height="15" fill="rgb(228,207,15)" fg:x="324" fg:w="1"/><text x="25.9439%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="25.6939%" y="181" width="0.0793%" height="15" fill="rgb(241,99,19)" fg:x="324" fg:w="1"/><text x="25.9439%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="25.7732%" y="229" width="0.1586%" height="15" fill="rgb(207,104,49)" fg:x="325" fg:w="2"/><text x="26.0232%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="25.8525%" y="213" width="0.0793%" height="15" fill="rgb(234,99,18)" fg:x="326" fg:w="1"/><text x="26.1025%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="25.9318%" y="229" width="0.0793%" height="15" fill="rgb(213,191,49)" fg:x="327" fg:w="1"/><text x="26.1818%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="25.9318%" y="213" width="0.0793%" height="15" fill="rgb(210,226,19)" fg:x="327" fg:w="1"/><text x="26.1818%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="25.9318%" y="197" width="0.0793%" height="15" fill="rgb(229,97,18)" fg:x="327" fg:w="1"/><text x="26.1818%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.9318%" y="181" width="0.0793%" height="15" fill="rgb(211,167,15)" fg:x="327" fg:w="1"/><text x="26.1818%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="26.0111%" y="213" width="0.0793%" height="15" fill="rgb(210,169,34)" fg:x="328" fg:w="1"/><text x="26.2611%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.0111%" y="197" width="0.0793%" height="15" fill="rgb(241,121,31)" fg:x="328" fg:w="1"/><text x="26.2611%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.0111%" y="181" width="0.0793%" height="15" fill="rgb(232,40,11)" fg:x="328" fg:w="1"/><text x="26.2611%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (90 samples, 7.14%)</title><rect x="26.0111%" y="229" width="7.1372%" height="15" fill="rgb(205,86,26)" fg:x="328" fg:w="90"/><text x="26.2611%" y="239.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (89 samples, 7.06%)</title><rect x="26.0904%" y="213" width="7.0579%" height="15" fill="rgb(231,126,28)" fg:x="329" fg:w="89"/><text x="26.3404%" y="223.50">regex_aut..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (88 samples, 6.98%)</title><rect x="26.1697%" y="197" width="6.9786%" height="15" fill="rgb(219,221,18)" fg:x="330" fg:w="88"/><text x="26.4197%" y="207.50">alloc::ve..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="33.1483%" y="229" width="0.3172%" height="15" fill="rgb(211,40,0)" fg:x="418" fg:w="4"/><text x="33.3983%" y="239.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="33.4655%" y="229" width="0.0793%" height="15" fill="rgb(239,85,43)" fg:x="422" fg:w="1"/><text x="33.7155%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (107 samples, 8.49%)</title><rect x="25.1388%" y="277" width="8.4853%" height="15" fill="rgb(231,55,21)" fg:x="317" fg:w="107"/><text x="25.3888%" y="287.50">&lt;core::iter:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (107 samples, 8.49%)</title><rect x="25.1388%" y="261" width="8.4853%" height="15" fill="rgb(225,184,43)" fg:x="317" fg:w="107"/><text x="25.3888%" y="271.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (106 samples, 8.41%)</title><rect x="25.2181%" y="245" width="8.4060%" height="15" fill="rgb(251,158,41)" fg:x="318" fg:w="106"/><text x="25.4681%" y="255.50">regex_automa..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="33.5448%" y="229" width="0.0793%" height="15" fill="rgb(234,159,37)" fg:x="423" fg:w="1"/><text x="33.7948%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.5448%" y="213" width="0.0793%" height="15" fill="rgb(216,204,22)" fg:x="423" fg:w="1"/><text x="33.7948%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="33.6241%" y="277" width="0.0793%" height="15" fill="rgb(214,17,3)" fg:x="424" fg:w="1"/><text x="33.8741%" y="287.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="34.0999%" y="213" width="0.0793%" height="15" fill="rgb(212,111,17)" fg:x="430" fg:w="1"/><text x="34.3499%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="34.0999%" y="197" width="0.0793%" height="15" fill="rgb(221,157,24)" fg:x="430" fg:w="1"/><text x="34.3499%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (7 samples, 0.56%)</title><rect x="33.7827%" y="261" width="0.5551%" height="15" fill="rgb(252,16,13)" fg:x="426" fg:w="7"/><text x="34.0327%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="34.0999%" y="245" width="0.2379%" height="15" fill="rgb(221,62,2)" fg:x="430" fg:w="3"/><text x="34.3499%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="34.0999%" y="229" width="0.2379%" height="15" fill="rgb(247,87,22)" fg:x="430" fg:w="3"/><text x="34.3499%" y="239.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="34.1792%" y="213" width="0.1586%" height="15" fill="rgb(215,73,9)" fg:x="431" fg:w="2"/><text x="34.4292%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.95%)</title><rect x="33.7034%" y="277" width="0.9516%" height="15" fill="rgb(207,175,33)" fg:x="425" fg:w="12"/><text x="33.9534%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="34.3378%" y="261" width="0.3172%" height="15" fill="rgb(243,129,54)" fg:x="433" fg:w="4"/><text x="34.5878%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="34.5757%" y="245" width="0.0793%" height="15" fill="rgb(227,119,45)" fg:x="436" fg:w="1"/><text x="34.8257%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.5757%" y="229" width="0.0793%" height="15" fill="rgb(205,109,36)" fg:x="436" fg:w="1"/><text x="34.8257%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.5757%" y="213" width="0.0793%" height="15" fill="rgb(205,6,39)" fg:x="436" fg:w="1"/><text x="34.8257%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="34.6550%" y="261" width="0.0793%" height="15" fill="rgb(221,32,16)" fg:x="437" fg:w="1"/><text x="34.9050%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="34.6550%" y="245" width="0.0793%" height="15" fill="rgb(228,144,50)" fg:x="437" fg:w="1"/><text x="34.9050%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="34.7343%" y="261" width="0.0793%" height="15" fill="rgb(229,201,53)" fg:x="438" fg:w="1"/><text x="34.9843%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="34.7343%" y="245" width="0.0793%" height="15" fill="rgb(249,153,27)" fg:x="438" fg:w="1"/><text x="34.9843%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.7343%" y="229" width="0.0793%" height="15" fill="rgb(227,106,25)" fg:x="438" fg:w="1"/><text x="34.9843%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.7343%" y="213" width="0.0793%" height="15" fill="rgb(230,65,29)" fg:x="438" fg:w="1"/><text x="34.9843%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (123 samples, 9.75%)</title><rect x="25.1388%" y="293" width="9.7542%" height="15" fill="rgb(221,57,46)" fg:x="317" fg:w="123"/><text x="25.3888%" y="303.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (3 samples, 0.24%)</title><rect x="34.6550%" y="277" width="0.2379%" height="15" fill="rgb(229,161,17)" fg:x="437" fg:w="3"/><text x="34.9050%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="34.8136%" y="261" width="0.0793%" height="15" fill="rgb(222,213,11)" fg:x="439" fg:w="1"/><text x="35.0636%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (173 samples, 13.72%)</title><rect x="21.3323%" y="309" width="13.7193%" height="15" fill="rgb(235,35,13)" fg:x="269" fg:w="173"/><text x="21.5823%" y="319.50">regex_automata::meta:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="34.8929%" y="293" width="0.1586%" height="15" fill="rgb(233,158,34)" fg:x="440" fg:w="2"/><text x="35.1429%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="34.8929%" y="277" width="0.1586%" height="15" fill="rgb(215,151,48)" fg:x="440" fg:w="2"/><text x="35.1429%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (2 samples, 0.16%)</title><rect x="34.8929%" y="261" width="0.1586%" height="15" fill="rgb(229,84,14)" fg:x="440" fg:w="2"/><text x="35.1429%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="34.8929%" y="245" width="0.1586%" height="15" fill="rgb(229,68,14)" fg:x="440" fg:w="2"/><text x="35.1429%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="34.8929%" y="229" width="0.1586%" height="15" fill="rgb(243,106,26)" fg:x="440" fg:w="2"/><text x="35.1429%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="34.9722%" y="213" width="0.0793%" height="15" fill="rgb(206,45,38)" fg:x="441" fg:w="1"/><text x="35.2222%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="35.1308%" y="261" width="0.0793%" height="15" fill="rgb(226,6,15)" fg:x="443" fg:w="1"/><text x="35.3808%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::peek_space (1 samples, 0.08%)</title><rect x="35.1308%" y="245" width="0.0793%" height="15" fill="rgb(232,22,54)" fg:x="443" fg:w="1"/><text x="35.3808%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="35.1308%" y="277" width="0.2379%" height="15" fill="rgb(229,222,32)" fg:x="443" fg:w="3"/><text x="35.3808%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="35.2102%" y="261" width="0.1586%" height="15" fill="rgb(228,62,29)" fg:x="444" fg:w="2"/><text x="35.4602%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="35.2102%" y="245" width="0.1586%" height="15" fill="rgb(251,103,34)" fg:x="444" fg:w="2"/><text x="35.4602%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="35.2102%" y="229" width="0.1586%" height="15" fill="rgb(233,12,30)" fg:x="444" fg:w="2"/><text x="35.4602%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="35.2102%" y="213" width="0.1586%" height="15" fill="rgb(238,52,0)" fg:x="444" fg:w="2"/><text x="35.4602%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="35.3688%" y="277" width="0.0793%" height="15" fill="rgb(223,98,5)" fg:x="446" fg:w="1"/><text x="35.6188%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="35.0515%" y="309" width="0.4758%" height="15" fill="rgb(228,75,37)" fg:x="442" fg:w="6"/><text x="35.3015%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="35.0515%" y="293" width="0.4758%" height="15" fill="rgb(205,115,49)" fg:x="442" fg:w="6"/><text x="35.3015%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="35.4481%" y="277" width="0.0793%" height="15" fill="rgb(250,154,43)" fg:x="447" fg:w="1"/><text x="35.6981%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.4481%" y="261" width="0.0793%" height="15" fill="rgb(226,43,29)" fg:x="447" fg:w="1"/><text x="35.6981%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.4481%" y="245" width="0.0793%" height="15" fill="rgb(249,228,39)" fg:x="447" fg:w="1"/><text x="35.6981%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.4481%" y="229" width="0.0793%" height="15" fill="rgb(216,79,43)" fg:x="447" fg:w="1"/><text x="35.6981%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (188 samples, 14.91%)</title><rect x="20.8565%" y="357" width="14.9088%" height="15" fill="rgb(228,95,12)" fg:x="263" fg:w="188"/><text x="21.1065%" y="367.50">&lt;regex::regex::string::..</text></g><g><title>regex::builders::Builder::build_one_string (188 samples, 14.91%)</title><rect x="20.8565%" y="341" width="14.9088%" height="15" fill="rgb(249,221,15)" fg:x="263" fg:w="188"/><text x="21.1065%" y="351.50">regex::builders::Builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (188 samples, 14.91%)</title><rect x="20.8565%" y="325" width="14.9088%" height="15" fill="rgb(233,34,13)" fg:x="263" fg:w="188"/><text x="21.1065%" y="335.50">regex_automata::meta::r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="35.5274%" y="309" width="0.2379%" height="15" fill="rgb(214,103,39)" fg:x="448" fg:w="3"/><text x="35.7774%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="35.5274%" y="293" width="0.2379%" height="15" fill="rgb(251,126,39)" fg:x="448" fg:w="3"/><text x="35.7774%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="35.6860%" y="277" width="0.0793%" height="15" fill="rgb(214,216,36)" fg:x="450" fg:w="1"/><text x="35.9360%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="35.6860%" y="261" width="0.0793%" height="15" fill="rgb(220,221,8)" fg:x="450" fg:w="1"/><text x="35.9360%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.6860%" y="245" width="0.0793%" height="15" fill="rgb(240,216,3)" fg:x="450" fg:w="1"/><text x="35.9360%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.7653%" y="325" width="0.0793%" height="15" fill="rgb(232,218,17)" fg:x="451" fg:w="1"/><text x="36.0153%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="35.8446%" y="325" width="0.0793%" height="15" fill="rgb(229,163,45)" fg:x="452" fg:w="1"/><text x="36.0946%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="35.8446%" y="309" width="0.0793%" height="15" fill="rgb(231,110,42)" fg:x="452" fg:w="1"/><text x="36.0946%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="35.8446%" y="293" width="0.0793%" height="15" fill="rgb(208,170,48)" fg:x="452" fg:w="1"/><text x="36.0946%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.8446%" y="277" width="0.0793%" height="15" fill="rgb(239,116,25)" fg:x="452" fg:w="1"/><text x="36.0946%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.8446%" y="261" width="0.0793%" height="15" fill="rgb(219,200,50)" fg:x="452" fg:w="1"/><text x="36.0946%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="35.9239%" y="309" width="0.0793%" height="15" fill="rgb(245,200,0)" fg:x="453" fg:w="1"/><text x="36.1739%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="35.7653%" y="357" width="0.4758%" height="15" fill="rgb(245,119,33)" fg:x="451" fg:w="6"/><text x="36.0153%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="35.7653%" y="341" width="0.4758%" height="15" fill="rgb(231,125,12)" fg:x="451" fg:w="6"/><text x="36.0153%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="35.9239%" y="325" width="0.3172%" height="15" fill="rgb(216,96,41)" fg:x="453" fg:w="4"/><text x="36.1739%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="36.0032%" y="309" width="0.2379%" height="15" fill="rgb(248,43,45)" fg:x="454" fg:w="3"/><text x="36.2532%" y="319.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="36.0825%" y="293" width="0.1586%" height="15" fill="rgb(217,222,7)" fg:x="455" fg:w="2"/><text x="36.3325%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.4790%" y="309" width="0.0793%" height="15" fill="rgb(233,28,6)" fg:x="460" fg:w="1"/><text x="36.7290%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.5583%" y="293" width="0.0793%" height="15" fill="rgb(231,218,15)" fg:x="461" fg:w="1"/><text x="36.8083%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="36.5583%" y="277" width="0.0793%" height="15" fill="rgb(226,171,48)" fg:x="461" fg:w="1"/><text x="36.8083%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="36.5583%" y="261" width="0.0793%" height="15" fill="rgb(235,201,9)" fg:x="461" fg:w="1"/><text x="36.8083%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="37.1927%" y="261" width="0.0793%" height="15" fill="rgb(217,80,15)" fg:x="469" fg:w="1"/><text x="37.4427%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="37.1927%" y="245" width="0.0793%" height="15" fill="rgb(219,152,8)" fg:x="469" fg:w="1"/><text x="37.4427%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="37.1927%" y="277" width="0.1586%" height="15" fill="rgb(243,107,38)" fg:x="469" fg:w="2"/><text x="37.4427%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="37.2720%" y="261" width="0.0793%" height="15" fill="rgb(231,17,5)" fg:x="470" fg:w="1"/><text x="37.5220%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="37.2720%" y="245" width="0.0793%" height="15" fill="rgb(209,25,54)" fg:x="470" fg:w="1"/><text x="37.5220%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (18 samples, 1.43%)</title><rect x="36.6376%" y="293" width="1.4274%" height="15" fill="rgb(219,0,2)" fg:x="462" fg:w="18"/><text x="36.8876%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (9 samples, 0.71%)</title><rect x="37.3513%" y="277" width="0.7137%" height="15" fill="rgb(246,9,5)" fg:x="471" fg:w="9"/><text x="37.6013%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (221 samples, 17.53%)</title><rect x="20.6979%" y="373" width="17.5258%" height="15" fill="rgb(226,159,4)" fg:x="261" fg:w="221"/><text x="20.9479%" y="383.50">indefinite::helper::Helper:..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (25 samples, 1.98%)</title><rect x="36.2411%" y="357" width="1.9826%" height="15" fill="rgb(219,175,34)" fg:x="457" fg:w="25"/><text x="36.4911%" y="367.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (25 samples, 1.98%)</title><rect x="36.2411%" y="341" width="1.9826%" height="15" fill="rgb(236,10,46)" fg:x="457" fg:w="25"/><text x="36.4911%" y="351.50">r..</text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (25 samples, 1.98%)</title><rect x="36.2411%" y="325" width="1.9826%" height="15" fill="rgb(240,211,16)" fg:x="457" fg:w="25"/><text x="36.4911%" y="335.50">&lt;..</text></g><g><title>regex_automata::hybrid::dfa::Cache::new (21 samples, 1.67%)</title><rect x="36.5583%" y="309" width="1.6653%" height="15" fill="rgb(205,3,43)" fg:x="461" fg:w="21"/><text x="36.8083%" y="319.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="38.0650%" y="293" width="0.1586%" height="15" fill="rgb(245,7,22)" fg:x="480" fg:w="2"/><text x="38.3150%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="38.0650%" y="277" width="0.1586%" height="15" fill="rgb(239,132,32)" fg:x="480" fg:w="2"/><text x="38.3150%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="38.0650%" y="261" width="0.1586%" height="15" fill="rgb(228,202,34)" fg:x="480" fg:w="2"/><text x="38.3150%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="38.0650%" y="245" width="0.1586%" height="15" fill="rgb(254,200,22)" fg:x="480" fg:w="2"/><text x="38.3150%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.2236%" y="325" width="0.0793%" height="15" fill="rgb(219,10,39)" fg:x="482" fg:w="1"/><text x="38.4736%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="38.3029%" y="309" width="0.0793%" height="15" fill="rgb(226,210,39)" fg:x="483" fg:w="1"/><text x="38.5529%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="38.3029%" y="293" width="0.0793%" height="15" fill="rgb(208,219,16)" fg:x="483" fg:w="1"/><text x="38.5529%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="38.3029%" y="277" width="0.0793%" height="15" fill="rgb(216,158,51)" fg:x="483" fg:w="1"/><text x="38.5529%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="38.3822%" y="309" width="0.0793%" height="15" fill="rgb(233,14,44)" fg:x="484" fg:w="1"/><text x="38.6322%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="38.3822%" y="293" width="0.0793%" height="15" fill="rgb(237,97,39)" fg:x="484" fg:w="1"/><text x="38.6322%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="38.3822%" y="277" width="0.0793%" height="15" fill="rgb(218,198,43)" fg:x="484" fg:w="1"/><text x="38.6322%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.3822%" y="261" width="0.0793%" height="15" fill="rgb(231,104,20)" fg:x="484" fg:w="1"/><text x="38.6322%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.3822%" y="245" width="0.0793%" height="15" fill="rgb(254,36,13)" fg:x="484" fg:w="1"/><text x="38.6322%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="38.9374%" y="277" width="0.1586%" height="15" fill="rgb(248,14,50)" fg:x="491" fg:w="2"/><text x="39.1874%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (20 samples, 1.59%)</title><rect x="38.6994%" y="293" width="1.5860%" height="15" fill="rgb(217,107,29)" fg:x="488" fg:w="20"/><text x="38.9494%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (15 samples, 1.19%)</title><rect x="39.0960%" y="277" width="1.1895%" height="15" fill="rgb(251,169,33)" fg:x="493" fg:w="15"/><text x="39.3460%" y="287.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="40.1269%" y="261" width="0.1586%" height="15" fill="rgb(217,108,32)" fg:x="506" fg:w="2"/><text x="40.3769%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="40.2855%" y="293" width="0.0793%" height="15" fill="rgb(219,66,42)" fg:x="508" fg:w="1"/><text x="40.5355%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="40.2855%" y="277" width="0.0793%" height="15" fill="rgb(206,180,7)" fg:x="508" fg:w="1"/><text x="40.5355%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="40.2855%" y="261" width="0.0793%" height="15" fill="rgb(208,226,31)" fg:x="508" fg:w="1"/><text x="40.5355%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.2855%" y="245" width="0.0793%" height="15" fill="rgb(218,26,49)" fg:x="508" fg:w="1"/><text x="40.5355%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (11 samples, 0.87%)</title><rect x="40.3648%" y="293" width="0.8723%" height="15" fill="rgb(233,197,48)" fg:x="509" fg:w="11"/><text x="40.6148%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (10 samples, 0.79%)</title><rect x="40.4441%" y="277" width="0.7930%" height="15" fill="rgb(252,181,51)" fg:x="510" fg:w="10"/><text x="40.6941%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="41.1578%" y="261" width="0.0793%" height="15" fill="rgb(253,90,19)" fg:x="519" fg:w="1"/><text x="41.4078%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.1578%" y="245" width="0.0793%" height="15" fill="rgb(215,171,30)" fg:x="519" fg:w="1"/><text x="41.4078%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="41.6336%" y="261" width="0.0793%" height="15" fill="rgb(214,222,9)" fg:x="525" fg:w="1"/><text x="41.8836%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.6336%" y="245" width="0.0793%" height="15" fill="rgb(223,3,22)" fg:x="525" fg:w="1"/><text x="41.8836%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.6336%" y="229" width="0.0793%" height="15" fill="rgb(225,196,46)" fg:x="525" fg:w="1"/><text x="41.8836%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.6336%" y="213" width="0.0793%" height="15" fill="rgb(209,110,37)" fg:x="525" fg:w="1"/><text x="41.8836%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="42.3473%" y="229" width="0.1586%" height="15" fill="rgb(249,89,12)" fg:x="534" fg:w="2"/><text x="42.5973%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="42.3473%" y="213" width="0.1586%" height="15" fill="rgb(226,27,33)" fg:x="534" fg:w="2"/><text x="42.5973%" y="223.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="42.3473%" y="197" width="0.1586%" height="15" fill="rgb(213,82,22)" fg:x="534" fg:w="2"/><text x="42.5973%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (11 samples, 0.87%)</title><rect x="41.7129%" y="261" width="0.8723%" height="15" fill="rgb(248,140,0)" fg:x="526" fg:w="11"/><text x="41.9629%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (7 samples, 0.56%)</title><rect x="42.0301%" y="245" width="0.5551%" height="15" fill="rgb(228,106,3)" fg:x="530" fg:w="7"/><text x="42.2801%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.5059%" y="229" width="0.0793%" height="15" fill="rgb(209,23,37)" fg:x="536" fg:w="1"/><text x="42.7559%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.5059%" y="213" width="0.0793%" height="15" fill="rgb(241,93,50)" fg:x="536" fg:w="1"/><text x="42.7559%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="42.5059%" y="197" width="0.0793%" height="15" fill="rgb(253,46,43)" fg:x="536" fg:w="1"/><text x="42.7559%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (8 samples, 0.63%)</title><rect x="42.6646%" y="245" width="0.6344%" height="15" fill="rgb(226,206,43)" fg:x="538" fg:w="8"/><text x="42.9146%" y="255.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (8 samples, 0.63%)</title><rect x="42.6646%" y="229" width="0.6344%" height="15" fill="rgb(217,54,7)" fg:x="538" fg:w="8"/><text x="42.9146%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (10 samples, 0.79%)</title><rect x="42.5852%" y="261" width="0.7930%" height="15" fill="rgb(223,5,52)" fg:x="537" fg:w="10"/><text x="42.8352%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="43.2990%" y="245" width="0.0793%" height="15" fill="rgb(206,52,46)" fg:x="546" fg:w="1"/><text x="43.5490%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (29 samples, 2.30%)</title><rect x="41.2371%" y="293" width="2.2998%" height="15" fill="rgb(253,136,11)" fg:x="520" fg:w="29"/><text x="41.4871%" y="303.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (29 samples, 2.30%)</title><rect x="41.2371%" y="277" width="2.2998%" height="15" fill="rgb(208,106,33)" fg:x="520" fg:w="29"/><text x="41.4871%" y="287.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (2 samples, 0.16%)</title><rect x="43.3783%" y="261" width="0.1586%" height="15" fill="rgb(206,54,4)" fg:x="547" fg:w="2"/><text x="43.6283%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="43.5369%" y="245" width="0.0793%" height="15" fill="rgb(213,3,15)" fg:x="549" fg:w="1"/><text x="43.7869%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="43.6162%" y="229" width="0.0793%" height="15" fill="rgb(252,211,39)" fg:x="550" fg:w="1"/><text x="43.8662%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="43.6162%" y="213" width="0.0793%" height="15" fill="rgb(223,6,36)" fg:x="550" fg:w="1"/><text x="43.8662%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="43.6955%" y="213" width="0.0793%" height="15" fill="rgb(252,169,45)" fg:x="551" fg:w="1"/><text x="43.9455%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="43.7748%" y="213" width="0.0793%" height="15" fill="rgb(212,48,26)" fg:x="552" fg:w="1"/><text x="44.0248%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="45.2815%" y="181" width="0.1586%" height="15" fill="rgb(251,102,48)" fg:x="571" fg:w="2"/><text x="45.5315%" y="191.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="45.4401%" y="181" width="0.1586%" height="15" fill="rgb(243,208,16)" fg:x="573" fg:w="2"/><text x="45.6901%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (11 samples, 0.87%)</title><rect x="45.5987%" y="181" width="0.8723%" height="15" fill="rgb(219,96,24)" fg:x="575" fg:w="11"/><text x="45.8487%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.56%)</title><rect x="45.9159%" y="165" width="0.5551%" height="15" fill="rgb(219,33,29)" fg:x="579" fg:w="7"/><text x="46.1659%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.56%)</title><rect x="45.9159%" y="149" width="0.5551%" height="15" fill="rgb(223,176,5)" fg:x="579" fg:w="7"/><text x="46.1659%" y="159.50"></text></g><g><title>realloc (7 samples, 0.56%)</title><rect x="45.9159%" y="133" width="0.5551%" height="15" fill="rgb(228,140,14)" fg:x="579" fg:w="7"/><text x="46.1659%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="46.4711%" y="181" width="0.0793%" height="15" fill="rgb(217,179,31)" fg:x="586" fg:w="1"/><text x="46.7211%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.2641%" y="117" width="0.0793%" height="15" fill="rgb(230,9,30)" fg:x="596" fg:w="1"/><text x="47.5141%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="47.1055%" y="149" width="0.4758%" height="15" fill="rgb(230,136,20)" fg:x="594" fg:w="6"/><text x="47.3555%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="47.1848%" y="133" width="0.3965%" height="15" fill="rgb(215,210,22)" fg:x="595" fg:w="5"/><text x="47.4348%" y="143.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="47.3434%" y="117" width="0.2379%" height="15" fill="rgb(218,43,5)" fg:x="597" fg:w="3"/><text x="47.5934%" y="127.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="47.9778%" y="133" width="0.1586%" height="15" fill="rgb(216,11,5)" fg:x="605" fg:w="2"/><text x="48.2278%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (22 samples, 1.74%)</title><rect x="46.5504%" y="181" width="1.7446%" height="15" fill="rgb(209,82,29)" fg:x="587" fg:w="22"/><text x="46.8004%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (17 samples, 1.35%)</title><rect x="46.9469%" y="165" width="1.3481%" height="15" fill="rgb(244,115,12)" fg:x="592" fg:w="17"/><text x="47.1969%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (9 samples, 0.71%)</title><rect x="47.5813%" y="149" width="0.7137%" height="15" fill="rgb(222,82,18)" fg:x="600" fg:w="9"/><text x="47.8313%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="48.1364%" y="133" width="0.1586%" height="15" fill="rgb(249,227,8)" fg:x="607" fg:w="2"/><text x="48.3864%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="48.1364%" y="117" width="0.1586%" height="15" fill="rgb(253,141,45)" fg:x="607" fg:w="2"/><text x="48.3864%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="48.1364%" y="101" width="0.1586%" height="15" fill="rgb(234,184,4)" fg:x="607" fg:w="2"/><text x="48.3864%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="48.1364%" y="85" width="0.1586%" height="15" fill="rgb(218,194,23)" fg:x="607" fg:w="2"/><text x="48.3864%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (78 samples, 6.19%)</title><rect x="48.2950%" y="181" width="6.1856%" height="15" fill="rgb(235,66,41)" fg:x="609" fg:w="78"/><text x="48.5450%" y="191.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (78 samples, 6.19%)</title><rect x="48.2950%" y="165" width="6.1856%" height="15" fill="rgb(245,217,1)" fg:x="609" fg:w="78"/><text x="48.5450%" y="175.50">regex_au..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (78 samples, 6.19%)</title><rect x="48.2950%" y="149" width="6.1856%" height="15" fill="rgb(229,91,1)" fg:x="609" fg:w="78"/><text x="48.5450%" y="159.50">alloc::v..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="54.4806%" y="181" width="0.2379%" height="15" fill="rgb(207,101,30)" fg:x="687" fg:w="3"/><text x="54.7306%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (150 samples, 11.90%)</title><rect x="43.5369%" y="277" width="11.8953%" height="15" fill="rgb(223,82,49)" fg:x="549" fg:w="150"/><text x="43.7869%" y="287.50">&lt;core::iter::adapt..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (150 samples, 11.90%)</title><rect x="43.5369%" y="261" width="11.8953%" height="15" fill="rgb(218,167,17)" fg:x="549" fg:w="150"/><text x="43.7869%" y="271.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (149 samples, 11.82%)</title><rect x="43.6162%" y="245" width="11.8160%" height="15" fill="rgb(208,103,14)" fg:x="550" fg:w="149"/><text x="43.8662%" y="255.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (148 samples, 11.74%)</title><rect x="43.6955%" y="229" width="11.7367%" height="15" fill="rgb(238,20,8)" fg:x="551" fg:w="148"/><text x="43.9455%" y="239.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (146 samples, 11.58%)</title><rect x="43.8541%" y="213" width="11.5781%" height="15" fill="rgb(218,80,54)" fg:x="553" fg:w="146"/><text x="44.1041%" y="223.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (146 samples, 11.58%)</title><rect x="43.8541%" y="197" width="11.5781%" height="15" fill="rgb(240,144,17)" fg:x="553" fg:w="146"/><text x="44.1041%" y="207.50">regex_automata::n..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (9 samples, 0.71%)</title><rect x="54.7185%" y="181" width="0.7137%" height="15" fill="rgb(245,27,50)" fg:x="690" fg:w="9"/><text x="54.9685%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.56%)</title><rect x="54.8771%" y="165" width="0.5551%" height="15" fill="rgb(251,51,7)" fg:x="692" fg:w="7"/><text x="55.1271%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="55.2736%" y="149" width="0.1586%" height="15" fill="rgb(245,217,29)" fg:x="697" fg:w="2"/><text x="55.5236%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="55.2736%" y="133" width="0.1586%" height="15" fill="rgb(221,176,29)" fg:x="697" fg:w="2"/><text x="55.5236%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="55.4322%" y="277" width="0.0793%" height="15" fill="rgb(212,180,24)" fg:x="699" fg:w="1"/><text x="55.6822%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.8287%" y="261" width="0.0793%" height="15" fill="rgb(254,24,2)" fg:x="704" fg:w="1"/><text x="56.0787%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="55.9080%" y="261" width="0.1586%" height="15" fill="rgb(230,100,2)" fg:x="705" fg:w="2"/><text x="56.1580%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (11 samples, 0.87%)</title><rect x="56.0666%" y="261" width="0.8723%" height="15" fill="rgb(219,142,25)" fg:x="707" fg:w="11"/><text x="56.3166%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="56.7010%" y="245" width="0.2379%" height="15" fill="rgb(240,73,43)" fg:x="715" fg:w="3"/><text x="56.9510%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="56.7010%" y="229" width="0.2379%" height="15" fill="rgb(214,114,15)" fg:x="715" fg:w="3"/><text x="56.9510%" y="239.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="56.7010%" y="213" width="0.2379%" height="15" fill="rgb(207,130,4)" fg:x="715" fg:w="3"/><text x="56.9510%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="56.9389%" y="261" width="0.3172%" height="15" fill="rgb(221,25,40)" fg:x="718" fg:w="4"/><text x="57.1889%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.1768%" y="245" width="0.0793%" height="15" fill="rgb(241,184,7)" fg:x="721" fg:w="1"/><text x="57.4268%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.1768%" y="229" width="0.0793%" height="15" fill="rgb(235,159,4)" fg:x="721" fg:w="1"/><text x="57.4268%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.1768%" y="213" width="0.0793%" height="15" fill="rgb(214,87,48)" fg:x="721" fg:w="1"/><text x="57.4268%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="57.2561%" y="261" width="0.1586%" height="15" fill="rgb(246,198,24)" fg:x="722" fg:w="2"/><text x="57.5061%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (240 samples, 19.03%)</title><rect x="38.4615%" y="309" width="19.0325%" height="15" fill="rgb(209,66,40)" fg:x="485" fg:w="240"/><text x="38.7115%" y="319.50">regex_automata::meta::strategy..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (176 samples, 13.96%)</title><rect x="43.5369%" y="293" width="13.9572%" height="15" fill="rgb(233,147,39)" fg:x="549" fg:w="176"/><text x="43.7869%" y="303.50">regex_automata::nfa::..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (25 samples, 1.98%)</title><rect x="55.5115%" y="277" width="1.9826%" height="15" fill="rgb(231,145,52)" fg:x="700" fg:w="25"/><text x="55.7615%" y="287.50">r..</text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="57.4148%" y="261" width="0.0793%" height="15" fill="rgb(206,20,26)" fg:x="724" fg:w="1"/><text x="57.6648%" y="271.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="57.4148%" y="245" width="0.0793%" height="15" fill="rgb(238,220,4)" fg:x="724" fg:w="1"/><text x="57.6648%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="57.6527%" y="261" width="0.0793%" height="15" fill="rgb(252,195,42)" fg:x="727" fg:w="1"/><text x="57.9027%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="57.4941%" y="309" width="0.4758%" height="15" fill="rgb(209,10,6)" fg:x="725" fg:w="6"/><text x="57.7441%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="57.4941%" y="293" width="0.4758%" height="15" fill="rgb(229,3,52)" fg:x="725" fg:w="6"/><text x="57.7441%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="57.6527%" y="277" width="0.3172%" height="15" fill="rgb(253,49,37)" fg:x="727" fg:w="4"/><text x="57.9027%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="57.7320%" y="261" width="0.2379%" height="15" fill="rgb(240,103,49)" fg:x="728" fg:w="3"/><text x="57.9820%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="57.7320%" y="245" width="0.2379%" height="15" fill="rgb(250,182,30)" fg:x="728" fg:w="3"/><text x="57.9820%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="57.7320%" y="229" width="0.2379%" height="15" fill="rgb(248,8,30)" fg:x="728" fg:w="3"/><text x="57.9820%" y="239.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="57.7320%" y="213" width="0.2379%" height="15" fill="rgb(237,120,30)" fg:x="728" fg:w="3"/><text x="57.9820%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="58.2078%" y="261" width="0.1586%" height="15" fill="rgb(221,146,34)" fg:x="734" fg:w="2"/><text x="58.4578%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="58.2078%" y="245" width="0.1586%" height="15" fill="rgb(242,55,13)" fg:x="734" fg:w="2"/><text x="58.4578%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="58.2078%" y="229" width="0.1586%" height="15" fill="rgb(242,112,31)" fg:x="734" fg:w="2"/><text x="58.4578%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="58.3664%" y="245" width="0.1586%" height="15" fill="rgb(249,192,27)" fg:x="736" fg:w="2"/><text x="58.6164%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="58.3664%" y="229" width="0.1586%" height="15" fill="rgb(208,204,44)" fg:x="736" fg:w="2"/><text x="58.6164%" y="239.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="58.3664%" y="213" width="0.1586%" height="15" fill="rgb(208,93,54)" fg:x="736" fg:w="2"/><text x="58.6164%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.32%)</title><rect x="58.3664%" y="261" width="0.3172%" height="15" fill="rgb(242,1,31)" fg:x="736" fg:w="4"/><text x="58.6164%" y="271.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="58.5250%" y="245" width="0.1586%" height="15" fill="rgb(241,83,25)" fg:x="738" fg:w="2"/><text x="58.7750%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (9 samples, 0.71%)</title><rect x="58.2078%" y="277" width="0.7137%" height="15" fill="rgb(205,169,50)" fg:x="734" fg:w="9"/><text x="58.4578%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (3 samples, 0.24%)</title><rect x="58.6836%" y="261" width="0.2379%" height="15" fill="rgb(239,186,37)" fg:x="740" fg:w="3"/><text x="58.9336%" y="271.50"></text></g><g><title>regex_syntax::unicode::perl_digit (2 samples, 0.16%)</title><rect x="58.7629%" y="245" width="0.1586%" height="15" fill="rgb(205,221,10)" fg:x="741" fg:w="2"/><text x="59.0129%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="58.8422%" y="229" width="0.0793%" height="15" fill="rgb(218,196,15)" fg:x="742" fg:w="1"/><text x="59.0922%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.9215%" y="245" width="0.0793%" height="15" fill="rgb(218,196,35)" fg:x="743" fg:w="1"/><text x="59.1715%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.9215%" y="229" width="0.0793%" height="15" fill="rgb(233,63,24)" fg:x="743" fg:w="1"/><text x="59.1715%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="58.9215%" y="261" width="0.1586%" height="15" fill="rgb(225,8,4)" fg:x="743" fg:w="2"/><text x="59.1715%" y="271.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="59.0008%" y="245" width="0.0793%" height="15" fill="rgb(234,105,35)" fg:x="744" fg:w="1"/><text x="59.2508%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="59.0008%" y="229" width="0.0793%" height="15" fill="rgb(236,21,32)" fg:x="744" fg:w="1"/><text x="59.2508%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (264 samples, 20.94%)</title><rect x="38.2236%" y="357" width="20.9358%" height="15" fill="rgb(228,109,6)" fg:x="482" fg:w="264"/><text x="38.4736%" y="367.50">&lt;regex::regex::string::Regex as c..</text></g><g><title>regex::builders::Builder::build_one_string (264 samples, 20.94%)</title><rect x="38.2236%" y="341" width="20.9358%" height="15" fill="rgb(229,215,31)" fg:x="482" fg:w="264"/><text x="38.4736%" y="351.50">regex::builders::Builder::build_o..</text></g><g><title>regex_automata::meta::regex::Builder::build (263 samples, 20.86%)</title><rect x="38.3029%" y="325" width="20.8565%" height="15" fill="rgb(221,52,54)" fg:x="483" fg:w="263"/><text x="38.5529%" y="335.50">regex_automata::meta::regex::Buil..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (15 samples, 1.19%)</title><rect x="57.9699%" y="309" width="1.1895%" height="15" fill="rgb(252,129,43)" fg:x="731" fg:w="15"/><text x="58.2199%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (15 samples, 1.19%)</title><rect x="57.9699%" y="293" width="1.1895%" height="15" fill="rgb(248,183,27)" fg:x="731" fg:w="15"/><text x="58.2199%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="58.9215%" y="277" width="0.2379%" height="15" fill="rgb(250,0,22)" fg:x="743" fg:w="3"/><text x="59.1715%" y="287.50"></text></g><g><title>regex_syntax::hir::Properties::repetition (1 samples, 0.08%)</title><rect x="59.0801%" y="261" width="0.0793%" height="15" fill="rgb(213,166,10)" fg:x="745" fg:w="1"/><text x="59.3301%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.0801%" y="245" width="0.0793%" height="15" fill="rgb(207,163,36)" fg:x="745" fg:w="1"/><text x="59.3301%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="59.1594%" y="309" width="0.0793%" height="15" fill="rgb(208,122,22)" fg:x="746" fg:w="1"/><text x="59.4094%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="59.2387%" y="277" width="0.0793%" height="15" fill="rgb(207,104,49)" fg:x="747" fg:w="1"/><text x="59.4887%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="59.1594%" y="357" width="0.2379%" height="15" fill="rgb(248,211,50)" fg:x="746" fg:w="3"/><text x="59.4094%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="59.1594%" y="341" width="0.2379%" height="15" fill="rgb(217,13,45)" fg:x="746" fg:w="3"/><text x="59.4094%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="59.1594%" y="325" width="0.2379%" height="15" fill="rgb(211,216,49)" fg:x="746" fg:w="3"/><text x="59.4094%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="59.2387%" y="309" width="0.1586%" height="15" fill="rgb(221,58,53)" fg:x="747" fg:w="2"/><text x="59.4887%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="59.2387%" y="293" width="0.1586%" height="15" fill="rgb(220,112,41)" fg:x="747" fg:w="2"/><text x="59.4887%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.3180%" y="277" width="0.0793%" height="15" fill="rgb(236,38,28)" fg:x="748" fg:w="1"/><text x="59.5680%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="59.3973%" y="341" width="0.1586%" height="15" fill="rgb(227,195,22)" fg:x="749" fg:w="2"/><text x="59.6473%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="59.4766%" y="325" width="0.0793%" height="15" fill="rgb(214,55,33)" fg:x="750" fg:w="1"/><text x="59.7266%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="59.4766%" y="309" width="0.0793%" height="15" fill="rgb(248,80,13)" fg:x="750" fg:w="1"/><text x="59.7266%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="59.4766%" y="293" width="0.0793%" height="15" fill="rgb(238,52,6)" fg:x="750" fg:w="1"/><text x="59.7266%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="59.4766%" y="277" width="0.0793%" height="15" fill="rgb(224,198,47)" fg:x="750" fg:w="1"/><text x="59.7266%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="60.0317%" y="261" width="0.2379%" height="15" fill="rgb(233,171,20)" fg:x="757" fg:w="3"/><text x="60.2817%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="60.0317%" y="245" width="0.2379%" height="15" fill="rgb(241,30,25)" fg:x="757" fg:w="3"/><text x="60.2817%" y="255.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="60.0317%" y="229" width="0.2379%" height="15" fill="rgb(207,171,38)" fg:x="757" fg:w="3"/><text x="60.2817%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="60.2696%" y="261" width="0.1586%" height="15" fill="rgb(234,70,1)" fg:x="760" fg:w="2"/><text x="60.5196%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="60.4282%" y="261" width="0.3172%" height="15" fill="rgb(232,178,18)" fg:x="762" fg:w="4"/><text x="60.6782%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (16 samples, 1.27%)</title><rect x="59.5559%" y="277" width="1.2688%" height="15" fill="rgb(241,78,40)" fg:x="751" fg:w="16"/><text x="59.8059%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="60.7454%" y="261" width="0.0793%" height="15" fill="rgb(222,35,25)" fg:x="766" fg:w="1"/><text x="60.9954%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (20 samples, 1.59%)</title><rect x="59.5559%" y="293" width="1.5860%" height="15" fill="rgb(207,92,16)" fg:x="751" fg:w="20"/><text x="59.8059%" y="303.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (4 samples, 0.32%)</title><rect x="60.8247%" y="277" width="0.3172%" height="15" fill="rgb(216,59,51)" fg:x="767" fg:w="4"/><text x="61.0747%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="60.9040%" y="261" width="0.2379%" height="15" fill="rgb(213,80,28)" fg:x="768" fg:w="3"/><text x="61.1540%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="60.9040%" y="245" width="0.2379%" height="15" fill="rgb(220,93,7)" fg:x="768" fg:w="3"/><text x="61.1540%" y="255.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="60.9040%" y="229" width="0.2379%" height="15" fill="rgb(225,24,44)" fg:x="768" fg:w="3"/><text x="61.1540%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (290 samples, 23.00%)</title><rect x="38.2236%" y="373" width="22.9976%" height="15" fill="rgb(243,74,40)" fg:x="482" fg:w="290"/><text x="38.4736%" y="383.50">indefinite::rules::number::Number::c..</text></g><g><title>regex::regex::string::Regex::is_match_at (23 samples, 1.82%)</title><rect x="59.3973%" y="357" width="1.8239%" height="15" fill="rgb(228,39,7)" fg:x="749" fg:w="23"/><text x="59.6473%" y="367.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (21 samples, 1.67%)</title><rect x="59.5559%" y="341" width="1.6653%" height="15" fill="rgb(227,79,8)" fg:x="751" fg:w="21"/><text x="59.8059%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (21 samples, 1.67%)</title><rect x="59.5559%" y="325" width="1.6653%" height="15" fill="rgb(236,58,11)" fg:x="751" fg:w="21"/><text x="59.8059%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (21 samples, 1.67%)</title><rect x="59.5559%" y="309" width="1.6653%" height="15" fill="rgb(249,63,35)" fg:x="751" fg:w="21"/><text x="59.8059%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="61.1420%" y="293" width="0.0793%" height="15" fill="rgb(252,114,16)" fg:x="771" fg:w="1"/><text x="61.3920%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="61.1420%" y="277" width="0.0793%" height="15" fill="rgb(254,151,24)" fg:x="771" fg:w="1"/><text x="61.3920%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.1420%" y="261" width="0.0793%" height="15" fill="rgb(253,54,39)" fg:x="771" fg:w="1"/><text x="61.3920%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.1420%" y="245" width="0.0793%" height="15" fill="rgb(243,25,45)" fg:x="771" fg:w="1"/><text x="61.3920%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.1420%" y="229" width="0.0793%" height="15" fill="rgb(234,134,9)" fg:x="771" fg:w="1"/><text x="61.3920%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.5385%" y="261" width="0.0793%" height="15" fill="rgb(227,166,31)" fg:x="776" fg:w="1"/><text x="61.7885%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="61.3799%" y="293" width="0.3172%" height="15" fill="rgb(245,143,41)" fg:x="774" fg:w="4"/><text x="61.6299%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="61.4592%" y="277" width="0.2379%" height="15" fill="rgb(238,181,32)" fg:x="775" fg:w="3"/><text x="61.7092%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="61.6178%" y="261" width="0.0793%" height="15" fill="rgb(224,113,18)" fg:x="777" fg:w="1"/><text x="61.8678%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="61.6971%" y="293" width="0.1586%" height="15" fill="rgb(240,229,28)" fg:x="778" fg:w="2"/><text x="61.9471%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.7764%" y="277" width="0.0793%" height="15" fill="rgb(250,185,3)" fg:x="779" fg:w="1"/><text x="62.0264%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.7764%" y="261" width="0.0793%" height="15" fill="rgb(212,59,25)" fg:x="779" fg:w="1"/><text x="62.0264%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="61.9350%" y="261" width="0.0793%" height="15" fill="rgb(221,87,20)" fg:x="781" fg:w="1"/><text x="62.1850%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="61.8557%" y="293" width="0.3172%" height="15" fill="rgb(213,74,28)" fg:x="780" fg:w="4"/><text x="62.1057%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="61.8557%" y="277" width="0.3172%" height="15" fill="rgb(224,132,34)" fg:x="780" fg:w="4"/><text x="62.1057%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="62.0143%" y="261" width="0.1586%" height="15" fill="rgb(222,101,24)" fg:x="782" fg:w="2"/><text x="62.2643%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="62.0143%" y="245" width="0.1586%" height="15" fill="rgb(254,142,4)" fg:x="782" fg:w="2"/><text x="62.2643%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="62.0936%" y="229" width="0.0793%" height="15" fill="rgb(230,229,49)" fg:x="783" fg:w="1"/><text x="62.3436%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="62.2522%" y="277" width="0.0793%" height="15" fill="rgb(238,70,47)" fg:x="785" fg:w="1"/><text x="62.5022%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="62.2522%" y="261" width="0.0793%" height="15" fill="rgb(231,160,17)" fg:x="785" fg:w="1"/><text x="62.5022%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="62.2522%" y="245" width="0.0793%" height="15" fill="rgb(218,68,53)" fg:x="785" fg:w="1"/><text x="62.5022%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="62.3315%" y="261" width="0.0793%" height="15" fill="rgb(236,111,10)" fg:x="786" fg:w="1"/><text x="62.5815%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="62.3315%" y="245" width="0.0793%" height="15" fill="rgb(224,34,41)" fg:x="786" fg:w="1"/><text x="62.5815%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="62.3315%" y="277" width="0.5551%" height="15" fill="rgb(241,118,19)" fg:x="786" fg:w="7"/><text x="62.5815%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="62.4108%" y="261" width="0.4758%" height="15" fill="rgb(238,129,25)" fg:x="787" fg:w="6"/><text x="62.6608%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="62.8073%" y="245" width="0.0793%" height="15" fill="rgb(238,22,31)" fg:x="792" fg:w="1"/><text x="63.0573%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.8866%" y="245" width="0.0793%" height="15" fill="rgb(222,174,48)" fg:x="793" fg:w="1"/><text x="63.1366%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.8866%" y="229" width="0.0793%" height="15" fill="rgb(206,152,40)" fg:x="793" fg:w="1"/><text x="63.1366%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.8866%" y="213" width="0.0793%" height="15" fill="rgb(218,99,54)" fg:x="793" fg:w="1"/><text x="63.1366%" y="223.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="63.2038%" y="149" width="0.0793%" height="15" fill="rgb(220,174,26)" fg:x="797" fg:w="1"/><text x="63.4538%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="63.2038%" y="197" width="0.1586%" height="15" fill="rgb(245,116,9)" fg:x="797" fg:w="2"/><text x="63.4538%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="63.2038%" y="181" width="0.1586%" height="15" fill="rgb(209,72,35)" fg:x="797" fg:w="2"/><text x="63.4538%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.2038%" y="165" width="0.1586%" height="15" fill="rgb(226,126,21)" fg:x="797" fg:w="2"/><text x="63.4538%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="63.2831%" y="149" width="0.0793%" height="15" fill="rgb(227,192,1)" fg:x="798" fg:w="1"/><text x="63.5331%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="62.8866%" y="261" width="0.5551%" height="15" fill="rgb(237,180,29)" fg:x="793" fg:w="7"/><text x="63.1366%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (6 samples, 0.48%)</title><rect x="62.9659%" y="245" width="0.4758%" height="15" fill="rgb(230,197,35)" fg:x="794" fg:w="6"/><text x="63.2159%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (6 samples, 0.48%)</title><rect x="62.9659%" y="229" width="0.4758%" height="15" fill="rgb(246,193,31)" fg:x="794" fg:w="6"/><text x="63.2159%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (5 samples, 0.40%)</title><rect x="63.0452%" y="213" width="0.3965%" height="15" fill="rgb(241,36,4)" fg:x="795" fg:w="5"/><text x="63.2952%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="63.3624%" y="197" width="0.0793%" height="15" fill="rgb(241,130,17)" fg:x="799" fg:w="1"/><text x="63.6124%" y="207.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="63.5210%" y="245" width="0.0793%" height="15" fill="rgb(206,137,32)" fg:x="801" fg:w="1"/><text x="63.7710%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="63.6003%" y="245" width="0.0793%" height="15" fill="rgb(237,228,51)" fg:x="802" fg:w="1"/><text x="63.8503%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.6003%" y="229" width="0.0793%" height="15" fill="rgb(243,6,42)" fg:x="802" fg:w="1"/><text x="63.8503%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.6003%" y="213" width="0.0793%" height="15" fill="rgb(251,74,28)" fg:x="802" fg:w="1"/><text x="63.8503%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="63.6003%" y="197" width="0.0793%" height="15" fill="rgb(218,20,49)" fg:x="802" fg:w="1"/><text x="63.8503%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (13 samples, 1.03%)</title><rect x="62.8866%" y="277" width="1.0309%" height="15" fill="rgb(238,28,14)" fg:x="793" fg:w="13"/><text x="63.1366%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="63.4417%" y="261" width="0.4758%" height="15" fill="rgb(229,40,46)" fg:x="800" fg:w="6"/><text x="63.6917%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="63.6796%" y="245" width="0.2379%" height="15" fill="rgb(244,195,20)" fg:x="803" fg:w="3"/><text x="63.9296%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (23 samples, 1.82%)</title><rect x="62.1729%" y="293" width="1.8239%" height="15" fill="rgb(253,56,35)" fg:x="784" fg:w="23"/><text x="62.4229%" y="303.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="63.9175%" y="277" width="0.0793%" height="15" fill="rgb(210,149,44)" fg:x="806" fg:w="1"/><text x="64.1675%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="63.9175%" y="261" width="0.0793%" height="15" fill="rgb(240,135,12)" fg:x="806" fg:w="1"/><text x="64.1675%" y="271.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="64.2347%" y="245" width="0.0793%" height="15" fill="rgb(251,24,50)" fg:x="810" fg:w="1"/><text x="64.4847%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.2347%" y="229" width="0.0793%" height="15" fill="rgb(243,200,47)" fg:x="810" fg:w="1"/><text x="64.4847%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.2347%" y="213" width="0.0793%" height="15" fill="rgb(224,166,26)" fg:x="810" fg:w="1"/><text x="64.4847%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.2347%" y="197" width="0.0793%" height="15" fill="rgb(233,0,47)" fg:x="810" fg:w="1"/><text x="64.4847%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="64.3140%" y="245" width="0.1586%" height="15" fill="rgb(253,80,5)" fg:x="811" fg:w="2"/><text x="64.5640%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="64.3933%" y="229" width="0.0793%" height="15" fill="rgb(214,133,25)" fg:x="812" fg:w="1"/><text x="64.6433%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.63%)</title><rect x="63.9968%" y="293" width="0.6344%" height="15" fill="rgb(209,27,14)" fg:x="807" fg:w="8"/><text x="64.2468%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.63%)</title><rect x="63.9968%" y="277" width="0.6344%" height="15" fill="rgb(219,102,51)" fg:x="807" fg:w="8"/><text x="64.2468%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.56%)</title><rect x="64.0761%" y="261" width="0.5551%" height="15" fill="rgb(237,18,16)" fg:x="808" fg:w="7"/><text x="64.3261%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="64.4726%" y="245" width="0.1586%" height="15" fill="rgb(241,85,17)" fg:x="813" fg:w="2"/><text x="64.7226%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="64.4726%" y="229" width="0.1586%" height="15" fill="rgb(236,90,42)" fg:x="813" fg:w="2"/><text x="64.7226%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="64.4726%" y="213" width="0.1586%" height="15" fill="rgb(249,57,21)" fg:x="813" fg:w="2"/><text x="64.7226%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="64.4726%" y="197" width="0.1586%" height="15" fill="rgb(243,12,36)" fg:x="813" fg:w="2"/><text x="64.7226%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="64.6312%" y="245" width="0.1586%" height="15" fill="rgb(253,128,47)" fg:x="815" fg:w="2"/><text x="64.8812%" y="255.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="64.7105%" y="229" width="0.0793%" height="15" fill="rgb(207,33,20)" fg:x="816" fg:w="1"/><text x="64.9605%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="64.6312%" y="261" width="0.2379%" height="15" fill="rgb(233,215,35)" fg:x="815" fg:w="3"/><text x="64.8812%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="64.7898%" y="245" width="0.0793%" height="15" fill="rgb(249,188,52)" fg:x="817" fg:w="1"/><text x="65.0398%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (47 samples, 3.73%)</title><rect x="61.3799%" y="309" width="3.7272%" height="15" fill="rgb(225,12,32)" fg:x="774" fg:w="47"/><text x="61.6299%" y="319.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="64.6312%" y="293" width="0.4758%" height="15" fill="rgb(247,98,14)" fg:x="815" fg:w="6"/><text x="64.8812%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="64.6312%" y="277" width="0.4758%" height="15" fill="rgb(247,219,48)" fg:x="815" fg:w="6"/><text x="64.8812%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="64.8692%" y="261" width="0.2379%" height="15" fill="rgb(253,60,48)" fg:x="818" fg:w="3"/><text x="65.1192%" y="271.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="64.9485%" y="245" width="0.1586%" height="15" fill="rgb(245,15,52)" fg:x="819" fg:w="2"/><text x="65.1985%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.0278%" y="229" width="0.0793%" height="15" fill="rgb(220,133,28)" fg:x="820" fg:w="1"/><text x="65.2778%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (50 samples, 3.97%)</title><rect x="61.2213%" y="341" width="3.9651%" height="15" fill="rgb(217,180,4)" fg:x="772" fg:w="50"/><text x="61.4713%" y="351.50">&lt;reg..</text></g><g><title>regex::builders::Builder::build_one_string (48 samples, 3.81%)</title><rect x="61.3799%" y="325" width="3.8065%" height="15" fill="rgb(251,24,1)" fg:x="774" fg:w="48"/><text x="61.6299%" y="335.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="65.1071%" y="309" width="0.0793%" height="15" fill="rgb(212,185,49)" fg:x="821" fg:w="1"/><text x="65.3571%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="65.1864%" y="341" width="0.0793%" height="15" fill="rgb(215,175,22)" fg:x="822" fg:w="1"/><text x="65.4364%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="65.1864%" y="325" width="0.0793%" height="15" fill="rgb(250,205,14)" fg:x="822" fg:w="1"/><text x="65.4364%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="65.1864%" y="309" width="0.0793%" height="15" fill="rgb(225,211,22)" fg:x="822" fg:w="1"/><text x="65.4364%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.1864%" y="293" width="0.0793%" height="15" fill="rgb(251,179,42)" fg:x="822" fg:w="1"/><text x="65.4364%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.1864%" y="277" width="0.0793%" height="15" fill="rgb(208,216,51)" fg:x="822" fg:w="1"/><text x="65.4364%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.1864%" y="261" width="0.0793%" height="15" fill="rgb(235,36,11)" fg:x="822" fg:w="1"/><text x="65.4364%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="65.2657%" y="293" width="0.0793%" height="15" fill="rgb(213,189,28)" fg:x="823" fg:w="1"/><text x="65.5157%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.2657%" y="277" width="0.0793%" height="15" fill="rgb(227,203,42)" fg:x="823" fg:w="1"/><text x="65.5157%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.2657%" y="261" width="0.0793%" height="15" fill="rgb(244,72,36)" fg:x="823" fg:w="1"/><text x="65.5157%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="65.2657%" y="309" width="0.1586%" height="15" fill="rgb(213,53,17)" fg:x="823" fg:w="2"/><text x="65.5157%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="65.3450%" y="293" width="0.0793%" height="15" fill="rgb(207,167,3)" fg:x="824" fg:w="1"/><text x="65.5950%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.3450%" y="277" width="0.0793%" height="15" fill="rgb(216,98,30)" fg:x="824" fg:w="1"/><text x="65.5950%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="65.2657%" y="341" width="0.3172%" height="15" fill="rgb(236,123,15)" fg:x="823" fg:w="4"/><text x="65.5157%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="65.2657%" y="325" width="0.3172%" height="15" fill="rgb(248,81,50)" fg:x="823" fg:w="4"/><text x="65.5157%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="65.4243%" y="309" width="0.1586%" height="15" fill="rgb(214,120,4)" fg:x="825" fg:w="2"/><text x="65.6743%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="65.4243%" y="293" width="0.1586%" height="15" fill="rgb(208,179,34)" fg:x="825" fg:w="2"/><text x="65.6743%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.5036%" y="277" width="0.0793%" height="15" fill="rgb(227,140,7)" fg:x="826" fg:w="1"/><text x="65.7536%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.9794%" y="261" width="0.0793%" height="15" fill="rgb(214,22,6)" fg:x="832" fg:w="1"/><text x="66.2294%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="65.6622%" y="277" width="0.4758%" height="15" fill="rgb(207,137,27)" fg:x="828" fg:w="6"/><text x="65.9122%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="66.0587%" y="261" width="0.0793%" height="15" fill="rgb(210,8,46)" fg:x="833" fg:w="1"/><text x="66.3087%" y="271.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (593 samples, 47.03%)</title><rect x="19.2704%" y="453" width="47.0262%" height="15" fill="rgb(240,16,54)" fg:x="243" fg:w="593"/><text x="19.5204%" y="463.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replie..</text></g><g><title>plugins_core::looking::model::qualify_name (577 samples, 45.76%)</title><rect x="20.5393%" y="437" width="45.7573%" height="15" fill="rgb(211,209,29)" fg:x="259" fg:w="577"/><text x="20.7893%" y="447.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (577 samples, 45.76%)</title><rect x="20.5393%" y="421" width="45.7573%" height="15" fill="rgb(226,228,24)" fg:x="259" fg:w="577"/><text x="20.7893%" y="431.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (577 samples, 45.76%)</title><rect x="20.5393%" y="405" width="45.7573%" height="15" fill="rgb(222,84,9)" fg:x="259" fg:w="577"/><text x="20.7893%" y="415.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (577 samples, 45.76%)</title><rect x="20.5393%" y="389" width="45.7573%" height="15" fill="rgb(234,203,30)" fg:x="259" fg:w="577"/><text x="20.7893%" y="399.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (64 samples, 5.08%)</title><rect x="61.2213%" y="373" width="5.0753%" height="15" fill="rgb(238,109,14)" fg:x="772" fg:w="64"/><text x="61.4713%" y="383.50">indefi..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (64 samples, 5.08%)</title><rect x="61.2213%" y="357" width="5.0753%" height="15" fill="rgb(233,206,34)" fg:x="772" fg:w="64"/><text x="61.4713%" y="367.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.71%)</title><rect x="65.5829%" y="341" width="0.7137%" height="15" fill="rgb(220,167,47)" fg:x="827" fg:w="9"/><text x="65.8329%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.71%)</title><rect x="65.5829%" y="325" width="0.7137%" height="15" fill="rgb(238,105,10)" fg:x="827" fg:w="9"/><text x="65.8329%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.71%)</title><rect x="65.5829%" y="309" width="0.7137%" height="15" fill="rgb(213,227,17)" fg:x="827" fg:w="9"/><text x="65.8329%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.63%)</title><rect x="65.6622%" y="293" width="0.6344%" height="15" fill="rgb(217,132,38)" fg:x="828" fg:w="8"/><text x="65.9122%" y="303.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="66.1380%" y="277" width="0.1586%" height="15" fill="rgb(242,146,4)" fg:x="834" fg:w="2"/><text x="66.3880%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="66.1380%" y="261" width="0.1586%" height="15" fill="rgb(212,61,9)" fg:x="834" fg:w="2"/><text x="66.3880%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="66.1380%" y="245" width="0.1586%" height="15" fill="rgb(247,126,22)" fg:x="834" fg:w="2"/><text x="66.3880%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="66.1380%" y="229" width="0.1586%" height="15" fill="rgb(220,196,2)" fg:x="834" fg:w="2"/><text x="66.3880%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (2 samples, 0.16%)</title><rect x="66.2966%" y="453" width="0.1586%" height="15" fill="rgb(208,46,4)" fg:x="836" fg:w="2"/><text x="66.5466%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="66.4552%" y="453" width="0.0793%" height="15" fill="rgb(252,104,46)" fg:x="838" fg:w="1"/><text x="66.7052%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="66.4552%" y="437" width="0.0793%" height="15" fill="rgb(237,152,48)" fg:x="838" fg:w="1"/><text x="66.7052%" y="447.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.5345%" y="421" width="0.0793%" height="15" fill="rgb(221,59,37)" fg:x="839" fg:w="1"/><text x="66.7845%" y="431.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="66.6138%" y="421" width="0.1586%" height="15" fill="rgb(209,202,51)" fg:x="840" fg:w="2"/><text x="66.8638%" y="431.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="66.6138%" y="405" width="0.1586%" height="15" fill="rgb(228,81,30)" fg:x="840" fg:w="2"/><text x="66.8638%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="66.6138%" y="389" width="0.1586%" height="15" fill="rgb(227,42,39)" fg:x="840" fg:w="2"/><text x="66.8638%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="66.6138%" y="373" width="0.1586%" height="15" fill="rgb(221,26,2)" fg:x="840" fg:w="2"/><text x="66.8638%" y="383.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as core::convert::Into&lt;kernel::model::entity::EntityRef&gt;&gt;::into (2 samples, 0.16%)</title><rect x="66.6138%" y="357" width="0.1586%" height="15" fill="rgb(254,61,31)" fg:x="840" fg:w="2"/><text x="66.8638%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (695 samples, 55.11%)</title><rect x="11.7367%" y="645" width="55.1150%" height="15" fill="rgb(222,173,38)" fg:x="148" fg:w="695"/><text x="11.9867%" y="655.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (695 samples, 55.11%)</title><rect x="11.7367%" y="629" width="55.1150%" height="15" fill="rgb(218,50,12)" fg:x="148" fg:w="695"/><text x="11.9867%" y="639.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (600 samples, 47.58%)</title><rect x="19.2704%" y="613" width="47.5813%" height="15" fill="rgb(223,88,40)" fg:x="243" fg:w="600"/><text x="19.5204%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (600 samples, 47.58%)</title><rect x="19.2704%" y="597" width="47.5813%" height="15" fill="rgb(237,54,19)" fg:x="243" fg:w="600"/><text x="19.5204%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (600 samples, 47.58%)</title><rect x="19.2704%" y="581" width="47.5813%" height="15" fill="rgb(251,129,25)" fg:x="243" fg:w="600"/><text x="19.5204%" y="591.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (600 samples, 47.58%)</title><rect x="19.2704%" y="565" width="47.5813%" height="15" fill="rgb(238,97,19)" fg:x="243" fg:w="600"/><text x="19.5204%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (600 samples, 47.58%)</title><rect x="19.2704%" y="549" width="47.5813%" height="15" fill="rgb(240,169,18)" fg:x="243" fg:w="600"/><text x="19.5204%" y="559.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (600 samples, 47.58%)</title><rect x="19.2704%" y="533" width="47.5813%" height="15" fill="rgb(230,187,49)" fg:x="243" fg:w="600"/><text x="19.5204%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (600 samples, 47.58%)</title><rect x="19.2704%" y="517" width="47.5813%" height="15" fill="rgb(209,44,26)" fg:x="243" fg:w="600"/><text x="19.5204%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (600 samples, 47.58%)</title><rect x="19.2704%" y="501" width="47.5813%" height="15" fill="rgb(244,0,6)" fg:x="243" fg:w="600"/><text x="19.5204%" y="511.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (600 samples, 47.58%)</title><rect x="19.2704%" y="485" width="47.5813%" height="15" fill="rgb(248,18,21)" fg:x="243" fg:w="600"/><text x="19.5204%" y="495.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perfo..</text></g><g><title>plugins_core::looking::model::new_area_observation (600 samples, 47.58%)</title><rect x="19.2704%" y="469" width="47.5813%" height="15" fill="rgb(245,180,19)" fg:x="243" fg:w="600"/><text x="19.5204%" y="479.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="66.5345%" y="453" width="0.3172%" height="15" fill="rgb(252,118,36)" fg:x="839" fg:w="4"/><text x="66.7845%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="66.5345%" y="437" width="0.3172%" height="15" fill="rgb(210,224,19)" fg:x="839" fg:w="4"/><text x="66.7845%" y="447.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="66.7724%" y="421" width="0.0793%" height="15" fill="rgb(218,30,24)" fg:x="842" fg:w="1"/><text x="67.0224%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="66.7724%" y="405" width="0.0793%" height="15" fill="rgb(219,75,50)" fg:x="842" fg:w="1"/><text x="67.0224%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.7724%" y="389" width="0.0793%" height="15" fill="rgb(234,72,50)" fg:x="842" fg:w="1"/><text x="67.0224%" y="399.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="66.8517%" y="581" width="0.1586%" height="15" fill="rgb(219,100,48)" fg:x="843" fg:w="2"/><text x="67.1017%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="66.8517%" y="565" width="0.1586%" height="15" fill="rgb(253,5,41)" fg:x="843" fg:w="2"/><text x="67.1017%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.8517%" y="549" width="0.1586%" height="15" fill="rgb(247,181,11)" fg:x="843" fg:w="2"/><text x="67.1017%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="66.8517%" y="533" width="0.1586%" height="15" fill="rgb(222,223,25)" fg:x="843" fg:w="2"/><text x="67.1017%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.8517%" y="517" width="0.1586%" height="15" fill="rgb(214,198,28)" fg:x="843" fg:w="2"/><text x="67.1017%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="66.8517%" y="501" width="0.1586%" height="15" fill="rgb(230,46,43)" fg:x="843" fg:w="2"/><text x="67.1017%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="66.8517%" y="485" width="0.1586%" height="15" fill="rgb(233,65,53)" fg:x="843" fg:w="2"/><text x="67.1017%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.0103%" y="501" width="0.0793%" height="15" fill="rgb(221,121,27)" fg:x="845" fg:w="1"/><text x="67.2603%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.0103%" y="485" width="0.0793%" height="15" fill="rgb(247,70,47)" fg:x="845" fg:w="1"/><text x="67.2603%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (4 samples, 0.32%)</title><rect x="66.8517%" y="645" width="0.3172%" height="15" fill="rgb(228,85,35)" fg:x="843" fg:w="4"/><text x="67.1017%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="66.8517%" y="629" width="0.3172%" height="15" fill="rgb(209,50,18)" fg:x="843" fg:w="4"/><text x="67.1017%" y="639.50"></text></g><g><title>engine::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="66.8517%" y="613" width="0.3172%" height="15" fill="rgb(250,19,35)" fg:x="843" fg:w="4"/><text x="67.1017%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::from_str (4 samples, 0.32%)</title><rect x="66.8517%" y="597" width="0.3172%" height="15" fill="rgb(253,107,29)" fg:x="843" fg:w="4"/><text x="67.1017%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="67.0103%" y="581" width="0.1586%" height="15" fill="rgb(252,179,29)" fg:x="845" fg:w="2"/><text x="67.2603%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="67.0103%" y="565" width="0.1586%" height="15" fill="rgb(238,194,6)" fg:x="845" fg:w="2"/><text x="67.2603%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="67.0103%" y="549" width="0.1586%" height="15" fill="rgb(238,164,29)" fg:x="845" fg:w="2"/><text x="67.2603%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="67.0103%" y="533" width="0.1586%" height="15" fill="rgb(224,25,9)" fg:x="845" fg:w="2"/><text x="67.2603%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="67.0103%" y="517" width="0.1586%" height="15" fill="rgb(244,153,23)" fg:x="845" fg:w="2"/><text x="67.2603%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="67.0896%" y="501" width="0.0793%" height="15" fill="rgb(212,203,14)" fg:x="846" fg:w="1"/><text x="67.3396%" y="511.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="67.1689%" y="645" width="0.1586%" height="15" fill="rgb(220,164,20)" fg:x="847" fg:w="2"/><text x="67.4189%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="67.1689%" y="629" width="0.1586%" height="15" fill="rgb(222,203,48)" fg:x="847" fg:w="2"/><text x="67.4189%" y="639.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="67.1689%" y="613" width="0.1586%" height="15" fill="rgb(215,159,22)" fg:x="847" fg:w="2"/><text x="67.4189%" y="623.50"></text></g><g><title>&lt;plugins_core::looking::parser::LookActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="67.1689%" y="597" width="0.1586%" height="15" fill="rgb(216,183,47)" fg:x="847" fg:w="2"/><text x="67.4189%" y="607.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2 samples, 0.16%)</title><rect x="67.1689%" y="581" width="0.1586%" height="15" fill="rgb(229,195,25)" fg:x="847" fg:w="2"/><text x="67.4189%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2 samples, 0.16%)</title><rect x="67.1689%" y="565" width="0.1586%" height="15" fill="rgb(224,132,51)" fg:x="847" fg:w="2"/><text x="67.4189%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (850 samples, 67.41%)</title><rect x="0.0000%" y="709" width="67.4068%" height="15" fill="rgb(240,63,7)" fg:x="0" fg:w="850"/><text x="0.2500%" y="719.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (850 samples, 67.41%)</title><rect x="0.0000%" y="693" width="67.4068%" height="15" fill="rgb(249,182,41)" fg:x="0" fg:w="850"/><text x="0.2500%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (850 samples, 67.41%)</title><rect x="0.0000%" y="677" width="67.4068%" height="15" fill="rgb(243,47,26)" fg:x="0" fg:w="850"/><text x="0.2500%" y="687.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (702 samples, 55.67%)</title><rect x="11.7367%" y="661" width="55.6701%" height="15" fill="rgb(233,48,2)" fg:x="148" fg:w="702"/><text x="11.9867%" y="671.50">engine::session::Session::evaluate_and_perform</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="67.3275%" y="645" width="0.0793%" height="15" fill="rgb(244,165,34)" fg:x="849" fg:w="1"/><text x="67.5775%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.3275%" y="629" width="0.0793%" height="15" fill="rgb(207,89,7)" fg:x="849" fg:w="1"/><text x="67.5775%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="67.4068%" y="661" width="0.2379%" height="15" fill="rgb(244,117,36)" fg:x="850" fg:w="3"/><text x="67.6568%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::state::State&gt;&gt; (3 samples, 0.24%)</title><rect x="67.4068%" y="645" width="0.2379%" height="15" fill="rgb(226,144,34)" fg:x="850" fg:w="3"/><text x="67.6568%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="67.4068%" y="629" width="0.2379%" height="15" fill="rgb(213,23,19)" fg:x="850" fg:w="3"/><text x="67.6568%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (3 samples, 0.24%)</title><rect x="67.4068%" y="613" width="0.2379%" height="15" fill="rgb(217,75,12)" fg:x="850" fg:w="3"/><text x="67.6568%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="67.4068%" y="597" width="0.2379%" height="15" fill="rgb(224,159,17)" fg:x="850" fg:w="3"/><text x="67.6568%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="67.4068%" y="581" width="0.2379%" height="15" fill="rgb(217,118,1)" fg:x="850" fg:w="3"/><text x="67.6568%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="67.4068%" y="565" width="0.2379%" height="15" fill="rgb(232,180,48)" fg:x="850" fg:w="3"/><text x="67.6568%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="67.4861%" y="549" width="0.1586%" height="15" fill="rgb(230,27,33)" fg:x="851" fg:w="2"/><text x="67.7361%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="67.4861%" y="533" width="0.1586%" height="15" fill="rgb(205,31,21)" fg:x="851" fg:w="2"/><text x="67.7361%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="67.4861%" y="517" width="0.1586%" height="15" fill="rgb(253,59,4)" fg:x="851" fg:w="2"/><text x="67.7361%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="67.4861%" y="501" width="0.1586%" height="15" fill="rgb(224,201,9)" fg:x="851" fg:w="2"/><text x="67.7361%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="67.7240%" y="581" width="0.0793%" height="15" fill="rgb(229,206,30)" fg:x="854" fg:w="1"/><text x="67.9740%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="67.7240%" y="565" width="0.0793%" height="15" fill="rgb(212,67,47)" fg:x="854" fg:w="1"/><text x="67.9740%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="67.7240%" y="549" width="0.0793%" height="15" fill="rgb(211,96,50)" fg:x="854" fg:w="1"/><text x="67.9740%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.7240%" y="533" width="0.0793%" height="15" fill="rgb(252,114,18)" fg:x="854" fg:w="1"/><text x="67.9740%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.7240%" y="517" width="0.0793%" height="15" fill="rgb(223,58,37)" fg:x="854" fg:w="1"/><text x="67.9740%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.7240%" y="501" width="0.0793%" height="15" fill="rgb(237,70,4)" fg:x="854" fg:w="1"/><text x="67.9740%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.7240%" y="485" width="0.0793%" height="15" fill="rgb(244,85,46)" fg:x="854" fg:w="1"/><text x="67.9740%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.7240%" y="469" width="0.0793%" height="15" fill="rgb(223,39,52)" fg:x="854" fg:w="1"/><text x="67.9740%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.7240%" y="453" width="0.0793%" height="15" fill="rgb(218,200,14)" fg:x="854" fg:w="1"/><text x="67.9740%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (3 samples, 0.24%)</title><rect x="67.6447%" y="629" width="0.2379%" height="15" fill="rgb(208,171,16)" fg:x="853" fg:w="3"/><text x="67.8947%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="67.7240%" y="613" width="0.1586%" height="15" fill="rgb(234,200,18)" fg:x="854" fg:w="2"/><text x="67.9740%" y="623.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="67.7240%" y="597" width="0.1586%" height="15" fill="rgb(228,45,11)" fg:x="854" fg:w="2"/><text x="67.9740%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::from_str (1 samples, 0.08%)</title><rect x="67.8033%" y="581" width="0.0793%" height="15" fill="rgb(237,182,11)" fg:x="855" fg:w="1"/><text x="68.0533%" y="591.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="67.8033%" y="565" width="0.0793%" height="15" fill="rgb(241,175,49)" fg:x="855" fg:w="1"/><text x="68.0533%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.8033%" y="549" width="0.0793%" height="15" fill="rgb(247,38,35)" fg:x="855" fg:w="1"/><text x="68.0533%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.8033%" y="533" width="0.0793%" height="15" fill="rgb(228,39,49)" fg:x="855" fg:w="1"/><text x="68.0533%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.8033%" y="517" width="0.0793%" height="15" fill="rgb(226,101,26)" fg:x="855" fg:w="1"/><text x="68.0533%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.8033%" y="501" width="0.0793%" height="15" fill="rgb(206,141,19)" fg:x="855" fg:w="1"/><text x="68.0533%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.8033%" y="485" width="0.0793%" height="15" fill="rgb(211,200,13)" fg:x="855" fg:w="1"/><text x="68.0533%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.8033%" y="469" width="0.0793%" height="15" fill="rgb(241,121,6)" fg:x="855" fg:w="1"/><text x="68.0533%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.8033%" y="453" width="0.0793%" height="15" fill="rgb(234,221,29)" fg:x="855" fg:w="1"/><text x="68.0533%" y="463.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="67.8826%" y="629" width="0.0793%" height="15" fill="rgb(229,136,5)" fg:x="856" fg:w="1"/><text x="68.1326%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="67.8826%" y="613" width="0.0793%" height="15" fill="rgb(238,36,11)" fg:x="856" fg:w="1"/><text x="68.1326%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="67.8826%" y="597" width="0.0793%" height="15" fill="rgb(251,55,41)" fg:x="856" fg:w="1"/><text x="68.1326%" y="607.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.8826%" y="581" width="0.0793%" height="15" fill="rgb(242,34,40)" fg:x="856" fg:w="1"/><text x="68.1326%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.8826%" y="565" width="0.0793%" height="15" fill="rgb(215,42,17)" fg:x="856" fg:w="1"/><text x="68.1326%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.8826%" y="549" width="0.0793%" height="15" fill="rgb(207,44,46)" fg:x="856" fg:w="1"/><text x="68.1326%" y="559.50"></text></g><g><title>libloading::os::unix::Library::open (5 samples, 0.40%)</title><rect x="67.9619%" y="597" width="0.3965%" height="15" fill="rgb(211,206,28)" fg:x="857" fg:w="5"/><text x="68.2119%" y="607.50"></text></g><g><title>dlopen (5 samples, 0.40%)</title><rect x="67.9619%" y="581" width="0.3965%" height="15" fill="rgb(237,167,16)" fg:x="857" fg:w="5"/><text x="68.2119%" y="591.50"></text></g><g><title>_dl_catch_error (5 samples, 0.40%)</title><rect x="67.9619%" y="565" width="0.3965%" height="15" fill="rgb(233,66,6)" fg:x="857" fg:w="5"/><text x="68.2119%" y="575.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="67.9619%" y="549" width="0.3965%" height="15" fill="rgb(246,123,29)" fg:x="857" fg:w="5"/><text x="68.2119%" y="559.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="67.9619%" y="533" width="0.3965%" height="15" fill="rgb(209,62,40)" fg:x="857" fg:w="5"/><text x="68.2119%" y="543.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="67.9619%" y="517" width="0.3965%" height="15" fill="rgb(218,4,25)" fg:x="857" fg:w="5"/><text x="68.2119%" y="527.50"></text></g><g><title>_dl_find_dso_for_object (1 samples, 0.08%)</title><rect x="68.2791%" y="501" width="0.0793%" height="15" fill="rgb(253,91,49)" fg:x="861" fg:w="1"/><text x="68.5291%" y="511.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (10 samples, 0.79%)</title><rect x="67.6447%" y="661" width="0.7930%" height="15" fill="rgb(228,155,29)" fg:x="853" fg:w="10"/><text x="67.8947%" y="671.50"></text></g><g><title>engine::session::Session::new (10 samples, 0.79%)</title><rect x="67.6447%" y="645" width="0.7930%" height="15" fill="rgb(243,57,37)" fg:x="853" fg:w="10"/><text x="67.8947%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (6 samples, 0.48%)</title><rect x="67.9619%" y="629" width="0.4758%" height="15" fill="rgb(244,167,17)" fg:x="857" fg:w="6"/><text x="68.2119%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.48%)</title><rect x="67.9619%" y="613" width="0.4758%" height="15" fill="rgb(207,181,38)" fg:x="857" fg:w="6"/><text x="68.2119%" y="623.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_string_lossy (1 samples, 0.08%)</title><rect x="68.3584%" y="597" width="0.0793%" height="15" fill="rgb(211,8,23)" fg:x="862" fg:w="1"/><text x="68.6084%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.4377%" y="549" width="0.0793%" height="15" fill="rgb(235,11,44)" fg:x="863" fg:w="1"/><text x="68.6877%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.4377%" y="533" width="0.0793%" height="15" fill="rgb(248,18,52)" fg:x="863" fg:w="1"/><text x="68.6877%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.5170%" y="517" width="0.0793%" height="15" fill="rgb(208,4,7)" fg:x="864" fg:w="1"/><text x="68.7670%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.5170%" y="501" width="0.0793%" height="15" fill="rgb(240,17,39)" fg:x="864" fg:w="1"/><text x="68.7670%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.5964%" y="517" width="0.0793%" height="15" fill="rgb(207,170,3)" fg:x="865" fg:w="1"/><text x="68.8464%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.5964%" y="501" width="0.0793%" height="15" fill="rgb(236,100,52)" fg:x="865" fg:w="1"/><text x="68.8464%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.5964%" y="485" width="0.0793%" height="15" fill="rgb(246,78,51)" fg:x="865" fg:w="1"/><text x="68.8464%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="68.5170%" y="549" width="0.2379%" height="15" fill="rgb(211,17,15)" fg:x="864" fg:w="3"/><text x="68.7670%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="68.5170%" y="533" width="0.2379%" height="15" fill="rgb(209,59,46)" fg:x="864" fg:w="3"/><text x="68.7670%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.6757%" y="517" width="0.0793%" height="15" fill="rgb(210,92,25)" fg:x="866" fg:w="1"/><text x="68.9257%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="68.4377%" y="581" width="0.3965%" height="15" fill="rgb(238,174,52)" fg:x="863" fg:w="5"/><text x="68.6877%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="68.4377%" y="565" width="0.3965%" height="15" fill="rgb(230,73,7)" fg:x="863" fg:w="5"/><text x="68.6877%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.7550%" y="549" width="0.0793%" height="15" fill="rgb(243,124,40)" fg:x="867" fg:w="1"/><text x="69.0050%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="68.7550%" y="533" width="0.0793%" height="15" fill="rgb(244,170,11)" fg:x="867" fg:w="1"/><text x="69.0050%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.7550%" y="517" width="0.0793%" height="15" fill="rgb(207,114,54)" fg:x="867" fg:w="1"/><text x="69.0050%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.8343%" y="533" width="0.0793%" height="15" fill="rgb(205,42,20)" fg:x="868" fg:w="1"/><text x="69.0843%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.8343%" y="517" width="0.0793%" height="15" fill="rgb(230,30,28)" fg:x="868" fg:w="1"/><text x="69.0843%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="68.8343%" y="581" width="0.1586%" height="15" fill="rgb(205,73,54)" fg:x="868" fg:w="2"/><text x="69.0843%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="68.8343%" y="565" width="0.1586%" height="15" fill="rgb(254,227,23)" fg:x="868" fg:w="2"/><text x="69.0843%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="68.8343%" y="549" width="0.1586%" height="15" fill="rgb(228,202,34)" fg:x="868" fg:w="2"/><text x="69.0843%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.9136%" y="533" width="0.0793%" height="15" fill="rgb(222,225,37)" fg:x="869" fg:w="1"/><text x="69.1636%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.9136%" y="517" width="0.0793%" height="15" fill="rgb(221,14,54)" fg:x="869" fg:w="1"/><text x="69.1636%" y="527.50"></text></g><g><title>engine::session::Session::flush (8 samples, 0.63%)</title><rect x="68.4377%" y="645" width="0.6344%" height="15" fill="rgb(254,102,2)" fg:x="863" fg:w="8"/><text x="68.6877%" y="655.50"></text></g><g><title>engine::session::Session::save_entity_changes (8 samples, 0.63%)</title><rect x="68.4377%" y="629" width="0.6344%" height="15" fill="rgb(232,104,17)" fg:x="863" fg:w="8"/><text x="68.6877%" y="639.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (8 samples, 0.63%)</title><rect x="68.4377%" y="613" width="0.6344%" height="15" fill="rgb(250,220,14)" fg:x="863" fg:w="8"/><text x="68.6877%" y="623.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (8 samples, 0.63%)</title><rect x="68.4377%" y="597" width="0.6344%" height="15" fill="rgb(241,158,9)" fg:x="863" fg:w="8"/><text x="68.6877%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (1 samples, 0.08%)</title><rect x="68.9929%" y="581" width="0.0793%" height="15" fill="rgb(246,9,43)" fg:x="870" fg:w="1"/><text x="69.2429%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="68.9929%" y="565" width="0.0793%" height="15" fill="rgb(206,73,33)" fg:x="870" fg:w="1"/><text x="69.2429%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.9929%" y="549" width="0.0793%" height="15" fill="rgb(222,79,8)" fg:x="870" fg:w="1"/><text x="69.2429%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="68.9929%" y="533" width="0.0793%" height="15" fill="rgb(234,8,54)" fg:x="870" fg:w="1"/><text x="69.2429%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="68.9929%" y="517" width="0.0793%" height="15" fill="rgb(209,134,38)" fg:x="870" fg:w="1"/><text x="69.2429%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.9929%" y="501" width="0.0793%" height="15" fill="rgb(230,127,29)" fg:x="870" fg:w="1"/><text x="69.2429%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.9929%" y="485" width="0.0793%" height="15" fill="rgb(242,44,41)" fg:x="870" fg:w="1"/><text x="69.2429%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.9929%" y="469" width="0.0793%" height="15" fill="rgb(222,56,43)" fg:x="870" fg:w="1"/><text x="69.2429%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.9929%" y="453" width="0.0793%" height="15" fill="rgb(238,39,47)" fg:x="870" fg:w="1"/><text x="69.2429%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.9929%" y="437" width="0.0793%" height="15" fill="rgb(226,79,43)" fg:x="870" fg:w="1"/><text x="69.2429%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.9929%" y="421" width="0.0793%" height="15" fill="rgb(242,105,53)" fg:x="870" fg:w="1"/><text x="69.2429%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.1515%" y="565" width="0.0793%" height="15" fill="rgb(251,132,46)" fg:x="872" fg:w="1"/><text x="69.4015%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.1515%" y="549" width="0.0793%" height="15" fill="rgb(231,77,14)" fg:x="872" fg:w="1"/><text x="69.4015%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.1515%" y="533" width="0.0793%" height="15" fill="rgb(240,135,9)" fg:x="872" fg:w="1"/><text x="69.4015%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.1515%" y="517" width="0.0793%" height="15" fill="rgb(248,109,14)" fg:x="872" fg:w="1"/><text x="69.4015%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1515%" y="501" width="0.0793%" height="15" fill="rgb(227,146,52)" fg:x="872" fg:w="1"/><text x="69.4015%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.1515%" y="485" width="0.0793%" height="15" fill="rgb(232,54,3)" fg:x="872" fg:w="1"/><text x="69.4015%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1515%" y="469" width="0.0793%" height="15" fill="rgb(229,201,43)" fg:x="872" fg:w="1"/><text x="69.4015%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.1515%" y="453" width="0.0793%" height="15" fill="rgb(252,161,33)" fg:x="872" fg:w="1"/><text x="69.4015%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1515%" y="437" width="0.0793%" height="15" fill="rgb(226,146,40)" fg:x="872" fg:w="1"/><text x="69.4015%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.1515%" y="421" width="0.0793%" height="15" fill="rgb(219,47,25)" fg:x="872" fg:w="1"/><text x="69.4015%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1515%" y="405" width="0.0793%" height="15" fill="rgb(250,135,13)" fg:x="872" fg:w="1"/><text x="69.4015%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.1515%" y="389" width="0.0793%" height="15" fill="rgb(219,229,18)" fg:x="872" fg:w="1"/><text x="69.4015%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1515%" y="373" width="0.0793%" height="15" fill="rgb(217,152,27)" fg:x="872" fg:w="1"/><text x="69.4015%" y="383.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="69.0722%" y="645" width="0.2379%" height="15" fill="rgb(225,71,47)" fg:x="871" fg:w="3"/><text x="69.3222%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="69.0722%" y="629" width="0.2379%" height="15" fill="rgb(220,139,14)" fg:x="871" fg:w="3"/><text x="69.3222%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="69.1515%" y="613" width="0.1586%" height="15" fill="rgb(247,54,32)" fg:x="872" fg:w="2"/><text x="69.4015%" y="623.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="69.1515%" y="597" width="0.1586%" height="15" fill="rgb(252,131,39)" fg:x="872" fg:w="2"/><text x="69.4015%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="69.1515%" y="581" width="0.1586%" height="15" fill="rgb(210,108,39)" fg:x="872" fg:w="2"/><text x="69.4015%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="69.2308%" y="565" width="0.0793%" height="15" fill="rgb(205,23,29)" fg:x="873" fg:w="1"/><text x="69.4808%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.2308%" y="549" width="0.0793%" height="15" fill="rgb(246,139,46)" fg:x="873" fg:w="1"/><text x="69.4808%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.2308%" y="533" width="0.0793%" height="15" fill="rgb(250,81,26)" fg:x="873" fg:w="1"/><text x="69.4808%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="69.2308%" y="517" width="0.0793%" height="15" fill="rgb(214,104,7)" fg:x="873" fg:w="1"/><text x="69.4808%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="69.2308%" y="501" width="0.0793%" height="15" fill="rgb(233,189,8)" fg:x="873" fg:w="1"/><text x="69.4808%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.2308%" y="485" width="0.0793%" height="15" fill="rgb(228,141,17)" fg:x="873" fg:w="1"/><text x="69.4808%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.2308%" y="469" width="0.0793%" height="15" fill="rgb(247,157,1)" fg:x="873" fg:w="1"/><text x="69.4808%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.2308%" y="453" width="0.0793%" height="15" fill="rgb(249,225,5)" fg:x="873" fg:w="1"/><text x="69.4808%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.2308%" y="437" width="0.0793%" height="15" fill="rgb(242,55,13)" fg:x="873" fg:w="1"/><text x="69.4808%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="69.3101%" y="565" width="0.0793%" height="15" fill="rgb(230,49,50)" fg:x="874" fg:w="1"/><text x="69.5601%" y="575.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="69.3101%" y="549" width="0.0793%" height="15" fill="rgb(241,111,38)" fg:x="874" fg:w="1"/><text x="69.5601%" y="559.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="69.3101%" y="533" width="0.0793%" height="15" fill="rgb(252,155,4)" fg:x="874" fg:w="1"/><text x="69.5601%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="69.3101%" y="517" width="0.0793%" height="15" fill="rgb(212,69,32)" fg:x="874" fg:w="1"/><text x="69.5601%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.3101%" y="501" width="0.0793%" height="15" fill="rgb(243,107,47)" fg:x="874" fg:w="1"/><text x="69.5601%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.3101%" y="485" width="0.0793%" height="15" fill="rgb(247,130,12)" fg:x="874" fg:w="1"/><text x="69.5601%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.3101%" y="469" width="0.0793%" height="15" fill="rgb(233,74,16)" fg:x="874" fg:w="1"/><text x="69.5601%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3101%" y="453" width="0.0793%" height="15" fill="rgb(208,58,18)" fg:x="874" fg:w="1"/><text x="69.5601%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.3101%" y="437" width="0.0793%" height="15" fill="rgb(242,225,1)" fg:x="874" fg:w="1"/><text x="69.5601%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3101%" y="421" width="0.0793%" height="15" fill="rgb(249,39,40)" fg:x="874" fg:w="1"/><text x="69.5601%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.3101%" y="405" width="0.0793%" height="15" fill="rgb(207,72,44)" fg:x="874" fg:w="1"/><text x="69.5601%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3101%" y="389" width="0.0793%" height="15" fill="rgb(215,193,12)" fg:x="874" fg:w="1"/><text x="69.5601%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.3101%" y="373" width="0.0793%" height="15" fill="rgb(248,41,39)" fg:x="874" fg:w="1"/><text x="69.5601%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.3101%" y="357" width="0.0793%" height="15" fill="rgb(253,85,4)" fg:x="874" fg:w="1"/><text x="69.5601%" y="367.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="69.3101%" y="629" width="0.1586%" height="15" fill="rgb(243,70,31)" fg:x="874" fg:w="2"/><text x="69.5601%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="69.3101%" y="613" width="0.1586%" height="15" fill="rgb(253,195,26)" fg:x="874" fg:w="2"/><text x="69.5601%" y="623.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="69.3101%" y="597" width="0.1586%" height="15" fill="rgb(243,42,11)" fg:x="874" fg:w="2"/><text x="69.5601%" y="607.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="69.3101%" y="581" width="0.1586%" height="15" fill="rgb(239,66,17)" fg:x="874" fg:w="2"/><text x="69.5601%" y="591.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="69.3894%" y="565" width="0.0793%" height="15" fill="rgb(217,132,21)" fg:x="875" fg:w="1"/><text x="69.6394%" y="575.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="69.3894%" y="549" width="0.0793%" height="15" fill="rgb(252,202,21)" fg:x="875" fg:w="1"/><text x="69.6394%" y="559.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="69.3894%" y="533" width="0.0793%" height="15" fill="rgb(233,98,36)" fg:x="875" fg:w="1"/><text x="69.6394%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="69.3894%" y="517" width="0.0793%" height="15" fill="rgb(216,153,54)" fg:x="875" fg:w="1"/><text x="69.6394%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.3894%" y="501" width="0.0793%" height="15" fill="rgb(250,99,7)" fg:x="875" fg:w="1"/><text x="69.6394%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.3894%" y="485" width="0.0793%" height="15" fill="rgb(207,56,50)" fg:x="875" fg:w="1"/><text x="69.6394%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.3894%" y="469" width="0.0793%" height="15" fill="rgb(244,61,34)" fg:x="875" fg:w="1"/><text x="69.6394%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.3894%" y="453" width="0.0793%" height="15" fill="rgb(241,50,38)" fg:x="875" fg:w="1"/><text x="69.6394%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.3894%" y="437" width="0.0793%" height="15" fill="rgb(212,166,30)" fg:x="875" fg:w="1"/><text x="69.6394%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.3894%" y="421" width="0.0793%" height="15" fill="rgb(249,127,32)" fg:x="875" fg:w="1"/><text x="69.6394%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.3894%" y="405" width="0.0793%" height="15" fill="rgb(209,103,0)" fg:x="875" fg:w="1"/><text x="69.6394%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.3894%" y="389" width="0.0793%" height="15" fill="rgb(238,209,51)" fg:x="875" fg:w="1"/><text x="69.6394%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.3894%" y="373" width="0.0793%" height="15" fill="rgb(237,56,23)" fg:x="875" fg:w="1"/><text x="69.6394%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.3894%" y="357" width="0.0793%" height="15" fill="rgb(215,153,46)" fg:x="875" fg:w="1"/><text x="69.6394%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.3894%" y="341" width="0.0793%" height="15" fill="rgb(224,49,31)" fg:x="875" fg:w="1"/><text x="69.6394%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.3894%" y="325" width="0.0793%" height="15" fill="rgb(250,18,42)" fg:x="875" fg:w="1"/><text x="69.6394%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.3894%" y="309" width="0.0793%" height="15" fill="rgb(215,176,39)" fg:x="875" fg:w="1"/><text x="69.6394%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.3894%" y="293" width="0.0793%" height="15" fill="rgb(223,77,29)" fg:x="875" fg:w="1"/><text x="69.6394%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.3894%" y="277" width="0.0793%" height="15" fill="rgb(234,94,52)" fg:x="875" fg:w="1"/><text x="69.6394%" y="287.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="69.4687%" y="597" width="0.0793%" height="15" fill="rgb(220,154,50)" fg:x="876" fg:w="1"/><text x="69.7187%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.4687%" y="581" width="0.0793%" height="15" fill="rgb(212,11,10)" fg:x="876" fg:w="1"/><text x="69.7187%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.4687%" y="565" width="0.0793%" height="15" fill="rgb(205,166,19)" fg:x="876" fg:w="1"/><text x="69.7187%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="69.4687%" y="549" width="0.0793%" height="15" fill="rgb(244,198,16)" fg:x="876" fg:w="1"/><text x="69.7187%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.4687%" y="533" width="0.0793%" height="15" fill="rgb(219,69,12)" fg:x="876" fg:w="1"/><text x="69.7187%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.5480%" y="597" width="0.0793%" height="15" fill="rgb(245,30,7)" fg:x="877" fg:w="1"/><text x="69.7980%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="69.5480%" y="581" width="0.0793%" height="15" fill="rgb(218,221,48)" fg:x="877" fg:w="1"/><text x="69.7980%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.5480%" y="565" width="0.0793%" height="15" fill="rgb(216,66,15)" fg:x="877" fg:w="1"/><text x="69.7980%" y="575.50"></text></g><g><title>engine::identifiers::model::set_gid (1 samples, 0.08%)</title><rect x="69.6273%" y="597" width="0.0793%" height="15" fill="rgb(226,122,50)" fg:x="878" fg:w="1"/><text x="69.8773%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="69.6273%" y="581" width="0.0793%" height="15" fill="rgb(239,156,16)" fg:x="878" fg:w="1"/><text x="69.8773%" y="591.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="69.6273%" y="565" width="0.0793%" height="15" fill="rgb(224,27,38)" fg:x="878" fg:w="1"/><text x="69.8773%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.6273%" y="549" width="0.0793%" height="15" fill="rgb(224,39,27)" fg:x="878" fg:w="1"/><text x="69.8773%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="69.7066%" y="549" width="0.0793%" height="15" fill="rgb(215,92,29)" fg:x="879" fg:w="1"/><text x="69.9566%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="69.7859%" y="549" width="0.1586%" height="15" fill="rgb(207,159,16)" fg:x="880" fg:w="2"/><text x="70.0359%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="69.7859%" y="533" width="0.1586%" height="15" fill="rgb(238,163,47)" fg:x="880" fg:w="2"/><text x="70.0359%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.8652%" y="517" width="0.0793%" height="15" fill="rgb(219,91,49)" fg:x="881" fg:w="1"/><text x="70.1152%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="69.7066%" y="565" width="0.3172%" height="15" fill="rgb(227,167,31)" fg:x="879" fg:w="4"/><text x="69.9566%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.9445%" y="549" width="0.0793%" height="15" fill="rgb(234,80,54)" fg:x="882" fg:w="1"/><text x="70.1945%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.9445%" y="533" width="0.0793%" height="15" fill="rgb(212,114,2)" fg:x="882" fg:w="1"/><text x="70.1945%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="69.9445%" y="517" width="0.0793%" height="15" fill="rgb(234,50,24)" fg:x="882" fg:w="1"/><text x="70.1945%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.0238%" y="485" width="0.0793%" height="15" fill="rgb(221,68,8)" fg:x="883" fg:w="1"/><text x="70.2738%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.0238%" y="565" width="0.1586%" height="15" fill="rgb(254,180,31)" fg:x="883" fg:w="2"/><text x="70.2738%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="70.0238%" y="549" width="0.1586%" height="15" fill="rgb(247,130,50)" fg:x="883" fg:w="2"/><text x="70.2738%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.0238%" y="533" width="0.1586%" height="15" fill="rgb(211,109,4)" fg:x="883" fg:w="2"/><text x="70.2738%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.0238%" y="517" width="0.1586%" height="15" fill="rgb(238,50,21)" fg:x="883" fg:w="2"/><text x="70.2738%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.0238%" y="501" width="0.1586%" height="15" fill="rgb(225,57,45)" fg:x="883" fg:w="2"/><text x="70.2738%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.1031%" y="485" width="0.0793%" height="15" fill="rgb(209,196,50)" fg:x="884" fg:w="1"/><text x="70.3531%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.1031%" y="469" width="0.0793%" height="15" fill="rgb(242,140,13)" fg:x="884" fg:w="1"/><text x="70.3531%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.1031%" y="453" width="0.0793%" height="15" fill="rgb(217,111,7)" fg:x="884" fg:w="1"/><text x="70.3531%" y="463.50"></text></g><g><title>engine::session::Session::flush (11 samples, 0.87%)</title><rect x="69.4687%" y="629" width="0.8723%" height="15" fill="rgb(253,193,51)" fg:x="876" fg:w="11"/><text x="69.7187%" y="639.50"></text></g><g><title>engine::session::Session::save_entity_changes (11 samples, 0.87%)</title><rect x="69.4687%" y="613" width="0.8723%" height="15" fill="rgb(252,70,29)" fg:x="876" fg:w="11"/><text x="69.7187%" y="623.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (8 samples, 0.63%)</title><rect x="69.7066%" y="597" width="0.6344%" height="15" fill="rgb(232,127,12)" fg:x="879" fg:w="8"/><text x="69.9566%" y="607.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (8 samples, 0.63%)</title><rect x="69.7066%" y="581" width="0.6344%" height="15" fill="rgb(211,180,21)" fg:x="879" fg:w="8"/><text x="69.9566%" y="591.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="70.1824%" y="565" width="0.1586%" height="15" fill="rgb(229,72,13)" fg:x="885" fg:w="2"/><text x="70.4324%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="70.1824%" y="549" width="0.1586%" height="15" fill="rgb(240,211,49)" fg:x="885" fg:w="2"/><text x="70.4324%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.2617%" y="533" width="0.0793%" height="15" fill="rgb(219,149,40)" fg:x="886" fg:w="1"/><text x="70.5117%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.2617%" y="517" width="0.0793%" height="15" fill="rgb(210,127,46)" fg:x="886" fg:w="1"/><text x="70.5117%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.2617%" y="501" width="0.0793%" height="15" fill="rgb(220,106,7)" fg:x="886" fg:w="1"/><text x="70.5117%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="70.2617%" y="485" width="0.0793%" height="15" fill="rgb(249,31,22)" fg:x="886" fg:w="1"/><text x="70.5117%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="70.3410%" y="613" width="0.0793%" height="15" fill="rgb(253,1,49)" fg:x="887" fg:w="1"/><text x="70.5910%" y="623.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="70.3410%" y="597" width="0.0793%" height="15" fill="rgb(227,144,33)" fg:x="887" fg:w="1"/><text x="70.5910%" y="607.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="70.3410%" y="581" width="0.0793%" height="15" fill="rgb(249,163,44)" fg:x="887" fg:w="1"/><text x="70.5910%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.3410%" y="565" width="0.0793%" height="15" fill="rgb(234,15,39)" fg:x="887" fg:w="1"/><text x="70.5910%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.3410%" y="549" width="0.0793%" height="15" fill="rgb(207,66,16)" fg:x="887" fg:w="1"/><text x="70.5910%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.4203%" y="517" width="0.0793%" height="15" fill="rgb(233,112,24)" fg:x="888" fg:w="1"/><text x="70.6703%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="70.4203%" y="501" width="0.0793%" height="15" fill="rgb(230,90,22)" fg:x="888" fg:w="1"/><text x="70.6703%" y="511.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="70.4203%" y="597" width="0.1586%" height="15" fill="rgb(229,61,13)" fg:x="888" fg:w="2"/><text x="70.6703%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="70.4203%" y="581" width="0.1586%" height="15" fill="rgb(225,57,24)" fg:x="888" fg:w="2"/><text x="70.6703%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="70.4203%" y="565" width="0.1586%" height="15" fill="rgb(208,169,48)" fg:x="888" fg:w="2"/><text x="70.6703%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="70.4203%" y="549" width="0.1586%" height="15" fill="rgb(244,218,51)" fg:x="888" fg:w="2"/><text x="70.6703%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="70.4203%" y="533" width="0.1586%" height="15" fill="rgb(214,148,10)" fg:x="888" fg:w="2"/><text x="70.6703%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.4996%" y="517" width="0.0793%" height="15" fill="rgb(225,174,27)" fg:x="889" fg:w="1"/><text x="70.7496%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.4996%" y="501" width="0.0793%" height="15" fill="rgb(230,96,26)" fg:x="889" fg:w="1"/><text x="70.7496%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.4996%" y="485" width="0.0793%" height="15" fill="rgb(232,10,30)" fg:x="889" fg:w="1"/><text x="70.7496%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.4996%" y="469" width="0.0793%" height="15" fill="rgb(222,8,50)" fg:x="889" fg:w="1"/><text x="70.7496%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.4996%" y="453" width="0.0793%" height="15" fill="rgb(213,81,27)" fg:x="889" fg:w="1"/><text x="70.7496%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.4996%" y="437" width="0.0793%" height="15" fill="rgb(245,50,10)" fg:x="889" fg:w="1"/><text x="70.7496%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.4996%" y="421" width="0.0793%" height="15" fill="rgb(216,100,18)" fg:x="889" fg:w="1"/><text x="70.7496%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.4996%" y="405" width="0.0793%" height="15" fill="rgb(236,147,54)" fg:x="889" fg:w="1"/><text x="70.7496%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.4996%" y="389" width="0.0793%" height="15" fill="rgb(205,143,26)" fg:x="889" fg:w="1"/><text x="70.7496%" y="399.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="70.3410%" y="629" width="0.3172%" height="15" fill="rgb(236,26,9)" fg:x="887" fg:w="4"/><text x="70.5910%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="70.4203%" y="613" width="0.2379%" height="15" fill="rgb(221,165,53)" fg:x="888" fg:w="3"/><text x="70.6703%" y="623.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="70.5789%" y="597" width="0.0793%" height="15" fill="rgb(214,110,17)" fg:x="890" fg:w="1"/><text x="70.8289%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="70.5789%" y="581" width="0.0793%" height="15" fill="rgb(237,197,12)" fg:x="890" fg:w="1"/><text x="70.8289%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="70.5789%" y="565" width="0.0793%" height="15" fill="rgb(205,84,17)" fg:x="890" fg:w="1"/><text x="70.8289%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.5789%" y="549" width="0.0793%" height="15" fill="rgb(237,18,45)" fg:x="890" fg:w="1"/><text x="70.8289%" y="559.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="70.5789%" y="533" width="0.0793%" height="15" fill="rgb(221,87,14)" fg:x="890" fg:w="1"/><text x="70.8289%" y="543.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="70.6582%" y="629" width="0.0793%" height="15" fill="rgb(238,186,15)" fg:x="891" fg:w="1"/><text x="70.9082%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="70.6582%" y="613" width="0.0793%" height="15" fill="rgb(208,115,11)" fg:x="891" fg:w="1"/><text x="70.9082%" y="623.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="70.6582%" y="597" width="0.0793%" height="15" fill="rgb(254,175,0)" fg:x="891" fg:w="1"/><text x="70.9082%" y="607.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="70.6582%" y="581" width="0.0793%" height="15" fill="rgb(227,24,42)" fg:x="891" fg:w="1"/><text x="70.9082%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.6582%" y="565" width="0.0793%" height="15" fill="rgb(223,211,37)" fg:x="891" fg:w="1"/><text x="70.9082%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="70.7375%" y="613" width="0.0793%" height="15" fill="rgb(235,49,27)" fg:x="892" fg:w="1"/><text x="70.9875%" y="623.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="70.7375%" y="597" width="0.0793%" height="15" fill="rgb(254,97,51)" fg:x="892" fg:w="1"/><text x="70.9875%" y="607.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="70.7375%" y="581" width="0.0793%" height="15" fill="rgb(249,51,40)" fg:x="892" fg:w="1"/><text x="70.9875%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.7375%" y="565" width="0.0793%" height="15" fill="rgb(210,128,45)" fg:x="892" fg:w="1"/><text x="70.9875%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.7375%" y="549" width="0.0793%" height="15" fill="rgb(224,137,50)" fg:x="892" fg:w="1"/><text x="70.9875%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.7375%" y="533" width="0.0793%" height="15" fill="rgb(242,15,9)" fg:x="892" fg:w="1"/><text x="70.9875%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.7375%" y="517" width="0.0793%" height="15" fill="rgb(233,187,41)" fg:x="892" fg:w="1"/><text x="70.9875%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.7375%" y="501" width="0.0793%" height="15" fill="rgb(227,2,29)" fg:x="892" fg:w="1"/><text x="70.9875%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.7375%" y="485" width="0.0793%" height="15" fill="rgb(222,70,3)" fg:x="892" fg:w="1"/><text x="70.9875%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.7375%" y="469" width="0.0793%" height="15" fill="rgb(213,11,42)" fg:x="892" fg:w="1"/><text x="70.9875%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.7375%" y="453" width="0.0793%" height="15" fill="rgb(225,150,9)" fg:x="892" fg:w="1"/><text x="70.9875%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.7375%" y="437" width="0.0793%" height="15" fill="rgb(230,162,45)" fg:x="892" fg:w="1"/><text x="70.9875%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.7375%" y="421" width="0.0793%" height="15" fill="rgb(222,14,52)" fg:x="892" fg:w="1"/><text x="70.9875%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.7375%" y="405" width="0.0793%" height="15" fill="rgb(254,198,14)" fg:x="892" fg:w="1"/><text x="70.9875%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.7375%" y="389" width="0.0793%" height="15" fill="rgb(220,217,30)" fg:x="892" fg:w="1"/><text x="70.9875%" y="399.50"></text></g><g><title>plugins_core::build::Build::occupying (2 samples, 0.16%)</title><rect x="70.7375%" y="629" width="0.1586%" height="15" fill="rgb(215,146,41)" fg:x="892" fg:w="2"/><text x="70.9875%" y="639.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="70.8168%" y="613" width="0.0793%" height="15" fill="rgb(217,27,36)" fg:x="893" fg:w="1"/><text x="71.0668%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;plugins_core::moving::model::Occupyable&gt;&gt; (1 samples, 0.08%)</title><rect x="70.8168%" y="597" width="0.0793%" height="15" fill="rgb(219,218,39)" fg:x="893" fg:w="1"/><text x="71.0668%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="70.8168%" y="581" width="0.0793%" height="15" fill="rgb(219,4,42)" fg:x="893" fg:w="1"/><text x="71.0668%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.8168%" y="565" width="0.0793%" height="15" fill="rgb(249,119,36)" fg:x="893" fg:w="1"/><text x="71.0668%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (21 samples, 1.67%)</title><rect x="69.3101%" y="645" width="1.6653%" height="15" fill="rgb(209,23,33)" fg:x="874" fg:w="21"/><text x="69.5601%" y="655.50"></text></g><g><title>plugins_core::build::Build::with_username (1 samples, 0.08%)</title><rect x="70.8961%" y="629" width="0.0793%" height="15" fill="rgb(211,10,0)" fg:x="894" fg:w="1"/><text x="71.1461%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="70.8961%" y="613" width="0.0793%" height="15" fill="rgb(208,99,37)" fg:x="894" fg:w="1"/><text x="71.1461%" y="623.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="70.8961%" y="597" width="0.0793%" height="15" fill="rgb(213,132,31)" fg:x="894" fg:w="1"/><text x="71.1461%" y="607.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="70.8961%" y="581" width="0.0793%" height="15" fill="rgb(243,129,40)" fg:x="894" fg:w="1"/><text x="71.1461%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.8961%" y="565" width="0.0793%" height="15" fill="rgb(210,66,33)" fg:x="894" fg:w="1"/><text x="71.1461%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.8961%" y="549" width="0.0793%" height="15" fill="rgb(209,189,4)" fg:x="894" fg:w="1"/><text x="71.1461%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.8961%" y="533" width="0.0793%" height="15" fill="rgb(214,107,37)" fg:x="894" fg:w="1"/><text x="71.1461%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.8961%" y="517" width="0.0793%" height="15" fill="rgb(245,88,54)" fg:x="894" fg:w="1"/><text x="71.1461%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8961%" y="501" width="0.0793%" height="15" fill="rgb(205,146,20)" fg:x="894" fg:w="1"/><text x="71.1461%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.8961%" y="485" width="0.0793%" height="15" fill="rgb(220,161,25)" fg:x="894" fg:w="1"/><text x="71.1461%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8961%" y="469" width="0.0793%" height="15" fill="rgb(215,152,15)" fg:x="894" fg:w="1"/><text x="71.1461%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.8961%" y="453" width="0.0793%" height="15" fill="rgb(233,192,44)" fg:x="894" fg:w="1"/><text x="71.1461%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8961%" y="437" width="0.0793%" height="15" fill="rgb(240,170,46)" fg:x="894" fg:w="1"/><text x="71.1461%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.8961%" y="421" width="0.0793%" height="15" fill="rgb(207,104,33)" fg:x="894" fg:w="1"/><text x="71.1461%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.8961%" y="405" width="0.0793%" height="15" fill="rgb(219,21,39)" fg:x="894" fg:w="1"/><text x="71.1461%" y="415.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (33 samples, 2.62%)</title><rect x="68.4377%" y="661" width="2.6170%" height="15" fill="rgb(214,133,29)" fg:x="863" fg:w="33"/><text x="68.6877%" y="671.50">&lt;t..</text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="70.9754%" y="645" width="0.0793%" height="15" fill="rgb(226,93,6)" fg:x="895" fg:w="1"/><text x="71.2254%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="70.9754%" y="629" width="0.0793%" height="15" fill="rgb(252,222,34)" fg:x="895" fg:w="1"/><text x="71.2254%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="70.9754%" y="613" width="0.0793%" height="15" fill="rgb(252,92,48)" fg:x="895" fg:w="1"/><text x="71.2254%" y="623.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="70.9754%" y="597" width="0.0793%" height="15" fill="rgb(245,223,24)" fg:x="895" fg:w="1"/><text x="71.2254%" y="607.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="70.9754%" y="581" width="0.0793%" height="15" fill="rgb(205,176,3)" fg:x="895" fg:w="1"/><text x="71.2254%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="70.9754%" y="565" width="0.0793%" height="15" fill="rgb(235,151,15)" fg:x="895" fg:w="1"/><text x="71.2254%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.9754%" y="549" width="0.0793%" height="15" fill="rgb(237,209,11)" fg:x="895" fg:w="1"/><text x="71.2254%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.9754%" y="533" width="0.0793%" height="15" fill="rgb(243,227,24)" fg:x="895" fg:w="1"/><text x="71.2254%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.9754%" y="517" width="0.0793%" height="15" fill="rgb(239,193,16)" fg:x="895" fg:w="1"/><text x="71.2254%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9754%" y="501" width="0.0793%" height="15" fill="rgb(231,27,9)" fg:x="895" fg:w="1"/><text x="71.2254%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.9754%" y="485" width="0.0793%" height="15" fill="rgb(219,169,10)" fg:x="895" fg:w="1"/><text x="71.2254%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9754%" y="469" width="0.0793%" height="15" fill="rgb(244,229,43)" fg:x="895" fg:w="1"/><text x="71.2254%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.9754%" y="453" width="0.0793%" height="15" fill="rgb(254,38,20)" fg:x="895" fg:w="1"/><text x="71.2254%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9754%" y="437" width="0.0793%" height="15" fill="rgb(250,47,30)" fg:x="895" fg:w="1"/><text x="71.2254%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.9754%" y="421" width="0.0793%" height="15" fill="rgb(224,124,36)" fg:x="895" fg:w="1"/><text x="71.2254%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.9754%" y="405" width="0.0793%" height="15" fill="rgb(246,68,51)" fg:x="895" fg:w="1"/><text x="71.2254%" y="415.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="71.0547%" y="645" width="0.0793%" height="15" fill="rgb(253,43,49)" fg:x="896" fg:w="1"/><text x="71.3047%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="71.0547%" y="629" width="0.0793%" height="15" fill="rgb(219,54,36)" fg:x="896" fg:w="1"/><text x="71.3047%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="71.0547%" y="613" width="0.0793%" height="15" fill="rgb(227,133,34)" fg:x="896" fg:w="1"/><text x="71.3047%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="71.0547%" y="597" width="0.0793%" height="15" fill="rgb(247,227,15)" fg:x="896" fg:w="1"/><text x="71.3047%" y="607.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="71.0547%" y="581" width="0.0793%" height="15" fill="rgb(229,96,14)" fg:x="896" fg:w="1"/><text x="71.3047%" y="591.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="71.0547%" y="565" width="0.0793%" height="15" fill="rgb(220,79,17)" fg:x="896" fg:w="1"/><text x="71.3047%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="71.0547%" y="549" width="0.0793%" height="15" fill="rgb(205,131,53)" fg:x="896" fg:w="1"/><text x="71.3047%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="71.0547%" y="533" width="0.0793%" height="15" fill="rgb(209,50,29)" fg:x="896" fg:w="1"/><text x="71.3047%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.1340%" y="629" width="0.0793%" height="15" fill="rgb(245,86,46)" fg:x="897" fg:w="1"/><text x="71.3840%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.2133%" y="565" width="0.0793%" height="15" fill="rgb(235,66,46)" fg:x="898" fg:w="1"/><text x="71.4633%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.2133%" y="549" width="0.0793%" height="15" fill="rgb(232,148,31)" fg:x="898" fg:w="1"/><text x="71.4633%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.2133%" y="533" width="0.0793%" height="15" fill="rgb(217,149,8)" fg:x="898" fg:w="1"/><text x="71.4633%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.2133%" y="517" width="0.0793%" height="15" fill="rgb(209,183,11)" fg:x="898" fg:w="1"/><text x="71.4633%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.2926%" y="533" width="0.0793%" height="15" fill="rgb(208,55,20)" fg:x="899" fg:w="1"/><text x="71.5426%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.2926%" y="517" width="0.0793%" height="15" fill="rgb(218,39,14)" fg:x="899" fg:w="1"/><text x="71.5426%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.2926%" y="501" width="0.0793%" height="15" fill="rgb(216,169,33)" fg:x="899" fg:w="1"/><text x="71.5426%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.3719%" y="517" width="0.0793%" height="15" fill="rgb(233,80,24)" fg:x="900" fg:w="1"/><text x="71.6219%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.3719%" y="501" width="0.0793%" height="15" fill="rgb(213,179,31)" fg:x="900" fg:w="1"/><text x="71.6219%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.3719%" y="485" width="0.0793%" height="15" fill="rgb(209,19,5)" fg:x="900" fg:w="1"/><text x="71.6219%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.4512%" y="501" width="0.0793%" height="15" fill="rgb(219,18,35)" fg:x="901" fg:w="1"/><text x="71.7012%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.4512%" y="485" width="0.0793%" height="15" fill="rgb(209,169,16)" fg:x="901" fg:w="1"/><text x="71.7012%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.4512%" y="469" width="0.0793%" height="15" fill="rgb(245,90,51)" fg:x="901" fg:w="1"/><text x="71.7012%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="71.2133%" y="597" width="0.3965%" height="15" fill="rgb(220,99,45)" fg:x="898" fg:w="5"/><text x="71.4633%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="71.2133%" y="581" width="0.3965%" height="15" fill="rgb(249,89,25)" fg:x="898" fg:w="5"/><text x="71.4633%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="71.2926%" y="565" width="0.3172%" height="15" fill="rgb(239,193,0)" fg:x="899" fg:w="4"/><text x="71.5426%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="71.2926%" y="549" width="0.3172%" height="15" fill="rgb(231,126,1)" fg:x="899" fg:w="4"/><text x="71.5426%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="71.3719%" y="533" width="0.2379%" height="15" fill="rgb(243,166,3)" fg:x="900" fg:w="3"/><text x="71.6219%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.4512%" y="517" width="0.1586%" height="15" fill="rgb(223,22,34)" fg:x="901" fg:w="2"/><text x="71.7012%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.5305%" y="501" width="0.0793%" height="15" fill="rgb(251,52,51)" fg:x="902" fg:w="1"/><text x="71.7805%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.5305%" y="485" width="0.0793%" height="15" fill="rgb(221,165,28)" fg:x="902" fg:w="1"/><text x="71.7805%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.6098%" y="597" width="0.0793%" height="15" fill="rgb(218,121,47)" fg:x="903" fg:w="1"/><text x="71.8598%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.6098%" y="581" width="0.0793%" height="15" fill="rgb(209,120,9)" fg:x="903" fg:w="1"/><text x="71.8598%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.6098%" y="565" width="0.0793%" height="15" fill="rgb(236,68,12)" fg:x="903" fg:w="1"/><text x="71.8598%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.6098%" y="549" width="0.0793%" height="15" fill="rgb(225,194,26)" fg:x="903" fg:w="1"/><text x="71.8598%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.6891%" y="533" width="0.0793%" height="15" fill="rgb(231,84,39)" fg:x="904" fg:w="1"/><text x="71.9391%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.6891%" y="517" width="0.0793%" height="15" fill="rgb(210,11,45)" fg:x="904" fg:w="1"/><text x="71.9391%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.7684%" y="517" width="0.0793%" height="15" fill="rgb(224,54,52)" fg:x="905" fg:w="1"/><text x="72.0184%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.7684%" y="501" width="0.0793%" height="15" fill="rgb(238,102,14)" fg:x="905" fg:w="1"/><text x="72.0184%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="71.8477%" y="485" width="0.0793%" height="15" fill="rgb(243,160,52)" fg:x="906" fg:w="1"/><text x="72.0977%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.8477%" y="469" width="0.0793%" height="15" fill="rgb(216,114,19)" fg:x="906" fg:w="1"/><text x="72.0977%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.8477%" y="453" width="0.0793%" height="15" fill="rgb(244,166,37)" fg:x="906" fg:w="1"/><text x="72.0977%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="71.6891%" y="565" width="0.3172%" height="15" fill="rgb(246,29,44)" fg:x="904" fg:w="4"/><text x="71.9391%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="71.6891%" y="549" width="0.3172%" height="15" fill="rgb(215,56,53)" fg:x="904" fg:w="4"/><text x="71.9391%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="71.7684%" y="533" width="0.2379%" height="15" fill="rgb(217,60,2)" fg:x="905" fg:w="3"/><text x="72.0184%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.8477%" y="517" width="0.1586%" height="15" fill="rgb(207,26,24)" fg:x="906" fg:w="2"/><text x="72.0977%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.8477%" y="501" width="0.1586%" height="15" fill="rgb(252,210,15)" fg:x="906" fg:w="2"/><text x="72.0977%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.9270%" y="485" width="0.0793%" height="15" fill="rgb(253,209,26)" fg:x="907" fg:w="1"/><text x="72.1770%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.9270%" y="469" width="0.0793%" height="15" fill="rgb(238,170,14)" fg:x="907" fg:w="1"/><text x="72.1770%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.9270%" y="453" width="0.0793%" height="15" fill="rgb(216,178,15)" fg:x="907" fg:w="1"/><text x="72.1770%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="72.0063%" y="501" width="0.0793%" height="15" fill="rgb(250,197,2)" fg:x="908" fg:w="1"/><text x="72.2563%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="72.0063%" y="485" width="0.0793%" height="15" fill="rgb(212,70,42)" fg:x="908" fg:w="1"/><text x="72.2563%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (7 samples, 0.56%)</title><rect x="71.6891%" y="581" width="0.5551%" height="15" fill="rgb(227,213,9)" fg:x="904" fg:w="7"/><text x="71.9391%" y="591.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="72.0063%" y="565" width="0.2379%" height="15" fill="rgb(245,99,25)" fg:x="908" fg:w="3"/><text x="72.2563%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="72.0063%" y="549" width="0.2379%" height="15" fill="rgb(250,82,29)" fg:x="908" fg:w="3"/><text x="72.2563%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="72.0063%" y="533" width="0.2379%" height="15" fill="rgb(241,226,54)" fg:x="908" fg:w="3"/><text x="72.2563%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="72.0063%" y="517" width="0.2379%" height="15" fill="rgb(221,99,41)" fg:x="908" fg:w="3"/><text x="72.2563%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="72.0856%" y="501" width="0.1586%" height="15" fill="rgb(213,90,21)" fg:x="909" fg:w="2"/><text x="72.3356%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="72.0856%" y="485" width="0.1586%" height="15" fill="rgb(205,208,24)" fg:x="909" fg:w="2"/><text x="72.3356%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="72.1649%" y="469" width="0.0793%" height="15" fill="rgb(246,31,12)" fg:x="910" fg:w="1"/><text x="72.4149%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.3236%" y="517" width="0.0793%" height="15" fill="rgb(213,154,6)" fg:x="912" fg:w="1"/><text x="72.5736%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="72.4029%" y="501" width="0.0793%" height="15" fill="rgb(222,163,29)" fg:x="913" fg:w="1"/><text x="72.6529%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.4029%" y="485" width="0.0793%" height="15" fill="rgb(227,201,8)" fg:x="913" fg:w="1"/><text x="72.6529%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="72.2443%" y="581" width="0.4758%" height="15" fill="rgb(233,9,32)" fg:x="911" fg:w="6"/><text x="72.4943%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="72.2443%" y="565" width="0.4758%" height="15" fill="rgb(217,54,24)" fg:x="911" fg:w="6"/><text x="72.4943%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="72.2443%" y="549" width="0.4758%" height="15" fill="rgb(235,192,0)" fg:x="911" fg:w="6"/><text x="72.4943%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="72.3236%" y="533" width="0.3965%" height="15" fill="rgb(235,45,9)" fg:x="912" fg:w="5"/><text x="72.5736%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="72.4029%" y="517" width="0.3172%" height="15" fill="rgb(246,42,40)" fg:x="913" fg:w="4"/><text x="72.6529%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="72.4822%" y="501" width="0.2379%" height="15" fill="rgb(248,111,24)" fg:x="914" fg:w="3"/><text x="72.7322%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="72.4822%" y="485" width="0.2379%" height="15" fill="rgb(249,65,22)" fg:x="914" fg:w="3"/><text x="72.7322%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="72.4822%" y="469" width="0.2379%" height="15" fill="rgb(238,111,51)" fg:x="914" fg:w="3"/><text x="72.7322%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="72.4822%" y="453" width="0.2379%" height="15" fill="rgb(250,118,22)" fg:x="914" fg:w="3"/><text x="72.7322%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="72.5615%" y="437" width="0.1586%" height="15" fill="rgb(234,84,26)" fg:x="915" fg:w="2"/><text x="72.8115%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="72.6408%" y="421" width="0.0793%" height="15" fill="rgb(243,172,12)" fg:x="916" fg:w="1"/><text x="72.8908%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.7994%" y="389" width="0.0793%" height="15" fill="rgb(236,150,49)" fg:x="918" fg:w="1"/><text x="73.0494%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.7994%" y="421" width="0.1586%" height="15" fill="rgb(225,197,26)" fg:x="918" fg:w="2"/><text x="73.0494%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.7994%" y="405" width="0.1586%" height="15" fill="rgb(214,17,42)" fg:x="918" fg:w="2"/><text x="73.0494%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8787%" y="389" width="0.0793%" height="15" fill="rgb(224,165,40)" fg:x="919" fg:w="1"/><text x="73.1287%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8787%" y="373" width="0.0793%" height="15" fill="rgb(246,100,4)" fg:x="919" fg:w="1"/><text x="73.1287%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.8787%" y="357" width="0.0793%" height="15" fill="rgb(222,103,0)" fg:x="919" fg:w="1"/><text x="73.1287%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="72.7994%" y="485" width="0.2379%" height="15" fill="rgb(227,189,26)" fg:x="918" fg:w="3"/><text x="73.0494%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.7994%" y="469" width="0.2379%" height="15" fill="rgb(214,202,17)" fg:x="918" fg:w="3"/><text x="73.0494%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="72.7994%" y="453" width="0.2379%" height="15" fill="rgb(229,111,3)" fg:x="918" fg:w="3"/><text x="73.0494%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.7994%" y="437" width="0.2379%" height="15" fill="rgb(229,172,15)" fg:x="918" fg:w="3"/><text x="73.0494%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.9580%" y="421" width="0.0793%" height="15" fill="rgb(230,224,35)" fg:x="920" fg:w="1"/><text x="73.2080%" y="431.50"></text></g><g><title>engine::session::Session::close (26 samples, 2.06%)</title><rect x="71.0547%" y="661" width="2.0619%" height="15" fill="rgb(251,141,6)" fg:x="896" fg:w="26"/><text x="71.3047%" y="671.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (25 samples, 1.98%)</title><rect x="71.1340%" y="645" width="1.9826%" height="15" fill="rgb(225,208,6)" fg:x="897" fg:w="25"/><text x="71.3840%" y="655.50">e..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (24 samples, 1.90%)</title><rect x="71.2133%" y="629" width="1.9033%" height="15" fill="rgb(246,181,16)" fg:x="898" fg:w="24"/><text x="71.4633%" y="639.50">e..</text></g><g><title>engine::session::SavesEntities::check_for_changes (24 samples, 1.90%)</title><rect x="71.2133%" y="613" width="1.9033%" height="15" fill="rgb(227,129,36)" fg:x="898" fg:w="24"/><text x="71.4633%" y="623.50">e..</text></g><g><title>kernel::model::any_entity_changes (18 samples, 1.43%)</title><rect x="71.6891%" y="597" width="1.4274%" height="15" fill="rgb(248,117,24)" fg:x="904" fg:w="18"/><text x="71.9391%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="72.7201%" y="581" width="0.3965%" height="15" fill="rgb(214,185,35)" fg:x="917" fg:w="5"/><text x="72.9701%" y="591.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="72.7201%" y="565" width="0.3965%" height="15" fill="rgb(236,150,34)" fg:x="917" fg:w="5"/><text x="72.9701%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="72.7201%" y="549" width="0.3965%" height="15" fill="rgb(243,228,27)" fg:x="917" fg:w="5"/><text x="72.9701%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="72.7201%" y="533" width="0.3965%" height="15" fill="rgb(245,77,44)" fg:x="917" fg:w="5"/><text x="72.9701%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="72.7201%" y="517" width="0.3965%" height="15" fill="rgb(235,214,42)" fg:x="917" fg:w="5"/><text x="72.9701%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="72.7201%" y="501" width="0.3965%" height="15" fill="rgb(221,74,3)" fg:x="917" fg:w="5"/><text x="72.9701%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.0373%" y="485" width="0.0793%" height="15" fill="rgb(206,121,29)" fg:x="921" fg:w="1"/><text x="73.2873%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="73.1166%" y="549" width="0.0793%" height="15" fill="rgb(249,131,53)" fg:x="922" fg:w="1"/><text x="73.3666%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="73.1166%" y="533" width="0.0793%" height="15" fill="rgb(236,170,29)" fg:x="922" fg:w="1"/><text x="73.3666%" y="543.50"></text></g><g><title>engine::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="73.1166%" y="517" width="0.0793%" height="15" fill="rgb(247,96,15)" fg:x="922" fg:w="1"/><text x="73.3666%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_str (1 samples, 0.08%)</title><rect x="73.1166%" y="501" width="0.0793%" height="15" fill="rgb(211,210,7)" fg:x="922" fg:w="1"/><text x="73.3666%" y="511.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="73.1166%" y="485" width="0.0793%" height="15" fill="rgb(240,88,50)" fg:x="922" fg:w="1"/><text x="73.3666%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.1166%" y="469" width="0.0793%" height="15" fill="rgb(209,229,26)" fg:x="922" fg:w="1"/><text x="73.3666%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.1166%" y="453" width="0.0793%" height="15" fill="rgb(210,68,23)" fg:x="922" fg:w="1"/><text x="73.3666%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.1166%" y="437" width="0.0793%" height="15" fill="rgb(229,180,13)" fg:x="922" fg:w="1"/><text x="73.3666%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.1166%" y="421" width="0.0793%" height="15" fill="rgb(236,53,44)" fg:x="922" fg:w="1"/><text x="73.3666%" y="431.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (2 samples, 0.16%)</title><rect x="73.1166%" y="597" width="0.1586%" height="15" fill="rgb(244,214,29)" fg:x="922" fg:w="2"/><text x="73.3666%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="73.1166%" y="581" width="0.1586%" height="15" fill="rgb(220,75,29)" fg:x="922" fg:w="2"/><text x="73.3666%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="73.1166%" y="565" width="0.1586%" height="15" fill="rgb(214,183,37)" fg:x="922" fg:w="2"/><text x="73.3666%" y="575.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.1959%" y="549" width="0.0793%" height="15" fill="rgb(239,117,29)" fg:x="923" fg:w="1"/><text x="73.4459%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.1959%" y="533" width="0.0793%" height="15" fill="rgb(237,171,35)" fg:x="923" fg:w="1"/><text x="73.4459%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.1959%" y="517" width="0.0793%" height="15" fill="rgb(229,178,53)" fg:x="923" fg:w="1"/><text x="73.4459%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.1959%" y="501" width="0.0793%" height="15" fill="rgb(210,102,19)" fg:x="923" fg:w="1"/><text x="73.4459%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.1959%" y="485" width="0.0793%" height="15" fill="rgb(235,127,22)" fg:x="923" fg:w="1"/><text x="73.4459%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.1959%" y="469" width="0.0793%" height="15" fill="rgb(244,31,31)" fg:x="923" fg:w="1"/><text x="73.4459%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.1959%" y="453" width="0.0793%" height="15" fill="rgb(231,43,21)" fg:x="923" fg:w="1"/><text x="73.4459%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.1959%" y="437" width="0.0793%" height="15" fill="rgb(217,131,35)" fg:x="923" fg:w="1"/><text x="73.4459%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.1959%" y="421" width="0.0793%" height="15" fill="rgb(221,149,4)" fg:x="923" fg:w="1"/><text x="73.4459%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.1959%" y="405" width="0.0793%" height="15" fill="rgb(232,170,28)" fg:x="923" fg:w="1"/><text x="73.4459%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.1959%" y="389" width="0.0793%" height="15" fill="rgb(238,56,10)" fg:x="923" fg:w="1"/><text x="73.4459%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.1959%" y="373" width="0.0793%" height="15" fill="rgb(235,196,14)" fg:x="923" fg:w="1"/><text x="73.4459%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.1959%" y="357" width="0.0793%" height="15" fill="rgb(216,45,48)" fg:x="923" fg:w="1"/><text x="73.4459%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.1959%" y="341" width="0.0793%" height="15" fill="rgb(238,213,17)" fg:x="923" fg:w="1"/><text x="73.4459%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.1959%" y="325" width="0.0793%" height="15" fill="rgb(212,13,2)" fg:x="923" fg:w="1"/><text x="73.4459%" y="335.50"></text></g><g><title>&lt;engine::perform::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (3 samples, 0.24%)</title><rect x="73.1166%" y="613" width="0.2379%" height="15" fill="rgb(240,114,20)" fg:x="922" fg:w="3"/><text x="73.3666%" y="623.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="73.2752%" y="597" width="0.0793%" height="15" fill="rgb(228,41,40)" fg:x="924" fg:w="1"/><text x="73.5252%" y="607.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="73.2752%" y="581" width="0.0793%" height="15" fill="rgb(244,132,35)" fg:x="924" fg:w="1"/><text x="73.5252%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="73.2752%" y="565" width="0.0793%" height="15" fill="rgb(253,189,4)" fg:x="924" fg:w="1"/><text x="73.5252%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.2752%" y="549" width="0.0793%" height="15" fill="rgb(224,37,19)" fg:x="924" fg:w="1"/><text x="73.5252%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.4338%" y="469" width="0.0793%" height="15" fill="rgb(235,223,18)" fg:x="926" fg:w="1"/><text x="73.6838%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.4338%" y="453" width="0.0793%" height="15" fill="rgb(235,163,25)" fg:x="926" fg:w="1"/><text x="73.6838%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="73.4338%" y="485" width="0.1586%" height="15" fill="rgb(217,145,28)" fg:x="926" fg:w="2"/><text x="73.6838%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.5131%" y="469" width="0.0793%" height="15" fill="rgb(223,223,32)" fg:x="927" fg:w="1"/><text x="73.7631%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="73.4338%" y="517" width="0.2379%" height="15" fill="rgb(227,189,39)" fg:x="926" fg:w="3"/><text x="73.6838%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="73.4338%" y="501" width="0.2379%" height="15" fill="rgb(248,10,22)" fg:x="926" fg:w="3"/><text x="73.6838%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.5924%" y="485" width="0.0793%" height="15" fill="rgb(248,46,39)" fg:x="928" fg:w="1"/><text x="73.8424%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="73.4338%" y="533" width="0.3172%" height="15" fill="rgb(248,113,48)" fg:x="926" fg:w="4"/><text x="73.6838%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="73.6717%" y="517" width="0.0793%" height="15" fill="rgb(245,16,25)" fg:x="929" fg:w="1"/><text x="73.9217%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (7 samples, 0.56%)</title><rect x="73.3545%" y="581" width="0.5551%" height="15" fill="rgb(249,152,16)" fg:x="925" fg:w="7"/><text x="73.6045%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="73.3545%" y="565" width="0.5551%" height="15" fill="rgb(250,16,1)" fg:x="925" fg:w="7"/><text x="73.6045%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="73.3545%" y="549" width="0.5551%" height="15" fill="rgb(249,138,3)" fg:x="925" fg:w="7"/><text x="73.6045%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="73.7510%" y="533" width="0.1586%" height="15" fill="rgb(227,71,41)" fg:x="930" fg:w="2"/><text x="74.0010%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.9096%" y="485" width="0.0793%" height="15" fill="rgb(209,184,23)" fg:x="932" fg:w="1"/><text x="74.1596%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="73.9096%" y="469" width="0.0793%" height="15" fill="rgb(223,215,31)" fg:x="932" fg:w="1"/><text x="74.1596%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="73.9889%" y="357" width="0.0793%" height="15" fill="rgb(210,146,28)" fg:x="933" fg:w="1"/><text x="74.2389%" y="367.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="73.9889%" y="341" width="0.0793%" height="15" fill="rgb(209,183,41)" fg:x="933" fg:w="1"/><text x="74.2389%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.9889%" y="325" width="0.0793%" height="15" fill="rgb(209,224,45)" fg:x="933" fg:w="1"/><text x="74.2389%" y="335.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.9889%" y="309" width="0.0793%" height="15" fill="rgb(224,209,51)" fg:x="933" fg:w="1"/><text x="74.2389%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.9889%" y="293" width="0.0793%" height="15" fill="rgb(223,17,39)" fg:x="933" fg:w="1"/><text x="74.2389%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.9889%" y="277" width="0.0793%" height="15" fill="rgb(234,204,37)" fg:x="933" fg:w="1"/><text x="74.2389%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.9889%" y="261" width="0.0793%" height="15" fill="rgb(236,120,5)" fg:x="933" fg:w="1"/><text x="74.2389%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.9889%" y="245" width="0.0793%" height="15" fill="rgb(248,97,27)" fg:x="933" fg:w="1"/><text x="74.2389%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.9889%" y="229" width="0.0793%" height="15" fill="rgb(240,66,17)" fg:x="933" fg:w="1"/><text x="74.2389%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.9889%" y="213" width="0.0793%" height="15" fill="rgb(210,79,3)" fg:x="933" fg:w="1"/><text x="74.2389%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.9889%" y="197" width="0.0793%" height="15" fill="rgb(214,176,27)" fg:x="933" fg:w="1"/><text x="74.2389%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.9889%" y="181" width="0.0793%" height="15" fill="rgb(235,185,3)" fg:x="933" fg:w="1"/><text x="74.2389%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.9889%" y="165" width="0.0793%" height="15" fill="rgb(227,24,12)" fg:x="933" fg:w="1"/><text x="74.2389%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.9889%" y="149" width="0.0793%" height="15" fill="rgb(252,169,48)" fg:x="933" fg:w="1"/><text x="74.2389%" y="159.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="73.9889%" y="485" width="0.1586%" height="15" fill="rgb(212,65,1)" fg:x="933" fg:w="2"/><text x="74.2389%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="73.9889%" y="469" width="0.1586%" height="15" fill="rgb(242,39,24)" fg:x="933" fg:w="2"/><text x="74.2389%" y="479.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (2 samples, 0.16%)</title><rect x="73.9889%" y="453" width="0.1586%" height="15" fill="rgb(249,32,23)" fg:x="933" fg:w="2"/><text x="74.2389%" y="463.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (2 samples, 0.16%)</title><rect x="73.9889%" y="437" width="0.1586%" height="15" fill="rgb(251,195,23)" fg:x="933" fg:w="2"/><text x="74.2389%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="73.9889%" y="421" width="0.1586%" height="15" fill="rgb(236,174,8)" fg:x="933" fg:w="2"/><text x="74.2389%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="73.9889%" y="405" width="0.1586%" height="15" fill="rgb(220,197,8)" fg:x="933" fg:w="2"/><text x="74.2389%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="73.9889%" y="389" width="0.1586%" height="15" fill="rgb(240,108,37)" fg:x="933" fg:w="2"/><text x="74.2389%" y="399.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="73.9889%" y="373" width="0.1586%" height="15" fill="rgb(232,176,24)" fg:x="933" fg:w="2"/><text x="74.2389%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.0682%" y="357" width="0.0793%" height="15" fill="rgb(243,35,29)" fg:x="934" fg:w="1"/><text x="74.3182%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.0682%" y="341" width="0.0793%" height="15" fill="rgb(210,37,18)" fg:x="934" fg:w="1"/><text x="74.3182%" y="351.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="74.0682%" y="325" width="0.0793%" height="15" fill="rgb(224,184,40)" fg:x="934" fg:w="1"/><text x="74.3182%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0682%" y="309" width="0.0793%" height="15" fill="rgb(236,39,29)" fg:x="934" fg:w="1"/><text x="74.3182%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0682%" y="293" width="0.0793%" height="15" fill="rgb(232,48,39)" fg:x="934" fg:w="1"/><text x="74.3182%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0682%" y="277" width="0.0793%" height="15" fill="rgb(236,34,42)" fg:x="934" fg:w="1"/><text x="74.3182%" y="287.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="74.1475%" y="453" width="0.1586%" height="15" fill="rgb(243,106,37)" fg:x="935" fg:w="2"/><text x="74.3975%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.1475%" y="437" width="0.1586%" height="15" fill="rgb(218,96,6)" fg:x="935" fg:w="2"/><text x="74.3975%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="74.1475%" y="421" width="0.1586%" height="15" fill="rgb(235,130,12)" fg:x="935" fg:w="2"/><text x="74.3975%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.1475%" y="405" width="0.1586%" height="15" fill="rgb(231,95,0)" fg:x="935" fg:w="2"/><text x="74.3975%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="74.1475%" y="389" width="0.1586%" height="15" fill="rgb(228,12,23)" fg:x="935" fg:w="2"/><text x="74.3975%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="74.1475%" y="373" width="0.1586%" height="15" fill="rgb(216,12,1)" fg:x="935" fg:w="2"/><text x="74.3975%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="74.1475%" y="357" width="0.1586%" height="15" fill="rgb(219,59,3)" fg:x="935" fg:w="2"/><text x="74.3975%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="74.1475%" y="341" width="0.1586%" height="15" fill="rgb(215,208,46)" fg:x="935" fg:w="2"/><text x="74.3975%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="74.1475%" y="325" width="0.1586%" height="15" fill="rgb(254,224,29)" fg:x="935" fg:w="2"/><text x="74.3975%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="74.1475%" y="309" width="0.1586%" height="15" fill="rgb(232,14,29)" fg:x="935" fg:w="2"/><text x="74.3975%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="74.1475%" y="293" width="0.1586%" height="15" fill="rgb(208,45,52)" fg:x="935" fg:w="2"/><text x="74.3975%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="74.1475%" y="277" width="0.1586%" height="15" fill="rgb(234,191,28)" fg:x="935" fg:w="2"/><text x="74.3975%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="74.1475%" y="261" width="0.1586%" height="15" fill="rgb(244,67,43)" fg:x="935" fg:w="2"/><text x="74.3975%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="74.1475%" y="245" width="0.1586%" height="15" fill="rgb(236,189,24)" fg:x="935" fg:w="2"/><text x="74.3975%" y="255.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="74.1475%" y="229" width="0.1586%" height="15" fill="rgb(239,214,33)" fg:x="935" fg:w="2"/><text x="74.3975%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="74.1475%" y="213" width="0.1586%" height="15" fill="rgb(226,176,41)" fg:x="935" fg:w="2"/><text x="74.3975%" y="223.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (6 samples, 0.48%)</title><rect x="73.9096%" y="501" width="0.4758%" height="15" fill="rgb(248,47,8)" fg:x="932" fg:w="6"/><text x="74.1596%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="74.1475%" y="485" width="0.2379%" height="15" fill="rgb(218,81,44)" fg:x="935" fg:w="3"/><text x="74.3975%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="74.1475%" y="469" width="0.2379%" height="15" fill="rgb(213,98,6)" fg:x="935" fg:w="3"/><text x="74.3975%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.3061%" y="453" width="0.0793%" height="15" fill="rgb(222,85,22)" fg:x="937" fg:w="1"/><text x="74.5561%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3061%" y="437" width="0.0793%" height="15" fill="rgb(239,46,39)" fg:x="937" fg:w="1"/><text x="74.5561%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="74.3061%" y="421" width="0.0793%" height="15" fill="rgb(237,12,29)" fg:x="937" fg:w="1"/><text x="74.5561%" y="431.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="74.3061%" y="405" width="0.0793%" height="15" fill="rgb(214,77,8)" fg:x="937" fg:w="1"/><text x="74.5561%" y="415.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="74.3061%" y="389" width="0.0793%" height="15" fill="rgb(217,168,37)" fg:x="937" fg:w="1"/><text x="74.5561%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.3061%" y="373" width="0.0793%" height="15" fill="rgb(221,217,23)" fg:x="937" fg:w="1"/><text x="74.5561%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3061%" y="357" width="0.0793%" height="15" fill="rgb(243,229,36)" fg:x="937" fg:w="1"/><text x="74.5561%" y="367.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3854%" y="453" width="0.0793%" height="15" fill="rgb(251,163,40)" fg:x="938" fg:w="1"/><text x="74.6354%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.3854%" y="437" width="0.0793%" height="15" fill="rgb(237,222,12)" fg:x="938" fg:w="1"/><text x="74.6354%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3854%" y="421" width="0.0793%" height="15" fill="rgb(248,132,6)" fg:x="938" fg:w="1"/><text x="74.6354%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.3854%" y="405" width="0.0793%" height="15" fill="rgb(227,167,50)" fg:x="938" fg:w="1"/><text x="74.6354%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3854%" y="389" width="0.0793%" height="15" fill="rgb(242,84,37)" fg:x="938" fg:w="1"/><text x="74.6354%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3854%" y="373" width="0.0793%" height="15" fill="rgb(212,4,50)" fg:x="938" fg:w="1"/><text x="74.6354%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.3854%" y="357" width="0.0793%" height="15" fill="rgb(230,228,32)" fg:x="938" fg:w="1"/><text x="74.6354%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.3854%" y="341" width="0.0793%" height="15" fill="rgb(248,217,23)" fg:x="938" fg:w="1"/><text x="74.6354%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.3854%" y="325" width="0.0793%" height="15" fill="rgb(238,197,32)" fg:x="938" fg:w="1"/><text x="74.6354%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.3854%" y="309" width="0.0793%" height="15" fill="rgb(236,106,1)" fg:x="938" fg:w="1"/><text x="74.6354%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.3854%" y="293" width="0.0793%" height="15" fill="rgb(219,228,13)" fg:x="938" fg:w="1"/><text x="74.6354%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.3854%" y="277" width="0.0793%" height="15" fill="rgb(238,30,35)" fg:x="938" fg:w="1"/><text x="74.6354%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.3854%" y="261" width="0.0793%" height="15" fill="rgb(236,70,23)" fg:x="938" fg:w="1"/><text x="74.6354%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.3854%" y="245" width="0.0793%" height="15" fill="rgb(249,104,48)" fg:x="938" fg:w="1"/><text x="74.6354%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.3854%" y="229" width="0.0793%" height="15" fill="rgb(254,117,50)" fg:x="938" fg:w="1"/><text x="74.6354%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.3854%" y="213" width="0.0793%" height="15" fill="rgb(223,152,4)" fg:x="938" fg:w="1"/><text x="74.6354%" y="223.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="74.4647%" y="373" width="0.0793%" height="15" fill="rgb(245,6,2)" fg:x="939" fg:w="1"/><text x="74.7147%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.5440%" y="357" width="0.0793%" height="15" fill="rgb(249,150,24)" fg:x="940" fg:w="1"/><text x="74.7940%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.5440%" y="341" width="0.0793%" height="15" fill="rgb(228,185,42)" fg:x="940" fg:w="1"/><text x="74.7940%" y="351.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="74.5440%" y="325" width="0.0793%" height="15" fill="rgb(226,39,33)" fg:x="940" fg:w="1"/><text x="74.7940%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.5440%" y="309" width="0.0793%" height="15" fill="rgb(221,166,19)" fg:x="940" fg:w="1"/><text x="74.7940%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.5440%" y="293" width="0.0793%" height="15" fill="rgb(209,109,2)" fg:x="940" fg:w="1"/><text x="74.7940%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.5440%" y="277" width="0.0793%" height="15" fill="rgb(252,216,26)" fg:x="940" fg:w="1"/><text x="74.7940%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.5440%" y="261" width="0.0793%" height="15" fill="rgb(227,173,36)" fg:x="940" fg:w="1"/><text x="74.7940%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.5440%" y="245" width="0.0793%" height="15" fill="rgb(209,90,7)" fg:x="940" fg:w="1"/><text x="74.7940%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.5440%" y="229" width="0.0793%" height="15" fill="rgb(250,194,11)" fg:x="940" fg:w="1"/><text x="74.7940%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.5440%" y="213" width="0.0793%" height="15" fill="rgb(220,72,50)" fg:x="940" fg:w="1"/><text x="74.7940%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.5440%" y="197" width="0.0793%" height="15" fill="rgb(222,106,48)" fg:x="940" fg:w="1"/><text x="74.7940%" y="207.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.5440%" y="181" width="0.0793%" height="15" fill="rgb(216,220,45)" fg:x="940" fg:w="1"/><text x="74.7940%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.5440%" y="165" width="0.0793%" height="15" fill="rgb(234,112,18)" fg:x="940" fg:w="1"/><text x="74.7940%" y="175.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="74.6233%" y="341" width="0.0793%" height="15" fill="rgb(206,179,9)" fg:x="941" fg:w="1"/><text x="74.8733%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.6233%" y="325" width="0.0793%" height="15" fill="rgb(215,115,40)" fg:x="941" fg:w="1"/><text x="74.8733%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.6233%" y="309" width="0.0793%" height="15" fill="rgb(222,69,34)" fg:x="941" fg:w="1"/><text x="74.8733%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.6233%" y="293" width="0.0793%" height="15" fill="rgb(209,161,10)" fg:x="941" fg:w="1"/><text x="74.8733%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.6233%" y="277" width="0.0793%" height="15" fill="rgb(217,6,38)" fg:x="941" fg:w="1"/><text x="74.8733%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.6233%" y="261" width="0.0793%" height="15" fill="rgb(229,229,48)" fg:x="941" fg:w="1"/><text x="74.8733%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.6233%" y="245" width="0.0793%" height="15" fill="rgb(225,21,28)" fg:x="941" fg:w="1"/><text x="74.8733%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.6233%" y="229" width="0.0793%" height="15" fill="rgb(206,33,13)" fg:x="941" fg:w="1"/><text x="74.8733%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.6233%" y="213" width="0.0793%" height="15" fill="rgb(242,178,17)" fg:x="941" fg:w="1"/><text x="74.8733%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.6233%" y="197" width="0.0793%" height="15" fill="rgb(220,162,5)" fg:x="941" fg:w="1"/><text x="74.8733%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.6233%" y="181" width="0.0793%" height="15" fill="rgb(210,33,43)" fg:x="941" fg:w="1"/><text x="74.8733%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.7026%" y="277" width="0.0793%" height="15" fill="rgb(216,116,54)" fg:x="942" fg:w="1"/><text x="74.9526%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.7026%" y="261" width="0.0793%" height="15" fill="rgb(249,92,24)" fg:x="942" fg:w="1"/><text x="74.9526%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.7819%" y="261" width="0.0793%" height="15" fill="rgb(231,189,14)" fg:x="943" fg:w="1"/><text x="75.0319%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 1.11%)</title><rect x="73.9096%" y="533" width="1.1102%" height="15" fill="rgb(230,8,41)" fg:x="932" fg:w="14"/><text x="74.1596%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (14 samples, 1.11%)</title><rect x="73.9096%" y="517" width="1.1102%" height="15" fill="rgb(249,7,27)" fg:x="932" fg:w="14"/><text x="74.1596%" y="527.50"></text></g><g><title>plugins_core::tools::get_contained_keys (8 samples, 0.63%)</title><rect x="74.3854%" y="501" width="0.6344%" height="15" fill="rgb(232,86,5)" fg:x="938" fg:w="8"/><text x="74.6354%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (8 samples, 0.63%)</title><rect x="74.3854%" y="485" width="0.6344%" height="15" fill="rgb(224,175,18)" fg:x="938" fg:w="8"/><text x="74.6354%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (8 samples, 0.63%)</title><rect x="74.3854%" y="469" width="0.6344%" height="15" fill="rgb(220,129,12)" fg:x="938" fg:w="8"/><text x="74.6354%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (7 samples, 0.56%)</title><rect x="74.4647%" y="453" width="0.5551%" height="15" fill="rgb(210,19,36)" fg:x="939" fg:w="7"/><text x="74.7147%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (7 samples, 0.56%)</title><rect x="74.4647%" y="437" width="0.5551%" height="15" fill="rgb(219,96,14)" fg:x="939" fg:w="7"/><text x="74.7147%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="74.4647%" y="421" width="0.5551%" height="15" fill="rgb(249,106,1)" fg:x="939" fg:w="7"/><text x="74.7147%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (7 samples, 0.56%)</title><rect x="74.4647%" y="405" width="0.5551%" height="15" fill="rgb(249,155,20)" fg:x="939" fg:w="7"/><text x="74.7147%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (7 samples, 0.56%)</title><rect x="74.4647%" y="389" width="0.5551%" height="15" fill="rgb(244,168,9)" fg:x="939" fg:w="7"/><text x="74.7147%" y="399.50"></text></g><g><title>engine::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="74.5440%" y="373" width="0.4758%" height="15" fill="rgb(216,23,50)" fg:x="940" fg:w="6"/><text x="74.7940%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::from_str (5 samples, 0.40%)</title><rect x="74.6233%" y="357" width="0.3965%" height="15" fill="rgb(224,219,20)" fg:x="941" fg:w="5"/><text x="74.8733%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="74.7026%" y="341" width="0.3172%" height="15" fill="rgb(222,156,15)" fg:x="942" fg:w="4"/><text x="74.9526%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="74.7026%" y="325" width="0.3172%" height="15" fill="rgb(231,97,17)" fg:x="942" fg:w="4"/><text x="74.9526%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="74.7026%" y="309" width="0.3172%" height="15" fill="rgb(218,70,48)" fg:x="942" fg:w="4"/><text x="74.9526%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="74.7026%" y="293" width="0.3172%" height="15" fill="rgb(212,196,52)" fg:x="942" fg:w="4"/><text x="74.9526%" y="303.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="74.7819%" y="277" width="0.2379%" height="15" fill="rgb(243,203,18)" fg:x="943" fg:w="3"/><text x="75.0319%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.8612%" y="261" width="0.1586%" height="15" fill="rgb(252,125,41)" fg:x="944" fg:w="2"/><text x="75.1112%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.8612%" y="245" width="0.1586%" height="15" fill="rgb(223,180,33)" fg:x="944" fg:w="2"/><text x="75.1112%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="74.8612%" y="229" width="0.1586%" height="15" fill="rgb(254,159,46)" fg:x="944" fg:w="2"/><text x="75.1112%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.8612%" y="213" width="0.1586%" height="15" fill="rgb(254,38,10)" fg:x="944" fg:w="2"/><text x="75.1112%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.8612%" y="197" width="0.1586%" height="15" fill="rgb(208,217,32)" fg:x="944" fg:w="2"/><text x="75.1112%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="74.8612%" y="181" width="0.1586%" height="15" fill="rgb(221,120,13)" fg:x="944" fg:w="2"/><text x="75.1112%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.8612%" y="165" width="0.1586%" height="15" fill="rgb(246,54,52)" fg:x="944" fg:w="2"/><text x="75.1112%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.8612%" y="149" width="0.1586%" height="15" fill="rgb(242,34,25)" fg:x="944" fg:w="2"/><text x="75.1112%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="74.8612%" y="133" width="0.1586%" height="15" fill="rgb(247,209,9)" fg:x="944" fg:w="2"/><text x="75.1112%" y="143.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.8612%" y="117" width="0.1586%" height="15" fill="rgb(228,71,26)" fg:x="944" fg:w="2"/><text x="75.1112%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.9405%" y="101" width="0.0793%" height="15" fill="rgb(222,145,49)" fg:x="945" fg:w="1"/><text x="75.1905%" y="111.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="74.9405%" y="85" width="0.0793%" height="15" fill="rgb(218,121,17)" fg:x="945" fg:w="1"/><text x="75.1905%" y="95.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.9405%" y="69" width="0.0793%" height="15" fill="rgb(244,50,7)" fg:x="945" fg:w="1"/><text x="75.1905%" y="79.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.9405%" y="53" width="0.0793%" height="15" fill="rgb(246,229,37)" fg:x="945" fg:w="1"/><text x="75.1905%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.0198%" y="373" width="0.0793%" height="15" fill="rgb(225,18,5)" fg:x="946" fg:w="1"/><text x="75.2698%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.0198%" y="357" width="0.0793%" height="15" fill="rgb(213,204,8)" fg:x="946" fg:w="1"/><text x="75.2698%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.0198%" y="341" width="0.0793%" height="15" fill="rgb(238,103,6)" fg:x="946" fg:w="1"/><text x="75.2698%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.0198%" y="325" width="0.0793%" height="15" fill="rgb(222,25,35)" fg:x="946" fg:w="1"/><text x="75.2698%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.0198%" y="309" width="0.0793%" height="15" fill="rgb(213,203,35)" fg:x="946" fg:w="1"/><text x="75.2698%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.0198%" y="293" width="0.0793%" height="15" fill="rgb(221,79,53)" fg:x="946" fg:w="1"/><text x="75.2698%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.0198%" y="277" width="0.0793%" height="15" fill="rgb(243,200,35)" fg:x="946" fg:w="1"/><text x="75.2698%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.0198%" y="261" width="0.0793%" height="15" fill="rgb(248,60,25)" fg:x="946" fg:w="1"/><text x="75.2698%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.0198%" y="245" width="0.0793%" height="15" fill="rgb(227,53,46)" fg:x="946" fg:w="1"/><text x="75.2698%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.0198%" y="229" width="0.0793%" height="15" fill="rgb(216,120,32)" fg:x="946" fg:w="1"/><text x="75.2698%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.0198%" y="213" width="0.0793%" height="15" fill="rgb(220,134,1)" fg:x="946" fg:w="1"/><text x="75.2698%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.0198%" y="197" width="0.0793%" height="15" fill="rgb(237,168,5)" fg:x="946" fg:w="1"/><text x="75.2698%" y="207.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="75.0198%" y="485" width="0.1586%" height="15" fill="rgb(231,100,33)" fg:x="946" fg:w="2"/><text x="75.2698%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="75.0198%" y="469" width="0.1586%" height="15" fill="rgb(236,177,47)" fg:x="946" fg:w="2"/><text x="75.2698%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="75.0198%" y="453" width="0.1586%" height="15" fill="rgb(235,7,49)" fg:x="946" fg:w="2"/><text x="75.2698%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="75.0198%" y="437" width="0.1586%" height="15" fill="rgb(232,119,22)" fg:x="946" fg:w="2"/><text x="75.2698%" y="447.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="75.0198%" y="421" width="0.1586%" height="15" fill="rgb(254,73,53)" fg:x="946" fg:w="2"/><text x="75.2698%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="75.0198%" y="405" width="0.1586%" height="15" fill="rgb(251,35,20)" fg:x="946" fg:w="2"/><text x="75.2698%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="75.0198%" y="389" width="0.1586%" height="15" fill="rgb(241,119,20)" fg:x="946" fg:w="2"/><text x="75.2698%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="75.0991%" y="373" width="0.0793%" height="15" fill="rgb(207,102,14)" fg:x="947" fg:w="1"/><text x="75.3491%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="75.0991%" y="357" width="0.0793%" height="15" fill="rgb(248,201,50)" fg:x="947" fg:w="1"/><text x="75.3491%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="75.0991%" y="341" width="0.0793%" height="15" fill="rgb(222,185,44)" fg:x="947" fg:w="1"/><text x="75.3491%" y="351.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="75.0991%" y="325" width="0.0793%" height="15" fill="rgb(218,107,18)" fg:x="947" fg:w="1"/><text x="75.3491%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="75.0991%" y="309" width="0.0793%" height="15" fill="rgb(237,177,39)" fg:x="947" fg:w="1"/><text x="75.3491%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="75.0991%" y="293" width="0.0793%" height="15" fill="rgb(246,69,6)" fg:x="947" fg:w="1"/><text x="75.3491%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="75.0991%" y="277" width="0.0793%" height="15" fill="rgb(234,208,37)" fg:x="947" fg:w="1"/><text x="75.3491%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.0991%" y="261" width="0.0793%" height="15" fill="rgb(225,4,6)" fg:x="947" fg:w="1"/><text x="75.3491%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.0991%" y="245" width="0.0793%" height="15" fill="rgb(233,45,0)" fg:x="947" fg:w="1"/><text x="75.3491%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="75.0991%" y="229" width="0.0793%" height="15" fill="rgb(226,136,5)" fg:x="947" fg:w="1"/><text x="75.3491%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="75.0991%" y="213" width="0.0793%" height="15" fill="rgb(211,91,47)" fg:x="947" fg:w="1"/><text x="75.3491%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="75.0991%" y="197" width="0.0793%" height="15" fill="rgb(242,88,51)" fg:x="947" fg:w="1"/><text x="75.3491%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="75.0991%" y="181" width="0.0793%" height="15" fill="rgb(230,91,28)" fg:x="947" fg:w="1"/><text x="75.3491%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="75.0991%" y="165" width="0.0793%" height="15" fill="rgb(254,186,29)" fg:x="947" fg:w="1"/><text x="75.3491%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="75.0991%" y="149" width="0.0793%" height="15" fill="rgb(238,6,4)" fg:x="947" fg:w="1"/><text x="75.3491%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.0991%" y="133" width="0.0793%" height="15" fill="rgb(221,151,16)" fg:x="947" fg:w="1"/><text x="75.3491%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="75.0991%" y="117" width="0.0793%" height="15" fill="rgb(251,143,52)" fg:x="947" fg:w="1"/><text x="75.3491%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.0991%" y="101" width="0.0793%" height="15" fill="rgb(206,90,15)" fg:x="947" fg:w="1"/><text x="75.3491%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="75.0991%" y="85" width="0.0793%" height="15" fill="rgb(218,35,8)" fg:x="947" fg:w="1"/><text x="75.3491%" y="95.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="75.0991%" y="69" width="0.0793%" height="15" fill="rgb(239,215,6)" fg:x="947" fg:w="1"/><text x="75.3491%" y="79.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="75.0991%" y="53" width="0.0793%" height="15" fill="rgb(245,116,39)" fg:x="947" fg:w="1"/><text x="75.3491%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.0991%" y="37" width="0.0793%" height="15" fill="rgb(242,65,28)" fg:x="947" fg:w="1"/><text x="75.3491%" y="47.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.2577%" y="421" width="0.0793%" height="15" fill="rgb(252,132,53)" fg:x="949" fg:w="1"/><text x="75.5077%" y="431.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="75.4163%" y="277" width="0.0793%" height="15" fill="rgb(224,159,50)" fg:x="951" fg:w="1"/><text x="75.6663%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.4163%" y="261" width="0.0793%" height="15" fill="rgb(224,93,4)" fg:x="951" fg:w="1"/><text x="75.6663%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="75.4163%" y="245" width="0.0793%" height="15" fill="rgb(208,81,34)" fg:x="951" fg:w="1"/><text x="75.6663%" y="255.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="75.4163%" y="229" width="0.0793%" height="15" fill="rgb(233,92,54)" fg:x="951" fg:w="1"/><text x="75.6663%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.4163%" y="213" width="0.0793%" height="15" fill="rgb(237,21,14)" fg:x="951" fg:w="1"/><text x="75.6663%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="75.4163%" y="197" width="0.0793%" height="15" fill="rgb(249,128,51)" fg:x="951" fg:w="1"/><text x="75.6663%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.4163%" y="181" width="0.0793%" height="15" fill="rgb(223,129,24)" fg:x="951" fg:w="1"/><text x="75.6663%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.4163%" y="165" width="0.0793%" height="15" fill="rgb(231,168,25)" fg:x="951" fg:w="1"/><text x="75.6663%" y="175.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.4956%" y="277" width="0.0793%" height="15" fill="rgb(224,39,20)" fg:x="952" fg:w="1"/><text x="75.7456%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.4956%" y="261" width="0.0793%" height="15" fill="rgb(225,152,53)" fg:x="952" fg:w="1"/><text x="75.7456%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="75.3370%" y="373" width="0.3172%" height="15" fill="rgb(252,17,24)" fg:x="950" fg:w="4"/><text x="75.5870%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="75.3370%" y="357" width="0.3172%" height="15" fill="rgb(250,114,30)" fg:x="950" fg:w="4"/><text x="75.5870%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="75.3370%" y="341" width="0.3172%" height="15" fill="rgb(229,5,4)" fg:x="950" fg:w="4"/><text x="75.5870%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="75.4163%" y="325" width="0.2379%" height="15" fill="rgb(225,176,49)" fg:x="951" fg:w="3"/><text x="75.6663%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="75.4163%" y="309" width="0.2379%" height="15" fill="rgb(224,221,49)" fg:x="951" fg:w="3"/><text x="75.6663%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="75.4163%" y="293" width="0.2379%" height="15" fill="rgb(253,169,27)" fg:x="951" fg:w="3"/><text x="75.6663%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.5749%" y="277" width="0.0793%" height="15" fill="rgb(211,206,16)" fg:x="953" fg:w="1"/><text x="75.8249%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="75.5749%" y="261" width="0.0793%" height="15" fill="rgb(244,87,35)" fg:x="953" fg:w="1"/><text x="75.8249%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (5 samples, 0.40%)</title><rect x="75.3370%" y="421" width="0.3965%" height="15" fill="rgb(246,28,10)" fg:x="950" fg:w="5"/><text x="75.5870%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="75.3370%" y="405" width="0.3965%" height="15" fill="rgb(229,12,44)" fg:x="950" fg:w="5"/><text x="75.5870%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.40%)</title><rect x="75.3370%" y="389" width="0.3965%" height="15" fill="rgb(210,145,37)" fg:x="950" fg:w="5"/><text x="75.5870%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.6542%" y="373" width="0.0793%" height="15" fill="rgb(227,112,52)" fg:x="954" fg:w="1"/><text x="75.9042%" y="383.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (8 samples, 0.63%)</title><rect x="75.1784%" y="469" width="0.6344%" height="15" fill="rgb(238,155,34)" fg:x="948" fg:w="8"/><text x="75.4284%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (8 samples, 0.63%)</title><rect x="75.1784%" y="453" width="0.6344%" height="15" fill="rgb(239,226,36)" fg:x="948" fg:w="8"/><text x="75.4284%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.63%)</title><rect x="75.1784%" y="437" width="0.6344%" height="15" fill="rgb(230,16,23)" fg:x="948" fg:w="8"/><text x="75.4284%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.7335%" y="421" width="0.0793%" height="15" fill="rgb(236,171,36)" fg:x="955" fg:w="1"/><text x="75.9835%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.8128%" y="421" width="0.0793%" height="15" fill="rgb(221,22,14)" fg:x="956" fg:w="1"/><text x="76.0628%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.8128%" y="405" width="0.0793%" height="15" fill="rgb(242,43,11)" fg:x="956" fg:w="1"/><text x="76.0628%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="75.8128%" y="389" width="0.0793%" height="15" fill="rgb(232,69,23)" fg:x="956" fg:w="1"/><text x="76.0628%" y="399.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="75.8921%" y="421" width="0.0793%" height="15" fill="rgb(216,180,54)" fg:x="957" fg:w="1"/><text x="76.1421%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.8921%" y="405" width="0.0793%" height="15" fill="rgb(216,5,24)" fg:x="957" fg:w="1"/><text x="76.1421%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="75.8921%" y="389" width="0.0793%" height="15" fill="rgb(225,89,9)" fg:x="957" fg:w="1"/><text x="76.1421%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="75.8921%" y="373" width="0.0793%" height="15" fill="rgb(243,75,33)" fg:x="957" fg:w="1"/><text x="76.1421%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="75.9715%" y="389" width="0.0793%" height="15" fill="rgb(247,141,45)" fg:x="958" fg:w="1"/><text x="76.2215%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.0508%" y="373" width="0.0793%" height="15" fill="rgb(232,177,36)" fg:x="959" fg:w="1"/><text x="76.3008%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.0508%" y="357" width="0.0793%" height="15" fill="rgb(219,125,36)" fg:x="959" fg:w="1"/><text x="76.3008%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.1301%" y="373" width="0.0793%" height="15" fill="rgb(227,94,9)" fg:x="960" fg:w="1"/><text x="76.3801%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.1301%" y="357" width="0.0793%" height="15" fill="rgb(240,34,52)" fg:x="960" fg:w="1"/><text x="76.3801%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.1301%" y="341" width="0.0793%" height="15" fill="rgb(216,45,12)" fg:x="960" fg:w="1"/><text x="76.3801%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.2094%" y="293" width="0.0793%" height="15" fill="rgb(246,21,19)" fg:x="961" fg:w="1"/><text x="76.4594%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.2094%" y="277" width="0.0793%" height="15" fill="rgb(213,98,42)" fg:x="961" fg:w="1"/><text x="76.4594%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.2094%" y="261" width="0.0793%" height="15" fill="rgb(250,136,47)" fg:x="961" fg:w="1"/><text x="76.4594%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="76.2094%" y="357" width="0.1586%" height="15" fill="rgb(251,124,27)" fg:x="961" fg:w="2"/><text x="76.4594%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="76.2094%" y="341" width="0.1586%" height="15" fill="rgb(229,180,14)" fg:x="961" fg:w="2"/><text x="76.4594%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="76.2094%" y="325" width="0.1586%" height="15" fill="rgb(245,216,25)" fg:x="961" fg:w="2"/><text x="76.4594%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="76.2094%" y="309" width="0.1586%" height="15" fill="rgb(251,43,5)" fg:x="961" fg:w="2"/><text x="76.4594%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.2887%" y="293" width="0.0793%" height="15" fill="rgb(250,128,24)" fg:x="962" fg:w="1"/><text x="76.5387%" y="303.50"></text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (39 samples, 3.09%)</title><rect x="73.3545%" y="613" width="3.0928%" height="15" fill="rgb(217,117,27)" fg:x="925" fg:w="39"/><text x="73.6045%" y="623.50">ker..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (39 samples, 3.09%)</title><rect x="73.3545%" y="597" width="3.0928%" height="15" fill="rgb(245,147,4)" fg:x="925" fg:w="39"/><text x="73.6045%" y="607.50">&lt;pl..</text></g><g><title>plugins_rpc::querying::have_surroundings (32 samples, 2.54%)</title><rect x="73.9096%" y="581" width="2.5377%" height="15" fill="rgb(242,201,35)" fg:x="932" fg:w="32"/><text x="74.1596%" y="591.50">pl..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (32 samples, 2.54%)</title><rect x="73.9096%" y="565" width="2.5377%" height="15" fill="rgb(218,181,1)" fg:x="932" fg:w="32"/><text x="74.1596%" y="575.50">&lt;p..</text></g><g><title>core::iter::adapters::try_process (32 samples, 2.54%)</title><rect x="73.9096%" y="549" width="2.5377%" height="15" fill="rgb(222,6,29)" fg:x="932" fg:w="32"/><text x="74.1596%" y="559.50">co..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (18 samples, 1.43%)</title><rect x="75.0198%" y="533" width="1.4274%" height="15" fill="rgb(208,186,3)" fg:x="946" fg:w="18"/><text x="75.2698%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (18 samples, 1.43%)</title><rect x="75.0198%" y="517" width="1.4274%" height="15" fill="rgb(216,36,26)" fg:x="946" fg:w="18"/><text x="75.2698%" y="527.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (18 samples, 1.43%)</title><rect x="75.0198%" y="501" width="1.4274%" height="15" fill="rgb(248,201,23)" fg:x="946" fg:w="18"/><text x="75.2698%" y="511.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (16 samples, 1.27%)</title><rect x="75.1784%" y="485" width="1.2688%" height="15" fill="rgb(251,170,31)" fg:x="948" fg:w="16"/><text x="75.4284%" y="495.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (8 samples, 0.63%)</title><rect x="75.8128%" y="469" width="0.6344%" height="15" fill="rgb(207,110,25)" fg:x="956" fg:w="8"/><text x="76.0628%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.63%)</title><rect x="75.8128%" y="453" width="0.6344%" height="15" fill="rgb(250,54,15)" fg:x="956" fg:w="8"/><text x="76.0628%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.63%)</title><rect x="75.8128%" y="437" width="0.6344%" height="15" fill="rgb(227,68,33)" fg:x="956" fg:w="8"/><text x="76.0628%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="75.9715%" y="421" width="0.4758%" height="15" fill="rgb(238,34,41)" fg:x="958" fg:w="6"/><text x="76.2215%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="75.9715%" y="405" width="0.4758%" height="15" fill="rgb(220,11,15)" fg:x="958" fg:w="6"/><text x="76.2215%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="76.0508%" y="389" width="0.3965%" height="15" fill="rgb(246,111,35)" fg:x="959" fg:w="5"/><text x="76.3008%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="76.2094%" y="373" width="0.2379%" height="15" fill="rgb(209,88,53)" fg:x="961" fg:w="3"/><text x="76.4594%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.3680%" y="357" width="0.0793%" height="15" fill="rgb(231,185,47)" fg:x="963" fg:w="1"/><text x="76.6180%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.6059%" y="421" width="0.0793%" height="15" fill="rgb(233,154,1)" fg:x="966" fg:w="1"/><text x="76.8559%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.6852%" y="389" width="0.0793%" height="15" fill="rgb(225,15,46)" fg:x="967" fg:w="1"/><text x="76.9352%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.6852%" y="373" width="0.0793%" height="15" fill="rgb(211,135,41)" fg:x="967" fg:w="1"/><text x="76.9352%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.6852%" y="357" width="0.0793%" height="15" fill="rgb(208,54,0)" fg:x="967" fg:w="1"/><text x="76.9352%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.6852%" y="341" width="0.0793%" height="15" fill="rgb(244,136,14)" fg:x="967" fg:w="1"/><text x="76.9352%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.6852%" y="325" width="0.0793%" height="15" fill="rgb(241,56,14)" fg:x="967" fg:w="1"/><text x="76.9352%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.6852%" y="309" width="0.0793%" height="15" fill="rgb(205,80,24)" fg:x="967" fg:w="1"/><text x="76.9352%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.6852%" y="293" width="0.0793%" height="15" fill="rgb(220,57,4)" fg:x="967" fg:w="1"/><text x="76.9352%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.6852%" y="277" width="0.0793%" height="15" fill="rgb(226,193,50)" fg:x="967" fg:w="1"/><text x="76.9352%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.6852%" y="261" width="0.0793%" height="15" fill="rgb(231,168,22)" fg:x="967" fg:w="1"/><text x="76.9352%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.6852%" y="245" width="0.0793%" height="15" fill="rgb(254,215,14)" fg:x="967" fg:w="1"/><text x="76.9352%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.6852%" y="229" width="0.0793%" height="15" fill="rgb(211,115,16)" fg:x="967" fg:w="1"/><text x="76.9352%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.6852%" y="213" width="0.0793%" height="15" fill="rgb(236,210,16)" fg:x="967" fg:w="1"/><text x="76.9352%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.6852%" y="197" width="0.0793%" height="15" fill="rgb(221,94,12)" fg:x="967" fg:w="1"/><text x="76.9352%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.6852%" y="181" width="0.0793%" height="15" fill="rgb(235,218,49)" fg:x="967" fg:w="1"/><text x="76.9352%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.6852%" y="165" width="0.0793%" height="15" fill="rgb(217,114,14)" fg:x="967" fg:w="1"/><text x="76.9352%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.6852%" y="149" width="0.0793%" height="15" fill="rgb(216,145,22)" fg:x="967" fg:w="1"/><text x="76.9352%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.7645%" y="325" width="0.0793%" height="15" fill="rgb(217,112,39)" fg:x="968" fg:w="1"/><text x="77.0145%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.7645%" y="309" width="0.0793%" height="15" fill="rgb(225,85,32)" fg:x="968" fg:w="1"/><text x="77.0145%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (4 samples, 0.32%)</title><rect x="76.6059%" y="437" width="0.3172%" height="15" fill="rgb(245,209,47)" fg:x="966" fg:w="4"/><text x="76.8559%" y="447.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="76.6852%" y="421" width="0.2379%" height="15" fill="rgb(218,220,15)" fg:x="967" fg:w="3"/><text x="76.9352%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="76.6852%" y="405" width="0.2379%" height="15" fill="rgb(222,202,31)" fg:x="967" fg:w="3"/><text x="76.9352%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="76.7645%" y="389" width="0.1586%" height="15" fill="rgb(243,203,4)" fg:x="968" fg:w="2"/><text x="77.0145%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.7645%" y="373" width="0.1586%" height="15" fill="rgb(237,92,17)" fg:x="968" fg:w="2"/><text x="77.0145%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="76.7645%" y="357" width="0.1586%" height="15" fill="rgb(231,119,7)" fg:x="968" fg:w="2"/><text x="77.0145%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.7645%" y="341" width="0.1586%" height="15" fill="rgb(237,82,41)" fg:x="968" fg:w="2"/><text x="77.0145%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.8438%" y="325" width="0.0793%" height="15" fill="rgb(226,81,48)" fg:x="969" fg:w="1"/><text x="77.0938%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.8438%" y="309" width="0.0793%" height="15" fill="rgb(234,70,51)" fg:x="969" fg:w="1"/><text x="77.0938%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.8438%" y="293" width="0.0793%" height="15" fill="rgb(251,86,4)" fg:x="969" fg:w="1"/><text x="77.0938%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.8438%" y="277" width="0.0793%" height="15" fill="rgb(244,144,28)" fg:x="969" fg:w="1"/><text x="77.0938%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.8438%" y="261" width="0.0793%" height="15" fill="rgb(232,161,39)" fg:x="969" fg:w="1"/><text x="77.0938%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.8438%" y="245" width="0.0793%" height="15" fill="rgb(247,34,51)" fg:x="969" fg:w="1"/><text x="77.0938%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.8438%" y="229" width="0.0793%" height="15" fill="rgb(225,132,2)" fg:x="969" fg:w="1"/><text x="77.0938%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.9231%" y="389" width="0.0793%" height="15" fill="rgb(209,159,44)" fg:x="970" fg:w="1"/><text x="77.1731%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.0024%" y="293" width="0.0793%" height="15" fill="rgb(251,214,1)" fg:x="971" fg:w="1"/><text x="77.2524%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="76.9231%" y="437" width="0.2379%" height="15" fill="rgb(247,84,47)" fg:x="970" fg:w="3"/><text x="77.1731%" y="447.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="76.9231%" y="421" width="0.2379%" height="15" fill="rgb(240,111,43)" fg:x="970" fg:w="3"/><text x="77.1731%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="76.9231%" y="405" width="0.2379%" height="15" fill="rgb(215,214,35)" fg:x="970" fg:w="3"/><text x="77.1731%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="77.0024%" y="389" width="0.1586%" height="15" fill="rgb(248,207,23)" fg:x="971" fg:w="2"/><text x="77.2524%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="77.0024%" y="373" width="0.1586%" height="15" fill="rgb(214,186,4)" fg:x="971" fg:w="2"/><text x="77.2524%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="77.0024%" y="357" width="0.1586%" height="15" fill="rgb(220,133,22)" fg:x="971" fg:w="2"/><text x="77.2524%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="77.0024%" y="341" width="0.1586%" height="15" fill="rgb(239,134,19)" fg:x="971" fg:w="2"/><text x="77.2524%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="77.0024%" y="325" width="0.1586%" height="15" fill="rgb(250,140,9)" fg:x="971" fg:w="2"/><text x="77.2524%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="77.0024%" y="309" width="0.1586%" height="15" fill="rgb(225,59,14)" fg:x="971" fg:w="2"/><text x="77.2524%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.0817%" y="293" width="0.0793%" height="15" fill="rgb(214,152,51)" fg:x="972" fg:w="1"/><text x="77.3317%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.0817%" y="277" width="0.0793%" height="15" fill="rgb(251,227,43)" fg:x="972" fg:w="1"/><text x="77.3317%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.0817%" y="261" width="0.0793%" height="15" fill="rgb(241,96,17)" fg:x="972" fg:w="1"/><text x="77.3317%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.0817%" y="245" width="0.0793%" height="15" fill="rgb(234,198,43)" fg:x="972" fg:w="1"/><text x="77.3317%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.0817%" y="229" width="0.0793%" height="15" fill="rgb(220,108,29)" fg:x="972" fg:w="1"/><text x="77.3317%" y="239.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="77.3196%" y="373" width="0.0793%" height="15" fill="rgb(226,163,33)" fg:x="975" fg:w="1"/><text x="77.5696%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="77.3989%" y="261" width="0.0793%" height="15" fill="rgb(205,194,45)" fg:x="976" fg:w="1"/><text x="77.6489%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="77.3989%" y="277" width="0.1586%" height="15" fill="rgb(206,143,44)" fg:x="976" fg:w="2"/><text x="77.6489%" y="287.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="77.4782%" y="261" width="0.0793%" height="15" fill="rgb(236,136,36)" fg:x="977" fg:w="1"/><text x="77.7282%" y="271.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="77.4782%" y="245" width="0.0793%" height="15" fill="rgb(249,172,42)" fg:x="977" fg:w="1"/><text x="77.7282%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.4782%" y="229" width="0.0793%" height="15" fill="rgb(216,139,23)" fg:x="977" fg:w="1"/><text x="77.7282%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.4782%" y="213" width="0.0793%" height="15" fill="rgb(207,166,20)" fg:x="977" fg:w="1"/><text x="77.7282%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.4782%" y="197" width="0.0793%" height="15" fill="rgb(210,209,22)" fg:x="977" fg:w="1"/><text x="77.7282%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="77.3989%" y="357" width="0.3172%" height="15" fill="rgb(232,118,20)" fg:x="976" fg:w="4"/><text x="77.6489%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="77.3989%" y="341" width="0.3172%" height="15" fill="rgb(238,113,42)" fg:x="976" fg:w="4"/><text x="77.6489%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.32%)</title><rect x="77.3989%" y="325" width="0.3172%" height="15" fill="rgb(231,42,5)" fg:x="976" fg:w="4"/><text x="77.6489%" y="335.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.32%)</title><rect x="77.3989%" y="309" width="0.3172%" height="15" fill="rgb(243,166,24)" fg:x="976" fg:w="4"/><text x="77.6489%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="77.3989%" y="293" width="0.3172%" height="15" fill="rgb(237,226,12)" fg:x="976" fg:w="4"/><text x="77.6489%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="77.5575%" y="277" width="0.1586%" height="15" fill="rgb(229,133,24)" fg:x="978" fg:w="2"/><text x="77.8075%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.6368%" y="261" width="0.0793%" height="15" fill="rgb(238,33,43)" fg:x="979" fg:w="1"/><text x="77.8868%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="78.0333%" y="293" width="0.1586%" height="15" fill="rgb(227,59,38)" fg:x="984" fg:w="2"/><text x="78.2833%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.1919%" y="277" width="0.0793%" height="15" fill="rgb(230,97,0)" fg:x="986" fg:w="1"/><text x="78.4419%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.79%)</title><rect x="78.1919%" y="293" width="0.7930%" height="15" fill="rgb(250,173,50)" fg:x="986" fg:w="10"/><text x="78.4419%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.71%)</title><rect x="78.2712%" y="277" width="0.7137%" height="15" fill="rgb(240,15,50)" fg:x="987" fg:w="9"/><text x="78.5212%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="78.9849%" y="293" width="0.3965%" height="15" fill="rgb(221,93,22)" fg:x="996" fg:w="5"/><text x="79.2349%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="79.1435%" y="277" width="0.2379%" height="15" fill="rgb(245,180,53)" fg:x="998" fg:w="3"/><text x="79.3935%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="79.5400%" y="229" width="0.0793%" height="15" fill="rgb(231,88,51)" fg:x="1003" fg:w="1"/><text x="79.7900%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="79.5400%" y="213" width="0.0793%" height="15" fill="rgb(240,58,21)" fg:x="1003" fg:w="1"/><text x="79.7900%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.5400%" y="197" width="0.0793%" height="15" fill="rgb(237,21,10)" fg:x="1003" fg:w="1"/><text x="79.7900%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.5400%" y="181" width="0.0793%" height="15" fill="rgb(218,43,11)" fg:x="1003" fg:w="1"/><text x="79.7900%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (35 samples, 2.78%)</title><rect x="79.6193%" y="229" width="2.7756%" height="15" fill="rgb(218,221,29)" fg:x="1004" fg:w="35"/><text x="79.8693%" y="239.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (35 samples, 2.78%)</title><rect x="79.6193%" y="213" width="2.7756%" height="15" fill="rgb(214,118,42)" fg:x="1004" fg:w="35"/><text x="79.8693%" y="223.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (35 samples, 2.78%)</title><rect x="79.6193%" y="197" width="2.7756%" height="15" fill="rgb(251,200,26)" fg:x="1004" fg:w="35"/><text x="79.8693%" y="207.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 3.09%)</title><rect x="79.4607%" y="277" width="3.0928%" height="15" fill="rgb(237,101,39)" fg:x="1002" fg:w="39"/><text x="79.7107%" y="287.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (39 samples, 3.09%)</title><rect x="79.4607%" y="261" width="3.0928%" height="15" fill="rgb(251,117,11)" fg:x="1002" fg:w="39"/><text x="79.7107%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (39 samples, 3.09%)</title><rect x="79.4607%" y="245" width="3.0928%" height="15" fill="rgb(216,223,23)" fg:x="1002" fg:w="39"/><text x="79.7107%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="82.3949%" y="229" width="0.1586%" height="15" fill="rgb(251,54,12)" fg:x="1039" fg:w="2"/><text x="82.6449%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.7914%" y="261" width="0.0793%" height="15" fill="rgb(254,176,54)" fg:x="1044" fg:w="1"/><text x="83.0414%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="82.8707%" y="261" width="0.0793%" height="15" fill="rgb(210,32,8)" fg:x="1045" fg:w="1"/><text x="83.1207%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="82.9500%" y="261" width="0.1586%" height="15" fill="rgb(235,52,38)" fg:x="1046" fg:w="2"/><text x="83.2000%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.0293%" y="245" width="0.0793%" height="15" fill="rgb(231,4,44)" fg:x="1047" fg:w="1"/><text x="83.2793%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.0293%" y="229" width="0.0793%" height="15" fill="rgb(249,2,32)" fg:x="1047" fg:w="1"/><text x="83.2793%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.0293%" y="213" width="0.0793%" height="15" fill="rgb(224,65,26)" fg:x="1047" fg:w="1"/><text x="83.2793%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="83.1086%" y="261" width="0.0793%" height="15" fill="rgb(250,73,40)" fg:x="1048" fg:w="1"/><text x="83.3586%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.71%)</title><rect x="82.5535%" y="277" width="0.7137%" height="15" fill="rgb(253,177,16)" fg:x="1041" fg:w="9"/><text x="82.8035%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="83.1879%" y="261" width="0.0793%" height="15" fill="rgb(217,32,34)" fg:x="1049" fg:w="1"/><text x="83.4379%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (71 samples, 5.63%)</title><rect x="77.7954%" y="309" width="5.6305%" height="15" fill="rgb(212,7,10)" fg:x="981" fg:w="71"/><text x="78.0454%" y="319.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (51 samples, 4.04%)</title><rect x="79.3814%" y="293" width="4.0444%" height="15" fill="rgb(245,89,8)" fg:x="1001" fg:w="51"/><text x="79.6314%" y="303.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="83.2672%" y="277" width="0.1586%" height="15" fill="rgb(237,16,53)" fg:x="1050" fg:w="2"/><text x="83.5172%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="83.2672%" y="261" width="0.1586%" height="15" fill="rgb(250,204,30)" fg:x="1050" fg:w="2"/><text x="83.5172%" y="271.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="83.3466%" y="245" width="0.0793%" height="15" fill="rgb(208,77,27)" fg:x="1051" fg:w="1"/><text x="83.5966%" y="255.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="83.3466%" y="229" width="0.0793%" height="15" fill="rgb(250,204,28)" fg:x="1051" fg:w="1"/><text x="83.5966%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="83.5052%" y="245" width="0.1586%" height="15" fill="rgb(244,63,21)" fg:x="1053" fg:w="2"/><text x="83.7552%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="83.5052%" y="229" width="0.1586%" height="15" fill="rgb(236,85,44)" fg:x="1053" fg:w="2"/><text x="83.7552%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="83.5052%" y="213" width="0.1586%" height="15" fill="rgb(215,98,4)" fg:x="1053" fg:w="2"/><text x="83.7552%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="83.4259%" y="309" width="0.3172%" height="15" fill="rgb(235,38,11)" fg:x="1052" fg:w="4"/><text x="83.6759%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="83.4259%" y="293" width="0.3172%" height="15" fill="rgb(254,186,25)" fg:x="1052" fg:w="4"/><text x="83.6759%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="83.4259%" y="277" width="0.3172%" height="15" fill="rgb(225,55,31)" fg:x="1052" fg:w="4"/><text x="83.6759%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="83.5052%" y="261" width="0.2379%" height="15" fill="rgb(211,15,21)" fg:x="1053" fg:w="3"/><text x="83.7552%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="83.6638%" y="245" width="0.0793%" height="15" fill="rgb(215,187,41)" fg:x="1055" fg:w="1"/><text x="83.9138%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="83.6638%" y="229" width="0.0793%" height="15" fill="rgb(248,69,32)" fg:x="1055" fg:w="1"/><text x="83.9138%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="83.7431%" y="261" width="0.0793%" height="15" fill="rgb(252,102,52)" fg:x="1056" fg:w="1"/><text x="83.9931%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="83.7431%" y="277" width="0.1586%" height="15" fill="rgb(253,140,32)" fg:x="1056" fg:w="2"/><text x="83.9931%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="83.8224%" y="261" width="0.0793%" height="15" fill="rgb(216,56,42)" fg:x="1057" fg:w="1"/><text x="84.0724%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.8224%" y="245" width="0.0793%" height="15" fill="rgb(216,184,14)" fg:x="1057" fg:w="1"/><text x="84.0724%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.8224%" y="229" width="0.0793%" height="15" fill="rgb(237,187,27)" fg:x="1057" fg:w="1"/><text x="84.0724%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.8224%" y="213" width="0.0793%" height="15" fill="rgb(219,65,3)" fg:x="1057" fg:w="1"/><text x="84.0724%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (79 samples, 6.26%)</title><rect x="77.7161%" y="357" width="6.2649%" height="15" fill="rgb(245,83,25)" fg:x="980" fg:w="79"/><text x="77.9661%" y="367.50">&lt;regex::..</text></g><g><title>regex::builders::Builder::build_one_string (79 samples, 6.26%)</title><rect x="77.7161%" y="341" width="6.2649%" height="15" fill="rgb(214,205,45)" fg:x="980" fg:w="79"/><text x="77.9661%" y="351.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (78 samples, 6.19%)</title><rect x="77.7954%" y="325" width="6.1856%" height="15" fill="rgb(241,20,18)" fg:x="981" fg:w="78"/><text x="78.0454%" y="335.50">regex_au..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="83.7431%" y="309" width="0.2379%" height="15" fill="rgb(232,163,23)" fg:x="1056" fg:w="3"/><text x="83.9931%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="83.7431%" y="293" width="0.2379%" height="15" fill="rgb(214,5,46)" fg:x="1056" fg:w="3"/><text x="83.9931%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="83.9017%" y="277" width="0.0793%" height="15" fill="rgb(229,78,17)" fg:x="1058" fg:w="1"/><text x="84.1517%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="83.9810%" y="325" width="0.0793%" height="15" fill="rgb(248,89,10)" fg:x="1059" fg:w="1"/><text x="84.2310%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.9810%" y="309" width="0.0793%" height="15" fill="rgb(248,54,15)" fg:x="1059" fg:w="1"/><text x="84.2310%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="83.9810%" y="357" width="0.1586%" height="15" fill="rgb(223,116,6)" fg:x="1059" fg:w="2"/><text x="84.2310%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="83.9810%" y="341" width="0.1586%" height="15" fill="rgb(205,125,38)" fg:x="1059" fg:w="2"/><text x="84.2310%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="84.0603%" y="325" width="0.0793%" height="15" fill="rgb(251,78,38)" fg:x="1060" fg:w="1"/><text x="84.3103%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="84.0603%" y="309" width="0.0793%" height="15" fill="rgb(253,78,28)" fg:x="1060" fg:w="1"/><text x="84.3103%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.0603%" y="293" width="0.0793%" height="15" fill="rgb(209,120,3)" fg:x="1060" fg:w="1"/><text x="84.3103%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="84.3775%" y="277" width="0.1586%" height="15" fill="rgb(238,229,9)" fg:x="1064" fg:w="2"/><text x="84.6275%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="84.3775%" y="261" width="0.1586%" height="15" fill="rgb(253,159,18)" fg:x="1064" fg:w="2"/><text x="84.6275%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="84.3775%" y="245" width="0.1586%" height="15" fill="rgb(244,42,34)" fg:x="1064" fg:w="2"/><text x="84.6275%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="84.5361%" y="261" width="0.1586%" height="15" fill="rgb(224,8,7)" fg:x="1066" fg:w="2"/><text x="84.7861%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="84.6154%" y="245" width="0.0793%" height="15" fill="rgb(210,201,45)" fg:x="1067" fg:w="1"/><text x="84.8654%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="84.5361%" y="277" width="0.2379%" height="15" fill="rgb(252,185,21)" fg:x="1066" fg:w="3"/><text x="84.7861%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.6947%" y="261" width="0.0793%" height="15" fill="rgb(223,131,1)" fg:x="1068" fg:w="1"/><text x="84.9447%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="84.6947%" y="245" width="0.0793%" height="15" fill="rgb(245,141,16)" fg:x="1068" fg:w="1"/><text x="84.9447%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.71%)</title><rect x="84.2189%" y="309" width="0.7137%" height="15" fill="rgb(229,55,45)" fg:x="1062" fg:w="9"/><text x="84.4689%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.71%)</title><rect x="84.2189%" y="293" width="0.7137%" height="15" fill="rgb(208,92,15)" fg:x="1062" fg:w="9"/><text x="84.4689%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="84.7740%" y="277" width="0.1586%" height="15" fill="rgb(234,185,47)" fg:x="1069" fg:w="2"/><text x="85.0240%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (96 samples, 7.61%)</title><rect x="77.3989%" y="373" width="7.6130%" height="15" fill="rgb(253,104,50)" fg:x="976" fg:w="96"/><text x="77.6489%" y="383.50">indefinite..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.87%)</title><rect x="84.1396%" y="357" width="0.8723%" height="15" fill="rgb(205,70,7)" fg:x="1061" fg:w="11"/><text x="84.3896%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.87%)</title><rect x="84.1396%" y="341" width="0.8723%" height="15" fill="rgb(240,178,43)" fg:x="1061" fg:w="11"/><text x="84.3896%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.79%)</title><rect x="84.2189%" y="325" width="0.7930%" height="15" fill="rgb(214,112,2)" fg:x="1062" fg:w="10"/><text x="84.4689%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="84.9326%" y="309" width="0.0793%" height="15" fill="rgb(206,46,17)" fg:x="1071" fg:w="1"/><text x="85.1826%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="84.9326%" y="293" width="0.0793%" height="15" fill="rgb(225,220,16)" fg:x="1071" fg:w="1"/><text x="85.1826%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.9326%" y="277" width="0.0793%" height="15" fill="rgb(238,65,40)" fg:x="1071" fg:w="1"/><text x="85.1826%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.9326%" y="261" width="0.0793%" height="15" fill="rgb(230,151,21)" fg:x="1071" fg:w="1"/><text x="85.1826%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.9326%" y="245" width="0.0793%" height="15" fill="rgb(218,58,49)" fg:x="1071" fg:w="1"/><text x="85.1826%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="85.1705%" y="277" width="0.1586%" height="15" fill="rgb(219,179,14)" fg:x="1074" fg:w="2"/><text x="85.4205%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="85.0912%" y="309" width="0.3172%" height="15" fill="rgb(223,72,1)" fg:x="1073" fg:w="4"/><text x="85.3412%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="85.0912%" y="293" width="0.3172%" height="15" fill="rgb(238,126,10)" fg:x="1073" fg:w="4"/><text x="85.3412%" y="303.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="85.3291%" y="277" width="0.0793%" height="15" fill="rgb(224,206,38)" fg:x="1076" fg:w="1"/><text x="85.5791%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.4084%" y="309" width="0.0793%" height="15" fill="rgb(212,201,54)" fg:x="1077" fg:w="1"/><text x="85.6584%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="85.4877%" y="277" width="0.0793%" height="15" fill="rgb(218,154,48)" fg:x="1078" fg:w="1"/><text x="85.7377%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.4877%" y="261" width="0.0793%" height="15" fill="rgb(232,93,24)" fg:x="1078" fg:w="1"/><text x="85.7377%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.4877%" y="245" width="0.0793%" height="15" fill="rgb(245,30,21)" fg:x="1078" fg:w="1"/><text x="85.7377%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.4877%" y="229" width="0.0793%" height="15" fill="rgb(242,148,29)" fg:x="1078" fg:w="1"/><text x="85.7377%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="85.4877%" y="309" width="0.1586%" height="15" fill="rgb(244,153,54)" fg:x="1078" fg:w="2"/><text x="85.7377%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="85.4877%" y="293" width="0.1586%" height="15" fill="rgb(252,87,22)" fg:x="1078" fg:w="2"/><text x="85.7377%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="85.5670%" y="277" width="0.0793%" height="15" fill="rgb(210,51,29)" fg:x="1079" fg:w="1"/><text x="85.8170%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.6463%" y="293" width="0.0793%" height="15" fill="rgb(242,136,47)" fg:x="1080" fg:w="1"/><text x="85.8963%" y="303.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="85.8049%" y="277" width="0.1586%" height="15" fill="rgb(238,68,4)" fg:x="1082" fg:w="2"/><text x="86.0549%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (17 samples, 1.35%)</title><rect x="85.7256%" y="293" width="1.3481%" height="15" fill="rgb(242,161,30)" fg:x="1081" fg:w="17"/><text x="85.9756%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (14 samples, 1.11%)</title><rect x="85.9635%" y="277" width="1.1102%" height="15" fill="rgb(218,58,44)" fg:x="1084" fg:w="14"/><text x="86.2135%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.9944%" y="261" width="0.0793%" height="15" fill="rgb(252,125,32)" fg:x="1097" fg:w="1"/><text x="87.2444%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="87.0738%" y="293" width="0.0793%" height="15" fill="rgb(219,178,0)" fg:x="1098" fg:w="1"/><text x="87.3238%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="87.0738%" y="277" width="0.0793%" height="15" fill="rgb(213,152,7)" fg:x="1098" fg:w="1"/><text x="87.3238%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="87.2324%" y="277" width="0.3172%" height="15" fill="rgb(249,109,34)" fg:x="1100" fg:w="4"/><text x="87.4824%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="87.4703%" y="261" width="0.0793%" height="15" fill="rgb(232,96,21)" fg:x="1103" fg:w="1"/><text x="87.7203%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.4703%" y="245" width="0.0793%" height="15" fill="rgb(228,27,39)" fg:x="1103" fg:w="1"/><text x="87.7203%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="87.1531%" y="293" width="0.4758%" height="15" fill="rgb(211,182,52)" fg:x="1099" fg:w="6"/><text x="87.4031%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="87.5496%" y="277" width="0.0793%" height="15" fill="rgb(234,178,38)" fg:x="1104" fg:w="1"/><text x="87.7996%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (6 samples, 0.48%)</title><rect x="87.7082%" y="261" width="0.4758%" height="15" fill="rgb(221,111,3)" fg:x="1106" fg:w="6"/><text x="87.9582%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="87.8668%" y="245" width="0.3172%" height="15" fill="rgb(228,175,21)" fg:x="1108" fg:w="4"/><text x="88.1168%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.1047%" y="229" width="0.0793%" height="15" fill="rgb(228,174,43)" fg:x="1111" fg:w="1"/><text x="88.3547%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.1047%" y="213" width="0.0793%" height="15" fill="rgb(211,191,0)" fg:x="1111" fg:w="1"/><text x="88.3547%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.1047%" y="197" width="0.0793%" height="15" fill="rgb(253,117,3)" fg:x="1111" fg:w="1"/><text x="88.3547%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (9 samples, 0.71%)</title><rect x="88.1840%" y="261" width="0.7137%" height="15" fill="rgb(241,127,19)" fg:x="1112" fg:w="9"/><text x="88.4340%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (9 samples, 0.71%)</title><rect x="88.1840%" y="245" width="0.7137%" height="15" fill="rgb(218,103,12)" fg:x="1112" fg:w="9"/><text x="88.4340%" y="255.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (8 samples, 0.63%)</title><rect x="88.2633%" y="229" width="0.6344%" height="15" fill="rgb(236,214,43)" fg:x="1113" fg:w="8"/><text x="88.5133%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (18 samples, 1.43%)</title><rect x="87.6289%" y="277" width="1.4274%" height="15" fill="rgb(244,144,19)" fg:x="1105" fg:w="18"/><text x="87.8789%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (2 samples, 0.16%)</title><rect x="88.8977%" y="261" width="0.1586%" height="15" fill="rgb(246,188,10)" fg:x="1121" fg:w="2"/><text x="89.1477%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.9770%" y="245" width="0.0793%" height="15" fill="rgb(212,193,33)" fg:x="1122" fg:w="1"/><text x="89.2270%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.9770%" y="229" width="0.0793%" height="15" fill="rgb(241,51,29)" fg:x="1122" fg:w="1"/><text x="89.2270%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.9770%" y="213" width="0.0793%" height="15" fill="rgb(211,58,19)" fg:x="1122" fg:w="1"/><text x="89.2270%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (19 samples, 1.51%)</title><rect x="87.6289%" y="293" width="1.5067%" height="15" fill="rgb(229,111,26)" fg:x="1105" fg:w="19"/><text x="87.8789%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="89.0563%" y="277" width="0.0793%" height="15" fill="rgb(213,115,40)" fg:x="1123" fg:w="1"/><text x="89.3063%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="89.0563%" y="261" width="0.0793%" height="15" fill="rgb(209,56,44)" fg:x="1123" fg:w="1"/><text x="89.3063%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="89.1356%" y="293" width="0.1586%" height="15" fill="rgb(230,108,32)" fg:x="1124" fg:w="2"/><text x="89.3856%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="89.2149%" y="277" width="0.0793%" height="15" fill="rgb(216,165,31)" fg:x="1125" fg:w="1"/><text x="89.4649%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="89.2942%" y="245" width="0.0793%" height="15" fill="rgb(218,122,21)" fg:x="1126" fg:w="1"/><text x="89.5442%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.2942%" y="229" width="0.0793%" height="15" fill="rgb(223,224,47)" fg:x="1126" fg:w="1"/><text x="89.5442%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.2942%" y="213" width="0.0793%" height="15" fill="rgb(238,102,44)" fg:x="1126" fg:w="1"/><text x="89.5442%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.2942%" y="197" width="0.0793%" height="15" fill="rgb(236,46,40)" fg:x="1126" fg:w="1"/><text x="89.5442%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="89.3735%" y="229" width="0.0793%" height="15" fill="rgb(247,202,50)" fg:x="1127" fg:w="1"/><text x="89.6235%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="90.0872%" y="181" width="0.3965%" height="15" fill="rgb(209,99,20)" fg:x="1136" fg:w="5"/><text x="90.3372%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="90.4837%" y="181" width="0.0793%" height="15" fill="rgb(252,27,34)" fg:x="1141" fg:w="1"/><text x="90.7337%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="90.5630%" y="181" width="0.2379%" height="15" fill="rgb(215,206,23)" fg:x="1142" fg:w="3"/><text x="90.8130%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.7216%" y="165" width="0.0793%" height="15" fill="rgb(212,135,36)" fg:x="1144" fg:w="1"/><text x="90.9716%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.7216%" y="149" width="0.0793%" height="15" fill="rgb(240,189,1)" fg:x="1144" fg:w="1"/><text x="90.9716%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.7216%" y="133" width="0.0793%" height="15" fill="rgb(242,56,20)" fg:x="1144" fg:w="1"/><text x="90.9716%" y="143.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="91.0389%" y="149" width="0.1586%" height="15" fill="rgb(247,132,33)" fg:x="1148" fg:w="2"/><text x="91.2889%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="91.1975%" y="149" width="0.2379%" height="15" fill="rgb(208,149,11)" fg:x="1150" fg:w="3"/><text x="91.4475%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="91.1975%" y="133" width="0.2379%" height="15" fill="rgb(211,33,11)" fg:x="1150" fg:w="3"/><text x="91.4475%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.3561%" y="117" width="0.0793%" height="15" fill="rgb(221,29,38)" fg:x="1152" fg:w="1"/><text x="91.6061%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (10 samples, 0.79%)</title><rect x="90.8010%" y="181" width="0.7930%" height="15" fill="rgb(206,182,49)" fg:x="1145" fg:w="10"/><text x="91.0510%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (9 samples, 0.71%)</title><rect x="90.8803%" y="165" width="0.7137%" height="15" fill="rgb(216,140,1)" fg:x="1146" fg:w="9"/><text x="91.1303%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="91.4354%" y="149" width="0.1586%" height="15" fill="rgb(232,57,40)" fg:x="1153" fg:w="2"/><text x="91.6854%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.5147%" y="133" width="0.0793%" height="15" fill="rgb(224,186,18)" fg:x="1154" fg:w="1"/><text x="91.7647%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="91.5940%" y="181" width="0.0793%" height="15" fill="rgb(215,121,11)" fg:x="1155" fg:w="1"/><text x="91.8440%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="91.5940%" y="165" width="0.0793%" height="15" fill="rgb(245,147,10)" fg:x="1155" fg:w="1"/><text x="91.8440%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.5940%" y="149" width="0.0793%" height="15" fill="rgb(238,153,13)" fg:x="1155" fg:w="1"/><text x="91.8440%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (40 samples, 3.17%)</title><rect x="91.6733%" y="181" width="3.1721%" height="15" fill="rgb(233,108,0)" fg:x="1156" fg:w="40"/><text x="91.9233%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (40 samples, 3.17%)</title><rect x="91.6733%" y="165" width="3.1721%" height="15" fill="rgb(212,157,17)" fg:x="1156" fg:w="40"/><text x="91.9233%" y="175.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (40 samples, 3.17%)</title><rect x="91.6733%" y="149" width="3.1721%" height="15" fill="rgb(225,213,38)" fg:x="1156" fg:w="40"/><text x="91.9233%" y="159.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="94.8454%" y="181" width="0.2379%" height="15" fill="rgb(248,16,11)" fg:x="1196" fg:w="3"/><text x="95.0954%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 5.95%)</title><rect x="89.2942%" y="277" width="5.9477%" height="15" fill="rgb(241,33,4)" fg:x="1126" fg:w="75"/><text x="89.5442%" y="287.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (75 samples, 5.95%)</title><rect x="89.2942%" y="261" width="5.9477%" height="15" fill="rgb(222,26,43)" fg:x="1126" fg:w="75"/><text x="89.5442%" y="271.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (74 samples, 5.87%)</title><rect x="89.3735%" y="245" width="5.8684%" height="15" fill="rgb(243,29,36)" fg:x="1127" fg:w="74"/><text x="89.6235%" y="255.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (73 samples, 5.79%)</title><rect x="89.4528%" y="229" width="5.7891%" height="15" fill="rgb(241,9,27)" fg:x="1128" fg:w="73"/><text x="89.7028%" y="239.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (73 samples, 5.79%)</title><rect x="89.4528%" y="213" width="5.7891%" height="15" fill="rgb(205,117,26)" fg:x="1128" fg:w="73"/><text x="89.7028%" y="223.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (72 samples, 5.71%)</title><rect x="89.5321%" y="197" width="5.7098%" height="15" fill="rgb(209,80,39)" fg:x="1129" fg:w="72"/><text x="89.7821%" y="207.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="95.0833%" y="181" width="0.1586%" height="15" fill="rgb(239,155,6)" fg:x="1199" fg:w="2"/><text x="95.3333%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.1626%" y="165" width="0.0793%" height="15" fill="rgb(212,104,12)" fg:x="1200" fg:w="1"/><text x="95.4126%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.1626%" y="149" width="0.0793%" height="15" fill="rgb(234,204,3)" fg:x="1200" fg:w="1"/><text x="95.4126%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.1626%" y="133" width="0.0793%" height="15" fill="rgb(251,218,7)" fg:x="1200" fg:w="1"/><text x="95.4126%" y="143.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="95.3212%" y="261" width="0.1586%" height="15" fill="rgb(221,81,32)" fg:x="1202" fg:w="2"/><text x="95.5712%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.4798%" y="261" width="0.0793%" height="15" fill="rgb(214,152,26)" fg:x="1204" fg:w="1"/><text x="95.7298%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="95.5591%" y="261" width="0.1586%" height="15" fill="rgb(223,22,3)" fg:x="1205" fg:w="2"/><text x="95.8091%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (129 samples, 10.23%)</title><rect x="85.6463%" y="309" width="10.2300%" height="15" fill="rgb(207,174,7)" fg:x="1080" fg:w="129"/><text x="85.8963%" y="319.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (83 samples, 6.58%)</title><rect x="89.2942%" y="293" width="6.5821%" height="15" fill="rgb(224,19,52)" fg:x="1126" fg:w="83"/><text x="89.5442%" y="303.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.63%)</title><rect x="95.2419%" y="277" width="0.6344%" height="15" fill="rgb(228,24,14)" fg:x="1201" fg:w="8"/><text x="95.4919%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="95.7177%" y="261" width="0.1586%" height="15" fill="rgb(230,153,43)" fg:x="1207" fg:w="2"/><text x="95.9677%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="95.9556%" y="277" width="0.0793%" height="15" fill="rgb(231,106,12)" fg:x="1210" fg:w="1"/><text x="96.2056%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="95.9556%" y="261" width="0.0793%" height="15" fill="rgb(215,92,2)" fg:x="1210" fg:w="1"/><text x="96.2056%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="95.9556%" y="245" width="0.0793%" height="15" fill="rgb(249,143,25)" fg:x="1210" fg:w="1"/><text x="96.2056%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="95.9556%" y="229" width="0.0793%" height="15" fill="rgb(252,7,35)" fg:x="1210" fg:w="1"/><text x="96.2056%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="95.8763%" y="309" width="0.3172%" height="15" fill="rgb(216,69,40)" fg:x="1209" fg:w="4"/><text x="96.1263%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="95.9556%" y="293" width="0.2379%" height="15" fill="rgb(240,36,33)" fg:x="1210" fg:w="3"/><text x="96.2056%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="96.0349%" y="277" width="0.1586%" height="15" fill="rgb(231,128,14)" fg:x="1211" fg:w="2"/><text x="96.2849%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (2 samples, 0.16%)</title><rect x="96.0349%" y="261" width="0.1586%" height="15" fill="rgb(245,143,14)" fg:x="1211" fg:w="2"/><text x="96.2849%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.1935%" y="261" width="0.0793%" height="15" fill="rgb(222,130,28)" fg:x="1213" fg:w="1"/><text x="96.4435%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.1935%" y="245" width="0.0793%" height="15" fill="rgb(212,10,48)" fg:x="1213" fg:w="1"/><text x="96.4435%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.1935%" y="229" width="0.0793%" height="15" fill="rgb(254,118,45)" fg:x="1213" fg:w="1"/><text x="96.4435%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.3521%" y="245" width="0.0793%" height="15" fill="rgb(228,6,45)" fg:x="1215" fg:w="1"/><text x="96.6021%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.3521%" y="229" width="0.0793%" height="15" fill="rgb(241,18,35)" fg:x="1215" fg:w="1"/><text x="96.6021%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.3521%" y="213" width="0.0793%" height="15" fill="rgb(227,214,53)" fg:x="1215" fg:w="1"/><text x="96.6021%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="96.2728%" y="261" width="0.2379%" height="15" fill="rgb(224,107,51)" fg:x="1214" fg:w="3"/><text x="96.5228%" y="271.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="96.4314%" y="245" width="0.0793%" height="15" fill="rgb(248,60,28)" fg:x="1216" fg:w="1"/><text x="96.6814%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="96.1935%" y="277" width="0.3965%" height="15" fill="rgb(249,101,23)" fg:x="1213" fg:w="5"/><text x="96.4435%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="96.5107%" y="261" width="0.0793%" height="15" fill="rgb(228,51,19)" fg:x="1217" fg:w="1"/><text x="96.7607%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="96.5900%" y="277" width="0.1586%" height="15" fill="rgb(213,20,6)" fg:x="1218" fg:w="2"/><text x="96.8400%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="96.6693%" y="261" width="0.0793%" height="15" fill="rgb(212,124,10)" fg:x="1219" fg:w="1"/><text x="96.9193%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (149 samples, 11.82%)</title><rect x="85.0119%" y="357" width="11.8160%" height="15" fill="rgb(248,3,40)" fg:x="1072" fg:w="149"/><text x="85.2619%" y="367.50">&lt;regex::regex::str..</text></g><g><title>regex::builders::Builder::build_one_string (149 samples, 11.82%)</title><rect x="85.0119%" y="341" width="11.8160%" height="15" fill="rgb(223,178,23)" fg:x="1072" fg:w="149"/><text x="85.2619%" y="351.50">regex::builders::B..</text></g><g><title>regex_automata::meta::regex::Builder::build (149 samples, 11.82%)</title><rect x="85.0119%" y="325" width="11.8160%" height="15" fill="rgb(240,132,45)" fg:x="1072" fg:w="149"/><text x="85.2619%" y="335.50">regex_automata::me..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.63%)</title><rect x="96.1935%" y="309" width="0.6344%" height="15" fill="rgb(245,164,36)" fg:x="1213" fg:w="8"/><text x="96.4435%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.63%)</title><rect x="96.1935%" y="293" width="0.6344%" height="15" fill="rgb(231,188,53)" fg:x="1213" fg:w="8"/><text x="96.4435%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.7486%" y="277" width="0.0793%" height="15" fill="rgb(237,198,39)" fg:x="1220" fg:w="1"/><text x="96.9986%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.7486%" y="261" width="0.0793%" height="15" fill="rgb(223,120,35)" fg:x="1220" fg:w="1"/><text x="96.9986%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="96.7486%" y="245" width="0.0793%" height="15" fill="rgb(253,107,49)" fg:x="1220" fg:w="1"/><text x="96.9986%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="96.7486%" y="229" width="0.0793%" height="15" fill="rgb(216,44,31)" fg:x="1220" fg:w="1"/><text x="96.9986%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="96.8279%" y="357" width="0.1586%" height="15" fill="rgb(253,87,21)" fg:x="1221" fg:w="2"/><text x="97.0779%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="96.8279%" y="341" width="0.1586%" height="15" fill="rgb(226,18,2)" fg:x="1221" fg:w="2"/><text x="97.0779%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="96.8279%" y="325" width="0.1586%" height="15" fill="rgb(216,8,46)" fg:x="1221" fg:w="2"/><text x="97.0779%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="96.8279%" y="309" width="0.1586%" height="15" fill="rgb(226,140,39)" fg:x="1221" fg:w="2"/><text x="97.0779%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.9072%" y="293" width="0.0793%" height="15" fill="rgb(221,194,54)" fg:x="1222" fg:w="1"/><text x="97.1572%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="96.9865%" y="341" width="0.0793%" height="15" fill="rgb(213,92,11)" fg:x="1223" fg:w="1"/><text x="97.2365%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="96.9865%" y="325" width="0.0793%" height="15" fill="rgb(229,162,46)" fg:x="1223" fg:w="1"/><text x="97.2365%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="96.9865%" y="309" width="0.0793%" height="15" fill="rgb(214,111,36)" fg:x="1223" fg:w="1"/><text x="97.2365%" y="319.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="96.9865%" y="293" width="0.0793%" height="15" fill="rgb(207,6,21)" fg:x="1223" fg:w="1"/><text x="97.2365%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.3830%" y="229" width="0.0793%" height="15" fill="rgb(213,127,38)" fg:x="1228" fg:w="1"/><text x="97.6330%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="97.3830%" y="261" width="0.2379%" height="15" fill="rgb(238,118,32)" fg:x="1228" fg:w="3"/><text x="97.6330%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="97.3830%" y="245" width="0.2379%" height="15" fill="rgb(240,139,39)" fg:x="1228" fg:w="3"/><text x="97.6330%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="97.4623%" y="229" width="0.1586%" height="15" fill="rgb(235,10,37)" fg:x="1229" fg:w="2"/><text x="97.7123%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.6209%" y="261" width="0.0793%" height="15" fill="rgb(249,171,38)" fg:x="1231" fg:w="1"/><text x="97.8709%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (11 samples, 0.87%)</title><rect x="97.0658%" y="277" width="0.8723%" height="15" fill="rgb(242,144,32)" fg:x="1224" fg:w="11"/><text x="97.3158%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="97.7002%" y="261" width="0.2379%" height="15" fill="rgb(217,117,21)" fg:x="1232" fg:w="3"/><text x="97.9502%" y="271.50"></text></g><g><title>indefinite::rules::number::Number::check (164 samples, 13.01%)</title><rect x="85.0119%" y="373" width="13.0056%" height="15" fill="rgb(249,87,1)" fg:x="1072" fg:w="164"/><text x="85.2619%" y="383.50">indefinite::rules::n..</text></g><g><title>regex::regex::string::Regex::is_match_at (13 samples, 1.03%)</title><rect x="96.9865%" y="357" width="1.0309%" height="15" fill="rgb(248,196,48)" fg:x="1223" fg:w="13"/><text x="97.2365%" y="367.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.95%)</title><rect x="97.0658%" y="341" width="0.9516%" height="15" fill="rgb(251,206,33)" fg:x="1224" fg:w="12"/><text x="97.3158%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.95%)</title><rect x="97.0658%" y="325" width="0.9516%" height="15" fill="rgb(232,141,28)" fg:x="1224" fg:w="12"/><text x="97.3158%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.95%)</title><rect x="97.0658%" y="309" width="0.9516%" height="15" fill="rgb(209,167,14)" fg:x="1224" fg:w="12"/><text x="97.3158%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (12 samples, 0.95%)</title><rect x="97.0658%" y="293" width="0.9516%" height="15" fill="rgb(225,11,50)" fg:x="1224" fg:w="12"/><text x="97.3158%" y="303.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="97.9381%" y="277" width="0.0793%" height="15" fill="rgb(209,50,20)" fg:x="1235" fg:w="1"/><text x="98.1881%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.9381%" y="261" width="0.0793%" height="15" fill="rgb(212,17,46)" fg:x="1235" fg:w="1"/><text x="98.1881%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.9381%" y="245" width="0.0793%" height="15" fill="rgb(216,101,39)" fg:x="1235" fg:w="1"/><text x="98.1881%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9381%" y="229" width="0.0793%" height="15" fill="rgb(212,228,48)" fg:x="1235" fg:w="1"/><text x="98.1881%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.0967%" y="293" width="0.0793%" height="15" fill="rgb(250,6,50)" fg:x="1237" fg:w="1"/><text x="98.3467%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.0967%" y="277" width="0.0793%" height="15" fill="rgb(250,160,48)" fg:x="1237" fg:w="1"/><text x="98.3467%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="98.0967%" y="261" width="0.0793%" height="15" fill="rgb(244,216,33)" fg:x="1237" fg:w="1"/><text x="98.3467%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.0967%" y="245" width="0.0793%" height="15" fill="rgb(207,157,5)" fg:x="1237" fg:w="1"/><text x="98.3467%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.0967%" y="229" width="0.0793%" height="15" fill="rgb(228,199,8)" fg:x="1237" fg:w="1"/><text x="98.3467%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="98.0967%" y="213" width="0.0793%" height="15" fill="rgb(227,80,20)" fg:x="1237" fg:w="1"/><text x="98.3467%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.1761%" y="293" width="0.0793%" height="15" fill="rgb(222,9,33)" fg:x="1238" fg:w="1"/><text x="98.4261%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.1761%" y="277" width="0.0793%" height="15" fill="rgb(239,44,28)" fg:x="1238" fg:w="1"/><text x="98.4261%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.1761%" y="261" width="0.0793%" height="15" fill="rgb(249,187,43)" fg:x="1238" fg:w="1"/><text x="98.4261%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="98.2554%" y="277" width="0.3172%" height="15" fill="rgb(216,141,28)" fg:x="1239" fg:w="4"/><text x="98.5054%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="98.2554%" y="261" width="0.3172%" height="15" fill="rgb(230,154,53)" fg:x="1239" fg:w="4"/><text x="98.5054%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.6519%" y="245" width="0.0793%" height="15" fill="rgb(227,82,4)" fg:x="1244" fg:w="1"/><text x="98.9019%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.6519%" y="229" width="0.0793%" height="15" fill="rgb(220,107,16)" fg:x="1244" fg:w="1"/><text x="98.9019%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.6519%" y="213" width="0.0793%" height="15" fill="rgb(207,187,2)" fg:x="1244" fg:w="1"/><text x="98.9019%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (8 samples, 0.63%)</title><rect x="98.2554%" y="293" width="0.6344%" height="15" fill="rgb(210,162,52)" fg:x="1239" fg:w="8"/><text x="98.5054%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.32%)</title><rect x="98.5726%" y="277" width="0.3172%" height="15" fill="rgb(217,216,49)" fg:x="1243" fg:w="4"/><text x="98.8226%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="98.5726%" y="261" width="0.3172%" height="15" fill="rgb(218,146,49)" fg:x="1243" fg:w="4"/><text x="98.8226%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="98.7312%" y="245" width="0.1586%" height="15" fill="rgb(216,55,40)" fg:x="1245" fg:w="2"/><text x="98.9812%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserBuilder::build (1 samples, 0.08%)</title><rect x="98.8898%" y="293" width="0.0793%" height="15" fill="rgb(208,196,21)" fg:x="1247" fg:w="1"/><text x="99.1398%" y="303.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (13 samples, 1.03%)</title><rect x="98.0967%" y="341" width="1.0309%" height="15" fill="rgb(242,117,42)" fg:x="1237" fg:w="13"/><text x="98.3467%" y="351.50"></text></g><g><title>regex::builders::Builder::build_one_string (13 samples, 1.03%)</title><rect x="98.0967%" y="325" width="1.0309%" height="15" fill="rgb(210,11,23)" fg:x="1237" fg:w="13"/><text x="98.3467%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (13 samples, 1.03%)</title><rect x="98.0967%" y="309" width="1.0309%" height="15" fill="rgb(217,110,2)" fg:x="1237" fg:w="13"/><text x="98.3467%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="98.9691%" y="293" width="0.1586%" height="15" fill="rgb(229,77,54)" fg:x="1248" fg:w="2"/><text x="99.2191%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="98.9691%" y="277" width="0.1586%" height="15" fill="rgb(218,53,16)" fg:x="1248" fg:w="2"/><text x="99.2191%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="98.9691%" y="261" width="0.1586%" height="15" fill="rgb(215,38,13)" fg:x="1248" fg:w="2"/><text x="99.2191%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="98.9691%" y="245" width="0.1586%" height="15" fill="rgb(235,42,18)" fg:x="1248" fg:w="2"/><text x="99.2191%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="98.9691%" y="229" width="0.1586%" height="15" fill="rgb(219,66,54)" fg:x="1248" fg:w="2"/><text x="99.2191%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="99.0484%" y="213" width="0.0793%" height="15" fill="rgb(222,205,4)" fg:x="1249" fg:w="1"/><text x="99.2984%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="99.1277%" y="309" width="0.0793%" height="15" fill="rgb(227,213,46)" fg:x="1250" fg:w="1"/><text x="99.3777%" y="319.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="99.1277%" y="293" width="0.0793%" height="15" fill="rgb(250,145,42)" fg:x="1250" fg:w="1"/><text x="99.3777%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::add_match_pattern_id (1 samples, 0.08%)</title><rect x="99.1277%" y="277" width="0.0793%" height="15" fill="rgb(219,15,2)" fg:x="1250" fg:w="1"/><text x="99.3777%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="99.1277%" y="341" width="0.1586%" height="15" fill="rgb(231,181,52)" fg:x="1250" fg:w="2"/><text x="99.3777%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="99.1277%" y="325" width="0.1586%" height="15" fill="rgb(235,1,42)" fg:x="1250" fg:w="2"/><text x="99.3777%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="99.2070%" y="309" width="0.0793%" height="15" fill="rgb(249,88,27)" fg:x="1251" fg:w="1"/><text x="99.4570%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2070%" y="293" width="0.0793%" height="15" fill="rgb(235,145,16)" fg:x="1251" fg:w="1"/><text x="99.4570%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.2070%" y="277" width="0.0793%" height="15" fill="rgb(237,114,19)" fg:x="1251" fg:w="1"/><text x="99.4570%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="99.2070%" y="261" width="0.0793%" height="15" fill="rgb(238,51,50)" fg:x="1251" fg:w="1"/><text x="99.4570%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="99.2863%" y="341" width="0.0793%" height="15" fill="rgb(205,194,25)" fg:x="1252" fg:w="1"/><text x="99.5363%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="99.2863%" y="325" width="0.0793%" height="15" fill="rgb(215,203,17)" fg:x="1252" fg:w="1"/><text x="99.5363%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="99.2863%" y="309" width="0.0793%" height="15" fill="rgb(233,112,49)" fg:x="1252" fg:w="1"/><text x="99.5363%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.2863%" y="293" width="0.0793%" height="15" fill="rgb(241,130,26)" fg:x="1252" fg:w="1"/><text x="99.5363%" y="303.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (291 samples, 23.08%)</title><rect x="76.6059%" y="453" width="23.0769%" height="15" fill="rgb(252,223,19)" fg:x="966" fg:w="291"/><text x="76.8559%" y="463.50">&lt;&amp;kernel::model::entry::Entry as plug..</text></g><g><title>plugins_core::looking::model::qualify_name (284 samples, 22.52%)</title><rect x="77.1610%" y="437" width="22.5218%" height="15" fill="rgb(211,95,25)" fg:x="973" fg:w="284"/><text x="77.4110%" y="447.50">plugins_core::looking::model::qualif..</text></g><g><title>indefinite::indefinite (284 samples, 22.52%)</title><rect x="77.1610%" y="421" width="22.5218%" height="15" fill="rgb(251,182,27)" fg:x="973" fg:w="284"/><text x="77.4110%" y="431.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (283 samples, 22.44%)</title><rect x="77.2403%" y="405" width="22.4425%" height="15" fill="rgb(238,24,4)" fg:x="974" fg:w="283"/><text x="77.4903%" y="415.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (283 samples, 22.44%)</title><rect x="77.2403%" y="389" width="22.4425%" height="15" fill="rgb(224,220,25)" fg:x="974" fg:w="283"/><text x="77.4903%" y="399.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (21 samples, 1.67%)</title><rect x="98.0174%" y="373" width="1.6653%" height="15" fill="rgb(239,133,26)" fg:x="1236" fg:w="21"/><text x="98.2674%" y="383.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (20 samples, 1.59%)</title><rect x="98.0967%" y="357" width="1.5860%" height="15" fill="rgb(211,94,48)" fg:x="1237" fg:w="20"/><text x="98.3467%" y="367.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="99.3656%" y="341" width="0.3172%" height="15" fill="rgb(239,87,6)" fg:x="1253" fg:w="4"/><text x="99.6156%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="99.3656%" y="325" width="0.3172%" height="15" fill="rgb(227,62,0)" fg:x="1253" fg:w="4"/><text x="99.6156%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="99.3656%" y="309" width="0.3172%" height="15" fill="rgb(211,226,4)" fg:x="1253" fg:w="4"/><text x="99.6156%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="99.3656%" y="293" width="0.3172%" height="15" fill="rgb(253,38,52)" fg:x="1253" fg:w="4"/><text x="99.6156%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="99.3656%" y="277" width="0.3172%" height="15" fill="rgb(229,126,40)" fg:x="1253" fg:w="4"/><text x="99.6156%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="99.6035%" y="261" width="0.0793%" height="15" fill="rgb(229,165,44)" fg:x="1256" fg:w="1"/><text x="99.8535%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.6035%" y="245" width="0.0793%" height="15" fill="rgb(247,95,47)" fg:x="1256" fg:w="1"/><text x="99.8535%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="99.6035%" y="229" width="0.0793%" height="15" fill="rgb(216,140,30)" fg:x="1256" fg:w="1"/><text x="99.8535%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6828%" y="389" width="0.0793%" height="15" fill="rgb(246,214,8)" fg:x="1257" fg:w="1"/><text x="99.9328%" y="399.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="99.6828%" y="421" width="0.1586%" height="15" fill="rgb(227,224,15)" fg:x="1257" fg:w="2"/><text x="99.9328%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.6828%" y="405" width="0.1586%" height="15" fill="rgb(233,175,4)" fg:x="1257" fg:w="2"/><text x="99.9328%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.7621%" y="389" width="0.0793%" height="15" fill="rgb(221,66,45)" fg:x="1258" fg:w="1"/><text x="100.0121%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.7621%" y="373" width="0.0793%" height="15" fill="rgb(221,178,18)" fg:x="1258" fg:w="1"/><text x="100.0121%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.7621%" y="357" width="0.0793%" height="15" fill="rgb(213,81,29)" fg:x="1258" fg:w="1"/><text x="100.0121%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.7621%" y="341" width="0.0793%" height="15" fill="rgb(220,89,49)" fg:x="1258" fg:w="1"/><text x="100.0121%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.7621%" y="325" width="0.0793%" height="15" fill="rgb(227,60,33)" fg:x="1258" fg:w="1"/><text x="100.0121%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.7621%" y="309" width="0.0793%" height="15" fill="rgb(205,113,12)" fg:x="1258" fg:w="1"/><text x="100.0121%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.7621%" y="293" width="0.0793%" height="15" fill="rgb(211,32,1)" fg:x="1258" fg:w="1"/><text x="100.0121%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.7621%" y="277" width="0.0793%" height="15" fill="rgb(246,2,12)" fg:x="1258" fg:w="1"/><text x="100.0121%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.7621%" y="261" width="0.0793%" height="15" fill="rgb(243,37,27)" fg:x="1258" fg:w="1"/><text x="100.0121%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.7621%" y="245" width="0.0793%" height="15" fill="rgb(248,211,31)" fg:x="1258" fg:w="1"/><text x="100.0121%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.7621%" y="229" width="0.0793%" height="15" fill="rgb(242,146,47)" fg:x="1258" fg:w="1"/><text x="100.0121%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.7621%" y="213" width="0.0793%" height="15" fill="rgb(206,70,20)" fg:x="1258" fg:w="1"/><text x="100.0121%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.7621%" y="197" width="0.0793%" height="15" fill="rgb(215,10,51)" fg:x="1258" fg:w="1"/><text x="100.0121%" y="207.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (338 samples, 26.80%)</title><rect x="73.1166%" y="645" width="26.8041%" height="15" fill="rgb(243,178,53)" fg:x="922" fg:w="338"/><text x="73.3666%" y="655.50">&lt;engine::session::Session as kernel::action..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (338 samples, 26.80%)</title><rect x="73.1166%" y="629" width="26.8041%" height="15" fill="rgb(233,221,20)" fg:x="922" fg:w="338"/><text x="73.3666%" y="639.50">&lt;engine::perform::StandardPerformer as kern..</text></g><g><title>kernel::plugins::mw::apply_middleware (296 samples, 23.47%)</title><rect x="76.4473%" y="613" width="23.4734%" height="15" fill="rgb(218,95,35)" fg:x="964" fg:w="296"/><text x="76.6973%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (296 samples, 23.47%)</title><rect x="76.4473%" y="597" width="23.4734%" height="15" fill="rgb(229,13,5)" fg:x="964" fg:w="296"/><text x="76.6973%" y="607.50">kernel::plugins::mw::MiddlewareNext::..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (296 samples, 23.47%)</title><rect x="76.4473%" y="581" width="23.4734%" height="15" fill="rgb(252,164,30)" fg:x="964" fg:w="296"/><text x="76.6973%" y="591.50">&lt;plugins_dynlib::DynamicMiddleware as..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (295 samples, 23.39%)</title><rect x="76.5266%" y="565" width="23.3941%" height="15" fill="rgb(232,68,36)" fg:x="965" fg:w="295"/><text x="76.7766%" y="575.50">kernel::plugins::mw::MiddlewareNext::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (295 samples, 23.39%)</title><rect x="76.5266%" y="549" width="23.3941%" height="15" fill="rgb(219,59,54)" fg:x="965" fg:w="295"/><text x="76.7766%" y="559.50">core::ops::function::FnOnce::call_onc..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (295 samples, 23.39%)</title><rect x="76.5266%" y="533" width="23.3941%" height="15" fill="rgb(250,92,33)" fg:x="965" fg:w="295"/><text x="76.7766%" y="543.50">kernel::plugins::mw::MiddlewareNext::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (295 samples, 23.39%)</title><rect x="76.5266%" y="517" width="23.3941%" height="15" fill="rgb(229,162,54)" fg:x="965" fg:w="295"/><text x="76.7766%" y="527.50">core::ops::function::FnOnce::call_onc..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (295 samples, 23.39%)</title><rect x="76.5266%" y="501" width="23.3941%" height="15" fill="rgb(244,114,52)" fg:x="965" fg:w="295"/><text x="76.7766%" y="511.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops:..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (294 samples, 23.31%)</title><rect x="76.6059%" y="485" width="23.3148%" height="15" fill="rgb(212,211,43)" fg:x="966" fg:w="294"/><text x="76.8559%" y="495.50">&lt;plugins_core::looking::actions::Look..</text></g><g><title>plugins_core::looking::model::new_area_observation (294 samples, 23.31%)</title><rect x="76.6059%" y="469" width="23.3148%" height="15" fill="rgb(226,147,8)" fg:x="966" fg:w="294"/><text x="76.8559%" y="479.50">plugins_core::looking::model::new_are..</text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="99.6828%" y="453" width="0.2379%" height="15" fill="rgb(226,23,13)" fg:x="1257" fg:w="3"/><text x="99.9328%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="99.6828%" y="437" width="0.2379%" height="15" fill="rgb(240,63,4)" fg:x="1257" fg:w="3"/><text x="99.9328%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8414%" y="421" width="0.0793%" height="15" fill="rgb(221,1,32)" fg:x="1259" fg:w="1"/><text x="100.0914%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8414%" y="405" width="0.0793%" height="15" fill="rgb(242,117,10)" fg:x="1259" fg:w="1"/><text x="100.0914%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.8414%" y="389" width="0.0793%" height="15" fill="rgb(249,172,44)" fg:x="1259" fg:w="1"/><text x="100.0914%" y="399.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.8414%" y="373" width="0.0793%" height="15" fill="rgb(244,46,45)" fg:x="1259" fg:w="1"/><text x="100.0914%" y="383.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="99.8414%" y="357" width="0.0793%" height="15" fill="rgb(206,43,17)" fg:x="1259" fg:w="1"/><text x="100.0914%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8414%" y="341" width="0.0793%" height="15" fill="rgb(239,218,39)" fg:x="1259" fg:w="1"/><text x="100.0914%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8414%" y="325" width="0.0793%" height="15" fill="rgb(208,169,54)" fg:x="1259" fg:w="1"/><text x="100.0914%" y="335.50"></text></g><g><title>all (1,261 samples, 100%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(247,25,42)" fg:x="0" fg:w="1261"/><text x="0.2500%" y="1023.50"></text></g><g><title>simple-484c7248 (1,261 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(226,23,31)" fg:x="0" fg:w="1261"/><text x="0.2500%" y="1007.50">simple-484c7248</text></g><g><title>_start (1,261 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(247,16,28)" fg:x="0" fg:w="1261"/><text x="0.2500%" y="991.50">_start</text></g><g><title>__libc_start_main (1,261 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(231,147,38)" fg:x="0" fg:w="1261"/><text x="0.2500%" y="975.50">__libc_start_main</text></g><g><title>main (1,261 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(253,81,48)" fg:x="0" fg:w="1261"/><text x="0.2500%" y="959.50">main</text></g><g><title>std::rt::lang_start_internal (1,261 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(249,222,43)" fg:x="0" fg:w="1261"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,261 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(221,3,27)" fg:x="0" fg:w="1261"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,261 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(228,180,5)" fg:x="0" fg:w="1261"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,261 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(227,131,42)" fg:x="0" fg:w="1261"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,261 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(212,3,39)" fg:x="0" fg:w="1261"/><text x="0.2500%" y="879.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,261 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(226,45,5)" fg:x="0" fg:w="1261"/><text x="0.2500%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,261 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(215,167,45)" fg:x="0" fg:w="1261"/><text x="0.2500%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,261 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(250,218,53)" fg:x="0" fg:w="1261"/><text x="0.2500%" y="831.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,261 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(207,140,0)" fg:x="0" fg:w="1261"/><text x="0.2500%" y="815.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,261 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(238,133,51)" fg:x="0" fg:w="1261"/><text x="0.2500%" y="799.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,261 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(218,203,53)" fg:x="0" fg:w="1261"/><text x="0.2500%" y="783.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,261 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(226,184,25)" fg:x="0" fg:w="1261"/><text x="0.2500%" y="767.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,261 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(231,121,21)" fg:x="0" fg:w="1261"/><text x="0.2500%" y="751.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,261 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(251,14,34)" fg:x="0" fg:w="1261"/><text x="0.2500%" y="735.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (411 samples, 32.59%)</title><rect x="67.4068%" y="709" width="32.5932%" height="15" fill="rgb(249,193,11)" fg:x="850" fg:w="411"/><text x="67.6568%" y="719.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::ro..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (411 samples, 32.59%)</title><rect x="67.4068%" y="693" width="32.5932%" height="15" fill="rgb(220,172,37)" fg:x="850" fg:w="411"/><text x="67.6568%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (411 samples, 32.59%)</title><rect x="67.4068%" y="677" width="32.5932%" height="15" fill="rgb(231,229,43)" fg:x="850" fg:w="411"/><text x="67.6568%" y="687.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (339 samples, 26.88%)</title><rect x="73.1166%" y="661" width="26.8834%" height="15" fill="rgb(250,161,5)" fg:x="922" fg:w="339"/><text x="73.3666%" y="671.50">engine::session::Session::evaluate_and_perf..</text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="99.9207%" y="645" width="0.0793%" height="15" fill="rgb(218,225,18)" fg:x="1260" fg:w="1"/><text x="100.1707%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="99.9207%" y="629" width="0.0793%" height="15" fill="rgb(245,45,42)" fg:x="1260" fg:w="1"/><text x="100.1707%" y="639.50"></text></g><g><title>engine::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="99.9207%" y="613" width="0.0793%" height="15" fill="rgb(211,115,1)" fg:x="1260" fg:w="1"/><text x="100.1707%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.9207%" y="597" width="0.0793%" height="15" fill="rgb(248,133,52)" fg:x="1260" fg:w="1"/><text x="100.1707%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.9207%" y="581" width="0.0793%" height="15" fill="rgb(238,100,21)" fg:x="1260" fg:w="1"/><text x="100.1707%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.9207%" y="565" width="0.0793%" height="15" fill="rgb(247,144,11)" fg:x="1260" fg:w="1"/><text x="100.1707%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.9207%" y="549" width="0.0793%" height="15" fill="rgb(206,164,16)" fg:x="1260" fg:w="1"/><text x="100.1707%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9207%" y="533" width="0.0793%" height="15" fill="rgb(222,34,3)" fg:x="1260" fg:w="1"/><text x="100.1707%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.9207%" y="517" width="0.0793%" height="15" fill="rgb(248,82,4)" fg:x="1260" fg:w="1"/><text x="100.1707%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9207%" y="501" width="0.0793%" height="15" fill="rgb(228,81,46)" fg:x="1260" fg:w="1"/><text x="100.1707%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.9207%" y="485" width="0.0793%" height="15" fill="rgb(227,67,47)" fg:x="1260" fg:w="1"/><text x="100.1707%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9207%" y="469" width="0.0793%" height="15" fill="rgb(215,93,53)" fg:x="1260" fg:w="1"/><text x="100.1707%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.9207%" y="453" width="0.0793%" height="15" fill="rgb(248,194,39)" fg:x="1260" fg:w="1"/><text x="100.1707%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9207%" y="437" width="0.0793%" height="15" fill="rgb(215,5,19)" fg:x="1260" fg:w="1"/><text x="100.1707%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.9207%" y="421" width="0.0793%" height="15" fill="rgb(226,215,51)" fg:x="1260" fg:w="1"/><text x="100.1707%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9207%" y="405" width="0.0793%" height="15" fill="rgb(225,56,26)" fg:x="1260" fg:w="1"/><text x="100.1707%" y="415.50"></text></g></svg></svg>