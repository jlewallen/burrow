<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1110" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1093.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1093.00"> </text><svg id="frames" x="10" width="1180" total_samples="1275"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0784%" y="645" width="0.0784%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.3284%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1569%" y="613" width="0.0784%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.4069%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.31%)</title><rect x="0.0000%" y="693" width="0.3137%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="4"/><text x="0.2500%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="0.0000%" y="677" width="0.3137%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="4"/><text x="0.2500%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="0.0784%" y="661" width="0.2353%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="3"/><text x="0.3284%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.16%)</title><rect x="0.1569%" y="645" width="0.1569%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="2"/><text x="0.4069%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="0.1569%" y="629" width="0.1569%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="2"/><text x="0.4069%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::plugins::ArgumentType&gt; (1 samples, 0.08%)</title><rect x="0.2353%" y="613" width="0.0784%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="1"/><text x="0.4853%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.3137%" y="581" width="0.0784%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="1"/><text x="0.5637%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3137%" y="565" width="0.0784%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="1"/><text x="0.5637%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.5490%" y="565" width="0.1569%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="2"/><text x="0.7990%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.5490%" y="549" width="0.1569%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="2"/><text x="0.7990%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7059%" y="549" width="0.0784%" height="15" fill="rgb(216,20,37)" fg:x="9" fg:w="1"/><text x="0.9559%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.55%)</title><rect x="0.3137%" y="629" width="0.5490%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="7"/><text x="0.5637%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (7 samples, 0.55%)</title><rect x="0.3137%" y="613" width="0.5490%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="7"/><text x="0.5637%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.55%)</title><rect x="0.3137%" y="597" width="0.5490%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="7"/><text x="0.5637%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="0.3922%" y="581" width="0.4706%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="6"/><text x="0.6422%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.7059%" y="565" width="0.1569%" height="15" fill="rgb(210,31,41)" fg:x="9" fg:w="2"/><text x="0.9559%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="0.7843%" y="549" width="0.0784%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="1"/><text x="1.0343%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.7843%" y="533" width="0.0784%" height="15" fill="rgb(226,26,5)" fg:x="10" fg:w="1"/><text x="1.0343%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7843%" y="517" width="0.0784%" height="15" fill="rgb(249,33,26)" fg:x="10" fg:w="1"/><text x="1.0343%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.0196%" y="597" width="0.1569%" height="15" fill="rgb(235,183,28)" fg:x="13" fg:w="2"/><text x="1.2696%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.0980%" y="581" width="0.0784%" height="15" fill="rgb(221,5,38)" fg:x="14" fg:w="1"/><text x="1.3480%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1765%" y="581" width="0.0784%" height="15" fill="rgb(247,18,42)" fg:x="15" fg:w="1"/><text x="1.4265%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.2549%" y="581" width="0.0784%" height="15" fill="rgb(241,131,45)" fg:x="16" fg:w="1"/><text x="1.5049%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.3333%" y="565" width="0.0784%" height="15" fill="rgb(249,31,29)" fg:x="17" fg:w="1"/><text x="1.5833%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3333%" y="549" width="0.0784%" height="15" fill="rgb(225,111,53)" fg:x="17" fg:w="1"/><text x="1.5833%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 1.49%)</title><rect x="0.0000%" y="709" width="1.4902%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="19"/><text x="0.2500%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (15 samples, 1.18%)</title><rect x="0.3137%" y="693" width="1.1765%" height="15" fill="rgb(214,148,48)" fg:x="4" fg:w="15"/><text x="0.5637%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.18%)</title><rect x="0.3137%" y="677" width="1.1765%" height="15" fill="rgb(232,36,49)" fg:x="4" fg:w="15"/><text x="0.5637%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (15 samples, 1.18%)</title><rect x="0.3137%" y="661" width="1.1765%" height="15" fill="rgb(209,103,24)" fg:x="4" fg:w="15"/><text x="0.5637%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.18%)</title><rect x="0.3137%" y="645" width="1.1765%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="15"/><text x="0.5637%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.63%)</title><rect x="0.8627%" y="629" width="0.6275%" height="15" fill="rgb(213,181,19)" fg:x="11" fg:w="8"/><text x="1.1127%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.55%)</title><rect x="0.9412%" y="613" width="0.5490%" height="15" fill="rgb(254,191,54)" fg:x="12" fg:w="7"/><text x="1.1912%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="1.1765%" y="597" width="0.3137%" height="15" fill="rgb(241,83,37)" fg:x="15" fg:w="4"/><text x="1.4265%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.3333%" y="581" width="0.1569%" height="15" fill="rgb(233,36,39)" fg:x="17" fg:w="2"/><text x="1.5833%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.4118%" y="565" width="0.0784%" height="15" fill="rgb(226,3,54)" fg:x="18" fg:w="1"/><text x="1.6618%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="1.4118%" y="549" width="0.0784%" height="15" fill="rgb(245,192,40)" fg:x="18" fg:w="1"/><text x="1.6618%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.4118%" y="533" width="0.0784%" height="15" fill="rgb(238,167,29)" fg:x="18" fg:w="1"/><text x="1.6618%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.4118%" y="517" width="0.0784%" height="15" fill="rgb(232,182,51)" fg:x="18" fg:w="1"/><text x="1.6618%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.4118%" y="501" width="0.0784%" height="15" fill="rgb(231,60,39)" fg:x="18" fg:w="1"/><text x="1.6618%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.5686%" y="661" width="0.0784%" height="15" fill="rgb(208,69,12)" fg:x="20" fg:w="1"/><text x="1.8186%" y="671.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="1.7255%" y="581" width="0.1569%" height="15" fill="rgb(235,93,37)" fg:x="22" fg:w="2"/><text x="1.9755%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="1.7255%" y="565" width="0.1569%" height="15" fill="rgb(213,116,39)" fg:x="22" fg:w="2"/><text x="1.9755%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="1.7255%" y="549" width="0.1569%" height="15" fill="rgb(222,207,29)" fg:x="22" fg:w="2"/><text x="1.9755%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="1.7255%" y="533" width="0.1569%" height="15" fill="rgb(206,96,30)" fg:x="22" fg:w="2"/><text x="1.9755%" y="543.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="1.7255%" y="613" width="0.2353%" height="15" fill="rgb(218,138,4)" fg:x="22" fg:w="3"/><text x="1.9755%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="1.7255%" y="597" width="0.2353%" height="15" fill="rgb(250,191,14)" fg:x="22" fg:w="3"/><text x="1.9755%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="1.8824%" y="581" width="0.0784%" height="15" fill="rgb(239,60,40)" fg:x="24" fg:w="1"/><text x="2.1324%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="1.9608%" y="581" width="0.0784%" height="15" fill="rgb(206,27,48)" fg:x="25" fg:w="1"/><text x="2.2108%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="1.9608%" y="565" width="0.0784%" height="15" fill="rgb(225,35,8)" fg:x="25" fg:w="1"/><text x="2.2108%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="1.9608%" y="549" width="0.0784%" height="15" fill="rgb(250,213,24)" fg:x="25" fg:w="1"/><text x="2.2108%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.9608%" y="533" width="0.0784%" height="15" fill="rgb(247,123,22)" fg:x="25" fg:w="1"/><text x="2.2108%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.9608%" y="517" width="0.0784%" height="15" fill="rgb(231,138,38)" fg:x="25" fg:w="1"/><text x="2.2108%" y="527.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="1.9608%" y="613" width="0.1569%" height="15" fill="rgb(231,145,46)" fg:x="25" fg:w="2"/><text x="2.2108%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="1.9608%" y="597" width="0.1569%" height="15" fill="rgb(251,118,11)" fg:x="25" fg:w="2"/><text x="2.2108%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="2.0392%" y="581" width="0.0784%" height="15" fill="rgb(217,147,25)" fg:x="26" fg:w="1"/><text x="2.2892%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.0392%" y="565" width="0.0784%" height="15" fill="rgb(247,81,37)" fg:x="26" fg:w="1"/><text x="2.2892%" y="575.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="2.1176%" y="613" width="0.0784%" height="15" fill="rgb(209,12,38)" fg:x="27" fg:w="1"/><text x="2.3676%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="2.1176%" y="597" width="0.0784%" height="15" fill="rgb(227,1,9)" fg:x="27" fg:w="1"/><text x="2.3676%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="2.1176%" y="581" width="0.0784%" height="15" fill="rgb(248,47,43)" fg:x="27" fg:w="1"/><text x="2.3676%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.1176%" y="565" width="0.0784%" height="15" fill="rgb(221,10,30)" fg:x="27" fg:w="1"/><text x="2.3676%" y="575.50"></text></g><g><title>&lt;plugins_core::moving::actions::DeactivateRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.1961%" y="581" width="0.0784%" height="15" fill="rgb(210,229,1)" fg:x="28" fg:w="1"/><text x="2.4461%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.1961%" y="565" width="0.0784%" height="15" fill="rgb(222,148,37)" fg:x="28" fg:w="1"/><text x="2.4461%" y="575.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="2.1961%" y="613" width="0.1569%" height="15" fill="rgb(234,67,33)" fg:x="28" fg:w="2"/><text x="2.4461%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="2.1961%" y="597" width="0.1569%" height="15" fill="rgb(247,98,35)" fg:x="28" fg:w="2"/><text x="2.4461%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.2745%" y="581" width="0.0784%" height="15" fill="rgb(247,138,52)" fg:x="29" fg:w="1"/><text x="2.5245%" y="591.50"></text></g><g><title>&lt;plugins_rune::actions::RuneAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.3529%" y="581" width="0.0784%" height="15" fill="rgb(213,79,30)" fg:x="30" fg:w="1"/><text x="2.6029%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.3529%" y="565" width="0.0784%" height="15" fill="rgb(246,177,23)" fg:x="30" fg:w="1"/><text x="2.6029%" y="575.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="2.3529%" y="613" width="0.1569%" height="15" fill="rgb(230,62,27)" fg:x="30" fg:w="2"/><text x="2.6029%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="2.3529%" y="597" width="0.1569%" height="15" fill="rgb(216,154,8)" fg:x="30" fg:w="2"/><text x="2.6029%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.4314%" y="581" width="0.0784%" height="15" fill="rgb(244,35,45)" fg:x="31" fg:w="1"/><text x="2.6814%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (11 samples, 0.86%)</title><rect x="1.7255%" y="629" width="0.8627%" height="15" fill="rgb(251,115,12)" fg:x="22" fg:w="11"/><text x="1.9755%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="2.5098%" y="613" width="0.0784%" height="15" fill="rgb(240,54,50)" fg:x="32" fg:w="1"/><text x="2.7598%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="2.6667%" y="613" width="0.0784%" height="15" fill="rgb(233,84,52)" fg:x="34" fg:w="1"/><text x="2.9167%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="2.6667%" y="597" width="0.0784%" height="15" fill="rgb(207,117,47)" fg:x="34" fg:w="1"/><text x="2.9167%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="2.6667%" y="581" width="0.0784%" height="15" fill="rgb(249,43,39)" fg:x="34" fg:w="1"/><text x="2.9167%" y="591.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (5 samples, 0.39%)</title><rect x="2.5882%" y="629" width="0.3922%" height="15" fill="rgb(209,38,44)" fg:x="33" fg:w="5"/><text x="2.8382%" y="639.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="2.7451%" y="613" width="0.2353%" height="15" fill="rgb(236,212,23)" fg:x="35" fg:w="3"/><text x="2.9951%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="2.7451%" y="597" width="0.2353%" height="15" fill="rgb(242,79,21)" fg:x="35" fg:w="3"/><text x="2.9951%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="2.7451%" y="581" width="0.2353%" height="15" fill="rgb(211,96,35)" fg:x="35" fg:w="3"/><text x="2.9951%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="2.7451%" y="565" width="0.2353%" height="15" fill="rgb(253,215,40)" fg:x="35" fg:w="3"/><text x="2.9951%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="2.7451%" y="549" width="0.2353%" height="15" fill="rgb(211,81,21)" fg:x="35" fg:w="3"/><text x="2.9951%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="2.7451%" y="533" width="0.2353%" height="15" fill="rgb(208,190,38)" fg:x="35" fg:w="3"/><text x="2.9951%" y="543.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="2.7451%" y="517" width="0.2353%" height="15" fill="rgb(235,213,38)" fg:x="35" fg:w="3"/><text x="2.9951%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="3.1373%" y="565" width="0.2353%" height="15" fill="rgb(237,122,38)" fg:x="40" fg:w="3"/><text x="3.3873%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.2157%" y="549" width="0.1569%" height="15" fill="rgb(244,218,35)" fg:x="41" fg:w="2"/><text x="3.4657%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="3.2157%" y="533" width="0.1569%" height="15" fill="rgb(240,68,47)" fg:x="41" fg:w="2"/><text x="3.4657%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="3.2157%" y="517" width="0.1569%" height="15" fill="rgb(210,16,53)" fg:x="41" fg:w="2"/><text x="3.4657%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="3.2157%" y="501" width="0.1569%" height="15" fill="rgb(235,124,12)" fg:x="41" fg:w="2"/><text x="3.4657%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="3.2157%" y="485" width="0.1569%" height="15" fill="rgb(224,169,11)" fg:x="41" fg:w="2"/><text x="3.4657%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="3.2157%" y="469" width="0.1569%" height="15" fill="rgb(250,166,2)" fg:x="41" fg:w="2"/><text x="3.4657%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="3.2157%" y="453" width="0.1569%" height="15" fill="rgb(242,216,29)" fg:x="41" fg:w="2"/><text x="3.4657%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="3.2157%" y="437" width="0.1569%" height="15" fill="rgb(230,116,27)" fg:x="41" fg:w="2"/><text x="3.4657%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="3.2157%" y="421" width="0.1569%" height="15" fill="rgb(228,99,48)" fg:x="41" fg:w="2"/><text x="3.4657%" y="431.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="3.2157%" y="405" width="0.1569%" height="15" fill="rgb(253,11,6)" fg:x="41" fg:w="2"/><text x="3.4657%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="3.2157%" y="389" width="0.1569%" height="15" fill="rgb(247,143,39)" fg:x="41" fg:w="2"/><text x="3.4657%" y="399.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (7 samples, 0.55%)</title><rect x="2.9804%" y="613" width="0.5490%" height="15" fill="rgb(236,97,10)" fg:x="38" fg:w="7"/><text x="3.2304%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.55%)</title><rect x="2.9804%" y="597" width="0.5490%" height="15" fill="rgb(233,208,19)" fg:x="38" fg:w="7"/><text x="3.2304%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.47%)</title><rect x="3.0588%" y="581" width="0.4706%" height="15" fill="rgb(216,164,2)" fg:x="39" fg:w="6"/><text x="3.3088%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="3.3725%" y="565" width="0.1569%" height="15" fill="rgb(220,129,5)" fg:x="43" fg:w="2"/><text x="3.6225%" y="575.50"></text></g><g><title>glob::is_dir (8 samples, 0.63%)</title><rect x="3.5294%" y="565" width="0.6275%" height="15" fill="rgb(242,17,10)" fg:x="45" fg:w="8"/><text x="3.7794%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (8 samples, 0.63%)</title><rect x="3.5294%" y="549" width="0.6275%" height="15" fill="rgb(242,107,0)" fg:x="45" fg:w="8"/><text x="3.7794%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (8 samples, 0.63%)</title><rect x="3.5294%" y="533" width="0.6275%" height="15" fill="rgb(251,28,31)" fg:x="45" fg:w="8"/><text x="3.7794%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (8 samples, 0.63%)</title><rect x="3.5294%" y="517" width="0.6275%" height="15" fill="rgb(233,223,10)" fg:x="45" fg:w="8"/><text x="3.7794%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (8 samples, 0.63%)</title><rect x="3.5294%" y="501" width="0.6275%" height="15" fill="rgb(215,21,27)" fg:x="45" fg:w="8"/><text x="3.7794%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (8 samples, 0.63%)</title><rect x="3.5294%" y="485" width="0.6275%" height="15" fill="rgb(232,23,21)" fg:x="45" fg:w="8"/><text x="3.7794%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (8 samples, 0.63%)</title><rect x="3.5294%" y="469" width="0.6275%" height="15" fill="rgb(244,5,23)" fg:x="45" fg:w="8"/><text x="3.7794%" y="479.50"></text></g><g><title>statx (8 samples, 0.63%)</title><rect x="3.5294%" y="453" width="0.6275%" height="15" fill="rgb(226,81,46)" fg:x="45" fg:w="8"/><text x="3.7794%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="4.1569%" y="517" width="0.0784%" height="15" fill="rgb(247,70,30)" fg:x="53" fg:w="1"/><text x="4.4069%" y="527.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.78%)</title><rect x="3.5294%" y="597" width="0.7843%" height="15" fill="rgb(212,68,19)" fg:x="45" fg:w="10"/><text x="3.7794%" y="607.50"></text></g><g><title>glob::fill_todo (10 samples, 0.78%)</title><rect x="3.5294%" y="581" width="0.7843%" height="15" fill="rgb(240,187,13)" fg:x="45" fg:w="10"/><text x="3.7794%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="4.1569%" y="565" width="0.1569%" height="15" fill="rgb(223,113,26)" fg:x="53" fg:w="2"/><text x="4.4069%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="4.1569%" y="549" width="0.1569%" height="15" fill="rgb(206,192,2)" fg:x="53" fg:w="2"/><text x="4.4069%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="4.1569%" y="533" width="0.1569%" height="15" fill="rgb(241,108,4)" fg:x="53" fg:w="2"/><text x="4.4069%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="4.2353%" y="517" width="0.0784%" height="15" fill="rgb(247,173,49)" fg:x="54" fg:w="1"/><text x="4.4853%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="4.2353%" y="501" width="0.0784%" height="15" fill="rgb(224,114,35)" fg:x="54" fg:w="1"/><text x="4.4853%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="4.2353%" y="485" width="0.0784%" height="15" fill="rgb(245,159,27)" fg:x="54" fg:w="1"/><text x="4.4853%" y="495.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="4.2353%" y="469" width="0.0784%" height="15" fill="rgb(245,172,44)" fg:x="54" fg:w="1"/><text x="4.4853%" y="479.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="4.3137%" y="565" width="0.1569%" height="15" fill="rgb(236,23,11)" fg:x="55" fg:w="2"/><text x="4.5637%" y="575.50"></text></g><g><title>std::path::Component::as_os_str (2 samples, 0.16%)</title><rect x="4.3137%" y="549" width="0.1569%" height="15" fill="rgb(205,117,38)" fg:x="55" fg:w="2"/><text x="4.5637%" y="559.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (20 samples, 1.57%)</title><rect x="2.9804%" y="629" width="1.5686%" height="15" fill="rgb(237,72,25)" fg:x="38" fg:w="20"/><text x="3.2304%" y="639.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (13 samples, 1.02%)</title><rect x="3.5294%" y="613" width="1.0196%" height="15" fill="rgb(244,70,9)" fg:x="45" fg:w="13"/><text x="3.7794%" y="623.50"></text></g><g><title>glob::glob (3 samples, 0.24%)</title><rect x="4.3137%" y="597" width="0.2353%" height="15" fill="rgb(217,125,39)" fg:x="55" fg:w="3"/><text x="4.5637%" y="607.50"></text></g><g><title>glob::glob_with (3 samples, 0.24%)</title><rect x="4.3137%" y="581" width="0.2353%" height="15" fill="rgb(235,36,10)" fg:x="55" fg:w="3"/><text x="4.5637%" y="591.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="4.4706%" y="565" width="0.0784%" height="15" fill="rgb(251,123,47)" fg:x="57" fg:w="1"/><text x="4.7206%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.4706%" y="549" width="0.0784%" height="15" fill="rgb(221,13,13)" fg:x="57" fg:w="1"/><text x="4.7206%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.4706%" y="533" width="0.0784%" height="15" fill="rgb(238,131,9)" fg:x="57" fg:w="1"/><text x="4.7206%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.4706%" y="517" width="0.0784%" height="15" fill="rgb(211,50,8)" fg:x="57" fg:w="1"/><text x="4.7206%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.4706%" y="501" width="0.0784%" height="15" fill="rgb(245,182,24)" fg:x="57" fg:w="1"/><text x="4.7206%" y="511.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="4.6275%" y="613" width="0.2353%" height="15" fill="rgb(242,14,37)" fg:x="59" fg:w="3"/><text x="4.8775%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (43 samples, 3.37%)</title><rect x="1.6471%" y="645" width="3.3725%" height="15" fill="rgb(246,228,12)" fg:x="21" fg:w="43"/><text x="1.8971%" y="655.50">ker..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (6 samples, 0.47%)</title><rect x="4.5490%" y="629" width="0.4706%" height="15" fill="rgb(213,55,15)" fg:x="58" fg:w="6"/><text x="4.7990%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="4.8627%" y="613" width="0.1569%" height="15" fill="rgb(209,9,3)" fg:x="62" fg:w="2"/><text x="5.1127%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::plugins::ArgumentType&gt; (1 samples, 0.08%)</title><rect x="4.9412%" y="597" width="0.0784%" height="15" fill="rgb(230,59,30)" fg:x="63" fg:w="1"/><text x="5.1912%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.0196%" y="613" width="0.0784%" height="15" fill="rgb(209,121,21)" fg:x="64" fg:w="1"/><text x="5.2696%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (47 samples, 3.69%)</title><rect x="1.4902%" y="709" width="3.6863%" height="15" fill="rgb(220,109,13)" fg:x="19" fg:w="47"/><text x="1.7402%" y="719.50">&lt;eng..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (47 samples, 3.69%)</title><rect x="1.4902%" y="693" width="3.6863%" height="15" fill="rgb(232,18,1)" fg:x="19" fg:w="47"/><text x="1.7402%" y="703.50">engi..</text></g><g><title>engine::session::Session::new (47 samples, 3.69%)</title><rect x="1.4902%" y="677" width="3.6863%" height="15" fill="rgb(215,41,42)" fg:x="19" fg:w="47"/><text x="1.7402%" y="687.50">engi..</text></g><g><title>engine::session::Session::initialize (45 samples, 3.53%)</title><rect x="1.6471%" y="661" width="3.5294%" height="15" fill="rgb(224,123,36)" fg:x="21" fg:w="45"/><text x="1.8971%" y="671.50">eng..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="5.0196%" y="645" width="0.1569%" height="15" fill="rgb(240,125,3)" fg:x="64" fg:w="2"/><text x="5.2696%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="5.0196%" y="629" width="0.1569%" height="15" fill="rgb(205,98,50)" fg:x="64" fg:w="2"/><text x="5.2696%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.0980%" y="613" width="0.0784%" height="15" fill="rgb(205,185,37)" fg:x="65" fg:w="1"/><text x="5.3480%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.0980%" y="597" width="0.0784%" height="15" fill="rgb(238,207,15)" fg:x="65" fg:w="1"/><text x="5.3480%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.0980%" y="581" width="0.0784%" height="15" fill="rgb(213,199,42)" fg:x="65" fg:w="1"/><text x="5.3480%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.1765%" y="693" width="0.0784%" height="15" fill="rgb(235,201,11)" fg:x="66" fg:w="1"/><text x="5.4265%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.1765%" y="677" width="0.0784%" height="15" fill="rgb(207,46,11)" fg:x="66" fg:w="1"/><text x="5.4265%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.1765%" y="661" width="0.0784%" height="15" fill="rgb(241,35,35)" fg:x="66" fg:w="1"/><text x="5.4265%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.1765%" y="645" width="0.0784%" height="15" fill="rgb(243,32,47)" fg:x="66" fg:w="1"/><text x="5.4265%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::surround::Surroundings&gt; (1 samples, 0.08%)</title><rect x="5.2549%" y="693" width="0.0784%" height="15" fill="rgb(247,202,23)" fg:x="67" fg:w="1"/><text x="5.5049%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.2549%" y="677" width="0.0784%" height="15" fill="rgb(219,102,11)" fg:x="67" fg:w="1"/><text x="5.5049%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="5.3333%" y="677" width="0.0784%" height="15" fill="rgb(243,110,44)" fg:x="68" fg:w="1"/><text x="5.5833%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.4118%" y="645" width="0.0784%" height="15" fill="rgb(222,74,54)" fg:x="69" fg:w="1"/><text x="5.6618%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;engine::session::state::ModifiedEntity&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="5.4118%" y="629" width="0.0784%" height="15" fill="rgb(216,99,12)" fg:x="69" fg:w="1"/><text x="5.6618%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.4118%" y="613" width="0.0784%" height="15" fill="rgb(226,22,26)" fg:x="69" fg:w="1"/><text x="5.6618%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="5.4902%" y="581" width="0.0784%" height="15" fill="rgb(217,163,10)" fg:x="70" fg:w="1"/><text x="5.7402%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.4902%" y="565" width="0.0784%" height="15" fill="rgb(213,25,53)" fg:x="70" fg:w="1"/><text x="5.7402%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.5686%" y="565" width="0.0784%" height="15" fill="rgb(252,105,26)" fg:x="71" fg:w="1"/><text x="5.8186%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.5686%" y="549" width="0.0784%" height="15" fill="rgb(220,39,43)" fg:x="71" fg:w="1"/><text x="5.8186%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.6471%" y="517" width="0.0784%" height="15" fill="rgb(229,68,48)" fg:x="72" fg:w="1"/><text x="5.8971%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.6471%" y="501" width="0.0784%" height="15" fill="rgb(252,8,32)" fg:x="72" fg:w="1"/><text x="5.8971%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.6471%" y="485" width="0.0784%" height="15" fill="rgb(223,20,43)" fg:x="72" fg:w="1"/><text x="5.8971%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="5.6471%" y="549" width="0.1569%" height="15" fill="rgb(229,81,49)" fg:x="72" fg:w="2"/><text x="5.8971%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.6471%" y="533" width="0.1569%" height="15" fill="rgb(236,28,36)" fg:x="72" fg:w="2"/><text x="5.8971%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.7255%" y="517" width="0.0784%" height="15" fill="rgb(249,185,26)" fg:x="73" fg:w="1"/><text x="5.9755%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.7255%" y="501" width="0.0784%" height="15" fill="rgb(249,174,33)" fg:x="73" fg:w="1"/><text x="5.9755%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.7255%" y="485" width="0.0784%" height="15" fill="rgb(233,201,37)" fg:x="73" fg:w="1"/><text x="5.9755%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.7255%" y="469" width="0.0784%" height="15" fill="rgb(221,78,26)" fg:x="73" fg:w="1"/><text x="5.9755%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.8039%" y="549" width="0.0784%" height="15" fill="rgb(250,127,30)" fg:x="74" fg:w="1"/><text x="6.0539%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.8039%" y="533" width="0.0784%" height="15" fill="rgb(230,49,44)" fg:x="74" fg:w="1"/><text x="6.0539%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.9608%" y="533" width="0.0784%" height="15" fill="rgb(229,67,23)" fg:x="76" fg:w="1"/><text x="6.2108%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.9608%" y="517" width="0.0784%" height="15" fill="rgb(249,83,47)" fg:x="76" fg:w="1"/><text x="6.2108%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="5.9608%" y="501" width="0.0784%" height="15" fill="rgb(215,43,3)" fg:x="76" fg:w="1"/><text x="6.2108%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="5.8824%" y="549" width="0.2353%" height="15" fill="rgb(238,154,13)" fg:x="75" fg:w="3"/><text x="6.1324%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.0392%" y="533" width="0.0784%" height="15" fill="rgb(219,56,2)" fg:x="77" fg:w="1"/><text x="6.2892%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.0392%" y="517" width="0.0784%" height="15" fill="rgb(233,0,4)" fg:x="77" fg:w="1"/><text x="6.2892%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.55%)</title><rect x="5.6471%" y="565" width="0.5490%" height="15" fill="rgb(235,30,7)" fg:x="72" fg:w="7"/><text x="5.8971%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.1176%" y="549" width="0.0784%" height="15" fill="rgb(250,79,13)" fg:x="78" fg:w="1"/><text x="6.3676%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.71%)</title><rect x="5.5686%" y="581" width="0.7059%" height="15" fill="rgb(211,146,34)" fg:x="71" fg:w="9"/><text x="5.8186%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.1961%" y="565" width="0.0784%" height="15" fill="rgb(228,22,38)" fg:x="79" fg:w="1"/><text x="6.4461%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.86%)</title><rect x="5.4902%" y="597" width="0.8627%" height="15" fill="rgb(235,168,5)" fg:x="70" fg:w="11"/><text x="5.7402%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.2745%" y="581" width="0.0784%" height="15" fill="rgb(221,155,16)" fg:x="80" fg:w="1"/><text x="6.5245%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.2745%" y="565" width="0.0784%" height="15" fill="rgb(215,215,53)" fg:x="80" fg:w="1"/><text x="6.5245%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.2745%" y="549" width="0.0784%" height="15" fill="rgb(223,4,10)" fg:x="80" fg:w="1"/><text x="6.5245%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.5098%" y="533" width="0.0784%" height="15" fill="rgb(234,103,6)" fg:x="83" fg:w="1"/><text x="6.7598%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.39%)</title><rect x="6.3529%" y="597" width="0.3922%" height="15" fill="rgb(227,97,0)" fg:x="81" fg:w="5"/><text x="6.6029%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.39%)</title><rect x="6.3529%" y="581" width="0.3922%" height="15" fill="rgb(234,150,53)" fg:x="81" fg:w="5"/><text x="6.6029%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="6.4314%" y="565" width="0.3137%" height="15" fill="rgb(228,201,54)" fg:x="82" fg:w="4"/><text x="6.6814%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="6.5098%" y="549" width="0.2353%" height="15" fill="rgb(222,22,37)" fg:x="83" fg:w="3"/><text x="6.7598%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.5882%" y="533" width="0.1569%" height="15" fill="rgb(237,53,32)" fg:x="84" fg:w="2"/><text x="6.8382%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="6.6667%" y="517" width="0.0784%" height="15" fill="rgb(233,25,53)" fg:x="85" fg:w="1"/><text x="6.9167%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.6667%" y="501" width="0.0784%" height="15" fill="rgb(210,40,34)" fg:x="85" fg:w="1"/><text x="6.9167%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.6667%" y="485" width="0.0784%" height="15" fill="rgb(241,220,44)" fg:x="85" fg:w="1"/><text x="6.9167%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.6667%" y="469" width="0.0784%" height="15" fill="rgb(235,28,35)" fg:x="85" fg:w="1"/><text x="6.9167%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.6667%" y="453" width="0.0784%" height="15" fill="rgb(210,56,17)" fg:x="85" fg:w="1"/><text x="6.9167%" y="463.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="6.7451%" y="581" width="0.0784%" height="15" fill="rgb(224,130,29)" fg:x="86" fg:w="1"/><text x="6.9951%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.7451%" y="565" width="0.0784%" height="15" fill="rgb(235,212,8)" fg:x="86" fg:w="1"/><text x="6.9951%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="6.9020%" y="549" width="0.1569%" height="15" fill="rgb(223,33,50)" fg:x="88" fg:w="2"/><text x="7.1520%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="6.9020%" y="533" width="0.1569%" height="15" fill="rgb(219,149,13)" fg:x="88" fg:w="2"/><text x="7.1520%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="7.0588%" y="549" width="0.0784%" height="15" fill="rgb(250,156,29)" fg:x="90" fg:w="1"/><text x="7.3088%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.0588%" y="533" width="0.0784%" height="15" fill="rgb(216,193,19)" fg:x="90" fg:w="1"/><text x="7.3088%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="7.2157%" y="533" width="0.1569%" height="15" fill="rgb(216,135,14)" fg:x="92" fg:w="2"/><text x="7.4657%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="7.2157%" y="517" width="0.1569%" height="15" fill="rgb(241,47,5)" fg:x="92" fg:w="2"/><text x="7.4657%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="7.2157%" y="501" width="0.1569%" height="15" fill="rgb(233,42,35)" fg:x="92" fg:w="2"/><text x="7.4657%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="7.2157%" y="485" width="0.1569%" height="15" fill="rgb(231,13,6)" fg:x="92" fg:w="2"/><text x="7.4657%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="7.2157%" y="469" width="0.1569%" height="15" fill="rgb(207,181,40)" fg:x="92" fg:w="2"/><text x="7.4657%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.2941%" y="453" width="0.0784%" height="15" fill="rgb(254,173,49)" fg:x="93" fg:w="1"/><text x="7.5441%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.2941%" y="437" width="0.0784%" height="15" fill="rgb(221,1,38)" fg:x="93" fg:w="1"/><text x="7.5441%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.3725%" y="533" width="0.0784%" height="15" fill="rgb(206,124,46)" fg:x="94" fg:w="1"/><text x="7.6225%" y="543.50"></text></g><g><title>engine::session::Session::flush (28 samples, 2.20%)</title><rect x="5.3333%" y="693" width="2.1961%" height="15" fill="rgb(249,21,11)" fg:x="68" fg:w="28"/><text x="5.5833%" y="703.50">e..</text></g><g><title>engine::session::state::State::close (27 samples, 2.12%)</title><rect x="5.4118%" y="677" width="2.1176%" height="15" fill="rgb(222,201,40)" fg:x="69" fg:w="27"/><text x="5.6618%" y="687.50">e..</text></g><g><title>engine::session::state::State::flush_entities (27 samples, 2.12%)</title><rect x="5.4118%" y="661" width="2.1176%" height="15" fill="rgb(235,61,29)" fg:x="69" fg:w="27"/><text x="5.6618%" y="671.50">e..</text></g><g><title>core::iter::adapters::try_process (26 samples, 2.04%)</title><rect x="5.4902%" y="645" width="2.0392%" height="15" fill="rgb(219,207,3)" fg:x="70" fg:w="26"/><text x="5.7402%" y="655.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (26 samples, 2.04%)</title><rect x="5.4902%" y="629" width="2.0392%" height="15" fill="rgb(222,56,46)" fg:x="70" fg:w="26"/><text x="5.7402%" y="639.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (26 samples, 2.04%)</title><rect x="5.4902%" y="613" width="2.0392%" height="15" fill="rgb(239,76,54)" fg:x="70" fg:w="26"/><text x="5.7402%" y="623.50">e..</text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.78%)</title><rect x="6.7451%" y="597" width="0.7843%" height="15" fill="rgb(231,124,27)" fg:x="86" fg:w="10"/><text x="6.9951%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.71%)</title><rect x="6.8235%" y="581" width="0.7059%" height="15" fill="rgb(249,195,6)" fg:x="87" fg:w="9"/><text x="7.0735%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.71%)</title><rect x="6.8235%" y="565" width="0.7059%" height="15" fill="rgb(237,174,47)" fg:x="87" fg:w="9"/><text x="7.0735%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.39%)</title><rect x="7.1373%" y="549" width="0.3922%" height="15" fill="rgb(206,201,31)" fg:x="91" fg:w="5"/><text x="7.3873%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.4510%" y="533" width="0.0784%" height="15" fill="rgb(231,57,52)" fg:x="95" fg:w="1"/><text x="7.7010%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="7.4510%" y="517" width="0.0784%" height="15" fill="rgb(248,177,22)" fg:x="95" fg:w="1"/><text x="7.7010%" y="527.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="7.5294%" y="693" width="0.0784%" height="15" fill="rgb(215,211,37)" fg:x="96" fg:w="1"/><text x="7.7794%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="7.5294%" y="677" width="0.0784%" height="15" fill="rgb(241,128,51)" fg:x="96" fg:w="1"/><text x="7.7794%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="7.5294%" y="661" width="0.0784%" height="15" fill="rgb(227,165,31)" fg:x="96" fg:w="1"/><text x="7.7794%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.5294%" y="645" width="0.0784%" height="15" fill="rgb(228,167,24)" fg:x="96" fg:w="1"/><text x="7.7794%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.5294%" y="629" width="0.0784%" height="15" fill="rgb(228,143,12)" fg:x="96" fg:w="1"/><text x="7.7794%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.5294%" y="613" width="0.0784%" height="15" fill="rgb(249,149,8)" fg:x="96" fg:w="1"/><text x="7.7794%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.5294%" y="597" width="0.0784%" height="15" fill="rgb(243,35,44)" fg:x="96" fg:w="1"/><text x="7.7794%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.5294%" y="581" width="0.0784%" height="15" fill="rgb(246,89,9)" fg:x="96" fg:w="1"/><text x="7.7794%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6078%" y="645" width="0.0784%" height="15" fill="rgb(233,213,13)" fg:x="97" fg:w="1"/><text x="7.8578%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6078%" y="629" width="0.0784%" height="15" fill="rgb(233,141,41)" fg:x="97" fg:w="1"/><text x="7.8578%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6078%" y="613" width="0.0784%" height="15" fill="rgb(239,167,4)" fg:x="97" fg:w="1"/><text x="7.8578%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="7.6078%" y="677" width="0.1569%" height="15" fill="rgb(209,217,16)" fg:x="97" fg:w="2"/><text x="7.8578%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="7.6078%" y="661" width="0.1569%" height="15" fill="rgb(219,88,35)" fg:x="97" fg:w="2"/><text x="7.8578%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.6863%" y="645" width="0.0784%" height="15" fill="rgb(220,193,23)" fg:x="98" fg:w="1"/><text x="7.9363%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.6863%" y="629" width="0.0784%" height="15" fill="rgb(230,90,52)" fg:x="98" fg:w="1"/><text x="7.9363%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.6863%" y="613" width="0.0784%" height="15" fill="rgb(252,106,19)" fg:x="98" fg:w="1"/><text x="7.9363%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.6863%" y="597" width="0.0784%" height="15" fill="rgb(206,74,20)" fg:x="98" fg:w="1"/><text x="7.9363%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.6863%" y="581" width="0.0784%" height="15" fill="rgb(230,138,44)" fg:x="98" fg:w="1"/><text x="7.9363%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.6863%" y="565" width="0.0784%" height="15" fill="rgb(235,182,43)" fg:x="98" fg:w="1"/><text x="7.9363%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.6863%" y="549" width="0.0784%" height="15" fill="rgb(242,16,51)" fg:x="98" fg:w="1"/><text x="7.9363%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.6863%" y="533" width="0.0784%" height="15" fill="rgb(248,9,4)" fg:x="98" fg:w="1"/><text x="7.9363%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.6863%" y="517" width="0.0784%" height="15" fill="rgb(210,31,22)" fg:x="98" fg:w="1"/><text x="7.9363%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.6863%" y="501" width="0.0784%" height="15" fill="rgb(239,54,39)" fg:x="98" fg:w="1"/><text x="7.9363%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.6863%" y="485" width="0.0784%" height="15" fill="rgb(230,99,41)" fg:x="98" fg:w="1"/><text x="7.9363%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.6863%" y="469" width="0.0784%" height="15" fill="rgb(253,106,12)" fg:x="98" fg:w="1"/><text x="7.9363%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6863%" y="453" width="0.0784%" height="15" fill="rgb(213,46,41)" fg:x="98" fg:w="1"/><text x="7.9363%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="7.7647%" y="661" width="0.1569%" height="15" fill="rgb(215,133,35)" fg:x="99" fg:w="2"/><text x="8.0147%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="7.7647%" y="645" width="0.1569%" height="15" fill="rgb(213,28,5)" fg:x="99" fg:w="2"/><text x="8.0147%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="7.7647%" y="629" width="0.1569%" height="15" fill="rgb(215,77,49)" fg:x="99" fg:w="2"/><text x="8.0147%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.8431%" y="613" width="0.0784%" height="15" fill="rgb(248,100,22)" fg:x="100" fg:w="1"/><text x="8.0931%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.8431%" y="597" width="0.0784%" height="15" fill="rgb(208,67,9)" fg:x="100" fg:w="1"/><text x="8.0931%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="7.8431%" y="581" width="0.0784%" height="15" fill="rgb(219,133,21)" fg:x="100" fg:w="1"/><text x="8.0931%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="7.9216%" y="661" width="0.0784%" height="15" fill="rgb(246,46,29)" fg:x="101" fg:w="1"/><text x="8.1716%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="7.9216%" y="645" width="0.0784%" height="15" fill="rgb(246,185,52)" fg:x="101" fg:w="1"/><text x="8.1716%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="7.9216%" y="629" width="0.0784%" height="15" fill="rgb(252,136,11)" fg:x="101" fg:w="1"/><text x="8.1716%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.9216%" y="613" width="0.0784%" height="15" fill="rgb(219,138,53)" fg:x="101" fg:w="1"/><text x="8.1716%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.9216%" y="597" width="0.0784%" height="15" fill="rgb(211,51,23)" fg:x="101" fg:w="1"/><text x="8.1716%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.55%)</title><rect x="7.6078%" y="693" width="0.5490%" height="15" fill="rgb(247,221,28)" fg:x="97" fg:w="7"/><text x="7.8578%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.39%)</title><rect x="7.7647%" y="677" width="0.3922%" height="15" fill="rgb(251,222,45)" fg:x="99" fg:w="5"/><text x="8.0147%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="8.0000%" y="661" width="0.1569%" height="15" fill="rgb(217,162,53)" fg:x="102" fg:w="2"/><text x="8.2500%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="8.0000%" y="645" width="0.1569%" height="15" fill="rgb(229,93,14)" fg:x="102" fg:w="2"/><text x="8.2500%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="8.0000%" y="629" width="0.1569%" height="15" fill="rgb(209,67,49)" fg:x="102" fg:w="2"/><text x="8.2500%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="8.0784%" y="613" width="0.0784%" height="15" fill="rgb(213,87,29)" fg:x="103" fg:w="1"/><text x="8.3284%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="8.0784%" y="597" width="0.0784%" height="15" fill="rgb(205,151,52)" fg:x="103" fg:w="1"/><text x="8.3284%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.0784%" y="581" width="0.0784%" height="15" fill="rgb(253,215,39)" fg:x="103" fg:w="1"/><text x="8.3284%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0784%" y="565" width="0.0784%" height="15" fill="rgb(221,220,41)" fg:x="103" fg:w="1"/><text x="8.3284%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.0784%" y="549" width="0.0784%" height="15" fill="rgb(218,133,21)" fg:x="103" fg:w="1"/><text x="8.3284%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0784%" y="533" width="0.0784%" height="15" fill="rgb(221,193,43)" fg:x="103" fg:w="1"/><text x="8.3284%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.0784%" y="517" width="0.0784%" height="15" fill="rgb(240,128,52)" fg:x="103" fg:w="1"/><text x="8.3284%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.0784%" y="501" width="0.0784%" height="15" fill="rgb(253,114,12)" fg:x="103" fg:w="1"/><text x="8.3284%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.0784%" y="485" width="0.0784%" height="15" fill="rgb(215,223,47)" fg:x="103" fg:w="1"/><text x="8.3284%" y="495.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="8.1569%" y="693" width="0.0784%" height="15" fill="rgb(248,225,23)" fg:x="104" fg:w="1"/><text x="8.4069%" y="703.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="8.1569%" y="677" width="0.0784%" height="15" fill="rgb(250,108,0)" fg:x="104" fg:w="1"/><text x="8.4069%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="8.1569%" y="661" width="0.0784%" height="15" fill="rgb(228,208,7)" fg:x="104" fg:w="1"/><text x="8.4069%" y="671.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="8.1569%" y="645" width="0.0784%" height="15" fill="rgb(244,45,10)" fg:x="104" fg:w="1"/><text x="8.4069%" y="655.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="8.1569%" y="629" width="0.0784%" height="15" fill="rgb(207,125,25)" fg:x="104" fg:w="1"/><text x="8.4069%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="8.2353%" y="661" width="0.0784%" height="15" fill="rgb(210,195,18)" fg:x="105" fg:w="1"/><text x="8.4853%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="8.2353%" y="645" width="0.0784%" height="15" fill="rgb(249,80,12)" fg:x="105" fg:w="1"/><text x="8.4853%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.2353%" y="629" width="0.0784%" height="15" fill="rgb(221,65,9)" fg:x="105" fg:w="1"/><text x="8.4853%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="8.2353%" y="613" width="0.0784%" height="15" fill="rgb(235,49,36)" fg:x="105" fg:w="1"/><text x="8.4853%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.2353%" y="597" width="0.0784%" height="15" fill="rgb(225,32,20)" fg:x="105" fg:w="1"/><text x="8.4853%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.2353%" y="581" width="0.0784%" height="15" fill="rgb(215,141,46)" fg:x="105" fg:w="1"/><text x="8.4853%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.2353%" y="565" width="0.0784%" height="15" fill="rgb(250,160,47)" fg:x="105" fg:w="1"/><text x="8.4853%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.2353%" y="549" width="0.0784%" height="15" fill="rgb(216,222,40)" fg:x="105" fg:w="1"/><text x="8.4853%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.2353%" y="533" width="0.0784%" height="15" fill="rgb(234,217,39)" fg:x="105" fg:w="1"/><text x="8.4853%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.2353%" y="517" width="0.0784%" height="15" fill="rgb(207,178,40)" fg:x="105" fg:w="1"/><text x="8.4853%" y="527.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="8.3137%" y="661" width="0.0784%" height="15" fill="rgb(221,136,13)" fg:x="106" fg:w="1"/><text x="8.5637%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="8.3137%" y="645" width="0.0784%" height="15" fill="rgb(249,199,10)" fg:x="106" fg:w="1"/><text x="8.5637%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.3137%" y="629" width="0.0784%" height="15" fill="rgb(249,222,13)" fg:x="106" fg:w="1"/><text x="8.5637%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.3137%" y="613" width="0.0784%" height="15" fill="rgb(244,185,38)" fg:x="106" fg:w="1"/><text x="8.5637%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="8.3137%" y="597" width="0.0784%" height="15" fill="rgb(236,202,9)" fg:x="106" fg:w="1"/><text x="8.5637%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.3137%" y="581" width="0.0784%" height="15" fill="rgb(250,229,37)" fg:x="106" fg:w="1"/><text x="8.5637%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.3137%" y="565" width="0.0784%" height="15" fill="rgb(206,174,23)" fg:x="106" fg:w="1"/><text x="8.5637%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="8.3922%" y="645" width="0.0784%" height="15" fill="rgb(211,33,43)" fg:x="107" fg:w="1"/><text x="8.6422%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.3922%" y="629" width="0.0784%" height="15" fill="rgb(245,58,50)" fg:x="107" fg:w="1"/><text x="8.6422%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.3922%" y="613" width="0.0784%" height="15" fill="rgb(244,68,36)" fg:x="107" fg:w="1"/><text x="8.6422%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (4 samples, 0.31%)</title><rect x="8.2353%" y="693" width="0.3137%" height="15" fill="rgb(232,229,15)" fg:x="105" fg:w="4"/><text x="8.4853%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.31%)</title><rect x="8.2353%" y="677" width="0.3137%" height="15" fill="rgb(254,30,23)" fg:x="105" fg:w="4"/><text x="8.4853%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="8.3922%" y="661" width="0.1569%" height="15" fill="rgb(235,160,14)" fg:x="107" fg:w="2"/><text x="8.6422%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="8.4706%" y="645" width="0.0784%" height="15" fill="rgb(212,155,44)" fg:x="108" fg:w="1"/><text x="8.7206%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="8.4706%" y="629" width="0.0784%" height="15" fill="rgb(226,2,50)" fg:x="108" fg:w="1"/><text x="8.7206%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.4706%" y="613" width="0.0784%" height="15" fill="rgb(234,177,6)" fg:x="108" fg:w="1"/><text x="8.7206%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.4706%" y="597" width="0.0784%" height="15" fill="rgb(217,24,9)" fg:x="108" fg:w="1"/><text x="8.7206%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="8.6275%" y="677" width="0.0784%" height="15" fill="rgb(220,13,46)" fg:x="110" fg:w="1"/><text x="8.8775%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="8.6275%" y="661" width="0.0784%" height="15" fill="rgb(239,221,27)" fg:x="110" fg:w="1"/><text x="8.8775%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.6275%" y="645" width="0.0784%" height="15" fill="rgb(222,198,25)" fg:x="110" fg:w="1"/><text x="8.8775%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.6275%" y="629" width="0.0784%" height="15" fill="rgb(211,99,13)" fg:x="110" fg:w="1"/><text x="8.8775%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.6275%" y="613" width="0.0784%" height="15" fill="rgb(232,111,31)" fg:x="110" fg:w="1"/><text x="8.8775%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.6275%" y="597" width="0.0784%" height="15" fill="rgb(245,82,37)" fg:x="110" fg:w="1"/><text x="8.8775%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.7059%" y="565" width="0.0784%" height="15" fill="rgb(227,149,46)" fg:x="111" fg:w="1"/><text x="8.9559%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="8.7059%" y="677" width="0.2353%" height="15" fill="rgb(218,36,50)" fg:x="111" fg:w="3"/><text x="8.9559%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="8.7059%" y="661" width="0.2353%" height="15" fill="rgb(226,80,48)" fg:x="111" fg:w="3"/><text x="8.9559%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="8.7059%" y="645" width="0.2353%" height="15" fill="rgb(238,224,15)" fg:x="111" fg:w="3"/><text x="8.9559%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="8.7059%" y="629" width="0.2353%" height="15" fill="rgb(241,136,10)" fg:x="111" fg:w="3"/><text x="8.9559%" y="639.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="8.7059%" y="613" width="0.2353%" height="15" fill="rgb(208,32,45)" fg:x="111" fg:w="3"/><text x="8.9559%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="8.7059%" y="597" width="0.2353%" height="15" fill="rgb(207,135,9)" fg:x="111" fg:w="3"/><text x="8.9559%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="8.7059%" y="581" width="0.2353%" height="15" fill="rgb(206,86,44)" fg:x="111" fg:w="3"/><text x="8.9559%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="8.7843%" y="565" width="0.1569%" height="15" fill="rgb(245,177,15)" fg:x="112" fg:w="2"/><text x="9.0343%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.7843%" y="549" width="0.1569%" height="15" fill="rgb(206,64,50)" fg:x="112" fg:w="2"/><text x="9.0343%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="8.7843%" y="533" width="0.1569%" height="15" fill="rgb(234,36,40)" fg:x="112" fg:w="2"/><text x="9.0343%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.7843%" y="517" width="0.1569%" height="15" fill="rgb(213,64,8)" fg:x="112" fg:w="2"/><text x="9.0343%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.8627%" y="501" width="0.0784%" height="15" fill="rgb(210,75,36)" fg:x="113" fg:w="1"/><text x="9.1127%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.8627%" y="485" width="0.0784%" height="15" fill="rgb(229,88,21)" fg:x="113" fg:w="1"/><text x="9.1127%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="8.9412%" y="677" width="0.0784%" height="15" fill="rgb(252,204,47)" fg:x="114" fg:w="1"/><text x="9.1912%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.0196%" y="645" width="0.0784%" height="15" fill="rgb(208,77,27)" fg:x="115" fg:w="1"/><text x="9.2696%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.0196%" y="629" width="0.0784%" height="15" fill="rgb(221,76,26)" fg:x="115" fg:w="1"/><text x="9.2696%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.0196%" y="613" width="0.0784%" height="15" fill="rgb(225,139,18)" fg:x="115" fg:w="1"/><text x="9.2696%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.0196%" y="597" width="0.0784%" height="15" fill="rgb(230,137,11)" fg:x="115" fg:w="1"/><text x="9.2696%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.0196%" y="581" width="0.0784%" height="15" fill="rgb(212,28,1)" fg:x="115" fg:w="1"/><text x="9.2696%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.0196%" y="565" width="0.0784%" height="15" fill="rgb(248,164,17)" fg:x="115" fg:w="1"/><text x="9.2696%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.0196%" y="549" width="0.0784%" height="15" fill="rgb(222,171,42)" fg:x="115" fg:w="1"/><text x="9.2696%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="9.0196%" y="533" width="0.0784%" height="15" fill="rgb(243,84,45)" fg:x="115" fg:w="1"/><text x="9.2696%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="9.0196%" y="661" width="0.1569%" height="15" fill="rgb(252,49,23)" fg:x="115" fg:w="2"/><text x="9.2696%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.0980%" y="645" width="0.0784%" height="15" fill="rgb(215,19,7)" fg:x="116" fg:w="1"/><text x="9.3480%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.31%)</title><rect x="9.1765%" y="549" width="0.3137%" height="15" fill="rgb(238,81,41)" fg:x="117" fg:w="4"/><text x="9.4265%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.31%)</title><rect x="9.1765%" y="533" width="0.3137%" height="15" fill="rgb(210,199,37)" fg:x="117" fg:w="4"/><text x="9.4265%" y="543.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.31%)</title><rect x="9.1765%" y="517" width="0.3137%" height="15" fill="rgb(244,192,49)" fg:x="117" fg:w="4"/><text x="9.4265%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="9.2549%" y="501" width="0.2353%" height="15" fill="rgb(226,211,11)" fg:x="118" fg:w="3"/><text x="9.5049%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="9.3333%" y="485" width="0.1569%" height="15" fill="rgb(236,162,54)" fg:x="119" fg:w="2"/><text x="9.5833%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="9.6471%" y="533" width="0.1569%" height="15" fill="rgb(220,229,9)" fg:x="123" fg:w="2"/><text x="9.8971%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="9.6471%" y="517" width="0.1569%" height="15" fill="rgb(250,87,22)" fg:x="123" fg:w="2"/><text x="9.8971%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.7255%" y="501" width="0.0784%" height="15" fill="rgb(239,43,17)" fg:x="124" fg:w="1"/><text x="9.9755%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.7255%" y="485" width="0.0784%" height="15" fill="rgb(231,177,25)" fg:x="124" fg:w="1"/><text x="9.9755%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="9.8824%" y="517" width="0.0784%" height="15" fill="rgb(219,179,1)" fg:x="126" fg:w="1"/><text x="10.1324%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.8824%" y="501" width="0.0784%" height="15" fill="rgb(238,219,53)" fg:x="126" fg:w="1"/><text x="10.1324%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.8824%" y="485" width="0.0784%" height="15" fill="rgb(232,167,36)" fg:x="126" fg:w="1"/><text x="10.1324%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.8824%" y="469" width="0.0784%" height="15" fill="rgb(244,19,51)" fg:x="126" fg:w="1"/><text x="10.1324%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.8824%" y="453" width="0.0784%" height="15" fill="rgb(224,6,22)" fg:x="126" fg:w="1"/><text x="10.1324%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.9608%" y="517" width="0.0784%" height="15" fill="rgb(224,145,5)" fg:x="127" fg:w="1"/><text x="10.2108%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.31%)</title><rect x="10.0392%" y="501" width="0.3137%" height="15" fill="rgb(234,130,49)" fg:x="128" fg:w="4"/><text x="10.2892%" y="511.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.31%)</title><rect x="10.0392%" y="485" width="0.3137%" height="15" fill="rgb(254,6,2)" fg:x="128" fg:w="4"/><text x="10.2892%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="10.1176%" y="469" width="0.2353%" height="15" fill="rgb(208,96,46)" fg:x="129" fg:w="3"/><text x="10.3676%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="10.1176%" y="453" width="0.2353%" height="15" fill="rgb(239,3,39)" fg:x="129" fg:w="3"/><text x="10.3676%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="10.1176%" y="437" width="0.2353%" height="15" fill="rgb(233,210,1)" fg:x="129" fg:w="3"/><text x="10.3676%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="10.1176%" y="421" width="0.2353%" height="15" fill="rgb(244,137,37)" fg:x="129" fg:w="3"/><text x="10.3676%" y="431.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="10.1176%" y="405" width="0.2353%" height="15" fill="rgb(240,136,2)" fg:x="129" fg:w="3"/><text x="10.3676%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.39%)</title><rect x="10.3529%" y="485" width="0.3922%" height="15" fill="rgb(239,18,37)" fg:x="132" fg:w="5"/><text x="10.6029%" y="495.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.31%)</title><rect x="10.4314%" y="469" width="0.3137%" height="15" fill="rgb(218,185,22)" fg:x="133" fg:w="4"/><text x="10.6814%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.31%)</title><rect x="10.4314%" y="453" width="0.3137%" height="15" fill="rgb(225,218,4)" fg:x="133" fg:w="4"/><text x="10.6814%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.31%)</title><rect x="10.4314%" y="437" width="0.3137%" height="15" fill="rgb(230,182,32)" fg:x="133" fg:w="4"/><text x="10.6814%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.6667%" y="421" width="0.0784%" height="15" fill="rgb(242,56,43)" fg:x="136" fg:w="1"/><text x="10.9167%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.6667%" y="405" width="0.0784%" height="15" fill="rgb(233,99,24)" fg:x="136" fg:w="1"/><text x="10.9167%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="10.6667%" y="389" width="0.0784%" height="15" fill="rgb(234,209,42)" fg:x="136" fg:w="1"/><text x="10.9167%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.78%)</title><rect x="10.0392%" y="517" width="0.7843%" height="15" fill="rgb(227,7,12)" fg:x="128" fg:w="10"/><text x="10.2892%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.47%)</title><rect x="10.3529%" y="501" width="0.4706%" height="15" fill="rgb(245,203,43)" fg:x="132" fg:w="6"/><text x="10.6029%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.7451%" y="485" width="0.0784%" height="15" fill="rgb(238,205,33)" fg:x="137" fg:w="1"/><text x="10.9951%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.10%)</title><rect x="9.8039%" y="533" width="1.0980%" height="15" fill="rgb(231,56,7)" fg:x="125" fg:w="14"/><text x="10.0539%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.8235%" y="517" width="0.0784%" height="15" fill="rgb(244,186,29)" fg:x="138" fg:w="1"/><text x="11.0735%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (24 samples, 1.88%)</title><rect x="9.1765%" y="565" width="1.8824%" height="15" fill="rgb(234,111,31)" fg:x="117" fg:w="24"/><text x="9.4265%" y="575.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (20 samples, 1.57%)</title><rect x="9.4902%" y="549" width="1.5686%" height="15" fill="rgb(241,149,10)" fg:x="121" fg:w="20"/><text x="9.7402%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.9020%" y="533" width="0.1569%" height="15" fill="rgb(249,206,44)" fg:x="139" fg:w="2"/><text x="11.1520%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.0588%" y="501" width="0.0784%" height="15" fill="rgb(251,153,30)" fg:x="141" fg:w="1"/><text x="11.3088%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.1373%" y="501" width="0.0784%" height="15" fill="rgb(239,152,38)" fg:x="142" fg:w="1"/><text x="11.3873%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.39%)</title><rect x="11.0588%" y="565" width="0.3922%" height="15" fill="rgb(249,139,47)" fg:x="141" fg:w="5"/><text x="11.3088%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.39%)</title><rect x="11.0588%" y="549" width="0.3922%" height="15" fill="rgb(244,64,35)" fg:x="141" fg:w="5"/><text x="11.3088%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.39%)</title><rect x="11.0588%" y="533" width="0.3922%" height="15" fill="rgb(216,46,15)" fg:x="141" fg:w="5"/><text x="11.3088%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.39%)</title><rect x="11.0588%" y="517" width="0.3922%" height="15" fill="rgb(250,74,19)" fg:x="141" fg:w="5"/><text x="11.3088%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="11.2157%" y="501" width="0.2353%" height="15" fill="rgb(249,42,33)" fg:x="143" fg:w="3"/><text x="11.4657%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.24%)</title><rect x="11.2157%" y="485" width="0.2353%" height="15" fill="rgb(242,149,17)" fg:x="143" fg:w="3"/><text x="11.4657%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="11.3725%" y="469" width="0.0784%" height="15" fill="rgb(244,29,21)" fg:x="145" fg:w="1"/><text x="11.6225%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.3725%" y="453" width="0.0784%" height="15" fill="rgb(220,130,37)" fg:x="145" fg:w="1"/><text x="11.6225%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.4510%" y="501" width="0.0784%" height="15" fill="rgb(211,67,2)" fg:x="146" fg:w="1"/><text x="11.7010%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="11.4510%" y="549" width="0.1569%" height="15" fill="rgb(235,68,52)" fg:x="146" fg:w="2"/><text x="11.7010%" y="559.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (2 samples, 0.16%)</title><rect x="11.4510%" y="533" width="0.1569%" height="15" fill="rgb(246,142,3)" fg:x="146" fg:w="2"/><text x="11.7010%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="11.4510%" y="517" width="0.1569%" height="15" fill="rgb(241,25,7)" fg:x="146" fg:w="2"/><text x="11.7010%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="11.5294%" y="501" width="0.0784%" height="15" fill="rgb(242,119,39)" fg:x="147" fg:w="1"/><text x="11.7794%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.6863%" y="517" width="0.1569%" height="15" fill="rgb(241,98,45)" fg:x="149" fg:w="2"/><text x="11.9363%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.7647%" y="501" width="0.0784%" height="15" fill="rgb(254,28,30)" fg:x="150" fg:w="1"/><text x="12.0147%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="11.8431%" y="517" width="0.0784%" height="15" fill="rgb(241,142,54)" fg:x="151" fg:w="1"/><text x="12.0931%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.8431%" y="501" width="0.0784%" height="15" fill="rgb(222,85,15)" fg:x="151" fg:w="1"/><text x="12.0931%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="11.9216%" y="517" width="0.0784%" height="15" fill="rgb(210,85,47)" fg:x="152" fg:w="1"/><text x="12.1716%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.9216%" y="501" width="0.0784%" height="15" fill="rgb(224,206,25)" fg:x="152" fg:w="1"/><text x="12.1716%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.9216%" y="485" width="0.0784%" height="15" fill="rgb(243,201,19)" fg:x="152" fg:w="1"/><text x="12.1716%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="12.0784%" y="485" width="0.0784%" height="15" fill="rgb(236,59,4)" fg:x="154" fg:w="1"/><text x="12.3284%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="12.3137%" y="453" width="0.0784%" height="15" fill="rgb(254,179,45)" fg:x="157" fg:w="1"/><text x="12.5637%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.47%)</title><rect x="12.1569%" y="485" width="0.4706%" height="15" fill="rgb(226,14,10)" fg:x="155" fg:w="6"/><text x="12.4069%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.47%)</title><rect x="12.1569%" y="469" width="0.4706%" height="15" fill="rgb(244,27,41)" fg:x="155" fg:w="6"/><text x="12.4069%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="12.3922%" y="453" width="0.2353%" height="15" fill="rgb(235,35,32)" fg:x="158" fg:w="3"/><text x="12.6422%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="12.3922%" y="437" width="0.2353%" height="15" fill="rgb(218,68,31)" fg:x="158" fg:w="3"/><text x="12.6422%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.63%)</title><rect x="12.0784%" y="501" width="0.6275%" height="15" fill="rgb(207,120,37)" fg:x="154" fg:w="8"/><text x="12.3284%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="12.6275%" y="485" width="0.0784%" height="15" fill="rgb(227,98,0)" fg:x="161" fg:w="1"/><text x="12.8775%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.7059%" y="501" width="0.0784%" height="15" fill="rgb(207,7,3)" fg:x="162" fg:w="1"/><text x="12.9559%" y="511.50"></text></g><g><title>engine::session::Session::flush (50 samples, 3.92%)</title><rect x="9.0196%" y="677" width="3.9216%" height="15" fill="rgb(206,98,19)" fg:x="115" fg:w="50"/><text x="9.2696%" y="687.50">engi..</text></g><g><title>engine::session::Session::save_changes (48 samples, 3.76%)</title><rect x="9.1765%" y="661" width="3.7647%" height="15" fill="rgb(217,5,26)" fg:x="117" fg:w="48"/><text x="9.4265%" y="671.50">engi..</text></g><g><title>engine::session::state::State::close (48 samples, 3.76%)</title><rect x="9.1765%" y="645" width="3.7647%" height="15" fill="rgb(235,190,38)" fg:x="117" fg:w="48"/><text x="9.4265%" y="655.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (48 samples, 3.76%)</title><rect x="9.1765%" y="629" width="3.7647%" height="15" fill="rgb(247,86,24)" fg:x="117" fg:w="48"/><text x="9.4265%" y="639.50">engi..</text></g><g><title>core::iter::adapters::try_process (48 samples, 3.76%)</title><rect x="9.1765%" y="613" width="3.7647%" height="15" fill="rgb(205,101,16)" fg:x="117" fg:w="48"/><text x="9.4265%" y="623.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (48 samples, 3.76%)</title><rect x="9.1765%" y="597" width="3.7647%" height="15" fill="rgb(246,168,33)" fg:x="117" fg:w="48"/><text x="9.4265%" y="607.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (48 samples, 3.76%)</title><rect x="9.1765%" y="581" width="3.7647%" height="15" fill="rgb(231,114,1)" fg:x="117" fg:w="48"/><text x="9.4265%" y="591.50">engi..</text></g><g><title>kernel::model::any_entity_changes (19 samples, 1.49%)</title><rect x="11.4510%" y="565" width="1.4902%" height="15" fill="rgb(207,184,53)" fg:x="146" fg:w="19"/><text x="11.7010%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (17 samples, 1.33%)</title><rect x="11.6078%" y="549" width="1.3333%" height="15" fill="rgb(224,95,51)" fg:x="148" fg:w="17"/><text x="11.8578%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (17 samples, 1.33%)</title><rect x="11.6078%" y="533" width="1.3333%" height="15" fill="rgb(212,188,45)" fg:x="148" fg:w="17"/><text x="11.8578%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (12 samples, 0.94%)</title><rect x="12.0000%" y="517" width="0.9412%" height="15" fill="rgb(223,154,38)" fg:x="153" fg:w="12"/><text x="12.2500%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="12.7843%" y="501" width="0.1569%" height="15" fill="rgb(251,22,52)" fg:x="163" fg:w="2"/><text x="13.0343%" y="511.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="12.9412%" y="677" width="0.0784%" height="15" fill="rgb(229,209,22)" fg:x="165" fg:w="1"/><text x="13.1912%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="12.9412%" y="661" width="0.0784%" height="15" fill="rgb(234,138,34)" fg:x="165" fg:w="1"/><text x="13.1912%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="12.9412%" y="645" width="0.0784%" height="15" fill="rgb(212,95,11)" fg:x="165" fg:w="1"/><text x="13.1912%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeMut&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="12.9412%" y="629" width="0.0784%" height="15" fill="rgb(240,179,47)" fg:x="165" fg:w="1"/><text x="13.1912%" y="639.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="13.0196%" y="677" width="0.0784%" height="15" fill="rgb(240,163,11)" fg:x="166" fg:w="1"/><text x="13.2696%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="13.0196%" y="661" width="0.0784%" height="15" fill="rgb(236,37,12)" fg:x="166" fg:w="1"/><text x="13.2696%" y="671.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="13.0196%" y="645" width="0.0784%" height="15" fill="rgb(232,164,16)" fg:x="166" fg:w="1"/><text x="13.2696%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.0196%" y="629" width="0.0784%" height="15" fill="rgb(244,205,15)" fg:x="166" fg:w="1"/><text x="13.2696%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.0196%" y="613" width="0.0784%" height="15" fill="rgb(223,117,47)" fg:x="166" fg:w="1"/><text x="13.2696%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.0196%" y="597" width="0.0784%" height="15" fill="rgb(244,107,35)" fg:x="166" fg:w="1"/><text x="13.2696%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="13.0980%" y="661" width="0.1569%" height="15" fill="rgb(205,140,8)" fg:x="167" fg:w="2"/><text x="13.3480%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="13.0980%" y="645" width="0.1569%" height="15" fill="rgb(228,84,46)" fg:x="167" fg:w="2"/><text x="13.3480%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.0980%" y="629" width="0.1569%" height="15" fill="rgb(254,188,9)" fg:x="167" fg:w="2"/><text x="13.3480%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.0980%" y="613" width="0.1569%" height="15" fill="rgb(206,112,54)" fg:x="167" fg:w="2"/><text x="13.3480%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.1765%" y="597" width="0.0784%" height="15" fill="rgb(216,84,49)" fg:x="168" fg:w="1"/><text x="13.4265%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1765%" y="581" width="0.0784%" height="15" fill="rgb(214,194,35)" fg:x="168" fg:w="1"/><text x="13.4265%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.1765%" y="565" width="0.0784%" height="15" fill="rgb(249,28,3)" fg:x="168" fg:w="1"/><text x="13.4265%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1765%" y="549" width="0.0784%" height="15" fill="rgb(222,56,52)" fg:x="168" fg:w="1"/><text x="13.4265%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.2549%" y="645" width="0.0784%" height="15" fill="rgb(245,217,50)" fg:x="169" fg:w="1"/><text x="13.5049%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.2549%" y="629" width="0.0784%" height="15" fill="rgb(213,201,24)" fg:x="169" fg:w="1"/><text x="13.5049%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.2549%" y="613" width="0.0784%" height="15" fill="rgb(248,116,28)" fg:x="169" fg:w="1"/><text x="13.5049%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.2549%" y="597" width="0.0784%" height="15" fill="rgb(219,72,43)" fg:x="169" fg:w="1"/><text x="13.5049%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.2549%" y="581" width="0.0784%" height="15" fill="rgb(209,138,14)" fg:x="169" fg:w="1"/><text x="13.5049%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.2549%" y="565" width="0.0784%" height="15" fill="rgb(222,18,33)" fg:x="169" fg:w="1"/><text x="13.5049%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.2549%" y="549" width="0.0784%" height="15" fill="rgb(213,199,7)" fg:x="169" fg:w="1"/><text x="13.5049%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.2549%" y="533" width="0.0784%" height="15" fill="rgb(250,110,10)" fg:x="169" fg:w="1"/><text x="13.5049%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.2549%" y="517" width="0.0784%" height="15" fill="rgb(248,123,6)" fg:x="169" fg:w="1"/><text x="13.5049%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.2549%" y="501" width="0.0784%" height="15" fill="rgb(206,91,31)" fg:x="169" fg:w="1"/><text x="13.5049%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.2549%" y="485" width="0.0784%" height="15" fill="rgb(211,154,13)" fg:x="169" fg:w="1"/><text x="13.5049%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.2549%" y="469" width="0.0784%" height="15" fill="rgb(225,148,7)" fg:x="169" fg:w="1"/><text x="13.5049%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.2549%" y="453" width="0.0784%" height="15" fill="rgb(220,160,43)" fg:x="169" fg:w="1"/><text x="13.5049%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.2549%" y="437" width="0.0784%" height="15" fill="rgb(213,52,39)" fg:x="169" fg:w="1"/><text x="13.5049%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.2549%" y="421" width="0.0784%" height="15" fill="rgb(243,137,7)" fg:x="169" fg:w="1"/><text x="13.5049%" y="431.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="13.3333%" y="629" width="0.0784%" height="15" fill="rgb(230,79,13)" fg:x="170" fg:w="1"/><text x="13.5833%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.4118%" y="597" width="0.0784%" height="15" fill="rgb(247,105,23)" fg:x="171" fg:w="1"/><text x="13.6618%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.4118%" y="581" width="0.0784%" height="15" fill="rgb(223,179,41)" fg:x="171" fg:w="1"/><text x="13.6618%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (3 samples, 0.24%)</title><rect x="13.3333%" y="645" width="0.2353%" height="15" fill="rgb(218,9,34)" fg:x="170" fg:w="3"/><text x="13.5833%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="13.4118%" y="629" width="0.1569%" height="15" fill="rgb(222,106,8)" fg:x="171" fg:w="2"/><text x="13.6618%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="13.4118%" y="613" width="0.1569%" height="15" fill="rgb(211,220,0)" fg:x="171" fg:w="2"/><text x="13.6618%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.4902%" y="597" width="0.0784%" height="15" fill="rgb(229,52,16)" fg:x="172" fg:w="1"/><text x="13.7402%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.4902%" y="581" width="0.0784%" height="15" fill="rgb(212,155,18)" fg:x="172" fg:w="1"/><text x="13.7402%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.4902%" y="565" width="0.0784%" height="15" fill="rgb(242,21,14)" fg:x="172" fg:w="1"/><text x="13.7402%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.5686%" y="581" width="0.0784%" height="15" fill="rgb(222,19,48)" fg:x="173" fg:w="1"/><text x="13.8186%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.5686%" y="565" width="0.0784%" height="15" fill="rgb(232,45,27)" fg:x="173" fg:w="1"/><text x="13.8186%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.5686%" y="549" width="0.0784%" height="15" fill="rgb(249,103,42)" fg:x="173" fg:w="1"/><text x="13.8186%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.5686%" y="533" width="0.0784%" height="15" fill="rgb(246,81,33)" fg:x="173" fg:w="1"/><text x="13.8186%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.5686%" y="517" width="0.0784%" height="15" fill="rgb(252,33,42)" fg:x="173" fg:w="1"/><text x="13.8186%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.5686%" y="501" width="0.0784%" height="15" fill="rgb(209,212,41)" fg:x="173" fg:w="1"/><text x="13.8186%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.5686%" y="485" width="0.0784%" height="15" fill="rgb(207,154,6)" fg:x="173" fg:w="1"/><text x="13.8186%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.5686%" y="469" width="0.0784%" height="15" fill="rgb(223,64,47)" fg:x="173" fg:w="1"/><text x="13.8186%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.5686%" y="453" width="0.0784%" height="15" fill="rgb(211,161,38)" fg:x="173" fg:w="1"/><text x="13.8186%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.5686%" y="437" width="0.0784%" height="15" fill="rgb(219,138,40)" fg:x="173" fg:w="1"/><text x="13.8186%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.5686%" y="421" width="0.0784%" height="15" fill="rgb(241,228,46)" fg:x="173" fg:w="1"/><text x="13.8186%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.5686%" y="405" width="0.0784%" height="15" fill="rgb(223,209,38)" fg:x="173" fg:w="1"/><text x="13.8186%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.5686%" y="389" width="0.0784%" height="15" fill="rgb(236,164,45)" fg:x="173" fg:w="1"/><text x="13.8186%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.6471%" y="517" width="0.0784%" height="15" fill="rgb(231,15,5)" fg:x="174" fg:w="1"/><text x="13.8971%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.6471%" y="501" width="0.0784%" height="15" fill="rgb(252,35,15)" fg:x="174" fg:w="1"/><text x="13.8971%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="13.5686%" y="597" width="0.2353%" height="15" fill="rgb(248,181,18)" fg:x="173" fg:w="3"/><text x="13.8186%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.6471%" y="581" width="0.1569%" height="15" fill="rgb(233,39,42)" fg:x="174" fg:w="2"/><text x="13.8971%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.6471%" y="565" width="0.1569%" height="15" fill="rgb(238,110,33)" fg:x="174" fg:w="2"/><text x="13.8971%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="13.6471%" y="549" width="0.1569%" height="15" fill="rgb(233,195,10)" fg:x="174" fg:w="2"/><text x="13.8971%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.6471%" y="533" width="0.1569%" height="15" fill="rgb(254,105,3)" fg:x="174" fg:w="2"/><text x="13.8971%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.7255%" y="517" width="0.0784%" height="15" fill="rgb(221,225,9)" fg:x="175" fg:w="1"/><text x="13.9755%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.7255%" y="501" width="0.0784%" height="15" fill="rgb(224,227,45)" fg:x="175" fg:w="1"/><text x="13.9755%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.7255%" y="485" width="0.0784%" height="15" fill="rgb(229,198,43)" fg:x="175" fg:w="1"/><text x="13.9755%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="13.8039%" y="597" width="0.0784%" height="15" fill="rgb(206,209,35)" fg:x="176" fg:w="1"/><text x="14.0539%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.8039%" y="581" width="0.0784%" height="15" fill="rgb(245,195,53)" fg:x="176" fg:w="1"/><text x="14.0539%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (5 samples, 0.39%)</title><rect x="13.5686%" y="629" width="0.3922%" height="15" fill="rgb(240,92,26)" fg:x="173" fg:w="5"/><text x="13.8186%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (5 samples, 0.39%)</title><rect x="13.5686%" y="613" width="0.3922%" height="15" fill="rgb(207,40,23)" fg:x="173" fg:w="5"/><text x="13.8186%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="13.8824%" y="597" width="0.0784%" height="15" fill="rgb(223,111,35)" fg:x="177" fg:w="1"/><text x="14.1324%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="13.8824%" y="581" width="0.0784%" height="15" fill="rgb(229,147,28)" fg:x="177" fg:w="1"/><text x="14.1324%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="13.8824%" y="565" width="0.0784%" height="15" fill="rgb(211,29,28)" fg:x="177" fg:w="1"/><text x="14.1324%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="13.8824%" y="549" width="0.0784%" height="15" fill="rgb(228,72,33)" fg:x="177" fg:w="1"/><text x="14.1324%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="13.8824%" y="533" width="0.0784%" height="15" fill="rgb(205,214,31)" fg:x="177" fg:w="1"/><text x="14.1324%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="13.9608%" y="597" width="0.0784%" height="15" fill="rgb(224,111,15)" fg:x="178" fg:w="1"/><text x="14.2108%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.9608%" y="581" width="0.0784%" height="15" fill="rgb(253,21,26)" fg:x="178" fg:w="1"/><text x="14.2108%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="14.0392%" y="581" width="0.0784%" height="15" fill="rgb(245,139,43)" fg:x="179" fg:w="1"/><text x="14.2892%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.1176%" y="517" width="0.0784%" height="15" fill="rgb(252,170,7)" fg:x="180" fg:w="1"/><text x="14.3676%" y="527.50"></text></g><g><title>plugins_core::build::Build::save (15 samples, 1.18%)</title><rect x="13.0980%" y="677" width="1.1765%" height="15" fill="rgb(231,118,14)" fg:x="167" fg:w="15"/><text x="13.3480%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (13 samples, 1.02%)</title><rect x="13.2549%" y="661" width="1.0196%" height="15" fill="rgb(238,83,0)" fg:x="169" fg:w="13"/><text x="13.5049%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (9 samples, 0.71%)</title><rect x="13.5686%" y="645" width="0.7059%" height="15" fill="rgb(221,39,39)" fg:x="173" fg:w="9"/><text x="13.8186%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.31%)</title><rect x="13.9608%" y="629" width="0.3137%" height="15" fill="rgb(222,119,46)" fg:x="178" fg:w="4"/><text x="14.2108%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.31%)</title><rect x="13.9608%" y="613" width="0.3137%" height="15" fill="rgb(222,165,49)" fg:x="178" fg:w="4"/><text x="14.2108%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="14.0392%" y="597" width="0.2353%" height="15" fill="rgb(219,113,52)" fg:x="179" fg:w="3"/><text x="14.2892%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="14.1176%" y="581" width="0.1569%" height="15" fill="rgb(214,7,15)" fg:x="180" fg:w="2"/><text x="14.3676%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="14.1176%" y="565" width="0.1569%" height="15" fill="rgb(235,32,4)" fg:x="180" fg:w="2"/><text x="14.3676%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="14.1176%" y="549" width="0.1569%" height="15" fill="rgb(238,90,54)" fg:x="180" fg:w="2"/><text x="14.3676%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="14.1176%" y="533" width="0.1569%" height="15" fill="rgb(213,208,19)" fg:x="180" fg:w="2"/><text x="14.3676%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="14.1961%" y="517" width="0.0784%" height="15" fill="rgb(233,156,4)" fg:x="181" fg:w="1"/><text x="14.4461%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="14.1961%" y="501" width="0.0784%" height="15" fill="rgb(207,194,5)" fg:x="181" fg:w="1"/><text x="14.4461%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.1961%" y="485" width="0.0784%" height="15" fill="rgb(206,111,30)" fg:x="181" fg:w="1"/><text x="14.4461%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.1961%" y="469" width="0.0784%" height="15" fill="rgb(243,70,54)" fg:x="181" fg:w="1"/><text x="14.4461%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.1961%" y="453" width="0.0784%" height="15" fill="rgb(242,28,8)" fg:x="181" fg:w="1"/><text x="14.4461%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.2745%" y="549" width="0.0784%" height="15" fill="rgb(219,106,18)" fg:x="182" fg:w="1"/><text x="14.5245%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.2745%" y="533" width="0.0784%" height="15" fill="rgb(244,222,10)" fg:x="182" fg:w="1"/><text x="14.5245%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.2745%" y="517" width="0.0784%" height="15" fill="rgb(236,179,52)" fg:x="182" fg:w="1"/><text x="14.5245%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.2745%" y="501" width="0.0784%" height="15" fill="rgb(213,23,39)" fg:x="182" fg:w="1"/><text x="14.5245%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.2745%" y="485" width="0.0784%" height="15" fill="rgb(238,48,10)" fg:x="182" fg:w="1"/><text x="14.5245%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.2745%" y="469" width="0.0784%" height="15" fill="rgb(251,196,23)" fg:x="182" fg:w="1"/><text x="14.5245%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.2745%" y="453" width="0.0784%" height="15" fill="rgb(250,152,24)" fg:x="182" fg:w="1"/><text x="14.5245%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.2745%" y="437" width="0.0784%" height="15" fill="rgb(209,150,17)" fg:x="182" fg:w="1"/><text x="14.5245%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.2745%" y="421" width="0.0784%" height="15" fill="rgb(234,202,34)" fg:x="182" fg:w="1"/><text x="14.5245%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.2745%" y="405" width="0.0784%" height="15" fill="rgb(253,148,53)" fg:x="182" fg:w="1"/><text x="14.5245%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.2745%" y="389" width="0.0784%" height="15" fill="rgb(218,129,16)" fg:x="182" fg:w="1"/><text x="14.5245%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.2745%" y="373" width="0.0784%" height="15" fill="rgb(216,85,19)" fg:x="182" fg:w="1"/><text x="14.5245%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.2745%" y="357" width="0.0784%" height="15" fill="rgb(235,228,7)" fg:x="182" fg:w="1"/><text x="14.5245%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="14.2745%" y="613" width="0.1569%" height="15" fill="rgb(245,175,0)" fg:x="182" fg:w="2"/><text x="14.5245%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="14.2745%" y="597" width="0.1569%" height="15" fill="rgb(208,168,36)" fg:x="182" fg:w="2"/><text x="14.5245%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.2745%" y="581" width="0.1569%" height="15" fill="rgb(246,171,24)" fg:x="182" fg:w="2"/><text x="14.5245%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.2745%" y="565" width="0.1569%" height="15" fill="rgb(215,142,24)" fg:x="182" fg:w="2"/><text x="14.5245%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.3529%" y="549" width="0.0784%" height="15" fill="rgb(250,187,7)" fg:x="183" fg:w="1"/><text x="14.6029%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.3529%" y="533" width="0.0784%" height="15" fill="rgb(228,66,33)" fg:x="183" fg:w="1"/><text x="14.6029%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.3529%" y="517" width="0.0784%" height="15" fill="rgb(234,215,21)" fg:x="183" fg:w="1"/><text x="14.6029%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.3529%" y="501" width="0.0784%" height="15" fill="rgb(222,191,20)" fg:x="183" fg:w="1"/><text x="14.6029%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.3529%" y="485" width="0.0784%" height="15" fill="rgb(245,79,54)" fg:x="183" fg:w="1"/><text x="14.6029%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.3529%" y="469" width="0.0784%" height="15" fill="rgb(240,10,37)" fg:x="183" fg:w="1"/><text x="14.6029%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.3529%" y="453" width="0.0784%" height="15" fill="rgb(214,192,32)" fg:x="183" fg:w="1"/><text x="14.6029%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.3529%" y="437" width="0.0784%" height="15" fill="rgb(209,36,54)" fg:x="183" fg:w="1"/><text x="14.6029%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.3529%" y="421" width="0.0784%" height="15" fill="rgb(220,10,11)" fg:x="183" fg:w="1"/><text x="14.6029%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.3529%" y="405" width="0.0784%" height="15" fill="rgb(221,106,17)" fg:x="183" fg:w="1"/><text x="14.6029%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.3529%" y="389" width="0.0784%" height="15" fill="rgb(251,142,44)" fg:x="183" fg:w="1"/><text x="14.6029%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.3529%" y="373" width="0.0784%" height="15" fill="rgb(238,13,15)" fg:x="183" fg:w="1"/><text x="14.6029%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.4314%" y="517" width="0.0784%" height="15" fill="rgb(208,107,27)" fg:x="184" fg:w="1"/><text x="14.6814%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.4314%" y="501" width="0.0784%" height="15" fill="rgb(205,136,37)" fg:x="184" fg:w="1"/><text x="14.6814%" y="511.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.31%)</title><rect x="14.2745%" y="645" width="0.3137%" height="15" fill="rgb(250,205,27)" fg:x="182" fg:w="4"/><text x="14.5245%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.31%)</title><rect x="14.2745%" y="629" width="0.3137%" height="15" fill="rgb(210,80,43)" fg:x="182" fg:w="4"/><text x="14.5245%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="14.4314%" y="613" width="0.1569%" height="15" fill="rgb(247,160,36)" fg:x="184" fg:w="2"/><text x="14.6814%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="14.4314%" y="597" width="0.1569%" height="15" fill="rgb(234,13,49)" fg:x="184" fg:w="2"/><text x="14.6814%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.4314%" y="581" width="0.1569%" height="15" fill="rgb(234,122,0)" fg:x="184" fg:w="2"/><text x="14.6814%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.4314%" y="565" width="0.1569%" height="15" fill="rgb(207,146,38)" fg:x="184" fg:w="2"/><text x="14.6814%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="14.4314%" y="549" width="0.1569%" height="15" fill="rgb(207,177,25)" fg:x="184" fg:w="2"/><text x="14.6814%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.4314%" y="533" width="0.1569%" height="15" fill="rgb(211,178,42)" fg:x="184" fg:w="2"/><text x="14.6814%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.5098%" y="517" width="0.0784%" height="15" fill="rgb(230,69,54)" fg:x="185" fg:w="1"/><text x="14.7598%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5098%" y="501" width="0.0784%" height="15" fill="rgb(214,135,41)" fg:x="185" fg:w="1"/><text x="14.7598%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.5098%" y="485" width="0.0784%" height="15" fill="rgb(237,67,25)" fg:x="185" fg:w="1"/><text x="14.7598%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.6667%" y="613" width="0.0784%" height="15" fill="rgb(222,189,50)" fg:x="187" fg:w="1"/><text x="14.9167%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="14.6667%" y="597" width="0.0784%" height="15" fill="rgb(245,148,34)" fg:x="187" fg:w="1"/><text x="14.9167%" y="607.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="14.6667%" y="581" width="0.0784%" height="15" fill="rgb(222,29,6)" fg:x="187" fg:w="1"/><text x="14.9167%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.6667%" y="565" width="0.0784%" height="15" fill="rgb(221,189,43)" fg:x="187" fg:w="1"/><text x="14.9167%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.6667%" y="549" width="0.0784%" height="15" fill="rgb(207,36,27)" fg:x="187" fg:w="1"/><text x="14.9167%" y="559.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (3 samples, 0.24%)</title><rect x="14.5882%" y="629" width="0.2353%" height="15" fill="rgb(217,90,24)" fg:x="186" fg:w="3"/><text x="14.8382%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.7451%" y="613" width="0.0784%" height="15" fill="rgb(224,66,35)" fg:x="188" fg:w="1"/><text x="14.9951%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (8 samples, 0.63%)</title><rect x="14.2745%" y="677" width="0.6275%" height="15" fill="rgb(221,13,50)" fg:x="182" fg:w="8"/><text x="14.5245%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (8 samples, 0.63%)</title><rect x="14.2745%" y="661" width="0.6275%" height="15" fill="rgb(236,68,49)" fg:x="182" fg:w="8"/><text x="14.5245%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.31%)</title><rect x="14.5882%" y="645" width="0.3137%" height="15" fill="rgb(229,146,28)" fg:x="186" fg:w="4"/><text x="14.8382%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="14.8235%" y="629" width="0.0784%" height="15" fill="rgb(225,31,38)" fg:x="189" fg:w="1"/><text x="15.0735%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.8235%" y="613" width="0.0784%" height="15" fill="rgb(250,208,3)" fg:x="189" fg:w="1"/><text x="15.0735%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="14.8235%" y="597" width="0.0784%" height="15" fill="rgb(246,54,23)" fg:x="189" fg:w="1"/><text x="15.0735%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.8235%" y="581" width="0.0784%" height="15" fill="rgb(243,76,11)" fg:x="189" fg:w="1"/><text x="15.0735%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="14.9020%" y="645" width="0.0784%" height="15" fill="rgb(245,21,50)" fg:x="190" fg:w="1"/><text x="15.1520%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="15.1373%" y="613" width="0.0784%" height="15" fill="rgb(228,9,43)" fg:x="193" fg:w="1"/><text x="15.3873%" y="623.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="15.1373%" y="597" width="0.0784%" height="15" fill="rgb(208,100,47)" fg:x="193" fg:w="1"/><text x="15.3873%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (5 samples, 0.39%)</title><rect x="14.9020%" y="677" width="0.3922%" height="15" fill="rgb(232,26,8)" fg:x="190" fg:w="5"/><text x="15.1520%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (5 samples, 0.39%)</title><rect x="14.9020%" y="661" width="0.3922%" height="15" fill="rgb(216,166,38)" fg:x="190" fg:w="5"/><text x="15.1520%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.31%)</title><rect x="14.9804%" y="645" width="0.3137%" height="15" fill="rgb(251,202,51)" fg:x="191" fg:w="4"/><text x="15.2304%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.31%)</title><rect x="14.9804%" y="629" width="0.3137%" height="15" fill="rgb(254,216,34)" fg:x="191" fg:w="4"/><text x="15.2304%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.2157%" y="613" width="0.0784%" height="15" fill="rgb(251,32,27)" fg:x="194" fg:w="1"/><text x="15.4657%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.2157%" y="597" width="0.0784%" height="15" fill="rgb(208,127,28)" fg:x="194" fg:w="1"/><text x="15.4657%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="15.2157%" y="581" width="0.0784%" height="15" fill="rgb(224,137,22)" fg:x="194" fg:w="1"/><text x="15.4657%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::OpenedScopeRefMut&lt;plugins_core::carrying::model::Containing,kernel::model::entity::Entity&gt;&gt; (1 samples, 0.08%)</title><rect x="15.2941%" y="661" width="0.0784%" height="15" fill="rgb(254,70,32)" fg:x="195" fg:w="1"/><text x="15.5441%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="15.2941%" y="645" width="0.0784%" height="15" fill="rgb(229,75,37)" fg:x="195" fg:w="1"/><text x="15.5441%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.3725%" y="597" width="0.0784%" height="15" fill="rgb(252,64,23)" fg:x="196" fg:w="1"/><text x="15.6225%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.3725%" y="581" width="0.0784%" height="15" fill="rgb(232,162,48)" fg:x="196" fg:w="1"/><text x="15.6225%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.3725%" y="565" width="0.0784%" height="15" fill="rgb(246,160,12)" fg:x="196" fg:w="1"/><text x="15.6225%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.3725%" y="549" width="0.0784%" height="15" fill="rgb(247,166,0)" fg:x="196" fg:w="1"/><text x="15.6225%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.3725%" y="533" width="0.0784%" height="15" fill="rgb(249,219,21)" fg:x="196" fg:w="1"/><text x="15.6225%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.3725%" y="517" width="0.0784%" height="15" fill="rgb(205,209,3)" fg:x="196" fg:w="1"/><text x="15.6225%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.3725%" y="501" width="0.0784%" height="15" fill="rgb(243,44,1)" fg:x="196" fg:w="1"/><text x="15.6225%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.3725%" y="485" width="0.0784%" height="15" fill="rgb(206,159,16)" fg:x="196" fg:w="1"/><text x="15.6225%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.3725%" y="469" width="0.0784%" height="15" fill="rgb(244,77,30)" fg:x="196" fg:w="1"/><text x="15.6225%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.3725%" y="453" width="0.0784%" height="15" fill="rgb(218,69,12)" fg:x="196" fg:w="1"/><text x="15.6225%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.3725%" y="437" width="0.0784%" height="15" fill="rgb(212,87,7)" fg:x="196" fg:w="1"/><text x="15.6225%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.3725%" y="421" width="0.0784%" height="15" fill="rgb(245,114,25)" fg:x="196" fg:w="1"/><text x="15.6225%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.3725%" y="405" width="0.0784%" height="15" fill="rgb(210,61,42)" fg:x="196" fg:w="1"/><text x="15.6225%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.3725%" y="389" width="0.0784%" height="15" fill="rgb(211,52,33)" fg:x="196" fg:w="1"/><text x="15.6225%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.3725%" y="373" width="0.0784%" height="15" fill="rgb(234,58,33)" fg:x="196" fg:w="1"/><text x="15.6225%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="15.3725%" y="629" width="0.1569%" height="15" fill="rgb(220,115,36)" fg:x="196" fg:w="2"/><text x="15.6225%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="15.3725%" y="613" width="0.1569%" height="15" fill="rgb(243,153,54)" fg:x="196" fg:w="2"/><text x="15.6225%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.4510%" y="597" width="0.0784%" height="15" fill="rgb(251,47,18)" fg:x="197" fg:w="1"/><text x="15.7010%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="15.4510%" y="581" width="0.0784%" height="15" fill="rgb(242,102,42)" fg:x="197" fg:w="1"/><text x="15.7010%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="15.3725%" y="661" width="0.2353%" height="15" fill="rgb(234,31,38)" fg:x="196" fg:w="3"/><text x="15.6225%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="15.3725%" y="645" width="0.2353%" height="15" fill="rgb(221,117,51)" fg:x="196" fg:w="3"/><text x="15.6225%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.5294%" y="629" width="0.0784%" height="15" fill="rgb(212,20,18)" fg:x="198" fg:w="1"/><text x="15.7794%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="15.6078%" y="661" width="0.0784%" height="15" fill="rgb(245,133,36)" fg:x="199" fg:w="1"/><text x="15.8578%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="15.6078%" y="645" width="0.0784%" height="15" fill="rgb(212,6,19)" fg:x="199" fg:w="1"/><text x="15.8578%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.6078%" y="629" width="0.0784%" height="15" fill="rgb(218,1,36)" fg:x="199" fg:w="1"/><text x="15.8578%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="15.6078%" y="613" width="0.0784%" height="15" fill="rgb(246,84,54)" fg:x="199" fg:w="1"/><text x="15.8578%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="15.6078%" y="597" width="0.0784%" height="15" fill="rgb(242,110,6)" fg:x="199" fg:w="1"/><text x="15.8578%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.6078%" y="581" width="0.0784%" height="15" fill="rgb(214,47,5)" fg:x="199" fg:w="1"/><text x="15.8578%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.6078%" y="565" width="0.0784%" height="15" fill="rgb(218,159,25)" fg:x="199" fg:w="1"/><text x="15.8578%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.6078%" y="549" width="0.0784%" height="15" fill="rgb(215,211,28)" fg:x="199" fg:w="1"/><text x="15.8578%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="15.6078%" y="533" width="0.0784%" height="15" fill="rgb(238,59,32)" fg:x="199" fg:w="1"/><text x="15.8578%" y="543.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="15.6863%" y="661" width="0.0784%" height="15" fill="rgb(226,82,3)" fg:x="200" fg:w="1"/><text x="15.9363%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="15.6863%" y="645" width="0.0784%" height="15" fill="rgb(240,164,32)" fg:x="200" fg:w="1"/><text x="15.9363%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="15.6863%" y="629" width="0.0784%" height="15" fill="rgb(232,46,7)" fg:x="200" fg:w="1"/><text x="15.9363%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="15.6863%" y="613" width="0.0784%" height="15" fill="rgb(229,129,53)" fg:x="200" fg:w="1"/><text x="15.9363%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="15.6863%" y="597" width="0.0784%" height="15" fill="rgb(234,188,29)" fg:x="200" fg:w="1"/><text x="15.9363%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.6863%" y="581" width="0.0784%" height="15" fill="rgb(246,141,4)" fg:x="200" fg:w="1"/><text x="15.9363%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.6863%" y="565" width="0.0784%" height="15" fill="rgb(229,23,39)" fg:x="200" fg:w="1"/><text x="15.9363%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="15.6863%" y="549" width="0.0784%" height="15" fill="rgb(206,12,3)" fg:x="200" fg:w="1"/><text x="15.9363%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.6863%" y="533" width="0.0784%" height="15" fill="rgb(252,226,20)" fg:x="200" fg:w="1"/><text x="15.9363%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.6863%" y="517" width="0.0784%" height="15" fill="rgb(216,123,35)" fg:x="200" fg:w="1"/><text x="15.9363%" y="527.50"></text></g><g><title>plugins_core::tools::set_container (7 samples, 0.55%)</title><rect x="15.2941%" y="677" width="0.5490%" height="15" fill="rgb(212,68,40)" fg:x="195" fg:w="7"/><text x="15.5441%" y="687.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="15.7647%" y="661" width="0.0784%" height="15" fill="rgb(254,125,32)" fg:x="201" fg:w="1"/><text x="16.0147%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="15.7647%" y="645" width="0.0784%" height="15" fill="rgb(253,97,22)" fg:x="201" fg:w="1"/><text x="16.0147%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="15.7647%" y="629" width="0.0784%" height="15" fill="rgb(241,101,14)" fg:x="201" fg:w="1"/><text x="16.0147%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.7647%" y="613" width="0.0784%" height="15" fill="rgb(238,103,29)" fg:x="201" fg:w="1"/><text x="16.0147%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="15.7647%" y="597" width="0.0784%" height="15" fill="rgb(233,195,47)" fg:x="201" fg:w="1"/><text x="16.0147%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.7647%" y="581" width="0.0784%" height="15" fill="rgb(246,218,30)" fg:x="201" fg:w="1"/><text x="16.0147%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (94 samples, 7.37%)</title><rect x="8.5490%" y="693" width="7.3725%" height="15" fill="rgb(219,145,47)" fg:x="109" fg:w="94"/><text x="8.7990%" y="703.50">plugins_co..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="15.8431%" y="677" width="0.0784%" height="15" fill="rgb(243,12,26)" fg:x="202" fg:w="1"/><text x="16.0931%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="15.8431%" y="661" width="0.0784%" height="15" fill="rgb(214,87,16)" fg:x="202" fg:w="1"/><text x="16.0931%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::new (1 samples, 0.08%)</title><rect x="15.8431%" y="645" width="0.0784%" height="15" fill="rgb(208,99,42)" fg:x="202" fg:w="1"/><text x="16.0931%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="15.9216%" y="693" width="0.0784%" height="15" fill="rgb(253,99,2)" fg:x="203" fg:w="1"/><text x="16.1716%" y="703.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="15.9216%" y="677" width="0.0784%" height="15" fill="rgb(220,168,23)" fg:x="203" fg:w="1"/><text x="16.1716%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="15.9216%" y="661" width="0.0784%" height="15" fill="rgb(242,38,24)" fg:x="203" fg:w="1"/><text x="16.1716%" y="671.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="15.9216%" y="645" width="0.0784%" height="15" fill="rgb(225,182,9)" fg:x="203" fg:w="1"/><text x="16.1716%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="15.9216%" y="629" width="0.0784%" height="15" fill="rgb(243,178,37)" fg:x="203" fg:w="1"/><text x="16.1716%" y="639.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="16.0000%" y="661" width="0.0784%" height="15" fill="rgb(232,139,19)" fg:x="204" fg:w="1"/><text x="16.2500%" y="671.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="16.0000%" y="645" width="0.0784%" height="15" fill="rgb(225,201,24)" fg:x="204" fg:w="1"/><text x="16.2500%" y="655.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="16.0000%" y="629" width="0.0784%" height="15" fill="rgb(221,47,46)" fg:x="204" fg:w="1"/><text x="16.2500%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="16.0000%" y="613" width="0.0784%" height="15" fill="rgb(249,23,13)" fg:x="204" fg:w="1"/><text x="16.2500%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.0784%" y="581" width="0.0784%" height="15" fill="rgb(219,9,5)" fg:x="205" fg:w="1"/><text x="16.3284%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.0784%" y="565" width="0.0784%" height="15" fill="rgb(254,171,16)" fg:x="205" fg:w="1"/><text x="16.3284%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.0784%" y="549" width="0.0784%" height="15" fill="rgb(230,171,20)" fg:x="205" fg:w="1"/><text x="16.3284%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.0784%" y="533" width="0.0784%" height="15" fill="rgb(210,71,41)" fg:x="205" fg:w="1"/><text x="16.3284%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.0784%" y="517" width="0.0784%" height="15" fill="rgb(206,173,20)" fg:x="205" fg:w="1"/><text x="16.3284%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.0784%" y="501" width="0.0784%" height="15" fill="rgb(233,88,34)" fg:x="205" fg:w="1"/><text x="16.3284%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.0784%" y="485" width="0.0784%" height="15" fill="rgb(223,209,46)" fg:x="205" fg:w="1"/><text x="16.3284%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.0784%" y="469" width="0.0784%" height="15" fill="rgb(250,43,18)" fg:x="205" fg:w="1"/><text x="16.3284%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.0784%" y="453" width="0.0784%" height="15" fill="rgb(208,13,10)" fg:x="205" fg:w="1"/><text x="16.3284%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.0784%" y="437" width="0.0784%" height="15" fill="rgb(212,200,36)" fg:x="205" fg:w="1"/><text x="16.3284%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.0784%" y="421" width="0.0784%" height="15" fill="rgb(225,90,30)" fg:x="205" fg:w="1"/><text x="16.3284%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.0784%" y="405" width="0.0784%" height="15" fill="rgb(236,182,39)" fg:x="205" fg:w="1"/><text x="16.3284%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.0784%" y="389" width="0.0784%" height="15" fill="rgb(212,144,35)" fg:x="205" fg:w="1"/><text x="16.3284%" y="399.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="16.0784%" y="645" width="0.1569%" height="15" fill="rgb(228,63,44)" fg:x="205" fg:w="2"/><text x="16.3284%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="16.0784%" y="629" width="0.1569%" height="15" fill="rgb(228,109,6)" fg:x="205" fg:w="2"/><text x="16.3284%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.0784%" y="613" width="0.1569%" height="15" fill="rgb(238,117,24)" fg:x="205" fg:w="2"/><text x="16.3284%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.0784%" y="597" width="0.1569%" height="15" fill="rgb(242,26,26)" fg:x="205" fg:w="2"/><text x="16.3284%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.1569%" y="581" width="0.0784%" height="15" fill="rgb(221,92,48)" fg:x="206" fg:w="1"/><text x="16.4069%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="16.2353%" y="629" width="0.0784%" height="15" fill="rgb(209,209,32)" fg:x="207" fg:w="1"/><text x="16.4853%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="16.2353%" y="613" width="0.0784%" height="15" fill="rgb(221,70,22)" fg:x="207" fg:w="1"/><text x="16.4853%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.2353%" y="597" width="0.0784%" height="15" fill="rgb(248,145,5)" fg:x="207" fg:w="1"/><text x="16.4853%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="16.3137%" y="613" width="0.0784%" height="15" fill="rgb(226,116,26)" fg:x="208" fg:w="1"/><text x="16.5637%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="16.3137%" y="597" width="0.0784%" height="15" fill="rgb(244,5,17)" fg:x="208" fg:w="1"/><text x="16.5637%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="16.3137%" y="581" width="0.0784%" height="15" fill="rgb(252,159,33)" fg:x="208" fg:w="1"/><text x="16.5637%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="16.3137%" y="565" width="0.0784%" height="15" fill="rgb(206,71,0)" fg:x="208" fg:w="1"/><text x="16.5637%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.3137%" y="549" width="0.0784%" height="15" fill="rgb(233,118,54)" fg:x="208" fg:w="1"/><text x="16.5637%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="16.3137%" y="533" width="0.0784%" height="15" fill="rgb(234,83,48)" fg:x="208" fg:w="1"/><text x="16.5637%" y="543.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.39%)</title><rect x="16.0784%" y="661" width="0.3922%" height="15" fill="rgb(228,3,54)" fg:x="205" fg:w="5"/><text x="16.3284%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="16.2353%" y="645" width="0.2353%" height="15" fill="rgb(226,155,13)" fg:x="207" fg:w="3"/><text x="16.4853%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="16.3137%" y="629" width="0.1569%" height="15" fill="rgb(241,28,37)" fg:x="208" fg:w="2"/><text x="16.5637%" y="639.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="16.3922%" y="613" width="0.0784%" height="15" fill="rgb(233,93,10)" fg:x="209" fg:w="1"/><text x="16.6422%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.3922%" y="597" width="0.0784%" height="15" fill="rgb(225,113,19)" fg:x="209" fg:w="1"/><text x="16.6422%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.3922%" y="581" width="0.0784%" height="15" fill="rgb(241,2,18)" fg:x="209" fg:w="1"/><text x="16.6422%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="16.3922%" y="565" width="0.0784%" height="15" fill="rgb(228,207,21)" fg:x="209" fg:w="1"/><text x="16.6422%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="16.4706%" y="613" width="0.1569%" height="15" fill="rgb(213,211,35)" fg:x="210" fg:w="2"/><text x="16.7206%" y="623.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="16.5490%" y="597" width="0.0784%" height="15" fill="rgb(209,83,10)" fg:x="211" fg:w="1"/><text x="16.7990%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (9 samples, 0.71%)</title><rect x="16.0000%" y="693" width="0.7059%" height="15" fill="rgb(209,164,1)" fg:x="204" fg:w="9"/><text x="16.2500%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (9 samples, 0.71%)</title><rect x="16.0000%" y="677" width="0.7059%" height="15" fill="rgb(213,184,43)" fg:x="204" fg:w="9"/><text x="16.2500%" y="687.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (3 samples, 0.24%)</title><rect x="16.4706%" y="661" width="0.2353%" height="15" fill="rgb(231,61,34)" fg:x="210" fg:w="3"/><text x="16.7206%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="16.4706%" y="645" width="0.2353%" height="15" fill="rgb(235,75,3)" fg:x="210" fg:w="3"/><text x="16.7206%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (3 samples, 0.24%)</title><rect x="16.4706%" y="629" width="0.2353%" height="15" fill="rgb(220,106,47)" fg:x="210" fg:w="3"/><text x="16.7206%" y="639.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="16.6275%" y="613" width="0.0784%" height="15" fill="rgb(210,196,33)" fg:x="212" fg:w="1"/><text x="16.8775%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="16.7059%" y="661" width="0.0784%" height="15" fill="rgb(229,154,42)" fg:x="213" fg:w="1"/><text x="16.9559%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.7059%" y="645" width="0.0784%" height="15" fill="rgb(228,114,26)" fg:x="213" fg:w="1"/><text x="16.9559%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.7059%" y="629" width="0.0784%" height="15" fill="rgb(208,144,1)" fg:x="213" fg:w="1"/><text x="16.9559%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.7059%" y="613" width="0.0784%" height="15" fill="rgb(239,112,37)" fg:x="213" fg:w="1"/><text x="16.9559%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.7059%" y="597" width="0.0784%" height="15" fill="rgb(210,96,50)" fg:x="213" fg:w="1"/><text x="16.9559%" y="607.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="16.7843%" y="661" width="0.0784%" height="15" fill="rgb(222,178,2)" fg:x="214" fg:w="1"/><text x="17.0343%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.7843%" y="645" width="0.0784%" height="15" fill="rgb(226,74,18)" fg:x="214" fg:w="1"/><text x="17.0343%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (4 samples, 0.31%)</title><rect x="16.7059%" y="677" width="0.3137%" height="15" fill="rgb(225,67,54)" fg:x="213" fg:w="4"/><text x="16.9559%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="16.8627%" y="661" width="0.1569%" height="15" fill="rgb(251,92,32)" fg:x="215" fg:w="2"/><text x="17.1127%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="16.8627%" y="645" width="0.1569%" height="15" fill="rgb(228,149,22)" fg:x="215" fg:w="2"/><text x="17.1127%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="16.8627%" y="629" width="0.1569%" height="15" fill="rgb(243,54,13)" fg:x="215" fg:w="2"/><text x="17.1127%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="16.8627%" y="613" width="0.1569%" height="15" fill="rgb(243,180,28)" fg:x="215" fg:w="2"/><text x="17.1127%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="16.9412%" y="597" width="0.0784%" height="15" fill="rgb(208,167,24)" fg:x="216" fg:w="1"/><text x="17.1912%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="17.0196%" y="677" width="0.0784%" height="15" fill="rgb(245,73,45)" fg:x="217" fg:w="1"/><text x="17.2696%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="17.0196%" y="661" width="0.0784%" height="15" fill="rgb(237,203,48)" fg:x="217" fg:w="1"/><text x="17.2696%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="17.0196%" y="645" width="0.0784%" height="15" fill="rgb(211,197,16)" fg:x="217" fg:w="1"/><text x="17.2696%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="17.0196%" y="629" width="0.0784%" height="15" fill="rgb(243,99,51)" fg:x="217" fg:w="1"/><text x="17.2696%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="17.0196%" y="613" width="0.0784%" height="15" fill="rgb(215,123,29)" fg:x="217" fg:w="1"/><text x="17.2696%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.0196%" y="597" width="0.0784%" height="15" fill="rgb(239,186,37)" fg:x="217" fg:w="1"/><text x="17.2696%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.08%)</title><rect x="17.0980%" y="661" width="0.0784%" height="15" fill="rgb(252,136,39)" fg:x="218" fg:w="1"/><text x="17.3480%" y="671.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="17.0980%" y="677" width="0.1569%" height="15" fill="rgb(223,213,32)" fg:x="218" fg:w="2"/><text x="17.3480%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="17.1765%" y="661" width="0.0784%" height="15" fill="rgb(233,115,5)" fg:x="219" fg:w="1"/><text x="17.4265%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="17.1765%" y="645" width="0.0784%" height="15" fill="rgb(207,226,44)" fg:x="219" fg:w="1"/><text x="17.4265%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="17.2549%" y="661" width="0.2353%" height="15" fill="rgb(208,126,0)" fg:x="220" fg:w="3"/><text x="17.5049%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="17.4118%" y="645" width="0.0784%" height="15" fill="rgb(244,66,21)" fg:x="222" fg:w="1"/><text x="17.6618%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.4118%" y="629" width="0.0784%" height="15" fill="rgb(222,97,12)" fg:x="222" fg:w="1"/><text x="17.6618%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.4118%" y="613" width="0.0784%" height="15" fill="rgb(219,213,19)" fg:x="222" fg:w="1"/><text x="17.6618%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="17.4902%" y="645" width="0.0784%" height="15" fill="rgb(252,169,30)" fg:x="223" fg:w="1"/><text x="17.7402%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="17.7255%" y="597" width="0.0784%" height="15" fill="rgb(206,32,51)" fg:x="226" fg:w="1"/><text x="17.9755%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.31%)</title><rect x="17.5686%" y="629" width="0.3137%" height="15" fill="rgb(250,172,42)" fg:x="224" fg:w="4"/><text x="17.8186%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (4 samples, 0.31%)</title><rect x="17.5686%" y="613" width="0.3137%" height="15" fill="rgb(209,34,43)" fg:x="224" fg:w="4"/><text x="17.8186%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="17.8039%" y="597" width="0.0784%" height="15" fill="rgb(223,11,35)" fg:x="227" fg:w="1"/><text x="18.0539%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="17.8039%" y="581" width="0.0784%" height="15" fill="rgb(251,219,26)" fg:x="227" fg:w="1"/><text x="18.0539%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="17.8039%" y="565" width="0.0784%" height="15" fill="rgb(231,119,3)" fg:x="227" fg:w="1"/><text x="18.0539%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.8039%" y="549" width="0.0784%" height="15" fill="rgb(216,97,11)" fg:x="227" fg:w="1"/><text x="18.0539%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.8039%" y="533" width="0.0784%" height="15" fill="rgb(223,59,9)" fg:x="227" fg:w="1"/><text x="18.0539%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.8039%" y="517" width="0.0784%" height="15" fill="rgb(233,93,31)" fg:x="227" fg:w="1"/><text x="18.0539%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="17.8039%" y="501" width="0.0784%" height="15" fill="rgb(239,81,33)" fg:x="227" fg:w="1"/><text x="18.0539%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.9608%" y="597" width="0.0784%" height="15" fill="rgb(213,120,34)" fg:x="229" fg:w="1"/><text x="18.2108%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (165 samples, 12.94%)</title><rect x="5.1765%" y="709" width="12.9412%" height="15" fill="rgb(243,49,53)" fg:x="66" fg:w="165"/><text x="5.4265%" y="719.50">&lt;tests::HoldingKeyI..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (18 samples, 1.41%)</title><rect x="16.7059%" y="693" width="1.4118%" height="15" fill="rgb(247,216,33)" fg:x="213" fg:w="18"/><text x="16.9559%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (11 samples, 0.86%)</title><rect x="17.2549%" y="677" width="0.8627%" height="15" fill="rgb(226,26,14)" fg:x="220" fg:w="11"/><text x="17.5049%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.63%)</title><rect x="17.4902%" y="661" width="0.6275%" height="15" fill="rgb(215,49,53)" fg:x="223" fg:w="8"/><text x="17.7402%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.55%)</title><rect x="17.5686%" y="645" width="0.5490%" height="15" fill="rgb(245,162,40)" fg:x="224" fg:w="7"/><text x="17.8186%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="17.8824%" y="629" width="0.2353%" height="15" fill="rgb(229,68,17)" fg:x="228" fg:w="3"/><text x="18.1324%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="17.8824%" y="613" width="0.2353%" height="15" fill="rgb(213,182,10)" fg:x="228" fg:w="3"/><text x="18.1324%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="18.0392%" y="597" width="0.0784%" height="15" fill="rgb(245,125,30)" fg:x="230" fg:w="1"/><text x="18.2892%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="18.0392%" y="581" width="0.0784%" height="15" fill="rgb(232,202,2)" fg:x="230" fg:w="1"/><text x="18.2892%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.0392%" y="565" width="0.0784%" height="15" fill="rgb(237,140,51)" fg:x="230" fg:w="1"/><text x="18.2892%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.0392%" y="549" width="0.0784%" height="15" fill="rgb(236,157,25)" fg:x="230" fg:w="1"/><text x="18.2892%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="18.1176%" y="709" width="0.0784%" height="15" fill="rgb(219,209,0)" fg:x="231" fg:w="1"/><text x="18.3676%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="18.1176%" y="693" width="0.0784%" height="15" fill="rgb(240,116,54)" fg:x="231" fg:w="1"/><text x="18.3676%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="18.1176%" y="677" width="0.0784%" height="15" fill="rgb(216,10,36)" fg:x="231" fg:w="1"/><text x="18.3676%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.1176%" y="661" width="0.0784%" height="15" fill="rgb(222,72,44)" fg:x="231" fg:w="1"/><text x="18.3676%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.1176%" y="645" width="0.0784%" height="15" fill="rgb(232,159,9)" fg:x="231" fg:w="1"/><text x="18.3676%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (4 samples, 0.31%)</title><rect x="18.1961%" y="709" width="0.3137%" height="15" fill="rgb(210,39,32)" fg:x="232" fg:w="4"/><text x="18.4461%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.31%)</title><rect x="18.1961%" y="693" width="0.3137%" height="15" fill="rgb(216,194,45)" fg:x="232" fg:w="4"/><text x="18.4461%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="18.1961%" y="677" width="0.3137%" height="15" fill="rgb(218,18,35)" fg:x="232" fg:w="4"/><text x="18.4461%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="18.2745%" y="661" width="0.2353%" height="15" fill="rgb(207,83,51)" fg:x="233" fg:w="3"/><text x="18.5245%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="18.2745%" y="645" width="0.2353%" height="15" fill="rgb(225,63,43)" fg:x="233" fg:w="3"/><text x="18.5245%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="18.2745%" y="629" width="0.2353%" height="15" fill="rgb(207,57,36)" fg:x="233" fg:w="3"/><text x="18.5245%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="18.3529%" y="613" width="0.1569%" height="15" fill="rgb(216,99,33)" fg:x="234" fg:w="2"/><text x="18.6029%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.4314%" y="597" width="0.0784%" height="15" fill="rgb(225,42,16)" fg:x="235" fg:w="1"/><text x="18.6814%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="18.5098%" y="693" width="0.0784%" height="15" fill="rgb(220,201,45)" fg:x="236" fg:w="1"/><text x="18.7598%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.5098%" y="677" width="0.0784%" height="15" fill="rgb(225,33,4)" fg:x="236" fg:w="1"/><text x="18.7598%" y="687.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="18.5882%" y="517" width="0.0784%" height="15" fill="rgb(224,33,50)" fg:x="237" fg:w="1"/><text x="18.8382%" y="527.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.08%)</title><rect x="18.5882%" y="501" width="0.0784%" height="15" fill="rgb(246,198,51)" fg:x="237" fg:w="1"/><text x="18.8382%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="18.5882%" y="693" width="0.1569%" height="15" fill="rgb(205,22,4)" fg:x="237" fg:w="2"/><text x="18.8382%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="18.5882%" y="677" width="0.1569%" height="15" fill="rgb(206,3,8)" fg:x="237" fg:w="2"/><text x="18.8382%" y="687.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="18.5882%" y="661" width="0.1569%" height="15" fill="rgb(251,23,15)" fg:x="237" fg:w="2"/><text x="18.8382%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="18.5882%" y="645" width="0.1569%" height="15" fill="rgb(252,88,28)" fg:x="237" fg:w="2"/><text x="18.8382%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="18.5882%" y="629" width="0.1569%" height="15" fill="rgb(212,127,14)" fg:x="237" fg:w="2"/><text x="18.8382%" y="639.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="18.5882%" y="613" width="0.1569%" height="15" fill="rgb(247,145,37)" fg:x="237" fg:w="2"/><text x="18.8382%" y="623.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (2 samples, 0.16%)</title><rect x="18.5882%" y="597" width="0.1569%" height="15" fill="rgb(209,117,53)" fg:x="237" fg:w="2"/><text x="18.8382%" y="607.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="18.5882%" y="581" width="0.1569%" height="15" fill="rgb(212,90,42)" fg:x="237" fg:w="2"/><text x="18.8382%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="18.5882%" y="565" width="0.1569%" height="15" fill="rgb(218,164,37)" fg:x="237" fg:w="2"/><text x="18.8382%" y="575.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (2 samples, 0.16%)</title><rect x="18.5882%" y="549" width="0.1569%" height="15" fill="rgb(246,65,34)" fg:x="237" fg:w="2"/><text x="18.8382%" y="559.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (2 samples, 0.16%)</title><rect x="18.5882%" y="533" width="0.1569%" height="15" fill="rgb(231,100,33)" fg:x="237" fg:w="2"/><text x="18.8382%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="18.6667%" y="517" width="0.0784%" height="15" fill="rgb(228,126,14)" fg:x="238" fg:w="1"/><text x="18.9167%" y="527.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="18.7451%" y="693" width="0.0784%" height="15" fill="rgb(215,173,21)" fg:x="239" fg:w="1"/><text x="18.9951%" y="703.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="18.7451%" y="677" width="0.0784%" height="15" fill="rgb(210,6,40)" fg:x="239" fg:w="1"/><text x="18.9951%" y="687.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="18.7451%" y="661" width="0.0784%" height="15" fill="rgb(212,48,18)" fg:x="239" fg:w="1"/><text x="18.9951%" y="671.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="18.7451%" y="645" width="0.0784%" height="15" fill="rgb(230,214,11)" fg:x="239" fg:w="1"/><text x="18.9951%" y="655.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="18.7451%" y="629" width="0.0784%" height="15" fill="rgb(254,105,39)" fg:x="239" fg:w="1"/><text x="18.9951%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="18.7451%" y="613" width="0.0784%" height="15" fill="rgb(245,158,5)" fg:x="239" fg:w="1"/><text x="18.9951%" y="623.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="18.7451%" y="597" width="0.0784%" height="15" fill="rgb(249,208,11)" fg:x="239" fg:w="1"/><text x="18.9951%" y="607.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="18.7451%" y="581" width="0.0784%" height="15" fill="rgb(210,39,28)" fg:x="239" fg:w="1"/><text x="18.9951%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="18.9020%" y="661" width="0.0784%" height="15" fill="rgb(211,56,53)" fg:x="241" fg:w="1"/><text x="19.1520%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;engine::session::state::ModifiedEntity&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="18.9020%" y="645" width="0.0784%" height="15" fill="rgb(226,201,30)" fg:x="241" fg:w="1"/><text x="19.1520%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.9020%" y="629" width="0.0784%" height="15" fill="rgb(239,101,34)" fg:x="241" fg:w="1"/><text x="19.1520%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.9804%" y="629" width="0.0784%" height="15" fill="rgb(226,209,5)" fg:x="242" fg:w="1"/><text x="19.2304%" y="639.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="18.9804%" y="661" width="0.1569%" height="15" fill="rgb(250,105,47)" fg:x="242" fg:w="2"/><text x="19.2304%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="18.9804%" y="645" width="0.1569%" height="15" fill="rgb(230,72,3)" fg:x="242" fg:w="2"/><text x="19.2304%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="19.0588%" y="629" width="0.0784%" height="15" fill="rgb(232,218,39)" fg:x="243" fg:w="1"/><text x="19.3088%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.0588%" y="613" width="0.0784%" height="15" fill="rgb(248,166,6)" fg:x="243" fg:w="1"/><text x="19.3088%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (5 samples, 0.39%)</title><rect x="19.1373%" y="597" width="0.3922%" height="15" fill="rgb(247,89,20)" fg:x="244" fg:w="5"/><text x="19.3873%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.39%)</title><rect x="19.1373%" y="581" width="0.3922%" height="15" fill="rgb(248,130,54)" fg:x="244" fg:w="5"/><text x="19.3873%" y="591.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.39%)</title><rect x="19.1373%" y="565" width="0.3922%" height="15" fill="rgb(234,196,4)" fg:x="244" fg:w="5"/><text x="19.3873%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.31%)</title><rect x="19.2157%" y="549" width="0.3137%" height="15" fill="rgb(250,143,31)" fg:x="245" fg:w="4"/><text x="19.4657%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="19.2941%" y="533" width="0.2353%" height="15" fill="rgb(211,110,34)" fg:x="246" fg:w="3"/><text x="19.5441%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="19.4510%" y="517" width="0.0784%" height="15" fill="rgb(215,124,48)" fg:x="248" fg:w="1"/><text x="19.7010%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.4510%" y="501" width="0.0784%" height="15" fill="rgb(216,46,13)" fg:x="248" fg:w="1"/><text x="19.7010%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.4510%" y="485" width="0.0784%" height="15" fill="rgb(205,184,25)" fg:x="248" fg:w="1"/><text x="19.7010%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="19.6078%" y="581" width="0.0784%" height="15" fill="rgb(228,1,10)" fg:x="250" fg:w="1"/><text x="19.8578%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.6078%" y="565" width="0.0784%" height="15" fill="rgb(213,116,27)" fg:x="250" fg:w="1"/><text x="19.8578%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="19.6863%" y="533" width="0.0784%" height="15" fill="rgb(241,95,50)" fg:x="251" fg:w="1"/><text x="19.9363%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="19.6863%" y="565" width="0.2353%" height="15" fill="rgb(238,48,32)" fg:x="251" fg:w="3"/><text x="19.9363%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="19.6863%" y="549" width="0.2353%" height="15" fill="rgb(235,113,49)" fg:x="251" fg:w="3"/><text x="19.9363%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="19.7647%" y="533" width="0.1569%" height="15" fill="rgb(205,127,43)" fg:x="252" fg:w="2"/><text x="20.0147%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="19.9216%" y="565" width="0.0784%" height="15" fill="rgb(250,162,2)" fg:x="254" fg:w="1"/><text x="20.1716%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="20.0000%" y="549" width="0.1569%" height="15" fill="rgb(220,13,41)" fg:x="255" fg:w="2"/><text x="20.2500%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.0000%" y="533" width="0.1569%" height="15" fill="rgb(249,221,25)" fg:x="255" fg:w="2"/><text x="20.2500%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.0784%" y="517" width="0.0784%" height="15" fill="rgb(215,208,19)" fg:x="256" fg:w="1"/><text x="20.3284%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.0784%" y="501" width="0.0784%" height="15" fill="rgb(236,175,2)" fg:x="256" fg:w="1"/><text x="20.3284%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="20.1569%" y="533" width="0.0784%" height="15" fill="rgb(241,52,2)" fg:x="257" fg:w="1"/><text x="20.4069%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="20.2353%" y="533" width="0.1569%" height="15" fill="rgb(248,140,14)" fg:x="258" fg:w="2"/><text x="20.4853%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.2353%" y="517" width="0.1569%" height="15" fill="rgb(253,22,42)" fg:x="258" fg:w="2"/><text x="20.4853%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="20.2353%" y="501" width="0.1569%" height="15" fill="rgb(234,61,47)" fg:x="258" fg:w="2"/><text x="20.4853%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="20.2353%" y="485" width="0.1569%" height="15" fill="rgb(208,226,15)" fg:x="258" fg:w="2"/><text x="20.4853%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="20.2353%" y="469" width="0.1569%" height="15" fill="rgb(217,221,4)" fg:x="258" fg:w="2"/><text x="20.4853%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="20.2353%" y="453" width="0.1569%" height="15" fill="rgb(212,174,34)" fg:x="258" fg:w="2"/><text x="20.4853%" y="463.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="20.2353%" y="437" width="0.1569%" height="15" fill="rgb(253,83,4)" fg:x="258" fg:w="2"/><text x="20.4853%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.31%)</title><rect x="20.1569%" y="549" width="0.3137%" height="15" fill="rgb(250,195,49)" fg:x="257" fg:w="4"/><text x="20.4069%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.3922%" y="533" width="0.0784%" height="15" fill="rgb(241,192,25)" fg:x="260" fg:w="1"/><text x="20.6422%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.3922%" y="517" width="0.0784%" height="15" fill="rgb(208,124,10)" fg:x="260" fg:w="1"/><text x="20.6422%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.3922%" y="501" width="0.0784%" height="15" fill="rgb(222,33,0)" fg:x="260" fg:w="1"/><text x="20.6422%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.55%)</title><rect x="20.0000%" y="565" width="0.5490%" height="15" fill="rgb(234,209,28)" fg:x="255" fg:w="7"/><text x="20.2500%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.4706%" y="549" width="0.0784%" height="15" fill="rgb(224,11,23)" fg:x="261" fg:w="1"/><text x="20.7206%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.94%)</title><rect x="19.6863%" y="581" width="0.9412%" height="15" fill="rgb(232,99,1)" fg:x="251" fg:w="12"/><text x="19.9363%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.5490%" y="565" width="0.0784%" height="15" fill="rgb(237,95,45)" fg:x="262" fg:w="1"/><text x="20.7990%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.25%)</title><rect x="19.5294%" y="597" width="1.2549%" height="15" fill="rgb(208,109,11)" fg:x="249" fg:w="16"/><text x="19.7794%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.6275%" y="581" width="0.1569%" height="15" fill="rgb(216,190,48)" fg:x="263" fg:w="2"/><text x="20.8775%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (22 samples, 1.73%)</title><rect x="19.1373%" y="613" width="1.7255%" height="15" fill="rgb(251,171,36)" fg:x="244" fg:w="22"/><text x="19.3873%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.7843%" y="597" width="0.0784%" height="15" fill="rgb(230,62,22)" fg:x="265" fg:w="1"/><text x="21.0343%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.7843%" y="581" width="0.0784%" height="15" fill="rgb(225,114,35)" fg:x="265" fg:w="1"/><text x="21.0343%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.7843%" y="565" width="0.0784%" height="15" fill="rgb(215,118,42)" fg:x="265" fg:w="1"/><text x="21.0343%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.0196%" y="565" width="0.0784%" height="15" fill="rgb(243,119,21)" fg:x="268" fg:w="1"/><text x="21.2696%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.1765%" y="549" width="0.0784%" height="15" fill="rgb(252,177,53)" fg:x="270" fg:w="1"/><text x="21.4265%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="20.8627%" y="613" width="0.4706%" height="15" fill="rgb(237,209,29)" fg:x="266" fg:w="6"/><text x="21.1127%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.47%)</title><rect x="20.8627%" y="597" width="0.4706%" height="15" fill="rgb(212,65,23)" fg:x="266" fg:w="6"/><text x="21.1127%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.39%)</title><rect x="20.9412%" y="581" width="0.3922%" height="15" fill="rgb(230,222,46)" fg:x="267" fg:w="5"/><text x="21.1912%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="21.0980%" y="565" width="0.2353%" height="15" fill="rgb(215,135,32)" fg:x="269" fg:w="3"/><text x="21.3480%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.2549%" y="549" width="0.0784%" height="15" fill="rgb(246,101,22)" fg:x="271" fg:w="1"/><text x="21.5049%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.2549%" y="533" width="0.0784%" height="15" fill="rgb(206,107,13)" fg:x="271" fg:w="1"/><text x="21.5049%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="21.3333%" y="565" width="0.1569%" height="15" fill="rgb(250,100,44)" fg:x="272" fg:w="2"/><text x="21.5833%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.4902%" y="549" width="0.0784%" height="15" fill="rgb(231,147,38)" fg:x="274" fg:w="1"/><text x="21.7402%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.4902%" y="533" width="0.0784%" height="15" fill="rgb(229,8,40)" fg:x="274" fg:w="1"/><text x="21.7402%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.5686%" y="533" width="0.0784%" height="15" fill="rgb(221,135,30)" fg:x="275" fg:w="1"/><text x="21.8186%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.5686%" y="517" width="0.0784%" height="15" fill="rgb(249,193,18)" fg:x="275" fg:w="1"/><text x="21.8186%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.24%)</title><rect x="21.6471%" y="517" width="0.2353%" height="15" fill="rgb(209,133,39)" fg:x="276" fg:w="3"/><text x="21.8971%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="21.7255%" y="501" width="0.1569%" height="15" fill="rgb(232,100,14)" fg:x="277" fg:w="2"/><text x="21.9755%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.8039%" y="485" width="0.0784%" height="15" fill="rgb(224,185,1)" fg:x="278" fg:w="1"/><text x="22.0539%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.8039%" y="469" width="0.0784%" height="15" fill="rgb(223,139,8)" fg:x="278" fg:w="1"/><text x="22.0539%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.8039%" y="453" width="0.0784%" height="15" fill="rgb(232,213,38)" fg:x="278" fg:w="1"/><text x="22.0539%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.8824%" y="501" width="0.0784%" height="15" fill="rgb(207,94,22)" fg:x="279" fg:w="1"/><text x="22.1324%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.78%)</title><rect x="21.3333%" y="581" width="0.7843%" height="15" fill="rgb(219,183,54)" fg:x="272" fg:w="10"/><text x="21.5833%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.63%)</title><rect x="21.4902%" y="565" width="0.6275%" height="15" fill="rgb(216,185,54)" fg:x="274" fg:w="8"/><text x="21.7402%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.55%)</title><rect x="21.5686%" y="549" width="0.5490%" height="15" fill="rgb(254,217,39)" fg:x="275" fg:w="7"/><text x="21.8186%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="21.6471%" y="533" width="0.4706%" height="15" fill="rgb(240,178,23)" fg:x="276" fg:w="6"/><text x="21.8971%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="21.8824%" y="517" width="0.2353%" height="15" fill="rgb(218,11,47)" fg:x="279" fg:w="3"/><text x="22.1324%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="21.9608%" y="501" width="0.1569%" height="15" fill="rgb(218,51,51)" fg:x="280" fg:w="2"/><text x="22.2108%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.0392%" y="485" width="0.0784%" height="15" fill="rgb(238,126,27)" fg:x="281" fg:w="1"/><text x="22.2892%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="22.1176%" y="581" width="0.1569%" height="15" fill="rgb(249,202,22)" fg:x="282" fg:w="2"/><text x="22.3676%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.1961%" y="565" width="0.0784%" height="15" fill="rgb(254,195,49)" fg:x="283" fg:w="1"/><text x="22.4461%" y="575.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.3529%" y="549" width="0.0784%" height="15" fill="rgb(208,123,14)" fg:x="285" fg:w="1"/><text x="22.6029%" y="559.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="22.3529%" y="533" width="0.0784%" height="15" fill="rgb(224,200,8)" fg:x="285" fg:w="1"/><text x="22.6029%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="22.3529%" y="517" width="0.0784%" height="15" fill="rgb(217,61,36)" fg:x="285" fg:w="1"/><text x="22.6029%" y="527.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (3 samples, 0.24%)</title><rect x="22.2745%" y="581" width="0.2353%" height="15" fill="rgb(206,35,45)" fg:x="284" fg:w="3"/><text x="22.5245%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="22.2745%" y="565" width="0.2353%" height="15" fill="rgb(217,65,33)" fg:x="284" fg:w="3"/><text x="22.5245%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.4314%" y="549" width="0.0784%" height="15" fill="rgb(222,158,48)" fg:x="286" fg:w="1"/><text x="22.6814%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="22.7451%" y="517" width="0.0784%" height="15" fill="rgb(254,2,54)" fg:x="290" fg:w="1"/><text x="22.9951%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.31%)</title><rect x="22.6667%" y="549" width="0.3137%" height="15" fill="rgb(250,143,38)" fg:x="289" fg:w="4"/><text x="22.9167%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="22.7451%" y="533" width="0.2353%" height="15" fill="rgb(248,25,0)" fg:x="290" fg:w="3"/><text x="22.9951%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="22.8235%" y="517" width="0.1569%" height="15" fill="rgb(206,152,27)" fg:x="291" fg:w="2"/><text x="23.0735%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (22 samples, 1.73%)</title><rect x="21.3333%" y="597" width="1.7255%" height="15" fill="rgb(240,77,30)" fg:x="272" fg:w="22"/><text x="21.5833%" y="607.50"></text></g><g><title>treediff::diff::diff (7 samples, 0.55%)</title><rect x="22.5098%" y="581" width="0.5490%" height="15" fill="rgb(231,5,3)" fg:x="287" fg:w="7"/><text x="22.7598%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.47%)</title><rect x="22.5882%" y="565" width="0.4706%" height="15" fill="rgb(207,226,32)" fg:x="288" fg:w="6"/><text x="22.8382%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.9804%" y="549" width="0.0784%" height="15" fill="rgb(222,207,47)" fg:x="293" fg:w="1"/><text x="23.2304%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.1373%" y="565" width="0.0784%" height="15" fill="rgb(229,115,45)" fg:x="295" fg:w="1"/><text x="23.3873%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.31%)</title><rect x="23.2157%" y="565" width="0.3137%" height="15" fill="rgb(224,191,6)" fg:x="296" fg:w="4"/><text x="23.4657%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="23.3725%" y="549" width="0.1569%" height="15" fill="rgb(230,227,24)" fg:x="298" fg:w="2"/><text x="23.6225%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.5294%" y="533" width="0.0784%" height="15" fill="rgb(228,80,19)" fg:x="300" fg:w="1"/><text x="23.7794%" y="543.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="23.5294%" y="517" width="0.0784%" height="15" fill="rgb(247,229,0)" fg:x="300" fg:w="1"/><text x="23.7794%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="23.5294%" y="501" width="0.0784%" height="15" fill="rgb(237,194,15)" fg:x="300" fg:w="1"/><text x="23.7794%" y="511.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="23.5294%" y="565" width="0.1569%" height="15" fill="rgb(219,203,20)" fg:x="300" fg:w="2"/><text x="23.7794%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="23.5294%" y="549" width="0.1569%" height="15" fill="rgb(234,128,8)" fg:x="300" fg:w="2"/><text x="23.7794%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="23.6078%" y="533" width="0.0784%" height="15" fill="rgb(248,202,8)" fg:x="301" fg:w="1"/><text x="23.8578%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="23.6863%" y="565" width="0.0784%" height="15" fill="rgb(206,104,37)" fg:x="302" fg:w="1"/><text x="23.9363%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.6863%" y="549" width="0.0784%" height="15" fill="rgb(223,8,27)" fg:x="302" fg:w="1"/><text x="23.9363%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.6863%" y="533" width="0.0784%" height="15" fill="rgb(216,217,28)" fg:x="302" fg:w="1"/><text x="23.9363%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.6863%" y="517" width="0.0784%" height="15" fill="rgb(249,199,1)" fg:x="302" fg:w="1"/><text x="23.9363%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="23.7647%" y="565" width="0.0784%" height="15" fill="rgb(240,85,17)" fg:x="303" fg:w="1"/><text x="24.0147%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.7647%" y="549" width="0.0784%" height="15" fill="rgb(206,108,45)" fg:x="303" fg:w="1"/><text x="24.0147%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.7647%" y="533" width="0.0784%" height="15" fill="rgb(245,210,41)" fg:x="303" fg:w="1"/><text x="24.0147%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="24.1569%" y="533" width="0.0784%" height="15" fill="rgb(206,13,37)" fg:x="308" fg:w="1"/><text x="24.4069%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="24.2353%" y="517" width="0.1569%" height="15" fill="rgb(250,61,18)" fg:x="309" fg:w="2"/><text x="24.4853%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.3137%" y="501" width="0.0784%" height="15" fill="rgb(235,172,48)" fg:x="310" fg:w="1"/><text x="24.5637%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="24.3922%" y="517" width="0.1569%" height="15" fill="rgb(249,201,17)" fg:x="311" fg:w="2"/><text x="24.6422%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="24.3922%" y="501" width="0.1569%" height="15" fill="rgb(219,208,6)" fg:x="311" fg:w="2"/><text x="24.6422%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="24.3922%" y="485" width="0.1569%" height="15" fill="rgb(248,31,23)" fg:x="311" fg:w="2"/><text x="24.6422%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="24.4706%" y="469" width="0.0784%" height="15" fill="rgb(245,15,42)" fg:x="312" fg:w="1"/><text x="24.7206%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="24.4706%" y="453" width="0.0784%" height="15" fill="rgb(222,217,39)" fg:x="312" fg:w="1"/><text x="24.7206%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="24.4706%" y="437" width="0.0784%" height="15" fill="rgb(210,219,27)" fg:x="312" fg:w="1"/><text x="24.7206%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="24.4706%" y="421" width="0.0784%" height="15" fill="rgb(252,166,36)" fg:x="312" fg:w="1"/><text x="24.7206%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="24.8627%" y="485" width="0.2353%" height="15" fill="rgb(245,132,34)" fg:x="317" fg:w="3"/><text x="25.1127%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.0196%" y="469" width="0.0784%" height="15" fill="rgb(236,54,3)" fg:x="319" fg:w="1"/><text x="25.2696%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="25.1765%" y="469" width="0.0784%" height="15" fill="rgb(241,173,43)" fg:x="321" fg:w="1"/><text x="25.4265%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.2549%" y="437" width="0.0784%" height="15" fill="rgb(215,190,9)" fg:x="322" fg:w="1"/><text x="25.5049%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="25.2549%" y="469" width="0.1569%" height="15" fill="rgb(242,101,16)" fg:x="322" fg:w="2"/><text x="25.5049%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="25.2549%" y="453" width="0.1569%" height="15" fill="rgb(223,190,21)" fg:x="322" fg:w="2"/><text x="25.5049%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="25.3333%" y="437" width="0.0784%" height="15" fill="rgb(215,228,25)" fg:x="323" fg:w="1"/><text x="25.5833%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (19 samples, 1.49%)</title><rect x="24.2353%" y="533" width="1.4902%" height="15" fill="rgb(225,36,22)" fg:x="309" fg:w="19"/><text x="24.4853%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (15 samples, 1.18%)</title><rect x="24.5490%" y="517" width="1.1765%" height="15" fill="rgb(251,106,46)" fg:x="313" fg:w="15"/><text x="24.7990%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (13 samples, 1.02%)</title><rect x="24.7059%" y="501" width="1.0196%" height="15" fill="rgb(208,90,1)" fg:x="315" fg:w="13"/><text x="24.9559%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.63%)</title><rect x="25.0980%" y="485" width="0.6275%" height="15" fill="rgb(243,10,4)" fg:x="320" fg:w="8"/><text x="25.3480%" y="495.50"></text></g><g><title>__libc_malloc (4 samples, 0.31%)</title><rect x="25.4118%" y="469" width="0.3137%" height="15" fill="rgb(212,137,27)" fg:x="324" fg:w="4"/><text x="25.6618%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (25 samples, 1.96%)</title><rect x="24.0784%" y="549" width="1.9608%" height="15" fill="rgb(231,220,49)" fg:x="307" fg:w="25"/><text x="24.3284%" y="559.50">&lt;..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.31%)</title><rect x="25.7255%" y="533" width="0.3137%" height="15" fill="rgb(237,96,20)" fg:x="328" fg:w="4"/><text x="25.9755%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (40 samples, 3.14%)</title><rect x="23.0588%" y="597" width="3.1373%" height="15" fill="rgb(239,229,30)" fg:x="294" fg:w="40"/><text x="23.3088%" y="607.50">ker..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (40 samples, 3.14%)</title><rect x="23.0588%" y="581" width="3.1373%" height="15" fill="rgb(219,65,33)" fg:x="294" fg:w="40"/><text x="23.3088%" y="591.50">&lt;se..</text></g><g><title>serde::ser::Serializer::collect_map (30 samples, 2.35%)</title><rect x="23.8431%" y="565" width="2.3529%" height="15" fill="rgb(243,134,7)" fg:x="304" fg:w="30"/><text x="24.0931%" y="575.50">s..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="26.0392%" y="549" width="0.1569%" height="15" fill="rgb(216,177,54)" fg:x="332" fg:w="2"/><text x="26.2892%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="26.0392%" y="533" width="0.1569%" height="15" fill="rgb(211,160,20)" fg:x="332" fg:w="2"/><text x="26.2892%" y="543.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="26.3529%" y="485" width="0.0784%" height="15" fill="rgb(239,85,39)" fg:x="336" fg:w="1"/><text x="26.6029%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.4314%" y="453" width="0.0784%" height="15" fill="rgb(232,125,22)" fg:x="337" fg:w="1"/><text x="26.6814%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.4314%" y="437" width="0.0784%" height="15" fill="rgb(244,57,34)" fg:x="337" fg:w="1"/><text x="26.6814%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.4314%" y="421" width="0.0784%" height="15" fill="rgb(214,203,32)" fg:x="337" fg:w="1"/><text x="26.6814%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="26.4314%" y="405" width="0.0784%" height="15" fill="rgb(207,58,43)" fg:x="337" fg:w="1"/><text x="26.6814%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="26.5098%" y="453" width="0.1569%" height="15" fill="rgb(215,193,15)" fg:x="338" fg:w="2"/><text x="26.7598%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.5882%" y="437" width="0.0784%" height="15" fill="rgb(232,15,44)" fg:x="339" fg:w="1"/><text x="26.8382%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.5882%" y="421" width="0.0784%" height="15" fill="rgb(212,3,48)" fg:x="339" fg:w="1"/><text x="26.8382%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="26.6667%" y="453" width="0.0784%" height="15" fill="rgb(218,128,7)" fg:x="340" fg:w="1"/><text x="26.9167%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.39%)</title><rect x="26.4314%" y="469" width="0.3922%" height="15" fill="rgb(226,216,39)" fg:x="337" fg:w="5"/><text x="26.6814%" y="479.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="26.7451%" y="453" width="0.0784%" height="15" fill="rgb(243,47,51)" fg:x="341" fg:w="1"/><text x="26.9951%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="26.8235%" y="469" width="0.1569%" height="15" fill="rgb(241,183,40)" fg:x="342" fg:w="2"/><text x="27.0735%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.9020%" y="453" width="0.0784%" height="15" fill="rgb(231,217,32)" fg:x="343" fg:w="1"/><text x="27.1520%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.63%)</title><rect x="26.4314%" y="485" width="0.6275%" height="15" fill="rgb(229,61,38)" fg:x="337" fg:w="8"/><text x="26.6814%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.9804%" y="469" width="0.0784%" height="15" fill="rgb(225,210,5)" fg:x="344" fg:w="1"/><text x="27.2304%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.9804%" y="453" width="0.0784%" height="15" fill="rgb(231,79,45)" fg:x="344" fg:w="1"/><text x="27.2304%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.94%)</title><rect x="26.1961%" y="501" width="0.9412%" height="15" fill="rgb(224,100,7)" fg:x="334" fg:w="12"/><text x="26.4461%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.0588%" y="485" width="0.0784%" height="15" fill="rgb(241,198,18)" fg:x="345" fg:w="1"/><text x="27.3088%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.02%)</title><rect x="26.1961%" y="533" width="1.0196%" height="15" fill="rgb(252,97,53)" fg:x="334" fg:w="13"/><text x="26.4461%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 1.02%)</title><rect x="26.1961%" y="517" width="1.0196%" height="15" fill="rgb(220,88,7)" fg:x="334" fg:w="13"/><text x="26.4461%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="27.1373%" y="501" width="0.0784%" height="15" fill="rgb(213,176,14)" fg:x="346" fg:w="1"/><text x="27.3873%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="27.1373%" y="485" width="0.0784%" height="15" fill="rgb(246,73,7)" fg:x="346" fg:w="1"/><text x="27.3873%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="27.2157%" y="533" width="0.0784%" height="15" fill="rgb(245,64,36)" fg:x="347" fg:w="1"/><text x="27.4657%" y="543.50"></text></g><g><title>engine::session::state::State::close (110 samples, 8.63%)</title><rect x="18.8235%" y="693" width="8.6275%" height="15" fill="rgb(245,80,10)" fg:x="240" fg:w="110"/><text x="19.0735%" y="703.50">engine::sess..</text></g><g><title>engine::session::state::State::flush_entities (110 samples, 8.63%)</title><rect x="18.8235%" y="677" width="8.6275%" height="15" fill="rgb(232,107,50)" fg:x="240" fg:w="110"/><text x="19.0735%" y="687.50">engine::sess..</text></g><g><title>core::iter::adapters::try_process (106 samples, 8.31%)</title><rect x="19.1373%" y="661" width="8.3137%" height="15" fill="rgb(253,3,0)" fg:x="244" fg:w="106"/><text x="19.3873%" y="671.50">core::iter::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (106 samples, 8.31%)</title><rect x="19.1373%" y="645" width="8.3137%" height="15" fill="rgb(212,99,53)" fg:x="244" fg:w="106"/><text x="19.3873%" y="655.50">&lt;alloc::vec:..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (106 samples, 8.31%)</title><rect x="19.1373%" y="629" width="8.3137%" height="15" fill="rgb(249,111,54)" fg:x="244" fg:w="106"/><text x="19.3873%" y="639.50">engine::sess..</text></g><g><title>kernel::model::any_entity_changes (78 samples, 6.12%)</title><rect x="21.3333%" y="613" width="6.1176%" height="15" fill="rgb(249,55,30)" fg:x="272" fg:w="78"/><text x="21.5833%" y="623.50">kernel::..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (16 samples, 1.25%)</title><rect x="26.1961%" y="597" width="1.2549%" height="15" fill="rgb(237,47,42)" fg:x="334" fg:w="16"/><text x="26.4461%" y="607.50"></text></g><g><title>serde_json::de::from_trait (16 samples, 1.25%)</title><rect x="26.1961%" y="581" width="1.2549%" height="15" fill="rgb(211,20,18)" fg:x="334" fg:w="16"/><text x="26.4461%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (16 samples, 1.25%)</title><rect x="26.1961%" y="565" width="1.2549%" height="15" fill="rgb(231,203,46)" fg:x="334" fg:w="16"/><text x="26.4461%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (16 samples, 1.25%)</title><rect x="26.1961%" y="549" width="1.2549%" height="15" fill="rgb(237,142,3)" fg:x="334" fg:w="16"/><text x="26.4461%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="27.2941%" y="533" width="0.1569%" height="15" fill="rgb(241,107,1)" fg:x="348" fg:w="2"/><text x="27.5441%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.3725%" y="517" width="0.0784%" height="15" fill="rgb(229,83,13)" fg:x="349" fg:w="1"/><text x="27.6225%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.3725%" y="501" width="0.0784%" height="15" fill="rgb(241,91,40)" fg:x="349" fg:w="1"/><text x="27.6225%" y="511.50"></text></g><g><title>engine::session::Session::close (115 samples, 9.02%)</title><rect x="18.5098%" y="709" width="9.0196%" height="15" fill="rgb(225,3,45)" fg:x="236" fg:w="115"/><text x="18.7598%" y="719.50">engine::sessi..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="27.4510%" y="693" width="0.0784%" height="15" fill="rgb(244,223,14)" fg:x="350" fg:w="1"/><text x="27.7010%" y="703.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="27.4510%" y="677" width="0.0784%" height="15" fill="rgb(224,124,37)" fg:x="350" fg:w="1"/><text x="27.7010%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="27.4510%" y="661" width="0.0784%" height="15" fill="rgb(251,171,30)" fg:x="350" fg:w="1"/><text x="27.7010%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="27.4510%" y="645" width="0.0784%" height="15" fill="rgb(236,46,54)" fg:x="350" fg:w="1"/><text x="27.7010%" y="655.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="27.4510%" y="629" width="0.0784%" height="15" fill="rgb(245,213,5)" fg:x="350" fg:w="1"/><text x="27.7010%" y="639.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="27.6078%" y="437" width="0.0784%" height="15" fill="rgb(230,144,27)" fg:x="352" fg:w="1"/><text x="27.8578%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="27.6078%" y="661" width="0.1569%" height="15" fill="rgb(220,86,6)" fg:x="352" fg:w="2"/><text x="27.8578%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="27.6078%" y="645" width="0.1569%" height="15" fill="rgb(240,20,13)" fg:x="352" fg:w="2"/><text x="27.8578%" y="655.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="27.6078%" y="629" width="0.1569%" height="15" fill="rgb(217,89,34)" fg:x="352" fg:w="2"/><text x="27.8578%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="27.6078%" y="613" width="0.1569%" height="15" fill="rgb(229,13,5)" fg:x="352" fg:w="2"/><text x="27.8578%" y="623.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="27.6078%" y="597" width="0.1569%" height="15" fill="rgb(244,67,35)" fg:x="352" fg:w="2"/><text x="27.8578%" y="607.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (2 samples, 0.16%)</title><rect x="27.6078%" y="581" width="0.1569%" height="15" fill="rgb(221,40,2)" fg:x="352" fg:w="2"/><text x="27.8578%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="27.6078%" y="565" width="0.1569%" height="15" fill="rgb(237,157,21)" fg:x="352" fg:w="2"/><text x="27.8578%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="27.6078%" y="549" width="0.1569%" height="15" fill="rgb(222,94,11)" fg:x="352" fg:w="2"/><text x="27.8578%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="27.6078%" y="533" width="0.1569%" height="15" fill="rgb(249,113,6)" fg:x="352" fg:w="2"/><text x="27.8578%" y="543.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="27.6078%" y="517" width="0.1569%" height="15" fill="rgb(238,137,36)" fg:x="352" fg:w="2"/><text x="27.8578%" y="527.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (2 samples, 0.16%)</title><rect x="27.6078%" y="501" width="0.1569%" height="15" fill="rgb(210,102,26)" fg:x="352" fg:w="2"/><text x="27.8578%" y="511.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (2 samples, 0.16%)</title><rect x="27.6078%" y="485" width="0.1569%" height="15" fill="rgb(218,30,30)" fg:x="352" fg:w="2"/><text x="27.8578%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="27.6078%" y="469" width="0.1569%" height="15" fill="rgb(214,67,26)" fg:x="352" fg:w="2"/><text x="27.8578%" y="479.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (2 samples, 0.16%)</title><rect x="27.6078%" y="453" width="0.1569%" height="15" fill="rgb(251,9,53)" fg:x="352" fg:w="2"/><text x="27.8578%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="27.6863%" y="437" width="0.0784%" height="15" fill="rgb(228,204,25)" fg:x="353" fg:w="1"/><text x="27.9363%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="27.6863%" y="421" width="0.0784%" height="15" fill="rgb(207,153,8)" fg:x="353" fg:w="1"/><text x="27.9363%" y="431.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="27.6863%" y="405" width="0.0784%" height="15" fill="rgb(242,9,16)" fg:x="353" fg:w="1"/><text x="27.9363%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="27.6863%" y="389" width="0.0784%" height="15" fill="rgb(217,211,10)" fg:x="353" fg:w="1"/><text x="27.9363%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="27.6863%" y="373" width="0.0784%" height="15" fill="rgb(219,228,52)" fg:x="353" fg:w="1"/><text x="27.9363%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="27.6863%" y="357" width="0.0784%" height="15" fill="rgb(231,92,29)" fg:x="353" fg:w="1"/><text x="27.9363%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="27.6863%" y="341" width="0.0784%" height="15" fill="rgb(232,8,23)" fg:x="353" fg:w="1"/><text x="27.9363%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="27.6863%" y="325" width="0.0784%" height="15" fill="rgb(216,211,34)" fg:x="353" fg:w="1"/><text x="27.9363%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="27.6863%" y="309" width="0.0784%" height="15" fill="rgb(236,151,0)" fg:x="353" fg:w="1"/><text x="27.9363%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="27.6863%" y="293" width="0.0784%" height="15" fill="rgb(209,168,3)" fg:x="353" fg:w="1"/><text x="27.9363%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.6863%" y="277" width="0.0784%" height="15" fill="rgb(208,129,28)" fg:x="353" fg:w="1"/><text x="27.9363%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="27.6863%" y="261" width="0.0784%" height="15" fill="rgb(229,78,22)" fg:x="353" fg:w="1"/><text x="27.9363%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="27.6863%" y="245" width="0.0784%" height="15" fill="rgb(228,187,13)" fg:x="353" fg:w="1"/><text x="27.9363%" y="255.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="27.6863%" y="229" width="0.0784%" height="15" fill="rgb(240,119,24)" fg:x="353" fg:w="1"/><text x="27.9363%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="27.6863%" y="213" width="0.0784%" height="15" fill="rgb(209,194,42)" fg:x="353" fg:w="1"/><text x="27.9363%" y="223.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::from_box (1 samples, 0.08%)</title><rect x="27.7647%" y="661" width="0.0784%" height="15" fill="rgb(247,200,46)" fg:x="354" fg:w="1"/><text x="28.0147%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="27.9216%" y="645" width="0.0784%" height="15" fill="rgb(218,76,16)" fg:x="356" fg:w="1"/><text x="28.1716%" y="655.50"></text></g><g><title>chrono::offset::utc::Utc::now (2 samples, 0.16%)</title><rect x="28.0000%" y="645" width="0.1569%" height="15" fill="rgb(225,21,48)" fg:x="357" fg:w="2"/><text x="28.2500%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="28.0000%" y="629" width="0.1569%" height="15" fill="rgb(239,223,50)" fg:x="357" fg:w="2"/><text x="28.2500%" y="639.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="28.0784%" y="613" width="0.0784%" height="15" fill="rgb(244,45,21)" fg:x="358" fg:w="1"/><text x="28.3284%" y="623.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (2 samples, 0.16%)</title><rect x="28.1569%" y="645" width="0.1569%" height="15" fill="rgb(232,33,43)" fg:x="359" fg:w="2"/><text x="28.4069%" y="655.50"></text></g><g><title>tracing_core::callsite::register_dispatch (2 samples, 0.16%)</title><rect x="28.1569%" y="629" width="0.1569%" height="15" fill="rgb(209,8,3)" fg:x="359" fg:w="2"/><text x="28.4069%" y="639.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (2 samples, 0.16%)</title><rect x="28.1569%" y="613" width="0.1569%" height="15" fill="rgb(214,25,53)" fg:x="359" fg:w="2"/><text x="28.4069%" y="623.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (2 samples, 0.16%)</title><rect x="28.1569%" y="597" width="0.1569%" height="15" fill="rgb(254,186,54)" fg:x="359" fg:w="2"/><text x="28.4069%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.3922%" y="517" width="0.0784%" height="15" fill="rgb(208,174,49)" fg:x="362" fg:w="1"/><text x="28.6422%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.3922%" y="501" width="0.0784%" height="15" fill="rgb(233,191,51)" fg:x="362" fg:w="1"/><text x="28.6422%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.3922%" y="485" width="0.0784%" height="15" fill="rgb(222,134,10)" fg:x="362" fg:w="1"/><text x="28.6422%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.3922%" y="469" width="0.0784%" height="15" fill="rgb(230,226,20)" fg:x="362" fg:w="1"/><text x="28.6422%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="28.3922%" y="453" width="0.0784%" height="15" fill="rgb(251,111,25)" fg:x="362" fg:w="1"/><text x="28.6422%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="28.3922%" y="437" width="0.0784%" height="15" fill="rgb(224,40,46)" fg:x="362" fg:w="1"/><text x="28.6422%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="28.3922%" y="421" width="0.0784%" height="15" fill="rgb(236,108,47)" fg:x="362" fg:w="1"/><text x="28.6422%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.3922%" y="405" width="0.0784%" height="15" fill="rgb(234,93,0)" fg:x="362" fg:w="1"/><text x="28.6422%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.3922%" y="389" width="0.0784%" height="15" fill="rgb(224,213,32)" fg:x="362" fg:w="1"/><text x="28.6422%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="28.3922%" y="373" width="0.0784%" height="15" fill="rgb(251,11,48)" fg:x="362" fg:w="1"/><text x="28.6422%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="28.3922%" y="357" width="0.0784%" height="15" fill="rgb(236,173,5)" fg:x="362" fg:w="1"/><text x="28.6422%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="28.3922%" y="341" width="0.0784%" height="15" fill="rgb(230,95,12)" fg:x="362" fg:w="1"/><text x="28.6422%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="28.3922%" y="325" width="0.0784%" height="15" fill="rgb(232,209,1)" fg:x="362" fg:w="1"/><text x="28.6422%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.3922%" y="309" width="0.0784%" height="15" fill="rgb(232,6,1)" fg:x="362" fg:w="1"/><text x="28.6422%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="28.3922%" y="533" width="0.1569%" height="15" fill="rgb(210,224,50)" fg:x="362" fg:w="2"/><text x="28.6422%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="28.4706%" y="517" width="0.0784%" height="15" fill="rgb(228,127,35)" fg:x="363" fg:w="1"/><text x="28.7206%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.4706%" y="501" width="0.0784%" height="15" fill="rgb(245,102,45)" fg:x="363" fg:w="1"/><text x="28.7206%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="28.5490%" y="421" width="0.1569%" height="15" fill="rgb(214,1,49)" fg:x="364" fg:w="2"/><text x="28.7990%" y="431.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="28.6275%" y="405" width="0.0784%" height="15" fill="rgb(226,163,40)" fg:x="365" fg:w="1"/><text x="28.8775%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="28.6275%" y="389" width="0.0784%" height="15" fill="rgb(239,212,28)" fg:x="365" fg:w="1"/><text x="28.8775%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="28.5490%" y="469" width="0.2353%" height="15" fill="rgb(220,20,13)" fg:x="364" fg:w="3"/><text x="28.7990%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="28.5490%" y="453" width="0.2353%" height="15" fill="rgb(210,164,35)" fg:x="364" fg:w="3"/><text x="28.7990%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="28.5490%" y="437" width="0.2353%" height="15" fill="rgb(248,109,41)" fg:x="364" fg:w="3"/><text x="28.7990%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.7059%" y="421" width="0.0784%" height="15" fill="rgb(238,23,50)" fg:x="366" fg:w="1"/><text x="28.9559%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.7059%" y="405" width="0.0784%" height="15" fill="rgb(211,48,49)" fg:x="366" fg:w="1"/><text x="28.9559%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="28.7059%" y="389" width="0.0784%" height="15" fill="rgb(223,36,21)" fg:x="366" fg:w="1"/><text x="28.9559%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="28.7059%" y="373" width="0.0784%" height="15" fill="rgb(207,123,46)" fg:x="366" fg:w="1"/><text x="28.9559%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="28.7059%" y="357" width="0.0784%" height="15" fill="rgb(240,218,32)" fg:x="366" fg:w="1"/><text x="28.9559%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.7059%" y="341" width="0.0784%" height="15" fill="rgb(252,5,43)" fg:x="366" fg:w="1"/><text x="28.9559%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.7059%" y="325" width="0.0784%" height="15" fill="rgb(252,84,19)" fg:x="366" fg:w="1"/><text x="28.9559%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="28.7059%" y="309" width="0.0784%" height="15" fill="rgb(243,152,39)" fg:x="366" fg:w="1"/><text x="28.9559%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="28.7059%" y="293" width="0.0784%" height="15" fill="rgb(234,160,15)" fg:x="366" fg:w="1"/><text x="28.9559%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="28.7059%" y="277" width="0.0784%" height="15" fill="rgb(237,34,20)" fg:x="366" fg:w="1"/><text x="28.9559%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="28.7059%" y="261" width="0.0784%" height="15" fill="rgb(229,97,13)" fg:x="366" fg:w="1"/><text x="28.9559%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.7059%" y="245" width="0.0784%" height="15" fill="rgb(234,71,50)" fg:x="366" fg:w="1"/><text x="28.9559%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.7843%" y="389" width="0.0784%" height="15" fill="rgb(253,155,4)" fg:x="367" fg:w="1"/><text x="29.0343%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="28.7843%" y="373" width="0.0784%" height="15" fill="rgb(222,185,37)" fg:x="367" fg:w="1"/><text x="29.0343%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="28.8627%" y="373" width="0.1569%" height="15" fill="rgb(251,177,13)" fg:x="368" fg:w="2"/><text x="29.1127%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="28.8627%" y="357" width="0.1569%" height="15" fill="rgb(250,179,40)" fg:x="368" fg:w="2"/><text x="29.1127%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="28.8627%" y="341" width="0.1569%" height="15" fill="rgb(242,44,2)" fg:x="368" fg:w="2"/><text x="29.1127%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="28.8627%" y="325" width="0.1569%" height="15" fill="rgb(216,177,13)" fg:x="368" fg:w="2"/><text x="29.1127%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.9412%" y="309" width="0.0784%" height="15" fill="rgb(216,106,43)" fg:x="369" fg:w="1"/><text x="29.1912%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.9412%" y="293" width="0.0784%" height="15" fill="rgb(216,183,2)" fg:x="369" fg:w="1"/><text x="29.1912%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.9412%" y="277" width="0.0784%" height="15" fill="rgb(249,75,3)" fg:x="369" fg:w="1"/><text x="29.1912%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.9412%" y="261" width="0.0784%" height="15" fill="rgb(219,67,39)" fg:x="369" fg:w="1"/><text x="29.1912%" y="271.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="28.9412%" y="245" width="0.0784%" height="15" fill="rgb(253,228,2)" fg:x="369" fg:w="1"/><text x="29.1912%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.9412%" y="229" width="0.0784%" height="15" fill="rgb(235,138,27)" fg:x="369" fg:w="1"/><text x="29.1912%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.9412%" y="213" width="0.0784%" height="15" fill="rgb(236,97,51)" fg:x="369" fg:w="1"/><text x="29.1912%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.9412%" y="197" width="0.0784%" height="15" fill="rgb(240,80,30)" fg:x="369" fg:w="1"/><text x="29.1912%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.24%)</title><rect x="29.0196%" y="373" width="0.2353%" height="15" fill="rgb(230,178,19)" fg:x="370" fg:w="3"/><text x="29.2696%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="29.0196%" y="357" width="0.2353%" height="15" fill="rgb(210,190,27)" fg:x="370" fg:w="3"/><text x="29.2696%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.24%)</title><rect x="29.0196%" y="341" width="0.2353%" height="15" fill="rgb(222,107,31)" fg:x="370" fg:w="3"/><text x="29.2696%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="29.1765%" y="325" width="0.0784%" height="15" fill="rgb(216,127,34)" fg:x="372" fg:w="1"/><text x="29.4265%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="29.1765%" y="309" width="0.0784%" height="15" fill="rgb(234,116,52)" fg:x="372" fg:w="1"/><text x="29.4265%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="29.2549%" y="341" width="0.0784%" height="15" fill="rgb(222,124,15)" fg:x="373" fg:w="1"/><text x="29.5049%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="29.2549%" y="325" width="0.0784%" height="15" fill="rgb(231,179,28)" fg:x="373" fg:w="1"/><text x="29.5049%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.2549%" y="309" width="0.0784%" height="15" fill="rgb(226,93,45)" fg:x="373" fg:w="1"/><text x="29.5049%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.63%)</title><rect x="28.7843%" y="469" width="0.6275%" height="15" fill="rgb(215,8,51)" fg:x="367" fg:w="8"/><text x="29.0343%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.63%)</title><rect x="28.7843%" y="453" width="0.6275%" height="15" fill="rgb(223,106,5)" fg:x="367" fg:w="8"/><text x="29.0343%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.63%)</title><rect x="28.7843%" y="437" width="0.6275%" height="15" fill="rgb(250,191,5)" fg:x="367" fg:w="8"/><text x="29.0343%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (8 samples, 0.63%)</title><rect x="28.7843%" y="421" width="0.6275%" height="15" fill="rgb(242,132,44)" fg:x="367" fg:w="8"/><text x="29.0343%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.63%)</title><rect x="28.7843%" y="405" width="0.6275%" height="15" fill="rgb(251,152,29)" fg:x="367" fg:w="8"/><text x="29.0343%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (7 samples, 0.55%)</title><rect x="28.8627%" y="389" width="0.5490%" height="15" fill="rgb(218,179,5)" fg:x="368" fg:w="7"/><text x="29.1127%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="29.2549%" y="373" width="0.1569%" height="15" fill="rgb(227,67,19)" fg:x="373" fg:w="2"/><text x="29.5049%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="29.2549%" y="357" width="0.1569%" height="15" fill="rgb(233,119,31)" fg:x="373" fg:w="2"/><text x="29.5049%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="29.3333%" y="341" width="0.0784%" height="15" fill="rgb(241,120,22)" fg:x="374" fg:w="1"/><text x="29.5833%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="29.3333%" y="325" width="0.0784%" height="15" fill="rgb(224,102,30)" fg:x="374" fg:w="1"/><text x="29.5833%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="29.3333%" y="309" width="0.0784%" height="15" fill="rgb(210,164,37)" fg:x="374" fg:w="1"/><text x="29.5833%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.3333%" y="293" width="0.0784%" height="15" fill="rgb(226,191,16)" fg:x="374" fg:w="1"/><text x="29.5833%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="29.3333%" y="277" width="0.0784%" height="15" fill="rgb(214,40,45)" fg:x="374" fg:w="1"/><text x="29.5833%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="29.3333%" y="261" width="0.0784%" height="15" fill="rgb(244,29,26)" fg:x="374" fg:w="1"/><text x="29.5833%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.3333%" y="245" width="0.0784%" height="15" fill="rgb(216,16,5)" fg:x="374" fg:w="1"/><text x="29.5833%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="29.3333%" y="229" width="0.0784%" height="15" fill="rgb(249,76,35)" fg:x="374" fg:w="1"/><text x="29.5833%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="29.3333%" y="213" width="0.0784%" height="15" fill="rgb(207,11,44)" fg:x="374" fg:w="1"/><text x="29.5833%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.3333%" y="197" width="0.0784%" height="15" fill="rgb(228,190,49)" fg:x="374" fg:w="1"/><text x="29.5833%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="29.3333%" y="181" width="0.0784%" height="15" fill="rgb(214,173,12)" fg:x="374" fg:w="1"/><text x="29.5833%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="29.3333%" y="165" width="0.0784%" height="15" fill="rgb(218,26,35)" fg:x="374" fg:w="1"/><text x="29.5833%" y="175.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="29.4118%" y="469" width="0.0784%" height="15" fill="rgb(220,200,19)" fg:x="375" fg:w="1"/><text x="29.6618%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="29.5686%" y="293" width="0.0784%" height="15" fill="rgb(239,95,49)" fg:x="377" fg:w="1"/><text x="29.8186%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="29.5686%" y="277" width="0.0784%" height="15" fill="rgb(235,85,53)" fg:x="377" fg:w="1"/><text x="29.8186%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="29.5686%" y="261" width="0.0784%" height="15" fill="rgb(233,133,31)" fg:x="377" fg:w="1"/><text x="29.8186%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="29.5686%" y="245" width="0.0784%" height="15" fill="rgb(218,25,20)" fg:x="377" fg:w="1"/><text x="29.8186%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="29.5686%" y="229" width="0.0784%" height="15" fill="rgb(252,210,38)" fg:x="377" fg:w="1"/><text x="29.8186%" y="239.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="29.5686%" y="213" width="0.0784%" height="15" fill="rgb(242,134,21)" fg:x="377" fg:w="1"/><text x="29.8186%" y="223.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (17 samples, 1.33%)</title><rect x="28.3922%" y="549" width="1.3333%" height="15" fill="rgb(213,28,48)" fg:x="362" fg:w="17"/><text x="28.6422%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (15 samples, 1.18%)</title><rect x="28.5490%" y="533" width="1.1765%" height="15" fill="rgb(250,196,2)" fg:x="364" fg:w="15"/><text x="28.7990%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (15 samples, 1.18%)</title><rect x="28.5490%" y="517" width="1.1765%" height="15" fill="rgb(227,5,17)" fg:x="364" fg:w="15"/><text x="28.7990%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (15 samples, 1.18%)</title><rect x="28.5490%" y="501" width="1.1765%" height="15" fill="rgb(221,226,24)" fg:x="364" fg:w="15"/><text x="28.7990%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (15 samples, 1.18%)</title><rect x="28.5490%" y="485" width="1.1765%" height="15" fill="rgb(211,5,48)" fg:x="364" fg:w="15"/><text x="28.7990%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="29.4902%" y="469" width="0.2353%" height="15" fill="rgb(219,150,6)" fg:x="376" fg:w="3"/><text x="29.7402%" y="479.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="29.4902%" y="453" width="0.2353%" height="15" fill="rgb(251,46,16)" fg:x="376" fg:w="3"/><text x="29.7402%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="29.4902%" y="437" width="0.2353%" height="15" fill="rgb(220,204,40)" fg:x="376" fg:w="3"/><text x="29.7402%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="29.4902%" y="421" width="0.2353%" height="15" fill="rgb(211,85,2)" fg:x="376" fg:w="3"/><text x="29.7402%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="29.4902%" y="405" width="0.2353%" height="15" fill="rgb(229,17,7)" fg:x="376" fg:w="3"/><text x="29.7402%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="29.4902%" y="389" width="0.2353%" height="15" fill="rgb(239,72,28)" fg:x="376" fg:w="3"/><text x="29.7402%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="29.4902%" y="373" width="0.2353%" height="15" fill="rgb(230,47,54)" fg:x="376" fg:w="3"/><text x="29.7402%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="29.4902%" y="357" width="0.2353%" height="15" fill="rgb(214,50,8)" fg:x="376" fg:w="3"/><text x="29.7402%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="29.4902%" y="341" width="0.2353%" height="15" fill="rgb(216,198,43)" fg:x="376" fg:w="3"/><text x="29.7402%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="29.5686%" y="325" width="0.1569%" height="15" fill="rgb(234,20,35)" fg:x="377" fg:w="2"/><text x="29.8186%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="29.5686%" y="309" width="0.1569%" height="15" fill="rgb(254,45,19)" fg:x="377" fg:w="2"/><text x="29.8186%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.6471%" y="293" width="0.0784%" height="15" fill="rgb(219,14,44)" fg:x="378" fg:w="1"/><text x="29.8971%" y="303.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (19 samples, 1.49%)</title><rect x="28.3137%" y="565" width="1.4902%" height="15" fill="rgb(217,220,26)" fg:x="361" fg:w="19"/><text x="28.5637%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="29.7255%" y="549" width="0.0784%" height="15" fill="rgb(213,158,28)" fg:x="379" fg:w="1"/><text x="29.9755%" y="559.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="29.7255%" y="533" width="0.0784%" height="15" fill="rgb(252,51,52)" fg:x="379" fg:w="1"/><text x="29.9755%" y="543.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="30.1176%" y="325" width="0.0784%" height="15" fill="rgb(246,89,16)" fg:x="384" fg:w="1"/><text x="30.3676%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="30.1176%" y="309" width="0.0784%" height="15" fill="rgb(216,158,49)" fg:x="384" fg:w="1"/><text x="30.3676%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.1176%" y="293" width="0.0784%" height="15" fill="rgb(236,107,19)" fg:x="384" fg:w="1"/><text x="30.3676%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="30.1961%" y="309" width="0.0784%" height="15" fill="rgb(228,185,30)" fg:x="385" fg:w="1"/><text x="30.4461%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="30.1961%" y="293" width="0.0784%" height="15" fill="rgb(246,134,8)" fg:x="385" fg:w="1"/><text x="30.4461%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.1961%" y="277" width="0.0784%" height="15" fill="rgb(214,143,50)" fg:x="385" fg:w="1"/><text x="30.4461%" y="287.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (3 samples, 0.24%)</title><rect x="30.1176%" y="357" width="0.2353%" height="15" fill="rgb(228,75,8)" fg:x="384" fg:w="3"/><text x="30.3676%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="30.1176%" y="341" width="0.2353%" height="15" fill="rgb(207,175,4)" fg:x="384" fg:w="3"/><text x="30.3676%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="30.1961%" y="325" width="0.1569%" height="15" fill="rgb(205,108,24)" fg:x="385" fg:w="2"/><text x="30.4461%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="30.2745%" y="309" width="0.0784%" height="15" fill="rgb(244,120,49)" fg:x="386" fg:w="1"/><text x="30.5245%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="30.2745%" y="293" width="0.0784%" height="15" fill="rgb(223,47,38)" fg:x="386" fg:w="1"/><text x="30.5245%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="30.2745%" y="277" width="0.0784%" height="15" fill="rgb(229,179,11)" fg:x="386" fg:w="1"/><text x="30.5245%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="30.2745%" y="261" width="0.0784%" height="15" fill="rgb(231,122,1)" fg:x="386" fg:w="1"/><text x="30.5245%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.2745%" y="245" width="0.0784%" height="15" fill="rgb(245,119,9)" fg:x="386" fg:w="1"/><text x="30.5245%" y="255.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (4 samples, 0.31%)</title><rect x="30.1176%" y="389" width="0.3137%" height="15" fill="rgb(241,163,25)" fg:x="384" fg:w="4"/><text x="30.3676%" y="399.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (4 samples, 0.31%)</title><rect x="30.1176%" y="373" width="0.3137%" height="15" fill="rgb(217,214,3)" fg:x="384" fg:w="4"/><text x="30.3676%" y="383.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="30.3529%" y="357" width="0.0784%" height="15" fill="rgb(240,86,28)" fg:x="387" fg:w="1"/><text x="30.6029%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="30.3529%" y="341" width="0.0784%" height="15" fill="rgb(215,47,9)" fg:x="387" fg:w="1"/><text x="30.6029%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="30.4314%" y="357" width="0.1569%" height="15" fill="rgb(252,25,45)" fg:x="388" fg:w="2"/><text x="30.6814%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="30.5098%" y="341" width="0.0784%" height="15" fill="rgb(251,164,9)" fg:x="389" fg:w="1"/><text x="30.7598%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="30.5098%" y="325" width="0.0784%" height="15" fill="rgb(233,194,0)" fg:x="389" fg:w="1"/><text x="30.7598%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="30.5098%" y="309" width="0.0784%" height="15" fill="rgb(249,111,24)" fg:x="389" fg:w="1"/><text x="30.7598%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.5882%" y="325" width="0.0784%" height="15" fill="rgb(250,223,3)" fg:x="390" fg:w="1"/><text x="30.8382%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.5882%" y="309" width="0.0784%" height="15" fill="rgb(236,178,37)" fg:x="390" fg:w="1"/><text x="30.8382%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.5882%" y="293" width="0.0784%" height="15" fill="rgb(241,158,50)" fg:x="390" fg:w="1"/><text x="30.8382%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.5882%" y="277" width="0.0784%" height="15" fill="rgb(213,121,41)" fg:x="390" fg:w="1"/><text x="30.8382%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.5882%" y="261" width="0.0784%" height="15" fill="rgb(240,92,3)" fg:x="390" fg:w="1"/><text x="30.8382%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="30.5882%" y="245" width="0.0784%" height="15" fill="rgb(205,123,3)" fg:x="390" fg:w="1"/><text x="30.8382%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="30.5882%" y="229" width="0.0784%" height="15" fill="rgb(205,97,47)" fg:x="390" fg:w="1"/><text x="30.8382%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="30.5882%" y="213" width="0.0784%" height="15" fill="rgb(247,152,14)" fg:x="390" fg:w="1"/><text x="30.8382%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.5882%" y="197" width="0.0784%" height="15" fill="rgb(248,195,53)" fg:x="390" fg:w="1"/><text x="30.8382%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.5882%" y="181" width="0.0784%" height="15" fill="rgb(226,201,16)" fg:x="390" fg:w="1"/><text x="30.8382%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="30.5882%" y="165" width="0.0784%" height="15" fill="rgb(205,98,0)" fg:x="390" fg:w="1"/><text x="30.8382%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="30.5882%" y="149" width="0.0784%" height="15" fill="rgb(214,191,48)" fg:x="390" fg:w="1"/><text x="30.8382%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="30.5882%" y="133" width="0.0784%" height="15" fill="rgb(237,112,39)" fg:x="390" fg:w="1"/><text x="30.8382%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="30.5882%" y="117" width="0.0784%" height="15" fill="rgb(247,203,27)" fg:x="390" fg:w="1"/><text x="30.8382%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.5882%" y="101" width="0.0784%" height="15" fill="rgb(235,124,28)" fg:x="390" fg:w="1"/><text x="30.8382%" y="111.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="30.5882%" y="341" width="0.1569%" height="15" fill="rgb(208,207,46)" fg:x="390" fg:w="2"/><text x="30.8382%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="30.6667%" y="325" width="0.0784%" height="15" fill="rgb(234,176,4)" fg:x="391" fg:w="1"/><text x="30.9167%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="30.6667%" y="309" width="0.0784%" height="15" fill="rgb(230,133,28)" fg:x="391" fg:w="1"/><text x="30.9167%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="30.6667%" y="293" width="0.0784%" height="15" fill="rgb(211,137,40)" fg:x="391" fg:w="1"/><text x="30.9167%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="30.6667%" y="277" width="0.0784%" height="15" fill="rgb(254,35,13)" fg:x="391" fg:w="1"/><text x="30.9167%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="30.6667%" y="261" width="0.0784%" height="15" fill="rgb(225,49,51)" fg:x="391" fg:w="1"/><text x="30.9167%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="30.6667%" y="245" width="0.0784%" height="15" fill="rgb(251,10,15)" fg:x="391" fg:w="1"/><text x="30.9167%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.7451%" y="341" width="0.0784%" height="15" fill="rgb(228,207,15)" fg:x="392" fg:w="1"/><text x="30.9951%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.31%)</title><rect x="30.5882%" y="357" width="0.3137%" height="15" fill="rgb(241,99,19)" fg:x="390" fg:w="4"/><text x="30.8382%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="30.8235%" y="341" width="0.0784%" height="15" fill="rgb(207,104,49)" fg:x="393" fg:w="1"/><text x="31.0735%" y="351.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="30.9020%" y="357" width="0.1569%" height="15" fill="rgb(234,99,18)" fg:x="394" fg:w="2"/><text x="31.1520%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="30.9020%" y="341" width="0.1569%" height="15" fill="rgb(213,191,49)" fg:x="394" fg:w="2"/><text x="31.1520%" y="351.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="30.9020%" y="325" width="0.1569%" height="15" fill="rgb(210,226,19)" fg:x="394" fg:w="2"/><text x="31.1520%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="30.9020%" y="309" width="0.1569%" height="15" fill="rgb(229,97,18)" fg:x="394" fg:w="2"/><text x="31.1520%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="30.9020%" y="293" width="0.1569%" height="15" fill="rgb(211,167,15)" fg:x="394" fg:w="2"/><text x="31.1520%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="30.9020%" y="277" width="0.1569%" height="15" fill="rgb(210,169,34)" fg:x="394" fg:w="2"/><text x="31.1520%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.9804%" y="261" width="0.0784%" height="15" fill="rgb(241,121,31)" fg:x="395" fg:w="1"/><text x="31.2304%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.9804%" y="245" width="0.0784%" height="15" fill="rgb(232,40,11)" fg:x="395" fg:w="1"/><text x="31.2304%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.1373%" y="277" width="0.0784%" height="15" fill="rgb(205,86,26)" fg:x="397" fg:w="1"/><text x="31.3873%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="31.0588%" y="357" width="0.2353%" height="15" fill="rgb(231,126,28)" fg:x="396" fg:w="3"/><text x="31.3088%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="31.1373%" y="341" width="0.1569%" height="15" fill="rgb(219,221,18)" fg:x="397" fg:w="2"/><text x="31.3873%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="31.1373%" y="325" width="0.1569%" height="15" fill="rgb(211,40,0)" fg:x="397" fg:w="2"/><text x="31.3873%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="31.1373%" y="309" width="0.1569%" height="15" fill="rgb(239,85,43)" fg:x="397" fg:w="2"/><text x="31.3873%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="31.1373%" y="293" width="0.1569%" height="15" fill="rgb(231,55,21)" fg:x="397" fg:w="2"/><text x="31.3873%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="31.2157%" y="277" width="0.0784%" height="15" fill="rgb(225,184,43)" fg:x="398" fg:w="1"/><text x="31.4657%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.2157%" y="261" width="0.0784%" height="15" fill="rgb(251,158,41)" fg:x="398" fg:w="1"/><text x="31.4657%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="31.4510%" y="293" width="0.1569%" height="15" fill="rgb(234,159,37)" fg:x="401" fg:w="2"/><text x="31.7010%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="31.4510%" y="277" width="0.1569%" height="15" fill="rgb(216,204,22)" fg:x="401" fg:w="2"/><text x="31.7010%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="31.4510%" y="261" width="0.1569%" height="15" fill="rgb(214,17,3)" fg:x="401" fg:w="2"/><text x="31.7010%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="31.4510%" y="245" width="0.1569%" height="15" fill="rgb(212,111,17)" fg:x="401" fg:w="2"/><text x="31.7010%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="31.4510%" y="229" width="0.1569%" height="15" fill="rgb(221,157,24)" fg:x="401" fg:w="2"/><text x="31.7010%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="31.4510%" y="213" width="0.1569%" height="15" fill="rgb(252,16,13)" fg:x="401" fg:w="2"/><text x="31.7010%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="31.4510%" y="197" width="0.1569%" height="15" fill="rgb(221,62,2)" fg:x="401" fg:w="2"/><text x="31.7010%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="31.4510%" y="181" width="0.1569%" height="15" fill="rgb(247,87,22)" fg:x="401" fg:w="2"/><text x="31.7010%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="31.4510%" y="165" width="0.1569%" height="15" fill="rgb(215,73,9)" fg:x="401" fg:w="2"/><text x="31.7010%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="31.4510%" y="149" width="0.1569%" height="15" fill="rgb(207,175,33)" fg:x="401" fg:w="2"/><text x="31.7010%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="31.4510%" y="133" width="0.1569%" height="15" fill="rgb(243,129,54)" fg:x="401" fg:w="2"/><text x="31.7010%" y="143.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="31.4510%" y="117" width="0.1569%" height="15" fill="rgb(227,119,45)" fg:x="401" fg:w="2"/><text x="31.7010%" y="127.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="31.4510%" y="101" width="0.1569%" height="15" fill="rgb(205,109,36)" fg:x="401" fg:w="2"/><text x="31.7010%" y="111.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="31.4510%" y="325" width="0.2353%" height="15" fill="rgb(205,6,39)" fg:x="401" fg:w="3"/><text x="31.7010%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="31.4510%" y="309" width="0.2353%" height="15" fill="rgb(221,32,16)" fg:x="401" fg:w="3"/><text x="31.7010%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.6078%" y="293" width="0.0784%" height="15" fill="rgb(228,144,50)" fg:x="403" fg:w="1"/><text x="31.8578%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.6078%" y="277" width="0.0784%" height="15" fill="rgb(229,201,53)" fg:x="403" fg:w="1"/><text x="31.8578%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="31.6078%" y="261" width="0.0784%" height="15" fill="rgb(249,153,27)" fg:x="403" fg:w="1"/><text x="31.8578%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="31.6078%" y="245" width="0.0784%" height="15" fill="rgb(227,106,25)" fg:x="403" fg:w="1"/><text x="31.8578%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="31.6078%" y="229" width="0.0784%" height="15" fill="rgb(230,65,29)" fg:x="403" fg:w="1"/><text x="31.8578%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="31.6078%" y="213" width="0.0784%" height="15" fill="rgb(221,57,46)" fg:x="403" fg:w="1"/><text x="31.8578%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="31.6078%" y="197" width="0.0784%" height="15" fill="rgb(229,161,17)" fg:x="403" fg:w="1"/><text x="31.8578%" y="207.50"></text></g><g><title>kernel::model::EntityPtr::gid (6 samples, 0.47%)</title><rect x="31.2941%" y="357" width="0.4706%" height="15" fill="rgb(222,213,11)" fg:x="399" fg:w="6"/><text x="31.5441%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.39%)</title><rect x="31.3725%" y="341" width="0.3922%" height="15" fill="rgb(235,35,13)" fg:x="400" fg:w="5"/><text x="31.6225%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="31.6863%" y="325" width="0.0784%" height="15" fill="rgb(233,158,34)" fg:x="404" fg:w="1"/><text x="31.9363%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.6863%" y="309" width="0.0784%" height="15" fill="rgb(215,151,48)" fg:x="404" fg:w="1"/><text x="31.9363%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="31.6863%" y="293" width="0.0784%" height="15" fill="rgb(229,84,14)" fg:x="404" fg:w="1"/><text x="31.9363%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.6863%" y="277" width="0.0784%" height="15" fill="rgb(229,68,14)" fg:x="404" fg:w="1"/><text x="31.9363%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="31.6863%" y="261" width="0.0784%" height="15" fill="rgb(243,106,26)" fg:x="404" fg:w="1"/><text x="31.9363%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.6863%" y="245" width="0.0784%" height="15" fill="rgb(206,45,38)" fg:x="404" fg:w="1"/><text x="31.9363%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.6863%" y="229" width="0.0784%" height="15" fill="rgb(226,6,15)" fg:x="404" fg:w="1"/><text x="31.9363%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="31.8431%" y="213" width="0.1569%" height="15" fill="rgb(232,22,54)" fg:x="406" fg:w="2"/><text x="32.0931%" y="223.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="31.9216%" y="197" width="0.0784%" height="15" fill="rgb(229,222,32)" fg:x="407" fg:w="1"/><text x="32.1716%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="31.8431%" y="277" width="0.2353%" height="15" fill="rgb(228,62,29)" fg:x="406" fg:w="3"/><text x="32.0931%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="31.8431%" y="261" width="0.2353%" height="15" fill="rgb(251,103,34)" fg:x="406" fg:w="3"/><text x="32.0931%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="31.8431%" y="245" width="0.2353%" height="15" fill="rgb(233,12,30)" fg:x="406" fg:w="3"/><text x="32.0931%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="31.8431%" y="229" width="0.2353%" height="15" fill="rgb(238,52,0)" fg:x="406" fg:w="3"/><text x="32.0931%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="32.0000%" y="213" width="0.0784%" height="15" fill="rgb(223,98,5)" fg:x="408" fg:w="1"/><text x="32.2500%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="32.0000%" y="197" width="0.0784%" height="15" fill="rgb(228,75,37)" fg:x="408" fg:w="1"/><text x="32.2500%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.0000%" y="181" width="0.0784%" height="15" fill="rgb(205,115,49)" fg:x="408" fg:w="1"/><text x="32.2500%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="32.0784%" y="245" width="0.0784%" height="15" fill="rgb(250,154,43)" fg:x="409" fg:w="1"/><text x="32.3284%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="32.0784%" y="229" width="0.0784%" height="15" fill="rgb(226,43,29)" fg:x="409" fg:w="1"/><text x="32.3284%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.0784%" y="213" width="0.0784%" height="15" fill="rgb(249,228,39)" fg:x="409" fg:w="1"/><text x="32.3284%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;regex_automata::meta::regex::Regex as core::clone::Clone&gt;::clone::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="32.1569%" y="245" width="0.0784%" height="15" fill="rgb(216,79,43)" fg:x="410" fg:w="1"/><text x="32.4069%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.31%)</title><rect x="32.0784%" y="277" width="0.3137%" height="15" fill="rgb(228,95,12)" fg:x="409" fg:w="4"/><text x="32.3284%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.31%)</title><rect x="32.0784%" y="261" width="0.3137%" height="15" fill="rgb(249,221,15)" fg:x="409" fg:w="4"/><text x="32.3284%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="32.2353%" y="245" width="0.1569%" height="15" fill="rgb(233,34,13)" fg:x="411" fg:w="2"/><text x="32.4853%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (2 samples, 0.16%)</title><rect x="32.2353%" y="229" width="0.1569%" height="15" fill="rgb(214,103,39)" fg:x="411" fg:w="2"/><text x="32.4853%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="32.2353%" y="213" width="0.1569%" height="15" fill="rgb(251,126,39)" fg:x="411" fg:w="2"/><text x="32.4853%" y="223.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="32.3922%" y="229" width="0.1569%" height="15" fill="rgb(214,216,36)" fg:x="413" fg:w="2"/><text x="32.6422%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="32.5490%" y="229" width="0.0784%" height="15" fill="rgb(220,221,8)" fg:x="415" fg:w="1"/><text x="32.7990%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.5490%" y="213" width="0.0784%" height="15" fill="rgb(240,216,3)" fg:x="415" fg:w="1"/><text x="32.7990%" y="223.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="32.6275%" y="197" width="0.1569%" height="15" fill="rgb(232,218,17)" fg:x="416" fg:w="2"/><text x="32.8775%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (15 samples, 1.18%)</title><rect x="32.7843%" y="197" width="1.1765%" height="15" fill="rgb(229,163,45)" fg:x="418" fg:w="15"/><text x="33.0343%" y="207.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="33.7255%" y="181" width="0.2353%" height="15" fill="rgb(231,110,42)" fg:x="430" fg:w="3"/><text x="33.9755%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (18 samples, 1.41%)</title><rect x="32.6275%" y="213" width="1.4118%" height="15" fill="rgb(208,170,48)" fg:x="416" fg:w="18"/><text x="32.8775%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="33.9608%" y="197" width="0.0784%" height="15" fill="rgb(239,116,25)" fg:x="433" fg:w="1"/><text x="34.2108%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="34.1176%" y="197" width="0.1569%" height="15" fill="rgb(219,200,50)" fg:x="435" fg:w="2"/><text x="34.3676%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="34.1961%" y="181" width="0.0784%" height="15" fill="rgb(245,200,0)" fg:x="436" fg:w="1"/><text x="34.4461%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.1961%" y="165" width="0.0784%" height="15" fill="rgb(245,119,33)" fg:x="436" fg:w="1"/><text x="34.4461%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.31%)</title><rect x="34.0392%" y="213" width="0.3137%" height="15" fill="rgb(231,125,12)" fg:x="434" fg:w="4"/><text x="34.2892%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="34.2745%" y="197" width="0.0784%" height="15" fill="rgb(216,96,41)" fg:x="437" fg:w="1"/><text x="34.5245%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="34.2745%" y="181" width="0.0784%" height="15" fill="rgb(248,43,45)" fg:x="437" fg:w="1"/><text x="34.5245%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.31%)</title><rect x="34.7451%" y="149" width="0.3137%" height="15" fill="rgb(217,222,7)" fg:x="443" fg:w="4"/><text x="34.9951%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="34.8235%" y="133" width="0.2353%" height="15" fill="rgb(233,28,6)" fg:x="444" fg:w="3"/><text x="35.0735%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="34.9020%" y="117" width="0.1569%" height="15" fill="rgb(231,218,15)" fg:x="445" fg:w="2"/><text x="35.1520%" y="127.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="34.9020%" y="101" width="0.1569%" height="15" fill="rgb(226,171,48)" fg:x="445" fg:w="2"/><text x="35.1520%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="35.0588%" y="149" width="0.2353%" height="15" fill="rgb(235,201,9)" fg:x="447" fg:w="3"/><text x="35.3088%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="35.1373%" y="133" width="0.1569%" height="15" fill="rgb(217,80,15)" fg:x="448" fg:w="2"/><text x="35.3873%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="35.1373%" y="117" width="0.1569%" height="15" fill="rgb(219,152,8)" fg:x="448" fg:w="2"/><text x="35.3873%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.2157%" y="101" width="0.0784%" height="15" fill="rgb(243,107,38)" fg:x="449" fg:w="1"/><text x="35.4657%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.4510%" y="117" width="0.0784%" height="15" fill="rgb(231,17,5)" fg:x="452" fg:w="1"/><text x="35.7010%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.4510%" y="101" width="0.0784%" height="15" fill="rgb(209,25,54)" fg:x="452" fg:w="1"/><text x="35.7010%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.4510%" y="85" width="0.0784%" height="15" fill="rgb(219,0,2)" fg:x="452" fg:w="1"/><text x="35.7010%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.31%)</title><rect x="35.2941%" y="149" width="0.3137%" height="15" fill="rgb(246,9,5)" fg:x="450" fg:w="4"/><text x="35.5441%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="35.4510%" y="133" width="0.1569%" height="15" fill="rgb(226,159,4)" fg:x="452" fg:w="2"/><text x="35.7010%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="35.5294%" y="117" width="0.0784%" height="15" fill="rgb(219,175,34)" fg:x="453" fg:w="1"/><text x="35.7794%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.5294%" y="101" width="0.0784%" height="15" fill="rgb(236,10,46)" fg:x="453" fg:w="1"/><text x="35.7794%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="35.6078%" y="149" width="0.0784%" height="15" fill="rgb(240,211,16)" fg:x="454" fg:w="1"/><text x="35.8578%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="35.6078%" y="133" width="0.0784%" height="15" fill="rgb(205,3,43)" fg:x="454" fg:w="1"/><text x="35.8578%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="35.6078%" y="117" width="0.0784%" height="15" fill="rgb(245,7,22)" fg:x="454" fg:w="1"/><text x="35.8578%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (68 samples, 5.33%)</title><rect x="35.6863%" y="149" width="5.3333%" height="15" fill="rgb(239,132,32)" fg:x="455" fg:w="68"/><text x="35.9363%" y="159.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (68 samples, 5.33%)</title><rect x="35.6863%" y="133" width="5.3333%" height="15" fill="rgb(228,202,34)" fg:x="455" fg:w="68"/><text x="35.9363%" y="143.50">regex_a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (68 samples, 5.33%)</title><rect x="35.6863%" y="117" width="5.3333%" height="15" fill="rgb(254,200,22)" fg:x="455" fg:w="68"/><text x="35.9363%" y="127.50">alloc::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="41.0196%" y="149" width="0.1569%" height="15" fill="rgb(219,10,39)" fg:x="523" fg:w="2"/><text x="41.2696%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (88 samples, 6.90%)</title><rect x="34.3529%" y="197" width="6.9020%" height="15" fill="rgb(226,210,39)" fg:x="438" fg:w="88"/><text x="34.6029%" y="207.50">&lt;core::it..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (88 samples, 6.90%)</title><rect x="34.3529%" y="181" width="6.9020%" height="15" fill="rgb(208,219,16)" fg:x="438" fg:w="88"/><text x="34.6029%" y="191.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (88 samples, 6.90%)</title><rect x="34.3529%" y="165" width="6.9020%" height="15" fill="rgb(216,158,51)" fg:x="438" fg:w="88"/><text x="34.6029%" y="175.50">regex_aut..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="41.1765%" y="149" width="0.0784%" height="15" fill="rgb(233,14,44)" fg:x="525" fg:w="1"/><text x="41.4265%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.1765%" y="133" width="0.0784%" height="15" fill="rgb(237,97,39)" fg:x="525" fg:w="1"/><text x="41.4265%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.1765%" y="117" width="0.0784%" height="15" fill="rgb(218,198,43)" fg:x="525" fg:w="1"/><text x="41.4265%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.2549%" y="181" width="0.0784%" height="15" fill="rgb(231,104,20)" fg:x="526" fg:w="1"/><text x="41.5049%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="41.3333%" y="181" width="0.1569%" height="15" fill="rgb(254,36,13)" fg:x="527" fg:w="2"/><text x="41.5833%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="41.3333%" y="165" width="0.1569%" height="15" fill="rgb(248,14,50)" fg:x="527" fg:w="2"/><text x="41.5833%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="41.3333%" y="149" width="0.1569%" height="15" fill="rgb(217,107,29)" fg:x="527" fg:w="2"/><text x="41.5833%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="41.3333%" y="133" width="0.1569%" height="15" fill="rgb(251,169,33)" fg:x="527" fg:w="2"/><text x="41.5833%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.39%)</title><rect x="41.4902%" y="181" width="0.3922%" height="15" fill="rgb(217,108,32)" fg:x="529" fg:w="5"/><text x="41.7402%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="41.7255%" y="165" width="0.1569%" height="15" fill="rgb(219,66,42)" fg:x="532" fg:w="2"/><text x="41.9755%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.8039%" y="149" width="0.0784%" height="15" fill="rgb(206,180,7)" fg:x="533" fg:w="1"/><text x="42.0539%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.8039%" y="133" width="0.0784%" height="15" fill="rgb(208,226,31)" fg:x="533" fg:w="1"/><text x="42.0539%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.71%)</title><rect x="41.2549%" y="197" width="0.7059%" height="15" fill="rgb(218,26,49)" fg:x="526" fg:w="9"/><text x="41.5049%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="41.8824%" y="181" width="0.0784%" height="15" fill="rgb(233,197,48)" fg:x="534" fg:w="1"/><text x="42.1324%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="41.9608%" y="197" width="0.0784%" height="15" fill="rgb(252,181,51)" fg:x="535" fg:w="1"/><text x="42.2108%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="41.9608%" y="181" width="0.0784%" height="15" fill="rgb(253,90,19)" fg:x="535" fg:w="1"/><text x="42.2108%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.9608%" y="165" width="0.0784%" height="15" fill="rgb(215,171,30)" fg:x="535" fg:w="1"/><text x="42.2108%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (121 samples, 9.49%)</title><rect x="32.6275%" y="229" width="9.4902%" height="15" fill="rgb(214,222,9)" fg:x="416" fg:w="121"/><text x="32.8775%" y="239.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (99 samples, 7.76%)</title><rect x="34.3529%" y="213" width="7.7647%" height="15" fill="rgb(223,3,22)" fg:x="438" fg:w="99"/><text x="34.6029%" y="223.50">regex_autom..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="42.0392%" y="197" width="0.0784%" height="15" fill="rgb(225,196,46)" fg:x="536" fg:w="1"/><text x="42.2892%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="42.2745%" y="181" width="0.0784%" height="15" fill="rgb(209,110,37)" fg:x="539" fg:w="1"/><text x="42.5245%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.2745%" y="165" width="0.0784%" height="15" fill="rgb(249,89,12)" fg:x="539" fg:w="1"/><text x="42.5245%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="42.3529%" y="181" width="0.0784%" height="15" fill="rgb(226,27,33)" fg:x="540" fg:w="1"/><text x="42.6029%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="42.3529%" y="165" width="0.0784%" height="15" fill="rgb(213,82,22)" fg:x="540" fg:w="1"/><text x="42.6029%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="42.3529%" y="149" width="0.0784%" height="15" fill="rgb(248,140,0)" fg:x="540" fg:w="1"/><text x="42.6029%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::peek (1 samples, 0.08%)</title><rect x="42.4314%" y="181" width="0.0784%" height="15" fill="rgb(228,106,3)" fg:x="541" fg:w="1"/><text x="42.6814%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.47%)</title><rect x="42.1176%" y="229" width="0.4706%" height="15" fill="rgb(209,23,37)" fg:x="537" fg:w="6"/><text x="42.3676%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.47%)</title><rect x="42.1176%" y="213" width="0.4706%" height="15" fill="rgb(241,93,50)" fg:x="537" fg:w="6"/><text x="42.3676%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.31%)</title><rect x="42.2745%" y="197" width="0.3137%" height="15" fill="rgb(253,46,43)" fg:x="539" fg:w="4"/><text x="42.5245%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="42.5098%" y="181" width="0.0784%" height="15" fill="rgb(226,206,43)" fg:x="542" fg:w="1"/><text x="42.7598%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.5098%" y="165" width="0.0784%" height="15" fill="rgb(217,54,7)" fg:x="542" fg:w="1"/><text x="42.7598%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.5098%" y="149" width="0.0784%" height="15" fill="rgb(223,5,52)" fg:x="542" fg:w="1"/><text x="42.7598%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.5098%" y="133" width="0.0784%" height="15" fill="rgb(206,52,46)" fg:x="542" fg:w="1"/><text x="42.7598%" y="143.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::case_fold_simple (1 samples, 0.08%)</title><rect x="42.5882%" y="181" width="0.0784%" height="15" fill="rgb(253,136,11)" fg:x="543" fg:w="1"/><text x="42.8382%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="42.5882%" y="197" width="0.1569%" height="15" fill="rgb(208,106,33)" fg:x="543" fg:w="2"/><text x="42.8382%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="42.6667%" y="181" width="0.0784%" height="15" fill="rgb(206,54,4)" fg:x="544" fg:w="1"/><text x="42.9167%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (133 samples, 10.43%)</title><rect x="32.3922%" y="277" width="10.4314%" height="15" fill="rgb(213,3,15)" fg:x="413" fg:w="133"/><text x="32.6422%" y="287.50">regex::regex::s..</text></g><g><title>regex::builders::string::RegexBuilder::build (133 samples, 10.43%)</title><rect x="32.3922%" y="261" width="10.4314%" height="15" fill="rgb(252,211,39)" fg:x="413" fg:w="133"/><text x="32.6422%" y="271.50">regex::builders..</text></g><g><title>regex_automata::meta::regex::Builder::build (133 samples, 10.43%)</title><rect x="32.3922%" y="245" width="10.4314%" height="15" fill="rgb(223,6,36)" fg:x="413" fg:w="133"/><text x="32.6422%" y="255.50">regex_automata:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="42.5882%" y="229" width="0.2353%" height="15" fill="rgb(252,169,45)" fg:x="543" fg:w="3"/><text x="42.8382%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="42.5882%" y="213" width="0.2353%" height="15" fill="rgb(212,48,26)" fg:x="543" fg:w="3"/><text x="42.8382%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="42.7451%" y="197" width="0.0784%" height="15" fill="rgb(251,102,48)" fg:x="545" fg:w="1"/><text x="42.9951%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.5294%" y="197" width="0.0784%" height="15" fill="rgb(243,208,16)" fg:x="555" fg:w="1"/><text x="43.7794%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.5294%" y="181" width="0.0784%" height="15" fill="rgb(219,96,24)" fg:x="555" fg:w="1"/><text x="43.7794%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.5294%" y="165" width="0.0784%" height="15" fill="rgb(219,33,29)" fg:x="555" fg:w="1"/><text x="43.7794%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.71%)</title><rect x="42.9804%" y="229" width="0.7059%" height="15" fill="rgb(223,176,5)" fg:x="548" fg:w="9"/><text x="43.2304%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.71%)</title><rect x="42.9804%" y="213" width="0.7059%" height="15" fill="rgb(228,140,14)" fg:x="548" fg:w="9"/><text x="43.2304%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="43.6078%" y="197" width="0.0784%" height="15" fill="rgb(217,179,31)" fg:x="556" fg:w="1"/><text x="43.8578%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (153 samples, 12.00%)</title><rect x="31.7647%" y="293" width="12.0000%" height="15" fill="rgb(230,9,30)" fg:x="405" fg:w="153"/><text x="32.0147%" y="303.50">indefinite::helper..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.94%)</title><rect x="42.8235%" y="277" width="0.9412%" height="15" fill="rgb(230,136,20)" fg:x="546" fg:w="12"/><text x="43.0735%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.86%)</title><rect x="42.9020%" y="261" width="0.8627%" height="15" fill="rgb(215,210,22)" fg:x="547" fg:w="11"/><text x="43.1520%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.78%)</title><rect x="42.9804%" y="245" width="0.7843%" height="15" fill="rgb(218,43,5)" fg:x="548" fg:w="10"/><text x="43.2304%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="43.6863%" y="229" width="0.0784%" height="15" fill="rgb(216,11,5)" fg:x="557" fg:w="1"/><text x="43.9363%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="43.8431%" y="229" width="0.1569%" height="15" fill="rgb(209,82,29)" fg:x="559" fg:w="2"/><text x="44.0931%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.31%)</title><rect x="43.7647%" y="277" width="0.3137%" height="15" fill="rgb(244,115,12)" fg:x="558" fg:w="4"/><text x="44.0147%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="43.8431%" y="261" width="0.2353%" height="15" fill="rgb(222,82,18)" fg:x="559" fg:w="3"/><text x="44.0931%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="43.8431%" y="245" width="0.2353%" height="15" fill="rgb(249,227,8)" fg:x="559" fg:w="3"/><text x="44.0931%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="44.0000%" y="229" width="0.0784%" height="15" fill="rgb(253,141,45)" fg:x="561" fg:w="1"/><text x="44.2500%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.0000%" y="213" width="0.0784%" height="15" fill="rgb(234,184,4)" fg:x="561" fg:w="1"/><text x="44.2500%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="44.7059%" y="181" width="0.0784%" height="15" fill="rgb(218,194,23)" fg:x="570" fg:w="1"/><text x="44.9559%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.7059%" y="165" width="0.0784%" height="15" fill="rgb(235,66,41)" fg:x="570" fg:w="1"/><text x="44.9559%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="44.7059%" y="149" width="0.0784%" height="15" fill="rgb(245,217,1)" fg:x="570" fg:w="1"/><text x="44.9559%" y="159.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.63%)</title><rect x="44.2353%" y="197" width="0.6275%" height="15" fill="rgb(229,91,1)" fg:x="564" fg:w="8"/><text x="44.4853%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="44.7843%" y="181" width="0.0784%" height="15" fill="rgb(207,101,30)" fg:x="571" fg:w="1"/><text x="45.0343%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.78%)</title><rect x="44.1569%" y="213" width="0.7843%" height="15" fill="rgb(223,82,49)" fg:x="563" fg:w="10"/><text x="44.4069%" y="223.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="44.8627%" y="197" width="0.0784%" height="15" fill="rgb(218,167,17)" fg:x="572" fg:w="1"/><text x="45.1127%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="44.8627%" y="181" width="0.0784%" height="15" fill="rgb(208,103,14)" fg:x="572" fg:w="1"/><text x="45.1127%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.8627%" y="165" width="0.0784%" height="15" fill="rgb(238,20,8)" fg:x="572" fg:w="1"/><text x="45.1127%" y="175.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (12 samples, 0.94%)</title><rect x="44.0784%" y="277" width="0.9412%" height="15" fill="rgb(218,80,54)" fg:x="562" fg:w="12"/><text x="44.3284%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.86%)</title><rect x="44.1569%" y="261" width="0.8627%" height="15" fill="rgb(240,144,17)" fg:x="563" fg:w="11"/><text x="44.4069%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.86%)</title><rect x="44.1569%" y="245" width="0.8627%" height="15" fill="rgb(245,27,50)" fg:x="563" fg:w="11"/><text x="44.4069%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.86%)</title><rect x="44.1569%" y="229" width="0.8627%" height="15" fill="rgb(251,51,7)" fg:x="563" fg:w="11"/><text x="44.4069%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="44.9412%" y="213" width="0.0784%" height="15" fill="rgb(245,217,29)" fg:x="573" fg:w="1"/><text x="45.1912%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="44.9412%" y="197" width="0.0784%" height="15" fill="rgb(221,176,29)" fg:x="573" fg:w="1"/><text x="45.1912%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="45.0980%" y="229" width="0.0784%" height="15" fill="rgb(212,180,24)" fg:x="575" fg:w="1"/><text x="45.3480%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="45.0980%" y="213" width="0.0784%" height="15" fill="rgb(254,24,2)" fg:x="575" fg:w="1"/><text x="45.3480%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="45.0980%" y="197" width="0.0784%" height="15" fill="rgb(230,100,2)" fg:x="575" fg:w="1"/><text x="45.3480%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="45.0980%" y="181" width="0.0784%" height="15" fill="rgb(219,142,25)" fg:x="575" fg:w="1"/><text x="45.3480%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.0980%" y="165" width="0.0784%" height="15" fill="rgb(240,73,43)" fg:x="575" fg:w="1"/><text x="45.3480%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="45.0980%" y="149" width="0.0784%" height="15" fill="rgb(214,114,15)" fg:x="575" fg:w="1"/><text x="45.3480%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="45.1765%" y="229" width="0.0784%" height="15" fill="rgb(207,130,4)" fg:x="576" fg:w="1"/><text x="45.4265%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="45.1765%" y="213" width="0.0784%" height="15" fill="rgb(221,25,40)" fg:x="576" fg:w="1"/><text x="45.4265%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="45.1765%" y="197" width="0.0784%" height="15" fill="rgb(241,184,7)" fg:x="576" fg:w="1"/><text x="45.4265%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="45.1765%" y="181" width="0.0784%" height="15" fill="rgb(235,159,4)" fg:x="576" fg:w="1"/><text x="45.4265%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (2 samples, 0.16%)</title><rect x="45.2549%" y="229" width="0.1569%" height="15" fill="rgb(214,87,48)" fg:x="577" fg:w="2"/><text x="45.5049%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="45.2549%" y="213" width="0.1569%" height="15" fill="rgb(246,198,24)" fg:x="577" fg:w="2"/><text x="45.5049%" y="223.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="45.4118%" y="229" width="0.0784%" height="15" fill="rgb(209,66,40)" fg:x="579" fg:w="1"/><text x="45.6618%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.78%)</title><rect x="45.5686%" y="213" width="0.7843%" height="15" fill="rgb(233,147,39)" fg:x="581" fg:w="10"/><text x="45.8186%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.71%)</title><rect x="45.6471%" y="197" width="0.7059%" height="15" fill="rgb(231,145,52)" fg:x="582" fg:w="9"/><text x="45.8971%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.2745%" y="181" width="0.0784%" height="15" fill="rgb(206,20,26)" fg:x="590" fg:w="1"/><text x="46.5245%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.39%)</title><rect x="46.3529%" y="213" width="0.3922%" height="15" fill="rgb(238,220,4)" fg:x="591" fg:w="5"/><text x="46.6029%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.31%)</title><rect x="46.4314%" y="197" width="0.3137%" height="15" fill="rgb(252,195,42)" fg:x="592" fg:w="4"/><text x="46.6814%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.31%)</title><rect x="47.0588%" y="181" width="0.3137%" height="15" fill="rgb(209,10,6)" fg:x="600" fg:w="4"/><text x="47.3088%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="47.2157%" y="165" width="0.1569%" height="15" fill="rgb(229,3,52)" fg:x="602" fg:w="2"/><text x="47.4657%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="47.2941%" y="149" width="0.0784%" height="15" fill="rgb(253,49,37)" fg:x="603" fg:w="1"/><text x="47.5441%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.2941%" y="133" width="0.0784%" height="15" fill="rgb(240,103,49)" fg:x="603" fg:w="1"/><text x="47.5441%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="47.2941%" y="117" width="0.0784%" height="15" fill="rgb(250,182,30)" fg:x="603" fg:w="1"/><text x="47.5441%" y="127.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (11 samples, 0.86%)</title><rect x="46.7451%" y="213" width="0.8627%" height="15" fill="rgb(248,8,30)" fg:x="596" fg:w="11"/><text x="46.9951%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (11 samples, 0.86%)</title><rect x="46.7451%" y="197" width="0.8627%" height="15" fill="rgb(237,120,30)" fg:x="596" fg:w="11"/><text x="46.9951%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="47.3725%" y="181" width="0.2353%" height="15" fill="rgb(221,146,34)" fg:x="604" fg:w="3"/><text x="47.6225%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="47.3725%" y="165" width="0.2353%" height="15" fill="rgb(242,55,13)" fg:x="604" fg:w="3"/><text x="47.6225%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="47.4510%" y="149" width="0.1569%" height="15" fill="rgb(242,112,31)" fg:x="605" fg:w="2"/><text x="47.7010%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="47.6078%" y="149" width="0.0784%" height="15" fill="rgb(249,192,27)" fg:x="607" fg:w="1"/><text x="47.8578%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="48.1569%" y="101" width="0.1569%" height="15" fill="rgb(208,204,44)" fg:x="614" fg:w="2"/><text x="48.4069%" y="111.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="48.3137%" y="101" width="0.2353%" height="15" fill="rgb(208,93,54)" fg:x="616" fg:w="3"/><text x="48.5637%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="48.5490%" y="101" width="0.0784%" height="15" fill="rgb(242,1,31)" fg:x="619" fg:w="1"/><text x="48.7990%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.5490%" y="85" width="0.0784%" height="15" fill="rgb(241,83,25)" fg:x="619" fg:w="1"/><text x="48.7990%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.5490%" y="69" width="0.0784%" height="15" fill="rgb(205,169,50)" fg:x="619" fg:w="1"/><text x="48.7990%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.5490%" y="53" width="0.0784%" height="15" fill="rgb(239,186,37)" fg:x="619" fg:w="1"/><text x="48.7990%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="48.6275%" y="101" width="0.0784%" height="15" fill="rgb(205,221,10)" fg:x="620" fg:w="1"/><text x="48.8775%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.6275%" y="85" width="0.0784%" height="15" fill="rgb(218,196,15)" fg:x="620" fg:w="1"/><text x="48.8775%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.6275%" y="69" width="0.0784%" height="15" fill="rgb(218,196,35)" fg:x="620" fg:w="1"/><text x="48.8775%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.6275%" y="53" width="0.0784%" height="15" fill="rgb(233,63,24)" fg:x="620" fg:w="1"/><text x="48.8775%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.0980%" y="69" width="0.0784%" height="15" fill="rgb(225,8,4)" fg:x="626" fg:w="1"/><text x="49.3480%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.0980%" y="53" width="0.0784%" height="15" fill="rgb(234,105,35)" fg:x="626" fg:w="1"/><text x="49.3480%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.0980%" y="37" width="0.0784%" height="15" fill="rgb(236,21,32)" fg:x="626" fg:w="1"/><text x="49.3480%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (11 samples, 0.86%)</title><rect x="48.7059%" y="101" width="0.8627%" height="15" fill="rgb(228,109,6)" fg:x="621" fg:w="11"/><text x="48.9559%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (7 samples, 0.55%)</title><rect x="49.0196%" y="85" width="0.5490%" height="15" fill="rgb(229,215,31)" fg:x="625" fg:w="7"/><text x="49.2696%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.39%)</title><rect x="49.1765%" y="69" width="0.3922%" height="15" fill="rgb(221,52,54)" fg:x="627" fg:w="5"/><text x="49.4265%" y="79.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="49.3333%" y="53" width="0.2353%" height="15" fill="rgb(252,129,43)" fg:x="629" fg:w="3"/><text x="49.5833%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="49.5686%" y="101" width="0.0784%" height="15" fill="rgb(248,183,27)" fg:x="632" fg:w="1"/><text x="49.8186%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="49.5686%" y="85" width="0.0784%" height="15" fill="rgb(250,0,22)" fg:x="632" fg:w="1"/><text x="49.8186%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="49.5686%" y="69" width="0.0784%" height="15" fill="rgb(213,166,10)" fg:x="632" fg:w="1"/><text x="49.8186%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (64 samples, 5.02%)</title><rect x="49.6471%" y="101" width="5.0196%" height="15" fill="rgb(207,163,36)" fg:x="633" fg:w="64"/><text x="49.8971%" y="111.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (64 samples, 5.02%)</title><rect x="49.6471%" y="85" width="5.0196%" height="15" fill="rgb(208,122,22)" fg:x="633" fg:w="64"/><text x="49.8971%" y="95.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (64 samples, 5.02%)</title><rect x="49.6471%" y="69" width="5.0196%" height="15" fill="rgb(207,104,49)" fg:x="633" fg:w="64"/><text x="49.8971%" y="79.50">alloc:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="54.6667%" y="101" width="0.1569%" height="15" fill="rgb(248,211,50)" fg:x="697" fg:w="2"/><text x="54.9167%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.7451%" y="85" width="0.0784%" height="15" fill="rgb(217,13,45)" fg:x="698" fg:w="1"/><text x="54.9951%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (93 samples, 7.29%)</title><rect x="47.6078%" y="197" width="7.2941%" height="15" fill="rgb(211,216,49)" fg:x="607" fg:w="93"/><text x="47.8578%" y="207.50">&lt;core::ite..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (93 samples, 7.29%)</title><rect x="47.6078%" y="181" width="7.2941%" height="15" fill="rgb(221,58,53)" fg:x="607" fg:w="93"/><text x="47.8578%" y="191.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (93 samples, 7.29%)</title><rect x="47.6078%" y="165" width="7.2941%" height="15" fill="rgb(220,112,41)" fg:x="607" fg:w="93"/><text x="47.8578%" y="175.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (92 samples, 7.22%)</title><rect x="47.6863%" y="149" width="7.2157%" height="15" fill="rgb(236,38,28)" fg:x="608" fg:w="92"/><text x="47.9363%" y="159.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (92 samples, 7.22%)</title><rect x="47.6863%" y="133" width="7.2157%" height="15" fill="rgb(227,195,22)" fg:x="608" fg:w="92"/><text x="47.9363%" y="143.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (92 samples, 7.22%)</title><rect x="47.6863%" y="117" width="7.2157%" height="15" fill="rgb(214,55,33)" fg:x="608" fg:w="92"/><text x="47.9363%" y="127.50">regex_auto..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="54.8235%" y="101" width="0.0784%" height="15" fill="rgb(248,80,13)" fg:x="699" fg:w="1"/><text x="55.0735%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="54.9020%" y="197" width="0.0784%" height="15" fill="rgb(238,52,6)" fg:x="700" fg:w="1"/><text x="55.1520%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.1373%" y="181" width="0.0784%" height="15" fill="rgb(224,198,47)" fg:x="703" fg:w="1"/><text x="55.3873%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.31%)</title><rect x="55.2157%" y="181" width="0.3137%" height="15" fill="rgb(233,171,20)" fg:x="704" fg:w="4"/><text x="55.4657%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="55.3725%" y="165" width="0.1569%" height="15" fill="rgb(241,30,25)" fg:x="706" fg:w="2"/><text x="55.6225%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="55.3725%" y="149" width="0.1569%" height="15" fill="rgb(207,171,38)" fg:x="706" fg:w="2"/><text x="55.6225%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="55.3725%" y="133" width="0.1569%" height="15" fill="rgb(234,70,1)" fg:x="706" fg:w="2"/><text x="55.6225%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="55.5294%" y="181" width="0.2353%" height="15" fill="rgb(232,178,18)" fg:x="708" fg:w="3"/><text x="55.7794%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="55.6863%" y="165" width="0.0784%" height="15" fill="rgb(241,78,40)" fg:x="710" fg:w="1"/><text x="55.9363%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.6863%" y="149" width="0.0784%" height="15" fill="rgb(222,35,25)" fg:x="710" fg:w="1"/><text x="55.9363%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="55.6863%" y="133" width="0.0784%" height="15" fill="rgb(207,92,16)" fg:x="710" fg:w="1"/><text x="55.9363%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="55.6863%" y="117" width="0.0784%" height="15" fill="rgb(216,59,51)" fg:x="710" fg:w="1"/><text x="55.9363%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="55.7647%" y="181" width="0.0784%" height="15" fill="rgb(213,80,28)" fg:x="711" fg:w="1"/><text x="56.0147%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (134 samples, 10.51%)</title><rect x="45.4902%" y="229" width="10.5098%" height="15" fill="rgb(220,93,7)" fg:x="580" fg:w="134"/><text x="45.7402%" y="239.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (107 samples, 8.39%)</title><rect x="47.6078%" y="213" width="8.3922%" height="15" fill="rgb(225,24,44)" fg:x="607" fg:w="107"/><text x="47.8578%" y="223.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.02%)</title><rect x="54.9804%" y="197" width="1.0196%" height="15" fill="rgb(243,74,40)" fg:x="701" fg:w="13"/><text x="55.2304%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="55.8431%" y="181" width="0.1569%" height="15" fill="rgb(228,39,7)" fg:x="712" fg:w="2"/><text x="56.0931%" y="191.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="56.0000%" y="229" width="0.0784%" height="15" fill="rgb(227,79,8)" fg:x="714" fg:w="1"/><text x="56.2500%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="56.0000%" y="213" width="0.0784%" height="15" fill="rgb(236,58,11)" fg:x="714" fg:w="1"/><text x="56.2500%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="56.0000%" y="197" width="0.0784%" height="15" fill="rgb(249,63,35)" fg:x="714" fg:w="1"/><text x="56.2500%" y="207.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="56.0000%" y="181" width="0.0784%" height="15" fill="rgb(252,114,16)" fg:x="714" fg:w="1"/><text x="56.2500%" y="191.50"></text></g><g><title>posix_memalign (1 samples, 0.08%)</title><rect x="56.0000%" y="165" width="0.0784%" height="15" fill="rgb(254,151,24)" fg:x="714" fg:w="1"/><text x="56.2500%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="56.0784%" y="197" width="0.1569%" height="15" fill="rgb(253,54,39)" fg:x="715" fg:w="2"/><text x="56.3284%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="56.1569%" y="181" width="0.0784%" height="15" fill="rgb(243,25,45)" fg:x="716" fg:w="1"/><text x="56.4069%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="56.1569%" y="165" width="0.0784%" height="15" fill="rgb(234,134,9)" fg:x="716" fg:w="1"/><text x="56.4069%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.1569%" y="149" width="0.0784%" height="15" fill="rgb(227,166,31)" fg:x="716" fg:w="1"/><text x="56.4069%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (2 samples, 0.16%)</title><rect x="56.2353%" y="197" width="0.1569%" height="15" fill="rgb(245,143,41)" fg:x="717" fg:w="2"/><text x="56.4853%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.3137%" y="181" width="0.0784%" height="15" fill="rgb(238,181,32)" fg:x="718" fg:w="1"/><text x="56.5637%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.39%)</title><rect x="56.0784%" y="229" width="0.3922%" height="15" fill="rgb(224,113,18)" fg:x="715" fg:w="5"/><text x="56.3284%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.39%)</title><rect x="56.0784%" y="213" width="0.3922%" height="15" fill="rgb(240,229,28)" fg:x="715" fg:w="5"/><text x="56.3284%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="56.3922%" y="197" width="0.0784%" height="15" fill="rgb(250,185,3)" fg:x="719" fg:w="1"/><text x="56.6422%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="56.4706%" y="197" width="0.0784%" height="15" fill="rgb(212,59,25)" fg:x="720" fg:w="1"/><text x="56.7206%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="56.4706%" y="181" width="0.0784%" height="15" fill="rgb(221,87,20)" fg:x="720" fg:w="1"/><text x="56.7206%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="56.5490%" y="197" width="0.0784%" height="15" fill="rgb(213,74,28)" fg:x="721" fg:w="1"/><text x="56.7990%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (165 samples, 12.94%)</title><rect x="43.7647%" y="293" width="12.9412%" height="15" fill="rgb(224,132,34)" fg:x="558" fg:w="165"/><text x="44.0147%" y="303.50">indefinite::rules::..</text></g><g><title>regex::regex::string::Regex::new (149 samples, 11.69%)</title><rect x="45.0196%" y="277" width="11.6863%" height="15" fill="rgb(222,101,24)" fg:x="574" fg:w="149"/><text x="45.2696%" y="287.50">regex::regex::str..</text></g><g><title>regex::builders::string::RegexBuilder::build (149 samples, 11.69%)</title><rect x="45.0196%" y="261" width="11.6863%" height="15" fill="rgb(254,142,4)" fg:x="574" fg:w="149"/><text x="45.2696%" y="271.50">regex::builders::..</text></g><g><title>regex_automata::meta::regex::Builder::build (148 samples, 11.61%)</title><rect x="45.0980%" y="245" width="11.6078%" height="15" fill="rgb(230,229,49)" fg:x="575" fg:w="148"/><text x="45.3480%" y="255.50">regex_automata::m..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="56.4706%" y="229" width="0.2353%" height="15" fill="rgb(238,70,47)" fg:x="720" fg:w="3"/><text x="56.7206%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="56.4706%" y="213" width="0.2353%" height="15" fill="rgb(231,160,17)" fg:x="720" fg:w="3"/><text x="56.7206%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="56.6275%" y="197" width="0.0784%" height="15" fill="rgb(218,68,53)" fg:x="722" fg:w="1"/><text x="56.8775%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="56.6275%" y="181" width="0.0784%" height="15" fill="rgb(236,111,10)" fg:x="722" fg:w="1"/><text x="56.8775%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="56.7059%" y="261" width="0.1569%" height="15" fill="rgb(224,34,41)" fg:x="723" fg:w="2"/><text x="56.9559%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="56.7059%" y="245" width="0.1569%" height="15" fill="rgb(241,118,19)" fg:x="723" fg:w="2"/><text x="56.9559%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="56.7059%" y="229" width="0.1569%" height="15" fill="rgb(238,129,25)" fg:x="723" fg:w="2"/><text x="56.9559%" y="239.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="56.7843%" y="213" width="0.0784%" height="15" fill="rgb(238,22,31)" fg:x="724" fg:w="1"/><text x="57.0343%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="56.9412%" y="213" width="0.0784%" height="15" fill="rgb(222,174,48)" fg:x="726" fg:w="1"/><text x="57.1912%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.9412%" y="197" width="0.0784%" height="15" fill="rgb(206,152,40)" fg:x="726" fg:w="1"/><text x="57.1912%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.39%)</title><rect x="56.8627%" y="261" width="0.3922%" height="15" fill="rgb(218,99,54)" fg:x="725" fg:w="5"/><text x="57.1127%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.31%)</title><rect x="56.9412%" y="245" width="0.3137%" height="15" fill="rgb(220,174,26)" fg:x="726" fg:w="4"/><text x="57.1912%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.31%)</title><rect x="56.9412%" y="229" width="0.3137%" height="15" fill="rgb(245,116,9)" fg:x="726" fg:w="4"/><text x="57.1912%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (3 samples, 0.24%)</title><rect x="57.0196%" y="213" width="0.2353%" height="15" fill="rgb(209,72,35)" fg:x="727" fg:w="3"/><text x="57.2696%" y="223.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="57.0196%" y="197" width="0.2353%" height="15" fill="rgb(226,126,21)" fg:x="727" fg:w="3"/><text x="57.2696%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="57.3333%" y="213" width="0.0784%" height="15" fill="rgb(227,192,1)" fg:x="731" fg:w="1"/><text x="57.5833%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="57.3333%" y="197" width="0.0784%" height="15" fill="rgb(237,180,29)" fg:x="731" fg:w="1"/><text x="57.5833%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="57.3333%" y="181" width="0.0784%" height="15" fill="rgb(230,197,35)" fg:x="731" fg:w="1"/><text x="57.5833%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.3333%" y="165" width="0.0784%" height="15" fill="rgb(246,193,31)" fg:x="731" fg:w="1"/><text x="57.5833%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.3333%" y="149" width="0.0784%" height="15" fill="rgb(241,36,4)" fg:x="731" fg:w="1"/><text x="57.5833%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.3333%" y="133" width="0.0784%" height="15" fill="rgb(241,130,17)" fg:x="731" fg:w="1"/><text x="57.5833%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="57.4118%" y="213" width="0.1569%" height="15" fill="rgb(206,137,32)" fg:x="732" fg:w="2"/><text x="57.6618%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="57.6471%" y="197" width="0.0784%" height="15" fill="rgb(237,228,51)" fg:x="735" fg:w="1"/><text x="57.8971%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.6471%" y="181" width="0.0784%" height="15" fill="rgb(243,6,42)" fg:x="735" fg:w="1"/><text x="57.8971%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="57.7255%" y="197" width="0.2353%" height="15" fill="rgb(251,74,28)" fg:x="736" fg:w="3"/><text x="57.9755%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="57.7255%" y="181" width="0.2353%" height="15" fill="rgb(218,20,49)" fg:x="736" fg:w="3"/><text x="57.9755%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (6 samples, 0.47%)</title><rect x="57.5686%" y="213" width="0.4706%" height="15" fill="rgb(238,28,14)" fg:x="734" fg:w="6"/><text x="57.8186%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.08%)</title><rect x="57.9608%" y="197" width="0.0784%" height="15" fill="rgb(229,40,46)" fg:x="739" fg:w="1"/><text x="58.2108%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="57.9608%" y="181" width="0.0784%" height="15" fill="rgb(244,195,20)" fg:x="739" fg:w="1"/><text x="58.2108%" y="191.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="57.9608%" y="165" width="0.0784%" height="15" fill="rgb(253,56,35)" fg:x="739" fg:w="1"/><text x="58.2108%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="58.1961%" y="181" width="0.0784%" height="15" fill="rgb(210,149,44)" fg:x="742" fg:w="1"/><text x="58.4461%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="58.2745%" y="181" width="0.0784%" height="15" fill="rgb(240,135,12)" fg:x="743" fg:w="1"/><text x="58.5245%" y="191.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="58.2745%" y="165" width="0.0784%" height="15" fill="rgb(251,24,50)" fg:x="743" fg:w="1"/><text x="58.5245%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.39%)</title><rect x="58.0392%" y="213" width="0.3922%" height="15" fill="rgb(243,200,47)" fg:x="740" fg:w="5"/><text x="58.2892%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.39%)</title><rect x="58.0392%" y="197" width="0.3922%" height="15" fill="rgb(224,166,26)" fg:x="740" fg:w="5"/><text x="58.2892%" y="207.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="58.3529%" y="181" width="0.0784%" height="15" fill="rgb(233,0,47)" fg:x="744" fg:w="1"/><text x="58.6029%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="58.3529%" y="165" width="0.0784%" height="15" fill="rgb(253,80,5)" fg:x="744" fg:w="1"/><text x="58.6029%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="58.4314%" y="181" width="0.0784%" height="15" fill="rgb(214,133,25)" fg:x="745" fg:w="1"/><text x="58.6814%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="58.4314%" y="165" width="0.0784%" height="15" fill="rgb(209,27,14)" fg:x="745" fg:w="1"/><text x="58.6814%" y="175.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="58.4314%" y="149" width="0.0784%" height="15" fill="rgb(219,102,51)" fg:x="745" fg:w="1"/><text x="58.6814%" y="159.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (17 samples, 1.33%)</title><rect x="57.2549%" y="245" width="1.3333%" height="15" fill="rgb(237,18,16)" fg:x="730" fg:w="17"/><text x="57.5049%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (17 samples, 1.33%)</title><rect x="57.2549%" y="229" width="1.3333%" height="15" fill="rgb(241,85,17)" fg:x="730" fg:w="17"/><text x="57.5049%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="58.4314%" y="213" width="0.1569%" height="15" fill="rgb(236,90,42)" fg:x="745" fg:w="2"/><text x="58.6814%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="58.4314%" y="197" width="0.1569%" height="15" fill="rgb(249,57,21)" fg:x="745" fg:w="2"/><text x="58.6814%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="58.5098%" y="181" width="0.0784%" height="15" fill="rgb(243,12,36)" fg:x="746" fg:w="1"/><text x="58.7598%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="58.5098%" y="165" width="0.0784%" height="15" fill="rgb(253,128,47)" fg:x="746" fg:w="1"/><text x="58.7598%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (18 samples, 1.41%)</title><rect x="57.2549%" y="261" width="1.4118%" height="15" fill="rgb(207,33,20)" fg:x="730" fg:w="18"/><text x="57.5049%" y="271.50"></text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="58.5882%" y="245" width="0.0784%" height="15" fill="rgb(233,215,35)" fg:x="747" fg:w="1"/><text x="58.8382%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="58.7451%" y="213" width="0.1569%" height="15" fill="rgb(249,188,52)" fg:x="749" fg:w="2"/><text x="58.9951%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="58.7451%" y="197" width="0.1569%" height="15" fill="rgb(225,12,32)" fg:x="749" fg:w="2"/><text x="58.9951%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="58.8235%" y="181" width="0.0784%" height="15" fill="rgb(247,98,14)" fg:x="750" fg:w="1"/><text x="59.0735%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (364 samples, 28.55%)</title><rect x="30.4314%" y="373" width="28.5490%" height="15" fill="rgb(247,219,48)" fg:x="388" fg:w="364"/><text x="30.6814%" y="383.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::lo..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (347 samples, 27.22%)</title><rect x="31.7647%" y="357" width="27.2157%" height="15" fill="rgb(253,60,48)" fg:x="405" fg:w="347"/><text x="32.0147%" y="367.50">plugins_core::looking::model::Unqualified::q..</text></g><g><title>indefinite::indefinite (347 samples, 27.22%)</title><rect x="31.7647%" y="341" width="27.2157%" height="15" fill="rgb(245,15,52)" fg:x="405" fg:w="347"/><text x="32.0147%" y="351.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (347 samples, 27.22%)</title><rect x="31.7647%" y="325" width="27.2157%" height="15" fill="rgb(220,133,28)" fg:x="405" fg:w="347"/><text x="32.0147%" y="335.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (347 samples, 27.22%)</title><rect x="31.7647%" y="309" width="27.2157%" height="15" fill="rgb(217,180,4)" fg:x="405" fg:w="347"/><text x="32.0147%" y="319.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (29 samples, 2.27%)</title><rect x="56.7059%" y="293" width="2.2745%" height="15" fill="rgb(251,24,1)" fg:x="723" fg:w="29"/><text x="56.9559%" y="303.50">i..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (29 samples, 2.27%)</title><rect x="56.7059%" y="277" width="2.2745%" height="15" fill="rgb(212,185,49)" fg:x="723" fg:w="29"/><text x="56.9559%" y="287.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.31%)</title><rect x="58.6667%" y="261" width="0.3137%" height="15" fill="rgb(215,175,22)" fg:x="748" fg:w="4"/><text x="58.9167%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.31%)</title><rect x="58.6667%" y="245" width="0.3137%" height="15" fill="rgb(250,205,14)" fg:x="748" fg:w="4"/><text x="58.9167%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.31%)</title><rect x="58.6667%" y="229" width="0.3137%" height="15" fill="rgb(225,211,22)" fg:x="748" fg:w="4"/><text x="58.9167%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="58.9020%" y="213" width="0.0784%" height="15" fill="rgb(251,179,42)" fg:x="751" fg:w="1"/><text x="59.1520%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="58.9020%" y="197" width="0.0784%" height="15" fill="rgb(208,216,51)" fg:x="751" fg:w="1"/><text x="59.1520%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.9020%" y="181" width="0.0784%" height="15" fill="rgb(235,36,11)" fg:x="751" fg:w="1"/><text x="59.1520%" y="191.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (4 samples, 0.31%)</title><rect x="58.9804%" y="357" width="0.3137%" height="15" fill="rgb(213,189,28)" fg:x="752" fg:w="4"/><text x="59.2304%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="59.1373%" y="341" width="0.1569%" height="15" fill="rgb(227,203,42)" fg:x="754" fg:w="2"/><text x="59.3873%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="59.2157%" y="325" width="0.0784%" height="15" fill="rgb(244,72,36)" fg:x="755" fg:w="1"/><text x="59.4657%" y="335.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.3725%" y="277" width="0.0784%" height="15" fill="rgb(213,53,17)" fg:x="757" fg:w="1"/><text x="59.6225%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.3725%" y="261" width="0.0784%" height="15" fill="rgb(207,167,3)" fg:x="757" fg:w="1"/><text x="59.6225%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.3725%" y="245" width="0.0784%" height="15" fill="rgb(216,98,30)" fg:x="757" fg:w="1"/><text x="59.6225%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="59.3725%" y="325" width="0.1569%" height="15" fill="rgb(236,123,15)" fg:x="757" fg:w="2"/><text x="59.6225%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="59.3725%" y="309" width="0.1569%" height="15" fill="rgb(248,81,50)" fg:x="757" fg:w="2"/><text x="59.6225%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="59.3725%" y="293" width="0.1569%" height="15" fill="rgb(214,120,4)" fg:x="757" fg:w="2"/><text x="59.6225%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.4510%" y="277" width="0.0784%" height="15" fill="rgb(208,179,34)" fg:x="758" fg:w="1"/><text x="59.7010%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.4510%" y="261" width="0.0784%" height="15" fill="rgb(227,140,7)" fg:x="758" fg:w="1"/><text x="59.7010%" y="271.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (8 samples, 0.63%)</title><rect x="58.9804%" y="373" width="0.6275%" height="15" fill="rgb(214,22,6)" fg:x="752" fg:w="8"/><text x="59.2304%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.31%)</title><rect x="59.2941%" y="357" width="0.3137%" height="15" fill="rgb(207,137,27)" fg:x="756" fg:w="4"/><text x="59.5441%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.31%)</title><rect x="59.2941%" y="341" width="0.3137%" height="15" fill="rgb(210,8,46)" fg:x="756" fg:w="4"/><text x="59.5441%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.5294%" y="325" width="0.0784%" height="15" fill="rgb(240,16,54)" fg:x="759" fg:w="1"/><text x="59.7794%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.5294%" y="309" width="0.0784%" height="15" fill="rgb(211,209,29)" fg:x="759" fg:w="1"/><text x="59.7794%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="59.5294%" y="293" width="0.0784%" height="15" fill="rgb(226,228,24)" fg:x="759" fg:w="1"/><text x="59.7794%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="59.5294%" y="277" width="0.0784%" height="15" fill="rgb(222,84,9)" fg:x="759" fg:w="1"/><text x="59.7794%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="59.6863%" y="341" width="0.0784%" height="15" fill="rgb(234,203,30)" fg:x="761" fg:w="1"/><text x="59.9363%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="59.6863%" y="325" width="0.0784%" height="15" fill="rgb(238,109,14)" fg:x="761" fg:w="1"/><text x="59.9363%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.6863%" y="309" width="0.0784%" height="15" fill="rgb(233,206,34)" fg:x="761" fg:w="1"/><text x="59.9363%" y="319.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (3 samples, 0.24%)</title><rect x="59.6078%" y="357" width="0.2353%" height="15" fill="rgb(220,167,47)" fg:x="760" fg:w="3"/><text x="59.8578%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="59.7647%" y="341" width="0.0784%" height="15" fill="rgb(238,105,10)" fg:x="762" fg:w="1"/><text x="60.0147%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.7647%" y="325" width="0.0784%" height="15" fill="rgb(213,227,17)" fg:x="762" fg:w="1"/><text x="60.0147%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.7647%" y="309" width="0.0784%" height="15" fill="rgb(217,132,38)" fg:x="762" fg:w="1"/><text x="60.0147%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.7647%" y="293" width="0.0784%" height="15" fill="rgb(242,146,4)" fg:x="762" fg:w="1"/><text x="60.0147%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.7647%" y="277" width="0.0784%" height="15" fill="rgb(212,61,9)" fg:x="762" fg:w="1"/><text x="60.0147%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.7647%" y="261" width="0.0784%" height="15" fill="rgb(247,126,22)" fg:x="762" fg:w="1"/><text x="60.0147%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.7647%" y="245" width="0.0784%" height="15" fill="rgb(220,196,2)" fg:x="762" fg:w="1"/><text x="60.0147%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.7647%" y="229" width="0.0784%" height="15" fill="rgb(208,46,4)" fg:x="762" fg:w="1"/><text x="60.0147%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.7647%" y="213" width="0.0784%" height="15" fill="rgb(252,104,46)" fg:x="762" fg:w="1"/><text x="60.0147%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.7647%" y="197" width="0.0784%" height="15" fill="rgb(237,152,48)" fg:x="762" fg:w="1"/><text x="60.0147%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.7647%" y="181" width="0.0784%" height="15" fill="rgb(221,59,37)" fg:x="762" fg:w="1"/><text x="60.0147%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="59.7647%" y="165" width="0.0784%" height="15" fill="rgb(209,202,51)" fg:x="762" fg:w="1"/><text x="60.0147%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="59.7647%" y="149" width="0.0784%" height="15" fill="rgb(228,81,30)" fg:x="762" fg:w="1"/><text x="60.0147%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="59.7647%" y="133" width="0.0784%" height="15" fill="rgb(227,42,39)" fg:x="762" fg:w="1"/><text x="60.0147%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="59.7647%" y="117" width="0.0784%" height="15" fill="rgb(221,26,2)" fg:x="762" fg:w="1"/><text x="60.0147%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.7647%" y="101" width="0.0784%" height="15" fill="rgb(254,61,31)" fg:x="762" fg:w="1"/><text x="60.0147%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.8431%" y="293" width="0.0784%" height="15" fill="rgb(222,173,38)" fg:x="763" fg:w="1"/><text x="60.0931%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.9216%" y="245" width="0.0784%" height="15" fill="rgb(218,50,12)" fg:x="764" fg:w="1"/><text x="60.1716%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.0000%" y="197" width="0.0784%" height="15" fill="rgb(223,88,40)" fg:x="765" fg:w="1"/><text x="60.2500%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.0000%" y="181" width="0.0784%" height="15" fill="rgb(237,54,19)" fg:x="765" fg:w="1"/><text x="60.2500%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.0000%" y="165" width="0.0784%" height="15" fill="rgb(251,129,25)" fg:x="765" fg:w="1"/><text x="60.2500%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.0784%" y="197" width="0.0784%" height="15" fill="rgb(238,97,19)" fg:x="766" fg:w="1"/><text x="60.3284%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.0784%" y="181" width="0.0784%" height="15" fill="rgb(240,169,18)" fg:x="766" fg:w="1"/><text x="60.3284%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.0784%" y="165" width="0.0784%" height="15" fill="rgb(230,187,49)" fg:x="766" fg:w="1"/><text x="60.3284%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.0784%" y="149" width="0.0784%" height="15" fill="rgb(209,44,26)" fg:x="766" fg:w="1"/><text x="60.3284%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.0784%" y="133" width="0.0784%" height="15" fill="rgb(244,0,6)" fg:x="766" fg:w="1"/><text x="60.3284%" y="143.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.31%)</title><rect x="59.9216%" y="293" width="0.3137%" height="15" fill="rgb(248,18,21)" fg:x="764" fg:w="4"/><text x="60.1716%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.31%)</title><rect x="59.9216%" y="277" width="0.3137%" height="15" fill="rgb(245,180,19)" fg:x="764" fg:w="4"/><text x="60.1716%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.31%)</title><rect x="59.9216%" y="261" width="0.3137%" height="15" fill="rgb(252,118,36)" fg:x="764" fg:w="4"/><text x="60.1716%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="60.0000%" y="245" width="0.2353%" height="15" fill="rgb(210,224,19)" fg:x="765" fg:w="3"/><text x="60.2500%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="60.0000%" y="229" width="0.2353%" height="15" fill="rgb(218,30,24)" fg:x="765" fg:w="3"/><text x="60.2500%" y="239.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="60.0000%" y="213" width="0.2353%" height="15" fill="rgb(219,75,50)" fg:x="765" fg:w="3"/><text x="60.2500%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.1569%" y="197" width="0.0784%" height="15" fill="rgb(234,72,50)" fg:x="767" fg:w="1"/><text x="60.4069%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.1569%" y="181" width="0.0784%" height="15" fill="rgb(219,100,48)" fg:x="767" fg:w="1"/><text x="60.4069%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="60.1569%" y="165" width="0.0784%" height="15" fill="rgb(253,5,41)" fg:x="767" fg:w="1"/><text x="60.4069%" y="175.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.2353%" y="165" width="0.0784%" height="15" fill="rgb(247,181,11)" fg:x="768" fg:w="1"/><text x="60.4853%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.2353%" y="149" width="0.0784%" height="15" fill="rgb(222,223,25)" fg:x="768" fg:w="1"/><text x="60.4853%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="60.2353%" y="181" width="0.1569%" height="15" fill="rgb(214,198,28)" fg:x="768" fg:w="2"/><text x="60.4853%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="60.3137%" y="165" width="0.0784%" height="15" fill="rgb(230,46,43)" fg:x="769" fg:w="1"/><text x="60.5637%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.3137%" y="149" width="0.0784%" height="15" fill="rgb(233,65,53)" fg:x="769" fg:w="1"/><text x="60.5637%" y="159.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (389 samples, 30.51%)</title><rect x="29.9608%" y="405" width="30.5098%" height="15" fill="rgb(221,121,27)" fg:x="382" fg:w="389"/><text x="30.2108%" y="415.50">&lt;plugins_core::looking::actions::LookAction as ke..</text></g><g><title>plugins_core::looking::model::new_area_observation (383 samples, 30.04%)</title><rect x="30.4314%" y="389" width="30.0392%" height="15" fill="rgb(247,70,47)" fg:x="388" fg:w="383"/><text x="30.6814%" y="399.50">plugins_core::looking::model::new_area_observati..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.86%)</title><rect x="59.6078%" y="373" width="0.8627%" height="15" fill="rgb(228,85,35)" fg:x="760" fg:w="11"/><text x="59.8578%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (8 samples, 0.63%)</title><rect x="59.8431%" y="357" width="0.6275%" height="15" fill="rgb(209,50,18)" fg:x="763" fg:w="8"/><text x="60.0931%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.63%)</title><rect x="59.8431%" y="341" width="0.6275%" height="15" fill="rgb(250,19,35)" fg:x="763" fg:w="8"/><text x="60.0931%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.63%)</title><rect x="59.8431%" y="325" width="0.6275%" height="15" fill="rgb(253,107,29)" fg:x="763" fg:w="8"/><text x="60.0931%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.63%)</title><rect x="59.8431%" y="309" width="0.6275%" height="15" fill="rgb(252,179,29)" fg:x="763" fg:w="8"/><text x="60.0931%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="60.2353%" y="293" width="0.2353%" height="15" fill="rgb(238,194,6)" fg:x="768" fg:w="3"/><text x="60.4853%" y="303.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="60.2353%" y="277" width="0.2353%" height="15" fill="rgb(238,164,29)" fg:x="768" fg:w="3"/><text x="60.4853%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="60.2353%" y="261" width="0.2353%" height="15" fill="rgb(224,25,9)" fg:x="768" fg:w="3"/><text x="60.4853%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="60.2353%" y="245" width="0.2353%" height="15" fill="rgb(244,153,23)" fg:x="768" fg:w="3"/><text x="60.4853%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="60.2353%" y="229" width="0.2353%" height="15" fill="rgb(212,203,14)" fg:x="768" fg:w="3"/><text x="60.4853%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="60.2353%" y="213" width="0.2353%" height="15" fill="rgb(220,164,20)" fg:x="768" fg:w="3"/><text x="60.4853%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="60.2353%" y="197" width="0.2353%" height="15" fill="rgb(222,203,48)" fg:x="768" fg:w="3"/><text x="60.4853%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.3922%" y="181" width="0.0784%" height="15" fill="rgb(215,159,22)" fg:x="770" fg:w="1"/><text x="60.6422%" y="191.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (391 samples, 30.67%)</title><rect x="29.8824%" y="533" width="30.6667%" height="15" fill="rgb(216,183,47)" fg:x="381" fg:w="391"/><text x="30.1324%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (391 samples, 30.67%)</title><rect x="29.8824%" y="517" width="30.6667%" height="15" fill="rgb(229,195,25)" fg:x="381" fg:w="391"/><text x="30.1324%" y="527.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plu..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (391 samples, 30.67%)</title><rect x="29.8824%" y="501" width="30.6667%" height="15" fill="rgb(224,132,51)" fg:x="381" fg:w="391"/><text x="30.1324%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (391 samples, 30.67%)</title><rect x="29.8824%" y="485" width="30.6667%" height="15" fill="rgb(240,63,7)" fg:x="381" fg:w="391"/><text x="30.1324%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.sh..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (391 samples, 30.67%)</title><rect x="29.8824%" y="469" width="30.6667%" height="15" fill="rgb(249,182,41)" fg:x="381" fg:w="391"/><text x="30.1324%" y="479.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (390 samples, 30.59%)</title><rect x="29.9608%" y="453" width="30.5882%" height="15" fill="rgb(243,47,26)" fg:x="382" fg:w="390"/><text x="30.2108%" y="463.50">core::ops::function::FnOnce::call_once{{vtable.sh..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (390 samples, 30.59%)</title><rect x="29.9608%" y="437" width="30.5882%" height="15" fill="rgb(233,48,2)" fg:x="382" fg:w="390"/><text x="30.2108%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::F..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (390 samples, 30.59%)</title><rect x="29.9608%" y="421" width="30.5882%" height="15" fill="rgb(244,165,34)" fg:x="382" fg:w="390"/><text x="30.2108%" y="431.50">&lt;engine::session::state::State as kernel::actions..</text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="60.4706%" y="405" width="0.0784%" height="15" fill="rgb(207,89,7)" fg:x="771" fg:w="1"/><text x="60.7206%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="60.5490%" y="517" width="0.0784%" height="15" fill="rgb(244,117,36)" fg:x="772" fg:w="1"/><text x="60.7990%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.5490%" y="501" width="0.0784%" height="15" fill="rgb(226,144,34)" fg:x="772" fg:w="1"/><text x="60.7990%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.5490%" y="485" width="0.0784%" height="15" fill="rgb(213,23,19)" fg:x="772" fg:w="1"/><text x="60.7990%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.5490%" y="469" width="0.0784%" height="15" fill="rgb(217,75,12)" fg:x="772" fg:w="1"/><text x="60.7990%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.5490%" y="453" width="0.0784%" height="15" fill="rgb(224,159,17)" fg:x="772" fg:w="1"/><text x="60.7990%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.5490%" y="437" width="0.0784%" height="15" fill="rgb(217,118,1)" fg:x="772" fg:w="1"/><text x="60.7990%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.5490%" y="421" width="0.0784%" height="15" fill="rgb(232,180,48)" fg:x="772" fg:w="1"/><text x="60.7990%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.5490%" y="405" width="0.0784%" height="15" fill="rgb(230,27,33)" fg:x="772" fg:w="1"/><text x="60.7990%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="60.5490%" y="389" width="0.0784%" height="15" fill="rgb(205,31,21)" fg:x="772" fg:w="1"/><text x="60.7990%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="60.5490%" y="373" width="0.0784%" height="15" fill="rgb(253,59,4)" fg:x="772" fg:w="1"/><text x="60.7990%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="60.5490%" y="357" width="0.0784%" height="15" fill="rgb(224,201,9)" fg:x="772" fg:w="1"/><text x="60.7990%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="60.5490%" y="341" width="0.0784%" height="15" fill="rgb(229,206,30)" fg:x="772" fg:w="1"/><text x="60.7990%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.5490%" y="325" width="0.0784%" height="15" fill="rgb(212,67,47)" fg:x="772" fg:w="1"/><text x="60.7990%" y="335.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="60.6275%" y="501" width="0.0784%" height="15" fill="rgb(211,96,50)" fg:x="773" fg:w="1"/><text x="60.8775%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="60.7059%" y="437" width="0.0784%" height="15" fill="rgb(252,114,18)" fg:x="774" fg:w="1"/><text x="60.9559%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="60.7059%" y="421" width="0.0784%" height="15" fill="rgb(223,58,37)" fg:x="774" fg:w="1"/><text x="60.9559%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="60.7059%" y="405" width="0.0784%" height="15" fill="rgb(237,70,4)" fg:x="774" fg:w="1"/><text x="60.9559%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.7059%" y="389" width="0.0784%" height="15" fill="rgb(244,85,46)" fg:x="774" fg:w="1"/><text x="60.9559%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.7059%" y="373" width="0.0784%" height="15" fill="rgb(223,39,52)" fg:x="774" fg:w="1"/><text x="60.9559%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.7059%" y="357" width="0.0784%" height="15" fill="rgb(218,200,14)" fg:x="774" fg:w="1"/><text x="60.9559%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="60.7059%" y="485" width="0.1569%" height="15" fill="rgb(208,171,16)" fg:x="774" fg:w="2"/><text x="60.9559%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="60.7059%" y="469" width="0.1569%" height="15" fill="rgb(234,200,18)" fg:x="774" fg:w="2"/><text x="60.9559%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.7059%" y="453" width="0.1569%" height="15" fill="rgb(228,45,11)" fg:x="774" fg:w="2"/><text x="60.9559%" y="463.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="60.7843%" y="437" width="0.0784%" height="15" fill="rgb(237,182,11)" fg:x="775" fg:w="1"/><text x="61.0343%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.31%)</title><rect x="60.8627%" y="421" width="0.3137%" height="15" fill="rgb(241,175,49)" fg:x="776" fg:w="4"/><text x="61.1127%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="60.9412%" y="405" width="0.2353%" height="15" fill="rgb(247,38,35)" fg:x="777" fg:w="3"/><text x="61.1912%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="61.0196%" y="389" width="0.1569%" height="15" fill="rgb(228,39,49)" fg:x="778" fg:w="2"/><text x="61.2696%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.0980%" y="373" width="0.0784%" height="15" fill="rgb(226,101,26)" fg:x="779" fg:w="1"/><text x="61.3480%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.0980%" y="357" width="0.0784%" height="15" fill="rgb(206,141,19)" fg:x="779" fg:w="1"/><text x="61.3480%" y="367.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="61.1765%" y="421" width="0.1569%" height="15" fill="rgb(211,200,13)" fg:x="780" fg:w="2"/><text x="61.4265%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="61.1765%" y="405" width="0.1569%" height="15" fill="rgb(241,121,6)" fg:x="780" fg:w="2"/><text x="61.4265%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="61.1765%" y="389" width="0.1569%" height="15" fill="rgb(234,221,29)" fg:x="780" fg:w="2"/><text x="61.4265%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="61.3333%" y="293" width="0.1569%" height="15" fill="rgb(229,136,5)" fg:x="782" fg:w="2"/><text x="61.5833%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.3333%" y="277" width="0.1569%" height="15" fill="rgb(238,36,11)" fg:x="782" fg:w="2"/><text x="61.5833%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="61.3333%" y="261" width="0.1569%" height="15" fill="rgb(251,55,41)" fg:x="782" fg:w="2"/><text x="61.5833%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.3333%" y="245" width="0.1569%" height="15" fill="rgb(242,34,40)" fg:x="782" fg:w="2"/><text x="61.5833%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.4118%" y="229" width="0.0784%" height="15" fill="rgb(215,42,17)" fg:x="783" fg:w="1"/><text x="61.6618%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.4118%" y="213" width="0.0784%" height="15" fill="rgb(207,44,46)" fg:x="783" fg:w="1"/><text x="61.6618%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="61.3333%" y="325" width="0.2353%" height="15" fill="rgb(211,206,28)" fg:x="782" fg:w="3"/><text x="61.5833%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="61.3333%" y="309" width="0.2353%" height="15" fill="rgb(237,167,16)" fg:x="782" fg:w="3"/><text x="61.5833%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.4902%" y="293" width="0.0784%" height="15" fill="rgb(233,66,6)" fg:x="784" fg:w="1"/><text x="61.7402%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="61.4902%" y="277" width="0.0784%" height="15" fill="rgb(246,123,29)" fg:x="784" fg:w="1"/><text x="61.7402%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.31%)</title><rect x="61.3333%" y="373" width="0.3137%" height="15" fill="rgb(209,62,40)" fg:x="782" fg:w="4"/><text x="61.5833%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.31%)</title><rect x="61.3333%" y="357" width="0.3137%" height="15" fill="rgb(218,4,25)" fg:x="782" fg:w="4"/><text x="61.5833%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.31%)</title><rect x="61.3333%" y="341" width="0.3137%" height="15" fill="rgb(253,91,49)" fg:x="782" fg:w="4"/><text x="61.5833%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="61.5686%" y="325" width="0.0784%" height="15" fill="rgb(228,155,29)" fg:x="785" fg:w="1"/><text x="61.8186%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.5686%" y="309" width="0.0784%" height="15" fill="rgb(243,57,37)" fg:x="785" fg:w="1"/><text x="61.8186%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="61.5686%" y="293" width="0.0784%" height="15" fill="rgb(244,167,17)" fg:x="785" fg:w="1"/><text x="61.8186%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.5686%" y="277" width="0.0784%" height="15" fill="rgb(207,181,38)" fg:x="785" fg:w="1"/><text x="61.8186%" y="287.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.39%)</title><rect x="61.3333%" y="421" width="0.3922%" height="15" fill="rgb(211,8,23)" fg:x="782" fg:w="5"/><text x="61.5833%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.39%)</title><rect x="61.3333%" y="405" width="0.3922%" height="15" fill="rgb(235,11,44)" fg:x="782" fg:w="5"/><text x="61.5833%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.39%)</title><rect x="61.3333%" y="389" width="0.3922%" height="15" fill="rgb(248,18,52)" fg:x="782" fg:w="5"/><text x="61.5833%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.6471%" y="373" width="0.0784%" height="15" fill="rgb(208,4,7)" fg:x="786" fg:w="1"/><text x="61.8971%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.7255%" y="325" width="0.0784%" height="15" fill="rgb(240,17,39)" fg:x="787" fg:w="1"/><text x="61.9755%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.7255%" y="309" width="0.0784%" height="15" fill="rgb(207,170,3)" fg:x="787" fg:w="1"/><text x="61.9755%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.7255%" y="293" width="0.0784%" height="15" fill="rgb(236,100,52)" fg:x="787" fg:w="1"/><text x="61.9755%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.7255%" y="277" width="0.0784%" height="15" fill="rgb(246,78,51)" fg:x="787" fg:w="1"/><text x="61.9755%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.7255%" y="261" width="0.0784%" height="15" fill="rgb(211,17,15)" fg:x="787" fg:w="1"/><text x="61.9755%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.7255%" y="245" width="0.0784%" height="15" fill="rgb(209,59,46)" fg:x="787" fg:w="1"/><text x="61.9755%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.7255%" y="229" width="0.0784%" height="15" fill="rgb(210,92,25)" fg:x="787" fg:w="1"/><text x="61.9755%" y="239.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="61.7255%" y="213" width="0.0784%" height="15" fill="rgb(238,174,52)" fg:x="787" fg:w="1"/><text x="61.9755%" y="223.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (13 samples, 1.02%)</title><rect x="60.8627%" y="485" width="1.0196%" height="15" fill="rgb(230,73,7)" fg:x="776" fg:w="13"/><text x="61.1127%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (13 samples, 1.02%)</title><rect x="60.8627%" y="469" width="1.0196%" height="15" fill="rgb(243,124,40)" fg:x="776" fg:w="13"/><text x="61.1127%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (13 samples, 1.02%)</title><rect x="60.8627%" y="453" width="1.0196%" height="15" fill="rgb(244,170,11)" fg:x="776" fg:w="13"/><text x="61.1127%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.02%)</title><rect x="60.8627%" y="437" width="1.0196%" height="15" fill="rgb(207,114,54)" fg:x="776" fg:w="13"/><text x="61.1127%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="61.7255%" y="421" width="0.1569%" height="15" fill="rgb(205,42,20)" fg:x="787" fg:w="2"/><text x="61.9755%" y="431.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="61.7255%" y="405" width="0.1569%" height="15" fill="rgb(230,30,28)" fg:x="787" fg:w="2"/><text x="61.9755%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="61.7255%" y="389" width="0.1569%" height="15" fill="rgb(205,73,54)" fg:x="787" fg:w="2"/><text x="61.9755%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.7255%" y="373" width="0.1569%" height="15" fill="rgb(254,227,23)" fg:x="787" fg:w="2"/><text x="61.9755%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="61.7255%" y="357" width="0.1569%" height="15" fill="rgb(228,202,34)" fg:x="787" fg:w="2"/><text x="61.9755%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.7255%" y="341" width="0.1569%" height="15" fill="rgb(222,225,37)" fg:x="787" fg:w="2"/><text x="61.9755%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.8039%" y="325" width="0.0784%" height="15" fill="rgb(221,14,54)" fg:x="788" fg:w="1"/><text x="62.0539%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.8039%" y="309" width="0.0784%" height="15" fill="rgb(254,102,2)" fg:x="788" fg:w="1"/><text x="62.0539%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="61.8039%" y="293" width="0.0784%" height="15" fill="rgb(232,104,17)" fg:x="788" fg:w="1"/><text x="62.0539%" y="303.50"></text></g><g><title>plugins_core::tools::contained_by (16 samples, 1.25%)</title><rect x="60.7059%" y="501" width="1.2549%" height="15" fill="rgb(250,220,14)" fg:x="774" fg:w="16"/><text x="60.9559%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.8824%" y="485" width="0.0784%" height="15" fill="rgb(241,158,9)" fg:x="789" fg:w="1"/><text x="62.1324%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.8824%" y="469" width="0.0784%" height="15" fill="rgb(246,9,43)" fg:x="789" fg:w="1"/><text x="62.1324%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="61.9608%" y="469" width="0.1569%" height="15" fill="rgb(206,73,33)" fg:x="790" fg:w="2"/><text x="62.2108%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.0392%" y="453" width="0.0784%" height="15" fill="rgb(222,79,8)" fg:x="791" fg:w="1"/><text x="62.2892%" y="463.50"></text></g><g><title>plugins_core::tools::occupied_by (5 samples, 0.39%)</title><rect x="61.9608%" y="501" width="0.3922%" height="15" fill="rgb(234,8,54)" fg:x="790" fg:w="5"/><text x="62.2108%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.39%)</title><rect x="61.9608%" y="485" width="0.3922%" height="15" fill="rgb(209,134,38)" fg:x="790" fg:w="5"/><text x="62.2108%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="62.1176%" y="469" width="0.2353%" height="15" fill="rgb(230,127,29)" fg:x="792" fg:w="3"/><text x="62.3676%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="62.1176%" y="453" width="0.2353%" height="15" fill="rgb(242,44,41)" fg:x="792" fg:w="3"/><text x="62.3676%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="62.1176%" y="437" width="0.2353%" height="15" fill="rgb(222,56,43)" fg:x="792" fg:w="3"/><text x="62.3676%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="62.1176%" y="421" width="0.2353%" height="15" fill="rgb(238,39,47)" fg:x="792" fg:w="3"/><text x="62.3676%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="62.1176%" y="405" width="0.2353%" height="15" fill="rgb(226,79,43)" fg:x="792" fg:w="3"/><text x="62.3676%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="62.1176%" y="389" width="0.2353%" height="15" fill="rgb(242,105,53)" fg:x="792" fg:w="3"/><text x="62.3676%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="62.1176%" y="373" width="0.2353%" height="15" fill="rgb(251,132,46)" fg:x="792" fg:w="3"/><text x="62.3676%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="62.2745%" y="357" width="0.0784%" height="15" fill="rgb(231,77,14)" fg:x="794" fg:w="1"/><text x="62.5245%" y="367.50"></text></g><g><title>engine::session::Session::captured (444 samples, 34.82%)</title><rect x="27.6078%" y="677" width="34.8235%" height="15" fill="rgb(240,135,9)" fg:x="352" fg:w="444"/><text x="27.8578%" y="687.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (441 samples, 34.59%)</title><rect x="27.8431%" y="661" width="34.5882%" height="15" fill="rgb(248,109,14)" fg:x="355" fg:w="441"/><text x="28.0931%" y="671.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (435 samples, 34.12%)</title><rect x="28.3137%" y="645" width="34.1176%" height="15" fill="rgb(227,146,52)" fg:x="361" fg:w="435"/><text x="28.5637%" y="655.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (435 samples, 34.12%)</title><rect x="28.3137%" y="629" width="34.1176%" height="15" fill="rgb(232,54,3)" fg:x="361" fg:w="435"/><text x="28.5637%" y="639.50">&lt;engine::session::Session as kernel::actions::Performer..</text></g><g><title>kernel::plugins::mw::apply_middleware (435 samples, 34.12%)</title><rect x="28.3137%" y="613" width="34.1176%" height="15" fill="rgb(229,201,43)" fg:x="361" fg:w="435"/><text x="28.5637%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (435 samples, 34.12%)</title><rect x="28.3137%" y="597" width="34.1176%" height="15" fill="rgb(252,161,33)" fg:x="361" fg:w="435"/><text x="28.5637%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (435 samples, 34.12%)</title><rect x="28.3137%" y="581" width="34.1176%" height="15" fill="rgb(226,146,40)" fg:x="361" fg:w="435"/><text x="28.5637%" y="591.50">&lt;engine::session::ExpandSurroundingsMiddleware as kerne..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (416 samples, 32.63%)</title><rect x="29.8039%" y="565" width="32.6275%" height="15" fill="rgb(219,47,25)" fg:x="380" fg:w="416"/><text x="30.0539%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (416 samples, 32.63%)</title><rect x="29.8039%" y="549" width="32.6275%" height="15" fill="rgb(250,135,13)" fg:x="380" fg:w="416"/><text x="30.0539%" y="559.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw:..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (24 samples, 1.88%)</title><rect x="60.5490%" y="533" width="1.8824%" height="15" fill="rgb(219,229,18)" fg:x="772" fg:w="24"/><text x="60.7990%" y="543.50">p..</text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (23 samples, 1.80%)</title><rect x="60.6275%" y="517" width="1.8039%" height="15" fill="rgb(217,152,27)" fg:x="773" fg:w="23"/><text x="60.8775%" y="527.50">p..</text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="62.3529%" y="501" width="0.0784%" height="15" fill="rgb(225,71,47)" fg:x="795" fg:w="1"/><text x="62.6029%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="62.3529%" y="485" width="0.0784%" height="15" fill="rgb(220,139,14)" fg:x="795" fg:w="1"/><text x="62.6029%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.3529%" y="469" width="0.0784%" height="15" fill="rgb(247,54,32)" fg:x="795" fg:w="1"/><text x="62.6029%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="62.4314%" y="629" width="0.1569%" height="15" fill="rgb(252,131,39)" fg:x="796" fg:w="2"/><text x="62.6814%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.5098%" y="613" width="0.0784%" height="15" fill="rgb(210,108,39)" fg:x="797" fg:w="1"/><text x="62.7598%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.5098%" y="597" width="0.0784%" height="15" fill="rgb(205,23,29)" fg:x="797" fg:w="1"/><text x="62.7598%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.5098%" y="581" width="0.0784%" height="15" fill="rgb(246,139,46)" fg:x="797" fg:w="1"/><text x="62.7598%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.5098%" y="565" width="0.0784%" height="15" fill="rgb(250,81,26)" fg:x="797" fg:w="1"/><text x="62.7598%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.5098%" y="549" width="0.0784%" height="15" fill="rgb(214,104,7)" fg:x="797" fg:w="1"/><text x="62.7598%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.5098%" y="533" width="0.0784%" height="15" fill="rgb(233,189,8)" fg:x="797" fg:w="1"/><text x="62.7598%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.5098%" y="517" width="0.0784%" height="15" fill="rgb(228,141,17)" fg:x="797" fg:w="1"/><text x="62.7598%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.5098%" y="501" width="0.0784%" height="15" fill="rgb(247,157,1)" fg:x="797" fg:w="1"/><text x="62.7598%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.5098%" y="485" width="0.0784%" height="15" fill="rgb(249,225,5)" fg:x="797" fg:w="1"/><text x="62.7598%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.5098%" y="469" width="0.0784%" height="15" fill="rgb(242,55,13)" fg:x="797" fg:w="1"/><text x="62.7598%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.5098%" y="453" width="0.0784%" height="15" fill="rgb(230,49,50)" fg:x="797" fg:w="1"/><text x="62.7598%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.5098%" y="437" width="0.0784%" height="15" fill="rgb(241,111,38)" fg:x="797" fg:w="1"/><text x="62.7598%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.5098%" y="421" width="0.0784%" height="15" fill="rgb(252,155,4)" fg:x="797" fg:w="1"/><text x="62.7598%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.5098%" y="405" width="0.0784%" height="15" fill="rgb(212,69,32)" fg:x="797" fg:w="1"/><text x="62.7598%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.5098%" y="389" width="0.0784%" height="15" fill="rgb(243,107,47)" fg:x="797" fg:w="1"/><text x="62.7598%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.5098%" y="373" width="0.0784%" height="15" fill="rgb(247,130,12)" fg:x="797" fg:w="1"/><text x="62.7598%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.5882%" y="581" width="0.0784%" height="15" fill="rgb(233,74,16)" fg:x="798" fg:w="1"/><text x="62.8382%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.5882%" y="565" width="0.0784%" height="15" fill="rgb(208,58,18)" fg:x="798" fg:w="1"/><text x="62.8382%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.5882%" y="549" width="0.0784%" height="15" fill="rgb(242,225,1)" fg:x="798" fg:w="1"/><text x="62.8382%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.6667%" y="533" width="0.0784%" height="15" fill="rgb(249,39,40)" fg:x="799" fg:w="1"/><text x="62.9167%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.6667%" y="517" width="0.0784%" height="15" fill="rgb(207,72,44)" fg:x="799" fg:w="1"/><text x="62.9167%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.6667%" y="501" width="0.0784%" height="15" fill="rgb(215,193,12)" fg:x="799" fg:w="1"/><text x="62.9167%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.6667%" y="485" width="0.0784%" height="15" fill="rgb(248,41,39)" fg:x="799" fg:w="1"/><text x="62.9167%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.6667%" y="469" width="0.0784%" height="15" fill="rgb(253,85,4)" fg:x="799" fg:w="1"/><text x="62.9167%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.6667%" y="453" width="0.0784%" height="15" fill="rgb(243,70,31)" fg:x="799" fg:w="1"/><text x="62.9167%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.6667%" y="437" width="0.0784%" height="15" fill="rgb(253,195,26)" fg:x="799" fg:w="1"/><text x="62.9167%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.6667%" y="421" width="0.0784%" height="15" fill="rgb(243,42,11)" fg:x="799" fg:w="1"/><text x="62.9167%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.6667%" y="405" width="0.0784%" height="15" fill="rgb(239,66,17)" fg:x="799" fg:w="1"/><text x="62.9167%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.6667%" y="389" width="0.0784%" height="15" fill="rgb(217,132,21)" fg:x="799" fg:w="1"/><text x="62.9167%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.6667%" y="373" width="0.0784%" height="15" fill="rgb(252,202,21)" fg:x="799" fg:w="1"/><text x="62.9167%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.6667%" y="357" width="0.0784%" height="15" fill="rgb(233,98,36)" fg:x="799" fg:w="1"/><text x="62.9167%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.6667%" y="341" width="0.0784%" height="15" fill="rgb(216,153,54)" fg:x="799" fg:w="1"/><text x="62.9167%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.8235%" y="485" width="0.0784%" height="15" fill="rgb(250,99,7)" fg:x="801" fg:w="1"/><text x="63.0735%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.8235%" y="469" width="0.0784%" height="15" fill="rgb(207,56,50)" fg:x="801" fg:w="1"/><text x="63.0735%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.8235%" y="453" width="0.0784%" height="15" fill="rgb(244,61,34)" fg:x="801" fg:w="1"/><text x="63.0735%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="62.9020%" y="485" width="0.1569%" height="15" fill="rgb(241,50,38)" fg:x="802" fg:w="2"/><text x="63.1520%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="62.9020%" y="469" width="0.1569%" height="15" fill="rgb(212,166,30)" fg:x="802" fg:w="2"/><text x="63.1520%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="62.9804%" y="453" width="0.0784%" height="15" fill="rgb(249,127,32)" fg:x="803" fg:w="1"/><text x="63.2304%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="62.9804%" y="437" width="0.0784%" height="15" fill="rgb(209,103,0)" fg:x="803" fg:w="1"/><text x="63.2304%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="62.9804%" y="421" width="0.0784%" height="15" fill="rgb(238,209,51)" fg:x="803" fg:w="1"/><text x="63.2304%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.0588%" y="453" width="0.0784%" height="15" fill="rgb(237,56,23)" fg:x="804" fg:w="1"/><text x="63.3088%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.63%)</title><rect x="62.6667%" y="581" width="0.6275%" height="15" fill="rgb(215,153,46)" fg:x="799" fg:w="8"/><text x="62.9167%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.63%)</title><rect x="62.6667%" y="565" width="0.6275%" height="15" fill="rgb(224,49,31)" fg:x="799" fg:w="8"/><text x="62.9167%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.63%)</title><rect x="62.6667%" y="549" width="0.6275%" height="15" fill="rgb(250,18,42)" fg:x="799" fg:w="8"/><text x="62.9167%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.55%)</title><rect x="62.7451%" y="533" width="0.5490%" height="15" fill="rgb(215,176,39)" fg:x="800" fg:w="7"/><text x="62.9951%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.55%)</title><rect x="62.7451%" y="517" width="0.5490%" height="15" fill="rgb(223,77,29)" fg:x="800" fg:w="7"/><text x="62.9951%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.47%)</title><rect x="62.8235%" y="501" width="0.4706%" height="15" fill="rgb(234,94,52)" fg:x="801" fg:w="6"/><text x="63.0735%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="63.0588%" y="485" width="0.2353%" height="15" fill="rgb(220,154,50)" fg:x="804" fg:w="3"/><text x="63.3088%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="63.0588%" y="469" width="0.2353%" height="15" fill="rgb(212,11,10)" fg:x="804" fg:w="3"/><text x="63.3088%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (2 samples, 0.16%)</title><rect x="63.1373%" y="453" width="0.1569%" height="15" fill="rgb(205,166,19)" fg:x="805" fg:w="2"/><text x="63.3873%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (2 samples, 0.16%)</title><rect x="63.1373%" y="437" width="0.1569%" height="15" fill="rgb(244,198,16)" fg:x="805" fg:w="2"/><text x="63.3873%" y="447.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (2 samples, 0.16%)</title><rect x="63.1373%" y="421" width="0.1569%" height="15" fill="rgb(219,69,12)" fg:x="805" fg:w="2"/><text x="63.3873%" y="431.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (2 samples, 0.16%)</title><rect x="63.1373%" y="405" width="0.1569%" height="15" fill="rgb(245,30,7)" fg:x="805" fg:w="2"/><text x="63.3873%" y="415.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="63.1373%" y="389" width="0.1569%" height="15" fill="rgb(218,221,48)" fg:x="805" fg:w="2"/><text x="63.3873%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="63.1373%" y="373" width="0.1569%" height="15" fill="rgb(216,66,15)" fg:x="805" fg:w="2"/><text x="63.3873%" y="383.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="63.1373%" y="357" width="0.1569%" height="15" fill="rgb(226,122,50)" fg:x="805" fg:w="2"/><text x="63.3873%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="63.1373%" y="341" width="0.1569%" height="15" fill="rgb(239,156,16)" fg:x="805" fg:w="2"/><text x="63.3873%" y="351.50"></text></g><g><title>&lt;serde::de::Unexpected as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="63.2157%" y="325" width="0.0784%" height="15" fill="rgb(224,27,38)" fg:x="806" fg:w="1"/><text x="63.4657%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="63.2157%" y="309" width="0.0784%" height="15" fill="rgb(224,39,27)" fg:x="806" fg:w="1"/><text x="63.4657%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="63.2157%" y="293" width="0.0784%" height="15" fill="rgb(215,92,29)" fg:x="806" fg:w="1"/><text x="63.4657%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="63.2157%" y="277" width="0.0784%" height="15" fill="rgb(207,159,16)" fg:x="806" fg:w="1"/><text x="63.4657%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="63.2157%" y="261" width="0.0784%" height="15" fill="rgb(238,163,47)" fg:x="806" fg:w="1"/><text x="63.4657%" y="271.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="63.2157%" y="245" width="0.0784%" height="15" fill="rgb(219,91,49)" fg:x="806" fg:w="1"/><text x="63.4657%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="63.2157%" y="229" width="0.0784%" height="15" fill="rgb(227,167,31)" fg:x="806" fg:w="1"/><text x="63.4657%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="63.2157%" y="213" width="0.0784%" height="15" fill="rgb(234,80,54)" fg:x="806" fg:w="1"/><text x="63.4657%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="63.2157%" y="197" width="0.0784%" height="15" fill="rgb(212,114,2)" fg:x="806" fg:w="1"/><text x="63.4657%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.08%)</title><rect x="63.2157%" y="181" width="0.0784%" height="15" fill="rgb(234,50,24)" fg:x="806" fg:w="1"/><text x="63.4657%" y="191.50"></text></g><g><title>engine::session::internal::Added::find_refs (13 samples, 1.02%)</title><rect x="62.4314%" y="661" width="1.0196%" height="15" fill="rgb(221,68,8)" fg:x="796" fg:w="13"/><text x="62.6814%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (13 samples, 1.02%)</title><rect x="62.4314%" y="645" width="1.0196%" height="15" fill="rgb(254,180,31)" fg:x="796" fg:w="13"/><text x="62.6814%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.86%)</title><rect x="62.5882%" y="629" width="0.8627%" height="15" fill="rgb(247,130,50)" fg:x="798" fg:w="11"/><text x="62.8382%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.86%)</title><rect x="62.5882%" y="613" width="0.8627%" height="15" fill="rgb(211,109,4)" fg:x="798" fg:w="11"/><text x="62.8382%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (11 samples, 0.86%)</title><rect x="62.5882%" y="597" width="0.8627%" height="15" fill="rgb(238,50,21)" fg:x="798" fg:w="11"/><text x="62.8382%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="63.2941%" y="581" width="0.1569%" height="15" fill="rgb(225,57,45)" fg:x="807" fg:w="2"/><text x="63.5441%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="63.2941%" y="565" width="0.1569%" height="15" fill="rgb(209,196,50)" fg:x="807" fg:w="2"/><text x="63.5441%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.3725%" y="549" width="0.0784%" height="15" fill="rgb(242,140,13)" fg:x="808" fg:w="1"/><text x="63.6225%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.3725%" y="533" width="0.0784%" height="15" fill="rgb(217,111,7)" fg:x="808" fg:w="1"/><text x="63.6225%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="63.4510%" y="629" width="0.1569%" height="15" fill="rgb(253,193,51)" fg:x="809" fg:w="2"/><text x="63.7010%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="63.4510%" y="613" width="0.1569%" height="15" fill="rgb(252,70,29)" fg:x="809" fg:w="2"/><text x="63.7010%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.5294%" y="597" width="0.0784%" height="15" fill="rgb(232,127,12)" fg:x="810" fg:w="1"/><text x="63.7794%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.5294%" y="581" width="0.0784%" height="15" fill="rgb(211,180,21)" fg:x="810" fg:w="1"/><text x="63.7794%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.5294%" y="565" width="0.0784%" height="15" fill="rgb(229,72,13)" fg:x="810" fg:w="1"/><text x="63.7794%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.5294%" y="549" width="0.0784%" height="15" fill="rgb(240,211,49)" fg:x="810" fg:w="1"/><text x="63.7794%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.5294%" y="533" width="0.0784%" height="15" fill="rgb(219,149,40)" fg:x="810" fg:w="1"/><text x="63.7794%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.5294%" y="517" width="0.0784%" height="15" fill="rgb(210,127,46)" fg:x="810" fg:w="1"/><text x="63.7794%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.5294%" y="501" width="0.0784%" height="15" fill="rgb(220,106,7)" fg:x="810" fg:w="1"/><text x="63.7794%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.5294%" y="485" width="0.0784%" height="15" fill="rgb(249,31,22)" fg:x="810" fg:w="1"/><text x="63.7794%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.5294%" y="469" width="0.0784%" height="15" fill="rgb(253,1,49)" fg:x="810" fg:w="1"/><text x="63.7794%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="63.5294%" y="453" width="0.0784%" height="15" fill="rgb(227,144,33)" fg:x="810" fg:w="1"/><text x="63.7794%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="63.5294%" y="437" width="0.0784%" height="15" fill="rgb(249,163,44)" fg:x="810" fg:w="1"/><text x="63.7794%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="63.5294%" y="421" width="0.0784%" height="15" fill="rgb(234,15,39)" fg:x="810" fg:w="1"/><text x="63.7794%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="63.5294%" y="405" width="0.0784%" height="15" fill="rgb(207,66,16)" fg:x="810" fg:w="1"/><text x="63.7794%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.5294%" y="389" width="0.0784%" height="15" fill="rgb(233,112,24)" fg:x="810" fg:w="1"/><text x="63.7794%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="63.4510%" y="645" width="0.2353%" height="15" fill="rgb(230,90,22)" fg:x="809" fg:w="3"/><text x="63.7010%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.6078%" y="629" width="0.0784%" height="15" fill="rgb(229,61,13)" fg:x="811" fg:w="1"/><text x="63.8578%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.6078%" y="613" width="0.0784%" height="15" fill="rgb(225,57,24)" fg:x="811" fg:w="1"/><text x="63.8578%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.6078%" y="597" width="0.0784%" height="15" fill="rgb(208,169,48)" fg:x="811" fg:w="1"/><text x="63.8578%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.6078%" y="581" width="0.0784%" height="15" fill="rgb(244,218,51)" fg:x="811" fg:w="1"/><text x="63.8578%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.6078%" y="565" width="0.0784%" height="15" fill="rgb(214,148,10)" fg:x="811" fg:w="1"/><text x="63.8578%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.6078%" y="549" width="0.0784%" height="15" fill="rgb(225,174,27)" fg:x="811" fg:w="1"/><text x="63.8578%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.6078%" y="533" width="0.0784%" height="15" fill="rgb(230,96,26)" fg:x="811" fg:w="1"/><text x="63.8578%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="63.6078%" y="517" width="0.0784%" height="15" fill="rgb(232,10,30)" fg:x="811" fg:w="1"/><text x="63.8578%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="63.6078%" y="501" width="0.0784%" height="15" fill="rgb(222,8,50)" fg:x="811" fg:w="1"/><text x="63.8578%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="63.6078%" y="485" width="0.0784%" height="15" fill="rgb(213,81,27)" fg:x="811" fg:w="1"/><text x="63.8578%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="63.6078%" y="469" width="0.0784%" height="15" fill="rgb(245,50,10)" fg:x="811" fg:w="1"/><text x="63.8578%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.6078%" y="453" width="0.0784%" height="15" fill="rgb(216,100,18)" fg:x="811" fg:w="1"/><text x="63.8578%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.6863%" y="597" width="0.0784%" height="15" fill="rgb(236,147,54)" fg:x="812" fg:w="1"/><text x="63.9363%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.8431%" y="549" width="0.0784%" height="15" fill="rgb(205,143,26)" fg:x="814" fg:w="1"/><text x="64.0931%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.8431%" y="533" width="0.0784%" height="15" fill="rgb(236,26,9)" fg:x="814" fg:w="1"/><text x="64.0931%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.8431%" y="517" width="0.0784%" height="15" fill="rgb(221,165,53)" fg:x="814" fg:w="1"/><text x="64.0931%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.8431%" y="501" width="0.0784%" height="15" fill="rgb(214,110,17)" fg:x="814" fg:w="1"/><text x="64.0931%" y="511.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="63.8431%" y="485" width="0.0784%" height="15" fill="rgb(237,197,12)" fg:x="814" fg:w="1"/><text x="64.0931%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.8431%" y="469" width="0.0784%" height="15" fill="rgb(205,84,17)" fg:x="814" fg:w="1"/><text x="64.0931%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.8431%" y="453" width="0.0784%" height="15" fill="rgb(237,18,45)" fg:x="814" fg:w="1"/><text x="64.0931%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.31%)</title><rect x="63.6863%" y="645" width="0.3137%" height="15" fill="rgb(221,87,14)" fg:x="812" fg:w="4"/><text x="63.9363%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.31%)</title><rect x="63.6863%" y="629" width="0.3137%" height="15" fill="rgb(238,186,15)" fg:x="812" fg:w="4"/><text x="63.9363%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.31%)</title><rect x="63.6863%" y="613" width="0.3137%" height="15" fill="rgb(208,115,11)" fg:x="812" fg:w="4"/><text x="63.9363%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="63.7647%" y="597" width="0.2353%" height="15" fill="rgb(254,175,0)" fg:x="813" fg:w="3"/><text x="64.0147%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="63.7647%" y="581" width="0.2353%" height="15" fill="rgb(227,24,42)" fg:x="813" fg:w="3"/><text x="64.0147%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="63.7647%" y="565" width="0.2353%" height="15" fill="rgb(223,211,37)" fg:x="813" fg:w="3"/><text x="64.0147%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="63.9216%" y="549" width="0.0784%" height="15" fill="rgb(235,49,27)" fg:x="815" fg:w="1"/><text x="64.1716%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.9216%" y="533" width="0.0784%" height="15" fill="rgb(254,97,51)" fg:x="815" fg:w="1"/><text x="64.1716%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="63.9216%" y="517" width="0.0784%" height="15" fill="rgb(249,51,40)" fg:x="815" fg:w="1"/><text x="64.1716%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="63.9216%" y="501" width="0.0784%" height="15" fill="rgb(210,128,45)" fg:x="815" fg:w="1"/><text x="64.1716%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.0000%" y="581" width="0.1569%" height="15" fill="rgb(224,137,50)" fg:x="816" fg:w="2"/><text x="64.2500%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.0000%" y="565" width="0.1569%" height="15" fill="rgb(242,15,9)" fg:x="816" fg:w="2"/><text x="64.2500%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.0000%" y="549" width="0.1569%" height="15" fill="rgb(233,187,41)" fg:x="816" fg:w="2"/><text x="64.2500%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.0000%" y="533" width="0.1569%" height="15" fill="rgb(227,2,29)" fg:x="816" fg:w="2"/><text x="64.2500%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.0784%" y="517" width="0.0784%" height="15" fill="rgb(222,70,3)" fg:x="817" fg:w="1"/><text x="64.3284%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.0784%" y="501" width="0.0784%" height="15" fill="rgb(213,11,42)" fg:x="817" fg:w="1"/><text x="64.3284%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (23 samples, 1.80%)</title><rect x="62.4314%" y="677" width="1.8039%" height="15" fill="rgb(225,150,9)" fg:x="796" fg:w="23"/><text x="62.6814%" y="687.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.78%)</title><rect x="63.4510%" y="661" width="0.7843%" height="15" fill="rgb(230,162,45)" fg:x="809" fg:w="10"/><text x="63.7010%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="64.0000%" y="645" width="0.2353%" height="15" fill="rgb(222,14,52)" fg:x="816" fg:w="3"/><text x="64.2500%" y="655.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="64.0000%" y="629" width="0.2353%" height="15" fill="rgb(254,198,14)" fg:x="816" fg:w="3"/><text x="64.2500%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="64.0000%" y="613" width="0.2353%" height="15" fill="rgb(220,217,30)" fg:x="816" fg:w="3"/><text x="64.2500%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="64.0000%" y="597" width="0.2353%" height="15" fill="rgb(215,146,41)" fg:x="816" fg:w="3"/><text x="64.2500%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.1569%" y="581" width="0.0784%" height="15" fill="rgb(217,27,36)" fg:x="818" fg:w="1"/><text x="64.4069%" y="591.50"></text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="64.2353%" y="677" width="0.1569%" height="15" fill="rgb(219,218,39)" fg:x="819" fg:w="2"/><text x="64.4853%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="64.3137%" y="661" width="0.0784%" height="15" fill="rgb(219,4,42)" fg:x="820" fg:w="1"/><text x="64.5637%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.3137%" y="645" width="0.0784%" height="15" fill="rgb(249,119,36)" fg:x="820" fg:w="1"/><text x="64.5637%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.3137%" y="629" width="0.0784%" height="15" fill="rgb(209,23,33)" fg:x="820" fg:w="1"/><text x="64.5637%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.3137%" y="613" width="0.0784%" height="15" fill="rgb(211,10,0)" fg:x="820" fg:w="1"/><text x="64.5637%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.3137%" y="597" width="0.0784%" height="15" fill="rgb(208,99,37)" fg:x="820" fg:w="1"/><text x="64.5637%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.3137%" y="581" width="0.0784%" height="15" fill="rgb(213,132,31)" fg:x="820" fg:w="1"/><text x="64.5637%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.3137%" y="565" width="0.0784%" height="15" fill="rgb(243,129,40)" fg:x="820" fg:w="1"/><text x="64.5637%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="64.3922%" y="629" width="0.0784%" height="15" fill="rgb(210,66,33)" fg:x="821" fg:w="1"/><text x="64.6422%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.3922%" y="613" width="0.0784%" height="15" fill="rgb(209,189,4)" fg:x="821" fg:w="1"/><text x="64.6422%" y="623.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="64.4706%" y="629" width="0.0784%" height="15" fill="rgb(214,107,37)" fg:x="822" fg:w="1"/><text x="64.7206%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.4706%" y="613" width="0.0784%" height="15" fill="rgb(245,88,54)" fg:x="822" fg:w="1"/><text x="64.7206%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="64.4706%" y="597" width="0.0784%" height="15" fill="rgb(205,146,20)" fg:x="822" fg:w="1"/><text x="64.7206%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.4706%" y="581" width="0.0784%" height="15" fill="rgb(220,161,25)" fg:x="822" fg:w="1"/><text x="64.7206%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.5490%" y="549" width="0.0784%" height="15" fill="rgb(215,152,15)" fg:x="823" fg:w="1"/><text x="64.7990%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.5490%" y="533" width="0.0784%" height="15" fill="rgb(233,192,44)" fg:x="823" fg:w="1"/><text x="64.7990%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.6275%" y="549" width="0.0784%" height="15" fill="rgb(240,170,46)" fg:x="824" fg:w="1"/><text x="64.8775%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="64.6275%" y="533" width="0.0784%" height="15" fill="rgb(207,104,33)" fg:x="824" fg:w="1"/><text x="64.8775%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="64.6275%" y="517" width="0.0784%" height="15" fill="rgb(219,21,39)" fg:x="824" fg:w="1"/><text x="64.8775%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="64.5490%" y="629" width="0.2353%" height="15" fill="rgb(214,133,29)" fg:x="823" fg:w="3"/><text x="64.7990%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="64.5490%" y="613" width="0.2353%" height="15" fill="rgb(226,93,6)" fg:x="823" fg:w="3"/><text x="64.7990%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="64.5490%" y="597" width="0.2353%" height="15" fill="rgb(252,222,34)" fg:x="823" fg:w="3"/><text x="64.7990%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="64.5490%" y="581" width="0.2353%" height="15" fill="rgb(252,92,48)" fg:x="823" fg:w="3"/><text x="64.7990%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="64.5490%" y="565" width="0.2353%" height="15" fill="rgb(245,223,24)" fg:x="823" fg:w="3"/><text x="64.7990%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.7059%" y="549" width="0.0784%" height="15" fill="rgb(205,176,3)" fg:x="825" fg:w="1"/><text x="64.9559%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.7059%" y="533" width="0.0784%" height="15" fill="rgb(235,151,15)" fg:x="825" fg:w="1"/><text x="64.9559%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.7059%" y="517" width="0.0784%" height="15" fill="rgb(237,209,11)" fg:x="825" fg:w="1"/><text x="64.9559%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.7059%" y="501" width="0.0784%" height="15" fill="rgb(243,227,24)" fg:x="825" fg:w="1"/><text x="64.9559%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.7059%" y="485" width="0.0784%" height="15" fill="rgb(239,193,16)" fg:x="825" fg:w="1"/><text x="64.9559%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.7843%" y="533" width="0.1569%" height="15" fill="rgb(231,27,9)" fg:x="826" fg:w="2"/><text x="65.0343%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.7843%" y="517" width="0.1569%" height="15" fill="rgb(219,169,10)" fg:x="826" fg:w="2"/><text x="65.0343%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.7843%" y="501" width="0.1569%" height="15" fill="rgb(244,229,43)" fg:x="826" fg:w="2"/><text x="65.0343%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.7843%" y="485" width="0.1569%" height="15" fill="rgb(254,38,20)" fg:x="826" fg:w="2"/><text x="65.0343%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.7843%" y="469" width="0.1569%" height="15" fill="rgb(250,47,30)" fg:x="826" fg:w="2"/><text x="65.0343%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.7843%" y="453" width="0.1569%" height="15" fill="rgb(224,124,36)" fg:x="826" fg:w="2"/><text x="65.0343%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.8627%" y="437" width="0.0784%" height="15" fill="rgb(246,68,51)" fg:x="827" fg:w="1"/><text x="65.1127%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.8627%" y="421" width="0.0784%" height="15" fill="rgb(253,43,49)" fg:x="827" fg:w="1"/><text x="65.1127%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.8627%" y="405" width="0.0784%" height="15" fill="rgb(219,54,36)" fg:x="827" fg:w="1"/><text x="65.1127%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (829 samples, 65.02%)</title><rect x="0.0000%" y="757" width="65.0196%" height="15" fill="rgb(227,133,34)" fg:x="0" fg:w="829"/><text x="0.2500%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (829 samples, 65.02%)</title><rect x="0.0000%" y="741" width="65.0196%" height="15" fill="rgb(247,227,15)" fg:x="0" fg:w="829"/><text x="0.2500%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (829 samples, 65.02%)</title><rect x="0.0000%" y="725" width="65.0196%" height="15" fill="rgb(229,96,14)" fg:x="0" fg:w="829"/><text x="0.2500%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (478 samples, 37.49%)</title><rect x="27.5294%" y="709" width="37.4902%" height="15" fill="rgb(220,79,17)" fg:x="351" fg:w="478"/><text x="27.7794%" y="719.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (478 samples, 37.49%)</title><rect x="27.5294%" y="693" width="37.4902%" height="15" fill="rgb(205,131,53)" fg:x="351" fg:w="478"/><text x="27.7794%" y="703.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (8 samples, 0.63%)</title><rect x="64.3922%" y="677" width="0.6275%" height="15" fill="rgb(209,50,29)" fg:x="821" fg:w="8"/><text x="64.6422%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.63%)</title><rect x="64.3922%" y="661" width="0.6275%" height="15" fill="rgb(245,86,46)" fg:x="821" fg:w="8"/><text x="64.6422%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.63%)</title><rect x="64.3922%" y="645" width="0.6275%" height="15" fill="rgb(235,66,46)" fg:x="821" fg:w="8"/><text x="64.6422%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="64.7843%" y="629" width="0.2353%" height="15" fill="rgb(232,148,31)" fg:x="826" fg:w="3"/><text x="65.0343%" y="639.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="64.7843%" y="613" width="0.2353%" height="15" fill="rgb(217,149,8)" fg:x="826" fg:w="3"/><text x="65.0343%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="64.7843%" y="597" width="0.2353%" height="15" fill="rgb(209,183,11)" fg:x="826" fg:w="3"/><text x="65.0343%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="64.7843%" y="581" width="0.2353%" height="15" fill="rgb(208,55,20)" fg:x="826" fg:w="3"/><text x="65.0343%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="64.7843%" y="565" width="0.2353%" height="15" fill="rgb(218,39,14)" fg:x="826" fg:w="3"/><text x="65.0343%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="64.7843%" y="549" width="0.2353%" height="15" fill="rgb(216,169,33)" fg:x="826" fg:w="3"/><text x="65.0343%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.9412%" y="533" width="0.0784%" height="15" fill="rgb(233,80,24)" fg:x="828" fg:w="1"/><text x="65.1912%" y="543.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="64.9412%" y="517" width="0.0784%" height="15" fill="rgb(213,179,31)" fg:x="828" fg:w="1"/><text x="65.1912%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="65.0196%" y="661" width="0.0784%" height="15" fill="rgb(209,19,5)" fg:x="829" fg:w="1"/><text x="65.2696%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.08%)</title><rect x="65.0196%" y="645" width="0.0784%" height="15" fill="rgb(219,18,35)" fg:x="829" fg:w="1"/><text x="65.2696%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="65.0196%" y="629" width="0.0784%" height="15" fill="rgb(209,169,16)" fg:x="829" fg:w="1"/><text x="65.2696%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="65.0196%" y="693" width="0.1569%" height="15" fill="rgb(245,90,51)" fg:x="829" fg:w="2"/><text x="65.2696%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="65.0196%" y="677" width="0.1569%" height="15" fill="rgb(220,99,45)" fg:x="829" fg:w="2"/><text x="65.2696%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_rune::RunePlugin&gt; (1 samples, 0.08%)</title><rect x="65.0980%" y="661" width="0.0784%" height="15" fill="rgb(249,89,25)" fg:x="830" fg:w="1"/><text x="65.3480%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="65.2549%" y="581" width="0.2353%" height="15" fill="rgb(239,193,0)" fg:x="832" fg:w="3"/><text x="65.5049%" y="591.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="65.2549%" y="565" width="0.2353%" height="15" fill="rgb(231,126,1)" fg:x="832" fg:w="3"/><text x="65.5049%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.4902%" y="565" width="0.0784%" height="15" fill="rgb(243,166,3)" fg:x="835" fg:w="1"/><text x="65.7402%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.4902%" y="549" width="0.0784%" height="15" fill="rgb(223,22,34)" fg:x="835" fg:w="1"/><text x="65.7402%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.47%)</title><rect x="65.1765%" y="629" width="0.4706%" height="15" fill="rgb(251,52,51)" fg:x="831" fg:w="6"/><text x="65.4265%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (6 samples, 0.47%)</title><rect x="65.1765%" y="613" width="0.4706%" height="15" fill="rgb(221,165,28)" fg:x="831" fg:w="6"/><text x="65.4265%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.39%)</title><rect x="65.2549%" y="597" width="0.3922%" height="15" fill="rgb(218,121,47)" fg:x="832" fg:w="5"/><text x="65.5049%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="65.4902%" y="581" width="0.1569%" height="15" fill="rgb(209,120,9)" fg:x="835" fg:w="2"/><text x="65.7402%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.5686%" y="565" width="0.0784%" height="15" fill="rgb(236,68,12)" fg:x="836" fg:w="1"/><text x="65.8186%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.5686%" y="549" width="0.0784%" height="15" fill="rgb(225,194,26)" fg:x="836" fg:w="1"/><text x="65.8186%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.7255%" y="597" width="0.0784%" height="15" fill="rgb(231,84,39)" fg:x="838" fg:w="1"/><text x="65.9755%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.8039%" y="597" width="0.0784%" height="15" fill="rgb(210,11,45)" fg:x="839" fg:w="1"/><text x="66.0539%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.8039%" y="581" width="0.0784%" height="15" fill="rgb(224,54,52)" fg:x="839" fg:w="1"/><text x="66.0539%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.8824%" y="565" width="0.0784%" height="15" fill="rgb(238,102,14)" fg:x="840" fg:w="1"/><text x="66.1324%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.9608%" y="549" width="0.0784%" height="15" fill="rgb(243,160,52)" fg:x="841" fg:w="1"/><text x="66.2108%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.94%)</title><rect x="65.1765%" y="645" width="0.9412%" height="15" fill="rgb(216,114,19)" fg:x="831" fg:w="12"/><text x="65.4265%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.47%)</title><rect x="65.6471%" y="629" width="0.4706%" height="15" fill="rgb(244,166,37)" fg:x="837" fg:w="6"/><text x="65.8971%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="65.6471%" y="613" width="0.4706%" height="15" fill="rgb(246,29,44)" fg:x="837" fg:w="6"/><text x="65.8971%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="65.8824%" y="597" width="0.2353%" height="15" fill="rgb(215,56,53)" fg:x="840" fg:w="3"/><text x="66.1324%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="65.8824%" y="581" width="0.2353%" height="15" fill="rgb(217,60,2)" fg:x="840" fg:w="3"/><text x="66.1324%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="65.9608%" y="565" width="0.1569%" height="15" fill="rgb(207,26,24)" fg:x="841" fg:w="2"/><text x="66.2108%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="66.0392%" y="549" width="0.0784%" height="15" fill="rgb(252,210,15)" fg:x="842" fg:w="1"/><text x="66.2892%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.0392%" y="533" width="0.0784%" height="15" fill="rgb(253,209,26)" fg:x="842" fg:w="1"/><text x="66.2892%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (14 samples, 1.10%)</title><rect x="65.1765%" y="693" width="1.0980%" height="15" fill="rgb(238,170,14)" fg:x="831" fg:w="14"/><text x="65.4265%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.10%)</title><rect x="65.1765%" y="677" width="1.0980%" height="15" fill="rgb(216,178,15)" fg:x="831" fg:w="14"/><text x="65.4265%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (14 samples, 1.10%)</title><rect x="65.1765%" y="661" width="1.0980%" height="15" fill="rgb(250,197,2)" fg:x="831" fg:w="14"/><text x="65.4265%" y="671.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="66.1176%" y="645" width="0.1569%" height="15" fill="rgb(212,70,42)" fg:x="843" fg:w="2"/><text x="66.3676%" y="655.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 1.33%)</title><rect x="65.0196%" y="709" width="1.3333%" height="15" fill="rgb(227,213,9)" fg:x="829" fg:w="17"/><text x="65.2696%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::storage::InMemoryStorage&gt; (1 samples, 0.08%)</title><rect x="66.2745%" y="693" width="0.0784%" height="15" fill="rgb(245,99,25)" fg:x="845" fg:w="1"/><text x="66.5245%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.2745%" y="677" width="0.0784%" height="15" fill="rgb(250,82,29)" fg:x="845" fg:w="1"/><text x="66.5245%" y="687.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="66.4314%" y="613" width="0.0784%" height="15" fill="rgb(241,226,54)" fg:x="847" fg:w="1"/><text x="66.6814%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="66.4314%" y="597" width="0.0784%" height="15" fill="rgb(221,99,41)" fg:x="847" fg:w="1"/><text x="66.6814%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="66.4314%" y="581" width="0.0784%" height="15" fill="rgb(213,90,21)" fg:x="847" fg:w="1"/><text x="66.6814%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.4314%" y="565" width="0.0784%" height="15" fill="rgb(205,208,24)" fg:x="847" fg:w="1"/><text x="66.6814%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.4314%" y="549" width="0.0784%" height="15" fill="rgb(246,31,12)" fg:x="847" fg:w="1"/><text x="66.6814%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.4314%" y="533" width="0.0784%" height="15" fill="rgb(213,154,6)" fg:x="847" fg:w="1"/><text x="66.6814%" y="543.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="66.5098%" y="581" width="0.0784%" height="15" fill="rgb(222,163,29)" fg:x="848" fg:w="1"/><text x="66.7598%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="66.5882%" y="581" width="0.0784%" height="15" fill="rgb(227,201,8)" fg:x="849" fg:w="1"/><text x="66.8382%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.5882%" y="565" width="0.0784%" height="15" fill="rgb(233,9,32)" fg:x="849" fg:w="1"/><text x="66.8382%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="66.5098%" y="613" width="0.2353%" height="15" fill="rgb(217,54,24)" fg:x="848" fg:w="3"/><text x="66.7598%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="66.5098%" y="597" width="0.2353%" height="15" fill="rgb(235,192,0)" fg:x="848" fg:w="3"/><text x="66.7598%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="66.6667%" y="581" width="0.0784%" height="15" fill="rgb(235,45,9)" fg:x="850" fg:w="1"/><text x="66.9167%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.6667%" y="565" width="0.0784%" height="15" fill="rgb(246,42,40)" fg:x="850" fg:w="1"/><text x="66.9167%" y="575.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="66.7451%" y="613" width="0.0784%" height="15" fill="rgb(248,111,24)" fg:x="851" fg:w="1"/><text x="66.9951%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="66.7451%" y="597" width="0.0784%" height="15" fill="rgb(249,65,22)" fg:x="851" fg:w="1"/><text x="66.9951%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="66.7451%" y="581" width="0.0784%" height="15" fill="rgb(238,111,51)" fg:x="851" fg:w="1"/><text x="66.9951%" y="591.50"></text></g><g><title>&lt;plugins_core::emote::EmotePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="66.8235%" y="613" width="0.0784%" height="15" fill="rgb(250,118,22)" fg:x="852" fg:w="1"/><text x="67.0735%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="66.8235%" y="597" width="0.0784%" height="15" fill="rgb(234,84,26)" fg:x="852" fg:w="1"/><text x="67.0735%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.8235%" y="581" width="0.0784%" height="15" fill="rgb(243,172,12)" fg:x="852" fg:w="1"/><text x="67.0735%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.8235%" y="565" width="0.0784%" height="15" fill="rgb(236,150,49)" fg:x="852" fg:w="1"/><text x="67.0735%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.8235%" y="549" width="0.0784%" height="15" fill="rgb(225,197,26)" fg:x="852" fg:w="1"/><text x="67.0735%" y="559.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="66.9020%" y="613" width="0.1569%" height="15" fill="rgb(214,17,42)" fg:x="853" fg:w="2"/><text x="67.1520%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="66.9020%" y="597" width="0.1569%" height="15" fill="rgb(224,165,40)" fg:x="853" fg:w="2"/><text x="67.1520%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="66.9804%" y="581" width="0.0784%" height="15" fill="rgb(246,100,4)" fg:x="854" fg:w="1"/><text x="67.2304%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.9804%" y="565" width="0.0784%" height="15" fill="rgb(222,103,0)" fg:x="854" fg:w="1"/><text x="67.2304%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.9804%" y="549" width="0.0784%" height="15" fill="rgb(227,189,26)" fg:x="854" fg:w="1"/><text x="67.2304%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.9804%" y="533" width="0.0784%" height="15" fill="rgb(214,202,17)" fg:x="854" fg:w="1"/><text x="67.2304%" y="543.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="67.0588%" y="613" width="0.0784%" height="15" fill="rgb(229,111,3)" fg:x="855" fg:w="1"/><text x="67.3088%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="67.0588%" y="597" width="0.0784%" height="15" fill="rgb(229,172,15)" fg:x="855" fg:w="1"/><text x="67.3088%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.0588%" y="581" width="0.0784%" height="15" fill="rgb(230,224,35)" fg:x="855" fg:w="1"/><text x="67.3088%" y="591.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="67.1373%" y="581" width="0.0784%" height="15" fill="rgb(251,141,6)" fg:x="856" fg:w="1"/><text x="67.3873%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="67.1373%" y="565" width="0.0784%" height="15" fill="rgb(225,208,6)" fg:x="856" fg:w="1"/><text x="67.3873%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.1373%" y="549" width="0.0784%" height="15" fill="rgb(246,181,16)" fg:x="856" fg:w="1"/><text x="67.3873%" y="559.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="67.1373%" y="613" width="0.1569%" height="15" fill="rgb(227,129,36)" fg:x="856" fg:w="2"/><text x="67.3873%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="67.1373%" y="597" width="0.1569%" height="15" fill="rgb(248,117,24)" fg:x="856" fg:w="2"/><text x="67.3873%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="67.2157%" y="581" width="0.0784%" height="15" fill="rgb(214,185,35)" fg:x="857" fg:w="1"/><text x="67.4657%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.2157%" y="565" width="0.0784%" height="15" fill="rgb(236,150,34)" fg:x="857" fg:w="1"/><text x="67.4657%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.2157%" y="549" width="0.0784%" height="15" fill="rgb(243,228,27)" fg:x="857" fg:w="1"/><text x="67.4657%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.2157%" y="533" width="0.0784%" height="15" fill="rgb(245,77,44)" fg:x="857" fg:w="1"/><text x="67.4657%" y="543.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="67.2941%" y="613" width="0.0784%" height="15" fill="rgb(235,214,42)" fg:x="858" fg:w="1"/><text x="67.5441%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="67.2941%" y="597" width="0.0784%" height="15" fill="rgb(221,74,3)" fg:x="858" fg:w="1"/><text x="67.5441%" y="607.50"></text></g><g><title>&lt;plugins_rune::actions::RuneAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="67.2941%" y="581" width="0.0784%" height="15" fill="rgb(206,121,29)" fg:x="858" fg:w="1"/><text x="67.5441%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (13 samples, 1.02%)</title><rect x="66.4314%" y="629" width="1.0196%" height="15" fill="rgb(249,131,53)" fg:x="847" fg:w="13"/><text x="66.6814%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.3725%" y="613" width="0.0784%" height="15" fill="rgb(236,170,29)" fg:x="859" fg:w="1"/><text x="67.6225%" y="623.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="67.4510%" y="629" width="0.2353%" height="15" fill="rgb(247,96,15)" fg:x="860" fg:w="3"/><text x="67.7010%" y="639.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="67.4510%" y="613" width="0.2353%" height="15" fill="rgb(211,210,7)" fg:x="860" fg:w="3"/><text x="67.7010%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="67.4510%" y="597" width="0.2353%" height="15" fill="rgb(240,88,50)" fg:x="860" fg:w="3"/><text x="67.7010%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="67.4510%" y="581" width="0.2353%" height="15" fill="rgb(209,229,26)" fg:x="860" fg:w="3"/><text x="67.7010%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="67.4510%" y="565" width="0.2353%" height="15" fill="rgb(210,68,23)" fg:x="860" fg:w="3"/><text x="67.7010%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="67.4510%" y="549" width="0.2353%" height="15" fill="rgb(229,180,13)" fg:x="860" fg:w="3"/><text x="67.7010%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="67.4510%" y="533" width="0.2353%" height="15" fill="rgb(236,53,44)" fg:x="860" fg:w="3"/><text x="67.7010%" y="543.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="67.4510%" y="517" width="0.2353%" height="15" fill="rgb(244,214,29)" fg:x="860" fg:w="3"/><text x="67.7010%" y="527.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.16%)</title><rect x="67.7647%" y="613" width="0.1569%" height="15" fill="rgb(220,75,29)" fg:x="864" fg:w="2"/><text x="68.0147%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="67.7647%" y="597" width="0.1569%" height="15" fill="rgb(214,183,37)" fg:x="864" fg:w="2"/><text x="68.0147%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="67.7647%" y="581" width="0.1569%" height="15" fill="rgb(239,117,29)" fg:x="864" fg:w="2"/><text x="68.0147%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.0000%" y="549" width="0.0784%" height="15" fill="rgb(237,171,35)" fg:x="867" fg:w="1"/><text x="68.2500%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.0000%" y="533" width="0.0784%" height="15" fill="rgb(229,178,53)" fg:x="867" fg:w="1"/><text x="68.2500%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.0000%" y="517" width="0.0784%" height="15" fill="rgb(210,102,19)" fg:x="867" fg:w="1"/><text x="68.2500%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.0000%" y="501" width="0.0784%" height="15" fill="rgb(235,127,22)" fg:x="867" fg:w="1"/><text x="68.2500%" y="511.50"></text></g><g><title>glob::Pattern::new (2 samples, 0.16%)</title><rect x="68.0000%" y="565" width="0.1569%" height="15" fill="rgb(244,31,31)" fg:x="867" fg:w="2"/><text x="68.2500%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.0784%" y="549" width="0.0784%" height="15" fill="rgb(231,43,21)" fg:x="868" fg:w="1"/><text x="68.3284%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.0784%" y="533" width="0.0784%" height="15" fill="rgb(217,131,35)" fg:x="868" fg:w="1"/><text x="68.3284%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.0784%" y="517" width="0.0784%" height="15" fill="rgb(221,149,4)" fg:x="868" fg:w="1"/><text x="68.3284%" y="527.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (8 samples, 0.63%)</title><rect x="67.6863%" y="629" width="0.6275%" height="15" fill="rgb(232,170,28)" fg:x="863" fg:w="8"/><text x="67.9363%" y="639.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (5 samples, 0.39%)</title><rect x="67.9216%" y="613" width="0.3922%" height="15" fill="rgb(238,56,10)" fg:x="866" fg:w="5"/><text x="68.1716%" y="623.50"></text></g><g><title>glob::glob (4 samples, 0.31%)</title><rect x="68.0000%" y="597" width="0.3137%" height="15" fill="rgb(235,196,14)" fg:x="867" fg:w="4"/><text x="68.2500%" y="607.50"></text></g><g><title>glob::glob_with (4 samples, 0.31%)</title><rect x="68.0000%" y="581" width="0.3137%" height="15" fill="rgb(216,45,48)" fg:x="867" fg:w="4"/><text x="68.2500%" y="591.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_string_lossy (2 samples, 0.16%)</title><rect x="68.1569%" y="565" width="0.1569%" height="15" fill="rgb(238,213,17)" fg:x="869" fg:w="2"/><text x="68.4069%" y="575.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (27 samples, 2.12%)</title><rect x="66.3529%" y="645" width="2.1176%" height="15" fill="rgb(212,13,2)" fg:x="846" fg:w="27"/><text x="66.6029%" y="655.50">k..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="68.3137%" y="629" width="0.1569%" height="15" fill="rgb(240,114,20)" fg:x="871" fg:w="2"/><text x="68.5637%" y="639.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="68.3137%" y="613" width="0.1569%" height="15" fill="rgb(228,41,40)" fg:x="871" fg:w="2"/><text x="68.5637%" y="623.50"></text></g><g><title>engine::session::Session::initialize (28 samples, 2.20%)</title><rect x="66.3529%" y="661" width="2.1961%" height="15" fill="rgb(244,132,35)" fg:x="846" fg:w="28"/><text x="66.6029%" y="671.50">e..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="68.4706%" y="645" width="0.0784%" height="15" fill="rgb(253,189,4)" fg:x="873" fg:w="1"/><text x="68.7206%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.4706%" y="629" width="0.0784%" height="15" fill="rgb(224,37,19)" fg:x="873" fg:w="1"/><text x="68.7206%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (29 samples, 2.27%)</title><rect x="66.3529%" y="709" width="2.2745%" height="15" fill="rgb(235,223,18)" fg:x="846" fg:w="29"/><text x="66.6029%" y="719.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (29 samples, 2.27%)</title><rect x="66.3529%" y="693" width="2.2745%" height="15" fill="rgb(235,163,25)" fg:x="846" fg:w="29"/><text x="66.6029%" y="703.50">e..</text></g><g><title>engine::session::Session::new (29 samples, 2.27%)</title><rect x="66.3529%" y="677" width="2.2745%" height="15" fill="rgb(217,145,28)" fg:x="846" fg:w="29"/><text x="66.6029%" y="687.50">e..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="68.5490%" y="661" width="0.0784%" height="15" fill="rgb(223,223,32)" fg:x="874" fg:w="1"/><text x="68.7990%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.5490%" y="645" width="0.0784%" height="15" fill="rgb(227,189,39)" fg:x="874" fg:w="1"/><text x="68.7990%" y="655.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="68.5490%" y="629" width="0.0784%" height="15" fill="rgb(248,10,22)" fg:x="874" fg:w="1"/><text x="68.7990%" y="639.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.7059%" y="645" width="0.0784%" height="15" fill="rgb(248,46,39)" fg:x="876" fg:w="1"/><text x="68.9559%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="68.7059%" y="629" width="0.0784%" height="15" fill="rgb(248,113,48)" fg:x="876" fg:w="1"/><text x="68.9559%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (1 samples, 0.08%)</title><rect x="68.7059%" y="613" width="0.0784%" height="15" fill="rgb(245,16,25)" fg:x="876" fg:w="1"/><text x="68.9559%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="68.7843%" y="597" width="0.0784%" height="15" fill="rgb(249,152,16)" fg:x="877" fg:w="1"/><text x="69.0343%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="68.7843%" y="581" width="0.0784%" height="15" fill="rgb(250,16,1)" fg:x="877" fg:w="1"/><text x="69.0343%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="68.7843%" y="565" width="0.0784%" height="15" fill="rgb(249,138,3)" fg:x="877" fg:w="1"/><text x="69.0343%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="68.7843%" y="549" width="0.0784%" height="15" fill="rgb(227,71,41)" fg:x="877" fg:w="1"/><text x="69.0343%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.7843%" y="533" width="0.0784%" height="15" fill="rgb(209,184,23)" fg:x="877" fg:w="1"/><text x="69.0343%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.7843%" y="517" width="0.0784%" height="15" fill="rgb(223,215,31)" fg:x="877" fg:w="1"/><text x="69.0343%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.7843%" y="501" width="0.0784%" height="15" fill="rgb(210,146,28)" fg:x="877" fg:w="1"/><text x="69.0343%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.7843%" y="485" width="0.0784%" height="15" fill="rgb(209,183,41)" fg:x="877" fg:w="1"/><text x="69.0343%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="68.8627%" y="581" width="0.1569%" height="15" fill="rgb(209,224,45)" fg:x="878" fg:w="2"/><text x="69.1127%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="69.0196%" y="581" width="0.0784%" height="15" fill="rgb(224,209,51)" fg:x="880" fg:w="1"/><text x="69.2696%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.0196%" y="565" width="0.0784%" height="15" fill="rgb(223,17,39)" fg:x="880" fg:w="1"/><text x="69.2696%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.0980%" y="565" width="0.0784%" height="15" fill="rgb(234,204,37)" fg:x="881" fg:w="1"/><text x="69.3480%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.0980%" y="549" width="0.0784%" height="15" fill="rgb(236,120,5)" fg:x="881" fg:w="1"/><text x="69.3480%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.0980%" y="533" width="0.0784%" height="15" fill="rgb(248,97,27)" fg:x="881" fg:w="1"/><text x="69.3480%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.0980%" y="517" width="0.0784%" height="15" fill="rgb(240,66,17)" fg:x="881" fg:w="1"/><text x="69.3480%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.39%)</title><rect x="68.8627%" y="597" width="0.3922%" height="15" fill="rgb(210,79,3)" fg:x="878" fg:w="5"/><text x="69.1127%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="69.0980%" y="581" width="0.1569%" height="15" fill="rgb(214,176,27)" fg:x="881" fg:w="2"/><text x="69.3480%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.1765%" y="565" width="0.0784%" height="15" fill="rgb(235,185,3)" fg:x="882" fg:w="1"/><text x="69.4265%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.1765%" y="549" width="0.0784%" height="15" fill="rgb(227,24,12)" fg:x="882" fg:w="1"/><text x="69.4265%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="69.1765%" y="533" width="0.0784%" height="15" fill="rgb(252,169,48)" fg:x="882" fg:w="1"/><text x="69.4265%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="69.2549%" y="597" width="0.0784%" height="15" fill="rgb(212,65,1)" fg:x="883" fg:w="1"/><text x="69.5049%" y="607.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="69.3333%" y="581" width="0.0784%" height="15" fill="rgb(242,39,24)" fg:x="884" fg:w="1"/><text x="69.5833%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.6471%" y="453" width="0.0784%" height="15" fill="rgb(249,32,23)" fg:x="888" fg:w="1"/><text x="69.8971%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="69.6471%" y="469" width="0.1569%" height="15" fill="rgb(251,195,23)" fg:x="888" fg:w="2"/><text x="69.8971%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.7255%" y="453" width="0.0784%" height="15" fill="rgb(236,174,8)" fg:x="889" fg:w="1"/><text x="69.9755%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.7255%" y="437" width="0.0784%" height="15" fill="rgb(220,197,8)" fg:x="889" fg:w="1"/><text x="69.9755%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.7255%" y="421" width="0.0784%" height="15" fill="rgb(240,108,37)" fg:x="889" fg:w="1"/><text x="69.9755%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.7255%" y="405" width="0.0784%" height="15" fill="rgb(232,176,24)" fg:x="889" fg:w="1"/><text x="69.9755%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.7255%" y="389" width="0.0784%" height="15" fill="rgb(243,35,29)" fg:x="889" fg:w="1"/><text x="69.9755%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.7255%" y="373" width="0.0784%" height="15" fill="rgb(210,37,18)" fg:x="889" fg:w="1"/><text x="69.9755%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="69.6471%" y="501" width="0.2353%" height="15" fill="rgb(224,184,40)" fg:x="888" fg:w="3"/><text x="69.8971%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="69.6471%" y="485" width="0.2353%" height="15" fill="rgb(236,39,29)" fg:x="888" fg:w="3"/><text x="69.8971%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.8039%" y="469" width="0.0784%" height="15" fill="rgb(232,48,39)" fg:x="890" fg:w="1"/><text x="70.0539%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.39%)</title><rect x="69.5686%" y="517" width="0.3922%" height="15" fill="rgb(236,34,42)" fg:x="887" fg:w="5"/><text x="69.8186%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.8824%" y="501" width="0.0784%" height="15" fill="rgb(243,106,37)" fg:x="891" fg:w="1"/><text x="70.1324%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.8824%" y="485" width="0.0784%" height="15" fill="rgb(218,96,6)" fg:x="891" fg:w="1"/><text x="70.1324%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.8824%" y="469" width="0.0784%" height="15" fill="rgb(235,130,12)" fg:x="891" fg:w="1"/><text x="70.1324%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.8824%" y="453" width="0.0784%" height="15" fill="rgb(231,95,0)" fg:x="891" fg:w="1"/><text x="70.1324%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.8824%" y="437" width="0.0784%" height="15" fill="rgb(228,12,23)" fg:x="891" fg:w="1"/><text x="70.1324%" y="447.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="69.8824%" y="421" width="0.0784%" height="15" fill="rgb(216,12,1)" fg:x="891" fg:w="1"/><text x="70.1324%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="69.8824%" y="405" width="0.0784%" height="15" fill="rgb(219,59,3)" fg:x="891" fg:w="1"/><text x="70.1324%" y="415.50"></text></g><g><title>engine::session::Session::flush (18 samples, 1.41%)</title><rect x="68.6275%" y="693" width="1.4118%" height="15" fill="rgb(215,208,46)" fg:x="875" fg:w="18"/><text x="68.8775%" y="703.50"></text></g><g><title>engine::session::state::State::close (17 samples, 1.33%)</title><rect x="68.7059%" y="677" width="1.3333%" height="15" fill="rgb(254,224,29)" fg:x="876" fg:w="17"/><text x="68.9559%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (17 samples, 1.33%)</title><rect x="68.7059%" y="661" width="1.3333%" height="15" fill="rgb(232,14,29)" fg:x="876" fg:w="17"/><text x="68.9559%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (16 samples, 1.25%)</title><rect x="68.7843%" y="645" width="1.2549%" height="15" fill="rgb(208,45,52)" fg:x="877" fg:w="16"/><text x="69.0343%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 1.25%)</title><rect x="68.7843%" y="629" width="1.2549%" height="15" fill="rgb(234,191,28)" fg:x="877" fg:w="16"/><text x="69.0343%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (16 samples, 1.25%)</title><rect x="68.7843%" y="613" width="1.2549%" height="15" fill="rgb(244,67,43)" fg:x="877" fg:w="16"/><text x="69.0343%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.71%)</title><rect x="69.3333%" y="597" width="0.7059%" height="15" fill="rgb(236,189,24)" fg:x="884" fg:w="9"/><text x="69.5833%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.63%)</title><rect x="69.4118%" y="581" width="0.6275%" height="15" fill="rgb(239,214,33)" fg:x="885" fg:w="8"/><text x="69.6618%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.55%)</title><rect x="69.4902%" y="565" width="0.5490%" height="15" fill="rgb(226,176,41)" fg:x="886" fg:w="7"/><text x="69.7402%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.47%)</title><rect x="69.5686%" y="549" width="0.4706%" height="15" fill="rgb(248,47,8)" fg:x="887" fg:w="6"/><text x="69.8186%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.47%)</title><rect x="69.5686%" y="533" width="0.4706%" height="15" fill="rgb(218,81,44)" fg:x="887" fg:w="6"/><text x="69.8186%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="69.9608%" y="517" width="0.0784%" height="15" fill="rgb(213,98,6)" fg:x="892" fg:w="1"/><text x="70.2108%" y="527.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.0392%" y="677" width="0.0784%" height="15" fill="rgb(222,85,22)" fg:x="893" fg:w="1"/><text x="70.2892%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.0392%" y="661" width="0.0784%" height="15" fill="rgb(239,46,39)" fg:x="893" fg:w="1"/><text x="70.2892%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.0392%" y="645" width="0.0784%" height="15" fill="rgb(237,12,29)" fg:x="893" fg:w="1"/><text x="70.2892%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.0392%" y="629" width="0.0784%" height="15" fill="rgb(214,77,8)" fg:x="893" fg:w="1"/><text x="70.2892%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.0392%" y="613" width="0.0784%" height="15" fill="rgb(217,168,37)" fg:x="893" fg:w="1"/><text x="70.2892%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.0392%" y="597" width="0.0784%" height="15" fill="rgb(221,217,23)" fg:x="893" fg:w="1"/><text x="70.2892%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.0392%" y="581" width="0.0784%" height="15" fill="rgb(243,229,36)" fg:x="893" fg:w="1"/><text x="70.2892%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.0392%" y="565" width="0.0784%" height="15" fill="rgb(251,163,40)" fg:x="893" fg:w="1"/><text x="70.2892%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.0392%" y="549" width="0.0784%" height="15" fill="rgb(237,222,12)" fg:x="893" fg:w="1"/><text x="70.2892%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.0392%" y="533" width="0.0784%" height="15" fill="rgb(248,132,6)" fg:x="893" fg:w="1"/><text x="70.2892%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.0392%" y="517" width="0.0784%" height="15" fill="rgb(227,167,50)" fg:x="893" fg:w="1"/><text x="70.2892%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.0392%" y="501" width="0.0784%" height="15" fill="rgb(242,84,37)" fg:x="893" fg:w="1"/><text x="70.2892%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.0392%" y="485" width="0.0784%" height="15" fill="rgb(212,4,50)" fg:x="893" fg:w="1"/><text x="70.2892%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.0392%" y="469" width="0.0784%" height="15" fill="rgb(230,228,32)" fg:x="893" fg:w="1"/><text x="70.2892%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.0392%" y="453" width="0.0784%" height="15" fill="rgb(248,217,23)" fg:x="893" fg:w="1"/><text x="70.2892%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.0392%" y="437" width="0.0784%" height="15" fill="rgb(238,197,32)" fg:x="893" fg:w="1"/><text x="70.2892%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.0392%" y="421" width="0.0784%" height="15" fill="rgb(236,106,1)" fg:x="893" fg:w="1"/><text x="70.2892%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.1176%" y="661" width="0.0784%" height="15" fill="rgb(219,228,13)" fg:x="894" fg:w="1"/><text x="70.3676%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1176%" y="645" width="0.0784%" height="15" fill="rgb(238,30,35)" fg:x="894" fg:w="1"/><text x="70.3676%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1176%" y="629" width="0.0784%" height="15" fill="rgb(236,70,23)" fg:x="894" fg:w="1"/><text x="70.3676%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1176%" y="613" width="0.0784%" height="15" fill="rgb(249,104,48)" fg:x="894" fg:w="1"/><text x="70.3676%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.1176%" y="597" width="0.0784%" height="15" fill="rgb(254,117,50)" fg:x="894" fg:w="1"/><text x="70.3676%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.1176%" y="581" width="0.0784%" height="15" fill="rgb(223,152,4)" fg:x="894" fg:w="1"/><text x="70.3676%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.1176%" y="565" width="0.0784%" height="15" fill="rgb(245,6,2)" fg:x="894" fg:w="1"/><text x="70.3676%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.1176%" y="549" width="0.0784%" height="15" fill="rgb(249,150,24)" fg:x="894" fg:w="1"/><text x="70.3676%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.1176%" y="533" width="0.0784%" height="15" fill="rgb(228,185,42)" fg:x="894" fg:w="1"/><text x="70.3676%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.1176%" y="517" width="0.0784%" height="15" fill="rgb(226,39,33)" fg:x="894" fg:w="1"/><text x="70.3676%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.1176%" y="501" width="0.0784%" height="15" fill="rgb(221,166,19)" fg:x="894" fg:w="1"/><text x="70.3676%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.1176%" y="485" width="0.0784%" height="15" fill="rgb(209,109,2)" fg:x="894" fg:w="1"/><text x="70.3676%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.1176%" y="469" width="0.0784%" height="15" fill="rgb(252,216,26)" fg:x="894" fg:w="1"/><text x="70.3676%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1176%" y="453" width="0.0784%" height="15" fill="rgb(227,173,36)" fg:x="894" fg:w="1"/><text x="70.3676%" y="463.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="70.1961%" y="661" width="0.0784%" height="15" fill="rgb(209,90,7)" fg:x="895" fg:w="1"/><text x="70.4461%" y="671.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="70.1961%" y="645" width="0.0784%" height="15" fill="rgb(250,194,11)" fg:x="895" fg:w="1"/><text x="70.4461%" y="655.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.1961%" y="629" width="0.0784%" height="15" fill="rgb(220,72,50)" fg:x="895" fg:w="1"/><text x="70.4461%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1961%" y="613" width="0.0784%" height="15" fill="rgb(222,106,48)" fg:x="895" fg:w="1"/><text x="70.4461%" y="623.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="70.1961%" y="597" width="0.0784%" height="15" fill="rgb(216,220,45)" fg:x="895" fg:w="1"/><text x="70.4461%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2745%" y="597" width="0.0784%" height="15" fill="rgb(234,112,18)" fg:x="896" fg:w="1"/><text x="70.5245%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2745%" y="581" width="0.0784%" height="15" fill="rgb(206,179,9)" fg:x="896" fg:w="1"/><text x="70.5245%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2745%" y="565" width="0.0784%" height="15" fill="rgb(215,115,40)" fg:x="896" fg:w="1"/><text x="70.5245%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2745%" y="549" width="0.0784%" height="15" fill="rgb(222,69,34)" fg:x="896" fg:w="1"/><text x="70.5245%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2745%" y="533" width="0.0784%" height="15" fill="rgb(209,161,10)" fg:x="896" fg:w="1"/><text x="70.5245%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.2745%" y="517" width="0.0784%" height="15" fill="rgb(217,6,38)" fg:x="896" fg:w="1"/><text x="70.5245%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.2745%" y="501" width="0.0784%" height="15" fill="rgb(229,229,48)" fg:x="896" fg:w="1"/><text x="70.5245%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.2745%" y="485" width="0.0784%" height="15" fill="rgb(225,21,28)" fg:x="896" fg:w="1"/><text x="70.5245%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.2745%" y="469" width="0.0784%" height="15" fill="rgb(206,33,13)" fg:x="896" fg:w="1"/><text x="70.5245%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.2745%" y="453" width="0.0784%" height="15" fill="rgb(242,178,17)" fg:x="896" fg:w="1"/><text x="70.5245%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.2745%" y="437" width="0.0784%" height="15" fill="rgb(220,162,5)" fg:x="896" fg:w="1"/><text x="70.5245%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.2745%" y="421" width="0.0784%" height="15" fill="rgb(210,33,43)" fg:x="896" fg:w="1"/><text x="70.5245%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.2745%" y="405" width="0.0784%" height="15" fill="rgb(216,116,54)" fg:x="896" fg:w="1"/><text x="70.5245%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.2745%" y="389" width="0.0784%" height="15" fill="rgb(249,92,24)" fg:x="896" fg:w="1"/><text x="70.5245%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2745%" y="373" width="0.0784%" height="15" fill="rgb(231,189,14)" fg:x="896" fg:w="1"/><text x="70.5245%" y="383.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="70.2745%" y="645" width="0.1569%" height="15" fill="rgb(230,8,41)" fg:x="896" fg:w="2"/><text x="70.5245%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="70.2745%" y="629" width="0.1569%" height="15" fill="rgb(249,7,27)" fg:x="896" fg:w="2"/><text x="70.5245%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="70.2745%" y="613" width="0.1569%" height="15" fill="rgb(232,86,5)" fg:x="896" fg:w="2"/><text x="70.5245%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.3529%" y="597" width="0.0784%" height="15" fill="rgb(224,175,18)" fg:x="897" fg:w="1"/><text x="70.6029%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3529%" y="581" width="0.0784%" height="15" fill="rgb(220,129,12)" fg:x="897" fg:w="1"/><text x="70.6029%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.3529%" y="565" width="0.0784%" height="15" fill="rgb(210,19,36)" fg:x="897" fg:w="1"/><text x="70.6029%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3529%" y="549" width="0.0784%" height="15" fill="rgb(219,96,14)" fg:x="897" fg:w="1"/><text x="70.6029%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.3529%" y="533" width="0.0784%" height="15" fill="rgb(249,106,1)" fg:x="897" fg:w="1"/><text x="70.6029%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3529%" y="517" width="0.0784%" height="15" fill="rgb(249,155,20)" fg:x="897" fg:w="1"/><text x="70.6029%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.3529%" y="501" width="0.0784%" height="15" fill="rgb(244,168,9)" fg:x="897" fg:w="1"/><text x="70.6029%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="70.2745%" y="661" width="0.2353%" height="15" fill="rgb(216,23,50)" fg:x="896" fg:w="3"/><text x="70.5245%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="70.4314%" y="645" width="0.0784%" height="15" fill="rgb(224,219,20)" fg:x="898" fg:w="1"/><text x="70.6814%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.4314%" y="629" width="0.0784%" height="15" fill="rgb(222,156,15)" fg:x="898" fg:w="1"/><text x="70.6814%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="70.4314%" y="613" width="0.0784%" height="15" fill="rgb(231,97,17)" fg:x="898" fg:w="1"/><text x="70.6814%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.55%)</title><rect x="70.0392%" y="693" width="0.5490%" height="15" fill="rgb(218,70,48)" fg:x="893" fg:w="7"/><text x="70.2892%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.47%)</title><rect x="70.1176%" y="677" width="0.4706%" height="15" fill="rgb(212,196,52)" fg:x="894" fg:w="6"/><text x="70.3676%" y="687.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="70.5098%" y="661" width="0.0784%" height="15" fill="rgb(243,203,18)" fg:x="899" fg:w="1"/><text x="70.7598%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.5098%" y="645" width="0.0784%" height="15" fill="rgb(252,125,41)" fg:x="899" fg:w="1"/><text x="70.7598%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="70.5098%" y="629" width="0.0784%" height="15" fill="rgb(223,180,33)" fg:x="899" fg:w="1"/><text x="70.7598%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.5882%" y="629" width="0.0784%" height="15" fill="rgb(254,159,46)" fg:x="900" fg:w="1"/><text x="70.8382%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (2 samples, 0.16%)</title><rect x="70.5882%" y="693" width="0.1569%" height="15" fill="rgb(254,38,10)" fg:x="900" fg:w="2"/><text x="70.8382%" y="703.50"></text></g><g><title>plugins_core::tools::set_quantity (2 samples, 0.16%)</title><rect x="70.5882%" y="677" width="0.1569%" height="15" fill="rgb(208,217,32)" fg:x="900" fg:w="2"/><text x="70.8382%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="70.5882%" y="661" width="0.1569%" height="15" fill="rgb(221,120,13)" fg:x="900" fg:w="2"/><text x="70.8382%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (2 samples, 0.16%)</title><rect x="70.5882%" y="645" width="0.1569%" height="15" fill="rgb(246,54,52)" fg:x="900" fg:w="2"/><text x="70.8382%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="70.6667%" y="629" width="0.0784%" height="15" fill="rgb(242,34,25)" fg:x="901" fg:w="1"/><text x="70.9167%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.7451%" y="629" width="0.0784%" height="15" fill="rgb(247,209,9)" fg:x="902" fg:w="1"/><text x="70.9951%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.7451%" y="613" width="0.0784%" height="15" fill="rgb(228,71,26)" fg:x="902" fg:w="1"/><text x="70.9951%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.7451%" y="597" width="0.0784%" height="15" fill="rgb(222,145,49)" fg:x="902" fg:w="1"/><text x="70.9951%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.7451%" y="581" width="0.0784%" height="15" fill="rgb(218,121,17)" fg:x="902" fg:w="1"/><text x="70.9951%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.7451%" y="565" width="0.0784%" height="15" fill="rgb(244,50,7)" fg:x="902" fg:w="1"/><text x="70.9951%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.7451%" y="549" width="0.0784%" height="15" fill="rgb(246,229,37)" fg:x="902" fg:w="1"/><text x="70.9951%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="70.7451%" y="661" width="0.1569%" height="15" fill="rgb(225,18,5)" fg:x="902" fg:w="2"/><text x="70.9951%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="70.7451%" y="645" width="0.1569%" height="15" fill="rgb(213,204,8)" fg:x="902" fg:w="2"/><text x="70.9951%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="70.8235%" y="629" width="0.0784%" height="15" fill="rgb(238,103,6)" fg:x="903" fg:w="1"/><text x="71.0735%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.8235%" y="613" width="0.0784%" height="15" fill="rgb(222,25,35)" fg:x="903" fg:w="1"/><text x="71.0735%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8235%" y="597" width="0.0784%" height="15" fill="rgb(213,203,35)" fg:x="903" fg:w="1"/><text x="71.0735%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8235%" y="581" width="0.0784%" height="15" fill="rgb(221,79,53)" fg:x="903" fg:w="1"/><text x="71.0735%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (3 samples, 0.24%)</title><rect x="70.7451%" y="693" width="0.2353%" height="15" fill="rgb(243,200,35)" fg:x="902" fg:w="3"/><text x="70.9951%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="70.7451%" y="677" width="0.2353%" height="15" fill="rgb(248,60,25)" fg:x="902" fg:w="3"/><text x="70.9951%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="70.9020%" y="661" width="0.0784%" height="15" fill="rgb(227,53,46)" fg:x="904" fg:w="1"/><text x="71.1520%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="70.9020%" y="645" width="0.0784%" height="15" fill="rgb(216,120,32)" fg:x="904" fg:w="1"/><text x="71.1520%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.9804%" y="677" width="0.0784%" height="15" fill="rgb(220,134,1)" fg:x="905" fg:w="1"/><text x="71.2304%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.9804%" y="661" width="0.0784%" height="15" fill="rgb(237,168,5)" fg:x="905" fg:w="1"/><text x="71.2304%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="70.9804%" y="645" width="0.0784%" height="15" fill="rgb(231,100,33)" fg:x="905" fg:w="1"/><text x="71.2304%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.9804%" y="629" width="0.0784%" height="15" fill="rgb(236,177,47)" fg:x="905" fg:w="1"/><text x="71.2304%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="71.1373%" y="581" width="0.0784%" height="15" fill="rgb(235,7,49)" fg:x="907" fg:w="1"/><text x="71.3873%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.1373%" y="565" width="0.0784%" height="15" fill="rgb(232,119,22)" fg:x="907" fg:w="1"/><text x="71.3873%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.1373%" y="549" width="0.0784%" height="15" fill="rgb(254,73,53)" fg:x="907" fg:w="1"/><text x="71.3873%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.1373%" y="533" width="0.0784%" height="15" fill="rgb(251,35,20)" fg:x="907" fg:w="1"/><text x="71.3873%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1373%" y="517" width="0.0784%" height="15" fill="rgb(241,119,20)" fg:x="907" fg:w="1"/><text x="71.3873%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1373%" y="501" width="0.0784%" height="15" fill="rgb(207,102,14)" fg:x="907" fg:w="1"/><text x="71.3873%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.1373%" y="485" width="0.0784%" height="15" fill="rgb(248,201,50)" fg:x="907" fg:w="1"/><text x="71.3873%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.1373%" y="469" width="0.0784%" height="15" fill="rgb(222,185,44)" fg:x="907" fg:w="1"/><text x="71.3873%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.1373%" y="453" width="0.0784%" height="15" fill="rgb(218,107,18)" fg:x="907" fg:w="1"/><text x="71.3873%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.1373%" y="437" width="0.0784%" height="15" fill="rgb(237,177,39)" fg:x="907" fg:w="1"/><text x="71.3873%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.1373%" y="421" width="0.0784%" height="15" fill="rgb(246,69,6)" fg:x="907" fg:w="1"/><text x="71.3873%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.1373%" y="405" width="0.0784%" height="15" fill="rgb(234,208,37)" fg:x="907" fg:w="1"/><text x="71.3873%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.1373%" y="389" width="0.0784%" height="15" fill="rgb(225,4,6)" fg:x="907" fg:w="1"/><text x="71.3873%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.1373%" y="373" width="0.0784%" height="15" fill="rgb(233,45,0)" fg:x="907" fg:w="1"/><text x="71.3873%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.1373%" y="357" width="0.0784%" height="15" fill="rgb(226,136,5)" fg:x="907" fg:w="1"/><text x="71.3873%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.1373%" y="341" width="0.0784%" height="15" fill="rgb(211,91,47)" fg:x="907" fg:w="1"/><text x="71.3873%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="71.1373%" y="597" width="0.2353%" height="15" fill="rgb(242,88,51)" fg:x="907" fg:w="3"/><text x="71.3873%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (2 samples, 0.16%)</title><rect x="71.2157%" y="581" width="0.1569%" height="15" fill="rgb(230,91,28)" fg:x="908" fg:w="2"/><text x="71.4657%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="71.2157%" y="565" width="0.1569%" height="15" fill="rgb(254,186,29)" fg:x="908" fg:w="2"/><text x="71.4657%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.39%)</title><rect x="71.0588%" y="677" width="0.3922%" height="15" fill="rgb(238,6,4)" fg:x="906" fg:w="5"/><text x="71.3088%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.39%)</title><rect x="71.0588%" y="661" width="0.3922%" height="15" fill="rgb(221,151,16)" fg:x="906" fg:w="5"/><text x="71.3088%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.31%)</title><rect x="71.1373%" y="645" width="0.3137%" height="15" fill="rgb(251,143,52)" fg:x="907" fg:w="4"/><text x="71.3873%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.31%)</title><rect x="71.1373%" y="629" width="0.3137%" height="15" fill="rgb(206,90,15)" fg:x="907" fg:w="4"/><text x="71.3873%" y="639.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.31%)</title><rect x="71.1373%" y="613" width="0.3137%" height="15" fill="rgb(218,35,8)" fg:x="907" fg:w="4"/><text x="71.3873%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="71.3725%" y="597" width="0.0784%" height="15" fill="rgb(239,215,6)" fg:x="910" fg:w="1"/><text x="71.6225%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="71.3725%" y="581" width="0.0784%" height="15" fill="rgb(245,116,39)" fg:x="910" fg:w="1"/><text x="71.6225%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3725%" y="565" width="0.0784%" height="15" fill="rgb(242,65,28)" fg:x="910" fg:w="1"/><text x="71.6225%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3725%" y="549" width="0.0784%" height="15" fill="rgb(252,132,53)" fg:x="910" fg:w="1"/><text x="71.6225%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3725%" y="533" width="0.0784%" height="15" fill="rgb(224,159,50)" fg:x="910" fg:w="1"/><text x="71.6225%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.3725%" y="517" width="0.0784%" height="15" fill="rgb(224,93,4)" fg:x="910" fg:w="1"/><text x="71.6225%" y="527.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.5294%" y="613" width="0.0784%" height="15" fill="rgb(208,81,34)" fg:x="912" fg:w="1"/><text x="71.7794%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.5294%" y="597" width="0.0784%" height="15" fill="rgb(233,92,54)" fg:x="912" fg:w="1"/><text x="71.7794%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.6078%" y="581" width="0.0784%" height="15" fill="rgb(237,21,14)" fg:x="913" fg:w="1"/><text x="71.8578%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="71.6863%" y="549" width="0.0784%" height="15" fill="rgb(249,128,51)" fg:x="914" fg:w="1"/><text x="71.9363%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.6863%" y="533" width="0.0784%" height="15" fill="rgb(223,129,24)" fg:x="914" fg:w="1"/><text x="71.9363%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.6863%" y="517" width="0.0784%" height="15" fill="rgb(231,168,25)" fg:x="914" fg:w="1"/><text x="71.9363%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="71.7647%" y="533" width="0.1569%" height="15" fill="rgb(224,39,20)" fg:x="915" fg:w="2"/><text x="72.0147%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="71.7647%" y="517" width="0.1569%" height="15" fill="rgb(225,152,53)" fg:x="915" fg:w="2"/><text x="72.0147%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="71.9216%" y="517" width="0.0784%" height="15" fill="rgb(252,17,24)" fg:x="917" fg:w="1"/><text x="72.1716%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.9216%" y="501" width="0.0784%" height="15" fill="rgb(250,114,30)" fg:x="917" fg:w="1"/><text x="72.1716%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.9216%" y="485" width="0.0784%" height="15" fill="rgb(229,5,4)" fg:x="917" fg:w="1"/><text x="72.1716%" y="495.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="72.0000%" y="501" width="0.0784%" height="15" fill="rgb(225,176,49)" fg:x="918" fg:w="1"/><text x="72.2500%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.0784%" y="501" width="0.0784%" height="15" fill="rgb(224,221,49)" fg:x="919" fg:w="1"/><text x="72.3284%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.0784%" y="485" width="0.0784%" height="15" fill="rgb(253,169,27)" fg:x="919" fg:w="1"/><text x="72.3284%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.0784%" y="469" width="0.0784%" height="15" fill="rgb(211,206,16)" fg:x="919" fg:w="1"/><text x="72.3284%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.0784%" y="453" width="0.0784%" height="15" fill="rgb(244,87,35)" fg:x="919" fg:w="1"/><text x="72.3284%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.1569%" y="485" width="0.0784%" height="15" fill="rgb(246,28,10)" fg:x="920" fg:w="1"/><text x="72.4069%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.1569%" y="469" width="0.0784%" height="15" fill="rgb(229,12,44)" fg:x="920" fg:w="1"/><text x="72.4069%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.1569%" y="453" width="0.0784%" height="15" fill="rgb(210,145,37)" fg:x="920" fg:w="1"/><text x="72.4069%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.1569%" y="437" width="0.0784%" height="15" fill="rgb(227,112,52)" fg:x="920" fg:w="1"/><text x="72.4069%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="72.1569%" y="421" width="0.0784%" height="15" fill="rgb(238,155,34)" fg:x="920" fg:w="1"/><text x="72.4069%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.1569%" y="405" width="0.0784%" height="15" fill="rgb(239,226,36)" fg:x="920" fg:w="1"/><text x="72.4069%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="72.1569%" y="389" width="0.0784%" height="15" fill="rgb(230,16,23)" fg:x="920" fg:w="1"/><text x="72.4069%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.2353%" y="485" width="0.0784%" height="15" fill="rgb(236,171,36)" fg:x="921" fg:w="1"/><text x="72.4853%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.2353%" y="469" width="0.0784%" height="15" fill="rgb(221,22,14)" fg:x="921" fg:w="1"/><text x="72.4853%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.71%)</title><rect x="71.6863%" y="565" width="0.7059%" height="15" fill="rgb(242,43,11)" fg:x="914" fg:w="9"/><text x="71.9363%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.63%)</title><rect x="71.7647%" y="549" width="0.6275%" height="15" fill="rgb(232,69,23)" fg:x="915" fg:w="8"/><text x="72.0147%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.47%)</title><rect x="71.9216%" y="533" width="0.4706%" height="15" fill="rgb(216,180,54)" fg:x="917" fg:w="6"/><text x="72.1716%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="72.0000%" y="517" width="0.3922%" height="15" fill="rgb(216,5,24)" fg:x="918" fg:w="5"/><text x="72.2500%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="72.1569%" y="501" width="0.2353%" height="15" fill="rgb(225,89,9)" fg:x="920" fg:w="3"/><text x="72.4069%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.3137%" y="485" width="0.0784%" height="15" fill="rgb(243,75,33)" fg:x="922" fg:w="1"/><text x="72.5637%" y="495.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="72.3922%" y="501" width="0.1569%" height="15" fill="rgb(247,141,45)" fg:x="923" fg:w="2"/><text x="72.6422%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="72.3922%" y="565" width="0.2353%" height="15" fill="rgb(232,177,36)" fg:x="923" fg:w="3"/><text x="72.6422%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="72.3922%" y="549" width="0.2353%" height="15" fill="rgb(219,125,36)" fg:x="923" fg:w="3"/><text x="72.6422%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="72.3922%" y="533" width="0.2353%" height="15" fill="rgb(227,94,9)" fg:x="923" fg:w="3"/><text x="72.6422%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="72.3922%" y="517" width="0.2353%" height="15" fill="rgb(240,34,52)" fg:x="923" fg:w="3"/><text x="72.6422%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.5490%" y="501" width="0.0784%" height="15" fill="rgb(216,45,12)" fg:x="925" fg:w="1"/><text x="72.7990%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.5490%" y="485" width="0.0784%" height="15" fill="rgb(246,21,19)" fg:x="925" fg:w="1"/><text x="72.7990%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.5490%" y="469" width="0.0784%" height="15" fill="rgb(213,98,42)" fg:x="925" fg:w="1"/><text x="72.7990%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="72.6275%" y="549" width="0.0784%" height="15" fill="rgb(250,136,47)" fg:x="926" fg:w="1"/><text x="72.8775%" y="559.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="72.6275%" y="533" width="0.0784%" height="15" fill="rgb(251,124,27)" fg:x="926" fg:w="1"/><text x="72.8775%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.6275%" y="517" width="0.0784%" height="15" fill="rgb(229,180,14)" fg:x="926" fg:w="1"/><text x="72.8775%" y="527.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.6275%" y="501" width="0.0784%" height="15" fill="rgb(245,216,25)" fg:x="926" fg:w="1"/><text x="72.8775%" y="511.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="72.6275%" y="485" width="0.0784%" height="15" fill="rgb(251,43,5)" fg:x="926" fg:w="1"/><text x="72.8775%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="72.7843%" y="469" width="0.0784%" height="15" fill="rgb(250,128,24)" fg:x="928" fg:w="1"/><text x="73.0343%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.7843%" y="453" width="0.0784%" height="15" fill="rgb(217,117,27)" fg:x="928" fg:w="1"/><text x="73.0343%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.7843%" y="437" width="0.0784%" height="15" fill="rgb(245,147,4)" fg:x="928" fg:w="1"/><text x="73.0343%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.7843%" y="421" width="0.0784%" height="15" fill="rgb(242,201,35)" fg:x="928" fg:w="1"/><text x="73.0343%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.7843%" y="405" width="0.0784%" height="15" fill="rgb(218,181,1)" fg:x="928" fg:w="1"/><text x="73.0343%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.7843%" y="389" width="0.0784%" height="15" fill="rgb(222,6,29)" fg:x="928" fg:w="1"/><text x="73.0343%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.31%)</title><rect x="72.7059%" y="501" width="0.3137%" height="15" fill="rgb(208,186,3)" fg:x="927" fg:w="4"/><text x="72.9559%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.31%)</title><rect x="72.7059%" y="485" width="0.3137%" height="15" fill="rgb(216,36,26)" fg:x="927" fg:w="4"/><text x="72.9559%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="72.8627%" y="469" width="0.1569%" height="15" fill="rgb(248,201,23)" fg:x="929" fg:w="2"/><text x="73.1127%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.9412%" y="453" width="0.0784%" height="15" fill="rgb(251,170,31)" fg:x="930" fg:w="1"/><text x="73.1912%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.9412%" y="437" width="0.0784%" height="15" fill="rgb(207,110,25)" fg:x="930" fg:w="1"/><text x="73.1912%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.9412%" y="421" width="0.0784%" height="15" fill="rgb(250,54,15)" fg:x="930" fg:w="1"/><text x="73.1912%" y="431.50"></text></g><g><title>engine::session::Session::flush (21 samples, 1.65%)</title><rect x="71.4510%" y="677" width="1.6471%" height="15" fill="rgb(227,68,33)" fg:x="911" fg:w="21"/><text x="71.7010%" y="687.50"></text></g><g><title>engine::session::Session::save_changes (20 samples, 1.57%)</title><rect x="71.5294%" y="661" width="1.5686%" height="15" fill="rgb(238,34,41)" fg:x="912" fg:w="20"/><text x="71.7794%" y="671.50"></text></g><g><title>engine::session::state::State::close (20 samples, 1.57%)</title><rect x="71.5294%" y="645" width="1.5686%" height="15" fill="rgb(220,11,15)" fg:x="912" fg:w="20"/><text x="71.7794%" y="655.50"></text></g><g><title>engine::session::state::State::flush_entities (20 samples, 1.57%)</title><rect x="71.5294%" y="629" width="1.5686%" height="15" fill="rgb(246,111,35)" fg:x="912" fg:w="20"/><text x="71.7794%" y="639.50"></text></g><g><title>core::iter::adapters::try_process (19 samples, 1.49%)</title><rect x="71.6078%" y="613" width="1.4902%" height="15" fill="rgb(209,88,53)" fg:x="913" fg:w="19"/><text x="71.8578%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 1.49%)</title><rect x="71.6078%" y="597" width="1.4902%" height="15" fill="rgb(231,185,47)" fg:x="913" fg:w="19"/><text x="71.8578%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (18 samples, 1.41%)</title><rect x="71.6863%" y="581" width="1.4118%" height="15" fill="rgb(233,154,1)" fg:x="914" fg:w="18"/><text x="71.9363%" y="591.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.47%)</title><rect x="72.6275%" y="565" width="0.4706%" height="15" fill="rgb(225,15,46)" fg:x="926" fg:w="6"/><text x="72.8775%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.39%)</title><rect x="72.7059%" y="549" width="0.3922%" height="15" fill="rgb(211,135,41)" fg:x="927" fg:w="5"/><text x="72.9559%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.39%)</title><rect x="72.7059%" y="533" width="0.3922%" height="15" fill="rgb(208,54,0)" fg:x="927" fg:w="5"/><text x="72.9559%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.39%)</title><rect x="72.7059%" y="517" width="0.3922%" height="15" fill="rgb(244,136,14)" fg:x="927" fg:w="5"/><text x="72.9559%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0196%" y="501" width="0.0784%" height="15" fill="rgb(241,56,14)" fg:x="931" fg:w="1"/><text x="73.2696%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.0980%" y="629" width="0.1569%" height="15" fill="rgb(205,80,24)" fg:x="932" fg:w="2"/><text x="73.3480%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.0980%" y="613" width="0.1569%" height="15" fill="rgb(220,57,4)" fg:x="932" fg:w="2"/><text x="73.3480%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.0980%" y="597" width="0.1569%" height="15" fill="rgb(226,193,50)" fg:x="932" fg:w="2"/><text x="73.3480%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.1765%" y="581" width="0.0784%" height="15" fill="rgb(231,168,22)" fg:x="933" fg:w="1"/><text x="73.4265%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.1765%" y="565" width="0.0784%" height="15" fill="rgb(254,215,14)" fg:x="933" fg:w="1"/><text x="73.4265%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.1765%" y="549" width="0.0784%" height="15" fill="rgb(211,115,16)" fg:x="933" fg:w="1"/><text x="73.4265%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.1765%" y="533" width="0.0784%" height="15" fill="rgb(236,210,16)" fg:x="933" fg:w="1"/><text x="73.4265%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.1765%" y="517" width="0.0784%" height="15" fill="rgb(221,94,12)" fg:x="933" fg:w="1"/><text x="73.4265%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.1765%" y="501" width="0.0784%" height="15" fill="rgb(235,218,49)" fg:x="933" fg:w="1"/><text x="73.4265%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.1765%" y="485" width="0.0784%" height="15" fill="rgb(217,114,14)" fg:x="933" fg:w="1"/><text x="73.4265%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.1765%" y="469" width="0.0784%" height="15" fill="rgb(216,145,22)" fg:x="933" fg:w="1"/><text x="73.4265%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.1765%" y="453" width="0.0784%" height="15" fill="rgb(217,112,39)" fg:x="933" fg:w="1"/><text x="73.4265%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.1765%" y="437" width="0.0784%" height="15" fill="rgb(225,85,32)" fg:x="933" fg:w="1"/><text x="73.4265%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.1765%" y="421" width="0.0784%" height="15" fill="rgb(245,209,47)" fg:x="933" fg:w="1"/><text x="73.4265%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.1765%" y="405" width="0.0784%" height="15" fill="rgb(218,220,15)" fg:x="933" fg:w="1"/><text x="73.4265%" y="415.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="73.0980%" y="661" width="0.2353%" height="15" fill="rgb(222,202,31)" fg:x="932" fg:w="3"/><text x="73.3480%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="73.0980%" y="645" width="0.2353%" height="15" fill="rgb(243,203,4)" fg:x="932" fg:w="3"/><text x="73.3480%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.2549%" y="629" width="0.0784%" height="15" fill="rgb(237,92,17)" fg:x="934" fg:w="1"/><text x="73.5049%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.2549%" y="613" width="0.0784%" height="15" fill="rgb(231,119,7)" fg:x="934" fg:w="1"/><text x="73.5049%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.3333%" y="597" width="0.0784%" height="15" fill="rgb(237,82,41)" fg:x="935" fg:w="1"/><text x="73.5833%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.47%)</title><rect x="73.0980%" y="677" width="0.4706%" height="15" fill="rgb(226,81,48)" fg:x="932" fg:w="6"/><text x="73.3480%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="73.3333%" y="661" width="0.2353%" height="15" fill="rgb(234,70,51)" fg:x="935" fg:w="3"/><text x="73.5833%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="73.3333%" y="645" width="0.2353%" height="15" fill="rgb(251,86,4)" fg:x="935" fg:w="3"/><text x="73.5833%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="73.3333%" y="629" width="0.2353%" height="15" fill="rgb(244,144,28)" fg:x="935" fg:w="3"/><text x="73.5833%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="73.3333%" y="613" width="0.2353%" height="15" fill="rgb(232,161,39)" fg:x="935" fg:w="3"/><text x="73.5833%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="73.4118%" y="597" width="0.1569%" height="15" fill="rgb(247,34,51)" fg:x="936" fg:w="2"/><text x="73.6618%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="73.4118%" y="581" width="0.1569%" height="15" fill="rgb(225,132,2)" fg:x="936" fg:w="2"/><text x="73.6618%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="73.4118%" y="565" width="0.1569%" height="15" fill="rgb(209,159,44)" fg:x="936" fg:w="2"/><text x="73.6618%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="73.4118%" y="549" width="0.1569%" height="15" fill="rgb(251,214,1)" fg:x="936" fg:w="2"/><text x="73.6618%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="73.4118%" y="533" width="0.1569%" height="15" fill="rgb(247,84,47)" fg:x="936" fg:w="2"/><text x="73.6618%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="73.4118%" y="517" width="0.1569%" height="15" fill="rgb(240,111,43)" fg:x="936" fg:w="2"/><text x="73.6618%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="73.4118%" y="501" width="0.1569%" height="15" fill="rgb(215,214,35)" fg:x="936" fg:w="2"/><text x="73.6618%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.4902%" y="485" width="0.0784%" height="15" fill="rgb(248,207,23)" fg:x="937" fg:w="1"/><text x="73.7402%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.4902%" y="469" width="0.0784%" height="15" fill="rgb(214,186,4)" fg:x="937" fg:w="1"/><text x="73.7402%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.4902%" y="453" width="0.0784%" height="15" fill="rgb(220,133,22)" fg:x="937" fg:w="1"/><text x="73.7402%" y="463.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="73.5686%" y="645" width="0.0784%" height="15" fill="rgb(239,134,19)" fg:x="938" fg:w="1"/><text x="73.8186%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="73.5686%" y="629" width="0.0784%" height="15" fill="rgb(250,140,9)" fg:x="938" fg:w="1"/><text x="73.8186%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="73.5686%" y="613" width="0.0784%" height="15" fill="rgb(225,59,14)" fg:x="938" fg:w="1"/><text x="73.8186%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.5686%" y="597" width="0.0784%" height="15" fill="rgb(214,152,51)" fg:x="938" fg:w="1"/><text x="73.8186%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="73.5686%" y="581" width="0.0784%" height="15" fill="rgb(251,227,43)" fg:x="938" fg:w="1"/><text x="73.8186%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.5686%" y="565" width="0.0784%" height="15" fill="rgb(241,96,17)" fg:x="938" fg:w="1"/><text x="73.8186%" y="575.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="73.6471%" y="629" width="0.1569%" height="15" fill="rgb(234,198,43)" fg:x="939" fg:w="2"/><text x="73.8971%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.7255%" y="613" width="0.0784%" height="15" fill="rgb(220,108,29)" fg:x="940" fg:w="1"/><text x="73.9755%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="73.7255%" y="597" width="0.0784%" height="15" fill="rgb(226,163,33)" fg:x="940" fg:w="1"/><text x="73.9755%" y="607.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="73.7255%" y="581" width="0.0784%" height="15" fill="rgb(205,194,45)" fg:x="940" fg:w="1"/><text x="73.9755%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.7255%" y="565" width="0.0784%" height="15" fill="rgb(206,143,44)" fg:x="940" fg:w="1"/><text x="73.9755%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.7255%" y="549" width="0.0784%" height="15" fill="rgb(236,136,36)" fg:x="940" fg:w="1"/><text x="73.9755%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (4 samples, 0.31%)</title><rect x="73.5686%" y="677" width="0.3137%" height="15" fill="rgb(249,172,42)" fg:x="938" fg:w="4"/><text x="73.8186%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (4 samples, 0.31%)</title><rect x="73.5686%" y="661" width="0.3137%" height="15" fill="rgb(216,139,23)" fg:x="938" fg:w="4"/><text x="73.8186%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="73.6471%" y="645" width="0.2353%" height="15" fill="rgb(207,166,20)" fg:x="939" fg:w="3"/><text x="73.8971%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="73.8039%" y="629" width="0.0784%" height="15" fill="rgb(210,209,22)" fg:x="941" fg:w="1"/><text x="74.0539%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.8039%" y="613" width="0.0784%" height="15" fill="rgb(232,118,20)" fg:x="941" fg:w="1"/><text x="74.0539%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="73.8824%" y="677" width="0.0784%" height="15" fill="rgb(238,113,42)" fg:x="942" fg:w="1"/><text x="74.1324%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="73.8824%" y="661" width="0.0784%" height="15" fill="rgb(231,42,5)" fg:x="942" fg:w="1"/><text x="74.1324%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.8824%" y="645" width="0.0784%" height="15" fill="rgb(243,166,24)" fg:x="942" fg:w="1"/><text x="74.1324%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8824%" y="629" width="0.0784%" height="15" fill="rgb(237,226,12)" fg:x="942" fg:w="1"/><text x="74.1324%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="73.9608%" y="661" width="0.0784%" height="15" fill="rgb(229,133,24)" fg:x="943" fg:w="1"/><text x="74.2108%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="73.9608%" y="645" width="0.0784%" height="15" fill="rgb(238,33,43)" fg:x="943" fg:w="1"/><text x="74.2108%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.9608%" y="629" width="0.0784%" height="15" fill="rgb(227,59,38)" fg:x="943" fg:w="1"/><text x="74.2108%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="73.9608%" y="613" width="0.0784%" height="15" fill="rgb(230,97,0)" fg:x="943" fg:w="1"/><text x="74.2108%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="74.0392%" y="661" width="0.1569%" height="15" fill="rgb(250,173,50)" fg:x="944" fg:w="2"/><text x="74.2892%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="74.0392%" y="645" width="0.1569%" height="15" fill="rgb(240,15,50)" fg:x="944" fg:w="2"/><text x="74.2892%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="74.0392%" y="629" width="0.1569%" height="15" fill="rgb(221,93,22)" fg:x="944" fg:w="2"/><text x="74.2892%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="74.1176%" y="613" width="0.0784%" height="15" fill="rgb(245,180,53)" fg:x="945" fg:w="1"/><text x="74.3676%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.1176%" y="597" width="0.0784%" height="15" fill="rgb(231,88,51)" fg:x="945" fg:w="1"/><text x="74.3676%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.1176%" y="581" width="0.0784%" height="15" fill="rgb(240,58,21)" fg:x="945" fg:w="1"/><text x="74.3676%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.1176%" y="565" width="0.0784%" height="15" fill="rgb(237,21,10)" fg:x="945" fg:w="1"/><text x="74.3676%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.1176%" y="549" width="0.0784%" height="15" fill="rgb(218,43,11)" fg:x="945" fg:w="1"/><text x="74.3676%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.1176%" y="533" width="0.0784%" height="15" fill="rgb(218,221,29)" fg:x="945" fg:w="1"/><text x="74.3676%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.1176%" y="517" width="0.0784%" height="15" fill="rgb(214,118,42)" fg:x="945" fg:w="1"/><text x="74.3676%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.1176%" y="501" width="0.0784%" height="15" fill="rgb(251,200,26)" fg:x="945" fg:w="1"/><text x="74.3676%" y="511.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="74.1961%" y="661" width="0.0784%" height="15" fill="rgb(237,101,39)" fg:x="946" fg:w="1"/><text x="74.4461%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="74.1961%" y="645" width="0.0784%" height="15" fill="rgb(251,117,11)" fg:x="946" fg:w="1"/><text x="74.4461%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.1961%" y="629" width="0.0784%" height="15" fill="rgb(216,223,23)" fg:x="946" fg:w="1"/><text x="74.4461%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.1961%" y="613" width="0.0784%" height="15" fill="rgb(251,54,12)" fg:x="946" fg:w="1"/><text x="74.4461%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="74.1961%" y="597" width="0.0784%" height="15" fill="rgb(254,176,54)" fg:x="946" fg:w="1"/><text x="74.4461%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.1961%" y="581" width="0.0784%" height="15" fill="rgb(210,32,8)" fg:x="946" fg:w="1"/><text x="74.4461%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.1961%" y="565" width="0.0784%" height="15" fill="rgb(235,52,38)" fg:x="946" fg:w="1"/><text x="74.4461%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.2745%" y="613" width="0.0784%" height="15" fill="rgb(231,4,44)" fg:x="947" fg:w="1"/><text x="74.5245%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="74.2745%" y="597" width="0.0784%" height="15" fill="rgb(249,2,32)" fg:x="947" fg:w="1"/><text x="74.5245%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.2745%" y="581" width="0.0784%" height="15" fill="rgb(224,65,26)" fg:x="947" fg:w="1"/><text x="74.5245%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.2745%" y="565" width="0.0784%" height="15" fill="rgb(250,73,40)" fg:x="947" fg:w="1"/><text x="74.5245%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.2745%" y="549" width="0.0784%" height="15" fill="rgb(253,177,16)" fg:x="947" fg:w="1"/><text x="74.5245%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.2745%" y="533" width="0.0784%" height="15" fill="rgb(217,32,34)" fg:x="947" fg:w="1"/><text x="74.5245%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.2745%" y="517" width="0.0784%" height="15" fill="rgb(212,7,10)" fg:x="947" fg:w="1"/><text x="74.5245%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.2745%" y="501" width="0.0784%" height="15" fill="rgb(245,89,8)" fg:x="947" fg:w="1"/><text x="74.5245%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.2745%" y="485" width="0.0784%" height="15" fill="rgb(237,16,53)" fg:x="947" fg:w="1"/><text x="74.5245%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.2745%" y="469" width="0.0784%" height="15" fill="rgb(250,204,30)" fg:x="947" fg:w="1"/><text x="74.5245%" y="479.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="74.2745%" y="661" width="0.1569%" height="15" fill="rgb(208,77,27)" fg:x="947" fg:w="2"/><text x="74.5245%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="74.2745%" y="645" width="0.1569%" height="15" fill="rgb(250,204,28)" fg:x="947" fg:w="2"/><text x="74.5245%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="74.2745%" y="629" width="0.1569%" height="15" fill="rgb(244,63,21)" fg:x="947" fg:w="2"/><text x="74.5245%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3529%" y="613" width="0.0784%" height="15" fill="rgb(236,85,44)" fg:x="948" fg:w="1"/><text x="74.6029%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3529%" y="597" width="0.0784%" height="15" fill="rgb(215,98,4)" fg:x="948" fg:w="1"/><text x="74.6029%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.3529%" y="581" width="0.0784%" height="15" fill="rgb(235,38,11)" fg:x="948" fg:w="1"/><text x="74.6029%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.3529%" y="565" width="0.0784%" height="15" fill="rgb(254,186,25)" fg:x="948" fg:w="1"/><text x="74.6029%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.3529%" y="549" width="0.0784%" height="15" fill="rgb(225,55,31)" fg:x="948" fg:w="1"/><text x="74.6029%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.3529%" y="533" width="0.0784%" height="15" fill="rgb(211,15,21)" fg:x="948" fg:w="1"/><text x="74.6029%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.3529%" y="517" width="0.0784%" height="15" fill="rgb(215,187,41)" fg:x="948" fg:w="1"/><text x="74.6029%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.3529%" y="501" width="0.0784%" height="15" fill="rgb(248,69,32)" fg:x="948" fg:w="1"/><text x="74.6029%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.3529%" y="485" width="0.0784%" height="15" fill="rgb(252,102,52)" fg:x="948" fg:w="1"/><text x="74.6029%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.3529%" y="469" width="0.0784%" height="15" fill="rgb(253,140,32)" fg:x="948" fg:w="1"/><text x="74.6029%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.3529%" y="453" width="0.0784%" height="15" fill="rgb(216,56,42)" fg:x="948" fg:w="1"/><text x="74.6029%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.3529%" y="437" width="0.0784%" height="15" fill="rgb(216,184,14)" fg:x="948" fg:w="1"/><text x="74.6029%" y="447.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (45 samples, 3.53%)</title><rect x="70.9804%" y="693" width="3.5294%" height="15" fill="rgb(237,187,27)" fg:x="905" fg:w="45"/><text x="71.2304%" y="703.50">plu..</text></g><g><title>plugins_core::tools::set_container (7 samples, 0.55%)</title><rect x="73.9608%" y="677" width="0.5490%" height="15" fill="rgb(219,65,3)" fg:x="943" fg:w="7"/><text x="74.2108%" y="687.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="74.4314%" y="661" width="0.0784%" height="15" fill="rgb(245,83,25)" fg:x="949" fg:w="1"/><text x="74.6814%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="74.4314%" y="645" width="0.0784%" height="15" fill="rgb(214,205,45)" fg:x="949" fg:w="1"/><text x="74.6814%" y="655.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="74.4314%" y="629" width="0.0784%" height="15" fill="rgb(241,20,18)" fg:x="949" fg:w="1"/><text x="74.6814%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="74.4314%" y="613" width="0.0784%" height="15" fill="rgb(232,163,23)" fg:x="949" fg:w="1"/><text x="74.6814%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.5098%" y="645" width="0.0784%" height="15" fill="rgb(214,5,46)" fg:x="950" fg:w="1"/><text x="74.7598%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="74.5098%" y="693" width="0.1569%" height="15" fill="rgb(229,78,17)" fg:x="950" fg:w="2"/><text x="74.7598%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="74.5098%" y="677" width="0.1569%" height="15" fill="rgb(248,89,10)" fg:x="950" fg:w="2"/><text x="74.7598%" y="687.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="74.5098%" y="661" width="0.1569%" height="15" fill="rgb(248,54,15)" fg:x="950" fg:w="2"/><text x="74.7598%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="74.5882%" y="645" width="0.0784%" height="15" fill="rgb(223,116,6)" fg:x="951" fg:w="1"/><text x="74.8382%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="74.5882%" y="629" width="0.0784%" height="15" fill="rgb(205,125,38)" fg:x="951" fg:w="1"/><text x="74.8382%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.5882%" y="613" width="0.0784%" height="15" fill="rgb(251,78,38)" fg:x="951" fg:w="1"/><text x="74.8382%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.5882%" y="597" width="0.0784%" height="15" fill="rgb(253,78,28)" fg:x="951" fg:w="1"/><text x="74.8382%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.5882%" y="581" width="0.0784%" height="15" fill="rgb(209,120,3)" fg:x="951" fg:w="1"/><text x="74.8382%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="74.6667%" y="677" width="0.0784%" height="15" fill="rgb(238,229,9)" fg:x="952" fg:w="1"/><text x="74.9167%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="74.6667%" y="661" width="0.0784%" height="15" fill="rgb(253,159,18)" fg:x="952" fg:w="1"/><text x="74.9167%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="74.6667%" y="645" width="0.0784%" height="15" fill="rgb(244,42,34)" fg:x="952" fg:w="1"/><text x="74.9167%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.8235%" y="661" width="0.0784%" height="15" fill="rgb(224,8,7)" fg:x="954" fg:w="1"/><text x="75.0735%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.9020%" y="661" width="0.0784%" height="15" fill="rgb(210,201,45)" fg:x="955" fg:w="1"/><text x="75.1520%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.9020%" y="645" width="0.0784%" height="15" fill="rgb(252,185,21)" fg:x="955" fg:w="1"/><text x="75.1520%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.9020%" y="629" width="0.0784%" height="15" fill="rgb(223,131,1)" fg:x="955" fg:w="1"/><text x="75.1520%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.9020%" y="613" width="0.0784%" height="15" fill="rgb(245,141,16)" fg:x="955" fg:w="1"/><text x="75.1520%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.9020%" y="597" width="0.0784%" height="15" fill="rgb(229,55,45)" fg:x="955" fg:w="1"/><text x="75.1520%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="74.9020%" y="581" width="0.0784%" height="15" fill="rgb(208,92,15)" fg:x="955" fg:w="1"/><text x="75.1520%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="74.9020%" y="565" width="0.0784%" height="15" fill="rgb(234,185,47)" fg:x="955" fg:w="1"/><text x="75.1520%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="74.9804%" y="629" width="0.0784%" height="15" fill="rgb(253,104,50)" fg:x="956" fg:w="1"/><text x="75.2304%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.9804%" y="613" width="0.0784%" height="15" fill="rgb(205,70,7)" fg:x="956" fg:w="1"/><text x="75.2304%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="74.9804%" y="645" width="0.2353%" height="15" fill="rgb(240,178,43)" fg:x="956" fg:w="3"/><text x="75.2304%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="75.0588%" y="629" width="0.1569%" height="15" fill="rgb(214,112,2)" fg:x="957" fg:w="2"/><text x="75.3088%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="75.0588%" y="613" width="0.1569%" height="15" fill="rgb(206,46,17)" fg:x="957" fg:w="2"/><text x="75.3088%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="75.0588%" y="597" width="0.1569%" height="15" fill="rgb(225,220,16)" fg:x="957" fg:w="2"/><text x="75.3088%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.1373%" y="581" width="0.0784%" height="15" fill="rgb(238,65,40)" fg:x="958" fg:w="1"/><text x="75.3873%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.1373%" y="565" width="0.0784%" height="15" fill="rgb(230,151,21)" fg:x="958" fg:w="1"/><text x="75.3873%" y="575.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (85 samples, 6.67%)</title><rect x="68.6275%" y="709" width="6.6667%" height="15" fill="rgb(218,58,49)" fg:x="875" fg:w="85"/><text x="68.8775%" y="719.50">&lt;tests::H..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (8 samples, 0.63%)</title><rect x="74.6667%" y="693" width="0.6275%" height="15" fill="rgb(219,179,14)" fg:x="952" fg:w="8"/><text x="74.9167%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.55%)</title><rect x="74.7451%" y="677" width="0.5490%" height="15" fill="rgb(223,72,1)" fg:x="953" fg:w="7"/><text x="74.9951%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.31%)</title><rect x="74.9804%" y="661" width="0.3137%" height="15" fill="rgb(238,126,10)" fg:x="956" fg:w="4"/><text x="75.2304%" y="671.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="75.2157%" y="645" width="0.0784%" height="15" fill="rgb(224,206,38)" fg:x="959" fg:w="1"/><text x="75.4657%" y="655.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="75.2157%" y="629" width="0.0784%" height="15" fill="rgb(212,201,54)" fg:x="959" fg:w="1"/><text x="75.4657%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="75.2941%" y="709" width="0.0784%" height="15" fill="rgb(218,154,48)" fg:x="960" fg:w="1"/><text x="75.5441%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.2941%" y="693" width="0.0784%" height="15" fill="rgb(232,93,24)" fg:x="960" fg:w="1"/><text x="75.5441%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="75.3725%" y="709" width="0.0784%" height="15" fill="rgb(245,30,21)" fg:x="961" fg:w="1"/><text x="75.6225%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.3725%" y="693" width="0.0784%" height="15" fill="rgb(242,148,29)" fg:x="961" fg:w="1"/><text x="75.6225%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.3725%" y="677" width="0.0784%" height="15" fill="rgb(244,153,54)" fg:x="961" fg:w="1"/><text x="75.6225%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.3725%" y="661" width="0.0784%" height="15" fill="rgb(252,87,22)" fg:x="961" fg:w="1"/><text x="75.6225%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.3725%" y="645" width="0.0784%" height="15" fill="rgb(210,51,29)" fg:x="961" fg:w="1"/><text x="75.6225%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.3725%" y="629" width="0.0784%" height="15" fill="rgb(242,136,47)" fg:x="961" fg:w="1"/><text x="75.6225%" y="639.50"></text></g><g><title>engine::session::Session::save_logs (1 samples, 0.08%)</title><rect x="75.5294%" y="693" width="0.0784%" height="15" fill="rgb(238,68,4)" fg:x="963" fg:w="1"/><text x="75.7794%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="75.5294%" y="677" width="0.0784%" height="15" fill="rgb(242,161,30)" fg:x="963" fg:w="1"/><text x="75.7794%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="75.6863%" y="613" width="0.0784%" height="15" fill="rgb(218,58,44)" fg:x="965" fg:w="1"/><text x="75.9363%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="75.6863%" y="597" width="0.0784%" height="15" fill="rgb(252,125,32)" fg:x="965" fg:w="1"/><text x="75.9363%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="75.6863%" y="581" width="0.0784%" height="15" fill="rgb(219,178,0)" fg:x="965" fg:w="1"/><text x="75.9363%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="75.7647%" y="597" width="0.1569%" height="15" fill="rgb(213,152,7)" fg:x="966" fg:w="2"/><text x="76.0147%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="75.7647%" y="581" width="0.1569%" height="15" fill="rgb(249,109,34)" fg:x="966" fg:w="2"/><text x="76.0147%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="75.7647%" y="565" width="0.1569%" height="15" fill="rgb(232,96,21)" fg:x="966" fg:w="2"/><text x="76.0147%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="75.7647%" y="549" width="0.1569%" height="15" fill="rgb(228,27,39)" fg:x="966" fg:w="2"/><text x="76.0147%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="75.7647%" y="533" width="0.1569%" height="15" fill="rgb(211,182,52)" fg:x="966" fg:w="2"/><text x="76.0147%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.8431%" y="517" width="0.0784%" height="15" fill="rgb(234,178,38)" fg:x="967" fg:w="1"/><text x="76.0931%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.8431%" y="501" width="0.0784%" height="15" fill="rgb(221,111,3)" fg:x="967" fg:w="1"/><text x="76.0931%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.8431%" y="485" width="0.0784%" height="15" fill="rgb(228,175,21)" fg:x="967" fg:w="1"/><text x="76.0931%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.9216%" y="565" width="0.0784%" height="15" fill="rgb(228,174,43)" fg:x="968" fg:w="1"/><text x="76.1716%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.9216%" y="549" width="0.0784%" height="15" fill="rgb(211,191,0)" fg:x="968" fg:w="1"/><text x="76.1716%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.9216%" y="533" width="0.0784%" height="15" fill="rgb(253,117,3)" fg:x="968" fg:w="1"/><text x="76.1716%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.9216%" y="517" width="0.0784%" height="15" fill="rgb(241,127,19)" fg:x="968" fg:w="1"/><text x="76.1716%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="75.9216%" y="581" width="0.2353%" height="15" fill="rgb(218,103,12)" fg:x="968" fg:w="3"/><text x="76.1716%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="76.0000%" y="565" width="0.1569%" height="15" fill="rgb(236,214,43)" fg:x="969" fg:w="2"/><text x="76.2500%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.0784%" y="549" width="0.0784%" height="15" fill="rgb(244,144,19)" fg:x="970" fg:w="1"/><text x="76.3284%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.0784%" y="533" width="0.0784%" height="15" fill="rgb(246,188,10)" fg:x="970" fg:w="1"/><text x="76.3284%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.0784%" y="517" width="0.0784%" height="15" fill="rgb(212,193,33)" fg:x="970" fg:w="1"/><text x="76.3284%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.0784%" y="501" width="0.0784%" height="15" fill="rgb(241,51,29)" fg:x="970" fg:w="1"/><text x="76.3284%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.0784%" y="485" width="0.0784%" height="15" fill="rgb(211,58,19)" fg:x="970" fg:w="1"/><text x="76.3284%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.0784%" y="469" width="0.0784%" height="15" fill="rgb(229,111,26)" fg:x="970" fg:w="1"/><text x="76.3284%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.0784%" y="453" width="0.0784%" height="15" fill="rgb(213,115,40)" fg:x="970" fg:w="1"/><text x="76.3284%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.0784%" y="437" width="0.0784%" height="15" fill="rgb(209,56,44)" fg:x="970" fg:w="1"/><text x="76.3284%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.47%)</title><rect x="75.7647%" y="613" width="0.4706%" height="15" fill="rgb(230,108,32)" fg:x="966" fg:w="6"/><text x="76.0147%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.31%)</title><rect x="75.9216%" y="597" width="0.3137%" height="15" fill="rgb(216,165,31)" fg:x="968" fg:w="4"/><text x="76.1716%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.1569%" y="581" width="0.0784%" height="15" fill="rgb(218,122,21)" fg:x="971" fg:w="1"/><text x="76.4069%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.1569%" y="565" width="0.0784%" height="15" fill="rgb(223,224,47)" fg:x="971" fg:w="1"/><text x="76.4069%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.1569%" y="549" width="0.0784%" height="15" fill="rgb(238,102,44)" fg:x="971" fg:w="1"/><text x="76.4069%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.1569%" y="533" width="0.0784%" height="15" fill="rgb(236,46,40)" fg:x="971" fg:w="1"/><text x="76.4069%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.1569%" y="517" width="0.0784%" height="15" fill="rgb(247,202,50)" fg:x="971" fg:w="1"/><text x="76.4069%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.1569%" y="501" width="0.0784%" height="15" fill="rgb(209,99,20)" fg:x="971" fg:w="1"/><text x="76.4069%" y="511.50"></text></g><g><title>burrow_bon::perms::find_acls (1 samples, 0.08%)</title><rect x="76.2353%" y="613" width="0.0784%" height="15" fill="rgb(252,27,34)" fg:x="972" fg:w="1"/><text x="76.4853%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.3137%" y="565" width="0.0784%" height="15" fill="rgb(215,206,23)" fg:x="973" fg:w="1"/><text x="76.5637%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.3137%" y="613" width="0.1569%" height="15" fill="rgb(212,135,36)" fg:x="973" fg:w="2"/><text x="76.5637%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="76.3137%" y="597" width="0.1569%" height="15" fill="rgb(240,189,1)" fg:x="973" fg:w="2"/><text x="76.5637%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.3137%" y="581" width="0.1569%" height="15" fill="rgb(242,56,20)" fg:x="973" fg:w="2"/><text x="76.5637%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.3922%" y="565" width="0.0784%" height="15" fill="rgb(247,132,33)" fg:x="974" fg:w="1"/><text x="76.6422%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.3922%" y="549" width="0.0784%" height="15" fill="rgb(208,149,11)" fg:x="974" fg:w="1"/><text x="76.6422%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.4706%" y="565" width="0.0784%" height="15" fill="rgb(211,33,11)" fg:x="975" fg:w="1"/><text x="76.7206%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.6275%" y="549" width="0.0784%" height="15" fill="rgb(221,29,38)" fg:x="977" fg:w="1"/><text x="76.8775%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.7059%" y="533" width="0.0784%" height="15" fill="rgb(206,182,49)" fg:x="978" fg:w="1"/><text x="76.9559%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.7059%" y="517" width="0.0784%" height="15" fill="rgb(216,140,1)" fg:x="978" fg:w="1"/><text x="76.9559%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="76.7843%" y="517" width="0.1569%" height="15" fill="rgb(232,57,40)" fg:x="979" fg:w="2"/><text x="77.0343%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.8627%" y="501" width="0.0784%" height="15" fill="rgb(224,186,18)" fg:x="980" fg:w="1"/><text x="77.1127%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="76.9412%" y="517" width="0.0784%" height="15" fill="rgb(215,121,11)" fg:x="981" fg:w="1"/><text x="77.1912%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.9412%" y="501" width="0.0784%" height="15" fill="rgb(245,147,10)" fg:x="981" fg:w="1"/><text x="77.1912%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.9412%" y="485" width="0.0784%" height="15" fill="rgb(238,153,13)" fg:x="981" fg:w="1"/><text x="77.1912%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.9412%" y="469" width="0.0784%" height="15" fill="rgb(233,108,0)" fg:x="981" fg:w="1"/><text x="77.1912%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.71%)</title><rect x="76.4706%" y="581" width="0.7059%" height="15" fill="rgb(212,157,17)" fg:x="975" fg:w="9"/><text x="76.7206%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.63%)</title><rect x="76.5490%" y="565" width="0.6275%" height="15" fill="rgb(225,213,38)" fg:x="976" fg:w="8"/><text x="76.7990%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="76.7059%" y="549" width="0.4706%" height="15" fill="rgb(248,16,11)" fg:x="978" fg:w="6"/><text x="76.9559%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.39%)</title><rect x="76.7843%" y="533" width="0.3922%" height="15" fill="rgb(241,33,4)" fg:x="979" fg:w="5"/><text x="77.0343%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.0196%" y="517" width="0.1569%" height="15" fill="rgb(222,26,43)" fg:x="982" fg:w="2"/><text x="77.2696%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="77.0196%" y="501" width="0.1569%" height="15" fill="rgb(243,29,36)" fg:x="982" fg:w="2"/><text x="77.2696%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.0980%" y="485" width="0.0784%" height="15" fill="rgb(241,9,27)" fg:x="983" fg:w="1"/><text x="77.3480%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (11 samples, 0.86%)</title><rect x="76.4706%" y="597" width="0.8627%" height="15" fill="rgb(205,117,26)" fg:x="975" fg:w="11"/><text x="76.7206%" y="607.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="77.1765%" y="581" width="0.1569%" height="15" fill="rgb(209,80,39)" fg:x="984" fg:w="2"/><text x="77.4265%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="77.1765%" y="565" width="0.1569%" height="15" fill="rgb(239,155,6)" fg:x="984" fg:w="2"/><text x="77.4265%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="77.2549%" y="549" width="0.0784%" height="15" fill="rgb(212,104,12)" fg:x="985" fg:w="1"/><text x="77.5049%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="77.2549%" y="533" width="0.0784%" height="15" fill="rgb(234,204,3)" fg:x="985" fg:w="1"/><text x="77.5049%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="77.2549%" y="517" width="0.0784%" height="15" fill="rgb(251,218,7)" fg:x="985" fg:w="1"/><text x="77.5049%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="77.2549%" y="501" width="0.0784%" height="15" fill="rgb(221,81,32)" fg:x="985" fg:w="1"/><text x="77.5049%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.4118%" y="565" width="0.0784%" height="15" fill="rgb(214,152,26)" fg:x="987" fg:w="1"/><text x="77.6618%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="77.4902%" y="565" width="0.0784%" height="15" fill="rgb(223,22,3)" fg:x="988" fg:w="1"/><text x="77.7402%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.4902%" y="549" width="0.0784%" height="15" fill="rgb(207,174,7)" fg:x="988" fg:w="1"/><text x="77.7402%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.4902%" y="533" width="0.0784%" height="15" fill="rgb(224,19,52)" fg:x="988" fg:w="1"/><text x="77.7402%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5686%" y="565" width="0.0784%" height="15" fill="rgb(228,24,14)" fg:x="989" fg:w="1"/><text x="77.8186%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.5686%" y="549" width="0.0784%" height="15" fill="rgb(230,153,43)" fg:x="989" fg:w="1"/><text x="77.8186%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.5686%" y="533" width="0.0784%" height="15" fill="rgb(231,106,12)" fg:x="989" fg:w="1"/><text x="77.8186%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="77.6471%" y="533" width="0.0784%" height="15" fill="rgb(215,92,2)" fg:x="990" fg:w="1"/><text x="77.8971%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="77.7255%" y="533" width="0.0784%" height="15" fill="rgb(249,143,25)" fg:x="991" fg:w="1"/><text x="77.9755%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="77.8039%" y="517" width="0.1569%" height="15" fill="rgb(252,7,35)" fg:x="992" fg:w="2"/><text x="78.0539%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="77.8039%" y="501" width="0.1569%" height="15" fill="rgb(216,69,40)" fg:x="992" fg:w="2"/><text x="78.0539%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.9608%" y="517" width="0.0784%" height="15" fill="rgb(240,36,33)" fg:x="994" fg:w="1"/><text x="78.2108%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.94%)</title><rect x="77.3333%" y="597" width="0.9412%" height="15" fill="rgb(231,128,14)" fg:x="986" fg:w="12"/><text x="77.5833%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.94%)</title><rect x="77.3333%" y="581" width="0.9412%" height="15" fill="rgb(245,143,14)" fg:x="986" fg:w="12"/><text x="77.5833%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.63%)</title><rect x="77.6471%" y="565" width="0.6275%" height="15" fill="rgb(222,130,28)" fg:x="990" fg:w="8"/><text x="77.8971%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.63%)</title><rect x="77.6471%" y="549" width="0.6275%" height="15" fill="rgb(212,10,48)" fg:x="990" fg:w="8"/><text x="77.8971%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.47%)</title><rect x="77.8039%" y="533" width="0.4706%" height="15" fill="rgb(254,118,45)" fg:x="992" fg:w="6"/><text x="78.0539%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="78.0392%" y="517" width="0.2353%" height="15" fill="rgb(228,6,45)" fg:x="995" fg:w="3"/><text x="78.2892%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="78.0392%" y="501" width="0.2353%" height="15" fill="rgb(241,18,35)" fg:x="995" fg:w="3"/><text x="78.2892%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="78.0392%" y="485" width="0.2353%" height="15" fill="rgb(227,214,53)" fg:x="995" fg:w="3"/><text x="78.2892%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.1961%" y="469" width="0.0784%" height="15" fill="rgb(224,107,51)" fg:x="997" fg:w="1"/><text x="78.4461%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.1961%" y="453" width="0.0784%" height="15" fill="rgb(248,60,28)" fg:x="997" fg:w="1"/><text x="78.4461%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="78.1961%" y="437" width="0.0784%" height="15" fill="rgb(249,101,23)" fg:x="997" fg:w="1"/><text x="78.4461%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.2745%" y="421" width="0.0784%" height="15" fill="rgb(228,51,19)" fg:x="998" fg:w="1"/><text x="78.5245%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.2745%" y="405" width="0.0784%" height="15" fill="rgb(213,20,6)" fg:x="998" fg:w="1"/><text x="78.5245%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="78.2745%" y="453" width="0.1569%" height="15" fill="rgb(212,124,10)" fg:x="998" fg:w="2"/><text x="78.5245%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.2745%" y="437" width="0.1569%" height="15" fill="rgb(248,3,40)" fg:x="998" fg:w="2"/><text x="78.5245%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.3529%" y="421" width="0.0784%" height="15" fill="rgb(223,178,23)" fg:x="999" fg:w="1"/><text x="78.6029%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.3529%" y="405" width="0.0784%" height="15" fill="rgb(240,132,45)" fg:x="999" fg:w="1"/><text x="78.6029%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="78.2745%" y="469" width="0.2353%" height="15" fill="rgb(245,164,36)" fg:x="998" fg:w="3"/><text x="78.5245%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.4314%" y="453" width="0.0784%" height="15" fill="rgb(231,188,53)" fg:x="1000" fg:w="1"/><text x="78.6814%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.4314%" y="437" width="0.0784%" height="15" fill="rgb(237,198,39)" fg:x="1000" fg:w="1"/><text x="78.6814%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.4314%" y="421" width="0.0784%" height="15" fill="rgb(223,120,35)" fg:x="1000" fg:w="1"/><text x="78.6814%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.4314%" y="405" width="0.0784%" height="15" fill="rgb(253,107,49)" fg:x="1000" fg:w="1"/><text x="78.6814%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.4314%" y="389" width="0.0784%" height="15" fill="rgb(216,44,31)" fg:x="1000" fg:w="1"/><text x="78.6814%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.31%)</title><rect x="78.2745%" y="501" width="0.3137%" height="15" fill="rgb(253,87,21)" fg:x="998" fg:w="4"/><text x="78.5245%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.31%)</title><rect x="78.2745%" y="485" width="0.3137%" height="15" fill="rgb(226,18,2)" fg:x="998" fg:w="4"/><text x="78.5245%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.5098%" y="469" width="0.0784%" height="15" fill="rgb(216,8,46)" fg:x="1001" fg:w="1"/><text x="78.7598%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.5098%" y="453" width="0.0784%" height="15" fill="rgb(226,140,39)" fg:x="1001" fg:w="1"/><text x="78.7598%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.5882%" y="501" width="0.0784%" height="15" fill="rgb(221,194,54)" fg:x="1002" fg:w="1"/><text x="78.8382%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.5882%" y="485" width="0.0784%" height="15" fill="rgb(213,92,11)" fg:x="1002" fg:w="1"/><text x="78.8382%" y="495.50"></text></g><g><title>engine::session::Session::close (42 samples, 3.29%)</title><rect x="75.4510%" y="709" width="3.2941%" height="15" fill="rgb(229,162,46)" fg:x="962" fg:w="42"/><text x="75.7010%" y="719.50">eng..</text></g><g><title>engine::session::state::State::close (40 samples, 3.14%)</title><rect x="75.6078%" y="693" width="3.1373%" height="15" fill="rgb(214,111,36)" fg:x="964" fg:w="40"/><text x="75.8578%" y="703.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (40 samples, 3.14%)</title><rect x="75.6078%" y="677" width="3.1373%" height="15" fill="rgb(207,6,21)" fg:x="964" fg:w="40"/><text x="75.8578%" y="687.50">eng..</text></g><g><title>core::iter::adapters::try_process (40 samples, 3.14%)</title><rect x="75.6078%" y="661" width="3.1373%" height="15" fill="rgb(213,127,38)" fg:x="964" fg:w="40"/><text x="75.8578%" y="671.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (40 samples, 3.14%)</title><rect x="75.6078%" y="645" width="3.1373%" height="15" fill="rgb(238,118,32)" fg:x="964" fg:w="40"/><text x="75.8578%" y="655.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (39 samples, 3.06%)</title><rect x="75.6863%" y="629" width="3.0588%" height="15" fill="rgb(240,139,39)" fg:x="965" fg:w="39"/><text x="75.9363%" y="639.50">eng..</text></g><g><title>kernel::model::any_entity_changes (29 samples, 2.27%)</title><rect x="76.4706%" y="613" width="2.2745%" height="15" fill="rgb(235,10,37)" fg:x="975" fg:w="29"/><text x="76.7206%" y="623.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.47%)</title><rect x="78.2745%" y="597" width="0.4706%" height="15" fill="rgb(249,171,38)" fg:x="998" fg:w="6"/><text x="78.5245%" y="607.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.47%)</title><rect x="78.2745%" y="581" width="0.4706%" height="15" fill="rgb(242,144,32)" fg:x="998" fg:w="6"/><text x="78.5245%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.47%)</title><rect x="78.2745%" y="565" width="0.4706%" height="15" fill="rgb(217,117,21)" fg:x="998" fg:w="6"/><text x="78.5245%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.47%)</title><rect x="78.2745%" y="549" width="0.4706%" height="15" fill="rgb(249,87,1)" fg:x="998" fg:w="6"/><text x="78.5245%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.47%)</title><rect x="78.2745%" y="533" width="0.4706%" height="15" fill="rgb(248,196,48)" fg:x="998" fg:w="6"/><text x="78.5245%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.47%)</title><rect x="78.2745%" y="517" width="0.4706%" height="15" fill="rgb(251,206,33)" fg:x="998" fg:w="6"/><text x="78.5245%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6667%" y="501" width="0.0784%" height="15" fill="rgb(232,141,28)" fg:x="1003" fg:w="1"/><text x="78.9167%" y="511.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="78.7451%" y="677" width="0.0784%" height="15" fill="rgb(209,167,14)" fg:x="1004" fg:w="1"/><text x="78.9951%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="78.7451%" y="661" width="0.0784%" height="15" fill="rgb(225,11,50)" fg:x="1004" fg:w="1"/><text x="78.9951%" y="671.50"></text></g><g><title>&lt;kernel::session::SetSession&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.8235%" y="677" width="0.0784%" height="15" fill="rgb(209,50,20)" fg:x="1005" fg:w="1"/><text x="79.0735%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="78.9020%" y="661" width="0.0784%" height="15" fill="rgb(212,17,46)" fg:x="1006" fg:w="1"/><text x="79.1520%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="78.9020%" y="645" width="0.0784%" height="15" fill="rgb(216,101,39)" fg:x="1006" fg:w="1"/><text x="79.1520%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="78.9020%" y="629" width="0.0784%" height="15" fill="rgb(212,228,48)" fg:x="1006" fg:w="1"/><text x="79.1520%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="78.9020%" y="613" width="0.0784%" height="15" fill="rgb(250,6,50)" fg:x="1006" fg:w="1"/><text x="79.1520%" y="623.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="78.9804%" y="645" width="0.0784%" height="15" fill="rgb(250,160,48)" fg:x="1007" fg:w="1"/><text x="79.2304%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="78.9804%" y="629" width="0.0784%" height="15" fill="rgb(244,216,33)" fg:x="1007" fg:w="1"/><text x="79.2304%" y="639.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="78.9804%" y="613" width="0.0784%" height="15" fill="rgb(207,157,5)" fg:x="1007" fg:w="1"/><text x="79.2304%" y="623.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (1 samples, 0.08%)</title><rect x="79.0588%" y="645" width="0.0784%" height="15" fill="rgb(228,199,8)" fg:x="1008" fg:w="1"/><text x="79.3088%" y="655.50"></text></g><g><title>tracing_core::callsite::register_dispatch (1 samples, 0.08%)</title><rect x="79.0588%" y="629" width="0.0784%" height="15" fill="rgb(227,80,20)" fg:x="1008" fg:w="1"/><text x="79.3088%" y="639.50"></text></g><g><title>tracing_core::callsite::dispatchers::Dispatchers::register_dispatch (1 samples, 0.08%)</title><rect x="79.0588%" y="613" width="0.0784%" height="15" fill="rgb(222,9,33)" fg:x="1008" fg:w="1"/><text x="79.3088%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="79.2157%" y="533" width="0.0784%" height="15" fill="rgb(239,44,28)" fg:x="1010" fg:w="1"/><text x="79.4657%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.2157%" y="517" width="0.0784%" height="15" fill="rgb(249,187,43)" fg:x="1010" fg:w="1"/><text x="79.4657%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2157%" y="501" width="0.0784%" height="15" fill="rgb(216,141,28)" fg:x="1010" fg:w="1"/><text x="79.4657%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.2157%" y="485" width="0.0784%" height="15" fill="rgb(230,154,53)" fg:x="1010" fg:w="1"/><text x="79.4657%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2157%" y="469" width="0.0784%" height="15" fill="rgb(227,82,4)" fg:x="1010" fg:w="1"/><text x="79.4657%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.2157%" y="453" width="0.0784%" height="15" fill="rgb(220,107,16)" fg:x="1010" fg:w="1"/><text x="79.4657%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.2941%" y="469" width="0.1569%" height="15" fill="rgb(207,187,2)" fg:x="1011" fg:w="2"/><text x="79.5441%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.2941%" y="453" width="0.1569%" height="15" fill="rgb(210,162,52)" fg:x="1011" fg:w="2"/><text x="79.5441%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.3725%" y="437" width="0.0784%" height="15" fill="rgb(217,216,49)" fg:x="1012" fg:w="1"/><text x="79.6225%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.3725%" y="421" width="0.0784%" height="15" fill="rgb(218,146,49)" fg:x="1012" fg:w="1"/><text x="79.6225%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.3725%" y="405" width="0.0784%" height="15" fill="rgb(216,55,40)" fg:x="1012" fg:w="1"/><text x="79.6225%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.3725%" y="389" width="0.0784%" height="15" fill="rgb(208,196,21)" fg:x="1012" fg:w="1"/><text x="79.6225%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.3725%" y="373" width="0.0784%" height="15" fill="rgb(242,117,42)" fg:x="1012" fg:w="1"/><text x="79.6225%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.3725%" y="357" width="0.0784%" height="15" fill="rgb(210,11,23)" fg:x="1012" fg:w="1"/><text x="79.6225%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.3725%" y="341" width="0.0784%" height="15" fill="rgb(217,110,2)" fg:x="1012" fg:w="1"/><text x="79.6225%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.3725%" y="325" width="0.0784%" height="15" fill="rgb(229,77,54)" fg:x="1012" fg:w="1"/><text x="79.6225%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.3725%" y="309" width="0.0784%" height="15" fill="rgb(218,53,16)" fg:x="1012" fg:w="1"/><text x="79.6225%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.3725%" y="293" width="0.0784%" height="15" fill="rgb(215,38,13)" fg:x="1012" fg:w="1"/><text x="79.6225%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.3725%" y="277" width="0.0784%" height="15" fill="rgb(235,42,18)" fg:x="1012" fg:w="1"/><text x="79.6225%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.3725%" y="261" width="0.0784%" height="15" fill="rgb(219,66,54)" fg:x="1012" fg:w="1"/><text x="79.6225%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.3725%" y="245" width="0.0784%" height="15" fill="rgb(222,205,4)" fg:x="1012" fg:w="1"/><text x="79.6225%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.3725%" y="229" width="0.0784%" height="15" fill="rgb(227,213,46)" fg:x="1012" fg:w="1"/><text x="79.6225%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.3725%" y="213" width="0.0784%" height="15" fill="rgb(250,145,42)" fg:x="1012" fg:w="1"/><text x="79.6225%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="79.4510%" y="469" width="0.0784%" height="15" fill="rgb(219,15,2)" fg:x="1013" fg:w="1"/><text x="79.7010%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.4510%" y="453" width="0.0784%" height="15" fill="rgb(231,181,52)" fg:x="1013" fg:w="1"/><text x="79.7010%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="79.6078%" y="373" width="0.0784%" height="15" fill="rgb(235,1,42)" fg:x="1015" fg:w="1"/><text x="79.8578%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.6078%" y="357" width="0.0784%" height="15" fill="rgb(249,88,27)" fg:x="1015" fg:w="1"/><text x="79.8578%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="79.6078%" y="341" width="0.0784%" height="15" fill="rgb(235,145,16)" fg:x="1015" fg:w="1"/><text x="79.8578%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="79.6078%" y="325" width="0.0784%" height="15" fill="rgb(237,114,19)" fg:x="1015" fg:w="1"/><text x="79.8578%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="79.6078%" y="309" width="0.0784%" height="15" fill="rgb(238,51,50)" fg:x="1015" fg:w="1"/><text x="79.8578%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="79.5294%" y="469" width="0.2353%" height="15" fill="rgb(205,194,25)" fg:x="1014" fg:w="3"/><text x="79.7794%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="79.5294%" y="453" width="0.2353%" height="15" fill="rgb(215,203,17)" fg:x="1014" fg:w="3"/><text x="79.7794%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="79.5294%" y="437" width="0.2353%" height="15" fill="rgb(233,112,49)" fg:x="1014" fg:w="3"/><text x="79.7794%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="79.6078%" y="421" width="0.1569%" height="15" fill="rgb(241,130,26)" fg:x="1015" fg:w="2"/><text x="79.8578%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="79.6078%" y="405" width="0.1569%" height="15" fill="rgb(252,223,19)" fg:x="1015" fg:w="2"/><text x="79.8578%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="79.6078%" y="389" width="0.1569%" height="15" fill="rgb(211,95,25)" fg:x="1015" fg:w="2"/><text x="79.8578%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.6863%" y="373" width="0.0784%" height="15" fill="rgb(251,182,27)" fg:x="1016" fg:w="1"/><text x="79.9363%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.6863%" y="357" width="0.0784%" height="15" fill="rgb(238,24,4)" fg:x="1016" fg:w="1"/><text x="79.9363%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="79.6863%" y="341" width="0.0784%" height="15" fill="rgb(224,220,25)" fg:x="1016" fg:w="1"/><text x="79.9363%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="79.6863%" y="325" width="0.0784%" height="15" fill="rgb(239,133,26)" fg:x="1016" fg:w="1"/><text x="79.9363%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="79.6863%" y="309" width="0.0784%" height="15" fill="rgb(211,94,48)" fg:x="1016" fg:w="1"/><text x="79.9363%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.6863%" y="293" width="0.0784%" height="15" fill="rgb(239,87,6)" fg:x="1016" fg:w="1"/><text x="79.9363%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.6863%" y="277" width="0.0784%" height="15" fill="rgb(227,62,0)" fg:x="1016" fg:w="1"/><text x="79.9363%" y="287.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (8 samples, 0.63%)</title><rect x="79.2941%" y="533" width="0.6275%" height="15" fill="rgb(211,226,4)" fg:x="1011" fg:w="8"/><text x="79.5441%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.63%)</title><rect x="79.2941%" y="517" width="0.6275%" height="15" fill="rgb(253,38,52)" fg:x="1011" fg:w="8"/><text x="79.5441%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.63%)</title><rect x="79.2941%" y="501" width="0.6275%" height="15" fill="rgb(229,126,40)" fg:x="1011" fg:w="8"/><text x="79.5441%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.63%)</title><rect x="79.2941%" y="485" width="0.6275%" height="15" fill="rgb(229,165,44)" fg:x="1011" fg:w="8"/><text x="79.5441%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="79.7647%" y="469" width="0.1569%" height="15" fill="rgb(247,95,47)" fg:x="1017" fg:w="2"/><text x="80.0147%" y="479.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="79.7647%" y="453" width="0.1569%" height="15" fill="rgb(216,140,30)" fg:x="1017" fg:w="2"/><text x="80.0147%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="79.7647%" y="437" width="0.1569%" height="15" fill="rgb(246,214,8)" fg:x="1017" fg:w="2"/><text x="80.0147%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="79.7647%" y="421" width="0.1569%" height="15" fill="rgb(227,224,15)" fg:x="1017" fg:w="2"/><text x="80.0147%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="79.7647%" y="405" width="0.1569%" height="15" fill="rgb(233,175,4)" fg:x="1017" fg:w="2"/><text x="80.0147%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="79.7647%" y="389" width="0.1569%" height="15" fill="rgb(221,66,45)" fg:x="1017" fg:w="2"/><text x="80.0147%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="79.7647%" y="373" width="0.1569%" height="15" fill="rgb(221,178,18)" fg:x="1017" fg:w="2"/><text x="80.0147%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="79.7647%" y="357" width="0.1569%" height="15" fill="rgb(213,81,29)" fg:x="1017" fg:w="2"/><text x="80.0147%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.8431%" y="341" width="0.0784%" height="15" fill="rgb(220,89,49)" fg:x="1018" fg:w="1"/><text x="80.0931%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.8431%" y="325" width="0.0784%" height="15" fill="rgb(227,60,33)" fg:x="1018" fg:w="1"/><text x="80.0931%" y="335.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="79.8431%" y="309" width="0.0784%" height="15" fill="rgb(205,113,12)" fg:x="1018" fg:w="1"/><text x="80.0931%" y="319.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (10 samples, 0.78%)</title><rect x="79.2157%" y="565" width="0.7843%" height="15" fill="rgb(211,32,1)" fg:x="1010" fg:w="10"/><text x="79.4657%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (10 samples, 0.78%)</title><rect x="79.2157%" y="549" width="0.7843%" height="15" fill="rgb(246,2,12)" fg:x="1010" fg:w="10"/><text x="79.4657%" y="559.50"></text></g><g><title>plugins_core::finding::DefaultFinder::find_top_container (1 samples, 0.08%)</title><rect x="79.9216%" y="533" width="0.0784%" height="15" fill="rgb(243,37,27)" fg:x="1019" fg:w="1"/><text x="80.1716%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="79.9216%" y="517" width="0.0784%" height="15" fill="rgb(248,211,31)" fg:x="1019" fg:w="1"/><text x="80.1716%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="80.0784%" y="453" width="0.0784%" height="15" fill="rgb(242,146,47)" fg:x="1021" fg:w="1"/><text x="80.3284%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="80.2353%" y="325" width="0.1569%" height="15" fill="rgb(206,70,20)" fg:x="1023" fg:w="2"/><text x="80.4853%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.3922%" y="325" width="0.0784%" height="15" fill="rgb(215,10,51)" fg:x="1025" fg:w="1"/><text x="80.6422%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="80.4706%" y="309" width="0.0784%" height="15" fill="rgb(243,178,53)" fg:x="1026" fg:w="1"/><text x="80.7206%" y="319.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="80.5490%" y="309" width="0.0784%" height="15" fill="rgb(233,221,20)" fg:x="1027" fg:w="1"/><text x="80.7990%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.5490%" y="293" width="0.0784%" height="15" fill="rgb(218,95,35)" fg:x="1027" fg:w="1"/><text x="80.7990%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.5490%" y="277" width="0.0784%" height="15" fill="rgb(229,13,5)" fg:x="1027" fg:w="1"/><text x="80.7990%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::end (1 samples, 0.08%)</title><rect x="80.7059%" y="293" width="0.0784%" height="15" fill="rgb(252,164,30)" fg:x="1029" fg:w="1"/><text x="80.9559%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.7059%" y="277" width="0.0784%" height="15" fill="rgb(232,68,36)" fg:x="1029" fg:w="1"/><text x="80.9559%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.7059%" y="261" width="0.0784%" height="15" fill="rgb(219,59,54)" fg:x="1029" fg:w="1"/><text x="80.9559%" y="271.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (8 samples, 0.63%)</title><rect x="80.2353%" y="373" width="0.6275%" height="15" fill="rgb(250,92,33)" fg:x="1023" fg:w="8"/><text x="80.4853%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (8 samples, 0.63%)</title><rect x="80.2353%" y="357" width="0.6275%" height="15" fill="rgb(229,162,54)" fg:x="1023" fg:w="8"/><text x="80.4853%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.63%)</title><rect x="80.2353%" y="341" width="0.6275%" height="15" fill="rgb(244,114,52)" fg:x="1023" fg:w="8"/><text x="80.4853%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.39%)</title><rect x="80.4706%" y="325" width="0.3922%" height="15" fill="rgb(212,211,43)" fg:x="1026" fg:w="5"/><text x="80.7206%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (3 samples, 0.24%)</title><rect x="80.6275%" y="309" width="0.2353%" height="15" fill="rgb(226,147,8)" fg:x="1028" fg:w="3"/><text x="80.8775%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.7843%" y="293" width="0.0784%" height="15" fill="rgb(226,23,13)" fg:x="1030" fg:w="1"/><text x="81.0343%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="80.7843%" y="277" width="0.0784%" height="15" fill="rgb(240,63,4)" fg:x="1030" fg:w="1"/><text x="81.0343%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="80.7843%" y="261" width="0.0784%" height="15" fill="rgb(221,1,32)" fg:x="1030" fg:w="1"/><text x="81.0343%" y="271.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (9 samples, 0.71%)</title><rect x="80.2353%" y="389" width="0.7059%" height="15" fill="rgb(242,117,10)" fg:x="1023" fg:w="9"/><text x="80.4853%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="80.8627%" y="373" width="0.0784%" height="15" fill="rgb(249,172,44)" fg:x="1031" fg:w="1"/><text x="81.1127%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.8627%" y="357" width="0.0784%" height="15" fill="rgb(244,46,45)" fg:x="1031" fg:w="1"/><text x="81.1127%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.8627%" y="341" width="0.0784%" height="15" fill="rgb(206,43,17)" fg:x="1031" fg:w="1"/><text x="81.1127%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.9412%" y="357" width="0.0784%" height="15" fill="rgb(239,218,39)" fg:x="1032" fg:w="1"/><text x="81.1912%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="80.9412%" y="341" width="0.0784%" height="15" fill="rgb(208,169,54)" fg:x="1032" fg:w="1"/><text x="81.1912%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.9412%" y="325" width="0.0784%" height="15" fill="rgb(247,25,42)" fg:x="1032" fg:w="1"/><text x="81.1912%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.0196%" y="309" width="0.0784%" height="15" fill="rgb(226,23,31)" fg:x="1033" fg:w="1"/><text x="81.2696%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.0196%" y="293" width="0.0784%" height="15" fill="rgb(247,16,28)" fg:x="1033" fg:w="1"/><text x="81.2696%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="81.0196%" y="325" width="0.1569%" height="15" fill="rgb(231,147,38)" fg:x="1033" fg:w="2"/><text x="81.2696%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.0980%" y="309" width="0.0784%" height="15" fill="rgb(253,81,48)" fg:x="1034" fg:w="1"/><text x="81.3480%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.0980%" y="293" width="0.0784%" height="15" fill="rgb(249,222,43)" fg:x="1034" fg:w="1"/><text x="81.3480%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="81.0980%" y="277" width="0.0784%" height="15" fill="rgb(221,3,27)" fg:x="1034" fg:w="1"/><text x="81.3480%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="81.0980%" y="261" width="0.0784%" height="15" fill="rgb(228,180,5)" fg:x="1034" fg:w="1"/><text x="81.3480%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="81.0980%" y="245" width="0.0784%" height="15" fill="rgb(227,131,42)" fg:x="1034" fg:w="1"/><text x="81.3480%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.0980%" y="229" width="0.0784%" height="15" fill="rgb(212,3,39)" fg:x="1034" fg:w="1"/><text x="81.3480%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.0980%" y="213" width="0.0784%" height="15" fill="rgb(226,45,5)" fg:x="1034" fg:w="1"/><text x="81.3480%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="81.0980%" y="197" width="0.0784%" height="15" fill="rgb(215,167,45)" fg:x="1034" fg:w="1"/><text x="81.3480%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.1765%" y="325" width="0.0784%" height="15" fill="rgb(250,218,53)" fg:x="1035" fg:w="1"/><text x="81.4265%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.3333%" y="261" width="0.0784%" height="15" fill="rgb(207,140,0)" fg:x="1037" fg:w="1"/><text x="81.5833%" y="271.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (6 samples, 0.47%)</title><rect x="81.0196%" y="357" width="0.4706%" height="15" fill="rgb(238,133,51)" fg:x="1033" fg:w="6"/><text x="81.2696%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.47%)</title><rect x="81.0196%" y="341" width="0.4706%" height="15" fill="rgb(218,203,53)" fg:x="1033" fg:w="6"/><text x="81.2696%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="81.2549%" y="325" width="0.2353%" height="15" fill="rgb(226,184,25)" fg:x="1036" fg:w="3"/><text x="81.5049%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="81.2549%" y="309" width="0.2353%" height="15" fill="rgb(231,121,21)" fg:x="1036" fg:w="3"/><text x="81.5049%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="81.3333%" y="293" width="0.1569%" height="15" fill="rgb(251,14,34)" fg:x="1037" fg:w="2"/><text x="81.5833%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="81.3333%" y="277" width="0.1569%" height="15" fill="rgb(249,193,11)" fg:x="1037" fg:w="2"/><text x="81.5833%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.4118%" y="261" width="0.0784%" height="15" fill="rgb(220,172,37)" fg:x="1038" fg:w="1"/><text x="81.6618%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.4118%" y="245" width="0.0784%" height="15" fill="rgb(231,229,43)" fg:x="1038" fg:w="1"/><text x="81.6618%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.4902%" y="357" width="0.0784%" height="15" fill="rgb(250,161,5)" fg:x="1039" fg:w="1"/><text x="81.7402%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="81.4902%" y="341" width="0.0784%" height="15" fill="rgb(218,225,18)" fg:x="1039" fg:w="1"/><text x="81.7402%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.4902%" y="325" width="0.0784%" height="15" fill="rgb(245,45,42)" fg:x="1039" fg:w="1"/><text x="81.7402%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.5686%" y="341" width="0.0784%" height="15" fill="rgb(211,115,1)" fg:x="1040" fg:w="1"/><text x="81.8186%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.5686%" y="325" width="0.0784%" height="15" fill="rgb(248,133,52)" fg:x="1040" fg:w="1"/><text x="81.8186%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.5686%" y="309" width="0.0784%" height="15" fill="rgb(238,100,21)" fg:x="1040" fg:w="1"/><text x="81.8186%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.5686%" y="293" width="0.0784%" height="15" fill="rgb(247,144,11)" fg:x="1040" fg:w="1"/><text x="81.8186%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="81.5686%" y="277" width="0.0784%" height="15" fill="rgb(206,164,16)" fg:x="1040" fg:w="1"/><text x="81.8186%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="81.5686%" y="261" width="0.0784%" height="15" fill="rgb(222,34,3)" fg:x="1040" fg:w="1"/><text x="81.8186%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="81.5686%" y="245" width="0.0784%" height="15" fill="rgb(248,82,4)" fg:x="1040" fg:w="1"/><text x="81.8186%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="81.5686%" y="229" width="0.0784%" height="15" fill="rgb(228,81,46)" fg:x="1040" fg:w="1"/><text x="81.8186%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="81.5686%" y="213" width="0.0784%" height="15" fill="rgb(227,67,47)" fg:x="1040" fg:w="1"/><text x="81.8186%" y="223.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="81.6471%" y="341" width="0.0784%" height="15" fill="rgb(215,93,53)" fg:x="1041" fg:w="1"/><text x="81.8971%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.31%)</title><rect x="81.5686%" y="357" width="0.3137%" height="15" fill="rgb(248,194,39)" fg:x="1040" fg:w="4"/><text x="81.8186%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="81.7255%" y="341" width="0.1569%" height="15" fill="rgb(215,5,19)" fg:x="1042" fg:w="2"/><text x="81.9755%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="81.7255%" y="325" width="0.1569%" height="15" fill="rgb(226,215,51)" fg:x="1042" fg:w="2"/><text x="81.9755%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="81.7255%" y="309" width="0.1569%" height="15" fill="rgb(225,56,26)" fg:x="1042" fg:w="2"/><text x="81.9755%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="81.7255%" y="293" width="0.1569%" height="15" fill="rgb(222,75,29)" fg:x="1042" fg:w="2"/><text x="81.9755%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.8039%" y="277" width="0.0784%" height="15" fill="rgb(236,139,6)" fg:x="1043" fg:w="1"/><text x="82.0539%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.8039%" y="261" width="0.0784%" height="15" fill="rgb(223,137,36)" fg:x="1043" fg:w="1"/><text x="82.0539%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.8824%" y="325" width="0.0784%" height="15" fill="rgb(226,99,2)" fg:x="1044" fg:w="1"/><text x="82.1324%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.9608%" y="325" width="0.0784%" height="15" fill="rgb(206,133,23)" fg:x="1045" fg:w="1"/><text x="82.2108%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="81.8824%" y="341" width="0.2353%" height="15" fill="rgb(243,173,15)" fg:x="1044" fg:w="3"/><text x="82.1324%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.0392%" y="325" width="0.0784%" height="15" fill="rgb(228,69,28)" fg:x="1046" fg:w="1"/><text x="82.2892%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.0392%" y="309" width="0.0784%" height="15" fill="rgb(212,51,22)" fg:x="1046" fg:w="1"/><text x="82.2892%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="82.0392%" y="293" width="0.0784%" height="15" fill="rgb(227,113,0)" fg:x="1046" fg:w="1"/><text x="82.2892%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.0392%" y="277" width="0.0784%" height="15" fill="rgb(252,84,27)" fg:x="1046" fg:w="1"/><text x="82.2892%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.0392%" y="261" width="0.0784%" height="15" fill="rgb(223,145,39)" fg:x="1046" fg:w="1"/><text x="82.2892%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::gid (4 samples, 0.31%)</title><rect x="81.8824%" y="357" width="0.3137%" height="15" fill="rgb(239,219,30)" fg:x="1044" fg:w="4"/><text x="82.1324%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.1176%" y="341" width="0.0784%" height="15" fill="rgb(224,196,39)" fg:x="1047" fg:w="1"/><text x="82.3676%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="82.1961%" y="277" width="0.0784%" height="15" fill="rgb(205,35,43)" fg:x="1048" fg:w="1"/><text x="82.4461%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.1961%" y="261" width="0.0784%" height="15" fill="rgb(228,201,21)" fg:x="1048" fg:w="1"/><text x="82.4461%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="82.1961%" y="245" width="0.0784%" height="15" fill="rgb(237,118,16)" fg:x="1048" fg:w="1"/><text x="82.4461%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="82.1961%" y="229" width="0.0784%" height="15" fill="rgb(241,17,19)" fg:x="1048" fg:w="1"/><text x="82.4461%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="82.1961%" y="213" width="0.0784%" height="15" fill="rgb(214,10,25)" fg:x="1048" fg:w="1"/><text x="82.4461%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="82.1961%" y="197" width="0.0784%" height="15" fill="rgb(238,37,29)" fg:x="1048" fg:w="1"/><text x="82.4461%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="82.1961%" y="181" width="0.0784%" height="15" fill="rgb(253,83,25)" fg:x="1048" fg:w="1"/><text x="82.4461%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="82.2745%" y="277" width="0.0784%" height="15" fill="rgb(234,192,12)" fg:x="1049" fg:w="1"/><text x="82.5245%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.71%)</title><rect x="82.5098%" y="213" width="0.7059%" height="15" fill="rgb(241,216,45)" fg:x="1052" fg:w="9"/><text x="82.7598%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.71%)</title><rect x="82.5098%" y="197" width="0.7059%" height="15" fill="rgb(242,22,33)" fg:x="1052" fg:w="9"/><text x="82.7598%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.1373%" y="181" width="0.0784%" height="15" fill="rgb(231,105,49)" fg:x="1060" fg:w="1"/><text x="83.3873%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="83.2157%" y="213" width="0.2353%" height="15" fill="rgb(218,204,15)" fg:x="1061" fg:w="3"/><text x="83.4657%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="83.2157%" y="197" width="0.2353%" height="15" fill="rgb(235,138,41)" fg:x="1061" fg:w="3"/><text x="83.4657%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="83.3725%" y="181" width="0.0784%" height="15" fill="rgb(246,0,9)" fg:x="1063" fg:w="1"/><text x="83.6225%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="83.6078%" y="149" width="0.1569%" height="15" fill="rgb(210,74,4)" fg:x="1066" fg:w="2"/><text x="83.8578%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.7647%" y="149" width="0.0784%" height="15" fill="rgb(250,60,41)" fg:x="1068" fg:w="1"/><text x="84.0147%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.8431%" y="117" width="0.0784%" height="15" fill="rgb(220,115,12)" fg:x="1069" fg:w="1"/><text x="84.0931%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.8431%" y="101" width="0.0784%" height="15" fill="rgb(237,100,13)" fg:x="1069" fg:w="1"/><text x="84.0931%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.8431%" y="85" width="0.0784%" height="15" fill="rgb(213,55,26)" fg:x="1069" fg:w="1"/><text x="84.0931%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="83.8431%" y="149" width="0.1569%" height="15" fill="rgb(216,17,4)" fg:x="1069" fg:w="2"/><text x="84.0931%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="83.8431%" y="133" width="0.1569%" height="15" fill="rgb(220,153,47)" fg:x="1069" fg:w="2"/><text x="84.0931%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="83.9216%" y="117" width="0.0784%" height="15" fill="rgb(215,131,9)" fg:x="1070" fg:w="1"/><text x="84.1716%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="83.9216%" y="101" width="0.0784%" height="15" fill="rgb(233,46,42)" fg:x="1070" fg:w="1"/><text x="84.1716%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.9216%" y="85" width="0.0784%" height="15" fill="rgb(226,86,7)" fg:x="1070" fg:w="1"/><text x="84.1716%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.9216%" y="69" width="0.0784%" height="15" fill="rgb(239,226,21)" fg:x="1070" fg:w="1"/><text x="84.1716%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.9216%" y="53" width="0.0784%" height="15" fill="rgb(244,137,22)" fg:x="1070" fg:w="1"/><text x="84.1716%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (37 samples, 2.90%)</title><rect x="84.0000%" y="149" width="2.9020%" height="15" fill="rgb(211,139,35)" fg:x="1071" fg:w="37"/><text x="84.2500%" y="159.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (37 samples, 2.90%)</title><rect x="84.0000%" y="133" width="2.9020%" height="15" fill="rgb(214,62,50)" fg:x="1071" fg:w="37"/><text x="84.2500%" y="143.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (37 samples, 2.90%)</title><rect x="84.0000%" y="117" width="2.9020%" height="15" fill="rgb(212,113,44)" fg:x="1071" fg:w="37"/><text x="84.2500%" y="127.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 3.61%)</title><rect x="83.4510%" y="197" width="3.6078%" height="15" fill="rgb(226,150,43)" fg:x="1064" fg:w="46"/><text x="83.7010%" y="207.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (46 samples, 3.61%)</title><rect x="83.4510%" y="181" width="3.6078%" height="15" fill="rgb(250,71,37)" fg:x="1064" fg:w="46"/><text x="83.7010%" y="191.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (46 samples, 3.61%)</title><rect x="83.4510%" y="165" width="3.6078%" height="15" fill="rgb(219,76,19)" fg:x="1064" fg:w="46"/><text x="83.7010%" y="175.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="86.9020%" y="149" width="0.1569%" height="15" fill="rgb(250,39,11)" fg:x="1108" fg:w="2"/><text x="87.1520%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="87.0588%" y="197" width="0.0784%" height="15" fill="rgb(230,64,31)" fg:x="1110" fg:w="1"/><text x="87.3088%" y="207.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="87.1373%" y="181" width="0.0784%" height="15" fill="rgb(208,222,23)" fg:x="1111" fg:w="1"/><text x="87.3873%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.2157%" y="181" width="0.0784%" height="15" fill="rgb(227,125,18)" fg:x="1112" fg:w="1"/><text x="87.4657%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="87.2941%" y="181" width="0.0784%" height="15" fill="rgb(234,210,9)" fg:x="1113" fg:w="1"/><text x="87.5441%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="87.3725%" y="181" width="0.0784%" height="15" fill="rgb(217,127,24)" fg:x="1114" fg:w="1"/><text x="87.6225%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.39%)</title><rect x="87.1373%" y="197" width="0.3922%" height="15" fill="rgb(239,141,48)" fg:x="1111" fg:w="5"/><text x="87.3873%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="87.4510%" y="181" width="0.0784%" height="15" fill="rgb(227,109,8)" fg:x="1115" fg:w="1"/><text x="87.7010%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="87.5294%" y="197" width="0.0784%" height="15" fill="rgb(235,184,23)" fg:x="1116" fg:w="1"/><text x="87.7794%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="87.5294%" y="181" width="0.0784%" height="15" fill="rgb(227,226,48)" fg:x="1116" fg:w="1"/><text x="87.7794%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (67 samples, 5.25%)</title><rect x="82.5098%" y="229" width="5.2549%" height="15" fill="rgb(206,150,11)" fg:x="1052" fg:w="67"/><text x="82.7598%" y="239.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (55 samples, 4.31%)</title><rect x="83.4510%" y="213" width="4.3137%" height="15" fill="rgb(254,2,33)" fg:x="1064" fg:w="55"/><text x="83.7010%" y="223.50">regex..</text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.16%)</title><rect x="87.6078%" y="197" width="0.1569%" height="15" fill="rgb(243,160,20)" fg:x="1117" fg:w="2"/><text x="87.8578%" y="207.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="87.6863%" y="181" width="0.0784%" height="15" fill="rgb(218,208,30)" fg:x="1118" fg:w="1"/><text x="87.9363%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="87.6863%" y="165" width="0.0784%" height="15" fill="rgb(224,120,49)" fg:x="1118" fg:w="1"/><text x="87.9363%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="87.7647%" y="229" width="0.1569%" height="15" fill="rgb(246,12,2)" fg:x="1119" fg:w="2"/><text x="88.0147%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="87.7647%" y="213" width="0.1569%" height="15" fill="rgb(236,117,3)" fg:x="1119" fg:w="2"/><text x="88.0147%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="87.7647%" y="197" width="0.1569%" height="15" fill="rgb(216,128,52)" fg:x="1119" fg:w="2"/><text x="88.0147%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="87.8431%" y="181" width="0.0784%" height="15" fill="rgb(246,145,19)" fg:x="1120" fg:w="1"/><text x="88.0931%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.8431%" y="165" width="0.0784%" height="15" fill="rgb(222,11,46)" fg:x="1120" fg:w="1"/><text x="88.0931%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.8431%" y="149" width="0.0784%" height="15" fill="rgb(245,82,36)" fg:x="1120" fg:w="1"/><text x="88.0931%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.8431%" y="133" width="0.0784%" height="15" fill="rgb(250,73,51)" fg:x="1120" fg:w="1"/><text x="88.0931%" y="143.50"></text></g><g><title>regex::regex::string::Regex::new (72 samples, 5.65%)</title><rect x="82.3529%" y="277" width="5.6471%" height="15" fill="rgb(221,189,23)" fg:x="1050" fg:w="72"/><text x="82.6029%" y="287.50">regex::..</text></g><g><title>regex::builders::string::RegexBuilder::build (72 samples, 5.65%)</title><rect x="82.3529%" y="261" width="5.6471%" height="15" fill="rgb(210,33,7)" fg:x="1050" fg:w="72"/><text x="82.6029%" y="271.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (71 samples, 5.57%)</title><rect x="82.4314%" y="245" width="5.5686%" height="15" fill="rgb(210,107,22)" fg:x="1051" fg:w="71"/><text x="82.6814%" y="255.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="87.9216%" y="229" width="0.0784%" height="15" fill="rgb(222,116,37)" fg:x="1121" fg:w="1"/><text x="88.1716%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="87.9216%" y="213" width="0.0784%" height="15" fill="rgb(254,17,48)" fg:x="1121" fg:w="1"/><text x="88.1716%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="87.9216%" y="197" width="0.0784%" height="15" fill="rgb(224,36,32)" fg:x="1121" fg:w="1"/><text x="88.1716%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="87.9216%" y="181" width="0.0784%" height="15" fill="rgb(232,90,46)" fg:x="1121" fg:w="1"/><text x="88.1716%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.9216%" y="165" width="0.0784%" height="15" fill="rgb(241,66,40)" fg:x="1121" fg:w="1"/><text x="88.1716%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.9216%" y="149" width="0.0784%" height="15" fill="rgb(249,184,29)" fg:x="1121" fg:w="1"/><text x="88.1716%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.9216%" y="133" width="0.0784%" height="15" fill="rgb(231,181,1)" fg:x="1121" fg:w="1"/><text x="88.1716%" y="143.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.31%)</title><rect x="88.0000%" y="213" width="0.3137%" height="15" fill="rgb(224,94,2)" fg:x="1122" fg:w="4"/><text x="88.2500%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.39%)</title><rect x="88.0000%" y="229" width="0.3922%" height="15" fill="rgb(229,170,15)" fg:x="1122" fg:w="5"/><text x="88.2500%" y="239.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="88.3137%" y="213" width="0.0784%" height="15" fill="rgb(240,127,35)" fg:x="1126" fg:w="1"/><text x="88.5637%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.3137%" y="197" width="0.0784%" height="15" fill="rgb(248,196,34)" fg:x="1126" fg:w="1"/><text x="88.5637%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.3137%" y="181" width="0.0784%" height="15" fill="rgb(236,137,7)" fg:x="1126" fg:w="1"/><text x="88.5637%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.3137%" y="165" width="0.0784%" height="15" fill="rgb(235,127,16)" fg:x="1126" fg:w="1"/><text x="88.5637%" y="175.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (80 samples, 6.27%)</title><rect x="82.1961%" y="293" width="6.2745%" height="15" fill="rgb(250,192,54)" fg:x="1048" fg:w="80"/><text x="82.4461%" y="303.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.47%)</title><rect x="88.0000%" y="277" width="0.4706%" height="15" fill="rgb(218,98,20)" fg:x="1122" fg:w="6"/><text x="88.2500%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.47%)</title><rect x="88.0000%" y="261" width="0.4706%" height="15" fill="rgb(230,176,47)" fg:x="1122" fg:w="6"/><text x="88.2500%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.47%)</title><rect x="88.0000%" y="245" width="0.4706%" height="15" fill="rgb(244,2,33)" fg:x="1122" fg:w="6"/><text x="88.2500%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="88.3922%" y="229" width="0.0784%" height="15" fill="rgb(231,100,17)" fg:x="1127" fg:w="1"/><text x="88.6422%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="88.3922%" y="213" width="0.0784%" height="15" fill="rgb(245,23,12)" fg:x="1127" fg:w="1"/><text x="88.6422%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.3922%" y="197" width="0.0784%" height="15" fill="rgb(249,55,22)" fg:x="1127" fg:w="1"/><text x="88.6422%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="88.4706%" y="245" width="0.0784%" height="15" fill="rgb(207,134,9)" fg:x="1128" fg:w="1"/><text x="88.7206%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="88.4706%" y="229" width="0.0784%" height="15" fill="rgb(218,134,0)" fg:x="1128" fg:w="1"/><text x="88.7206%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.4706%" y="213" width="0.0784%" height="15" fill="rgb(213,212,33)" fg:x="1128" fg:w="1"/><text x="88.7206%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="88.4706%" y="277" width="0.1569%" height="15" fill="rgb(252,106,18)" fg:x="1128" fg:w="2"/><text x="88.7206%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="88.4706%" y="261" width="0.1569%" height="15" fill="rgb(208,126,42)" fg:x="1128" fg:w="2"/><text x="88.7206%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="88.5490%" y="245" width="0.0784%" height="15" fill="rgb(246,175,29)" fg:x="1129" fg:w="1"/><text x="88.7990%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="88.5490%" y="229" width="0.0784%" height="15" fill="rgb(215,13,50)" fg:x="1129" fg:w="1"/><text x="88.7990%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.5490%" y="213" width="0.0784%" height="15" fill="rgb(216,172,15)" fg:x="1129" fg:w="1"/><text x="88.7990%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="88.6275%" y="261" width="0.0784%" height="15" fill="rgb(212,103,13)" fg:x="1130" fg:w="1"/><text x="88.8775%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="88.6275%" y="245" width="0.0784%" height="15" fill="rgb(231,171,36)" fg:x="1130" fg:w="1"/><text x="88.8775%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="88.6275%" y="229" width="0.0784%" height="15" fill="rgb(250,123,20)" fg:x="1130" fg:w="1"/><text x="88.8775%" y="239.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (2 samples, 0.16%)</title><rect x="88.6275%" y="277" width="0.1569%" height="15" fill="rgb(212,53,50)" fg:x="1130" fg:w="2"/><text x="88.8775%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="88.7059%" y="261" width="0.0784%" height="15" fill="rgb(243,54,12)" fg:x="1131" fg:w="1"/><text x="88.9559%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="88.7059%" y="245" width="0.0784%" height="15" fill="rgb(234,101,34)" fg:x="1131" fg:w="1"/><text x="88.9559%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="88.7059%" y="229" width="0.0784%" height="15" fill="rgb(254,67,22)" fg:x="1131" fg:w="1"/><text x="88.9559%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::Cache::new (1 samples, 0.08%)</title><rect x="88.7059%" y="213" width="0.0784%" height="15" fill="rgb(250,35,47)" fg:x="1131" fg:w="1"/><text x="88.9559%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.7059%" y="197" width="0.0784%" height="15" fill="rgb(226,126,38)" fg:x="1131" fg:w="1"/><text x="88.9559%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.7059%" y="181" width="0.0784%" height="15" fill="rgb(216,138,53)" fg:x="1131" fg:w="1"/><text x="88.9559%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.8627%" y="229" width="0.0784%" height="15" fill="rgb(246,199,43)" fg:x="1133" fg:w="1"/><text x="89.1127%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.9412%" y="229" width="0.0784%" height="15" fill="rgb(232,125,11)" fg:x="1134" fg:w="1"/><text x="89.1912%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="89.0196%" y="229" width="0.1569%" height="15" fill="rgb(218,219,45)" fg:x="1135" fg:w="2"/><text x="89.2696%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="89.0196%" y="213" width="0.1569%" height="15" fill="rgb(216,102,54)" fg:x="1135" fg:w="2"/><text x="89.2696%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="89.0980%" y="197" width="0.0784%" height="15" fill="rgb(250,228,7)" fg:x="1136" fg:w="1"/><text x="89.3480%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.0980%" y="181" width="0.0784%" height="15" fill="rgb(226,125,25)" fg:x="1136" fg:w="1"/><text x="89.3480%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.0980%" y="165" width="0.0784%" height="15" fill="rgb(224,165,27)" fg:x="1136" fg:w="1"/><text x="89.3480%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.3333%" y="197" width="0.0784%" height="15" fill="rgb(233,86,3)" fg:x="1139" fg:w="1"/><text x="89.5833%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.71%)</title><rect x="89.2549%" y="213" width="0.7059%" height="15" fill="rgb(228,116,20)" fg:x="1138" fg:w="9"/><text x="89.5049%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.55%)</title><rect x="89.4118%" y="197" width="0.5490%" height="15" fill="rgb(209,192,17)" fg:x="1140" fg:w="7"/><text x="89.6618%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.8824%" y="181" width="0.0784%" height="15" fill="rgb(224,88,34)" fg:x="1146" fg:w="1"/><text x="90.1324%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="90.0392%" y="197" width="0.0784%" height="15" fill="rgb(233,38,6)" fg:x="1148" fg:w="1"/><text x="90.2892%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.31%)</title><rect x="89.9608%" y="213" width="0.3137%" height="15" fill="rgb(212,59,30)" fg:x="1147" fg:w="4"/><text x="90.2108%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="90.1176%" y="197" width="0.1569%" height="15" fill="rgb(213,80,3)" fg:x="1149" fg:w="2"/><text x="90.3676%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="90.1176%" y="181" width="0.1569%" height="15" fill="rgb(251,178,7)" fg:x="1149" fg:w="2"/><text x="90.3676%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="90.2745%" y="181" width="0.1569%" height="15" fill="rgb(213,154,26)" fg:x="1151" fg:w="2"/><text x="90.5245%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="90.2745%" y="165" width="0.1569%" height="15" fill="rgb(238,165,49)" fg:x="1151" fg:w="2"/><text x="90.5245%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="90.2745%" y="149" width="0.1569%" height="15" fill="rgb(248,91,46)" fg:x="1151" fg:w="2"/><text x="90.5245%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (4 samples, 0.31%)</title><rect x="90.2745%" y="213" width="0.3137%" height="15" fill="rgb(244,21,52)" fg:x="1151" fg:w="4"/><text x="90.5245%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (4 samples, 0.31%)</title><rect x="90.2745%" y="197" width="0.3137%" height="15" fill="rgb(247,122,20)" fg:x="1151" fg:w="4"/><text x="90.5245%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="90.4314%" y="181" width="0.1569%" height="15" fill="rgb(218,27,9)" fg:x="1153" fg:w="2"/><text x="90.6814%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="90.4314%" y="165" width="0.1569%" height="15" fill="rgb(246,7,6)" fg:x="1153" fg:w="2"/><text x="90.6814%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="90.4314%" y="149" width="0.1569%" height="15" fill="rgb(227,135,54)" fg:x="1153" fg:w="2"/><text x="90.6814%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="90.6667%" y="117" width="0.0784%" height="15" fill="rgb(247,14,11)" fg:x="1156" fg:w="1"/><text x="90.9167%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.6667%" y="101" width="0.0784%" height="15" fill="rgb(206,149,34)" fg:x="1156" fg:w="1"/><text x="90.9167%" y="111.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="91.0588%" y="101" width="0.1569%" height="15" fill="rgb(227,228,4)" fg:x="1161" fg:w="2"/><text x="91.3088%" y="111.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="91.2157%" y="101" width="0.1569%" height="15" fill="rgb(238,218,28)" fg:x="1163" fg:w="2"/><text x="91.4657%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="91.3725%" y="101" width="0.1569%" height="15" fill="rgb(252,86,40)" fg:x="1165" fg:w="2"/><text x="91.6225%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="91.5294%" y="101" width="0.0784%" height="15" fill="rgb(251,225,11)" fg:x="1167" fg:w="1"/><text x="91.7794%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.39%)</title><rect x="91.6078%" y="101" width="0.3922%" height="15" fill="rgb(206,46,49)" fg:x="1168" fg:w="5"/><text x="91.8578%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.31%)</title><rect x="91.6863%" y="85" width="0.3137%" height="15" fill="rgb(245,128,24)" fg:x="1169" fg:w="4"/><text x="91.9363%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="91.8431%" y="69" width="0.1569%" height="15" fill="rgb(219,177,34)" fg:x="1171" fg:w="2"/><text x="92.0931%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.9216%" y="53" width="0.0784%" height="15" fill="rgb(218,60,48)" fg:x="1172" fg:w="1"/><text x="92.1716%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="92.0000%" y="85" width="0.1569%" height="15" fill="rgb(221,11,5)" fg:x="1173" fg:w="2"/><text x="92.2500%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.0784%" y="69" width="0.0784%" height="15" fill="rgb(220,148,13)" fg:x="1174" fg:w="1"/><text x="92.3284%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.0784%" y="53" width="0.0784%" height="15" fill="rgb(210,16,3)" fg:x="1174" fg:w="1"/><text x="92.3284%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.0784%" y="37" width="0.0784%" height="15" fill="rgb(236,80,2)" fg:x="1174" fg:w="1"/><text x="92.3284%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (32 samples, 2.51%)</title><rect x="92.0000%" y="101" width="2.5098%" height="15" fill="rgb(239,129,19)" fg:x="1173" fg:w="32"/><text x="92.2500%" y="111.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (30 samples, 2.35%)</title><rect x="92.1569%" y="85" width="2.3529%" height="15" fill="rgb(220,106,35)" fg:x="1175" fg:w="30"/><text x="92.4069%" y="95.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (30 samples, 2.35%)</title><rect x="92.1569%" y="69" width="2.3529%" height="15" fill="rgb(252,139,45)" fg:x="1175" fg:w="30"/><text x="92.4069%" y="79.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="94.5098%" y="101" width="0.0784%" height="15" fill="rgb(229,8,36)" fg:x="1205" fg:w="1"/><text x="94.7598%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 4.16%)</title><rect x="90.5882%" y="197" width="4.1569%" height="15" fill="rgb(230,126,33)" fg:x="1155" fg:w="53"/><text x="90.8382%" y="207.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (53 samples, 4.16%)</title><rect x="90.5882%" y="181" width="4.1569%" height="15" fill="rgb(239,140,21)" fg:x="1155" fg:w="53"/><text x="90.8382%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (53 samples, 4.16%)</title><rect x="90.5882%" y="165" width="4.1569%" height="15" fill="rgb(254,104,9)" fg:x="1155" fg:w="53"/><text x="90.8382%" y="175.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (53 samples, 4.16%)</title><rect x="90.5882%" y="149" width="4.1569%" height="15" fill="rgb(239,52,14)" fg:x="1155" fg:w="53"/><text x="90.8382%" y="159.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (53 samples, 4.16%)</title><rect x="90.5882%" y="133" width="4.1569%" height="15" fill="rgb(208,227,44)" fg:x="1155" fg:w="53"/><text x="90.8382%" y="143.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (51 samples, 4.00%)</title><rect x="90.7451%" y="117" width="4.0000%" height="15" fill="rgb(246,18,19)" fg:x="1157" fg:w="51"/><text x="90.9951%" y="127.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="94.5882%" y="101" width="0.1569%" height="15" fill="rgb(235,228,25)" fg:x="1206" fg:w="2"/><text x="94.8382%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.5882%" y="85" width="0.1569%" height="15" fill="rgb(240,156,20)" fg:x="1206" fg:w="2"/><text x="94.8382%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.5882%" y="69" width="0.1569%" height="15" fill="rgb(224,8,20)" fg:x="1206" fg:w="2"/><text x="94.8382%" y="79.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="94.5882%" y="53" width="0.1569%" height="15" fill="rgb(214,12,52)" fg:x="1206" fg:w="2"/><text x="94.8382%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="94.9020%" y="181" width="0.0784%" height="15" fill="rgb(211,220,47)" fg:x="1210" fg:w="1"/><text x="95.1520%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (76 samples, 5.96%)</title><rect x="89.1765%" y="229" width="5.9608%" height="15" fill="rgb(250,173,5)" fg:x="1137" fg:w="76"/><text x="89.4265%" y="239.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (58 samples, 4.55%)</title><rect x="90.5882%" y="213" width="4.5490%" height="15" fill="rgb(250,125,52)" fg:x="1155" fg:w="58"/><text x="90.8382%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.39%)</title><rect x="94.7451%" y="197" width="0.3922%" height="15" fill="rgb(209,133,18)" fg:x="1208" fg:w="5"/><text x="94.9951%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="94.9804%" y="181" width="0.1569%" height="15" fill="rgb(216,173,22)" fg:x="1211" fg:w="2"/><text x="95.2304%" y="191.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="95.0588%" y="165" width="0.0784%" height="15" fill="rgb(205,3,22)" fg:x="1212" fg:w="1"/><text x="95.3088%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.0588%" y="149" width="0.0784%" height="15" fill="rgb(248,22,20)" fg:x="1212" fg:w="1"/><text x="95.3088%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.0588%" y="133" width="0.0784%" height="15" fill="rgb(233,6,29)" fg:x="1212" fg:w="1"/><text x="95.3088%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="95.1373%" y="229" width="0.0784%" height="15" fill="rgb(240,22,54)" fg:x="1213" fg:w="1"/><text x="95.3873%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="95.1373%" y="213" width="0.0784%" height="15" fill="rgb(231,133,32)" fg:x="1213" fg:w="1"/><text x="95.3873%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.1373%" y="197" width="0.0784%" height="15" fill="rgb(248,193,4)" fg:x="1213" fg:w="1"/><text x="95.3873%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.1373%" y="181" width="0.0784%" height="15" fill="rgb(211,178,46)" fg:x="1213" fg:w="1"/><text x="95.3873%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="95.2157%" y="197" width="0.0784%" height="15" fill="rgb(224,5,42)" fg:x="1214" fg:w="1"/><text x="95.4657%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="95.2157%" y="181" width="0.0784%" height="15" fill="rgb(239,176,25)" fg:x="1214" fg:w="1"/><text x="95.4657%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="95.2157%" y="165" width="0.0784%" height="15" fill="rgb(245,187,50)" fg:x="1214" fg:w="1"/><text x="95.4657%" y="175.50"></text></g><g><title>indefinite::rules::number::Number::check (88 samples, 6.90%)</title><rect x="88.4706%" y="293" width="6.9020%" height="15" fill="rgb(248,24,15)" fg:x="1128" fg:w="88"/><text x="88.7206%" y="303.50">indefinit..</text></g><g><title>regex::regex::string::Regex::new (84 samples, 6.59%)</title><rect x="88.7843%" y="277" width="6.5882%" height="15" fill="rgb(205,166,13)" fg:x="1132" fg:w="84"/><text x="89.0343%" y="287.50">regex::re..</text></g><g><title>regex::builders::string::RegexBuilder::build (84 samples, 6.59%)</title><rect x="88.7843%" y="261" width="6.5882%" height="15" fill="rgb(208,114,23)" fg:x="1132" fg:w="84"/><text x="89.0343%" y="271.50">regex::bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (83 samples, 6.51%)</title><rect x="88.8627%" y="245" width="6.5098%" height="15" fill="rgb(239,127,18)" fg:x="1133" fg:w="83"/><text x="89.1127%" y="255.50">regex_aut..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="95.2157%" y="229" width="0.1569%" height="15" fill="rgb(219,154,28)" fg:x="1214" fg:w="2"/><text x="95.4657%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="95.2157%" y="213" width="0.1569%" height="15" fill="rgb(225,157,23)" fg:x="1214" fg:w="2"/><text x="95.4657%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.2941%" y="197" width="0.0784%" height="15" fill="rgb(219,8,6)" fg:x="1215" fg:w="1"/><text x="95.5441%" y="207.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::pop (1 samples, 0.08%)</title><rect x="95.2941%" y="181" width="0.0784%" height="15" fill="rgb(212,47,6)" fg:x="1215" fg:w="1"/><text x="95.5441%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="95.3725%" y="261" width="0.0784%" height="15" fill="rgb(224,190,4)" fg:x="1216" fg:w="1"/><text x="95.6225%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="95.3725%" y="245" width="0.0784%" height="15" fill="rgb(239,183,29)" fg:x="1216" fg:w="1"/><text x="95.6225%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="95.3725%" y="229" width="0.0784%" height="15" fill="rgb(213,57,7)" fg:x="1216" fg:w="1"/><text x="95.6225%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="95.3725%" y="213" width="0.0784%" height="15" fill="rgb(216,148,1)" fg:x="1216" fg:w="1"/><text x="95.6225%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="95.4510%" y="261" width="0.0784%" height="15" fill="rgb(236,182,29)" fg:x="1217" fg:w="1"/><text x="95.7010%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="95.4510%" y="245" width="0.0784%" height="15" fill="rgb(244,120,48)" fg:x="1217" fg:w="1"/><text x="95.7010%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.4510%" y="229" width="0.0784%" height="15" fill="rgb(206,71,34)" fg:x="1217" fg:w="1"/><text x="95.7010%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="95.4510%" y="213" width="0.0784%" height="15" fill="rgb(242,32,6)" fg:x="1217" fg:w="1"/><text x="95.7010%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="95.5294%" y="213" width="0.0784%" height="15" fill="rgb(241,35,3)" fg:x="1218" fg:w="1"/><text x="95.7794%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.5294%" y="197" width="0.0784%" height="15" fill="rgb(222,62,19)" fg:x="1218" fg:w="1"/><text x="95.7794%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="95.6863%" y="197" width="0.1569%" height="15" fill="rgb(223,110,41)" fg:x="1220" fg:w="2"/><text x="95.9363%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="95.6863%" y="181" width="0.1569%" height="15" fill="rgb(208,224,4)" fg:x="1220" fg:w="2"/><text x="95.9363%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (5 samples, 0.39%)</title><rect x="95.6078%" y="213" width="0.3922%" height="15" fill="rgb(241,137,19)" fg:x="1219" fg:w="5"/><text x="95.8578%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.16%)</title><rect x="95.8431%" y="197" width="0.1569%" height="15" fill="rgb(244,24,17)" fg:x="1222" fg:w="2"/><text x="96.0931%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="95.8431%" y="181" width="0.1569%" height="15" fill="rgb(245,178,49)" fg:x="1222" fg:w="2"/><text x="96.0931%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="95.8431%" y="165" width="0.1569%" height="15" fill="rgb(219,160,38)" fg:x="1222" fg:w="2"/><text x="96.0931%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="95.8431%" y="149" width="0.1569%" height="15" fill="rgb(228,137,14)" fg:x="1222" fg:w="2"/><text x="96.0931%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="95.9216%" y="133" width="0.0784%" height="15" fill="rgb(237,134,11)" fg:x="1223" fg:w="1"/><text x="96.1716%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="96.0784%" y="165" width="0.0784%" height="15" fill="rgb(211,126,44)" fg:x="1225" fg:w="1"/><text x="96.3284%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="96.0784%" y="149" width="0.0784%" height="15" fill="rgb(226,171,33)" fg:x="1225" fg:w="1"/><text x="96.3284%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="96.0784%" y="133" width="0.0784%" height="15" fill="rgb(253,99,13)" fg:x="1225" fg:w="1"/><text x="96.3284%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.31%)</title><rect x="96.0000%" y="213" width="0.3137%" height="15" fill="rgb(244,48,7)" fg:x="1224" fg:w="4"/><text x="96.2500%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.31%)</title><rect x="96.0000%" y="197" width="0.3137%" height="15" fill="rgb(244,217,54)" fg:x="1224" fg:w="4"/><text x="96.2500%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.31%)</title><rect x="96.0000%" y="181" width="0.3137%" height="15" fill="rgb(224,15,18)" fg:x="1224" fg:w="4"/><text x="96.2500%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="96.1569%" y="165" width="0.1569%" height="15" fill="rgb(244,99,12)" fg:x="1226" fg:w="2"/><text x="96.4069%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="96.1569%" y="149" width="0.1569%" height="15" fill="rgb(233,226,8)" fg:x="1226" fg:w="2"/><text x="96.4069%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="96.1569%" y="133" width="0.1569%" height="15" fill="rgb(229,211,3)" fg:x="1226" fg:w="2"/><text x="96.4069%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="96.1569%" y="117" width="0.1569%" height="15" fill="rgb(216,140,21)" fg:x="1226" fg:w="2"/><text x="96.4069%" y="127.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="96.3137%" y="181" width="0.0784%" height="15" fill="rgb(234,122,30)" fg:x="1228" fg:w="1"/><text x="96.5637%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (12 samples, 0.94%)</title><rect x="95.5294%" y="261" width="0.9412%" height="15" fill="rgb(236,25,46)" fg:x="1218" fg:w="12"/><text x="95.7794%" y="271.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (12 samples, 0.94%)</title><rect x="95.5294%" y="245" width="0.9412%" height="15" fill="rgb(217,52,54)" fg:x="1218" fg:w="12"/><text x="95.7794%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (12 samples, 0.94%)</title><rect x="95.5294%" y="229" width="0.9412%" height="15" fill="rgb(222,29,26)" fg:x="1218" fg:w="12"/><text x="95.7794%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="96.3137%" y="213" width="0.1569%" height="15" fill="rgb(216,177,29)" fg:x="1228" fg:w="2"/><text x="96.5637%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="96.3137%" y="197" width="0.1569%" height="15" fill="rgb(247,136,51)" fg:x="1228" fg:w="2"/><text x="96.5637%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="96.3922%" y="181" width="0.0784%" height="15" fill="rgb(231,47,47)" fg:x="1229" fg:w="1"/><text x="96.6422%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.5490%" y="181" width="0.0784%" height="15" fill="rgb(211,192,36)" fg:x="1231" fg:w="1"/><text x="96.7990%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.5490%" y="165" width="0.0784%" height="15" fill="rgb(229,156,32)" fg:x="1231" fg:w="1"/><text x="96.7990%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.5490%" y="149" width="0.0784%" height="15" fill="rgb(248,213,20)" fg:x="1231" fg:w="1"/><text x="96.7990%" y="159.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="96.5490%" y="213" width="0.1569%" height="15" fill="rgb(217,64,7)" fg:x="1231" fg:w="2"/><text x="96.7990%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="96.5490%" y="197" width="0.1569%" height="15" fill="rgb(232,142,8)" fg:x="1231" fg:w="2"/><text x="96.7990%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="96.6275%" y="181" width="0.0784%" height="15" fill="rgb(224,92,44)" fg:x="1232" fg:w="1"/><text x="96.8775%" y="191.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (18 samples, 1.41%)</title><rect x="95.3725%" y="277" width="1.4118%" height="15" fill="rgb(214,169,17)" fg:x="1216" fg:w="18"/><text x="95.6225%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.31%)</title><rect x="96.4706%" y="261" width="0.3137%" height="15" fill="rgb(210,59,37)" fg:x="1230" fg:w="4"/><text x="96.7206%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.31%)</title><rect x="96.4706%" y="245" width="0.3137%" height="15" fill="rgb(214,116,48)" fg:x="1230" fg:w="4"/><text x="96.7206%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.31%)</title><rect x="96.4706%" y="229" width="0.3137%" height="15" fill="rgb(244,191,6)" fg:x="1230" fg:w="4"/><text x="96.7206%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="96.7059%" y="213" width="0.0784%" height="15" fill="rgb(241,50,52)" fg:x="1233" fg:w="1"/><text x="96.9559%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="96.7059%" y="197" width="0.0784%" height="15" fill="rgb(236,75,39)" fg:x="1233" fg:w="1"/><text x="96.9559%" y="207.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (203 samples, 15.92%)</title><rect x="80.9412%" y="373" width="15.9216%" height="15" fill="rgb(236,99,0)" fg:x="1032" fg:w="203"/><text x="81.1912%" y="383.50">&lt;&amp;kernel::model::EntityP..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (187 samples, 14.67%)</title><rect x="82.1961%" y="357" width="14.6667%" height="15" fill="rgb(207,202,15)" fg:x="1048" fg:w="187"/><text x="82.4461%" y="367.50">plugins_core::looking:..</text></g><g><title>indefinite::indefinite (187 samples, 14.67%)</title><rect x="82.1961%" y="341" width="14.6667%" height="15" fill="rgb(233,207,14)" fg:x="1048" fg:w="187"/><text x="82.4461%" y="351.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (187 samples, 14.67%)</title><rect x="82.1961%" y="325" width="14.6667%" height="15" fill="rgb(226,27,51)" fg:x="1048" fg:w="187"/><text x="82.4461%" y="335.50">indefinite::methods::i..</text></g><g><title>indefinite::methods::apply_rules (187 samples, 14.67%)</title><rect x="82.1961%" y="309" width="14.6667%" height="15" fill="rgb(206,104,42)" fg:x="1048" fg:w="187"/><text x="82.4461%" y="319.50">indefinite::methods::a..</text></g><g><title>indefinite::rules::other::Other::run (19 samples, 1.49%)</title><rect x="95.3725%" y="293" width="1.4902%" height="15" fill="rgb(212,225,4)" fg:x="1216" fg:w="19"/><text x="95.6225%" y="303.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="96.7843%" y="277" width="0.0784%" height="15" fill="rgb(233,96,42)" fg:x="1234" fg:w="1"/><text x="97.0343%" y="287.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="96.8627%" y="373" width="0.2353%" height="15" fill="rgb(229,21,32)" fg:x="1235" fg:w="3"/><text x="97.1127%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="96.9412%" y="357" width="0.1569%" height="15" fill="rgb(226,216,24)" fg:x="1236" fg:w="2"/><text x="97.1912%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.9412%" y="341" width="0.1569%" height="15" fill="rgb(221,163,17)" fg:x="1236" fg:w="2"/><text x="97.1912%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.0196%" y="325" width="0.0784%" height="15" fill="rgb(216,216,42)" fg:x="1237" fg:w="1"/><text x="97.2696%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.0196%" y="309" width="0.0784%" height="15" fill="rgb(240,118,7)" fg:x="1237" fg:w="1"/><text x="97.2696%" y="319.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="97.0980%" y="341" width="0.0784%" height="15" fill="rgb(221,67,37)" fg:x="1238" fg:w="1"/><text x="97.3480%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.0980%" y="325" width="0.0784%" height="15" fill="rgb(241,32,44)" fg:x="1238" fg:w="1"/><text x="97.3480%" y="335.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (2 samples, 0.16%)</title><rect x="97.0980%" y="357" width="0.1569%" height="15" fill="rgb(235,204,43)" fg:x="1238" fg:w="2"/><text x="97.3480%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="97.1765%" y="341" width="0.0784%" height="15" fill="rgb(213,116,10)" fg:x="1239" fg:w="1"/><text x="97.4265%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.1765%" y="325" width="0.0784%" height="15" fill="rgb(239,15,48)" fg:x="1239" fg:w="1"/><text x="97.4265%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1765%" y="309" width="0.0784%" height="15" fill="rgb(207,123,36)" fg:x="1239" fg:w="1"/><text x="97.4265%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.1765%" y="293" width="0.0784%" height="15" fill="rgb(209,103,30)" fg:x="1239" fg:w="1"/><text x="97.4265%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1765%" y="277" width="0.0784%" height="15" fill="rgb(238,100,19)" fg:x="1239" fg:w="1"/><text x="97.4265%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.1765%" y="261" width="0.0784%" height="15" fill="rgb(244,30,14)" fg:x="1239" fg:w="1"/><text x="97.4265%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.1765%" y="245" width="0.0784%" height="15" fill="rgb(249,174,6)" fg:x="1239" fg:w="1"/><text x="97.4265%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.2549%" y="229" width="0.0784%" height="15" fill="rgb(235,213,41)" fg:x="1240" fg:w="1"/><text x="97.5049%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.31%)</title><rect x="97.0980%" y="373" width="0.3137%" height="15" fill="rgb(213,118,6)" fg:x="1238" fg:w="4"/><text x="97.3480%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (2 samples, 0.16%)</title><rect x="97.2549%" y="357" width="0.1569%" height="15" fill="rgb(235,44,51)" fg:x="1240" fg:w="2"/><text x="97.5049%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="97.2549%" y="341" width="0.1569%" height="15" fill="rgb(217,9,53)" fg:x="1240" fg:w="2"/><text x="97.5049%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="97.2549%" y="325" width="0.1569%" height="15" fill="rgb(237,172,34)" fg:x="1240" fg:w="2"/><text x="97.5049%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="97.2549%" y="309" width="0.1569%" height="15" fill="rgb(206,206,11)" fg:x="1240" fg:w="2"/><text x="97.5049%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="97.2549%" y="293" width="0.1569%" height="15" fill="rgb(214,149,29)" fg:x="1240" fg:w="2"/><text x="97.5049%" y="303.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="97.2549%" y="277" width="0.1569%" height="15" fill="rgb(208,123,3)" fg:x="1240" fg:w="2"/><text x="97.5049%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.2549%" y="261" width="0.1569%" height="15" fill="rgb(229,126,4)" fg:x="1240" fg:w="2"/><text x="97.5049%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.2549%" y="245" width="0.1569%" height="15" fill="rgb(222,92,36)" fg:x="1240" fg:w="2"/><text x="97.5049%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.3333%" y="229" width="0.0784%" height="15" fill="rgb(216,39,41)" fg:x="1241" fg:w="1"/><text x="97.5833%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.3333%" y="213" width="0.0784%" height="15" fill="rgb(253,127,28)" fg:x="1241" fg:w="1"/><text x="97.5833%" y="223.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (223 samples, 17.49%)</title><rect x="80.0000%" y="533" width="17.4902%" height="15" fill="rgb(249,152,51)" fg:x="1020" fg:w="223"/><text x="80.2500%" y="543.50">kernel::plugins::mw::Middle..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (223 samples, 17.49%)</title><rect x="80.0000%" y="517" width="17.4902%" height="15" fill="rgb(209,123,42)" fg:x="1020" fg:w="223"/><text x="80.2500%" y="527.50">&lt;plugins_dynlib::DynamicMid..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (222 samples, 17.41%)</title><rect x="80.0784%" y="501" width="17.4118%" height="15" fill="rgb(241,118,22)" fg:x="1021" fg:w="222"/><text x="80.3284%" y="511.50">kernel::plugins::mw::Middle..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (222 samples, 17.41%)</title><rect x="80.0784%" y="485" width="17.4118%" height="15" fill="rgb(208,25,7)" fg:x="1021" fg:w="222"/><text x="80.3284%" y="495.50">core::ops::function::FnOnce..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (222 samples, 17.41%)</title><rect x="80.0784%" y="469" width="17.4118%" height="15" fill="rgb(243,144,39)" fg:x="1021" fg:w="222"/><text x="80.3284%" y="479.50">kernel::plugins::mw::Middle..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (221 samples, 17.33%)</title><rect x="80.1569%" y="453" width="17.3333%" height="15" fill="rgb(250,50,5)" fg:x="1022" fg:w="221"/><text x="80.4069%" y="463.50">core::ops::function::FnOnce..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (221 samples, 17.33%)</title><rect x="80.1569%" y="437" width="17.3333%" height="15" fill="rgb(207,67,11)" fg:x="1022" fg:w="221"/><text x="80.4069%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as ..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (221 samples, 17.33%)</title><rect x="80.1569%" y="421" width="17.3333%" height="15" fill="rgb(245,204,40)" fg:x="1022" fg:w="221"/><text x="80.4069%" y="431.50">&lt;engine::session::state::St..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (221 samples, 17.33%)</title><rect x="80.1569%" y="405" width="17.3333%" height="15" fill="rgb(238,228,24)" fg:x="1022" fg:w="221"/><text x="80.4069%" y="415.50">&lt;plugins_core::looking::act..</text></g><g><title>plugins_core::looking::model::new_area_observation (211 samples, 16.55%)</title><rect x="80.9412%" y="389" width="16.5490%" height="15" fill="rgb(217,116,22)" fg:x="1032" fg:w="211"/><text x="81.1912%" y="399.50">plugins_core::looking::mod..</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="97.4118%" y="373" width="0.0784%" height="15" fill="rgb(234,98,12)" fg:x="1242" fg:w="1"/><text x="97.6618%" y="383.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="97.4118%" y="357" width="0.0784%" height="15" fill="rgb(242,170,50)" fg:x="1242" fg:w="1"/><text x="97.6618%" y="367.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="97.4118%" y="341" width="0.0784%" height="15" fill="rgb(235,7,5)" fg:x="1242" fg:w="1"/><text x="97.6618%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.5686%" y="485" width="0.0784%" height="15" fill="rgb(241,114,28)" fg:x="1244" fg:w="1"/><text x="97.8186%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.5686%" y="469" width="0.0784%" height="15" fill="rgb(246,112,42)" fg:x="1244" fg:w="1"/><text x="97.8186%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.5686%" y="453" width="0.0784%" height="15" fill="rgb(248,228,14)" fg:x="1244" fg:w="1"/><text x="97.8186%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.5686%" y="437" width="0.0784%" height="15" fill="rgb(208,133,18)" fg:x="1244" fg:w="1"/><text x="97.8186%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.5686%" y="421" width="0.0784%" height="15" fill="rgb(207,35,49)" fg:x="1244" fg:w="1"/><text x="97.8186%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.7255%" y="421" width="0.0784%" height="15" fill="rgb(205,68,36)" fg:x="1246" fg:w="1"/><text x="97.9755%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.7255%" y="405" width="0.0784%" height="15" fill="rgb(245,62,40)" fg:x="1246" fg:w="1"/><text x="97.9755%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.7255%" y="389" width="0.0784%" height="15" fill="rgb(228,27,24)" fg:x="1246" fg:w="1"/><text x="97.9755%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.7255%" y="373" width="0.0784%" height="15" fill="rgb(253,19,12)" fg:x="1246" fg:w="1"/><text x="97.9755%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.7255%" y="357" width="0.0784%" height="15" fill="rgb(232,28,20)" fg:x="1246" fg:w="1"/><text x="97.9755%" y="367.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.8039%" y="373" width="0.0784%" height="15" fill="rgb(218,35,51)" fg:x="1247" fg:w="1"/><text x="98.0539%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.8039%" y="357" width="0.0784%" height="15" fill="rgb(212,90,40)" fg:x="1247" fg:w="1"/><text x="98.0539%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.8039%" y="341" width="0.0784%" height="15" fill="rgb(220,172,12)" fg:x="1247" fg:w="1"/><text x="98.0539%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="97.8039%" y="421" width="0.1569%" height="15" fill="rgb(226,159,20)" fg:x="1247" fg:w="2"/><text x="98.0539%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.8039%" y="405" width="0.1569%" height="15" fill="rgb(234,205,16)" fg:x="1247" fg:w="2"/><text x="98.0539%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.8039%" y="389" width="0.1569%" height="15" fill="rgb(207,9,39)" fg:x="1247" fg:w="2"/><text x="98.0539%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.8824%" y="373" width="0.0784%" height="15" fill="rgb(249,143,15)" fg:x="1248" fg:w="1"/><text x="98.1324%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.8824%" y="357" width="0.0784%" height="15" fill="rgb(253,133,29)" fg:x="1248" fg:w="1"/><text x="98.1324%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.8824%" y="341" width="0.0784%" height="15" fill="rgb(221,187,0)" fg:x="1248" fg:w="1"/><text x="98.1324%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.8824%" y="325" width="0.0784%" height="15" fill="rgb(205,204,26)" fg:x="1248" fg:w="1"/><text x="98.1324%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.8824%" y="309" width="0.0784%" height="15" fill="rgb(224,68,54)" fg:x="1248" fg:w="1"/><text x="98.1324%" y="319.50"></text></g><g><title>plugins_core::tools::contained_by (6 samples, 0.47%)</title><rect x="97.5686%" y="501" width="0.4706%" height="15" fill="rgb(209,67,4)" fg:x="1244" fg:w="6"/><text x="97.8186%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (5 samples, 0.39%)</title><rect x="97.6471%" y="485" width="0.3922%" height="15" fill="rgb(228,229,18)" fg:x="1245" fg:w="5"/><text x="97.8971%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.39%)</title><rect x="97.6471%" y="469" width="0.3922%" height="15" fill="rgb(231,89,13)" fg:x="1245" fg:w="5"/><text x="97.8971%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.39%)</title><rect x="97.6471%" y="453" width="0.3922%" height="15" fill="rgb(210,182,18)" fg:x="1245" fg:w="5"/><text x="97.8971%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.39%)</title><rect x="97.6471%" y="437" width="0.3922%" height="15" fill="rgb(240,105,2)" fg:x="1245" fg:w="5"/><text x="97.8971%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="97.9608%" y="421" width="0.0784%" height="15" fill="rgb(207,170,50)" fg:x="1249" fg:w="1"/><text x="98.2108%" y="431.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="97.9608%" y="405" width="0.0784%" height="15" fill="rgb(232,133,24)" fg:x="1249" fg:w="1"/><text x="98.2108%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9608%" y="389" width="0.0784%" height="15" fill="rgb(235,166,27)" fg:x="1249" fg:w="1"/><text x="98.2108%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9608%" y="373" width="0.0784%" height="15" fill="rgb(209,19,13)" fg:x="1249" fg:w="1"/><text x="98.2108%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9608%" y="357" width="0.0784%" height="15" fill="rgb(226,79,39)" fg:x="1249" fg:w="1"/><text x="98.2108%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9608%" y="341" width="0.0784%" height="15" fill="rgb(222,163,10)" fg:x="1249" fg:w="1"/><text x="98.2108%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9608%" y="325" width="0.0784%" height="15" fill="rgb(214,44,19)" fg:x="1249" fg:w="1"/><text x="98.2108%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9608%" y="309" width="0.0784%" height="15" fill="rgb(210,217,13)" fg:x="1249" fg:w="1"/><text x="98.2108%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9608%" y="293" width="0.0784%" height="15" fill="rgb(237,61,54)" fg:x="1249" fg:w="1"/><text x="98.2108%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9608%" y="277" width="0.0784%" height="15" fill="rgb(226,184,24)" fg:x="1249" fg:w="1"/><text x="98.2108%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9608%" y="261" width="0.0784%" height="15" fill="rgb(223,226,4)" fg:x="1249" fg:w="1"/><text x="98.2108%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9608%" y="245" width="0.0784%" height="15" fill="rgb(210,26,41)" fg:x="1249" fg:w="1"/><text x="98.2108%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.9608%" y="229" width="0.0784%" height="15" fill="rgb(220,221,6)" fg:x="1249" fg:w="1"/><text x="98.2108%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9608%" y="213" width="0.0784%" height="15" fill="rgb(225,89,49)" fg:x="1249" fg:w="1"/><text x="98.2108%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0392%" y="469" width="0.0784%" height="15" fill="rgb(218,70,45)" fg:x="1250" fg:w="1"/><text x="98.2892%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0392%" y="453" width="0.0784%" height="15" fill="rgb(238,166,21)" fg:x="1250" fg:w="1"/><text x="98.2892%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0392%" y="437" width="0.0784%" height="15" fill="rgb(224,141,44)" fg:x="1250" fg:w="1"/><text x="98.2892%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0392%" y="421" width="0.0784%" height="15" fill="rgb(230,12,49)" fg:x="1250" fg:w="1"/><text x="98.2892%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0392%" y="405" width="0.0784%" height="15" fill="rgb(212,174,12)" fg:x="1250" fg:w="1"/><text x="98.2892%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0392%" y="389" width="0.0784%" height="15" fill="rgb(246,67,9)" fg:x="1250" fg:w="1"/><text x="98.2892%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.0392%" y="373" width="0.0784%" height="15" fill="rgb(239,35,23)" fg:x="1250" fg:w="1"/><text x="98.2892%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.0392%" y="357" width="0.0784%" height="15" fill="rgb(211,167,0)" fg:x="1250" fg:w="1"/><text x="98.2892%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.0392%" y="341" width="0.0784%" height="15" fill="rgb(225,119,45)" fg:x="1250" fg:w="1"/><text x="98.2892%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.0392%" y="325" width="0.0784%" height="15" fill="rgb(210,162,6)" fg:x="1250" fg:w="1"/><text x="98.2892%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.0392%" y="309" width="0.0784%" height="15" fill="rgb(208,118,35)" fg:x="1250" fg:w="1"/><text x="98.2892%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="98.0392%" y="485" width="0.2353%" height="15" fill="rgb(239,4,53)" fg:x="1250" fg:w="3"/><text x="98.2892%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.1176%" y="469" width="0.1569%" height="15" fill="rgb(213,130,21)" fg:x="1251" fg:w="2"/><text x="98.3676%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.1176%" y="453" width="0.1569%" height="15" fill="rgb(235,148,0)" fg:x="1251" fg:w="2"/><text x="98.3676%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1961%" y="437" width="0.0784%" height="15" fill="rgb(244,224,18)" fg:x="1252" fg:w="1"/><text x="98.4461%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1961%" y="421" width="0.0784%" height="15" fill="rgb(211,214,4)" fg:x="1252" fg:w="1"/><text x="98.4461%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.1961%" y="405" width="0.0784%" height="15" fill="rgb(206,119,25)" fg:x="1252" fg:w="1"/><text x="98.4461%" y="415.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (11 samples, 0.86%)</title><rect x="97.4902%" y="517" width="0.8627%" height="15" fill="rgb(243,93,47)" fg:x="1243" fg:w="11"/><text x="97.7402%" y="527.50"></text></g><g><title>plugins_core::tools::occupied_by (4 samples, 0.31%)</title><rect x="98.0392%" y="501" width="0.3137%" height="15" fill="rgb(224,194,6)" fg:x="1250" fg:w="4"/><text x="98.2892%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="98.2745%" y="485" width="0.0784%" height="15" fill="rgb(243,229,6)" fg:x="1253" fg:w="1"/><text x="98.5245%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="98.2745%" y="469" width="0.0784%" height="15" fill="rgb(207,23,50)" fg:x="1253" fg:w="1"/><text x="98.5245%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.2745%" y="453" width="0.0784%" height="15" fill="rgb(253,192,32)" fg:x="1253" fg:w="1"/><text x="98.5245%" y="463.50"></text></g><g><title>engine::session::Session::captured (251 samples, 19.69%)</title><rect x="78.9020%" y="677" width="19.6863%" height="15" fill="rgb(213,21,6)" fg:x="1006" fg:w="251"/><text x="79.1520%" y="687.50">engine::session::Session::captu..</text></g><g><title>engine::session::logs::capture (250 samples, 19.61%)</title><rect x="78.9804%" y="661" width="19.6078%" height="15" fill="rgb(243,151,13)" fg:x="1007" fg:w="250"/><text x="79.2304%" y="671.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (248 samples, 19.45%)</title><rect x="79.1373%" y="645" width="19.4510%" height="15" fill="rgb(233,165,41)" fg:x="1009" fg:w="248"/><text x="79.3873%" y="655.50">tracing_core::dispatcher::with..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (248 samples, 19.45%)</title><rect x="79.1373%" y="629" width="19.4510%" height="15" fill="rgb(246,176,45)" fg:x="1009" fg:w="248"/><text x="79.3873%" y="639.50">&lt;engine::session::Session as k..</text></g><g><title>kernel::plugins::mw::apply_middleware (248 samples, 19.45%)</title><rect x="79.1373%" y="613" width="19.4510%" height="15" fill="rgb(217,170,52)" fg:x="1009" fg:w="248"/><text x="79.3873%" y="623.50">kernel::plugins::mw::apply_mid..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (247 samples, 19.37%)</title><rect x="79.2157%" y="597" width="19.3725%" height="15" fill="rgb(214,203,54)" fg:x="1010" fg:w="247"/><text x="79.4657%" y="607.50">kernel::plugins::mw::Middlewar..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (247 samples, 19.37%)</title><rect x="79.2157%" y="581" width="19.3725%" height="15" fill="rgb(248,215,49)" fg:x="1010" fg:w="247"/><text x="79.4657%" y="591.50">&lt;engine::session::ExpandSurrou..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (237 samples, 18.59%)</title><rect x="80.0000%" y="565" width="18.5882%" height="15" fill="rgb(208,46,10)" fg:x="1020" fg:w="237"/><text x="80.2500%" y="575.50">kernel::plugins::mw::Middlewa..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (237 samples, 18.59%)</title><rect x="80.0000%" y="549" width="18.5882%" height="15" fill="rgb(254,5,31)" fg:x="1020" fg:w="237"/><text x="80.2500%" y="559.50">&lt;plugins_rune::RuneMiddleware..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (14 samples, 1.10%)</title><rect x="97.4902%" y="533" width="1.0980%" height="15" fill="rgb(222,104,33)" fg:x="1243" fg:w="14"/><text x="97.7402%" y="543.50"></text></g><g><title>plugins_rune::sources::load_sources_from_entity (3 samples, 0.24%)</title><rect x="98.3529%" y="517" width="0.2353%" height="15" fill="rgb(248,49,16)" fg:x="1254" fg:w="3"/><text x="98.6029%" y="527.50"></text></g><g><title>plugins_rune::sources::get_script (3 samples, 0.24%)</title><rect x="98.3529%" y="501" width="0.2353%" height="15" fill="rgb(232,198,41)" fg:x="1254" fg:w="3"/><text x="98.6029%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.4314%" y="485" width="0.1569%" height="15" fill="rgb(214,125,3)" fg:x="1255" fg:w="2"/><text x="98.6814%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (2 samples, 0.16%)</title><rect x="98.4314%" y="469" width="0.1569%" height="15" fill="rgb(229,220,28)" fg:x="1255" fg:w="2"/><text x="98.6814%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="98.4314%" y="453" width="0.1569%" height="15" fill="rgb(222,64,37)" fg:x="1255" fg:w="2"/><text x="98.6814%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="98.5098%" y="437" width="0.0784%" height="15" fill="rgb(249,184,13)" fg:x="1256" fg:w="1"/><text x="98.7598%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.5882%" y="581" width="0.0784%" height="15" fill="rgb(252,176,6)" fg:x="1257" fg:w="1"/><text x="98.8382%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.5882%" y="565" width="0.0784%" height="15" fill="rgb(228,153,7)" fg:x="1257" fg:w="1"/><text x="98.8382%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.5882%" y="549" width="0.0784%" height="15" fill="rgb(242,193,5)" fg:x="1257" fg:w="1"/><text x="98.8382%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.5882%" y="533" width="0.0784%" height="15" fill="rgb(232,140,9)" fg:x="1257" fg:w="1"/><text x="98.8382%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.5882%" y="517" width="0.0784%" height="15" fill="rgb(213,222,16)" fg:x="1257" fg:w="1"/><text x="98.8382%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.5882%" y="501" width="0.0784%" height="15" fill="rgb(222,75,50)" fg:x="1257" fg:w="1"/><text x="98.8382%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.5882%" y="485" width="0.0784%" height="15" fill="rgb(205,180,2)" fg:x="1257" fg:w="1"/><text x="98.8382%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.5882%" y="469" width="0.0784%" height="15" fill="rgb(216,34,7)" fg:x="1257" fg:w="1"/><text x="98.8382%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.5882%" y="629" width="0.1569%" height="15" fill="rgb(253,16,32)" fg:x="1257" fg:w="2"/><text x="98.8382%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="98.5882%" y="613" width="0.1569%" height="15" fill="rgb(208,97,28)" fg:x="1257" fg:w="2"/><text x="98.8382%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="98.5882%" y="597" width="0.1569%" height="15" fill="rgb(225,92,11)" fg:x="1257" fg:w="2"/><text x="98.8382%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.6667%" y="581" width="0.0784%" height="15" fill="rgb(243,38,12)" fg:x="1258" fg:w="1"/><text x="98.9167%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6667%" y="565" width="0.0784%" height="15" fill="rgb(208,139,16)" fg:x="1258" fg:w="1"/><text x="98.9167%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.6667%" y="549" width="0.0784%" height="15" fill="rgb(227,24,9)" fg:x="1258" fg:w="1"/><text x="98.9167%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="98.8235%" y="581" width="0.1569%" height="15" fill="rgb(206,62,11)" fg:x="1260" fg:w="2"/><text x="99.0735%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.9020%" y="565" width="0.0784%" height="15" fill="rgb(228,134,27)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="575.50"></text></g><g><title>engine::session::internal::Added::find_refs (6 samples, 0.47%)</title><rect x="98.5882%" y="661" width="0.4706%" height="15" fill="rgb(205,55,33)" fg:x="1257" fg:w="6"/><text x="98.8382%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.47%)</title><rect x="98.5882%" y="645" width="0.4706%" height="15" fill="rgb(243,75,43)" fg:x="1257" fg:w="6"/><text x="98.8382%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.31%)</title><rect x="98.7451%" y="629" width="0.3137%" height="15" fill="rgb(223,27,42)" fg:x="1259" fg:w="4"/><text x="98.9951%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.8235%" y="613" width="0.2353%" height="15" fill="rgb(232,189,33)" fg:x="1260" fg:w="3"/><text x="99.0735%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="98.8235%" y="597" width="0.2353%" height="15" fill="rgb(210,9,39)" fg:x="1260" fg:w="3"/><text x="99.0735%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.9804%" y="581" width="0.0784%" height="15" fill="rgb(242,85,26)" fg:x="1262" fg:w="1"/><text x="99.2304%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.9804%" y="565" width="0.0784%" height="15" fill="rgb(248,44,4)" fg:x="1262" fg:w="1"/><text x="99.2304%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="98.9804%" y="549" width="0.0784%" height="15" fill="rgb(250,96,46)" fg:x="1262" fg:w="1"/><text x="99.2304%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="98.9804%" y="533" width="0.0784%" height="15" fill="rgb(229,116,26)" fg:x="1262" fg:w="1"/><text x="99.2304%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.9804%" y="517" width="0.0784%" height="15" fill="rgb(246,94,34)" fg:x="1262" fg:w="1"/><text x="99.2304%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0588%" y="581" width="0.0784%" height="15" fill="rgb(251,73,21)" fg:x="1263" fg:w="1"/><text x="99.3088%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.0588%" y="565" width="0.0784%" height="15" fill="rgb(254,121,25)" fg:x="1263" fg:w="1"/><text x="99.3088%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.0588%" y="645" width="0.1569%" height="15" fill="rgb(215,161,49)" fg:x="1263" fg:w="2"/><text x="99.3088%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.0588%" y="629" width="0.1569%" height="15" fill="rgb(221,43,13)" fg:x="1263" fg:w="2"/><text x="99.3088%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.0588%" y="613" width="0.1569%" height="15" fill="rgb(249,5,37)" fg:x="1263" fg:w="2"/><text x="99.3088%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.0588%" y="597" width="0.1569%" height="15" fill="rgb(226,25,44)" fg:x="1263" fg:w="2"/><text x="99.3088%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1373%" y="581" width="0.0784%" height="15" fill="rgb(238,189,16)" fg:x="1264" fg:w="1"/><text x="99.3873%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1373%" y="565" width="0.0784%" height="15" fill="rgb(251,186,8)" fg:x="1264" fg:w="1"/><text x="99.3873%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.1373%" y="549" width="0.0784%" height="15" fill="rgb(254,34,31)" fg:x="1264" fg:w="1"/><text x="99.3873%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.1373%" y="533" width="0.0784%" height="15" fill="rgb(225,215,27)" fg:x="1264" fg:w="1"/><text x="99.3873%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.1373%" y="517" width="0.0784%" height="15" fill="rgb(221,192,48)" fg:x="1264" fg:w="1"/><text x="99.3873%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="99.1373%" y="501" width="0.0784%" height="15" fill="rgb(219,137,20)" fg:x="1264" fg:w="1"/><text x="99.3873%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.1373%" y="485" width="0.0784%" height="15" fill="rgb(219,84,11)" fg:x="1264" fg:w="1"/><text x="99.3873%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.3725%" y="437" width="0.0784%" height="15" fill="rgb(224,10,23)" fg:x="1267" fg:w="1"/><text x="99.6225%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="99.2941%" y="597" width="0.2353%" height="15" fill="rgb(248,22,39)" fg:x="1266" fg:w="3"/><text x="99.5441%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.2941%" y="581" width="0.2353%" height="15" fill="rgb(212,154,20)" fg:x="1266" fg:w="3"/><text x="99.5441%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="99.2941%" y="565" width="0.2353%" height="15" fill="rgb(236,199,50)" fg:x="1266" fg:w="3"/><text x="99.5441%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.3725%" y="549" width="0.1569%" height="15" fill="rgb(211,9,17)" fg:x="1267" fg:w="2"/><text x="99.6225%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.3725%" y="533" width="0.1569%" height="15" fill="rgb(243,216,36)" fg:x="1267" fg:w="2"/><text x="99.6225%" y="543.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="99.3725%" y="517" width="0.1569%" height="15" fill="rgb(250,2,10)" fg:x="1267" fg:w="2"/><text x="99.6225%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.3725%" y="501" width="0.1569%" height="15" fill="rgb(226,50,48)" fg:x="1267" fg:w="2"/><text x="99.6225%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.3725%" y="485" width="0.1569%" height="15" fill="rgb(243,81,16)" fg:x="1267" fg:w="2"/><text x="99.6225%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.3725%" y="469" width="0.1569%" height="15" fill="rgb(250,14,2)" fg:x="1267" fg:w="2"/><text x="99.6225%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="99.3725%" y="453" width="0.1569%" height="15" fill="rgb(233,135,29)" fg:x="1267" fg:w="2"/><text x="99.6225%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="99.4510%" y="437" width="0.0784%" height="15" fill="rgb(224,64,43)" fg:x="1268" fg:w="1"/><text x="99.7010%" y="447.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.39%)</title><rect x="99.2157%" y="645" width="0.3922%" height="15" fill="rgb(238,84,13)" fg:x="1265" fg:w="5"/><text x="99.4657%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.31%)</title><rect x="99.2941%" y="629" width="0.3137%" height="15" fill="rgb(253,48,26)" fg:x="1266" fg:w="4"/><text x="99.5441%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.31%)</title><rect x="99.2941%" y="613" width="0.3137%" height="15" fill="rgb(205,223,31)" fg:x="1266" fg:w="4"/><text x="99.5441%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5294%" y="597" width="0.0784%" height="15" fill="rgb(221,41,32)" fg:x="1269" fg:w="1"/><text x="99.7794%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5294%" y="581" width="0.0784%" height="15" fill="rgb(213,158,31)" fg:x="1269" fg:w="1"/><text x="99.7794%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6078%" y="581" width="0.0784%" height="15" fill="rgb(245,126,43)" fg:x="1270" fg:w="1"/><text x="99.8578%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6078%" y="565" width="0.0784%" height="15" fill="rgb(227,7,22)" fg:x="1270" fg:w="1"/><text x="99.8578%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6078%" y="549" width="0.0784%" height="15" fill="rgb(252,90,44)" fg:x="1270" fg:w="1"/><text x="99.8578%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6078%" y="533" width="0.0784%" height="15" fill="rgb(253,91,0)" fg:x="1270" fg:w="1"/><text x="99.8578%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.6078%" y="517" width="0.0784%" height="15" fill="rgb(252,175,49)" fg:x="1270" fg:w="1"/><text x="99.8578%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6078%" y="501" width="0.0784%" height="15" fill="rgb(246,150,1)" fg:x="1270" fg:w="1"/><text x="99.8578%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (15 samples, 1.18%)</title><rect x="98.5882%" y="677" width="1.1765%" height="15" fill="rgb(241,192,25)" fg:x="1257" fg:w="15"/><text x="98.8382%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.71%)</title><rect x="99.0588%" y="661" width="0.7059%" height="15" fill="rgb(239,187,11)" fg:x="1263" fg:w="9"/><text x="99.3088%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.6078%" y="645" width="0.1569%" height="15" fill="rgb(218,202,51)" fg:x="1270" fg:w="2"/><text x="99.8578%" y="655.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.6078%" y="629" width="0.1569%" height="15" fill="rgb(225,176,8)" fg:x="1270" fg:w="2"/><text x="99.8578%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6078%" y="613" width="0.1569%" height="15" fill="rgb(219,122,41)" fg:x="1270" fg:w="2"/><text x="99.8578%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6078%" y="597" width="0.1569%" height="15" fill="rgb(248,140,20)" fg:x="1270" fg:w="2"/><text x="99.8578%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6863%" y="581" width="0.0784%" height="15" fill="rgb(245,41,37)" fg:x="1271" fg:w="1"/><text x="99.9363%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6863%" y="565" width="0.0784%" height="15" fill="rgb(235,82,39)" fg:x="1271" fg:w="1"/><text x="99.9363%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="99.6863%" y="549" width="0.0784%" height="15" fill="rgb(230,108,42)" fg:x="1271" fg:w="1"/><text x="99.9363%" y="559.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.7647%" y="677" width="0.0784%" height="15" fill="rgb(215,150,50)" fg:x="1272" fg:w="1"/><text x="100.0147%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.7647%" y="661" width="0.0784%" height="15" fill="rgb(233,212,5)" fg:x="1272" fg:w="1"/><text x="100.0147%" y="671.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (270 samples, 21.18%)</title><rect x="78.7451%" y="709" width="21.1765%" height="15" fill="rgb(245,80,22)" fg:x="1004" fg:w="270"/><text x="78.9951%" y="719.50">engine::session::Session::evaluat..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (270 samples, 21.18%)</title><rect x="78.7451%" y="693" width="21.1765%" height="15" fill="rgb(238,129,16)" fg:x="1004" fg:w="270"/><text x="78.9951%" y="703.50">engine::session::Session::evaluat..</text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="99.8431%" y="677" width="0.0784%" height="15" fill="rgb(240,19,0)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="99.8431%" y="661" width="0.0784%" height="15" fill="rgb(232,42,35)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="99.8431%" y="645" width="0.0784%" height="15" fill="rgb(223,130,24)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="655.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.8431%" y="629" width="0.0784%" height="15" fill="rgb(237,16,22)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8431%" y="613" width="0.0784%" height="15" fill="rgb(248,192,20)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8431%" y="597" width="0.0784%" height="15" fill="rgb(233,167,2)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.8431%" y="581" width="0.0784%" height="15" fill="rgb(252,71,44)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.8431%" y="565" width="0.0784%" height="15" fill="rgb(238,37,47)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="575.50"></text></g><g><title>all (1,275 samples, 100%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(214,202,54)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="1071.50"></text></g><g><title>simple-7b9109e4 (1,275 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(254,165,40)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="1055.50">simple-7b9109e4</text></g><g><title>_start (1,275 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(246,173,38)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="1039.50">_start</text></g><g><title>__libc_start_main (1,275 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(215,3,27)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="1023.50">__libc_start_main</text></g><g><title>main (1,275 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(239,169,51)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="1007.50">main</text></g><g><title>std::rt::lang_start_internal (1,275 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(212,5,25)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="991.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,275 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(243,45,17)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="975.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,275 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(242,97,9)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,275 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(228,71,31)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="943.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,275 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(252,184,16)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,275 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(236,169,46)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,275 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(207,17,47)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,275 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(206,201,28)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,275 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(224,184,23)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="863.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,275 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(208,139,48)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="847.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,275 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(208,130,10)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="831.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,275 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(211,213,45)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="815.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,275 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(235,100,30)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="799.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,275 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(206,144,31)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="783.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (446 samples, 34.98%)</title><rect x="65.0196%" y="757" width="34.9804%" height="15" fill="rgb(224,200,26)" fg:x="829" fg:w="446"/><text x="65.2696%" y="767.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routin..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (446 samples, 34.98%)</title><rect x="65.0196%" y="741" width="34.9804%" height="15" fill="rgb(247,104,53)" fg:x="829" fg:w="446"/><text x="65.2696%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (446 samples, 34.98%)</title><rect x="65.0196%" y="725" width="34.9804%" height="15" fill="rgb(220,14,17)" fg:x="829" fg:w="446"/><text x="65.2696%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="99.9216%" y="709" width="0.0784%" height="15" fill="rgb(230,140,40)" fg:x="1274" fg:w="1"/><text x="100.1716%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="99.9216%" y="693" width="0.0784%" height="15" fill="rgb(229,2,41)" fg:x="1274" fg:w="1"/><text x="100.1716%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.9216%" y="677" width="0.0784%" height="15" fill="rgb(232,89,16)" fg:x="1274" fg:w="1"/><text x="100.1716%" y="687.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="99.9216%" y="661" width="0.0784%" height="15" fill="rgb(247,59,52)" fg:x="1274" fg:w="1"/><text x="100.1716%" y="671.50"></text></g></svg></svg>