<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1110" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1093.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1093.00"> </text><svg id="frames" x="10" width="1180" total_samples="1230"><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.0813%" y="597" width="0.1626%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="2"/><text x="0.3313%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2439%" y="581" width="0.0813%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="1"/><text x="0.4939%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.3252%" y="581" width="0.0813%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="0.5752%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4065%" y="565" width="0.0813%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="1"/><text x="0.6565%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.4878%" y="565" width="0.0813%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="1"/><text x="0.7378%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.65%)</title><rect x="0.0000%" y="709" width="0.6504%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="8"/><text x="0.2500%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (7 samples, 0.57%)</title><rect x="0.0813%" y="693" width="0.5691%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="7"/><text x="0.3313%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.57%)</title><rect x="0.0813%" y="677" width="0.5691%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="7"/><text x="0.3313%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (7 samples, 0.57%)</title><rect x="0.0813%" y="661" width="0.5691%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="7"/><text x="0.3313%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.57%)</title><rect x="0.0813%" y="645" width="0.5691%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="7"/><text x="0.3313%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.57%)</title><rect x="0.0813%" y="629" width="0.5691%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="7"/><text x="0.3313%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.57%)</title><rect x="0.0813%" y="613" width="0.5691%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="7"/><text x="0.3313%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="0.2439%" y="597" width="0.4065%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="5"/><text x="0.4939%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.4065%" y="581" width="0.2439%" height="15" fill="rgb(206,188,39)" fg:x="5" fg:w="3"/><text x="0.6565%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.5691%" y="565" width="0.0813%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="1"/><text x="0.8191%" y="575.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="0.6504%" y="613" width="0.0813%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="1"/><text x="0.9004%" y="623.50"></text></g><g><title>pthread_rwlock_unlock (1 samples, 0.08%)</title><rect x="0.6504%" y="597" width="0.0813%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="1"/><text x="0.9004%" y="607.50"></text></g><g><title>dlopen (3 samples, 0.24%)</title><rect x="0.7317%" y="613" width="0.2439%" height="15" fill="rgb(210,31,41)" fg:x="9" fg:w="3"/><text x="0.9817%" y="623.50"></text></g><g><title>_dl_catch_error (3 samples, 0.24%)</title><rect x="0.7317%" y="597" width="0.2439%" height="15" fill="rgb(221,200,47)" fg:x="9" fg:w="3"/><text x="0.9817%" y="607.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="0.7317%" y="581" width="0.2439%" height="15" fill="rgb(226,26,5)" fg:x="9" fg:w="3"/><text x="0.9817%" y="591.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="0.7317%" y="565" width="0.2439%" height="15" fill="rgb(249,33,26)" fg:x="9" fg:w="3"/><text x="0.9817%" y="575.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="0.7317%" y="549" width="0.2439%" height="15" fill="rgb(235,183,28)" fg:x="9" fg:w="3"/><text x="0.9817%" y="559.50"></text></g><g><title>_dl_signal_error (1 samples, 0.08%)</title><rect x="0.8943%" y="533" width="0.0813%" height="15" fill="rgb(221,5,38)" fg:x="11" fg:w="1"/><text x="1.1443%" y="543.50"></text></g><g><title>libloading::safe::Library::new (5 samples, 0.41%)</title><rect x="0.6504%" y="629" width="0.4065%" height="15" fill="rgb(247,18,42)" fg:x="8" fg:w="5"/><text x="0.9004%" y="639.50"></text></g><g><title>libloading::util::cstr_cow_from_bytes (1 samples, 0.08%)</title><rect x="0.9756%" y="613" width="0.0813%" height="15" fill="rgb(241,131,45)" fg:x="12" fg:w="1"/><text x="1.2256%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (6 samples, 0.49%)</title><rect x="0.6504%" y="709" width="0.4878%" height="15" fill="rgb(249,31,29)" fg:x="8" fg:w="6"/><text x="0.9004%" y="719.50"></text></g><g><title>engine::session::Session::new (6 samples, 0.49%)</title><rect x="0.6504%" y="693" width="0.4878%" height="15" fill="rgb(225,111,53)" fg:x="8" fg:w="6"/><text x="0.9004%" y="703.50"></text></g><g><title>engine::session::Session::initialize (6 samples, 0.49%)</title><rect x="0.6504%" y="677" width="0.4878%" height="15" fill="rgb(238,160,17)" fg:x="8" fg:w="6"/><text x="0.9004%" y="687.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (6 samples, 0.49%)</title><rect x="0.6504%" y="661" width="0.4878%" height="15" fill="rgb(214,148,48)" fg:x="8" fg:w="6"/><text x="0.9004%" y="671.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.49%)</title><rect x="0.6504%" y="645" width="0.4878%" height="15" fill="rgb(232,36,49)" fg:x="8" fg:w="6"/><text x="0.9004%" y="655.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_string_lossy (1 samples, 0.08%)</title><rect x="1.0569%" y="629" width="0.0813%" height="15" fill="rgb(209,103,24)" fg:x="13" fg:w="1"/><text x="1.3069%" y="639.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (1 samples, 0.08%)</title><rect x="1.0569%" y="613" width="0.0813%" height="15" fill="rgb(229,88,8)" fg:x="13" fg:w="1"/><text x="1.3069%" y="623.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.1382%" y="693" width="0.0813%" height="15" fill="rgb(213,181,19)" fg:x="14" fg:w="1"/><text x="1.3882%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.1382%" y="677" width="0.0813%" height="15" fill="rgb(254,191,54)" fg:x="14" fg:w="1"/><text x="1.3882%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.1382%" y="661" width="0.0813%" height="15" fill="rgb(241,83,37)" fg:x="14" fg:w="1"/><text x="1.3882%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="1.1382%" y="645" width="0.0813%" height="15" fill="rgb(233,36,39)" fg:x="14" fg:w="1"/><text x="1.3882%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="1.1382%" y="629" width="0.0813%" height="15" fill="rgb(226,3,54)" fg:x="14" fg:w="1"/><text x="1.3882%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="1.1382%" y="613" width="0.0813%" height="15" fill="rgb(245,192,40)" fg:x="14" fg:w="1"/><text x="1.3882%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.1382%" y="597" width="0.0813%" height="15" fill="rgb(238,167,29)" fg:x="14" fg:w="1"/><text x="1.3882%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.1382%" y="581" width="0.0813%" height="15" fill="rgb(232,182,51)" fg:x="14" fg:w="1"/><text x="1.3882%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="1.1382%" y="565" width="0.0813%" height="15" fill="rgb(231,60,39)" fg:x="14" fg:w="1"/><text x="1.3882%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="1.1382%" y="549" width="0.0813%" height="15" fill="rgb(208,69,12)" fg:x="14" fg:w="1"/><text x="1.3882%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="1.1382%" y="533" width="0.0813%" height="15" fill="rgb(235,93,37)" fg:x="14" fg:w="1"/><text x="1.3882%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="1.1382%" y="517" width="0.0813%" height="15" fill="rgb(213,116,39)" fg:x="14" fg:w="1"/><text x="1.3882%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.1382%" y="501" width="0.0813%" height="15" fill="rgb(222,207,29)" fg:x="14" fg:w="1"/><text x="1.3882%" y="511.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::begin (1 samples, 0.08%)</title><rect x="1.2195%" y="677" width="0.0813%" height="15" fill="rgb(206,96,30)" fg:x="15" fg:w="1"/><text x="1.4695%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="1.3008%" y="613" width="0.0813%" height="15" fill="rgb(218,138,4)" fg:x="16" fg:w="1"/><text x="1.5508%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="1.3008%" y="597" width="0.0813%" height="15" fill="rgb(250,191,14)" fg:x="16" fg:w="1"/><text x="1.5508%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.3821%" y="581" width="0.0813%" height="15" fill="rgb(239,60,40)" fg:x="17" fg:w="1"/><text x="1.6321%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.3821%" y="565" width="0.0813%" height="15" fill="rgb(206,27,48)" fg:x="17" fg:w="1"/><text x="1.6321%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="1.3821%" y="597" width="0.1626%" height="15" fill="rgb(225,35,8)" fg:x="17" fg:w="2"/><text x="1.6321%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.4634%" y="581" width="0.0813%" height="15" fill="rgb(250,213,24)" fg:x="18" fg:w="1"/><text x="1.7134%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.4634%" y="565" width="0.0813%" height="15" fill="rgb(247,123,22)" fg:x="18" fg:w="1"/><text x="1.7134%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.5447%" y="581" width="0.0813%" height="15" fill="rgb(231,138,38)" fg:x="19" fg:w="1"/><text x="1.7947%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.5447%" y="565" width="0.0813%" height="15" fill="rgb(231,145,46)" fg:x="19" fg:w="1"/><text x="1.7947%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.5447%" y="549" width="0.0813%" height="15" fill="rgb(251,118,11)" fg:x="19" fg:w="1"/><text x="1.7947%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.5447%" y="533" width="0.0813%" height="15" fill="rgb(217,147,25)" fg:x="19" fg:w="1"/><text x="1.7947%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.5447%" y="517" width="0.0813%" height="15" fill="rgb(247,81,37)" fg:x="19" fg:w="1"/><text x="1.7947%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="1.5447%" y="501" width="0.0813%" height="15" fill="rgb(209,12,38)" fg:x="19" fg:w="1"/><text x="1.7947%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.41%)</title><rect x="1.3821%" y="613" width="0.4065%" height="15" fill="rgb(227,1,9)" fg:x="17" fg:w="5"/><text x="1.6321%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="1.5447%" y="597" width="0.2439%" height="15" fill="rgb(248,47,43)" fg:x="19" fg:w="3"/><text x="1.7947%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="1.6260%" y="581" width="0.1626%" height="15" fill="rgb(221,10,30)" fg:x="20" fg:w="2"/><text x="1.8760%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="1.6260%" y="565" width="0.1626%" height="15" fill="rgb(210,229,1)" fg:x="20" fg:w="2"/><text x="1.8760%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="1.6260%" y="549" width="0.1626%" height="15" fill="rgb(222,148,37)" fg:x="20" fg:w="2"/><text x="1.8760%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="1.6260%" y="533" width="0.1626%" height="15" fill="rgb(234,67,33)" fg:x="20" fg:w="2"/><text x="1.8760%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="1.6260%" y="517" width="0.1626%" height="15" fill="rgb(247,98,35)" fg:x="20" fg:w="2"/><text x="1.8760%" y="527.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="1.6260%" y="501" width="0.1626%" height="15" fill="rgb(247,138,52)" fg:x="20" fg:w="2"/><text x="1.8760%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7886%" y="581" width="0.0813%" height="15" fill="rgb(213,79,30)" fg:x="22" fg:w="1"/><text x="2.0386%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.7886%" y="613" width="0.1626%" height="15" fill="rgb(246,177,23)" fg:x="22" fg:w="2"/><text x="2.0386%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="1.7886%" y="597" width="0.1626%" height="15" fill="rgb(230,62,27)" fg:x="22" fg:w="2"/><text x="2.0386%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.8699%" y="581" width="0.0813%" height="15" fill="rgb(216,154,8)" fg:x="23" fg:w="1"/><text x="2.1199%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.8699%" y="565" width="0.0813%" height="15" fill="rgb(244,35,45)" fg:x="23" fg:w="1"/><text x="2.1199%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="1.9512%" y="597" width="0.0813%" height="15" fill="rgb(251,115,12)" fg:x="24" fg:w="1"/><text x="2.2012%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.9512%" y="581" width="0.0813%" height="15" fill="rgb(240,54,50)" fg:x="24" fg:w="1"/><text x="2.2012%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="2.1138%" y="565" width="0.0813%" height="15" fill="rgb(233,84,52)" fg:x="26" fg:w="1"/><text x="2.3638%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.1138%" y="549" width="0.0813%" height="15" fill="rgb(207,117,47)" fg:x="26" fg:w="1"/><text x="2.3638%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="2.1951%" y="565" width="0.0813%" height="15" fill="rgb(249,43,39)" fg:x="27" fg:w="1"/><text x="2.4451%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.1951%" y="549" width="0.0813%" height="15" fill="rgb(209,38,44)" fg:x="27" fg:w="1"/><text x="2.4451%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.3577%" y="517" width="0.0813%" height="15" fill="rgb(236,212,23)" fg:x="29" fg:w="1"/><text x="2.6077%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.3577%" y="501" width="0.0813%" height="15" fill="rgb(242,79,21)" fg:x="29" fg:w="1"/><text x="2.6077%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.3577%" y="485" width="0.0813%" height="15" fill="rgb(211,96,35)" fg:x="29" fg:w="1"/><text x="2.6077%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.3577%" y="469" width="0.0813%" height="15" fill="rgb(253,215,40)" fg:x="29" fg:w="1"/><text x="2.6077%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.3577%" y="453" width="0.0813%" height="15" fill="rgb(211,81,21)" fg:x="29" fg:w="1"/><text x="2.6077%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.3577%" y="437" width="0.0813%" height="15" fill="rgb(208,190,38)" fg:x="29" fg:w="1"/><text x="2.6077%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.3577%" y="533" width="0.1626%" height="15" fill="rgb(235,213,38)" fg:x="29" fg:w="2"/><text x="2.6077%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4390%" y="517" width="0.0813%" height="15" fill="rgb(237,122,38)" fg:x="30" fg:w="1"/><text x="2.6890%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.4390%" y="501" width="0.0813%" height="15" fill="rgb(244,218,35)" fg:x="30" fg:w="1"/><text x="2.6890%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4390%" y="485" width="0.0813%" height="15" fill="rgb(240,68,47)" fg:x="30" fg:w="1"/><text x="2.6890%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.4390%" y="469" width="0.0813%" height="15" fill="rgb(210,16,53)" fg:x="30" fg:w="1"/><text x="2.6890%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4390%" y="453" width="0.0813%" height="15" fill="rgb(235,124,12)" fg:x="30" fg:w="1"/><text x="2.6890%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.4390%" y="437" width="0.0813%" height="15" fill="rgb(224,169,11)" fg:x="30" fg:w="1"/><text x="2.6890%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4390%" y="421" width="0.0813%" height="15" fill="rgb(250,166,2)" fg:x="30" fg:w="1"/><text x="2.6890%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.4390%" y="405" width="0.0813%" height="15" fill="rgb(242,216,29)" fg:x="30" fg:w="1"/><text x="2.6890%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.4390%" y="389" width="0.0813%" height="15" fill="rgb(230,116,27)" fg:x="30" fg:w="1"/><text x="2.6890%" y="399.50"></text></g><g><title>engine::session::Session::flush (17 samples, 1.38%)</title><rect x="1.2195%" y="693" width="1.3821%" height="15" fill="rgb(228,99,48)" fg:x="15" fg:w="17"/><text x="1.4695%" y="703.50"></text></g><g><title>engine::session::state::State::close (16 samples, 1.30%)</title><rect x="1.3008%" y="677" width="1.3008%" height="15" fill="rgb(253,11,6)" fg:x="16" fg:w="16"/><text x="1.5508%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (16 samples, 1.30%)</title><rect x="1.3008%" y="661" width="1.3008%" height="15" fill="rgb(247,143,39)" fg:x="16" fg:w="16"/><text x="1.5508%" y="671.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (16 samples, 1.30%)</title><rect x="1.3008%" y="645" width="1.3008%" height="15" fill="rgb(236,97,10)" fg:x="16" fg:w="16"/><text x="1.5508%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (16 samples, 1.30%)</title><rect x="1.3008%" y="629" width="1.3008%" height="15" fill="rgb(233,208,19)" fg:x="16" fg:w="16"/><text x="1.5508%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.65%)</title><rect x="1.9512%" y="613" width="0.6504%" height="15" fill="rgb(216,164,2)" fg:x="24" fg:w="8"/><text x="2.2012%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.57%)</title><rect x="2.0325%" y="597" width="0.5691%" height="15" fill="rgb(220,129,5)" fg:x="25" fg:w="7"/><text x="2.2825%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.57%)</title><rect x="2.0325%" y="581" width="0.5691%" height="15" fill="rgb(242,17,10)" fg:x="25" fg:w="7"/><text x="2.2825%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.33%)</title><rect x="2.2764%" y="565" width="0.3252%" height="15" fill="rgb(242,107,0)" fg:x="28" fg:w="4"/><text x="2.5264%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.33%)</title><rect x="2.2764%" y="549" width="0.3252%" height="15" fill="rgb(251,28,31)" fg:x="28" fg:w="4"/><text x="2.5264%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="2.5203%" y="533" width="0.0813%" height="15" fill="rgb(233,223,10)" fg:x="31" fg:w="1"/><text x="2.7703%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.5203%" y="517" width="0.0813%" height="15" fill="rgb(215,21,27)" fg:x="31" fg:w="1"/><text x="2.7703%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="2.6016%" y="629" width="0.1626%" height="15" fill="rgb(232,23,21)" fg:x="32" fg:w="2"/><text x="2.8516%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="2.6016%" y="613" width="0.1626%" height="15" fill="rgb(244,5,23)" fg:x="32" fg:w="2"/><text x="2.8516%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="2.6016%" y="597" width="0.1626%" height="15" fill="rgb(226,81,46)" fg:x="32" fg:w="2"/><text x="2.8516%" y="607.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="2.6016%" y="581" width="0.1626%" height="15" fill="rgb(247,70,30)" fg:x="32" fg:w="2"/><text x="2.8516%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="2.6016%" y="677" width="0.2439%" height="15" fill="rgb(212,68,19)" fg:x="32" fg:w="3"/><text x="2.8516%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="2.6016%" y="661" width="0.2439%" height="15" fill="rgb(240,187,13)" fg:x="32" fg:w="3"/><text x="2.8516%" y="671.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (3 samples, 0.24%)</title><rect x="2.6016%" y="645" width="0.2439%" height="15" fill="rgb(223,113,26)" fg:x="32" fg:w="3"/><text x="2.8516%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.7642%" y="629" width="0.0813%" height="15" fill="rgb(206,192,2)" fg:x="34" fg:w="1"/><text x="3.0142%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="2.7642%" y="613" width="0.0813%" height="15" fill="rgb(241,108,4)" fg:x="34" fg:w="1"/><text x="3.0142%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="2.8455%" y="661" width="0.0813%" height="15" fill="rgb(247,173,49)" fg:x="35" fg:w="1"/><text x="3.0955%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.8455%" y="645" width="0.0813%" height="15" fill="rgb(224,114,35)" fg:x="35" fg:w="1"/><text x="3.0955%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="2.9268%" y="661" width="0.0813%" height="15" fill="rgb(245,159,27)" fg:x="36" fg:w="1"/><text x="3.1768%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="2.9268%" y="645" width="0.0813%" height="15" fill="rgb(245,172,44)" fg:x="36" fg:w="1"/><text x="3.1768%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.9268%" y="629" width="0.0813%" height="15" fill="rgb(236,23,11)" fg:x="36" fg:w="1"/><text x="3.1768%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="2.9268%" y="613" width="0.0813%" height="15" fill="rgb(205,117,38)" fg:x="36" fg:w="1"/><text x="3.1768%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.9268%" y="597" width="0.0813%" height="15" fill="rgb(237,72,25)" fg:x="36" fg:w="1"/><text x="3.1768%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9268%" y="581" width="0.0813%" height="15" fill="rgb(244,70,9)" fg:x="36" fg:w="1"/><text x="3.1768%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.0081%" y="613" width="0.0813%" height="15" fill="rgb(217,125,39)" fg:x="37" fg:w="1"/><text x="3.2581%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.0081%" y="597" width="0.0813%" height="15" fill="rgb(235,36,10)" fg:x="37" fg:w="1"/><text x="3.2581%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.0081%" y="581" width="0.0813%" height="15" fill="rgb(251,123,47)" fg:x="37" fg:w="1"/><text x="3.2581%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.0081%" y="565" width="0.0813%" height="15" fill="rgb(221,13,13)" fg:x="37" fg:w="1"/><text x="3.2581%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.0081%" y="549" width="0.0813%" height="15" fill="rgb(238,131,9)" fg:x="37" fg:w="1"/><text x="3.2581%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.0081%" y="533" width="0.0813%" height="15" fill="rgb(211,50,8)" fg:x="37" fg:w="1"/><text x="3.2581%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.0081%" y="517" width="0.0813%" height="15" fill="rgb(245,182,24)" fg:x="37" fg:w="1"/><text x="3.2581%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.0081%" y="501" width="0.0813%" height="15" fill="rgb(242,14,37)" fg:x="37" fg:w="1"/><text x="3.2581%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.0081%" y="485" width="0.0813%" height="15" fill="rgb(246,228,12)" fg:x="37" fg:w="1"/><text x="3.2581%" y="495.50"></text></g><g><title>plugins_core::build::Build::holding (7 samples, 0.57%)</title><rect x="2.6016%" y="693" width="0.5691%" height="15" fill="rgb(213,55,15)" fg:x="32" fg:w="7"/><text x="2.8516%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.33%)</title><rect x="2.8455%" y="677" width="0.3252%" height="15" fill="rgb(209,9,3)" fg:x="35" fg:w="4"/><text x="3.0955%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="3.0081%" y="661" width="0.1626%" height="15" fill="rgb(230,59,30)" fg:x="37" fg:w="2"/><text x="3.2581%" y="671.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="3.0081%" y="645" width="0.1626%" height="15" fill="rgb(209,121,21)" fg:x="37" fg:w="2"/><text x="3.2581%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="3.0081%" y="629" width="0.1626%" height="15" fill="rgb(220,109,13)" fg:x="37" fg:w="2"/><text x="3.2581%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.0894%" y="613" width="0.0813%" height="15" fill="rgb(232,18,1)" fg:x="38" fg:w="1"/><text x="3.3394%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.0894%" y="597" width="0.0813%" height="15" fill="rgb(215,41,42)" fg:x="38" fg:w="1"/><text x="3.3394%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.0894%" y="581" width="0.0813%" height="15" fill="rgb(224,123,36)" fg:x="38" fg:w="1"/><text x="3.3394%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.0894%" y="565" width="0.0813%" height="15" fill="rgb(240,125,3)" fg:x="38" fg:w="1"/><text x="3.3394%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.0894%" y="549" width="0.0813%" height="15" fill="rgb(205,98,50)" fg:x="38" fg:w="1"/><text x="3.3394%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.0894%" y="533" width="0.0813%" height="15" fill="rgb(205,185,37)" fg:x="38" fg:w="1"/><text x="3.3394%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.0894%" y="517" width="0.0813%" height="15" fill="rgb(238,207,15)" fg:x="38" fg:w="1"/><text x="3.3394%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.0894%" y="501" width="0.0813%" height="15" fill="rgb(213,199,42)" fg:x="38" fg:w="1"/><text x="3.3394%" y="511.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="3.1707%" y="693" width="0.1626%" height="15" fill="rgb(235,201,11)" fg:x="39" fg:w="2"/><text x="3.4207%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="3.1707%" y="677" width="0.1626%" height="15" fill="rgb(207,46,11)" fg:x="39" fg:w="2"/><text x="3.4207%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.2520%" y="661" width="0.0813%" height="15" fill="rgb(241,35,35)" fg:x="40" fg:w="1"/><text x="3.5020%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.2520%" y="645" width="0.0813%" height="15" fill="rgb(243,32,47)" fg:x="40" fg:w="1"/><text x="3.5020%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.2520%" y="629" width="0.0813%" height="15" fill="rgb(247,202,23)" fg:x="40" fg:w="1"/><text x="3.5020%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.2520%" y="613" width="0.0813%" height="15" fill="rgb(219,102,11)" fg:x="40" fg:w="1"/><text x="3.5020%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.2520%" y="597" width="0.0813%" height="15" fill="rgb(243,110,44)" fg:x="40" fg:w="1"/><text x="3.5020%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.2520%" y="581" width="0.0813%" height="15" fill="rgb(222,74,54)" fg:x="40" fg:w="1"/><text x="3.5020%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.2520%" y="565" width="0.0813%" height="15" fill="rgb(216,99,12)" fg:x="40" fg:w="1"/><text x="3.5020%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.2520%" y="549" width="0.0813%" height="15" fill="rgb(226,22,26)" fg:x="40" fg:w="1"/><text x="3.5020%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.2520%" y="533" width="0.0813%" height="15" fill="rgb(217,163,10)" fg:x="40" fg:w="1"/><text x="3.5020%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.2520%" y="517" width="0.0813%" height="15" fill="rgb(213,25,53)" fg:x="40" fg:w="1"/><text x="3.5020%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.2520%" y="501" width="0.0813%" height="15" fill="rgb(252,105,26)" fg:x="40" fg:w="1"/><text x="3.5020%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.2520%" y="485" width="0.0813%" height="15" fill="rgb(220,39,43)" fg:x="40" fg:w="1"/><text x="3.5020%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.2520%" y="469" width="0.0813%" height="15" fill="rgb(229,68,48)" fg:x="40" fg:w="1"/><text x="3.5020%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.2520%" y="453" width="0.0813%" height="15" fill="rgb(252,8,32)" fg:x="40" fg:w="1"/><text x="3.5020%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.2520%" y="437" width="0.0813%" height="15" fill="rgb(223,20,43)" fg:x="40" fg:w="1"/><text x="3.5020%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.2520%" y="421" width="0.0813%" height="15" fill="rgb(229,81,49)" fg:x="40" fg:w="1"/><text x="3.5020%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.2520%" y="405" width="0.0813%" height="15" fill="rgb(236,28,36)" fg:x="40" fg:w="1"/><text x="3.5020%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="3.3333%" y="597" width="0.0813%" height="15" fill="rgb(249,185,26)" fg:x="41" fg:w="1"/><text x="3.5833%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="3.3333%" y="581" width="0.0813%" height="15" fill="rgb(249,174,33)" fg:x="41" fg:w="1"/><text x="3.5833%" y="591.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="3.3333%" y="565" width="0.0813%" height="15" fill="rgb(233,201,37)" fg:x="41" fg:w="1"/><text x="3.5833%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.3333%" y="549" width="0.0813%" height="15" fill="rgb(221,78,26)" fg:x="41" fg:w="1"/><text x="3.5833%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.3333%" y="533" width="0.0813%" height="15" fill="rgb(250,127,30)" fg:x="41" fg:w="1"/><text x="3.5833%" y="543.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="3.3333%" y="629" width="0.1626%" height="15" fill="rgb(230,49,44)" fg:x="41" fg:w="2"/><text x="3.5833%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="3.3333%" y="613" width="0.1626%" height="15" fill="rgb(229,67,23)" fg:x="41" fg:w="2"/><text x="3.5833%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.4146%" y="597" width="0.0813%" height="15" fill="rgb(249,83,47)" fg:x="42" fg:w="1"/><text x="3.6646%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.4146%" y="581" width="0.0813%" height="15" fill="rgb(215,43,3)" fg:x="42" fg:w="1"/><text x="3.6646%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.4146%" y="565" width="0.0813%" height="15" fill="rgb(238,154,13)" fg:x="42" fg:w="1"/><text x="3.6646%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.4146%" y="549" width="0.0813%" height="15" fill="rgb(219,56,2)" fg:x="42" fg:w="1"/><text x="3.6646%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.4959%" y="597" width="0.0813%" height="15" fill="rgb(233,0,4)" fg:x="43" fg:w="1"/><text x="3.7459%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.4959%" y="581" width="0.0813%" height="15" fill="rgb(235,30,7)" fg:x="43" fg:w="1"/><text x="3.7459%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.4959%" y="565" width="0.0813%" height="15" fill="rgb(250,79,13)" fg:x="43" fg:w="1"/><text x="3.7459%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.4959%" y="549" width="0.0813%" height="15" fill="rgb(211,146,34)" fg:x="43" fg:w="1"/><text x="3.7459%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.4959%" y="533" width="0.0813%" height="15" fill="rgb(228,22,38)" fg:x="43" fg:w="1"/><text x="3.7459%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="3.4959%" y="613" width="0.1626%" height="15" fill="rgb(235,168,5)" fg:x="43" fg:w="2"/><text x="3.7459%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="3.5772%" y="597" width="0.0813%" height="15" fill="rgb(221,155,16)" fg:x="44" fg:w="1"/><text x="3.8272%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.5772%" y="581" width="0.0813%" height="15" fill="rgb(215,215,53)" fg:x="44" fg:w="1"/><text x="3.8272%" y="591.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="3.5772%" y="565" width="0.0813%" height="15" fill="rgb(223,4,10)" fg:x="44" fg:w="1"/><text x="3.8272%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.5772%" y="549" width="0.0813%" height="15" fill="rgb(234,103,6)" fg:x="44" fg:w="1"/><text x="3.8272%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.5772%" y="533" width="0.0813%" height="15" fill="rgb(227,97,0)" fg:x="44" fg:w="1"/><text x="3.8272%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.5772%" y="517" width="0.0813%" height="15" fill="rgb(234,150,53)" fg:x="44" fg:w="1"/><text x="3.8272%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="3.5772%" y="501" width="0.0813%" height="15" fill="rgb(228,201,54)" fg:x="44" fg:w="1"/><text x="3.8272%" y="511.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="3.6585%" y="597" width="0.0813%" height="15" fill="rgb(222,22,37)" fg:x="45" fg:w="1"/><text x="3.9085%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="3.6585%" y="581" width="0.0813%" height="15" fill="rgb(237,53,32)" fg:x="45" fg:w="1"/><text x="3.9085%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.6585%" y="565" width="0.0813%" height="15" fill="rgb(233,25,53)" fg:x="45" fg:w="1"/><text x="3.9085%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.6585%" y="549" width="0.0813%" height="15" fill="rgb(210,40,34)" fg:x="45" fg:w="1"/><text x="3.9085%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.6585%" y="533" width="0.0813%" height="15" fill="rgb(241,220,44)" fg:x="45" fg:w="1"/><text x="3.9085%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.6585%" y="517" width="0.0813%" height="15" fill="rgb(235,28,35)" fg:x="45" fg:w="1"/><text x="3.9085%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.6585%" y="501" width="0.0813%" height="15" fill="rgb(210,56,17)" fg:x="45" fg:w="1"/><text x="3.9085%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.6585%" y="485" width="0.0813%" height="15" fill="rgb(224,130,29)" fg:x="45" fg:w="1"/><text x="3.9085%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.6585%" y="469" width="0.0813%" height="15" fill="rgb(235,212,8)" fg:x="45" fg:w="1"/><text x="3.9085%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.6585%" y="453" width="0.0813%" height="15" fill="rgb(223,33,50)" fg:x="45" fg:w="1"/><text x="3.9085%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.6585%" y="437" width="0.0813%" height="15" fill="rgb(219,149,13)" fg:x="45" fg:w="1"/><text x="3.9085%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="3.6585%" y="421" width="0.0813%" height="15" fill="rgb(250,156,29)" fg:x="45" fg:w="1"/><text x="3.9085%" y="431.50"></text></g><g><title>core::iter::adapters::try_process (6 samples, 0.49%)</title><rect x="3.3333%" y="677" width="0.4878%" height="15" fill="rgb(216,193,19)" fg:x="41" fg:w="6"/><text x="3.5833%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.49%)</title><rect x="3.3333%" y="661" width="0.4878%" height="15" fill="rgb(216,135,14)" fg:x="41" fg:w="6"/><text x="3.5833%" y="671.50"></text></g><g><title>plugins_core::build::QuickThing::make (6 samples, 0.49%)</title><rect x="3.3333%" y="645" width="0.4878%" height="15" fill="rgb(241,47,5)" fg:x="41" fg:w="6"/><text x="3.5833%" y="655.50"></text></g><g><title>plugins_core::build::Build::leads_to (4 samples, 0.33%)</title><rect x="3.4959%" y="629" width="0.3252%" height="15" fill="rgb(233,42,35)" fg:x="43" fg:w="4"/><text x="3.7459%" y="639.50"></text></g><g><title>plugins_core::tools::leads_to (2 samples, 0.16%)</title><rect x="3.6585%" y="613" width="0.1626%" height="15" fill="rgb(231,13,6)" fg:x="45" fg:w="2"/><text x="3.9085%" y="623.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.7398%" y="597" width="0.0813%" height="15" fill="rgb(207,181,40)" fg:x="46" fg:w="1"/><text x="3.9898%" y="607.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Exit&gt;::serialize (1 samples, 0.08%)</title><rect x="3.7398%" y="581" width="0.0813%" height="15" fill="rgb(254,173,49)" fg:x="46" fg:w="1"/><text x="3.9898%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.7398%" y="565" width="0.0813%" height="15" fill="rgb(221,1,38)" fg:x="46" fg:w="1"/><text x="3.9898%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="3.7398%" y="549" width="0.0813%" height="15" fill="rgb(206,124,46)" fg:x="46" fg:w="1"/><text x="3.9898%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.7398%" y="533" width="0.0813%" height="15" fill="rgb(249,21,11)" fg:x="46" fg:w="1"/><text x="3.9898%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.8211%" y="645" width="0.0813%" height="15" fill="rgb(222,201,40)" fg:x="47" fg:w="1"/><text x="4.0711%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.9024%" y="629" width="0.0813%" height="15" fill="rgb(235,61,29)" fg:x="48" fg:w="1"/><text x="4.1524%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (3 samples, 0.24%)</title><rect x="3.8211%" y="661" width="0.2439%" height="15" fill="rgb(219,207,3)" fg:x="47" fg:w="3"/><text x="4.0711%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="3.9024%" y="645" width="0.1626%" height="15" fill="rgb(222,56,46)" fg:x="48" fg:w="2"/><text x="4.1524%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.9837%" y="629" width="0.0813%" height="15" fill="rgb(239,76,54)" fg:x="49" fg:w="1"/><text x="4.2337%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="3.9837%" y="613" width="0.0813%" height="15" fill="rgb(231,124,27)" fg:x="49" fg:w="1"/><text x="4.2337%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.0650%" y="613" width="0.0813%" height="15" fill="rgb(249,195,6)" fg:x="50" fg:w="1"/><text x="4.3150%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="4.0650%" y="597" width="0.0813%" height="15" fill="rgb(237,174,47)" fg:x="50" fg:w="1"/><text x="4.3150%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="4.0650%" y="581" width="0.0813%" height="15" fill="rgb(206,201,31)" fg:x="50" fg:w="1"/><text x="4.3150%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="4.2276%" y="565" width="0.1626%" height="15" fill="rgb(231,57,52)" fg:x="52" fg:w="2"/><text x="4.4776%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="4.2276%" y="549" width="0.1626%" height="15" fill="rgb(248,177,22)" fg:x="52" fg:w="2"/><text x="4.4776%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.2276%" y="533" width="0.1626%" height="15" fill="rgb(215,211,37)" fg:x="52" fg:w="2"/><text x="4.4776%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="4.2276%" y="517" width="0.1626%" height="15" fill="rgb(241,128,51)" fg:x="52" fg:w="2"/><text x="4.4776%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.3089%" y="501" width="0.0813%" height="15" fill="rgb(227,165,31)" fg:x="53" fg:w="1"/><text x="4.5589%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.3089%" y="485" width="0.0813%" height="15" fill="rgb(228,167,24)" fg:x="53" fg:w="1"/><text x="4.5589%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.3089%" y="469" width="0.0813%" height="15" fill="rgb(228,143,12)" fg:x="53" fg:w="1"/><text x="4.5589%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.3089%" y="453" width="0.0813%" height="15" fill="rgb(249,149,8)" fg:x="53" fg:w="1"/><text x="4.5589%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.3902%" y="533" width="0.0813%" height="15" fill="rgb(243,35,44)" fg:x="54" fg:w="1"/><text x="4.6402%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.3902%" y="517" width="0.0813%" height="15" fill="rgb(246,89,9)" fg:x="54" fg:w="1"/><text x="4.6402%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.3902%" y="501" width="0.0813%" height="15" fill="rgb(233,213,13)" fg:x="54" fg:w="1"/><text x="4.6402%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.3902%" y="485" width="0.0813%" height="15" fill="rgb(233,141,41)" fg:x="54" fg:w="1"/><text x="4.6402%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.3902%" y="469" width="0.0813%" height="15" fill="rgb(239,167,4)" fg:x="54" fg:w="1"/><text x="4.6402%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.4715%" y="501" width="0.0813%" height="15" fill="rgb(209,217,16)" fg:x="55" fg:w="1"/><text x="4.7215%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.4715%" y="485" width="0.0813%" height="15" fill="rgb(219,88,35)" fg:x="55" fg:w="1"/><text x="4.7215%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.4715%" y="469" width="0.0813%" height="15" fill="rgb(220,193,23)" fg:x="55" fg:w="1"/><text x="4.7215%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.4715%" y="453" width="0.0813%" height="15" fill="rgb(230,90,52)" fg:x="55" fg:w="1"/><text x="4.7215%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.4715%" y="437" width="0.0813%" height="15" fill="rgb(252,106,19)" fg:x="55" fg:w="1"/><text x="4.7215%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.4715%" y="421" width="0.0813%" height="15" fill="rgb(206,74,20)" fg:x="55" fg:w="1"/><text x="4.7215%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.4715%" y="405" width="0.0813%" height="15" fill="rgb(230,138,44)" fg:x="55" fg:w="1"/><text x="4.7215%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="4.3902%" y="549" width="0.2439%" height="15" fill="rgb(235,182,43)" fg:x="54" fg:w="3"/><text x="4.6402%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.4715%" y="533" width="0.1626%" height="15" fill="rgb(242,16,51)" fg:x="55" fg:w="2"/><text x="4.7215%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.4715%" y="517" width="0.1626%" height="15" fill="rgb(248,9,4)" fg:x="55" fg:w="2"/><text x="4.7215%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.5528%" y="501" width="0.0813%" height="15" fill="rgb(210,31,22)" fg:x="56" fg:w="1"/><text x="4.8028%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.5528%" y="485" width="0.0813%" height="15" fill="rgb(239,54,39)" fg:x="56" fg:w="1"/><text x="4.8028%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.5528%" y="469" width="0.0813%" height="15" fill="rgb(230,99,41)" fg:x="56" fg:w="1"/><text x="4.8028%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.5528%" y="453" width="0.0813%" height="15" fill="rgb(253,106,12)" fg:x="56" fg:w="1"/><text x="4.8028%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.57%)</title><rect x="4.2276%" y="581" width="0.5691%" height="15" fill="rgb(213,46,41)" fg:x="52" fg:w="7"/><text x="4.4776%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="4.3902%" y="565" width="0.4065%" height="15" fill="rgb(215,133,35)" fg:x="54" fg:w="5"/><text x="4.6402%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.6341%" y="549" width="0.1626%" height="15" fill="rgb(213,28,5)" fg:x="57" fg:w="2"/><text x="4.8841%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="4.6341%" y="533" width="0.1626%" height="15" fill="rgb(215,77,49)" fg:x="57" fg:w="2"/><text x="4.8841%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="4.6341%" y="517" width="0.1626%" height="15" fill="rgb(248,100,22)" fg:x="57" fg:w="2"/><text x="4.8841%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="4.6341%" y="501" width="0.1626%" height="15" fill="rgb(208,67,9)" fg:x="57" fg:w="2"/><text x="4.8841%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="4.6341%" y="485" width="0.1626%" height="15" fill="rgb(219,133,21)" fg:x="57" fg:w="2"/><text x="4.8841%" y="495.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="4.6341%" y="469" width="0.1626%" height="15" fill="rgb(246,46,29)" fg:x="57" fg:w="2"/><text x="4.8841%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.7967%" y="517" width="0.0813%" height="15" fill="rgb(246,185,52)" fg:x="59" fg:w="1"/><text x="5.0467%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.8780%" y="501" width="0.0813%" height="15" fill="rgb(252,136,11)" fg:x="60" fg:w="1"/><text x="5.1280%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.8780%" y="485" width="0.0813%" height="15" fill="rgb(219,138,53)" fg:x="60" fg:w="1"/><text x="5.1280%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="4.7967%" y="581" width="0.2439%" height="15" fill="rgb(211,51,23)" fg:x="59" fg:w="3"/><text x="5.0467%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="4.7967%" y="565" width="0.2439%" height="15" fill="rgb(247,221,28)" fg:x="59" fg:w="3"/><text x="5.0467%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="4.7967%" y="549" width="0.2439%" height="15" fill="rgb(251,222,45)" fg:x="59" fg:w="3"/><text x="5.0467%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="4.7967%" y="533" width="0.2439%" height="15" fill="rgb(217,162,53)" fg:x="59" fg:w="3"/><text x="5.0467%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.8780%" y="517" width="0.1626%" height="15" fill="rgb(229,93,14)" fg:x="60" fg:w="2"/><text x="5.1280%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.9593%" y="501" width="0.0813%" height="15" fill="rgb(209,67,49)" fg:x="61" fg:w="1"/><text x="5.2093%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.9593%" y="485" width="0.0813%" height="15" fill="rgb(213,87,29)" fg:x="61" fg:w="1"/><text x="5.2093%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.9593%" y="469" width="0.0813%" height="15" fill="rgb(205,151,52)" fg:x="61" fg:w="1"/><text x="5.2093%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.9593%" y="453" width="0.0813%" height="15" fill="rgb(253,215,39)" fg:x="61" fg:w="1"/><text x="5.2093%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.0407%" y="501" width="0.0813%" height="15" fill="rgb(221,220,41)" fg:x="62" fg:w="1"/><text x="5.2907%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.0407%" y="485" width="0.0813%" height="15" fill="rgb(218,133,21)" fg:x="62" fg:w="1"/><text x="5.2907%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.0407%" y="469" width="0.0813%" height="15" fill="rgb(221,193,43)" fg:x="62" fg:w="1"/><text x="5.2907%" y="479.50"></text></g><g><title>engine::session::Session::flush (17 samples, 1.38%)</title><rect x="3.8211%" y="677" width="1.3821%" height="15" fill="rgb(240,128,52)" fg:x="47" fg:w="17"/><text x="4.0711%" y="687.50"></text></g><g><title>engine::session::Session::save_changes (14 samples, 1.14%)</title><rect x="4.0650%" y="661" width="1.1382%" height="15" fill="rgb(253,114,12)" fg:x="50" fg:w="14"/><text x="4.3150%" y="671.50"></text></g><g><title>engine::session::state::State::close (14 samples, 1.14%)</title><rect x="4.0650%" y="645" width="1.1382%" height="15" fill="rgb(215,223,47)" fg:x="50" fg:w="14"/><text x="4.3150%" y="655.50"></text></g><g><title>engine::session::state::State::flush_entities (14 samples, 1.14%)</title><rect x="4.0650%" y="629" width="1.1382%" height="15" fill="rgb(248,225,23)" fg:x="50" fg:w="14"/><text x="4.3150%" y="639.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (13 samples, 1.06%)</title><rect x="4.1463%" y="613" width="1.0569%" height="15" fill="rgb(250,108,0)" fg:x="51" fg:w="13"/><text x="4.3963%" y="623.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (13 samples, 1.06%)</title><rect x="4.1463%" y="597" width="1.0569%" height="15" fill="rgb(228,208,7)" fg:x="51" fg:w="13"/><text x="4.3963%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="5.0407%" y="581" width="0.1626%" height="15" fill="rgb(244,45,10)" fg:x="62" fg:w="2"/><text x="5.2907%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="5.0407%" y="565" width="0.1626%" height="15" fill="rgb(207,125,25)" fg:x="62" fg:w="2"/><text x="5.2907%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="5.0407%" y="549" width="0.1626%" height="15" fill="rgb(210,195,18)" fg:x="62" fg:w="2"/><text x="5.2907%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="5.0407%" y="533" width="0.1626%" height="15" fill="rgb(249,80,12)" fg:x="62" fg:w="2"/><text x="5.2907%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="5.0407%" y="517" width="0.1626%" height="15" fill="rgb(221,65,9)" fg:x="62" fg:w="2"/><text x="5.2907%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_map (1 samples, 0.08%)</title><rect x="5.1220%" y="501" width="0.0813%" height="15" fill="rgb(235,49,36)" fg:x="63" fg:w="1"/><text x="5.3720%" y="511.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="5.2033%" y="677" width="0.0813%" height="15" fill="rgb(225,32,20)" fg:x="64" fg:w="1"/><text x="5.4533%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::new_blank (1 samples, 0.08%)</title><rect x="5.2033%" y="661" width="0.0813%" height="15" fill="rgb(215,141,46)" fg:x="64" fg:w="1"/><text x="5.4533%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="5.2033%" y="645" width="0.0813%" height="15" fill="rgb(250,160,47)" fg:x="64" fg:w="1"/><text x="5.4533%" y="655.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="5.2033%" y="629" width="0.0813%" height="15" fill="rgb(216,222,40)" fg:x="64" fg:w="1"/><text x="5.4533%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="5.2033%" y="613" width="0.0813%" height="15" fill="rgb(234,217,39)" fg:x="64" fg:w="1"/><text x="5.4533%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="5.2033%" y="597" width="0.0813%" height="15" fill="rgb(207,178,40)" fg:x="64" fg:w="1"/><text x="5.4533%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.2033%" y="581" width="0.0813%" height="15" fill="rgb(221,136,13)" fg:x="64" fg:w="1"/><text x="5.4533%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.2033%" y="565" width="0.0813%" height="15" fill="rgb(249,199,10)" fg:x="64" fg:w="1"/><text x="5.4533%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.2846%" y="645" width="0.0813%" height="15" fill="rgb(249,222,13)" fg:x="65" fg:w="1"/><text x="5.5346%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.2846%" y="629" width="0.0813%" height="15" fill="rgb(244,185,38)" fg:x="65" fg:w="1"/><text x="5.5346%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.2846%" y="613" width="0.0813%" height="15" fill="rgb(236,202,9)" fg:x="65" fg:w="1"/><text x="5.5346%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.2846%" y="597" width="0.0813%" height="15" fill="rgb(250,229,37)" fg:x="65" fg:w="1"/><text x="5.5346%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.2846%" y="581" width="0.0813%" height="15" fill="rgb(206,174,23)" fg:x="65" fg:w="1"/><text x="5.5346%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.2846%" y="565" width="0.0813%" height="15" fill="rgb(211,33,43)" fg:x="65" fg:w="1"/><text x="5.5346%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.2846%" y="549" width="0.0813%" height="15" fill="rgb(245,58,50)" fg:x="65" fg:w="1"/><text x="5.5346%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.2846%" y="533" width="0.0813%" height="15" fill="rgb(244,68,36)" fg:x="65" fg:w="1"/><text x="5.5346%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.2846%" y="517" width="0.0813%" height="15" fill="rgb(232,229,15)" fg:x="65" fg:w="1"/><text x="5.5346%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.2846%" y="501" width="0.0813%" height="15" fill="rgb(254,30,23)" fg:x="65" fg:w="1"/><text x="5.5346%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.2846%" y="485" width="0.0813%" height="15" fill="rgb(235,160,14)" fg:x="65" fg:w="1"/><text x="5.5346%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.2846%" y="469" width="0.0813%" height="15" fill="rgb(212,155,44)" fg:x="65" fg:w="1"/><text x="5.5346%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="5.3659%" y="629" width="0.0813%" height="15" fill="rgb(226,2,50)" fg:x="66" fg:w="1"/><text x="5.6159%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.3659%" y="613" width="0.0813%" height="15" fill="rgb(234,177,6)" fg:x="66" fg:w="1"/><text x="5.6159%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.3659%" y="597" width="0.0813%" height="15" fill="rgb(217,24,9)" fg:x="66" fg:w="1"/><text x="5.6159%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.3659%" y="581" width="0.0813%" height="15" fill="rgb(220,13,46)" fg:x="66" fg:w="1"/><text x="5.6159%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="5.4472%" y="613" width="0.0813%" height="15" fill="rgb(239,221,27)" fg:x="67" fg:w="1"/><text x="5.6972%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.4472%" y="597" width="0.0813%" height="15" fill="rgb(222,198,25)" fg:x="67" fg:w="1"/><text x="5.6972%" y="607.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (3 samples, 0.24%)</title><rect x="5.3659%" y="645" width="0.2439%" height="15" fill="rgb(211,99,13)" fg:x="66" fg:w="3"/><text x="5.6159%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="5.4472%" y="629" width="0.1626%" height="15" fill="rgb(232,111,31)" fg:x="67" fg:w="2"/><text x="5.6972%" y="639.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="5.5285%" y="613" width="0.0813%" height="15" fill="rgb(245,82,37)" fg:x="68" fg:w="1"/><text x="5.7785%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.5285%" y="597" width="0.0813%" height="15" fill="rgb(227,149,46)" fg:x="68" fg:w="1"/><text x="5.7785%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.41%)</title><rect x="5.2846%" y="661" width="0.4065%" height="15" fill="rgb(218,36,50)" fg:x="65" fg:w="5"/><text x="5.5346%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="5.6098%" y="645" width="0.0813%" height="15" fill="rgb(226,80,48)" fg:x="69" fg:w="1"/><text x="5.8598%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="5.6098%" y="629" width="0.0813%" height="15" fill="rgb(238,224,15)" fg:x="69" fg:w="1"/><text x="5.8598%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="5.6098%" y="613" width="0.0813%" height="15" fill="rgb(241,136,10)" fg:x="69" fg:w="1"/><text x="5.8598%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="5.6098%" y="597" width="0.0813%" height="15" fill="rgb(208,32,45)" fg:x="69" fg:w="1"/><text x="5.8598%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="5.6098%" y="581" width="0.0813%" height="15" fill="rgb(207,135,9)" fg:x="69" fg:w="1"/><text x="5.8598%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.6911%" y="501" width="0.0813%" height="15" fill="rgb(206,86,44)" fg:x="70" fg:w="1"/><text x="5.9411%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.6911%" y="485" width="0.0813%" height="15" fill="rgb(245,177,15)" fg:x="70" fg:w="1"/><text x="5.9411%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.6911%" y="469" width="0.0813%" height="15" fill="rgb(206,64,50)" fg:x="70" fg:w="1"/><text x="5.9411%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.6911%" y="453" width="0.0813%" height="15" fill="rgb(234,36,40)" fg:x="70" fg:w="1"/><text x="5.9411%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.6911%" y="437" width="0.0813%" height="15" fill="rgb(213,64,8)" fg:x="70" fg:w="1"/><text x="5.9411%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.6911%" y="421" width="0.0813%" height="15" fill="rgb(210,75,36)" fg:x="70" fg:w="1"/><text x="5.9411%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.6911%" y="405" width="0.0813%" height="15" fill="rgb(229,88,21)" fg:x="70" fg:w="1"/><text x="5.9411%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.6911%" y="389" width="0.0813%" height="15" fill="rgb(252,204,47)" fg:x="70" fg:w="1"/><text x="5.9411%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.6911%" y="373" width="0.0813%" height="15" fill="rgb(208,77,27)" fg:x="70" fg:w="1"/><text x="5.9411%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.6911%" y="357" width="0.0813%" height="15" fill="rgb(221,76,26)" fg:x="70" fg:w="1"/><text x="5.9411%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.6911%" y="341" width="0.0813%" height="15" fill="rgb(225,139,18)" fg:x="70" fg:w="1"/><text x="5.9411%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.6911%" y="325" width="0.0813%" height="15" fill="rgb(230,137,11)" fg:x="70" fg:w="1"/><text x="5.9411%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.6911%" y="309" width="0.0813%" height="15" fill="rgb(212,28,1)" fg:x="70" fg:w="1"/><text x="5.9411%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="5.6911%" y="613" width="0.1626%" height="15" fill="rgb(248,164,17)" fg:x="70" fg:w="2"/><text x="5.9411%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="5.6911%" y="597" width="0.1626%" height="15" fill="rgb(222,171,42)" fg:x="70" fg:w="2"/><text x="5.9411%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="5.6911%" y="581" width="0.1626%" height="15" fill="rgb(243,84,45)" fg:x="70" fg:w="2"/><text x="5.9411%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="5.6911%" y="565" width="0.1626%" height="15" fill="rgb(252,49,23)" fg:x="70" fg:w="2"/><text x="5.9411%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="5.6911%" y="549" width="0.1626%" height="15" fill="rgb(215,19,7)" fg:x="70" fg:w="2"/><text x="5.9411%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="5.6911%" y="533" width="0.1626%" height="15" fill="rgb(238,81,41)" fg:x="70" fg:w="2"/><text x="5.9411%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="5.6911%" y="517" width="0.1626%" height="15" fill="rgb(210,199,37)" fg:x="70" fg:w="2"/><text x="5.9411%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.7724%" y="501" width="0.0813%" height="15" fill="rgb(244,192,49)" fg:x="71" fg:w="1"/><text x="6.0224%" y="511.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="5.6911%" y="645" width="0.2439%" height="15" fill="rgb(226,211,11)" fg:x="70" fg:w="3"/><text x="5.9411%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="5.6911%" y="629" width="0.2439%" height="15" fill="rgb(236,162,54)" fg:x="70" fg:w="3"/><text x="5.9411%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="5.8537%" y="613" width="0.0813%" height="15" fill="rgb(220,229,9)" fg:x="72" fg:w="1"/><text x="6.1037%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.8537%" y="597" width="0.0813%" height="15" fill="rgb(250,87,22)" fg:x="72" fg:w="1"/><text x="6.1037%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.8537%" y="581" width="0.0813%" height="15" fill="rgb(239,43,17)" fg:x="72" fg:w="1"/><text x="6.1037%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8537%" y="565" width="0.0813%" height="15" fill="rgb(231,177,25)" fg:x="72" fg:w="1"/><text x="6.1037%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.8537%" y="549" width="0.0813%" height="15" fill="rgb(219,179,1)" fg:x="72" fg:w="1"/><text x="6.1037%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="5.9350%" y="597" width="0.0813%" height="15" fill="rgb(238,219,53)" fg:x="73" fg:w="1"/><text x="6.1850%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="5.9350%" y="645" width="0.1626%" height="15" fill="rgb(232,167,36)" fg:x="73" fg:w="2"/><text x="6.1850%" y="655.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="5.9350%" y="629" width="0.1626%" height="15" fill="rgb(244,19,51)" fg:x="73" fg:w="2"/><text x="6.1850%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="5.9350%" y="613" width="0.1626%" height="15" fill="rgb(224,6,22)" fg:x="73" fg:w="2"/><text x="6.1850%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.0163%" y="597" width="0.0813%" height="15" fill="rgb(224,145,5)" fg:x="74" fg:w="1"/><text x="6.2663%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="6.0163%" y="581" width="0.0813%" height="15" fill="rgb(234,130,49)" fg:x="74" fg:w="1"/><text x="6.2663%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.0163%" y="565" width="0.0813%" height="15" fill="rgb(254,6,2)" fg:x="74" fg:w="1"/><text x="6.2663%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.0163%" y="549" width="0.0813%" height="15" fill="rgb(208,96,46)" fg:x="74" fg:w="1"/><text x="6.2663%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.0163%" y="533" width="0.0813%" height="15" fill="rgb(239,3,39)" fg:x="74" fg:w="1"/><text x="6.2663%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="6.0163%" y="517" width="0.0813%" height="15" fill="rgb(233,210,1)" fg:x="74" fg:w="1"/><text x="6.2663%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.0976%" y="597" width="0.0813%" height="15" fill="rgb(244,137,37)" fg:x="75" fg:w="1"/><text x="6.3476%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.0976%" y="581" width="0.0813%" height="15" fill="rgb(240,136,2)" fg:x="75" fg:w="1"/><text x="6.3476%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.0976%" y="565" width="0.0813%" height="15" fill="rgb(239,18,37)" fg:x="75" fg:w="1"/><text x="6.3476%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.0976%" y="549" width="0.0813%" height="15" fill="rgb(218,185,22)" fg:x="75" fg:w="1"/><text x="6.3476%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.0976%" y="533" width="0.0813%" height="15" fill="rgb(225,218,4)" fg:x="75" fg:w="1"/><text x="6.3476%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.0976%" y="517" width="0.0813%" height="15" fill="rgb(230,182,32)" fg:x="75" fg:w="1"/><text x="6.3476%" y="527.50"></text></g><g><title>plugins_core::build::Build::holding (12 samples, 0.98%)</title><rect x="5.2846%" y="677" width="0.9756%" height="15" fill="rgb(242,56,43)" fg:x="65" fg:w="12"/><text x="5.5346%" y="687.50"></text></g><g><title>plugins_core::tools::set_container (7 samples, 0.57%)</title><rect x="5.6911%" y="661" width="0.5691%" height="15" fill="rgb(233,99,24)" fg:x="70" fg:w="7"/><text x="5.9411%" y="671.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="6.0976%" y="645" width="0.1626%" height="15" fill="rgb(234,209,42)" fg:x="75" fg:w="2"/><text x="6.3476%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="6.0976%" y="629" width="0.1626%" height="15" fill="rgb(227,7,12)" fg:x="75" fg:w="2"/><text x="6.3476%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="6.0976%" y="613" width="0.1626%" height="15" fill="rgb(245,203,43)" fg:x="75" fg:w="2"/><text x="6.3476%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.1789%" y="597" width="0.0813%" height="15" fill="rgb(238,205,33)" fg:x="76" fg:w="1"/><text x="6.4289%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.1789%" y="581" width="0.0813%" height="15" fill="rgb(231,56,7)" fg:x="76" fg:w="1"/><text x="6.4289%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.1789%" y="565" width="0.0813%" height="15" fill="rgb(244,186,29)" fg:x="76" fg:w="1"/><text x="6.4289%" y="575.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="6.2602%" y="677" width="0.1626%" height="15" fill="rgb(234,111,31)" fg:x="77" fg:w="2"/><text x="6.5102%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="6.2602%" y="661" width="0.1626%" height="15" fill="rgb(241,149,10)" fg:x="77" fg:w="2"/><text x="6.5102%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.3415%" y="645" width="0.0813%" height="15" fill="rgb(249,206,44)" fg:x="78" fg:w="1"/><text x="6.5915%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.3415%" y="629" width="0.0813%" height="15" fill="rgb(251,153,30)" fg:x="78" fg:w="1"/><text x="6.5915%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.3415%" y="613" width="0.0813%" height="15" fill="rgb(239,152,38)" fg:x="78" fg:w="1"/><text x="6.5915%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.3415%" y="597" width="0.0813%" height="15" fill="rgb(249,139,47)" fg:x="78" fg:w="1"/><text x="6.5915%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.3415%" y="581" width="0.0813%" height="15" fill="rgb(244,64,35)" fg:x="78" fg:w="1"/><text x="6.5915%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.3415%" y="565" width="0.0813%" height="15" fill="rgb(216,46,15)" fg:x="78" fg:w="1"/><text x="6.5915%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.3415%" y="549" width="0.0813%" height="15" fill="rgb(250,74,19)" fg:x="78" fg:w="1"/><text x="6.5915%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.3415%" y="533" width="0.0813%" height="15" fill="rgb(249,42,33)" fg:x="78" fg:w="1"/><text x="6.5915%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.3415%" y="517" width="0.0813%" height="15" fill="rgb(242,149,17)" fg:x="78" fg:w="1"/><text x="6.5915%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.4228%" y="597" width="0.0813%" height="15" fill="rgb(244,29,21)" fg:x="79" fg:w="1"/><text x="6.6728%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.4228%" y="581" width="0.0813%" height="15" fill="rgb(220,130,37)" fg:x="79" fg:w="1"/><text x="6.6728%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4228%" y="565" width="0.0813%" height="15" fill="rgb(211,67,2)" fg:x="79" fg:w="1"/><text x="6.6728%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4228%" y="549" width="0.0813%" height="15" fill="rgb(235,68,52)" fg:x="79" fg:w="1"/><text x="6.6728%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4228%" y="533" width="0.0813%" height="15" fill="rgb(246,142,3)" fg:x="79" fg:w="1"/><text x="6.6728%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4228%" y="517" width="0.0813%" height="15" fill="rgb(241,25,7)" fg:x="79" fg:w="1"/><text x="6.6728%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.4228%" y="501" width="0.0813%" height="15" fill="rgb(242,119,39)" fg:x="79" fg:w="1"/><text x="6.6728%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.4228%" y="485" width="0.0813%" height="15" fill="rgb(241,98,45)" fg:x="79" fg:w="1"/><text x="6.6728%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.4228%" y="469" width="0.0813%" height="15" fill="rgb(254,28,30)" fg:x="79" fg:w="1"/><text x="6.6728%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.4228%" y="453" width="0.0813%" height="15" fill="rgb(241,142,54)" fg:x="79" fg:w="1"/><text x="6.6728%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.4228%" y="437" width="0.0813%" height="15" fill="rgb(222,85,15)" fg:x="79" fg:w="1"/><text x="6.6728%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.4228%" y="421" width="0.0813%" height="15" fill="rgb(210,85,47)" fg:x="79" fg:w="1"/><text x="6.6728%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.4228%" y="405" width="0.0813%" height="15" fill="rgb(224,206,25)" fg:x="79" fg:w="1"/><text x="6.6728%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.4228%" y="389" width="0.0813%" height="15" fill="rgb(243,201,19)" fg:x="79" fg:w="1"/><text x="6.6728%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.4228%" y="373" width="0.0813%" height="15" fill="rgb(236,59,4)" fg:x="79" fg:w="1"/><text x="6.6728%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.4228%" y="357" width="0.0813%" height="15" fill="rgb(254,179,45)" fg:x="79" fg:w="1"/><text x="6.6728%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.4228%" y="341" width="0.0813%" height="15" fill="rgb(226,14,10)" fg:x="79" fg:w="1"/><text x="6.6728%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4228%" y="325" width="0.0813%" height="15" fill="rgb(244,27,41)" fg:x="79" fg:w="1"/><text x="6.6728%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="6.4228%" y="661" width="0.1626%" height="15" fill="rgb(235,35,32)" fg:x="79" fg:w="2"/><text x="6.6728%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="6.4228%" y="645" width="0.1626%" height="15" fill="rgb(218,68,31)" fg:x="79" fg:w="2"/><text x="6.6728%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="6.4228%" y="629" width="0.1626%" height="15" fill="rgb(207,120,37)" fg:x="79" fg:w="2"/><text x="6.6728%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="6.4228%" y="613" width="0.1626%" height="15" fill="rgb(227,98,0)" fg:x="79" fg:w="2"/><text x="6.6728%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="6.5041%" y="597" width="0.0813%" height="15" fill="rgb(207,7,3)" fg:x="80" fg:w="1"/><text x="6.7541%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.5041%" y="581" width="0.0813%" height="15" fill="rgb(206,98,19)" fg:x="80" fg:w="1"/><text x="6.7541%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5041%" y="565" width="0.0813%" height="15" fill="rgb(217,5,26)" fg:x="80" fg:w="1"/><text x="6.7541%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5041%" y="549" width="0.0813%" height="15" fill="rgb(235,190,38)" fg:x="80" fg:w="1"/><text x="6.7541%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5041%" y="533" width="0.0813%" height="15" fill="rgb(247,86,24)" fg:x="80" fg:w="1"/><text x="6.7541%" y="543.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="6.5854%" y="645" width="0.1626%" height="15" fill="rgb(205,101,16)" fg:x="81" fg:w="2"/><text x="6.8354%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="6.5854%" y="629" width="0.1626%" height="15" fill="rgb(246,168,33)" fg:x="81" fg:w="2"/><text x="6.8354%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="6.5854%" y="613" width="0.1626%" height="15" fill="rgb(231,114,1)" fg:x="81" fg:w="2"/><text x="6.8354%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.5854%" y="597" width="0.1626%" height="15" fill="rgb(207,184,53)" fg:x="81" fg:w="2"/><text x="6.8354%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="6.5854%" y="581" width="0.1626%" height="15" fill="rgb(224,95,51)" fg:x="81" fg:w="2"/><text x="6.8354%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.5854%" y="565" width="0.1626%" height="15" fill="rgb(212,188,45)" fg:x="81" fg:w="2"/><text x="6.8354%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.5854%" y="549" width="0.1626%" height="15" fill="rgb(223,154,38)" fg:x="81" fg:w="2"/><text x="6.8354%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.6667%" y="533" width="0.0813%" height="15" fill="rgb(251,22,52)" fg:x="82" fg:w="1"/><text x="6.9167%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.6667%" y="517" width="0.0813%" height="15" fill="rgb(229,209,22)" fg:x="82" fg:w="1"/><text x="6.9167%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.6667%" y="501" width="0.0813%" height="15" fill="rgb(234,138,34)" fg:x="82" fg:w="1"/><text x="6.9167%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7480%" y="549" width="0.0813%" height="15" fill="rgb(212,95,11)" fg:x="83" fg:w="1"/><text x="6.9980%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.7480%" y="533" width="0.0813%" height="15" fill="rgb(240,179,47)" fg:x="83" fg:w="1"/><text x="6.9980%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (44 samples, 3.58%)</title><rect x="3.3333%" y="693" width="3.5772%" height="15" fill="rgb(240,163,11)" fg:x="41" fg:w="44"/><text x="3.5833%" y="703.50">plug..</text></g><g><title>plugins_core::build::Build::occupying (6 samples, 0.49%)</title><rect x="6.4228%" y="677" width="0.4878%" height="15" fill="rgb(236,37,12)" fg:x="79" fg:w="6"/><text x="6.6728%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (4 samples, 0.33%)</title><rect x="6.5854%" y="661" width="0.3252%" height="15" fill="rgb(232,164,16)" fg:x="81" fg:w="4"/><text x="6.8354%" y="671.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (2 samples, 0.16%)</title><rect x="6.7480%" y="645" width="0.1626%" height="15" fill="rgb(244,205,15)" fg:x="83" fg:w="2"/><text x="6.9980%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="6.7480%" y="629" width="0.1626%" height="15" fill="rgb(223,117,47)" fg:x="83" fg:w="2"/><text x="6.9980%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="6.7480%" y="613" width="0.1626%" height="15" fill="rgb(244,107,35)" fg:x="83" fg:w="2"/><text x="6.9980%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="6.7480%" y="597" width="0.1626%" height="15" fill="rgb(205,140,8)" fg:x="83" fg:w="2"/><text x="6.9980%" y="607.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.7480%" y="581" width="0.1626%" height="15" fill="rgb(228,84,46)" fg:x="83" fg:w="2"/><text x="6.9980%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="6.7480%" y="565" width="0.1626%" height="15" fill="rgb(254,188,9)" fg:x="83" fg:w="2"/><text x="6.9980%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.8293%" y="549" width="0.0813%" height="15" fill="rgb(206,112,54)" fg:x="84" fg:w="1"/><text x="7.0793%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.8293%" y="533" width="0.0813%" height="15" fill="rgb(216,84,49)" fg:x="84" fg:w="1"/><text x="7.0793%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.8293%" y="517" width="0.0813%" height="15" fill="rgb(214,194,35)" fg:x="84" fg:w="1"/><text x="7.0793%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.8293%" y="501" width="0.0813%" height="15" fill="rgb(249,28,3)" fg:x="84" fg:w="1"/><text x="7.0793%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.8293%" y="485" width="0.0813%" height="15" fill="rgb(222,56,52)" fg:x="84" fg:w="1"/><text x="7.0793%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.9106%" y="661" width="0.0813%" height="15" fill="rgb(245,217,50)" fg:x="85" fg:w="1"/><text x="7.1606%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.9106%" y="645" width="0.0813%" height="15" fill="rgb(213,201,24)" fg:x="85" fg:w="1"/><text x="7.1606%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.9106%" y="629" width="0.0813%" height="15" fill="rgb(248,116,28)" fg:x="85" fg:w="1"/><text x="7.1606%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="6.9106%" y="613" width="0.0813%" height="15" fill="rgb(219,72,43)" fg:x="85" fg:w="1"/><text x="7.1606%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="6.9106%" y="597" width="0.0813%" height="15" fill="rgb(209,138,14)" fg:x="85" fg:w="1"/><text x="7.1606%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.9106%" y="581" width="0.0813%" height="15" fill="rgb(222,18,33)" fg:x="85" fg:w="1"/><text x="7.1606%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="6.9106%" y="565" width="0.0813%" height="15" fill="rgb(213,199,7)" fg:x="85" fg:w="1"/><text x="7.1606%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.9106%" y="549" width="0.0813%" height="15" fill="rgb(250,110,10)" fg:x="85" fg:w="1"/><text x="7.1606%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="6.9106%" y="533" width="0.0813%" height="15" fill="rgb(248,123,6)" fg:x="85" fg:w="1"/><text x="7.1606%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.9106%" y="517" width="0.0813%" height="15" fill="rgb(206,91,31)" fg:x="85" fg:w="1"/><text x="7.1606%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="6.9106%" y="501" width="0.0813%" height="15" fill="rgb(211,154,13)" fg:x="85" fg:w="1"/><text x="7.1606%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.9106%" y="485" width="0.0813%" height="15" fill="rgb(225,148,7)" fg:x="85" fg:w="1"/><text x="7.1606%" y="495.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="6.9106%" y="693" width="0.1626%" height="15" fill="rgb(220,160,43)" fg:x="85" fg:w="2"/><text x="7.1606%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="6.9106%" y="677" width="0.1626%" height="15" fill="rgb(213,52,39)" fg:x="85" fg:w="2"/><text x="7.1606%" y="687.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="6.9919%" y="661" width="0.0813%" height="15" fill="rgb(243,137,7)" fg:x="86" fg:w="1"/><text x="7.2419%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="6.9919%" y="645" width="0.0813%" height="15" fill="rgb(230,79,13)" fg:x="86" fg:w="1"/><text x="7.2419%" y="655.50"></text></g><g><title>kernel::model::props::Props::set_property (1 samples, 0.08%)</title><rect x="6.9919%" y="629" width="0.0813%" height="15" fill="rgb(247,105,23)" fg:x="86" fg:w="1"/><text x="7.2419%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.9919%" y="613" width="0.0813%" height="15" fill="rgb(223,179,41)" fg:x="86" fg:w="1"/><text x="7.2419%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.9919%" y="597" width="0.0813%" height="15" fill="rgb(218,9,34)" fg:x="86" fg:w="1"/><text x="7.2419%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="6.9919%" y="581" width="0.0813%" height="15" fill="rgb(222,106,8)" fg:x="86" fg:w="1"/><text x="7.2419%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="7.0732%" y="661" width="0.0813%" height="15" fill="rgb(211,220,0)" fg:x="87" fg:w="1"/><text x="7.3232%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="7.0732%" y="645" width="0.0813%" height="15" fill="rgb(229,52,16)" fg:x="87" fg:w="1"/><text x="7.3232%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.1545%" y="661" width="0.0813%" height="15" fill="rgb(212,155,18)" fg:x="88" fg:w="1"/><text x="7.4045%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.1545%" y="645" width="0.0813%" height="15" fill="rgb(242,21,14)" fg:x="88" fg:w="1"/><text x="7.4045%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.1545%" y="629" width="0.0813%" height="15" fill="rgb(222,19,48)" fg:x="88" fg:w="1"/><text x="7.4045%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.1545%" y="613" width="0.0813%" height="15" fill="rgb(232,45,27)" fg:x="88" fg:w="1"/><text x="7.4045%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1545%" y="597" width="0.0813%" height="15" fill="rgb(249,103,42)" fg:x="88" fg:w="1"/><text x="7.4045%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.1545%" y="581" width="0.0813%" height="15" fill="rgb(246,81,33)" fg:x="88" fg:w="1"/><text x="7.4045%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1545%" y="565" width="0.0813%" height="15" fill="rgb(252,33,42)" fg:x="88" fg:w="1"/><text x="7.4045%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.1545%" y="549" width="0.0813%" height="15" fill="rgb(209,212,41)" fg:x="88" fg:w="1"/><text x="7.4045%" y="559.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="7.2358%" y="661" width="0.0813%" height="15" fill="rgb(207,154,6)" fg:x="89" fg:w="1"/><text x="7.4858%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="7.2358%" y="645" width="0.0813%" height="15" fill="rgb(223,64,47)" fg:x="89" fg:w="1"/><text x="7.4858%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="7.2358%" y="629" width="0.0813%" height="15" fill="rgb(211,161,38)" fg:x="89" fg:w="1"/><text x="7.4858%" y="639.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.2358%" y="613" width="0.0813%" height="15" fill="rgb(219,138,40)" fg:x="89" fg:w="1"/><text x="7.4858%" y="623.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.2358%" y="597" width="0.0813%" height="15" fill="rgb(241,228,46)" fg:x="89" fg:w="1"/><text x="7.4858%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2358%" y="581" width="0.0813%" height="15" fill="rgb(223,209,38)" fg:x="89" fg:w="1"/><text x="7.4858%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.33%)</title><rect x="7.0732%" y="677" width="0.3252%" height="15" fill="rgb(236,164,45)" fg:x="87" fg:w="4"/><text x="7.3232%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="7.3171%" y="661" width="0.0813%" height="15" fill="rgb(231,15,5)" fg:x="90" fg:w="1"/><text x="7.5671%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.3171%" y="645" width="0.0813%" height="15" fill="rgb(252,35,15)" fg:x="90" fg:w="1"/><text x="7.5671%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.3171%" y="629" width="0.0813%" height="15" fill="rgb(248,181,18)" fg:x="90" fg:w="1"/><text x="7.5671%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.3171%" y="613" width="0.0813%" height="15" fill="rgb(233,39,42)" fg:x="90" fg:w="1"/><text x="7.5671%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.3171%" y="597" width="0.0813%" height="15" fill="rgb(238,110,33)" fg:x="90" fg:w="1"/><text x="7.5671%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.3171%" y="581" width="0.0813%" height="15" fill="rgb(233,195,10)" fg:x="90" fg:w="1"/><text x="7.5671%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.3171%" y="565" width="0.0813%" height="15" fill="rgb(254,105,3)" fg:x="90" fg:w="1"/><text x="7.5671%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.3171%" y="549" width="0.0813%" height="15" fill="rgb(221,225,9)" fg:x="90" fg:w="1"/><text x="7.5671%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.3171%" y="533" width="0.0813%" height="15" fill="rgb(224,227,45)" fg:x="90" fg:w="1"/><text x="7.5671%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.3171%" y="517" width="0.0813%" height="15" fill="rgb(229,198,43)" fg:x="90" fg:w="1"/><text x="7.5671%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.3171%" y="501" width="0.0813%" height="15" fill="rgb(206,209,35)" fg:x="90" fg:w="1"/><text x="7.5671%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.3171%" y="485" width="0.0813%" height="15" fill="rgb(245,195,53)" fg:x="90" fg:w="1"/><text x="7.5671%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.3171%" y="469" width="0.0813%" height="15" fill="rgb(240,92,26)" fg:x="90" fg:w="1"/><text x="7.5671%" y="479.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (78 samples, 6.34%)</title><rect x="1.1382%" y="709" width="6.3415%" height="15" fill="rgb(207,40,23)" fg:x="14" fg:w="78"/><text x="1.3882%" y="719.50">&lt;tests::..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (5 samples, 0.41%)</title><rect x="7.0732%" y="693" width="0.4065%" height="15" fill="rgb(223,111,35)" fg:x="87" fg:w="5"/><text x="7.3232%" y="703.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="7.3984%" y="677" width="0.0813%" height="15" fill="rgb(229,147,28)" fg:x="91" fg:w="1"/><text x="7.6484%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="7.3984%" y="661" width="0.0813%" height="15" fill="rgb(211,29,28)" fg:x="91" fg:w="1"/><text x="7.6484%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.3984%" y="645" width="0.0813%" height="15" fill="rgb(228,72,33)" fg:x="91" fg:w="1"/><text x="7.6484%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.3984%" y="629" width="0.0813%" height="15" fill="rgb(205,214,31)" fg:x="91" fg:w="1"/><text x="7.6484%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.3984%" y="613" width="0.0813%" height="15" fill="rgb(224,111,15)" fg:x="91" fg:w="1"/><text x="7.6484%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.3984%" y="597" width="0.0813%" height="15" fill="rgb(253,21,26)" fg:x="91" fg:w="1"/><text x="7.6484%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="7.3984%" y="581" width="0.0813%" height="15" fill="rgb(245,139,43)" fg:x="91" fg:w="1"/><text x="7.6484%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.3984%" y="565" width="0.0813%" height="15" fill="rgb(252,170,7)" fg:x="91" fg:w="1"/><text x="7.6484%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="7.4797%" y="709" width="0.0813%" height="15" fill="rgb(231,118,14)" fg:x="92" fg:w="1"/><text x="7.7297%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="7.4797%" y="693" width="0.0813%" height="15" fill="rgb(238,83,0)" fg:x="92" fg:w="1"/><text x="7.7297%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="7.4797%" y="677" width="0.0813%" height="15" fill="rgb(221,39,39)" fg:x="92" fg:w="1"/><text x="7.7297%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.4797%" y="661" width="0.0813%" height="15" fill="rgb(222,119,46)" fg:x="92" fg:w="1"/><text x="7.7297%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="7.5610%" y="693" width="0.1626%" height="15" fill="rgb(222,165,49)" fg:x="93" fg:w="2"/><text x="7.8110%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="7.5610%" y="677" width="0.1626%" height="15" fill="rgb(219,113,52)" fg:x="93" fg:w="2"/><text x="7.8110%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.6423%" y="661" width="0.0813%" height="15" fill="rgb(214,7,15)" fg:x="94" fg:w="1"/><text x="7.8923%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.6423%" y="645" width="0.0813%" height="15" fill="rgb(235,32,4)" fg:x="94" fg:w="1"/><text x="7.8923%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="7.6423%" y="629" width="0.0813%" height="15" fill="rgb(238,90,54)" fg:x="94" fg:w="1"/><text x="7.8923%" y="639.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="7.6423%" y="613" width="0.0813%" height="15" fill="rgb(213,208,19)" fg:x="94" fg:w="1"/><text x="7.8923%" y="623.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="7.6423%" y="597" width="0.0813%" height="15" fill="rgb(233,156,4)" fg:x="94" fg:w="1"/><text x="7.8923%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.6423%" y="581" width="0.0813%" height="15" fill="rgb(207,194,5)" fg:x="94" fg:w="1"/><text x="7.8923%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.6423%" y="565" width="0.0813%" height="15" fill="rgb(206,111,30)" fg:x="94" fg:w="1"/><text x="7.8923%" y="575.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="7.6423%" y="549" width="0.0813%" height="15" fill="rgb(243,70,54)" fg:x="94" fg:w="1"/><text x="7.8923%" y="559.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="7.6423%" y="533" width="0.0813%" height="15" fill="rgb(242,28,8)" fg:x="94" fg:w="1"/><text x="7.8923%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="7.7236%" y="645" width="0.0813%" height="15" fill="rgb(219,106,18)" fg:x="95" fg:w="1"/><text x="7.9736%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.7236%" y="629" width="0.0813%" height="15" fill="rgb(244,222,10)" fg:x="95" fg:w="1"/><text x="7.9736%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.7236%" y="613" width="0.0813%" height="15" fill="rgb(236,179,52)" fg:x="95" fg:w="1"/><text x="7.9736%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="7.8049%" y="613" width="0.0813%" height="15" fill="rgb(213,23,39)" fg:x="96" fg:w="1"/><text x="8.0549%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.8049%" y="597" width="0.0813%" height="15" fill="rgb(238,48,10)" fg:x="96" fg:w="1"/><text x="8.0549%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.8049%" y="581" width="0.0813%" height="15" fill="rgb(251,196,23)" fg:x="96" fg:w="1"/><text x="8.0549%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="7.9675%" y="597" width="0.1626%" height="15" fill="rgb(250,152,24)" fg:x="98" fg:w="2"/><text x="8.2175%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.9675%" y="581" width="0.1626%" height="15" fill="rgb(209,150,17)" fg:x="98" fg:w="2"/><text x="8.2175%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="7.9675%" y="565" width="0.1626%" height="15" fill="rgb(234,202,34)" fg:x="98" fg:w="2"/><text x="8.2175%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="7.9675%" y="549" width="0.1626%" height="15" fill="rgb(253,148,53)" fg:x="98" fg:w="2"/><text x="8.2175%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.1301%" y="581" width="0.0813%" height="15" fill="rgb(218,129,16)" fg:x="100" fg:w="1"/><text x="8.3801%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.1301%" y="565" width="0.0813%" height="15" fill="rgb(216,85,19)" fg:x="100" fg:w="1"/><text x="8.3801%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.1301%" y="549" width="0.0813%" height="15" fill="rgb(235,228,7)" fg:x="100" fg:w="1"/><text x="8.3801%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.1301%" y="533" width="0.0813%" height="15" fill="rgb(245,175,0)" fg:x="100" fg:w="1"/><text x="8.3801%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2927%" y="565" width="0.0813%" height="15" fill="rgb(208,168,36)" fg:x="102" fg:w="1"/><text x="8.5427%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2927%" y="549" width="0.0813%" height="15" fill="rgb(246,171,24)" fg:x="102" fg:w="1"/><text x="8.5427%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2927%" y="533" width="0.0813%" height="15" fill="rgb(215,142,24)" fg:x="102" fg:w="1"/><text x="8.5427%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.2927%" y="517" width="0.0813%" height="15" fill="rgb(250,187,7)" fg:x="102" fg:w="1"/><text x="8.5427%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.2927%" y="501" width="0.0813%" height="15" fill="rgb(228,66,33)" fg:x="102" fg:w="1"/><text x="8.5427%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="8.2114%" y="581" width="0.2439%" height="15" fill="rgb(234,215,21)" fg:x="101" fg:w="3"/><text x="8.4614%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.3740%" y="565" width="0.0813%" height="15" fill="rgb(222,191,20)" fg:x="103" fg:w="1"/><text x="8.6240%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="8.1301%" y="597" width="0.4065%" height="15" fill="rgb(245,79,54)" fg:x="100" fg:w="5"/><text x="8.3801%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.4553%" y="581" width="0.0813%" height="15" fill="rgb(240,10,37)" fg:x="104" fg:w="1"/><text x="8.7053%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.73%)</title><rect x="7.8862%" y="613" width="0.7317%" height="15" fill="rgb(214,192,32)" fg:x="97" fg:w="9"/><text x="8.1362%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.5366%" y="597" width="0.0813%" height="15" fill="rgb(209,36,54)" fg:x="105" fg:w="1"/><text x="8.7866%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.5366%" y="581" width="0.0813%" height="15" fill="rgb(220,10,11)" fg:x="105" fg:w="1"/><text x="8.7866%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.5366%" y="565" width="0.0813%" height="15" fill="rgb(221,106,17)" fg:x="105" fg:w="1"/><text x="8.7866%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.5366%" y="549" width="0.0813%" height="15" fill="rgb(251,142,44)" fg:x="105" fg:w="1"/><text x="8.7866%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.5366%" y="533" width="0.0813%" height="15" fill="rgb(238,13,15)" fg:x="105" fg:w="1"/><text x="8.7866%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.5366%" y="517" width="0.0813%" height="15" fill="rgb(208,107,27)" fg:x="105" fg:w="1"/><text x="8.7866%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.89%)</title><rect x="7.8049%" y="629" width="0.8943%" height="15" fill="rgb(205,136,37)" fg:x="96" fg:w="11"/><text x="8.0549%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.6179%" y="613" width="0.0813%" height="15" fill="rgb(250,205,27)" fg:x="106" fg:w="1"/><text x="8.8679%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.6179%" y="597" width="0.0813%" height="15" fill="rgb(210,80,43)" fg:x="106" fg:w="1"/><text x="8.8679%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.6179%" y="581" width="0.0813%" height="15" fill="rgb(247,160,36)" fg:x="106" fg:w="1"/><text x="8.8679%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.6179%" y="565" width="0.0813%" height="15" fill="rgb(234,13,49)" fg:x="106" fg:w="1"/><text x="8.8679%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.6992%" y="629" width="0.0813%" height="15" fill="rgb(234,122,0)" fg:x="107" fg:w="1"/><text x="8.9492%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.6992%" y="613" width="0.0813%" height="15" fill="rgb(207,146,38)" fg:x="107" fg:w="1"/><text x="8.9492%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.6992%" y="597" width="0.0813%" height="15" fill="rgb(207,177,25)" fg:x="107" fg:w="1"/><text x="8.9492%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.6992%" y="581" width="0.0813%" height="15" fill="rgb(211,178,42)" fg:x="107" fg:w="1"/><text x="8.9492%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.6992%" y="565" width="0.0813%" height="15" fill="rgb(230,69,54)" fg:x="107" fg:w="1"/><text x="8.9492%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.6992%" y="549" width="0.0813%" height="15" fill="rgb(214,135,41)" fg:x="107" fg:w="1"/><text x="8.9492%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.6992%" y="533" width="0.0813%" height="15" fill="rgb(237,67,25)" fg:x="107" fg:w="1"/><text x="8.9492%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.6992%" y="517" width="0.0813%" height="15" fill="rgb(222,189,50)" fg:x="107" fg:w="1"/><text x="8.9492%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.6992%" y="501" width="0.0813%" height="15" fill="rgb(245,148,34)" fg:x="107" fg:w="1"/><text x="8.9492%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.7805%" y="597" width="0.0813%" height="15" fill="rgb(222,29,6)" fg:x="108" fg:w="1"/><text x="9.0305%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.8618%" y="549" width="0.0813%" height="15" fill="rgb(221,189,43)" fg:x="109" fg:w="1"/><text x="9.1118%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.9431%" y="549" width="0.0813%" height="15" fill="rgb(207,36,27)" fg:x="110" fg:w="1"/><text x="9.1931%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.9431%" y="533" width="0.0813%" height="15" fill="rgb(217,90,24)" fg:x="110" fg:w="1"/><text x="9.1931%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.0244%" y="485" width="0.0813%" height="15" fill="rgb(224,66,35)" fg:x="111" fg:w="1"/><text x="9.2744%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="9.0244%" y="517" width="0.1626%" height="15" fill="rgb(221,13,50)" fg:x="111" fg:w="2"/><text x="9.2744%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="9.0244%" y="501" width="0.1626%" height="15" fill="rgb(236,68,49)" fg:x="111" fg:w="2"/><text x="9.2744%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.1057%" y="485" width="0.0813%" height="15" fill="rgb(229,146,28)" fg:x="112" fg:w="1"/><text x="9.3557%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.1057%" y="469" width="0.0813%" height="15" fill="rgb(225,31,38)" fg:x="112" fg:w="1"/><text x="9.3557%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.2683%" y="501" width="0.0813%" height="15" fill="rgb(250,208,3)" fg:x="114" fg:w="1"/><text x="9.5183%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="8.8618%" y="597" width="0.5691%" height="15" fill="rgb(246,54,23)" fg:x="109" fg:w="7"/><text x="9.1118%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.57%)</title><rect x="8.8618%" y="581" width="0.5691%" height="15" fill="rgb(243,76,11)" fg:x="109" fg:w="7"/><text x="9.1118%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="8.8618%" y="565" width="0.5691%" height="15" fill="rgb(245,21,50)" fg:x="109" fg:w="7"/><text x="9.1118%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="9.0244%" y="549" width="0.4065%" height="15" fill="rgb(228,9,43)" fg:x="111" fg:w="5"/><text x="9.2744%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="9.0244%" y="533" width="0.4065%" height="15" fill="rgb(208,100,47)" fg:x="111" fg:w="5"/><text x="9.2744%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="9.1870%" y="517" width="0.2439%" height="15" fill="rgb(232,26,8)" fg:x="113" fg:w="3"/><text x="9.4370%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.3496%" y="501" width="0.0813%" height="15" fill="rgb(216,166,38)" fg:x="115" fg:w="1"/><text x="9.5996%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.3496%" y="485" width="0.0813%" height="15" fill="rgb(251,202,51)" fg:x="115" fg:w="1"/><text x="9.5996%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (9 samples, 0.73%)</title><rect x="8.7805%" y="613" width="0.7317%" height="15" fill="rgb(254,216,34)" fg:x="108" fg:w="9"/><text x="9.0305%" y="623.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="9.4309%" y="597" width="0.0813%" height="15" fill="rgb(251,32,27)" fg:x="116" fg:w="1"/><text x="9.6809%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.4309%" y="581" width="0.0813%" height="15" fill="rgb(208,127,28)" fg:x="116" fg:w="1"/><text x="9.6809%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.4309%" y="565" width="0.0813%" height="15" fill="rgb(224,137,22)" fg:x="116" fg:w="1"/><text x="9.6809%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="9.5122%" y="613" width="0.0813%" height="15" fill="rgb(254,70,32)" fg:x="117" fg:w="1"/><text x="9.7622%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="9.5935%" y="581" width="0.0813%" height="15" fill="rgb(229,75,37)" fg:x="118" fg:w="1"/><text x="9.8435%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="9.6748%" y="581" width="0.1626%" height="15" fill="rgb(252,64,23)" fg:x="119" fg:w="2"/><text x="9.9248%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.7561%" y="565" width="0.0813%" height="15" fill="rgb(232,162,48)" fg:x="120" fg:w="1"/><text x="10.0061%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.8374%" y="501" width="0.0813%" height="15" fill="rgb(246,160,12)" fg:x="121" fg:w="1"/><text x="10.0874%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8374%" y="485" width="0.0813%" height="15" fill="rgb(247,166,0)" fg:x="121" fg:w="1"/><text x="10.0874%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="9.8374%" y="533" width="0.1626%" height="15" fill="rgb(249,219,21)" fg:x="121" fg:w="2"/><text x="10.0874%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="9.8374%" y="517" width="0.1626%" height="15" fill="rgb(205,209,3)" fg:x="121" fg:w="2"/><text x="10.0874%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.9187%" y="501" width="0.0813%" height="15" fill="rgb(243,44,1)" fg:x="122" fg:w="1"/><text x="10.1687%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.33%)</title><rect x="9.8374%" y="565" width="0.3252%" height="15" fill="rgb(206,159,16)" fg:x="121" fg:w="4"/><text x="10.0874%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="9.8374%" y="549" width="0.3252%" height="15" fill="rgb(244,77,30)" fg:x="121" fg:w="4"/><text x="10.0874%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.0000%" y="533" width="0.1626%" height="15" fill="rgb(218,69,12)" fg:x="123" fg:w="2"/><text x="10.2500%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.0000%" y="517" width="0.1626%" height="15" fill="rgb(212,87,7)" fg:x="123" fg:w="2"/><text x="10.2500%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.0000%" y="501" width="0.1626%" height="15" fill="rgb(245,114,25)" fg:x="123" fg:w="2"/><text x="10.2500%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.0000%" y="485" width="0.1626%" height="15" fill="rgb(210,61,42)" fg:x="123" fg:w="2"/><text x="10.2500%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.0000%" y="469" width="0.1626%" height="15" fill="rgb(211,52,33)" fg:x="123" fg:w="2"/><text x="10.2500%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.0000%" y="453" width="0.1626%" height="15" fill="rgb(234,58,33)" fg:x="123" fg:w="2"/><text x="10.2500%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.0813%" y="437" width="0.0813%" height="15" fill="rgb(220,115,36)" fg:x="124" fg:w="1"/><text x="10.3313%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.0813%" y="421" width="0.0813%" height="15" fill="rgb(243,153,54)" fg:x="124" fg:w="1"/><text x="10.3313%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0813%" y="405" width="0.0813%" height="15" fill="rgb(251,47,18)" fg:x="124" fg:w="1"/><text x="10.3313%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0813%" y="389" width="0.0813%" height="15" fill="rgb(242,102,42)" fg:x="124" fg:w="1"/><text x="10.3313%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.0813%" y="373" width="0.0813%" height="15" fill="rgb(234,31,38)" fg:x="124" fg:w="1"/><text x="10.3313%" y="383.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.65%)</title><rect x="9.5935%" y="613" width="0.6504%" height="15" fill="rgb(221,117,51)" fg:x="118" fg:w="8"/><text x="9.8435%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.65%)</title><rect x="9.5935%" y="597" width="0.6504%" height="15" fill="rgb(212,20,18)" fg:x="118" fg:w="8"/><text x="9.8435%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.41%)</title><rect x="9.8374%" y="581" width="0.4065%" height="15" fill="rgb(245,133,36)" fg:x="121" fg:w="5"/><text x="10.0874%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1626%" y="565" width="0.0813%" height="15" fill="rgb(212,6,19)" fg:x="125" fg:w="1"/><text x="10.4126%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1626%" y="549" width="0.0813%" height="15" fill="rgb(218,1,36)" fg:x="125" fg:w="1"/><text x="10.4126%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="10.2439%" y="389" width="0.1626%" height="15" fill="rgb(246,84,54)" fg:x="126" fg:w="2"/><text x="10.4939%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.3252%" y="373" width="0.0813%" height="15" fill="rgb(242,110,6)" fg:x="127" fg:w="1"/><text x="10.5752%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3252%" y="357" width="0.0813%" height="15" fill="rgb(214,47,5)" fg:x="127" fg:w="1"/><text x="10.5752%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3252%" y="341" width="0.0813%" height="15" fill="rgb(218,159,25)" fg:x="127" fg:w="1"/><text x="10.5752%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.3252%" y="325" width="0.0813%" height="15" fill="rgb(215,211,28)" fg:x="127" fg:w="1"/><text x="10.5752%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="10.2439%" y="437" width="0.2439%" height="15" fill="rgb(238,59,32)" fg:x="126" fg:w="3"/><text x="10.4939%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="10.2439%" y="421" width="0.2439%" height="15" fill="rgb(226,82,3)" fg:x="126" fg:w="3"/><text x="10.4939%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="10.2439%" y="405" width="0.2439%" height="15" fill="rgb(240,164,32)" fg:x="126" fg:w="3"/><text x="10.4939%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.4065%" y="389" width="0.0813%" height="15" fill="rgb(232,46,7)" fg:x="128" fg:w="1"/><text x="10.6565%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4065%" y="373" width="0.0813%" height="15" fill="rgb(229,129,53)" fg:x="128" fg:w="1"/><text x="10.6565%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="10.2439%" y="549" width="0.3252%" height="15" fill="rgb(234,188,29)" fg:x="126" fg:w="4"/><text x="10.4939%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="10.2439%" y="533" width="0.3252%" height="15" fill="rgb(246,141,4)" fg:x="126" fg:w="4"/><text x="10.4939%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="10.2439%" y="517" width="0.3252%" height="15" fill="rgb(229,23,39)" fg:x="126" fg:w="4"/><text x="10.4939%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="10.2439%" y="501" width="0.3252%" height="15" fill="rgb(206,12,3)" fg:x="126" fg:w="4"/><text x="10.4939%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="10.2439%" y="485" width="0.3252%" height="15" fill="rgb(252,226,20)" fg:x="126" fg:w="4"/><text x="10.4939%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="10.2439%" y="469" width="0.3252%" height="15" fill="rgb(216,123,35)" fg:x="126" fg:w="4"/><text x="10.4939%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="10.2439%" y="453" width="0.3252%" height="15" fill="rgb(212,68,40)" fg:x="126" fg:w="4"/><text x="10.4939%" y="463.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="10.4878%" y="437" width="0.0813%" height="15" fill="rgb(254,125,32)" fg:x="129" fg:w="1"/><text x="10.7378%" y="447.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="10.4878%" y="421" width="0.0813%" height="15" fill="rgb(253,97,22)" fg:x="129" fg:w="1"/><text x="10.7378%" y="431.50"></text></g><g><title>engine::session::Session::close (39 samples, 3.17%)</title><rect x="7.5610%" y="709" width="3.1707%" height="15" fill="rgb(241,101,14)" fg:x="93" fg:w="39"/><text x="7.8110%" y="719.50">eng..</text></g><g><title>engine::session::state::State::close (37 samples, 3.01%)</title><rect x="7.7236%" y="693" width="3.0081%" height="15" fill="rgb(238,103,29)" fg:x="95" fg:w="37"/><text x="7.9736%" y="703.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (37 samples, 3.01%)</title><rect x="7.7236%" y="677" width="3.0081%" height="15" fill="rgb(233,195,47)" fg:x="95" fg:w="37"/><text x="7.9736%" y="687.50">eng..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (37 samples, 3.01%)</title><rect x="7.7236%" y="661" width="3.0081%" height="15" fill="rgb(246,218,30)" fg:x="95" fg:w="37"/><text x="7.9736%" y="671.50">eng..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (36 samples, 2.93%)</title><rect x="7.8049%" y="645" width="2.9268%" height="15" fill="rgb(219,145,47)" fg:x="96" fg:w="36"/><text x="8.0549%" y="655.50">en..</text></g><g><title>kernel::model::any_entity_changes (24 samples, 1.95%)</title><rect x="8.7805%" y="629" width="1.9512%" height="15" fill="rgb(243,12,26)" fg:x="108" fg:w="24"/><text x="9.0305%" y="639.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.49%)</title><rect x="10.2439%" y="613" width="0.4878%" height="15" fill="rgb(214,87,16)" fg:x="126" fg:w="6"/><text x="10.4939%" y="623.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.49%)</title><rect x="10.2439%" y="597" width="0.4878%" height="15" fill="rgb(208,99,42)" fg:x="126" fg:w="6"/><text x="10.4939%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="10.2439%" y="581" width="0.4878%" height="15" fill="rgb(253,99,2)" fg:x="126" fg:w="6"/><text x="10.4939%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="10.2439%" y="565" width="0.4878%" height="15" fill="rgb(220,168,23)" fg:x="126" fg:w="6"/><text x="10.4939%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.5691%" y="549" width="0.1626%" height="15" fill="rgb(242,38,24)" fg:x="130" fg:w="2"/><text x="10.8191%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.6504%" y="533" width="0.0813%" height="15" fill="rgb(225,182,9)" fg:x="131" fg:w="1"/><text x="10.9004%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="10.6504%" y="517" width="0.0813%" height="15" fill="rgb(243,178,37)" fg:x="131" fg:w="1"/><text x="10.9004%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.8130%" y="453" width="0.0813%" height="15" fill="rgb(232,139,19)" fg:x="133" fg:w="1"/><text x="11.0630%" y="463.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="10.7317%" y="501" width="0.2439%" height="15" fill="rgb(225,201,24)" fg:x="132" fg:w="3"/><text x="10.9817%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="10.7317%" y="485" width="0.2439%" height="15" fill="rgb(221,47,46)" fg:x="132" fg:w="3"/><text x="10.9817%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="10.7317%" y="469" width="0.2439%" height="15" fill="rgb(249,23,13)" fg:x="132" fg:w="3"/><text x="10.9817%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.8943%" y="453" width="0.0813%" height="15" fill="rgb(219,9,5)" fg:x="134" fg:w="1"/><text x="11.1443%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.8943%" y="437" width="0.0813%" height="15" fill="rgb(254,171,16)" fg:x="134" fg:w="1"/><text x="11.1443%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.8943%" y="421" width="0.0813%" height="15" fill="rgb(230,171,20)" fg:x="134" fg:w="1"/><text x="11.1443%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.8943%" y="405" width="0.0813%" height="15" fill="rgb(210,71,41)" fg:x="134" fg:w="1"/><text x="11.1443%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.8943%" y="389" width="0.0813%" height="15" fill="rgb(206,173,20)" fg:x="134" fg:w="1"/><text x="11.1443%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.8943%" y="373" width="0.0813%" height="15" fill="rgb(233,88,34)" fg:x="134" fg:w="1"/><text x="11.1443%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.8943%" y="357" width="0.0813%" height="15" fill="rgb(223,209,46)" fg:x="134" fg:w="1"/><text x="11.1443%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.8943%" y="341" width="0.0813%" height="15" fill="rgb(250,43,18)" fg:x="134" fg:w="1"/><text x="11.1443%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.8943%" y="325" width="0.0813%" height="15" fill="rgb(208,13,10)" fg:x="134" fg:w="1"/><text x="11.1443%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.8943%" y="309" width="0.0813%" height="15" fill="rgb(212,200,36)" fg:x="134" fg:w="1"/><text x="11.1443%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.8943%" y="293" width="0.0813%" height="15" fill="rgb(225,90,30)" fg:x="134" fg:w="1"/><text x="11.1443%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.8943%" y="277" width="0.0813%" height="15" fill="rgb(236,182,39)" fg:x="134" fg:w="1"/><text x="11.1443%" y="287.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (5 samples, 0.41%)</title><rect x="10.7317%" y="565" width="0.4065%" height="15" fill="rgb(212,144,35)" fg:x="132" fg:w="5"/><text x="10.9817%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.41%)</title><rect x="10.7317%" y="549" width="0.4065%" height="15" fill="rgb(228,63,44)" fg:x="132" fg:w="5"/><text x="10.9817%" y="559.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.41%)</title><rect x="10.7317%" y="533" width="0.4065%" height="15" fill="rgb(228,109,6)" fg:x="132" fg:w="5"/><text x="10.9817%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (5 samples, 0.41%)</title><rect x="10.7317%" y="517" width="0.4065%" height="15" fill="rgb(238,117,24)" fg:x="132" fg:w="5"/><text x="10.9817%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="10.9756%" y="501" width="0.1626%" height="15" fill="rgb(242,26,26)" fg:x="135" fg:w="2"/><text x="11.2256%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="10.9756%" y="485" width="0.1626%" height="15" fill="rgb(221,92,48)" fg:x="135" fg:w="2"/><text x="11.2256%" y="495.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (6 samples, 0.49%)</title><rect x="10.7317%" y="629" width="0.4878%" height="15" fill="rgb(209,209,32)" fg:x="132" fg:w="6"/><text x="10.9817%" y="639.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (6 samples, 0.49%)</title><rect x="10.7317%" y="613" width="0.4878%" height="15" fill="rgb(221,70,22)" fg:x="132" fg:w="6"/><text x="10.9817%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.49%)</title><rect x="10.7317%" y="597" width="0.4878%" height="15" fill="rgb(248,145,5)" fg:x="132" fg:w="6"/><text x="10.9817%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.49%)</title><rect x="10.7317%" y="581" width="0.4878%" height="15" fill="rgb(226,116,26)" fg:x="132" fg:w="6"/><text x="10.9817%" y="591.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.1382%" y="565" width="0.0813%" height="15" fill="rgb(244,5,17)" fg:x="137" fg:w="1"/><text x="11.3882%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.1382%" y="549" width="0.0813%" height="15" fill="rgb(252,159,33)" fg:x="137" fg:w="1"/><text x="11.3882%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.1382%" y="533" width="0.0813%" height="15" fill="rgb(206,71,0)" fg:x="137" fg:w="1"/><text x="11.3882%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.1382%" y="517" width="0.0813%" height="15" fill="rgb(233,118,54)" fg:x="137" fg:w="1"/><text x="11.3882%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.1382%" y="501" width="0.0813%" height="15" fill="rgb(234,83,48)" fg:x="137" fg:w="1"/><text x="11.3882%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.1382%" y="485" width="0.0813%" height="15" fill="rgb(228,3,54)" fg:x="137" fg:w="1"/><text x="11.3882%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.1382%" y="469" width="0.0813%" height="15" fill="rgb(226,155,13)" fg:x="137" fg:w="1"/><text x="11.3882%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.1382%" y="453" width="0.0813%" height="15" fill="rgb(241,28,37)" fg:x="137" fg:w="1"/><text x="11.3882%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.1382%" y="437" width="0.0813%" height="15" fill="rgb(233,93,10)" fg:x="137" fg:w="1"/><text x="11.3882%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.1382%" y="421" width="0.0813%" height="15" fill="rgb(225,113,19)" fg:x="137" fg:w="1"/><text x="11.3882%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.1382%" y="405" width="0.0813%" height="15" fill="rgb(241,2,18)" fg:x="137" fg:w="1"/><text x="11.3882%" y="415.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="11.3008%" y="469" width="0.0813%" height="15" fill="rgb(228,207,21)" fg:x="139" fg:w="1"/><text x="11.5508%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="11.3008%" y="453" width="0.0813%" height="15" fill="rgb(213,211,35)" fg:x="139" fg:w="1"/><text x="11.5508%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="11.3008%" y="437" width="0.0813%" height="15" fill="rgb(209,83,10)" fg:x="139" fg:w="1"/><text x="11.5508%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="11.3008%" y="421" width="0.0813%" height="15" fill="rgb(209,164,1)" fg:x="139" fg:w="1"/><text x="11.5508%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.3821%" y="421" width="0.0813%" height="15" fill="rgb(213,184,43)" fg:x="140" fg:w="1"/><text x="11.6321%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.3821%" y="405" width="0.0813%" height="15" fill="rgb(231,61,34)" fg:x="140" fg:w="1"/><text x="11.6321%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.3821%" y="389" width="0.0813%" height="15" fill="rgb(235,75,3)" fg:x="140" fg:w="1"/><text x="11.6321%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.3821%" y="373" width="0.0813%" height="15" fill="rgb(220,106,47)" fg:x="140" fg:w="1"/><text x="11.6321%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.3821%" y="357" width="0.0813%" height="15" fill="rgb(210,196,33)" fg:x="140" fg:w="1"/><text x="11.6321%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.3821%" y="341" width="0.0813%" height="15" fill="rgb(229,154,42)" fg:x="140" fg:w="1"/><text x="11.6321%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.3821%" y="325" width="0.0813%" height="15" fill="rgb(228,114,26)" fg:x="140" fg:w="1"/><text x="11.6321%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.3821%" y="309" width="0.0813%" height="15" fill="rgb(208,144,1)" fg:x="140" fg:w="1"/><text x="11.6321%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.3821%" y="293" width="0.0813%" height="15" fill="rgb(239,112,37)" fg:x="140" fg:w="1"/><text x="11.6321%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.3821%" y="277" width="0.0813%" height="15" fill="rgb(210,96,50)" fg:x="140" fg:w="1"/><text x="11.6321%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.3821%" y="261" width="0.0813%" height="15" fill="rgb(222,178,2)" fg:x="140" fg:w="1"/><text x="11.6321%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.3821%" y="245" width="0.0813%" height="15" fill="rgb(226,74,18)" fg:x="140" fg:w="1"/><text x="11.6321%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.3821%" y="229" width="0.0813%" height="15" fill="rgb(225,67,54)" fg:x="140" fg:w="1"/><text x="11.6321%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.3821%" y="213" width="0.0813%" height="15" fill="rgb(251,92,32)" fg:x="140" fg:w="1"/><text x="11.6321%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.3821%" y="197" width="0.0813%" height="15" fill="rgb(228,149,22)" fg:x="140" fg:w="1"/><text x="11.6321%" y="207.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="11.3821%" y="469" width="0.1626%" height="15" fill="rgb(243,54,13)" fg:x="140" fg:w="2"/><text x="11.6321%" y="479.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="11.3821%" y="453" width="0.1626%" height="15" fill="rgb(243,180,28)" fg:x="140" fg:w="2"/><text x="11.6321%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="11.3821%" y="437" width="0.1626%" height="15" fill="rgb(208,167,24)" fg:x="140" fg:w="2"/><text x="11.6321%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.4634%" y="421" width="0.0813%" height="15" fill="rgb(245,73,45)" fg:x="141" fg:w="1"/><text x="11.7134%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.4634%" y="405" width="0.0813%" height="15" fill="rgb(237,203,48)" fg:x="141" fg:w="1"/><text x="11.7134%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.4634%" y="389" width="0.0813%" height="15" fill="rgb(211,197,16)" fg:x="141" fg:w="1"/><text x="11.7134%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.4634%" y="373" width="0.0813%" height="15" fill="rgb(243,99,51)" fg:x="141" fg:w="1"/><text x="11.7134%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.4634%" y="357" width="0.0813%" height="15" fill="rgb(215,123,29)" fg:x="141" fg:w="1"/><text x="11.7134%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.4634%" y="341" width="0.0813%" height="15" fill="rgb(239,186,37)" fg:x="141" fg:w="1"/><text x="11.7134%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.4634%" y="325" width="0.0813%" height="15" fill="rgb(252,136,39)" fg:x="141" fg:w="1"/><text x="11.7134%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.4634%" y="309" width="0.0813%" height="15" fill="rgb(223,213,32)" fg:x="141" fg:w="1"/><text x="11.7134%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.4634%" y="293" width="0.0813%" height="15" fill="rgb(233,115,5)" fg:x="141" fg:w="1"/><text x="11.7134%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.4634%" y="277" width="0.0813%" height="15" fill="rgb(207,226,44)" fg:x="141" fg:w="1"/><text x="11.7134%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="11.4634%" y="261" width="0.0813%" height="15" fill="rgb(208,126,0)" fg:x="141" fg:w="1"/><text x="11.7134%" y="271.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="11.4634%" y="245" width="0.0813%" height="15" fill="rgb(244,66,21)" fg:x="141" fg:w="1"/><text x="11.7134%" y="255.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="11.4634%" y="229" width="0.0813%" height="15" fill="rgb(222,97,12)" fg:x="141" fg:w="1"/><text x="11.7134%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::SeqDeserializer as serde::de::SeqAccess&gt;::size_hint (1 samples, 0.08%)</title><rect x="11.4634%" y="213" width="0.0813%" height="15" fill="rgb(219,213,19)" fg:x="141" fg:w="1"/><text x="11.7134%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.6260%" y="373" width="0.1626%" height="15" fill="rgb(252,169,30)" fg:x="143" fg:w="2"/><text x="11.8760%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.7073%" y="357" width="0.0813%" height="15" fill="rgb(206,32,51)" fg:x="144" fg:w="1"/><text x="11.9573%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.33%)</title><rect x="11.5447%" y="421" width="0.3252%" height="15" fill="rgb(250,172,42)" fg:x="142" fg:w="4"/><text x="11.7947%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="11.6260%" y="405" width="0.2439%" height="15" fill="rgb(209,34,43)" fg:x="143" fg:w="3"/><text x="11.8760%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="11.6260%" y="389" width="0.2439%" height="15" fill="rgb(223,11,35)" fg:x="143" fg:w="3"/><text x="11.8760%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.7886%" y="373" width="0.0813%" height="15" fill="rgb(251,219,26)" fg:x="145" fg:w="1"/><text x="12.0386%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.7886%" y="357" width="0.0813%" height="15" fill="rgb(231,119,3)" fg:x="145" fg:w="1"/><text x="12.0386%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.7886%" y="341" width="0.0813%" height="15" fill="rgb(216,97,11)" fg:x="145" fg:w="1"/><text x="12.0386%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.7886%" y="325" width="0.0813%" height="15" fill="rgb(223,59,9)" fg:x="145" fg:w="1"/><text x="12.0386%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.7886%" y="309" width="0.0813%" height="15" fill="rgb(233,93,31)" fg:x="145" fg:w="1"/><text x="12.0386%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="11.7886%" y="293" width="0.0813%" height="15" fill="rgb(239,81,33)" fg:x="145" fg:w="1"/><text x="12.0386%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="11.7886%" y="277" width="0.0813%" height="15" fill="rgb(213,120,34)" fg:x="145" fg:w="1"/><text x="12.0386%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.8699%" y="421" width="0.0813%" height="15" fill="rgb(243,49,53)" fg:x="146" fg:w="1"/><text x="12.1199%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="11.8699%" y="405" width="0.0813%" height="15" fill="rgb(247,216,33)" fg:x="146" fg:w="1"/><text x="12.1199%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.8699%" y="389" width="0.0813%" height="15" fill="rgb(226,26,14)" fg:x="146" fg:w="1"/><text x="12.1199%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.8699%" y="373" width="0.0813%" height="15" fill="rgb(215,49,53)" fg:x="146" fg:w="1"/><text x="12.1199%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.8699%" y="357" width="0.0813%" height="15" fill="rgb(245,162,40)" fg:x="146" fg:w="1"/><text x="12.1199%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.8699%" y="341" width="0.0813%" height="15" fill="rgb(229,68,17)" fg:x="146" fg:w="1"/><text x="12.1199%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.9512%" y="357" width="0.0813%" height="15" fill="rgb(213,182,10)" fg:x="147" fg:w="1"/><text x="12.2012%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.9512%" y="341" width="0.0813%" height="15" fill="rgb(245,125,30)" fg:x="147" fg:w="1"/><text x="12.2012%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.0325%" y="325" width="0.0813%" height="15" fill="rgb(232,202,2)" fg:x="148" fg:w="1"/><text x="12.2825%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.0325%" y="309" width="0.0813%" height="15" fill="rgb(237,140,51)" fg:x="148" fg:w="1"/><text x="12.2825%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="12.0325%" y="293" width="0.0813%" height="15" fill="rgb(236,157,25)" fg:x="148" fg:w="1"/><text x="12.2825%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (8 samples, 0.65%)</title><rect x="11.5447%" y="469" width="0.6504%" height="15" fill="rgb(219,209,0)" fg:x="142" fg:w="8"/><text x="11.7947%" y="479.50"></text></g><g><title>kernel::model::props::load_props (8 samples, 0.65%)</title><rect x="11.5447%" y="453" width="0.6504%" height="15" fill="rgb(240,116,54)" fg:x="142" fg:w="8"/><text x="11.7947%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (8 samples, 0.65%)</title><rect x="11.5447%" y="437" width="0.6504%" height="15" fill="rgb(216,10,36)" fg:x="142" fg:w="8"/><text x="11.7947%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="11.9512%" y="421" width="0.2439%" height="15" fill="rgb(222,72,44)" fg:x="147" fg:w="3"/><text x="12.2012%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="11.9512%" y="405" width="0.2439%" height="15" fill="rgb(232,159,9)" fg:x="147" fg:w="3"/><text x="12.2012%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="11.9512%" y="389" width="0.2439%" height="15" fill="rgb(210,39,32)" fg:x="147" fg:w="3"/><text x="12.2012%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="11.9512%" y="373" width="0.2439%" height="15" fill="rgb(216,194,45)" fg:x="147" fg:w="3"/><text x="12.2012%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="12.0325%" y="357" width="0.1626%" height="15" fill="rgb(218,18,35)" fg:x="148" fg:w="2"/><text x="12.2825%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="12.0325%" y="341" width="0.1626%" height="15" fill="rgb(207,83,51)" fg:x="148" fg:w="2"/><text x="12.2825%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.1138%" y="325" width="0.0813%" height="15" fill="rgb(225,63,43)" fg:x="149" fg:w="1"/><text x="12.3638%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.1138%" y="309" width="0.0813%" height="15" fill="rgb(207,57,36)" fg:x="149" fg:w="1"/><text x="12.3638%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.1138%" y="293" width="0.0813%" height="15" fill="rgb(216,99,33)" fg:x="149" fg:w="1"/><text x="12.3638%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.1138%" y="277" width="0.0813%" height="15" fill="rgb(225,42,16)" fg:x="149" fg:w="1"/><text x="12.3638%" y="287.50"></text></g><g><title>kernel::model::entity::Entity::new_from (1 samples, 0.08%)</title><rect x="12.1951%" y="453" width="0.0813%" height="15" fill="rgb(220,201,45)" fg:x="150" fg:w="1"/><text x="12.4451%" y="463.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.33%)</title><rect x="12.1951%" y="469" width="0.3252%" height="15" fill="rgb(225,33,4)" fg:x="150" fg:w="4"/><text x="12.4451%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="12.2764%" y="453" width="0.2439%" height="15" fill="rgb(224,33,50)" fg:x="151" fg:w="3"/><text x="12.5264%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="12.4390%" y="437" width="0.0813%" height="15" fill="rgb(246,198,51)" fg:x="153" fg:w="1"/><text x="12.6890%" y="447.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="12.4390%" y="421" width="0.0813%" height="15" fill="rgb(205,22,4)" fg:x="153" fg:w="1"/><text x="12.6890%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="12.4390%" y="405" width="0.0813%" height="15" fill="rgb(206,3,8)" fg:x="153" fg:w="1"/><text x="12.6890%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="12.4390%" y="389" width="0.0813%" height="15" fill="rgb(251,23,15)" fg:x="153" fg:w="1"/><text x="12.6890%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="12.4390%" y="373" width="0.0813%" height="15" fill="rgb(252,88,28)" fg:x="153" fg:w="1"/><text x="12.6890%" y="383.50"></text></g><g><title>core::fmt::Formatter::new (1 samples, 0.08%)</title><rect x="12.4390%" y="357" width="0.0813%" height="15" fill="rgb(212,127,14)" fg:x="153" fg:w="1"/><text x="12.6890%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="12.7642%" y="293" width="0.0813%" height="15" fill="rgb(247,145,37)" fg:x="157" fg:w="1"/><text x="13.0142%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="12.7642%" y="277" width="0.0813%" height="15" fill="rgb(209,117,53)" fg:x="157" fg:w="1"/><text x="13.0142%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="12.7642%" y="309" width="0.1626%" height="15" fill="rgb(212,90,42)" fg:x="157" fg:w="2"/><text x="13.0142%" y="319.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="12.8455%" y="293" width="0.0813%" height="15" fill="rgb(218,164,37)" fg:x="158" fg:w="1"/><text x="13.0955%" y="303.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="12.8455%" y="277" width="0.0813%" height="15" fill="rgb(246,65,34)" fg:x="158" fg:w="1"/><text x="13.0955%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (8 samples, 0.65%)</title><rect x="12.6016%" y="325" width="0.6504%" height="15" fill="rgb(231,100,33)" fg:x="155" fg:w="8"/><text x="12.8516%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (4 samples, 0.33%)</title><rect x="12.9268%" y="309" width="0.3252%" height="15" fill="rgb(228,126,14)" fg:x="159" fg:w="4"/><text x="13.1768%" y="319.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="13.0894%" y="293" width="0.1626%" height="15" fill="rgb(215,173,21)" fg:x="161" fg:w="2"/><text x="13.3394%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="13.1707%" y="277" width="0.0813%" height="15" fill="rgb(210,6,40)" fg:x="162" fg:w="1"/><text x="13.4207%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.1707%" y="261" width="0.0813%" height="15" fill="rgb(212,48,18)" fg:x="162" fg:w="1"/><text x="13.4207%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.1707%" y="245" width="0.0813%" height="15" fill="rgb(230,214,11)" fg:x="162" fg:w="1"/><text x="13.4207%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.81%)</title><rect x="12.6016%" y="389" width="0.8130%" height="15" fill="rgb(254,105,39)" fg:x="155" fg:w="10"/><text x="12.8516%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.81%)</title><rect x="12.6016%" y="373" width="0.8130%" height="15" fill="rgb(245,158,5)" fg:x="155" fg:w="10"/><text x="12.8516%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (10 samples, 0.81%)</title><rect x="12.6016%" y="357" width="0.8130%" height="15" fill="rgb(249,208,11)" fg:x="155" fg:w="10"/><text x="12.8516%" y="367.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (10 samples, 0.81%)</title><rect x="12.6016%" y="341" width="0.8130%" height="15" fill="rgb(210,39,28)" fg:x="155" fg:w="10"/><text x="12.8516%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="13.2520%" y="325" width="0.1626%" height="15" fill="rgb(211,56,53)" fg:x="163" fg:w="2"/><text x="13.5020%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="13.2520%" y="309" width="0.1626%" height="15" fill="rgb(226,201,30)" fg:x="163" fg:w="2"/><text x="13.5020%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="13.4959%" y="341" width="0.0813%" height="15" fill="rgb(239,101,34)" fg:x="166" fg:w="1"/><text x="13.7459%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.4959%" y="325" width="0.0813%" height="15" fill="rgb(226,209,5)" fg:x="166" fg:w="1"/><text x="13.7459%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.33%)</title><rect x="13.4146%" y="357" width="0.3252%" height="15" fill="rgb(250,105,47)" fg:x="165" fg:w="4"/><text x="13.6646%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="13.5772%" y="341" width="0.1626%" height="15" fill="rgb(230,72,3)" fg:x="167" fg:w="2"/><text x="13.8272%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="13.5772%" y="325" width="0.1626%" height="15" fill="rgb(232,218,39)" fg:x="167" fg:w="2"/><text x="13.8272%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="13.5772%" y="309" width="0.1626%" height="15" fill="rgb(248,166,6)" fg:x="167" fg:w="2"/><text x="13.8272%" y="319.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="13.5772%" y="293" width="0.1626%" height="15" fill="rgb(247,89,20)" fg:x="167" fg:w="2"/><text x="13.8272%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="13.7398%" y="341" width="0.0813%" height="15" fill="rgb(248,130,54)" fg:x="169" fg:w="1"/><text x="13.9898%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.7398%" y="325" width="0.0813%" height="15" fill="rgb(234,196,4)" fg:x="169" fg:w="1"/><text x="13.9898%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.57%)</title><rect x="13.4146%" y="389" width="0.5691%" height="15" fill="rgb(250,143,31)" fg:x="165" fg:w="7"/><text x="13.6646%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (7 samples, 0.57%)</title><rect x="13.4146%" y="373" width="0.5691%" height="15" fill="rgb(211,110,34)" fg:x="165" fg:w="7"/><text x="13.6646%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="13.7398%" y="357" width="0.2439%" height="15" fill="rgb(215,124,48)" fg:x="169" fg:w="3"/><text x="13.9898%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="13.8211%" y="341" width="0.1626%" height="15" fill="rgb(216,46,13)" fg:x="170" fg:w="2"/><text x="14.0711%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.9024%" y="325" width="0.0813%" height="15" fill="rgb(205,184,25)" fg:x="171" fg:w="1"/><text x="14.1524%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.1463%" y="341" width="0.0813%" height="15" fill="rgb(228,1,10)" fg:x="174" fg:w="1"/><text x="14.3963%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.1463%" y="325" width="0.0813%" height="15" fill="rgb(213,116,27)" fg:x="174" fg:w="1"/><text x="14.3963%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="14.2276%" y="341" width="0.0813%" height="15" fill="rgb(241,95,50)" fg:x="175" fg:w="1"/><text x="14.4776%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.2276%" y="325" width="0.0813%" height="15" fill="rgb(238,48,32)" fg:x="175" fg:w="1"/><text x="14.4776%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.2276%" y="309" width="0.0813%" height="15" fill="rgb(235,113,49)" fg:x="175" fg:w="1"/><text x="14.4776%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.24%)</title><rect x="14.3089%" y="341" width="0.2439%" height="15" fill="rgb(205,127,43)" fg:x="176" fg:w="3"/><text x="14.5589%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="14.3902%" y="325" width="0.1626%" height="15" fill="rgb(250,162,2)" fg:x="177" fg:w="2"/><text x="14.6402%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="14.4715%" y="309" width="0.0813%" height="15" fill="rgb(220,13,41)" fg:x="178" fg:w="1"/><text x="14.7215%" y="319.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="14.7967%" y="309" width="0.1626%" height="15" fill="rgb(249,221,25)" fg:x="182" fg:w="2"/><text x="15.0467%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (30 samples, 2.44%)</title><rect x="14.7154%" y="325" width="2.4390%" height="15" fill="rgb(215,208,19)" fg:x="181" fg:w="30"/><text x="14.9654%" y="335.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (27 samples, 2.20%)</title><rect x="14.9593%" y="309" width="2.1951%" height="15" fill="rgb(236,175,2)" fg:x="184" fg:w="27"/><text x="15.2093%" y="319.50">c..</text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="16.9919%" y="293" width="0.1626%" height="15" fill="rgb(241,52,2)" fg:x="209" fg:w="2"/><text x="17.2419%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="17.3171%" y="309" width="0.0813%" height="15" fill="rgb(248,140,14)" fg:x="213" fg:w="1"/><text x="17.5671%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="17.3171%" y="293" width="0.0813%" height="15" fill="rgb(253,22,42)" fg:x="213" fg:w="1"/><text x="17.5671%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (8 samples, 0.65%)</title><rect x="17.3984%" y="309" width="0.6504%" height="15" fill="rgb(234,61,47)" fg:x="214" fg:w="8"/><text x="17.6484%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="17.9675%" y="293" width="0.0813%" height="15" fill="rgb(208,226,15)" fg:x="221" fg:w="1"/><text x="18.2175%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (12 samples, 0.98%)</title><rect x="17.1545%" y="325" width="0.9756%" height="15" fill="rgb(217,221,4)" fg:x="211" fg:w="12"/><text x="17.4045%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="18.0488%" y="309" width="0.0813%" height="15" fill="rgb(212,174,34)" fg:x="222" fg:w="1"/><text x="18.2988%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="18.0488%" y="293" width="0.0813%" height="15" fill="rgb(253,83,4)" fg:x="222" fg:w="1"/><text x="18.2988%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="18.0488%" y="277" width="0.0813%" height="15" fill="rgb(250,195,49)" fg:x="222" fg:w="1"/><text x="18.2988%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.0488%" y="261" width="0.0813%" height="15" fill="rgb(241,192,25)" fg:x="222" fg:w="1"/><text x="18.2988%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="18.1301%" y="277" width="0.0813%" height="15" fill="rgb(208,124,10)" fg:x="223" fg:w="1"/><text x="18.3801%" y="287.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="18.5366%" y="261" width="0.2439%" height="15" fill="rgb(222,33,0)" fg:x="228" fg:w="3"/><text x="18.7866%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.7805%" y="261" width="0.0813%" height="15" fill="rgb(234,209,28)" fg:x="231" fg:w="1"/><text x="19.0305%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="18.8618%" y="261" width="0.2439%" height="15" fill="rgb(224,11,23)" fg:x="232" fg:w="3"/><text x="19.1118%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="18.9431%" y="245" width="0.1626%" height="15" fill="rgb(232,99,1)" fg:x="233" fg:w="2"/><text x="19.1931%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="18.9431%" y="229" width="0.1626%" height="15" fill="rgb(237,95,45)" fg:x="233" fg:w="2"/><text x="19.1931%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.0244%" y="213" width="0.0813%" height="15" fill="rgb(208,109,11)" fg:x="234" fg:w="1"/><text x="19.2744%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="19.1057%" y="261" width="0.0813%" height="15" fill="rgb(216,190,48)" fg:x="235" fg:w="1"/><text x="19.3557%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="19.1057%" y="245" width="0.0813%" height="15" fill="rgb(251,171,36)" fg:x="235" fg:w="1"/><text x="19.3557%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.1057%" y="229" width="0.0813%" height="15" fill="rgb(230,62,22)" fg:x="235" fg:w="1"/><text x="19.3557%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.1057%" y="213" width="0.0813%" height="15" fill="rgb(225,114,35)" fg:x="235" fg:w="1"/><text x="19.3557%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="19.2683%" y="229" width="0.2439%" height="15" fill="rgb(215,118,42)" fg:x="237" fg:w="3"/><text x="19.5183%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="19.2683%" y="213" width="0.2439%" height="15" fill="rgb(243,119,21)" fg:x="237" fg:w="3"/><text x="19.5183%" y="223.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="19.2683%" y="197" width="0.2439%" height="15" fill="rgb(252,177,53)" fg:x="237" fg:w="3"/><text x="19.5183%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.6748%" y="213" width="0.0813%" height="15" fill="rgb(237,209,29)" fg:x="242" fg:w="1"/><text x="19.9248%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (9 samples, 0.73%)</title><rect x="19.1870%" y="261" width="0.7317%" height="15" fill="rgb(212,65,23)" fg:x="236" fg:w="9"/><text x="19.4370%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 0.65%)</title><rect x="19.2683%" y="245" width="0.6504%" height="15" fill="rgb(230,222,46)" fg:x="237" fg:w="8"/><text x="19.5183%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.41%)</title><rect x="19.5122%" y="229" width="0.4065%" height="15" fill="rgb(215,135,32)" fg:x="240" fg:w="5"/><text x="19.7622%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="19.7561%" y="213" width="0.1626%" height="15" fill="rgb(246,101,22)" fg:x="243" fg:w="2"/><text x="20.0061%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="19.9187%" y="245" width="0.0813%" height="15" fill="rgb(206,107,13)" fg:x="245" fg:w="1"/><text x="20.1687%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="19.9187%" y="261" width="0.1626%" height="15" fill="rgb(250,100,44)" fg:x="245" fg:w="2"/><text x="20.1687%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="20.0000%" y="245" width="0.0813%" height="15" fill="rgb(231,147,38)" fg:x="246" fg:w="1"/><text x="20.2500%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="20.0000%" y="229" width="0.0813%" height="15" fill="rgb(229,8,40)" fg:x="246" fg:w="1"/><text x="20.2500%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (163 samples, 13.25%)</title><rect x="20.0813%" y="261" width="13.2520%" height="15" fill="rgb(221,135,30)" fg:x="247" fg:w="163"/><text x="20.3313%" y="271.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (163 samples, 13.25%)</title><rect x="20.0813%" y="245" width="13.2520%" height="15" fill="rgb(249,193,18)" fg:x="247" fg:w="163"/><text x="20.3313%" y="255.50">regex_automata::nfa:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (163 samples, 13.25%)</title><rect x="20.0813%" y="229" width="13.2520%" height="15" fill="rgb(209,133,39)" fg:x="247" fg:w="163"/><text x="20.3313%" y="239.50">alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.41%)</title><rect x="33.3333%" y="261" width="0.4065%" height="15" fill="rgb(232,100,14)" fg:x="410" fg:w="5"/><text x="33.5833%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.6585%" y="245" width="0.0813%" height="15" fill="rgb(224,185,1)" fg:x="414" fg:w="1"/><text x="33.9085%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (193 samples, 15.69%)</title><rect x="18.1301%" y="309" width="15.6911%" height="15" fill="rgb(223,139,8)" fg:x="223" fg:w="193"/><text x="18.3801%" y="319.50">&lt;core::iter::adapters::m..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (193 samples, 15.69%)</title><rect x="18.1301%" y="293" width="15.6911%" height="15" fill="rgb(232,213,38)" fg:x="223" fg:w="193"/><text x="18.3801%" y="303.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (192 samples, 15.61%)</title><rect x="18.2114%" y="277" width="15.6098%" height="15" fill="rgb(207,94,22)" fg:x="224" fg:w="192"/><text x="18.4614%" y="287.50">regex_automata::nfa::tho..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="33.7398%" y="261" width="0.0813%" height="15" fill="rgb(219,183,54)" fg:x="415" fg:w="1"/><text x="33.9898%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.7398%" y="245" width="0.0813%" height="15" fill="rgb(216,185,54)" fg:x="415" fg:w="1"/><text x="33.9898%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.7398%" y="229" width="0.0813%" height="15" fill="rgb(254,217,39)" fg:x="415" fg:w="1"/><text x="33.9898%" y="239.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="33.9024%" y="293" width="0.1626%" height="15" fill="rgb(240,178,23)" fg:x="417" fg:w="2"/><text x="34.1524%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.0650%" y="293" width="0.0813%" height="15" fill="rgb(218,11,47)" fg:x="419" fg:w="1"/><text x="34.3150%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.0650%" y="277" width="0.0813%" height="15" fill="rgb(218,51,51)" fg:x="419" fg:w="1"/><text x="34.3150%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.0650%" y="261" width="0.0813%" height="15" fill="rgb(238,126,27)" fg:x="419" fg:w="1"/><text x="34.3150%" y="271.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="34.3902%" y="245" width="0.0813%" height="15" fill="rgb(249,202,22)" fg:x="423" fg:w="1"/><text x="34.6402%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="34.3902%" y="229" width="0.0813%" height="15" fill="rgb(254,195,49)" fg:x="423" fg:w="1"/><text x="34.6402%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (7 samples, 0.57%)</title><rect x="34.1463%" y="293" width="0.5691%" height="15" fill="rgb(208,123,14)" fg:x="420" fg:w="7"/><text x="34.3963%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.41%)</title><rect x="34.3089%" y="277" width="0.4065%" height="15" fill="rgb(224,200,8)" fg:x="422" fg:w="5"/><text x="34.5589%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.41%)</title><rect x="34.3089%" y="261" width="0.4065%" height="15" fill="rgb(217,61,36)" fg:x="422" fg:w="5"/><text x="34.5589%" y="271.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="34.4715%" y="245" width="0.2439%" height="15" fill="rgb(206,35,45)" fg:x="424" fg:w="3"/><text x="34.7215%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.33%)</title><rect x="34.7154%" y="293" width="0.3252%" height="15" fill="rgb(217,65,33)" fg:x="427" fg:w="4"/><text x="34.9654%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.9593%" y="277" width="0.0813%" height="15" fill="rgb(222,158,48)" fg:x="430" fg:w="1"/><text x="35.2093%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (16 samples, 1.30%)</title><rect x="33.8211%" y="309" width="1.3008%" height="15" fill="rgb(254,2,54)" fg:x="416" fg:w="16"/><text x="34.0711%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="35.0407%" y="293" width="0.0813%" height="15" fill="rgb(250,143,38)" fg:x="431" fg:w="1"/><text x="35.2907%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (210 samples, 17.07%)</title><rect x="18.1301%" y="325" width="17.0732%" height="15" fill="rgb(248,25,0)" fg:x="223" fg:w="210"/><text x="18.3801%" y="335.50">regex_automata::nfa::thomp..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="35.1220%" y="309" width="0.0813%" height="15" fill="rgb(206,152,27)" fg:x="432" fg:w="1"/><text x="35.3720%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="35.2033%" y="325" width="0.0813%" height="15" fill="rgb(240,77,30)" fg:x="433" fg:w="1"/><text x="35.4533%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="35.2033%" y="309" width="0.0813%" height="15" fill="rgb(231,5,3)" fg:x="433" fg:w="1"/><text x="35.4533%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (257 samples, 20.89%)</title><rect x="14.5528%" y="341" width="20.8943%" height="15" fill="rgb(207,226,32)" fg:x="179" fg:w="257"/><text x="14.8028%" y="351.50">regex_automata::meta::strategy::n..</text></g><g><title>regex_automata::util::prefilter::prefixes (2 samples, 0.16%)</title><rect x="35.2846%" y="325" width="0.1626%" height="15" fill="rgb(222,207,47)" fg:x="434" fg:w="2"/><text x="35.5346%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="35.5285%" y="293" width="0.0813%" height="15" fill="rgb(229,115,45)" fg:x="437" fg:w="1"/><text x="35.7785%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="35.6098%" y="293" width="0.0813%" height="15" fill="rgb(224,191,6)" fg:x="438" fg:w="1"/><text x="35.8598%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="35.6098%" y="277" width="0.0813%" height="15" fill="rgb(230,227,24)" fg:x="438" fg:w="1"/><text x="35.8598%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.6098%" y="261" width="0.0813%" height="15" fill="rgb(228,80,19)" fg:x="438" fg:w="1"/><text x="35.8598%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.49%)</title><rect x="35.4472%" y="341" width="0.4878%" height="15" fill="rgb(247,229,0)" fg:x="436" fg:w="6"/><text x="35.6972%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.49%)</title><rect x="35.4472%" y="325" width="0.4878%" height="15" fill="rgb(237,194,15)" fg:x="436" fg:w="6"/><text x="35.6972%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.41%)</title><rect x="35.5285%" y="309" width="0.4065%" height="15" fill="rgb(219,203,20)" fg:x="437" fg:w="5"/><text x="35.7785%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="35.6911%" y="293" width="0.2439%" height="15" fill="rgb(234,128,8)" fg:x="439" fg:w="3"/><text x="35.9411%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="35.6911%" y="277" width="0.2439%" height="15" fill="rgb(248,202,8)" fg:x="439" fg:w="3"/><text x="35.9411%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="35.6911%" y="261" width="0.2439%" height="15" fill="rgb(206,104,37)" fg:x="439" fg:w="3"/><text x="35.9411%" y="271.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="35.6911%" y="245" width="0.2439%" height="15" fill="rgb(223,8,27)" fg:x="439" fg:w="3"/><text x="35.9411%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="36.0163%" y="309" width="0.1626%" height="15" fill="rgb(216,217,28)" fg:x="443" fg:w="2"/><text x="36.2663%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="36.0163%" y="293" width="0.1626%" height="15" fill="rgb(249,199,1)" fg:x="443" fg:w="2"/><text x="36.2663%" y="303.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (2 samples, 0.16%)</title><rect x="36.0163%" y="277" width="0.1626%" height="15" fill="rgb(240,85,17)" fg:x="443" fg:w="2"/><text x="36.2663%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.33%)</title><rect x="35.9350%" y="341" width="0.3252%" height="15" fill="rgb(206,108,45)" fg:x="442" fg:w="4"/><text x="36.1850%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.33%)</title><rect x="35.9350%" y="325" width="0.3252%" height="15" fill="rgb(245,210,41)" fg:x="442" fg:w="4"/><text x="36.1850%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="36.1789%" y="309" width="0.0813%" height="15" fill="rgb(206,13,37)" fg:x="445" fg:w="1"/><text x="36.4289%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (275 samples, 22.36%)</title><rect x="13.9837%" y="357" width="22.3577%" height="15" fill="rgb(250,61,18)" fg:x="172" fg:w="275"/><text x="14.2337%" y="367.50">regex_automata::meta::regex::Builde..</text></g><g><title>regex_syntax::hir::translate::TranslatorBuilder::build (1 samples, 0.08%)</title><rect x="36.2602%" y="341" width="0.0813%" height="15" fill="rgb(235,172,48)" fg:x="446" fg:w="1"/><text x="36.5102%" y="351.50"></text></g><g><title>regex::regex::string::Regex::new (276 samples, 22.44%)</title><rect x="13.9837%" y="389" width="22.4390%" height="15" fill="rgb(249,201,17)" fg:x="172" fg:w="276"/><text x="14.2337%" y="399.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (276 samples, 22.44%)</title><rect x="13.9837%" y="373" width="22.4390%" height="15" fill="rgb(219,208,6)" fg:x="172" fg:w="276"/><text x="14.2337%" y="383.50">regex::builders::Builder::build_one_..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="36.3415%" y="357" width="0.0813%" height="15" fill="rgb(248,31,23)" fg:x="447" fg:w="1"/><text x="36.5915%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.81%)</title><rect x="36.4228%" y="325" width="0.8130%" height="15" fill="rgb(245,15,42)" fg:x="448" fg:w="10"/><text x="36.6728%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="36.9919%" y="309" width="0.2439%" height="15" fill="rgb(222,217,39)" fg:x="455" fg:w="3"/><text x="37.2419%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (11 samples, 0.89%)</title><rect x="36.4228%" y="341" width="0.8943%" height="15" fill="rgb(210,219,27)" fg:x="448" fg:w="11"/><text x="36.6728%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="37.2358%" y="325" width="0.0813%" height="15" fill="rgb(252,166,36)" fg:x="458" fg:w="1"/><text x="37.4858%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.2358%" y="309" width="0.0813%" height="15" fill="rgb(245,132,34)" fg:x="458" fg:w="1"/><text x="37.4858%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.2358%" y="293" width="0.0813%" height="15" fill="rgb(236,54,3)" fg:x="458" fg:w="1"/><text x="37.4858%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.2358%" y="277" width="0.0813%" height="15" fill="rgb(241,173,43)" fg:x="458" fg:w="1"/><text x="37.4858%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (306 samples, 24.88%)</title><rect x="12.5203%" y="405" width="24.8780%" height="15" fill="rgb(215,190,9)" fg:x="154" fg:w="306"/><text x="12.7703%" y="415.50">indefinite::helper::Helper::get_first_wo..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.98%)</title><rect x="36.4228%" y="389" width="0.9756%" height="15" fill="rgb(242,101,16)" fg:x="448" fg:w="12"/><text x="36.6728%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.98%)</title><rect x="36.4228%" y="373" width="0.9756%" height="15" fill="rgb(223,190,21)" fg:x="448" fg:w="12"/><text x="36.6728%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.98%)</title><rect x="36.4228%" y="357" width="0.9756%" height="15" fill="rgb(215,228,25)" fg:x="448" fg:w="12"/><text x="36.6728%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="37.3171%" y="341" width="0.0813%" height="15" fill="rgb(225,36,22)" fg:x="459" fg:w="1"/><text x="37.5671%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="37.3171%" y="325" width="0.0813%" height="15" fill="rgb(251,106,46)" fg:x="459" fg:w="1"/><text x="37.5671%" y="335.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="37.3984%" y="389" width="0.0813%" height="15" fill="rgb(208,90,1)" fg:x="460" fg:w="1"/><text x="37.6484%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.4797%" y="373" width="0.0813%" height="15" fill="rgb(243,10,4)" fg:x="461" fg:w="1"/><text x="37.7297%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="37.5610%" y="357" width="0.0813%" height="15" fill="rgb(212,137,27)" fg:x="462" fg:w="1"/><text x="37.8110%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="37.5610%" y="341" width="0.0813%" height="15" fill="rgb(231,220,49)" fg:x="462" fg:w="1"/><text x="37.8110%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="37.5610%" y="325" width="0.0813%" height="15" fill="rgb(237,96,20)" fg:x="462" fg:w="1"/><text x="37.8110%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="37.6423%" y="341" width="0.1626%" height="15" fill="rgb(239,229,30)" fg:x="463" fg:w="2"/><text x="37.8923%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="37.7236%" y="325" width="0.0813%" height="15" fill="rgb(219,65,33)" fg:x="464" fg:w="1"/><text x="37.9736%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="37.8049%" y="341" width="0.1626%" height="15" fill="rgb(243,134,7)" fg:x="465" fg:w="2"/><text x="38.0549%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="37.8049%" y="325" width="0.1626%" height="15" fill="rgb(216,177,54)" fg:x="465" fg:w="2"/><text x="38.0549%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.57%)</title><rect x="37.4797%" y="389" width="0.5691%" height="15" fill="rgb(211,160,20)" fg:x="461" fg:w="7"/><text x="37.7297%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.49%)</title><rect x="37.5610%" y="373" width="0.4878%" height="15" fill="rgb(239,85,39)" fg:x="462" fg:w="6"/><text x="37.8110%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (5 samples, 0.41%)</title><rect x="37.6423%" y="357" width="0.4065%" height="15" fill="rgb(232,125,22)" fg:x="463" fg:w="5"/><text x="37.8923%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="37.9675%" y="341" width="0.0813%" height="15" fill="rgb(244,57,34)" fg:x="467" fg:w="1"/><text x="38.2175%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.9675%" y="325" width="0.0813%" height="15" fill="rgb(214,203,32)" fg:x="467" fg:w="1"/><text x="38.2175%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="38.2927%" y="341" width="0.0813%" height="15" fill="rgb(207,58,43)" fg:x="471" fg:w="1"/><text x="38.5427%" y="351.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="38.2927%" y="325" width="0.0813%" height="15" fill="rgb(215,193,15)" fg:x="471" fg:w="1"/><text x="38.5427%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="38.4553%" y="325" width="0.0813%" height="15" fill="rgb(232,15,44)" fg:x="473" fg:w="1"/><text x="38.7053%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (6 samples, 0.49%)</title><rect x="38.1301%" y="373" width="0.4878%" height="15" fill="rgb(212,3,48)" fg:x="469" fg:w="6"/><text x="38.3801%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.41%)</title><rect x="38.2114%" y="357" width="0.4065%" height="15" fill="rgb(218,128,7)" fg:x="470" fg:w="5"/><text x="38.4614%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="38.3740%" y="341" width="0.2439%" height="15" fill="rgb(226,216,39)" fg:x="472" fg:w="3"/><text x="38.6240%" y="351.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="38.5366%" y="325" width="0.0813%" height="15" fill="rgb(243,47,51)" fg:x="474" fg:w="1"/><text x="38.7866%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="39.6748%" y="293" width="0.0813%" height="15" fill="rgb(241,183,40)" fg:x="488" fg:w="1"/><text x="39.9248%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (13 samples, 1.06%)</title><rect x="38.9431%" y="309" width="1.0569%" height="15" fill="rgb(231,217,32)" fg:x="479" fg:w="13"/><text x="39.1931%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="39.7561%" y="293" width="0.2439%" height="15" fill="rgb(229,61,38)" fg:x="489" fg:w="3"/><text x="40.0061%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (15 samples, 1.22%)</title><rect x="38.8618%" y="325" width="1.2195%" height="15" fill="rgb(225,210,5)" fg:x="478" fg:w="15"/><text x="39.1118%" y="335.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="40.0000%" y="309" width="0.0813%" height="15" fill="rgb(231,79,45)" fg:x="492" fg:w="1"/><text x="40.2500%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="40.0000%" y="293" width="0.0813%" height="15" fill="rgb(224,100,7)" fg:x="492" fg:w="1"/><text x="40.2500%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.0000%" y="277" width="0.0813%" height="15" fill="rgb(241,198,18)" fg:x="492" fg:w="1"/><text x="40.2500%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="40.0813%" y="325" width="0.0813%" height="15" fill="rgb(252,97,53)" fg:x="493" fg:w="1"/><text x="40.3313%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="40.0813%" y="309" width="0.0813%" height="15" fill="rgb(220,88,7)" fg:x="493" fg:w="1"/><text x="40.3313%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="40.0813%" y="293" width="0.0813%" height="15" fill="rgb(213,176,14)" fg:x="493" fg:w="1"/><text x="40.3313%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.0813%" y="277" width="0.0813%" height="15" fill="rgb(246,73,7)" fg:x="493" fg:w="1"/><text x="40.3313%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.0813%" y="261" width="0.0813%" height="15" fill="rgb(245,64,36)" fg:x="493" fg:w="1"/><text x="40.3313%" y="271.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (27 samples, 2.20%)</title><rect x="38.0488%" y="389" width="2.1951%" height="15" fill="rgb(245,80,10)" fg:x="468" fg:w="27"/><text x="38.2988%" y="399.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (20 samples, 1.63%)</title><rect x="38.6179%" y="373" width="1.6260%" height="15" fill="rgb(232,107,50)" fg:x="475" fg:w="20"/><text x="38.8679%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (19 samples, 1.54%)</title><rect x="38.6992%" y="357" width="1.5447%" height="15" fill="rgb(253,3,0)" fg:x="476" fg:w="19"/><text x="38.9492%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (19 samples, 1.54%)</title><rect x="38.6992%" y="341" width="1.5447%" height="15" fill="rgb(212,99,53)" fg:x="476" fg:w="19"/><text x="38.9492%" y="351.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="40.1626%" y="325" width="0.0813%" height="15" fill="rgb(249,111,54)" fg:x="494" fg:w="1"/><text x="40.4126%" y="335.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="40.1626%" y="309" width="0.0813%" height="15" fill="rgb(249,55,30)" fg:x="494" fg:w="1"/><text x="40.4126%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="40.2439%" y="373" width="0.0813%" height="15" fill="rgb(237,47,42)" fg:x="495" fg:w="1"/><text x="40.4939%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="40.2439%" y="357" width="0.0813%" height="15" fill="rgb(211,20,18)" fg:x="495" fg:w="1"/><text x="40.4939%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="40.4065%" y="309" width="0.0813%" height="15" fill="rgb(231,203,46)" fg:x="497" fg:w="1"/><text x="40.6565%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="40.4065%" y="293" width="0.0813%" height="15" fill="rgb(237,142,3)" fg:x="497" fg:w="1"/><text x="40.6565%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.4065%" y="277" width="0.0813%" height="15" fill="rgb(241,107,1)" fg:x="497" fg:w="1"/><text x="40.6565%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.4065%" y="261" width="0.0813%" height="15" fill="rgb(229,83,13)" fg:x="497" fg:w="1"/><text x="40.6565%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="40.4878%" y="309" width="0.0813%" height="15" fill="rgb(241,91,40)" fg:x="498" fg:w="1"/><text x="40.7378%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.5691%" y="309" width="0.0813%" height="15" fill="rgb(225,3,45)" fg:x="499" fg:w="1"/><text x="40.8191%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="40.3252%" y="341" width="0.4065%" height="15" fill="rgb(244,223,14)" fg:x="496" fg:w="5"/><text x="40.5752%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="40.3252%" y="325" width="0.4065%" height="15" fill="rgb(224,124,37)" fg:x="496" fg:w="5"/><text x="40.5752%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="40.6504%" y="309" width="0.0813%" height="15" fill="rgb(251,171,30)" fg:x="500" fg:w="1"/><text x="40.9004%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.7317%" y="341" width="0.0813%" height="15" fill="rgb(236,46,54)" fg:x="501" fg:w="1"/><text x="40.9817%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="40.8130%" y="309" width="0.1626%" height="15" fill="rgb(245,213,5)" fg:x="502" fg:w="2"/><text x="41.0630%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="40.9756%" y="309" width="0.0813%" height="15" fill="rgb(230,144,27)" fg:x="504" fg:w="1"/><text x="41.2256%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="40.9756%" y="293" width="0.0813%" height="15" fill="rgb(220,86,6)" fg:x="504" fg:w="1"/><text x="41.2256%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.33%)</title><rect x="40.8130%" y="341" width="0.3252%" height="15" fill="rgb(240,20,13)" fg:x="502" fg:w="4"/><text x="41.0630%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="40.8130%" y="325" width="0.3252%" height="15" fill="rgb(217,89,34)" fg:x="502" fg:w="4"/><text x="41.0630%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="41.0569%" y="309" width="0.0813%" height="15" fill="rgb(229,13,5)" fg:x="505" fg:w="1"/><text x="41.3069%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="41.0569%" y="293" width="0.0813%" height="15" fill="rgb(244,67,35)" fg:x="505" fg:w="1"/><text x="41.3069%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="41.0569%" y="277" width="0.0813%" height="15" fill="rgb(221,40,2)" fg:x="505" fg:w="1"/><text x="41.3069%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.0569%" y="261" width="0.0813%" height="15" fill="rgb(237,157,21)" fg:x="505" fg:w="1"/><text x="41.3069%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (1 samples, 0.08%)</title><rect x="41.1382%" y="341" width="0.0813%" height="15" fill="rgb(222,94,11)" fg:x="506" fg:w="1"/><text x="41.3882%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="41.3821%" y="325" width="0.1626%" height="15" fill="rgb(249,113,6)" fg:x="509" fg:w="2"/><text x="41.6321%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (23 samples, 1.87%)</title><rect x="41.5447%" y="325" width="1.8699%" height="15" fill="rgb(238,137,36)" fg:x="511" fg:w="23"/><text x="41.7947%" y="335.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (23 samples, 1.87%)</title><rect x="41.5447%" y="309" width="1.8699%" height="15" fill="rgb(210,102,26)" fg:x="511" fg:w="23"/><text x="41.7947%" y="319.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.3333%" y="293" width="0.0813%" height="15" fill="rgb(218,30,30)" fg:x="533" fg:w="1"/><text x="43.5833%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.41%)</title><rect x="43.4146%" y="325" width="0.4065%" height="15" fill="rgb(214,67,26)" fg:x="534" fg:w="5"/><text x="43.6646%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.41%)</title><rect x="43.4146%" y="309" width="0.4065%" height="15" fill="rgb(251,9,53)" fg:x="534" fg:w="5"/><text x="43.6646%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="44.4715%" y="293" width="0.0813%" height="15" fill="rgb(228,204,25)" fg:x="547" fg:w="1"/><text x="44.7215%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.33%)</title><rect x="44.5528%" y="293" width="0.3252%" height="15" fill="rgb(207,153,8)" fg:x="548" fg:w="4"/><text x="44.8028%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.33%)</title><rect x="44.5528%" y="277" width="0.3252%" height="15" fill="rgb(242,9,16)" fg:x="548" fg:w="4"/><text x="44.8028%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="44.5528%" y="261" width="0.3252%" height="15" fill="rgb(217,211,10)" fg:x="548" fg:w="4"/><text x="44.8028%" y="271.50"></text></g><g><title>realloc (4 samples, 0.33%)</title><rect x="44.5528%" y="245" width="0.3252%" height="15" fill="rgb(219,228,52)" fg:x="548" fg:w="4"/><text x="44.8028%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="44.8780%" y="293" width="0.2439%" height="15" fill="rgb(231,92,29)" fg:x="552" fg:w="3"/><text x="45.1280%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="44.8780%" y="277" width="0.2439%" height="15" fill="rgb(232,8,23)" fg:x="552" fg:w="3"/><text x="45.1280%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.2846%" y="261" width="0.0813%" height="15" fill="rgb(216,211,34)" fg:x="557" fg:w="1"/><text x="45.5346%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (11 samples, 0.89%)</title><rect x="45.1220%" y="293" width="0.8943%" height="15" fill="rgb(236,151,0)" fg:x="555" fg:w="11"/><text x="45.3720%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (11 samples, 0.89%)</title><rect x="45.1220%" y="277" width="0.8943%" height="15" fill="rgb(209,168,3)" fg:x="555" fg:w="11"/><text x="45.3720%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (8 samples, 0.65%)</title><rect x="45.3659%" y="261" width="0.6504%" height="15" fill="rgb(208,129,28)" fg:x="558" fg:w="8"/><text x="45.6159%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (28 samples, 2.28%)</title><rect x="43.8211%" y="325" width="2.2764%" height="15" fill="rgb(229,78,22)" fg:x="539" fg:w="28"/><text x="44.0711%" y="335.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (26 samples, 2.11%)</title><rect x="43.9837%" y="309" width="2.1138%" height="15" fill="rgb(228,187,13)" fg:x="541" fg:w="26"/><text x="44.2337%" y="319.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="46.0163%" y="293" width="0.0813%" height="15" fill="rgb(240,119,24)" fg:x="566" fg:w="1"/><text x="46.2663%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="46.0976%" y="325" width="0.1626%" height="15" fill="rgb(209,194,42)" fg:x="567" fg:w="2"/><text x="46.3476%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="46.1789%" y="309" width="0.0813%" height="15" fill="rgb(247,200,46)" fg:x="568" fg:w="1"/><text x="46.4289%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="46.1789%" y="293" width="0.0813%" height="15" fill="rgb(218,76,16)" fg:x="568" fg:w="1"/><text x="46.4289%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="46.4228%" y="277" width="0.0813%" height="15" fill="rgb(225,21,48)" fg:x="571" fg:w="1"/><text x="46.6728%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.4228%" y="261" width="0.0813%" height="15" fill="rgb(239,223,50)" fg:x="571" fg:w="1"/><text x="46.6728%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.4228%" y="245" width="0.0813%" height="15" fill="rgb(244,45,21)" fg:x="571" fg:w="1"/><text x="46.6728%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.4228%" y="229" width="0.0813%" height="15" fill="rgb(232,33,43)" fg:x="571" fg:w="1"/><text x="46.6728%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.57%)</title><rect x="47.6423%" y="213" width="0.5691%" height="15" fill="rgb(209,8,3)" fg:x="586" fg:w="7"/><text x="47.8923%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (6 samples, 0.49%)</title><rect x="48.2114%" y="213" width="0.4878%" height="15" fill="rgb(214,25,53)" fg:x="593" fg:w="6"/><text x="48.4614%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="48.4553%" y="197" width="0.2439%" height="15" fill="rgb(254,186,54)" fg:x="596" fg:w="3"/><text x="48.7053%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="48.5366%" y="181" width="0.1626%" height="15" fill="rgb(208,174,49)" fg:x="597" fg:w="2"/><text x="48.7866%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="48.5366%" y="165" width="0.1626%" height="15" fill="rgb(233,191,51)" fg:x="597" fg:w="2"/><text x="48.7866%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (5 samples, 0.41%)</title><rect x="48.6992%" y="213" width="0.4065%" height="15" fill="rgb(222,134,10)" fg:x="599" fg:w="5"/><text x="48.9492%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="48.8618%" y="197" width="0.2439%" height="15" fill="rgb(230,226,20)" fg:x="601" fg:w="3"/><text x="49.1118%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="48.8618%" y="181" width="0.2439%" height="15" fill="rgb(251,111,25)" fg:x="601" fg:w="3"/><text x="49.1118%" y="191.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="48.8618%" y="165" width="0.2439%" height="15" fill="rgb(224,40,46)" fg:x="601" fg:w="3"/><text x="49.1118%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.3496%" y="181" width="0.0813%" height="15" fill="rgb(236,108,47)" fg:x="607" fg:w="1"/><text x="49.5996%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="49.5122%" y="149" width="0.1626%" height="15" fill="rgb(234,93,0)" fg:x="609" fg:w="2"/><text x="49.7622%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="49.6748%" y="149" width="0.0813%" height="15" fill="rgb(224,213,32)" fg:x="611" fg:w="1"/><text x="49.9248%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="49.6748%" y="133" width="0.0813%" height="15" fill="rgb(251,11,48)" fg:x="611" fg:w="1"/><text x="49.9248%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.57%)</title><rect x="49.4309%" y="181" width="0.5691%" height="15" fill="rgb(236,173,5)" fg:x="608" fg:w="7"/><text x="49.6809%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.49%)</title><rect x="49.5122%" y="165" width="0.4878%" height="15" fill="rgb(230,95,12)" fg:x="609" fg:w="6"/><text x="49.7622%" y="175.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="49.7561%" y="149" width="0.2439%" height="15" fill="rgb(232,209,1)" fg:x="612" fg:w="3"/><text x="50.0061%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.9756%" y="165" width="0.0813%" height="15" fill="rgb(232,6,1)" fg:x="627" fg:w="1"/><text x="51.2256%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (25 samples, 2.03%)</title><rect x="49.1057%" y="213" width="2.0325%" height="15" fill="rgb(210,224,50)" fg:x="604" fg:w="25"/><text x="49.3557%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (25 samples, 2.03%)</title><rect x="49.1057%" y="197" width="2.0325%" height="15" fill="rgb(228,127,35)" fg:x="604" fg:w="25"/><text x="49.3557%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (14 samples, 1.14%)</title><rect x="50.0000%" y="181" width="1.1382%" height="15" fill="rgb(245,102,45)" fg:x="615" fg:w="14"/><text x="50.2500%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="51.0569%" y="165" width="0.0813%" height="15" fill="rgb(214,1,49)" fg:x="628" fg:w="1"/><text x="51.3069%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (132 samples, 10.73%)</title><rect x="51.1382%" y="213" width="10.7317%" height="15" fill="rgb(226,163,40)" fg:x="629" fg:w="132"/><text x="51.3882%" y="223.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (131 samples, 10.65%)</title><rect x="51.2195%" y="197" width="10.6504%" height="15" fill="rgb(239,212,28)" fg:x="630" fg:w="131"/><text x="51.4695%" y="207.50">regex_automata::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (131 samples, 10.65%)</title><rect x="51.2195%" y="181" width="10.6504%" height="15" fill="rgb(220,20,13)" fg:x="630" fg:w="131"/><text x="51.4695%" y="191.50">alloc::vec::Vec&lt;..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.33%)</title><rect x="61.8699%" y="213" width="0.3252%" height="15" fill="rgb(210,164,35)" fg:x="761" fg:w="4"/><text x="62.1199%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.1138%" y="197" width="0.0813%" height="15" fill="rgb(248,109,41)" fg:x="764" fg:w="1"/><text x="62.3638%" y="207.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="62.1951%" y="213" width="0.1626%" height="15" fill="rgb(238,23,50)" fg:x="765" fg:w="2"/><text x="62.4451%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (203 samples, 16.50%)</title><rect x="46.4228%" y="309" width="16.5041%" height="15" fill="rgb(211,48,49)" fg:x="571" fg:w="203"/><text x="46.6728%" y="319.50">&lt;core::iter::adapters::ma..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (203 samples, 16.50%)</title><rect x="46.4228%" y="293" width="16.5041%" height="15" fill="rgb(223,36,21)" fg:x="571" fg:w="203"/><text x="46.6728%" y="303.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (202 samples, 16.42%)</title><rect x="46.5041%" y="277" width="16.4228%" height="15" fill="rgb(207,123,46)" fg:x="572" fg:w="202"/><text x="46.7541%" y="287.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (202 samples, 16.42%)</title><rect x="46.5041%" y="261" width="16.4228%" height="15" fill="rgb(240,218,32)" fg:x="572" fg:w="202"/><text x="46.7541%" y="271.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (202 samples, 16.42%)</title><rect x="46.5041%" y="245" width="16.4228%" height="15" fill="rgb(252,5,43)" fg:x="572" fg:w="202"/><text x="46.7541%" y="255.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (202 samples, 16.42%)</title><rect x="46.5041%" y="229" width="16.4228%" height="15" fill="rgb(252,84,19)" fg:x="572" fg:w="202"/><text x="46.7541%" y="239.50">regex_automata::nfa::thom..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (7 samples, 0.57%)</title><rect x="62.3577%" y="213" width="0.5691%" height="15" fill="rgb(243,152,39)" fg:x="767" fg:w="7"/><text x="62.6077%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.41%)</title><rect x="62.5203%" y="197" width="0.4065%" height="15" fill="rgb(234,160,15)" fg:x="769" fg:w="5"/><text x="62.7703%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="62.6829%" y="181" width="0.2439%" height="15" fill="rgb(237,34,20)" fg:x="771" fg:w="3"/><text x="62.9329%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="62.7642%" y="165" width="0.1626%" height="15" fill="rgb(229,97,13)" fg:x="772" fg:w="2"/><text x="63.0142%" y="175.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="63.0894%" y="293" width="0.1626%" height="15" fill="rgb(234,71,50)" fg:x="776" fg:w="2"/><text x="63.3394%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="63.2520%" y="293" width="0.1626%" height="15" fill="rgb(253,155,4)" fg:x="778" fg:w="2"/><text x="63.5020%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="63.4146%" y="293" width="0.1626%" height="15" fill="rgb(222,185,37)" fg:x="780" fg:w="2"/><text x="63.6646%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.4959%" y="277" width="0.0813%" height="15" fill="rgb(251,177,13)" fg:x="781" fg:w="1"/><text x="63.7459%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.4959%" y="261" width="0.0813%" height="15" fill="rgb(250,179,40)" fg:x="781" fg:w="1"/><text x="63.7459%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="63.5772%" y="293" width="0.2439%" height="15" fill="rgb(242,44,2)" fg:x="782" fg:w="3"/><text x="63.8272%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.7398%" y="277" width="0.0813%" height="15" fill="rgb(216,177,13)" fg:x="784" fg:w="1"/><text x="63.9898%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.7398%" y="261" width="0.0813%" height="15" fill="rgb(216,106,43)" fg:x="784" fg:w="1"/><text x="63.9898%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="63.7398%" y="245" width="0.0813%" height="15" fill="rgb(216,183,2)" fg:x="784" fg:w="1"/><text x="63.9898%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.7967%" y="277" width="0.0813%" height="15" fill="rgb(249,75,3)" fg:x="797" fg:w="1"/><text x="65.0467%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (14 samples, 1.14%)</title><rect x="63.8211%" y="293" width="1.1382%" height="15" fill="rgb(219,67,39)" fg:x="785" fg:w="14"/><text x="64.0711%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.8780%" y="277" width="0.0813%" height="15" fill="rgb(253,228,2)" fg:x="798" fg:w="1"/><text x="65.1280%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.8780%" y="261" width="0.0813%" height="15" fill="rgb(235,138,27)" fg:x="798" fg:w="1"/><text x="65.1280%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.8780%" y="245" width="0.0813%" height="15" fill="rgb(236,97,51)" fg:x="798" fg:w="1"/><text x="65.1280%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="64.9593%" y="293" width="0.0813%" height="15" fill="rgb(240,80,30)" fg:x="799" fg:w="1"/><text x="65.2093%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (294 samples, 23.90%)</title><rect x="41.2195%" y="341" width="23.9024%" height="15" fill="rgb(230,178,19)" fg:x="507" fg:w="294"/><text x="41.4695%" y="351.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (232 samples, 18.86%)</title><rect x="46.2602%" y="325" width="18.8618%" height="15" fill="rgb(210,190,27)" fg:x="569" fg:w="232"/><text x="46.5102%" y="335.50">regex_automata::nfa::thompson..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (27 samples, 2.20%)</title><rect x="62.9268%" y="309" width="2.1951%" height="15" fill="rgb(222,107,31)" fg:x="774" fg:w="27"/><text x="63.1768%" y="319.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="65.0407%" y="293" width="0.0813%" height="15" fill="rgb(216,127,34)" fg:x="800" fg:w="1"/><text x="65.2907%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="65.2033%" y="293" width="0.0813%" height="15" fill="rgb(234,116,52)" fg:x="802" fg:w="1"/><text x="65.4533%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.41%)</title><rect x="65.2033%" y="309" width="0.4065%" height="15" fill="rgb(222,124,15)" fg:x="802" fg:w="5"/><text x="65.4533%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.33%)</title><rect x="65.2846%" y="293" width="0.3252%" height="15" fill="rgb(231,179,28)" fg:x="803" fg:w="4"/><text x="65.5346%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="65.2846%" y="277" width="0.3252%" height="15" fill="rgb(226,93,45)" fg:x="803" fg:w="4"/><text x="65.5346%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="65.2846%" y="261" width="0.3252%" height="15" fill="rgb(215,8,51)" fg:x="803" fg:w="4"/><text x="65.5346%" y="271.50"></text></g><g><title>__libc_malloc (4 samples, 0.33%)</title><rect x="65.2846%" y="245" width="0.3252%" height="15" fill="rgb(223,106,5)" fg:x="803" fg:w="4"/><text x="65.5346%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (2 samples, 0.16%)</title><rect x="65.6098%" y="309" width="0.1626%" height="15" fill="rgb(250,191,5)" fg:x="807" fg:w="2"/><text x="65.8598%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="65.7724%" y="309" width="0.0813%" height="15" fill="rgb(242,132,44)" fg:x="809" fg:w="1"/><text x="66.0224%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="65.8537%" y="293" width="0.0813%" height="15" fill="rgb(251,152,29)" fg:x="810" fg:w="1"/><text x="66.1037%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (12 samples, 0.98%)</title><rect x="65.1220%" y="341" width="0.9756%" height="15" fill="rgb(218,179,5)" fg:x="801" fg:w="12"/><text x="65.3720%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (12 samples, 0.98%)</title><rect x="65.1220%" y="325" width="0.9756%" height="15" fill="rgb(227,67,19)" fg:x="801" fg:w="12"/><text x="65.3720%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (3 samples, 0.24%)</title><rect x="65.8537%" y="309" width="0.2439%" height="15" fill="rgb(233,119,31)" fg:x="810" fg:w="3"/><text x="66.1037%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (2 samples, 0.16%)</title><rect x="65.9350%" y="293" width="0.1626%" height="15" fill="rgb(241,120,22)" fg:x="811" fg:w="2"/><text x="66.1850%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.3415%" y="277" width="0.0813%" height="15" fill="rgb(224,102,30)" fg:x="816" fg:w="1"/><text x="66.5915%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.3415%" y="261" width="0.0813%" height="15" fill="rgb(210,164,37)" fg:x="816" fg:w="1"/><text x="66.5915%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.3415%" y="245" width="0.0813%" height="15" fill="rgb(226,191,16)" fg:x="816" fg:w="1"/><text x="66.5915%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.33%)</title><rect x="66.1789%" y="309" width="0.3252%" height="15" fill="rgb(214,40,45)" fg:x="814" fg:w="4"/><text x="66.4289%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.33%)</title><rect x="66.1789%" y="293" width="0.3252%" height="15" fill="rgb(244,29,26)" fg:x="814" fg:w="4"/><text x="66.4289%" y="303.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="66.4228%" y="277" width="0.0813%" height="15" fill="rgb(216,16,5)" fg:x="817" fg:w="1"/><text x="66.6728%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.4228%" y="261" width="0.0813%" height="15" fill="rgb(249,76,35)" fg:x="817" fg:w="1"/><text x="66.6728%" y="271.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="66.5854%" y="293" width="0.0813%" height="15" fill="rgb(207,11,44)" fg:x="819" fg:w="1"/><text x="66.8354%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.5854%" y="277" width="0.0813%" height="15" fill="rgb(228,190,49)" fg:x="819" fg:w="1"/><text x="66.8354%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.5854%" y="261" width="0.0813%" height="15" fill="rgb(214,173,12)" fg:x="819" fg:w="1"/><text x="66.8354%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.5854%" y="245" width="0.0813%" height="15" fill="rgb(218,26,35)" fg:x="819" fg:w="1"/><text x="66.8354%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="66.5041%" y="309" width="0.2439%" height="15" fill="rgb(220,200,19)" fg:x="818" fg:w="3"/><text x="66.7541%" y="319.50"></text></g><g><title>regex_syntax::hir::Properties::repetition (1 samples, 0.08%)</title><rect x="66.6667%" y="293" width="0.0813%" height="15" fill="rgb(239,95,49)" fg:x="820" fg:w="1"/><text x="66.9167%" y="303.50"></text></g><g><title>indefinite::rules::number::Number::check (365 samples, 29.67%)</title><rect x="37.3984%" y="405" width="29.6748%" height="15" fill="rgb(235,85,53)" fg:x="460" fg:w="365"/><text x="37.6484%" y="415.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::new (330 samples, 26.83%)</title><rect x="40.2439%" y="389" width="26.8293%" height="15" fill="rgb(233,133,31)" fg:x="495" fg:w="330"/><text x="40.4939%" y="399.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (329 samples, 26.75%)</title><rect x="40.3252%" y="373" width="26.7480%" height="15" fill="rgb(218,25,20)" fg:x="496" fg:w="329"/><text x="40.5752%" y="383.50">regex::builders::Builder::build_one_string</text></g><g><title>regex_automata::meta::regex::Builder::build (329 samples, 26.75%)</title><rect x="40.3252%" y="357" width="26.7480%" height="15" fill="rgb(252,210,38)" fg:x="496" fg:w="329"/><text x="40.5752%" y="367.50">regex_automata::meta::regex::Builder::build</text></g><g><title>regex_syntax::hir::translate::Translator::translate (12 samples, 0.98%)</title><rect x="66.0976%" y="341" width="0.9756%" height="15" fill="rgb(242,134,21)" fg:x="813" fg:w="12"/><text x="66.3476%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (11 samples, 0.89%)</title><rect x="66.1789%" y="325" width="0.8943%" height="15" fill="rgb(213,28,48)" fg:x="814" fg:w="11"/><text x="66.4289%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (4 samples, 0.33%)</title><rect x="66.7480%" y="309" width="0.3252%" height="15" fill="rgb(250,196,2)" fg:x="821" fg:w="4"/><text x="66.9980%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (4 samples, 0.33%)</title><rect x="66.7480%" y="293" width="0.3252%" height="15" fill="rgb(227,5,17)" fg:x="821" fg:w="4"/><text x="66.9980%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="66.9106%" y="277" width="0.1626%" height="15" fill="rgb(221,226,24)" fg:x="823" fg:w="2"/><text x="67.1606%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.9919%" y="261" width="0.0813%" height="15" fill="rgb(211,5,48)" fg:x="824" fg:w="1"/><text x="67.2419%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.9919%" y="245" width="0.0813%" height="15" fill="rgb(219,150,6)" fg:x="824" fg:w="1"/><text x="67.2419%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="67.1545%" y="325" width="0.0813%" height="15" fill="rgb(251,46,16)" fg:x="826" fg:w="1"/><text x="67.4045%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="67.1545%" y="341" width="0.1626%" height="15" fill="rgb(220,204,40)" fg:x="826" fg:w="2"/><text x="67.4045%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="67.2358%" y="325" width="0.0813%" height="15" fill="rgb(211,85,2)" fg:x="827" fg:w="1"/><text x="67.4858%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="67.2358%" y="309" width="0.0813%" height="15" fill="rgb(229,17,7)" fg:x="827" fg:w="1"/><text x="67.4858%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="67.3984%" y="325" width="0.0813%" height="15" fill="rgb(239,72,28)" fg:x="829" fg:w="1"/><text x="67.6484%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.3984%" y="309" width="0.0813%" height="15" fill="rgb(230,47,54)" fg:x="829" fg:w="1"/><text x="67.6484%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="67.4797%" y="325" width="0.1626%" height="15" fill="rgb(214,50,8)" fg:x="830" fg:w="2"/><text x="67.7297%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="67.4797%" y="309" width="0.1626%" height="15" fill="rgb(216,198,43)" fg:x="830" fg:w="2"/><text x="67.7297%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.57%)</title><rect x="67.1545%" y="373" width="0.5691%" height="15" fill="rgb(234,20,35)" fg:x="826" fg:w="7"/><text x="67.4045%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (7 samples, 0.57%)</title><rect x="67.1545%" y="357" width="0.5691%" height="15" fill="rgb(254,45,19)" fg:x="826" fg:w="7"/><text x="67.4045%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (5 samples, 0.41%)</title><rect x="67.3171%" y="341" width="0.4065%" height="15" fill="rgb(219,14,44)" fg:x="828" fg:w="5"/><text x="67.5671%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="67.6423%" y="325" width="0.0813%" height="15" fill="rgb(217,220,26)" fg:x="832" fg:w="1"/><text x="67.8923%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.6423%" y="309" width="0.0813%" height="15" fill="rgb(213,158,28)" fg:x="832" fg:w="1"/><text x="67.8923%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.8049%" y="309" width="0.0813%" height="15" fill="rgb(252,51,52)" fg:x="834" fg:w="1"/><text x="68.0549%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="67.8049%" y="293" width="0.0813%" height="15" fill="rgb(246,89,16)" fg:x="834" fg:w="1"/><text x="68.0549%" y="303.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.8049%" y="277" width="0.0813%" height="15" fill="rgb(216,158,49)" fg:x="834" fg:w="1"/><text x="68.0549%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="67.8049%" y="325" width="0.1626%" height="15" fill="rgb(236,107,19)" fg:x="834" fg:w="2"/><text x="68.0549%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="67.8862%" y="309" width="0.0813%" height="15" fill="rgb(228,185,30)" fg:x="835" fg:w="1"/><text x="68.1362%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="67.9675%" y="293" width="0.0813%" height="15" fill="rgb(246,134,8)" fg:x="836" fg:w="1"/><text x="68.2175%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="67.9675%" y="325" width="0.2439%" height="15" fill="rgb(214,143,50)" fg:x="836" fg:w="3"/><text x="68.2175%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="67.9675%" y="309" width="0.2439%" height="15" fill="rgb(228,75,8)" fg:x="836" fg:w="3"/><text x="68.2175%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="68.0488%" y="293" width="0.1626%" height="15" fill="rgb(207,175,4)" fg:x="837" fg:w="2"/><text x="68.2988%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="68.0488%" y="277" width="0.1626%" height="15" fill="rgb(205,108,24)" fg:x="837" fg:w="2"/><text x="68.2988%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="68.0488%" y="261" width="0.1626%" height="15" fill="rgb(244,120,49)" fg:x="837" fg:w="2"/><text x="68.2988%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="68.0488%" y="245" width="0.1626%" height="15" fill="rgb(223,47,38)" fg:x="837" fg:w="2"/><text x="68.2988%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="68.0488%" y="229" width="0.1626%" height="15" fill="rgb(229,179,11)" fg:x="837" fg:w="2"/><text x="68.2988%" y="239.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="68.0488%" y="213" width="0.1626%" height="15" fill="rgb(231,122,1)" fg:x="837" fg:w="2"/><text x="68.2988%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.3740%" y="309" width="0.0813%" height="15" fill="rgb(245,119,9)" fg:x="841" fg:w="1"/><text x="68.6240%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.5366%" y="293" width="0.0813%" height="15" fill="rgb(241,163,25)" fg:x="843" fg:w="1"/><text x="68.7866%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="68.4553%" y="309" width="0.2439%" height="15" fill="rgb(217,214,3)" fg:x="842" fg:w="3"/><text x="68.7053%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="68.6179%" y="293" width="0.0813%" height="15" fill="rgb(240,86,28)" fg:x="844" fg:w="1"/><text x="68.8679%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="68.6992%" y="293" width="0.0813%" height="15" fill="rgb(215,47,9)" fg:x="845" fg:w="1"/><text x="68.9492%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="68.6992%" y="277" width="0.0813%" height="15" fill="rgb(252,25,45)" fg:x="845" fg:w="1"/><text x="68.9492%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.6992%" y="261" width="0.0813%" height="15" fill="rgb(251,164,9)" fg:x="845" fg:w="1"/><text x="68.9492%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="68.7805%" y="293" width="0.2439%" height="15" fill="rgb(233,194,0)" fg:x="846" fg:w="3"/><text x="69.0305%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.49%)</title><rect x="68.6992%" y="309" width="0.4878%" height="15" fill="rgb(249,111,24)" fg:x="845" fg:w="6"/><text x="68.9492%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="69.0244%" y="293" width="0.1626%" height="15" fill="rgb(250,223,3)" fg:x="849" fg:w="2"/><text x="69.2744%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="69.1057%" y="277" width="0.0813%" height="15" fill="rgb(236,178,37)" fg:x="850" fg:w="1"/><text x="69.3557%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.3496%" y="229" width="0.0813%" height="15" fill="rgb(241,158,50)" fg:x="853" fg:w="1"/><text x="69.5996%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.3496%" y="213" width="0.0813%" height="15" fill="rgb(213,121,41)" fg:x="853" fg:w="1"/><text x="69.5996%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.49%)</title><rect x="69.1870%" y="293" width="0.4878%" height="15" fill="rgb(240,92,3)" fg:x="851" fg:w="6"/><text x="69.4370%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (6 samples, 0.49%)</title><rect x="69.1870%" y="277" width="0.4878%" height="15" fill="rgb(205,123,3)" fg:x="851" fg:w="6"/><text x="69.4370%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (6 samples, 0.49%)</title><rect x="69.1870%" y="261" width="0.4878%" height="15" fill="rgb(205,97,47)" fg:x="851" fg:w="6"/><text x="69.4370%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (4 samples, 0.33%)</title><rect x="69.3496%" y="245" width="0.3252%" height="15" fill="rgb(247,152,14)" fg:x="853" fg:w="4"/><text x="69.5996%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="69.4309%" y="229" width="0.2439%" height="15" fill="rgb(248,195,53)" fg:x="854" fg:w="3"/><text x="69.6809%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="69.5935%" y="213" width="0.0813%" height="15" fill="rgb(226,201,16)" fg:x="856" fg:w="1"/><text x="69.8435%" y="223.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="70.0000%" y="277" width="0.0813%" height="15" fill="rgb(205,98,0)" fg:x="861" fg:w="1"/><text x="70.2500%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.0813%" y="277" width="0.0813%" height="15" fill="rgb(214,191,48)" fg:x="862" fg:w="1"/><text x="70.3313%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.65%)</title><rect x="70.1626%" y="277" width="0.6504%" height="15" fill="rgb(237,112,39)" fg:x="863" fg:w="8"/><text x="70.4126%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="70.5691%" y="261" width="0.2439%" height="15" fill="rgb(247,203,27)" fg:x="868" fg:w="3"/><text x="70.8191%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="70.5691%" y="245" width="0.2439%" height="15" fill="rgb(235,124,28)" fg:x="868" fg:w="3"/><text x="70.8191%" y="255.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="70.5691%" y="229" width="0.2439%" height="15" fill="rgb(208,207,46)" fg:x="868" fg:w="3"/><text x="70.8191%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="70.8130%" y="277" width="0.0813%" height="15" fill="rgb(234,176,4)" fg:x="871" fg:w="1"/><text x="71.0630%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (34 samples, 2.76%)</title><rect x="68.2114%" y="325" width="2.7642%" height="15" fill="rgb(230,133,28)" fg:x="839" fg:w="34"/><text x="68.4614%" y="335.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (22 samples, 1.79%)</title><rect x="69.1870%" y="309" width="1.7886%" height="15" fill="rgb(211,137,40)" fg:x="851" fg:w="22"/><text x="69.4370%" y="319.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (16 samples, 1.30%)</title><rect x="69.6748%" y="293" width="1.3008%" height="15" fill="rgb(254,35,13)" fg:x="857" fg:w="16"/><text x="69.9248%" y="303.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="70.8943%" y="277" width="0.0813%" height="15" fill="rgb(225,49,51)" fg:x="872" fg:w="1"/><text x="71.1443%" y="287.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="70.8943%" y="261" width="0.0813%" height="15" fill="rgb(251,10,15)" fg:x="872" fg:w="1"/><text x="71.1443%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="70.8943%" y="245" width="0.0813%" height="15" fill="rgb(228,207,15)" fg:x="872" fg:w="1"/><text x="71.1443%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.8943%" y="229" width="0.0813%" height="15" fill="rgb(241,99,19)" fg:x="872" fg:w="1"/><text x="71.1443%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8943%" y="213" width="0.0813%" height="15" fill="rgb(207,104,49)" fg:x="872" fg:w="1"/><text x="71.1443%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="71.0569%" y="293" width="0.0813%" height="15" fill="rgb(234,99,18)" fg:x="874" fg:w="1"/><text x="71.3069%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.0569%" y="277" width="0.0813%" height="15" fill="rgb(213,191,49)" fg:x="874" fg:w="1"/><text x="71.3069%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.0569%" y="261" width="0.0813%" height="15" fill="rgb(210,226,19)" fg:x="874" fg:w="1"/><text x="71.3069%" y="271.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (4 samples, 0.33%)</title><rect x="71.1382%" y="277" width="0.3252%" height="15" fill="rgb(229,97,18)" fg:x="875" fg:w="4"/><text x="71.3882%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="71.2195%" y="261" width="0.2439%" height="15" fill="rgb(211,167,15)" fg:x="876" fg:w="3"/><text x="71.4695%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="71.2195%" y="245" width="0.2439%" height="15" fill="rgb(210,169,34)" fg:x="876" fg:w="3"/><text x="71.4695%" y="255.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="71.2195%" y="229" width="0.2439%" height="15" fill="rgb(241,121,31)" fg:x="876" fg:w="3"/><text x="71.4695%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="71.4634%" y="277" width="0.1626%" height="15" fill="rgb(232,40,11)" fg:x="879" fg:w="2"/><text x="71.7134%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="71.5447%" y="261" width="0.0813%" height="15" fill="rgb(205,86,26)" fg:x="880" fg:w="1"/><text x="71.7947%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (10 samples, 0.81%)</title><rect x="71.1382%" y="293" width="0.8130%" height="15" fill="rgb(231,126,28)" fg:x="875" fg:w="10"/><text x="71.3882%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.33%)</title><rect x="71.6260%" y="277" width="0.3252%" height="15" fill="rgb(219,221,18)" fg:x="881" fg:w="4"/><text x="71.8760%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="71.7073%" y="261" width="0.2439%" height="15" fill="rgb(211,40,0)" fg:x="882" fg:w="3"/><text x="71.9573%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="71.7073%" y="245" width="0.2439%" height="15" fill="rgb(239,85,43)" fg:x="882" fg:w="3"/><text x="71.9573%" y="255.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="71.7073%" y="229" width="0.2439%" height="15" fill="rgb(231,55,21)" fg:x="882" fg:w="3"/><text x="71.9573%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="71.9512%" y="293" width="0.0813%" height="15" fill="rgb(225,184,43)" fg:x="885" fg:w="1"/><text x="72.2012%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="72.1138%" y="277" width="0.0813%" height="15" fill="rgb(251,158,41)" fg:x="887" fg:w="1"/><text x="72.3638%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (16 samples, 1.30%)</title><rect x="70.9756%" y="325" width="1.3008%" height="15" fill="rgb(234,159,37)" fg:x="873" fg:w="16"/><text x="71.2256%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (16 samples, 1.30%)</title><rect x="70.9756%" y="309" width="1.3008%" height="15" fill="rgb(216,204,22)" fg:x="873" fg:w="16"/><text x="71.2256%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="72.0325%" y="293" width="0.2439%" height="15" fill="rgb(214,17,3)" fg:x="886" fg:w="3"/><text x="72.2825%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.1951%" y="277" width="0.0813%" height="15" fill="rgb(212,111,17)" fg:x="888" fg:w="1"/><text x="72.4451%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="72.2764%" y="277" width="0.0813%" height="15" fill="rgb(221,157,24)" fg:x="889" fg:w="1"/><text x="72.5264%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="72.2764%" y="293" width="0.1626%" height="15" fill="rgb(252,16,13)" fg:x="889" fg:w="2"/><text x="72.5264%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="72.3577%" y="277" width="0.0813%" height="15" fill="rgb(221,62,2)" fg:x="890" fg:w="1"/><text x="72.6077%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="72.4390%" y="293" width="0.1626%" height="15" fill="rgb(247,87,22)" fg:x="891" fg:w="2"/><text x="72.6890%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="72.5203%" y="277" width="0.0813%" height="15" fill="rgb(215,73,9)" fg:x="892" fg:w="1"/><text x="72.7703%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="72.5203%" y="261" width="0.0813%" height="15" fill="rgb(207,175,33)" fg:x="892" fg:w="1"/><text x="72.7703%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (60 samples, 4.88%)</title><rect x="67.8049%" y="341" width="4.8780%" height="15" fill="rgb(243,129,54)" fg:x="834" fg:w="60"/><text x="68.0549%" y="351.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.41%)</title><rect x="72.2764%" y="325" width="0.4065%" height="15" fill="rgb(227,119,45)" fg:x="889" fg:w="5"/><text x="72.5264%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.41%)</title><rect x="72.2764%" y="309" width="0.4065%" height="15" fill="rgb(205,109,36)" fg:x="889" fg:w="5"/><text x="72.5264%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="72.6016%" y="293" width="0.0813%" height="15" fill="rgb(205,6,39)" fg:x="893" fg:w="1"/><text x="72.8516%" y="303.50"></text></g><g><title>regex::regex::string::Regex::new (62 samples, 5.04%)</title><rect x="67.7236%" y="373" width="5.0407%" height="15" fill="rgb(221,32,16)" fg:x="833" fg:w="62"/><text x="67.9736%" y="383.50">regex:..</text></g><g><title>regex::builders::Builder::build_one_string (62 samples, 5.04%)</title><rect x="67.7236%" y="357" width="5.0407%" height="15" fill="rgb(228,144,50)" fg:x="833" fg:w="62"/><text x="67.9736%" y="367.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="72.6829%" y="341" width="0.0813%" height="15" fill="rgb(229,201,53)" fg:x="894" fg:w="1"/><text x="72.9329%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8455%" y="309" width="0.0813%" height="15" fill="rgb(249,153,27)" fg:x="896" fg:w="1"/><text x="73.0955%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.5772%" y="293" width="0.0813%" height="15" fill="rgb(227,106,25)" fg:x="905" fg:w="1"/><text x="73.8272%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.5772%" y="277" width="0.0813%" height="15" fill="rgb(230,65,29)" fg:x="905" fg:w="1"/><text x="73.8272%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.5772%" y="261" width="0.0813%" height="15" fill="rgb(221,57,46)" fg:x="905" fg:w="1"/><text x="73.8272%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.6585%" y="293" width="0.0813%" height="15" fill="rgb(229,161,17)" fg:x="906" fg:w="1"/><text x="73.9085%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.6585%" y="277" width="0.0813%" height="15" fill="rgb(222,213,11)" fg:x="906" fg:w="1"/><text x="73.9085%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="73.6585%" y="261" width="0.0813%" height="15" fill="rgb(235,35,13)" fg:x="906" fg:w="1"/><text x="73.9085%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (11 samples, 0.89%)</title><rect x="72.9268%" y="309" width="0.8943%" height="15" fill="rgb(233,158,34)" fg:x="897" fg:w="11"/><text x="73.1768%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="73.7398%" y="293" width="0.0813%" height="15" fill="rgb(215,151,48)" fg:x="907" fg:w="1"/><text x="73.9898%" y="303.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (84 samples, 6.83%)</title><rect x="67.0732%" y="389" width="6.8293%" height="15" fill="rgb(229,84,14)" fg:x="825" fg:w="84"/><text x="67.3232%" y="399.50">indefinit..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (14 samples, 1.14%)</title><rect x="72.7642%" y="373" width="1.1382%" height="15" fill="rgb(229,68,14)" fg:x="895" fg:w="14"/><text x="73.0142%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (14 samples, 1.14%)</title><rect x="72.7642%" y="357" width="1.1382%" height="15" fill="rgb(243,106,26)" fg:x="895" fg:w="14"/><text x="73.0142%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (14 samples, 1.14%)</title><rect x="72.7642%" y="341" width="1.1382%" height="15" fill="rgb(206,45,38)" fg:x="895" fg:w="14"/><text x="73.0142%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (14 samples, 1.14%)</title><rect x="72.7642%" y="325" width="1.1382%" height="15" fill="rgb(226,6,15)" fg:x="895" fg:w="14"/><text x="73.0142%" y="335.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="73.8211%" y="309" width="0.0813%" height="15" fill="rgb(232,22,54)" fg:x="908" fg:w="1"/><text x="74.0711%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.8211%" y="293" width="0.0813%" height="15" fill="rgb(229,222,32)" fg:x="908" fg:w="1"/><text x="74.0711%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.8211%" y="277" width="0.0813%" height="15" fill="rgb(228,62,29)" fg:x="908" fg:w="1"/><text x="74.0711%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.8211%" y="261" width="0.0813%" height="15" fill="rgb(251,103,34)" fg:x="908" fg:w="1"/><text x="74.0711%" y="271.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (772 samples, 62.76%)</title><rect x="11.3008%" y="485" width="62.7642%" height="15" fill="rgb(233,12,30)" fg:x="139" fg:w="772"/><text x="11.5508%" y="495.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe</text></g><g><title>plugins_core::looking::model::qualify_name (757 samples, 61.54%)</title><rect x="12.5203%" y="469" width="61.5447%" height="15" fill="rgb(238,52,0)" fg:x="154" fg:w="757"/><text x="12.7703%" y="479.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (757 samples, 61.54%)</title><rect x="12.5203%" y="453" width="61.5447%" height="15" fill="rgb(223,98,5)" fg:x="154" fg:w="757"/><text x="12.7703%" y="463.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (757 samples, 61.54%)</title><rect x="12.5203%" y="437" width="61.5447%" height="15" fill="rgb(228,75,37)" fg:x="154" fg:w="757"/><text x="12.7703%" y="447.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (757 samples, 61.54%)</title><rect x="12.5203%" y="421" width="61.5447%" height="15" fill="rgb(205,115,49)" fg:x="154" fg:w="757"/><text x="12.7703%" y="431.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (86 samples, 6.99%)</title><rect x="67.0732%" y="405" width="6.9919%" height="15" fill="rgb(250,154,43)" fg:x="825" fg:w="86"/><text x="67.3232%" y="415.50">indefinit..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="73.9024%" y="389" width="0.1626%" height="15" fill="rgb(226,43,29)" fg:x="909" fg:w="2"/><text x="74.1524%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.9837%" y="373" width="0.0813%" height="15" fill="rgb(249,228,39)" fg:x="910" fg:w="1"/><text x="74.2337%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="74.0650%" y="453" width="0.0813%" height="15" fill="rgb(216,79,43)" fg:x="911" fg:w="1"/><text x="74.3150%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0650%" y="437" width="0.0813%" height="15" fill="rgb(228,95,12)" fg:x="911" fg:w="1"/><text x="74.3150%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0650%" y="421" width="0.0813%" height="15" fill="rgb(249,221,15)" fg:x="911" fg:w="1"/><text x="74.3150%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.0650%" y="405" width="0.0813%" height="15" fill="rgb(233,34,13)" fg:x="911" fg:w="1"/><text x="74.3150%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.0650%" y="389" width="0.0813%" height="15" fill="rgb(214,103,39)" fg:x="911" fg:w="1"/><text x="74.3150%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.0650%" y="373" width="0.0813%" height="15" fill="rgb(251,126,39)" fg:x="911" fg:w="1"/><text x="74.3150%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.0650%" y="357" width="0.0813%" height="15" fill="rgb(214,216,36)" fg:x="911" fg:w="1"/><text x="74.3150%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.0650%" y="341" width="0.0813%" height="15" fill="rgb(220,221,8)" fg:x="911" fg:w="1"/><text x="74.3150%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.0650%" y="325" width="0.0813%" height="15" fill="rgb(240,216,3)" fg:x="911" fg:w="1"/><text x="74.3150%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.0650%" y="309" width="0.0813%" height="15" fill="rgb(232,218,17)" fg:x="911" fg:w="1"/><text x="74.3150%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.0650%" y="293" width="0.0813%" height="15" fill="rgb(229,163,45)" fg:x="911" fg:w="1"/><text x="74.3150%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.0650%" y="277" width="0.0813%" height="15" fill="rgb(231,110,42)" fg:x="911" fg:w="1"/><text x="74.3150%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.0650%" y="261" width="0.0813%" height="15" fill="rgb(208,170,48)" fg:x="911" fg:w="1"/><text x="74.3150%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (4 samples, 0.33%)</title><rect x="74.0650%" y="485" width="0.3252%" height="15" fill="rgb(239,116,25)" fg:x="911" fg:w="4"/><text x="74.3150%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (4 samples, 0.33%)</title><rect x="74.0650%" y="469" width="0.3252%" height="15" fill="rgb(219,200,50)" fg:x="911" fg:w="4"/><text x="74.3150%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="74.1463%" y="453" width="0.2439%" height="15" fill="rgb(245,200,0)" fg:x="912" fg:w="3"/><text x="74.3963%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="74.1463%" y="437" width="0.2439%" height="15" fill="rgb(245,119,33)" fg:x="912" fg:w="3"/><text x="74.3963%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="74.1463%" y="421" width="0.2439%" height="15" fill="rgb(231,125,12)" fg:x="912" fg:w="3"/><text x="74.3963%" y="431.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="74.1463%" y="405" width="0.2439%" height="15" fill="rgb(216,96,41)" fg:x="912" fg:w="3"/><text x="74.3963%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="74.1463%" y="389" width="0.2439%" height="15" fill="rgb(248,43,45)" fg:x="912" fg:w="3"/><text x="74.3963%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (3 samples, 0.24%)</title><rect x="74.1463%" y="373" width="0.2439%" height="15" fill="rgb(217,222,7)" fg:x="912" fg:w="3"/><text x="74.3963%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="74.2276%" y="357" width="0.1626%" height="15" fill="rgb(233,28,6)" fg:x="913" fg:w="2"/><text x="74.4776%" y="367.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="74.2276%" y="341" width="0.1626%" height="15" fill="rgb(231,218,15)" fg:x="913" fg:w="2"/><text x="74.4776%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="74.2276%" y="325" width="0.1626%" height="15" fill="rgb(226,171,48)" fg:x="913" fg:w="2"/><text x="74.4776%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.3089%" y="309" width="0.0813%" height="15" fill="rgb(235,201,9)" fg:x="914" fg:w="1"/><text x="74.5589%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.3089%" y="293" width="0.0813%" height="15" fill="rgb(217,80,15)" fg:x="914" fg:w="1"/><text x="74.5589%" y="303.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="74.3089%" y="277" width="0.0813%" height="15" fill="rgb(219,152,8)" fg:x="914" fg:w="1"/><text x="74.5589%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="74.3089%" y="261" width="0.0813%" height="15" fill="rgb(243,107,38)" fg:x="914" fg:w="1"/><text x="74.5589%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="74.3089%" y="245" width="0.0813%" height="15" fill="rgb(231,17,5)" fg:x="914" fg:w="1"/><text x="74.5589%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="74.3089%" y="229" width="0.0813%" height="15" fill="rgb(209,25,54)" fg:x="914" fg:w="1"/><text x="74.5589%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="74.3089%" y="213" width="0.0813%" height="15" fill="rgb(219,0,2)" fg:x="914" fg:w="1"/><text x="74.5589%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="74.3089%" y="197" width="0.0813%" height="15" fill="rgb(246,9,5)" fg:x="914" fg:w="1"/><text x="74.5589%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.3089%" y="181" width="0.0813%" height="15" fill="rgb(226,159,4)" fg:x="914" fg:w="1"/><text x="74.5589%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="74.3089%" y="165" width="0.0813%" height="15" fill="rgb(219,175,34)" fg:x="914" fg:w="1"/><text x="74.5589%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.3089%" y="149" width="0.0813%" height="15" fill="rgb(236,10,46)" fg:x="914" fg:w="1"/><text x="74.5589%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="74.3089%" y="133" width="0.0813%" height="15" fill="rgb(240,211,16)" fg:x="914" fg:w="1"/><text x="74.5589%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="74.3089%" y="117" width="0.0813%" height="15" fill="rgb(205,3,43)" fg:x="914" fg:w="1"/><text x="74.5589%" y="127.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="74.3089%" y="101" width="0.0813%" height="15" fill="rgb(245,7,22)" fg:x="914" fg:w="1"/><text x="74.5589%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.3089%" y="85" width="0.0813%" height="15" fill="rgb(239,132,32)" fg:x="914" fg:w="1"/><text x="74.5589%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="74.3902%" y="485" width="0.0813%" height="15" fill="rgb(228,202,34)" fg:x="915" fg:w="1"/><text x="74.6402%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="74.3902%" y="469" width="0.0813%" height="15" fill="rgb(254,200,22)" fg:x="915" fg:w="1"/><text x="74.6402%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.3902%" y="453" width="0.0813%" height="15" fill="rgb(219,10,39)" fg:x="915" fg:w="1"/><text x="74.6402%" y="463.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.4715%" y="453" width="0.0813%" height="15" fill="rgb(226,210,39)" fg:x="916" fg:w="1"/><text x="74.7215%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.4715%" y="437" width="0.0813%" height="15" fill="rgb(208,219,16)" fg:x="916" fg:w="1"/><text x="74.7215%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.4715%" y="421" width="0.0813%" height="15" fill="rgb(216,158,51)" fg:x="916" fg:w="1"/><text x="74.7215%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.4715%" y="405" width="0.0813%" height="15" fill="rgb(233,14,44)" fg:x="916" fg:w="1"/><text x="74.7215%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.4715%" y="389" width="0.0813%" height="15" fill="rgb(237,97,39)" fg:x="916" fg:w="1"/><text x="74.7215%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.4715%" y="373" width="0.0813%" height="15" fill="rgb(218,198,43)" fg:x="916" fg:w="1"/><text x="74.7215%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.4715%" y="357" width="0.0813%" height="15" fill="rgb(231,104,20)" fg:x="916" fg:w="1"/><text x="74.7215%" y="367.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="74.7967%" y="373" width="0.0813%" height="15" fill="rgb(254,36,13)" fg:x="920" fg:w="1"/><text x="75.0467%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.8780%" y="325" width="0.0813%" height="15" fill="rgb(248,14,50)" fg:x="921" fg:w="1"/><text x="75.1280%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.8780%" y="309" width="0.0813%" height="15" fill="rgb(217,107,29)" fg:x="921" fg:w="1"/><text x="75.1280%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.8780%" y="293" width="0.0813%" height="15" fill="rgb(251,169,33)" fg:x="921" fg:w="1"/><text x="75.1280%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.8780%" y="277" width="0.0813%" height="15" fill="rgb(217,108,32)" fg:x="921" fg:w="1"/><text x="75.1280%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.8780%" y="261" width="0.0813%" height="15" fill="rgb(219,66,42)" fg:x="921" fg:w="1"/><text x="75.1280%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.8780%" y="245" width="0.0813%" height="15" fill="rgb(206,180,7)" fg:x="921" fg:w="1"/><text x="75.1280%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.8780%" y="229" width="0.0813%" height="15" fill="rgb(208,226,31)" fg:x="921" fg:w="1"/><text x="75.1280%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.8780%" y="213" width="0.0813%" height="15" fill="rgb(218,26,49)" fg:x="921" fg:w="1"/><text x="75.1280%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.8780%" y="197" width="0.0813%" height="15" fill="rgb(233,197,48)" fg:x="921" fg:w="1"/><text x="75.1280%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.8780%" y="181" width="0.0813%" height="15" fill="rgb(252,181,51)" fg:x="921" fg:w="1"/><text x="75.1280%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.8780%" y="165" width="0.0813%" height="15" fill="rgb(253,90,19)" fg:x="921" fg:w="1"/><text x="75.1280%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.8780%" y="149" width="0.0813%" height="15" fill="rgb(215,171,30)" fg:x="921" fg:w="1"/><text x="75.1280%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.9593%" y="277" width="0.0813%" height="15" fill="rgb(214,222,9)" fg:x="922" fg:w="1"/><text x="75.2093%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.9593%" y="261" width="0.0813%" height="15" fill="rgb(223,3,22)" fg:x="922" fg:w="1"/><text x="75.2093%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.9593%" y="245" width="0.0813%" height="15" fill="rgb(225,196,46)" fg:x="922" fg:w="1"/><text x="75.2093%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.9593%" y="229" width="0.0813%" height="15" fill="rgb(209,110,37)" fg:x="922" fg:w="1"/><text x="75.2093%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.9593%" y="213" width="0.0813%" height="15" fill="rgb(249,89,12)" fg:x="922" fg:w="1"/><text x="75.2093%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.9593%" y="197" width="0.0813%" height="15" fill="rgb(226,27,33)" fg:x="922" fg:w="1"/><text x="75.2093%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.9593%" y="181" width="0.0813%" height="15" fill="rgb(213,82,22)" fg:x="922" fg:w="1"/><text x="75.2093%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.9593%" y="165" width="0.0813%" height="15" fill="rgb(248,140,0)" fg:x="922" fg:w="1"/><text x="75.2093%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.9593%" y="149" width="0.0813%" height="15" fill="rgb(228,106,3)" fg:x="922" fg:w="1"/><text x="75.2093%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.9593%" y="133" width="0.0813%" height="15" fill="rgb(209,23,37)" fg:x="922" fg:w="1"/><text x="75.2093%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.9593%" y="117" width="0.0813%" height="15" fill="rgb(241,93,50)" fg:x="922" fg:w="1"/><text x="75.2093%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.9593%" y="101" width="0.0813%" height="15" fill="rgb(253,46,43)" fg:x="922" fg:w="1"/><text x="75.2093%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.9593%" y="85" width="0.0813%" height="15" fill="rgb(226,206,43)" fg:x="922" fg:w="1"/><text x="75.2093%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.9593%" y="69" width="0.0813%" height="15" fill="rgb(217,54,7)" fg:x="922" fg:w="1"/><text x="75.2093%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.9593%" y="53" width="0.0813%" height="15" fill="rgb(223,5,52)" fg:x="922" fg:w="1"/><text x="75.2093%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.9593%" y="37" width="0.0813%" height="15" fill="rgb(206,52,46)" fg:x="922" fg:w="1"/><text x="75.2093%" y="47.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (3 samples, 0.24%)</title><rect x="74.8780%" y="357" width="0.2439%" height="15" fill="rgb(253,136,11)" fg:x="921" fg:w="3"/><text x="75.1280%" y="367.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="74.8780%" y="341" width="0.2439%" height="15" fill="rgb(208,106,33)" fg:x="921" fg:w="3"/><text x="75.1280%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="74.9593%" y="325" width="0.1626%" height="15" fill="rgb(206,54,4)" fg:x="922" fg:w="2"/><text x="75.2093%" y="335.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="74.9593%" y="309" width="0.1626%" height="15" fill="rgb(213,3,15)" fg:x="922" fg:w="2"/><text x="75.2093%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="74.9593%" y="293" width="0.1626%" height="15" fill="rgb(252,211,39)" fg:x="922" fg:w="2"/><text x="75.2093%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.0407%" y="277" width="0.0813%" height="15" fill="rgb(223,6,36)" fg:x="923" fg:w="1"/><text x="75.2907%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.0407%" y="261" width="0.0813%" height="15" fill="rgb(252,169,45)" fg:x="923" fg:w="1"/><text x="75.2907%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.0407%" y="245" width="0.0813%" height="15" fill="rgb(212,48,26)" fg:x="923" fg:w="1"/><text x="75.2907%" y="255.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="75.1220%" y="341" width="0.0813%" height="15" fill="rgb(251,102,48)" fg:x="924" fg:w="1"/><text x="75.3720%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.1220%" y="325" width="0.0813%" height="15" fill="rgb(243,208,16)" fg:x="924" fg:w="1"/><text x="75.3720%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.1220%" y="309" width="0.0813%" height="15" fill="rgb(219,96,24)" fg:x="924" fg:w="1"/><text x="75.3720%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.1220%" y="293" width="0.0813%" height="15" fill="rgb(219,33,29)" fg:x="924" fg:w="1"/><text x="75.3720%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.1220%" y="277" width="0.0813%" height="15" fill="rgb(223,176,5)" fg:x="924" fg:w="1"/><text x="75.3720%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.1220%" y="261" width="0.0813%" height="15" fill="rgb(228,140,14)" fg:x="924" fg:w="1"/><text x="75.3720%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.1220%" y="245" width="0.0813%" height="15" fill="rgb(217,179,31)" fg:x="924" fg:w="1"/><text x="75.3720%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.1220%" y="229" width="0.0813%" height="15" fill="rgb(230,9,30)" fg:x="924" fg:w="1"/><text x="75.3720%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.1220%" y="213" width="0.0813%" height="15" fill="rgb(230,136,20)" fg:x="924" fg:w="1"/><text x="75.3720%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.1220%" y="197" width="0.0813%" height="15" fill="rgb(215,210,22)" fg:x="924" fg:w="1"/><text x="75.3720%" y="207.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="75.2033%" y="309" width="0.0813%" height="15" fill="rgb(218,43,5)" fg:x="925" fg:w="1"/><text x="75.4533%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.2846%" y="277" width="0.0813%" height="15" fill="rgb(216,11,5)" fg:x="926" fg:w="1"/><text x="75.5346%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.2846%" y="261" width="0.0813%" height="15" fill="rgb(209,82,29)" fg:x="926" fg:w="1"/><text x="75.5346%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.2846%" y="245" width="0.0813%" height="15" fill="rgb(244,115,12)" fg:x="926" fg:w="1"/><text x="75.5346%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.3659%" y="261" width="0.0813%" height="15" fill="rgb(222,82,18)" fg:x="927" fg:w="1"/><text x="75.6159%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.3659%" y="245" width="0.0813%" height="15" fill="rgb(249,227,8)" fg:x="927" fg:w="1"/><text x="75.6159%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="75.3659%" y="229" width="0.0813%" height="15" fill="rgb(253,141,45)" fg:x="927" fg:w="1"/><text x="75.6159%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.3659%" y="213" width="0.0813%" height="15" fill="rgb(234,184,4)" fg:x="927" fg:w="1"/><text x="75.6159%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.3659%" y="197" width="0.0813%" height="15" fill="rgb(218,194,23)" fg:x="927" fg:w="1"/><text x="75.6159%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.33%)</title><rect x="75.2846%" y="309" width="0.3252%" height="15" fill="rgb(235,66,41)" fg:x="926" fg:w="4"/><text x="75.5346%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="75.2846%" y="293" width="0.3252%" height="15" fill="rgb(245,217,1)" fg:x="926" fg:w="4"/><text x="75.5346%" y="303.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="75.3659%" y="277" width="0.2439%" height="15" fill="rgb(229,91,1)" fg:x="927" fg:w="3"/><text x="75.6159%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="75.4472%" y="261" width="0.1626%" height="15" fill="rgb(207,101,30)" fg:x="928" fg:w="2"/><text x="75.6972%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="75.4472%" y="245" width="0.1626%" height="15" fill="rgb(223,82,49)" fg:x="928" fg:w="2"/><text x="75.6972%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.5285%" y="229" width="0.0813%" height="15" fill="rgb(218,167,17)" fg:x="929" fg:w="1"/><text x="75.7785%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.5285%" y="213" width="0.0813%" height="15" fill="rgb(208,103,14)" fg:x="929" fg:w="1"/><text x="75.7785%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.5285%" y="197" width="0.0813%" height="15" fill="rgb(238,20,8)" fg:x="929" fg:w="1"/><text x="75.7785%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.5285%" y="181" width="0.0813%" height="15" fill="rgb(218,80,54)" fg:x="929" fg:w="1"/><text x="75.7785%" y="191.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (7 samples, 0.57%)</title><rect x="75.1220%" y="357" width="0.5691%" height="15" fill="rgb(240,144,17)" fg:x="924" fg:w="7"/><text x="75.3720%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.49%)</title><rect x="75.2033%" y="341" width="0.4878%" height="15" fill="rgb(245,27,50)" fg:x="925" fg:w="6"/><text x="75.4533%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="75.2033%" y="325" width="0.4878%" height="15" fill="rgb(251,51,7)" fg:x="925" fg:w="6"/><text x="75.4533%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.6098%" y="309" width="0.0813%" height="15" fill="rgb(245,217,29)" fg:x="930" fg:w="1"/><text x="75.8598%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6098%" y="293" width="0.0813%" height="15" fill="rgb(221,176,29)" fg:x="930" fg:w="1"/><text x="75.8598%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.6098%" y="277" width="0.0813%" height="15" fill="rgb(212,180,24)" fg:x="930" fg:w="1"/><text x="75.8598%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.6911%" y="341" width="0.0813%" height="15" fill="rgb(254,24,2)" fg:x="931" fg:w="1"/><text x="75.9411%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="75.6911%" y="357" width="0.1626%" height="15" fill="rgb(230,100,2)" fg:x="931" fg:w="2"/><text x="75.9411%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.7724%" y="341" width="0.0813%" height="15" fill="rgb(219,142,25)" fg:x="932" fg:w="1"/><text x="76.0224%" y="351.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.7724%" y="325" width="0.0813%" height="15" fill="rgb(240,73,43)" fg:x="932" fg:w="1"/><text x="76.0224%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.7724%" y="309" width="0.0813%" height="15" fill="rgb(214,114,15)" fg:x="932" fg:w="1"/><text x="76.0224%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.7724%" y="293" width="0.0813%" height="15" fill="rgb(207,130,4)" fg:x="932" fg:w="1"/><text x="76.0224%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="75.8537%" y="325" width="0.0813%" height="15" fill="rgb(221,25,40)" fg:x="933" fg:w="1"/><text x="76.1037%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="75.8537%" y="309" width="0.0813%" height="15" fill="rgb(241,184,7)" fg:x="933" fg:w="1"/><text x="76.1037%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="75.8537%" y="341" width="0.1626%" height="15" fill="rgb(235,159,4)" fg:x="933" fg:w="2"/><text x="76.1037%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.9350%" y="325" width="0.0813%" height="15" fill="rgb(214,87,48)" fg:x="934" fg:w="1"/><text x="76.1850%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="75.9350%" y="309" width="0.0813%" height="15" fill="rgb(246,198,24)" fg:x="934" fg:w="1"/><text x="76.1850%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.9350%" y="293" width="0.0813%" height="15" fill="rgb(209,66,40)" fg:x="934" fg:w="1"/><text x="76.1850%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (17 samples, 1.38%)</title><rect x="74.7154%" y="389" width="1.3821%" height="15" fill="rgb(233,147,39)" fg:x="919" fg:w="17"/><text x="74.9654%" y="399.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (15 samples, 1.22%)</title><rect x="74.8780%" y="373" width="1.2195%" height="15" fill="rgb(231,145,52)" fg:x="921" fg:w="15"/><text x="75.1280%" y="383.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (3 samples, 0.24%)</title><rect x="75.8537%" y="357" width="0.2439%" height="15" fill="rgb(206,20,26)" fg:x="933" fg:w="3"/><text x="76.1037%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.0163%" y="341" width="0.0813%" height="15" fill="rgb(238,220,4)" fg:x="935" fg:w="1"/><text x="76.2663%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="76.0163%" y="325" width="0.0813%" height="15" fill="rgb(252,195,42)" fg:x="935" fg:w="1"/><text x="76.2663%" y="335.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (20 samples, 1.63%)</title><rect x="74.5528%" y="453" width="1.6260%" height="15" fill="rgb(209,10,6)" fg:x="917" fg:w="20"/><text x="74.8028%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (19 samples, 1.54%)</title><rect x="74.6341%" y="437" width="1.5447%" height="15" fill="rgb(229,3,52)" fg:x="918" fg:w="19"/><text x="74.8841%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 1.54%)</title><rect x="74.6341%" y="421" width="1.5447%" height="15" fill="rgb(253,49,37)" fg:x="918" fg:w="19"/><text x="74.8841%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (18 samples, 1.46%)</title><rect x="74.7154%" y="405" width="1.4634%" height="15" fill="rgb(240,103,49)" fg:x="919" fg:w="18"/><text x="74.9654%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.0976%" y="389" width="0.0813%" height="15" fill="rgb(250,182,30)" fg:x="936" fg:w="1"/><text x="76.3476%" y="399.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="76.1789%" y="453" width="0.0813%" height="15" fill="rgb(248,8,30)" fg:x="937" fg:w="1"/><text x="76.4289%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="76.1789%" y="437" width="0.0813%" height="15" fill="rgb(237,120,30)" fg:x="937" fg:w="1"/><text x="76.4289%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.1789%" y="421" width="0.0813%" height="15" fill="rgb(221,146,34)" fg:x="937" fg:w="1"/><text x="76.4289%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.4228%" y="421" width="0.0813%" height="15" fill="rgb(242,55,13)" fg:x="940" fg:w="1"/><text x="76.6728%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="76.5041%" y="421" width="0.0813%" height="15" fill="rgb(242,112,31)" fg:x="941" fg:w="1"/><text x="76.7541%" y="431.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="76.5041%" y="405" width="0.0813%" height="15" fill="rgb(249,192,27)" fg:x="941" fg:w="1"/><text x="76.7541%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (811 samples, 65.93%)</title><rect x="10.7317%" y="693" width="65.9350%" height="15" fill="rgb(208,204,44)" fg:x="132" fg:w="811"/><text x="10.9817%" y="703.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (811 samples, 65.93%)</title><rect x="10.7317%" y="677" width="65.9350%" height="15" fill="rgb(208,93,54)" fg:x="132" fg:w="811"/><text x="10.9817%" y="687.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (811 samples, 65.93%)</title><rect x="10.7317%" y="661" width="65.9350%" height="15" fill="rgb(242,1,31)" fg:x="132" fg:w="811"/><text x="10.9817%" y="671.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (811 samples, 65.93%)</title><rect x="10.7317%" y="645" width="65.9350%" height="15" fill="rgb(241,83,25)" fg:x="132" fg:w="811"/><text x="10.9817%" y="655.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (805 samples, 65.45%)</title><rect x="11.2195%" y="629" width="65.4472%" height="15" fill="rgb(205,169,50)" fg:x="138" fg:w="805"/><text x="11.4695%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (805 samples, 65.45%)</title><rect x="11.2195%" y="613" width="65.4472%" height="15" fill="rgb(239,186,37)" fg:x="138" fg:w="805"/><text x="11.4695%" y="623.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (805 samples, 65.45%)</title><rect x="11.2195%" y="597" width="65.4472%" height="15" fill="rgb(205,221,10)" fg:x="138" fg:w="805"/><text x="11.4695%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (805 samples, 65.45%)</title><rect x="11.2195%" y="581" width="65.4472%" height="15" fill="rgb(218,196,15)" fg:x="138" fg:w="805"/><text x="11.4695%" y="591.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (805 samples, 65.45%)</title><rect x="11.2195%" y="565" width="65.4472%" height="15" fill="rgb(218,196,35)" fg:x="138" fg:w="805"/><text x="11.4695%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (805 samples, 65.45%)</title><rect x="11.2195%" y="549" width="65.4472%" height="15" fill="rgb(233,63,24)" fg:x="138" fg:w="805"/><text x="11.4695%" y="559.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (805 samples, 65.45%)</title><rect x="11.2195%" y="533" width="65.4472%" height="15" fill="rgb(225,8,4)" fg:x="138" fg:w="805"/><text x="11.4695%" y="543.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (805 samples, 65.45%)</title><rect x="11.2195%" y="517" width="65.4472%" height="15" fill="rgb(234,105,35)" fg:x="138" fg:w="805"/><text x="11.4695%" y="527.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (805 samples, 65.45%)</title><rect x="11.2195%" y="501" width="65.4472%" height="15" fill="rgb(236,21,32)" fg:x="138" fg:w="805"/><text x="11.4695%" y="511.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (27 samples, 2.20%)</title><rect x="74.4715%" y="485" width="2.1951%" height="15" fill="rgb(228,109,6)" fg:x="916" fg:w="27"/><text x="74.7215%" y="495.50">k..</text></g><g><title>kernel::model::scopes::Scopes::load_scope (27 samples, 2.20%)</title><rect x="74.4715%" y="469" width="2.1951%" height="15" fill="rgb(229,215,31)" fg:x="916" fg:w="27"/><text x="74.7215%" y="479.50">k..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="76.2602%" y="453" width="0.4065%" height="15" fill="rgb(221,52,54)" fg:x="938" fg:w="5"/><text x="76.5102%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="76.2602%" y="437" width="0.4065%" height="15" fill="rgb(252,129,43)" fg:x="938" fg:w="5"/><text x="76.5102%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.5854%" y="421" width="0.0813%" height="15" fill="rgb(248,183,27)" fg:x="942" fg:w="1"/><text x="76.8354%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.5854%" y="405" width="0.0813%" height="15" fill="rgb(250,0,22)" fg:x="942" fg:w="1"/><text x="76.8354%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.5854%" y="389" width="0.0813%" height="15" fill="rgb(213,166,10)" fg:x="942" fg:w="1"/><text x="76.8354%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="76.6667%" y="661" width="0.0813%" height="15" fill="rgb(207,163,36)" fg:x="943" fg:w="1"/><text x="76.9167%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="76.6667%" y="645" width="0.0813%" height="15" fill="rgb(208,122,22)" fg:x="943" fg:w="1"/><text x="76.9167%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="76.6667%" y="629" width="0.0813%" height="15" fill="rgb(207,104,49)" fg:x="943" fg:w="1"/><text x="76.9167%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.6667%" y="613" width="0.0813%" height="15" fill="rgb(248,211,50)" fg:x="943" fg:w="1"/><text x="76.9167%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.6667%" y="597" width="0.0813%" height="15" fill="rgb(217,13,45)" fg:x="943" fg:w="1"/><text x="76.9167%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.6667%" y="581" width="0.0813%" height="15" fill="rgb(211,216,49)" fg:x="943" fg:w="1"/><text x="76.9167%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.6667%" y="565" width="0.0813%" height="15" fill="rgb(221,58,53)" fg:x="943" fg:w="1"/><text x="76.9167%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.6667%" y="549" width="0.0813%" height="15" fill="rgb(220,112,41)" fg:x="943" fg:w="1"/><text x="76.9167%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.6667%" y="533" width="0.0813%" height="15" fill="rgb(236,38,28)" fg:x="943" fg:w="1"/><text x="76.9167%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.6667%" y="517" width="0.0813%" height="15" fill="rgb(227,195,22)" fg:x="943" fg:w="1"/><text x="76.9167%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.6667%" y="501" width="0.0813%" height="15" fill="rgb(214,55,33)" fg:x="943" fg:w="1"/><text x="76.9167%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.8293%" y="597" width="0.0813%" height="15" fill="rgb(248,80,13)" fg:x="945" fg:w="1"/><text x="77.0793%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.8293%" y="581" width="0.0813%" height="15" fill="rgb(238,52,6)" fg:x="945" fg:w="1"/><text x="77.0793%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.9106%" y="517" width="0.0813%" height="15" fill="rgb(224,198,47)" fg:x="946" fg:w="1"/><text x="77.1606%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.9106%" y="501" width="0.0813%" height="15" fill="rgb(233,171,20)" fg:x="946" fg:w="1"/><text x="77.1606%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.9106%" y="485" width="0.0813%" height="15" fill="rgb(241,30,25)" fg:x="946" fg:w="1"/><text x="77.1606%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.9106%" y="469" width="0.0813%" height="15" fill="rgb(207,171,38)" fg:x="946" fg:w="1"/><text x="77.1606%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.9106%" y="453" width="0.0813%" height="15" fill="rgb(234,70,1)" fg:x="946" fg:w="1"/><text x="77.1606%" y="463.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.33%)</title><rect x="76.7480%" y="645" width="0.3252%" height="15" fill="rgb(232,178,18)" fg:x="944" fg:w="4"/><text x="76.9980%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.33%)</title><rect x="76.7480%" y="629" width="0.3252%" height="15" fill="rgb(241,78,40)" fg:x="944" fg:w="4"/><text x="76.9980%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="76.7480%" y="613" width="0.3252%" height="15" fill="rgb(222,35,25)" fg:x="944" fg:w="4"/><text x="76.9980%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="76.9106%" y="597" width="0.1626%" height="15" fill="rgb(207,92,16)" fg:x="946" fg:w="2"/><text x="77.1606%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.9106%" y="581" width="0.1626%" height="15" fill="rgb(216,59,51)" fg:x="946" fg:w="2"/><text x="77.1606%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="76.9106%" y="565" width="0.1626%" height="15" fill="rgb(213,80,28)" fg:x="946" fg:w="2"/><text x="77.1606%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.9106%" y="549" width="0.1626%" height="15" fill="rgb(220,93,7)" fg:x="946" fg:w="2"/><text x="77.1606%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="76.9106%" y="533" width="0.1626%" height="15" fill="rgb(225,24,44)" fg:x="946" fg:w="2"/><text x="77.1606%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.9919%" y="517" width="0.0813%" height="15" fill="rgb(243,74,40)" fg:x="947" fg:w="1"/><text x="77.2419%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.9919%" y="501" width="0.0813%" height="15" fill="rgb(228,39,7)" fg:x="947" fg:w="1"/><text x="77.2419%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.9919%" y="485" width="0.0813%" height="15" fill="rgb(227,79,8)" fg:x="947" fg:w="1"/><text x="77.2419%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="77.0732%" y="613" width="0.0813%" height="15" fill="rgb(236,58,11)" fg:x="948" fg:w="1"/><text x="77.3232%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (7 samples, 0.57%)</title><rect x="76.7480%" y="661" width="0.5691%" height="15" fill="rgb(249,63,35)" fg:x="944" fg:w="7"/><text x="76.9980%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="77.0732%" y="645" width="0.2439%" height="15" fill="rgb(252,114,16)" fg:x="948" fg:w="3"/><text x="77.3232%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="77.0732%" y="629" width="0.2439%" height="15" fill="rgb(254,151,24)" fg:x="948" fg:w="3"/><text x="77.3232%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="77.1545%" y="613" width="0.1626%" height="15" fill="rgb(253,54,39)" fg:x="949" fg:w="2"/><text x="77.4045%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="77.1545%" y="597" width="0.1626%" height="15" fill="rgb(243,25,45)" fg:x="949" fg:w="2"/><text x="77.4045%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.2358%" y="581" width="0.0813%" height="15" fill="rgb(234,134,9)" fg:x="950" fg:w="1"/><text x="77.4858%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.2358%" y="565" width="0.0813%" height="15" fill="rgb(227,166,31)" fg:x="950" fg:w="1"/><text x="77.4858%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.2358%" y="549" width="0.0813%" height="15" fill="rgb(245,143,41)" fg:x="950" fg:w="1"/><text x="77.4858%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.2358%" y="533" width="0.0813%" height="15" fill="rgb(238,181,32)" fg:x="950" fg:w="1"/><text x="77.4858%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (9 samples, 0.73%)</title><rect x="76.6667%" y="693" width="0.7317%" height="15" fill="rgb(224,113,18)" fg:x="943" fg:w="9"/><text x="76.9167%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.73%)</title><rect x="76.6667%" y="677" width="0.7317%" height="15" fill="rgb(240,229,28)" fg:x="943" fg:w="9"/><text x="76.9167%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.3171%" y="661" width="0.0813%" height="15" fill="rgb(250,185,3)" fg:x="951" fg:w="1"/><text x="77.5671%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.3171%" y="645" width="0.0813%" height="15" fill="rgb(212,59,25)" fg:x="951" fg:w="1"/><text x="77.5671%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="77.3171%" y="629" width="0.0813%" height="15" fill="rgb(221,87,20)" fg:x="951" fg:w="1"/><text x="77.5671%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.3171%" y="613" width="0.0813%" height="15" fill="rgb(213,74,28)" fg:x="951" fg:w="1"/><text x="77.5671%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.3171%" y="597" width="0.0813%" height="15" fill="rgb(224,132,34)" fg:x="951" fg:w="1"/><text x="77.5671%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.3171%" y="581" width="0.0813%" height="15" fill="rgb(222,101,24)" fg:x="951" fg:w="1"/><text x="77.5671%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.3171%" y="565" width="0.0813%" height="15" fill="rgb(254,142,4)" fg:x="951" fg:w="1"/><text x="77.5671%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.3171%" y="549" width="0.0813%" height="15" fill="rgb(230,229,49)" fg:x="951" fg:w="1"/><text x="77.5671%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.3171%" y="533" width="0.0813%" height="15" fill="rgb(238,70,47)" fg:x="951" fg:w="1"/><text x="77.5671%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.3171%" y="517" width="0.0813%" height="15" fill="rgb(231,160,17)" fg:x="951" fg:w="1"/><text x="77.5671%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.3171%" y="501" width="0.0813%" height="15" fill="rgb(218,68,53)" fg:x="951" fg:w="1"/><text x="77.5671%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.3171%" y="485" width="0.0813%" height="15" fill="rgb(236,111,10)" fg:x="951" fg:w="1"/><text x="77.5671%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.3171%" y="469" width="0.0813%" height="15" fill="rgb(224,34,41)" fg:x="951" fg:w="1"/><text x="77.5671%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.3171%" y="453" width="0.0813%" height="15" fill="rgb(241,118,19)" fg:x="951" fg:w="1"/><text x="77.5671%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.3171%" y="437" width="0.0813%" height="15" fill="rgb(238,129,25)" fg:x="951" fg:w="1"/><text x="77.5671%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.3171%" y="421" width="0.0813%" height="15" fill="rgb(238,22,31)" fg:x="951" fg:w="1"/><text x="77.5671%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.3171%" y="405" width="0.0813%" height="15" fill="rgb(222,174,48)" fg:x="951" fg:w="1"/><text x="77.5671%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.3171%" y="389" width="0.0813%" height="15" fill="rgb(206,152,40)" fg:x="951" fg:w="1"/><text x="77.5671%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.3171%" y="373" width="0.0813%" height="15" fill="rgb(218,99,54)" fg:x="951" fg:w="1"/><text x="77.5671%" y="383.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="77.4797%" y="629" width="0.0813%" height="15" fill="rgb(220,174,26)" fg:x="953" fg:w="1"/><text x="77.7297%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.4797%" y="613" width="0.0813%" height="15" fill="rgb(245,116,9)" fg:x="953" fg:w="1"/><text x="77.7297%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.4797%" y="597" width="0.0813%" height="15" fill="rgb(209,72,35)" fg:x="953" fg:w="1"/><text x="77.7297%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.4797%" y="581" width="0.0813%" height="15" fill="rgb(226,126,21)" fg:x="953" fg:w="1"/><text x="77.7297%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.4797%" y="565" width="0.0813%" height="15" fill="rgb(227,192,1)" fg:x="953" fg:w="1"/><text x="77.7297%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.4797%" y="549" width="0.0813%" height="15" fill="rgb(237,180,29)" fg:x="953" fg:w="1"/><text x="77.7297%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.6423%" y="485" width="0.0813%" height="15" fill="rgb(230,197,35)" fg:x="955" fg:w="1"/><text x="77.8923%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.6423%" y="469" width="0.0813%" height="15" fill="rgb(246,193,31)" fg:x="955" fg:w="1"/><text x="77.8923%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.6423%" y="453" width="0.0813%" height="15" fill="rgb(241,36,4)" fg:x="955" fg:w="1"/><text x="77.8923%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.6423%" y="437" width="0.0813%" height="15" fill="rgb(241,130,17)" fg:x="955" fg:w="1"/><text x="77.8923%" y="447.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="77.6423%" y="421" width="0.0813%" height="15" fill="rgb(206,137,32)" fg:x="955" fg:w="1"/><text x="77.8923%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="77.5610%" y="549" width="0.2439%" height="15" fill="rgb(237,228,51)" fg:x="954" fg:w="3"/><text x="77.8110%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="77.5610%" y="533" width="0.2439%" height="15" fill="rgb(243,6,42)" fg:x="954" fg:w="3"/><text x="77.8110%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="77.5610%" y="517" width="0.2439%" height="15" fill="rgb(251,74,28)" fg:x="954" fg:w="3"/><text x="77.8110%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="77.5610%" y="501" width="0.2439%" height="15" fill="rgb(218,20,49)" fg:x="954" fg:w="3"/><text x="77.8110%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.7236%" y="485" width="0.0813%" height="15" fill="rgb(238,28,14)" fg:x="956" fg:w="1"/><text x="77.9736%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.7236%" y="469" width="0.0813%" height="15" fill="rgb(229,40,46)" fg:x="956" fg:w="1"/><text x="77.9736%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.7236%" y="453" width="0.0813%" height="15" fill="rgb(244,195,20)" fg:x="956" fg:w="1"/><text x="77.9736%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.33%)</title><rect x="77.5610%" y="597" width="0.3252%" height="15" fill="rgb(253,56,35)" fg:x="954" fg:w="4"/><text x="77.8110%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="77.5610%" y="581" width="0.3252%" height="15" fill="rgb(210,149,44)" fg:x="954" fg:w="4"/><text x="77.8110%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.33%)</title><rect x="77.5610%" y="565" width="0.3252%" height="15" fill="rgb(240,135,12)" fg:x="954" fg:w="4"/><text x="77.8110%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8049%" y="549" width="0.0813%" height="15" fill="rgb(251,24,50)" fg:x="957" fg:w="1"/><text x="78.0549%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.8049%" y="533" width="0.0813%" height="15" fill="rgb(243,200,47)" fg:x="957" fg:w="1"/><text x="78.0549%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="77.8049%" y="517" width="0.0813%" height="15" fill="rgb(224,166,26)" fg:x="957" fg:w="1"/><text x="78.0549%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8049%" y="501" width="0.0813%" height="15" fill="rgb(233,0,47)" fg:x="957" fg:w="1"/><text x="78.0549%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.8049%" y="485" width="0.0813%" height="15" fill="rgb(253,80,5)" fg:x="957" fg:w="1"/><text x="78.0549%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="77.8049%" y="469" width="0.0813%" height="15" fill="rgb(214,133,25)" fg:x="957" fg:w="1"/><text x="78.0549%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8049%" y="453" width="0.0813%" height="15" fill="rgb(209,27,14)" fg:x="957" fg:w="1"/><text x="78.0549%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.8049%" y="437" width="0.0813%" height="15" fill="rgb(219,102,51)" fg:x="957" fg:w="1"/><text x="78.0549%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="77.8049%" y="421" width="0.0813%" height="15" fill="rgb(237,18,16)" fg:x="957" fg:w="1"/><text x="78.0549%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8049%" y="405" width="0.0813%" height="15" fill="rgb(241,85,17)" fg:x="957" fg:w="1"/><text x="78.0549%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.8049%" y="389" width="0.0813%" height="15" fill="rgb(236,90,42)" fg:x="957" fg:w="1"/><text x="78.0549%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.8049%" y="373" width="0.0813%" height="15" fill="rgb(249,57,21)" fg:x="957" fg:w="1"/><text x="78.0549%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (6 samples, 0.49%)</title><rect x="77.4797%" y="645" width="0.4878%" height="15" fill="rgb(243,12,36)" fg:x="953" fg:w="6"/><text x="77.7297%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="77.5610%" y="629" width="0.4065%" height="15" fill="rgb(253,128,47)" fg:x="954" fg:w="5"/><text x="77.8110%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="77.5610%" y="613" width="0.4065%" height="15" fill="rgb(207,33,20)" fg:x="954" fg:w="5"/><text x="77.8110%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.8862%" y="597" width="0.0813%" height="15" fill="rgb(233,215,35)" fg:x="958" fg:w="1"/><text x="78.1362%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8862%" y="581" width="0.0813%" height="15" fill="rgb(249,188,52)" fg:x="958" fg:w="1"/><text x="78.1362%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.8862%" y="565" width="0.0813%" height="15" fill="rgb(225,12,32)" fg:x="958" fg:w="1"/><text x="78.1362%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.8862%" y="549" width="0.0813%" height="15" fill="rgb(247,98,14)" fg:x="958" fg:w="1"/><text x="78.1362%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.9675%" y="645" width="0.0813%" height="15" fill="rgb(247,219,48)" fg:x="959" fg:w="1"/><text x="78.2175%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.9675%" y="629" width="0.0813%" height="15" fill="rgb(253,60,48)" fg:x="959" fg:w="1"/><text x="78.2175%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="77.9675%" y="613" width="0.0813%" height="15" fill="rgb(245,15,52)" fg:x="959" fg:w="1"/><text x="78.2175%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.9675%" y="597" width="0.0813%" height="15" fill="rgb(220,133,28)" fg:x="959" fg:w="1"/><text x="78.2175%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.9675%" y="581" width="0.0813%" height="15" fill="rgb(217,180,4)" fg:x="959" fg:w="1"/><text x="78.2175%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.9675%" y="565" width="0.0813%" height="15" fill="rgb(251,24,1)" fg:x="959" fg:w="1"/><text x="78.2175%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.9675%" y="549" width="0.0813%" height="15" fill="rgb(212,185,49)" fg:x="959" fg:w="1"/><text x="78.2175%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.9675%" y="533" width="0.0813%" height="15" fill="rgb(215,175,22)" fg:x="959" fg:w="1"/><text x="78.2175%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.9675%" y="517" width="0.0813%" height="15" fill="rgb(250,205,14)" fg:x="959" fg:w="1"/><text x="78.2175%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.9675%" y="501" width="0.0813%" height="15" fill="rgb(225,211,22)" fg:x="959" fg:w="1"/><text x="78.2175%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.9675%" y="485" width="0.0813%" height="15" fill="rgb(251,179,42)" fg:x="959" fg:w="1"/><text x="78.2175%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (9 samples, 0.73%)</title><rect x="77.3984%" y="677" width="0.7317%" height="15" fill="rgb(208,216,51)" fg:x="952" fg:w="9"/><text x="77.6484%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.73%)</title><rect x="77.3984%" y="661" width="0.7317%" height="15" fill="rgb(235,36,11)" fg:x="952" fg:w="9"/><text x="77.6484%" y="671.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="78.0488%" y="645" width="0.0813%" height="15" fill="rgb(213,189,28)" fg:x="960" fg:w="1"/><text x="78.2988%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.0488%" y="629" width="0.0813%" height="15" fill="rgb(227,203,42)" fg:x="960" fg:w="1"/><text x="78.2988%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.0488%" y="613" width="0.0813%" height="15" fill="rgb(244,72,36)" fg:x="960" fg:w="1"/><text x="78.2988%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (10 samples, 0.81%)</title><rect x="77.3984%" y="693" width="0.8130%" height="15" fill="rgb(213,53,17)" fg:x="952" fg:w="10"/><text x="77.6484%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="78.1301%" y="677" width="0.0813%" height="15" fill="rgb(207,167,3)" fg:x="961" fg:w="1"/><text x="78.3801%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (963 samples, 78.29%)</title><rect x="0.0000%" y="757" width="78.2927%" height="15" fill="rgb(216,98,30)" fg:x="0" fg:w="963"/><text x="0.2500%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (963 samples, 78.29%)</title><rect x="0.0000%" y="741" width="78.2927%" height="15" fill="rgb(236,123,15)" fg:x="0" fg:w="963"/><text x="0.2500%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (963 samples, 78.29%)</title><rect x="0.0000%" y="725" width="78.2927%" height="15" fill="rgb(248,81,50)" fg:x="0" fg:w="963"/><text x="0.2500%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (831 samples, 67.56%)</title><rect x="10.7317%" y="709" width="67.5610%" height="15" fill="rgb(214,120,4)" fg:x="132" fg:w="831"/><text x="10.9817%" y="719.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="78.2114%" y="693" width="0.0813%" height="15" fill="rgb(208,179,34)" fg:x="962" fg:w="1"/><text x="78.4614%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="78.2114%" y="677" width="0.0813%" height="15" fill="rgb(227,140,7)" fg:x="962" fg:w="1"/><text x="78.4614%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="78.2114%" y="661" width="0.0813%" height="15" fill="rgb(214,22,6)" fg:x="962" fg:w="1"/><text x="78.4614%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.2114%" y="645" width="0.0813%" height="15" fill="rgb(207,137,27)" fg:x="962" fg:w="1"/><text x="78.4614%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.2114%" y="629" width="0.0813%" height="15" fill="rgb(210,8,46)" fg:x="962" fg:w="1"/><text x="78.4614%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.2114%" y="613" width="0.0813%" height="15" fill="rgb(240,16,54)" fg:x="962" fg:w="1"/><text x="78.4614%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.2114%" y="597" width="0.0813%" height="15" fill="rgb(211,209,29)" fg:x="962" fg:w="1"/><text x="78.4614%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.2114%" y="581" width="0.0813%" height="15" fill="rgb(226,228,24)" fg:x="962" fg:w="1"/><text x="78.4614%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.2114%" y="565" width="0.0813%" height="15" fill="rgb(222,84,9)" fg:x="962" fg:w="1"/><text x="78.4614%" y="575.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="78.2927%" y="693" width="0.0813%" height="15" fill="rgb(234,203,30)" fg:x="963" fg:w="1"/><text x="78.5427%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="78.2927%" y="709" width="0.2439%" height="15" fill="rgb(238,109,14)" fg:x="963" fg:w="3"/><text x="78.5427%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (2 samples, 0.16%)</title><rect x="78.3740%" y="693" width="0.1626%" height="15" fill="rgb(233,206,34)" fg:x="964" fg:w="2"/><text x="78.6240%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="78.3740%" y="677" width="0.1626%" height="15" fill="rgb(220,167,47)" fg:x="964" fg:w="2"/><text x="78.6240%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (2 samples, 0.16%)</title><rect x="78.3740%" y="661" width="0.1626%" height="15" fill="rgb(238,105,10)" fg:x="964" fg:w="2"/><text x="78.6240%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="78.3740%" y="645" width="0.1626%" height="15" fill="rgb(213,227,17)" fg:x="964" fg:w="2"/><text x="78.6240%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="78.3740%" y="629" width="0.1626%" height="15" fill="rgb(217,132,38)" fg:x="964" fg:w="2"/><text x="78.6240%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="78.3740%" y="613" width="0.1626%" height="15" fill="rgb(242,146,4)" fg:x="964" fg:w="2"/><text x="78.6240%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.4553%" y="597" width="0.0813%" height="15" fill="rgb(212,61,9)" fg:x="965" fg:w="1"/><text x="78.7053%" y="607.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="78.6179%" y="613" width="0.0813%" height="15" fill="rgb(247,126,22)" fg:x="967" fg:w="1"/><text x="78.8679%" y="623.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="78.6179%" y="597" width="0.0813%" height="15" fill="rgb(220,196,2)" fg:x="967" fg:w="1"/><text x="78.8679%" y="607.50"></text></g><g><title>_IO_default_xsputn (1 samples, 0.08%)</title><rect x="78.6179%" y="581" width="0.0813%" height="15" fill="rgb(208,46,4)" fg:x="967" fg:w="1"/><text x="78.8679%" y="591.50"></text></g><g><title>dlopen (1 samples, 0.08%)</title><rect x="78.6992%" y="613" width="0.0813%" height="15" fill="rgb(252,104,46)" fg:x="968" fg:w="1"/><text x="78.9492%" y="623.50"></text></g><g><title>_dl_catch_error (1 samples, 0.08%)</title><rect x="78.6992%" y="597" width="0.0813%" height="15" fill="rgb(237,152,48)" fg:x="968" fg:w="1"/><text x="78.9492%" y="607.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="78.6992%" y="581" width="0.0813%" height="15" fill="rgb(221,59,37)" fg:x="968" fg:w="1"/><text x="78.9492%" y="591.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="78.6992%" y="565" width="0.0813%" height="15" fill="rgb(209,202,51)" fg:x="968" fg:w="1"/><text x="78.9492%" y="575.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="78.6992%" y="549" width="0.0813%" height="15" fill="rgb(228,81,30)" fg:x="968" fg:w="1"/><text x="78.9492%" y="559.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (4 samples, 0.33%)</title><rect x="78.5366%" y="709" width="0.3252%" height="15" fill="rgb(227,42,39)" fg:x="966" fg:w="4"/><text x="78.7866%" y="719.50"></text></g><g><title>engine::session::Session::new (4 samples, 0.33%)</title><rect x="78.5366%" y="693" width="0.3252%" height="15" fill="rgb(221,26,2)" fg:x="966" fg:w="4"/><text x="78.7866%" y="703.50"></text></g><g><title>engine::session::Session::initialize (4 samples, 0.33%)</title><rect x="78.5366%" y="677" width="0.3252%" height="15" fill="rgb(254,61,31)" fg:x="966" fg:w="4"/><text x="78.7866%" y="687.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (4 samples, 0.33%)</title><rect x="78.5366%" y="661" width="0.3252%" height="15" fill="rgb(222,173,38)" fg:x="966" fg:w="4"/><text x="78.7866%" y="671.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.33%)</title><rect x="78.5366%" y="645" width="0.3252%" height="15" fill="rgb(218,50,12)" fg:x="966" fg:w="4"/><text x="78.7866%" y="655.50"></text></g><g><title>libloading::safe::Library::new (4 samples, 0.33%)</title><rect x="78.5366%" y="629" width="0.3252%" height="15" fill="rgb(223,88,40)" fg:x="966" fg:w="4"/><text x="78.7866%" y="639.50"></text></g><g><title>libloading::util::cstr_cow_from_bytes (1 samples, 0.08%)</title><rect x="78.7805%" y="613" width="0.0813%" height="15" fill="rgb(237,54,19)" fg:x="969" fg:w="1"/><text x="79.0305%" y="623.50"></text></g><g><title>&lt;&amp;str as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (1 samples, 0.08%)</title><rect x="78.7805%" y="597" width="0.0813%" height="15" fill="rgb(251,129,25)" fg:x="969" fg:w="1"/><text x="79.0305%" y="607.50"></text></g><g><title>alloc::ffi::c_str::CString::new::spec_new_impl_bytes (1 samples, 0.08%)</title><rect x="78.7805%" y="581" width="0.0813%" height="15" fill="rgb(238,97,19)" fg:x="969" fg:w="1"/><text x="79.0305%" y="591.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.08%)</title><rect x="78.7805%" y="565" width="0.0813%" height="15" fill="rgb(240,169,18)" fg:x="969" fg:w="1"/><text x="79.0305%" y="575.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.08%)</title><rect x="78.7805%" y="549" width="0.0813%" height="15" fill="rgb(230,187,49)" fg:x="969" fg:w="1"/><text x="79.0305%" y="559.50"></text></g><g><title>core::slice::memchr::memchr_naive (1 samples, 0.08%)</title><rect x="78.7805%" y="533" width="0.0813%" height="15" fill="rgb(209,44,26)" fg:x="969" fg:w="1"/><text x="79.0305%" y="543.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="78.8618%" y="677" width="0.0813%" height="15" fill="rgb(244,0,6)" fg:x="970" fg:w="1"/><text x="79.1118%" y="687.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="78.8618%" y="661" width="0.0813%" height="15" fill="rgb(248,18,21)" fg:x="970" fg:w="1"/><text x="79.1118%" y="671.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="78.8618%" y="645" width="0.0813%" height="15" fill="rgb(245,180,19)" fg:x="970" fg:w="1"/><text x="79.1118%" y="655.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="78.8618%" y="629" width="0.0813%" height="15" fill="rgb(252,118,36)" fg:x="970" fg:w="1"/><text x="79.1118%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="78.8618%" y="613" width="0.0813%" height="15" fill="rgb(210,224,19)" fg:x="970" fg:w="1"/><text x="79.1118%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="78.8618%" y="597" width="0.0813%" height="15" fill="rgb(218,30,24)" fg:x="970" fg:w="1"/><text x="79.1118%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="78.9431%" y="597" width="0.0813%" height="15" fill="rgb(219,75,50)" fg:x="971" fg:w="1"/><text x="79.1931%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.9431%" y="581" width="0.0813%" height="15" fill="rgb(234,72,50)" fg:x="971" fg:w="1"/><text x="79.1931%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.9431%" y="565" width="0.0813%" height="15" fill="rgb(219,100,48)" fg:x="971" fg:w="1"/><text x="79.1931%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="78.9431%" y="613" width="0.1626%" height="15" fill="rgb(253,5,41)" fg:x="971" fg:w="2"/><text x="79.1931%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.0244%" y="597" width="0.0813%" height="15" fill="rgb(247,181,11)" fg:x="972" fg:w="1"/><text x="79.2744%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.0244%" y="581" width="0.0813%" height="15" fill="rgb(222,223,25)" fg:x="972" fg:w="1"/><text x="79.2744%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.0244%" y="565" width="0.0813%" height="15" fill="rgb(214,198,28)" fg:x="972" fg:w="1"/><text x="79.2744%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.0244%" y="549" width="0.0813%" height="15" fill="rgb(230,46,43)" fg:x="972" fg:w="1"/><text x="79.2744%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="79.1057%" y="597" width="0.0813%" height="15" fill="rgb(233,65,53)" fg:x="973" fg:w="1"/><text x="79.3557%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.1057%" y="581" width="0.0813%" height="15" fill="rgb(221,121,27)" fg:x="973" fg:w="1"/><text x="79.3557%" y="591.50"></text></g><g><title>engine::session::Session::flush (5 samples, 0.41%)</title><rect x="78.8618%" y="693" width="0.4065%" height="15" fill="rgb(247,70,47)" fg:x="970" fg:w="5"/><text x="79.1118%" y="703.50"></text></g><g><title>engine::session::state::State::close (4 samples, 0.33%)</title><rect x="78.9431%" y="677" width="0.3252%" height="15" fill="rgb(228,85,35)" fg:x="971" fg:w="4"/><text x="79.1931%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (4 samples, 0.33%)</title><rect x="78.9431%" y="661" width="0.3252%" height="15" fill="rgb(209,50,18)" fg:x="971" fg:w="4"/><text x="79.1931%" y="671.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (4 samples, 0.33%)</title><rect x="78.9431%" y="645" width="0.3252%" height="15" fill="rgb(250,19,35)" fg:x="971" fg:w="4"/><text x="79.1931%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (4 samples, 0.33%)</title><rect x="78.9431%" y="629" width="0.3252%" height="15" fill="rgb(253,107,29)" fg:x="971" fg:w="4"/><text x="79.1931%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="79.1057%" y="613" width="0.1626%" height="15" fill="rgb(252,179,29)" fg:x="973" fg:w="2"/><text x="79.3557%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="79.1870%" y="597" width="0.0813%" height="15" fill="rgb(238,194,6)" fg:x="974" fg:w="1"/><text x="79.4370%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.1870%" y="581" width="0.0813%" height="15" fill="rgb(238,164,29)" fg:x="974" fg:w="1"/><text x="79.4370%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="79.1870%" y="565" width="0.0813%" height="15" fill="rgb(224,25,9)" fg:x="974" fg:w="1"/><text x="79.4370%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.1870%" y="549" width="0.0813%" height="15" fill="rgb(244,153,23)" fg:x="974" fg:w="1"/><text x="79.4370%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.1870%" y="533" width="0.0813%" height="15" fill="rgb(212,203,14)" fg:x="974" fg:w="1"/><text x="79.4370%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.1870%" y="517" width="0.0813%" height="15" fill="rgb(220,164,20)" fg:x="974" fg:w="1"/><text x="79.4370%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="79.1870%" y="501" width="0.0813%" height="15" fill="rgb(222,203,48)" fg:x="974" fg:w="1"/><text x="79.4370%" y="511.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="79.2683%" y="693" width="0.0813%" height="15" fill="rgb(215,159,22)" fg:x="975" fg:w="1"/><text x="79.5183%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="79.2683%" y="677" width="0.0813%" height="15" fill="rgb(216,183,47)" fg:x="975" fg:w="1"/><text x="79.5183%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="79.2683%" y="661" width="0.0813%" height="15" fill="rgb(229,195,25)" fg:x="975" fg:w="1"/><text x="79.5183%" y="671.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="79.2683%" y="645" width="0.0813%" height="15" fill="rgb(224,132,51)" fg:x="975" fg:w="1"/><text x="79.5183%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="79.2683%" y="629" width="0.0813%" height="15" fill="rgb(240,63,7)" fg:x="975" fg:w="1"/><text x="79.5183%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="79.2683%" y="613" width="0.0813%" height="15" fill="rgb(249,182,41)" fg:x="975" fg:w="1"/><text x="79.5183%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="79.2683%" y="597" width="0.0813%" height="15" fill="rgb(243,47,26)" fg:x="975" fg:w="1"/><text x="79.5183%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="79.2683%" y="581" width="0.0813%" height="15" fill="rgb(233,48,2)" fg:x="975" fg:w="1"/><text x="79.5183%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.2683%" y="565" width="0.0813%" height="15" fill="rgb(244,165,34)" fg:x="975" fg:w="1"/><text x="79.5183%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.2683%" y="549" width="0.0813%" height="15" fill="rgb(207,89,7)" fg:x="975" fg:w="1"/><text x="79.5183%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.2683%" y="533" width="0.0813%" height="15" fill="rgb(244,117,36)" fg:x="975" fg:w="1"/><text x="79.5183%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.2683%" y="517" width="0.0813%" height="15" fill="rgb(226,144,34)" fg:x="975" fg:w="1"/><text x="79.5183%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.2683%" y="501" width="0.0813%" height="15" fill="rgb(213,23,19)" fg:x="975" fg:w="1"/><text x="79.5183%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="79.3496%" y="613" width="0.0813%" height="15" fill="rgb(217,75,12)" fg:x="976" fg:w="1"/><text x="79.5996%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="79.3496%" y="597" width="0.0813%" height="15" fill="rgb(224,159,17)" fg:x="976" fg:w="1"/><text x="79.5996%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="79.3496%" y="581" width="0.0813%" height="15" fill="rgb(217,118,1)" fg:x="976" fg:w="1"/><text x="79.5996%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="79.3496%" y="565" width="0.0813%" height="15" fill="rgb(232,180,48)" fg:x="976" fg:w="1"/><text x="79.5996%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="79.3496%" y="549" width="0.0813%" height="15" fill="rgb(230,27,33)" fg:x="976" fg:w="1"/><text x="79.5996%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="79.3496%" y="533" width="0.0813%" height="15" fill="rgb(205,31,21)" fg:x="976" fg:w="1"/><text x="79.5996%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.3496%" y="517" width="0.0813%" height="15" fill="rgb(253,59,4)" fg:x="976" fg:w="1"/><text x="79.5996%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.3496%" y="501" width="0.0813%" height="15" fill="rgb(224,201,9)" fg:x="976" fg:w="1"/><text x="79.5996%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.3496%" y="485" width="0.0813%" height="15" fill="rgb(229,206,30)" fg:x="976" fg:w="1"/><text x="79.5996%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.3496%" y="469" width="0.0813%" height="15" fill="rgb(212,67,47)" fg:x="976" fg:w="1"/><text x="79.5996%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="79.3496%" y="677" width="0.1626%" height="15" fill="rgb(211,96,50)" fg:x="976" fg:w="2"/><text x="79.5996%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="79.3496%" y="661" width="0.1626%" height="15" fill="rgb(252,114,18)" fg:x="976" fg:w="2"/><text x="79.5996%" y="671.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="79.3496%" y="645" width="0.1626%" height="15" fill="rgb(223,58,37)" fg:x="976" fg:w="2"/><text x="79.5996%" y="655.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="79.3496%" y="629" width="0.1626%" height="15" fill="rgb(237,70,4)" fg:x="976" fg:w="2"/><text x="79.5996%" y="639.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="79.4309%" y="613" width="0.0813%" height="15" fill="rgb(244,85,46)" fg:x="977" fg:w="1"/><text x="79.6809%" y="623.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="79.4309%" y="597" width="0.0813%" height="15" fill="rgb(223,39,52)" fg:x="977" fg:w="1"/><text x="79.6809%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="79.4309%" y="581" width="0.0813%" height="15" fill="rgb(218,200,14)" fg:x="977" fg:w="1"/><text x="79.6809%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="79.4309%" y="565" width="0.0813%" height="15" fill="rgb(208,171,16)" fg:x="977" fg:w="1"/><text x="79.6809%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="79.4309%" y="549" width="0.0813%" height="15" fill="rgb(234,200,18)" fg:x="977" fg:w="1"/><text x="79.6809%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="79.4309%" y="533" width="0.0813%" height="15" fill="rgb(228,45,11)" fg:x="977" fg:w="1"/><text x="79.6809%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.4309%" y="517" width="0.0813%" height="15" fill="rgb(237,182,11)" fg:x="977" fg:w="1"/><text x="79.6809%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.4309%" y="501" width="0.0813%" height="15" fill="rgb(241,175,49)" fg:x="977" fg:w="1"/><text x="79.6809%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.4309%" y="485" width="0.0813%" height="15" fill="rgb(247,38,35)" fg:x="977" fg:w="1"/><text x="79.6809%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.4309%" y="469" width="0.0813%" height="15" fill="rgb(228,39,49)" fg:x="977" fg:w="1"/><text x="79.6809%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.4309%" y="453" width="0.0813%" height="15" fill="rgb(226,101,26)" fg:x="977" fg:w="1"/><text x="79.6809%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.4309%" y="437" width="0.0813%" height="15" fill="rgb(206,141,19)" fg:x="977" fg:w="1"/><text x="79.6809%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.4309%" y="421" width="0.0813%" height="15" fill="rgb(211,200,13)" fg:x="977" fg:w="1"/><text x="79.6809%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.4309%" y="405" width="0.0813%" height="15" fill="rgb(241,121,6)" fg:x="977" fg:w="1"/><text x="79.6809%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.4309%" y="389" width="0.0813%" height="15" fill="rgb(234,221,29)" fg:x="977" fg:w="1"/><text x="79.6809%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="79.4309%" y="373" width="0.0813%" height="15" fill="rgb(229,136,5)" fg:x="977" fg:w="1"/><text x="79.6809%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="79.4309%" y="357" width="0.0813%" height="15" fill="rgb(238,36,11)" fg:x="977" fg:w="1"/><text x="79.6809%" y="367.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="79.5122%" y="581" width="0.0813%" height="15" fill="rgb(251,55,41)" fg:x="978" fg:w="1"/><text x="79.7622%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="79.5122%" y="565" width="0.0813%" height="15" fill="rgb(242,34,40)" fg:x="978" fg:w="1"/><text x="79.7622%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.5122%" y="549" width="0.0813%" height="15" fill="rgb(215,42,17)" fg:x="978" fg:w="1"/><text x="79.7622%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.5935%" y="485" width="0.0813%" height="15" fill="rgb(207,44,46)" fg:x="979" fg:w="1"/><text x="79.8435%" y="495.50"></text></g><g><title>engine::session::Session::flush (3 samples, 0.24%)</title><rect x="79.5122%" y="677" width="0.2439%" height="15" fill="rgb(211,206,28)" fg:x="978" fg:w="3"/><text x="79.7622%" y="687.50"></text></g><g><title>engine::session::Session::save_changes (3 samples, 0.24%)</title><rect x="79.5122%" y="661" width="0.2439%" height="15" fill="rgb(237,167,16)" fg:x="978" fg:w="3"/><text x="79.7622%" y="671.50"></text></g><g><title>engine::session::state::State::close (3 samples, 0.24%)</title><rect x="79.5122%" y="645" width="0.2439%" height="15" fill="rgb(233,66,6)" fg:x="978" fg:w="3"/><text x="79.7622%" y="655.50"></text></g><g><title>engine::session::state::State::flush_entities (3 samples, 0.24%)</title><rect x="79.5122%" y="629" width="0.2439%" height="15" fill="rgb(246,123,29)" fg:x="978" fg:w="3"/><text x="79.7622%" y="639.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (3 samples, 0.24%)</title><rect x="79.5122%" y="613" width="0.2439%" height="15" fill="rgb(209,62,40)" fg:x="978" fg:w="3"/><text x="79.7622%" y="623.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (3 samples, 0.24%)</title><rect x="79.5122%" y="597" width="0.2439%" height="15" fill="rgb(218,4,25)" fg:x="978" fg:w="3"/><text x="79.7622%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="79.5935%" y="581" width="0.1626%" height="15" fill="rgb(253,91,49)" fg:x="979" fg:w="2"/><text x="79.8435%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="79.5935%" y="565" width="0.1626%" height="15" fill="rgb(228,155,29)" fg:x="979" fg:w="2"/><text x="79.8435%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="79.5935%" y="549" width="0.1626%" height="15" fill="rgb(243,57,37)" fg:x="979" fg:w="2"/><text x="79.8435%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="79.5935%" y="533" width="0.1626%" height="15" fill="rgb(244,167,17)" fg:x="979" fg:w="2"/><text x="79.8435%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="79.5935%" y="517" width="0.1626%" height="15" fill="rgb(207,181,38)" fg:x="979" fg:w="2"/><text x="79.8435%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="79.5935%" y="501" width="0.1626%" height="15" fill="rgb(211,8,23)" fg:x="979" fg:w="2"/><text x="79.8435%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.6748%" y="485" width="0.0813%" height="15" fill="rgb(235,11,44)" fg:x="980" fg:w="1"/><text x="79.9248%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.6748%" y="469" width="0.0813%" height="15" fill="rgb(248,18,52)" fg:x="980" fg:w="1"/><text x="79.9248%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.6748%" y="453" width="0.0813%" height="15" fill="rgb(208,4,7)" fg:x="980" fg:w="1"/><text x="79.9248%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.6748%" y="437" width="0.0813%" height="15" fill="rgb(240,17,39)" fg:x="980" fg:w="1"/><text x="79.9248%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.6748%" y="421" width="0.0813%" height="15" fill="rgb(207,170,3)" fg:x="980" fg:w="1"/><text x="79.9248%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.6748%" y="405" width="0.0813%" height="15" fill="rgb(236,100,52)" fg:x="980" fg:w="1"/><text x="79.9248%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="79.8374%" y="645" width="0.0813%" height="15" fill="rgb(246,78,51)" fg:x="982" fg:w="1"/><text x="80.0874%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="79.8374%" y="629" width="0.0813%" height="15" fill="rgb(211,17,15)" fg:x="982" fg:w="1"/><text x="80.0874%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="79.8374%" y="613" width="0.0813%" height="15" fill="rgb(209,59,46)" fg:x="982" fg:w="1"/><text x="80.0874%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.8374%" y="597" width="0.0813%" height="15" fill="rgb(210,92,25)" fg:x="982" fg:w="1"/><text x="80.0874%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.8374%" y="581" width="0.0813%" height="15" fill="rgb(238,174,52)" fg:x="982" fg:w="1"/><text x="80.0874%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.8374%" y="565" width="0.0813%" height="15" fill="rgb(230,73,7)" fg:x="982" fg:w="1"/><text x="80.0874%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.8374%" y="549" width="0.0813%" height="15" fill="rgb(243,124,40)" fg:x="982" fg:w="1"/><text x="80.0874%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.8374%" y="533" width="0.0813%" height="15" fill="rgb(244,170,11)" fg:x="982" fg:w="1"/><text x="80.0874%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.8374%" y="517" width="0.0813%" height="15" fill="rgb(207,114,54)" fg:x="982" fg:w="1"/><text x="80.0874%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="79.8374%" y="501" width="0.0813%" height="15" fill="rgb(205,42,20)" fg:x="982" fg:w="1"/><text x="80.0874%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="79.8374%" y="485" width="0.0813%" height="15" fill="rgb(230,30,28)" fg:x="982" fg:w="1"/><text x="80.0874%" y="495.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="79.9187%" y="645" width="0.0813%" height="15" fill="rgb(205,73,54)" fg:x="983" fg:w="1"/><text x="80.1687%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="79.9187%" y="629" width="0.0813%" height="15" fill="rgb(254,227,23)" fg:x="983" fg:w="1"/><text x="80.1687%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.9187%" y="613" width="0.0813%" height="15" fill="rgb(228,202,34)" fg:x="983" fg:w="1"/><text x="80.1687%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="79.8374%" y="661" width="0.2439%" height="15" fill="rgb(222,225,37)" fg:x="982" fg:w="3"/><text x="80.0874%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="80.0000%" y="645" width="0.0813%" height="15" fill="rgb(221,14,54)" fg:x="984" fg:w="1"/><text x="80.2500%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="80.0000%" y="629" width="0.0813%" height="15" fill="rgb(254,102,2)" fg:x="984" fg:w="1"/><text x="80.2500%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="80.0000%" y="613" width="0.0813%" height="15" fill="rgb(232,104,17)" fg:x="984" fg:w="1"/><text x="80.2500%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="80.0000%" y="597" width="0.0813%" height="15" fill="rgb(250,220,14)" fg:x="984" fg:w="1"/><text x="80.2500%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="80.0000%" y="581" width="0.0813%" height="15" fill="rgb(241,158,9)" fg:x="984" fg:w="1"/><text x="80.2500%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.0000%" y="565" width="0.0813%" height="15" fill="rgb(246,9,43)" fg:x="984" fg:w="1"/><text x="80.2500%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="80.0000%" y="549" width="0.0813%" height="15" fill="rgb(206,73,33)" fg:x="984" fg:w="1"/><text x="80.2500%" y="559.50"></text></g><g><title>plugins_core::build::Build::holding (5 samples, 0.41%)</title><rect x="79.7561%" y="677" width="0.4065%" height="15" fill="rgb(222,79,8)" fg:x="981" fg:w="5"/><text x="80.0061%" y="687.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="80.0813%" y="661" width="0.0813%" height="15" fill="rgb(234,8,54)" fg:x="985" fg:w="1"/><text x="80.3313%" y="671.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="80.0813%" y="645" width="0.0813%" height="15" fill="rgb(209,134,38)" fg:x="985" fg:w="1"/><text x="80.3313%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="80.0813%" y="629" width="0.0813%" height="15" fill="rgb(230,127,29)" fg:x="985" fg:w="1"/><text x="80.3313%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="80.0813%" y="613" width="0.0813%" height="15" fill="rgb(242,44,41)" fg:x="985" fg:w="1"/><text x="80.3313%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="80.0813%" y="597" width="0.0813%" height="15" fill="rgb(222,56,43)" fg:x="985" fg:w="1"/><text x="80.3313%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="80.0813%" y="581" width="0.0813%" height="15" fill="rgb(238,39,47)" fg:x="985" fg:w="1"/><text x="80.3313%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.0813%" y="565" width="0.0813%" height="15" fill="rgb(226,79,43)" fg:x="985" fg:w="1"/><text x="80.3313%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="80.0813%" y="549" width="0.0813%" height="15" fill="rgb(242,105,53)" fg:x="985" fg:w="1"/><text x="80.3313%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.0813%" y="533" width="0.0813%" height="15" fill="rgb(251,132,46)" fg:x="985" fg:w="1"/><text x="80.3313%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.0813%" y="517" width="0.0813%" height="15" fill="rgb(231,77,14)" fg:x="985" fg:w="1"/><text x="80.3313%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.0813%" y="501" width="0.0813%" height="15" fill="rgb(240,135,9)" fg:x="985" fg:w="1"/><text x="80.3313%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.0813%" y="485" width="0.0813%" height="15" fill="rgb(248,109,14)" fg:x="985" fg:w="1"/><text x="80.3313%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.0813%" y="469" width="0.0813%" height="15" fill="rgb(227,146,52)" fg:x="985" fg:w="1"/><text x="80.3313%" y="479.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (11 samples, 0.89%)</title><rect x="79.3496%" y="693" width="0.8943%" height="15" fill="rgb(232,54,3)" fg:x="976" fg:w="11"/><text x="79.5996%" y="703.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="80.1626%" y="677" width="0.0813%" height="15" fill="rgb(229,201,43)" fg:x="986" fg:w="1"/><text x="80.4126%" y="687.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (18 samples, 1.46%)</title><rect x="78.8618%" y="709" width="1.4634%" height="15" fill="rgb(252,161,33)" fg:x="970" fg:w="18"/><text x="79.1118%" y="719.50"></text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (1 samples, 0.08%)</title><rect x="80.2439%" y="693" width="0.0813%" height="15" fill="rgb(226,146,40)" fg:x="987" fg:w="1"/><text x="80.4939%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="80.2439%" y="677" width="0.0813%" height="15" fill="rgb(219,47,25)" fg:x="987" fg:w="1"/><text x="80.4939%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="80.2439%" y="661" width="0.0813%" height="15" fill="rgb(250,135,13)" fg:x="987" fg:w="1"/><text x="80.4939%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="80.2439%" y="645" width="0.0813%" height="15" fill="rgb(219,229,18)" fg:x="987" fg:w="1"/><text x="80.4939%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="80.2439%" y="629" width="0.0813%" height="15" fill="rgb(217,152,27)" fg:x="987" fg:w="1"/><text x="80.4939%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="80.2439%" y="613" width="0.0813%" height="15" fill="rgb(225,71,47)" fg:x="987" fg:w="1"/><text x="80.4939%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="80.2439%" y="597" width="0.0813%" height="15" fill="rgb(220,139,14)" fg:x="987" fg:w="1"/><text x="80.4939%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="80.2439%" y="581" width="0.0813%" height="15" fill="rgb(247,54,32)" fg:x="987" fg:w="1"/><text x="80.4939%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="80.2439%" y="565" width="0.0813%" height="15" fill="rgb(252,131,39)" fg:x="987" fg:w="1"/><text x="80.4939%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="80.2439%" y="549" width="0.0813%" height="15" fill="rgb(210,108,39)" fg:x="987" fg:w="1"/><text x="80.4939%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="80.2439%" y="533" width="0.0813%" height="15" fill="rgb(205,23,29)" fg:x="987" fg:w="1"/><text x="80.4939%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.2439%" y="517" width="0.0813%" height="15" fill="rgb(246,139,46)" fg:x="987" fg:w="1"/><text x="80.4939%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.2439%" y="501" width="0.0813%" height="15" fill="rgb(250,81,26)" fg:x="987" fg:w="1"/><text x="80.4939%" y="511.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="80.2439%" y="485" width="0.0813%" height="15" fill="rgb(214,104,7)" fg:x="987" fg:w="1"/><text x="80.4939%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="80.2439%" y="469" width="0.0813%" height="15" fill="rgb(233,189,8)" fg:x="987" fg:w="1"/><text x="80.4939%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="80.2439%" y="453" width="0.0813%" height="15" fill="rgb(228,141,17)" fg:x="987" fg:w="1"/><text x="80.4939%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="80.2439%" y="437" width="0.0813%" height="15" fill="rgb(247,157,1)" fg:x="987" fg:w="1"/><text x="80.4939%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="80.2439%" y="421" width="0.0813%" height="15" fill="rgb(249,225,5)" fg:x="987" fg:w="1"/><text x="80.4939%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="80.2439%" y="405" width="0.0813%" height="15" fill="rgb(242,55,13)" fg:x="987" fg:w="1"/><text x="80.4939%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.2439%" y="389" width="0.0813%" height="15" fill="rgb(230,49,50)" fg:x="987" fg:w="1"/><text x="80.4939%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="80.2439%" y="373" width="0.0813%" height="15" fill="rgb(241,111,38)" fg:x="987" fg:w="1"/><text x="80.4939%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.2439%" y="357" width="0.0813%" height="15" fill="rgb(252,155,4)" fg:x="987" fg:w="1"/><text x="80.4939%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.2439%" y="341" width="0.0813%" height="15" fill="rgb(212,69,32)" fg:x="987" fg:w="1"/><text x="80.4939%" y="351.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="80.4065%" y="613" width="0.0813%" height="15" fill="rgb(243,107,47)" fg:x="989" fg:w="1"/><text x="80.6565%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.4065%" y="597" width="0.0813%" height="15" fill="rgb(247,130,12)" fg:x="989" fg:w="1"/><text x="80.6565%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.4878%" y="597" width="0.0813%" height="15" fill="rgb(233,74,16)" fg:x="990" fg:w="1"/><text x="80.7378%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.4878%" y="581" width="0.0813%" height="15" fill="rgb(208,58,18)" fg:x="990" fg:w="1"/><text x="80.7378%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.4878%" y="565" width="0.0813%" height="15" fill="rgb(242,225,1)" fg:x="990" fg:w="1"/><text x="80.7378%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.5691%" y="597" width="0.0813%" height="15" fill="rgb(249,39,40)" fg:x="991" fg:w="1"/><text x="80.8191%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.5691%" y="581" width="0.0813%" height="15" fill="rgb(207,72,44)" fg:x="991" fg:w="1"/><text x="80.8191%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.5691%" y="565" width="0.0813%" height="15" fill="rgb(215,193,12)" fg:x="991" fg:w="1"/><text x="80.8191%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.5691%" y="549" width="0.0813%" height="15" fill="rgb(248,41,39)" fg:x="991" fg:w="1"/><text x="80.8191%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.5691%" y="533" width="0.0813%" height="15" fill="rgb(253,85,4)" fg:x="991" fg:w="1"/><text x="80.8191%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.33%)</title><rect x="80.4065%" y="629" width="0.3252%" height="15" fill="rgb(243,70,31)" fg:x="989" fg:w="4"/><text x="80.6565%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="80.4878%" y="613" width="0.2439%" height="15" fill="rgb(253,195,26)" fg:x="990" fg:w="3"/><text x="80.7378%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.6504%" y="597" width="0.0813%" height="15" fill="rgb(243,42,11)" fg:x="992" fg:w="1"/><text x="80.9004%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.6504%" y="581" width="0.0813%" height="15" fill="rgb(239,66,17)" fg:x="992" fg:w="1"/><text x="80.9004%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.6504%" y="565" width="0.0813%" height="15" fill="rgb(217,132,21)" fg:x="992" fg:w="1"/><text x="80.9004%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.6504%" y="549" width="0.0813%" height="15" fill="rgb(252,202,21)" fg:x="992" fg:w="1"/><text x="80.9004%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.6504%" y="533" width="0.0813%" height="15" fill="rgb(233,98,36)" fg:x="992" fg:w="1"/><text x="80.9004%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.6504%" y="517" width="0.0813%" height="15" fill="rgb(216,153,54)" fg:x="992" fg:w="1"/><text x="80.9004%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.7317%" y="597" width="0.0813%" height="15" fill="rgb(250,99,7)" fg:x="993" fg:w="1"/><text x="80.9817%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="80.7317%" y="581" width="0.0813%" height="15" fill="rgb(207,56,50)" fg:x="993" fg:w="1"/><text x="80.9817%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.7317%" y="565" width="0.0813%" height="15" fill="rgb(244,61,34)" fg:x="993" fg:w="1"/><text x="80.9817%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.7317%" y="549" width="0.0813%" height="15" fill="rgb(241,50,38)" fg:x="993" fg:w="1"/><text x="80.9817%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.7317%" y="533" width="0.0813%" height="15" fill="rgb(212,166,30)" fg:x="993" fg:w="1"/><text x="80.9817%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="80.7317%" y="517" width="0.0813%" height="15" fill="rgb(249,127,32)" fg:x="993" fg:w="1"/><text x="80.9817%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="80.7317%" y="501" width="0.0813%" height="15" fill="rgb(209,103,0)" fg:x="993" fg:w="1"/><text x="80.9817%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.7317%" y="485" width="0.0813%" height="15" fill="rgb(238,209,51)" fg:x="993" fg:w="1"/><text x="80.9817%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="80.7317%" y="613" width="0.1626%" height="15" fill="rgb(237,56,23)" fg:x="993" fg:w="2"/><text x="80.9817%" y="623.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="80.8130%" y="597" width="0.0813%" height="15" fill="rgb(215,153,46)" fg:x="994" fg:w="1"/><text x="81.0630%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="80.8130%" y="581" width="0.0813%" height="15" fill="rgb(224,49,31)" fg:x="994" fg:w="1"/><text x="81.0630%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="80.8130%" y="565" width="0.0813%" height="15" fill="rgb(250,18,42)" fg:x="994" fg:w="1"/><text x="81.0630%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="80.8130%" y="549" width="0.0813%" height="15" fill="rgb(215,176,39)" fg:x="994" fg:w="1"/><text x="81.0630%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="80.8130%" y="533" width="0.0813%" height="15" fill="rgb(223,77,29)" fg:x="994" fg:w="1"/><text x="81.0630%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="80.8130%" y="517" width="0.0813%" height="15" fill="rgb(234,94,52)" fg:x="994" fg:w="1"/><text x="81.0630%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="80.8130%" y="501" width="0.0813%" height="15" fill="rgb(220,154,50)" fg:x="994" fg:w="1"/><text x="81.0630%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="80.8130%" y="485" width="0.0813%" height="15" fill="rgb(212,11,10)" fg:x="994" fg:w="1"/><text x="81.0630%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.9756%" y="501" width="0.0813%" height="15" fill="rgb(205,166,19)" fg:x="996" fg:w="1"/><text x="81.2256%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.9756%" y="485" width="0.0813%" height="15" fill="rgb(244,198,16)" fg:x="996" fg:w="1"/><text x="81.2256%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.0569%" y="485" width="0.0813%" height="15" fill="rgb(219,69,12)" fg:x="997" fg:w="1"/><text x="81.3069%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.0569%" y="469" width="0.0813%" height="15" fill="rgb(245,30,7)" fg:x="997" fg:w="1"/><text x="81.3069%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.0569%" y="453" width="0.0813%" height="15" fill="rgb(218,221,48)" fg:x="997" fg:w="1"/><text x="81.3069%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.0569%" y="437" width="0.0813%" height="15" fill="rgb(216,66,15)" fg:x="997" fg:w="1"/><text x="81.3069%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.0569%" y="421" width="0.0813%" height="15" fill="rgb(226,122,50)" fg:x="997" fg:w="1"/><text x="81.3069%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.0569%" y="405" width="0.0813%" height="15" fill="rgb(239,156,16)" fg:x="997" fg:w="1"/><text x="81.3069%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.0569%" y="389" width="0.0813%" height="15" fill="rgb(224,27,38)" fg:x="997" fg:w="1"/><text x="81.3069%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.0569%" y="373" width="0.0813%" height="15" fill="rgb(224,39,27)" fg:x="997" fg:w="1"/><text x="81.3069%" y="383.50"></text></g><g><title>engine::session::state::State::close (11 samples, 0.89%)</title><rect x="80.3252%" y="693" width="0.8943%" height="15" fill="rgb(215,92,29)" fg:x="988" fg:w="11"/><text x="80.5752%" y="703.50"></text></g><g><title>engine::session::state::State::flush_entities (11 samples, 0.89%)</title><rect x="80.3252%" y="677" width="0.8943%" height="15" fill="rgb(207,159,16)" fg:x="988" fg:w="11"/><text x="80.5752%" y="687.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (11 samples, 0.89%)</title><rect x="80.3252%" y="661" width="0.8943%" height="15" fill="rgb(238,163,47)" fg:x="988" fg:w="11"/><text x="80.5752%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (11 samples, 0.89%)</title><rect x="80.3252%" y="645" width="0.8943%" height="15" fill="rgb(219,91,49)" fg:x="988" fg:w="11"/><text x="80.5752%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.49%)</title><rect x="80.7317%" y="629" width="0.4878%" height="15" fill="rgb(227,167,31)" fg:x="993" fg:w="6"/><text x="80.9817%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.33%)</title><rect x="80.8943%" y="613" width="0.3252%" height="15" fill="rgb(234,80,54)" fg:x="995" fg:w="4"/><text x="81.1443%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.33%)</title><rect x="80.8943%" y="597" width="0.3252%" height="15" fill="rgb(212,114,2)" fg:x="995" fg:w="4"/><text x="81.1443%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="80.9756%" y="581" width="0.2439%" height="15" fill="rgb(234,50,24)" fg:x="996" fg:w="3"/><text x="81.2256%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="80.9756%" y="565" width="0.2439%" height="15" fill="rgb(221,68,8)" fg:x="996" fg:w="3"/><text x="81.2256%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="80.9756%" y="549" width="0.2439%" height="15" fill="rgb(254,180,31)" fg:x="996" fg:w="3"/><text x="81.2256%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="80.9756%" y="533" width="0.2439%" height="15" fill="rgb(247,130,50)" fg:x="996" fg:w="3"/><text x="81.2256%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="80.9756%" y="517" width="0.2439%" height="15" fill="rgb(211,109,4)" fg:x="996" fg:w="3"/><text x="81.2256%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="81.0569%" y="501" width="0.1626%" height="15" fill="rgb(238,50,21)" fg:x="997" fg:w="2"/><text x="81.3069%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.1382%" y="485" width="0.0813%" height="15" fill="rgb(225,57,45)" fg:x="998" fg:w="1"/><text x="81.3882%" y="495.50"></text></g><g><title>engine::session::Session::close (12 samples, 0.98%)</title><rect x="80.3252%" y="709" width="0.9756%" height="15" fill="rgb(209,196,50)" fg:x="988" fg:w="12"/><text x="80.5752%" y="719.50"></text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="81.2195%" y="693" width="0.0813%" height="15" fill="rgb(242,140,13)" fg:x="999" fg:w="1"/><text x="81.4695%" y="703.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="81.3008%" y="629" width="0.0813%" height="15" fill="rgb(217,111,7)" fg:x="1000" fg:w="1"/><text x="81.5508%" y="639.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (1 samples, 0.08%)</title><rect x="81.3008%" y="613" width="0.0813%" height="15" fill="rgb(253,193,51)" fg:x="1000" fg:w="1"/><text x="81.5508%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="81.3008%" y="597" width="0.0813%" height="15" fill="rgb(252,70,29)" fg:x="1000" fg:w="1"/><text x="81.5508%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="81.3008%" y="581" width="0.0813%" height="15" fill="rgb(232,127,12)" fg:x="1000" fg:w="1"/><text x="81.5508%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="81.3008%" y="565" width="0.0813%" height="15" fill="rgb(211,180,21)" fg:x="1000" fg:w="1"/><text x="81.5508%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="81.3008%" y="549" width="0.0813%" height="15" fill="rgb(229,72,13)" fg:x="1000" fg:w="1"/><text x="81.5508%" y="559.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="81.3008%" y="533" width="0.0813%" height="15" fill="rgb(240,211,49)" fg:x="1000" fg:w="1"/><text x="81.5508%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="81.3008%" y="517" width="0.0813%" height="15" fill="rgb(219,149,40)" fg:x="1000" fg:w="1"/><text x="81.5508%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="81.3008%" y="501" width="0.0813%" height="15" fill="rgb(210,127,46)" fg:x="1000" fg:w="1"/><text x="81.5508%" y="511.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="81.3008%" y="485" width="0.0813%" height="15" fill="rgb(220,106,7)" fg:x="1000" fg:w="1"/><text x="81.5508%" y="495.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.3821%" y="629" width="0.0813%" height="15" fill="rgb(249,31,22)" fg:x="1001" fg:w="1"/><text x="81.6321%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="81.4634%" y="453" width="0.0813%" height="15" fill="rgb(253,1,49)" fg:x="1002" fg:w="1"/><text x="81.7134%" y="463.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="81.5447%" y="453" width="0.0813%" height="15" fill="rgb(227,144,33)" fg:x="1003" fg:w="1"/><text x="81.7947%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="81.5447%" y="437" width="0.0813%" height="15" fill="rgb(249,163,44)" fg:x="1003" fg:w="1"/><text x="81.7947%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="81.5447%" y="421" width="0.0813%" height="15" fill="rgb(234,15,39)" fg:x="1003" fg:w="1"/><text x="81.7947%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (3 samples, 0.24%)</title><rect x="81.4634%" y="469" width="0.2439%" height="15" fill="rgb(207,66,16)" fg:x="1002" fg:w="3"/><text x="81.7134%" y="479.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="81.6260%" y="453" width="0.0813%" height="15" fill="rgb(233,112,24)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="81.6260%" y="437" width="0.0813%" height="15" fill="rgb(230,90,22)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.6260%" y="421" width="0.0813%" height="15" fill="rgb(229,61,13)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.6260%" y="405" width="0.0813%" height="15" fill="rgb(225,57,24)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.6260%" y="389" width="0.0813%" height="15" fill="rgb(208,169,48)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.6260%" y="373" width="0.0813%" height="15" fill="rgb(244,218,51)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.6260%" y="357" width="0.0813%" height="15" fill="rgb(214,148,10)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.6260%" y="341" width="0.0813%" height="15" fill="rgb(225,174,27)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.6260%" y="325" width="0.0813%" height="15" fill="rgb(230,96,26)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="81.6260%" y="309" width="0.0813%" height="15" fill="rgb(232,10,30)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="81.6260%" y="293" width="0.0813%" height="15" fill="rgb(222,8,50)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="81.6260%" y="277" width="0.0813%" height="15" fill="rgb(213,81,27)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.6260%" y="261" width="0.0813%" height="15" fill="rgb(245,50,10)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.6260%" y="245" width="0.0813%" height="15" fill="rgb(216,100,18)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="81.6260%" y="229" width="0.0813%" height="15" fill="rgb(236,147,54)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="81.6260%" y="213" width="0.0813%" height="15" fill="rgb(205,143,26)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="81.6260%" y="197" width="0.0813%" height="15" fill="rgb(236,26,9)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="81.6260%" y="181" width="0.0813%" height="15" fill="rgb(221,165,53)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.6260%" y="165" width="0.0813%" height="15" fill="rgb(214,110,17)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.7073%" y="357" width="0.0813%" height="15" fill="rgb(237,197,12)" fg:x="1005" fg:w="1"/><text x="81.9573%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.7073%" y="341" width="0.0813%" height="15" fill="rgb(205,84,17)" fg:x="1005" fg:w="1"/><text x="81.9573%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="81.7073%" y="421" width="0.2439%" height="15" fill="rgb(237,18,45)" fg:x="1005" fg:w="3"/><text x="81.9573%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="81.7073%" y="405" width="0.2439%" height="15" fill="rgb(221,87,14)" fg:x="1005" fg:w="3"/><text x="81.9573%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="81.7073%" y="389" width="0.2439%" height="15" fill="rgb(238,186,15)" fg:x="1005" fg:w="3"/><text x="81.9573%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="81.7073%" y="373" width="0.2439%" height="15" fill="rgb(208,115,11)" fg:x="1005" fg:w="3"/><text x="81.9573%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="81.7886%" y="357" width="0.1626%" height="15" fill="rgb(254,175,0)" fg:x="1006" fg:w="2"/><text x="82.0386%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="81.7886%" y="341" width="0.1626%" height="15" fill="rgb(227,24,42)" fg:x="1006" fg:w="2"/><text x="82.0386%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="81.7886%" y="325" width="0.1626%" height="15" fill="rgb(223,211,37)" fg:x="1006" fg:w="2"/><text x="82.0386%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="81.7886%" y="309" width="0.1626%" height="15" fill="rgb(235,49,27)" fg:x="1006" fg:w="2"/><text x="82.0386%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="81.7886%" y="293" width="0.1626%" height="15" fill="rgb(254,97,51)" fg:x="1006" fg:w="2"/><text x="82.0386%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="81.7886%" y="277" width="0.1626%" height="15" fill="rgb(249,51,40)" fg:x="1006" fg:w="2"/><text x="82.0386%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="81.7886%" y="261" width="0.1626%" height="15" fill="rgb(210,128,45)" fg:x="1006" fg:w="2"/><text x="82.0386%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="81.7886%" y="245" width="0.1626%" height="15" fill="rgb(224,137,50)" fg:x="1006" fg:w="2"/><text x="82.0386%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="81.7886%" y="229" width="0.1626%" height="15" fill="rgb(242,15,9)" fg:x="1006" fg:w="2"/><text x="82.0386%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="81.7886%" y="213" width="0.1626%" height="15" fill="rgb(233,187,41)" fg:x="1006" fg:w="2"/><text x="82.0386%" y="223.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="81.7886%" y="197" width="0.1626%" height="15" fill="rgb(227,2,29)" fg:x="1006" fg:w="2"/><text x="82.0386%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="81.7886%" y="181" width="0.1626%" height="15" fill="rgb(222,70,3)" fg:x="1006" fg:w="2"/><text x="82.0386%" y="191.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.9512%" y="357" width="0.0813%" height="15" fill="rgb(213,11,42)" fg:x="1008" fg:w="1"/><text x="82.2012%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (5 samples, 0.41%)</title><rect x="81.7073%" y="469" width="0.4065%" height="15" fill="rgb(225,150,9)" fg:x="1005" fg:w="5"/><text x="81.9573%" y="479.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.41%)</title><rect x="81.7073%" y="453" width="0.4065%" height="15" fill="rgb(230,162,45)" fg:x="1005" fg:w="5"/><text x="81.9573%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.41%)</title><rect x="81.7073%" y="437" width="0.4065%" height="15" fill="rgb(222,14,52)" fg:x="1005" fg:w="5"/><text x="81.9573%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="81.9512%" y="421" width="0.1626%" height="15" fill="rgb(254,198,14)" fg:x="1008" fg:w="2"/><text x="82.2012%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="81.9512%" y="405" width="0.1626%" height="15" fill="rgb(220,217,30)" fg:x="1008" fg:w="2"/><text x="82.2012%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="81.9512%" y="389" width="0.1626%" height="15" fill="rgb(215,146,41)" fg:x="1008" fg:w="2"/><text x="82.2012%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="81.9512%" y="373" width="0.1626%" height="15" fill="rgb(217,27,36)" fg:x="1008" fg:w="2"/><text x="82.2012%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="82.0325%" y="357" width="0.0813%" height="15" fill="rgb(219,218,39)" fg:x="1009" fg:w="1"/><text x="82.2825%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.0325%" y="341" width="0.0813%" height="15" fill="rgb(219,4,42)" fg:x="1009" fg:w="1"/><text x="82.2825%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.0325%" y="325" width="0.0813%" height="15" fill="rgb(249,119,36)" fg:x="1009" fg:w="1"/><text x="82.2825%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.0325%" y="309" width="0.0813%" height="15" fill="rgb(209,23,33)" fg:x="1009" fg:w="1"/><text x="82.2825%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.0325%" y="293" width="0.0813%" height="15" fill="rgb(211,10,0)" fg:x="1009" fg:w="1"/><text x="82.2825%" y="303.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="82.1138%" y="469" width="0.0813%" height="15" fill="rgb(208,99,37)" fg:x="1010" fg:w="1"/><text x="82.3638%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.2764%" y="405" width="0.0813%" height="15" fill="rgb(213,132,31)" fg:x="1012" fg:w="1"/><text x="82.5264%" y="415.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="82.3577%" y="405" width="0.0813%" height="15" fill="rgb(243,129,40)" fg:x="1013" fg:w="1"/><text x="82.6077%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.33%)</title><rect x="82.5203%" y="389" width="0.3252%" height="15" fill="rgb(210,66,33)" fg:x="1015" fg:w="4"/><text x="82.7703%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.33%)</title><rect x="82.5203%" y="373" width="0.3252%" height="15" fill="rgb(209,189,4)" fg:x="1015" fg:w="4"/><text x="82.7703%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.33%)</title><rect x="82.5203%" y="357" width="0.3252%" height="15" fill="rgb(214,107,37)" fg:x="1015" fg:w="4"/><text x="82.7703%" y="367.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.33%)</title><rect x="82.5203%" y="341" width="0.3252%" height="15" fill="rgb(245,88,54)" fg:x="1015" fg:w="4"/><text x="82.7703%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="82.6016%" y="325" width="0.2439%" height="15" fill="rgb(205,146,20)" fg:x="1016" fg:w="3"/><text x="82.8516%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="82.7642%" y="309" width="0.0813%" height="15" fill="rgb(220,161,25)" fg:x="1018" fg:w="1"/><text x="83.0142%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="82.8455%" y="341" width="0.0813%" height="15" fill="rgb(215,152,15)" fg:x="1019" fg:w="1"/><text x="83.0955%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="82.8455%" y="325" width="0.0813%" height="15" fill="rgb(233,192,44)" fg:x="1019" fg:w="1"/><text x="83.0955%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.8455%" y="309" width="0.0813%" height="15" fill="rgb(240,170,46)" fg:x="1019" fg:w="1"/><text x="83.0955%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="82.8455%" y="389" width="0.1626%" height="15" fill="rgb(207,104,33)" fg:x="1019" fg:w="2"/><text x="83.0955%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="82.8455%" y="373" width="0.1626%" height="15" fill="rgb(219,21,39)" fg:x="1019" fg:w="2"/><text x="83.0955%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="82.8455%" y="357" width="0.1626%" height="15" fill="rgb(214,133,29)" fg:x="1019" fg:w="2"/><text x="83.0955%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="82.9268%" y="341" width="0.0813%" height="15" fill="rgb(226,93,6)" fg:x="1020" fg:w="1"/><text x="83.1768%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="82.9268%" y="325" width="0.0813%" height="15" fill="rgb(252,222,34)" fg:x="1020" fg:w="1"/><text x="83.1768%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.9268%" y="309" width="0.0813%" height="15" fill="rgb(252,92,48)" fg:x="1020" fg:w="1"/><text x="83.1768%" y="319.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="83.0894%" y="325" width="0.1626%" height="15" fill="rgb(245,223,24)" fg:x="1022" fg:w="2"/><text x="83.3394%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.2520%" y="309" width="0.0813%" height="15" fill="rgb(205,176,3)" fg:x="1024" fg:w="1"/><text x="83.5020%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.57%)</title><rect x="83.2520%" y="325" width="0.5691%" height="15" fill="rgb(235,151,15)" fg:x="1024" fg:w="7"/><text x="83.5020%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.49%)</title><rect x="83.3333%" y="309" width="0.4878%" height="15" fill="rgb(237,209,11)" fg:x="1025" fg:w="6"/><text x="83.5833%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="83.8211%" y="325" width="0.2439%" height="15" fill="rgb(243,227,24)" fg:x="1031" fg:w="3"/><text x="84.0711%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="83.9024%" y="309" width="0.1626%" height="15" fill="rgb(239,193,16)" fg:x="1032" fg:w="2"/><text x="84.1524%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.0650%" y="293" width="0.0813%" height="15" fill="rgb(231,27,9)" fg:x="1034" fg:w="1"/><text x="84.3150%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.0650%" y="277" width="0.0813%" height="15" fill="rgb(219,169,10)" fg:x="1034" fg:w="1"/><text x="84.3150%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.0650%" y="261" width="0.0813%" height="15" fill="rgb(244,229,43)" fg:x="1034" fg:w="1"/><text x="84.3150%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="84.1463%" y="277" width="0.0813%" height="15" fill="rgb(254,38,20)" fg:x="1035" fg:w="1"/><text x="84.3963%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="84.3089%" y="261" width="0.0813%" height="15" fill="rgb(250,47,30)" fg:x="1037" fg:w="1"/><text x="84.5589%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.3089%" y="245" width="0.0813%" height="15" fill="rgb(224,124,36)" fg:x="1037" fg:w="1"/><text x="84.5589%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.3089%" y="229" width="0.0813%" height="15" fill="rgb(246,68,51)" fg:x="1037" fg:w="1"/><text x="84.5589%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.3089%" y="213" width="0.0813%" height="15" fill="rgb(253,43,49)" fg:x="1037" fg:w="1"/><text x="84.5589%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.4715%" y="229" width="0.0813%" height="15" fill="rgb(219,54,36)" fg:x="1039" fg:w="1"/><text x="84.7215%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.4715%" y="213" width="0.0813%" height="15" fill="rgb(227,133,34)" fg:x="1039" fg:w="1"/><text x="84.7215%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.4715%" y="197" width="0.0813%" height="15" fill="rgb(247,227,15)" fg:x="1039" fg:w="1"/><text x="84.7215%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="84.3902%" y="261" width="0.2439%" height="15" fill="rgb(229,96,14)" fg:x="1038" fg:w="3"/><text x="84.6402%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="84.4715%" y="245" width="0.1626%" height="15" fill="rgb(220,79,17)" fg:x="1039" fg:w="2"/><text x="84.7215%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="84.5528%" y="229" width="0.0813%" height="15" fill="rgb(205,131,53)" fg:x="1040" fg:w="1"/><text x="84.8028%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="84.5528%" y="213" width="0.0813%" height="15" fill="rgb(209,50,29)" fg:x="1040" fg:w="1"/><text x="84.8028%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.5528%" y="197" width="0.0813%" height="15" fill="rgb(245,86,46)" fg:x="1040" fg:w="1"/><text x="84.8028%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.5528%" y="181" width="0.0813%" height="15" fill="rgb(235,66,46)" fg:x="1040" fg:w="1"/><text x="84.8028%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.5528%" y="165" width="0.0813%" height="15" fill="rgb(232,148,31)" fg:x="1040" fg:w="1"/><text x="84.8028%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.6341%" y="229" width="0.0813%" height="15" fill="rgb(217,149,8)" fg:x="1041" fg:w="1"/><text x="84.8841%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (28 samples, 2.28%)</title><rect x="84.6341%" y="261" width="2.2764%" height="15" fill="rgb(209,183,11)" fg:x="1041" fg:w="28"/><text x="84.8841%" y="271.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (28 samples, 2.28%)</title><rect x="84.6341%" y="245" width="2.2764%" height="15" fill="rgb(208,55,20)" fg:x="1041" fg:w="28"/><text x="84.8841%" y="255.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (27 samples, 2.20%)</title><rect x="84.7154%" y="229" width="2.1951%" height="15" fill="rgb(218,39,14)" fg:x="1042" fg:w="27"/><text x="84.9654%" y="239.50">a..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="86.9106%" y="261" width="0.0813%" height="15" fill="rgb(216,169,33)" fg:x="1069" fg:w="1"/><text x="87.1606%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 3.09%)</title><rect x="84.0650%" y="309" width="3.0894%" height="15" fill="rgb(233,80,24)" fg:x="1034" fg:w="38"/><text x="84.3150%" y="319.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (37 samples, 3.01%)</title><rect x="84.1463%" y="293" width="3.0081%" height="15" fill="rgb(213,179,31)" fg:x="1035" fg:w="37"/><text x="84.3963%" y="303.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (36 samples, 2.93%)</title><rect x="84.2276%" y="277" width="2.9268%" height="15" fill="rgb(209,19,5)" fg:x="1036" fg:w="36"/><text x="84.4776%" y="287.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="86.9919%" y="261" width="0.1626%" height="15" fill="rgb(219,18,35)" fg:x="1070" fg:w="2"/><text x="87.2419%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="86.9919%" y="245" width="0.1626%" height="15" fill="rgb(209,169,16)" fg:x="1070" fg:w="2"/><text x="87.2419%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="86.9919%" y="229" width="0.1626%" height="15" fill="rgb(245,90,51)" fg:x="1070" fg:w="2"/><text x="87.2419%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.0732%" y="213" width="0.0813%" height="15" fill="rgb(220,99,45)" fg:x="1071" fg:w="1"/><text x="87.3232%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (53 samples, 4.31%)</title><rect x="83.0894%" y="341" width="4.3089%" height="15" fill="rgb(249,89,25)" fg:x="1022" fg:w="53"/><text x="83.3394%" y="351.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (41 samples, 3.33%)</title><rect x="84.0650%" y="325" width="3.3333%" height="15" fill="rgb(239,193,0)" fg:x="1034" fg:w="41"/><text x="84.3150%" y="335.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="87.1545%" y="309" width="0.2439%" height="15" fill="rgb(231,126,1)" fg:x="1072" fg:w="3"/><text x="87.4045%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="87.2358%" y="293" width="0.1626%" height="15" fill="rgb(243,166,3)" fg:x="1073" fg:w="2"/><text x="87.4858%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="87.2358%" y="277" width="0.1626%" height="15" fill="rgb(223,22,34)" fg:x="1073" fg:w="2"/><text x="87.4858%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="87.2358%" y="261" width="0.1626%" height="15" fill="rgb(251,52,51)" fg:x="1073" fg:w="2"/><text x="87.4858%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="87.2358%" y="245" width="0.1626%" height="15" fill="rgb(221,165,28)" fg:x="1073" fg:w="2"/><text x="87.4858%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="87.3984%" y="293" width="0.1626%" height="15" fill="rgb(218,121,47)" fg:x="1075" fg:w="2"/><text x="87.6484%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="87.4797%" y="277" width="0.0813%" height="15" fill="rgb(209,120,9)" fg:x="1076" fg:w="1"/><text x="87.7297%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (58 samples, 4.72%)</title><rect x="83.0081%" y="357" width="4.7154%" height="15" fill="rgb(236,68,12)" fg:x="1021" fg:w="58"/><text x="83.2581%" y="367.50">regex..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.33%)</title><rect x="87.3984%" y="341" width="0.3252%" height="15" fill="rgb(225,194,26)" fg:x="1075" fg:w="4"/><text x="87.6484%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.33%)</title><rect x="87.3984%" y="325" width="0.3252%" height="15" fill="rgb(231,84,39)" fg:x="1075" fg:w="4"/><text x="87.6484%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.33%)</title><rect x="87.3984%" y="309" width="0.3252%" height="15" fill="rgb(210,11,45)" fg:x="1075" fg:w="4"/><text x="87.6484%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="87.5610%" y="293" width="0.1626%" height="15" fill="rgb(224,54,52)" fg:x="1077" fg:w="2"/><text x="87.8110%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="87.5610%" y="277" width="0.1626%" height="15" fill="rgb(238,102,14)" fg:x="1077" fg:w="2"/><text x="87.8110%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="87.5610%" y="261" width="0.1626%" height="15" fill="rgb(243,160,52)" fg:x="1077" fg:w="2"/><text x="87.8110%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="87.5610%" y="245" width="0.1626%" height="15" fill="rgb(216,114,19)" fg:x="1077" fg:w="2"/><text x="87.8110%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (59 samples, 4.80%)</title><rect x="83.0081%" y="389" width="4.7967%" height="15" fill="rgb(244,166,37)" fg:x="1021" fg:w="59"/><text x="83.2581%" y="399.50">regex:..</text></g><g><title>regex::builders::Builder::build_one_string (59 samples, 4.80%)</title><rect x="83.0081%" y="373" width="4.7967%" height="15" fill="rgb(246,29,44)" fg:x="1021" fg:w="59"/><text x="83.2581%" y="383.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="87.7236%" y="357" width="0.0813%" height="15" fill="rgb(215,56,53)" fg:x="1079" fg:w="1"/><text x="87.9736%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.8049%" y="309" width="0.0813%" height="15" fill="rgb(217,60,2)" fg:x="1080" fg:w="1"/><text x="88.0549%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.8049%" y="293" width="0.0813%" height="15" fill="rgb(207,26,24)" fg:x="1080" fg:w="1"/><text x="88.0549%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.8049%" y="277" width="0.0813%" height="15" fill="rgb(252,210,15)" fg:x="1080" fg:w="1"/><text x="88.0549%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (69 samples, 5.61%)</title><rect x="82.4390%" y="405" width="5.6098%" height="15" fill="rgb(253,209,26)" fg:x="1014" fg:w="69"/><text x="82.6890%" y="415.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="87.8049%" y="389" width="0.2439%" height="15" fill="rgb(238,170,14)" fg:x="1080" fg:w="3"/><text x="88.0549%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="87.8049%" y="373" width="0.2439%" height="15" fill="rgb(216,178,15)" fg:x="1080" fg:w="3"/><text x="88.0549%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="87.8049%" y="357" width="0.2439%" height="15" fill="rgb(250,197,2)" fg:x="1080" fg:w="3"/><text x="88.0549%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="87.8049%" y="341" width="0.2439%" height="15" fill="rgb(212,70,42)" fg:x="1080" fg:w="3"/><text x="88.0549%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="87.8049%" y="325" width="0.2439%" height="15" fill="rgb(227,213,9)" fg:x="1080" fg:w="3"/><text x="88.0549%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="87.8862%" y="309" width="0.1626%" height="15" fill="rgb(245,99,25)" fg:x="1081" fg:w="2"/><text x="88.1362%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.9675%" y="293" width="0.0813%" height="15" fill="rgb(250,82,29)" fg:x="1082" fg:w="1"/><text x="88.2175%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="87.9675%" y="277" width="0.0813%" height="15" fill="rgb(241,226,54)" fg:x="1082" fg:w="1"/><text x="88.2175%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.9675%" y="261" width="0.0813%" height="15" fill="rgb(221,99,41)" fg:x="1082" fg:w="1"/><text x="88.2175%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.0488%" y="373" width="0.0813%" height="15" fill="rgb(213,90,21)" fg:x="1083" fg:w="1"/><text x="88.2988%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="88.0488%" y="389" width="0.1626%" height="15" fill="rgb(205,208,24)" fg:x="1083" fg:w="2"/><text x="88.2988%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="88.1301%" y="373" width="0.0813%" height="15" fill="rgb(246,31,12)" fg:x="1084" fg:w="1"/><text x="88.3801%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="88.1301%" y="357" width="0.0813%" height="15" fill="rgb(213,154,6)" fg:x="1084" fg:w="1"/><text x="88.3801%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="88.1301%" y="341" width="0.0813%" height="15" fill="rgb(222,163,29)" fg:x="1084" fg:w="1"/><text x="88.3801%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.1301%" y="325" width="0.0813%" height="15" fill="rgb(227,201,8)" fg:x="1084" fg:w="1"/><text x="88.3801%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.2114%" y="325" width="0.0813%" height="15" fill="rgb(233,9,32)" fg:x="1085" fg:w="1"/><text x="88.4614%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="88.2114%" y="373" width="0.1626%" height="15" fill="rgb(217,54,24)" fg:x="1085" fg:w="2"/><text x="88.4614%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="88.2114%" y="357" width="0.1626%" height="15" fill="rgb(235,192,0)" fg:x="1085" fg:w="2"/><text x="88.4614%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="88.2114%" y="341" width="0.1626%" height="15" fill="rgb(235,45,9)" fg:x="1085" fg:w="2"/><text x="88.4614%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.2927%" y="325" width="0.0813%" height="15" fill="rgb(246,42,40)" fg:x="1086" fg:w="1"/><text x="88.5427%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.2927%" y="309" width="0.0813%" height="15" fill="rgb(248,111,24)" fg:x="1086" fg:w="1"/><text x="88.5427%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.4553%" y="293" width="0.0813%" height="15" fill="rgb(249,65,22)" fg:x="1088" fg:w="1"/><text x="88.7053%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.4553%" y="277" width="0.0813%" height="15" fill="rgb(238,111,51)" fg:x="1088" fg:w="1"/><text x="88.7053%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.4553%" y="261" width="0.0813%" height="15" fill="rgb(250,118,22)" fg:x="1088" fg:w="1"/><text x="88.7053%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="88.5366%" y="293" width="0.2439%" height="15" fill="rgb(234,84,26)" fg:x="1089" fg:w="3"/><text x="88.7866%" y="303.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (8 samples, 0.65%)</title><rect x="88.2114%" y="389" width="0.6504%" height="15" fill="rgb(243,172,12)" fg:x="1085" fg:w="8"/><text x="88.4614%" y="399.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.49%)</title><rect x="88.3740%" y="373" width="0.4878%" height="15" fill="rgb(236,150,49)" fg:x="1087" fg:w="6"/><text x="88.6240%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.49%)</title><rect x="88.3740%" y="357" width="0.4878%" height="15" fill="rgb(225,197,26)" fg:x="1087" fg:w="6"/><text x="88.6240%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.49%)</title><rect x="88.3740%" y="341" width="0.4878%" height="15" fill="rgb(214,17,42)" fg:x="1087" fg:w="6"/><text x="88.6240%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.49%)</title><rect x="88.3740%" y="325" width="0.4878%" height="15" fill="rgb(224,165,40)" fg:x="1087" fg:w="6"/><text x="88.6240%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.49%)</title><rect x="88.3740%" y="309" width="0.4878%" height="15" fill="rgb(246,100,4)" fg:x="1087" fg:w="6"/><text x="88.6240%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="88.7805%" y="293" width="0.0813%" height="15" fill="rgb(222,103,0)" fg:x="1092" fg:w="1"/><text x="89.0305%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="88.9431%" y="341" width="0.0813%" height="15" fill="rgb(227,189,26)" fg:x="1094" fg:w="1"/><text x="89.1931%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.9431%" y="325" width="0.0813%" height="15" fill="rgb(214,202,17)" fg:x="1094" fg:w="1"/><text x="89.1931%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="88.9431%" y="309" width="0.0813%" height="15" fill="rgb(229,111,3)" fg:x="1094" fg:w="1"/><text x="89.1931%" y="319.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.9431%" y="293" width="0.0813%" height="15" fill="rgb(229,172,15)" fg:x="1094" fg:w="1"/><text x="89.1931%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.1870%" y="325" width="0.0813%" height="15" fill="rgb(230,224,35)" fg:x="1097" fg:w="1"/><text x="89.4370%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (11 samples, 0.89%)</title><rect x="89.2683%" y="325" width="0.8943%" height="15" fill="rgb(251,141,6)" fg:x="1098" fg:w="11"/><text x="89.5183%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.89%)</title><rect x="89.2683%" y="309" width="0.8943%" height="15" fill="rgb(225,208,6)" fg:x="1098" fg:w="11"/><text x="89.5183%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="90.1626%" y="325" width="0.1626%" height="15" fill="rgb(246,181,16)" fg:x="1109" fg:w="2"/><text x="90.4126%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="90.1626%" y="309" width="0.1626%" height="15" fill="rgb(227,129,36)" fg:x="1109" fg:w="2"/><text x="90.4126%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="90.3252%" y="309" width="0.0813%" height="15" fill="rgb(248,117,24)" fg:x="1111" fg:w="1"/><text x="90.5752%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="90.3252%" y="293" width="0.0813%" height="15" fill="rgb(214,185,35)" fg:x="1111" fg:w="1"/><text x="90.5752%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="90.4065%" y="293" width="0.0813%" height="15" fill="rgb(236,150,34)" fg:x="1112" fg:w="1"/><text x="90.6565%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (3 samples, 0.24%)</title><rect x="90.3252%" y="325" width="0.2439%" height="15" fill="rgb(243,228,27)" fg:x="1111" fg:w="3"/><text x="90.5752%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="90.4065%" y="309" width="0.1626%" height="15" fill="rgb(245,77,44)" fg:x="1112" fg:w="2"/><text x="90.6565%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="90.4878%" y="293" width="0.0813%" height="15" fill="rgb(235,214,42)" fg:x="1113" fg:w="1"/><text x="90.7378%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="90.4878%" y="277" width="0.0813%" height="15" fill="rgb(221,74,3)" fg:x="1113" fg:w="1"/><text x="90.7378%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="90.4878%" y="261" width="0.0813%" height="15" fill="rgb(206,121,29)" fg:x="1113" fg:w="1"/><text x="90.7378%" y="271.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="90.7317%" y="213" width="0.2439%" height="15" fill="rgb(249,131,53)" fg:x="1116" fg:w="3"/><text x="90.9817%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.9756%" y="213" width="0.0813%" height="15" fill="rgb(236,170,29)" fg:x="1119" fg:w="1"/><text x="91.2256%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="91.0569%" y="213" width="0.0813%" height="15" fill="rgb(247,96,15)" fg:x="1120" fg:w="1"/><text x="91.3069%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.0569%" y="197" width="0.0813%" height="15" fill="rgb(211,210,7)" fg:x="1120" fg:w="1"/><text x="91.3069%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.0569%" y="181" width="0.0813%" height="15" fill="rgb(240,88,50)" fg:x="1120" fg:w="1"/><text x="91.3069%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.0569%" y="165" width="0.0813%" height="15" fill="rgb(209,229,26)" fg:x="1120" fg:w="1"/><text x="91.3069%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.41%)</title><rect x="91.1382%" y="213" width="0.4065%" height="15" fill="rgb(210,68,23)" fg:x="1121" fg:w="5"/><text x="91.3882%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.33%)</title><rect x="91.2195%" y="197" width="0.3252%" height="15" fill="rgb(229,180,13)" fg:x="1122" fg:w="4"/><text x="91.4695%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="91.3008%" y="181" width="0.2439%" height="15" fill="rgb(236,53,44)" fg:x="1123" fg:w="3"/><text x="91.5508%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="91.4634%" y="165" width="0.0813%" height="15" fill="rgb(244,214,29)" fg:x="1125" fg:w="1"/><text x="91.7134%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.4634%" y="149" width="0.0813%" height="15" fill="rgb(220,75,29)" fg:x="1125" fg:w="1"/><text x="91.7134%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.4634%" y="133" width="0.0813%" height="15" fill="rgb(214,183,37)" fg:x="1125" fg:w="1"/><text x="91.7134%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.4634%" y="117" width="0.0813%" height="15" fill="rgb(239,117,29)" fg:x="1125" fg:w="1"/><text x="91.7134%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="91.5447%" y="197" width="0.0813%" height="15" fill="rgb(237,171,35)" fg:x="1126" fg:w="1"/><text x="91.7947%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.5447%" y="181" width="0.0813%" height="15" fill="rgb(229,178,53)" fg:x="1126" fg:w="1"/><text x="91.7947%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.5447%" y="165" width="0.0813%" height="15" fill="rgb(210,102,19)" fg:x="1126" fg:w="1"/><text x="91.7947%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.5447%" y="149" width="0.0813%" height="15" fill="rgb(235,127,22)" fg:x="1126" fg:w="1"/><text x="91.7947%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (50 samples, 4.07%)</title><rect x="91.5447%" y="213" width="4.0650%" height="15" fill="rgb(244,31,31)" fg:x="1126" fg:w="50"/><text x="91.7947%" y="223.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (49 samples, 3.98%)</title><rect x="91.6260%" y="197" width="3.9837%" height="15" fill="rgb(231,43,21)" fg:x="1127" fg:w="49"/><text x="91.8760%" y="207.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (49 samples, 3.98%)</title><rect x="91.6260%" y="181" width="3.9837%" height="15" fill="rgb(217,131,35)" fg:x="1127" fg:w="49"/><text x="91.8760%" y="191.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="95.6098%" y="213" width="0.2439%" height="15" fill="rgb(221,149,4)" fg:x="1176" fg:w="3"/><text x="95.8598%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.7724%" y="197" width="0.0813%" height="15" fill="rgb(232,170,28)" fg:x="1178" fg:w="1"/><text x="96.0224%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 5.77%)</title><rect x="90.5691%" y="309" width="5.7724%" height="15" fill="rgb(238,56,10)" fg:x="1114" fg:w="71"/><text x="90.8191%" y="319.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (71 samples, 5.77%)</title><rect x="90.5691%" y="293" width="5.7724%" height="15" fill="rgb(235,196,14)" fg:x="1114" fg:w="71"/><text x="90.8191%" y="303.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (71 samples, 5.77%)</title><rect x="90.5691%" y="277" width="5.7724%" height="15" fill="rgb(216,45,48)" fg:x="1114" fg:w="71"/><text x="90.8191%" y="287.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (71 samples, 5.77%)</title><rect x="90.5691%" y="261" width="5.7724%" height="15" fill="rgb(238,213,17)" fg:x="1114" fg:w="71"/><text x="90.8191%" y="271.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (71 samples, 5.77%)</title><rect x="90.5691%" y="245" width="5.7724%" height="15" fill="rgb(212,13,2)" fg:x="1114" fg:w="71"/><text x="90.8191%" y="255.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (71 samples, 5.77%)</title><rect x="90.5691%" y="229" width="5.7724%" height="15" fill="rgb(240,114,20)" fg:x="1114" fg:w="71"/><text x="90.8191%" y="239.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (6 samples, 0.49%)</title><rect x="95.8537%" y="213" width="0.4878%" height="15" fill="rgb(228,41,40)" fg:x="1179" fg:w="6"/><text x="96.1037%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="96.0976%" y="197" width="0.2439%" height="15" fill="rgb(244,132,35)" fg:x="1182" fg:w="3"/><text x="96.3476%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="96.0976%" y="181" width="0.2439%" height="15" fill="rgb(253,189,4)" fg:x="1182" fg:w="3"/><text x="96.3476%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="96.1789%" y="165" width="0.1626%" height="15" fill="rgb(224,37,19)" fg:x="1183" fg:w="2"/><text x="96.4289%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.33%)</title><rect x="96.3415%" y="293" width="0.3252%" height="15" fill="rgb(235,223,18)" fg:x="1185" fg:w="4"/><text x="96.5915%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="96.5041%" y="277" width="0.1626%" height="15" fill="rgb(235,163,25)" fg:x="1187" fg:w="2"/><text x="96.7541%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="96.5041%" y="261" width="0.1626%" height="15" fill="rgb(217,145,28)" fg:x="1187" fg:w="2"/><text x="96.7541%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="96.5041%" y="245" width="0.1626%" height="15" fill="rgb(223,223,32)" fg:x="1187" fg:w="2"/><text x="96.7541%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="96.6667%" y="293" width="0.1626%" height="15" fill="rgb(227,189,39)" fg:x="1189" fg:w="2"/><text x="96.9167%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="96.8293%" y="293" width="0.0813%" height="15" fill="rgb(248,10,22)" fg:x="1191" fg:w="1"/><text x="97.0793%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (98 samples, 7.97%)</title><rect x="89.0244%" y="341" width="7.9675%" height="15" fill="rgb(248,46,39)" fg:x="1095" fg:w="98"/><text x="89.2744%" y="351.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (79 samples, 6.42%)</title><rect x="90.5691%" y="325" width="6.4228%" height="15" fill="rgb(248,113,48)" fg:x="1114" fg:w="79"/><text x="90.8191%" y="335.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.65%)</title><rect x="96.3415%" y="309" width="0.6504%" height="15" fill="rgb(245,16,25)" fg:x="1185" fg:w="8"/><text x="96.5915%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="96.9106%" y="293" width="0.0813%" height="15" fill="rgb(249,152,16)" fg:x="1192" fg:w="1"/><text x="97.1606%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.9106%" y="277" width="0.0813%" height="15" fill="rgb(250,16,1)" fg:x="1192" fg:w="1"/><text x="97.1606%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="97.0732%" y="293" width="0.0813%" height="15" fill="rgb(249,138,3)" fg:x="1194" fg:w="1"/><text x="97.3232%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="96.9919%" y="309" width="0.2439%" height="15" fill="rgb(227,71,41)" fg:x="1193" fg:w="3"/><text x="97.2419%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="97.1545%" y="293" width="0.0813%" height="15" fill="rgb(209,184,23)" fg:x="1195" fg:w="1"/><text x="97.4045%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.1545%" y="277" width="0.0813%" height="15" fill="rgb(223,215,31)" fg:x="1195" fg:w="1"/><text x="97.4045%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.1545%" y="261" width="0.0813%" height="15" fill="rgb(210,146,28)" fg:x="1195" fg:w="1"/><text x="97.4045%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1545%" y="245" width="0.0813%" height="15" fill="rgb(209,183,41)" fg:x="1195" fg:w="1"/><text x="97.4045%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="97.2358%" y="309" width="0.0813%" height="15" fill="rgb(209,224,45)" fg:x="1196" fg:w="1"/><text x="97.4858%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.41%)</title><rect x="96.9919%" y="341" width="0.4065%" height="15" fill="rgb(224,209,51)" fg:x="1193" fg:w="5"/><text x="97.2419%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.41%)</title><rect x="96.9919%" y="325" width="0.4065%" height="15" fill="rgb(223,17,39)" fg:x="1193" fg:w="5"/><text x="97.2419%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.3171%" y="309" width="0.0813%" height="15" fill="rgb(234,204,37)" fg:x="1197" fg:w="1"/><text x="97.5671%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="97.3984%" y="309" width="0.1626%" height="15" fill="rgb(236,120,5)" fg:x="1198" fg:w="2"/><text x="97.6484%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="97.4797%" y="293" width="0.0813%" height="15" fill="rgb(248,97,27)" fg:x="1199" fg:w="1"/><text x="97.7297%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.4797%" y="277" width="0.0813%" height="15" fill="rgb(240,66,17)" fg:x="1199" fg:w="1"/><text x="97.7297%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.4797%" y="261" width="0.0813%" height="15" fill="rgb(210,79,3)" fg:x="1199" fg:w="1"/><text x="97.7297%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.4797%" y="245" width="0.0813%" height="15" fill="rgb(214,176,27)" fg:x="1199" fg:w="1"/><text x="97.7297%" y="255.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="97.5610%" y="293" width="0.0813%" height="15" fill="rgb(235,185,3)" fg:x="1200" fg:w="1"/><text x="97.8110%" y="303.50"></text></g><g><title>indefinite::rules::number::Number::check (119 samples, 9.67%)</title><rect x="88.0488%" y="405" width="9.6748%" height="15" fill="rgb(227,24,12)" fg:x="1083" fg:w="119"/><text x="88.2988%" y="415.50">indefinite::ru..</text></g><g><title>regex::regex::string::Regex::new (109 samples, 8.86%)</title><rect x="88.8618%" y="389" width="8.8618%" height="15" fill="rgb(252,169,48)" fg:x="1093" fg:w="109"/><text x="89.1118%" y="399.50">regex::regex:..</text></g><g><title>regex::builders::Builder::build_one_string (109 samples, 8.86%)</title><rect x="88.8618%" y="373" width="8.8618%" height="15" fill="rgb(212,65,1)" fg:x="1093" fg:w="109"/><text x="89.1118%" y="383.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (109 samples, 8.86%)</title><rect x="88.8618%" y="357" width="8.8618%" height="15" fill="rgb(242,39,24)" fg:x="1093" fg:w="109"/><text x="89.1118%" y="367.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.33%)</title><rect x="97.3984%" y="341" width="0.3252%" height="15" fill="rgb(249,32,23)" fg:x="1198" fg:w="4"/><text x="97.6484%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.33%)</title><rect x="97.3984%" y="325" width="0.3252%" height="15" fill="rgb(251,195,23)" fg:x="1198" fg:w="4"/><text x="97.6484%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="97.5610%" y="309" width="0.1626%" height="15" fill="rgb(236,174,8)" fg:x="1200" fg:w="2"/><text x="97.8110%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="97.6423%" y="293" width="0.0813%" height="15" fill="rgb(220,197,8)" fg:x="1201" fg:w="1"/><text x="97.8923%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="97.7236%" y="341" width="0.0813%" height="15" fill="rgb(240,108,37)" fg:x="1202" fg:w="1"/><text x="97.9736%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="97.7236%" y="325" width="0.0813%" height="15" fill="rgb(232,176,24)" fg:x="1202" fg:w="1"/><text x="97.9736%" y="335.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="97.8049%" y="325" width="0.0813%" height="15" fill="rgb(243,35,29)" fg:x="1203" fg:w="1"/><text x="98.0549%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="97.7236%" y="373" width="0.2439%" height="15" fill="rgb(210,37,18)" fg:x="1202" fg:w="3"/><text x="97.9736%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="97.7236%" y="357" width="0.2439%" height="15" fill="rgb(224,184,40)" fg:x="1202" fg:w="3"/><text x="97.9736%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="97.8049%" y="341" width="0.1626%" height="15" fill="rgb(236,39,29)" fg:x="1203" fg:w="2"/><text x="98.0549%" y="351.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="97.8862%" y="325" width="0.0813%" height="15" fill="rgb(232,48,39)" fg:x="1204" fg:w="1"/><text x="98.1362%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.9675%" y="341" width="0.0813%" height="15" fill="rgb(236,34,42)" fg:x="1205" fg:w="1"/><text x="98.2175%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="97.9675%" y="325" width="0.0813%" height="15" fill="rgb(243,106,37)" fg:x="1205" fg:w="1"/><text x="98.2175%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.9675%" y="309" width="0.0813%" height="15" fill="rgb(218,96,6)" fg:x="1205" fg:w="1"/><text x="98.2175%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.9675%" y="293" width="0.0813%" height="15" fill="rgb(235,130,12)" fg:x="1205" fg:w="1"/><text x="98.2175%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.9675%" y="277" width="0.0813%" height="15" fill="rgb(231,95,0)" fg:x="1205" fg:w="1"/><text x="98.2175%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="97.9675%" y="373" width="0.2439%" height="15" fill="rgb(228,12,23)" fg:x="1205" fg:w="3"/><text x="98.2175%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="97.9675%" y="357" width="0.2439%" height="15" fill="rgb(216,12,1)" fg:x="1205" fg:w="3"/><text x="98.2175%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="98.0488%" y="341" width="0.1626%" height="15" fill="rgb(219,59,3)" fg:x="1206" fg:w="2"/><text x="98.2988%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="98.0488%" y="325" width="0.1626%" height="15" fill="rgb(215,208,46)" fg:x="1206" fg:w="2"/><text x="98.2988%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="98.0488%" y="309" width="0.1626%" height="15" fill="rgb(254,224,29)" fg:x="1206" fg:w="2"/><text x="98.2988%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.2927%" y="325" width="0.0813%" height="15" fill="rgb(232,14,29)" fg:x="1209" fg:w="1"/><text x="98.5427%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="98.4553%" y="261" width="0.0813%" height="15" fill="rgb(208,45,52)" fg:x="1211" fg:w="1"/><text x="98.7053%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="98.3740%" y="325" width="0.2439%" height="15" fill="rgb(234,191,28)" fg:x="1210" fg:w="3"/><text x="98.6240%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="98.3740%" y="309" width="0.2439%" height="15" fill="rgb(244,67,43)" fg:x="1210" fg:w="3"/><text x="98.6240%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="98.4553%" y="293" width="0.1626%" height="15" fill="rgb(236,189,24)" fg:x="1211" fg:w="2"/><text x="98.7053%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="98.4553%" y="277" width="0.1626%" height="15" fill="rgb(239,214,33)" fg:x="1211" fg:w="2"/><text x="98.7053%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.5366%" y="261" width="0.0813%" height="15" fill="rgb(226,176,41)" fg:x="1212" fg:w="1"/><text x="98.7866%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (1 samples, 0.08%)</title><rect x="98.6179%" y="325" width="0.0813%" height="15" fill="rgb(248,47,8)" fg:x="1213" fg:w="1"/><text x="98.8679%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.08%)</title><rect x="98.6179%" y="309" width="0.0813%" height="15" fill="rgb(218,81,44)" fg:x="1213" fg:w="1"/><text x="98.8679%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="98.6179%" y="293" width="0.0813%" height="15" fill="rgb(213,98,6)" fg:x="1213" fg:w="1"/><text x="98.8679%" y="303.50"></text></g><g><title>regex::regex::string::Regex::new (9 samples, 0.73%)</title><rect x="98.2114%" y="373" width="0.7317%" height="15" fill="rgb(222,85,22)" fg:x="1208" fg:w="9"/><text x="98.4614%" y="383.50"></text></g><g><title>regex::builders::Builder::build_one_string (9 samples, 0.73%)</title><rect x="98.2114%" y="357" width="0.7317%" height="15" fill="rgb(239,46,39)" fg:x="1208" fg:w="9"/><text x="98.4614%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (9 samples, 0.73%)</title><rect x="98.2114%" y="341" width="0.7317%" height="15" fill="rgb(237,12,29)" fg:x="1208" fg:w="9"/><text x="98.4614%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="98.6992%" y="325" width="0.2439%" height="15" fill="rgb(214,77,8)" fg:x="1214" fg:w="3"/><text x="98.9492%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="98.6992%" y="309" width="0.2439%" height="15" fill="rgb(217,168,37)" fg:x="1214" fg:w="3"/><text x="98.9492%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="98.6992%" y="293" width="0.2439%" height="15" fill="rgb(221,217,23)" fg:x="1214" fg:w="3"/><text x="98.9492%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (3 samples, 0.24%)</title><rect x="98.6992%" y="277" width="0.2439%" height="15" fill="rgb(243,229,36)" fg:x="1214" fg:w="3"/><text x="98.9492%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (2 samples, 0.16%)</title><rect x="98.7805%" y="261" width="0.1626%" height="15" fill="rgb(251,163,40)" fg:x="1215" fg:w="2"/><text x="99.0305%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="98.8618%" y="245" width="0.0813%" height="15" fill="rgb(237,222,12)" fg:x="1216" fg:w="1"/><text x="99.1118%" y="255.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (16 samples, 1.30%)</title><rect x="97.7236%" y="389" width="1.3008%" height="15" fill="rgb(248,132,6)" fg:x="1202" fg:w="16"/><text x="97.9736%" y="399.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="98.9431%" y="373" width="0.0813%" height="15" fill="rgb(227,167,50)" fg:x="1217" fg:w="1"/><text x="99.1931%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="98.9431%" y="357" width="0.0813%" height="15" fill="rgb(242,84,37)" fg:x="1217" fg:w="1"/><text x="99.1931%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="98.9431%" y="341" width="0.0813%" height="15" fill="rgb(212,4,50)" fg:x="1217" fg:w="1"/><text x="99.1931%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="98.9431%" y="325" width="0.0813%" height="15" fill="rgb(230,228,32)" fg:x="1217" fg:w="1"/><text x="99.1931%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="98.9431%" y="309" width="0.0813%" height="15" fill="rgb(248,217,23)" fg:x="1217" fg:w="1"/><text x="99.1931%" y="319.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (217 samples, 17.64%)</title><rect x="81.4634%" y="485" width="17.6423%" height="15" fill="rgb(238,197,32)" fg:x="1002" fg:w="217"/><text x="81.7134%" y="495.50">&lt;&amp;kernel::model::entry::Ent..</text></g><g><title>plugins_core::looking::model::qualify_name (208 samples, 16.91%)</title><rect x="82.1951%" y="469" width="16.9106%" height="15" fill="rgb(236,106,1)" fg:x="1011" fg:w="208"/><text x="82.4451%" y="479.50">plugins_core::looking::mod..</text></g><g><title>indefinite::indefinite (208 samples, 16.91%)</title><rect x="82.1951%" y="453" width="16.9106%" height="15" fill="rgb(219,228,13)" fg:x="1011" fg:w="208"/><text x="82.4451%" y="463.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (208 samples, 16.91%)</title><rect x="82.1951%" y="437" width="16.9106%" height="15" fill="rgb(238,30,35)" fg:x="1011" fg:w="208"/><text x="82.4451%" y="447.50">indefinite::methods::indef..</text></g><g><title>indefinite::methods::apply_rules (207 samples, 16.83%)</title><rect x="82.2764%" y="421" width="16.8293%" height="15" fill="rgb(236,70,23)" fg:x="1012" fg:w="207"/><text x="82.5264%" y="431.50">indefinite::methods::apply..</text></g><g><title>indefinite::rules::other::Other::run (17 samples, 1.38%)</title><rect x="97.7236%" y="405" width="1.3821%" height="15" fill="rgb(249,104,48)" fg:x="1202" fg:w="17"/><text x="97.9736%" y="415.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="99.0244%" y="389" width="0.0813%" height="15" fill="rgb(254,117,50)" fg:x="1218" fg:w="1"/><text x="99.2744%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.2683%" y="357" width="0.0813%" height="15" fill="rgb(223,152,4)" fg:x="1221" fg:w="1"/><text x="99.5183%" y="367.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="99.2683%" y="341" width="0.0813%" height="15" fill="rgb(245,6,2)" fg:x="1221" fg:w="1"/><text x="99.5183%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.2683%" y="325" width="0.0813%" height="15" fill="rgb(249,150,24)" fg:x="1221" fg:w="1"/><text x="99.5183%" y="335.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.2683%" y="309" width="0.0813%" height="15" fill="rgb(228,185,42)" fg:x="1221" fg:w="1"/><text x="99.5183%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.2683%" y="293" width="0.0813%" height="15" fill="rgb(226,39,33)" fg:x="1221" fg:w="1"/><text x="99.5183%" y="303.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.3496%" y="245" width="0.0813%" height="15" fill="rgb(221,166,19)" fg:x="1222" fg:w="1"/><text x="99.5996%" y="255.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (5 samples, 0.41%)</title><rect x="99.1057%" y="453" width="0.4065%" height="15" fill="rgb(209,109,2)" fg:x="1219" fg:w="5"/><text x="99.3557%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.41%)</title><rect x="99.1057%" y="437" width="0.4065%" height="15" fill="rgb(252,216,26)" fg:x="1219" fg:w="5"/><text x="99.3557%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="99.1057%" y="421" width="0.4065%" height="15" fill="rgb(227,173,36)" fg:x="1219" fg:w="5"/><text x="99.3557%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.33%)</title><rect x="99.1870%" y="405" width="0.3252%" height="15" fill="rgb(209,90,7)" fg:x="1220" fg:w="4"/><text x="99.4370%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.33%)</title><rect x="99.1870%" y="389" width="0.3252%" height="15" fill="rgb(250,194,11)" fg:x="1220" fg:w="4"/><text x="99.4370%" y="399.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.33%)</title><rect x="99.1870%" y="373" width="0.3252%" height="15" fill="rgb(220,72,50)" fg:x="1220" fg:w="4"/><text x="99.4370%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (2 samples, 0.16%)</title><rect x="99.3496%" y="357" width="0.1626%" height="15" fill="rgb(222,106,48)" fg:x="1222" fg:w="2"/><text x="99.5996%" y="367.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.3496%" y="341" width="0.1626%" height="15" fill="rgb(216,220,45)" fg:x="1222" fg:w="2"/><text x="99.5996%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.3496%" y="325" width="0.1626%" height="15" fill="rgb(234,112,18)" fg:x="1222" fg:w="2"/><text x="99.5996%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.3496%" y="309" width="0.1626%" height="15" fill="rgb(206,179,9)" fg:x="1222" fg:w="2"/><text x="99.5996%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.3496%" y="293" width="0.1626%" height="15" fill="rgb(215,115,40)" fg:x="1222" fg:w="2"/><text x="99.5996%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.3496%" y="277" width="0.1626%" height="15" fill="rgb(222,69,34)" fg:x="1222" fg:w="2"/><text x="99.5996%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="99.3496%" y="261" width="0.1626%" height="15" fill="rgb(209,161,10)" fg:x="1222" fg:w="2"/><text x="99.5996%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4309%" y="245" width="0.0813%" height="15" fill="rgb(217,6,38)" fg:x="1223" fg:w="1"/><text x="99.6809%" y="255.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (225 samples, 18.29%)</title><rect x="81.3008%" y="693" width="18.2927%" height="15" fill="rgb(229,229,48)" fg:x="1000" fg:w="225"/><text x="81.5508%" y="703.50">&lt;engine::session::Session as ..</text></g><g><title>kernel::plugins::mw::apply_middleware (225 samples, 18.29%)</title><rect x="81.3008%" y="677" width="18.2927%" height="15" fill="rgb(225,21,28)" fg:x="1000" fg:w="225"/><text x="81.5508%" y="687.50">kernel::plugins::mw::apply_mi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (225 samples, 18.29%)</title><rect x="81.3008%" y="661" width="18.2927%" height="15" fill="rgb(206,33,13)" fg:x="1000" fg:w="225"/><text x="81.5508%" y="671.50">kernel::plugins::mw::Middlewa..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (225 samples, 18.29%)</title><rect x="81.3008%" y="645" width="18.2927%" height="15" fill="rgb(242,178,17)" fg:x="1000" fg:w="225"/><text x="81.5508%" y="655.50">&lt;engine::session::ExpandSurro..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (223 samples, 18.13%)</title><rect x="81.4634%" y="629" width="18.1301%" height="15" fill="rgb(220,162,5)" fg:x="1002" fg:w="223"/><text x="81.7134%" y="639.50">kernel::plugins::mw::Middlew..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (223 samples, 18.13%)</title><rect x="81.4634%" y="613" width="18.1301%" height="15" fill="rgb(210,33,43)" fg:x="1002" fg:w="223"/><text x="81.7134%" y="623.50">&lt;plugins_dynlib::DynamicMidd..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (223 samples, 18.13%)</title><rect x="81.4634%" y="597" width="18.1301%" height="15" fill="rgb(216,116,54)" fg:x="1002" fg:w="223"/><text x="81.7134%" y="607.50">kernel::plugins::mw::Middlew..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (223 samples, 18.13%)</title><rect x="81.4634%" y="581" width="18.1301%" height="15" fill="rgb(249,92,24)" fg:x="1002" fg:w="223"/><text x="81.7134%" y="591.50">core::ops::function::FnOnce:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (223 samples, 18.13%)</title><rect x="81.4634%" y="565" width="18.1301%" height="15" fill="rgb(231,189,14)" fg:x="1002" fg:w="223"/><text x="81.7134%" y="575.50">kernel::plugins::mw::Middlew..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (223 samples, 18.13%)</title><rect x="81.4634%" y="549" width="18.1301%" height="15" fill="rgb(230,8,41)" fg:x="1002" fg:w="223"/><text x="81.7134%" y="559.50">core::ops::function::FnOnce:..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (223 samples, 18.13%)</title><rect x="81.4634%" y="533" width="18.1301%" height="15" fill="rgb(249,7,27)" fg:x="1002" fg:w="223"/><text x="81.7134%" y="543.50">&lt;engine::session::state::Sta..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (223 samples, 18.13%)</title><rect x="81.4634%" y="517" width="18.1301%" height="15" fill="rgb(232,86,5)" fg:x="1002" fg:w="223"/><text x="81.7134%" y="527.50">&lt;plugins_core::looking::acti..</text></g><g><title>plugins_core::looking::model::new_area_observation (223 samples, 18.13%)</title><rect x="81.4634%" y="501" width="18.1301%" height="15" fill="rgb(224,175,18)" fg:x="1002" fg:w="223"/><text x="81.7134%" y="511.50">plugins_core::looking::model..</text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.49%)</title><rect x="99.1057%" y="485" width="0.4878%" height="15" fill="rgb(220,129,12)" fg:x="1219" fg:w="6"/><text x="99.3557%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.49%)</title><rect x="99.1057%" y="469" width="0.4878%" height="15" fill="rgb(210,19,36)" fg:x="1219" fg:w="6"/><text x="99.3557%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5122%" y="453" width="0.0813%" height="15" fill="rgb(219,96,14)" fg:x="1224" fg:w="1"/><text x="99.7622%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5122%" y="437" width="0.0813%" height="15" fill="rgb(249,106,1)" fg:x="1224" fg:w="1"/><text x="99.7622%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5122%" y="421" width="0.0813%" height="15" fill="rgb(249,155,20)" fg:x="1224" fg:w="1"/><text x="99.7622%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5122%" y="405" width="0.0813%" height="15" fill="rgb(244,168,9)" fg:x="1224" fg:w="1"/><text x="99.7622%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.5122%" y="389" width="0.0813%" height="15" fill="rgb(216,23,50)" fg:x="1224" fg:w="1"/><text x="99.7622%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="99.5935%" y="645" width="0.0813%" height="15" fill="rgb(224,219,20)" fg:x="1225" fg:w="1"/><text x="99.8435%" y="655.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.5935%" y="629" width="0.0813%" height="15" fill="rgb(222,156,15)" fg:x="1225" fg:w="1"/><text x="99.8435%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5935%" y="613" width="0.0813%" height="15" fill="rgb(231,97,17)" fg:x="1225" fg:w="1"/><text x="99.8435%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5935%" y="597" width="0.0813%" height="15" fill="rgb(218,70,48)" fg:x="1225" fg:w="1"/><text x="99.8435%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5935%" y="581" width="0.0813%" height="15" fill="rgb(212,196,52)" fg:x="1225" fg:w="1"/><text x="99.8435%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5935%" y="565" width="0.0813%" height="15" fill="rgb(243,203,18)" fg:x="1225" fg:w="1"/><text x="99.8435%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5935%" y="549" width="0.0813%" height="15" fill="rgb(252,125,41)" fg:x="1225" fg:w="1"/><text x="99.8435%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5935%" y="533" width="0.0813%" height="15" fill="rgb(223,180,33)" fg:x="1225" fg:w="1"/><text x="99.8435%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5935%" y="517" width="0.0813%" height="15" fill="rgb(254,159,46)" fg:x="1225" fg:w="1"/><text x="99.8435%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.6748%" y="645" width="0.0813%" height="15" fill="rgb(254,38,10)" fg:x="1226" fg:w="1"/><text x="99.9248%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.6748%" y="629" width="0.0813%" height="15" fill="rgb(208,217,32)" fg:x="1226" fg:w="1"/><text x="99.9248%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.6748%" y="613" width="0.0813%" height="15" fill="rgb(221,120,13)" fg:x="1226" fg:w="1"/><text x="99.9248%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6748%" y="597" width="0.0813%" height="15" fill="rgb(246,54,52)" fg:x="1226" fg:w="1"/><text x="99.9248%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6748%" y="581" width="0.0813%" height="15" fill="rgb(242,34,25)" fg:x="1226" fg:w="1"/><text x="99.9248%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.6748%" y="565" width="0.0813%" height="15" fill="rgb(247,209,9)" fg:x="1226" fg:w="1"/><text x="99.9248%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.6748%" y="549" width="0.0813%" height="15" fill="rgb(228,71,26)" fg:x="1226" fg:w="1"/><text x="99.9248%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (3 samples, 0.24%)</title><rect x="99.5935%" y="693" width="0.2439%" height="15" fill="rgb(222,145,49)" fg:x="1225" fg:w="3"/><text x="99.8435%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="99.5935%" y="677" width="0.2439%" height="15" fill="rgb(218,121,17)" fg:x="1225" fg:w="3"/><text x="99.8435%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.5935%" y="661" width="0.2439%" height="15" fill="rgb(244,50,7)" fg:x="1225" fg:w="3"/><text x="99.8435%" y="671.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="99.7561%" y="645" width="0.0813%" height="15" fill="rgb(246,229,37)" fg:x="1227" fg:w="1"/><text x="100.0061%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.7561%" y="629" width="0.0813%" height="15" fill="rgb(225,18,5)" fg:x="1227" fg:w="1"/><text x="100.0061%" y="639.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (229 samples, 18.62%)</title><rect x="81.3008%" y="709" width="18.6179%" height="15" fill="rgb(213,204,8)" fg:x="1000" fg:w="229"/><text x="81.5508%" y="719.50">engine::session::Session::eva..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.8374%" y="693" width="0.0813%" height="15" fill="rgb(238,103,6)" fg:x="1228" fg:w="1"/><text x="100.0874%" y="703.50"></text></g><g><title>all (1,230 samples, 100%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(222,25,35)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="1071.50"></text></g><g><title>simple-484c7248 (1,230 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(213,203,35)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="1055.50">simple-484c7248</text></g><g><title>_start (1,230 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(221,79,53)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="1039.50">_start</text></g><g><title>__libc_start_main (1,230 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(243,200,35)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="1023.50">__libc_start_main</text></g><g><title>main (1,230 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(248,60,25)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="1007.50">main</text></g><g><title>std::rt::lang_start_internal (1,230 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(227,53,46)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="991.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,230 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(216,120,32)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="975.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,230 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(220,134,1)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,230 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(237,168,5)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="943.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,230 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(231,100,33)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,230 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(236,177,47)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,230 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(235,7,49)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,230 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(232,119,22)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,230 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(254,73,53)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="863.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,230 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(251,35,20)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="847.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,230 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(241,119,20)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="831.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,230 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(207,102,14)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="815.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,230 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(248,201,50)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="799.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,230 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(222,185,44)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="783.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (267 samples, 21.71%)</title><rect x="78.2927%" y="757" width="21.7073%" height="15" fill="rgb(218,107,18)" fg:x="963" fg:w="267"/><text x="78.5427%" y="767.50">&lt;criterion::routine::Function&lt;M,F,..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (267 samples, 21.71%)</title><rect x="78.2927%" y="741" width="21.7073%" height="15" fill="rgb(237,177,39)" fg:x="963" fg:w="267"/><text x="78.5427%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::it..</text></g><g><title>tests::evaluate_text_in_new_domain (267 samples, 21.71%)</title><rect x="78.2927%" y="725" width="21.7073%" height="15" fill="rgb(246,69,6)" fg:x="963" fg:w="267"/><text x="78.5427%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="99.9187%" y="709" width="0.0813%" height="15" fill="rgb(234,208,37)" fg:x="1229" fg:w="1"/><text x="100.1687%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="99.9187%" y="693" width="0.0813%" height="15" fill="rgb(225,4,6)" fg:x="1229" fg:w="1"/><text x="100.1687%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.9187%" y="677" width="0.0813%" height="15" fill="rgb(233,45,0)" fg:x="1229" fg:w="1"/><text x="100.1687%" y="687.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="99.9187%" y="661" width="0.0813%" height="15" fill="rgb(226,136,5)" fg:x="1229" fg:w="1"/><text x="100.1687%" y="671.50"></text></g></svg></svg>