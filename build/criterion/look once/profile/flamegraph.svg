<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1254" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1237.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1237.00"> </text><svg id="frames" x="10" width="1180" total_samples="1228"><g><title>&lt;engine::session::Session as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0814%" y="837" width="0.0814%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.3314%" y="847.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.1629%" y="837" width="0.0814%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.4129%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.1629%" y="821" width="0.0814%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.4129%" y="831.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2443%" y="805" width="0.0814%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.4943%" y="815.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.3257%" y="773" width="0.1629%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="2"/><text x="0.5757%" y="783.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.3257%" y="757" width="0.1629%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="2"/><text x="0.5757%" y="767.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="0.3257%" y="789" width="0.3257%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="4"/><text x="0.5757%" y="799.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.4886%" y="773" width="0.1629%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="2"/><text x="0.7386%" y="783.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.65%)</title><rect x="0.0814%" y="853" width="0.6515%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="8"/><text x="0.3314%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (6 samples, 0.49%)</title><rect x="0.2443%" y="837" width="0.4886%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="6"/><text x="0.4943%" y="847.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="0.2443%" y="821" width="0.4886%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="6"/><text x="0.4943%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (5 samples, 0.41%)</title><rect x="0.3257%" y="805" width="0.4072%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="5"/><text x="0.5757%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="0.6515%" y="789" width="0.0814%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="1"/><text x="0.9015%" y="799.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6515%" y="773" width="0.0814%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="1"/><text x="0.9015%" y="783.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="0.7329%" y="661" width="0.0814%" height="15" fill="rgb(217,207,13)" fg:x="9" fg:w="1"/><text x="0.9829%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.7329%" y="645" width="0.0814%" height="15" fill="rgb(231,73,38)" fg:x="9" fg:w="1"/><text x="0.9829%" y="655.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="0.7329%" y="629" width="0.0814%" height="15" fill="rgb(225,20,46)" fg:x="9" fg:w="1"/><text x="0.9829%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.7329%" y="613" width="0.0814%" height="15" fill="rgb(210,31,41)" fg:x="9" fg:w="1"/><text x="0.9829%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.7329%" y="597" width="0.0814%" height="15" fill="rgb(221,200,47)" fg:x="9" fg:w="1"/><text x="0.9829%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.7329%" y="581" width="0.0814%" height="15" fill="rgb(226,26,5)" fg:x="9" fg:w="1"/><text x="0.9829%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="0.7329%" y="709" width="0.1629%" height="15" fill="rgb(249,33,26)" fg:x="9" fg:w="2"/><text x="0.9829%" y="719.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.7329%" y="693" width="0.1629%" height="15" fill="rgb(235,183,28)" fg:x="9" fg:w="2"/><text x="0.9829%" y="703.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.7329%" y="677" width="0.1629%" height="15" fill="rgb(221,5,38)" fg:x="9" fg:w="2"/><text x="0.9829%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.8143%" y="661" width="0.0814%" height="15" fill="rgb(247,18,42)" fg:x="10" fg:w="1"/><text x="1.0643%" y="671.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.8143%" y="645" width="0.0814%" height="15" fill="rgb(241,131,45)" fg:x="10" fg:w="1"/><text x="1.0643%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="0.8143%" y="629" width="0.0814%" height="15" fill="rgb(249,31,29)" fg:x="10" fg:w="1"/><text x="1.0643%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.8143%" y="613" width="0.0814%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="1"/><text x="1.0643%" y="623.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.8143%" y="597" width="0.0814%" height="15" fill="rgb(238,160,17)" fg:x="10" fg:w="1"/><text x="1.0643%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="0.8143%" y="581" width="0.0814%" height="15" fill="rgb(214,148,48)" fg:x="10" fg:w="1"/><text x="1.0643%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.8143%" y="565" width="0.0814%" height="15" fill="rgb(232,36,49)" fg:x="10" fg:w="1"/><text x="1.0643%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8143%" y="549" width="0.0814%" height="15" fill="rgb(209,103,24)" fg:x="10" fg:w="1"/><text x="1.0643%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="0.7329%" y="773" width="0.2443%" height="15" fill="rgb(229,88,8)" fg:x="9" fg:w="3"/><text x="0.9829%" y="783.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="0.7329%" y="757" width="0.2443%" height="15" fill="rgb(213,181,19)" fg:x="9" fg:w="3"/><text x="0.9829%" y="767.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="0.7329%" y="741" width="0.2443%" height="15" fill="rgb(254,191,54)" fg:x="9" fg:w="3"/><text x="0.9829%" y="751.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="0.7329%" y="725" width="0.2443%" height="15" fill="rgb(241,83,37)" fg:x="9" fg:w="3"/><text x="0.9829%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.8958%" y="709" width="0.0814%" height="15" fill="rgb(233,36,39)" fg:x="11" fg:w="1"/><text x="1.1458%" y="719.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.8958%" y="693" width="0.0814%" height="15" fill="rgb(226,3,54)" fg:x="11" fg:w="1"/><text x="1.1458%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="0.8958%" y="677" width="0.0814%" height="15" fill="rgb(245,192,40)" fg:x="11" fg:w="1"/><text x="1.1458%" y="687.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="0.8958%" y="661" width="0.0814%" height="15" fill="rgb(238,167,29)" fg:x="11" fg:w="1"/><text x="1.1458%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (5 samples, 0.41%)</title><rect x="0.7329%" y="821" width="0.4072%" height="15" fill="rgb(232,182,51)" fg:x="9" fg:w="5"/><text x="0.9829%" y="831.50"></text></g><g><title>engine::internal::Entities::prepare_entity (5 samples, 0.41%)</title><rect x="0.7329%" y="805" width="0.4072%" height="15" fill="rgb(231,60,39)" fg:x="9" fg:w="5"/><text x="0.9829%" y="815.50"></text></g><g><title>kernel::model::deserialize_entity (5 samples, 0.41%)</title><rect x="0.7329%" y="789" width="0.4072%" height="15" fill="rgb(208,69,12)" fg:x="9" fg:w="5"/><text x="0.9829%" y="799.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="0.9772%" y="773" width="0.1629%" height="15" fill="rgb(235,93,37)" fg:x="12" fg:w="2"/><text x="1.2272%" y="783.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.9772%" y="757" width="0.1629%" height="15" fill="rgb(213,116,39)" fg:x="12" fg:w="2"/><text x="1.2272%" y="767.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="0.9772%" y="741" width="0.1629%" height="15" fill="rgb(222,207,29)" fg:x="12" fg:w="2"/><text x="1.2272%" y="751.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.9772%" y="725" width="0.1629%" height="15" fill="rgb(206,96,30)" fg:x="12" fg:w="2"/><text x="1.2272%" y="735.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="0.9772%" y="709" width="0.1629%" height="15" fill="rgb(218,138,4)" fg:x="12" fg:w="2"/><text x="1.2272%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="1.0586%" y="693" width="0.0814%" height="15" fill="rgb(250,191,14)" fg:x="13" fg:w="1"/><text x="1.3086%" y="703.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.0586%" y="677" width="0.0814%" height="15" fill="rgb(239,60,40)" fg:x="13" fg:w="1"/><text x="1.3086%" y="687.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="1.0586%" y="661" width="0.0814%" height="15" fill="rgb(206,27,48)" fg:x="13" fg:w="1"/><text x="1.3086%" y="671.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="1.0586%" y="645" width="0.0814%" height="15" fill="rgb(225,35,8)" fg:x="13" fg:w="1"/><text x="1.3086%" y="655.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="1.1401%" y="821" width="0.0814%" height="15" fill="rgb(250,213,24)" fg:x="14" fg:w="1"/><text x="1.3901%" y="831.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="1.1401%" y="805" width="0.0814%" height="15" fill="rgb(247,123,22)" fg:x="14" fg:w="1"/><text x="1.3901%" y="815.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="1.1401%" y="789" width="0.0814%" height="15" fill="rgb(231,138,38)" fg:x="14" fg:w="1"/><text x="1.3901%" y="799.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="1.1401%" y="773" width="0.0814%" height="15" fill="rgb(231,145,46)" fg:x="14" fg:w="1"/><text x="1.3901%" y="783.50"></text></g><g><title>dlopen (4 samples, 0.33%)</title><rect x="1.3844%" y="757" width="0.3257%" height="15" fill="rgb(251,118,11)" fg:x="17" fg:w="4"/><text x="1.6344%" y="767.50"></text></g><g><title>_dl_catch_error (4 samples, 0.33%)</title><rect x="1.3844%" y="741" width="0.3257%" height="15" fill="rgb(217,147,25)" fg:x="17" fg:w="4"/><text x="1.6344%" y="751.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.33%)</title><rect x="1.3844%" y="725" width="0.3257%" height="15" fill="rgb(247,81,37)" fg:x="17" fg:w="4"/><text x="1.6344%" y="735.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.33%)</title><rect x="1.3844%" y="709" width="0.3257%" height="15" fill="rgb(209,12,38)" fg:x="17" fg:w="4"/><text x="1.6344%" y="719.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.33%)</title><rect x="1.3844%" y="693" width="0.3257%" height="15" fill="rgb(227,1,9)" fg:x="17" fg:w="4"/><text x="1.6344%" y="703.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (13 samples, 1.06%)</title><rect x="0.7329%" y="853" width="1.0586%" height="15" fill="rgb(248,47,43)" fg:x="9" fg:w="13"/><text x="0.9829%" y="863.50"></text></g><g><title>engine::session::Session::new (13 samples, 1.06%)</title><rect x="0.7329%" y="837" width="1.0586%" height="15" fill="rgb(221,10,30)" fg:x="9" fg:w="13"/><text x="0.9829%" y="847.50"></text></g><g><title>engine::session::Session::initialize (7 samples, 0.57%)</title><rect x="1.2215%" y="821" width="0.5700%" height="15" fill="rgb(210,229,1)" fg:x="15" fg:w="7"/><text x="1.4715%" y="831.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (7 samples, 0.57%)</title><rect x="1.2215%" y="805" width="0.5700%" height="15" fill="rgb(222,148,37)" fg:x="15" fg:w="7"/><text x="1.4715%" y="815.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.49%)</title><rect x="1.3029%" y="789" width="0.4886%" height="15" fill="rgb(234,67,33)" fg:x="16" fg:w="6"/><text x="1.5529%" y="799.50"></text></g><g><title>libloading::os::unix::Library::open (6 samples, 0.49%)</title><rect x="1.3029%" y="773" width="0.4886%" height="15" fill="rgb(247,98,35)" fg:x="16" fg:w="6"/><text x="1.5529%" y="783.50"></text></g><g><title>libloading::util::cstr_cow_from_bytes (1 samples, 0.08%)</title><rect x="1.7101%" y="757" width="0.0814%" height="15" fill="rgb(247,138,52)" fg:x="21" fg:w="1"/><text x="1.9601%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="1.7915%" y="837" width="0.0814%" height="15" fill="rgb(213,79,30)" fg:x="22" fg:w="1"/><text x="2.0415%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="1.7915%" y="821" width="0.0814%" height="15" fill="rgb(246,177,23)" fg:x="22" fg:w="1"/><text x="2.0415%" y="831.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7915%" y="805" width="0.0814%" height="15" fill="rgb(230,62,27)" fg:x="22" fg:w="1"/><text x="2.0415%" y="815.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="1.8730%" y="805" width="0.0814%" height="15" fill="rgb(216,154,8)" fg:x="23" fg:w="1"/><text x="2.1230%" y="815.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="1.8730%" y="789" width="0.0814%" height="15" fill="rgb(244,35,45)" fg:x="23" fg:w="1"/><text x="2.1230%" y="799.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="1.8730%" y="773" width="0.0814%" height="15" fill="rgb(251,115,12)" fg:x="23" fg:w="1"/><text x="2.1230%" y="783.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="1.8730%" y="757" width="0.0814%" height="15" fill="rgb(240,54,50)" fg:x="23" fg:w="1"/><text x="2.1230%" y="767.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="1.8730%" y="741" width="0.0814%" height="15" fill="rgb(233,84,52)" fg:x="23" fg:w="1"/><text x="2.1230%" y="751.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.8730%" y="725" width="0.0814%" height="15" fill="rgb(207,117,47)" fg:x="23" fg:w="1"/><text x="2.1230%" y="735.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1.9544%" y="757" width="0.0814%" height="15" fill="rgb(249,43,39)" fg:x="24" fg:w="1"/><text x="2.2044%" y="767.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.9544%" y="741" width="0.0814%" height="15" fill="rgb(209,38,44)" fg:x="24" fg:w="1"/><text x="2.2044%" y="751.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.9544%" y="725" width="0.0814%" height="15" fill="rgb(236,212,23)" fg:x="24" fg:w="1"/><text x="2.2044%" y="735.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.9544%" y="709" width="0.0814%" height="15" fill="rgb(242,79,21)" fg:x="24" fg:w="1"/><text x="2.2044%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.9544%" y="693" width="0.0814%" height="15" fill="rgb(211,96,35)" fg:x="24" fg:w="1"/><text x="2.2044%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.9544%" y="677" width="0.0814%" height="15" fill="rgb(253,215,40)" fg:x="24" fg:w="1"/><text x="2.2044%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="2.0358%" y="741" width="0.2443%" height="15" fill="rgb(211,81,21)" fg:x="25" fg:w="3"/><text x="2.2858%" y="751.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.1173%" y="725" width="0.1629%" height="15" fill="rgb(208,190,38)" fg:x="26" fg:w="2"/><text x="2.3673%" y="735.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="2.1173%" y="709" width="0.1629%" height="15" fill="rgb(235,213,38)" fg:x="26" fg:w="2"/><text x="2.3673%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.1987%" y="693" width="0.0814%" height="15" fill="rgb(237,122,38)" fg:x="27" fg:w="1"/><text x="2.4487%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.1987%" y="677" width="0.0814%" height="15" fill="rgb(244,218,35)" fg:x="27" fg:w="1"/><text x="2.4487%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.1987%" y="661" width="0.0814%" height="15" fill="rgb(240,68,47)" fg:x="27" fg:w="1"/><text x="2.4487%" y="671.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.1987%" y="645" width="0.0814%" height="15" fill="rgb(210,16,53)" fg:x="27" fg:w="1"/><text x="2.4487%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.2801%" y="725" width="0.0814%" height="15" fill="rgb(235,124,12)" fg:x="28" fg:w="1"/><text x="2.5301%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.2801%" y="709" width="0.0814%" height="15" fill="rgb(224,169,11)" fg:x="28" fg:w="1"/><text x="2.5301%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.2801%" y="693" width="0.0814%" height="15" fill="rgb(250,166,2)" fg:x="28" fg:w="1"/><text x="2.5301%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="2.2801%" y="741" width="0.2443%" height="15" fill="rgb(242,216,29)" fg:x="28" fg:w="3"/><text x="2.5301%" y="751.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.3616%" y="725" width="0.1629%" height="15" fill="rgb(230,116,27)" fg:x="29" fg:w="2"/><text x="2.6116%" y="735.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.4430%" y="709" width="0.0814%" height="15" fill="rgb(228,99,48)" fg:x="30" fg:w="1"/><text x="2.6930%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.4430%" y="693" width="0.0814%" height="15" fill="rgb(253,11,6)" fg:x="30" fg:w="1"/><text x="2.6930%" y="703.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.73%)</title><rect x="1.9544%" y="773" width="0.7329%" height="15" fill="rgb(247,143,39)" fg:x="24" fg:w="9"/><text x="2.2044%" y="783.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="2.0358%" y="757" width="0.6515%" height="15" fill="rgb(236,97,10)" fg:x="25" fg:w="8"/><text x="2.2858%" y="767.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.5244%" y="741" width="0.1629%" height="15" fill="rgb(233,208,19)" fg:x="31" fg:w="2"/><text x="2.7744%" y="751.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="2.5244%" y="725" width="0.1629%" height="15" fill="rgb(216,164,2)" fg:x="31" fg:w="2"/><text x="2.7744%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="2.5244%" y="709" width="0.1629%" height="15" fill="rgb(220,129,5)" fg:x="31" fg:w="2"/><text x="2.7744%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.6059%" y="693" width="0.0814%" height="15" fill="rgb(242,17,10)" fg:x="32" fg:w="1"/><text x="2.8559%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.6059%" y="677" width="0.0814%" height="15" fill="rgb(242,107,0)" fg:x="32" fg:w="1"/><text x="2.8559%" y="687.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.6059%" y="661" width="0.0814%" height="15" fill="rgb(251,28,31)" fg:x="32" fg:w="1"/><text x="2.8559%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.6873%" y="725" width="0.0814%" height="15" fill="rgb(233,223,10)" fg:x="33" fg:w="1"/><text x="2.9373%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.6873%" y="773" width="0.1629%" height="15" fill="rgb(215,21,27)" fg:x="33" fg:w="2"/><text x="2.9373%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="2.6873%" y="757" width="0.1629%" height="15" fill="rgb(232,23,21)" fg:x="33" fg:w="2"/><text x="2.9373%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.6873%" y="741" width="0.1629%" height="15" fill="rgb(244,5,23)" fg:x="33" fg:w="2"/><text x="2.9373%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.7687%" y="725" width="0.0814%" height="15" fill="rgb(226,81,46)" fg:x="34" fg:w="1"/><text x="3.0187%" y="735.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.7687%" y="709" width="0.0814%" height="15" fill="rgb(247,70,30)" fg:x="34" fg:w="1"/><text x="3.0187%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.7687%" y="693" width="0.0814%" height="15" fill="rgb(212,68,19)" fg:x="34" fg:w="1"/><text x="3.0187%" y="703.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="2.8502%" y="725" width="0.0814%" height="15" fill="rgb(240,187,13)" fg:x="35" fg:w="1"/><text x="3.1002%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.8502%" y="709" width="0.0814%" height="15" fill="rgb(223,113,26)" fg:x="35" fg:w="1"/><text x="3.1002%" y="719.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.8502%" y="693" width="0.0814%" height="15" fill="rgb(206,192,2)" fg:x="35" fg:w="1"/><text x="3.1002%" y="703.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.8502%" y="677" width="0.0814%" height="15" fill="rgb(241,108,4)" fg:x="35" fg:w="1"/><text x="3.1002%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8502%" y="661" width="0.0814%" height="15" fill="rgb(247,173,49)" fg:x="35" fg:w="1"/><text x="3.1002%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9316%" y="677" width="0.0814%" height="15" fill="rgb(224,114,35)" fg:x="36" fg:w="1"/><text x="3.1816%" y="687.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9316%" y="661" width="0.0814%" height="15" fill="rgb(245,159,27)" fg:x="36" fg:w="1"/><text x="3.1816%" y="671.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="2.9316%" y="645" width="0.0814%" height="15" fill="rgb(245,172,44)" fg:x="36" fg:w="1"/><text x="3.1816%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="3.0130%" y="677" width="0.0814%" height="15" fill="rgb(236,23,11)" fg:x="37" fg:w="1"/><text x="3.2630%" y="687.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0130%" y="661" width="0.0814%" height="15" fill="rgb(205,117,38)" fg:x="37" fg:w="1"/><text x="3.2630%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.0130%" y="645" width="0.0814%" height="15" fill="rgb(237,72,25)" fg:x="37" fg:w="1"/><text x="3.2630%" y="655.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (15 samples, 1.22%)</title><rect x="1.9544%" y="805" width="1.2215%" height="15" fill="rgb(244,70,9)" fg:x="24" fg:w="15"/><text x="2.2044%" y="815.50"></text></g><g><title>engine::session::Session::check_for_changes (15 samples, 1.22%)</title><rect x="1.9544%" y="789" width="1.2215%" height="15" fill="rgb(217,125,39)" fg:x="24" fg:w="15"/><text x="2.2044%" y="799.50"></text></g><g><title>kernel::compare::any_entity_changes (4 samples, 0.33%)</title><rect x="2.8502%" y="773" width="0.3257%" height="15" fill="rgb(235,36,10)" fg:x="35" fg:w="4"/><text x="3.1002%" y="783.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (4 samples, 0.33%)</title><rect x="2.8502%" y="757" width="0.3257%" height="15" fill="rgb(251,123,47)" fg:x="35" fg:w="4"/><text x="3.1002%" y="767.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.33%)</title><rect x="2.8502%" y="741" width="0.3257%" height="15" fill="rgb(221,13,13)" fg:x="35" fg:w="4"/><text x="3.1002%" y="751.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="2.9316%" y="725" width="0.2443%" height="15" fill="rgb(238,131,9)" fg:x="36" fg:w="3"/><text x="3.1816%" y="735.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (3 samples, 0.24%)</title><rect x="2.9316%" y="709" width="0.2443%" height="15" fill="rgb(211,50,8)" fg:x="36" fg:w="3"/><text x="3.1816%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="2.9316%" y="693" width="0.2443%" height="15" fill="rgb(245,182,24)" fg:x="36" fg:w="3"/><text x="3.1816%" y="703.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0945%" y="677" width="0.0814%" height="15" fill="rgb(242,14,37)" fg:x="38" fg:w="1"/><text x="3.3445%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.0945%" y="661" width="0.0814%" height="15" fill="rgb(246,228,12)" fg:x="38" fg:w="1"/><text x="3.3445%" y="671.50"></text></g><g><title>engine::session::Session::flush (17 samples, 1.38%)</title><rect x="1.8730%" y="837" width="1.3844%" height="15" fill="rgb(213,55,15)" fg:x="23" fg:w="17"/><text x="2.1230%" y="847.50"></text></g><g><title>engine::session::Session::save_entity_changes (17 samples, 1.38%)</title><rect x="1.8730%" y="821" width="1.3844%" height="15" fill="rgb(209,9,3)" fg:x="23" fg:w="17"/><text x="2.1230%" y="831.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="3.1759%" y="805" width="0.0814%" height="15" fill="rgb(230,59,30)" fg:x="39" fg:w="1"/><text x="3.4259%" y="815.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="3.1759%" y="789" width="0.0814%" height="15" fill="rgb(209,121,21)" fg:x="39" fg:w="1"/><text x="3.4259%" y="799.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="3.1759%" y="773" width="0.0814%" height="15" fill="rgb(220,109,13)" fg:x="39" fg:w="1"/><text x="3.4259%" y="783.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="3.1759%" y="757" width="0.0814%" height="15" fill="rgb(232,18,1)" fg:x="39" fg:w="1"/><text x="3.4259%" y="767.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="3.1759%" y="741" width="0.0814%" height="15" fill="rgb(215,41,42)" fg:x="39" fg:w="1"/><text x="3.4259%" y="751.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="3.1759%" y="725" width="0.0814%" height="15" fill="rgb(224,123,36)" fg:x="39" fg:w="1"/><text x="3.4259%" y="735.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="3.1759%" y="709" width="0.0814%" height="15" fill="rgb(240,125,3)" fg:x="39" fg:w="1"/><text x="3.4259%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="3.2573%" y="821" width="0.0814%" height="15" fill="rgb(205,98,50)" fg:x="40" fg:w="1"/><text x="3.5073%" y="831.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="3.3388%" y="773" width="0.0814%" height="15" fill="rgb(205,185,37)" fg:x="41" fg:w="1"/><text x="3.5888%" y="783.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.3388%" y="757" width="0.0814%" height="15" fill="rgb(238,207,15)" fg:x="41" fg:w="1"/><text x="3.5888%" y="767.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="3.3388%" y="741" width="0.0814%" height="15" fill="rgb(213,199,42)" fg:x="41" fg:w="1"/><text x="3.5888%" y="751.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="3.3388%" y="725" width="0.0814%" height="15" fill="rgb(235,201,11)" fg:x="41" fg:w="1"/><text x="3.5888%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.3388%" y="709" width="0.0814%" height="15" fill="rgb(207,46,11)" fg:x="41" fg:w="1"/><text x="3.5888%" y="719.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.3388%" y="693" width="0.0814%" height="15" fill="rgb(241,35,35)" fg:x="41" fg:w="1"/><text x="3.5888%" y="703.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="3.2573%" y="837" width="0.2443%" height="15" fill="rgb(243,32,47)" fg:x="40" fg:w="3"/><text x="3.5073%" y="847.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="3.3388%" y="821" width="0.1629%" height="15" fill="rgb(247,202,23)" fg:x="41" fg:w="2"/><text x="3.5888%" y="831.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.16%)</title><rect x="3.3388%" y="805" width="0.1629%" height="15" fill="rgb(219,102,11)" fg:x="41" fg:w="2"/><text x="3.5888%" y="815.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.16%)</title><rect x="3.3388%" y="789" width="0.1629%" height="15" fill="rgb(243,110,44)" fg:x="41" fg:w="2"/><text x="3.5888%" y="799.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="3.4202%" y="773" width="0.0814%" height="15" fill="rgb(222,74,54)" fg:x="42" fg:w="1"/><text x="3.6702%" y="783.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.4202%" y="757" width="0.0814%" height="15" fill="rgb(216,99,12)" fg:x="42" fg:w="1"/><text x="3.6702%" y="767.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="3.4202%" y="741" width="0.0814%" height="15" fill="rgb(226,22,26)" fg:x="42" fg:w="1"/><text x="3.6702%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.4202%" y="725" width="0.0814%" height="15" fill="rgb(217,163,10)" fg:x="42" fg:w="1"/><text x="3.6702%" y="735.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.4202%" y="709" width="0.0814%" height="15" fill="rgb(213,25,53)" fg:x="42" fg:w="1"/><text x="3.6702%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="3.5016%" y="805" width="0.1629%" height="15" fill="rgb(252,105,26)" fg:x="43" fg:w="2"/><text x="3.7516%" y="815.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="3.5016%" y="789" width="0.1629%" height="15" fill="rgb(220,39,43)" fg:x="43" fg:w="2"/><text x="3.7516%" y="799.50"></text></g><g><title>engine::internal::Maps::lookup_entity (2 samples, 0.16%)</title><rect x="3.5016%" y="773" width="0.1629%" height="15" fill="rgb(229,68,48)" fg:x="43" fg:w="2"/><text x="3.7516%" y="783.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="3.5016%" y="837" width="0.2443%" height="15" fill="rgb(252,8,32)" fg:x="43" fg:w="3"/><text x="3.7516%" y="847.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="3.5016%" y="821" width="0.2443%" height="15" fill="rgb(223,20,43)" fg:x="43" fg:w="3"/><text x="3.7516%" y="831.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.6645%" y="805" width="0.0814%" height="15" fill="rgb(229,81,49)" fg:x="45" fg:w="1"/><text x="3.9145%" y="815.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="3.6645%" y="789" width="0.0814%" height="15" fill="rgb(236,28,36)" fg:x="45" fg:w="1"/><text x="3.9145%" y="799.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="3.7459%" y="821" width="0.0814%" height="15" fill="rgb(249,185,26)" fg:x="46" fg:w="1"/><text x="3.9959%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.7459%" y="805" width="0.0814%" height="15" fill="rgb(249,174,33)" fg:x="46" fg:w="1"/><text x="3.9959%" y="815.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="3.7459%" y="789" width="0.0814%" height="15" fill="rgb(233,201,37)" fg:x="46" fg:w="1"/><text x="3.9959%" y="799.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.7459%" y="773" width="0.0814%" height="15" fill="rgb(221,78,26)" fg:x="46" fg:w="1"/><text x="3.9959%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.7459%" y="757" width="0.0814%" height="15" fill="rgb(250,127,30)" fg:x="46" fg:w="1"/><text x="3.9959%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.7459%" y="741" width="0.0814%" height="15" fill="rgb(230,49,44)" fg:x="46" fg:w="1"/><text x="3.9959%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.7459%" y="725" width="0.0814%" height="15" fill="rgb(229,67,23)" fg:x="46" fg:w="1"/><text x="3.9959%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.7459%" y="709" width="0.0814%" height="15" fill="rgb(249,83,47)" fg:x="46" fg:w="1"/><text x="3.9959%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.7459%" y="693" width="0.0814%" height="15" fill="rgb(215,43,3)" fg:x="46" fg:w="1"/><text x="3.9959%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.7459%" y="677" width="0.0814%" height="15" fill="rgb(238,154,13)" fg:x="46" fg:w="1"/><text x="3.9959%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.7459%" y="661" width="0.0814%" height="15" fill="rgb(219,56,2)" fg:x="46" fg:w="1"/><text x="3.9959%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.7459%" y="645" width="0.0814%" height="15" fill="rgb(233,0,4)" fg:x="46" fg:w="1"/><text x="3.9959%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.7459%" y="629" width="0.0814%" height="15" fill="rgb(235,30,7)" fg:x="46" fg:w="1"/><text x="3.9959%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.7459%" y="613" width="0.0814%" height="15" fill="rgb(250,79,13)" fg:x="46" fg:w="1"/><text x="3.9959%" y="623.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.7459%" y="597" width="0.0814%" height="15" fill="rgb(211,146,34)" fg:x="46" fg:w="1"/><text x="3.9959%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.7459%" y="581" width="0.0814%" height="15" fill="rgb(228,22,38)" fg:x="46" fg:w="1"/><text x="3.9959%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.8274%" y="789" width="0.0814%" height="15" fill="rgb(235,168,5)" fg:x="47" fg:w="1"/><text x="4.0774%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;engine::session::ModifiedEntity&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="3.8274%" y="773" width="0.0814%" height="15" fill="rgb(221,155,16)" fg:x="47" fg:w="1"/><text x="4.0774%" y="783.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.8274%" y="757" width="0.0814%" height="15" fill="rgb(215,215,53)" fg:x="47" fg:w="1"/><text x="4.0774%" y="767.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.9088%" y="789" width="0.0814%" height="15" fill="rgb(223,4,10)" fg:x="48" fg:w="1"/><text x="4.1588%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="3.9088%" y="773" width="0.0814%" height="15" fill="rgb(234,103,6)" fg:x="48" fg:w="1"/><text x="4.1588%" y="783.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.9088%" y="757" width="0.0814%" height="15" fill="rgb(227,97,0)" fg:x="48" fg:w="1"/><text x="4.1588%" y="767.50"></text></g><g><title>engine::identifiers::model::set_gid (1 samples, 0.08%)</title><rect x="3.9902%" y="789" width="0.0814%" height="15" fill="rgb(234,150,53)" fg:x="49" fg:w="1"/><text x="4.2402%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;engine::identifiers::model::Identifiers&gt;&gt; (1 samples, 0.08%)</title><rect x="3.9902%" y="773" width="0.0814%" height="15" fill="rgb(228,201,54)" fg:x="49" fg:w="1"/><text x="4.2402%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="3.9902%" y="757" width="0.0814%" height="15" fill="rgb(222,22,37)" fg:x="49" fg:w="1"/><text x="4.2402%" y="767.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.0717%" y="725" width="0.0814%" height="15" fill="rgb(237,53,32)" fg:x="50" fg:w="1"/><text x="4.3217%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.0717%" y="709" width="0.0814%" height="15" fill="rgb(233,25,53)" fg:x="50" fg:w="1"/><text x="4.3217%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.1531%" y="725" width="0.0814%" height="15" fill="rgb(210,40,34)" fg:x="51" fg:w="1"/><text x="4.4031%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.1531%" y="709" width="0.0814%" height="15" fill="rgb(241,220,44)" fg:x="51" fg:w="1"/><text x="4.4031%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.3160%" y="709" width="0.0814%" height="15" fill="rgb(235,28,35)" fg:x="53" fg:w="1"/><text x="4.5660%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.3160%" y="693" width="0.0814%" height="15" fill="rgb(210,56,17)" fg:x="53" fg:w="1"/><text x="4.5660%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.3160%" y="677" width="0.0814%" height="15" fill="rgb(224,130,29)" fg:x="53" fg:w="1"/><text x="4.5660%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.3160%" y="661" width="0.0814%" height="15" fill="rgb(235,212,8)" fg:x="53" fg:w="1"/><text x="4.5660%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.3974%" y="709" width="0.0814%" height="15" fill="rgb(223,33,50)" fg:x="54" fg:w="1"/><text x="4.6474%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.3974%" y="693" width="0.0814%" height="15" fill="rgb(219,149,13)" fg:x="54" fg:w="1"/><text x="4.6474%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.3974%" y="677" width="0.0814%" height="15" fill="rgb(250,156,29)" fg:x="54" fg:w="1"/><text x="4.6474%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.3974%" y="661" width="0.0814%" height="15" fill="rgb(216,193,19)" fg:x="54" fg:w="1"/><text x="4.6474%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.4788%" y="693" width="0.0814%" height="15" fill="rgb(216,135,14)" fg:x="55" fg:w="1"/><text x="4.7288%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.4788%" y="677" width="0.0814%" height="15" fill="rgb(241,47,5)" fg:x="55" fg:w="1"/><text x="4.7288%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.5603%" y="693" width="0.1629%" height="15" fill="rgb(233,42,35)" fg:x="56" fg:w="2"/><text x="4.8103%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.6417%" y="677" width="0.0814%" height="15" fill="rgb(231,13,6)" fg:x="57" fg:w="1"/><text x="4.8917%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.6417%" y="661" width="0.0814%" height="15" fill="rgb(207,181,40)" fg:x="57" fg:w="1"/><text x="4.8917%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.6417%" y="645" width="0.0814%" height="15" fill="rgb(254,173,49)" fg:x="57" fg:w="1"/><text x="4.8917%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="4.6417%" y="629" width="0.0814%" height="15" fill="rgb(221,1,38)" fg:x="57" fg:w="1"/><text x="4.8917%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="4.2345%" y="725" width="0.5700%" height="15" fill="rgb(206,124,46)" fg:x="52" fg:w="7"/><text x="4.4845%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="4.4788%" y="709" width="0.3257%" height="15" fill="rgb(249,21,11)" fg:x="55" fg:w="4"/><text x="4.7288%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.7231%" y="693" width="0.0814%" height="15" fill="rgb(222,201,40)" fg:x="58" fg:w="1"/><text x="4.9731%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.7231%" y="677" width="0.0814%" height="15" fill="rgb(235,61,29)" fg:x="58" fg:w="1"/><text x="4.9731%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.7231%" y="661" width="0.0814%" height="15" fill="rgb(219,207,3)" fg:x="58" fg:w="1"/><text x="4.9731%" y="671.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.81%)</title><rect x="4.0717%" y="757" width="0.8143%" height="15" fill="rgb(222,56,46)" fg:x="50" fg:w="10"/><text x="4.3217%" y="767.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.81%)</title><rect x="4.0717%" y="741" width="0.8143%" height="15" fill="rgb(239,76,54)" fg:x="50" fg:w="10"/><text x="4.3217%" y="751.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.8046%" y="725" width="0.0814%" height="15" fill="rgb(231,124,27)" fg:x="59" fg:w="1"/><text x="5.0546%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.8860%" y="709" width="0.0814%" height="15" fill="rgb(249,195,6)" fg:x="60" fg:w="1"/><text x="5.1360%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.9674%" y="693" width="0.0814%" height="15" fill="rgb(237,174,47)" fg:x="61" fg:w="1"/><text x="5.2174%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.0489%" y="693" width="0.0814%" height="15" fill="rgb(206,201,31)" fg:x="62" fg:w="1"/><text x="5.2989%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.0489%" y="677" width="0.0814%" height="15" fill="rgb(231,57,52)" fg:x="62" fg:w="1"/><text x="5.2989%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="4.8860%" y="757" width="0.3257%" height="15" fill="rgb(248,177,22)" fg:x="60" fg:w="4"/><text x="5.1360%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.33%)</title><rect x="4.8860%" y="741" width="0.3257%" height="15" fill="rgb(215,211,37)" fg:x="60" fg:w="4"/><text x="5.1360%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="4.8860%" y="725" width="0.3257%" height="15" fill="rgb(241,128,51)" fg:x="60" fg:w="4"/><text x="5.1360%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="4.9674%" y="709" width="0.2443%" height="15" fill="rgb(227,165,31)" fg:x="61" fg:w="3"/><text x="5.2174%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.1303%" y="693" width="0.0814%" height="15" fill="rgb(228,167,24)" fg:x="63" fg:w="1"/><text x="5.3803%" y="703.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.2932%" y="709" width="0.0814%" height="15" fill="rgb(228,143,12)" fg:x="65" fg:w="1"/><text x="5.5432%" y="719.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="5.3746%" y="709" width="0.0814%" height="15" fill="rgb(249,149,8)" fg:x="66" fg:w="1"/><text x="5.6246%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.3746%" y="693" width="0.0814%" height="15" fill="rgb(243,35,44)" fg:x="66" fg:w="1"/><text x="5.6246%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="5.3746%" y="677" width="0.0814%" height="15" fill="rgb(246,89,9)" fg:x="66" fg:w="1"/><text x="5.6246%" y="687.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="5.3746%" y="661" width="0.0814%" height="15" fill="rgb(233,213,13)" fg:x="66" fg:w="1"/><text x="5.6246%" y="671.50"></text></g><g><title>engine::session::Session::flush (21 samples, 1.71%)</title><rect x="3.8274%" y="821" width="1.7101%" height="15" fill="rgb(233,141,41)" fg:x="47" fg:w="21"/><text x="4.0774%" y="831.50"></text></g><g><title>engine::session::Session::save_entity_changes (21 samples, 1.71%)</title><rect x="3.8274%" y="805" width="1.7101%" height="15" fill="rgb(239,167,4)" fg:x="47" fg:w="21"/><text x="4.0774%" y="815.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (18 samples, 1.47%)</title><rect x="4.0717%" y="789" width="1.4658%" height="15" fill="rgb(209,217,16)" fg:x="50" fg:w="18"/><text x="4.3217%" y="799.50"></text></g><g><title>engine::session::Session::check_for_changes (18 samples, 1.47%)</title><rect x="4.0717%" y="773" width="1.4658%" height="15" fill="rgb(219,88,35)" fg:x="50" fg:w="18"/><text x="4.3217%" y="783.50"></text></g><g><title>kernel::compare::any_entity_changes (4 samples, 0.33%)</title><rect x="5.2117%" y="757" width="0.3257%" height="15" fill="rgb(220,193,23)" fg:x="64" fg:w="4"/><text x="5.4617%" y="767.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (4 samples, 0.33%)</title><rect x="5.2117%" y="741" width="0.3257%" height="15" fill="rgb(230,90,52)" fg:x="64" fg:w="4"/><text x="5.4617%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.33%)</title><rect x="5.2117%" y="725" width="0.3257%" height="15" fill="rgb(252,106,19)" fg:x="64" fg:w="4"/><text x="5.4617%" y="735.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="5.4560%" y="709" width="0.0814%" height="15" fill="rgb(206,74,20)" fg:x="67" fg:w="1"/><text x="5.7060%" y="719.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="5.4560%" y="693" width="0.0814%" height="15" fill="rgb(230,138,44)" fg:x="67" fg:w="1"/><text x="5.7060%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.4560%" y="677" width="0.0814%" height="15" fill="rgb(235,182,43)" fg:x="67" fg:w="1"/><text x="5.7060%" y="687.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.4560%" y="661" width="0.0814%" height="15" fill="rgb(242,16,51)" fg:x="67" fg:w="1"/><text x="5.7060%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.4560%" y="645" width="0.0814%" height="15" fill="rgb(248,9,4)" fg:x="67" fg:w="1"/><text x="5.7060%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.4560%" y="629" width="0.0814%" height="15" fill="rgb(210,31,22)" fg:x="67" fg:w="1"/><text x="5.7060%" y="639.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="5.5375%" y="821" width="0.0814%" height="15" fill="rgb(239,54,39)" fg:x="68" fg:w="1"/><text x="5.7875%" y="831.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="5.5375%" y="805" width="0.0814%" height="15" fill="rgb(230,99,41)" fg:x="68" fg:w="1"/><text x="5.7875%" y="815.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="5.5375%" y="789" width="0.0814%" height="15" fill="rgb(253,106,12)" fg:x="68" fg:w="1"/><text x="5.7875%" y="799.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="5.5375%" y="773" width="0.0814%" height="15" fill="rgb(213,46,41)" fg:x="68" fg:w="1"/><text x="5.7875%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.5375%" y="757" width="0.0814%" height="15" fill="rgb(215,133,35)" fg:x="68" fg:w="1"/><text x="5.7875%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.5375%" y="741" width="0.0814%" height="15" fill="rgb(213,28,5)" fg:x="68" fg:w="1"/><text x="5.7875%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="5.5375%" y="725" width="0.0814%" height="15" fill="rgb(215,77,49)" fg:x="68" fg:w="1"/><text x="5.7875%" y="735.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.5375%" y="709" width="0.0814%" height="15" fill="rgb(248,100,22)" fg:x="68" fg:w="1"/><text x="5.7875%" y="719.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="5.6189%" y="821" width="0.0814%" height="15" fill="rgb(208,67,9)" fg:x="69" fg:w="1"/><text x="5.8689%" y="831.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="5.6189%" y="805" width="0.0814%" height="15" fill="rgb(219,133,21)" fg:x="69" fg:w="1"/><text x="5.8689%" y="815.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="5.6189%" y="789" width="0.0814%" height="15" fill="rgb(246,46,29)" fg:x="69" fg:w="1"/><text x="5.8689%" y="799.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="5.6189%" y="773" width="0.0814%" height="15" fill="rgb(246,185,52)" fg:x="69" fg:w="1"/><text x="5.8689%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6189%" y="757" width="0.0814%" height="15" fill="rgb(252,136,11)" fg:x="69" fg:w="1"/><text x="5.8689%" y="767.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="5.7003%" y="821" width="0.0814%" height="15" fill="rgb(219,138,53)" fg:x="70" fg:w="1"/><text x="5.9503%" y="831.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.7818%" y="741" width="0.0814%" height="15" fill="rgb(211,51,23)" fg:x="71" fg:w="1"/><text x="6.0318%" y="751.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.7818%" y="725" width="0.0814%" height="15" fill="rgb(247,221,28)" fg:x="71" fg:w="1"/><text x="6.0318%" y="735.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.8632%" y="709" width="0.0814%" height="15" fill="rgb(251,222,45)" fg:x="72" fg:w="1"/><text x="6.1132%" y="719.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.8632%" y="693" width="0.0814%" height="15" fill="rgb(217,162,53)" fg:x="72" fg:w="1"/><text x="6.1132%" y="703.50"></text></g><g><title>plugins_core::build::Build::occupying (3 samples, 0.24%)</title><rect x="5.7818%" y="821" width="0.2443%" height="15" fill="rgb(229,93,14)" fg:x="71" fg:w="3"/><text x="6.0318%" y="831.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="5.7818%" y="805" width="0.2443%" height="15" fill="rgb(209,67,49)" fg:x="71" fg:w="3"/><text x="6.0318%" y="815.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (3 samples, 0.24%)</title><rect x="5.7818%" y="789" width="0.2443%" height="15" fill="rgb(213,87,29)" fg:x="71" fg:w="3"/><text x="6.0318%" y="799.50"></text></g><g><title>kernel::model::Entity::replace_scope (3 samples, 0.24%)</title><rect x="5.7818%" y="773" width="0.2443%" height="15" fill="rgb(205,151,52)" fg:x="71" fg:w="3"/><text x="6.0318%" y="783.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (3 samples, 0.24%)</title><rect x="5.7818%" y="757" width="0.2443%" height="15" fill="rgb(253,215,39)" fg:x="71" fg:w="3"/><text x="6.0318%" y="767.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="5.8632%" y="741" width="0.1629%" height="15" fill="rgb(221,220,41)" fg:x="72" fg:w="2"/><text x="6.1132%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="5.8632%" y="725" width="0.1629%" height="15" fill="rgb(218,133,21)" fg:x="72" fg:w="2"/><text x="6.1132%" y="735.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.9446%" y="709" width="0.0814%" height="15" fill="rgb(221,193,43)" fg:x="73" fg:w="1"/><text x="6.1946%" y="719.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="6.0261%" y="789" width="0.0814%" height="15" fill="rgb(240,128,52)" fg:x="74" fg:w="1"/><text x="6.2761%" y="799.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="6.0261%" y="773" width="0.0814%" height="15" fill="rgb(253,114,12)" fg:x="74" fg:w="1"/><text x="6.2761%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="6.0261%" y="757" width="0.0814%" height="15" fill="rgb(215,223,47)" fg:x="74" fg:w="1"/><text x="6.2761%" y="767.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (30 samples, 2.44%)</title><rect x="3.7459%" y="837" width="2.4430%" height="15" fill="rgb(248,225,23)" fg:x="46" fg:w="30"/><text x="3.9959%" y="847.50">pl..</text></g><g><title>plugins_core::build::Build::with_username (2 samples, 0.16%)</title><rect x="6.0261%" y="821" width="0.1629%" height="15" fill="rgb(250,108,0)" fg:x="74" fg:w="2"/><text x="6.2761%" y="831.50"></text></g><g><title>engine::users::model::add_username_to_key (2 samples, 0.16%)</title><rect x="6.0261%" y="805" width="0.1629%" height="15" fill="rgb(228,208,7)" fg:x="74" fg:w="2"/><text x="6.2761%" y="815.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="6.1075%" y="789" width="0.0814%" height="15" fill="rgb(244,45,10)" fg:x="75" fg:w="1"/><text x="6.3575%" y="799.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="6.1075%" y="773" width="0.0814%" height="15" fill="rgb(207,125,25)" fg:x="75" fg:w="1"/><text x="6.3575%" y="783.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="6.1075%" y="757" width="0.0814%" height="15" fill="rgb(210,195,18)" fg:x="75" fg:w="1"/><text x="6.3575%" y="767.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.1075%" y="741" width="0.0814%" height="15" fill="rgb(249,80,12)" fg:x="75" fg:w="1"/><text x="6.3575%" y="751.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="6.1075%" y="725" width="0.0814%" height="15" fill="rgb(221,65,9)" fg:x="75" fg:w="1"/><text x="6.3575%" y="735.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.1075%" y="709" width="0.0814%" height="15" fill="rgb(235,49,36)" fg:x="75" fg:w="1"/><text x="6.3575%" y="719.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.1075%" y="693" width="0.0814%" height="15" fill="rgb(225,32,20)" fg:x="75" fg:w="1"/><text x="6.3575%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.1075%" y="677" width="0.0814%" height="15" fill="rgb(215,141,46)" fg:x="75" fg:w="1"/><text x="6.3575%" y="687.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (55 samples, 4.48%)</title><rect x="1.7915%" y="853" width="4.4788%" height="15" fill="rgb(250,160,47)" fg:x="22" fg:w="55"/><text x="2.0415%" y="863.50">&lt;test..</text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="6.1889%" y="837" width="0.0814%" height="15" fill="rgb(216,222,40)" fg:x="76" fg:w="1"/><text x="6.4389%" y="847.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="6.1889%" y="821" width="0.0814%" height="15" fill="rgb(234,217,39)" fg:x="76" fg:w="1"/><text x="6.4389%" y="831.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.1889%" y="805" width="0.0814%" height="15" fill="rgb(207,178,40)" fg:x="76" fg:w="1"/><text x="6.4389%" y="815.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.1889%" y="789" width="0.0814%" height="15" fill="rgb(221,136,13)" fg:x="76" fg:w="1"/><text x="6.4389%" y="799.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="6.1889%" y="773" width="0.0814%" height="15" fill="rgb(249,199,10)" fg:x="76" fg:w="1"/><text x="6.4389%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.1889%" y="757" width="0.0814%" height="15" fill="rgb(249,222,13)" fg:x="76" fg:w="1"/><text x="6.4389%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.1889%" y="741" width="0.0814%" height="15" fill="rgb(244,185,38)" fg:x="76" fg:w="1"/><text x="6.4389%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="6.1889%" y="725" width="0.0814%" height="15" fill="rgb(236,202,9)" fg:x="76" fg:w="1"/><text x="6.4389%" y="735.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.1889%" y="709" width="0.0814%" height="15" fill="rgb(250,229,37)" fg:x="76" fg:w="1"/><text x="6.4389%" y="719.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="6.2704%" y="837" width="0.0814%" height="15" fill="rgb(206,174,23)" fg:x="77" fg:w="1"/><text x="6.5204%" y="847.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="6.2704%" y="821" width="0.0814%" height="15" fill="rgb(211,33,43)" fg:x="77" fg:w="1"/><text x="6.5204%" y="831.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.2704%" y="805" width="0.0814%" height="15" fill="rgb(245,58,50)" fg:x="77" fg:w="1"/><text x="6.5204%" y="815.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="6.2704%" y="789" width="0.0814%" height="15" fill="rgb(244,68,36)" fg:x="77" fg:w="1"/><text x="6.5204%" y="799.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="6.2704%" y="773" width="0.0814%" height="15" fill="rgb(232,229,15)" fg:x="77" fg:w="1"/><text x="6.5204%" y="783.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="6.2704%" y="757" width="0.0814%" height="15" fill="rgb(254,30,23)" fg:x="77" fg:w="1"/><text x="6.5204%" y="767.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="6.2704%" y="741" width="0.0814%" height="15" fill="rgb(235,160,14)" fg:x="77" fg:w="1"/><text x="6.5204%" y="751.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="6.2704%" y="725" width="0.0814%" height="15" fill="rgb(212,155,44)" fg:x="77" fg:w="1"/><text x="6.5204%" y="735.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.2704%" y="709" width="0.0814%" height="15" fill="rgb(226,2,50)" fg:x="77" fg:w="1"/><text x="6.5204%" y="719.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="6.2704%" y="693" width="0.0814%" height="15" fill="rgb(234,177,6)" fg:x="77" fg:w="1"/><text x="6.5204%" y="703.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.2704%" y="677" width="0.0814%" height="15" fill="rgb(217,24,9)" fg:x="77" fg:w="1"/><text x="6.5204%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.2704%" y="661" width="0.0814%" height="15" fill="rgb(220,13,46)" fg:x="77" fg:w="1"/><text x="6.5204%" y="671.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="6.2704%" y="645" width="0.0814%" height="15" fill="rgb(239,221,27)" fg:x="77" fg:w="1"/><text x="6.5204%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="6.2704%" y="629" width="0.0814%" height="15" fill="rgb(222,198,25)" fg:x="77" fg:w="1"/><text x="6.5204%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="6.2704%" y="613" width="0.0814%" height="15" fill="rgb(211,99,13)" fg:x="77" fg:w="1"/><text x="6.5204%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="6.2704%" y="597" width="0.0814%" height="15" fill="rgb(232,111,31)" fg:x="77" fg:w="1"/><text x="6.5204%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="6.2704%" y="581" width="0.0814%" height="15" fill="rgb(245,82,37)" fg:x="77" fg:w="1"/><text x="6.5204%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="6.2704%" y="565" width="0.0814%" height="15" fill="rgb(227,149,46)" fg:x="77" fg:w="1"/><text x="6.5204%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.2704%" y="549" width="0.0814%" height="15" fill="rgb(218,36,50)" fg:x="77" fg:w="1"/><text x="6.5204%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="6.2704%" y="533" width="0.0814%" height="15" fill="rgb(226,80,48)" fg:x="77" fg:w="1"/><text x="6.5204%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.2704%" y="517" width="0.0814%" height="15" fill="rgb(238,224,15)" fg:x="77" fg:w="1"/><text x="6.5204%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="6.2704%" y="501" width="0.0814%" height="15" fill="rgb(241,136,10)" fg:x="77" fg:w="1"/><text x="6.5204%" y="511.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="6.2704%" y="485" width="0.0814%" height="15" fill="rgb(208,32,45)" fg:x="77" fg:w="1"/><text x="6.5204%" y="495.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="6.2704%" y="469" width="0.0814%" height="15" fill="rgb(207,135,9)" fg:x="77" fg:w="1"/><text x="6.5204%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.2704%" y="453" width="0.0814%" height="15" fill="rgb(206,86,44)" fg:x="77" fg:w="1"/><text x="6.5204%" y="463.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="6.3518%" y="821" width="0.0814%" height="15" fill="rgb(245,177,15)" fg:x="78" fg:w="1"/><text x="6.6018%" y="831.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.3518%" y="805" width="0.0814%" height="15" fill="rgb(206,64,50)" fg:x="78" fg:w="1"/><text x="6.6018%" y="815.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.4332%" y="805" width="0.0814%" height="15" fill="rgb(234,36,40)" fg:x="79" fg:w="1"/><text x="6.6832%" y="815.50"></text></g><g><title>engine::identifiers::model::get_gid (2 samples, 0.16%)</title><rect x="6.4332%" y="821" width="0.1629%" height="15" fill="rgb(213,64,8)" fg:x="79" fg:w="2"/><text x="6.6832%" y="831.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="6.5147%" y="805" width="0.0814%" height="15" fill="rgb(210,75,36)" fg:x="80" fg:w="1"/><text x="6.7647%" y="815.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="6.5147%" y="789" width="0.0814%" height="15" fill="rgb(229,88,21)" fg:x="80" fg:w="1"/><text x="6.7647%" y="799.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5147%" y="773" width="0.0814%" height="15" fill="rgb(252,204,47)" fg:x="80" fg:w="1"/><text x="6.7647%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.5147%" y="757" width="0.0814%" height="15" fill="rgb(208,77,27)" fg:x="80" fg:w="1"/><text x="6.7647%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.5147%" y="741" width="0.0814%" height="15" fill="rgb(221,76,26)" fg:x="80" fg:w="1"/><text x="6.7647%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.5147%" y="725" width="0.0814%" height="15" fill="rgb(225,139,18)" fg:x="80" fg:w="1"/><text x="6.7647%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.5147%" y="709" width="0.0814%" height="15" fill="rgb(230,137,11)" fg:x="80" fg:w="1"/><text x="6.7647%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.5147%" y="693" width="0.0814%" height="15" fill="rgb(212,28,1)" fg:x="80" fg:w="1"/><text x="6.7647%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.5147%" y="677" width="0.0814%" height="15" fill="rgb(248,164,17)" fg:x="80" fg:w="1"/><text x="6.7647%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.5147%" y="661" width="0.0814%" height="15" fill="rgb(222,171,42)" fg:x="80" fg:w="1"/><text x="6.7647%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.5147%" y="645" width="0.0814%" height="15" fill="rgb(243,84,45)" fg:x="80" fg:w="1"/><text x="6.7647%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.5147%" y="629" width="0.0814%" height="15" fill="rgb(252,49,23)" fg:x="80" fg:w="1"/><text x="6.7647%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.5147%" y="613" width="0.0814%" height="15" fill="rgb(215,19,7)" fg:x="80" fg:w="1"/><text x="6.7647%" y="623.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.5147%" y="597" width="0.0814%" height="15" fill="rgb(238,81,41)" fg:x="80" fg:w="1"/><text x="6.7647%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5147%" y="581" width="0.0814%" height="15" fill="rgb(210,199,37)" fg:x="80" fg:w="1"/><text x="6.7647%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.6775%" y="741" width="0.0814%" height="15" fill="rgb(244,192,49)" fg:x="82" fg:w="1"/><text x="6.9275%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.6775%" y="725" width="0.0814%" height="15" fill="rgb(226,211,11)" fg:x="82" fg:w="1"/><text x="6.9275%" y="735.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.6775%" y="709" width="0.0814%" height="15" fill="rgb(236,162,54)" fg:x="82" fg:w="1"/><text x="6.9275%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.6775%" y="693" width="0.0814%" height="15" fill="rgb(220,229,9)" fg:x="82" fg:w="1"/><text x="6.9275%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.6775%" y="677" width="0.0814%" height="15" fill="rgb(250,87,22)" fg:x="82" fg:w="1"/><text x="6.9275%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="6.7590%" y="741" width="0.2443%" height="15" fill="rgb(239,43,17)" fg:x="83" fg:w="3"/><text x="7.0090%" y="751.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.8404%" y="725" width="0.1629%" height="15" fill="rgb(231,177,25)" fg:x="84" fg:w="2"/><text x="7.0904%" y="735.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.8404%" y="709" width="0.1629%" height="15" fill="rgb(219,179,1)" fg:x="84" fg:w="2"/><text x="7.0904%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.9218%" y="693" width="0.0814%" height="15" fill="rgb(238,219,53)" fg:x="85" fg:w="1"/><text x="7.1718%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.0033%" y="725" width="0.0814%" height="15" fill="rgb(232,167,36)" fg:x="86" fg:w="1"/><text x="7.2533%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.0033%" y="709" width="0.0814%" height="15" fill="rgb(244,19,51)" fg:x="86" fg:w="1"/><text x="7.2533%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.0033%" y="693" width="0.0814%" height="15" fill="rgb(224,6,22)" fg:x="86" fg:w="1"/><text x="7.2533%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.0033%" y="677" width="0.0814%" height="15" fill="rgb(224,145,5)" fg:x="86" fg:w="1"/><text x="7.2533%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.0847%" y="725" width="0.0814%" height="15" fill="rgb(234,130,49)" fg:x="87" fg:w="1"/><text x="7.3347%" y="735.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.0847%" y="709" width="0.0814%" height="15" fill="rgb(254,6,2)" fg:x="87" fg:w="1"/><text x="7.3347%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="6.6775%" y="757" width="0.5700%" height="15" fill="rgb(208,96,46)" fg:x="82" fg:w="7"/><text x="6.9275%" y="767.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="7.0033%" y="741" width="0.2443%" height="15" fill="rgb(239,3,39)" fg:x="86" fg:w="3"/><text x="7.2533%" y="751.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.1661%" y="725" width="0.0814%" height="15" fill="rgb(233,210,1)" fg:x="88" fg:w="1"/><text x="7.4161%" y="735.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.73%)</title><rect x="6.5961%" y="789" width="0.7329%" height="15" fill="rgb(244,137,37)" fg:x="81" fg:w="9"/><text x="6.8461%" y="799.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.73%)</title><rect x="6.5961%" y="773" width="0.7329%" height="15" fill="rgb(240,136,2)" fg:x="81" fg:w="9"/><text x="6.8461%" y="783.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.2476%" y="757" width="0.0814%" height="15" fill="rgb(239,18,37)" fg:x="89" fg:w="1"/><text x="7.4976%" y="767.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.2476%" y="741" width="0.0814%" height="15" fill="rgb(218,185,22)" fg:x="89" fg:w="1"/><text x="7.4976%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.2476%" y="725" width="0.0814%" height="15" fill="rgb(225,218,4)" fg:x="89" fg:w="1"/><text x="7.4976%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.2476%" y="709" width="0.0814%" height="15" fill="rgb(230,182,32)" fg:x="89" fg:w="1"/><text x="7.4976%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.2476%" y="693" width="0.0814%" height="15" fill="rgb(242,56,43)" fg:x="89" fg:w="1"/><text x="7.4976%" y="703.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.2476%" y="677" width="0.0814%" height="15" fill="rgb(233,99,24)" fg:x="89" fg:w="1"/><text x="7.4976%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.3290%" y="789" width="0.0814%" height="15" fill="rgb(234,209,42)" fg:x="90" fg:w="1"/><text x="7.5790%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.3290%" y="773" width="0.0814%" height="15" fill="rgb(227,7,12)" fg:x="90" fg:w="1"/><text x="7.5790%" y="783.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.5733%" y="725" width="0.0814%" height="15" fill="rgb(245,203,43)" fg:x="93" fg:w="1"/><text x="7.8233%" y="735.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.6547%" y="709" width="0.0814%" height="15" fill="rgb(238,205,33)" fg:x="94" fg:w="1"/><text x="7.9047%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.6547%" y="693" width="0.0814%" height="15" fill="rgb(231,56,7)" fg:x="94" fg:w="1"/><text x="7.9047%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="7.4919%" y="773" width="0.3257%" height="15" fill="rgb(244,186,29)" fg:x="92" fg:w="4"/><text x="7.7419%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.33%)</title><rect x="7.4919%" y="757" width="0.3257%" height="15" fill="rgb(234,111,31)" fg:x="92" fg:w="4"/><text x="7.7419%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="7.5733%" y="741" width="0.2443%" height="15" fill="rgb(241,149,10)" fg:x="93" fg:w="3"/><text x="7.8233%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.6547%" y="725" width="0.1629%" height="15" fill="rgb(249,206,44)" fg:x="94" fg:w="2"/><text x="7.9047%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.7362%" y="709" width="0.0814%" height="15" fill="rgb(251,153,30)" fg:x="95" fg:w="1"/><text x="7.9862%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.7362%" y="693" width="0.0814%" height="15" fill="rgb(239,152,38)" fg:x="95" fg:w="1"/><text x="7.9862%" y="703.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.8990%" y="709" width="0.0814%" height="15" fill="rgb(249,139,47)" fg:x="97" fg:w="1"/><text x="8.1490%" y="719.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.8990%" y="693" width="0.0814%" height="15" fill="rgb(244,64,35)" fg:x="97" fg:w="1"/><text x="8.1490%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.8990%" y="677" width="0.0814%" height="15" fill="rgb(216,46,15)" fg:x="97" fg:w="1"/><text x="8.1490%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.9805%" y="693" width="0.1629%" height="15" fill="rgb(250,74,19)" fg:x="98" fg:w="2"/><text x="8.2305%" y="703.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.9805%" y="677" width="0.1629%" height="15" fill="rgb(249,42,33)" fg:x="98" fg:w="2"/><text x="8.2305%" y="687.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="7.9805%" y="661" width="0.1629%" height="15" fill="rgb(242,149,17)" fg:x="98" fg:w="2"/><text x="8.2305%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.1433%" y="677" width="0.0814%" height="15" fill="rgb(244,29,21)" fg:x="100" fg:w="1"/><text x="8.3933%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.1433%" y="661" width="0.0814%" height="15" fill="rgb(220,130,37)" fg:x="100" fg:w="1"/><text x="8.3933%" y="671.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (6 samples, 0.49%)</title><rect x="7.8176%" y="741" width="0.4886%" height="15" fill="rgb(211,67,2)" fg:x="96" fg:w="6"/><text x="8.0676%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="7.8176%" y="725" width="0.4886%" height="15" fill="rgb(235,68,52)" fg:x="96" fg:w="6"/><text x="8.0676%" y="735.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.33%)</title><rect x="7.9805%" y="709" width="0.3257%" height="15" fill="rgb(246,142,3)" fg:x="98" fg:w="4"/><text x="8.2305%" y="719.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="8.1433%" y="693" width="0.1629%" height="15" fill="rgb(241,25,7)" fg:x="100" fg:w="2"/><text x="8.3933%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.2248%" y="677" width="0.0814%" height="15" fill="rgb(242,119,39)" fg:x="101" fg:w="1"/><text x="8.4748%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.2248%" y="661" width="0.0814%" height="15" fill="rgb(241,98,45)" fg:x="101" fg:w="1"/><text x="8.4748%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.2248%" y="645" width="0.0814%" height="15" fill="rgb(254,28,30)" fg:x="101" fg:w="1"/><text x="8.4748%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.2248%" y="629" width="0.0814%" height="15" fill="rgb(241,142,54)" fg:x="101" fg:w="1"/><text x="8.4748%" y="639.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Version&gt;::serialize (1 samples, 0.08%)</title><rect x="8.3062%" y="741" width="0.0814%" height="15" fill="rgb(222,85,15)" fg:x="102" fg:w="1"/><text x="8.5562%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.3062%" y="725" width="0.0814%" height="15" fill="rgb(210,85,47)" fg:x="102" fg:w="1"/><text x="8.5562%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.3876%" y="709" width="0.0814%" height="15" fill="rgb(224,206,25)" fg:x="103" fg:w="1"/><text x="8.6376%" y="719.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (10 samples, 0.81%)</title><rect x="7.8176%" y="773" width="0.8143%" height="15" fill="rgb(243,201,19)" fg:x="96" fg:w="10"/><text x="8.0676%" y="783.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.81%)</title><rect x="7.8176%" y="757" width="0.8143%" height="15" fill="rgb(236,59,4)" fg:x="96" fg:w="10"/><text x="8.0676%" y="767.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="8.3876%" y="741" width="0.2443%" height="15" fill="rgb(254,179,45)" fg:x="103" fg:w="3"/><text x="8.6376%" y="751.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (3 samples, 0.24%)</title><rect x="8.3876%" y="725" width="0.2443%" height="15" fill="rgb(226,14,10)" fg:x="103" fg:w="3"/><text x="8.6376%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="8.4691%" y="709" width="0.1629%" height="15" fill="rgb(244,27,41)" fg:x="104" fg:w="2"/><text x="8.7191%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="8.4691%" y="693" width="0.1629%" height="15" fill="rgb(235,35,32)" fg:x="104" fg:w="2"/><text x="8.7191%" y="703.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="8.4691%" y="677" width="0.1629%" height="15" fill="rgb(218,68,31)" fg:x="104" fg:w="2"/><text x="8.7191%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.5505%" y="661" width="0.0814%" height="15" fill="rgb(207,120,37)" fg:x="105" fg:w="1"/><text x="8.8005%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.5505%" y="645" width="0.0814%" height="15" fill="rgb(227,98,0)" fg:x="105" fg:w="1"/><text x="8.8005%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="8.6319%" y="677" width="0.2443%" height="15" fill="rgb(207,7,3)" fg:x="106" fg:w="3"/><text x="8.8819%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="8.6319%" y="661" width="0.2443%" height="15" fill="rgb(206,98,19)" fg:x="106" fg:w="3"/><text x="8.8819%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="8.6319%" y="645" width="0.2443%" height="15" fill="rgb(217,5,26)" fg:x="106" fg:w="3"/><text x="8.8819%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="8.7134%" y="629" width="0.1629%" height="15" fill="rgb(235,190,38)" fg:x="107" fg:w="2"/><text x="8.9634%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="8.7134%" y="613" width="0.1629%" height="15" fill="rgb(247,86,24)" fg:x="107" fg:w="2"/><text x="8.9634%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="8.7134%" y="597" width="0.1629%" height="15" fill="rgb(205,101,16)" fg:x="107" fg:w="2"/><text x="8.9634%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.7134%" y="581" width="0.1629%" height="15" fill="rgb(246,168,33)" fg:x="107" fg:w="2"/><text x="8.9634%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.7134%" y="565" width="0.1629%" height="15" fill="rgb(231,114,1)" fg:x="107" fg:w="2"/><text x="8.9634%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.7948%" y="549" width="0.0814%" height="15" fill="rgb(207,184,53)" fg:x="108" fg:w="1"/><text x="9.0448%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="8.6319%" y="709" width="0.4072%" height="15" fill="rgb(224,95,51)" fg:x="106" fg:w="5"/><text x="8.8819%" y="719.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="8.6319%" y="693" width="0.4072%" height="15" fill="rgb(212,188,45)" fg:x="106" fg:w="5"/><text x="8.8819%" y="703.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="8.8762%" y="677" width="0.1629%" height="15" fill="rgb(223,154,38)" fg:x="109" fg:w="2"/><text x="9.1262%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.9577%" y="661" width="0.0814%" height="15" fill="rgb(251,22,52)" fg:x="110" fg:w="1"/><text x="9.2077%" y="671.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="9.0391%" y="709" width="0.1629%" height="15" fill="rgb(229,209,22)" fg:x="111" fg:w="2"/><text x="9.2891%" y="719.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.1205%" y="693" width="0.0814%" height="15" fill="rgb(234,138,34)" fg:x="112" fg:w="1"/><text x="9.3705%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.65%)</title><rect x="8.6319%" y="773" width="0.6515%" height="15" fill="rgb(212,95,11)" fg:x="106" fg:w="8"/><text x="8.8819%" y="783.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.65%)</title><rect x="8.6319%" y="757" width="0.6515%" height="15" fill="rgb(240,179,47)" fg:x="106" fg:w="8"/><text x="8.8819%" y="767.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.65%)</title><rect x="8.6319%" y="741" width="0.6515%" height="15" fill="rgb(240,163,11)" fg:x="106" fg:w="8"/><text x="8.8819%" y="751.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.65%)</title><rect x="8.6319%" y="725" width="0.6515%" height="15" fill="rgb(236,37,12)" fg:x="106" fg:w="8"/><text x="8.8819%" y="735.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.2020%" y="709" width="0.0814%" height="15" fill="rgb(232,164,16)" fg:x="113" fg:w="1"/><text x="9.4520%" y="719.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.2020%" y="693" width="0.0814%" height="15" fill="rgb(244,205,15)" fg:x="113" fg:w="1"/><text x="9.4520%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.2020%" y="677" width="0.0814%" height="15" fill="rgb(223,117,47)" fg:x="113" fg:w="1"/><text x="9.4520%" y="687.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (34 samples, 2.77%)</title><rect x="6.5961%" y="821" width="2.7687%" height="15" fill="rgb(244,107,35)" fg:x="81" fg:w="34"/><text x="6.8461%" y="831.50">en..</text></g><g><title>engine::session::Session::check_for_changes (34 samples, 2.77%)</title><rect x="6.5961%" y="805" width="2.7687%" height="15" fill="rgb(205,140,8)" fg:x="81" fg:w="34"/><text x="6.8461%" y="815.50">en..</text></g><g><title>kernel::compare::any_entity_changes (24 samples, 1.95%)</title><rect x="7.4104%" y="789" width="1.9544%" height="15" fill="rgb(228,84,46)" fg:x="91" fg:w="24"/><text x="7.6604%" y="799.50">k..</text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="9.2834%" y="773" width="0.0814%" height="15" fill="rgb(254,188,9)" fg:x="114" fg:w="1"/><text x="9.5334%" y="783.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.2834%" y="757" width="0.0814%" height="15" fill="rgb(206,112,54)" fg:x="114" fg:w="1"/><text x="9.5334%" y="767.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.2834%" y="741" width="0.0814%" height="15" fill="rgb(216,84,49)" fg:x="114" fg:w="1"/><text x="9.5334%" y="751.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.2834%" y="725" width="0.0814%" height="15" fill="rgb(214,194,35)" fg:x="114" fg:w="1"/><text x="9.5334%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.2834%" y="709" width="0.0814%" height="15" fill="rgb(249,28,3)" fg:x="114" fg:w="1"/><text x="9.5334%" y="719.50"></text></g><g><title>engine::session::Session::save_entity_changes (38 samples, 3.09%)</title><rect x="6.3518%" y="837" width="3.0945%" height="15" fill="rgb(222,56,52)" fg:x="78" fg:w="38"/><text x="6.6018%" y="847.50">eng..</text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="9.3648%" y="821" width="0.0814%" height="15" fill="rgb(245,217,50)" fg:x="115" fg:w="1"/><text x="9.6148%" y="831.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="9.3648%" y="805" width="0.0814%" height="15" fill="rgb(213,201,24)" fg:x="115" fg:w="1"/><text x="9.6148%" y="815.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="9.3648%" y="789" width="0.0814%" height="15" fill="rgb(248,116,28)" fg:x="115" fg:w="1"/><text x="9.6148%" y="799.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="9.3648%" y="773" width="0.0814%" height="15" fill="rgb(219,72,43)" fg:x="115" fg:w="1"/><text x="9.6148%" y="783.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="9.3648%" y="757" width="0.0814%" height="15" fill="rgb(209,138,14)" fg:x="115" fg:w="1"/><text x="9.6148%" y="767.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.3648%" y="741" width="0.0814%" height="15" fill="rgb(222,18,33)" fg:x="115" fg:w="1"/><text x="9.6148%" y="751.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.3648%" y="725" width="0.0814%" height="15" fill="rgb(213,199,7)" fg:x="115" fg:w="1"/><text x="9.6148%" y="735.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="9.3648%" y="709" width="0.0814%" height="15" fill="rgb(250,110,10)" fg:x="115" fg:w="1"/><text x="9.6148%" y="719.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="9.3648%" y="693" width="0.0814%" height="15" fill="rgb(248,123,6)" fg:x="115" fg:w="1"/><text x="9.6148%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.3648%" y="677" width="0.0814%" height="15" fill="rgb(206,91,31)" fg:x="115" fg:w="1"/><text x="9.6148%" y="687.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.3648%" y="661" width="0.0814%" height="15" fill="rgb(211,154,13)" fg:x="115" fg:w="1"/><text x="9.6148%" y="671.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.3648%" y="645" width="0.0814%" height="15" fill="rgb(225,148,7)" fg:x="115" fg:w="1"/><text x="9.6148%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.3648%" y="629" width="0.0814%" height="15" fill="rgb(220,160,43)" fg:x="115" fg:w="1"/><text x="9.6148%" y="639.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="9.3648%" y="613" width="0.0814%" height="15" fill="rgb(213,52,39)" fg:x="115" fg:w="1"/><text x="9.6148%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="9.3648%" y="597" width="0.0814%" height="15" fill="rgb(243,137,7)" fg:x="115" fg:w="1"/><text x="9.6148%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="9.3648%" y="581" width="0.0814%" height="15" fill="rgb(230,79,13)" fg:x="115" fg:w="1"/><text x="9.6148%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="9.3648%" y="565" width="0.0814%" height="15" fill="rgb(247,105,23)" fg:x="115" fg:w="1"/><text x="9.6148%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="9.3648%" y="549" width="0.0814%" height="15" fill="rgb(223,179,41)" fg:x="115" fg:w="1"/><text x="9.6148%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="9.3648%" y="533" width="0.0814%" height="15" fill="rgb(218,9,34)" fg:x="115" fg:w="1"/><text x="9.6148%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.3648%" y="517" width="0.0814%" height="15" fill="rgb(222,106,8)" fg:x="115" fg:w="1"/><text x="9.6148%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="9.3648%" y="501" width="0.0814%" height="15" fill="rgb(211,220,0)" fg:x="115" fg:w="1"/><text x="9.6148%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.3648%" y="485" width="0.0814%" height="15" fill="rgb(229,52,16)" fg:x="115" fg:w="1"/><text x="9.6148%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="9.3648%" y="469" width="0.0814%" height="15" fill="rgb(212,155,18)" fg:x="115" fg:w="1"/><text x="9.6148%" y="479.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="9.3648%" y="453" width="0.0814%" height="15" fill="rgb(242,21,14)" fg:x="115" fg:w="1"/><text x="9.6148%" y="463.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="9.3648%" y="437" width="0.0814%" height="15" fill="rgb(222,19,48)" fg:x="115" fg:w="1"/><text x="9.6148%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.3648%" y="421" width="0.0814%" height="15" fill="rgb(232,45,27)" fg:x="115" fg:w="1"/><text x="9.6148%" y="431.50"></text></g><g><title>engine::session::Session::close (40 samples, 3.26%)</title><rect x="6.2704%" y="853" width="3.2573%" height="15" fill="rgb(249,103,42)" fg:x="77" fg:w="40"/><text x="6.5204%" y="863.50">eng..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="9.4463%" y="837" width="0.0814%" height="15" fill="rgb(246,81,33)" fg:x="116" fg:w="1"/><text x="9.6963%" y="847.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="9.4463%" y="821" width="0.0814%" height="15" fill="rgb(252,33,42)" fg:x="116" fg:w="1"/><text x="9.6963%" y="831.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="9.4463%" y="805" width="0.0814%" height="15" fill="rgb(209,212,41)" fg:x="116" fg:w="1"/><text x="9.6963%" y="815.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="9.4463%" y="789" width="0.0814%" height="15" fill="rgb(207,154,6)" fg:x="116" fg:w="1"/><text x="9.6963%" y="799.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="9.4463%" y="773" width="0.0814%" height="15" fill="rgb(223,64,47)" fg:x="116" fg:w="1"/><text x="9.6963%" y="783.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="9.6091%" y="757" width="0.0814%" height="15" fill="rgb(211,161,38)" fg:x="118" fg:w="1"/><text x="9.8591%" y="767.50"></text></g><g><title>&lt;kernel::model::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="9.6906%" y="661" width="0.0814%" height="15" fill="rgb(219,138,40)" fg:x="119" fg:w="1"/><text x="9.9406%" y="671.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="9.6906%" y="645" width="0.0814%" height="15" fill="rgb(241,228,46)" fg:x="119" fg:w="1"/><text x="9.9406%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.6906%" y="629" width="0.0814%" height="15" fill="rgb(223,209,38)" fg:x="119" fg:w="1"/><text x="9.9406%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.6906%" y="613" width="0.0814%" height="15" fill="rgb(236,164,45)" fg:x="119" fg:w="1"/><text x="9.9406%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.6906%" y="597" width="0.0814%" height="15" fill="rgb(231,15,5)" fg:x="119" fg:w="1"/><text x="9.9406%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::desc (1 samples, 0.08%)</title><rect x="9.7720%" y="661" width="0.0814%" height="15" fill="rgb(252,35,15)" fg:x="120" fg:w="1"/><text x="10.0220%" y="671.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="9.7720%" y="645" width="0.0814%" height="15" fill="rgb(248,181,18)" fg:x="120" fg:w="1"/><text x="10.0220%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.7720%" y="629" width="0.0814%" height="15" fill="rgb(233,39,42)" fg:x="120" fg:w="1"/><text x="10.0220%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="9.7720%" y="613" width="0.0814%" height="15" fill="rgb(238,110,33)" fg:x="120" fg:w="1"/><text x="10.0220%" y="623.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.9349%" y="533" width="0.0814%" height="15" fill="rgb(233,195,10)" fg:x="122" fg:w="1"/><text x="10.1849%" y="543.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (2 samples, 0.16%)</title><rect x="9.9349%" y="629" width="0.1629%" height="15" fill="rgb(254,105,3)" fg:x="122" fg:w="2"/><text x="10.1849%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (2 samples, 0.16%)</title><rect x="9.9349%" y="613" width="0.1629%" height="15" fill="rgb(221,225,9)" fg:x="122" fg:w="2"/><text x="10.1849%" y="623.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::Identity&gt;&gt;::following (2 samples, 0.16%)</title><rect x="9.9349%" y="597" width="0.1629%" height="15" fill="rgb(224,227,45)" fg:x="122" fg:w="2"/><text x="10.1849%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="9.9349%" y="581" width="0.1629%" height="15" fill="rgb(229,198,43)" fg:x="122" fg:w="2"/><text x="10.1849%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="9.9349%" y="565" width="0.1629%" height="15" fill="rgb(206,209,35)" fg:x="122" fg:w="2"/><text x="10.1849%" y="575.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="9.9349%" y="549" width="0.1629%" height="15" fill="rgb(245,195,53)" fg:x="122" fg:w="2"/><text x="10.1849%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="10.0163%" y="533" width="0.0814%" height="15" fill="rgb(240,92,26)" fg:x="123" fg:w="1"/><text x="10.2663%" y="543.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="10.0163%" y="517" width="0.0814%" height="15" fill="rgb(207,40,23)" fg:x="123" fg:w="1"/><text x="10.2663%" y="527.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="10.0163%" y="501" width="0.0814%" height="15" fill="rgb(223,111,35)" fg:x="123" fg:w="1"/><text x="10.2663%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.0163%" y="485" width="0.0814%" height="15" fill="rgb(229,147,28)" fg:x="123" fg:w="1"/><text x="10.2663%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.33%)</title><rect x="9.8534%" y="661" width="0.3257%" height="15" fill="rgb(211,29,28)" fg:x="121" fg:w="4"/><text x="10.1034%" y="671.50"></text></g><g><title>kernel::model::Entity::load_scope (4 samples, 0.33%)</title><rect x="9.8534%" y="645" width="0.3257%" height="15" fill="rgb(228,72,33)" fg:x="121" fg:w="4"/><text x="10.1034%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.0977%" y="629" width="0.0814%" height="15" fill="rgb(205,214,31)" fg:x="124" fg:w="1"/><text x="10.3477%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="10.2606%" y="613" width="0.2443%" height="15" fill="rgb(224,111,15)" fg:x="126" fg:w="3"/><text x="10.5106%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="10.2606%" y="597" width="0.2443%" height="15" fill="rgb(253,21,26)" fg:x="126" fg:w="3"/><text x="10.5106%" y="607.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="10.2606%" y="581" width="0.2443%" height="15" fill="rgb(245,139,43)" fg:x="126" fg:w="3"/><text x="10.5106%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="10.2606%" y="565" width="0.2443%" height="15" fill="rgb(252,170,7)" fg:x="126" fg:w="3"/><text x="10.5106%" y="575.50"></text></g><g><title>core::fmt::Formatter::pad (2 samples, 0.16%)</title><rect x="10.3420%" y="549" width="0.1629%" height="15" fill="rgb(231,118,14)" fg:x="127" fg:w="2"/><text x="10.5920%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.6678%" y="485" width="0.0814%" height="15" fill="rgb(238,83,0)" fg:x="131" fg:w="1"/><text x="10.9178%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.6678%" y="469" width="0.0814%" height="15" fill="rgb(221,39,39)" fg:x="131" fg:w="1"/><text x="10.9178%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="10.6678%" y="453" width="0.0814%" height="15" fill="rgb(222,119,46)" fg:x="131" fg:w="1"/><text x="10.9178%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="10.7492%" y="485" width="0.0814%" height="15" fill="rgb(222,165,49)" fg:x="132" fg:w="1"/><text x="10.9992%" y="495.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.41%)</title><rect x="10.5049%" y="517" width="0.4072%" height="15" fill="rgb(219,113,52)" fg:x="129" fg:w="5"/><text x="10.7549%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (4 samples, 0.33%)</title><rect x="10.5863%" y="501" width="0.3257%" height="15" fill="rgb(214,7,15)" fg:x="130" fg:w="4"/><text x="10.8363%" y="511.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="10.8306%" y="485" width="0.0814%" height="15" fill="rgb(235,32,4)" fg:x="133" fg:w="1"/><text x="11.0806%" y="495.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="10.8306%" y="469" width="0.0814%" height="15" fill="rgb(238,90,54)" fg:x="133" fg:w="1"/><text x="11.0806%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.9121%" y="485" width="0.0814%" height="15" fill="rgb(213,208,19)" fg:x="134" fg:w="1"/><text x="11.1621%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.9121%" y="469" width="0.0814%" height="15" fill="rgb(233,156,4)" fg:x="134" fg:w="1"/><text x="11.1621%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="10.9121%" y="453" width="0.0814%" height="15" fill="rgb(207,194,5)" fg:x="134" fg:w="1"/><text x="11.1621%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="10.9121%" y="501" width="0.1629%" height="15" fill="rgb(206,111,30)" fg:x="134" fg:w="2"/><text x="11.1621%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9935%" y="485" width="0.0814%" height="15" fill="rgb(243,70,54)" fg:x="135" fg:w="1"/><text x="11.2435%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9935%" y="469" width="0.0814%" height="15" fill="rgb(242,28,8)" fg:x="135" fg:w="1"/><text x="11.2435%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.65%)</title><rect x="10.5049%" y="581" width="0.6515%" height="15" fill="rgb(219,106,18)" fg:x="129" fg:w="8"/><text x="10.7549%" y="591.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.65%)</title><rect x="10.5049%" y="565" width="0.6515%" height="15" fill="rgb(244,222,10)" fg:x="129" fg:w="8"/><text x="10.7549%" y="575.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (8 samples, 0.65%)</title><rect x="10.5049%" y="549" width="0.6515%" height="15" fill="rgb(236,179,52)" fg:x="129" fg:w="8"/><text x="10.7549%" y="559.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (8 samples, 0.65%)</title><rect x="10.5049%" y="533" width="0.6515%" height="15" fill="rgb(213,23,39)" fg:x="129" fg:w="8"/><text x="10.7549%" y="543.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (3 samples, 0.24%)</title><rect x="10.9121%" y="517" width="0.2443%" height="15" fill="rgb(238,48,10)" fg:x="134" fg:w="3"/><text x="11.1621%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="11.0749%" y="501" width="0.0814%" height="15" fill="rgb(251,196,23)" fg:x="136" fg:w="1"/><text x="11.3249%" y="511.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="11.0749%" y="485" width="0.0814%" height="15" fill="rgb(250,152,24)" fg:x="136" fg:w="1"/><text x="11.3249%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.0749%" y="469" width="0.0814%" height="15" fill="rgb(209,150,17)" fg:x="136" fg:w="1"/><text x="11.3249%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="11.2378%" y="533" width="0.0814%" height="15" fill="rgb(234,202,34)" fg:x="138" fg:w="1"/><text x="11.4878%" y="543.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="11.1564%" y="549" width="0.2443%" height="15" fill="rgb(253,148,53)" fg:x="137" fg:w="3"/><text x="11.4064%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="11.3192%" y="533" width="0.0814%" height="15" fill="rgb(218,129,16)" fg:x="139" fg:w="1"/><text x="11.5692%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.3192%" y="517" width="0.0814%" height="15" fill="rgb(216,85,19)" fg:x="139" fg:w="1"/><text x="11.5692%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.4821%" y="517" width="0.0814%" height="15" fill="rgb(235,228,7)" fg:x="141" fg:w="1"/><text x="11.7321%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.4821%" y="501" width="0.0814%" height="15" fill="rgb(245,175,0)" fg:x="141" fg:w="1"/><text x="11.7321%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.49%)</title><rect x="11.1564%" y="581" width="0.4886%" height="15" fill="rgb(208,168,36)" fg:x="137" fg:w="6"/><text x="11.4064%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.49%)</title><rect x="11.1564%" y="565" width="0.4886%" height="15" fill="rgb(246,171,24)" fg:x="137" fg:w="6"/><text x="11.4064%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="11.4007%" y="549" width="0.2443%" height="15" fill="rgb(215,142,24)" fg:x="140" fg:w="3"/><text x="11.6507%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="11.4007%" y="533" width="0.2443%" height="15" fill="rgb(250,187,7)" fg:x="140" fg:w="3"/><text x="11.6507%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.5635%" y="517" width="0.0814%" height="15" fill="rgb(228,66,33)" fg:x="142" fg:w="1"/><text x="11.8135%" y="527.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (2 samples, 0.16%)</title><rect x="11.6450%" y="565" width="0.1629%" height="15" fill="rgb(234,215,21)" fg:x="143" fg:w="2"/><text x="11.8950%" y="575.50"></text></g><g><title>regex_automata::meta::regex::Config::nfa_size_limit (1 samples, 0.08%)</title><rect x="11.7264%" y="549" width="0.0814%" height="15" fill="rgb(222,191,20)" fg:x="144" fg:w="1"/><text x="11.9764%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (5 samples, 0.41%)</title><rect x="11.9707%" y="533" width="0.4072%" height="15" fill="rgb(245,79,54)" fg:x="147" fg:w="5"/><text x="12.2207%" y="543.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="11.9707%" y="517" width="0.4072%" height="15" fill="rgb(240,10,37)" fg:x="147" fg:w="5"/><text x="12.2207%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="12.2964%" y="501" width="0.0814%" height="15" fill="rgb(214,192,32)" fg:x="151" fg:w="1"/><text x="12.5464%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.2964%" y="485" width="0.0814%" height="15" fill="rgb(209,36,54)" fg:x="151" fg:w="1"/><text x="12.5464%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.2964%" y="469" width="0.0814%" height="15" fill="rgb(220,10,11)" fg:x="151" fg:w="1"/><text x="12.5464%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="12.2964%" y="453" width="0.0814%" height="15" fill="rgb(221,106,17)" fg:x="151" fg:w="1"/><text x="12.5464%" y="463.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (2 samples, 0.16%)</title><rect x="12.3779%" y="533" width="0.1629%" height="15" fill="rgb(251,142,44)" fg:x="152" fg:w="2"/><text x="12.6279%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.4593%" y="517" width="0.0814%" height="15" fill="rgb(238,13,15)" fg:x="153" fg:w="1"/><text x="12.7093%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.6221%" y="517" width="0.0814%" height="15" fill="rgb(208,107,27)" fg:x="155" fg:w="1"/><text x="12.8721%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (36 samples, 2.93%)</title><rect x="12.7036%" y="517" width="2.9316%" height="15" fill="rgb(205,136,37)" fg:x="156" fg:w="36"/><text x="12.9536%" y="527.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (36 samples, 2.93%)</title><rect x="12.7036%" y="501" width="2.9316%" height="15" fill="rgb(250,205,27)" fg:x="156" fg:w="36"/><text x="12.9536%" y="511.50">co..</text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="15.4723%" y="485" width="0.1629%" height="15" fill="rgb(210,80,43)" fg:x="190" fg:w="2"/><text x="15.7223%" y="495.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="15.6352%" y="517" width="0.0814%" height="15" fill="rgb(247,160,36)" fg:x="192" fg:w="1"/><text x="15.8852%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="16.0423%" y="469" width="0.0814%" height="15" fill="rgb(234,13,49)" fg:x="197" fg:w="1"/><text x="16.2923%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.0423%" y="453" width="0.0814%" height="15" fill="rgb(234,122,0)" fg:x="197" fg:w="1"/><text x="16.2923%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.0423%" y="437" width="0.0814%" height="15" fill="rgb(207,146,38)" fg:x="197" fg:w="1"/><text x="16.2923%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.49%)</title><rect x="15.7166%" y="501" width="0.4886%" height="15" fill="rgb(207,177,25)" fg:x="193" fg:w="6"/><text x="15.9666%" y="511.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="16.0423%" y="485" width="0.1629%" height="15" fill="rgb(211,178,42)" fg:x="197" fg:w="2"/><text x="16.2923%" y="495.50"></text></g><g><title>alloc::sync::arcinner_layout_for_value_layout (1 samples, 0.08%)</title><rect x="16.1238%" y="469" width="0.0814%" height="15" fill="rgb(230,69,54)" fg:x="198" fg:w="1"/><text x="16.3738%" y="479.50"></text></g><g><title>core::alloc::layout::Layout::extend (1 samples, 0.08%)</title><rect x="16.1238%" y="453" width="0.0814%" height="15" fill="rgb(214,135,41)" fg:x="198" fg:w="1"/><text x="16.3738%" y="463.50"></text></g><g><title>core::cmp::max (1 samples, 0.08%)</title><rect x="16.1238%" y="437" width="0.0814%" height="15" fill="rgb(237,67,25)" fg:x="198" fg:w="1"/><text x="16.3738%" y="447.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.08%)</title><rect x="16.1238%" y="421" width="0.0814%" height="15" fill="rgb(222,189,50)" fg:x="198" fg:w="1"/><text x="16.3738%" y="431.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.08%)</title><rect x="16.1238%" y="405" width="0.0814%" height="15" fill="rgb(245,148,34)" fg:x="198" fg:w="1"/><text x="16.3738%" y="415.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.57%)</title><rect x="15.7166%" y="517" width="0.5700%" height="15" fill="rgb(222,29,6)" fg:x="193" fg:w="7"/><text x="15.9666%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="16.2052%" y="501" width="0.0814%" height="15" fill="rgb(221,189,43)" fg:x="199" fg:w="1"/><text x="16.4552%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="16.2052%" y="485" width="0.0814%" height="15" fill="rgb(207,36,27)" fg:x="199" fg:w="1"/><text x="16.4552%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="16.2052%" y="469" width="0.0814%" height="15" fill="rgb(217,90,24)" fg:x="199" fg:w="1"/><text x="16.4552%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="16.2052%" y="453" width="0.0814%" height="15" fill="rgb(224,66,35)" fg:x="199" fg:w="1"/><text x="16.4552%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.2052%" y="437" width="0.0814%" height="15" fill="rgb(221,13,50)" fg:x="199" fg:w="1"/><text x="16.4552%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.2052%" y="421" width="0.0814%" height="15" fill="rgb(236,68,49)" fg:x="199" fg:w="1"/><text x="16.4552%" y="431.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="16.2866%" y="517" width="0.1629%" height="15" fill="rgb(229,146,28)" fg:x="200" fg:w="2"/><text x="16.5366%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="16.7752%" y="453" width="0.1629%" height="15" fill="rgb(225,31,38)" fg:x="206" fg:w="2"/><text x="17.0252%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="16.9381%" y="453" width="0.1629%" height="15" fill="rgb(250,208,3)" fg:x="208" fg:w="2"/><text x="17.1881%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.0195%" y="437" width="0.0814%" height="15" fill="rgb(246,54,23)" fg:x="209" fg:w="1"/><text x="17.2695%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.0195%" y="421" width="0.0814%" height="15" fill="rgb(243,76,11)" fg:x="209" fg:w="1"/><text x="17.2695%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.0195%" y="405" width="0.0814%" height="15" fill="rgb(245,21,50)" fg:x="209" fg:w="1"/><text x="17.2695%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.1824%" y="389" width="0.0814%" height="15" fill="rgb(228,9,43)" fg:x="211" fg:w="1"/><text x="17.4324%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="17.1824%" y="421" width="0.1629%" height="15" fill="rgb(208,100,47)" fg:x="211" fg:w="2"/><text x="17.4324%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="17.1824%" y="405" width="0.1629%" height="15" fill="rgb(232,26,8)" fg:x="211" fg:w="2"/><text x="17.4324%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.2638%" y="389" width="0.0814%" height="15" fill="rgb(216,166,38)" fg:x="212" fg:w="1"/><text x="17.5138%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.33%)</title><rect x="17.1010%" y="453" width="0.3257%" height="15" fill="rgb(251,202,51)" fg:x="210" fg:w="4"/><text x="17.3510%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="17.1824%" y="437" width="0.2443%" height="15" fill="rgb(254,216,34)" fg:x="211" fg:w="3"/><text x="17.4324%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="17.3453%" y="421" width="0.0814%" height="15" fill="rgb(251,32,27)" fg:x="213" fg:w="1"/><text x="17.5953%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.4267%" y="421" width="0.0814%" height="15" fill="rgb(208,127,28)" fg:x="214" fg:w="1"/><text x="17.6767%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (133 samples, 10.83%)</title><rect x="17.4267%" y="453" width="10.8306%" height="15" fill="rgb(224,137,22)" fg:x="214" fg:w="133"/><text x="17.6767%" y="463.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (133 samples, 10.83%)</title><rect x="17.4267%" y="437" width="10.8306%" height="15" fill="rgb(254,70,32)" fg:x="214" fg:w="133"/><text x="17.6767%" y="447.50">regex_automata::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (132 samples, 10.75%)</title><rect x="17.5081%" y="421" width="10.7492%" height="15" fill="rgb(229,75,37)" fg:x="215" fg:w="132"/><text x="17.7581%" y="431.50">alloc::vec::Vec&lt;..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.49%)</title><rect x="28.2573%" y="453" width="0.4886%" height="15" fill="rgb(252,64,23)" fg:x="347" fg:w="6"/><text x="28.5073%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="28.5831%" y="437" width="0.1629%" height="15" fill="rgb(232,162,48)" fg:x="351" fg:w="2"/><text x="28.8331%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (151 samples, 12.30%)</title><rect x="16.5309%" y="501" width="12.2964%" height="15" fill="rgb(246,160,12)" fg:x="203" fg:w="151"/><text x="16.7809%" y="511.50">&lt;core::iter::adapt..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (151 samples, 12.30%)</title><rect x="16.5309%" y="485" width="12.2964%" height="15" fill="rgb(247,166,0)" fg:x="203" fg:w="151"/><text x="16.7809%" y="495.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (151 samples, 12.30%)</title><rect x="16.5309%" y="469" width="12.2964%" height="15" fill="rgb(249,219,21)" fg:x="203" fg:w="151"/><text x="16.7809%" y="479.50">regex_automata::nf..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="28.7459%" y="453" width="0.0814%" height="15" fill="rgb(205,209,3)" fg:x="353" fg:w="1"/><text x="28.9959%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="28.8274%" y="501" width="0.0814%" height="15" fill="rgb(243,44,1)" fg:x="354" fg:w="1"/><text x="29.0774%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (8 samples, 0.65%)</title><rect x="29.3160%" y="485" width="0.6515%" height="15" fill="rgb(206,159,16)" fg:x="360" fg:w="8"/><text x="29.5660%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="29.8046%" y="469" width="0.1629%" height="15" fill="rgb(244,77,30)" fg:x="366" fg:w="2"/><text x="30.0546%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.8860%" y="453" width="0.0814%" height="15" fill="rgb(218,69,12)" fg:x="367" fg:w="1"/><text x="30.1360%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="29.8860%" y="437" width="0.0814%" height="15" fill="rgb(212,87,7)" fg:x="367" fg:w="1"/><text x="30.1360%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.2117%" y="469" width="0.0814%" height="15" fill="rgb(245,114,25)" fg:x="371" fg:w="1"/><text x="30.4617%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.2117%" y="453" width="0.0814%" height="15" fill="rgb(210,61,42)" fg:x="371" fg:w="1"/><text x="30.4617%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="30.2117%" y="437" width="0.0814%" height="15" fill="rgb(211,52,33)" fg:x="371" fg:w="1"/><text x="30.4617%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.41%)</title><rect x="29.9674%" y="485" width="0.4072%" height="15" fill="rgb(234,58,33)" fg:x="368" fg:w="5"/><text x="30.2174%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="30.2932%" y="469" width="0.0814%" height="15" fill="rgb(220,115,36)" fg:x="372" fg:w="1"/><text x="30.5432%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.2932%" y="453" width="0.0814%" height="15" fill="rgb(243,153,54)" fg:x="372" fg:w="1"/><text x="30.5432%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.2932%" y="437" width="0.0814%" height="15" fill="rgb(251,47,18)" fg:x="372" fg:w="1"/><text x="30.5432%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="30.3746%" y="485" width="0.2443%" height="15" fill="rgb(242,102,42)" fg:x="373" fg:w="3"/><text x="30.6246%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.7003%" y="469" width="0.0814%" height="15" fill="rgb(234,31,38)" fg:x="377" fg:w="1"/><text x="30.9503%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (178 samples, 14.50%)</title><rect x="16.4495%" y="517" width="14.4951%" height="15" fill="rgb(221,117,51)" fg:x="202" fg:w="178"/><text x="16.6995%" y="527.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (25 samples, 2.04%)</title><rect x="28.9088%" y="501" width="2.0358%" height="15" fill="rgb(212,20,18)" fg:x="355" fg:w="25"/><text x="29.1588%" y="511.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (4 samples, 0.33%)</title><rect x="30.6189%" y="485" width="0.3257%" height="15" fill="rgb(245,133,36)" fg:x="376" fg:w="4"/><text x="30.8689%" y="495.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (2 samples, 0.16%)</title><rect x="30.7818%" y="469" width="0.1629%" height="15" fill="rgb(212,6,19)" fg:x="378" fg:w="2"/><text x="31.0318%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="30.7818%" y="453" width="0.1629%" height="15" fill="rgb(218,1,36)" fg:x="378" fg:w="2"/><text x="31.0318%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.8632%" y="437" width="0.0814%" height="15" fill="rgb(246,84,54)" fg:x="379" fg:w="1"/><text x="31.1132%" y="447.50"></text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="30.9446%" y="517" width="0.0814%" height="15" fill="rgb(242,110,6)" fg:x="380" fg:w="1"/><text x="31.1946%" y="527.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="30.9446%" y="501" width="0.0814%" height="15" fill="rgb(214,47,5)" fg:x="380" fg:w="1"/><text x="31.1946%" y="511.50"></text></g><g><title>regex_automata::meta::strategy::new (228 samples, 18.57%)</title><rect x="12.5407%" y="533" width="18.5668%" height="15" fill="rgb(218,159,25)" fg:x="154" fg:w="228"/><text x="12.7907%" y="543.50">regex_automata::meta::strateg..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="31.0261%" y="517" width="0.0814%" height="15" fill="rgb(215,211,28)" fg:x="381" fg:w="1"/><text x="31.2761%" y="527.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="31.2704%" y="485" width="0.0814%" height="15" fill="rgb(238,59,32)" fg:x="384" fg:w="1"/><text x="31.5204%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.2704%" y="469" width="0.0814%" height="15" fill="rgb(226,82,3)" fg:x="384" fg:w="1"/><text x="31.5204%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.2704%" y="453" width="0.0814%" height="15" fill="rgb(240,164,32)" fg:x="384" fg:w="1"/><text x="31.5204%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (3 samples, 0.24%)</title><rect x="31.3518%" y="485" width="0.2443%" height="15" fill="rgb(232,46,7)" fg:x="385" fg:w="3"/><text x="31.6018%" y="495.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (2 samples, 0.16%)</title><rect x="31.4332%" y="469" width="0.1629%" height="15" fill="rgb(229,129,53)" fg:x="386" fg:w="2"/><text x="31.6832%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (2 samples, 0.16%)</title><rect x="31.4332%" y="453" width="0.1629%" height="15" fill="rgb(234,188,29)" fg:x="386" fg:w="2"/><text x="31.6832%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="31.5147%" y="437" width="0.0814%" height="15" fill="rgb(246,141,4)" fg:x="387" fg:w="1"/><text x="31.7647%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.57%)</title><rect x="31.2704%" y="501" width="0.5700%" height="15" fill="rgb(229,23,39)" fg:x="384" fg:w="7"/><text x="31.5204%" y="511.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="31.5961%" y="485" width="0.2443%" height="15" fill="rgb(206,12,3)" fg:x="388" fg:w="3"/><text x="31.8461%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="31.5961%" y="469" width="0.2443%" height="15" fill="rgb(252,226,20)" fg:x="388" fg:w="3"/><text x="31.8461%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="31.5961%" y="453" width="0.2443%" height="15" fill="rgb(216,123,35)" fg:x="388" fg:w="3"/><text x="31.8461%" y="463.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="31.5961%" y="437" width="0.2443%" height="15" fill="rgb(212,68,40)" fg:x="388" fg:w="3"/><text x="31.8461%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (10 samples, 0.81%)</title><rect x="31.1075%" y="533" width="0.8143%" height="15" fill="rgb(254,125,32)" fg:x="382" fg:w="10"/><text x="31.3575%" y="543.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (10 samples, 0.81%)</title><rect x="31.1075%" y="517" width="0.8143%" height="15" fill="rgb(253,97,22)" fg:x="382" fg:w="10"/><text x="31.3575%" y="527.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="31.8404%" y="501" width="0.0814%" height="15" fill="rgb(241,101,14)" fg:x="391" fg:w="1"/><text x="32.0904%" y="511.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="32.0033%" y="501" width="0.0814%" height="15" fill="rgb(238,103,29)" fg:x="393" fg:w="1"/><text x="32.2533%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.0033%" y="485" width="0.0814%" height="15" fill="rgb(233,195,47)" fg:x="393" fg:w="1"/><text x="32.2533%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.0033%" y="469" width="0.0814%" height="15" fill="rgb(246,218,30)" fg:x="393" fg:w="1"/><text x="32.2533%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.0033%" y="453" width="0.0814%" height="15" fill="rgb(219,145,47)" fg:x="393" fg:w="1"/><text x="32.2533%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="32.0847%" y="501" width="0.0814%" height="15" fill="rgb(243,12,26)" fg:x="394" fg:w="1"/><text x="32.3347%" y="511.50"></text></g><g><title>regex::regex::string::Regex::new (253 samples, 20.60%)</title><rect x="11.6450%" y="581" width="20.6026%" height="15" fill="rgb(214,87,16)" fg:x="143" fg:w="253"/><text x="11.8950%" y="591.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (251 samples, 20.44%)</title><rect x="11.8078%" y="565" width="20.4397%" height="15" fill="rgb(208,99,42)" fg:x="145" fg:w="251"/><text x="12.0578%" y="575.50">regex::builders::Builder::build_..</text></g><g><title>regex_automata::meta::regex::Builder::build (250 samples, 20.36%)</title><rect x="11.8893%" y="549" width="20.3583%" height="15" fill="rgb(253,99,2)" fg:x="146" fg:w="250"/><text x="12.1393%" y="559.50">regex_automata::meta::regex::Bui..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.33%)</title><rect x="31.9218%" y="533" width="0.3257%" height="15" fill="rgb(220,168,23)" fg:x="392" fg:w="4"/><text x="32.1718%" y="543.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.33%)</title><rect x="31.9218%" y="517" width="0.3257%" height="15" fill="rgb(242,38,24)" fg:x="392" fg:w="4"/><text x="32.1718%" y="527.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="32.1661%" y="501" width="0.0814%" height="15" fill="rgb(225,182,9)" fg:x="395" fg:w="1"/><text x="32.4161%" y="511.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="32.1661%" y="485" width="0.0814%" height="15" fill="rgb(243,178,37)" fg:x="395" fg:w="1"/><text x="32.4161%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.1661%" y="469" width="0.0814%" height="15" fill="rgb(232,139,19)" fg:x="395" fg:w="1"/><text x="32.4161%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.1661%" y="453" width="0.0814%" height="15" fill="rgb(225,201,24)" fg:x="395" fg:w="1"/><text x="32.4161%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="32.6547%" y="501" width="0.0814%" height="15" fill="rgb(221,47,46)" fg:x="401" fg:w="1"/><text x="32.9047%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.6547%" y="485" width="0.0814%" height="15" fill="rgb(249,23,13)" fg:x="401" fg:w="1"/><text x="32.9047%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.6547%" y="469" width="0.0814%" height="15" fill="rgb(219,9,5)" fg:x="401" fg:w="1"/><text x="32.9047%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.81%)</title><rect x="32.2476%" y="517" width="0.8143%" height="15" fill="rgb(254,171,16)" fg:x="396" fg:w="10"/><text x="32.4976%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.33%)</title><rect x="32.7362%" y="501" width="0.3257%" height="15" fill="rgb(230,171,20)" fg:x="402" fg:w="4"/><text x="32.9862%" y="511.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (278 samples, 22.64%)</title><rect x="10.5049%" y="597" width="22.6384%" height="15" fill="rgb(210,71,41)" fg:x="129" fg:w="278"/><text x="10.7549%" y="607.50">indefinite::helper::Helper::get_firs..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.90%)</title><rect x="32.2476%" y="581" width="0.8958%" height="15" fill="rgb(206,173,20)" fg:x="396" fg:w="11"/><text x="32.4976%" y="591.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.90%)</title><rect x="32.2476%" y="565" width="0.8958%" height="15" fill="rgb(233,88,34)" fg:x="396" fg:w="11"/><text x="32.4976%" y="575.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.90%)</title><rect x="32.2476%" y="549" width="0.8958%" height="15" fill="rgb(223,209,46)" fg:x="396" fg:w="11"/><text x="32.4976%" y="559.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (11 samples, 0.90%)</title><rect x="32.2476%" y="533" width="0.8958%" height="15" fill="rgb(250,43,18)" fg:x="396" fg:w="11"/><text x="32.4976%" y="543.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="33.0619%" y="517" width="0.0814%" height="15" fill="rgb(208,13,10)" fg:x="406" fg:w="1"/><text x="33.3119%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.0619%" y="501" width="0.0814%" height="15" fill="rgb(212,200,36)" fg:x="406" fg:w="1"/><text x="33.3119%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.0619%" y="485" width="0.0814%" height="15" fill="rgb(225,90,30)" fg:x="406" fg:w="1"/><text x="33.3119%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.0619%" y="469" width="0.0814%" height="15" fill="rgb(236,182,39)" fg:x="406" fg:w="1"/><text x="33.3119%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="33.2248%" y="549" width="0.0814%" height="15" fill="rgb(212,144,35)" fg:x="408" fg:w="1"/><text x="33.4748%" y="559.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="33.2248%" y="533" width="0.0814%" height="15" fill="rgb(228,63,44)" fg:x="408" fg:w="1"/><text x="33.4748%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="33.2248%" y="517" width="0.0814%" height="15" fill="rgb(228,109,6)" fg:x="408" fg:w="1"/><text x="33.4748%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="33.4691%" y="517" width="0.0814%" height="15" fill="rgb(238,117,24)" fg:x="411" fg:w="1"/><text x="33.7191%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.41%)</title><rect x="33.2248%" y="581" width="0.4072%" height="15" fill="rgb(242,26,26)" fg:x="408" fg:w="5"/><text x="33.4748%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.41%)</title><rect x="33.2248%" y="565" width="0.4072%" height="15" fill="rgb(221,92,48)" fg:x="408" fg:w="5"/><text x="33.4748%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.33%)</title><rect x="33.3062%" y="549" width="0.3257%" height="15" fill="rgb(209,209,32)" fg:x="409" fg:w="4"/><text x="33.5562%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (4 samples, 0.33%)</title><rect x="33.3062%" y="533" width="0.3257%" height="15" fill="rgb(221,70,22)" fg:x="409" fg:w="4"/><text x="33.5562%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.5505%" y="517" width="0.0814%" height="15" fill="rgb(248,145,5)" fg:x="412" fg:w="1"/><text x="33.8005%" y="527.50"></text></g><g><title>alloc::sync::arcinner_layout_for_value_layout (1 samples, 0.08%)</title><rect x="33.6319%" y="517" width="0.0814%" height="15" fill="rgb(226,116,26)" fg:x="413" fg:w="1"/><text x="33.8819%" y="527.50"></text></g><g><title>core::alloc::layout::Layout::extend (1 samples, 0.08%)</title><rect x="33.6319%" y="501" width="0.0814%" height="15" fill="rgb(244,5,17)" fg:x="413" fg:w="1"/><text x="33.8819%" y="511.50"></text></g><g><title>core::cmp::max (1 samples, 0.08%)</title><rect x="33.6319%" y="485" width="0.0814%" height="15" fill="rgb(252,159,33)" fg:x="413" fg:w="1"/><text x="33.8819%" y="495.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.08%)</title><rect x="33.6319%" y="469" width="0.0814%" height="15" fill="rgb(206,71,0)" fg:x="413" fg:w="1"/><text x="33.8819%" y="479.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.08%)</title><rect x="33.6319%" y="453" width="0.0814%" height="15" fill="rgb(233,118,54)" fg:x="413" fg:w="1"/><text x="33.8819%" y="463.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="33.6319%" y="565" width="0.1629%" height="15" fill="rgb(234,83,48)" fg:x="413" fg:w="2"/><text x="33.8819%" y="575.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="33.6319%" y="549" width="0.1629%" height="15" fill="rgb(228,3,54)" fg:x="413" fg:w="2"/><text x="33.8819%" y="559.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="33.6319%" y="533" width="0.1629%" height="15" fill="rgb(226,155,13)" fg:x="413" fg:w="2"/><text x="33.8819%" y="543.50"></text></g><g><title>regex_automata::util::determinize::set_lookbehind_from_start (1 samples, 0.08%)</title><rect x="33.7134%" y="517" width="0.0814%" height="15" fill="rgb(241,28,37)" fg:x="414" fg:w="1"/><text x="33.9634%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="34.5277%" y="485" width="0.2443%" height="15" fill="rgb(233,93,10)" fg:x="424" fg:w="3"/><text x="34.7777%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="34.6091%" y="469" width="0.1629%" height="15" fill="rgb(225,113,19)" fg:x="425" fg:w="2"/><text x="34.8591%" y="479.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="34.6091%" y="453" width="0.1629%" height="15" fill="rgb(241,2,18)" fg:x="425" fg:w="2"/><text x="34.8591%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="34.7720%" y="485" width="0.1629%" height="15" fill="rgb(228,207,21)" fg:x="427" fg:w="2"/><text x="35.0220%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="34.7720%" y="469" width="0.1629%" height="15" fill="rgb(213,211,35)" fg:x="427" fg:w="2"/><text x="35.0220%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="34.8534%" y="453" width="0.0814%" height="15" fill="rgb(209,83,10)" fg:x="428" fg:w="1"/><text x="35.1034%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.33%)</title><rect x="34.9349%" y="485" width="0.3257%" height="15" fill="rgb(209,164,1)" fg:x="429" fg:w="4"/><text x="35.1849%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (18 samples, 1.47%)</title><rect x="33.8762%" y="517" width="1.4658%" height="15" fill="rgb(213,184,43)" fg:x="416" fg:w="18"/><text x="34.1262%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (18 samples, 1.47%)</title><rect x="33.8762%" y="501" width="1.4658%" height="15" fill="rgb(231,61,34)" fg:x="416" fg:w="18"/><text x="34.1262%" y="511.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="35.2606%" y="485" width="0.0814%" height="15" fill="rgb(235,75,3)" fg:x="433" fg:w="1"/><text x="35.5106%" y="495.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (23 samples, 1.87%)</title><rect x="33.6319%" y="581" width="1.8730%" height="15" fill="rgb(220,106,47)" fg:x="413" fg:w="23"/><text x="33.8819%" y="591.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (21 samples, 1.71%)</title><rect x="33.7948%" y="565" width="1.7101%" height="15" fill="rgb(210,196,33)" fg:x="415" fg:w="21"/><text x="34.0448%" y="575.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (20 samples, 1.63%)</title><rect x="33.8762%" y="549" width="1.6287%" height="15" fill="rgb(229,154,42)" fg:x="416" fg:w="20"/><text x="34.1262%" y="559.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (20 samples, 1.63%)</title><rect x="33.8762%" y="533" width="1.6287%" height="15" fill="rgb(228,114,26)" fg:x="416" fg:w="20"/><text x="34.1262%" y="543.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.16%)</title><rect x="35.3420%" y="517" width="0.1629%" height="15" fill="rgb(208,144,1)" fg:x="434" fg:w="2"/><text x="35.5920%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="35.3420%" y="501" width="0.1629%" height="15" fill="rgb(239,112,37)" fg:x="434" fg:w="2"/><text x="35.5920%" y="511.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.6678%" y="501" width="0.0814%" height="15" fill="rgb(210,96,50)" fg:x="438" fg:w="1"/><text x="35.9178%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="35.6678%" y="533" width="0.1629%" height="15" fill="rgb(222,178,2)" fg:x="438" fg:w="2"/><text x="35.9178%" y="543.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="35.6678%" y="517" width="0.1629%" height="15" fill="rgb(226,74,18)" fg:x="438" fg:w="2"/><text x="35.9178%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="35.7492%" y="501" width="0.0814%" height="15" fill="rgb(225,67,54)" fg:x="439" fg:w="1"/><text x="35.9992%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="35.8306%" y="533" width="0.2443%" height="15" fill="rgb(251,92,32)" fg:x="440" fg:w="3"/><text x="36.0806%" y="543.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="35.8306%" y="517" width="0.2443%" height="15" fill="rgb(228,149,22)" fg:x="440" fg:w="3"/><text x="36.0806%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="35.8306%" y="501" width="0.2443%" height="15" fill="rgb(243,54,13)" fg:x="440" fg:w="3"/><text x="36.0806%" y="511.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="35.8306%" y="485" width="0.2443%" height="15" fill="rgb(243,180,28)" fg:x="440" fg:w="3"/><text x="36.0806%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="35.9121%" y="469" width="0.1629%" height="15" fill="rgb(208,167,24)" fg:x="441" fg:w="2"/><text x="36.1621%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="35.9935%" y="453" width="0.0814%" height="15" fill="rgb(245,73,45)" fg:x="442" fg:w="1"/><text x="36.2435%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.9935%" y="437" width="0.0814%" height="15" fill="rgb(237,203,48)" fg:x="442" fg:w="1"/><text x="36.2435%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.9935%" y="421" width="0.0814%" height="15" fill="rgb(211,197,16)" fg:x="442" fg:w="1"/><text x="36.2435%" y="431.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="36.4821%" y="501" width="0.1629%" height="15" fill="rgb(243,99,51)" fg:x="448" fg:w="2"/><text x="36.7321%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (26 samples, 2.12%)</title><rect x="36.4007%" y="517" width="2.1173%" height="15" fill="rgb(215,123,29)" fg:x="447" fg:w="26"/><text x="36.6507%" y="527.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (23 samples, 1.87%)</title><rect x="36.6450%" y="501" width="1.8730%" height="15" fill="rgb(239,186,37)" fg:x="450" fg:w="23"/><text x="36.8950%" y="511.50">c..</text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="38.3550%" y="485" width="0.1629%" height="15" fill="rgb(252,136,39)" fg:x="471" fg:w="2"/><text x="38.6050%" y="495.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.33%)</title><rect x="38.5179%" y="517" width="0.3257%" height="15" fill="rgb(223,213,32)" fg:x="473" fg:w="4"/><text x="38.7679%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="38.5993%" y="501" width="0.2443%" height="15" fill="rgb(233,115,5)" fg:x="474" fg:w="3"/><text x="38.8493%" y="511.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="38.9251%" y="485" width="0.1629%" height="15" fill="rgb(207,226,44)" fg:x="478" fg:w="2"/><text x="39.1751%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="38.9251%" y="469" width="0.1629%" height="15" fill="rgb(208,126,0)" fg:x="478" fg:w="2"/><text x="39.1751%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.0065%" y="453" width="0.0814%" height="15" fill="rgb(244,66,21)" fg:x="479" fg:w="1"/><text x="39.2565%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.0065%" y="437" width="0.0814%" height="15" fill="rgb(222,97,12)" fg:x="479" fg:w="1"/><text x="39.2565%" y="447.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (5 samples, 0.41%)</title><rect x="39.0879%" y="485" width="0.4072%" height="15" fill="rgb(219,213,19)" fg:x="480" fg:w="5"/><text x="39.3379%" y="495.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.33%)</title><rect x="39.1694%" y="469" width="0.3257%" height="15" fill="rgb(252,169,30)" fg:x="481" fg:w="4"/><text x="39.4194%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.4137%" y="453" width="0.0814%" height="15" fill="rgb(206,32,51)" fg:x="484" fg:w="1"/><text x="39.6637%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.4137%" y="437" width="0.0814%" height="15" fill="rgb(250,172,42)" fg:x="484" fg:w="1"/><text x="39.6637%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.4137%" y="421" width="0.0814%" height="15" fill="rgb(209,34,43)" fg:x="484" fg:w="1"/><text x="39.6637%" y="431.50"></text></g><g><title>&lt;aho_corasick::nfa::noncontiguous::NFA as aho_corasick::automaton::Automaton&gt;::prefilter (1 samples, 0.08%)</title><rect x="39.4951%" y="469" width="0.0814%" height="15" fill="rgb(223,11,35)" fg:x="485" fg:w="1"/><text x="39.7451%" y="479.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (8 samples, 0.65%)</title><rect x="39.5765%" y="469" width="0.6515%" height="15" fill="rgb(251,219,26)" fg:x="486" fg:w="8"/><text x="39.8265%" y="479.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (8 samples, 0.65%)</title><rect x="39.5765%" y="453" width="0.6515%" height="15" fill="rgb(231,119,3)" fg:x="486" fg:w="8"/><text x="39.8265%" y="463.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (10 samples, 0.81%)</title><rect x="39.4951%" y="485" width="0.8143%" height="15" fill="rgb(216,97,11)" fg:x="485" fg:w="10"/><text x="39.7451%" y="495.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="40.2280%" y="469" width="0.0814%" height="15" fill="rgb(223,59,9)" fg:x="494" fg:w="1"/><text x="40.4780%" y="479.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (21 samples, 1.71%)</title><rect x="38.8436%" y="517" width="1.7101%" height="15" fill="rgb(233,93,31)" fg:x="477" fg:w="21"/><text x="39.0936%" y="527.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (21 samples, 1.71%)</title><rect x="38.8436%" y="501" width="1.7101%" height="15" fill="rgb(239,81,33)" fg:x="477" fg:w="21"/><text x="39.0936%" y="511.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (3 samples, 0.24%)</title><rect x="40.3094%" y="485" width="0.2443%" height="15" fill="rgb(213,120,34)" fg:x="495" fg:w="3"/><text x="40.5594%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="40.6352%" y="485" width="0.1629%" height="15" fill="rgb(243,49,53)" fg:x="499" fg:w="2"/><text x="40.8852%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="40.6352%" y="469" width="0.1629%" height="15" fill="rgb(247,216,33)" fg:x="499" fg:w="2"/><text x="40.8852%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.7166%" y="453" width="0.0814%" height="15" fill="rgb(226,26,14)" fg:x="500" fg:w="1"/><text x="40.9666%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="40.7980%" y="469" width="0.1629%" height="15" fill="rgb(215,49,53)" fg:x="501" fg:w="2"/><text x="41.0480%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.8795%" y="453" width="0.0814%" height="15" fill="rgb(245,162,40)" fg:x="502" fg:w="1"/><text x="41.1295%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.8795%" y="437" width="0.0814%" height="15" fill="rgb(229,68,17)" fg:x="502" fg:w="1"/><text x="41.1295%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.8795%" y="421" width="0.0814%" height="15" fill="rgb(213,182,10)" fg:x="502" fg:w="1"/><text x="41.1295%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="40.9609%" y="421" width="0.0814%" height="15" fill="rgb(245,125,30)" fg:x="503" fg:w="1"/><text x="41.2109%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="41.0423%" y="421" width="0.0814%" height="15" fill="rgb(232,202,2)" fg:x="504" fg:w="1"/><text x="41.2923%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.0423%" y="405" width="0.0814%" height="15" fill="rgb(237,140,51)" fg:x="504" fg:w="1"/><text x="41.2923%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.0423%" y="389" width="0.0814%" height="15" fill="rgb(236,157,25)" fg:x="504" fg:w="1"/><text x="41.2923%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.0423%" y="373" width="0.0814%" height="15" fill="rgb(219,209,0)" fg:x="504" fg:w="1"/><text x="41.2923%" y="383.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.57%)</title><rect x="42.3453%" y="405" width="0.5700%" height="15" fill="rgb(240,116,54)" fg:x="520" fg:w="7"/><text x="42.5953%" y="415.50"></text></g><g><title>__libc_free (6 samples, 0.49%)</title><rect x="42.9153%" y="405" width="0.4886%" height="15" fill="rgb(216,10,36)" fg:x="527" fg:w="6"/><text x="43.1653%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (6 samples, 0.49%)</title><rect x="43.4039%" y="405" width="0.4886%" height="15" fill="rgb(222,72,44)" fg:x="533" fg:w="6"/><text x="43.6539%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="43.7296%" y="389" width="0.1629%" height="15" fill="rgb(232,159,9)" fg:x="537" fg:w="2"/><text x="43.9796%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.7296%" y="373" width="0.1629%" height="15" fill="rgb(210,39,32)" fg:x="537" fg:w="2"/><text x="43.9796%" y="383.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="43.7296%" y="357" width="0.1629%" height="15" fill="rgb(216,194,45)" fg:x="537" fg:w="2"/><text x="43.9796%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.2182%" y="373" width="0.0814%" height="15" fill="rgb(218,18,35)" fg:x="543" fg:w="1"/><text x="44.4682%" y="383.50"></text></g><g><title>__libc_malloc (4 samples, 0.33%)</title><rect x="44.3811%" y="341" width="0.3257%" height="15" fill="rgb(207,83,51)" fg:x="545" fg:w="4"/><text x="44.6311%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.65%)</title><rect x="44.2997%" y="373" width="0.6515%" height="15" fill="rgb(225,63,43)" fg:x="544" fg:w="8"/><text x="44.5497%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.57%)</title><rect x="44.3811%" y="357" width="0.5700%" height="15" fill="rgb(207,57,36)" fg:x="545" fg:w="7"/><text x="44.6311%" y="367.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="44.7068%" y="341" width="0.2443%" height="15" fill="rgb(216,99,33)" fg:x="549" fg:w="3"/><text x="44.9568%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.5212%" y="357" width="0.0814%" height="15" fill="rgb(225,42,16)" fg:x="559" fg:w="1"/><text x="45.7712%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (23 samples, 1.87%)</title><rect x="43.8925%" y="405" width="1.8730%" height="15" fill="rgb(220,201,45)" fg:x="539" fg:w="23"/><text x="44.1425%" y="415.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (22 samples, 1.79%)</title><rect x="43.9739%" y="389" width="1.7915%" height="15" fill="rgb(225,33,4)" fg:x="540" fg:w="22"/><text x="44.2239%" y="399.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (10 samples, 0.81%)</title><rect x="44.9511%" y="373" width="0.8143%" height="15" fill="rgb(224,33,50)" fg:x="552" fg:w="10"/><text x="45.2011%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="45.6026%" y="357" width="0.1629%" height="15" fill="rgb(246,198,51)" fg:x="560" fg:w="2"/><text x="45.8526%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="45.7655%" y="405" width="0.0814%" height="15" fill="rgb(205,22,4)" fg:x="562" fg:w="1"/><text x="46.0155%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="45.7655%" y="389" width="0.0814%" height="15" fill="rgb(206,3,8)" fg:x="562" fg:w="1"/><text x="46.0155%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="45.8469%" y="389" width="0.1629%" height="15" fill="rgb(251,23,15)" fg:x="563" fg:w="2"/><text x="46.0969%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="45.8469%" y="373" width="0.1629%" height="15" fill="rgb(252,88,28)" fg:x="563" fg:w="2"/><text x="46.0969%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="45.8469%" y="357" width="0.1629%" height="15" fill="rgb(212,127,14)" fg:x="563" fg:w="2"/><text x="46.0969%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="46.0098%" y="389" width="0.0814%" height="15" fill="rgb(247,145,37)" fg:x="565" fg:w="1"/><text x="46.2598%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.0098%" y="373" width="0.0814%" height="15" fill="rgb(209,117,53)" fg:x="565" fg:w="1"/><text x="46.2598%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.0098%" y="357" width="0.0814%" height="15" fill="rgb(212,90,42)" fg:x="565" fg:w="1"/><text x="46.2598%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.0912%" y="373" width="0.0814%" height="15" fill="rgb(218,164,37)" fg:x="566" fg:w="1"/><text x="46.3412%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (121 samples, 9.85%)</title><rect x="45.8469%" y="405" width="9.8534%" height="15" fill="rgb(246,65,34)" fg:x="563" fg:w="121"/><text x="46.0969%" y="415.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (118 samples, 9.61%)</title><rect x="46.0912%" y="389" width="9.6091%" height="15" fill="rgb(231,100,33)" fg:x="566" fg:w="118"/><text x="46.3412%" y="399.50">regex_automata..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (117 samples, 9.53%)</title><rect x="46.1726%" y="373" width="9.5277%" height="15" fill="rgb(228,126,14)" fg:x="567" fg:w="117"/><text x="46.4226%" y="383.50">alloc::vec::Ve..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (7 samples, 0.57%)</title><rect x="55.7003%" y="405" width="0.5700%" height="15" fill="rgb(215,173,21)" fg:x="684" fg:w="7"/><text x="55.9503%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (197 samples, 16.04%)</title><rect x="40.6352%" y="501" width="16.0423%" height="15" fill="rgb(210,6,40)" fg:x="499" fg:w="197"/><text x="40.8852%" y="511.50">&lt;core::iter::adapters::ma..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (195 samples, 15.88%)</title><rect x="40.7980%" y="485" width="15.8795%" height="15" fill="rgb(212,48,18)" fg:x="501" fg:w="195"/><text x="41.0480%" y="495.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (193 samples, 15.72%)</title><rect x="40.9609%" y="469" width="15.7166%" height="15" fill="rgb(230,214,11)" fg:x="503" fg:w="193"/><text x="41.2109%" y="479.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (193 samples, 15.72%)</title><rect x="40.9609%" y="453" width="15.7166%" height="15" fill="rgb(254,105,39)" fg:x="503" fg:w="193"/><text x="41.2109%" y="463.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (193 samples, 15.72%)</title><rect x="40.9609%" y="437" width="15.7166%" height="15" fill="rgb(245,158,5)" fg:x="503" fg:w="193"/><text x="41.2109%" y="447.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (191 samples, 15.55%)</title><rect x="41.1238%" y="421" width="15.5537%" height="15" fill="rgb(249,208,11)" fg:x="505" fg:w="191"/><text x="41.3738%" y="431.50">regex_automata::nfa::tho..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (5 samples, 0.41%)</title><rect x="56.2704%" y="405" width="0.4072%" height="15" fill="rgb(210,39,28)" fg:x="691" fg:w="5"/><text x="56.5204%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="56.4332%" y="389" width="0.2443%" height="15" fill="rgb(211,56,53)" fg:x="693" fg:w="3"/><text x="56.6832%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="56.4332%" y="373" width="0.2443%" height="15" fill="rgb(226,201,30)" fg:x="693" fg:w="3"/><text x="56.6832%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="56.5147%" y="357" width="0.1629%" height="15" fill="rgb(239,101,34)" fg:x="694" fg:w="2"/><text x="56.7647%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.8404%" y="485" width="0.0814%" height="15" fill="rgb(226,209,5)" fg:x="698" fg:w="1"/><text x="57.0904%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.49%)</title><rect x="57.5733%" y="469" width="0.4886%" height="15" fill="rgb(250,105,47)" fg:x="707" fg:w="6"/><text x="57.8233%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.41%)</title><rect x="57.6547%" y="453" width="0.4072%" height="15" fill="rgb(230,72,3)" fg:x="708" fg:w="5"/><text x="57.9047%" y="463.50"></text></g><g><title>realloc (4 samples, 0.33%)</title><rect x="57.7362%" y="437" width="0.3257%" height="15" fill="rgb(232,218,39)" fg:x="709" fg:w="4"/><text x="57.9862%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (15 samples, 1.22%)</title><rect x="56.9218%" y="485" width="1.2215%" height="15" fill="rgb(248,166,6)" fg:x="699" fg:w="15"/><text x="57.1718%" y="495.50"></text></g><g><title>regex_automata::util::look::LookMatcher::add_to_byteset (1 samples, 0.08%)</title><rect x="58.0619%" y="469" width="0.0814%" height="15" fill="rgb(247,89,20)" fg:x="713" fg:w="1"/><text x="58.3119%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.6319%" y="469" width="0.0814%" height="15" fill="rgb(248,130,54)" fg:x="720" fg:w="1"/><text x="58.8819%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.65%)</title><rect x="58.1433%" y="485" width="0.6515%" height="15" fill="rgb(234,196,4)" fg:x="714" fg:w="8"/><text x="58.3933%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.7134%" y="469" width="0.0814%" height="15" fill="rgb(250,143,31)" fg:x="721" fg:w="1"/><text x="58.9634%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.7134%" y="453" width="0.0814%" height="15" fill="rgb(211,110,34)" fg:x="721" fg:w="1"/><text x="58.9634%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="58.7948%" y="485" width="0.2443%" height="15" fill="rgb(215,124,48)" fg:x="722" fg:w="3"/><text x="59.0448%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.0391%" y="469" width="0.0814%" height="15" fill="rgb(216,46,13)" fg:x="725" fg:w="1"/><text x="59.2891%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.1205%" y="469" width="0.0814%" height="15" fill="rgb(205,184,25)" fg:x="726" fg:w="1"/><text x="59.3705%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.1205%" y="453" width="0.0814%" height="15" fill="rgb(228,1,10)" fg:x="726" fg:w="1"/><text x="59.3705%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.1205%" y="437" width="0.0814%" height="15" fill="rgb(213,116,27)" fg:x="726" fg:w="1"/><text x="59.3705%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (231 samples, 18.81%)</title><rect x="40.5537%" y="517" width="18.8111%" height="15" fill="rgb(241,95,50)" fg:x="498" fg:w="231"/><text x="40.8037%" y="527.50">regex_automata::nfa::thompson..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (33 samples, 2.69%)</title><rect x="56.6775%" y="501" width="2.6873%" height="15" fill="rgb(238,48,32)" fg:x="696" fg:w="33"/><text x="56.9275%" y="511.50">re..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (4 samples, 0.33%)</title><rect x="59.0391%" y="485" width="0.3257%" height="15" fill="rgb(235,113,49)" fg:x="725" fg:w="4"/><text x="59.2891%" y="495.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (2 samples, 0.16%)</title><rect x="59.2020%" y="469" width="0.1629%" height="15" fill="rgb(205,127,43)" fg:x="727" fg:w="2"/><text x="59.4520%" y="479.50"></text></g><g><title>regex_automata::meta::strategy::new (287 samples, 23.37%)</title><rect x="36.0749%" y="533" width="23.3713%" height="15" fill="rgb(250,162,2)" fg:x="443" fg:w="287"/><text x="36.3249%" y="543.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="59.3648%" y="517" width="0.0814%" height="15" fill="rgb(220,13,41)" fg:x="729" fg:w="1"/><text x="59.6148%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="59.3648%" y="501" width="0.0814%" height="15" fill="rgb(249,221,25)" fg:x="729" fg:w="1"/><text x="59.6148%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="59.3648%" y="485" width="0.0814%" height="15" fill="rgb(215,208,19)" fg:x="729" fg:w="1"/><text x="59.6148%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.3648%" y="469" width="0.0814%" height="15" fill="rgb(236,175,2)" fg:x="729" fg:w="1"/><text x="59.6148%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.3648%" y="453" width="0.0814%" height="15" fill="rgb(241,52,2)" fg:x="729" fg:w="1"/><text x="59.6148%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="59.5277%" y="485" width="0.1629%" height="15" fill="rgb(248,140,14)" fg:x="731" fg:w="2"/><text x="59.7777%" y="495.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (2 samples, 0.16%)</title><rect x="59.5277%" y="469" width="0.1629%" height="15" fill="rgb(253,22,42)" fg:x="731" fg:w="2"/><text x="59.7777%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="59.6091%" y="453" width="0.0814%" height="15" fill="rgb(234,61,47)" fg:x="732" fg:w="1"/><text x="59.8591%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="59.5277%" y="501" width="0.2443%" height="15" fill="rgb(208,226,15)" fg:x="731" fg:w="3"/><text x="59.7777%" y="511.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="59.6906%" y="485" width="0.0814%" height="15" fill="rgb(217,221,4)" fg:x="733" fg:w="1"/><text x="59.9406%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.6906%" y="469" width="0.0814%" height="15" fill="rgb(212,174,34)" fg:x="733" fg:w="1"/><text x="59.9406%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.6906%" y="453" width="0.0814%" height="15" fill="rgb(253,83,4)" fg:x="733" fg:w="1"/><text x="59.9406%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.6906%" y="437" width="0.0814%" height="15" fill="rgb(250,195,49)" fg:x="733" fg:w="1"/><text x="59.9406%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="59.7720%" y="501" width="0.0814%" height="15" fill="rgb(241,192,25)" fg:x="734" fg:w="1"/><text x="60.0220%" y="511.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.49%)</title><rect x="59.4463%" y="533" width="0.4886%" height="15" fill="rgb(208,124,10)" fg:x="730" fg:w="6"/><text x="59.6963%" y="543.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.49%)</title><rect x="59.4463%" y="517" width="0.4886%" height="15" fill="rgb(222,33,0)" fg:x="730" fg:w="6"/><text x="59.6963%" y="527.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="59.8534%" y="501" width="0.0814%" height="15" fill="rgb(234,209,28)" fg:x="735" fg:w="1"/><text x="60.1034%" y="511.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (8 samples, 0.65%)</title><rect x="59.9349%" y="501" width="0.6515%" height="15" fill="rgb(224,11,23)" fg:x="736" fg:w="8"/><text x="60.1849%" y="511.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (6 samples, 0.49%)</title><rect x="60.0977%" y="485" width="0.4886%" height="15" fill="rgb(232,99,1)" fg:x="738" fg:w="6"/><text x="60.3477%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.5049%" y="469" width="0.0814%" height="15" fill="rgb(237,95,45)" fg:x="743" fg:w="1"/><text x="60.7549%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.5049%" y="453" width="0.0814%" height="15" fill="rgb(208,109,11)" fg:x="743" fg:w="1"/><text x="60.7549%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="60.5863%" y="501" width="0.1629%" height="15" fill="rgb(216,190,48)" fg:x="744" fg:w="2"/><text x="60.8363%" y="511.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="60.6678%" y="485" width="0.0814%" height="15" fill="rgb(251,171,36)" fg:x="745" fg:w="1"/><text x="60.9178%" y="495.50"></text></g><g><title>indefinite::rules::number::Number::check (340 samples, 27.69%)</title><rect x="33.1433%" y="597" width="27.6873%" height="15" fill="rgb(230,62,22)" fg:x="407" fg:w="340"/><text x="33.3933%" y="607.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::new (311 samples, 25.33%)</title><rect x="35.5049%" y="581" width="25.3257%" height="15" fill="rgb(225,114,35)" fg:x="436" fg:w="311"/><text x="35.7549%" y="591.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (311 samples, 25.33%)</title><rect x="35.5049%" y="565" width="25.3257%" height="15" fill="rgb(215,118,42)" fg:x="436" fg:w="311"/><text x="35.7549%" y="575.50">regex::builders::Builder::build_one_stri..</text></g><g><title>regex_automata::meta::regex::Builder::build (310 samples, 25.24%)</title><rect x="35.5863%" y="549" width="25.2443%" height="15" fill="rgb(243,119,21)" fg:x="437" fg:w="310"/><text x="35.8363%" y="559.50">regex_automata::meta::regex::Builder::bu..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (11 samples, 0.90%)</title><rect x="59.9349%" y="533" width="0.8958%" height="15" fill="rgb(252,177,53)" fg:x="736" fg:w="11"/><text x="60.1849%" y="543.50"></text></g><g><title>regex_syntax::ast::visitor::visit (11 samples, 0.90%)</title><rect x="59.9349%" y="517" width="0.8958%" height="15" fill="rgb(237,209,29)" fg:x="736" fg:w="11"/><text x="60.1849%" y="527.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="60.7492%" y="501" width="0.0814%" height="15" fill="rgb(212,65,23)" fg:x="746" fg:w="1"/><text x="60.9992%" y="511.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="60.8306%" y="581" width="0.0814%" height="15" fill="rgb(230,222,46)" fg:x="747" fg:w="1"/><text x="61.0806%" y="591.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="60.9121%" y="565" width="0.0814%" height="15" fill="rgb(215,135,32)" fg:x="748" fg:w="1"/><text x="61.1621%" y="575.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="60.9121%" y="549" width="0.0814%" height="15" fill="rgb(246,101,22)" fg:x="748" fg:w="1"/><text x="61.1621%" y="559.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="60.9121%" y="533" width="0.0814%" height="15" fill="rgb(206,107,13)" fg:x="748" fg:w="1"/><text x="61.1621%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="60.9121%" y="517" width="0.0814%" height="15" fill="rgb(250,100,44)" fg:x="748" fg:w="1"/><text x="61.1621%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="60.9121%" y="501" width="0.0814%" height="15" fill="rgb(231,147,38)" fg:x="748" fg:w="1"/><text x="61.1621%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="60.9935%" y="549" width="0.0814%" height="15" fill="rgb(229,8,40)" fg:x="749" fg:w="1"/><text x="61.2435%" y="559.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="61.0749%" y="533" width="0.1629%" height="15" fill="rgb(221,135,30)" fg:x="750" fg:w="2"/><text x="61.3249%" y="543.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="61.0749%" y="517" width="0.1629%" height="15" fill="rgb(249,193,18)" fg:x="750" fg:w="2"/><text x="61.3249%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="61.0749%" y="501" width="0.1629%" height="15" fill="rgb(209,133,39)" fg:x="750" fg:w="2"/><text x="61.3249%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="61.2378%" y="517" width="0.0814%" height="15" fill="rgb(232,100,14)" fg:x="752" fg:w="1"/><text x="61.4878%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.2378%" y="501" width="0.0814%" height="15" fill="rgb(224,185,1)" fg:x="752" fg:w="1"/><text x="61.4878%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (4 samples, 0.33%)</title><rect x="61.3192%" y="517" width="0.3257%" height="15" fill="rgb(223,139,8)" fg:x="753" fg:w="4"/><text x="61.5692%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="61.4007%" y="501" width="0.2443%" height="15" fill="rgb(232,213,38)" fg:x="754" fg:w="3"/><text x="61.6507%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="61.4821%" y="485" width="0.1629%" height="15" fill="rgb(207,94,22)" fg:x="755" fg:w="2"/><text x="61.7321%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (9 samples, 0.73%)</title><rect x="60.9935%" y="565" width="0.7329%" height="15" fill="rgb(219,183,54)" fg:x="749" fg:w="9"/><text x="61.2435%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (8 samples, 0.65%)</title><rect x="61.0749%" y="549" width="0.6515%" height="15" fill="rgb(216,185,54)" fg:x="750" fg:w="8"/><text x="61.3249%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (6 samples, 0.49%)</title><rect x="61.2378%" y="533" width="0.4886%" height="15" fill="rgb(254,217,39)" fg:x="752" fg:w="6"/><text x="61.4878%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="61.6450%" y="517" width="0.0814%" height="15" fill="rgb(240,178,23)" fg:x="757" fg:w="1"/><text x="61.8950%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.6450%" y="501" width="0.0814%" height="15" fill="rgb(218,11,47)" fg:x="757" fg:w="1"/><text x="61.8950%" y="511.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="61.7264%" y="549" width="0.0814%" height="15" fill="rgb(218,51,51)" fg:x="758" fg:w="1"/><text x="61.9764%" y="559.50"></text></g><g><title>regex_automata::meta::regex::Config::utf8_empty (1 samples, 0.08%)</title><rect x="61.7264%" y="533" width="0.0814%" height="15" fill="rgb(238,126,27)" fg:x="758" fg:w="1"/><text x="61.9764%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="61.8893%" y="485" width="0.1629%" height="15" fill="rgb(249,202,22)" fg:x="760" fg:w="2"/><text x="62.1393%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="61.8893%" y="517" width="0.3257%" height="15" fill="rgb(254,195,49)" fg:x="760" fg:w="4"/><text x="62.1393%" y="527.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="61.8893%" y="501" width="0.3257%" height="15" fill="rgb(208,123,14)" fg:x="760" fg:w="4"/><text x="62.1393%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (2 samples, 0.16%)</title><rect x="62.0521%" y="485" width="0.1629%" height="15" fill="rgb(224,200,8)" fg:x="762" fg:w="2"/><text x="62.3021%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.2150%" y="517" width="0.0814%" height="15" fill="rgb(217,61,36)" fg:x="764" fg:w="1"/><text x="62.4650%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="62.2964%" y="517" width="0.1629%" height="15" fill="rgb(206,35,45)" fg:x="765" fg:w="2"/><text x="62.5464%" y="527.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="62.2964%" y="501" width="0.1629%" height="15" fill="rgb(217,65,33)" fg:x="765" fg:w="2"/><text x="62.5464%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="62.3779%" y="485" width="0.0814%" height="15" fill="rgb(222,158,48)" fg:x="766" fg:w="1"/><text x="62.6279%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="62.4593%" y="501" width="0.0814%" height="15" fill="rgb(254,2,54)" fg:x="767" fg:w="1"/><text x="62.7093%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="62.4593%" y="485" width="0.0814%" height="15" fill="rgb(250,143,38)" fg:x="767" fg:w="1"/><text x="62.7093%" y="495.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="62.5407%" y="501" width="0.0814%" height="15" fill="rgb(248,25,0)" fg:x="768" fg:w="1"/><text x="62.7907%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="62.5407%" y="485" width="0.0814%" height="15" fill="rgb(206,152,27)" fg:x="768" fg:w="1"/><text x="62.7907%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="62.5407%" y="469" width="0.0814%" height="15" fill="rgb(240,77,30)" fg:x="768" fg:w="1"/><text x="62.7907%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.7850%" y="469" width="0.0814%" height="15" fill="rgb(231,5,3)" fg:x="771" fg:w="1"/><text x="63.0350%" y="479.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.33%)</title><rect x="62.6221%" y="501" width="0.3257%" height="15" fill="rgb(207,226,32)" fg:x="769" fg:w="4"/><text x="62.8721%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="62.7036%" y="485" width="0.2443%" height="15" fill="rgb(222,207,47)" fg:x="770" fg:w="3"/><text x="62.9536%" y="495.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="62.8664%" y="469" width="0.0814%" height="15" fill="rgb(229,115,45)" fg:x="772" fg:w="1"/><text x="63.1164%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.8664%" y="453" width="0.0814%" height="15" fill="rgb(224,191,6)" fg:x="772" fg:w="1"/><text x="63.1164%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.8664%" y="437" width="0.0814%" height="15" fill="rgb(230,227,24)" fg:x="772" fg:w="1"/><text x="63.1164%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.8664%" y="421" width="0.0814%" height="15" fill="rgb(228,80,19)" fg:x="772" fg:w="1"/><text x="63.1164%" y="431.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="62.9479%" y="501" width="0.0814%" height="15" fill="rgb(247,229,0)" fg:x="773" fg:w="1"/><text x="63.1979%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="63.0293%" y="469" width="0.1629%" height="15" fill="rgb(237,194,15)" fg:x="774" fg:w="2"/><text x="63.2793%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="63.0293%" y="453" width="0.1629%" height="15" fill="rgb(219,203,20)" fg:x="774" fg:w="2"/><text x="63.2793%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.1107%" y="437" width="0.0814%" height="15" fill="rgb(234,128,8)" fg:x="775" fg:w="1"/><text x="63.3607%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="63.1922%" y="453" width="0.0814%" height="15" fill="rgb(248,202,8)" fg:x="776" fg:w="1"/><text x="63.4422%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="63.2736%" y="453" width="0.0814%" height="15" fill="rgb(206,104,37)" fg:x="777" fg:w="1"/><text x="63.5236%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.2736%" y="437" width="0.0814%" height="15" fill="rgb(223,8,27)" fg:x="777" fg:w="1"/><text x="63.5236%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.2736%" y="421" width="0.0814%" height="15" fill="rgb(216,217,28)" fg:x="777" fg:w="1"/><text x="63.5236%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.2736%" y="405" width="0.0814%" height="15" fill="rgb(249,199,1)" fg:x="777" fg:w="1"/><text x="63.5236%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.49%)</title><rect x="63.0293%" y="485" width="0.4886%" height="15" fill="rgb(240,85,17)" fg:x="774" fg:w="6"/><text x="63.2793%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (4 samples, 0.33%)</title><rect x="63.1922%" y="469" width="0.3257%" height="15" fill="rgb(206,108,45)" fg:x="776" fg:w="4"/><text x="63.4422%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="63.3550%" y="453" width="0.1629%" height="15" fill="rgb(245,210,41)" fg:x="778" fg:w="2"/><text x="63.6050%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="63.3550%" y="437" width="0.1629%" height="15" fill="rgb(206,13,37)" fg:x="778" fg:w="2"/><text x="63.6050%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="63.4365%" y="421" width="0.0814%" height="15" fill="rgb(250,61,18)" fg:x="779" fg:w="1"/><text x="63.6865%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.4365%" y="405" width="0.0814%" height="15" fill="rgb(235,172,48)" fg:x="779" fg:w="1"/><text x="63.6865%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.4365%" y="389" width="0.0814%" height="15" fill="rgb(249,201,17)" fg:x="779" fg:w="1"/><text x="63.6865%" y="399.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="63.4365%" y="373" width="0.0814%" height="15" fill="rgb(219,208,6)" fg:x="779" fg:w="1"/><text x="63.6865%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="63.4365%" y="357" width="0.0814%" height="15" fill="rgb(248,31,23)" fg:x="779" fg:w="1"/><text x="63.6865%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.5993%" y="469" width="0.0814%" height="15" fill="rgb(245,15,42)" fg:x="781" fg:w="1"/><text x="63.8493%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="63.6808%" y="469" width="0.1629%" height="15" fill="rgb(222,217,39)" fg:x="782" fg:w="2"/><text x="63.9308%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (14 samples, 1.14%)</title><rect x="63.0293%" y="501" width="1.1401%" height="15" fill="rgb(210,219,27)" fg:x="774" fg:w="14"/><text x="63.2793%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.65%)</title><rect x="63.5179%" y="485" width="0.6515%" height="15" fill="rgb(252,166,36)" fg:x="780" fg:w="8"/><text x="63.7679%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.33%)</title><rect x="63.8436%" y="469" width="0.3257%" height="15" fill="rgb(245,132,34)" fg:x="784" fg:w="4"/><text x="64.0936%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.0879%" y="453" width="0.0814%" height="15" fill="rgb(236,54,3)" fg:x="787" fg:w="1"/><text x="64.3379%" y="463.50"></text></g><g><title>regex_automata::meta::strategy::new (22 samples, 1.79%)</title><rect x="62.4593%" y="517" width="1.7915%" height="15" fill="rgb(241,173,43)" fg:x="767" fg:w="22"/><text x="62.7093%" y="527.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="64.1694%" y="501" width="0.0814%" height="15" fill="rgb(215,190,9)" fg:x="788" fg:w="1"/><text x="64.4194%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="64.1694%" y="485" width="0.0814%" height="15" fill="rgb(242,101,16)" fg:x="788" fg:w="1"/><text x="64.4194%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="64.1694%" y="469" width="0.0814%" height="15" fill="rgb(223,190,21)" fg:x="788" fg:w="1"/><text x="64.4194%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.1694%" y="453" width="0.0814%" height="15" fill="rgb(215,228,25)" fg:x="788" fg:w="1"/><text x="64.4194%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.1694%" y="437" width="0.0814%" height="15" fill="rgb(225,36,22)" fg:x="788" fg:w="1"/><text x="64.4194%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.1694%" y="421" width="0.0814%" height="15" fill="rgb(251,106,46)" fg:x="788" fg:w="1"/><text x="64.4194%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="64.4951%" y="485" width="0.0814%" height="15" fill="rgb(208,90,1)" fg:x="792" fg:w="1"/><text x="64.7451%" y="495.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="64.9837%" y="469" width="0.1629%" height="15" fill="rgb(243,10,4)" fg:x="798" fg:w="2"/><text x="65.2337%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.0651%" y="453" width="0.0814%" height="15" fill="rgb(212,137,27)" fg:x="799" fg:w="1"/><text x="65.3151%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.0651%" y="437" width="0.0814%" height="15" fill="rgb(231,220,49)" fg:x="799" fg:w="1"/><text x="65.3151%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.0651%" y="421" width="0.0814%" height="15" fill="rgb(237,96,20)" fg:x="799" fg:w="1"/><text x="65.3151%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="65.1466%" y="469" width="0.0814%" height="15" fill="rgb(239,229,30)" fg:x="800" fg:w="1"/><text x="65.3966%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (9 samples, 0.73%)</title><rect x="64.5765%" y="485" width="0.7329%" height="15" fill="rgb(219,65,33)" fg:x="793" fg:w="9"/><text x="64.8265%" y="495.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="65.2280%" y="469" width="0.0814%" height="15" fill="rgb(243,134,7)" fg:x="801" fg:w="1"/><text x="65.4780%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="65.2280%" y="453" width="0.0814%" height="15" fill="rgb(216,177,54)" fg:x="801" fg:w="1"/><text x="65.4780%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (16 samples, 1.30%)</title><rect x="64.2508%" y="517" width="1.3029%" height="15" fill="rgb(211,160,20)" fg:x="789" fg:w="16"/><text x="64.5008%" y="527.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (15 samples, 1.22%)</title><rect x="64.3322%" y="501" width="1.2215%" height="15" fill="rgb(239,85,39)" fg:x="790" fg:w="15"/><text x="64.5822%" y="511.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="65.3094%" y="485" width="0.2443%" height="15" fill="rgb(232,125,22)" fg:x="802" fg:w="3"/><text x="65.5594%" y="495.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (6 samples, 0.49%)</title><rect x="65.5537%" y="485" width="0.4886%" height="15" fill="rgb(244,57,34)" fg:x="805" fg:w="6"/><text x="65.8037%" y="495.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.33%)</title><rect x="65.7166%" y="469" width="0.3257%" height="15" fill="rgb(214,203,32)" fg:x="807" fg:w="4"/><text x="65.9666%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="65.8795%" y="453" width="0.1629%" height="15" fill="rgb(207,58,43)" fg:x="809" fg:w="2"/><text x="66.1295%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="65.8795%" y="437" width="0.1629%" height="15" fill="rgb(215,193,15)" fg:x="809" fg:w="2"/><text x="66.1295%" y="447.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="65.8795%" y="421" width="0.1629%" height="15" fill="rgb(232,15,44)" fg:x="809" fg:w="2"/><text x="66.1295%" y="431.50"></text></g><g><title>regex::regex::string::Regex::new (54 samples, 4.40%)</title><rect x="61.7264%" y="565" width="4.3974%" height="15" fill="rgb(212,3,48)" fg:x="758" fg:w="54"/><text x="61.9764%" y="575.50">regex..</text></g><g><title>regex::builders::Builder::build_one_string (53 samples, 4.32%)</title><rect x="61.8078%" y="549" width="4.3160%" height="15" fill="rgb(218,128,7)" fg:x="759" fg:w="53"/><text x="62.0578%" y="559.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (53 samples, 4.32%)</title><rect x="61.8078%" y="533" width="4.3160%" height="15" fill="rgb(226,216,39)" fg:x="759" fg:w="53"/><text x="62.0578%" y="543.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.57%)</title><rect x="65.5537%" y="517" width="0.5700%" height="15" fill="rgb(243,47,51)" fg:x="805" fg:w="7"/><text x="65.8037%" y="527.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.57%)</title><rect x="65.5537%" y="501" width="0.5700%" height="15" fill="rgb(241,183,40)" fg:x="805" fg:w="7"/><text x="65.8037%" y="511.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="66.0423%" y="485" width="0.0814%" height="15" fill="rgb(231,217,32)" fg:x="811" fg:w="1"/><text x="66.2923%" y="495.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="66.0423%" y="469" width="0.0814%" height="15" fill="rgb(229,61,38)" fg:x="811" fg:w="1"/><text x="66.2923%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.41%)</title><rect x="66.1238%" y="501" width="0.4072%" height="15" fill="rgb(225,210,5)" fg:x="812" fg:w="5"/><text x="66.3738%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="66.2866%" y="485" width="0.2443%" height="15" fill="rgb(231,79,45)" fg:x="814" fg:w="3"/><text x="66.5366%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.49%)</title><rect x="66.1238%" y="517" width="0.4886%" height="15" fill="rgb(224,100,7)" fg:x="812" fg:w="6"/><text x="66.3738%" y="527.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="66.5309%" y="501" width="0.0814%" height="15" fill="rgb(241,198,18)" fg:x="817" fg:w="1"/><text x="66.7809%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.5309%" y="485" width="0.0814%" height="15" fill="rgb(252,97,53)" fg:x="817" fg:w="1"/><text x="66.7809%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.5309%" y="469" width="0.0814%" height="15" fill="rgb(220,88,7)" fg:x="817" fg:w="1"/><text x="66.7809%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.5309%" y="453" width="0.0814%" height="15" fill="rgb(213,176,14)" fg:x="817" fg:w="1"/><text x="66.7809%" y="463.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (72 samples, 5.86%)</title><rect x="60.9121%" y="581" width="5.8632%" height="15" fill="rgb(246,73,7)" fg:x="748" fg:w="72"/><text x="61.1621%" y="591.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.65%)</title><rect x="66.1238%" y="565" width="0.6515%" height="15" fill="rgb(245,64,36)" fg:x="812" fg:w="8"/><text x="66.3738%" y="575.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.65%)</title><rect x="66.1238%" y="549" width="0.6515%" height="15" fill="rgb(245,80,10)" fg:x="812" fg:w="8"/><text x="66.3738%" y="559.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.65%)</title><rect x="66.1238%" y="533" width="0.6515%" height="15" fill="rgb(232,107,50)" fg:x="812" fg:w="8"/><text x="66.3738%" y="543.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.16%)</title><rect x="66.6124%" y="517" width="0.1629%" height="15" fill="rgb(253,3,0)" fg:x="818" fg:w="2"/><text x="66.8624%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="66.6124%" y="501" width="0.1629%" height="15" fill="rgb(212,99,53)" fg:x="818" fg:w="2"/><text x="66.8624%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.6938%" y="485" width="0.0814%" height="15" fill="rgb(249,111,54)" fg:x="819" fg:w="1"/><text x="66.9438%" y="495.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (702 samples, 57.17%)</title><rect x="9.6906%" y="677" width="57.1661%" height="15" fill="rgb(249,55,30)" fg:x="119" fg:w="702"/><text x="9.9406%" y="687.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity..</text></g><g><title>plugins_core::looking::model::qualify_name (696 samples, 56.68%)</title><rect x="10.1792%" y="661" width="56.6775%" height="15" fill="rgb(237,47,42)" fg:x="125" fg:w="696"/><text x="10.4292%" y="671.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (696 samples, 56.68%)</title><rect x="10.1792%" y="645" width="56.6775%" height="15" fill="rgb(211,20,18)" fg:x="125" fg:w="696"/><text x="10.4292%" y="655.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (696 samples, 56.68%)</title><rect x="10.1792%" y="629" width="56.6775%" height="15" fill="rgb(231,203,46)" fg:x="125" fg:w="696"/><text x="10.4292%" y="639.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (692 samples, 56.35%)</title><rect x="10.5049%" y="613" width="56.3518%" height="15" fill="rgb(237,142,3)" fg:x="129" fg:w="692"/><text x="10.7549%" y="623.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (74 samples, 6.03%)</title><rect x="60.8306%" y="597" width="6.0261%" height="15" fill="rgb(241,107,1)" fg:x="747" fg:w="74"/><text x="61.0806%" y="607.50">indefini..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="66.7752%" y="581" width="0.0814%" height="15" fill="rgb(229,83,13)" fg:x="820" fg:w="1"/><text x="67.0252%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.7752%" y="565" width="0.0814%" height="15" fill="rgb(241,91,40)" fg:x="820" fg:w="1"/><text x="67.0252%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="66.8567%" y="677" width="0.0814%" height="15" fill="rgb(225,3,45)" fg:x="821" fg:w="1"/><text x="67.1067%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="66.8567%" y="661" width="0.0814%" height="15" fill="rgb(244,223,14)" fg:x="821" fg:w="1"/><text x="67.1067%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.8567%" y="645" width="0.0814%" height="15" fill="rgb(224,124,37)" fg:x="821" fg:w="1"/><text x="67.1067%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="66.9381%" y="677" width="0.0814%" height="15" fill="rgb(251,171,30)" fg:x="822" fg:w="1"/><text x="67.1881%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="66.9381%" y="661" width="0.0814%" height="15" fill="rgb(236,46,54)" fg:x="822" fg:w="1"/><text x="67.1881%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.9381%" y="645" width="0.0814%" height="15" fill="rgb(245,213,5)" fg:x="822" fg:w="1"/><text x="67.1881%" y="655.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="67.0195%" y="645" width="0.0814%" height="15" fill="rgb(230,144,27)" fg:x="823" fg:w="1"/><text x="67.2695%" y="655.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="67.0195%" y="629" width="0.0814%" height="15" fill="rgb(220,86,6)" fg:x="823" fg:w="1"/><text x="67.2695%" y="639.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.0195%" y="613" width="0.0814%" height="15" fill="rgb(240,20,13)" fg:x="823" fg:w="1"/><text x="67.2695%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.0195%" y="597" width="0.0814%" height="15" fill="rgb(217,89,34)" fg:x="823" fg:w="1"/><text x="67.2695%" y="607.50"></text></g><g><title>kernel::model::EntityRef::into_entry (2 samples, 0.16%)</title><rect x="67.0195%" y="677" width="0.1629%" height="15" fill="rgb(229,13,5)" fg:x="823" fg:w="2"/><text x="67.2695%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="67.0195%" y="661" width="0.1629%" height="15" fill="rgb(244,67,35)" fg:x="823" fg:w="2"/><text x="67.2695%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="67.1010%" y="645" width="0.0814%" height="15" fill="rgb(221,40,2)" fg:x="824" fg:w="1"/><text x="67.3510%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.1010%" y="629" width="0.0814%" height="15" fill="rgb(237,157,21)" fg:x="824" fg:w="1"/><text x="67.3510%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.1010%" y="613" width="0.0814%" height="15" fill="rgb(222,94,11)" fg:x="824" fg:w="1"/><text x="67.3510%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.1010%" y="597" width="0.0814%" height="15" fill="rgb(249,113,6)" fg:x="824" fg:w="1"/><text x="67.3510%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.1010%" y="581" width="0.0814%" height="15" fill="rgb(238,137,36)" fg:x="824" fg:w="1"/><text x="67.3510%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.1010%" y="565" width="0.0814%" height="15" fill="rgb(210,102,26)" fg:x="824" fg:w="1"/><text x="67.3510%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.1010%" y="549" width="0.0814%" height="15" fill="rgb(218,30,30)" fg:x="824" fg:w="1"/><text x="67.3510%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.1010%" y="533" width="0.0814%" height="15" fill="rgb(214,67,26)" fg:x="824" fg:w="1"/><text x="67.3510%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.1010%" y="517" width="0.0814%" height="15" fill="rgb(251,9,53)" fg:x="824" fg:w="1"/><text x="67.3510%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.1010%" y="501" width="0.0814%" height="15" fill="rgb(228,204,25)" fg:x="824" fg:w="1"/><text x="67.3510%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.1010%" y="485" width="0.0814%" height="15" fill="rgb(207,153,8)" fg:x="824" fg:w="1"/><text x="67.3510%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.1010%" y="469" width="0.0814%" height="15" fill="rgb(242,9,16)" fg:x="824" fg:w="1"/><text x="67.3510%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.1010%" y="453" width="0.0814%" height="15" fill="rgb(217,211,10)" fg:x="824" fg:w="1"/><text x="67.3510%" y="463.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="67.1824%" y="645" width="0.0814%" height="15" fill="rgb(219,228,52)" fg:x="825" fg:w="1"/><text x="67.4324%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.1824%" y="629" width="0.0814%" height="15" fill="rgb(231,92,29)" fg:x="825" fg:w="1"/><text x="67.4324%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="67.1824%" y="613" width="0.0814%" height="15" fill="rgb(232,8,23)" fg:x="825" fg:w="1"/><text x="67.4324%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="67.1824%" y="597" width="0.0814%" height="15" fill="rgb(216,211,34)" fg:x="825" fg:w="1"/><text x="67.4324%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="67.2638%" y="645" width="0.0814%" height="15" fill="rgb(236,151,0)" fg:x="826" fg:w="1"/><text x="67.5138%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="67.2638%" y="629" width="0.0814%" height="15" fill="rgb(209,168,3)" fg:x="826" fg:w="1"/><text x="67.5138%" y="639.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (710 samples, 57.82%)</title><rect x="9.6906%" y="709" width="57.8176%" height="15" fill="rgb(208,129,28)" fg:x="119" fg:w="710"/><text x="9.9406%" y="719.50">&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (710 samples, 57.82%)</title><rect x="9.6906%" y="693" width="57.8176%" height="15" fill="rgb(229,78,22)" fg:x="119" fg:w="710"/><text x="9.9406%" y="703.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.33%)</title><rect x="67.1824%" y="677" width="0.3257%" height="15" fill="rgb(228,187,13)" fg:x="825" fg:w="4"/><text x="67.4324%" y="687.50"></text></g><g><title>kernel::model::Entity::load_scope (4 samples, 0.33%)</title><rect x="67.1824%" y="661" width="0.3257%" height="15" fill="rgb(240,119,24)" fg:x="825" fg:w="4"/><text x="67.4324%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="67.3453%" y="645" width="0.1629%" height="15" fill="rgb(209,194,42)" fg:x="827" fg:w="2"/><text x="67.5953%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="67.3453%" y="629" width="0.1629%" height="15" fill="rgb(247,200,46)" fg:x="827" fg:w="2"/><text x="67.5953%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="67.4267%" y="613" width="0.0814%" height="15" fill="rgb(218,76,16)" fg:x="828" fg:w="1"/><text x="67.6767%" y="623.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="67.4267%" y="597" width="0.0814%" height="15" fill="rgb(225,21,48)" fg:x="828" fg:w="1"/><text x="67.6767%" y="607.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="67.4267%" y="581" width="0.0814%" height="15" fill="rgb(239,223,50)" fg:x="828" fg:w="1"/><text x="67.6767%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.4267%" y="565" width="0.0814%" height="15" fill="rgb(244,45,21)" fg:x="828" fg:w="1"/><text x="67.6767%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.4267%" y="549" width="0.0814%" height="15" fill="rgb(232,33,43)" fg:x="828" fg:w="1"/><text x="67.6767%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="67.5081%" y="645" width="0.1629%" height="15" fill="rgb(209,8,3)" fg:x="829" fg:w="2"/><text x="67.7581%" y="655.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="67.5081%" y="629" width="0.1629%" height="15" fill="rgb(214,25,53)" fg:x="829" fg:w="2"/><text x="67.7581%" y="639.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="67.5081%" y="613" width="0.1629%" height="15" fill="rgb(254,186,54)" fg:x="829" fg:w="2"/><text x="67.7581%" y="623.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="67.5081%" y="597" width="0.1629%" height="15" fill="rgb(208,174,49)" fg:x="829" fg:w="2"/><text x="67.7581%" y="607.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="67.5081%" y="581" width="0.1629%" height="15" fill="rgb(233,191,51)" fg:x="829" fg:w="2"/><text x="67.7581%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="67.5081%" y="565" width="0.1629%" height="15" fill="rgb(222,134,10)" fg:x="829" fg:w="2"/><text x="67.7581%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="67.5081%" y="549" width="0.1629%" height="15" fill="rgb(230,226,20)" fg:x="829" fg:w="2"/><text x="67.7581%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="67.5081%" y="533" width="0.1629%" height="15" fill="rgb(251,111,25)" fg:x="829" fg:w="2"/><text x="67.7581%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="67.5081%" y="517" width="0.1629%" height="15" fill="rgb(224,40,46)" fg:x="829" fg:w="2"/><text x="67.7581%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="67.5081%" y="501" width="0.1629%" height="15" fill="rgb(236,108,47)" fg:x="829" fg:w="2"/><text x="67.7581%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="67.5081%" y="485" width="0.1629%" height="15" fill="rgb(234,93,0)" fg:x="829" fg:w="2"/><text x="67.7581%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.5081%" y="469" width="0.1629%" height="15" fill="rgb(224,213,32)" fg:x="829" fg:w="2"/><text x="67.7581%" y="479.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="67.5081%" y="453" width="0.1629%" height="15" fill="rgb(251,11,48)" fg:x="829" fg:w="2"/><text x="67.7581%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="67.5081%" y="437" width="0.1629%" height="15" fill="rgb(236,173,5)" fg:x="829" fg:w="2"/><text x="67.7581%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.5896%" y="421" width="0.0814%" height="15" fill="rgb(230,95,12)" fg:x="830" fg:w="1"/><text x="67.8396%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.5896%" y="405" width="0.0814%" height="15" fill="rgb(232,209,1)" fg:x="830" fg:w="1"/><text x="67.8396%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.5896%" y="389" width="0.0814%" height="15" fill="rgb(232,6,1)" fg:x="830" fg:w="1"/><text x="67.8396%" y="399.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (3 samples, 0.24%)</title><rect x="67.5081%" y="693" width="0.2443%" height="15" fill="rgb(210,224,50)" fg:x="829" fg:w="3"/><text x="67.7581%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="67.5081%" y="677" width="0.2443%" height="15" fill="rgb(228,127,35)" fg:x="829" fg:w="3"/><text x="67.7581%" y="687.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="67.5081%" y="661" width="0.2443%" height="15" fill="rgb(245,102,45)" fg:x="829" fg:w="3"/><text x="67.7581%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="67.6710%" y="645" width="0.0814%" height="15" fill="rgb(214,1,49)" fg:x="831" fg:w="1"/><text x="67.9210%" y="655.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (4 samples, 0.33%)</title><rect x="67.5081%" y="709" width="0.3257%" height="15" fill="rgb(226,163,40)" fg:x="829" fg:w="4"/><text x="67.7581%" y="719.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="67.7524%" y="693" width="0.0814%" height="15" fill="rgb(239,212,28)" fg:x="832" fg:w="1"/><text x="68.0024%" y="703.50"></text></g><g><title>&lt;kernel::model::EntityKey as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.08%)</title><rect x="67.7524%" y="677" width="0.0814%" height="15" fill="rgb(220,20,13)" fg:x="832" fg:w="1"/><text x="68.0024%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="67.9153%" y="613" width="0.1629%" height="15" fill="rgb(210,164,35)" fg:x="834" fg:w="2"/><text x="68.1653%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="67.9153%" y="597" width="0.1629%" height="15" fill="rgb(248,109,41)" fg:x="834" fg:w="2"/><text x="68.1653%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.0782%" y="613" width="0.0814%" height="15" fill="rgb(238,23,50)" fg:x="836" fg:w="1"/><text x="68.3282%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="67.9153%" y="645" width="0.3257%" height="15" fill="rgb(211,48,49)" fg:x="834" fg:w="4"/><text x="68.1653%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="67.9153%" y="629" width="0.3257%" height="15" fill="rgb(223,36,21)" fg:x="834" fg:w="4"/><text x="68.1653%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="68.1596%" y="613" width="0.0814%" height="15" fill="rgb(207,123,46)" fg:x="837" fg:w="1"/><text x="68.4096%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.1596%" y="597" width="0.0814%" height="15" fill="rgb(240,218,32)" fg:x="837" fg:w="1"/><text x="68.4096%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (7 samples, 0.57%)</title><rect x="67.8339%" y="677" width="0.5700%" height="15" fill="rgb(252,5,43)" fg:x="833" fg:w="7"/><text x="68.0839%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.57%)</title><rect x="67.8339%" y="661" width="0.5700%" height="15" fill="rgb(252,84,19)" fg:x="833" fg:w="7"/><text x="68.0839%" y="671.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="68.2410%" y="645" width="0.1629%" height="15" fill="rgb(243,152,39)" fg:x="838" fg:w="2"/><text x="68.4910%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.4039%" y="645" width="0.0814%" height="15" fill="rgb(234,160,15)" fg:x="840" fg:w="1"/><text x="68.6539%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.4039%" y="629" width="0.0814%" height="15" fill="rgb(237,34,20)" fg:x="840" fg:w="1"/><text x="68.6539%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="68.5668%" y="565" width="0.1629%" height="15" fill="rgb(229,97,13)" fg:x="842" fg:w="2"/><text x="68.8168%" y="575.50"></text></g><g><title>kernel::model::EntityRef::into_entry (2 samples, 0.16%)</title><rect x="68.5668%" y="549" width="0.1629%" height="15" fill="rgb(234,71,50)" fg:x="842" fg:w="2"/><text x="68.8168%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="68.5668%" y="533" width="0.1629%" height="15" fill="rgb(253,155,4)" fg:x="842" fg:w="2"/><text x="68.8168%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="68.5668%" y="517" width="0.1629%" height="15" fill="rgb(222,185,37)" fg:x="842" fg:w="2"/><text x="68.8168%" y="527.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="68.5668%" y="501" width="0.1629%" height="15" fill="rgb(251,177,13)" fg:x="842" fg:w="2"/><text x="68.8168%" y="511.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="68.5668%" y="485" width="0.1629%" height="15" fill="rgb(250,179,40)" fg:x="842" fg:w="2"/><text x="68.8168%" y="495.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="68.5668%" y="469" width="0.1629%" height="15" fill="rgb(242,44,2)" fg:x="842" fg:w="2"/><text x="68.8168%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="68.5668%" y="453" width="0.1629%" height="15" fill="rgb(216,177,13)" fg:x="842" fg:w="2"/><text x="68.8168%" y="463.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="68.5668%" y="437" width="0.1629%" height="15" fill="rgb(216,106,43)" fg:x="842" fg:w="2"/><text x="68.8168%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="68.5668%" y="421" width="0.1629%" height="15" fill="rgb(216,183,2)" fg:x="842" fg:w="2"/><text x="68.8168%" y="431.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="68.5668%" y="405" width="0.1629%" height="15" fill="rgb(249,75,3)" fg:x="842" fg:w="2"/><text x="68.8168%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="68.5668%" y="389" width="0.1629%" height="15" fill="rgb(219,67,39)" fg:x="842" fg:w="2"/><text x="68.8168%" y="399.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="68.5668%" y="373" width="0.1629%" height="15" fill="rgb(253,228,2)" fg:x="842" fg:w="2"/><text x="68.8168%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="68.6482%" y="357" width="0.0814%" height="15" fill="rgb(235,138,27)" fg:x="843" fg:w="1"/><text x="68.8982%" y="367.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="68.6482%" y="341" width="0.0814%" height="15" fill="rgb(236,97,51)" fg:x="843" fg:w="1"/><text x="68.8982%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="68.6482%" y="325" width="0.0814%" height="15" fill="rgb(240,80,30)" fg:x="843" fg:w="1"/><text x="68.8982%" y="335.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="68.6482%" y="309" width="0.0814%" height="15" fill="rgb(230,178,19)" fg:x="843" fg:w="1"/><text x="68.8982%" y="319.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="68.6482%" y="293" width="0.0814%" height="15" fill="rgb(210,190,27)" fg:x="843" fg:w="1"/><text x="68.8982%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.6482%" y="277" width="0.0814%" height="15" fill="rgb(222,107,31)" fg:x="843" fg:w="1"/><text x="68.8982%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.6482%" y="261" width="0.0814%" height="15" fill="rgb(216,127,34)" fg:x="843" fg:w="1"/><text x="68.8982%" y="271.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="68.6482%" y="245" width="0.0814%" height="15" fill="rgb(234,116,52)" fg:x="843" fg:w="1"/><text x="68.8982%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="68.6482%" y="229" width="0.0814%" height="15" fill="rgb(222,124,15)" fg:x="843" fg:w="1"/><text x="68.8982%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="68.6482%" y="213" width="0.0814%" height="15" fill="rgb(231,179,28)" fg:x="843" fg:w="1"/><text x="68.8982%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="68.6482%" y="197" width="0.0814%" height="15" fill="rgb(226,93,45)" fg:x="843" fg:w="1"/><text x="68.8982%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="68.6482%" y="181" width="0.0814%" height="15" fill="rgb(215,8,51)" fg:x="843" fg:w="1"/><text x="68.8982%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="68.6482%" y="165" width="0.0814%" height="15" fill="rgb(223,106,5)" fg:x="843" fg:w="1"/><text x="68.8982%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.6482%" y="149" width="0.0814%" height="15" fill="rgb(250,191,5)" fg:x="843" fg:w="1"/><text x="68.8982%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="68.6482%" y="133" width="0.0814%" height="15" fill="rgb(242,132,44)" fg:x="843" fg:w="1"/><text x="68.8982%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.6482%" y="117" width="0.0814%" height="15" fill="rgb(251,152,29)" fg:x="843" fg:w="1"/><text x="68.8982%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="68.6482%" y="101" width="0.0814%" height="15" fill="rgb(218,179,5)" fg:x="843" fg:w="1"/><text x="68.8982%" y="111.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="68.6482%" y="85" width="0.0814%" height="15" fill="rgb(227,67,19)" fg:x="843" fg:w="1"/><text x="68.8982%" y="95.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="68.6482%" y="69" width="0.0814%" height="15" fill="rgb(233,119,31)" fg:x="843" fg:w="1"/><text x="68.8982%" y="79.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="68.6482%" y="53" width="0.0814%" height="15" fill="rgb(241,120,22)" fg:x="843" fg:w="1"/><text x="68.8982%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="68.6482%" y="37" width="0.0814%" height="15" fill="rgb(224,102,30)" fg:x="843" fg:w="1"/><text x="68.8982%" y="47.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="68.7296%" y="501" width="0.0814%" height="15" fill="rgb(210,164,37)" fg:x="844" fg:w="1"/><text x="68.9796%" y="511.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="68.7296%" y="485" width="0.0814%" height="15" fill="rgb(226,191,16)" fg:x="844" fg:w="1"/><text x="68.9796%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="68.7296%" y="469" width="0.0814%" height="15" fill="rgb(214,40,45)" fg:x="844" fg:w="1"/><text x="68.9796%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="68.7296%" y="453" width="0.0814%" height="15" fill="rgb(244,29,26)" fg:x="844" fg:w="1"/><text x="68.9796%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="68.7296%" y="437" width="0.0814%" height="15" fill="rgb(216,16,5)" fg:x="844" fg:w="1"/><text x="68.9796%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.7296%" y="421" width="0.0814%" height="15" fill="rgb(249,76,35)" fg:x="844" fg:w="1"/><text x="68.9796%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.7296%" y="405" width="0.0814%" height="15" fill="rgb(207,11,44)" fg:x="844" fg:w="1"/><text x="68.9796%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.7296%" y="389" width="0.0814%" height="15" fill="rgb(228,190,49)" fg:x="844" fg:w="1"/><text x="68.9796%" y="399.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.41%)</title><rect x="68.4853%" y="581" width="0.4072%" height="15" fill="rgb(214,173,12)" fg:x="841" fg:w="5"/><text x="68.7353%" y="591.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="68.7296%" y="565" width="0.1629%" height="15" fill="rgb(218,26,35)" fg:x="844" fg:w="2"/><text x="68.9796%" y="575.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (2 samples, 0.16%)</title><rect x="68.7296%" y="549" width="0.1629%" height="15" fill="rgb(220,200,19)" fg:x="844" fg:w="2"/><text x="68.9796%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (2 samples, 0.16%)</title><rect x="68.7296%" y="533" width="0.1629%" height="15" fill="rgb(239,95,49)" fg:x="844" fg:w="2"/><text x="68.9796%" y="543.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="68.7296%" y="517" width="0.1629%" height="15" fill="rgb(235,85,53)" fg:x="844" fg:w="2"/><text x="68.9796%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.8111%" y="501" width="0.0814%" height="15" fill="rgb(233,133,31)" fg:x="845" fg:w="1"/><text x="69.0611%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.8925%" y="549" width="0.1629%" height="15" fill="rgb(218,25,20)" fg:x="846" fg:w="2"/><text x="69.1425%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="68.8925%" y="533" width="0.1629%" height="15" fill="rgb(252,210,38)" fg:x="846" fg:w="2"/><text x="69.1425%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.8925%" y="517" width="0.1629%" height="15" fill="rgb(242,134,21)" fg:x="846" fg:w="2"/><text x="69.1425%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9739%" y="501" width="0.0814%" height="15" fill="rgb(213,28,48)" fg:x="847" fg:w="1"/><text x="69.2239%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9739%" y="485" width="0.0814%" height="15" fill="rgb(250,196,2)" fg:x="847" fg:w="1"/><text x="69.2239%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.9739%" y="469" width="0.0814%" height="15" fill="rgb(227,5,17)" fg:x="847" fg:w="1"/><text x="69.2239%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.9739%" y="453" width="0.0814%" height="15" fill="rgb(221,226,24)" fg:x="847" fg:w="1"/><text x="69.2239%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.9739%" y="437" width="0.0814%" height="15" fill="rgb(211,5,48)" fg:x="847" fg:w="1"/><text x="69.2239%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.9739%" y="421" width="0.0814%" height="15" fill="rgb(219,150,6)" fg:x="847" fg:w="1"/><text x="69.2239%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.9739%" y="405" width="0.0814%" height="15" fill="rgb(251,46,16)" fg:x="847" fg:w="1"/><text x="69.2239%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.9739%" y="389" width="0.0814%" height="15" fill="rgb(220,204,40)" fg:x="847" fg:w="1"/><text x="69.2239%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.9739%" y="373" width="0.0814%" height="15" fill="rgb(211,85,2)" fg:x="847" fg:w="1"/><text x="69.2239%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.9739%" y="357" width="0.0814%" height="15" fill="rgb(229,17,7)" fg:x="847" fg:w="1"/><text x="69.2239%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.9739%" y="341" width="0.0814%" height="15" fill="rgb(239,72,28)" fg:x="847" fg:w="1"/><text x="69.2239%" y="351.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="68.9739%" y="325" width="0.0814%" height="15" fill="rgb(230,47,54)" fg:x="847" fg:w="1"/><text x="69.2239%" y="335.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="69.0554%" y="549" width="0.1629%" height="15" fill="rgb(214,50,8)" fg:x="848" fg:w="2"/><text x="69.3054%" y="559.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="69.0554%" y="533" width="0.1629%" height="15" fill="rgb(216,198,43)" fg:x="848" fg:w="2"/><text x="69.3054%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="69.0554%" y="517" width="0.1629%" height="15" fill="rgb(234,20,35)" fg:x="848" fg:w="2"/><text x="69.3054%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="69.0554%" y="501" width="0.1629%" height="15" fill="rgb(254,45,19)" fg:x="848" fg:w="2"/><text x="69.3054%" y="511.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="69.1368%" y="485" width="0.0814%" height="15" fill="rgb(219,14,44)" fg:x="849" fg:w="1"/><text x="69.3868%" y="495.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="69.1368%" y="469" width="0.0814%" height="15" fill="rgb(217,220,26)" fg:x="849" fg:w="1"/><text x="69.3868%" y="479.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (12 samples, 0.98%)</title><rect x="68.4853%" y="597" width="0.9772%" height="15" fill="rgb(213,158,28)" fg:x="841" fg:w="12"/><text x="68.7353%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope (7 samples, 0.57%)</title><rect x="68.8925%" y="581" width="0.5700%" height="15" fill="rgb(252,51,52)" fg:x="846" fg:w="7"/><text x="69.1425%" y="591.50"></text></g><g><title>kernel::model::Entity::load_scope (7 samples, 0.57%)</title><rect x="68.8925%" y="565" width="0.5700%" height="15" fill="rgb(246,89,16)" fg:x="846" fg:w="7"/><text x="69.1425%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="69.2182%" y="549" width="0.2443%" height="15" fill="rgb(216,158,49)" fg:x="850" fg:w="3"/><text x="69.4682%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="69.2182%" y="533" width="0.2443%" height="15" fill="rgb(236,107,19)" fg:x="850" fg:w="3"/><text x="69.4682%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.3811%" y="517" width="0.0814%" height="15" fill="rgb(228,185,30)" fg:x="852" fg:w="1"/><text x="69.6311%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.3811%" y="501" width="0.0814%" height="15" fill="rgb(246,134,8)" fg:x="852" fg:w="1"/><text x="69.6311%" y="511.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="69.6254%" y="469" width="0.0814%" height="15" fill="rgb(214,143,50)" fg:x="855" fg:w="1"/><text x="69.8754%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.6254%" y="453" width="0.0814%" height="15" fill="rgb(228,75,8)" fg:x="855" fg:w="1"/><text x="69.8754%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.6254%" y="437" width="0.0814%" height="15" fill="rgb(207,175,4)" fg:x="855" fg:w="1"/><text x="69.8754%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.6254%" y="421" width="0.0814%" height="15" fill="rgb(205,108,24)" fg:x="855" fg:w="1"/><text x="69.8754%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.6254%" y="405" width="0.0814%" height="15" fill="rgb(244,120,49)" fg:x="855" fg:w="1"/><text x="69.8754%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.6254%" y="389" width="0.0814%" height="15" fill="rgb(223,47,38)" fg:x="855" fg:w="1"/><text x="69.8754%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.6254%" y="373" width="0.0814%" height="15" fill="rgb(229,179,11)" fg:x="855" fg:w="1"/><text x="69.8754%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.6254%" y="357" width="0.0814%" height="15" fill="rgb(231,122,1)" fg:x="855" fg:w="1"/><text x="69.8754%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.6254%" y="341" width="0.0814%" height="15" fill="rgb(245,119,9)" fg:x="855" fg:w="1"/><text x="69.8754%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.6254%" y="325" width="0.0814%" height="15" fill="rgb(241,163,25)" fg:x="855" fg:w="1"/><text x="69.8754%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.6254%" y="309" width="0.0814%" height="15" fill="rgb(217,214,3)" fg:x="855" fg:w="1"/><text x="69.8754%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.6254%" y="293" width="0.0814%" height="15" fill="rgb(240,86,28)" fg:x="855" fg:w="1"/><text x="69.8754%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.6254%" y="277" width="0.0814%" height="15" fill="rgb(215,47,9)" fg:x="855" fg:w="1"/><text x="69.8754%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.7883%" y="341" width="0.0814%" height="15" fill="rgb(252,25,45)" fg:x="857" fg:w="1"/><text x="70.0383%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.7883%" y="325" width="0.0814%" height="15" fill="rgb(251,164,9)" fg:x="857" fg:w="1"/><text x="70.0383%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.7883%" y="309" width="0.0814%" height="15" fill="rgb(233,194,0)" fg:x="857" fg:w="1"/><text x="70.0383%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.7883%" y="293" width="0.0814%" height="15" fill="rgb(249,111,24)" fg:x="857" fg:w="1"/><text x="70.0383%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="69.7883%" y="389" width="0.1629%" height="15" fill="rgb(250,223,3)" fg:x="857" fg:w="2"/><text x="70.0383%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.7883%" y="373" width="0.1629%" height="15" fill="rgb(236,178,37)" fg:x="857" fg:w="2"/><text x="70.0383%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.7883%" y="357" width="0.1629%" height="15" fill="rgb(241,158,50)" fg:x="857" fg:w="2"/><text x="70.0383%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.8697%" y="341" width="0.0814%" height="15" fill="rgb(213,121,41)" fg:x="858" fg:w="1"/><text x="70.1197%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.8697%" y="325" width="0.0814%" height="15" fill="rgb(240,92,3)" fg:x="858" fg:w="1"/><text x="70.1197%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="69.8697%" y="309" width="0.0814%" height="15" fill="rgb(205,123,3)" fg:x="858" fg:w="1"/><text x="70.1197%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.8697%" y="293" width="0.0814%" height="15" fill="rgb(205,97,47)" fg:x="858" fg:w="1"/><text x="70.1197%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.8697%" y="277" width="0.0814%" height="15" fill="rgb(247,152,14)" fg:x="858" fg:w="1"/><text x="70.1197%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.9511%" y="357" width="0.0814%" height="15" fill="rgb(248,195,53)" fg:x="859" fg:w="1"/><text x="70.2011%" y="367.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (5 samples, 0.41%)</title><rect x="69.7068%" y="453" width="0.4072%" height="15" fill="rgb(226,201,16)" fg:x="856" fg:w="5"/><text x="69.9568%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (5 samples, 0.41%)</title><rect x="69.7068%" y="437" width="0.4072%" height="15" fill="rgb(205,98,0)" fg:x="856" fg:w="5"/><text x="69.9568%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="69.7068%" y="421" width="0.4072%" height="15" fill="rgb(214,191,48)" fg:x="856" fg:w="5"/><text x="69.9568%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="69.7068%" y="405" width="0.4072%" height="15" fill="rgb(237,112,39)" fg:x="856" fg:w="5"/><text x="69.9568%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.9511%" y="389" width="0.1629%" height="15" fill="rgb(247,203,27)" fg:x="859" fg:w="2"/><text x="70.2011%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.9511%" y="373" width="0.1629%" height="15" fill="rgb(235,124,28)" fg:x="859" fg:w="2"/><text x="70.2011%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.0326%" y="357" width="0.0814%" height="15" fill="rgb(208,207,46)" fg:x="860" fg:w="1"/><text x="70.2826%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0326%" y="341" width="0.0814%" height="15" fill="rgb(234,176,4)" fg:x="860" fg:w="1"/><text x="70.2826%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.1140%" y="373" width="0.0814%" height="15" fill="rgb(230,133,28)" fg:x="861" fg:w="1"/><text x="70.3640%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1140%" y="357" width="0.0814%" height="15" fill="rgb(211,137,40)" fg:x="861" fg:w="1"/><text x="70.3640%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.1954%" y="373" width="0.0814%" height="15" fill="rgb(254,35,13)" fg:x="862" fg:w="1"/><text x="70.4454%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.1954%" y="357" width="0.0814%" height="15" fill="rgb(225,49,51)" fg:x="862" fg:w="1"/><text x="70.4454%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1954%" y="341" width="0.0814%" height="15" fill="rgb(251,10,15)" fg:x="862" fg:w="1"/><text x="70.4454%" y="351.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (10 samples, 0.81%)</title><rect x="69.6254%" y="549" width="0.8143%" height="15" fill="rgb(228,207,15)" fg:x="855" fg:w="10"/><text x="69.8754%" y="559.50"></text></g><g><title>core::iter::adapters::try_process (10 samples, 0.81%)</title><rect x="69.6254%" y="533" width="0.8143%" height="15" fill="rgb(241,99,19)" fg:x="855" fg:w="10"/><text x="69.8754%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.81%)</title><rect x="69.6254%" y="517" width="0.8143%" height="15" fill="rgb(207,104,49)" fg:x="855" fg:w="10"/><text x="69.8754%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (10 samples, 0.81%)</title><rect x="69.6254%" y="501" width="0.8143%" height="15" fill="rgb(234,99,18)" fg:x="855" fg:w="10"/><text x="69.8754%" y="511.50"></text></g><g><title>engine::internal::Entities::prepare_entity (10 samples, 0.81%)</title><rect x="69.6254%" y="485" width="0.8143%" height="15" fill="rgb(213,191,49)" fg:x="855" fg:w="10"/><text x="69.8754%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity (9 samples, 0.73%)</title><rect x="69.7068%" y="469" width="0.7329%" height="15" fill="rgb(210,226,19)" fg:x="856" fg:w="9"/><text x="69.9568%" y="479.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.33%)</title><rect x="70.1140%" y="453" width="0.3257%" height="15" fill="rgb(229,97,18)" fg:x="861" fg:w="4"/><text x="70.3640%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.33%)</title><rect x="70.1140%" y="437" width="0.3257%" height="15" fill="rgb(211,167,15)" fg:x="861" fg:w="4"/><text x="70.3640%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="70.1140%" y="421" width="0.3257%" height="15" fill="rgb(210,169,34)" fg:x="861" fg:w="4"/><text x="70.3640%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.33%)</title><rect x="70.1140%" y="405" width="0.3257%" height="15" fill="rgb(241,121,31)" fg:x="861" fg:w="4"/><text x="70.3640%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="70.1140%" y="389" width="0.3257%" height="15" fill="rgb(232,40,11)" fg:x="861" fg:w="4"/><text x="70.3640%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.2769%" y="373" width="0.1629%" height="15" fill="rgb(205,86,26)" fg:x="863" fg:w="2"/><text x="70.5269%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.2769%" y="357" width="0.1629%" height="15" fill="rgb(231,126,28)" fg:x="863" fg:w="2"/><text x="70.5269%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.3583%" y="341" width="0.0814%" height="15" fill="rgb(219,221,18)" fg:x="864" fg:w="1"/><text x="70.6083%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3583%" y="325" width="0.0814%" height="15" fill="rgb(211,40,0)" fg:x="864" fg:w="1"/><text x="70.6083%" y="335.50"></text></g><g><title>plugins_core::tools::get_contained_keys (15 samples, 1.22%)</title><rect x="69.4625%" y="597" width="1.2215%" height="15" fill="rgb(239,85,43)" fg:x="853" fg:w="15"/><text x="69.7125%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope (14 samples, 1.14%)</title><rect x="69.5440%" y="581" width="1.1401%" height="15" fill="rgb(231,55,21)" fg:x="854" fg:w="14"/><text x="69.7940%" y="591.50"></text></g><g><title>kernel::model::Entity::load_scope (14 samples, 1.14%)</title><rect x="69.5440%" y="565" width="1.1401%" height="15" fill="rgb(225,184,43)" fg:x="854" fg:w="14"/><text x="69.7940%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="70.4397%" y="549" width="0.2443%" height="15" fill="rgb(251,158,41)" fg:x="865" fg:w="3"/><text x="70.6897%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="70.4397%" y="533" width="0.2443%" height="15" fill="rgb(234,159,37)" fg:x="865" fg:w="3"/><text x="70.6897%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="70.6026%" y="517" width="0.0814%" height="15" fill="rgb(216,204,22)" fg:x="867" fg:w="1"/><text x="70.8526%" y="527.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="70.6026%" y="501" width="0.0814%" height="15" fill="rgb(214,17,3)" fg:x="867" fg:w="1"/><text x="70.8526%" y="511.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="70.6026%" y="485" width="0.0814%" height="15" fill="rgb(212,111,17)" fg:x="867" fg:w="1"/><text x="70.8526%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::SeqDeserializer as serde::de::SeqAccess&gt;::size_hint (1 samples, 0.08%)</title><rect x="70.6026%" y="469" width="0.0814%" height="15" fill="rgb(221,157,24)" fg:x="867" fg:w="1"/><text x="70.8526%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.7655%" y="549" width="0.0814%" height="15" fill="rgb(252,16,13)" fg:x="869" fg:w="1"/><text x="71.0155%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.8469%" y="517" width="0.0814%" height="15" fill="rgb(221,62,2)" fg:x="870" fg:w="1"/><text x="71.0969%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (31 samples, 2.52%)</title><rect x="68.4853%" y="629" width="2.5244%" height="15" fill="rgb(247,87,22)" fg:x="841" fg:w="31"/><text x="68.7353%" y="639.50">&lt;a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (31 samples, 2.52%)</title><rect x="68.4853%" y="613" width="2.5244%" height="15" fill="rgb(215,73,9)" fg:x="841" fg:w="31"/><text x="68.7353%" y="623.50">&lt;c..</text></g><g><title>plugins_core::tools::get_occupant_keys (4 samples, 0.33%)</title><rect x="70.6840%" y="597" width="0.3257%" height="15" fill="rgb(207,175,33)" fg:x="868" fg:w="4"/><text x="70.9340%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="70.7655%" y="581" width="0.2443%" height="15" fill="rgb(243,129,54)" fg:x="869" fg:w="3"/><text x="71.0155%" y="591.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="70.7655%" y="565" width="0.2443%" height="15" fill="rgb(227,119,45)" fg:x="869" fg:w="3"/><text x="71.0155%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.8469%" y="549" width="0.1629%" height="15" fill="rgb(205,109,36)" fg:x="870" fg:w="2"/><text x="71.0969%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.8469%" y="533" width="0.1629%" height="15" fill="rgb(205,6,39)" fg:x="870" fg:w="2"/><text x="71.0969%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="70.9283%" y="517" width="0.0814%" height="15" fill="rgb(221,32,16)" fg:x="871" fg:w="1"/><text x="71.1783%" y="527.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="70.9283%" y="501" width="0.0814%" height="15" fill="rgb(228,144,50)" fg:x="871" fg:w="1"/><text x="71.1783%" y="511.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="70.9283%" y="485" width="0.0814%" height="15" fill="rgb(229,201,53)" fg:x="871" fg:w="1"/><text x="71.1783%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.9283%" y="469" width="0.0814%" height="15" fill="rgb(249,153,27)" fg:x="871" fg:w="1"/><text x="71.1783%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9283%" y="453" width="0.0814%" height="15" fill="rgb(227,106,25)" fg:x="871" fg:w="1"/><text x="71.1783%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.9283%" y="437" width="0.0814%" height="15" fill="rgb(230,65,29)" fg:x="871" fg:w="1"/><text x="71.1783%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.0098%" y="597" width="0.0814%" height="15" fill="rgb(221,57,46)" fg:x="872" fg:w="1"/><text x="71.2598%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.0912%" y="581" width="0.0814%" height="15" fill="rgb(229,161,17)" fg:x="873" fg:w="1"/><text x="71.3412%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.0912%" y="565" width="0.0814%" height="15" fill="rgb(222,213,11)" fg:x="873" fg:w="1"/><text x="71.3412%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.0912%" y="549" width="0.0814%" height="15" fill="rgb(235,35,13)" fg:x="873" fg:w="1"/><text x="71.3412%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.0912%" y="533" width="0.0814%" height="15" fill="rgb(233,158,34)" fg:x="873" fg:w="1"/><text x="71.3412%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.0912%" y="517" width="0.0814%" height="15" fill="rgb(215,151,48)" fg:x="873" fg:w="1"/><text x="71.3412%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.0912%" y="501" width="0.0814%" height="15" fill="rgb(229,84,14)" fg:x="873" fg:w="1"/><text x="71.3412%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.0912%" y="485" width="0.0814%" height="15" fill="rgb(229,68,14)" fg:x="873" fg:w="1"/><text x="71.3412%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.0912%" y="469" width="0.0814%" height="15" fill="rgb(243,106,26)" fg:x="873" fg:w="1"/><text x="71.3412%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.0912%" y="453" width="0.0814%" height="15" fill="rgb(206,45,38)" fg:x="873" fg:w="1"/><text x="71.3412%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.0912%" y="437" width="0.0814%" height="15" fill="rgb(226,6,15)" fg:x="873" fg:w="1"/><text x="71.3412%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.0912%" y="421" width="0.0814%" height="15" fill="rgb(232,22,54)" fg:x="873" fg:w="1"/><text x="71.3412%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.0912%" y="405" width="0.0814%" height="15" fill="rgb(229,222,32)" fg:x="873" fg:w="1"/><text x="71.3412%" y="415.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="71.1726%" y="565" width="0.1629%" height="15" fill="rgb(228,62,29)" fg:x="874" fg:w="2"/><text x="71.4226%" y="575.50"></text></g><g><title>engine::internal::Maps::lookup_entity (2 samples, 0.16%)</title><rect x="71.1726%" y="549" width="0.1629%" height="15" fill="rgb(251,103,34)" fg:x="874" fg:w="2"/><text x="71.4226%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.1726%" y="533" width="0.1629%" height="15" fill="rgb(233,12,30)" fg:x="874" fg:w="2"/><text x="71.4226%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2541%" y="517" width="0.0814%" height="15" fill="rgb(238,52,0)" fg:x="875" fg:w="1"/><text x="71.5041%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2541%" y="501" width="0.0814%" height="15" fill="rgb(223,98,5)" fg:x="875" fg:w="1"/><text x="71.5041%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.2541%" y="485" width="0.0814%" height="15" fill="rgb(228,75,37)" fg:x="875" fg:w="1"/><text x="71.5041%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.2541%" y="469" width="0.0814%" height="15" fill="rgb(205,115,49)" fg:x="875" fg:w="1"/><text x="71.5041%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.2541%" y="453" width="0.0814%" height="15" fill="rgb(250,154,43)" fg:x="875" fg:w="1"/><text x="71.5041%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.2541%" y="437" width="0.0814%" height="15" fill="rgb(226,43,29)" fg:x="875" fg:w="1"/><text x="71.5041%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.2541%" y="421" width="0.0814%" height="15" fill="rgb(249,228,39)" fg:x="875" fg:w="1"/><text x="71.5041%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.2541%" y="405" width="0.0814%" height="15" fill="rgb(216,79,43)" fg:x="875" fg:w="1"/><text x="71.5041%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.2541%" y="389" width="0.0814%" height="15" fill="rgb(228,95,12)" fg:x="875" fg:w="1"/><text x="71.5041%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.2541%" y="373" width="0.0814%" height="15" fill="rgb(249,221,15)" fg:x="875" fg:w="1"/><text x="71.5041%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.2541%" y="357" width="0.0814%" height="15" fill="rgb(233,34,13)" fg:x="875" fg:w="1"/><text x="71.5041%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2541%" y="341" width="0.0814%" height="15" fill="rgb(214,103,39)" fg:x="875" fg:w="1"/><text x="71.5041%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.24%)</title><rect x="71.1726%" y="581" width="0.2443%" height="15" fill="rgb(251,126,39)" fg:x="874" fg:w="3"/><text x="71.4226%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="71.3355%" y="565" width="0.0814%" height="15" fill="rgb(214,216,36)" fg:x="876" fg:w="1"/><text x="71.5855%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="71.3355%" y="549" width="0.0814%" height="15" fill="rgb(220,221,8)" fg:x="876" fg:w="1"/><text x="71.5855%" y="559.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="71.3355%" y="533" width="0.0814%" height="15" fill="rgb(240,216,3)" fg:x="876" fg:w="1"/><text x="71.5855%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="71.3355%" y="517" width="0.0814%" height="15" fill="rgb(232,218,17)" fg:x="876" fg:w="1"/><text x="71.5855%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="71.3355%" y="501" width="0.0814%" height="15" fill="rgb(229,163,45)" fg:x="876" fg:w="1"/><text x="71.5855%" y="511.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="71.3355%" y="485" width="0.0814%" height="15" fill="rgb(231,110,42)" fg:x="876" fg:w="1"/><text x="71.5855%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="71.3355%" y="469" width="0.0814%" height="15" fill="rgb(208,170,48)" fg:x="876" fg:w="1"/><text x="71.5855%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="71.3355%" y="453" width="0.0814%" height="15" fill="rgb(239,116,25)" fg:x="876" fg:w="1"/><text x="71.5855%" y="463.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="71.6612%" y="373" width="0.0814%" height="15" fill="rgb(219,200,50)" fg:x="880" fg:w="1"/><text x="71.9112%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.6612%" y="357" width="0.0814%" height="15" fill="rgb(245,200,0)" fg:x="880" fg:w="1"/><text x="71.9112%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="71.6612%" y="341" width="0.0814%" height="15" fill="rgb(245,119,33)" fg:x="880" fg:w="1"/><text x="71.9112%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.6612%" y="325" width="0.0814%" height="15" fill="rgb(231,125,12)" fg:x="880" fg:w="1"/><text x="71.9112%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.6612%" y="309" width="0.0814%" height="15" fill="rgb(216,96,41)" fg:x="880" fg:w="1"/><text x="71.9112%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="71.6612%" y="405" width="0.1629%" height="15" fill="rgb(248,43,45)" fg:x="880" fg:w="2"/><text x="71.9112%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="71.6612%" y="389" width="0.1629%" height="15" fill="rgb(217,222,7)" fg:x="880" fg:w="2"/><text x="71.9112%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.7427%" y="373" width="0.0814%" height="15" fill="rgb(233,28,6)" fg:x="881" fg:w="1"/><text x="71.9927%" y="383.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="71.6612%" y="421" width="0.2443%" height="15" fill="rgb(231,218,15)" fg:x="880" fg:w="3"/><text x="71.9112%" y="431.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.8241%" y="405" width="0.0814%" height="15" fill="rgb(226,171,48)" fg:x="882" fg:w="1"/><text x="72.0741%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="71.8241%" y="389" width="0.0814%" height="15" fill="rgb(235,201,9)" fg:x="882" fg:w="1"/><text x="72.0741%" y="399.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="71.8241%" y="373" width="0.0814%" height="15" fill="rgb(217,80,15)" fg:x="882" fg:w="1"/><text x="72.0741%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.8241%" y="357" width="0.0814%" height="15" fill="rgb(219,152,8)" fg:x="882" fg:w="1"/><text x="72.0741%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="71.8241%" y="341" width="0.0814%" height="15" fill="rgb(243,107,38)" fg:x="882" fg:w="1"/><text x="72.0741%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.8241%" y="325" width="0.0814%" height="15" fill="rgb(231,17,5)" fg:x="882" fg:w="1"/><text x="72.0741%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.8241%" y="309" width="0.0814%" height="15" fill="rgb(209,25,54)" fg:x="882" fg:w="1"/><text x="72.0741%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="71.8241%" y="293" width="0.0814%" height="15" fill="rgb(219,0,2)" fg:x="882" fg:w="1"/><text x="72.0741%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.9055%" y="421" width="0.0814%" height="15" fill="rgb(246,9,5)" fg:x="883" fg:w="1"/><text x="72.1555%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.41%)</title><rect x="71.6612%" y="437" width="0.4072%" height="15" fill="rgb(226,159,4)" fg:x="880" fg:w="5"/><text x="71.9112%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.9870%" y="421" width="0.0814%" height="15" fill="rgb(219,175,34)" fg:x="884" fg:w="1"/><text x="72.2370%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.9870%" y="405" width="0.0814%" height="15" fill="rgb(236,10,46)" fg:x="884" fg:w="1"/><text x="72.2370%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="71.9870%" y="389" width="0.0814%" height="15" fill="rgb(240,211,16)" fg:x="884" fg:w="1"/><text x="72.2370%" y="399.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (6 samples, 0.49%)</title><rect x="71.6612%" y="469" width="0.4886%" height="15" fill="rgb(205,3,43)" fg:x="880" fg:w="6"/><text x="71.9112%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (6 samples, 0.49%)</title><rect x="71.6612%" y="453" width="0.4886%" height="15" fill="rgb(245,7,22)" fg:x="880" fg:w="6"/><text x="71.9112%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="72.0684%" y="437" width="0.0814%" height="15" fill="rgb(239,132,32)" fg:x="885" fg:w="1"/><text x="72.3184%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.0684%" y="421" width="0.0814%" height="15" fill="rgb(228,202,34)" fg:x="885" fg:w="1"/><text x="72.3184%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.1498%" y="469" width="0.0814%" height="15" fill="rgb(254,200,22)" fg:x="886" fg:w="1"/><text x="72.3998%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.1498%" y="453" width="0.0814%" height="15" fill="rgb(219,10,39)" fg:x="886" fg:w="1"/><text x="72.3998%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.73%)</title><rect x="71.5798%" y="485" width="0.7329%" height="15" fill="rgb(226,210,39)" fg:x="879" fg:w="9"/><text x="71.8298%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.2313%" y="469" width="0.0814%" height="15" fill="rgb(208,219,16)" fg:x="887" fg:w="1"/><text x="72.4813%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.2313%" y="453" width="0.0814%" height="15" fill="rgb(216,158,51)" fg:x="887" fg:w="1"/><text x="72.4813%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="72.2313%" y="437" width="0.0814%" height="15" fill="rgb(233,14,44)" fg:x="887" fg:w="1"/><text x="72.4813%" y="447.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (12 samples, 0.98%)</title><rect x="71.5798%" y="517" width="0.9772%" height="15" fill="rgb(237,97,39)" fg:x="879" fg:w="12"/><text x="71.8298%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (12 samples, 0.98%)</title><rect x="71.5798%" y="501" width="0.9772%" height="15" fill="rgb(218,198,43)" fg:x="879" fg:w="12"/><text x="71.8298%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.24%)</title><rect x="72.3127%" y="485" width="0.2443%" height="15" fill="rgb(231,104,20)" fg:x="888" fg:w="3"/><text x="72.5627%" y="495.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="72.3127%" y="469" width="0.2443%" height="15" fill="rgb(254,36,13)" fg:x="888" fg:w="3"/><text x="72.5627%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 1.22%)</title><rect x="71.4984%" y="533" width="1.2215%" height="15" fill="rgb(248,14,50)" fg:x="878" fg:w="15"/><text x="71.7484%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="72.5570%" y="517" width="0.1629%" height="15" fill="rgb(217,107,29)" fg:x="891" fg:w="2"/><text x="72.8070%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.6384%" y="501" width="0.0814%" height="15" fill="rgb(251,169,33)" fg:x="892" fg:w="1"/><text x="72.8884%" y="511.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (17 samples, 1.38%)</title><rect x="71.4984%" y="565" width="1.3844%" height="15" fill="rgb(217,108,32)" fg:x="878" fg:w="17"/><text x="71.7484%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (17 samples, 1.38%)</title><rect x="71.4984%" y="549" width="1.3844%" height="15" fill="rgb(219,66,42)" fg:x="878" fg:w="17"/><text x="71.7484%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="72.7199%" y="533" width="0.1629%" height="15" fill="rgb(206,180,7)" fg:x="893" fg:w="2"/><text x="72.9699%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="72.7199%" y="517" width="0.1629%" height="15" fill="rgb(208,226,31)" fg:x="893" fg:w="2"/><text x="72.9699%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="72.8827%" y="517" width="0.1629%" height="15" fill="rgb(218,26,49)" fg:x="895" fg:w="2"/><text x="73.1327%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.0456%" y="517" width="0.0814%" height="15" fill="rgb(233,197,48)" fg:x="897" fg:w="1"/><text x="73.2956%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.0456%" y="501" width="0.0814%" height="15" fill="rgb(252,181,51)" fg:x="897" fg:w="1"/><text x="73.2956%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="73.0456%" y="485" width="0.0814%" height="15" fill="rgb(253,90,19)" fg:x="897" fg:w="1"/><text x="73.2956%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.1270%" y="485" width="0.0814%" height="15" fill="rgb(215,171,30)" fg:x="898" fg:w="1"/><text x="73.3770%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="73.1270%" y="517" width="0.1629%" height="15" fill="rgb(214,222,9)" fg:x="898" fg:w="2"/><text x="73.3770%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="73.1270%" y="501" width="0.1629%" height="15" fill="rgb(223,3,22)" fg:x="898" fg:w="2"/><text x="73.3770%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="73.2085%" y="485" width="0.0814%" height="15" fill="rgb(225,196,46)" fg:x="899" fg:w="1"/><text x="73.4585%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="73.2899%" y="501" width="0.1629%" height="15" fill="rgb(209,110,37)" fg:x="900" fg:w="2"/><text x="73.5399%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="73.2899%" y="485" width="0.1629%" height="15" fill="rgb(249,89,12)" fg:x="900" fg:w="2"/><text x="73.5399%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (3 samples, 0.24%)</title><rect x="73.2899%" y="517" width="0.2443%" height="15" fill="rgb(226,27,33)" fg:x="900" fg:w="3"/><text x="73.5399%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="73.4528%" y="501" width="0.0814%" height="15" fill="rgb(213,82,22)" fg:x="902" fg:w="1"/><text x="73.7028%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="73.5342%" y="517" width="0.0814%" height="15" fill="rgb(248,140,0)" fg:x="903" fg:w="1"/><text x="73.7842%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.5342%" y="501" width="0.0814%" height="15" fill="rgb(228,106,3)" fg:x="903" fg:w="1"/><text x="73.7842%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="73.5342%" y="485" width="0.0814%" height="15" fill="rgb(209,23,37)" fg:x="903" fg:w="1"/><text x="73.7842%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="73.5342%" y="469" width="0.0814%" height="15" fill="rgb(241,93,50)" fg:x="903" fg:w="1"/><text x="73.7842%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.5342%" y="453" width="0.0814%" height="15" fill="rgb(253,46,43)" fg:x="903" fg:w="1"/><text x="73.7842%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="73.5342%" y="437" width="0.0814%" height="15" fill="rgb(226,206,43)" fg:x="903" fg:w="1"/><text x="73.7842%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.5342%" y="421" width="0.0814%" height="15" fill="rgb(217,54,7)" fg:x="903" fg:w="1"/><text x="73.7842%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Version&gt;::serialize (1 samples, 0.08%)</title><rect x="73.6156%" y="517" width="0.0814%" height="15" fill="rgb(223,5,52)" fg:x="904" fg:w="1"/><text x="73.8656%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.6156%" y="501" width="0.0814%" height="15" fill="rgb(206,52,46)" fg:x="904" fg:w="1"/><text x="73.8656%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.6156%" y="485" width="0.0814%" height="15" fill="rgb(253,136,11)" fg:x="904" fg:w="1"/><text x="73.8656%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.6971%" y="437" width="0.0814%" height="15" fill="rgb(208,106,33)" fg:x="905" fg:w="1"/><text x="73.9471%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.6971%" y="421" width="0.0814%" height="15" fill="rgb(206,54,4)" fg:x="905" fg:w="1"/><text x="73.9471%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.6971%" y="405" width="0.0814%" height="15" fill="rgb(213,3,15)" fg:x="905" fg:w="1"/><text x="73.9471%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="73.6971%" y="485" width="0.1629%" height="15" fill="rgb(252,211,39)" fg:x="905" fg:w="2"/><text x="73.9471%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="73.6971%" y="469" width="0.1629%" height="15" fill="rgb(223,6,36)" fg:x="905" fg:w="2"/><text x="73.9471%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="73.6971%" y="453" width="0.1629%" height="15" fill="rgb(252,169,45)" fg:x="905" fg:w="2"/><text x="73.9471%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="73.7785%" y="437" width="0.0814%" height="15" fill="rgb(212,48,26)" fg:x="906" fg:w="1"/><text x="74.0285%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.7785%" y="421" width="0.0814%" height="15" fill="rgb(251,102,48)" fg:x="906" fg:w="1"/><text x="74.0285%" y="431.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (31 samples, 2.52%)</title><rect x="71.4169%" y="581" width="2.5244%" height="15" fill="rgb(243,208,16)" fg:x="877" fg:w="31"/><text x="71.6669%" y="591.50">&lt;r..</text></g><g><title>kernel::model::EntityPtr::to_json_value (13 samples, 1.06%)</title><rect x="72.8827%" y="565" width="1.0586%" height="15" fill="rgb(219,96,24)" fg:x="895" fg:w="13"/><text x="73.1327%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (13 samples, 1.06%)</title><rect x="72.8827%" y="549" width="1.0586%" height="15" fill="rgb(219,33,29)" fg:x="895" fg:w="13"/><text x="73.1327%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.06%)</title><rect x="72.8827%" y="533" width="1.0586%" height="15" fill="rgb(223,176,5)" fg:x="895" fg:w="13"/><text x="73.1327%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="73.6971%" y="517" width="0.2443%" height="15" fill="rgb(228,140,14)" fg:x="905" fg:w="3"/><text x="73.9471%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (3 samples, 0.24%)</title><rect x="73.6971%" y="501" width="0.2443%" height="15" fill="rgb(217,179,31)" fg:x="905" fg:w="3"/><text x="73.9471%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="73.8599%" y="485" width="0.0814%" height="15" fill="rgb(230,9,30)" fg:x="907" fg:w="1"/><text x="74.1099%" y="495.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (791 samples, 64.41%)</title><rect x="9.6906%" y="725" width="64.4137%" height="15" fill="rgb(230,136,20)" fg:x="119" fg:w="791"/><text x="9.9406%" y="735.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (77 samples, 6.27%)</title><rect x="67.8339%" y="709" width="6.2704%" height="15" fill="rgb(215,210,22)" fg:x="833" fg:w="77"/><text x="68.0839%" y="719.50">kernel::..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (77 samples, 6.27%)</title><rect x="67.8339%" y="693" width="6.2704%" height="15" fill="rgb(218,43,5)" fg:x="833" fg:w="77"/><text x="68.0839%" y="703.50">&lt;plugins..</text></g><g><title>plugins_rpc::querying::have_surroundings (70 samples, 5.70%)</title><rect x="68.4039%" y="677" width="5.7003%" height="15" fill="rgb(216,11,5)" fg:x="840" fg:w="70"/><text x="68.6539%" y="687.50">plugins..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (70 samples, 5.70%)</title><rect x="68.4039%" y="661" width="5.7003%" height="15" fill="rgb(209,82,29)" fg:x="840" fg:w="70"/><text x="68.6539%" y="671.50">&lt;plugin..</text></g><g><title>core::iter::adapters::try_process (69 samples, 5.62%)</title><rect x="68.4853%" y="645" width="5.6189%" height="15" fill="rgb(244,115,12)" fg:x="841" fg:w="69"/><text x="68.7353%" y="655.50">core::i..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (38 samples, 3.09%)</title><rect x="71.0098%" y="629" width="3.0945%" height="15" fill="rgb(222,82,18)" fg:x="872" fg:w="38"/><text x="71.2598%" y="639.50">all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (38 samples, 3.09%)</title><rect x="71.0098%" y="613" width="3.0945%" height="15" fill="rgb(249,227,8)" fg:x="872" fg:w="38"/><text x="71.2598%" y="623.50">&lt;co..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (37 samples, 3.01%)</title><rect x="71.0912%" y="597" width="3.0130%" height="15" fill="rgb(253,141,45)" fg:x="873" fg:w="37"/><text x="71.3412%" y="607.50">plu..</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (2 samples, 0.16%)</title><rect x="73.9414%" y="581" width="0.1629%" height="15" fill="rgb(234,184,4)" fg:x="908" fg:w="2"/><text x="74.1914%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.0228%" y="565" width="0.0814%" height="15" fill="rgb(218,194,23)" fg:x="909" fg:w="1"/><text x="74.2728%" y="575.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="74.1042%" y="677" width="0.0814%" height="15" fill="rgb(235,66,41)" fg:x="910" fg:w="1"/><text x="74.3542%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.1042%" y="661" width="0.0814%" height="15" fill="rgb(245,217,1)" fg:x="910" fg:w="1"/><text x="74.3542%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="74.1042%" y="709" width="0.1629%" height="15" fill="rgb(229,91,1)" fg:x="910" fg:w="2"/><text x="74.3542%" y="719.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="74.1042%" y="693" width="0.1629%" height="15" fill="rgb(207,101,30)" fg:x="910" fg:w="2"/><text x="74.3542%" y="703.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="74.1857%" y="677" width="0.0814%" height="15" fill="rgb(223,82,49)" fg:x="911" fg:w="1"/><text x="74.4357%" y="687.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="74.1857%" y="661" width="0.0814%" height="15" fill="rgb(218,167,17)" fg:x="911" fg:w="1"/><text x="74.4357%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.1857%" y="645" width="0.0814%" height="15" fill="rgb(208,103,14)" fg:x="911" fg:w="1"/><text x="74.4357%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.1857%" y="629" width="0.0814%" height="15" fill="rgb(238,20,8)" fg:x="911" fg:w="1"/><text x="74.4357%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.1857%" y="613" width="0.0814%" height="15" fill="rgb(218,80,54)" fg:x="911" fg:w="1"/><text x="74.4357%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.1857%" y="597" width="0.0814%" height="15" fill="rgb(240,144,17)" fg:x="911" fg:w="1"/><text x="74.4357%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.1857%" y="581" width="0.0814%" height="15" fill="rgb(245,27,50)" fg:x="911" fg:w="1"/><text x="74.4357%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.1857%" y="565" width="0.0814%" height="15" fill="rgb(251,51,7)" fg:x="911" fg:w="1"/><text x="74.4357%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.1857%" y="549" width="0.0814%" height="15" fill="rgb(245,217,29)" fg:x="911" fg:w="1"/><text x="74.4357%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.1857%" y="533" width="0.0814%" height="15" fill="rgb(221,176,29)" fg:x="911" fg:w="1"/><text x="74.4357%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.1857%" y="517" width="0.0814%" height="15" fill="rgb(212,180,24)" fg:x="911" fg:w="1"/><text x="74.4357%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.1857%" y="501" width="0.0814%" height="15" fill="rgb(254,24,2)" fg:x="911" fg:w="1"/><text x="74.4357%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.1857%" y="485" width="0.0814%" height="15" fill="rgb(230,100,2)" fg:x="911" fg:w="1"/><text x="74.4357%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.1857%" y="469" width="0.0814%" height="15" fill="rgb(219,142,25)" fg:x="911" fg:w="1"/><text x="74.4357%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.1857%" y="453" width="0.0814%" height="15" fill="rgb(240,73,43)" fg:x="911" fg:w="1"/><text x="74.4357%" y="463.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (795 samples, 64.74%)</title><rect x="9.6091%" y="821" width="64.7394%" height="15" fill="rgb(214,114,15)" fg:x="118" fg:w="795"/><text x="9.8591%" y="831.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>core::iter::adapters::try_process (795 samples, 64.74%)</title><rect x="9.6091%" y="805" width="64.7394%" height="15" fill="rgb(207,130,4)" fg:x="118" fg:w="795"/><text x="9.8591%" y="815.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (795 samples, 64.74%)</title><rect x="9.6091%" y="789" width="64.7394%" height="15" fill="rgb(221,25,40)" fg:x="118" fg:w="795"/><text x="9.8591%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (795 samples, 64.74%)</title><rect x="9.6091%" y="773" width="64.7394%" height="15" fill="rgb(241,184,7)" fg:x="118" fg:w="795"/><text x="9.8591%" y="783.50">&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (794 samples, 64.66%)</title><rect x="9.6906%" y="757" width="64.6580%" height="15" fill="rgb(235,159,4)" fg:x="119" fg:w="794"/><text x="9.9406%" y="767.50">&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (794 samples, 64.66%)</title><rect x="9.6906%" y="741" width="64.6580%" height="15" fill="rgb(214,87,48)" fg:x="119" fg:w="794"/><text x="9.9406%" y="751.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (3 samples, 0.24%)</title><rect x="74.1042%" y="725" width="0.2443%" height="15" fill="rgb(246,198,24)" fg:x="910" fg:w="3"/><text x="74.3542%" y="735.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="74.2671%" y="709" width="0.0814%" height="15" fill="rgb(209,66,40)" fg:x="912" fg:w="1"/><text x="74.5171%" y="719.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="74.2671%" y="693" width="0.0814%" height="15" fill="rgb(233,147,39)" fg:x="912" fg:w="1"/><text x="74.5171%" y="703.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="74.2671%" y="677" width="0.0814%" height="15" fill="rgb(231,145,52)" fg:x="912" fg:w="1"/><text x="74.5171%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (914 samples, 74.43%)</title><rect x="0.0000%" y="901" width="74.4300%" height="15" fill="rgb(206,20,26)" fg:x="0" fg:w="914"/><text x="0.2500%" y="911.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (914 samples, 74.43%)</title><rect x="0.0000%" y="885" width="74.4300%" height="15" fill="rgb(238,220,4)" fg:x="0" fg:w="914"/><text x="0.2500%" y="895.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (914 samples, 74.43%)</title><rect x="0.0000%" y="869" width="74.4300%" height="15" fill="rgb(252,195,42)" fg:x="0" fg:w="914"/><text x="0.2500%" y="879.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (797 samples, 64.90%)</title><rect x="9.5277%" y="853" width="64.9023%" height="15" fill="rgb(209,10,6)" fg:x="117" fg:w="797"/><text x="9.7777%" y="863.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (796 samples, 64.82%)</title><rect x="9.6091%" y="837" width="64.8208%" height="15" fill="rgb(229,3,52)" fg:x="118" fg:w="796"/><text x="9.8591%" y="847.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="74.3485%" y="821" width="0.0814%" height="15" fill="rgb(253,49,37)" fg:x="913" fg:w="1"/><text x="74.5985%" y="831.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="74.3485%" y="805" width="0.0814%" height="15" fill="rgb(240,103,49)" fg:x="913" fg:w="1"/><text x="74.5985%" y="815.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="74.3485%" y="789" width="0.0814%" height="15" fill="rgb(250,182,30)" fg:x="913" fg:w="1"/><text x="74.5985%" y="799.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="74.3485%" y="773" width="0.0814%" height="15" fill="rgb(248,8,30)" fg:x="913" fg:w="1"/><text x="74.5985%" y="783.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="74.3485%" y="757" width="0.0814%" height="15" fill="rgb(237,120,30)" fg:x="913" fg:w="1"/><text x="74.5985%" y="767.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="74.3485%" y="741" width="0.0814%" height="15" fill="rgb(221,146,34)" fg:x="913" fg:w="1"/><text x="74.5985%" y="751.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="74.3485%" y="725" width="0.0814%" height="15" fill="rgb(242,55,13)" fg:x="913" fg:w="1"/><text x="74.5985%" y="735.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="74.3485%" y="709" width="0.0814%" height="15" fill="rgb(242,112,31)" fg:x="913" fg:w="1"/><text x="74.5985%" y="719.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="74.3485%" y="693" width="0.0814%" height="15" fill="rgb(249,192,27)" fg:x="913" fg:w="1"/><text x="74.5985%" y="703.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="74.3485%" y="677" width="0.0814%" height="15" fill="rgb(208,204,44)" fg:x="913" fg:w="1"/><text x="74.5985%" y="687.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="74.3485%" y="661" width="0.0814%" height="15" fill="rgb(208,93,54)" fg:x="913" fg:w="1"/><text x="74.5985%" y="671.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.3485%" y="645" width="0.0814%" height="15" fill="rgb(242,1,31)" fg:x="913" fg:w="1"/><text x="74.5985%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.3485%" y="629" width="0.0814%" height="15" fill="rgb(241,83,25)" fg:x="913" fg:w="1"/><text x="74.5985%" y="639.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="74.3485%" y="613" width="0.0814%" height="15" fill="rgb(205,169,50)" fg:x="913" fg:w="1"/><text x="74.5985%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="74.3485%" y="597" width="0.0814%" height="15" fill="rgb(239,186,37)" fg:x="913" fg:w="1"/><text x="74.5985%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="74.3485%" y="581" width="0.0814%" height="15" fill="rgb(205,221,10)" fg:x="913" fg:w="1"/><text x="74.5985%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="74.3485%" y="565" width="0.0814%" height="15" fill="rgb(218,196,15)" fg:x="913" fg:w="1"/><text x="74.5985%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="74.3485%" y="549" width="0.0814%" height="15" fill="rgb(218,196,35)" fg:x="913" fg:w="1"/><text x="74.5985%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="74.3485%" y="533" width="0.0814%" height="15" fill="rgb(233,63,24)" fg:x="913" fg:w="1"/><text x="74.5985%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.3485%" y="517" width="0.0814%" height="15" fill="rgb(225,8,4)" fg:x="913" fg:w="1"/><text x="74.5985%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="74.3485%" y="501" width="0.0814%" height="15" fill="rgb(234,105,35)" fg:x="913" fg:w="1"/><text x="74.5985%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.3485%" y="485" width="0.0814%" height="15" fill="rgb(236,21,32)" fg:x="913" fg:w="1"/><text x="74.5985%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.4300%" y="789" width="0.0814%" height="15" fill="rgb(228,109,6)" fg:x="914" fg:w="1"/><text x="74.6800%" y="799.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.4300%" y="773" width="0.0814%" height="15" fill="rgb(229,215,31)" fg:x="914" fg:w="1"/><text x="74.6800%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.4300%" y="757" width="0.0814%" height="15" fill="rgb(221,52,54)" fg:x="914" fg:w="1"/><text x="74.6800%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.4300%" y="741" width="0.0814%" height="15" fill="rgb(252,129,43)" fg:x="914" fg:w="1"/><text x="74.6800%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.4300%" y="725" width="0.0814%" height="15" fill="rgb(248,183,27)" fg:x="914" fg:w="1"/><text x="74.6800%" y="735.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.4300%" y="853" width="0.1629%" height="15" fill="rgb(250,0,22)" fg:x="914" fg:w="2"/><text x="74.6800%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (2 samples, 0.16%)</title><rect x="74.4300%" y="837" width="0.1629%" height="15" fill="rgb(213,166,10)" fg:x="914" fg:w="2"/><text x="74.6800%" y="847.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.4300%" y="821" width="0.1629%" height="15" fill="rgb(207,163,36)" fg:x="914" fg:w="2"/><text x="74.6800%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (2 samples, 0.16%)</title><rect x="74.4300%" y="805" width="0.1629%" height="15" fill="rgb(208,122,22)" fg:x="914" fg:w="2"/><text x="74.6800%" y="815.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.5114%" y="789" width="0.0814%" height="15" fill="rgb(207,104,49)" fg:x="915" fg:w="1"/><text x="74.7614%" y="799.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="74.5928%" y="789" width="0.0814%" height="15" fill="rgb(248,211,50)" fg:x="916" fg:w="1"/><text x="74.8428%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="74.5928%" y="821" width="0.1629%" height="15" fill="rgb(217,13,45)" fg:x="916" fg:w="2"/><text x="74.8428%" y="831.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="74.5928%" y="805" width="0.1629%" height="15" fill="rgb(211,216,49)" fg:x="916" fg:w="2"/><text x="74.8428%" y="815.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="74.6743%" y="789" width="0.0814%" height="15" fill="rgb(221,58,53)" fg:x="917" fg:w="1"/><text x="74.9243%" y="799.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="74.6743%" y="773" width="0.0814%" height="15" fill="rgb(220,112,41)" fg:x="917" fg:w="1"/><text x="74.9243%" y="783.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.6743%" y="757" width="0.0814%" height="15" fill="rgb(236,38,28)" fg:x="917" fg:w="1"/><text x="74.9243%" y="767.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.6743%" y="741" width="0.0814%" height="15" fill="rgb(227,195,22)" fg:x="917" fg:w="1"/><text x="74.9243%" y="751.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.6743%" y="725" width="0.0814%" height="15" fill="rgb(214,55,33)" fg:x="917" fg:w="1"/><text x="74.9243%" y="735.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.6743%" y="709" width="0.0814%" height="15" fill="rgb(248,80,13)" fg:x="917" fg:w="1"/><text x="74.9243%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.6743%" y="693" width="0.0814%" height="15" fill="rgb(238,52,6)" fg:x="917" fg:w="1"/><text x="74.9243%" y="703.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.6743%" y="677" width="0.0814%" height="15" fill="rgb(224,198,47)" fg:x="917" fg:w="1"/><text x="74.9243%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.6743%" y="661" width="0.0814%" height="15" fill="rgb(233,171,20)" fg:x="917" fg:w="1"/><text x="74.9243%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.6743%" y="645" width="0.0814%" height="15" fill="rgb(241,30,25)" fg:x="917" fg:w="1"/><text x="74.9243%" y="655.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (3 samples, 0.24%)</title><rect x="74.5928%" y="853" width="0.2443%" height="15" fill="rgb(207,171,38)" fg:x="916" fg:w="3"/><text x="74.8428%" y="863.50"></text></g><g><title>engine::session::Session::new (3 samples, 0.24%)</title><rect x="74.5928%" y="837" width="0.2443%" height="15" fill="rgb(234,70,1)" fg:x="916" fg:w="3"/><text x="74.8428%" y="847.50"></text></g><g><title>engine::session::Session::initialize (1 samples, 0.08%)</title><rect x="74.7557%" y="821" width="0.0814%" height="15" fill="rgb(232,178,18)" fg:x="918" fg:w="1"/><text x="75.0057%" y="831.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (1 samples, 0.08%)</title><rect x="74.7557%" y="805" width="0.0814%" height="15" fill="rgb(241,78,40)" fg:x="918" fg:w="1"/><text x="75.0057%" y="815.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="74.7557%" y="789" width="0.0814%" height="15" fill="rgb(222,35,25)" fg:x="918" fg:w="1"/><text x="75.0057%" y="799.50"></text></g><g><title>libloading::os::unix::Library::open (1 samples, 0.08%)</title><rect x="74.7557%" y="773" width="0.0814%" height="15" fill="rgb(207,92,16)" fg:x="918" fg:w="1"/><text x="75.0057%" y="783.50"></text></g><g><title>dlopen (1 samples, 0.08%)</title><rect x="74.7557%" y="757" width="0.0814%" height="15" fill="rgb(216,59,51)" fg:x="918" fg:w="1"/><text x="75.0057%" y="767.50"></text></g><g><title>_dl_catch_error (1 samples, 0.08%)</title><rect x="74.7557%" y="741" width="0.0814%" height="15" fill="rgb(213,80,28)" fg:x="918" fg:w="1"/><text x="75.0057%" y="751.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="74.7557%" y="725" width="0.0814%" height="15" fill="rgb(220,93,7)" fg:x="918" fg:w="1"/><text x="75.0057%" y="735.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="74.7557%" y="709" width="0.0814%" height="15" fill="rgb(225,24,44)" fg:x="918" fg:w="1"/><text x="75.0057%" y="719.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="74.7557%" y="693" width="0.0814%" height="15" fill="rgb(243,74,40)" fg:x="918" fg:w="1"/><text x="75.0057%" y="703.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.8371%" y="837" width="0.0814%" height="15" fill="rgb(228,39,7)" fg:x="919" fg:w="1"/><text x="75.0871%" y="847.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.8371%" y="821" width="0.0814%" height="15" fill="rgb(227,79,8)" fg:x="919" fg:w="1"/><text x="75.0871%" y="831.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="74.9186%" y="805" width="0.0814%" height="15" fill="rgb(236,58,11)" fg:x="920" fg:w="1"/><text x="75.1686%" y="815.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="74.9186%" y="789" width="0.0814%" height="15" fill="rgb(249,63,35)" fg:x="920" fg:w="1"/><text x="75.1686%" y="799.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="74.9186%" y="773" width="0.0814%" height="15" fill="rgb(252,114,16)" fg:x="920" fg:w="1"/><text x="75.1686%" y="783.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="75.0000%" y="725" width="0.0814%" height="15" fill="rgb(254,151,24)" fg:x="921" fg:w="1"/><text x="75.2500%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.0000%" y="709" width="0.0814%" height="15" fill="rgb(253,54,39)" fg:x="921" fg:w="1"/><text x="75.2500%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="75.0000%" y="693" width="0.0814%" height="15" fill="rgb(243,25,45)" fg:x="921" fg:w="1"/><text x="75.2500%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.0814%" y="725" width="0.0814%" height="15" fill="rgb(234,134,9)" fg:x="922" fg:w="1"/><text x="75.3314%" y="735.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="75.0000%" y="773" width="0.2443%" height="15" fill="rgb(227,166,31)" fg:x="921" fg:w="3"/><text x="75.2500%" y="783.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="75.0000%" y="757" width="0.2443%" height="15" fill="rgb(245,143,41)" fg:x="921" fg:w="3"/><text x="75.2500%" y="767.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="75.0000%" y="741" width="0.2443%" height="15" fill="rgb(238,181,32)" fg:x="921" fg:w="3"/><text x="75.2500%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.1629%" y="725" width="0.0814%" height="15" fill="rgb(224,113,18)" fg:x="923" fg:w="1"/><text x="75.4129%" y="735.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.1629%" y="709" width="0.0814%" height="15" fill="rgb(240,229,28)" fg:x="923" fg:w="1"/><text x="75.4129%" y="719.50"></text></g><g><title>engine::session::Session::flush (5 samples, 0.41%)</title><rect x="74.9186%" y="837" width="0.4072%" height="15" fill="rgb(250,185,3)" fg:x="920" fg:w="5"/><text x="75.1686%" y="847.50"></text></g><g><title>engine::session::Session::save_entity_changes (5 samples, 0.41%)</title><rect x="74.9186%" y="821" width="0.4072%" height="15" fill="rgb(212,59,25)" fg:x="920" fg:w="5"/><text x="75.1686%" y="831.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (4 samples, 0.33%)</title><rect x="75.0000%" y="805" width="0.3257%" height="15" fill="rgb(221,87,20)" fg:x="921" fg:w="4"/><text x="75.2500%" y="815.50"></text></g><g><title>engine::session::Session::check_for_changes (4 samples, 0.33%)</title><rect x="75.0000%" y="789" width="0.3257%" height="15" fill="rgb(213,74,28)" fg:x="921" fg:w="4"/><text x="75.2500%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.2443%" y="773" width="0.0814%" height="15" fill="rgb(224,132,34)" fg:x="924" fg:w="1"/><text x="75.4943%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.2443%" y="757" width="0.0814%" height="15" fill="rgb(222,101,24)" fg:x="924" fg:w="1"/><text x="75.4943%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.2443%" y="741" width="0.0814%" height="15" fill="rgb(254,142,4)" fg:x="924" fg:w="1"/><text x="75.4943%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.2443%" y="725" width="0.0814%" height="15" fill="rgb(230,229,49)" fg:x="924" fg:w="1"/><text x="75.4943%" y="735.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="75.3257%" y="837" width="0.0814%" height="15" fill="rgb(238,70,47)" fg:x="925" fg:w="1"/><text x="75.5757%" y="847.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="75.3257%" y="821" width="0.0814%" height="15" fill="rgb(231,160,17)" fg:x="925" fg:w="1"/><text x="75.5757%" y="831.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="75.3257%" y="805" width="0.0814%" height="15" fill="rgb(218,68,53)" fg:x="925" fg:w="1"/><text x="75.5757%" y="815.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="75.3257%" y="789" width="0.0814%" height="15" fill="rgb(236,111,10)" fg:x="925" fg:w="1"/><text x="75.5757%" y="799.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="75.3257%" y="773" width="0.0814%" height="15" fill="rgb(224,34,41)" fg:x="925" fg:w="1"/><text x="75.5757%" y="783.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.3257%" y="757" width="0.0814%" height="15" fill="rgb(241,118,19)" fg:x="925" fg:w="1"/><text x="75.5757%" y="767.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="75.3257%" y="741" width="0.0814%" height="15" fill="rgb(238,129,25)" fg:x="925" fg:w="1"/><text x="75.5757%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.3257%" y="725" width="0.0814%" height="15" fill="rgb(238,22,31)" fg:x="925" fg:w="1"/><text x="75.5757%" y="735.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.3257%" y="709" width="0.0814%" height="15" fill="rgb(222,174,48)" fg:x="925" fg:w="1"/><text x="75.5757%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="75.4072%" y="789" width="0.0814%" height="15" fill="rgb(206,152,40)" fg:x="926" fg:w="1"/><text x="75.6572%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.4072%" y="773" width="0.0814%" height="15" fill="rgb(218,99,54)" fg:x="926" fg:w="1"/><text x="75.6572%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.4072%" y="757" width="0.0814%" height="15" fill="rgb(220,174,26)" fg:x="926" fg:w="1"/><text x="75.6572%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="75.4072%" y="741" width="0.0814%" height="15" fill="rgb(245,116,9)" fg:x="926" fg:w="1"/><text x="75.6572%" y="751.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="75.4886%" y="741" width="0.0814%" height="15" fill="rgb(209,72,35)" fg:x="927" fg:w="1"/><text x="75.7386%" y="751.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.4886%" y="725" width="0.0814%" height="15" fill="rgb(226,126,21)" fg:x="927" fg:w="1"/><text x="75.7386%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.4886%" y="709" width="0.0814%" height="15" fill="rgb(227,192,1)" fg:x="927" fg:w="1"/><text x="75.7386%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.4886%" y="693" width="0.0814%" height="15" fill="rgb(237,180,29)" fg:x="927" fg:w="1"/><text x="75.7386%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.4886%" y="677" width="0.0814%" height="15" fill="rgb(230,197,35)" fg:x="927" fg:w="1"/><text x="75.7386%" y="687.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="75.4886%" y="757" width="0.1629%" height="15" fill="rgb(246,193,31)" fg:x="927" fg:w="2"/><text x="75.7386%" y="767.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.5700%" y="741" width="0.0814%" height="15" fill="rgb(241,36,4)" fg:x="928" fg:w="1"/><text x="75.8200%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.5700%" y="725" width="0.0814%" height="15" fill="rgb(241,130,17)" fg:x="928" fg:w="1"/><text x="75.8200%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.5700%" y="709" width="0.0814%" height="15" fill="rgb(206,137,32)" fg:x="928" fg:w="1"/><text x="75.8200%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.5700%" y="693" width="0.0814%" height="15" fill="rgb(237,228,51)" fg:x="928" fg:w="1"/><text x="75.8200%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.5700%" y="677" width="0.0814%" height="15" fill="rgb(243,6,42)" fg:x="928" fg:w="1"/><text x="75.8200%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.7329%" y="709" width="0.0814%" height="15" fill="rgb(251,74,28)" fg:x="930" fg:w="1"/><text x="75.9829%" y="719.50"></text></g><g><title>engine::session::Session::flush (6 samples, 0.49%)</title><rect x="75.4072%" y="821" width="0.4886%" height="15" fill="rgb(218,20,49)" fg:x="926" fg:w="6"/><text x="75.6572%" y="831.50"></text></g><g><title>engine::session::Session::save_entity_changes (6 samples, 0.49%)</title><rect x="75.4072%" y="805" width="0.4886%" height="15" fill="rgb(238,28,14)" fg:x="926" fg:w="6"/><text x="75.6572%" y="815.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (5 samples, 0.41%)</title><rect x="75.4886%" y="789" width="0.4072%" height="15" fill="rgb(229,40,46)" fg:x="927" fg:w="5"/><text x="75.7386%" y="799.50"></text></g><g><title>engine::session::Session::check_for_changes (5 samples, 0.41%)</title><rect x="75.4886%" y="773" width="0.4072%" height="15" fill="rgb(244,195,20)" fg:x="927" fg:w="5"/><text x="75.7386%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="75.6515%" y="757" width="0.2443%" height="15" fill="rgb(253,56,35)" fg:x="929" fg:w="3"/><text x="75.9015%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="75.6515%" y="741" width="0.2443%" height="15" fill="rgb(210,149,44)" fg:x="929" fg:w="3"/><text x="75.9015%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="75.6515%" y="725" width="0.2443%" height="15" fill="rgb(240,135,12)" fg:x="929" fg:w="3"/><text x="75.9015%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.8143%" y="709" width="0.0814%" height="15" fill="rgb(251,24,50)" fg:x="931" fg:w="1"/><text x="76.0643%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.8143%" y="693" width="0.0814%" height="15" fill="rgb(243,200,47)" fg:x="931" fg:w="1"/><text x="76.0643%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.8143%" y="677" width="0.0814%" height="15" fill="rgb(224,166,26)" fg:x="931" fg:w="1"/><text x="76.0643%" y="687.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="75.8958%" y="821" width="0.0814%" height="15" fill="rgb(233,0,47)" fg:x="932" fg:w="1"/><text x="76.1458%" y="831.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="75.8958%" y="805" width="0.0814%" height="15" fill="rgb(253,80,5)" fg:x="932" fg:w="1"/><text x="76.1458%" y="815.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="75.8958%" y="789" width="0.0814%" height="15" fill="rgb(214,133,25)" fg:x="932" fg:w="1"/><text x="76.1458%" y="799.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="75.8958%" y="773" width="0.0814%" height="15" fill="rgb(209,27,14)" fg:x="932" fg:w="1"/><text x="76.1458%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.8958%" y="757" width="0.0814%" height="15" fill="rgb(219,102,51)" fg:x="932" fg:w="1"/><text x="76.1458%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.8958%" y="741" width="0.0814%" height="15" fill="rgb(237,18,16)" fg:x="932" fg:w="1"/><text x="76.1458%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="75.8958%" y="725" width="0.0814%" height="15" fill="rgb(241,85,17)" fg:x="932" fg:w="1"/><text x="76.1458%" y="735.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.8958%" y="709" width="0.0814%" height="15" fill="rgb(236,90,42)" fg:x="932" fg:w="1"/><text x="76.1458%" y="719.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (15 samples, 1.22%)</title><rect x="74.8371%" y="853" width="1.2215%" height="15" fill="rgb(249,57,21)" fg:x="919" fg:w="15"/><text x="75.0871%" y="863.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (8 samples, 0.65%)</title><rect x="75.4072%" y="837" width="0.6515%" height="15" fill="rgb(243,12,36)" fg:x="926" fg:w="8"/><text x="75.6572%" y="847.50"></text></g><g><title>plugins_core::build::Build::with_username (1 samples, 0.08%)</title><rect x="75.9772%" y="821" width="0.0814%" height="15" fill="rgb(253,128,47)" fg:x="933" fg:w="1"/><text x="76.2272%" y="831.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="75.9772%" y="805" width="0.0814%" height="15" fill="rgb(207,33,20)" fg:x="933" fg:w="1"/><text x="76.2272%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.9772%" y="789" width="0.0814%" height="15" fill="rgb(233,215,35)" fg:x="933" fg:w="1"/><text x="76.2272%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.9772%" y="773" width="0.0814%" height="15" fill="rgb(249,188,52)" fg:x="933" fg:w="1"/><text x="76.2272%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="75.9772%" y="757" width="0.0814%" height="15" fill="rgb(225,12,32)" fg:x="933" fg:w="1"/><text x="76.2272%" y="767.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.9772%" y="741" width="0.0814%" height="15" fill="rgb(247,98,14)" fg:x="933" fg:w="1"/><text x="76.2272%" y="751.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="76.0586%" y="821" width="0.0814%" height="15" fill="rgb(247,219,48)" fg:x="934" fg:w="1"/><text x="76.3086%" y="831.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="76.0586%" y="805" width="0.0814%" height="15" fill="rgb(253,60,48)" fg:x="934" fg:w="1"/><text x="76.3086%" y="815.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="76.0586%" y="789" width="0.0814%" height="15" fill="rgb(245,15,52)" fg:x="934" fg:w="1"/><text x="76.3086%" y="799.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.0586%" y="773" width="0.0814%" height="15" fill="rgb(220,133,28)" fg:x="934" fg:w="1"/><text x="76.3086%" y="783.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.0586%" y="757" width="0.0814%" height="15" fill="rgb(217,180,4)" fg:x="934" fg:w="1"/><text x="76.3086%" y="767.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="76.1401%" y="773" width="0.0814%" height="15" fill="rgb(251,24,1)" fg:x="935" fg:w="1"/><text x="76.3901%" y="783.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.1401%" y="757" width="0.0814%" height="15" fill="rgb(212,185,49)" fg:x="935" fg:w="1"/><text x="76.3901%" y="767.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.2215%" y="757" width="0.0814%" height="15" fill="rgb(215,175,22)" fg:x="936" fg:w="1"/><text x="76.4715%" y="767.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="76.1401%" y="789" width="0.2443%" height="15" fill="rgb(250,205,14)" fg:x="935" fg:w="3"/><text x="76.3901%" y="799.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="76.2215%" y="773" width="0.1629%" height="15" fill="rgb(225,211,22)" fg:x="936" fg:w="2"/><text x="76.4715%" y="783.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.3029%" y="757" width="0.0814%" height="15" fill="rgb(251,179,42)" fg:x="937" fg:w="1"/><text x="76.5529%" y="767.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.3029%" y="741" width="0.0814%" height="15" fill="rgb(208,216,51)" fg:x="937" fg:w="1"/><text x="76.5529%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.3844%" y="773" width="0.0814%" height="15" fill="rgb(235,36,11)" fg:x="938" fg:w="1"/><text x="76.6344%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.3844%" y="757" width="0.0814%" height="15" fill="rgb(213,189,28)" fg:x="938" fg:w="1"/><text x="76.6344%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.3844%" y="741" width="0.0814%" height="15" fill="rgb(227,203,42)" fg:x="938" fg:w="1"/><text x="76.6344%" y="751.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.3844%" y="725" width="0.0814%" height="15" fill="rgb(244,72,36)" fg:x="938" fg:w="1"/><text x="76.6344%" y="735.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.4658%" y="741" width="0.0814%" height="15" fill="rgb(213,53,17)" fg:x="939" fg:w="1"/><text x="76.7158%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="76.5472%" y="725" width="0.0814%" height="15" fill="rgb(207,167,3)" fg:x="940" fg:w="1"/><text x="76.7972%" y="735.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityClass&gt;::serialize (2 samples, 0.16%)</title><rect x="76.5472%" y="741" width="0.1629%" height="15" fill="rgb(216,98,30)" fg:x="940" fg:w="2"/><text x="76.7972%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.6287%" y="725" width="0.0814%" height="15" fill="rgb(236,123,15)" fg:x="941" fg:w="1"/><text x="76.8787%" y="735.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.6287%" y="709" width="0.0814%" height="15" fill="rgb(248,81,50)" fg:x="941" fg:w="1"/><text x="76.8787%" y="719.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.7101%" y="741" width="0.0814%" height="15" fill="rgb(214,120,4)" fg:x="942" fg:w="1"/><text x="76.9601%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.7101%" y="725" width="0.0814%" height="15" fill="rgb(208,179,34)" fg:x="942" fg:w="1"/><text x="76.9601%" y="735.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.7101%" y="709" width="0.0814%" height="15" fill="rgb(227,140,7)" fg:x="942" fg:w="1"/><text x="76.9601%" y="719.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="76.7915%" y="725" width="0.0814%" height="15" fill="rgb(214,22,6)" fg:x="943" fg:w="1"/><text x="77.0415%" y="735.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="76.7915%" y="709" width="0.0814%" height="15" fill="rgb(207,137,27)" fg:x="943" fg:w="1"/><text x="77.0415%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.8730%" y="693" width="0.0814%" height="15" fill="rgb(210,8,46)" fg:x="944" fg:w="1"/><text x="77.1230%" y="703.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.8730%" y="677" width="0.0814%" height="15" fill="rgb(240,16,54)" fg:x="944" fg:w="1"/><text x="77.1230%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.8730%" y="661" width="0.0814%" height="15" fill="rgb(211,209,29)" fg:x="944" fg:w="1"/><text x="77.1230%" y="671.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.8730%" y="645" width="0.0814%" height="15" fill="rgb(226,228,24)" fg:x="944" fg:w="1"/><text x="77.1230%" y="655.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (8 samples, 0.65%)</title><rect x="76.4658%" y="773" width="0.6515%" height="15" fill="rgb(222,84,9)" fg:x="939" fg:w="8"/><text x="76.7158%" y="783.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.65%)</title><rect x="76.4658%" y="757" width="0.6515%" height="15" fill="rgb(234,203,30)" fg:x="939" fg:w="8"/><text x="76.7158%" y="767.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.33%)</title><rect x="76.7915%" y="741" width="0.3257%" height="15" fill="rgb(238,109,14)" fg:x="943" fg:w="4"/><text x="77.0415%" y="751.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (3 samples, 0.24%)</title><rect x="76.8730%" y="725" width="0.2443%" height="15" fill="rgb(233,206,34)" fg:x="944" fg:w="3"/><text x="77.1230%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="76.8730%" y="709" width="0.2443%" height="15" fill="rgb(220,167,47)" fg:x="944" fg:w="3"/><text x="77.1230%" y="719.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="76.9544%" y="693" width="0.1629%" height="15" fill="rgb(238,105,10)" fg:x="945" fg:w="2"/><text x="77.2044%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.0358%" y="677" width="0.0814%" height="15" fill="rgb(213,227,17)" fg:x="946" fg:w="1"/><text x="77.2858%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.0358%" y="661" width="0.0814%" height="15" fill="rgb(217,132,38)" fg:x="946" fg:w="1"/><text x="77.2858%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.0358%" y="645" width="0.0814%" height="15" fill="rgb(242,146,4)" fg:x="946" fg:w="1"/><text x="77.2858%" y="655.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="77.0358%" y="629" width="0.0814%" height="15" fill="rgb(212,61,9)" fg:x="946" fg:w="1"/><text x="77.2858%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.1173%" y="613" width="0.0814%" height="15" fill="rgb(247,126,22)" fg:x="947" fg:w="1"/><text x="77.3673%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.1173%" y="597" width="0.0814%" height="15" fill="rgb(220,196,2)" fg:x="947" fg:w="1"/><text x="77.3673%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1173%" y="581" width="0.0814%" height="15" fill="rgb(208,46,4)" fg:x="947" fg:w="1"/><text x="77.3673%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1173%" y="565" width="0.0814%" height="15" fill="rgb(252,104,46)" fg:x="947" fg:w="1"/><text x="77.3673%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1173%" y="549" width="0.0814%" height="15" fill="rgb(237,152,48)" fg:x="947" fg:w="1"/><text x="77.3673%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.1173%" y="709" width="0.1629%" height="15" fill="rgb(221,59,37)" fg:x="947" fg:w="2"/><text x="77.3673%" y="719.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.1173%" y="693" width="0.1629%" height="15" fill="rgb(209,202,51)" fg:x="947" fg:w="2"/><text x="77.3673%" y="703.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.1173%" y="677" width="0.1629%" height="15" fill="rgb(228,81,30)" fg:x="947" fg:w="2"/><text x="77.3673%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.1173%" y="661" width="0.1629%" height="15" fill="rgb(227,42,39)" fg:x="947" fg:w="2"/><text x="77.3673%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.1173%" y="645" width="0.1629%" height="15" fill="rgb(221,26,2)" fg:x="947" fg:w="2"/><text x="77.3673%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.1173%" y="629" width="0.1629%" height="15" fill="rgb(254,61,31)" fg:x="947" fg:w="2"/><text x="77.3673%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1987%" y="613" width="0.0814%" height="15" fill="rgb(222,173,38)" fg:x="948" fg:w="1"/><text x="77.4487%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1987%" y="597" width="0.0814%" height="15" fill="rgb(218,50,12)" fg:x="948" fg:w="1"/><text x="77.4487%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1987%" y="581" width="0.0814%" height="15" fill="rgb(223,88,40)" fg:x="948" fg:w="1"/><text x="77.4487%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="77.1173%" y="773" width="0.2443%" height="15" fill="rgb(237,54,19)" fg:x="947" fg:w="3"/><text x="77.3673%" y="783.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="77.1173%" y="757" width="0.2443%" height="15" fill="rgb(251,129,25)" fg:x="947" fg:w="3"/><text x="77.3673%" y="767.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="77.1173%" y="741" width="0.2443%" height="15" fill="rgb(238,97,19)" fg:x="947" fg:w="3"/><text x="77.3673%" y="751.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="77.1173%" y="725" width="0.2443%" height="15" fill="rgb(240,169,18)" fg:x="947" fg:w="3"/><text x="77.3673%" y="735.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.2801%" y="709" width="0.0814%" height="15" fill="rgb(230,187,49)" fg:x="949" fg:w="1"/><text x="77.5301%" y="719.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.2801%" y="693" width="0.0814%" height="15" fill="rgb(209,44,26)" fg:x="949" fg:w="1"/><text x="77.5301%" y="703.50"></text></g><g><title>engine::session::Session::close (17 samples, 1.38%)</title><rect x="76.0586%" y="853" width="1.3844%" height="15" fill="rgb(244,0,6)" fg:x="934" fg:w="17"/><text x="76.3086%" y="863.50"></text></g><g><title>engine::session::Session::save_entity_changes (17 samples, 1.38%)</title><rect x="76.0586%" y="837" width="1.3844%" height="15" fill="rgb(248,18,21)" fg:x="934" fg:w="17"/><text x="76.3086%" y="847.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (16 samples, 1.30%)</title><rect x="76.1401%" y="821" width="1.3029%" height="15" fill="rgb(245,180,19)" fg:x="935" fg:w="16"/><text x="76.3901%" y="831.50"></text></g><g><title>engine::session::Session::check_for_changes (16 samples, 1.30%)</title><rect x="76.1401%" y="805" width="1.3029%" height="15" fill="rgb(252,118,36)" fg:x="935" fg:w="16"/><text x="76.3901%" y="815.50"></text></g><g><title>kernel::compare::any_entity_changes (13 samples, 1.06%)</title><rect x="76.3844%" y="789" width="1.0586%" height="15" fill="rgb(210,224,19)" fg:x="938" fg:w="13"/><text x="76.6344%" y="799.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="77.3616%" y="773" width="0.0814%" height="15" fill="rgb(218,30,24)" fg:x="950" fg:w="1"/><text x="77.6116%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.6059%" y="581" width="0.0814%" height="15" fill="rgb(219,75,50)" fg:x="953" fg:w="1"/><text x="77.8559%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.6873%" y="581" width="0.0814%" height="15" fill="rgb(234,72,50)" fg:x="954" fg:w="1"/><text x="77.9373%" y="591.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="77.6873%" y="565" width="0.0814%" height="15" fill="rgb(219,100,48)" fg:x="954" fg:w="1"/><text x="77.9373%" y="575.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="77.6873%" y="549" width="0.0814%" height="15" fill="rgb(253,5,41)" fg:x="954" fg:w="1"/><text x="77.9373%" y="559.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="77.6873%" y="533" width="0.0814%" height="15" fill="rgb(247,181,11)" fg:x="954" fg:w="1"/><text x="77.9373%" y="543.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="77.6873%" y="517" width="0.0814%" height="15" fill="rgb(222,223,25)" fg:x="954" fg:w="1"/><text x="77.9373%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="77.6873%" y="501" width="0.0814%" height="15" fill="rgb(214,198,28)" fg:x="954" fg:w="1"/><text x="77.9373%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="77.6873%" y="485" width="0.0814%" height="15" fill="rgb(230,46,43)" fg:x="954" fg:w="1"/><text x="77.9373%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="77.7687%" y="533" width="0.1629%" height="15" fill="rgb(233,65,53)" fg:x="955" fg:w="2"/><text x="78.0187%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.8502%" y="517" width="0.0814%" height="15" fill="rgb(221,121,27)" fg:x="956" fg:w="1"/><text x="78.1002%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="77.7687%" y="581" width="0.2443%" height="15" fill="rgb(247,70,47)" fg:x="955" fg:w="3"/><text x="78.0187%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="77.7687%" y="565" width="0.2443%" height="15" fill="rgb(228,85,35)" fg:x="955" fg:w="3"/><text x="78.0187%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="77.7687%" y="549" width="0.2443%" height="15" fill="rgb(209,50,18)" fg:x="955" fg:w="3"/><text x="78.0187%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="77.9316%" y="533" width="0.0814%" height="15" fill="rgb(250,19,35)" fg:x="957" fg:w="1"/><text x="78.1816%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.9316%" y="517" width="0.0814%" height="15" fill="rgb(253,107,29)" fg:x="957" fg:w="1"/><text x="78.1816%" y="527.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="78.0130%" y="565" width="0.0814%" height="15" fill="rgb(252,179,29)" fg:x="958" fg:w="1"/><text x="78.2630%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.2573%" y="501" width="0.0814%" height="15" fill="rgb(238,194,6)" fg:x="961" fg:w="1"/><text x="78.5073%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (14 samples, 1.14%)</title><rect x="78.2573%" y="517" width="1.1401%" height="15" fill="rgb(238,164,29)" fg:x="961" fg:w="14"/><text x="78.5073%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.06%)</title><rect x="78.3388%" y="501" width="1.0586%" height="15" fill="rgb(224,25,9)" fg:x="962" fg:w="13"/><text x="78.5888%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="79.2345%" y="485" width="0.1629%" height="15" fill="rgb(244,153,23)" fg:x="973" fg:w="2"/><text x="79.4845%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="79.5603%" y="501" width="0.0814%" height="15" fill="rgb(212,203,14)" fg:x="977" fg:w="1"/><text x="79.8103%" y="511.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.49%)</title><rect x="79.3974%" y="517" width="0.4886%" height="15" fill="rgb(220,164,20)" fg:x="975" fg:w="6"/><text x="79.6474%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="79.6417%" y="501" width="0.2443%" height="15" fill="rgb(222,203,48)" fg:x="978" fg:w="3"/><text x="79.8917%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="79.8860%" y="501" width="0.0814%" height="15" fill="rgb(215,159,22)" fg:x="981" fg:w="1"/><text x="80.1360%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="79.8860%" y="485" width="0.0814%" height="15" fill="rgb(216,183,47)" fg:x="981" fg:w="1"/><text x="80.1360%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.8860%" y="469" width="0.0814%" height="15" fill="rgb(229,195,25)" fg:x="981" fg:w="1"/><text x="80.1360%" y="479.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="79.8860%" y="517" width="0.1629%" height="15" fill="rgb(224,132,51)" fg:x="981" fg:w="2"/><text x="80.1360%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="79.9674%" y="501" width="0.0814%" height="15" fill="rgb(240,63,7)" fg:x="982" fg:w="1"/><text x="80.2174%" y="511.50"></text></g><g><title>regex_automata::meta::reverse_inner::flatten (1 samples, 0.08%)</title><rect x="79.9674%" y="485" width="0.0814%" height="15" fill="rgb(249,182,41)" fg:x="982" fg:w="1"/><text x="80.2174%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="80.0489%" y="469" width="0.0814%" height="15" fill="rgb(243,47,26)" fg:x="983" fg:w="1"/><text x="80.2989%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.0489%" y="453" width="0.0814%" height="15" fill="rgb(233,48,2)" fg:x="983" fg:w="1"/><text x="80.2989%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.0489%" y="437" width="0.0814%" height="15" fill="rgb(244,165,34)" fg:x="983" fg:w="1"/><text x="80.2989%" y="447.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="80.2117%" y="453" width="0.0814%" height="15" fill="rgb(207,89,7)" fg:x="985" fg:w="1"/><text x="80.4617%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="80.2932%" y="453" width="0.1629%" height="15" fill="rgb(244,117,36)" fg:x="986" fg:w="2"/><text x="80.5432%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="80.2932%" y="437" width="0.1629%" height="15" fill="rgb(226,144,34)" fg:x="986" fg:w="2"/><text x="80.5432%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="80.2932%" y="421" width="0.1629%" height="15" fill="rgb(213,23,19)" fg:x="986" fg:w="2"/><text x="80.5432%" y="431.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="80.2932%" y="405" width="0.1629%" height="15" fill="rgb(217,75,12)" fg:x="986" fg:w="2"/><text x="80.5432%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="80.4560%" y="437" width="0.0814%" height="15" fill="rgb(224,159,17)" fg:x="988" fg:w="1"/><text x="80.7060%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.4560%" y="421" width="0.0814%" height="15" fill="rgb(217,118,1)" fg:x="988" fg:w="1"/><text x="80.7060%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.4560%" y="405" width="0.0814%" height="15" fill="rgb(232,180,48)" fg:x="988" fg:w="1"/><text x="80.7060%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.4560%" y="389" width="0.0814%" height="15" fill="rgb(230,27,33)" fg:x="988" fg:w="1"/><text x="80.7060%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (37 samples, 3.01%)</title><rect x="80.4560%" y="453" width="3.0130%" height="15" fill="rgb(205,31,21)" fg:x="988" fg:w="37"/><text x="80.7060%" y="463.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (36 samples, 2.93%)</title><rect x="80.5375%" y="437" width="2.9316%" height="15" fill="rgb(253,59,4)" fg:x="989" fg:w="36"/><text x="80.7875%" y="447.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (36 samples, 2.93%)</title><rect x="80.5375%" y="421" width="2.9316%" height="15" fill="rgb(224,201,9)" fg:x="989" fg:w="36"/><text x="80.7875%" y="431.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 3.50%)</title><rect x="80.0489%" y="501" width="3.5016%" height="15" fill="rgb(229,206,30)" fg:x="983" fg:w="43"/><text x="80.2989%" y="511.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (43 samples, 3.50%)</title><rect x="80.0489%" y="485" width="3.5016%" height="15" fill="rgb(212,67,47)" fg:x="983" fg:w="43"/><text x="80.2989%" y="495.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (42 samples, 3.42%)</title><rect x="80.1303%" y="469" width="3.4202%" height="15" fill="rgb(211,96,50)" fg:x="984" fg:w="42"/><text x="80.3803%" y="479.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="83.4691%" y="453" width="0.0814%" height="15" fill="rgb(252,114,18)" fg:x="1025" fg:w="1"/><text x="83.7191%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="83.7134%" y="485" width="0.1629%" height="15" fill="rgb(223,58,37)" fg:x="1028" fg:w="2"/><text x="83.9634%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.7948%" y="469" width="0.0814%" height="15" fill="rgb(237,70,4)" fg:x="1029" fg:w="1"/><text x="84.0448%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.7948%" y="453" width="0.0814%" height="15" fill="rgb(244,85,46)" fg:x="1029" fg:w="1"/><text x="84.0448%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.7948%" y="437" width="0.0814%" height="15" fill="rgb(223,39,52)" fg:x="1029" fg:w="1"/><text x="84.0448%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.65%)</title><rect x="83.5505%" y="501" width="0.6515%" height="15" fill="rgb(218,200,14)" fg:x="1026" fg:w="8"/><text x="83.8005%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.33%)</title><rect x="83.8762%" y="485" width="0.3257%" height="15" fill="rgb(208,171,16)" fg:x="1030" fg:w="4"/><text x="84.1262%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="84.2020%" y="485" width="0.0814%" height="15" fill="rgb(234,200,18)" fg:x="1034" fg:w="1"/><text x="84.4520%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (3 samples, 0.24%)</title><rect x="84.2020%" y="501" width="0.2443%" height="15" fill="rgb(228,45,11)" fg:x="1034" fg:w="3"/><text x="84.4520%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="84.2834%" y="485" width="0.1629%" height="15" fill="rgb(237,182,11)" fg:x="1035" fg:w="2"/><text x="84.5334%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="84.2834%" y="469" width="0.1629%" height="15" fill="rgb(241,175,49)" fg:x="1035" fg:w="2"/><text x="84.5334%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.3648%" y="453" width="0.0814%" height="15" fill="rgb(247,38,35)" fg:x="1036" fg:w="1"/><text x="84.6148%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (55 samples, 4.48%)</title><rect x="80.0489%" y="517" width="4.4788%" height="15" fill="rgb(228,39,49)" fg:x="983" fg:w="55"/><text x="80.2989%" y="527.50">regex..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="84.4463%" y="501" width="0.0814%" height="15" fill="rgb(226,101,26)" fg:x="1037" fg:w="1"/><text x="84.6963%" y="511.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="84.4463%" y="485" width="0.0814%" height="15" fill="rgb(206,141,19)" fg:x="1037" fg:w="1"/><text x="84.6963%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.4463%" y="469" width="0.0814%" height="15" fill="rgb(211,200,13)" fg:x="1037" fg:w="1"/><text x="84.6963%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.4463%" y="453" width="0.0814%" height="15" fill="rgb(241,121,6)" fg:x="1037" fg:w="1"/><text x="84.6963%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.4463%" y="437" width="0.0814%" height="15" fill="rgb(234,221,29)" fg:x="1037" fg:w="1"/><text x="84.6963%" y="447.50"></text></g><g><title>regex_automata::meta::strategy::new (80 samples, 6.51%)</title><rect x="78.0945%" y="533" width="6.5147%" height="15" fill="rgb(229,136,5)" fg:x="959" fg:w="80"/><text x="78.3445%" y="543.50">regex_aut..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="84.5277%" y="517" width="0.0814%" height="15" fill="rgb(238,36,11)" fg:x="1038" fg:w="1"/><text x="84.7777%" y="527.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="84.6091%" y="533" width="0.0814%" height="15" fill="rgb(251,55,41)" fg:x="1039" fg:w="1"/><text x="84.8591%" y="543.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="84.6091%" y="517" width="0.0814%" height="15" fill="rgb(242,34,40)" fg:x="1039" fg:w="1"/><text x="84.8591%" y="527.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="84.6091%" y="501" width="0.0814%" height="15" fill="rgb(215,42,17)" fg:x="1039" fg:w="1"/><text x="84.8591%" y="511.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="84.6091%" y="485" width="0.0814%" height="15" fill="rgb(207,44,46)" fg:x="1039" fg:w="1"/><text x="84.8591%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.6091%" y="469" width="0.0814%" height="15" fill="rgb(211,206,28)" fg:x="1039" fg:w="1"/><text x="84.8591%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.6091%" y="453" width="0.0814%" height="15" fill="rgb(237,167,16)" fg:x="1039" fg:w="1"/><text x="84.8591%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.6091%" y="437" width="0.0814%" height="15" fill="rgb(233,66,6)" fg:x="1039" fg:w="1"/><text x="84.8591%" y="447.50"></text></g><g><title>regex::regex::string::Regex::new (83 samples, 6.76%)</title><rect x="78.0130%" y="581" width="6.7590%" height="15" fill="rgb(246,123,29)" fg:x="958" fg:w="83"/><text x="78.2630%" y="591.50">regex::re..</text></g><g><title>regex::builders::Builder::build_one_string (82 samples, 6.68%)</title><rect x="78.0945%" y="565" width="6.6775%" height="15" fill="rgb(209,62,40)" fg:x="959" fg:w="82"/><text x="78.3445%" y="575.50">regex::bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (82 samples, 6.68%)</title><rect x="78.0945%" y="549" width="6.6775%" height="15" fill="rgb(218,4,25)" fg:x="959" fg:w="82"/><text x="78.3445%" y="559.50">regex_aut..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="84.6906%" y="533" width="0.0814%" height="15" fill="rgb(253,91,49)" fg:x="1040" fg:w="1"/><text x="84.9406%" y="543.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="84.6906%" y="517" width="0.0814%" height="15" fill="rgb(228,155,29)" fg:x="1040" fg:w="1"/><text x="84.9406%" y="527.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="84.6906%" y="501" width="0.0814%" height="15" fill="rgb(243,57,37)" fg:x="1040" fg:w="1"/><text x="84.9406%" y="511.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="84.6906%" y="485" width="0.0814%" height="15" fill="rgb(244,167,17)" fg:x="1040" fg:w="1"/><text x="84.9406%" y="495.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="84.6906%" y="469" width="0.0814%" height="15" fill="rgb(207,181,38)" fg:x="1040" fg:w="1"/><text x="84.9406%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="84.7720%" y="517" width="0.2443%" height="15" fill="rgb(211,8,23)" fg:x="1041" fg:w="3"/><text x="85.0220%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="84.9349%" y="501" width="0.0814%" height="15" fill="rgb(235,11,44)" fg:x="1043" fg:w="1"/><text x="85.1849%" y="511.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (92 samples, 7.49%)</title><rect x="77.6059%" y="597" width="7.4919%" height="15" fill="rgb(248,18,52)" fg:x="953" fg:w="92"/><text x="77.8559%" y="607.50">indefinite..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.33%)</title><rect x="84.7720%" y="581" width="0.3257%" height="15" fill="rgb(208,4,7)" fg:x="1041" fg:w="4"/><text x="85.0220%" y="591.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.33%)</title><rect x="84.7720%" y="565" width="0.3257%" height="15" fill="rgb(240,17,39)" fg:x="1041" fg:w="4"/><text x="85.0220%" y="575.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.33%)</title><rect x="84.7720%" y="549" width="0.3257%" height="15" fill="rgb(207,170,3)" fg:x="1041" fg:w="4"/><text x="85.0220%" y="559.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.33%)</title><rect x="84.7720%" y="533" width="0.3257%" height="15" fill="rgb(236,100,52)" fg:x="1041" fg:w="4"/><text x="85.0220%" y="543.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="85.0163%" y="517" width="0.0814%" height="15" fill="rgb(246,78,51)" fg:x="1044" fg:w="1"/><text x="85.2663%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.0163%" y="501" width="0.0814%" height="15" fill="rgb(211,17,15)" fg:x="1044" fg:w="1"/><text x="85.2663%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.0163%" y="485" width="0.0814%" height="15" fill="rgb(209,59,46)" fg:x="1044" fg:w="1"/><text x="85.2663%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.0163%" y="469" width="0.0814%" height="15" fill="rgb(210,92,25)" fg:x="1044" fg:w="1"/><text x="85.2663%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.0977%" y="581" width="0.0814%" height="15" fill="rgb(238,174,52)" fg:x="1045" fg:w="1"/><text x="85.3477%" y="591.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="85.1792%" y="549" width="0.0814%" height="15" fill="rgb(230,73,7)" fg:x="1046" fg:w="1"/><text x="85.4292%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="85.1792%" y="533" width="0.0814%" height="15" fill="rgb(243,124,40)" fg:x="1046" fg:w="1"/><text x="85.4292%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::OnePass&gt; (1 samples, 0.08%)</title><rect x="85.1792%" y="517" width="0.0814%" height="15" fill="rgb(244,170,11)" fg:x="1046" fg:w="1"/><text x="85.4292%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="85.1792%" y="581" width="0.2443%" height="15" fill="rgb(207,114,54)" fg:x="1046" fg:w="3"/><text x="85.4292%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="85.1792%" y="565" width="0.2443%" height="15" fill="rgb(205,42,20)" fg:x="1046" fg:w="3"/><text x="85.4292%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="85.2606%" y="549" width="0.1629%" height="15" fill="rgb(230,30,28)" fg:x="1047" fg:w="2"/><text x="85.5106%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.3420%" y="533" width="0.0814%" height="15" fill="rgb(205,73,54)" fg:x="1048" fg:w="1"/><text x="85.5920%" y="543.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="85.4235%" y="565" width="0.0814%" height="15" fill="rgb(254,227,23)" fg:x="1049" fg:w="1"/><text x="85.6735%" y="575.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="85.4235%" y="549" width="0.0814%" height="15" fill="rgb(228,202,34)" fg:x="1049" fg:w="1"/><text x="85.6735%" y="559.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="85.4235%" y="533" width="0.0814%" height="15" fill="rgb(222,225,37)" fg:x="1049" fg:w="1"/><text x="85.6735%" y="543.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="85.4235%" y="517" width="0.0814%" height="15" fill="rgb(221,14,54)" fg:x="1049" fg:w="1"/><text x="85.6735%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="85.5049%" y="517" width="0.2443%" height="15" fill="rgb(254,102,2)" fg:x="1050" fg:w="3"/><text x="85.7549%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="85.5049%" y="501" width="0.2443%" height="15" fill="rgb(232,104,17)" fg:x="1050" fg:w="3"/><text x="85.7549%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.6678%" y="485" width="0.0814%" height="15" fill="rgb(250,220,14)" fg:x="1052" fg:w="1"/><text x="85.9178%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="85.6678%" y="469" width="0.0814%" height="15" fill="rgb(241,158,9)" fg:x="1052" fg:w="1"/><text x="85.9178%" y="479.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.41%)</title><rect x="85.4235%" y="581" width="0.4072%" height="15" fill="rgb(246,9,43)" fg:x="1049" fg:w="5"/><text x="85.6735%" y="591.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.33%)</title><rect x="85.5049%" y="565" width="0.3257%" height="15" fill="rgb(206,73,33)" fg:x="1050" fg:w="4"/><text x="85.7549%" y="575.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.33%)</title><rect x="85.5049%" y="549" width="0.3257%" height="15" fill="rgb(222,79,8)" fg:x="1050" fg:w="4"/><text x="85.7549%" y="559.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.33%)</title><rect x="85.5049%" y="533" width="0.3257%" height="15" fill="rgb(234,8,54)" fg:x="1050" fg:w="4"/><text x="85.7549%" y="543.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="85.7492%" y="517" width="0.0814%" height="15" fill="rgb(209,134,38)" fg:x="1053" fg:w="1"/><text x="85.9992%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="85.7492%" y="501" width="0.0814%" height="15" fill="rgb(230,127,29)" fg:x="1053" fg:w="1"/><text x="85.9992%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.7492%" y="485" width="0.0814%" height="15" fill="rgb(242,44,41)" fg:x="1053" fg:w="1"/><text x="85.9992%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.8306%" y="533" width="0.0814%" height="15" fill="rgb(222,56,43)" fg:x="1054" fg:w="1"/><text x="86.0806%" y="543.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.8306%" y="517" width="0.0814%" height="15" fill="rgb(238,39,47)" fg:x="1054" fg:w="1"/><text x="86.0806%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.8306%" y="501" width="0.0814%" height="15" fill="rgb(226,79,43)" fg:x="1054" fg:w="1"/><text x="86.0806%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="85.9121%" y="501" width="0.0814%" height="15" fill="rgb(242,105,53)" fg:x="1055" fg:w="1"/><text x="86.1621%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.9121%" y="485" width="0.0814%" height="15" fill="rgb(251,132,46)" fg:x="1055" fg:w="1"/><text x="86.1621%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.9121%" y="469" width="0.0814%" height="15" fill="rgb(231,77,14)" fg:x="1055" fg:w="1"/><text x="86.1621%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.9121%" y="453" width="0.0814%" height="15" fill="rgb(240,135,9)" fg:x="1055" fg:w="1"/><text x="86.1621%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="85.9935%" y="501" width="0.0814%" height="15" fill="rgb(248,109,14)" fg:x="1056" fg:w="1"/><text x="86.2435%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="85.9935%" y="485" width="0.0814%" height="15" fill="rgb(227,146,52)" fg:x="1056" fg:w="1"/><text x="86.2435%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="85.9121%" y="533" width="0.2443%" height="15" fill="rgb(232,54,3)" fg:x="1055" fg:w="3"/><text x="86.1621%" y="543.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="85.9121%" y="517" width="0.2443%" height="15" fill="rgb(229,201,43)" fg:x="1055" fg:w="3"/><text x="86.1621%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="86.0749%" y="501" width="0.0814%" height="15" fill="rgb(252,161,33)" fg:x="1057" fg:w="1"/><text x="86.3249%" y="511.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.0749%" y="485" width="0.0814%" height="15" fill="rgb(226,146,40)" fg:x="1057" fg:w="1"/><text x="86.3249%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.1564%" y="517" width="0.0814%" height="15" fill="rgb(219,47,25)" fg:x="1058" fg:w="1"/><text x="86.4064%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (13 samples, 1.06%)</title><rect x="86.2378%" y="517" width="1.0586%" height="15" fill="rgb(250,135,13)" fg:x="1059" fg:w="13"/><text x="86.4878%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.06%)</title><rect x="86.2378%" y="501" width="1.0586%" height="15" fill="rgb(219,229,18)" fg:x="1059" fg:w="13"/><text x="86.4878%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="87.1336%" y="485" width="0.1629%" height="15" fill="rgb(217,152,27)" fg:x="1070" fg:w="2"/><text x="87.3836%" y="495.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="87.2964%" y="517" width="0.0814%" height="15" fill="rgb(225,71,47)" fg:x="1072" fg:w="1"/><text x="87.5464%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.3779%" y="485" width="0.0814%" height="15" fill="rgb(220,139,14)" fg:x="1073" fg:w="1"/><text x="87.6279%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.3779%" y="469" width="0.0814%" height="15" fill="rgb(247,54,32)" fg:x="1073" fg:w="1"/><text x="87.6279%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.3779%" y="453" width="0.0814%" height="15" fill="rgb(252,131,39)" fg:x="1073" fg:w="1"/><text x="87.6279%" y="463.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="87.4593%" y="485" width="0.1629%" height="15" fill="rgb(210,108,39)" fg:x="1074" fg:w="2"/><text x="87.7093%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="87.4593%" y="469" width="0.1629%" height="15" fill="rgb(205,23,29)" fg:x="1074" fg:w="2"/><text x="87.7093%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="87.4593%" y="453" width="0.1629%" height="15" fill="rgb(246,139,46)" fg:x="1074" fg:w="2"/><text x="87.7093%" y="463.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="87.4593%" y="437" width="0.1629%" height="15" fill="rgb(250,81,26)" fg:x="1074" fg:w="2"/><text x="87.7093%" y="447.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (5 samples, 0.41%)</title><rect x="87.3779%" y="517" width="0.4072%" height="15" fill="rgb(214,104,7)" fg:x="1073" fg:w="5"/><text x="87.6279%" y="527.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (5 samples, 0.41%)</title><rect x="87.3779%" y="501" width="0.4072%" height="15" fill="rgb(233,189,8)" fg:x="1073" fg:w="5"/><text x="87.6279%" y="511.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="87.6221%" y="485" width="0.1629%" height="15" fill="rgb(228,141,17)" fg:x="1076" fg:w="2"/><text x="87.8721%" y="495.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="87.6221%" y="469" width="0.1629%" height="15" fill="rgb(247,157,1)" fg:x="1076" fg:w="2"/><text x="87.8721%" y="479.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="87.6221%" y="453" width="0.1629%" height="15" fill="rgb(249,225,5)" fg:x="1076" fg:w="2"/><text x="87.8721%" y="463.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="87.7850%" y="517" width="0.0814%" height="15" fill="rgb(242,55,13)" fg:x="1078" fg:w="1"/><text x="88.0350%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="87.7850%" y="501" width="0.0814%" height="15" fill="rgb(230,49,50)" fg:x="1078" fg:w="1"/><text x="88.0350%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="87.7850%" y="485" width="0.0814%" height="15" fill="rgb(241,111,38)" fg:x="1078" fg:w="1"/><text x="88.0350%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="87.7850%" y="469" width="0.0814%" height="15" fill="rgb(252,155,4)" fg:x="1078" fg:w="1"/><text x="88.0350%" y="479.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="88.1922%" y="405" width="0.0814%" height="15" fill="rgb(212,69,32)" fg:x="1083" fg:w="1"/><text x="88.4422%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.2736%" y="405" width="0.0814%" height="15" fill="rgb(243,107,47)" fg:x="1084" fg:w="1"/><text x="88.5236%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="88.3550%" y="405" width="0.1629%" height="15" fill="rgb(247,130,12)" fg:x="1085" fg:w="2"/><text x="88.6050%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.4365%" y="389" width="0.0814%" height="15" fill="rgb(233,74,16)" fg:x="1086" fg:w="1"/><text x="88.6865%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.4365%" y="373" width="0.0814%" height="15" fill="rgb(208,58,18)" fg:x="1086" fg:w="1"/><text x="88.6865%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.4365%" y="357" width="0.0814%" height="15" fill="rgb(242,225,1)" fg:x="1086" fg:w="1"/><text x="88.6865%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="88.5179%" y="405" width="0.0814%" height="15" fill="rgb(249,39,40)" fg:x="1087" fg:w="1"/><text x="88.7679%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.5179%" y="389" width="0.0814%" height="15" fill="rgb(207,72,44)" fg:x="1087" fg:w="1"/><text x="88.7679%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.5179%" y="373" width="0.0814%" height="15" fill="rgb(215,193,12)" fg:x="1087" fg:w="1"/><text x="88.7679%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.5179%" y="357" width="0.0814%" height="15" fill="rgb(248,41,39)" fg:x="1087" fg:w="1"/><text x="88.7679%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.8436%" y="373" width="0.0814%" height="15" fill="rgb(253,85,4)" fg:x="1091" fg:w="1"/><text x="89.0936%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.0065%" y="357" width="0.0814%" height="15" fill="rgb(243,70,31)" fg:x="1093" fg:w="1"/><text x="89.2565%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (7 samples, 0.57%)</title><rect x="88.5993%" y="405" width="0.5700%" height="15" fill="rgb(253,195,26)" fg:x="1088" fg:w="7"/><text x="88.8493%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.41%)</title><rect x="88.7622%" y="389" width="0.4072%" height="15" fill="rgb(243,42,11)" fg:x="1090" fg:w="5"/><text x="89.0122%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="88.9251%" y="373" width="0.2443%" height="15" fill="rgb(239,66,17)" fg:x="1092" fg:w="3"/><text x="89.1751%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="89.0879%" y="357" width="0.0814%" height="15" fill="rgb(217,132,21)" fg:x="1094" fg:w="1"/><text x="89.3379%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.0879%" y="341" width="0.0814%" height="15" fill="rgb(252,202,21)" fg:x="1094" fg:w="1"/><text x="89.3379%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.0879%" y="325" width="0.0814%" height="15" fill="rgb(233,98,36)" fg:x="1094" fg:w="1"/><text x="89.3379%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.0879%" y="309" width="0.0814%" height="15" fill="rgb(216,153,54)" fg:x="1094" fg:w="1"/><text x="89.3379%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="89.1694%" y="389" width="0.0814%" height="15" fill="rgb(250,99,7)" fg:x="1095" fg:w="1"/><text x="89.4194%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.1694%" y="373" width="0.0814%" height="15" fill="rgb(207,56,50)" fg:x="1095" fg:w="1"/><text x="89.4194%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.1694%" y="357" width="0.0814%" height="15" fill="rgb(244,61,34)" fg:x="1095" fg:w="1"/><text x="89.4194%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.1694%" y="341" width="0.0814%" height="15" fill="rgb(241,50,38)" fg:x="1095" fg:w="1"/><text x="89.4194%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (58 samples, 4.72%)</title><rect x="89.1694%" y="405" width="4.7231%" height="15" fill="rgb(212,166,30)" fg:x="1095" fg:w="58"/><text x="89.4194%" y="415.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (57 samples, 4.64%)</title><rect x="89.2508%" y="389" width="4.6417%" height="15" fill="rgb(249,127,32)" fg:x="1096" fg:w="57"/><text x="89.5008%" y="399.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (57 samples, 4.64%)</title><rect x="89.2508%" y="373" width="4.6417%" height="15" fill="rgb(209,103,0)" fg:x="1096" fg:w="57"/><text x="89.5008%" y="383.50">alloc..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="93.8925%" y="405" width="0.1629%" height="15" fill="rgb(238,209,51)" fg:x="1153" fg:w="2"/><text x="94.1425%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 6.27%)</title><rect x="87.8664%" y="501" width="6.2704%" height="15" fill="rgb(237,56,23)" fg:x="1079" fg:w="77"/><text x="88.1164%" y="511.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (77 samples, 6.27%)</title><rect x="87.8664%" y="485" width="6.2704%" height="15" fill="rgb(215,153,46)" fg:x="1079" fg:w="77"/><text x="88.1164%" y="495.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (77 samples, 6.27%)</title><rect x="87.8664%" y="469" width="6.2704%" height="15" fill="rgb(224,49,31)" fg:x="1079" fg:w="77"/><text x="88.1164%" y="479.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (77 samples, 6.27%)</title><rect x="87.8664%" y="453" width="6.2704%" height="15" fill="rgb(250,18,42)" fg:x="1079" fg:w="77"/><text x="88.1164%" y="463.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (77 samples, 6.27%)</title><rect x="87.8664%" y="437" width="6.2704%" height="15" fill="rgb(215,176,39)" fg:x="1079" fg:w="77"/><text x="88.1164%" y="447.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (77 samples, 6.27%)</title><rect x="87.8664%" y="421" width="6.2704%" height="15" fill="rgb(223,77,29)" fg:x="1079" fg:w="77"/><text x="88.1164%" y="431.50">regex_au..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="94.0554%" y="405" width="0.0814%" height="15" fill="rgb(234,94,52)" fg:x="1155" fg:w="1"/><text x="94.3054%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.0554%" y="389" width="0.0814%" height="15" fill="rgb(220,154,50)" fg:x="1155" fg:w="1"/><text x="94.3054%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="94.1368%" y="485" width="0.1629%" height="15" fill="rgb(212,11,10)" fg:x="1156" fg:w="2"/><text x="94.3868%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="94.1368%" y="501" width="0.2443%" height="15" fill="rgb(205,166,19)" fg:x="1156" fg:w="3"/><text x="94.3868%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="94.2997%" y="485" width="0.0814%" height="15" fill="rgb(244,198,16)" fg:x="1158" fg:w="1"/><text x="94.5497%" y="495.50"></text></g><g><title>regex_automata::meta::strategy::new (102 samples, 8.31%)</title><rect x="86.1564%" y="533" width="8.3062%" height="15" fill="rgb(219,69,12)" fg:x="1058" fg:w="102"/><text x="86.4064%" y="543.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (81 samples, 6.60%)</title><rect x="87.8664%" y="517" width="6.5961%" height="15" fill="rgb(245,30,7)" fg:x="1079" fg:w="81"/><text x="88.1164%" y="527.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="94.3811%" y="501" width="0.0814%" height="15" fill="rgb(218,221,48)" fg:x="1159" fg:w="1"/><text x="94.6311%" y="511.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="94.4625%" y="485" width="0.0814%" height="15" fill="rgb(216,66,15)" fg:x="1160" fg:w="1"/><text x="94.7125%" y="495.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="94.4625%" y="469" width="0.0814%" height="15" fill="rgb(226,122,50)" fg:x="1160" fg:w="1"/><text x="94.7125%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="94.4625%" y="453" width="0.0814%" height="15" fill="rgb(239,156,16)" fg:x="1160" fg:w="1"/><text x="94.7125%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="94.4625%" y="501" width="0.1629%" height="15" fill="rgb(224,27,38)" fg:x="1160" fg:w="2"/><text x="94.7125%" y="511.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="94.5440%" y="485" width="0.0814%" height="15" fill="rgb(224,39,27)" fg:x="1161" fg:w="1"/><text x="94.7940%" y="495.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="94.5440%" y="469" width="0.0814%" height="15" fill="rgb(215,92,29)" fg:x="1161" fg:w="1"/><text x="94.7940%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="94.4625%" y="533" width="0.2443%" height="15" fill="rgb(207,159,16)" fg:x="1160" fg:w="3"/><text x="94.7125%" y="543.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="94.4625%" y="517" width="0.2443%" height="15" fill="rgb(238,163,47)" fg:x="1160" fg:w="3"/><text x="94.7125%" y="527.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="94.6254%" y="501" width="0.0814%" height="15" fill="rgb(219,91,49)" fg:x="1162" fg:w="1"/><text x="94.8754%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.6254%" y="485" width="0.0814%" height="15" fill="rgb(227,167,31)" fg:x="1162" fg:w="1"/><text x="94.8754%" y="495.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="94.7883%" y="501" width="0.2443%" height="15" fill="rgb(234,80,54)" fg:x="1164" fg:w="3"/><text x="95.0383%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.9511%" y="485" width="0.0814%" height="15" fill="rgb(212,114,2)" fg:x="1166" fg:w="1"/><text x="95.2011%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.9511%" y="469" width="0.0814%" height="15" fill="rgb(234,50,24)" fg:x="1166" fg:w="1"/><text x="95.2011%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.9511%" y="453" width="0.0814%" height="15" fill="rgb(221,68,8)" fg:x="1166" fg:w="1"/><text x="95.2011%" y="463.50"></text></g><g><title>indefinite::rules::number::Number::check (124 samples, 10.10%)</title><rect x="85.0977%" y="597" width="10.0977%" height="15" fill="rgb(254,180,31)" fg:x="1045" fg:w="124"/><text x="85.3477%" y="607.50">indefinite::rul..</text></g><g><title>regex::regex::string::Regex::new (115 samples, 9.36%)</title><rect x="85.8306%" y="581" width="9.3648%" height="15" fill="rgb(247,130,50)" fg:x="1054" fg:w="115"/><text x="86.0806%" y="591.50">regex::regex:..</text></g><g><title>regex::builders::Builder::build_one_string (115 samples, 9.36%)</title><rect x="85.8306%" y="565" width="9.3648%" height="15" fill="rgb(211,109,4)" fg:x="1054" fg:w="115"/><text x="86.0806%" y="575.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (115 samples, 9.36%)</title><rect x="85.8306%" y="549" width="9.3648%" height="15" fill="rgb(238,50,21)" fg:x="1054" fg:w="115"/><text x="86.0806%" y="559.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.49%)</title><rect x="94.7068%" y="533" width="0.4886%" height="15" fill="rgb(225,57,45)" fg:x="1163" fg:w="6"/><text x="94.9568%" y="543.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.49%)</title><rect x="94.7068%" y="517" width="0.4886%" height="15" fill="rgb(209,196,50)" fg:x="1163" fg:w="6"/><text x="94.9568%" y="527.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="95.0326%" y="501" width="0.1629%" height="15" fill="rgb(242,140,13)" fg:x="1167" fg:w="2"/><text x="95.2826%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::translate::HirFrame&gt; (1 samples, 0.08%)</title><rect x="95.1140%" y="485" width="0.0814%" height="15" fill="rgb(217,111,7)" fg:x="1168" fg:w="1"/><text x="95.3640%" y="495.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="95.1954%" y="565" width="0.0814%" height="15" fill="rgb(253,193,51)" fg:x="1169" fg:w="1"/><text x="95.4454%" y="575.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="95.1954%" y="549" width="0.0814%" height="15" fill="rgb(252,70,29)" fg:x="1169" fg:w="1"/><text x="95.4454%" y="559.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="95.1954%" y="533" width="0.0814%" height="15" fill="rgb(232,127,12)" fg:x="1169" fg:w="1"/><text x="95.4454%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="95.1954%" y="517" width="0.0814%" height="15" fill="rgb(211,180,21)" fg:x="1169" fg:w="1"/><text x="95.4454%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="95.2769%" y="565" width="0.0814%" height="15" fill="rgb(229,72,13)" fg:x="1170" fg:w="1"/><text x="95.5269%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="95.2769%" y="549" width="0.0814%" height="15" fill="rgb(240,211,49)" fg:x="1170" fg:w="1"/><text x="95.5269%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="95.2769%" y="533" width="0.0814%" height="15" fill="rgb(219,149,40)" fg:x="1170" fg:w="1"/><text x="95.5269%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="95.2769%" y="517" width="0.0814%" height="15" fill="rgb(210,127,46)" fg:x="1170" fg:w="1"/><text x="95.5269%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.2769%" y="501" width="0.0814%" height="15" fill="rgb(220,106,7)" fg:x="1170" fg:w="1"/><text x="95.5269%" y="511.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="95.3583%" y="517" width="0.0814%" height="15" fill="rgb(249,31,22)" fg:x="1171" fg:w="1"/><text x="95.6083%" y="527.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="95.4397%" y="501" width="0.0814%" height="15" fill="rgb(253,1,49)" fg:x="1172" fg:w="1"/><text x="95.6897%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="95.4397%" y="485" width="0.0814%" height="15" fill="rgb(227,144,33)" fg:x="1172" fg:w="1"/><text x="95.6897%" y="495.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="95.5212%" y="501" width="0.0814%" height="15" fill="rgb(249,163,44)" fg:x="1173" fg:w="1"/><text x="95.7712%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="95.6840%" y="485" width="0.0814%" height="15" fill="rgb(234,15,39)" fg:x="1175" fg:w="1"/><text x="95.9340%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="95.6840%" y="469" width="0.0814%" height="15" fill="rgb(207,66,16)" fg:x="1175" fg:w="1"/><text x="95.9340%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="95.6840%" y="453" width="0.0814%" height="15" fill="rgb(233,112,24)" fg:x="1175" fg:w="1"/><text x="95.9340%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="95.6840%" y="437" width="0.0814%" height="15" fill="rgb(230,90,22)" fg:x="1175" fg:w="1"/><text x="95.9340%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="95.7655%" y="469" width="0.1629%" height="15" fill="rgb(229,61,13)" fg:x="1176" fg:w="2"/><text x="96.0155%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="95.9283%" y="469" width="0.0814%" height="15" fill="rgb(225,57,24)" fg:x="1178" fg:w="1"/><text x="96.1783%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="96.0098%" y="469" width="0.0814%" height="15" fill="rgb(208,169,48)" fg:x="1179" fg:w="1"/><text x="96.2598%" y="479.50"></text></g><g><title>regex_automata::meta::strategy::new (9 samples, 0.73%)</title><rect x="95.4397%" y="517" width="0.7329%" height="15" fill="rgb(244,218,51)" fg:x="1172" fg:w="9"/><text x="95.6897%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.57%)</title><rect x="95.6026%" y="501" width="0.5700%" height="15" fill="rgb(214,148,10)" fg:x="1174" fg:w="7"/><text x="95.8526%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.41%)</title><rect x="95.7655%" y="485" width="0.4072%" height="15" fill="rgb(225,174,27)" fg:x="1176" fg:w="5"/><text x="96.0155%" y="495.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="96.0912%" y="469" width="0.0814%" height="15" fill="rgb(230,96,26)" fg:x="1180" fg:w="1"/><text x="96.3412%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="96.1726%" y="517" width="0.2443%" height="15" fill="rgb(232,10,30)" fg:x="1181" fg:w="3"/><text x="96.4226%" y="527.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="96.1726%" y="501" width="0.2443%" height="15" fill="rgb(222,8,50)" fg:x="1181" fg:w="3"/><text x="96.4226%" y="511.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="96.2541%" y="485" width="0.1629%" height="15" fill="rgb(213,81,27)" fg:x="1182" fg:w="2"/><text x="96.5041%" y="495.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="96.3355%" y="469" width="0.0814%" height="15" fill="rgb(245,50,10)" fg:x="1183" fg:w="1"/><text x="96.5855%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.3355%" y="453" width="0.0814%" height="15" fill="rgb(216,100,18)" fg:x="1183" fg:w="1"/><text x="96.5855%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.3355%" y="437" width="0.0814%" height="15" fill="rgb(236,147,54)" fg:x="1183" fg:w="1"/><text x="96.5855%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.3355%" y="421" width="0.0814%" height="15" fill="rgb(205,143,26)" fg:x="1183" fg:w="1"/><text x="96.5855%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="96.4169%" y="485" width="0.0814%" height="15" fill="rgb(236,26,9)" fg:x="1184" fg:w="1"/><text x="96.6669%" y="495.50"></text></g><g><title>regex::regex::string::Regex::new (15 samples, 1.22%)</title><rect x="95.3583%" y="565" width="1.2215%" height="15" fill="rgb(221,165,53)" fg:x="1171" fg:w="15"/><text x="95.6083%" y="575.50"></text></g><g><title>regex::builders::Builder::build_one_string (15 samples, 1.22%)</title><rect x="95.3583%" y="549" width="1.2215%" height="15" fill="rgb(214,110,17)" fg:x="1171" fg:w="15"/><text x="95.6083%" y="559.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (15 samples, 1.22%)</title><rect x="95.3583%" y="533" width="1.2215%" height="15" fill="rgb(237,197,12)" fg:x="1171" fg:w="15"/><text x="95.6083%" y="543.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="96.4169%" y="517" width="0.1629%" height="15" fill="rgb(205,84,17)" fg:x="1184" fg:w="2"/><text x="96.6669%" y="527.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="96.4169%" y="501" width="0.1629%" height="15" fill="rgb(237,18,45)" fg:x="1184" fg:w="2"/><text x="96.6669%" y="511.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="96.4984%" y="485" width="0.0814%" height="15" fill="rgb(221,87,14)" fg:x="1185" fg:w="1"/><text x="96.7484%" y="495.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (239 samples, 19.46%)</title><rect x="77.4430%" y="677" width="19.4625%" height="15" fill="rgb(238,186,15)" fg:x="951" fg:w="239"/><text x="77.6930%" y="687.50">&lt;&amp;kernel::model::entry::Entry ..</text></g><g><title>plugins_core::looking::model::qualify_name (238 samples, 19.38%)</title><rect x="77.5244%" y="661" width="19.3811%" height="15" fill="rgb(208,115,11)" fg:x="952" fg:w="238"/><text x="77.7744%" y="671.50">plugins_core::looking::model::..</text></g><g><title>indefinite::indefinite (238 samples, 19.38%)</title><rect x="77.5244%" y="645" width="19.3811%" height="15" fill="rgb(254,175,0)" fg:x="952" fg:w="238"/><text x="77.7744%" y="655.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (238 samples, 19.38%)</title><rect x="77.5244%" y="629" width="19.3811%" height="15" fill="rgb(227,24,42)" fg:x="952" fg:w="238"/><text x="77.7744%" y="639.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (238 samples, 19.38%)</title><rect x="77.5244%" y="613" width="19.3811%" height="15" fill="rgb(223,211,37)" fg:x="952" fg:w="238"/><text x="77.7744%" y="623.50">indefinite::methods::apply_rul..</text></g><g><title>indefinite::rules::other::Other::run (21 samples, 1.71%)</title><rect x="95.1954%" y="597" width="1.7101%" height="15" fill="rgb(235,49,27)" fg:x="1169" fg:w="21"/><text x="95.4454%" y="607.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (21 samples, 1.71%)</title><rect x="95.1954%" y="581" width="1.7101%" height="15" fill="rgb(254,97,51)" fg:x="1169" fg:w="21"/><text x="95.4454%" y="591.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.33%)</title><rect x="96.5798%" y="565" width="0.3257%" height="15" fill="rgb(249,51,40)" fg:x="1186" fg:w="4"/><text x="96.8298%" y="575.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.33%)</title><rect x="96.5798%" y="549" width="0.3257%" height="15" fill="rgb(210,128,45)" fg:x="1186" fg:w="4"/><text x="96.8298%" y="559.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.33%)</title><rect x="96.5798%" y="533" width="0.3257%" height="15" fill="rgb(224,137,50)" fg:x="1186" fg:w="4"/><text x="96.8298%" y="543.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="96.6612%" y="517" width="0.2443%" height="15" fill="rgb(242,15,9)" fg:x="1187" fg:w="3"/><text x="96.9112%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="96.6612%" y="501" width="0.2443%" height="15" fill="rgb(233,187,41)" fg:x="1187" fg:w="3"/><text x="96.9112%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.8241%" y="485" width="0.0814%" height="15" fill="rgb(227,2,29)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.9055%" y="645" width="0.0814%" height="15" fill="rgb(222,70,3)" fg:x="1190" fg:w="1"/><text x="97.1555%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.9055%" y="629" width="0.0814%" height="15" fill="rgb(213,11,42)" fg:x="1190" fg:w="1"/><text x="97.1555%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.9055%" y="613" width="0.0814%" height="15" fill="rgb(225,150,9)" fg:x="1190" fg:w="1"/><text x="97.1555%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.9055%" y="597" width="0.0814%" height="15" fill="rgb(230,162,45)" fg:x="1190" fg:w="1"/><text x="97.1555%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.9055%" y="581" width="0.0814%" height="15" fill="rgb(222,14,52)" fg:x="1190" fg:w="1"/><text x="97.1555%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.9055%" y="565" width="0.0814%" height="15" fill="rgb(254,198,14)" fg:x="1190" fg:w="1"/><text x="97.1555%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.9055%" y="549" width="0.0814%" height="15" fill="rgb(220,217,30)" fg:x="1190" fg:w="1"/><text x="97.1555%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.9055%" y="533" width="0.0814%" height="15" fill="rgb(215,146,41)" fg:x="1190" fg:w="1"/><text x="97.1555%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.9055%" y="517" width="0.0814%" height="15" fill="rgb(217,27,36)" fg:x="1190" fg:w="1"/><text x="97.1555%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.9055%" y="501" width="0.0814%" height="15" fill="rgb(219,218,39)" fg:x="1190" fg:w="1"/><text x="97.1555%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.9055%" y="485" width="0.0814%" height="15" fill="rgb(219,4,42)" fg:x="1190" fg:w="1"/><text x="97.1555%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.9055%" y="469" width="0.0814%" height="15" fill="rgb(249,119,36)" fg:x="1190" fg:w="1"/><text x="97.1555%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.9055%" y="453" width="0.0814%" height="15" fill="rgb(209,23,33)" fg:x="1190" fg:w="1"/><text x="97.1555%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.9055%" y="437" width="0.0814%" height="15" fill="rgb(211,10,0)" fg:x="1190" fg:w="1"/><text x="97.1555%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.9055%" y="421" width="0.0814%" height="15" fill="rgb(208,99,37)" fg:x="1190" fg:w="1"/><text x="97.1555%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="96.9870%" y="645" width="0.0814%" height="15" fill="rgb(213,132,31)" fg:x="1191" fg:w="1"/><text x="97.2370%" y="655.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (242 samples, 19.71%)</title><rect x="77.4430%" y="709" width="19.7068%" height="15" fill="rgb(243,129,40)" fg:x="951" fg:w="242"/><text x="77.6930%" y="719.50">&lt;plugins_core::looking::actions..</text></g><g><title>plugins_core::looking::model::new_area_observation (242 samples, 19.71%)</title><rect x="77.4430%" y="693" width="19.7068%" height="15" fill="rgb(210,66,33)" fg:x="951" fg:w="242"/><text x="77.6930%" y="703.50">plugins_core::looking::model::n..</text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="96.9055%" y="677" width="0.2443%" height="15" fill="rgb(209,189,4)" fg:x="1190" fg:w="3"/><text x="97.1555%" y="687.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="96.9055%" y="661" width="0.2443%" height="15" fill="rgb(214,107,37)" fg:x="1190" fg:w="3"/><text x="97.1555%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.0684%" y="645" width="0.0814%" height="15" fill="rgb(245,88,54)" fg:x="1192" fg:w="1"/><text x="97.3184%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.0684%" y="629" width="0.0814%" height="15" fill="rgb(205,146,20)" fg:x="1192" fg:w="1"/><text x="97.3184%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.0684%" y="613" width="0.0814%" height="15" fill="rgb(220,161,25)" fg:x="1192" fg:w="1"/><text x="97.3184%" y="623.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.0684%" y="597" width="0.0814%" height="15" fill="rgb(215,152,15)" fg:x="1192" fg:w="1"/><text x="97.3184%" y="607.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.0684%" y="581" width="0.0814%" height="15" fill="rgb(233,192,44)" fg:x="1192" fg:w="1"/><text x="97.3184%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.0684%" y="565" width="0.0814%" height="15" fill="rgb(240,170,46)" fg:x="1192" fg:w="1"/><text x="97.3184%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.0684%" y="549" width="0.0814%" height="15" fill="rgb(207,104,33)" fg:x="1192" fg:w="1"/><text x="97.3184%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="97.1498%" y="613" width="0.0814%" height="15" fill="rgb(219,21,39)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="623.50"></text></g><g><title>kernel::model::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="97.1498%" y="597" width="0.0814%" height="15" fill="rgb(214,133,29)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="607.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="97.1498%" y="581" width="0.0814%" height="15" fill="rgb(226,93,6)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.1498%" y="565" width="0.0814%" height="15" fill="rgb(252,222,34)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="97.1498%" y="645" width="0.1629%" height="15" fill="rgb(252,92,48)" fg:x="1193" fg:w="2"/><text x="97.3998%" y="655.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="97.1498%" y="629" width="0.1629%" height="15" fill="rgb(245,223,24)" fg:x="1193" fg:w="2"/><text x="97.3998%" y="639.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="97.2313%" y="613" width="0.0814%" height="15" fill="rgb(205,176,3)" fg:x="1194" fg:w="1"/><text x="97.4813%" y="623.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="97.2313%" y="597" width="0.0814%" height="15" fill="rgb(235,151,15)" fg:x="1194" fg:w="1"/><text x="97.4813%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.2313%" y="581" width="0.0814%" height="15" fill="rgb(237,209,11)" fg:x="1194" fg:w="1"/><text x="97.4813%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.2313%" y="565" width="0.0814%" height="15" fill="rgb(243,227,24)" fg:x="1194" fg:w="1"/><text x="97.4813%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.2313%" y="549" width="0.0814%" height="15" fill="rgb(239,193,16)" fg:x="1194" fg:w="1"/><text x="97.4813%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.2313%" y="533" width="0.0814%" height="15" fill="rgb(231,27,9)" fg:x="1194" fg:w="1"/><text x="97.4813%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.2313%" y="517" width="0.0814%" height="15" fill="rgb(219,169,10)" fg:x="1194" fg:w="1"/><text x="97.4813%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="97.2313%" y="501" width="0.0814%" height="15" fill="rgb(244,229,43)" fg:x="1194" fg:w="1"/><text x="97.4813%" y="511.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (3 samples, 0.24%)</title><rect x="97.1498%" y="709" width="0.2443%" height="15" fill="rgb(254,38,20)" fg:x="1193" fg:w="3"/><text x="97.3998%" y="719.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (3 samples, 0.24%)</title><rect x="97.1498%" y="693" width="0.2443%" height="15" fill="rgb(250,47,30)" fg:x="1193" fg:w="3"/><text x="97.3998%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="97.1498%" y="677" width="0.2443%" height="15" fill="rgb(224,124,36)" fg:x="1193" fg:w="3"/><text x="97.3998%" y="687.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="97.1498%" y="661" width="0.2443%" height="15" fill="rgb(246,68,51)" fg:x="1193" fg:w="3"/><text x="97.3998%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="97.3127%" y="645" width="0.0814%" height="15" fill="rgb(253,43,49)" fg:x="1195" fg:w="1"/><text x="97.5627%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.3941%" y="629" width="0.0814%" height="15" fill="rgb(219,54,36)" fg:x="1196" fg:w="1"/><text x="97.6441%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.3941%" y="613" width="0.0814%" height="15" fill="rgb(227,133,34)" fg:x="1196" fg:w="1"/><text x="97.6441%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="97.3941%" y="645" width="0.1629%" height="15" fill="rgb(247,227,15)" fg:x="1196" fg:w="2"/><text x="97.6441%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.4756%" y="629" width="0.0814%" height="15" fill="rgb(229,96,14)" fg:x="1197" fg:w="1"/><text x="97.7256%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (3 samples, 0.24%)</title><rect x="97.3941%" y="677" width="0.2443%" height="15" fill="rgb(220,79,17)" fg:x="1196" fg:w="3"/><text x="97.6441%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="97.3941%" y="661" width="0.2443%" height="15" fill="rgb(205,131,53)" fg:x="1196" fg:w="3"/><text x="97.6441%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.5570%" y="645" width="0.0814%" height="15" fill="rgb(209,50,29)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="655.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="97.6384%" y="645" width="0.0814%" height="15" fill="rgb(245,86,46)" fg:x="1199" fg:w="1"/><text x="97.8884%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="97.6384%" y="629" width="0.0814%" height="15" fill="rgb(235,66,46)" fg:x="1199" fg:w="1"/><text x="97.8884%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.6384%" y="613" width="0.0814%" height="15" fill="rgb(232,148,31)" fg:x="1199" fg:w="1"/><text x="97.8884%" y="623.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (1 samples, 0.08%)</title><rect x="97.8013%" y="597" width="0.0814%" height="15" fill="rgb(217,149,8)" fg:x="1201" fg:w="1"/><text x="98.0513%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="97.8013%" y="581" width="0.0814%" height="15" fill="rgb(209,183,11)" fg:x="1201" fg:w="1"/><text x="98.0513%" y="591.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.8013%" y="565" width="0.0814%" height="15" fill="rgb(208,55,20)" fg:x="1201" fg:w="1"/><text x="98.0513%" y="575.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (1 samples, 0.08%)</title><rect x="97.8013%" y="549" width="0.0814%" height="15" fill="rgb(218,39,14)" fg:x="1201" fg:w="1"/><text x="98.0513%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (1 samples, 0.08%)</title><rect x="97.8013%" y="533" width="0.0814%" height="15" fill="rgb(216,169,33)" fg:x="1201" fg:w="1"/><text x="98.0513%" y="543.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.8013%" y="517" width="0.0814%" height="15" fill="rgb(233,80,24)" fg:x="1201" fg:w="1"/><text x="98.0513%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="97.8013%" y="501" width="0.0814%" height="15" fill="rgb(213,179,31)" fg:x="1201" fg:w="1"/><text x="98.0513%" y="511.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="97.8013%" y="485" width="0.0814%" height="15" fill="rgb(209,19,5)" fg:x="1201" fg:w="1"/><text x="98.0513%" y="495.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (3 samples, 0.24%)</title><rect x="97.8827%" y="549" width="0.2443%" height="15" fill="rgb(219,18,35)" fg:x="1202" fg:w="3"/><text x="98.1327%" y="559.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="97.8827%" y="533" width="0.2443%" height="15" fill="rgb(209,169,16)" fg:x="1202" fg:w="3"/><text x="98.1327%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="97.8827%" y="517" width="0.2443%" height="15" fill="rgb(245,90,51)" fg:x="1202" fg:w="3"/><text x="98.1327%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="97.8827%" y="501" width="0.2443%" height="15" fill="rgb(220,99,45)" fg:x="1202" fg:w="3"/><text x="98.1327%" y="511.50"></text></g><g><title>engine::internal::Entities::prepare_entity (3 samples, 0.24%)</title><rect x="97.8827%" y="485" width="0.2443%" height="15" fill="rgb(249,89,25)" fg:x="1202" fg:w="3"/><text x="98.1327%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="97.8827%" y="469" width="0.2443%" height="15" fill="rgb(239,193,0)" fg:x="1202" fg:w="3"/><text x="98.1327%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="97.8827%" y="453" width="0.2443%" height="15" fill="rgb(231,126,1)" fg:x="1202" fg:w="3"/><text x="98.1327%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="97.8827%" y="437" width="0.2443%" height="15" fill="rgb(243,166,3)" fg:x="1202" fg:w="3"/><text x="98.1327%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="97.8827%" y="421" width="0.2443%" height="15" fill="rgb(223,22,34)" fg:x="1202" fg:w="3"/><text x="98.1327%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.8827%" y="405" width="0.2443%" height="15" fill="rgb(251,52,51)" fg:x="1202" fg:w="3"/><text x="98.1327%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.0456%" y="389" width="0.0814%" height="15" fill="rgb(221,165,28)" fg:x="1204" fg:w="1"/><text x="98.2956%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.49%)</title><rect x="97.7199%" y="629" width="0.4886%" height="15" fill="rgb(218,121,47)" fg:x="1200" fg:w="6"/><text x="97.9699%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (6 samples, 0.49%)</title><rect x="97.7199%" y="613" width="0.4886%" height="15" fill="rgb(209,120,9)" fg:x="1200" fg:w="6"/><text x="97.9699%" y="623.50"></text></g><g><title>plugins_core::tools::get_contained_keys (4 samples, 0.33%)</title><rect x="97.8827%" y="597" width="0.3257%" height="15" fill="rgb(236,68,12)" fg:x="1202" fg:w="4"/><text x="98.1327%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.33%)</title><rect x="97.8827%" y="581" width="0.3257%" height="15" fill="rgb(225,194,26)" fg:x="1202" fg:w="4"/><text x="98.1327%" y="591.50"></text></g><g><title>kernel::model::Entity::load_scope (4 samples, 0.33%)</title><rect x="97.8827%" y="565" width="0.3257%" height="15" fill="rgb(231,84,39)" fg:x="1202" fg:w="4"/><text x="98.1327%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1270%" y="549" width="0.0814%" height="15" fill="rgb(210,11,45)" fg:x="1205" fg:w="1"/><text x="98.3770%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1270%" y="533" width="0.0814%" height="15" fill="rgb(224,54,52)" fg:x="1205" fg:w="1"/><text x="98.3770%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.1270%" y="517" width="0.0814%" height="15" fill="rgb(238,102,14)" fg:x="1205" fg:w="1"/><text x="98.3770%" y="527.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.1270%" y="501" width="0.0814%" height="15" fill="rgb(243,160,52)" fg:x="1205" fg:w="1"/><text x="98.3770%" y="511.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.1270%" y="485" width="0.0814%" height="15" fill="rgb(216,114,19)" fg:x="1205" fg:w="1"/><text x="98.3770%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1270%" y="469" width="0.0814%" height="15" fill="rgb(244,166,37)" fg:x="1205" fg:w="1"/><text x="98.3770%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1270%" y="453" width="0.0814%" height="15" fill="rgb(246,29,44)" fg:x="1205" fg:w="1"/><text x="98.3770%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="98.2085%" y="581" width="0.0814%" height="15" fill="rgb(215,56,53)" fg:x="1206" fg:w="1"/><text x="98.4585%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="98.2085%" y="565" width="0.0814%" height="15" fill="rgb(217,60,2)" fg:x="1206" fg:w="1"/><text x="98.4585%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="98.2085%" y="549" width="0.0814%" height="15" fill="rgb(207,26,24)" fg:x="1206" fg:w="1"/><text x="98.4585%" y="559.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="98.2085%" y="533" width="0.0814%" height="15" fill="rgb(252,210,15)" fg:x="1206" fg:w="1"/><text x="98.4585%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.2085%" y="517" width="0.0814%" height="15" fill="rgb(253,209,26)" fg:x="1206" fg:w="1"/><text x="98.4585%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.2085%" y="501" width="0.0814%" height="15" fill="rgb(238,170,14)" fg:x="1206" fg:w="1"/><text x="98.4585%" y="511.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="98.2085%" y="485" width="0.0814%" height="15" fill="rgb(216,178,15)" fg:x="1206" fg:w="1"/><text x="98.4585%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="98.2085%" y="469" width="0.0814%" height="15" fill="rgb(250,197,2)" fg:x="1206" fg:w="1"/><text x="98.4585%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.2085%" y="453" width="0.0814%" height="15" fill="rgb(212,70,42)" fg:x="1206" fg:w="1"/><text x="98.4585%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.2085%" y="437" width="0.0814%" height="15" fill="rgb(227,213,9)" fg:x="1206" fg:w="1"/><text x="98.4585%" y="447.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="98.2085%" y="421" width="0.0814%" height="15" fill="rgb(245,99,25)" fg:x="1206" fg:w="1"/><text x="98.4585%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.5342%" y="389" width="0.0814%" height="15" fill="rgb(250,82,29)" fg:x="1210" fg:w="1"/><text x="98.7842%" y="399.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.5342%" y="373" width="0.0814%" height="15" fill="rgb(241,226,54)" fg:x="1210" fg:w="1"/><text x="98.7842%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.5342%" y="357" width="0.0814%" height="15" fill="rgb(221,99,41)" fg:x="1210" fg:w="1"/><text x="98.7842%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="98.4528%" y="437" width="0.2443%" height="15" fill="rgb(213,90,21)" fg:x="1209" fg:w="3"/><text x="98.7028%" y="447.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="98.5342%" y="421" width="0.1629%" height="15" fill="rgb(205,208,24)" fg:x="1210" fg:w="2"/><text x="98.7842%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.5342%" y="405" width="0.1629%" height="15" fill="rgb(246,31,12)" fg:x="1210" fg:w="2"/><text x="98.7842%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.6156%" y="389" width="0.0814%" height="15" fill="rgb(213,154,6)" fg:x="1211" fg:w="1"/><text x="98.8656%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.6156%" y="373" width="0.0814%" height="15" fill="rgb(222,163,29)" fg:x="1211" fg:w="1"/><text x="98.8656%" y="383.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (5 samples, 0.41%)</title><rect x="98.3713%" y="469" width="0.4072%" height="15" fill="rgb(227,201,8)" fg:x="1208" fg:w="5"/><text x="98.6213%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="98.3713%" y="453" width="0.4072%" height="15" fill="rgb(233,9,32)" fg:x="1208" fg:w="5"/><text x="98.6213%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.6971%" y="437" width="0.0814%" height="15" fill="rgb(217,54,24)" fg:x="1212" fg:w="1"/><text x="98.9471%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.7785%" y="469" width="0.0814%" height="15" fill="rgb(235,192,0)" fg:x="1213" fg:w="1"/><text x="99.0285%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.57%)</title><rect x="98.3713%" y="485" width="0.5700%" height="15" fill="rgb(235,45,9)" fg:x="1208" fg:w="7"/><text x="98.6213%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.8599%" y="469" width="0.0814%" height="15" fill="rgb(246,42,40)" fg:x="1214" fg:w="1"/><text x="99.1099%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.8599%" y="453" width="0.0814%" height="15" fill="rgb(248,111,24)" fg:x="1214" fg:w="1"/><text x="99.1099%" y="463.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (10 samples, 0.81%)</title><rect x="98.2899%" y="565" width="0.8143%" height="15" fill="rgb(249,65,22)" fg:x="1207" fg:w="10"/><text x="98.5399%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (10 samples, 0.81%)</title><rect x="98.2899%" y="549" width="0.8143%" height="15" fill="rgb(238,111,51)" fg:x="1207" fg:w="10"/><text x="98.5399%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.81%)</title><rect x="98.2899%" y="533" width="0.8143%" height="15" fill="rgb(250,118,22)" fg:x="1207" fg:w="10"/><text x="98.5399%" y="543.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (10 samples, 0.81%)</title><rect x="98.2899%" y="517" width="0.8143%" height="15" fill="rgb(234,84,26)" fg:x="1207" fg:w="10"/><text x="98.5399%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9 samples, 0.73%)</title><rect x="98.3713%" y="501" width="0.7329%" height="15" fill="rgb(243,172,12)" fg:x="1208" fg:w="9"/><text x="98.6213%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="98.9414%" y="485" width="0.1629%" height="15" fill="rgb(236,150,49)" fg:x="1215" fg:w="2"/><text x="99.1914%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.0228%" y="469" width="0.0814%" height="15" fill="rgb(225,197,26)" fg:x="1216" fg:w="1"/><text x="99.2728%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="99.1857%" y="517" width="0.1629%" height="15" fill="rgb(214,17,42)" fg:x="1218" fg:w="2"/><text x="99.4357%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2671%" y="501" width="0.0814%" height="15" fill="rgb(224,165,40)" fg:x="1219" fg:w="1"/><text x="99.5171%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="99.2671%" y="485" width="0.0814%" height="15" fill="rgb(246,100,4)" fg:x="1219" fg:w="1"/><text x="99.5171%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="99.3485%" y="517" width="0.0814%" height="15" fill="rgb(222,103,0)" fg:x="1220" fg:w="1"/><text x="99.5985%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="99.3485%" y="501" width="0.0814%" height="15" fill="rgb(227,189,26)" fg:x="1220" fg:w="1"/><text x="99.5985%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="99.3485%" y="485" width="0.0814%" height="15" fill="rgb(214,202,17)" fg:x="1220" fg:w="1"/><text x="99.5985%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.4300%" y="501" width="0.0814%" height="15" fill="rgb(229,111,3)" fg:x="1221" fg:w="1"/><text x="99.6800%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.4300%" y="485" width="0.0814%" height="15" fill="rgb(229,172,15)" fg:x="1221" fg:w="1"/><text x="99.6800%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5114%" y="469" width="0.0814%" height="15" fill="rgb(230,224,35)" fg:x="1222" fg:w="1"/><text x="99.7614%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5114%" y="453" width="0.0814%" height="15" fill="rgb(251,141,6)" fg:x="1222" fg:w="1"/><text x="99.7614%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5114%" y="437" width="0.0814%" height="15" fill="rgb(225,208,6)" fg:x="1222" fg:w="1"/><text x="99.7614%" y="447.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (273 samples, 22.23%)</title><rect x="77.4430%" y="725" width="22.2313%" height="15" fill="rgb(246,181,16)" fg:x="951" fg:w="273"/><text x="77.6930%" y="735.50">&lt;engine::perform::StandardPerformer..</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (28 samples, 2.28%)</title><rect x="97.3941%" y="709" width="2.2801%" height="15" fill="rgb(227,129,36)" fg:x="1196" fg:w="28"/><text x="97.6441%" y="719.50">k..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (28 samples, 2.28%)</title><rect x="97.3941%" y="693" width="2.2801%" height="15" fill="rgb(248,117,24)" fg:x="1196" fg:w="28"/><text x="97.6441%" y="703.50">&lt;..</text></g><g><title>plugins_rpc::querying::have_surroundings (25 samples, 2.04%)</title><rect x="97.6384%" y="677" width="2.0358%" height="15" fill="rgb(214,185,35)" fg:x="1199" fg:w="25"/><text x="97.8884%" y="687.50">p..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (25 samples, 2.04%)</title><rect x="97.6384%" y="661" width="2.0358%" height="15" fill="rgb(236,150,34)" fg:x="1199" fg:w="25"/><text x="97.8884%" y="671.50">&lt;..</text></g><g><title>core::iter::adapters::try_process (24 samples, 1.95%)</title><rect x="97.7199%" y="645" width="1.9544%" height="15" fill="rgb(243,228,27)" fg:x="1200" fg:w="24"/><text x="97.9699%" y="655.50">c..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (18 samples, 1.47%)</title><rect x="98.2085%" y="629" width="1.4658%" height="15" fill="rgb(245,77,44)" fg:x="1206" fg:w="18"/><text x="98.4585%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (18 samples, 1.47%)</title><rect x="98.2085%" y="613" width="1.4658%" height="15" fill="rgb(235,214,42)" fg:x="1206" fg:w="18"/><text x="98.4585%" y="623.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (18 samples, 1.47%)</title><rect x="98.2085%" y="597" width="1.4658%" height="15" fill="rgb(221,74,3)" fg:x="1206" fg:w="18"/><text x="98.4585%" y="607.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (17 samples, 1.38%)</title><rect x="98.2899%" y="581" width="1.3844%" height="15" fill="rgb(206,121,29)" fg:x="1207" fg:w="17"/><text x="98.5399%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (7 samples, 0.57%)</title><rect x="99.1042%" y="565" width="0.5700%" height="15" fill="rgb(249,131,53)" fg:x="1217" fg:w="7"/><text x="99.3542%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (7 samples, 0.57%)</title><rect x="99.1042%" y="549" width="0.5700%" height="15" fill="rgb(236,170,29)" fg:x="1217" fg:w="7"/><text x="99.3542%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.57%)</title><rect x="99.1042%" y="533" width="0.5700%" height="15" fill="rgb(247,96,15)" fg:x="1217" fg:w="7"/><text x="99.3542%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="99.4300%" y="517" width="0.2443%" height="15" fill="rgb(211,210,7)" fg:x="1221" fg:w="3"/><text x="99.6800%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.16%)</title><rect x="99.5114%" y="501" width="0.1629%" height="15" fill="rgb(240,88,50)" fg:x="1222" fg:w="2"/><text x="99.7614%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="99.5114%" y="485" width="0.1629%" height="15" fill="rgb(209,229,26)" fg:x="1222" fg:w="2"/><text x="99.7614%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.5928%" y="469" width="0.0814%" height="15" fill="rgb(210,68,23)" fg:x="1223" fg:w="1"/><text x="99.8428%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.5928%" y="453" width="0.0814%" height="15" fill="rgb(229,180,13)" fg:x="1223" fg:w="1"/><text x="99.8428%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="99.5928%" y="437" width="0.0814%" height="15" fill="rgb(236,53,44)" fg:x="1223" fg:w="1"/><text x="99.8428%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="99.6743%" y="709" width="0.0814%" height="15" fill="rgb(244,214,29)" fg:x="1224" fg:w="1"/><text x="99.9243%" y="719.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="99.6743%" y="693" width="0.0814%" height="15" fill="rgb(220,75,29)" fg:x="1224" fg:w="1"/><text x="99.9243%" y="703.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="99.6743%" y="677" width="0.0814%" height="15" fill="rgb(214,183,37)" fg:x="1224" fg:w="1"/><text x="99.9243%" y="687.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.6743%" y="661" width="0.0814%" height="15" fill="rgb(239,117,29)" fg:x="1224" fg:w="1"/><text x="99.9243%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6743%" y="645" width="0.0814%" height="15" fill="rgb(237,171,35)" fg:x="1224" fg:w="1"/><text x="99.9243%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6743%" y="629" width="0.0814%" height="15" fill="rgb(229,178,53)" fg:x="1224" fg:w="1"/><text x="99.9243%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6743%" y="613" width="0.0814%" height="15" fill="rgb(210,102,19)" fg:x="1224" fg:w="1"/><text x="99.9243%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6743%" y="597" width="0.0814%" height="15" fill="rgb(235,127,22)" fg:x="1224" fg:w="1"/><text x="99.9243%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6743%" y="581" width="0.0814%" height="15" fill="rgb(244,31,31)" fg:x="1224" fg:w="1"/><text x="99.9243%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6743%" y="565" width="0.0814%" height="15" fill="rgb(231,43,21)" fg:x="1224" fg:w="1"/><text x="99.9243%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6743%" y="549" width="0.0814%" height="15" fill="rgb(217,131,35)" fg:x="1224" fg:w="1"/><text x="99.9243%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6743%" y="533" width="0.0814%" height="15" fill="rgb(221,149,4)" fg:x="1224" fg:w="1"/><text x="99.9243%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6743%" y="517" width="0.0814%" height="15" fill="rgb(232,170,28)" fg:x="1224" fg:w="1"/><text x="99.9243%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6743%" y="501" width="0.0814%" height="15" fill="rgb(238,56,10)" fg:x="1224" fg:w="1"/><text x="99.9243%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6743%" y="485" width="0.0814%" height="15" fill="rgb(235,196,14)" fg:x="1224" fg:w="1"/><text x="99.9243%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6743%" y="469" width="0.0814%" height="15" fill="rgb(216,45,48)" fg:x="1224" fg:w="1"/><text x="99.9243%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6743%" y="453" width="0.0814%" height="15" fill="rgb(238,213,17)" fg:x="1224" fg:w="1"/><text x="99.9243%" y="463.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (275 samples, 22.39%)</title><rect x="77.4430%" y="821" width="22.3941%" height="15" fill="rgb(212,13,2)" fg:x="951" fg:w="275"/><text x="77.6930%" y="831.50">&lt;kernel::plugins::SessionPlugins as..</text></g><g><title>core::iter::adapters::try_process (275 samples, 22.39%)</title><rect x="77.4430%" y="805" width="22.3941%" height="15" fill="rgb(240,114,20)" fg:x="951" fg:w="275"/><text x="77.6930%" y="815.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (275 samples, 22.39%)</title><rect x="77.4430%" y="789" width="22.3941%" height="15" fill="rgb(228,41,40)" fg:x="951" fg:w="275"/><text x="77.6930%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::..</text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (275 samples, 22.39%)</title><rect x="77.4430%" y="773" width="22.3941%" height="15" fill="rgb(244,132,35)" fg:x="951" fg:w="275"/><text x="77.6930%" y="783.50">&lt;core::iter::adapters::GenericShunt..</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (275 samples, 22.39%)</title><rect x="77.4430%" y="757" width="22.3941%" height="15" fill="rgb(253,189,4)" fg:x="951" fg:w="275"/><text x="77.6930%" y="767.50">&lt;plugins_core::looking::LookingPlug..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (275 samples, 22.39%)</title><rect x="77.4430%" y="741" width="22.3941%" height="15" fill="rgb(224,37,19)" fg:x="951" fg:w="275"/><text x="77.6930%" y="751.50">&lt;engine::perform::StandardPerformer..</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (2 samples, 0.16%)</title><rect x="99.6743%" y="725" width="0.1629%" height="15" fill="rgb(235,223,18)" fg:x="1224" fg:w="2"/><text x="99.9243%" y="735.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.7557%" y="709" width="0.0814%" height="15" fill="rgb(235,163,25)" fg:x="1225" fg:w="1"/><text x="100.0057%" y="719.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="99.7557%" y="693" width="0.0814%" height="15" fill="rgb(217,145,28)" fg:x="1225" fg:w="1"/><text x="100.0057%" y="703.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="99.7557%" y="677" width="0.0814%" height="15" fill="rgb(223,223,32)" fg:x="1225" fg:w="1"/><text x="100.0057%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7557%" y="661" width="0.0814%" height="15" fill="rgb(227,189,39)" fg:x="1225" fg:w="1"/><text x="100.0057%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.8371%" y="821" width="0.0814%" height="15" fill="rgb(248,10,22)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="831.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.8371%" y="805" width="0.0814%" height="15" fill="rgb(248,46,39)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="815.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.8371%" y="789" width="0.0814%" height="15" fill="rgb(248,113,48)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="799.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.8371%" y="773" width="0.0814%" height="15" fill="rgb(245,16,25)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="783.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.8371%" y="757" width="0.0814%" height="15" fill="rgb(249,152,16)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="767.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="99.8371%" y="741" width="0.0814%" height="15" fill="rgb(250,16,1)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="751.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="99.8371%" y="725" width="0.0814%" height="15" fill="rgb(249,138,3)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="735.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.8371%" y="709" width="0.0814%" height="15" fill="rgb(227,71,41)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.8371%" y="693" width="0.0814%" height="15" fill="rgb(209,184,23)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="703.50"></text></g><g><title>core::fmt::run (1 samples, 0.08%)</title><rect x="99.8371%" y="677" width="0.0814%" height="15" fill="rgb(223,215,31)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="687.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.8371%" y="661" width="0.0814%" height="15" fill="rgb(210,146,28)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="671.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="99.8371%" y="645" width="0.0814%" height="15" fill="rgb(209,183,41)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="655.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.08%)</title><rect x="99.8371%" y="629" width="0.0814%" height="15" fill="rgb(209,224,45)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="639.50"></text></g><g><title>core::str::count::count_chars (1 samples, 0.08%)</title><rect x="99.8371%" y="613" width="0.0814%" height="15" fill="rgb(224,209,51)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="623.50"></text></g><g><title>core::str::count::char_count_general_case (1 samples, 0.08%)</title><rect x="99.8371%" y="597" width="0.0814%" height="15" fill="rgb(223,17,39)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.08%)</title><rect x="99.8371%" y="581" width="0.0814%" height="15" fill="rgb(234,204,37)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="99.8371%" y="565" width="0.0814%" height="15" fill="rgb(236,120,5)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="575.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="99.8371%" y="549" width="0.0814%" height="15" fill="rgb(248,97,27)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="99.8371%" y="533" width="0.0814%" height="15" fill="rgb(240,66,17)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="99.8371%" y="517" width="0.0814%" height="15" fill="rgb(210,79,3)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.8371%" y="501" width="0.0814%" height="15" fill="rgb(214,176,27)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="511.50"></text></g><g><title>all (1,228 samples, 100%)</title><rect x="0.0000%" y="1205" width="100.0000%" height="15" fill="rgb(235,185,3)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1215.50"></text></g><g><title>simple-bd24e590 (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1189" width="100.0000%" height="15" fill="rgb(227,24,12)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1199.50">simple-bd24e590</text></g><g><title>_start (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1173" width="100.0000%" height="15" fill="rgb(252,169,48)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1183.50">_start</text></g><g><title>__libc_start_main (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1157" width="100.0000%" height="15" fill="rgb(212,65,1)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1167.50">__libc_start_main</text></g><g><title>main (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(242,39,24)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1151.50">main</text></g><g><title>std::rt::lang_start_internal (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(249,32,23)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1135.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(251,195,23)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1119.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(236,174,8)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1103.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(220,197,8)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1087.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(240,108,37)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1071.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(232,176,24)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1055.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(243,35,29)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1039.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(210,37,18)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1023.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,228 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(224,184,40)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1007.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,228 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(236,39,29)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="991.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,228 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(232,48,39)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="975.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,228 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(236,34,42)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="959.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,228 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(243,106,37)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="943.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,228 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(218,96,6)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="927.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (314 samples, 25.57%)</title><rect x="74.4300%" y="901" width="25.5700%" height="15" fill="rgb(235,130,12)" fg:x="914" fg:w="314"/><text x="74.6800%" y="911.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as c..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (314 samples, 25.57%)</title><rect x="74.4300%" y="885" width="25.5700%" height="15" fill="rgb(231,95,0)" fg:x="914" fg:w="314"/><text x="74.6800%" y="895.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (314 samples, 25.57%)</title><rect x="74.4300%" y="869" width="25.5700%" height="15" fill="rgb(228,12,23)" fg:x="914" fg:w="314"/><text x="74.6800%" y="879.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (277 samples, 22.56%)</title><rect x="77.4430%" y="853" width="22.5570%" height="15" fill="rgb(216,12,1)" fg:x="951" fg:w="277"/><text x="77.6930%" y="863.50">engine::session::Session::evaluate_a..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (277 samples, 22.56%)</title><rect x="77.4430%" y="837" width="22.5570%" height="15" fill="rgb(219,59,3)" fg:x="951" fg:w="277"/><text x="77.6930%" y="847.50">engine::perform::StandardPerformer::..</text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="99.9186%" y="821" width="0.0814%" height="15" fill="rgb(215,208,46)" fg:x="1227" fg:w="1"/><text x="100.1686%" y="831.50"></text></g></svg></svg>