<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1206" onload="init(evt)" viewBox="0 0 1200 1206" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1206" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1189.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1189.00"> </text><svg id="frames" x="10" width="1180" total_samples="1252"><g><title>&lt;engine::session::Session as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="789" width="0.0799%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="799.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1597%" y="693" width="0.0799%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.4097%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.2396%" y="693" width="0.0799%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.4896%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.0000%" y="805" width="0.4792%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::State&gt; (5 samples, 0.40%)</title><rect x="0.0799%" y="789" width="0.3994%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="5"/><text x="0.3299%" y="799.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0799%" y="773" width="0.3994%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="5"/><text x="0.3299%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (5 samples, 0.40%)</title><rect x="0.0799%" y="757" width="0.3994%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="5"/><text x="0.3299%" y="767.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0799%" y="741" width="0.3994%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="5"/><text x="0.3299%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0799%" y="725" width="0.3994%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="5"/><text x="0.3299%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.1597%" y="709" width="0.3195%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="4"/><text x="0.4097%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.3195%" y="693" width="0.1597%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="2"/><text x="0.5695%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.3195%" y="677" width="0.1597%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="2"/><text x="0.5695%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.3195%" y="661" width="0.1597%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="2"/><text x="0.5695%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.3195%" y="645" width="0.1597%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="2"/><text x="0.5695%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.3195%" y="629" width="0.1597%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="2"/><text x="0.5695%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3994%" y="613" width="0.0799%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="1"/><text x="0.6494%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="0.5591%" y="549" width="0.0799%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="1"/><text x="0.8091%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="0.5591%" y="725" width="0.1597%" height="15" fill="rgb(210,31,41)" fg:x="7" fg:w="2"/><text x="0.8091%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="0.5591%" y="709" width="0.1597%" height="15" fill="rgb(221,200,47)" fg:x="7" fg:w="2"/><text x="0.8091%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="0.5591%" y="693" width="0.1597%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="2"/><text x="0.8091%" y="703.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="0.5591%" y="677" width="0.1597%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="2"/><text x="0.8091%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="0.5591%" y="661" width="0.1597%" height="15" fill="rgb(235,183,28)" fg:x="7" fg:w="2"/><text x="0.8091%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="0.5591%" y="645" width="0.1597%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="2"/><text x="0.8091%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.5591%" y="629" width="0.1597%" height="15" fill="rgb(247,18,42)" fg:x="7" fg:w="2"/><text x="0.8091%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="0.5591%" y="613" width="0.1597%" height="15" fill="rgb(241,131,45)" fg:x="7" fg:w="2"/><text x="0.8091%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.5591%" y="597" width="0.1597%" height="15" fill="rgb(249,31,29)" fg:x="7" fg:w="2"/><text x="0.8091%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="0.5591%" y="581" width="0.1597%" height="15" fill="rgb(225,111,53)" fg:x="7" fg:w="2"/><text x="0.8091%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.5591%" y="565" width="0.1597%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="2"/><text x="0.8091%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.6390%" y="549" width="0.0799%" height="15" fill="rgb(214,148,48)" fg:x="8" fg:w="1"/><text x="0.8890%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.6390%" y="533" width="0.0799%" height="15" fill="rgb(232,36,49)" fg:x="8" fg:w="1"/><text x="0.8890%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="0.7188%" y="725" width="0.0799%" height="15" fill="rgb(209,103,24)" fg:x="9" fg:w="1"/><text x="0.9688%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="0.7188%" y="709" width="0.0799%" height="15" fill="rgb(229,88,8)" fg:x="9" fg:w="1"/><text x="0.9688%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="0.7188%" y="693" width="0.0799%" height="15" fill="rgb(213,181,19)" fg:x="9" fg:w="1"/><text x="0.9688%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.7188%" y="677" width="0.0799%" height="15" fill="rgb(254,191,54)" fg:x="9" fg:w="1"/><text x="0.9688%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.7188%" y="661" width="0.0799%" height="15" fill="rgb(241,83,37)" fg:x="9" fg:w="1"/><text x="0.9688%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.7188%" y="645" width="0.0799%" height="15" fill="rgb(233,36,39)" fg:x="9" fg:w="1"/><text x="0.9688%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (6 samples, 0.48%)</title><rect x="0.4792%" y="773" width="0.4792%" height="15" fill="rgb(226,3,54)" fg:x="6" fg:w="6"/><text x="0.7292%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.48%)</title><rect x="0.4792%" y="757" width="0.4792%" height="15" fill="rgb(245,192,40)" fg:x="6" fg:w="6"/><text x="0.7292%" y="767.50"></text></g><g><title>engine::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="0.4792%" y="741" width="0.4792%" height="15" fill="rgb(238,167,29)" fg:x="6" fg:w="6"/><text x="0.7292%" y="751.50"></text></g><g><title>kernel::model::entity::Entity::from_str (2 samples, 0.16%)</title><rect x="0.7987%" y="725" width="0.1597%" height="15" fill="rgb(232,182,51)" fg:x="10" fg:w="2"/><text x="1.0487%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.8786%" y="709" width="0.0799%" height="15" fill="rgb(231,60,39)" fg:x="11" fg:w="1"/><text x="1.1286%" y="719.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.8786%" y="693" width="0.0799%" height="15" fill="rgb(208,69,12)" fg:x="11" fg:w="1"/><text x="1.1286%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="0.8786%" y="677" width="0.0799%" height="15" fill="rgb(235,93,37)" fg:x="11" fg:w="1"/><text x="1.1286%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.8786%" y="661" width="0.0799%" height="15" fill="rgb(213,116,39)" fg:x="11" fg:w="1"/><text x="1.1286%" y="671.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.8786%" y="645" width="0.0799%" height="15" fill="rgb(222,207,29)" fg:x="11" fg:w="1"/><text x="1.1286%" y="655.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="0.9585%" y="773" width="0.0799%" height="15" fill="rgb(206,96,30)" fg:x="12" fg:w="1"/><text x="1.2085%" y="783.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="0.9585%" y="757" width="0.0799%" height="15" fill="rgb(218,138,4)" fg:x="12" fg:w="1"/><text x="1.2085%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="0.9585%" y="741" width="0.0799%" height="15" fill="rgb(250,191,14)" fg:x="12" fg:w="1"/><text x="1.2085%" y="751.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="0.9585%" y="725" width="0.0799%" height="15" fill="rgb(239,60,40)" fg:x="12" fg:w="1"/><text x="1.2085%" y="735.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="0.9585%" y="709" width="0.0799%" height="15" fill="rgb(206,27,48)" fg:x="12" fg:w="1"/><text x="1.2085%" y="719.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="1.0383%" y="757" width="0.3195%" height="15" fill="rgb(225,35,8)" fg:x="13" fg:w="4"/><text x="1.2883%" y="767.50"></text></g><g><title>libloading::os::unix::Library::open (4 samples, 0.32%)</title><rect x="1.0383%" y="741" width="0.3195%" height="15" fill="rgb(250,213,24)" fg:x="13" fg:w="4"/><text x="1.2883%" y="751.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="1.0383%" y="725" width="0.3195%" height="15" fill="rgb(247,123,22)" fg:x="13" fg:w="4"/><text x="1.2883%" y="735.50"></text></g><g><title>_dl_catch_error (4 samples, 0.32%)</title><rect x="1.0383%" y="709" width="0.3195%" height="15" fill="rgb(231,138,38)" fg:x="13" fg:w="4"/><text x="1.2883%" y="719.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.0383%" y="693" width="0.3195%" height="15" fill="rgb(231,145,46)" fg:x="13" fg:w="4"/><text x="1.2883%" y="703.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.0383%" y="677" width="0.3195%" height="15" fill="rgb(251,118,11)" fg:x="13" fg:w="4"/><text x="1.2883%" y="687.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.0383%" y="661" width="0.3195%" height="15" fill="rgb(217,147,25)" fg:x="13" fg:w="4"/><text x="1.2883%" y="671.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (12 samples, 0.96%)</title><rect x="0.4792%" y="805" width="0.9585%" height="15" fill="rgb(247,81,37)" fg:x="6" fg:w="12"/><text x="0.7292%" y="815.50"></text></g><g><title>engine::session::Session::new (12 samples, 0.96%)</title><rect x="0.4792%" y="789" width="0.9585%" height="15" fill="rgb(209,12,38)" fg:x="6" fg:w="12"/><text x="0.7292%" y="799.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (5 samples, 0.40%)</title><rect x="1.0383%" y="773" width="0.3994%" height="15" fill="rgb(227,1,9)" fg:x="13" fg:w="5"/><text x="1.2883%" y="783.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="1.3578%" y="757" width="0.0799%" height="15" fill="rgb(248,47,43)" fg:x="17" fg:w="1"/><text x="1.6078%" y="767.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="1.3578%" y="741" width="0.0799%" height="15" fill="rgb(221,10,30)" fg:x="17" fg:w="1"/><text x="1.6078%" y="751.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="1.4377%" y="757" width="0.0799%" height="15" fill="rgb(210,229,1)" fg:x="18" fg:w="1"/><text x="1.6877%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.4377%" y="741" width="0.0799%" height="15" fill="rgb(222,148,37)" fg:x="18" fg:w="1"/><text x="1.6877%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.4377%" y="725" width="0.0799%" height="15" fill="rgb(234,67,33)" fg:x="18" fg:w="1"/><text x="1.6877%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="1.4377%" y="709" width="0.0799%" height="15" fill="rgb(247,98,35)" fg:x="18" fg:w="1"/><text x="1.6877%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="1.4377%" y="693" width="0.0799%" height="15" fill="rgb(247,138,52)" fg:x="18" fg:w="1"/><text x="1.6877%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="1.4377%" y="677" width="0.0799%" height="15" fill="rgb(213,79,30)" fg:x="18" fg:w="1"/><text x="1.6877%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.4377%" y="661" width="0.0799%" height="15" fill="rgb(246,177,23)" fg:x="18" fg:w="1"/><text x="1.6877%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.4377%" y="645" width="0.0799%" height="15" fill="rgb(230,62,27)" fg:x="18" fg:w="1"/><text x="1.6877%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="1.4377%" y="629" width="0.0799%" height="15" fill="rgb(216,154,8)" fg:x="18" fg:w="1"/><text x="1.6877%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="1.4377%" y="613" width="0.0799%" height="15" fill="rgb(244,35,45)" fg:x="18" fg:w="1"/><text x="1.6877%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="1.4377%" y="597" width="0.0799%" height="15" fill="rgb(251,115,12)" fg:x="18" fg:w="1"/><text x="1.6877%" y="607.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="1.4377%" y="581" width="0.0799%" height="15" fill="rgb(240,54,50)" fg:x="18" fg:w="1"/><text x="1.6877%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.4377%" y="565" width="0.0799%" height="15" fill="rgb(233,84,52)" fg:x="18" fg:w="1"/><text x="1.6877%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.5176%" y="725" width="0.0799%" height="15" fill="rgb(207,117,47)" fg:x="19" fg:w="1"/><text x="1.7676%" y="735.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1.5974%" y="709" width="0.0799%" height="15" fill="rgb(249,43,39)" fg:x="20" fg:w="1"/><text x="1.8474%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.5974%" y="693" width="0.0799%" height="15" fill="rgb(209,38,44)" fg:x="20" fg:w="1"/><text x="1.8474%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.5974%" y="677" width="0.0799%" height="15" fill="rgb(236,212,23)" fg:x="20" fg:w="1"/><text x="1.8474%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.5974%" y="661" width="0.0799%" height="15" fill="rgb(242,79,21)" fg:x="20" fg:w="1"/><text x="1.8474%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.5974%" y="645" width="0.0799%" height="15" fill="rgb(211,96,35)" fg:x="20" fg:w="1"/><text x="1.8474%" y="655.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="1.5974%" y="725" width="0.1597%" height="15" fill="rgb(253,215,40)" fg:x="20" fg:w="2"/><text x="1.8474%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.6773%" y="709" width="0.0799%" height="15" fill="rgb(211,81,21)" fg:x="21" fg:w="1"/><text x="1.9273%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.6773%" y="693" width="0.0799%" height="15" fill="rgb(208,190,38)" fg:x="21" fg:w="1"/><text x="1.9273%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="1.6773%" y="677" width="0.0799%" height="15" fill="rgb(235,213,38)" fg:x="21" fg:w="1"/><text x="1.9273%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.6773%" y="661" width="0.0799%" height="15" fill="rgb(237,122,38)" fg:x="21" fg:w="1"/><text x="1.9273%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.6773%" y="645" width="0.0799%" height="15" fill="rgb(244,218,35)" fg:x="21" fg:w="1"/><text x="1.9273%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.6773%" y="629" width="0.0799%" height="15" fill="rgb(240,68,47)" fg:x="21" fg:w="1"/><text x="1.9273%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7572%" y="693" width="0.0799%" height="15" fill="rgb(210,16,53)" fg:x="22" fg:w="1"/><text x="2.0072%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8371%" y="677" width="0.0799%" height="15" fill="rgb(235,124,12)" fg:x="23" fg:w="1"/><text x="2.0871%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="1.9169%" y="645" width="0.0799%" height="15" fill="rgb(224,169,11)" fg:x="24" fg:w="1"/><text x="2.1669%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="1.9169%" y="629" width="0.0799%" height="15" fill="rgb(250,166,2)" fg:x="24" fg:w="1"/><text x="2.1669%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="1.7572%" y="725" width="0.3195%" height="15" fill="rgb(242,216,29)" fg:x="22" fg:w="4"/><text x="2.0072%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="1.7572%" y="709" width="0.3195%" height="15" fill="rgb(230,116,27)" fg:x="22" fg:w="4"/><text x="2.0072%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.8371%" y="693" width="0.2396%" height="15" fill="rgb(228,99,48)" fg:x="23" fg:w="3"/><text x="2.0871%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.9169%" y="677" width="0.1597%" height="15" fill="rgb(253,11,6)" fg:x="24" fg:w="2"/><text x="2.1669%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.9169%" y="661" width="0.1597%" height="15" fill="rgb(247,143,39)" fg:x="24" fg:w="2"/><text x="2.1669%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.9968%" y="645" width="0.0799%" height="15" fill="rgb(236,97,10)" fg:x="25" fg:w="1"/><text x="2.2468%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.9968%" y="629" width="0.0799%" height="15" fill="rgb(233,208,19)" fg:x="25" fg:w="1"/><text x="2.2468%" y="639.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="2.0767%" y="709" width="0.0799%" height="15" fill="rgb(216,164,2)" fg:x="26" fg:w="1"/><text x="2.3267%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0767%" y="693" width="0.0799%" height="15" fill="rgb(220,129,5)" fg:x="26" fg:w="1"/><text x="2.3267%" y="703.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="2.1565%" y="677" width="0.0799%" height="15" fill="rgb(242,17,10)" fg:x="27" fg:w="1"/><text x="2.4065%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.1565%" y="661" width="0.0799%" height="15" fill="rgb(242,107,0)" fg:x="27" fg:w="1"/><text x="2.4065%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="2.2364%" y="677" width="0.0799%" height="15" fill="rgb(251,28,31)" fg:x="28" fg:w="1"/><text x="2.4864%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.3962%" y="613" width="0.0799%" height="15" fill="rgb(233,223,10)" fg:x="30" fg:w="1"/><text x="2.6462%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.4760%" y="613" width="0.0799%" height="15" fill="rgb(215,21,27)" fg:x="31" fg:w="1"/><text x="2.7260%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4760%" y="597" width="0.0799%" height="15" fill="rgb(232,23,21)" fg:x="31" fg:w="1"/><text x="2.7260%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="2.4760%" y="581" width="0.0799%" height="15" fill="rgb(244,5,23)" fg:x="31" fg:w="1"/><text x="2.7260%" y="591.50"></text></g><g><title>engine::session::Session::flush (15 samples, 1.20%)</title><rect x="1.4377%" y="789" width="1.1981%" height="15" fill="rgb(226,81,46)" fg:x="18" fg:w="15"/><text x="1.6877%" y="799.50"></text></g><g><title>engine::session::Session::save_entity_changes (15 samples, 1.20%)</title><rect x="1.4377%" y="773" width="1.1981%" height="15" fill="rgb(247,70,30)" fg:x="18" fg:w="15"/><text x="1.6877%" y="783.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (14 samples, 1.12%)</title><rect x="1.5176%" y="757" width="1.1182%" height="15" fill="rgb(212,68,19)" fg:x="19" fg:w="14"/><text x="1.7676%" y="767.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (14 samples, 1.12%)</title><rect x="1.5176%" y="741" width="1.1182%" height="15" fill="rgb(240,187,13)" fg:x="19" fg:w="14"/><text x="1.7676%" y="751.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.56%)</title><rect x="2.0767%" y="725" width="0.5591%" height="15" fill="rgb(223,113,26)" fg:x="26" fg:w="7"/><text x="2.3267%" y="735.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="2.1565%" y="709" width="0.4792%" height="15" fill="rgb(206,192,2)" fg:x="27" fg:w="6"/><text x="2.4065%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="2.1565%" y="693" width="0.4792%" height="15" fill="rgb(241,108,4)" fg:x="27" fg:w="6"/><text x="2.4065%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="2.3163%" y="677" width="0.3195%" height="15" fill="rgb(247,173,49)" fg:x="29" fg:w="4"/><text x="2.5663%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="2.3163%" y="661" width="0.3195%" height="15" fill="rgb(224,114,35)" fg:x="29" fg:w="4"/><text x="2.5663%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="2.3962%" y="645" width="0.2396%" height="15" fill="rgb(245,159,27)" fg:x="30" fg:w="3"/><text x="2.6462%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="2.3962%" y="629" width="0.2396%" height="15" fill="rgb(245,172,44)" fg:x="30" fg:w="3"/><text x="2.6462%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.5559%" y="613" width="0.0799%" height="15" fill="rgb(236,23,11)" fg:x="32" fg:w="1"/><text x="2.8059%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="2.6358%" y="757" width="0.0799%" height="15" fill="rgb(205,117,38)" fg:x="33" fg:w="1"/><text x="2.8858%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="2.6358%" y="741" width="0.0799%" height="15" fill="rgb(237,72,25)" fg:x="33" fg:w="1"/><text x="2.8858%" y="751.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="2.6358%" y="725" width="0.0799%" height="15" fill="rgb(244,70,9)" fg:x="33" fg:w="1"/><text x="2.8858%" y="735.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.6358%" y="709" width="0.0799%" height="15" fill="rgb(217,125,39)" fg:x="33" fg:w="1"/><text x="2.8858%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.6358%" y="693" width="0.0799%" height="15" fill="rgb(235,36,10)" fg:x="33" fg:w="1"/><text x="2.8858%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.6358%" y="677" width="0.0799%" height="15" fill="rgb(251,123,47)" fg:x="33" fg:w="1"/><text x="2.8858%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="2.6358%" y="661" width="0.0799%" height="15" fill="rgb(221,13,13)" fg:x="33" fg:w="1"/><text x="2.8858%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="2.6358%" y="645" width="0.0799%" height="15" fill="rgb(238,131,9)" fg:x="33" fg:w="1"/><text x="2.8858%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="2.6358%" y="629" width="0.0799%" height="15" fill="rgb(211,50,8)" fg:x="33" fg:w="1"/><text x="2.8858%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.6358%" y="613" width="0.0799%" height="15" fill="rgb(245,182,24)" fg:x="33" fg:w="1"/><text x="2.8858%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.6358%" y="597" width="0.0799%" height="15" fill="rgb(242,14,37)" fg:x="33" fg:w="1"/><text x="2.8858%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="2.6358%" y="581" width="0.0799%" height="15" fill="rgb(246,228,12)" fg:x="33" fg:w="1"/><text x="2.8858%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="2.6358%" y="565" width="0.0799%" height="15" fill="rgb(213,55,15)" fg:x="33" fg:w="1"/><text x="2.8858%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="2.6358%" y="549" width="0.0799%" height="15" fill="rgb(209,9,3)" fg:x="33" fg:w="1"/><text x="2.8858%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="2.6358%" y="533" width="0.0799%" height="15" fill="rgb(230,59,30)" fg:x="33" fg:w="1"/><text x="2.8858%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.6358%" y="517" width="0.0799%" height="15" fill="rgb(209,121,21)" fg:x="33" fg:w="1"/><text x="2.8858%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.7157%" y="613" width="0.0799%" height="15" fill="rgb(220,109,13)" fg:x="34" fg:w="1"/><text x="2.9657%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="2.6358%" y="773" width="0.2396%" height="15" fill="rgb(232,18,1)" fg:x="33" fg:w="3"/><text x="2.8858%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="2.7157%" y="757" width="0.1597%" height="15" fill="rgb(215,41,42)" fg:x="34" fg:w="2"/><text x="2.9657%" y="767.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="2.7157%" y="741" width="0.1597%" height="15" fill="rgb(224,123,36)" fg:x="34" fg:w="2"/><text x="2.9657%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="2.7157%" y="725" width="0.1597%" height="15" fill="rgb(240,125,3)" fg:x="34" fg:w="2"/><text x="2.9657%" y="735.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="2.7157%" y="709" width="0.1597%" height="15" fill="rgb(205,98,50)" fg:x="34" fg:w="2"/><text x="2.9657%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="2.7157%" y="693" width="0.1597%" height="15" fill="rgb(205,185,37)" fg:x="34" fg:w="2"/><text x="2.9657%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="2.7157%" y="677" width="0.1597%" height="15" fill="rgb(238,207,15)" fg:x="34" fg:w="2"/><text x="2.9657%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="2.7157%" y="661" width="0.1597%" height="15" fill="rgb(213,199,42)" fg:x="34" fg:w="2"/><text x="2.9657%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="2.7157%" y="645" width="0.1597%" height="15" fill="rgb(235,201,11)" fg:x="34" fg:w="2"/><text x="2.9657%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="2.7157%" y="629" width="0.1597%" height="15" fill="rgb(207,46,11)" fg:x="34" fg:w="2"/><text x="2.9657%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.7955%" y="613" width="0.0799%" height="15" fill="rgb(241,35,35)" fg:x="35" fg:w="1"/><text x="3.0455%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.7955%" y="597" width="0.0799%" height="15" fill="rgb(243,32,47)" fg:x="35" fg:w="1"/><text x="3.0455%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="2.7955%" y="581" width="0.0799%" height="15" fill="rgb(247,202,23)" fg:x="35" fg:w="1"/><text x="3.0455%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="2.7955%" y="565" width="0.0799%" height="15" fill="rgb(219,102,11)" fg:x="35" fg:w="1"/><text x="3.0455%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="2.7955%" y="549" width="0.0799%" height="15" fill="rgb(243,110,44)" fg:x="35" fg:w="1"/><text x="3.0455%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.7955%" y="533" width="0.0799%" height="15" fill="rgb(222,74,54)" fg:x="35" fg:w="1"/><text x="3.0455%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.7955%" y="517" width="0.0799%" height="15" fill="rgb(216,99,12)" fg:x="35" fg:w="1"/><text x="3.0455%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="2.7955%" y="501" width="0.0799%" height="15" fill="rgb(226,22,26)" fg:x="35" fg:w="1"/><text x="3.0455%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="2.7955%" y="485" width="0.0799%" height="15" fill="rgb(217,163,10)" fg:x="35" fg:w="1"/><text x="3.0455%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="2.7955%" y="469" width="0.0799%" height="15" fill="rgb(213,25,53)" fg:x="35" fg:w="1"/><text x="3.0455%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="2.7955%" y="453" width="0.0799%" height="15" fill="rgb(252,105,26)" fg:x="35" fg:w="1"/><text x="3.0455%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.7955%" y="437" width="0.0799%" height="15" fill="rgb(220,39,43)" fg:x="35" fg:w="1"/><text x="3.0455%" y="447.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="2.8754%" y="757" width="0.0799%" height="15" fill="rgb(229,68,48)" fg:x="36" fg:w="1"/><text x="3.1254%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="2.8754%" y="741" width="0.0799%" height="15" fill="rgb(252,8,32)" fg:x="36" fg:w="1"/><text x="3.1254%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="2.8754%" y="725" width="0.0799%" height="15" fill="rgb(223,20,43)" fg:x="36" fg:w="1"/><text x="3.1254%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="2.8754%" y="709" width="0.0799%" height="15" fill="rgb(229,81,49)" fg:x="36" fg:w="1"/><text x="3.1254%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.8754%" y="693" width="0.0799%" height="15" fill="rgb(236,28,36)" fg:x="36" fg:w="1"/><text x="3.1254%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.8754%" y="677" width="0.0799%" height="15" fill="rgb(249,185,26)" fg:x="36" fg:w="1"/><text x="3.1254%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.8754%" y="661" width="0.0799%" height="15" fill="rgb(249,174,33)" fg:x="36" fg:w="1"/><text x="3.1254%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.8754%" y="645" width="0.0799%" height="15" fill="rgb(233,201,37)" fg:x="36" fg:w="1"/><text x="3.1254%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.8754%" y="629" width="0.0799%" height="15" fill="rgb(221,78,26)" fg:x="36" fg:w="1"/><text x="3.1254%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.8754%" y="613" width="0.0799%" height="15" fill="rgb(250,127,30)" fg:x="36" fg:w="1"/><text x="3.1254%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.8754%" y="597" width="0.0799%" height="15" fill="rgb(230,49,44)" fg:x="36" fg:w="1"/><text x="3.1254%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="2.8754%" y="581" width="0.0799%" height="15" fill="rgb(229,67,23)" fg:x="36" fg:w="1"/><text x="3.1254%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="2.8754%" y="565" width="0.0799%" height="15" fill="rgb(249,83,47)" fg:x="36" fg:w="1"/><text x="3.1254%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="2.8754%" y="549" width="0.0799%" height="15" fill="rgb(215,43,3)" fg:x="36" fg:w="1"/><text x="3.1254%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.8754%" y="533" width="0.0799%" height="15" fill="rgb(238,154,13)" fg:x="36" fg:w="1"/><text x="3.1254%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.8754%" y="517" width="0.0799%" height="15" fill="rgb(219,56,2)" fg:x="36" fg:w="1"/><text x="3.1254%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="2.8754%" y="501" width="0.0799%" height="15" fill="rgb(233,0,4)" fg:x="36" fg:w="1"/><text x="3.1254%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="2.8754%" y="485" width="0.0799%" height="15" fill="rgb(235,30,7)" fg:x="36" fg:w="1"/><text x="3.1254%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="2.8754%" y="469" width="0.0799%" height="15" fill="rgb(250,79,13)" fg:x="36" fg:w="1"/><text x="3.1254%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="2.8754%" y="453" width="0.0799%" height="15" fill="rgb(211,146,34)" fg:x="36" fg:w="1"/><text x="3.1254%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8754%" y="437" width="0.0799%" height="15" fill="rgb(228,22,38)" fg:x="36" fg:w="1"/><text x="3.1254%" y="447.50"></text></g><g><title>plugins_core::build::Build::holding (5 samples, 0.40%)</title><rect x="2.6358%" y="789" width="0.3994%" height="15" fill="rgb(235,168,5)" fg:x="33" fg:w="5"/><text x="2.8858%" y="799.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="2.8754%" y="773" width="0.1597%" height="15" fill="rgb(221,155,16)" fg:x="36" fg:w="2"/><text x="3.1254%" y="783.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="2.9553%" y="757" width="0.0799%" height="15" fill="rgb(215,215,53)" fg:x="37" fg:w="1"/><text x="3.2053%" y="767.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="2.9553%" y="741" width="0.0799%" height="15" fill="rgb(223,4,10)" fg:x="37" fg:w="1"/><text x="3.2053%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="2.9553%" y="725" width="0.0799%" height="15" fill="rgb(234,103,6)" fg:x="37" fg:w="1"/><text x="3.2053%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="2.9553%" y="709" width="0.0799%" height="15" fill="rgb(227,97,0)" fg:x="37" fg:w="1"/><text x="3.2053%" y="719.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="2.9553%" y="693" width="0.0799%" height="15" fill="rgb(234,150,53)" fg:x="37" fg:w="1"/><text x="3.2053%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="2.9553%" y="677" width="0.0799%" height="15" fill="rgb(228,201,54)" fg:x="37" fg:w="1"/><text x="3.2053%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="2.9553%" y="661" width="0.0799%" height="15" fill="rgb(222,22,37)" fg:x="37" fg:w="1"/><text x="3.2053%" y="671.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="3.0351%" y="789" width="0.0799%" height="15" fill="rgb(237,53,32)" fg:x="38" fg:w="1"/><text x="3.2851%" y="799.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="3.0351%" y="773" width="0.0799%" height="15" fill="rgb(233,25,53)" fg:x="38" fg:w="1"/><text x="3.2851%" y="783.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="3.0351%" y="757" width="0.0799%" height="15" fill="rgb(210,40,34)" fg:x="38" fg:w="1"/><text x="3.2851%" y="767.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.0351%" y="741" width="0.0799%" height="15" fill="rgb(241,220,44)" fg:x="38" fg:w="1"/><text x="3.2851%" y="751.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0351%" y="725" width="0.0799%" height="15" fill="rgb(235,28,35)" fg:x="38" fg:w="1"/><text x="3.2851%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.0351%" y="709" width="0.0799%" height="15" fill="rgb(210,56,17)" fg:x="38" fg:w="1"/><text x="3.2851%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0351%" y="693" width="0.0799%" height="15" fill="rgb(224,130,29)" fg:x="38" fg:w="1"/><text x="3.2851%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.0351%" y="677" width="0.0799%" height="15" fill="rgb(235,212,8)" fg:x="38" fg:w="1"/><text x="3.2851%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="3.0351%" y="661" width="0.0799%" height="15" fill="rgb(223,33,50)" fg:x="38" fg:w="1"/><text x="3.2851%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0351%" y="645" width="0.0799%" height="15" fill="rgb(219,149,13)" fg:x="38" fg:w="1"/><text x="3.2851%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.0351%" y="629" width="0.0799%" height="15" fill="rgb(250,156,29)" fg:x="38" fg:w="1"/><text x="3.2851%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0351%" y="613" width="0.0799%" height="15" fill="rgb(216,193,19)" fg:x="38" fg:w="1"/><text x="3.2851%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.1150%" y="773" width="0.0799%" height="15" fill="rgb(216,135,14)" fg:x="39" fg:w="1"/><text x="3.3650%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.1150%" y="757" width="0.0799%" height="15" fill="rgb(241,47,5)" fg:x="39" fg:w="1"/><text x="3.3650%" y="767.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.1150%" y="741" width="0.0799%" height="15" fill="rgb(233,42,35)" fg:x="39" fg:w="1"/><text x="3.3650%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.1150%" y="725" width="0.0799%" height="15" fill="rgb(231,13,6)" fg:x="39" fg:w="1"/><text x="3.3650%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.1150%" y="709" width="0.0799%" height="15" fill="rgb(207,181,40)" fg:x="39" fg:w="1"/><text x="3.3650%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.1150%" y="693" width="0.0799%" height="15" fill="rgb(254,173,49)" fg:x="39" fg:w="1"/><text x="3.3650%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.1150%" y="677" width="0.0799%" height="15" fill="rgb(221,1,38)" fg:x="39" fg:w="1"/><text x="3.3650%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.1150%" y="661" width="0.0799%" height="15" fill="rgb(206,124,46)" fg:x="39" fg:w="1"/><text x="3.3650%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.1150%" y="645" width="0.0799%" height="15" fill="rgb(249,21,11)" fg:x="39" fg:w="1"/><text x="3.3650%" y="655.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="3.1150%" y="629" width="0.0799%" height="15" fill="rgb(222,201,40)" fg:x="39" fg:w="1"/><text x="3.3650%" y="639.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="3.1150%" y="613" width="0.0799%" height="15" fill="rgb(235,61,29)" fg:x="39" fg:w="1"/><text x="3.3650%" y="623.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="3.1949%" y="725" width="0.0799%" height="15" fill="rgb(219,207,3)" fg:x="40" fg:w="1"/><text x="3.4449%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.1949%" y="709" width="0.0799%" height="15" fill="rgb(222,56,46)" fg:x="40" fg:w="1"/><text x="3.4449%" y="719.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.1949%" y="693" width="0.0799%" height="15" fill="rgb(239,76,54)" fg:x="40" fg:w="1"/><text x="3.4449%" y="703.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.1949%" y="677" width="0.0799%" height="15" fill="rgb(231,124,27)" fg:x="40" fg:w="1"/><text x="3.4449%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.1949%" y="661" width="0.0799%" height="15" fill="rgb(249,195,6)" fg:x="40" fg:w="1"/><text x="3.4449%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="3.1949%" y="645" width="0.0799%" height="15" fill="rgb(237,174,47)" fg:x="40" fg:w="1"/><text x="3.4449%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="3.1949%" y="773" width="0.1597%" height="15" fill="rgb(206,201,31)" fg:x="40" fg:w="2"/><text x="3.4449%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="3.1949%" y="757" width="0.1597%" height="15" fill="rgb(231,57,52)" fg:x="40" fg:w="2"/><text x="3.4449%" y="767.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="3.1949%" y="741" width="0.1597%" height="15" fill="rgb(248,177,22)" fg:x="40" fg:w="2"/><text x="3.4449%" y="751.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="3.2748%" y="725" width="0.0799%" height="15" fill="rgb(215,211,37)" fg:x="41" fg:w="1"/><text x="3.5248%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="3.2748%" y="709" width="0.0799%" height="15" fill="rgb(241,128,51)" fg:x="41" fg:w="1"/><text x="3.5248%" y="719.50"></text></g><g><title>kernel::model::props::Props::set_property (1 samples, 0.08%)</title><rect x="3.2748%" y="693" width="0.0799%" height="15" fill="rgb(227,165,31)" fg:x="41" fg:w="1"/><text x="3.5248%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.2748%" y="677" width="0.0799%" height="15" fill="rgb(228,167,24)" fg:x="41" fg:w="1"/><text x="3.5248%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.2748%" y="661" width="0.0799%" height="15" fill="rgb(228,143,12)" fg:x="41" fg:w="1"/><text x="3.5248%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="3.3546%" y="741" width="0.0799%" height="15" fill="rgb(249,149,8)" fg:x="42" fg:w="1"/><text x="3.6046%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.3546%" y="725" width="0.0799%" height="15" fill="rgb(243,35,44)" fg:x="42" fg:w="1"/><text x="3.6046%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.3546%" y="709" width="0.0799%" height="15" fill="rgb(246,89,9)" fg:x="42" fg:w="1"/><text x="3.6046%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.3546%" y="693" width="0.0799%" height="15" fill="rgb(233,213,13)" fg:x="42" fg:w="1"/><text x="3.6046%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.3546%" y="677" width="0.0799%" height="15" fill="rgb(233,141,41)" fg:x="42" fg:w="1"/><text x="3.6046%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.3546%" y="661" width="0.0799%" height="15" fill="rgb(239,167,4)" fg:x="42" fg:w="1"/><text x="3.6046%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="3.3546%" y="645" width="0.0799%" height="15" fill="rgb(209,217,16)" fg:x="42" fg:w="1"/><text x="3.6046%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.3546%" y="629" width="0.0799%" height="15" fill="rgb(219,88,35)" fg:x="42" fg:w="1"/><text x="3.6046%" y="639.50"></text></g><g><title>engine::identifiers::model::set_gid (1 samples, 0.08%)</title><rect x="3.4345%" y="741" width="0.0799%" height="15" fill="rgb(220,193,23)" fg:x="43" fg:w="1"/><text x="3.6845%" y="751.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.4345%" y="725" width="0.0799%" height="15" fill="rgb(230,90,52)" fg:x="43" fg:w="1"/><text x="3.6845%" y="735.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="3.4345%" y="709" width="0.0799%" height="15" fill="rgb(252,106,19)" fg:x="43" fg:w="1"/><text x="3.6845%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.4345%" y="693" width="0.0799%" height="15" fill="rgb(206,74,20)" fg:x="43" fg:w="1"/><text x="3.6845%" y="703.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="3.4345%" y="677" width="0.0799%" height="15" fill="rgb(230,138,44)" fg:x="43" fg:w="1"/><text x="3.6845%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.4345%" y="661" width="0.0799%" height="15" fill="rgb(235,182,43)" fg:x="43" fg:w="1"/><text x="3.6845%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.4345%" y="645" width="0.0799%" height="15" fill="rgb(242,16,51)" fg:x="43" fg:w="1"/><text x="3.6845%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="3.5144%" y="693" width="0.0799%" height="15" fill="rgb(248,9,4)" fg:x="44" fg:w="1"/><text x="3.7644%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.5144%" y="677" width="0.0799%" height="15" fill="rgb(210,31,22)" fg:x="44" fg:w="1"/><text x="3.7644%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.5144%" y="661" width="0.0799%" height="15" fill="rgb(239,54,39)" fg:x="44" fg:w="1"/><text x="3.7644%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.5144%" y="645" width="0.0799%" height="15" fill="rgb(230,99,41)" fg:x="44" fg:w="1"/><text x="3.7644%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="3.5942%" y="677" width="0.0799%" height="15" fill="rgb(253,106,12)" fg:x="45" fg:w="1"/><text x="3.8442%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.7540%" y="645" width="0.0799%" height="15" fill="rgb(213,46,41)" fg:x="47" fg:w="1"/><text x="4.0040%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.7540%" y="629" width="0.0799%" height="15" fill="rgb(215,133,35)" fg:x="47" fg:w="1"/><text x="4.0040%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.7540%" y="613" width="0.0799%" height="15" fill="rgb(213,28,5)" fg:x="47" fg:w="1"/><text x="4.0040%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.7540%" y="597" width="0.0799%" height="15" fill="rgb(215,77,49)" fg:x="47" fg:w="1"/><text x="4.0040%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="3.6741%" y="677" width="0.2396%" height="15" fill="rgb(248,100,22)" fg:x="46" fg:w="3"/><text x="3.9241%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="3.7540%" y="661" width="0.1597%" height="15" fill="rgb(208,67,9)" fg:x="47" fg:w="2"/><text x="4.0040%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="3.8339%" y="645" width="0.0799%" height="15" fill="rgb(219,133,21)" fg:x="48" fg:w="1"/><text x="4.0839%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="3.8339%" y="629" width="0.0799%" height="15" fill="rgb(246,46,29)" fg:x="48" fg:w="1"/><text x="4.0839%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.8339%" y="613" width="0.0799%" height="15" fill="rgb(246,185,52)" fg:x="48" fg:w="1"/><text x="4.0839%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.8339%" y="597" width="0.0799%" height="15" fill="rgb(252,136,11)" fg:x="48" fg:w="1"/><text x="4.0839%" y="607.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="3.5144%" y="709" width="0.4792%" height="15" fill="rgb(219,138,53)" fg:x="44" fg:w="6"/><text x="3.7644%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="3.5942%" y="693" width="0.3994%" height="15" fill="rgb(211,51,23)" fg:x="45" fg:w="5"/><text x="3.8442%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.9137%" y="677" width="0.0799%" height="15" fill="rgb(247,221,28)" fg:x="49" fg:w="1"/><text x="4.1637%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.9936%" y="661" width="0.0799%" height="15" fill="rgb(251,222,45)" fg:x="50" fg:w="1"/><text x="4.2436%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="3.9936%" y="709" width="0.2396%" height="15" fill="rgb(217,162,53)" fg:x="50" fg:w="3"/><text x="4.2436%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="3.9936%" y="693" width="0.2396%" height="15" fill="rgb(229,93,14)" fg:x="50" fg:w="3"/><text x="4.2436%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="3.9936%" y="677" width="0.2396%" height="15" fill="rgb(209,67,49)" fg:x="50" fg:w="3"/><text x="4.2436%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.0735%" y="661" width="0.1597%" height="15" fill="rgb(213,87,29)" fg:x="51" fg:w="2"/><text x="4.3235%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.0735%" y="645" width="0.1597%" height="15" fill="rgb(205,151,52)" fg:x="51" fg:w="2"/><text x="4.3235%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.0735%" y="629" width="0.1597%" height="15" fill="rgb(253,215,39)" fg:x="51" fg:w="2"/><text x="4.3235%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="4.0735%" y="613" width="0.1597%" height="15" fill="rgb(221,220,41)" fg:x="51" fg:w="2"/><text x="4.3235%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.1534%" y="597" width="0.0799%" height="15" fill="rgb(218,133,21)" fg:x="52" fg:w="1"/><text x="4.4034%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.2332%" y="661" width="0.0799%" height="15" fill="rgb(221,193,43)" fg:x="53" fg:w="1"/><text x="4.4832%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.3930%" y="613" width="0.0799%" height="15" fill="rgb(240,128,52)" fg:x="55" fg:w="1"/><text x="4.6430%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.4728%" y="613" width="0.0799%" height="15" fill="rgb(253,114,12)" fg:x="56" fg:w="1"/><text x="4.7228%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.4728%" y="597" width="0.0799%" height="15" fill="rgb(215,223,47)" fg:x="56" fg:w="1"/><text x="4.7228%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="4.4728%" y="581" width="0.0799%" height="15" fill="rgb(248,225,23)" fg:x="56" fg:w="1"/><text x="4.7228%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.4728%" y="565" width="0.0799%" height="15" fill="rgb(250,108,0)" fg:x="56" fg:w="1"/><text x="4.7228%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="4.5527%" y="581" width="0.1597%" height="15" fill="rgb(228,208,7)" fg:x="57" fg:w="2"/><text x="4.8027%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="4.5527%" y="597" width="0.3195%" height="15" fill="rgb(244,45,10)" fg:x="57" fg:w="4"/><text x="4.8027%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.7125%" y="581" width="0.1597%" height="15" fill="rgb(207,125,25)" fg:x="59" fg:w="2"/><text x="4.9625%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="4.7923%" y="565" width="0.0799%" height="15" fill="rgb(210,195,18)" fg:x="60" fg:w="1"/><text x="5.0423%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.7923%" y="549" width="0.0799%" height="15" fill="rgb(249,80,12)" fg:x="60" fg:w="1"/><text x="5.0423%" y="559.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (18 samples, 1.44%)</title><rect x="3.5144%" y="741" width="1.4377%" height="15" fill="rgb(221,65,9)" fg:x="44" fg:w="18"/><text x="3.7644%" y="751.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (18 samples, 1.44%)</title><rect x="3.5144%" y="725" width="1.4377%" height="15" fill="rgb(235,49,36)" fg:x="44" fg:w="18"/><text x="3.7644%" y="735.50"></text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.72%)</title><rect x="4.2332%" y="709" width="0.7188%" height="15" fill="rgb(225,32,20)" fg:x="53" fg:w="9"/><text x="4.4832%" y="719.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="4.2332%" y="693" width="0.7188%" height="15" fill="rgb(215,141,46)" fg:x="53" fg:w="9"/><text x="4.4832%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="4.2332%" y="677" width="0.7188%" height="15" fill="rgb(250,160,47)" fg:x="53" fg:w="9"/><text x="4.4832%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="4.3131%" y="661" width="0.6390%" height="15" fill="rgb(216,222,40)" fg:x="54" fg:w="8"/><text x="4.5631%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="4.3131%" y="645" width="0.6390%" height="15" fill="rgb(234,217,39)" fg:x="54" fg:w="8"/><text x="4.5631%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="4.3930%" y="629" width="0.5591%" height="15" fill="rgb(207,178,40)" fg:x="55" fg:w="7"/><text x="4.6430%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="4.5527%" y="613" width="0.3994%" height="15" fill="rgb(221,136,13)" fg:x="57" fg:w="5"/><text x="4.8027%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.8722%" y="597" width="0.0799%" height="15" fill="rgb(249,199,10)" fg:x="61" fg:w="1"/><text x="5.1222%" y="607.50"></text></g><g><title>engine::session::Session::flush (21 samples, 1.68%)</title><rect x="3.3546%" y="773" width="1.6773%" height="15" fill="rgb(249,222,13)" fg:x="42" fg:w="21"/><text x="3.6046%" y="783.50"></text></g><g><title>engine::session::Session::save_entity_changes (21 samples, 1.68%)</title><rect x="3.3546%" y="757" width="1.6773%" height="15" fill="rgb(244,185,38)" fg:x="42" fg:w="21"/><text x="3.6046%" y="767.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="4.9521%" y="741" width="0.0799%" height="15" fill="rgb(236,202,9)" fg:x="62" fg:w="1"/><text x="5.2021%" y="751.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="4.9521%" y="725" width="0.0799%" height="15" fill="rgb(250,229,37)" fg:x="62" fg:w="1"/><text x="5.2021%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="4.9521%" y="709" width="0.0799%" height="15" fill="rgb(206,174,23)" fg:x="62" fg:w="1"/><text x="5.2021%" y="719.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="4.9521%" y="693" width="0.0799%" height="15" fill="rgb(211,33,43)" fg:x="62" fg:w="1"/><text x="5.2021%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="4.9521%" y="677" width="0.0799%" height="15" fill="rgb(245,58,50)" fg:x="62" fg:w="1"/><text x="5.2021%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.9521%" y="661" width="0.0799%" height="15" fill="rgb(244,68,36)" fg:x="62" fg:w="1"/><text x="5.2021%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.9521%" y="645" width="0.0799%" height="15" fill="rgb(232,229,15)" fg:x="62" fg:w="1"/><text x="5.2021%" y="655.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="4.9521%" y="629" width="0.0799%" height="15" fill="rgb(254,30,23)" fg:x="62" fg:w="1"/><text x="5.2021%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="4.9521%" y="613" width="0.0799%" height="15" fill="rgb(235,160,14)" fg:x="62" fg:w="1"/><text x="5.2021%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.9521%" y="597" width="0.0799%" height="15" fill="rgb(212,155,44)" fg:x="62" fg:w="1"/><text x="5.2021%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.9521%" y="581" width="0.0799%" height="15" fill="rgb(226,2,50)" fg:x="62" fg:w="1"/><text x="5.2021%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.9521%" y="565" width="0.0799%" height="15" fill="rgb(234,177,6)" fg:x="62" fg:w="1"/><text x="5.2021%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.9521%" y="549" width="0.0799%" height="15" fill="rgb(217,24,9)" fg:x="62" fg:w="1"/><text x="5.2021%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="4.9521%" y="533" width="0.0799%" height="15" fill="rgb(220,13,46)" fg:x="62" fg:w="1"/><text x="5.2021%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="4.9521%" y="517" width="0.0799%" height="15" fill="rgb(239,221,27)" fg:x="62" fg:w="1"/><text x="5.2021%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="4.9521%" y="501" width="0.0799%" height="15" fill="rgb(222,198,25)" fg:x="62" fg:w="1"/><text x="5.2021%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="4.9521%" y="485" width="0.0799%" height="15" fill="rgb(211,99,13)" fg:x="62" fg:w="1"/><text x="5.2021%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="4.9521%" y="469" width="0.0799%" height="15" fill="rgb(232,111,31)" fg:x="62" fg:w="1"/><text x="5.2021%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="4.9521%" y="453" width="0.0799%" height="15" fill="rgb(245,82,37)" fg:x="62" fg:w="1"/><text x="5.2021%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.9521%" y="437" width="0.0799%" height="15" fill="rgb(227,149,46)" fg:x="62" fg:w="1"/><text x="5.2021%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="4.9521%" y="421" width="0.0799%" height="15" fill="rgb(218,36,50)" fg:x="62" fg:w="1"/><text x="5.2021%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.9521%" y="405" width="0.0799%" height="15" fill="rgb(226,80,48)" fg:x="62" fg:w="1"/><text x="5.2021%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="4.9521%" y="389" width="0.0799%" height="15" fill="rgb(238,224,15)" fg:x="62" fg:w="1"/><text x="5.2021%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="4.9521%" y="373" width="0.0799%" height="15" fill="rgb(241,136,10)" fg:x="62" fg:w="1"/><text x="5.2021%" y="383.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="4.9521%" y="357" width="0.0799%" height="15" fill="rgb(208,32,45)" fg:x="62" fg:w="1"/><text x="5.2021%" y="367.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="4.9521%" y="341" width="0.0799%" height="15" fill="rgb(207,135,9)" fg:x="62" fg:w="1"/><text x="5.2021%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="4.9521%" y="325" width="0.0799%" height="15" fill="rgb(206,86,44)" fg:x="62" fg:w="1"/><text x="5.2021%" y="335.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="5.0319%" y="725" width="0.0799%" height="15" fill="rgb(245,177,15)" fg:x="63" fg:w="1"/><text x="5.2819%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="5.0319%" y="709" width="0.0799%" height="15" fill="rgb(206,64,50)" fg:x="63" fg:w="1"/><text x="5.2819%" y="719.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="5.0319%" y="693" width="0.0799%" height="15" fill="rgb(234,36,40)" fg:x="63" fg:w="1"/><text x="5.2819%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="5.0319%" y="677" width="0.0799%" height="15" fill="rgb(213,64,8)" fg:x="63" fg:w="1"/><text x="5.2819%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.0319%" y="661" width="0.0799%" height="15" fill="rgb(210,75,36)" fg:x="63" fg:w="1"/><text x="5.2819%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="5.0319%" y="757" width="0.1597%" height="15" fill="rgb(229,88,21)" fg:x="63" fg:w="2"/><text x="5.2819%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="5.0319%" y="741" width="0.1597%" height="15" fill="rgb(252,204,47)" fg:x="63" fg:w="2"/><text x="5.2819%" y="751.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="5.1118%" y="725" width="0.0799%" height="15" fill="rgb(208,77,27)" fg:x="64" fg:w="1"/><text x="5.3618%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.1118%" y="709" width="0.0799%" height="15" fill="rgb(221,76,26)" fg:x="64" fg:w="1"/><text x="5.3618%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.1118%" y="693" width="0.0799%" height="15" fill="rgb(225,139,18)" fg:x="64" fg:w="1"/><text x="5.3618%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="5.1118%" y="677" width="0.0799%" height="15" fill="rgb(230,137,11)" fg:x="64" fg:w="1"/><text x="5.3618%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.1118%" y="661" width="0.0799%" height="15" fill="rgb(212,28,1)" fg:x="64" fg:w="1"/><text x="5.3618%" y="671.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="5.1917%" y="741" width="0.0799%" height="15" fill="rgb(248,164,17)" fg:x="65" fg:w="1"/><text x="5.4417%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="5.1917%" y="725" width="0.0799%" height="15" fill="rgb(222,171,42)" fg:x="65" fg:w="1"/><text x="5.4417%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="5.1917%" y="709" width="0.0799%" height="15" fill="rgb(243,84,45)" fg:x="65" fg:w="1"/><text x="5.4417%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.1917%" y="693" width="0.0799%" height="15" fill="rgb(252,49,23)" fg:x="65" fg:w="1"/><text x="5.4417%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.1917%" y="677" width="0.0799%" height="15" fill="rgb(215,19,7)" fg:x="65" fg:w="1"/><text x="5.4417%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.1917%" y="661" width="0.0799%" height="15" fill="rgb(238,81,41)" fg:x="65" fg:w="1"/><text x="5.4417%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.1917%" y="645" width="0.0799%" height="15" fill="rgb(210,199,37)" fg:x="65" fg:w="1"/><text x="5.4417%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.1917%" y="629" width="0.0799%" height="15" fill="rgb(244,192,49)" fg:x="65" fg:w="1"/><text x="5.4417%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.1917%" y="613" width="0.0799%" height="15" fill="rgb(226,211,11)" fg:x="65" fg:w="1"/><text x="5.4417%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="5.1917%" y="597" width="0.0799%" height="15" fill="rgb(236,162,54)" fg:x="65" fg:w="1"/><text x="5.4417%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.1917%" y="581" width="0.0799%" height="15" fill="rgb(220,229,9)" fg:x="65" fg:w="1"/><text x="5.4417%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.1917%" y="565" width="0.0799%" height="15" fill="rgb(250,87,22)" fg:x="65" fg:w="1"/><text x="5.4417%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.1917%" y="549" width="0.0799%" height="15" fill="rgb(239,43,17)" fg:x="65" fg:w="1"/><text x="5.4417%" y="559.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="5.2716%" y="741" width="0.0799%" height="15" fill="rgb(231,177,25)" fg:x="66" fg:w="1"/><text x="5.5216%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="5.3514%" y="677" width="0.0799%" height="15" fill="rgb(219,179,1)" fg:x="67" fg:w="1"/><text x="5.6014%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.3514%" y="661" width="0.0799%" height="15" fill="rgb(238,219,53)" fg:x="67" fg:w="1"/><text x="5.6014%" y="671.50"></text></g><g><title>plugins_core::build::Build::holding (6 samples, 0.48%)</title><rect x="5.0319%" y="773" width="0.4792%" height="15" fill="rgb(232,167,36)" fg:x="63" fg:w="6"/><text x="5.2819%" y="783.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="5.1917%" y="757" width="0.3195%" height="15" fill="rgb(244,19,51)" fg:x="65" fg:w="4"/><text x="5.4417%" y="767.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="5.3514%" y="741" width="0.1597%" height="15" fill="rgb(224,6,22)" fg:x="67" fg:w="2"/><text x="5.6014%" y="751.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="5.3514%" y="725" width="0.1597%" height="15" fill="rgb(224,145,5)" fg:x="67" fg:w="2"/><text x="5.6014%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="5.3514%" y="709" width="0.1597%" height="15" fill="rgb(234,130,49)" fg:x="67" fg:w="2"/><text x="5.6014%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="5.3514%" y="693" width="0.1597%" height="15" fill="rgb(254,6,2)" fg:x="67" fg:w="2"/><text x="5.6014%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.4313%" y="677" width="0.0799%" height="15" fill="rgb(208,96,46)" fg:x="68" fg:w="1"/><text x="5.6813%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.4313%" y="661" width="0.0799%" height="15" fill="rgb(239,3,39)" fg:x="68" fg:w="1"/><text x="5.6813%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.4313%" y="645" width="0.0799%" height="15" fill="rgb(233,210,1)" fg:x="68" fg:w="1"/><text x="5.6813%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.4313%" y="629" width="0.0799%" height="15" fill="rgb(244,137,37)" fg:x="68" fg:w="1"/><text x="5.6813%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.4313%" y="613" width="0.0799%" height="15" fill="rgb(240,136,2)" fg:x="68" fg:w="1"/><text x="5.6813%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.4313%" y="597" width="0.0799%" height="15" fill="rgb(239,18,37)" fg:x="68" fg:w="1"/><text x="5.6813%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.4313%" y="581" width="0.0799%" height="15" fill="rgb(218,185,22)" fg:x="68" fg:w="1"/><text x="5.6813%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.4313%" y="565" width="0.0799%" height="15" fill="rgb(225,218,4)" fg:x="68" fg:w="1"/><text x="5.6813%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.4313%" y="549" width="0.0799%" height="15" fill="rgb(230,182,32)" fg:x="68" fg:w="1"/><text x="5.6813%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.4313%" y="533" width="0.0799%" height="15" fill="rgb(242,56,43)" fg:x="68" fg:w="1"/><text x="5.6813%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.4313%" y="517" width="0.0799%" height="15" fill="rgb(233,99,24)" fg:x="68" fg:w="1"/><text x="5.6813%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.4313%" y="501" width="0.0799%" height="15" fill="rgb(234,209,42)" fg:x="68" fg:w="1"/><text x="5.6813%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.4313%" y="485" width="0.0799%" height="15" fill="rgb(227,7,12)" fg:x="68" fg:w="1"/><text x="5.6813%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.4313%" y="469" width="0.0799%" height="15" fill="rgb(245,203,43)" fg:x="68" fg:w="1"/><text x="5.6813%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.4313%" y="453" width="0.0799%" height="15" fill="rgb(238,205,33)" fg:x="68" fg:w="1"/><text x="5.6813%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.4313%" y="437" width="0.0799%" height="15" fill="rgb(231,56,7)" fg:x="68" fg:w="1"/><text x="5.6813%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.4313%" y="421" width="0.0799%" height="15" fill="rgb(244,186,29)" fg:x="68" fg:w="1"/><text x="5.6813%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4313%" y="405" width="0.0799%" height="15" fill="rgb(234,111,31)" fg:x="68" fg:w="1"/><text x="5.6813%" y="415.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="5.5112%" y="725" width="0.1597%" height="15" fill="rgb(241,149,10)" fg:x="69" fg:w="2"/><text x="5.7612%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="5.5112%" y="709" width="0.1597%" height="15" fill="rgb(249,206,44)" fg:x="69" fg:w="2"/><text x="5.7612%" y="719.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="5.5112%" y="693" width="0.1597%" height="15" fill="rgb(251,153,30)" fg:x="69" fg:w="2"/><text x="5.7612%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="5.5112%" y="677" width="0.1597%" height="15" fill="rgb(239,152,38)" fg:x="69" fg:w="2"/><text x="5.7612%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="5.5112%" y="661" width="0.1597%" height="15" fill="rgb(249,139,47)" fg:x="69" fg:w="2"/><text x="5.7612%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="5.5112%" y="645" width="0.1597%" height="15" fill="rgb(244,64,35)" fg:x="69" fg:w="2"/><text x="5.7612%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="5.5112%" y="629" width="0.1597%" height="15" fill="rgb(216,46,15)" fg:x="69" fg:w="2"/><text x="5.7612%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.5911%" y="613" width="0.0799%" height="15" fill="rgb(250,74,19)" fg:x="70" fg:w="1"/><text x="5.8411%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.5911%" y="597" width="0.0799%" height="15" fill="rgb(249,42,33)" fg:x="70" fg:w="1"/><text x="5.8411%" y="607.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="5.5112%" y="773" width="0.2396%" height="15" fill="rgb(242,149,17)" fg:x="69" fg:w="3"/><text x="5.7612%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="5.5112%" y="757" width="0.2396%" height="15" fill="rgb(244,29,21)" fg:x="69" fg:w="3"/><text x="5.7612%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="5.5112%" y="741" width="0.2396%" height="15" fill="rgb(220,130,37)" fg:x="69" fg:w="3"/><text x="5.7612%" y="751.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="5.6709%" y="725" width="0.0799%" height="15" fill="rgb(211,67,2)" fg:x="71" fg:w="1"/><text x="5.9209%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.8307%" y="709" width="0.0799%" height="15" fill="rgb(235,68,52)" fg:x="73" fg:w="1"/><text x="6.0807%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.8307%" y="693" width="0.0799%" height="15" fill="rgb(246,142,3)" fg:x="73" fg:w="1"/><text x="6.0807%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.8307%" y="677" width="0.0799%" height="15" fill="rgb(241,25,7)" fg:x="73" fg:w="1"/><text x="6.0807%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8307%" y="661" width="0.0799%" height="15" fill="rgb(242,119,39)" fg:x="73" fg:w="1"/><text x="6.0807%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8307%" y="645" width="0.0799%" height="15" fill="rgb(241,98,45)" fg:x="73" fg:w="1"/><text x="6.0807%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8307%" y="629" width="0.0799%" height="15" fill="rgb(254,28,30)" fg:x="73" fg:w="1"/><text x="6.0807%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.8307%" y="613" width="0.0799%" height="15" fill="rgb(241,142,54)" fg:x="73" fg:w="1"/><text x="6.0807%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="5.8307%" y="757" width="0.1597%" height="15" fill="rgb(222,85,15)" fg:x="73" fg:w="2"/><text x="6.0807%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="5.8307%" y="741" width="0.1597%" height="15" fill="rgb(210,85,47)" fg:x="73" fg:w="2"/><text x="6.0807%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="5.8307%" y="725" width="0.1597%" height="15" fill="rgb(224,206,25)" fg:x="73" fg:w="2"/><text x="6.0807%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="5.9105%" y="709" width="0.0799%" height="15" fill="rgb(243,201,19)" fg:x="74" fg:w="1"/><text x="6.1605%" y="719.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="5.9105%" y="693" width="0.0799%" height="15" fill="rgb(236,59,4)" fg:x="74" fg:w="1"/><text x="6.1605%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="5.9105%" y="677" width="0.0799%" height="15" fill="rgb(254,179,45)" fg:x="74" fg:w="1"/><text x="6.1605%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="5.9105%" y="661" width="0.0799%" height="15" fill="rgb(226,14,10)" fg:x="74" fg:w="1"/><text x="6.1605%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.9105%" y="645" width="0.0799%" height="15" fill="rgb(244,27,41)" fg:x="74" fg:w="1"/><text x="6.1605%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="5.9105%" y="629" width="0.0799%" height="15" fill="rgb(235,35,32)" fg:x="74" fg:w="1"/><text x="6.1605%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.9105%" y="613" width="0.0799%" height="15" fill="rgb(218,68,31)" fg:x="74" fg:w="1"/><text x="6.1605%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="5.9105%" y="597" width="0.0799%" height="15" fill="rgb(207,120,37)" fg:x="74" fg:w="1"/><text x="6.1605%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="5.9105%" y="581" width="0.0799%" height="15" fill="rgb(227,98,0)" fg:x="74" fg:w="1"/><text x="6.1605%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.9105%" y="565" width="0.0799%" height="15" fill="rgb(207,7,3)" fg:x="74" fg:w="1"/><text x="6.1605%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="5.9105%" y="549" width="0.0799%" height="15" fill="rgb(206,98,19)" fg:x="74" fg:w="1"/><text x="6.1605%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="5.9105%" y="533" width="0.0799%" height="15" fill="rgb(217,5,26)" fg:x="74" fg:w="1"/><text x="6.1605%" y="543.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="5.9904%" y="741" width="0.0799%" height="15" fill="rgb(235,190,38)" fg:x="75" fg:w="1"/><text x="6.2404%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="5.9904%" y="725" width="0.0799%" height="15" fill="rgb(247,86,24)" fg:x="75" fg:w="1"/><text x="6.2404%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.9904%" y="709" width="0.0799%" height="15" fill="rgb(205,101,16)" fg:x="75" fg:w="1"/><text x="6.2404%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.9904%" y="693" width="0.0799%" height="15" fill="rgb(246,168,33)" fg:x="75" fg:w="1"/><text x="6.2404%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.9904%" y="677" width="0.0799%" height="15" fill="rgb(231,114,1)" fg:x="75" fg:w="1"/><text x="6.2404%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.9904%" y="661" width="0.0799%" height="15" fill="rgb(207,184,53)" fg:x="75" fg:w="1"/><text x="6.2404%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.9904%" y="645" width="0.0799%" height="15" fill="rgb(224,95,51)" fg:x="75" fg:w="1"/><text x="6.2404%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.9904%" y="629" width="0.0799%" height="15" fill="rgb(212,188,45)" fg:x="75" fg:w="1"/><text x="6.2404%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.9904%" y="613" width="0.0799%" height="15" fill="rgb(223,154,38)" fg:x="75" fg:w="1"/><text x="6.2404%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="5.9904%" y="597" width="0.0799%" height="15" fill="rgb(251,22,52)" fg:x="75" fg:w="1"/><text x="6.2404%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.9904%" y="581" width="0.0799%" height="15" fill="rgb(229,209,22)" fg:x="75" fg:w="1"/><text x="6.2404%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.9904%" y="565" width="0.0799%" height="15" fill="rgb(234,138,34)" fg:x="75" fg:w="1"/><text x="6.2404%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.9904%" y="549" width="0.0799%" height="15" fill="rgb(212,95,11)" fg:x="75" fg:w="1"/><text x="6.2404%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.9904%" y="533" width="0.0799%" height="15" fill="rgb(240,179,47)" fg:x="75" fg:w="1"/><text x="6.2404%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.9904%" y="517" width="0.0799%" height="15" fill="rgb(240,163,11)" fg:x="75" fg:w="1"/><text x="6.2404%" y="527.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.0703%" y="741" width="0.0799%" height="15" fill="rgb(236,37,12)" fg:x="76" fg:w="1"/><text x="6.3203%" y="751.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="6.0703%" y="725" width="0.0799%" height="15" fill="rgb(232,164,16)" fg:x="76" fg:w="1"/><text x="6.3203%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.0703%" y="709" width="0.0799%" height="15" fill="rgb(244,205,15)" fg:x="76" fg:w="1"/><text x="6.3203%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.0703%" y="693" width="0.0799%" height="15" fill="rgb(223,117,47)" fg:x="76" fg:w="1"/><text x="6.3203%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="6.0703%" y="677" width="0.0799%" height="15" fill="rgb(244,107,35)" fg:x="76" fg:w="1"/><text x="6.3203%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="6.0703%" y="661" width="0.0799%" height="15" fill="rgb(205,140,8)" fg:x="76" fg:w="1"/><text x="6.3203%" y="671.50"></text></g><g><title>plugins_core::build::Build::occupying (6 samples, 0.48%)</title><rect x="5.7508%" y="773" width="0.4792%" height="15" fill="rgb(228,84,46)" fg:x="72" fg:w="6"/><text x="6.0008%" y="783.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="5.9904%" y="757" width="0.2396%" height="15" fill="rgb(254,188,9)" fg:x="75" fg:w="3"/><text x="6.2404%" y="767.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="6.1502%" y="741" width="0.0799%" height="15" fill="rgb(206,112,54)" fg:x="77" fg:w="1"/><text x="6.4002%" y="751.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="6.1502%" y="725" width="0.0799%" height="15" fill="rgb(216,84,49)" fg:x="77" fg:w="1"/><text x="6.4002%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="6.1502%" y="709" width="0.0799%" height="15" fill="rgb(214,194,35)" fg:x="77" fg:w="1"/><text x="6.4002%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.1502%" y="693" width="0.0799%" height="15" fill="rgb(249,28,3)" fg:x="77" fg:w="1"/><text x="6.4002%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.1502%" y="677" width="0.0799%" height="15" fill="rgb(222,56,52)" fg:x="77" fg:w="1"/><text x="6.4002%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.1502%" y="661" width="0.0799%" height="15" fill="rgb(245,217,50)" fg:x="77" fg:w="1"/><text x="6.4002%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.1502%" y="645" width="0.0799%" height="15" fill="rgb(213,201,24)" fg:x="77" fg:w="1"/><text x="6.4002%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.1502%" y="629" width="0.0799%" height="15" fill="rgb(248,116,28)" fg:x="77" fg:w="1"/><text x="6.4002%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.1502%" y="613" width="0.0799%" height="15" fill="rgb(219,72,43)" fg:x="77" fg:w="1"/><text x="6.4002%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.1502%" y="597" width="0.0799%" height="15" fill="rgb(209,138,14)" fg:x="77" fg:w="1"/><text x="6.4002%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.1502%" y="581" width="0.0799%" height="15" fill="rgb(222,18,33)" fg:x="77" fg:w="1"/><text x="6.4002%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.1502%" y="565" width="0.0799%" height="15" fill="rgb(213,199,7)" fg:x="77" fg:w="1"/><text x="6.4002%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.1502%" y="549" width="0.0799%" height="15" fill="rgb(250,110,10)" fg:x="77" fg:w="1"/><text x="6.4002%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.1502%" y="533" width="0.0799%" height="15" fill="rgb(248,123,6)" fg:x="77" fg:w="1"/><text x="6.4002%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.1502%" y="517" width="0.0799%" height="15" fill="rgb(206,91,31)" fg:x="77" fg:w="1"/><text x="6.4002%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.1502%" y="501" width="0.0799%" height="15" fill="rgb(211,154,13)" fg:x="77" fg:w="1"/><text x="6.4002%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.1502%" y="485" width="0.0799%" height="15" fill="rgb(225,148,7)" fg:x="77" fg:w="1"/><text x="6.4002%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.1502%" y="469" width="0.0799%" height="15" fill="rgb(220,160,43)" fg:x="77" fg:w="1"/><text x="6.4002%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.1502%" y="453" width="0.0799%" height="15" fill="rgb(213,52,39)" fg:x="77" fg:w="1"/><text x="6.4002%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.1502%" y="437" width="0.0799%" height="15" fill="rgb(243,137,7)" fg:x="77" fg:w="1"/><text x="6.4002%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.1502%" y="421" width="0.0799%" height="15" fill="rgb(230,79,13)" fg:x="77" fg:w="1"/><text x="6.4002%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.1502%" y="405" width="0.0799%" height="15" fill="rgb(247,105,23)" fg:x="77" fg:w="1"/><text x="6.4002%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.2300%" y="757" width="0.0799%" height="15" fill="rgb(223,179,41)" fg:x="78" fg:w="1"/><text x="6.4800%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.2300%" y="741" width="0.0799%" height="15" fill="rgb(218,9,34)" fg:x="78" fg:w="1"/><text x="6.4800%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.2300%" y="725" width="0.0799%" height="15" fill="rgb(222,106,8)" fg:x="78" fg:w="1"/><text x="6.4800%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="6.2300%" y="709" width="0.0799%" height="15" fill="rgb(211,220,0)" fg:x="78" fg:w="1"/><text x="6.4800%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.2300%" y="693" width="0.0799%" height="15" fill="rgb(229,52,16)" fg:x="78" fg:w="1"/><text x="6.4800%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.2300%" y="677" width="0.0799%" height="15" fill="rgb(212,155,18)" fg:x="78" fg:w="1"/><text x="6.4800%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.2300%" y="661" width="0.0799%" height="15" fill="rgb(242,21,14)" fg:x="78" fg:w="1"/><text x="6.4800%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.2300%" y="645" width="0.0799%" height="15" fill="rgb(222,19,48)" fg:x="78" fg:w="1"/><text x="6.4800%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.2300%" y="629" width="0.0799%" height="15" fill="rgb(232,45,27)" fg:x="78" fg:w="1"/><text x="6.4800%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.2300%" y="613" width="0.0799%" height="15" fill="rgb(249,103,42)" fg:x="78" fg:w="1"/><text x="6.4800%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.2300%" y="597" width="0.0799%" height="15" fill="rgb(246,81,33)" fg:x="78" fg:w="1"/><text x="6.4800%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.2300%" y="581" width="0.0799%" height="15" fill="rgb(252,33,42)" fg:x="78" fg:w="1"/><text x="6.4800%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.2300%" y="565" width="0.0799%" height="15" fill="rgb(209,212,41)" fg:x="78" fg:w="1"/><text x="6.4800%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.2300%" y="549" width="0.0799%" height="15" fill="rgb(207,154,6)" fg:x="78" fg:w="1"/><text x="6.4800%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="6.2300%" y="533" width="0.0799%" height="15" fill="rgb(223,64,47)" fg:x="78" fg:w="1"/><text x="6.4800%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (41 samples, 3.27%)</title><rect x="3.1150%" y="789" width="3.2748%" height="15" fill="rgb(211,161,38)" fg:x="39" fg:w="41"/><text x="3.3650%" y="799.50">plu..</text></g><g><title>plugins_core::build::Build::with_username (2 samples, 0.16%)</title><rect x="6.2300%" y="773" width="0.1597%" height="15" fill="rgb(219,138,40)" fg:x="78" fg:w="2"/><text x="6.4800%" y="783.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="6.3099%" y="757" width="0.0799%" height="15" fill="rgb(241,228,46)" fg:x="79" fg:w="1"/><text x="6.5599%" y="767.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="6.3099%" y="741" width="0.0799%" height="15" fill="rgb(223,209,38)" fg:x="79" fg:w="1"/><text x="6.5599%" y="751.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.3099%" y="725" width="0.0799%" height="15" fill="rgb(236,164,45)" fg:x="79" fg:w="1"/><text x="6.5599%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.3099%" y="709" width="0.0799%" height="15" fill="rgb(231,15,5)" fg:x="79" fg:w="1"/><text x="6.5599%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.3099%" y="693" width="0.0799%" height="15" fill="rgb(252,35,15)" fg:x="79" fg:w="1"/><text x="6.5599%" y="703.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (2 samples, 0.16%)</title><rect x="6.3898%" y="789" width="0.1597%" height="15" fill="rgb(248,181,18)" fg:x="80" fg:w="2"/><text x="6.6398%" y="799.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (2 samples, 0.16%)</title><rect x="6.3898%" y="773" width="0.1597%" height="15" fill="rgb(233,39,42)" fg:x="80" fg:w="2"/><text x="6.6398%" y="783.50"></text></g><g><title>kernel::model::entity::Entity::new_blank (1 samples, 0.08%)</title><rect x="6.4696%" y="757" width="0.0799%" height="15" fill="rgb(238,110,33)" fg:x="81" fg:w="1"/><text x="6.7196%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="6.4696%" y="741" width="0.0799%" height="15" fill="rgb(233,195,10)" fg:x="81" fg:w="1"/><text x="6.7196%" y="751.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="6.4696%" y="725" width="0.0799%" height="15" fill="rgb(254,105,3)" fg:x="81" fg:w="1"/><text x="6.7196%" y="735.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="6.4696%" y="709" width="0.0799%" height="15" fill="rgb(221,225,9)" fg:x="81" fg:w="1"/><text x="6.7196%" y="719.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="6.4696%" y="693" width="0.0799%" height="15" fill="rgb(224,227,45)" fg:x="81" fg:w="1"/><text x="6.7196%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.4696%" y="677" width="0.0799%" height="15" fill="rgb(229,198,43)" fg:x="81" fg:w="1"/><text x="6.7196%" y="687.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.4696%" y="661" width="0.0799%" height="15" fill="rgb(206,209,35)" fg:x="81" fg:w="1"/><text x="6.7196%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.4696%" y="645" width="0.0799%" height="15" fill="rgb(245,195,53)" fg:x="81" fg:w="1"/><text x="6.7196%" y="655.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="6.4696%" y="629" width="0.0799%" height="15" fill="rgb(240,92,26)" fg:x="81" fg:w="1"/><text x="6.7196%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="6.4696%" y="613" width="0.0799%" height="15" fill="rgb(207,40,23)" fg:x="81" fg:w="1"/><text x="6.7196%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="6.4696%" y="597" width="0.0799%" height="15" fill="rgb(223,111,35)" fg:x="81" fg:w="1"/><text x="6.7196%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="6.4696%" y="581" width="0.0799%" height="15" fill="rgb(229,147,28)" fg:x="81" fg:w="1"/><text x="6.7196%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="6.4696%" y="565" width="0.0799%" height="15" fill="rgb(211,29,28)" fg:x="81" fg:w="1"/><text x="6.7196%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="6.5495%" y="709" width="0.1597%" height="15" fill="rgb(228,72,33)" fg:x="82" fg:w="2"/><text x="6.7995%" y="719.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.5495%" y="693" width="0.1597%" height="15" fill="rgb(205,214,31)" fg:x="82" fg:w="2"/><text x="6.7995%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="6.5495%" y="677" width="0.1597%" height="15" fill="rgb(224,111,15)" fg:x="82" fg:w="2"/><text x="6.7995%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="6.5495%" y="661" width="0.1597%" height="15" fill="rgb(253,21,26)" fg:x="82" fg:w="2"/><text x="6.7995%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="6.5495%" y="645" width="0.1597%" height="15" fill="rgb(245,139,43)" fg:x="82" fg:w="2"/><text x="6.7995%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.6294%" y="629" width="0.0799%" height="15" fill="rgb(252,170,7)" fg:x="83" fg:w="1"/><text x="6.8794%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6294%" y="613" width="0.0799%" height="15" fill="rgb(231,118,14)" fg:x="83" fg:w="1"/><text x="6.8794%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.6294%" y="597" width="0.0799%" height="15" fill="rgb(238,83,0)" fg:x="83" fg:w="1"/><text x="6.8794%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6294%" y="581" width="0.0799%" height="15" fill="rgb(221,39,39)" fg:x="83" fg:w="1"/><text x="6.8794%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.6294%" y="565" width="0.0799%" height="15" fill="rgb(222,119,46)" fg:x="83" fg:w="1"/><text x="6.8794%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6294%" y="549" width="0.0799%" height="15" fill="rgb(222,165,49)" fg:x="83" fg:w="1"/><text x="6.8794%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="6.5495%" y="757" width="0.2396%" height="15" fill="rgb(219,113,52)" fg:x="82" fg:w="3"/><text x="6.7995%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="6.5495%" y="741" width="0.2396%" height="15" fill="rgb(214,7,15)" fg:x="82" fg:w="3"/><text x="6.7995%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="6.5495%" y="725" width="0.2396%" height="15" fill="rgb(235,32,4)" fg:x="82" fg:w="3"/><text x="6.7995%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="6.7093%" y="709" width="0.0799%" height="15" fill="rgb(238,90,54)" fg:x="84" fg:w="1"/><text x="6.9593%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.7093%" y="693" width="0.0799%" height="15" fill="rgb(213,208,19)" fg:x="84" fg:w="1"/><text x="6.9593%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.7093%" y="677" width="0.0799%" height="15" fill="rgb(233,156,4)" fg:x="84" fg:w="1"/><text x="6.9593%" y="687.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (68 samples, 5.43%)</title><rect x="1.4377%" y="805" width="5.4313%" height="15" fill="rgb(207,194,5)" fg:x="18" fg:w="68"/><text x="1.6877%" y="815.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.32%)</title><rect x="6.5495%" y="789" width="0.3195%" height="15" fill="rgb(206,111,30)" fg:x="82" fg:w="4"/><text x="6.7995%" y="799.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="6.5495%" y="773" width="0.3195%" height="15" fill="rgb(243,70,54)" fg:x="82" fg:w="4"/><text x="6.7995%" y="783.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="6.7891%" y="757" width="0.0799%" height="15" fill="rgb(242,28,8)" fg:x="85" fg:w="1"/><text x="7.0391%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="6.7891%" y="741" width="0.0799%" height="15" fill="rgb(219,106,18)" fg:x="85" fg:w="1"/><text x="7.0391%" y="751.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="6.7891%" y="725" width="0.0799%" height="15" fill="rgb(244,222,10)" fg:x="85" fg:w="1"/><text x="7.0391%" y="735.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.7891%" y="709" width="0.0799%" height="15" fill="rgb(236,179,52)" fg:x="85" fg:w="1"/><text x="7.0391%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="6.8690%" y="805" width="0.0799%" height="15" fill="rgb(213,23,39)" fg:x="86" fg:w="1"/><text x="7.1190%" y="815.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="6.8690%" y="789" width="0.0799%" height="15" fill="rgb(238,48,10)" fg:x="86" fg:w="1"/><text x="7.1190%" y="799.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="6.8690%" y="773" width="0.0799%" height="15" fill="rgb(251,196,23)" fg:x="86" fg:w="1"/><text x="7.1190%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="6.8690%" y="757" width="0.0799%" height="15" fill="rgb(250,152,24)" fg:x="86" fg:w="1"/><text x="7.1190%" y="767.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.8690%" y="741" width="0.0799%" height="15" fill="rgb(209,150,17)" fg:x="86" fg:w="1"/><text x="7.1190%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.0288%" y="773" width="0.0799%" height="15" fill="rgb(234,202,34)" fg:x="88" fg:w="1"/><text x="7.2788%" y="783.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.0288%" y="757" width="0.0799%" height="15" fill="rgb(253,148,53)" fg:x="88" fg:w="1"/><text x="7.2788%" y="767.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="7.1086%" y="773" width="0.0799%" height="15" fill="rgb(218,129,16)" fg:x="89" fg:w="1"/><text x="7.3586%" y="783.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.1086%" y="757" width="0.0799%" height="15" fill="rgb(216,85,19)" fg:x="89" fg:w="1"/><text x="7.3586%" y="767.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.1885%" y="773" width="0.0799%" height="15" fill="rgb(235,228,7)" fg:x="90" fg:w="1"/><text x="7.4385%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="7.1885%" y="757" width="0.0799%" height="15" fill="rgb(245,175,0)" fg:x="90" fg:w="1"/><text x="7.4385%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="7.2684%" y="725" width="0.0799%" height="15" fill="rgb(208,168,36)" fg:x="91" fg:w="1"/><text x="7.5184%" y="735.50"></text></g><g><title>engine::identifiers::model::get_gid (3 samples, 0.24%)</title><rect x="7.2684%" y="773" width="0.2396%" height="15" fill="rgb(246,171,24)" fg:x="91" fg:w="3"/><text x="7.5184%" y="783.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="7.2684%" y="757" width="0.2396%" height="15" fill="rgb(215,142,24)" fg:x="91" fg:w="3"/><text x="7.5184%" y="767.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="7.2684%" y="741" width="0.2396%" height="15" fill="rgb(250,187,7)" fg:x="91" fg:w="3"/><text x="7.5184%" y="751.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="7.3482%" y="725" width="0.1597%" height="15" fill="rgb(228,66,33)" fg:x="92" fg:w="2"/><text x="7.5982%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.4281%" y="709" width="0.0799%" height="15" fill="rgb(234,215,21)" fg:x="93" fg:w="1"/><text x="7.6781%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.4281%" y="693" width="0.0799%" height="15" fill="rgb(222,191,20)" fg:x="93" fg:w="1"/><text x="7.6781%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.4281%" y="677" width="0.0799%" height="15" fill="rgb(245,79,54)" fg:x="93" fg:w="1"/><text x="7.6781%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="7.5080%" y="709" width="0.0799%" height="15" fill="rgb(240,10,37)" fg:x="94" fg:w="1"/><text x="7.7580%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.5879%" y="709" width="0.0799%" height="15" fill="rgb(214,192,32)" fg:x="95" fg:w="1"/><text x="7.8379%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.5879%" y="693" width="0.0799%" height="15" fill="rgb(209,36,54)" fg:x="95" fg:w="1"/><text x="7.8379%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.7476%" y="661" width="0.0799%" height="15" fill="rgb(220,10,11)" fg:x="97" fg:w="1"/><text x="7.9976%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.7476%" y="645" width="0.0799%" height="15" fill="rgb(221,106,17)" fg:x="97" fg:w="1"/><text x="7.9976%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.7476%" y="629" width="0.0799%" height="15" fill="rgb(251,142,44)" fg:x="97" fg:w="1"/><text x="7.9976%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.8275%" y="661" width="0.0799%" height="15" fill="rgb(238,13,15)" fg:x="98" fg:w="1"/><text x="8.0775%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.8275%" y="645" width="0.0799%" height="15" fill="rgb(208,107,27)" fg:x="98" fg:w="1"/><text x="8.0775%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.8275%" y="629" width="0.0799%" height="15" fill="rgb(205,136,37)" fg:x="98" fg:w="1"/><text x="8.0775%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="7.6677%" y="709" width="0.3195%" height="15" fill="rgb(250,205,27)" fg:x="96" fg:w="4"/><text x="7.9177%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="7.7476%" y="693" width="0.2396%" height="15" fill="rgb(210,80,43)" fg:x="97" fg:w="3"/><text x="7.9976%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="7.7476%" y="677" width="0.2396%" height="15" fill="rgb(247,160,36)" fg:x="97" fg:w="3"/><text x="7.9976%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.9073%" y="661" width="0.0799%" height="15" fill="rgb(234,13,49)" fg:x="99" fg:w="1"/><text x="8.1573%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.9073%" y="645" width="0.0799%" height="15" fill="rgb(234,122,0)" fg:x="99" fg:w="1"/><text x="8.1573%" y="655.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="7.5080%" y="741" width="0.5591%" height="15" fill="rgb(207,146,38)" fg:x="94" fg:w="7"/><text x="7.7580%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="7.5080%" y="725" width="0.5591%" height="15" fill="rgb(207,177,25)" fg:x="94" fg:w="7"/><text x="7.7580%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.9872%" y="709" width="0.0799%" height="15" fill="rgb(211,178,42)" fg:x="100" fg:w="1"/><text x="8.2372%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.9872%" y="693" width="0.0799%" height="15" fill="rgb(230,69,54)" fg:x="100" fg:w="1"/><text x="8.2372%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.9872%" y="677" width="0.0799%" height="15" fill="rgb(214,135,41)" fg:x="100" fg:w="1"/><text x="8.2372%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.9872%" y="661" width="0.0799%" height="15" fill="rgb(237,67,25)" fg:x="100" fg:w="1"/><text x="8.2372%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.9872%" y="645" width="0.0799%" height="15" fill="rgb(222,189,50)" fg:x="100" fg:w="1"/><text x="8.2372%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.9872%" y="629" width="0.0799%" height="15" fill="rgb(245,148,34)" fg:x="100" fg:w="1"/><text x="8.2372%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.0671%" y="645" width="0.0799%" height="15" fill="rgb(222,29,6)" fg:x="101" fg:w="1"/><text x="8.3171%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.0671%" y="629" width="0.0799%" height="15" fill="rgb(221,189,43)" fg:x="101" fg:w="1"/><text x="8.3171%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.0671%" y="741" width="0.1597%" height="15" fill="rgb(207,36,27)" fg:x="101" fg:w="2"/><text x="8.3171%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="8.0671%" y="725" width="0.1597%" height="15" fill="rgb(217,90,24)" fg:x="101" fg:w="2"/><text x="8.3171%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.0671%" y="709" width="0.1597%" height="15" fill="rgb(224,66,35)" fg:x="101" fg:w="2"/><text x="8.3171%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.0671%" y="693" width="0.1597%" height="15" fill="rgb(221,13,50)" fg:x="101" fg:w="2"/><text x="8.3171%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.0671%" y="677" width="0.1597%" height="15" fill="rgb(236,68,49)" fg:x="101" fg:w="2"/><text x="8.3171%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.0671%" y="661" width="0.1597%" height="15" fill="rgb(229,146,28)" fg:x="101" fg:w="2"/><text x="8.3171%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.1470%" y="645" width="0.0799%" height="15" fill="rgb(225,31,38)" fg:x="102" fg:w="1"/><text x="8.3970%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.1470%" y="629" width="0.0799%" height="15" fill="rgb(250,208,3)" fg:x="102" fg:w="1"/><text x="8.3970%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.2268%" y="677" width="0.0799%" height="15" fill="rgb(246,54,23)" fg:x="103" fg:w="1"/><text x="8.4768%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.3067%" y="677" width="0.0799%" height="15" fill="rgb(243,76,11)" fg:x="104" fg:w="1"/><text x="8.5567%" y="687.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="8.4665%" y="661" width="0.1597%" height="15" fill="rgb(245,21,50)" fg:x="106" fg:w="2"/><text x="8.7165%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.6262%" y="661" width="0.0799%" height="15" fill="rgb(228,9,43)" fg:x="108" fg:w="1"/><text x="8.8762%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.7061%" y="629" width="0.0799%" height="15" fill="rgb(208,100,47)" fg:x="109" fg:w="1"/><text x="8.9561%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.7061%" y="613" width="0.0799%" height="15" fill="rgb(232,26,8)" fg:x="109" fg:w="1"/><text x="8.9561%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.7859%" y="597" width="0.0799%" height="15" fill="rgb(216,166,38)" fg:x="110" fg:w="1"/><text x="9.0359%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.72%)</title><rect x="8.2268%" y="709" width="0.7188%" height="15" fill="rgb(251,202,51)" fg:x="103" fg:w="9"/><text x="8.4768%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.72%)</title><rect x="8.2268%" y="693" width="0.7188%" height="15" fill="rgb(254,216,34)" fg:x="103" fg:w="9"/><text x="8.4768%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="8.3866%" y="677" width="0.5591%" height="15" fill="rgb(251,32,27)" fg:x="105" fg:w="7"/><text x="8.6366%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.7061%" y="661" width="0.2396%" height="15" fill="rgb(208,127,28)" fg:x="109" fg:w="3"/><text x="8.9561%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.7061%" y="645" width="0.2396%" height="15" fill="rgb(224,137,22)" fg:x="109" fg:w="3"/><text x="8.9561%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.7859%" y="629" width="0.1597%" height="15" fill="rgb(254,70,32)" fg:x="110" fg:w="2"/><text x="9.0359%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.7859%" y="613" width="0.1597%" height="15" fill="rgb(229,75,37)" fg:x="110" fg:w="2"/><text x="9.0359%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.8658%" y="597" width="0.0799%" height="15" fill="rgb(252,64,23)" fg:x="111" fg:w="1"/><text x="9.1158%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.0256%" y="661" width="0.0799%" height="15" fill="rgb(232,162,48)" fg:x="113" fg:w="1"/><text x="9.2756%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="9.0256%" y="645" width="0.0799%" height="15" fill="rgb(246,160,12)" fg:x="113" fg:w="1"/><text x="9.2756%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.0256%" y="629" width="0.0799%" height="15" fill="rgb(247,166,0)" fg:x="113" fg:w="1"/><text x="9.2756%" y="639.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (12 samples, 0.96%)</title><rect x="8.2268%" y="725" width="0.9585%" height="15" fill="rgb(249,219,21)" fg:x="103" fg:w="12"/><text x="8.4768%" y="735.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="8.9457%" y="709" width="0.2396%" height="15" fill="rgb(205,209,3)" fg:x="112" fg:w="3"/><text x="9.1957%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.0256%" y="693" width="0.1597%" height="15" fill="rgb(243,44,1)" fg:x="113" fg:w="2"/><text x="9.2756%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.0256%" y="677" width="0.1597%" height="15" fill="rgb(206,159,16)" fg:x="113" fg:w="2"/><text x="9.2756%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.1054%" y="661" width="0.0799%" height="15" fill="rgb(244,77,30)" fg:x="114" fg:w="1"/><text x="9.3554%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="9.1853%" y="725" width="0.0799%" height="15" fill="rgb(218,69,12)" fg:x="115" fg:w="1"/><text x="9.4353%" y="735.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.2652%" y="693" width="0.0799%" height="15" fill="rgb(212,87,7)" fg:x="116" fg:w="1"/><text x="9.5152%" y="703.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.3450%" y="693" width="0.1597%" height="15" fill="rgb(245,114,25)" fg:x="117" fg:w="2"/><text x="9.5950%" y="703.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="9.5048%" y="693" width="0.0799%" height="15" fill="rgb(210,61,42)" fg:x="119" fg:w="1"/><text x="9.7548%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.5048%" y="677" width="0.0799%" height="15" fill="rgb(211,52,33)" fg:x="119" fg:w="1"/><text x="9.7548%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.6645%" y="677" width="0.0799%" height="15" fill="rgb(234,58,33)" fg:x="121" fg:w="1"/><text x="9.9145%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7444%" y="677" width="0.0799%" height="15" fill="rgb(220,115,36)" fg:x="122" fg:w="1"/><text x="9.9944%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8243%" y="645" width="0.0799%" height="15" fill="rgb(243,153,54)" fg:x="123" fg:w="1"/><text x="10.0743%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.9042%" y="629" width="0.0799%" height="15" fill="rgb(251,47,18)" fg:x="124" fg:w="1"/><text x="10.1542%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.9840%" y="613" width="0.0799%" height="15" fill="rgb(242,102,42)" fg:x="125" fg:w="1"/><text x="10.2340%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.9840%" y="597" width="0.0799%" height="15" fill="rgb(234,31,38)" fg:x="125" fg:w="1"/><text x="10.2340%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.9840%" y="581" width="0.0799%" height="15" fill="rgb(221,117,51)" fg:x="125" fg:w="1"/><text x="10.2340%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0639%" y="581" width="0.0799%" height="15" fill="rgb(212,20,18)" fg:x="126" fg:w="1"/><text x="10.3139%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0639%" y="565" width="0.0799%" height="15" fill="rgb(245,133,36)" fg:x="126" fg:w="1"/><text x="10.3139%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.0639%" y="549" width="0.0799%" height="15" fill="rgb(212,6,19)" fg:x="126" fg:w="1"/><text x="10.3139%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.1438%" y="533" width="0.0799%" height="15" fill="rgb(218,1,36)" fg:x="127" fg:w="1"/><text x="10.3938%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1438%" y="517" width="0.0799%" height="15" fill="rgb(246,84,54)" fg:x="127" fg:w="1"/><text x="10.3938%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1438%" y="501" width="0.0799%" height="15" fill="rgb(242,110,6)" fg:x="127" fg:w="1"/><text x="10.3938%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.1438%" y="485" width="0.0799%" height="15" fill="rgb(214,47,5)" fg:x="127" fg:w="1"/><text x="10.3938%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (13 samples, 1.04%)</title><rect x="9.2652%" y="725" width="1.0383%" height="15" fill="rgb(218,159,25)" fg:x="116" fg:w="13"/><text x="9.5152%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.04%)</title><rect x="9.2652%" y="709" width="1.0383%" height="15" fill="rgb(215,211,28)" fg:x="116" fg:w="13"/><text x="9.5152%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="9.5847%" y="693" width="0.7188%" height="15" fill="rgb(238,59,32)" fg:x="120" fg:w="9"/><text x="9.8347%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="9.8243%" y="677" width="0.4792%" height="15" fill="rgb(226,82,3)" fg:x="123" fg:w="6"/><text x="10.0743%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="9.8243%" y="661" width="0.4792%" height="15" fill="rgb(240,164,32)" fg:x="123" fg:w="6"/><text x="10.0743%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="9.9042%" y="645" width="0.3994%" height="15" fill="rgb(232,46,7)" fg:x="124" fg:w="5"/><text x="10.1542%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="9.9840%" y="629" width="0.3195%" height="15" fill="rgb(229,129,53)" fg:x="125" fg:w="4"/><text x="10.2340%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="10.0639%" y="613" width="0.2396%" height="15" fill="rgb(234,188,29)" fg:x="126" fg:w="3"/><text x="10.3139%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="10.0639%" y="597" width="0.2396%" height="15" fill="rgb(246,141,4)" fg:x="126" fg:w="3"/><text x="10.3139%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="10.1438%" y="581" width="0.1597%" height="15" fill="rgb(229,23,39)" fg:x="127" fg:w="2"/><text x="10.3938%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.1438%" y="565" width="0.1597%" height="15" fill="rgb(206,12,3)" fg:x="127" fg:w="2"/><text x="10.3938%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="10.1438%" y="549" width="0.1597%" height="15" fill="rgb(252,226,20)" fg:x="127" fg:w="2"/><text x="10.3938%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.2236%" y="533" width="0.0799%" height="15" fill="rgb(216,123,35)" fg:x="128" fg:w="1"/><text x="10.4736%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.3834%" y="581" width="0.0799%" height="15" fill="rgb(212,68,40)" fg:x="130" fg:w="1"/><text x="10.6334%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.3834%" y="565" width="0.0799%" height="15" fill="rgb(254,125,32)" fg:x="130" fg:w="1"/><text x="10.6334%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3834%" y="549" width="0.0799%" height="15" fill="rgb(253,97,22)" fg:x="130" fg:w="1"/><text x="10.6334%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3834%" y="533" width="0.0799%" height="15" fill="rgb(241,101,14)" fg:x="130" fg:w="1"/><text x="10.6334%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="10.3834%" y="517" width="0.0799%" height="15" fill="rgb(238,103,29)" fg:x="130" fg:w="1"/><text x="10.6334%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="10.4633%" y="565" width="0.2396%" height="15" fill="rgb(233,195,47)" fg:x="131" fg:w="3"/><text x="10.7133%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="10.4633%" y="549" width="0.2396%" height="15" fill="rgb(246,218,30)" fg:x="131" fg:w="3"/><text x="10.7133%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="10.4633%" y="533" width="0.2396%" height="15" fill="rgb(219,145,47)" fg:x="131" fg:w="3"/><text x="10.7133%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="10.5431%" y="517" width="0.1597%" height="15" fill="rgb(243,12,26)" fg:x="132" fg:w="2"/><text x="10.7931%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.6230%" y="501" width="0.0799%" height="15" fill="rgb(214,87,16)" fg:x="133" fg:w="1"/><text x="10.8730%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.6230%" y="485" width="0.0799%" height="15" fill="rgb(208,99,42)" fg:x="133" fg:w="1"/><text x="10.8730%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="10.3834%" y="597" width="0.3994%" height="15" fill="rgb(253,99,2)" fg:x="130" fg:w="5"/><text x="10.6334%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="10.4633%" y="581" width="0.3195%" height="15" fill="rgb(220,168,23)" fg:x="131" fg:w="4"/><text x="10.7133%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.7029%" y="565" width="0.0799%" height="15" fill="rgb(242,38,24)" fg:x="134" fg:w="1"/><text x="10.9529%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.7029%" y="549" width="0.0799%" height="15" fill="rgb(225,182,9)" fg:x="134" fg:w="1"/><text x="10.9529%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="10.3834%" y="629" width="0.4792%" height="15" fill="rgb(243,178,37)" fg:x="130" fg:w="6"/><text x="10.6334%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="10.3834%" y="613" width="0.4792%" height="15" fill="rgb(232,139,19)" fg:x="130" fg:w="6"/><text x="10.6334%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.7827%" y="597" width="0.0799%" height="15" fill="rgb(225,201,24)" fg:x="135" fg:w="1"/><text x="11.0327%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.7827%" y="581" width="0.0799%" height="15" fill="rgb(221,47,46)" fg:x="135" fg:w="1"/><text x="11.0327%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.7827%" y="565" width="0.0799%" height="15" fill="rgb(249,23,13)" fg:x="135" fg:w="1"/><text x="11.0327%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.8626%" y="629" width="0.0799%" height="15" fill="rgb(219,9,5)" fg:x="136" fg:w="1"/><text x="11.1126%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.72%)</title><rect x="10.3035%" y="661" width="0.7188%" height="15" fill="rgb(254,171,16)" fg:x="129" fg:w="9"/><text x="10.5535%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="10.3834%" y="645" width="0.6390%" height="15" fill="rgb(230,171,20)" fg:x="130" fg:w="8"/><text x="10.6334%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9425%" y="629" width="0.0799%" height="15" fill="rgb(210,71,41)" fg:x="137" fg:w="1"/><text x="11.1925%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9425%" y="613" width="0.0799%" height="15" fill="rgb(206,173,20)" fg:x="137" fg:w="1"/><text x="11.1925%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.9425%" y="597" width="0.0799%" height="15" fill="rgb(233,88,34)" fg:x="137" fg:w="1"/><text x="11.1925%" y="607.50"></text></g><g><title>engine::session::Session::close (53 samples, 4.23%)</title><rect x="6.9489%" y="805" width="4.2332%" height="15" fill="rgb(223,209,46)" fg:x="87" fg:w="53"/><text x="7.1989%" y="815.50">engin..</text></g><g><title>engine::session::Session::save_entity_changes (52 samples, 4.15%)</title><rect x="7.0288%" y="789" width="4.1534%" height="15" fill="rgb(250,43,18)" fg:x="88" fg:w="52"/><text x="7.2788%" y="799.50">engin..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (46 samples, 3.67%)</title><rect x="7.5080%" y="773" width="3.6741%" height="15" fill="rgb(208,13,10)" fg:x="94" fg:w="46"/><text x="7.7580%" y="783.50">engi..</text></g><g><title>engine::session::SavesEntities::check_for_changes (46 samples, 3.67%)</title><rect x="7.5080%" y="757" width="3.6741%" height="15" fill="rgb(212,200,36)" fg:x="94" fg:w="46"/><text x="7.7580%" y="767.50">engi..</text></g><g><title>kernel::model::any_entity_changes (37 samples, 2.96%)</title><rect x="8.2268%" y="741" width="2.9553%" height="15" fill="rgb(225,90,30)" fg:x="103" fg:w="37"/><text x="8.4768%" y="751.50">ker..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (11 samples, 0.88%)</title><rect x="10.3035%" y="725" width="0.8786%" height="15" fill="rgb(236,182,39)" fg:x="129" fg:w="11"/><text x="10.5535%" y="735.50"></text></g><g><title>serde_json::de::from_trait (11 samples, 0.88%)</title><rect x="10.3035%" y="709" width="0.8786%" height="15" fill="rgb(212,144,35)" fg:x="129" fg:w="11"/><text x="10.5535%" y="719.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.88%)</title><rect x="10.3035%" y="693" width="0.8786%" height="15" fill="rgb(228,63,44)" fg:x="129" fg:w="11"/><text x="10.5535%" y="703.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.88%)</title><rect x="10.3035%" y="677" width="0.8786%" height="15" fill="rgb(228,109,6)" fg:x="129" fg:w="11"/><text x="10.5535%" y="687.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="11.0224%" y="661" width="0.1597%" height="15" fill="rgb(238,117,24)" fg:x="138" fg:w="2"/><text x="11.2724%" y="671.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.16%)</title><rect x="11.0224%" y="645" width="0.1597%" height="15" fill="rgb(242,26,26)" fg:x="138" fg:w="2"/><text x="11.2724%" y="655.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Evaluator&gt;::evaluate (2 samples, 0.16%)</title><rect x="11.2620%" y="677" width="0.1597%" height="15" fill="rgb(221,92,48)" fg:x="141" fg:w="2"/><text x="11.5120%" y="687.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="11.2620%" y="661" width="0.1597%" height="15" fill="rgb(209,209,32)" fg:x="141" fg:w="2"/><text x="11.5120%" y="671.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="11.3419%" y="645" width="0.0799%" height="15" fill="rgb(221,70,22)" fg:x="142" fg:w="1"/><text x="11.5919%" y="655.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="11.3419%" y="629" width="0.0799%" height="15" fill="rgb(248,145,5)" fg:x="142" fg:w="1"/><text x="11.5919%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.4217%" y="613" width="0.0799%" height="15" fill="rgb(226,116,26)" fg:x="143" fg:w="1"/><text x="11.6717%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.5016%" y="613" width="0.0799%" height="15" fill="rgb(244,5,17)" fg:x="144" fg:w="1"/><text x="11.7516%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.5016%" y="597" width="0.0799%" height="15" fill="rgb(252,159,33)" fg:x="144" fg:w="1"/><text x="11.7516%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="11.4217%" y="629" width="0.2396%" height="15" fill="rgb(206,71,0)" fg:x="143" fg:w="3"/><text x="11.6717%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="11.5815%" y="613" width="0.0799%" height="15" fill="rgb(233,118,54)" fg:x="145" fg:w="1"/><text x="11.8315%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.5815%" y="597" width="0.0799%" height="15" fill="rgb(234,83,48)" fg:x="145" fg:w="1"/><text x="11.8315%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.5815%" y="581" width="0.0799%" height="15" fill="rgb(228,3,54)" fg:x="145" fg:w="1"/><text x="11.8315%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.5815%" y="565" width="0.0799%" height="15" fill="rgb(226,155,13)" fg:x="145" fg:w="1"/><text x="11.8315%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.5815%" y="549" width="0.0799%" height="15" fill="rgb(241,28,37)" fg:x="145" fg:w="1"/><text x="11.8315%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.8211%" y="581" width="0.1597%" height="15" fill="rgb(233,93,10)" fg:x="148" fg:w="2"/><text x="12.0711%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.8211%" y="565" width="0.1597%" height="15" fill="rgb(225,113,19)" fg:x="148" fg:w="2"/><text x="12.0711%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.8211%" y="549" width="0.1597%" height="15" fill="rgb(241,2,18)" fg:x="148" fg:w="2"/><text x="12.0711%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.9010%" y="533" width="0.0799%" height="15" fill="rgb(228,207,21)" fg:x="149" fg:w="1"/><text x="12.1510%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="11.9808%" y="581" width="0.1597%" height="15" fill="rgb(213,211,35)" fg:x="150" fg:w="2"/><text x="12.2308%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.9808%" y="565" width="0.1597%" height="15" fill="rgb(209,83,10)" fg:x="150" fg:w="2"/><text x="12.2308%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.0607%" y="549" width="0.0799%" height="15" fill="rgb(209,164,1)" fg:x="151" fg:w="1"/><text x="12.3107%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.0607%" y="533" width="0.0799%" height="15" fill="rgb(213,184,43)" fg:x="151" fg:w="1"/><text x="12.3107%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.0607%" y="517" width="0.0799%" height="15" fill="rgb(231,61,34)" fg:x="151" fg:w="1"/><text x="12.3107%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.0607%" y="501" width="0.0799%" height="15" fill="rgb(235,75,3)" fg:x="151" fg:w="1"/><text x="12.3107%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.0607%" y="485" width="0.0799%" height="15" fill="rgb(220,106,47)" fg:x="151" fg:w="1"/><text x="12.3107%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.0607%" y="469" width="0.0799%" height="15" fill="rgb(210,196,33)" fg:x="151" fg:w="1"/><text x="12.3107%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.0607%" y="453" width="0.0799%" height="15" fill="rgb(229,154,42)" fg:x="151" fg:w="1"/><text x="12.3107%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.0607%" y="437" width="0.0799%" height="15" fill="rgb(228,114,26)" fg:x="151" fg:w="1"/><text x="12.3107%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.0607%" y="421" width="0.0799%" height="15" fill="rgb(208,144,1)" fg:x="151" fg:w="1"/><text x="12.3107%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.0607%" y="405" width="0.0799%" height="15" fill="rgb(239,112,37)" fg:x="151" fg:w="1"/><text x="12.3107%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.0607%" y="389" width="0.0799%" height="15" fill="rgb(210,96,50)" fg:x="151" fg:w="1"/><text x="12.3107%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.0607%" y="373" width="0.0799%" height="15" fill="rgb(222,178,2)" fg:x="151" fg:w="1"/><text x="12.3107%" y="383.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (8 samples, 0.64%)</title><rect x="11.6613%" y="629" width="0.6390%" height="15" fill="rgb(226,74,18)" fg:x="146" fg:w="8"/><text x="11.9113%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::modified (8 samples, 0.64%)</title><rect x="11.6613%" y="613" width="0.6390%" height="15" fill="rgb(225,67,54)" fg:x="146" fg:w="8"/><text x="11.9113%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (7 samples, 0.56%)</title><rect x="11.7412%" y="597" width="0.5591%" height="15" fill="rgb(251,92,32)" fg:x="147" fg:w="7"/><text x="11.9912%" y="607.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="12.1406%" y="581" width="0.1597%" height="15" fill="rgb(228,149,22)" fg:x="152" fg:w="2"/><text x="12.3906%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="12.3003%" y="517" width="0.0799%" height="15" fill="rgb(243,54,13)" fg:x="154" fg:w="1"/><text x="12.5503%" y="527.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="12.3003%" y="501" width="0.0799%" height="15" fill="rgb(243,180,28)" fg:x="154" fg:w="1"/><text x="12.5503%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="12.3003%" y="485" width="0.0799%" height="15" fill="rgb(208,167,24)" fg:x="154" fg:w="1"/><text x="12.5503%" y="495.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="12.3003%" y="469" width="0.0799%" height="15" fill="rgb(245,73,45)" fg:x="154" fg:w="1"/><text x="12.5503%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="12.3003%" y="453" width="0.0799%" height="15" fill="rgb(237,203,48)" fg:x="154" fg:w="1"/><text x="12.5503%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.3003%" y="437" width="0.0799%" height="15" fill="rgb(211,197,16)" fg:x="154" fg:w="1"/><text x="12.5503%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.3003%" y="421" width="0.0799%" height="15" fill="rgb(243,99,51)" fg:x="154" fg:w="1"/><text x="12.5503%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.3003%" y="405" width="0.0799%" height="15" fill="rgb(215,123,29)" fg:x="154" fg:w="1"/><text x="12.5503%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.3003%" y="389" width="0.0799%" height="15" fill="rgb(239,186,37)" fg:x="154" fg:w="1"/><text x="12.5503%" y="399.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="12.3802%" y="501" width="0.0799%" height="15" fill="rgb(252,136,39)" fg:x="155" fg:w="1"/><text x="12.6302%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.3802%" y="485" width="0.0799%" height="15" fill="rgb(223,213,32)" fg:x="155" fg:w="1"/><text x="12.6302%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.3802%" y="469" width="0.0799%" height="15" fill="rgb(233,115,5)" fg:x="155" fg:w="1"/><text x="12.6302%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.3802%" y="453" width="0.0799%" height="15" fill="rgb(207,226,44)" fg:x="155" fg:w="1"/><text x="12.6302%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.3802%" y="437" width="0.0799%" height="15" fill="rgb(208,126,0)" fg:x="155" fg:w="1"/><text x="12.6302%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.3802%" y="421" width="0.0799%" height="15" fill="rgb(244,66,21)" fg:x="155" fg:w="1"/><text x="12.6302%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="12.3003%" y="565" width="0.2396%" height="15" fill="rgb(222,97,12)" fg:x="154" fg:w="3"/><text x="12.5503%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="12.3003%" y="549" width="0.2396%" height="15" fill="rgb(219,213,19)" fg:x="154" fg:w="3"/><text x="12.5503%" y="559.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="12.3003%" y="533" width="0.2396%" height="15" fill="rgb(252,169,30)" fg:x="154" fg:w="3"/><text x="12.5503%" y="543.50"></text></g><g><title>kernel::model::entity::Entity::from_str (2 samples, 0.16%)</title><rect x="12.3802%" y="517" width="0.1597%" height="15" fill="rgb(206,32,51)" fg:x="155" fg:w="2"/><text x="12.6302%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.4601%" y="501" width="0.0799%" height="15" fill="rgb(250,172,42)" fg:x="156" fg:w="1"/><text x="12.7101%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.4601%" y="485" width="0.0799%" height="15" fill="rgb(209,34,43)" fg:x="156" fg:w="1"/><text x="12.7101%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.4601%" y="469" width="0.0799%" height="15" fill="rgb(223,11,35)" fg:x="156" fg:w="1"/><text x="12.7101%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.4601%" y="453" width="0.0799%" height="15" fill="rgb(251,219,26)" fg:x="156" fg:w="1"/><text x="12.7101%" y="463.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.4601%" y="437" width="0.0799%" height="15" fill="rgb(231,119,3)" fg:x="156" fg:w="1"/><text x="12.7101%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.4601%" y="421" width="0.0799%" height="15" fill="rgb(216,97,11)" fg:x="156" fg:w="1"/><text x="12.7101%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.4601%" y="405" width="0.0799%" height="15" fill="rgb(223,59,9)" fg:x="156" fg:w="1"/><text x="12.7101%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="12.4601%" y="389" width="0.0799%" height="15" fill="rgb(233,93,31)" fg:x="156" fg:w="1"/><text x="12.7101%" y="399.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="12.4601%" y="373" width="0.0799%" height="15" fill="rgb(239,81,33)" fg:x="156" fg:w="1"/><text x="12.7101%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="12.4601%" y="357" width="0.0799%" height="15" fill="rgb(213,120,34)" fg:x="156" fg:w="1"/><text x="12.7101%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.4601%" y="341" width="0.0799%" height="15" fill="rgb(243,49,53)" fg:x="156" fg:w="1"/><text x="12.7101%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.4601%" y="325" width="0.0799%" height="15" fill="rgb(247,216,33)" fg:x="156" fg:w="1"/><text x="12.7101%" y="335.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (4 samples, 0.32%)</title><rect x="12.3003%" y="629" width="0.3195%" height="15" fill="rgb(226,26,14)" fg:x="154" fg:w="4"/><text x="12.5503%" y="639.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (4 samples, 0.32%)</title><rect x="12.3003%" y="613" width="0.3195%" height="15" fill="rgb(215,49,53)" fg:x="154" fg:w="4"/><text x="12.5503%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="12.3003%" y="597" width="0.3195%" height="15" fill="rgb(245,162,40)" fg:x="154" fg:w="4"/><text x="12.5503%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="12.3003%" y="581" width="0.3195%" height="15" fill="rgb(229,68,17)" fg:x="154" fg:w="4"/><text x="12.5503%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.5399%" y="565" width="0.0799%" height="15" fill="rgb(213,182,10)" fg:x="157" fg:w="1"/><text x="12.7899%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.5399%" y="549" width="0.0799%" height="15" fill="rgb(245,125,30)" fg:x="157" fg:w="1"/><text x="12.7899%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.5399%" y="533" width="0.0799%" height="15" fill="rgb(232,202,2)" fg:x="157" fg:w="1"/><text x="12.7899%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.5399%" y="517" width="0.0799%" height="15" fill="rgb(237,140,51)" fg:x="157" fg:w="1"/><text x="12.7899%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="12.8594%" y="565" width="0.1597%" height="15" fill="rgb(236,157,25)" fg:x="161" fg:w="2"/><text x="13.1094%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.9393%" y="549" width="0.0799%" height="15" fill="rgb(219,209,0)" fg:x="162" fg:w="1"/><text x="13.1893%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.9393%" y="533" width="0.0799%" height="15" fill="rgb(240,116,54)" fg:x="162" fg:w="1"/><text x="13.1893%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.9393%" y="517" width="0.0799%" height="15" fill="rgb(216,10,36)" fg:x="162" fg:w="1"/><text x="13.1893%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.9393%" y="501" width="0.0799%" height="15" fill="rgb(222,72,44)" fg:x="162" fg:w="1"/><text x="13.1893%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.9393%" y="485" width="0.0799%" height="15" fill="rgb(232,159,9)" fg:x="162" fg:w="1"/><text x="13.1893%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (6 samples, 0.48%)</title><rect x="12.6997%" y="597" width="0.4792%" height="15" fill="rgb(210,39,32)" fg:x="159" fg:w="6"/><text x="12.9497%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="12.6997%" y="581" width="0.4792%" height="15" fill="rgb(216,194,45)" fg:x="159" fg:w="6"/><text x="12.9497%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="13.0192%" y="565" width="0.1597%" height="15" fill="rgb(218,18,35)" fg:x="163" fg:w="2"/><text x="13.2692%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="13.2588%" y="565" width="0.1597%" height="15" fill="rgb(207,83,51)" fg:x="166" fg:w="2"/><text x="13.5088%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="13.3387%" y="549" width="0.0799%" height="15" fill="rgb(225,63,43)" fg:x="167" fg:w="1"/><text x="13.5887%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="13.4185%" y="485" width="0.2396%" height="15" fill="rgb(207,57,36)" fg:x="168" fg:w="3"/><text x="13.6685%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (2 samples, 0.16%)</title><rect x="13.4984%" y="469" width="0.1597%" height="15" fill="rgb(216,99,33)" fg:x="169" fg:w="2"/><text x="13.7484%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="13.4984%" y="453" width="0.1597%" height="15" fill="rgb(225,42,16)" fg:x="169" fg:w="2"/><text x="13.7484%" y="463.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="13.5783%" y="437" width="0.0799%" height="15" fill="rgb(220,201,45)" fg:x="170" fg:w="1"/><text x="13.8283%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="13.5783%" y="421" width="0.0799%" height="15" fill="rgb(225,33,4)" fg:x="170" fg:w="1"/><text x="13.8283%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="13.5783%" y="405" width="0.0799%" height="15" fill="rgb(224,33,50)" fg:x="170" fg:w="1"/><text x="13.8283%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="13.5783%" y="389" width="0.0799%" height="15" fill="rgb(246,198,51)" fg:x="170" fg:w="1"/><text x="13.8283%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="13.5783%" y="373" width="0.0799%" height="15" fill="rgb(205,22,4)" fg:x="170" fg:w="1"/><text x="13.8283%" y="383.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="13.5783%" y="357" width="0.0799%" height="15" fill="rgb(206,3,8)" fg:x="170" fg:w="1"/><text x="13.8283%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="13.5783%" y="341" width="0.0799%" height="15" fill="rgb(251,23,15)" fg:x="170" fg:w="1"/><text x="13.8283%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="13.5783%" y="325" width="0.0799%" height="15" fill="rgb(252,88,28)" fg:x="170" fg:w="1"/><text x="13.8283%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="13.5783%" y="309" width="0.0799%" height="15" fill="rgb(212,127,14)" fg:x="170" fg:w="1"/><text x="13.8283%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.5783%" y="293" width="0.0799%" height="15" fill="rgb(247,145,37)" fg:x="170" fg:w="1"/><text x="13.8283%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.5783%" y="277" width="0.0799%" height="15" fill="rgb(209,117,53)" fg:x="170" fg:w="1"/><text x="13.8283%" y="287.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="13.5783%" y="261" width="0.0799%" height="15" fill="rgb(212,90,42)" fg:x="170" fg:w="1"/><text x="13.8283%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="13.5783%" y="245" width="0.0799%" height="15" fill="rgb(218,164,37)" fg:x="170" fg:w="1"/><text x="13.8283%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="13.5783%" y="229" width="0.0799%" height="15" fill="rgb(246,65,34)" fg:x="170" fg:w="1"/><text x="13.8283%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="13.5783%" y="213" width="0.0799%" height="15" fill="rgb(231,100,33)" fg:x="170" fg:w="1"/><text x="13.8283%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="13.5783%" y="197" width="0.0799%" height="15" fill="rgb(228,126,14)" fg:x="170" fg:w="1"/><text x="13.8283%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="13.5783%" y="181" width="0.0799%" height="15" fill="rgb(215,173,21)" fg:x="170" fg:w="1"/><text x="13.8283%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.5783%" y="165" width="0.0799%" height="15" fill="rgb(210,6,40)" fg:x="170" fg:w="1"/><text x="13.8283%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="13.5783%" y="149" width="0.0799%" height="15" fill="rgb(212,48,18)" fg:x="170" fg:w="1"/><text x="13.8283%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.5783%" y="133" width="0.0799%" height="15" fill="rgb(230,214,11)" fg:x="170" fg:w="1"/><text x="13.8283%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="13.5783%" y="117" width="0.0799%" height="15" fill="rgb(254,105,39)" fg:x="170" fg:w="1"/><text x="13.8283%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="13.5783%" y="101" width="0.0799%" height="15" fill="rgb(245,158,5)" fg:x="170" fg:w="1"/><text x="13.8283%" y="111.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="13.5783%" y="85" width="0.0799%" height="15" fill="rgb(249,208,11)" fg:x="170" fg:w="1"/><text x="13.8283%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.5783%" y="69" width="0.0799%" height="15" fill="rgb(210,39,28)" fg:x="170" fg:w="1"/><text x="13.8283%" y="79.50"></text></g><g><title>core::iter::adapters::try_process (6 samples, 0.48%)</title><rect x="13.4185%" y="501" width="0.4792%" height="15" fill="rgb(211,56,53)" fg:x="168" fg:w="6"/><text x="13.6685%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="13.6581%" y="485" width="0.2396%" height="15" fill="rgb(226,201,30)" fg:x="171" fg:w="3"/><text x="13.9081%" y="495.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (2 samples, 0.16%)</title><rect x="13.7380%" y="469" width="0.1597%" height="15" fill="rgb(239,101,34)" fg:x="172" fg:w="2"/><text x="13.9880%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (2 samples, 0.16%)</title><rect x="13.7380%" y="453" width="0.1597%" height="15" fill="rgb(226,209,5)" fg:x="172" fg:w="2"/><text x="13.9880%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="13.8179%" y="437" width="0.0799%" height="15" fill="rgb(250,105,47)" fg:x="173" fg:w="1"/><text x="14.0679%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="13.8179%" y="421" width="0.0799%" height="15" fill="rgb(230,72,3)" fg:x="173" fg:w="1"/><text x="14.0679%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="13.8179%" y="405" width="0.0799%" height="15" fill="rgb(232,218,39)" fg:x="173" fg:w="1"/><text x="14.0679%" y="415.50"></text></g><g><title>engine::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="13.8179%" y="389" width="0.0799%" height="15" fill="rgb(248,166,6)" fg:x="173" fg:w="1"/><text x="14.0679%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="13.8179%" y="373" width="0.0799%" height="15" fill="rgb(247,89,20)" fg:x="173" fg:w="1"/><text x="14.0679%" y="383.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="13.8179%" y="357" width="0.0799%" height="15" fill="rgb(248,130,54)" fg:x="173" fg:w="1"/><text x="14.0679%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="13.8179%" y="341" width="0.0799%" height="15" fill="rgb(234,196,4)" fg:x="173" fg:w="1"/><text x="14.0679%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="13.8179%" y="325" width="0.0799%" height="15" fill="rgb(250,143,31)" fg:x="173" fg:w="1"/><text x="14.0679%" y="335.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="13.8179%" y="309" width="0.0799%" height="15" fill="rgb(211,110,34)" fg:x="173" fg:w="1"/><text x="14.0679%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.8179%" y="293" width="0.0799%" height="15" fill="rgb(215,124,48)" fg:x="173" fg:w="1"/><text x="14.0679%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.8179%" y="277" width="0.0799%" height="15" fill="rgb(216,46,13)" fg:x="173" fg:w="1"/><text x="14.0679%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.8179%" y="261" width="0.0799%" height="15" fill="rgb(205,184,25)" fg:x="173" fg:w="1"/><text x="14.0679%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.8179%" y="245" width="0.0799%" height="15" fill="rgb(228,1,10)" fg:x="173" fg:w="1"/><text x="14.0679%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.8179%" y="229" width="0.0799%" height="15" fill="rgb(213,116,27)" fg:x="173" fg:w="1"/><text x="14.0679%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.8179%" y="213" width="0.0799%" height="15" fill="rgb(241,95,50)" fg:x="173" fg:w="1"/><text x="14.0679%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.8179%" y="197" width="0.0799%" height="15" fill="rgb(238,48,32)" fg:x="173" fg:w="1"/><text x="14.0679%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.8179%" y="181" width="0.0799%" height="15" fill="rgb(235,113,49)" fg:x="173" fg:w="1"/><text x="14.0679%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.8179%" y="165" width="0.0799%" height="15" fill="rgb(205,127,43)" fg:x="173" fg:w="1"/><text x="14.0679%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.8179%" y="149" width="0.0799%" height="15" fill="rgb(250,162,2)" fg:x="173" fg:w="1"/><text x="14.0679%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.8179%" y="133" width="0.0799%" height="15" fill="rgb(220,13,41)" fg:x="173" fg:w="1"/><text x="14.0679%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.8179%" y="117" width="0.0799%" height="15" fill="rgb(249,221,25)" fg:x="173" fg:w="1"/><text x="14.0679%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.8179%" y="101" width="0.0799%" height="15" fill="rgb(215,208,19)" fg:x="173" fg:w="1"/><text x="14.0679%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.8179%" y="85" width="0.0799%" height="15" fill="rgb(236,175,2)" fg:x="173" fg:w="1"/><text x="14.0679%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.8179%" y="69" width="0.0799%" height="15" fill="rgb(241,52,2)" fg:x="173" fg:w="1"/><text x="14.0679%" y="79.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="13.8179%" y="53" width="0.0799%" height="15" fill="rgb(248,140,14)" fg:x="173" fg:w="1"/><text x="14.0679%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="13.8179%" y="37" width="0.0799%" height="15" fill="rgb(253,22,42)" fg:x="173" fg:w="1"/><text x="14.0679%" y="47.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (7 samples, 0.56%)</title><rect x="13.4185%" y="517" width="0.5591%" height="15" fill="rgb(234,61,47)" fg:x="168" fg:w="7"/><text x="13.6685%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="13.8978%" y="501" width="0.0799%" height="15" fill="rgb(208,226,15)" fg:x="174" fg:w="1"/><text x="14.1478%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="13.8978%" y="485" width="0.0799%" height="15" fill="rgb(217,221,4)" fg:x="174" fg:w="1"/><text x="14.1478%" y="495.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.8978%" y="469" width="0.0799%" height="15" fill="rgb(212,174,34)" fg:x="174" fg:w="1"/><text x="14.1478%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.8978%" y="453" width="0.0799%" height="15" fill="rgb(253,83,4)" fg:x="174" fg:w="1"/><text x="14.1478%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.8978%" y="437" width="0.0799%" height="15" fill="rgb(250,195,49)" fg:x="174" fg:w="1"/><text x="14.1478%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.8978%" y="421" width="0.0799%" height="15" fill="rgb(241,192,25)" fg:x="174" fg:w="1"/><text x="14.1478%" y="431.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.9776%" y="469" width="0.0799%" height="15" fill="rgb(208,124,10)" fg:x="175" fg:w="1"/><text x="14.2276%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.9776%" y="453" width="0.0799%" height="15" fill="rgb(222,33,0)" fg:x="175" fg:w="1"/><text x="14.2276%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.9776%" y="437" width="0.0799%" height="15" fill="rgb(234,209,28)" fg:x="175" fg:w="1"/><text x="14.2276%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.9776%" y="421" width="0.0799%" height="15" fill="rgb(224,11,23)" fg:x="175" fg:w="1"/><text x="14.2276%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.0575%" y="325" width="0.0799%" height="15" fill="rgb(232,99,1)" fg:x="176" fg:w="1"/><text x="14.3075%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.0575%" y="309" width="0.0799%" height="15" fill="rgb(237,95,45)" fg:x="176" fg:w="1"/><text x="14.3075%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.0575%" y="293" width="0.0799%" height="15" fill="rgb(208,109,11)" fg:x="176" fg:w="1"/><text x="14.3075%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.0575%" y="277" width="0.0799%" height="15" fill="rgb(216,190,48)" fg:x="176" fg:w="1"/><text x="14.3075%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.0575%" y="261" width="0.0799%" height="15" fill="rgb(251,171,36)" fg:x="176" fg:w="1"/><text x="14.3075%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.0575%" y="245" width="0.0799%" height="15" fill="rgb(230,62,22)" fg:x="176" fg:w="1"/><text x="14.3075%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.0575%" y="229" width="0.0799%" height="15" fill="rgb(225,114,35)" fg:x="176" fg:w="1"/><text x="14.3075%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.0575%" y="213" width="0.0799%" height="15" fill="rgb(215,118,42)" fg:x="176" fg:w="1"/><text x="14.3075%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.0575%" y="197" width="0.0799%" height="15" fill="rgb(243,119,21)" fg:x="176" fg:w="1"/><text x="14.3075%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.0575%" y="181" width="0.0799%" height="15" fill="rgb(252,177,53)" fg:x="176" fg:w="1"/><text x="14.3075%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.0575%" y="165" width="0.0799%" height="15" fill="rgb(237,209,29)" fg:x="176" fg:w="1"/><text x="14.3075%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.0575%" y="149" width="0.0799%" height="15" fill="rgb(212,65,23)" fg:x="176" fg:w="1"/><text x="14.3075%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.0575%" y="133" width="0.0799%" height="15" fill="rgb(230,222,46)" fg:x="176" fg:w="1"/><text x="14.3075%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.0575%" y="117" width="0.0799%" height="15" fill="rgb(215,135,32)" fg:x="176" fg:w="1"/><text x="14.3075%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.0575%" y="101" width="0.0799%" height="15" fill="rgb(246,101,22)" fg:x="176" fg:w="1"/><text x="14.3075%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.0575%" y="85" width="0.0799%" height="15" fill="rgb(206,107,13)" fg:x="176" fg:w="1"/><text x="14.3075%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.0575%" y="69" width="0.0799%" height="15" fill="rgb(250,100,44)" fg:x="176" fg:w="1"/><text x="14.3075%" y="79.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="14.0575%" y="373" width="0.1597%" height="15" fill="rgb(231,147,38)" fg:x="176" fg:w="2"/><text x="14.3075%" y="383.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="14.0575%" y="357" width="0.1597%" height="15" fill="rgb(229,8,40)" fg:x="176" fg:w="2"/><text x="14.3075%" y="367.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="14.0575%" y="341" width="0.1597%" height="15" fill="rgb(221,135,30)" fg:x="176" fg:w="2"/><text x="14.3075%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.1374%" y="325" width="0.0799%" height="15" fill="rgb(249,193,18)" fg:x="177" fg:w="1"/><text x="14.3874%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.1374%" y="309" width="0.0799%" height="15" fill="rgb(209,133,39)" fg:x="177" fg:w="1"/><text x="14.3874%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.1374%" y="293" width="0.0799%" height="15" fill="rgb(232,100,14)" fg:x="177" fg:w="1"/><text x="14.3874%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.1374%" y="277" width="0.0799%" height="15" fill="rgb(224,185,1)" fg:x="177" fg:w="1"/><text x="14.3874%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.1374%" y="261" width="0.0799%" height="15" fill="rgb(223,139,8)" fg:x="177" fg:w="1"/><text x="14.3874%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.1374%" y="245" width="0.0799%" height="15" fill="rgb(232,213,38)" fg:x="177" fg:w="1"/><text x="14.3874%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.1374%" y="229" width="0.0799%" height="15" fill="rgb(207,94,22)" fg:x="177" fg:w="1"/><text x="14.3874%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.2173%" y="341" width="0.0799%" height="15" fill="rgb(219,183,54)" fg:x="178" fg:w="1"/><text x="14.4673%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="14.2173%" y="325" width="0.0799%" height="15" fill="rgb(216,185,54)" fg:x="178" fg:w="1"/><text x="14.4673%" y="335.50"></text></g><g><title>engine::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="14.2173%" y="373" width="0.1597%" height="15" fill="rgb(254,217,39)" fg:x="178" fg:w="2"/><text x="14.4673%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="14.2173%" y="357" width="0.1597%" height="15" fill="rgb(240,178,23)" fg:x="178" fg:w="2"/><text x="14.4673%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.2971%" y="341" width="0.0799%" height="15" fill="rgb(218,11,47)" fg:x="179" fg:w="1"/><text x="14.5471%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="14.2971%" y="325" width="0.0799%" height="15" fill="rgb(218,51,51)" fg:x="179" fg:w="1"/><text x="14.5471%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.3770%" y="309" width="0.0799%" height="15" fill="rgb(238,126,27)" fg:x="180" fg:w="1"/><text x="14.6270%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.3770%" y="293" width="0.0799%" height="15" fill="rgb(249,202,22)" fg:x="180" fg:w="1"/><text x="14.6270%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.4569%" y="277" width="0.0799%" height="15" fill="rgb(254,195,49)" fg:x="181" fg:w="1"/><text x="14.7069%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.5367%" y="245" width="0.0799%" height="15" fill="rgb(208,123,14)" fg:x="182" fg:w="1"/><text x="14.7867%" y="255.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="14.5367%" y="229" width="0.0799%" height="15" fill="rgb(224,200,8)" fg:x="182" fg:w="1"/><text x="14.7867%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.6166%" y="213" width="0.0799%" height="15" fill="rgb(217,61,36)" fg:x="183" fg:w="1"/><text x="14.8666%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.6166%" y="197" width="0.0799%" height="15" fill="rgb(206,35,45)" fg:x="183" fg:w="1"/><text x="14.8666%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.6965%" y="213" width="0.0799%" height="15" fill="rgb(217,65,33)" fg:x="184" fg:w="1"/><text x="14.9465%" y="223.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="14.3770%" y="357" width="0.4792%" height="15" fill="rgb(222,158,48)" fg:x="180" fg:w="6"/><text x="14.6270%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.48%)</title><rect x="14.3770%" y="341" width="0.4792%" height="15" fill="rgb(254,2,54)" fg:x="180" fg:w="6"/><text x="14.6270%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="14.3770%" y="325" width="0.4792%" height="15" fill="rgb(250,143,38)" fg:x="180" fg:w="6"/><text x="14.6270%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.40%)</title><rect x="14.4569%" y="309" width="0.3994%" height="15" fill="rgb(248,25,0)" fg:x="181" fg:w="5"/><text x="14.7069%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="14.4569%" y="293" width="0.3994%" height="15" fill="rgb(206,152,27)" fg:x="181" fg:w="5"/><text x="14.7069%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="14.5367%" y="277" width="0.3195%" height="15" fill="rgb(240,77,30)" fg:x="182" fg:w="4"/><text x="14.7867%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="14.5367%" y="261" width="0.3195%" height="15" fill="rgb(231,5,3)" fg:x="182" fg:w="4"/><text x="14.7867%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="14.6166%" y="245" width="0.2396%" height="15" fill="rgb(207,226,32)" fg:x="183" fg:w="3"/><text x="14.8666%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="14.6166%" y="229" width="0.2396%" height="15" fill="rgb(222,207,47)" fg:x="183" fg:w="3"/><text x="14.8666%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.7764%" y="213" width="0.0799%" height="15" fill="rgb(229,115,45)" fg:x="185" fg:w="1"/><text x="15.0264%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.9361%" y="213" width="0.0799%" height="15" fill="rgb(224,191,6)" fg:x="187" fg:w="1"/><text x="15.1861%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.9361%" y="197" width="0.0799%" height="15" fill="rgb(230,227,24)" fg:x="187" fg:w="1"/><text x="15.1861%" y="207.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="14.9361%" y="181" width="0.0799%" height="15" fill="rgb(228,80,19)" fg:x="187" fg:w="1"/><text x="15.1861%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.9361%" y="165" width="0.0799%" height="15" fill="rgb(247,229,0)" fg:x="187" fg:w="1"/><text x="15.1861%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.9361%" y="149" width="0.0799%" height="15" fill="rgb(237,194,15)" fg:x="187" fg:w="1"/><text x="15.1861%" y="159.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="14.9361%" y="133" width="0.0799%" height="15" fill="rgb(219,203,20)" fg:x="187" fg:w="1"/><text x="15.1861%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.9361%" y="117" width="0.0799%" height="15" fill="rgb(234,128,8)" fg:x="187" fg:w="1"/><text x="15.1861%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="14.8562%" y="277" width="0.2396%" height="15" fill="rgb(248,202,8)" fg:x="186" fg:w="3"/><text x="15.1062%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="14.9361%" y="261" width="0.1597%" height="15" fill="rgb(206,104,37)" fg:x="187" fg:w="2"/><text x="15.1861%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="14.9361%" y="245" width="0.1597%" height="15" fill="rgb(223,8,27)" fg:x="187" fg:w="2"/><text x="15.1861%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="14.9361%" y="229" width="0.1597%" height="15" fill="rgb(216,217,28)" fg:x="187" fg:w="2"/><text x="15.1861%" y="239.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="15.0160%" y="213" width="0.0799%" height="15" fill="rgb(249,199,1)" fg:x="188" fg:w="1"/><text x="15.2660%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="15.0160%" y="197" width="0.0799%" height="15" fill="rgb(240,85,17)" fg:x="188" fg:w="1"/><text x="15.2660%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.0958%" y="197" width="0.0799%" height="15" fill="rgb(206,108,45)" fg:x="189" fg:w="1"/><text x="15.3458%" y="207.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (15 samples, 1.20%)</title><rect x="14.0575%" y="469" width="1.1981%" height="15" fill="rgb(245,210,41)" fg:x="176" fg:w="15"/><text x="14.3075%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (15 samples, 1.20%)</title><rect x="14.0575%" y="453" width="1.1981%" height="15" fill="rgb(206,13,37)" fg:x="176" fg:w="15"/><text x="14.3075%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 1.20%)</title><rect x="14.0575%" y="437" width="1.1981%" height="15" fill="rgb(250,61,18)" fg:x="176" fg:w="15"/><text x="14.3075%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (15 samples, 1.20%)</title><rect x="14.0575%" y="421" width="1.1981%" height="15" fill="rgb(235,172,48)" fg:x="176" fg:w="15"/><text x="14.3075%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (15 samples, 1.20%)</title><rect x="14.0575%" y="405" width="1.1981%" height="15" fill="rgb(249,201,17)" fg:x="176" fg:w="15"/><text x="14.3075%" y="415.50"></text></g><g><title>engine::internal::Entities::add_persisted (15 samples, 1.20%)</title><rect x="14.0575%" y="389" width="1.1981%" height="15" fill="rgb(219,208,6)" fg:x="176" fg:w="15"/><text x="14.3075%" y="399.50"></text></g><g><title>kernel::model::entity::Entity::from_str (11 samples, 0.88%)</title><rect x="14.3770%" y="373" width="0.8786%" height="15" fill="rgb(248,31,23)" fg:x="180" fg:w="11"/><text x="14.6270%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="14.8562%" y="357" width="0.3994%" height="15" fill="rgb(245,15,42)" fg:x="186" fg:w="5"/><text x="15.1062%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="14.8562%" y="341" width="0.3994%" height="15" fill="rgb(222,217,39)" fg:x="186" fg:w="5"/><text x="15.1062%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="14.8562%" y="325" width="0.3994%" height="15" fill="rgb(210,219,27)" fg:x="186" fg:w="5"/><text x="15.1062%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="14.8562%" y="309" width="0.3994%" height="15" fill="rgb(252,166,36)" fg:x="186" fg:w="5"/><text x="15.1062%" y="319.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="14.8562%" y="293" width="0.3994%" height="15" fill="rgb(245,132,34)" fg:x="186" fg:w="5"/><text x="15.1062%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="15.0958%" y="277" width="0.1597%" height="15" fill="rgb(236,54,3)" fg:x="189" fg:w="2"/><text x="15.3458%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="15.0958%" y="261" width="0.1597%" height="15" fill="rgb(241,173,43)" fg:x="189" fg:w="2"/><text x="15.3458%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="15.0958%" y="245" width="0.1597%" height="15" fill="rgb(215,190,9)" fg:x="189" fg:w="2"/><text x="15.3458%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="15.0958%" y="229" width="0.1597%" height="15" fill="rgb(242,101,16)" fg:x="189" fg:w="2"/><text x="15.3458%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="15.0958%" y="213" width="0.1597%" height="15" fill="rgb(223,190,21)" fg:x="189" fg:w="2"/><text x="15.3458%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="15.1757%" y="197" width="0.0799%" height="15" fill="rgb(215,228,25)" fg:x="190" fg:w="1"/><text x="15.4257%" y="207.50"></text></g><g><title>plugins_core::tools::get_contained_keys (18 samples, 1.44%)</title><rect x="13.9776%" y="517" width="1.4377%" height="15" fill="rgb(225,36,22)" fg:x="175" fg:w="18"/><text x="14.2276%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (18 samples, 1.44%)</title><rect x="13.9776%" y="501" width="1.4377%" height="15" fill="rgb(251,106,46)" fg:x="175" fg:w="18"/><text x="14.2276%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (18 samples, 1.44%)</title><rect x="13.9776%" y="485" width="1.4377%" height="15" fill="rgb(208,90,1)" fg:x="175" fg:w="18"/><text x="14.2276%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.2556%" y="469" width="0.1597%" height="15" fill="rgb(243,10,4)" fg:x="191" fg:w="2"/><text x="15.5056%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.2556%" y="453" width="0.1597%" height="15" fill="rgb(212,137,27)" fg:x="191" fg:w="2"/><text x="15.5056%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="15.2556%" y="437" width="0.1597%" height="15" fill="rgb(231,220,49)" fg:x="191" fg:w="2"/><text x="15.5056%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="15.2556%" y="421" width="0.1597%" height="15" fill="rgb(237,96,20)" fg:x="191" fg:w="2"/><text x="15.5056%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="15.3355%" y="405" width="0.0799%" height="15" fill="rgb(239,229,30)" fg:x="192" fg:w="1"/><text x="15.5855%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.3355%" y="389" width="0.0799%" height="15" fill="rgb(219,65,33)" fg:x="192" fg:w="1"/><text x="15.5855%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.3355%" y="373" width="0.0799%" height="15" fill="rgb(243,134,7)" fg:x="192" fg:w="1"/><text x="15.5855%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="15.3355%" y="357" width="0.0799%" height="15" fill="rgb(216,177,54)" fg:x="192" fg:w="1"/><text x="15.5855%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="15.4153%" y="469" width="0.0799%" height="15" fill="rgb(211,160,20)" fg:x="193" fg:w="1"/><text x="15.6653%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="15.4952%" y="437" width="0.0799%" height="15" fill="rgb(239,85,39)" fg:x="194" fg:w="1"/><text x="15.7452%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="15.4952%" y="421" width="0.0799%" height="15" fill="rgb(232,125,22)" fg:x="194" fg:w="1"/><text x="15.7452%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (28 samples, 2.24%)</title><rect x="13.4185%" y="549" width="2.2364%" height="15" fill="rgb(244,57,34)" fg:x="168" fg:w="28"/><text x="13.6685%" y="559.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (28 samples, 2.24%)</title><rect x="13.4185%" y="533" width="2.2364%" height="15" fill="rgb(214,203,32)" fg:x="168" fg:w="28"/><text x="13.6685%" y="543.50">&lt;..</text></g><g><title>plugins_core::tools::get_occupant_keys (3 samples, 0.24%)</title><rect x="15.4153%" y="517" width="0.2396%" height="15" fill="rgb(207,58,43)" fg:x="193" fg:w="3"/><text x="15.6653%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="15.4153%" y="501" width="0.2396%" height="15" fill="rgb(215,193,15)" fg:x="193" fg:w="3"/><text x="15.6653%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="15.4153%" y="485" width="0.2396%" height="15" fill="rgb(232,15,44)" fg:x="193" fg:w="3"/><text x="15.6653%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.4952%" y="469" width="0.1597%" height="15" fill="rgb(212,3,48)" fg:x="194" fg:w="2"/><text x="15.7452%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.4952%" y="453" width="0.1597%" height="15" fill="rgb(218,128,7)" fg:x="194" fg:w="2"/><text x="15.7452%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.5751%" y="437" width="0.0799%" height="15" fill="rgb(226,216,39)" fg:x="195" fg:w="1"/><text x="15.8251%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.5751%" y="421" width="0.0799%" height="15" fill="rgb(243,47,51)" fg:x="195" fg:w="1"/><text x="15.8251%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="15.6550%" y="501" width="0.0799%" height="15" fill="rgb(241,183,40)" fg:x="196" fg:w="1"/><text x="15.9050%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="15.6550%" y="485" width="0.0799%" height="15" fill="rgb(231,217,32)" fg:x="196" fg:w="1"/><text x="15.9050%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="15.6550%" y="469" width="0.0799%" height="15" fill="rgb(229,61,38)" fg:x="196" fg:w="1"/><text x="15.9050%" y="479.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="15.6550%" y="453" width="0.0799%" height="15" fill="rgb(225,210,5)" fg:x="196" fg:w="1"/><text x="15.9050%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.6550%" y="437" width="0.0799%" height="15" fill="rgb(231,79,45)" fg:x="196" fg:w="1"/><text x="15.9050%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="15.6550%" y="421" width="0.0799%" height="15" fill="rgb(224,100,7)" fg:x="196" fg:w="1"/><text x="15.9050%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="15.6550%" y="405" width="0.0799%" height="15" fill="rgb(241,198,18)" fg:x="196" fg:w="1"/><text x="15.9050%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="15.6550%" y="389" width="0.0799%" height="15" fill="rgb(252,97,53)" fg:x="196" fg:w="1"/><text x="15.9050%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.6550%" y="373" width="0.0799%" height="15" fill="rgb(220,88,7)" fg:x="196" fg:w="1"/><text x="15.9050%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.6550%" y="357" width="0.0799%" height="15" fill="rgb(213,176,14)" fg:x="196" fg:w="1"/><text x="15.9050%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.6550%" y="341" width="0.0799%" height="15" fill="rgb(246,73,7)" fg:x="196" fg:w="1"/><text x="15.9050%" y="351.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="15.6550%" y="325" width="0.0799%" height="15" fill="rgb(245,64,36)" fg:x="196" fg:w="1"/><text x="15.9050%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="15.6550%" y="309" width="0.0799%" height="15" fill="rgb(245,80,10)" fg:x="196" fg:w="1"/><text x="15.9050%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="15.6550%" y="293" width="0.0799%" height="15" fill="rgb(232,107,50)" fg:x="196" fg:w="1"/><text x="15.9050%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="15.6550%" y="277" width="0.0799%" height="15" fill="rgb(253,3,0)" fg:x="196" fg:w="1"/><text x="15.9050%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="15.6550%" y="261" width="0.0799%" height="15" fill="rgb(212,99,53)" fg:x="196" fg:w="1"/><text x="15.9050%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="15.6550%" y="245" width="0.0799%" height="15" fill="rgb(249,111,54)" fg:x="196" fg:w="1"/><text x="15.9050%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.6550%" y="229" width="0.0799%" height="15" fill="rgb(249,55,30)" fg:x="196" fg:w="1"/><text x="15.9050%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="15.6550%" y="213" width="0.0799%" height="15" fill="rgb(237,47,42)" fg:x="196" fg:w="1"/><text x="15.9050%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.6550%" y="197" width="0.0799%" height="15" fill="rgb(211,20,18)" fg:x="196" fg:w="1"/><text x="15.9050%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.6550%" y="181" width="0.0799%" height="15" fill="rgb(231,203,46)" fg:x="196" fg:w="1"/><text x="15.9050%" y="191.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="16.1342%" y="197" width="0.0799%" height="15" fill="rgb(237,142,3)" fg:x="202" fg:w="1"/><text x="16.3842%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="16.1342%" y="181" width="0.0799%" height="15" fill="rgb(241,107,1)" fg:x="202" fg:w="1"/><text x="16.3842%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="16.1342%" y="165" width="0.0799%" height="15" fill="rgb(229,83,13)" fg:x="202" fg:w="1"/><text x="16.3842%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.1342%" y="149" width="0.0799%" height="15" fill="rgb(241,91,40)" fg:x="202" fg:w="1"/><text x="16.3842%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.1342%" y="133" width="0.0799%" height="15" fill="rgb(225,3,45)" fg:x="202" fg:w="1"/><text x="16.3842%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="16.1342%" y="261" width="0.1597%" height="15" fill="rgb(244,223,14)" fg:x="202" fg:w="2"/><text x="16.3842%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="16.1342%" y="245" width="0.1597%" height="15" fill="rgb(224,124,37)" fg:x="202" fg:w="2"/><text x="16.3842%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="16.1342%" y="229" width="0.1597%" height="15" fill="rgb(251,171,30)" fg:x="202" fg:w="2"/><text x="16.3842%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="16.1342%" y="213" width="0.1597%" height="15" fill="rgb(236,46,54)" fg:x="202" fg:w="2"/><text x="16.3842%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.2141%" y="197" width="0.0799%" height="15" fill="rgb(245,213,5)" fg:x="203" fg:w="1"/><text x="16.4641%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.2141%" y="181" width="0.0799%" height="15" fill="rgb(230,144,27)" fg:x="203" fg:w="1"/><text x="16.4641%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="16.1342%" y="309" width="0.2396%" height="15" fill="rgb(220,86,6)" fg:x="202" fg:w="3"/><text x="16.3842%" y="319.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="16.1342%" y="293" width="0.2396%" height="15" fill="rgb(240,20,13)" fg:x="202" fg:w="3"/><text x="16.3842%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="16.1342%" y="277" width="0.2396%" height="15" fill="rgb(217,89,34)" fg:x="202" fg:w="3"/><text x="16.3842%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="16.2939%" y="261" width="0.0799%" height="15" fill="rgb(229,13,5)" fg:x="204" fg:w="1"/><text x="16.5439%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.2939%" y="245" width="0.0799%" height="15" fill="rgb(244,67,35)" fg:x="204" fg:w="1"/><text x="16.5439%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="16.1342%" y="325" width="0.3195%" height="15" fill="rgb(221,40,2)" fg:x="202" fg:w="4"/><text x="16.3842%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="16.3738%" y="309" width="0.0799%" height="15" fill="rgb(237,157,21)" fg:x="205" fg:w="1"/><text x="16.6238%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.64%)</title><rect x="16.0543%" y="357" width="0.6390%" height="15" fill="rgb(222,94,11)" fg:x="201" fg:w="8"/><text x="16.3043%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (8 samples, 0.64%)</title><rect x="16.0543%" y="341" width="0.6390%" height="15" fill="rgb(249,113,6)" fg:x="201" fg:w="8"/><text x="16.3043%" y="351.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="16.4537%" y="325" width="0.2396%" height="15" fill="rgb(238,137,36)" fg:x="206" fg:w="3"/><text x="16.7037%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="16.4537%" y="309" width="0.2396%" height="15" fill="rgb(210,102,26)" fg:x="206" fg:w="3"/><text x="16.7037%" y="319.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="16.4537%" y="293" width="0.2396%" height="15" fill="rgb(218,30,30)" fg:x="206" fg:w="3"/><text x="16.7037%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="16.5335%" y="277" width="0.1597%" height="15" fill="rgb(214,67,26)" fg:x="207" fg:w="2"/><text x="16.7835%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="16.5335%" y="261" width="0.1597%" height="15" fill="rgb(251,9,53)" fg:x="207" fg:w="2"/><text x="16.7835%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.6134%" y="245" width="0.0799%" height="15" fill="rgb(228,204,25)" fg:x="208" fg:w="1"/><text x="16.8634%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.6134%" y="229" width="0.0799%" height="15" fill="rgb(207,153,8)" fg:x="208" fg:w="1"/><text x="16.8634%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="16.6134%" y="213" width="0.0799%" height="15" fill="rgb(242,9,16)" fg:x="208" fg:w="1"/><text x="16.8634%" y="223.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (10 samples, 0.80%)</title><rect x="15.9744%" y="389" width="0.7987%" height="15" fill="rgb(217,211,10)" fg:x="200" fg:w="10"/><text x="16.2244%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="16.0543%" y="373" width="0.7188%" height="15" fill="rgb(219,228,52)" fg:x="201" fg:w="9"/><text x="16.3043%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="16.6933%" y="357" width="0.0799%" height="15" fill="rgb(231,92,29)" fg:x="209" fg:w="1"/><text x="16.9433%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.6933%" y="341" width="0.0799%" height="15" fill="rgb(232,8,23)" fg:x="209" fg:w="1"/><text x="16.9433%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 1.04%)</title><rect x="15.8147%" y="405" width="1.0383%" height="15" fill="rgb(216,211,34)" fg:x="198" fg:w="13"/><text x="16.0647%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.7732%" y="389" width="0.0799%" height="15" fill="rgb(236,151,0)" fg:x="210" fg:w="1"/><text x="17.0232%" y="399.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (15 samples, 1.20%)</title><rect x="15.8147%" y="437" width="1.1981%" height="15" fill="rgb(209,168,3)" fg:x="198" fg:w="15"/><text x="16.0647%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (15 samples, 1.20%)</title><rect x="15.8147%" y="421" width="1.1981%" height="15" fill="rgb(208,129,28)" fg:x="198" fg:w="15"/><text x="16.0647%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="16.8530%" y="405" width="0.1597%" height="15" fill="rgb(229,78,22)" fg:x="211" fg:w="2"/><text x="17.1030%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="16.8530%" y="389" width="0.1597%" height="15" fill="rgb(228,187,13)" fg:x="211" fg:w="2"/><text x="17.1030%" y="399.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (17 samples, 1.36%)</title><rect x="15.7348%" y="485" width="1.3578%" height="15" fill="rgb(240,119,24)" fg:x="197" fg:w="17"/><text x="15.9848%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (17 samples, 1.36%)</title><rect x="15.7348%" y="469" width="1.3578%" height="15" fill="rgb(209,194,42)" fg:x="197" fg:w="17"/><text x="15.9848%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 1.28%)</title><rect x="15.8147%" y="453" width="1.2780%" height="15" fill="rgb(247,200,46)" fg:x="198" fg:w="16"/><text x="16.0647%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.0128%" y="437" width="0.0799%" height="15" fill="rgb(218,76,16)" fg:x="213" fg:w="1"/><text x="17.2628%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="17.0927%" y="437" width="0.0799%" height="15" fill="rgb(225,21,48)" fg:x="214" fg:w="1"/><text x="17.3427%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.0927%" y="421" width="0.0799%" height="15" fill="rgb(239,223,50)" fg:x="214" fg:w="1"/><text x="17.3427%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="17.0927%" y="405" width="0.0799%" height="15" fill="rgb(244,45,21)" fg:x="214" fg:w="1"/><text x="17.3427%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="17.0927%" y="389" width="0.0799%" height="15" fill="rgb(232,33,43)" fg:x="214" fg:w="1"/><text x="17.3427%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.2524%" y="405" width="0.0799%" height="15" fill="rgb(209,8,3)" fg:x="216" fg:w="1"/><text x="17.5024%" y="415.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (3 samples, 0.24%)</title><rect x="17.1725%" y="437" width="0.2396%" height="15" fill="rgb(214,25,53)" fg:x="215" fg:w="3"/><text x="17.4225%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="17.2524%" y="421" width="0.1597%" height="15" fill="rgb(254,186,54)" fg:x="216" fg:w="2"/><text x="17.5024%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.3323%" y="405" width="0.0799%" height="15" fill="rgb(208,174,49)" fg:x="217" fg:w="1"/><text x="17.5823%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.4121%" y="421" width="0.0799%" height="15" fill="rgb(233,191,51)" fg:x="218" fg:w="1"/><text x="17.6621%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.4920%" y="389" width="0.0799%" height="15" fill="rgb(222,134,10)" fg:x="219" fg:w="1"/><text x="17.7420%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="17.5719%" y="389" width="0.0799%" height="15" fill="rgb(230,226,20)" fg:x="220" fg:w="1"/><text x="17.8219%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="17.5719%" y="373" width="0.0799%" height="15" fill="rgb(251,111,25)" fg:x="220" fg:w="1"/><text x="17.8219%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.5719%" y="357" width="0.0799%" height="15" fill="rgb(224,40,46)" fg:x="220" fg:w="1"/><text x="17.8219%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="17.7316%" y="277" width="0.0799%" height="15" fill="rgb(236,108,47)" fg:x="222" fg:w="1"/><text x="17.9816%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="17.7316%" y="309" width="0.1597%" height="15" fill="rgb(234,93,0)" fg:x="222" fg:w="2"/><text x="17.9816%" y="319.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="17.7316%" y="293" width="0.1597%" height="15" fill="rgb(224,213,32)" fg:x="222" fg:w="2"/><text x="17.9816%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.8115%" y="277" width="0.0799%" height="15" fill="rgb(251,11,48)" fg:x="223" fg:w="1"/><text x="18.0615%" y="287.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="17.8115%" y="261" width="0.0799%" height="15" fill="rgb(236,173,5)" fg:x="223" fg:w="1"/><text x="18.0615%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="17.7316%" y="373" width="0.2396%" height="15" fill="rgb(230,95,12)" fg:x="222" fg:w="3"/><text x="17.9816%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="17.7316%" y="357" width="0.2396%" height="15" fill="rgb(232,209,1)" fg:x="222" fg:w="3"/><text x="17.9816%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="17.7316%" y="341" width="0.2396%" height="15" fill="rgb(232,6,1)" fg:x="222" fg:w="3"/><text x="17.9816%" y="351.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="17.7316%" y="325" width="0.2396%" height="15" fill="rgb(210,224,50)" fg:x="222" fg:w="3"/><text x="17.9816%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.8914%" y="309" width="0.0799%" height="15" fill="rgb(228,127,35)" fg:x="224" fg:w="1"/><text x="18.1414%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="17.4920%" y="405" width="0.5591%" height="15" fill="rgb(245,102,45)" fg:x="219" fg:w="7"/><text x="17.7420%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="17.6518%" y="389" width="0.3994%" height="15" fill="rgb(214,1,49)" fg:x="221" fg:w="5"/><text x="17.9018%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.9712%" y="373" width="0.0799%" height="15" fill="rgb(226,163,40)" fg:x="225" fg:w="1"/><text x="18.2212%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_map (1 samples, 0.08%)</title><rect x="18.0511%" y="405" width="0.0799%" height="15" fill="rgb(239,212,28)" fg:x="226" fg:w="1"/><text x="18.3011%" y="415.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (62 samples, 4.95%)</title><rect x="13.2588%" y="581" width="4.9521%" height="15" fill="rgb(220,20,13)" fg:x="166" fg:w="62"/><text x="13.5088%" y="591.50">&lt;plugi..</text></g><g><title>core::iter::adapters::try_process (60 samples, 4.79%)</title><rect x="13.4185%" y="565" width="4.7923%" height="15" fill="rgb(210,164,35)" fg:x="168" fg:w="60"/><text x="13.6685%" y="575.50">core::..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (32 samples, 2.56%)</title><rect x="15.6550%" y="549" width="2.5559%" height="15" fill="rgb(248,109,41)" fg:x="196" fg:w="32"/><text x="15.9050%" y="559.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (32 samples, 2.56%)</title><rect x="15.6550%" y="533" width="2.5559%" height="15" fill="rgb(238,23,50)" fg:x="196" fg:w="32"/><text x="15.9050%" y="543.50">&lt;c..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (32 samples, 2.56%)</title><rect x="15.6550%" y="517" width="2.5559%" height="15" fill="rgb(211,48,49)" fg:x="196" fg:w="32"/><text x="15.9050%" y="527.50">pl..</text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (31 samples, 2.48%)</title><rect x="15.7348%" y="501" width="2.4760%" height="15" fill="rgb(223,36,21)" fg:x="197" fg:w="31"/><text x="15.9848%" y="511.50">&lt;r..</text></g><g><title>kernel::model::EntityPtr::to_json_value (14 samples, 1.12%)</title><rect x="17.0927%" y="485" width="1.1182%" height="15" fill="rgb(207,123,46)" fg:x="214" fg:w="14"/><text x="17.3427%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (14 samples, 1.12%)</title><rect x="17.0927%" y="469" width="1.1182%" height="15" fill="rgb(240,218,32)" fg:x="214" fg:w="14"/><text x="17.3427%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (14 samples, 1.12%)</title><rect x="17.0927%" y="453" width="1.1182%" height="15" fill="rgb(252,5,43)" fg:x="214" fg:w="14"/><text x="17.3427%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.80%)</title><rect x="17.4121%" y="437" width="0.7987%" height="15" fill="rgb(252,84,19)" fg:x="218" fg:w="10"/><text x="17.6621%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="17.4920%" y="421" width="0.7188%" height="15" fill="rgb(243,152,39)" fg:x="219" fg:w="9"/><text x="17.7420%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.1310%" y="405" width="0.0799%" height="15" fill="rgb(234,160,15)" fg:x="227" fg:w="1"/><text x="18.3810%" y="415.50"></text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (71 samples, 5.67%)</title><rect x="12.6198%" y="629" width="5.6709%" height="15" fill="rgb(237,34,20)" fg:x="158" fg:w="71"/><text x="12.8698%" y="639.50">kernel:..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (71 samples, 5.67%)</title><rect x="12.6198%" y="613" width="5.6709%" height="15" fill="rgb(229,97,13)" fg:x="158" fg:w="71"/><text x="12.8698%" y="623.50">&lt;plugin..</text></g><g><title>plugins_rpc::querying::have_surroundings (64 samples, 5.11%)</title><rect x="13.1789%" y="597" width="5.1118%" height="15" fill="rgb(234,71,50)" fg:x="165" fg:w="64"/><text x="13.4289%" y="607.50">plugin..</text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.2109%" y="581" width="0.0799%" height="15" fill="rgb(253,155,4)" fg:x="228" fg:w="1"/><text x="18.4609%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.3706%" y="389" width="0.0799%" height="15" fill="rgb(222,185,37)" fg:x="230" fg:w="1"/><text x="18.6206%" y="399.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="18.3706%" y="453" width="0.1597%" height="15" fill="rgb(251,177,13)" fg:x="230" fg:w="2"/><text x="18.6206%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="18.3706%" y="437" width="0.1597%" height="15" fill="rgb(250,179,40)" fg:x="230" fg:w="2"/><text x="18.6206%" y="447.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="18.3706%" y="421" width="0.1597%" height="15" fill="rgb(242,44,2)" fg:x="230" fg:w="2"/><text x="18.6206%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="18.3706%" y="405" width="0.1597%" height="15" fill="rgb(216,177,13)" fg:x="230" fg:w="2"/><text x="18.6206%" y="415.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="18.4505%" y="389" width="0.0799%" height="15" fill="rgb(216,106,43)" fg:x="231" fg:w="1"/><text x="18.7005%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.5304%" y="357" width="0.0799%" height="15" fill="rgb(216,183,2)" fg:x="232" fg:w="1"/><text x="18.7804%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.5304%" y="341" width="0.0799%" height="15" fill="rgb(249,75,3)" fg:x="232" fg:w="1"/><text x="18.7804%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.5304%" y="325" width="0.0799%" height="15" fill="rgb(219,67,39)" fg:x="232" fg:w="1"/><text x="18.7804%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.5304%" y="309" width="0.0799%" height="15" fill="rgb(253,228,2)" fg:x="232" fg:w="1"/><text x="18.7804%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.5304%" y="293" width="0.0799%" height="15" fill="rgb(235,138,27)" fg:x="232" fg:w="1"/><text x="18.7804%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.5304%" y="277" width="0.0799%" height="15" fill="rgb(236,97,51)" fg:x="232" fg:w="1"/><text x="18.7804%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.5304%" y="261" width="0.0799%" height="15" fill="rgb(240,80,30)" fg:x="232" fg:w="1"/><text x="18.7804%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.5304%" y="245" width="0.0799%" height="15" fill="rgb(230,178,19)" fg:x="232" fg:w="1"/><text x="18.7804%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.5304%" y="229" width="0.0799%" height="15" fill="rgb(210,190,27)" fg:x="232" fg:w="1"/><text x="18.7804%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.5304%" y="213" width="0.0799%" height="15" fill="rgb(222,107,31)" fg:x="232" fg:w="1"/><text x="18.7804%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.5304%" y="197" width="0.0799%" height="15" fill="rgb(216,127,34)" fg:x="232" fg:w="1"/><text x="18.7804%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.5304%" y="181" width="0.0799%" height="15" fill="rgb(234,116,52)" fg:x="232" fg:w="1"/><text x="18.7804%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.5304%" y="165" width="0.0799%" height="15" fill="rgb(222,124,15)" fg:x="232" fg:w="1"/><text x="18.7804%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="18.5304%" y="405" width="0.1597%" height="15" fill="rgb(231,179,28)" fg:x="232" fg:w="2"/><text x="18.7804%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="18.5304%" y="389" width="0.1597%" height="15" fill="rgb(226,93,45)" fg:x="232" fg:w="2"/><text x="18.7804%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="18.5304%" y="373" width="0.1597%" height="15" fill="rgb(215,8,51)" fg:x="232" fg:w="2"/><text x="18.7804%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.6102%" y="357" width="0.0799%" height="15" fill="rgb(223,106,5)" fg:x="233" fg:w="1"/><text x="18.8602%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.6901%" y="341" width="0.0799%" height="15" fill="rgb(250,191,5)" fg:x="234" fg:w="1"/><text x="18.9401%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.6901%" y="325" width="0.0799%" height="15" fill="rgb(242,132,44)" fg:x="234" fg:w="1"/><text x="18.9401%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.8498%" y="309" width="0.0799%" height="15" fill="rgb(251,152,29)" fg:x="236" fg:w="1"/><text x="19.0998%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.8498%" y="293" width="0.0799%" height="15" fill="rgb(218,179,5)" fg:x="236" fg:w="1"/><text x="19.0998%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (6 samples, 0.48%)</title><rect x="18.5304%" y="453" width="0.4792%" height="15" fill="rgb(227,67,19)" fg:x="232" fg:w="6"/><text x="18.7804%" y="463.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.48%)</title><rect x="18.5304%" y="437" width="0.4792%" height="15" fill="rgb(233,119,31)" fg:x="232" fg:w="6"/><text x="18.7804%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.48%)</title><rect x="18.5304%" y="421" width="0.4792%" height="15" fill="rgb(241,120,22)" fg:x="232" fg:w="6"/><text x="18.7804%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="18.6901%" y="405" width="0.3195%" height="15" fill="rgb(224,102,30)" fg:x="234" fg:w="4"/><text x="18.9401%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="18.6901%" y="389" width="0.3195%" height="15" fill="rgb(210,164,37)" fg:x="234" fg:w="4"/><text x="18.9401%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="18.6901%" y="373" width="0.3195%" height="15" fill="rgb(226,191,16)" fg:x="234" fg:w="4"/><text x="18.9401%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="18.6901%" y="357" width="0.3195%" height="15" fill="rgb(214,40,45)" fg:x="234" fg:w="4"/><text x="18.9401%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="18.7700%" y="341" width="0.2396%" height="15" fill="rgb(244,29,26)" fg:x="235" fg:w="3"/><text x="19.0200%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="18.7700%" y="325" width="0.2396%" height="15" fill="rgb(216,16,5)" fg:x="235" fg:w="3"/><text x="19.0200%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.9297%" y="309" width="0.0799%" height="15" fill="rgb(249,76,35)" fg:x="237" fg:w="1"/><text x="19.1797%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.9297%" y="293" width="0.0799%" height="15" fill="rgb(207,11,44)" fg:x="237" fg:w="1"/><text x="19.1797%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.0096%" y="437" width="0.0799%" height="15" fill="rgb(228,190,49)" fg:x="238" fg:w="1"/><text x="19.2596%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.0895%" y="261" width="0.0799%" height="15" fill="rgb(214,173,12)" fg:x="239" fg:w="1"/><text x="19.3395%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.0895%" y="245" width="0.0799%" height="15" fill="rgb(218,26,35)" fg:x="239" fg:w="1"/><text x="19.3395%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.0895%" y="229" width="0.0799%" height="15" fill="rgb(220,200,19)" fg:x="239" fg:w="1"/><text x="19.3395%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.0895%" y="213" width="0.0799%" height="15" fill="rgb(239,95,49)" fg:x="239" fg:w="1"/><text x="19.3395%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.0895%" y="197" width="0.0799%" height="15" fill="rgb(235,85,53)" fg:x="239" fg:w="1"/><text x="19.3395%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.0895%" y="181" width="0.0799%" height="15" fill="rgb(233,133,31)" fg:x="239" fg:w="1"/><text x="19.3395%" y="191.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="19.0895%" y="165" width="0.0799%" height="15" fill="rgb(218,25,20)" fg:x="239" fg:w="1"/><text x="19.3395%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="19.0895%" y="149" width="0.0799%" height="15" fill="rgb(252,210,38)" fg:x="239" fg:w="1"/><text x="19.3395%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="19.0895%" y="389" width="0.1597%" height="15" fill="rgb(242,134,21)" fg:x="239" fg:w="2"/><text x="19.3395%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="19.0895%" y="373" width="0.1597%" height="15" fill="rgb(213,28,48)" fg:x="239" fg:w="2"/><text x="19.3395%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="19.0895%" y="357" width="0.1597%" height="15" fill="rgb(250,196,2)" fg:x="239" fg:w="2"/><text x="19.3395%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="19.0895%" y="341" width="0.1597%" height="15" fill="rgb(227,5,17)" fg:x="239" fg:w="2"/><text x="19.3395%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="19.0895%" y="325" width="0.1597%" height="15" fill="rgb(221,226,24)" fg:x="239" fg:w="2"/><text x="19.3395%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="19.0895%" y="309" width="0.1597%" height="15" fill="rgb(211,5,48)" fg:x="239" fg:w="2"/><text x="19.3395%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="19.0895%" y="293" width="0.1597%" height="15" fill="rgb(219,150,6)" fg:x="239" fg:w="2"/><text x="19.3395%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="19.0895%" y="277" width="0.1597%" height="15" fill="rgb(251,46,16)" fg:x="239" fg:w="2"/><text x="19.3395%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="19.1693%" y="261" width="0.0799%" height="15" fill="rgb(220,204,40)" fg:x="240" fg:w="1"/><text x="19.4193%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="19.1693%" y="245" width="0.0799%" height="15" fill="rgb(211,85,2)" fg:x="240" fg:w="1"/><text x="19.4193%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="19.0895%" y="405" width="0.2396%" height="15" fill="rgb(229,17,7)" fg:x="239" fg:w="3"/><text x="19.3395%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.2492%" y="389" width="0.0799%" height="15" fill="rgb(239,72,28)" fg:x="241" fg:w="1"/><text x="19.4992%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.2492%" y="373" width="0.0799%" height="15" fill="rgb(230,47,54)" fg:x="241" fg:w="1"/><text x="19.4992%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.2492%" y="357" width="0.0799%" height="15" fill="rgb(214,50,8)" fg:x="241" fg:w="1"/><text x="19.4992%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.2492%" y="341" width="0.0799%" height="15" fill="rgb(216,198,43)" fg:x="241" fg:w="1"/><text x="19.4992%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.2492%" y="325" width="0.0799%" height="15" fill="rgb(234,20,35)" fg:x="241" fg:w="1"/><text x="19.4992%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="19.2492%" y="309" width="0.0799%" height="15" fill="rgb(254,45,19)" fg:x="241" fg:w="1"/><text x="19.4992%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="19.2492%" y="293" width="0.0799%" height="15" fill="rgb(219,14,44)" fg:x="241" fg:w="1"/><text x="19.4992%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="19.3291%" y="405" width="0.0799%" height="15" fill="rgb(217,220,26)" fg:x="242" fg:w="1"/><text x="19.5791%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.4089%" y="325" width="0.0799%" height="15" fill="rgb(213,158,28)" fg:x="243" fg:w="1"/><text x="19.6589%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="19.4089%" y="405" width="0.1597%" height="15" fill="rgb(252,51,52)" fg:x="243" fg:w="2"/><text x="19.6589%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="19.4089%" y="389" width="0.1597%" height="15" fill="rgb(246,89,16)" fg:x="243" fg:w="2"/><text x="19.6589%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="19.4089%" y="373" width="0.1597%" height="15" fill="rgb(216,158,49)" fg:x="243" fg:w="2"/><text x="19.6589%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="19.4089%" y="357" width="0.1597%" height="15" fill="rgb(236,107,19)" fg:x="243" fg:w="2"/><text x="19.6589%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="19.4089%" y="341" width="0.1597%" height="15" fill="rgb(228,185,30)" fg:x="243" fg:w="2"/><text x="19.6589%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="19.4888%" y="325" width="0.0799%" height="15" fill="rgb(246,134,8)" fg:x="244" fg:w="1"/><text x="19.7388%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.4888%" y="309" width="0.0799%" height="15" fill="rgb(214,143,50)" fg:x="244" fg:w="1"/><text x="19.7388%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.7284%" y="245" width="0.0799%" height="15" fill="rgb(228,75,8)" fg:x="247" fg:w="1"/><text x="19.9784%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (11 samples, 0.88%)</title><rect x="19.0096%" y="453" width="0.8786%" height="15" fill="rgb(207,175,4)" fg:x="238" fg:w="11"/><text x="19.2596%" y="463.50"></text></g><g><title>kernel::model::props::load_props (10 samples, 0.80%)</title><rect x="19.0895%" y="437" width="0.7987%" height="15" fill="rgb(205,108,24)" fg:x="239" fg:w="10"/><text x="19.3395%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (10 samples, 0.80%)</title><rect x="19.0895%" y="421" width="0.7987%" height="15" fill="rgb(244,120,49)" fg:x="239" fg:w="10"/><text x="19.3395%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="19.5687%" y="405" width="0.3195%" height="15" fill="rgb(223,47,38)" fg:x="245" fg:w="4"/><text x="19.8187%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="19.5687%" y="389" width="0.3195%" height="15" fill="rgb(229,179,11)" fg:x="245" fg:w="4"/><text x="19.8187%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="19.6486%" y="373" width="0.2396%" height="15" fill="rgb(231,122,1)" fg:x="246" fg:w="3"/><text x="19.8986%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="19.6486%" y="357" width="0.2396%" height="15" fill="rgb(245,119,9)" fg:x="246" fg:w="3"/><text x="19.8986%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="19.6486%" y="341" width="0.2396%" height="15" fill="rgb(241,163,25)" fg:x="246" fg:w="3"/><text x="19.8986%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="19.6486%" y="325" width="0.2396%" height="15" fill="rgb(217,214,3)" fg:x="246" fg:w="3"/><text x="19.8986%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="19.6486%" y="309" width="0.2396%" height="15" fill="rgb(240,86,28)" fg:x="246" fg:w="3"/><text x="19.8986%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="19.6486%" y="293" width="0.2396%" height="15" fill="rgb(215,47,9)" fg:x="246" fg:w="3"/><text x="19.8986%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="19.6486%" y="277" width="0.2396%" height="15" fill="rgb(252,25,45)" fg:x="246" fg:w="3"/><text x="19.8986%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="19.6486%" y="261" width="0.2396%" height="15" fill="rgb(251,164,9)" fg:x="246" fg:w="3"/><text x="19.8986%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="19.8083%" y="245" width="0.0799%" height="15" fill="rgb(233,194,0)" fg:x="248" fg:w="1"/><text x="20.0583%" y="255.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="19.8083%" y="229" width="0.0799%" height="15" fill="rgb(249,111,24)" fg:x="248" fg:w="1"/><text x="20.0583%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="19.9681%" y="405" width="0.1597%" height="15" fill="rgb(250,223,3)" fg:x="250" fg:w="2"/><text x="20.2181%" y="415.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="20.1278%" y="405" width="0.0799%" height="15" fill="rgb(236,178,37)" fg:x="252" fg:w="1"/><text x="20.3778%" y="415.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="20.1278%" y="389" width="0.0799%" height="15" fill="rgb(241,158,50)" fg:x="252" fg:w="1"/><text x="20.3778%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="20.1278%" y="373" width="0.0799%" height="15" fill="rgb(213,121,41)" fg:x="252" fg:w="1"/><text x="20.3778%" y="383.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="20.1278%" y="357" width="0.0799%" height="15" fill="rgb(240,92,3)" fg:x="252" fg:w="1"/><text x="20.3778%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="20.1278%" y="341" width="0.0799%" height="15" fill="rgb(205,123,3)" fg:x="252" fg:w="1"/><text x="20.3778%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="20.1278%" y="325" width="0.0799%" height="15" fill="rgb(205,97,47)" fg:x="252" fg:w="1"/><text x="20.3778%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="20.1278%" y="309" width="0.0799%" height="15" fill="rgb(247,152,14)" fg:x="252" fg:w="1"/><text x="20.3778%" y="319.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="20.1278%" y="293" width="0.0799%" height="15" fill="rgb(248,195,53)" fg:x="252" fg:w="1"/><text x="20.3778%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.2077%" y="325" width="0.0799%" height="15" fill="rgb(226,201,16)" fg:x="253" fg:w="1"/><text x="20.4577%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.2875%" y="325" width="0.0799%" height="15" fill="rgb(205,98,0)" fg:x="254" fg:w="1"/><text x="20.5375%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="20.3674%" y="325" width="0.0799%" height="15" fill="rgb(214,191,48)" fg:x="255" fg:w="1"/><text x="20.6174%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.3674%" y="309" width="0.0799%" height="15" fill="rgb(237,112,39)" fg:x="255" fg:w="1"/><text x="20.6174%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.3674%" y="293" width="0.0799%" height="15" fill="rgb(247,203,27)" fg:x="255" fg:w="1"/><text x="20.6174%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="20.4473%" y="325" width="0.0799%" height="15" fill="rgb(235,124,28)" fg:x="256" fg:w="1"/><text x="20.6973%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="20.4473%" y="309" width="0.0799%" height="15" fill="rgb(208,207,46)" fg:x="256" fg:w="1"/><text x="20.6973%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="20.4473%" y="293" width="0.0799%" height="15" fill="rgb(234,176,4)" fg:x="256" fg:w="1"/><text x="20.6973%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="20.5272%" y="325" width="0.0799%" height="15" fill="rgb(230,133,28)" fg:x="257" fg:w="1"/><text x="20.7772%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.5272%" y="309" width="0.0799%" height="15" fill="rgb(211,137,40)" fg:x="257" fg:w="1"/><text x="20.7772%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.7668%" y="309" width="0.0799%" height="15" fill="rgb(254,35,13)" fg:x="260" fg:w="1"/><text x="21.0168%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (22 samples, 1.76%)</title><rect x="20.8466%" y="309" width="1.7572%" height="15" fill="rgb(225,49,51)" fg:x="261" fg:w="22"/><text x="21.0966%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (21 samples, 1.68%)</title><rect x="20.9265%" y="293" width="1.6773%" height="15" fill="rgb(251,10,15)" fg:x="262" fg:w="21"/><text x="21.1765%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.5240%" y="277" width="0.0799%" height="15" fill="rgb(228,207,15)" fg:x="282" fg:w="1"/><text x="22.7740%" y="287.50"></text></g><g><title>regex_automata::meta::reverse_inner::extract (1 samples, 0.08%)</title><rect x="22.6038%" y="309" width="0.0799%" height="15" fill="rgb(241,99,19)" fg:x="283" fg:w="1"/><text x="22.8538%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="22.7636%" y="293" width="0.0799%" height="15" fill="rgb(207,104,49)" fg:x="285" fg:w="1"/><text x="23.0136%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="22.6837%" y="309" width="0.5591%" height="15" fill="rgb(234,99,18)" fg:x="284" fg:w="7"/><text x="22.9337%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="22.8435%" y="293" width="0.3994%" height="15" fill="rgb(213,191,49)" fg:x="286" fg:w="5"/><text x="23.0935%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="23.1629%" y="277" width="0.0799%" height="15" fill="rgb(210,226,19)" fg:x="290" fg:w="1"/><text x="23.4129%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="23.2428%" y="293" width="0.0799%" height="15" fill="rgb(229,97,18)" fg:x="291" fg:w="1"/><text x="23.4928%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="23.2428%" y="277" width="0.0799%" height="15" fill="rgb(211,167,15)" fg:x="291" fg:w="1"/><text x="23.4928%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="23.2428%" y="309" width="0.1597%" height="15" fill="rgb(210,169,34)" fg:x="291" fg:w="2"/><text x="23.4928%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="23.3227%" y="293" width="0.0799%" height="15" fill="rgb(241,121,31)" fg:x="292" fg:w="1"/><text x="23.5727%" y="303.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="23.6422%" y="245" width="0.1597%" height="15" fill="rgb(232,40,11)" fg:x="296" fg:w="2"/><text x="23.8922%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="23.8019%" y="245" width="0.0799%" height="15" fill="rgb(205,86,26)" fg:x="298" fg:w="1"/><text x="24.0519%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="23.8019%" y="229" width="0.0799%" height="15" fill="rgb(231,126,28)" fg:x="298" fg:w="1"/><text x="24.0519%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.8019%" y="213" width="0.0799%" height="15" fill="rgb(219,221,18)" fg:x="298" fg:w="1"/><text x="24.0519%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.8019%" y="197" width="0.0799%" height="15" fill="rgb(211,40,0)" fg:x="298" fg:w="1"/><text x="24.0519%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="23.8818%" y="245" width="0.1597%" height="15" fill="rgb(239,85,43)" fg:x="299" fg:w="2"/><text x="24.1318%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="23.9617%" y="229" width="0.0799%" height="15" fill="rgb(231,55,21)" fg:x="300" fg:w="1"/><text x="24.2117%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.4409%" y="181" width="0.0799%" height="15" fill="rgb(225,184,43)" fg:x="306" fg:w="1"/><text x="24.6909%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="24.4409%" y="213" width="0.1597%" height="15" fill="rgb(251,158,41)" fg:x="306" fg:w="2"/><text x="24.6909%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="24.4409%" y="197" width="0.1597%" height="15" fill="rgb(234,159,37)" fg:x="306" fg:w="2"/><text x="24.6909%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="24.5208%" y="181" width="0.0799%" height="15" fill="rgb(216,204,22)" fg:x="307" fg:w="1"/><text x="24.7708%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (10 samples, 0.80%)</title><rect x="24.0415%" y="245" width="0.7987%" height="15" fill="rgb(214,17,3)" fg:x="301" fg:w="10"/><text x="24.2915%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (7 samples, 0.56%)</title><rect x="24.2812%" y="229" width="0.5591%" height="15" fill="rgb(212,111,17)" fg:x="304" fg:w="7"/><text x="24.5312%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="24.6006%" y="213" width="0.2396%" height="15" fill="rgb(221,157,24)" fg:x="308" fg:w="3"/><text x="24.8506%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="24.8403%" y="245" width="0.1597%" height="15" fill="rgb(252,16,13)" fg:x="311" fg:w="2"/><text x="25.0903%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="24.8403%" y="229" width="0.1597%" height="15" fill="rgb(221,62,2)" fg:x="311" fg:w="2"/><text x="25.0903%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="24.9201%" y="213" width="0.0799%" height="15" fill="rgb(247,87,22)" fg:x="312" fg:w="1"/><text x="25.1701%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="25.0000%" y="229" width="0.0799%" height="15" fill="rgb(215,73,9)" fg:x="313" fg:w="1"/><text x="25.2500%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="25.0000%" y="213" width="0.0799%" height="15" fill="rgb(207,175,33)" fg:x="313" fg:w="1"/><text x="25.2500%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.0000%" y="197" width="0.0799%" height="15" fill="rgb(243,129,54)" fg:x="313" fg:w="1"/><text x="25.2500%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (64 samples, 5.11%)</title><rect x="25.0000%" y="245" width="5.1118%" height="15" fill="rgb(227,119,45)" fg:x="313" fg:w="64"/><text x="25.2500%" y="255.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (63 samples, 5.03%)</title><rect x="25.0799%" y="229" width="5.0319%" height="15" fill="rgb(205,109,36)" fg:x="314" fg:w="63"/><text x="25.3299%" y="239.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (63 samples, 5.03%)</title><rect x="25.0799%" y="213" width="5.0319%" height="15" fill="rgb(205,6,39)" fg:x="314" fg:w="63"/><text x="25.3299%" y="223.50">alloc:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (8 samples, 0.64%)</title><rect x="30.1118%" y="245" width="0.6390%" height="15" fill="rgb(221,32,16)" fg:x="377" fg:w="8"/><text x="30.3618%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.5911%" y="229" width="0.1597%" height="15" fill="rgb(228,144,50)" fg:x="383" fg:w="2"/><text x="30.8411%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (93 samples, 7.43%)</title><rect x="23.4026%" y="293" width="7.4281%" height="15" fill="rgb(229,201,53)" fg:x="293" fg:w="93"/><text x="23.6526%" y="303.50">&lt;core::ite..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (93 samples, 7.43%)</title><rect x="23.4026%" y="277" width="7.4281%" height="15" fill="rgb(249,153,27)" fg:x="293" fg:w="93"/><text x="23.6526%" y="287.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (93 samples, 7.43%)</title><rect x="23.4026%" y="261" width="7.4281%" height="15" fill="rgb(227,106,25)" fg:x="293" fg:w="93"/><text x="23.6526%" y="271.50">regex_auto..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="30.7508%" y="245" width="0.0799%" height="15" fill="rgb(230,65,29)" fg:x="385" fg:w="1"/><text x="31.0008%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.9105%" y="277" width="0.0799%" height="15" fill="rgb(221,57,46)" fg:x="387" fg:w="1"/><text x="31.1605%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="30.9904%" y="277" width="0.3195%" height="15" fill="rgb(229,161,17)" fg:x="388" fg:w="4"/><text x="31.2404%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="31.3099%" y="277" width="0.3195%" height="15" fill="rgb(222,213,11)" fg:x="392" fg:w="4"/><text x="31.5599%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.5495%" y="261" width="0.0799%" height="15" fill="rgb(235,35,13)" fg:x="395" fg:w="1"/><text x="31.7995%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.5495%" y="245" width="0.0799%" height="15" fill="rgb(233,158,34)" fg:x="395" fg:w="1"/><text x="31.7995%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.5495%" y="229" width="0.0799%" height="15" fill="rgb(215,151,48)" fg:x="395" fg:w="1"/><text x="31.7995%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.88%)</title><rect x="30.8307%" y="293" width="0.8786%" height="15" fill="rgb(229,84,14)" fg:x="386" fg:w="11"/><text x="31.0807%" y="303.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="31.6294%" y="277" width="0.0799%" height="15" fill="rgb(229,68,14)" fg:x="396" fg:w="1"/><text x="31.8794%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="31.7093%" y="277" width="0.2396%" height="15" fill="rgb(243,106,26)" fg:x="397" fg:w="3"/><text x="31.9593%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="31.7093%" y="261" width="0.2396%" height="15" fill="rgb(206,45,38)" fg:x="397" fg:w="3"/><text x="31.9593%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="31.7891%" y="245" width="0.1597%" height="15" fill="rgb(226,6,15)" fg:x="398" fg:w="2"/><text x="32.0391%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="31.8690%" y="229" width="0.0799%" height="15" fill="rgb(232,22,54)" fg:x="399" fg:w="1"/><text x="32.1190%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="31.8690%" y="213" width="0.0799%" height="15" fill="rgb(229,222,32)" fg:x="399" fg:w="1"/><text x="32.1190%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (145 samples, 11.58%)</title><rect x="20.6070%" y="325" width="11.5815%" height="15" fill="rgb(228,62,29)" fg:x="258" fg:w="145"/><text x="20.8570%" y="335.50">regex_automata::m..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (110 samples, 8.79%)</title><rect x="23.4026%" y="309" width="8.7859%" height="15" fill="rgb(251,103,34)" fg:x="293" fg:w="110"/><text x="23.6526%" y="319.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (6 samples, 0.48%)</title><rect x="31.7093%" y="293" width="0.4792%" height="15" fill="rgb(233,12,30)" fg:x="397" fg:w="6"/><text x="31.9593%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="31.9489%" y="277" width="0.2396%" height="15" fill="rgb(238,52,0)" fg:x="400" fg:w="3"/><text x="32.1989%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="31.9489%" y="261" width="0.2396%" height="15" fill="rgb(223,98,5)" fg:x="400" fg:w="3"/><text x="32.1989%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="31.9489%" y="245" width="0.2396%" height="15" fill="rgb(228,75,37)" fg:x="400" fg:w="3"/><text x="32.1989%" y="255.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="31.9489%" y="229" width="0.2396%" height="15" fill="rgb(205,115,49)" fg:x="400" fg:w="3"/><text x="32.1989%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="32.1885%" y="277" width="0.0799%" height="15" fill="rgb(250,154,43)" fg:x="403" fg:w="1"/><text x="32.4385%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="32.2684%" y="277" width="0.0799%" height="15" fill="rgb(226,43,29)" fg:x="404" fg:w="1"/><text x="32.5184%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="32.2684%" y="261" width="0.0799%" height="15" fill="rgb(249,228,39)" fg:x="404" fg:w="1"/><text x="32.5184%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.56%)</title><rect x="32.1885%" y="293" width="0.5591%" height="15" fill="rgb(216,79,43)" fg:x="403" fg:w="7"/><text x="32.4385%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.40%)</title><rect x="32.3482%" y="277" width="0.3994%" height="15" fill="rgb(228,95,12)" fg:x="405" fg:w="5"/><text x="32.5982%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="32.3482%" y="261" width="0.3994%" height="15" fill="rgb(249,221,15)" fg:x="405" fg:w="5"/><text x="32.5982%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="32.3482%" y="245" width="0.3994%" height="15" fill="rgb(233,34,13)" fg:x="405" fg:w="5"/><text x="32.5982%" y="255.50"></text></g><g><title>__libc_malloc (5 samples, 0.40%)</title><rect x="32.3482%" y="229" width="0.3994%" height="15" fill="rgb(214,103,39)" fg:x="405" fg:w="5"/><text x="32.5982%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="32.1885%" y="325" width="0.6390%" height="15" fill="rgb(251,126,39)" fg:x="403" fg:w="8"/><text x="32.4385%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="32.1885%" y="309" width="0.6390%" height="15" fill="rgb(214,216,36)" fg:x="403" fg:w="8"/><text x="32.4385%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="32.7476%" y="293" width="0.0799%" height="15" fill="rgb(220,221,8)" fg:x="410" fg:w="1"/><text x="32.9976%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (159 samples, 12.70%)</title><rect x="20.2077%" y="341" width="12.6997%" height="15" fill="rgb(240,216,3)" fg:x="253" fg:w="159"/><text x="20.4577%" y="351.50">regex_automata::met..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="32.8275%" y="325" width="0.0799%" height="15" fill="rgb(232,218,17)" fg:x="411" fg:w="1"/><text x="33.0775%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="32.8275%" y="309" width="0.0799%" height="15" fill="rgb(229,163,45)" fg:x="411" fg:w="1"/><text x="33.0775%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="32.8275%" y="293" width="0.0799%" height="15" fill="rgb(231,110,42)" fg:x="411" fg:w="1"/><text x="33.0775%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="32.8275%" y="277" width="0.0799%" height="15" fill="rgb(208,170,48)" fg:x="411" fg:w="1"/><text x="33.0775%" y="287.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="32.8275%" y="261" width="0.0799%" height="15" fill="rgb(239,116,25)" fg:x="411" fg:w="1"/><text x="33.0775%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (160 samples, 12.78%)</title><rect x="20.2077%" y="373" width="12.7796%" height="15" fill="rgb(219,200,50)" fg:x="253" fg:w="160"/><text x="20.4577%" y="383.50">&lt;regex::regex::stri..</text></g><g><title>regex::builders::Builder::build_one_string (160 samples, 12.78%)</title><rect x="20.2077%" y="357" width="12.7796%" height="15" fill="rgb(245,200,0)" fg:x="253" fg:w="160"/><text x="20.4577%" y="367.50">regex::builders::Bu..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="32.9073%" y="341" width="0.0799%" height="15" fill="rgb(245,119,33)" fg:x="412" fg:w="1"/><text x="33.1573%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.9872%" y="341" width="0.0799%" height="15" fill="rgb(231,125,12)" fg:x="413" fg:w="1"/><text x="33.2372%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="33.0671%" y="341" width="0.0799%" height="15" fill="rgb(216,96,41)" fg:x="414" fg:w="1"/><text x="33.3171%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="33.0671%" y="325" width="0.0799%" height="15" fill="rgb(248,43,45)" fg:x="414" fg:w="1"/><text x="33.3171%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="33.0671%" y="309" width="0.0799%" height="15" fill="rgb(217,222,7)" fg:x="414" fg:w="1"/><text x="33.3171%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="33.0671%" y="293" width="0.0799%" height="15" fill="rgb(233,28,6)" fg:x="414" fg:w="1"/><text x="33.3171%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="33.1470%" y="325" width="0.0799%" height="15" fill="rgb(231,218,15)" fg:x="415" fg:w="1"/><text x="33.3970%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.1470%" y="309" width="0.0799%" height="15" fill="rgb(226,171,48)" fg:x="415" fg:w="1"/><text x="33.3970%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (8 samples, 0.64%)</title><rect x="32.9872%" y="373" width="0.6390%" height="15" fill="rgb(235,201,9)" fg:x="413" fg:w="8"/><text x="33.2372%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (8 samples, 0.64%)</title><rect x="32.9872%" y="357" width="0.6390%" height="15" fill="rgb(217,80,15)" fg:x="413" fg:w="8"/><text x="33.2372%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (6 samples, 0.48%)</title><rect x="33.1470%" y="341" width="0.4792%" height="15" fill="rgb(219,152,8)" fg:x="415" fg:w="6"/><text x="33.3970%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (5 samples, 0.40%)</title><rect x="33.2268%" y="325" width="0.3994%" height="15" fill="rgb(243,107,38)" fg:x="416" fg:w="5"/><text x="33.4768%" y="335.50"></text></g><g><title>__libc_free (5 samples, 0.40%)</title><rect x="33.2268%" y="309" width="0.3994%" height="15" fill="rgb(231,17,5)" fg:x="416" fg:w="5"/><text x="33.4768%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.7061%" y="309" width="0.0799%" height="15" fill="rgb(209,25,54)" fg:x="422" fg:w="1"/><text x="33.9561%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.1853%" y="261" width="0.0799%" height="15" fill="rgb(219,0,2)" fg:x="428" fg:w="1"/><text x="34.4353%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="34.1853%" y="293" width="0.3195%" height="15" fill="rgb(246,9,5)" fg:x="428" fg:w="4"/><text x="34.4353%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="34.1853%" y="277" width="0.3195%" height="15" fill="rgb(226,159,4)" fg:x="428" fg:w="4"/><text x="34.4353%" y="287.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="34.2652%" y="261" width="0.2396%" height="15" fill="rgb(219,175,34)" fg:x="429" fg:w="3"/><text x="34.5152%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (11 samples, 0.88%)</title><rect x="33.7061%" y="325" width="0.8786%" height="15" fill="rgb(236,10,46)" fg:x="422" fg:w="11"/><text x="33.9561%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.80%)</title><rect x="33.7859%" y="309" width="0.7987%" height="15" fill="rgb(240,211,16)" fg:x="423" fg:w="10"/><text x="34.0359%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="34.5048%" y="293" width="0.0799%" height="15" fill="rgb(205,3,43)" fg:x="432" fg:w="1"/><text x="34.7548%" y="303.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (181 samples, 14.46%)</title><rect x="20.2077%" y="389" width="14.4569%" height="15" fill="rgb(245,7,22)" fg:x="253" fg:w="181"/><text x="20.4577%" y="399.50">indefinite::helper::He..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (13 samples, 1.04%)</title><rect x="33.6262%" y="373" width="1.0383%" height="15" fill="rgb(239,132,32)" fg:x="421" fg:w="13"/><text x="33.8762%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (13 samples, 1.04%)</title><rect x="33.6262%" y="357" width="1.0383%" height="15" fill="rgb(228,202,34)" fg:x="421" fg:w="13"/><text x="33.8762%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (13 samples, 1.04%)</title><rect x="33.6262%" y="341" width="1.0383%" height="15" fill="rgb(254,200,22)" fg:x="421" fg:w="13"/><text x="33.8762%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="34.5847%" y="325" width="0.0799%" height="15" fill="rgb(219,10,39)" fg:x="433" fg:w="1"/><text x="34.8347%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="34.5847%" y="309" width="0.0799%" height="15" fill="rgb(226,210,39)" fg:x="433" fg:w="1"/><text x="34.8347%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.7444%" y="325" width="0.0799%" height="15" fill="rgb(208,219,16)" fg:x="435" fg:w="1"/><text x="34.9944%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.7444%" y="309" width="0.0799%" height="15" fill="rgb(216,158,51)" fg:x="435" fg:w="1"/><text x="34.9944%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.7444%" y="293" width="0.0799%" height="15" fill="rgb(233,14,44)" fg:x="435" fg:w="1"/><text x="34.9944%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.9042%" y="309" width="0.0799%" height="15" fill="rgb(237,97,39)" fg:x="437" fg:w="1"/><text x="35.1542%" y="319.50"></text></g><g><title>__libc_free (7 samples, 0.56%)</title><rect x="34.9840%" y="293" width="0.5591%" height="15" fill="rgb(218,198,43)" fg:x="438" fg:w="7"/><text x="35.2340%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (20 samples, 1.60%)</title><rect x="34.9840%" y="309" width="1.5974%" height="15" fill="rgb(231,104,20)" fg:x="438" fg:w="20"/><text x="35.2340%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.04%)</title><rect x="35.5431%" y="293" width="1.0383%" height="15" fill="rgb(254,36,13)" fg:x="445" fg:w="13"/><text x="35.7931%" y="303.50"></text></g><g><title>__libc_free (5 samples, 0.40%)</title><rect x="36.1821%" y="277" width="0.3994%" height="15" fill="rgb(248,14,50)" fg:x="453" fg:w="5"/><text x="36.4321%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="36.5815%" y="293" width="0.5591%" height="15" fill="rgb(217,107,29)" fg:x="458" fg:w="7"/><text x="36.8315%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.64%)</title><rect x="36.5815%" y="309" width="0.6390%" height="15" fill="rgb(251,169,33)" fg:x="458" fg:w="8"/><text x="36.8315%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="37.1406%" y="293" width="0.0799%" height="15" fill="rgb(217,108,32)" fg:x="465" fg:w="1"/><text x="37.3906%" y="303.50"></text></g><g><title>regex_syntax::parser::ParserBuilder::new (1 samples, 0.08%)</title><rect x="37.1406%" y="277" width="0.0799%" height="15" fill="rgb(219,66,42)" fg:x="465" fg:w="1"/><text x="37.3906%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="37.4601%" y="277" width="0.1597%" height="15" fill="rgb(206,180,7)" fg:x="469" fg:w="2"/><text x="37.7101%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="37.4601%" y="261" width="0.1597%" height="15" fill="rgb(208,226,31)" fg:x="469" fg:w="2"/><text x="37.7101%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="37.4601%" y="245" width="0.1597%" height="15" fill="rgb(218,26,49)" fg:x="469" fg:w="2"/><text x="37.7101%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="37.4601%" y="229" width="0.1597%" height="15" fill="rgb(233,197,48)" fg:x="469" fg:w="2"/><text x="37.7101%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (8 samples, 0.64%)</title><rect x="37.6198%" y="277" width="0.6390%" height="15" fill="rgb(252,181,51)" fg:x="471" fg:w="8"/><text x="37.8698%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="38.0192%" y="261" width="0.2396%" height="15" fill="rgb(253,90,19)" fg:x="476" fg:w="3"/><text x="38.2692%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.1789%" y="245" width="0.0799%" height="15" fill="rgb(215,171,30)" fg:x="478" fg:w="1"/><text x="38.4289%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.1789%" y="229" width="0.0799%" height="15" fill="rgb(214,222,9)" fg:x="478" fg:w="1"/><text x="38.4289%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.1789%" y="213" width="0.0799%" height="15" fill="rgb(223,3,22)" fg:x="478" fg:w="1"/><text x="38.4289%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (17 samples, 1.36%)</title><rect x="37.2204%" y="309" width="1.3578%" height="15" fill="rgb(225,196,46)" fg:x="466" fg:w="17"/><text x="37.4704%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (16 samples, 1.28%)</title><rect x="37.3003%" y="293" width="1.2780%" height="15" fill="rgb(209,110,37)" fg:x="467" fg:w="16"/><text x="37.5503%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="38.2588%" y="277" width="0.3195%" height="15" fill="rgb(249,89,12)" fg:x="479" fg:w="4"/><text x="38.5088%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="38.2588%" y="261" width="0.3195%" height="15" fill="rgb(226,27,33)" fg:x="479" fg:w="4"/><text x="38.5088%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.32%)</title><rect x="38.2588%" y="245" width="0.3195%" height="15" fill="rgb(213,82,22)" fg:x="479" fg:w="4"/><text x="38.5088%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="38.5783%" y="261" width="0.1597%" height="15" fill="rgb(248,140,0)" fg:x="483" fg:w="2"/><text x="38.8283%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="38.5783%" y="245" width="0.1597%" height="15" fill="rgb(228,106,3)" fg:x="483" fg:w="2"/><text x="38.8283%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="38.5783%" y="229" width="0.1597%" height="15" fill="rgb(209,23,37)" fg:x="483" fg:w="2"/><text x="38.8283%" y="239.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="38.6581%" y="213" width="0.0799%" height="15" fill="rgb(241,93,50)" fg:x="484" fg:w="1"/><text x="38.9081%" y="223.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="38.6581%" y="197" width="0.0799%" height="15" fill="rgb(253,46,43)" fg:x="484" fg:w="1"/><text x="38.9081%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="38.8179%" y="213" width="0.1597%" height="15" fill="rgb(226,206,43)" fg:x="486" fg:w="2"/><text x="39.0679%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.8978%" y="197" width="0.0799%" height="15" fill="rgb(217,54,7)" fg:x="487" fg:w="1"/><text x="39.1478%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.8978%" y="181" width="0.0799%" height="15" fill="rgb(223,5,52)" fg:x="487" fg:w="1"/><text x="39.1478%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.8978%" y="165" width="0.0799%" height="15" fill="rgb(206,52,46)" fg:x="487" fg:w="1"/><text x="39.1478%" y="175.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 1.04%)</title><rect x="40.2556%" y="197" width="1.0383%" height="15" fill="rgb(253,136,11)" fg:x="504" fg:w="13"/><text x="40.5056%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.2939%" y="197" width="0.0799%" height="15" fill="rgb(208,106,33)" fg:x="517" fg:w="1"/><text x="41.5439%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (7 samples, 0.56%)</title><rect x="41.3738%" y="197" width="0.5591%" height="15" fill="rgb(206,54,4)" fg:x="518" fg:w="7"/><text x="41.6238%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.8530%" y="181" width="0.0799%" height="15" fill="rgb(213,3,15)" fg:x="524" fg:w="1"/><text x="42.1030%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.8530%" y="165" width="0.0799%" height="15" fill="rgb(252,211,39)" fg:x="524" fg:w="1"/><text x="42.1030%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.8530%" y="149" width="0.0799%" height="15" fill="rgb(223,6,36)" fg:x="524" fg:w="1"/><text x="42.1030%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="41.9329%" y="197" width="0.2396%" height="15" fill="rgb(252,169,45)" fg:x="525" fg:w="3"/><text x="42.1829%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.0927%" y="181" width="0.0799%" height="15" fill="rgb(212,48,26)" fg:x="527" fg:w="1"/><text x="42.3427%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.0927%" y="165" width="0.0799%" height="15" fill="rgb(251,102,48)" fg:x="527" fg:w="1"/><text x="42.3427%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="42.0927%" y="149" width="0.0799%" height="15" fill="rgb(243,208,16)" fg:x="527" fg:w="1"/><text x="42.3427%" y="159.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="42.6518%" y="165" width="0.1597%" height="15" fill="rgb(219,96,24)" fg:x="534" fg:w="2"/><text x="42.9018%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="42.8115%" y="165" width="0.2396%" height="15" fill="rgb(219,33,29)" fg:x="536" fg:w="3"/><text x="43.0615%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="42.8115%" y="149" width="0.2396%" height="15" fill="rgb(223,176,5)" fg:x="536" fg:w="3"/><text x="43.0615%" y="159.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="42.8115%" y="133" width="0.2396%" height="15" fill="rgb(228,140,14)" fg:x="536" fg:w="3"/><text x="43.0615%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (17 samples, 1.36%)</title><rect x="42.1725%" y="197" width="1.3578%" height="15" fill="rgb(217,179,31)" fg:x="528" fg:w="17"/><text x="42.4225%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (16 samples, 1.28%)</title><rect x="42.2524%" y="181" width="1.2780%" height="15" fill="rgb(230,9,30)" fg:x="529" fg:w="16"/><text x="42.5024%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.48%)</title><rect x="43.0511%" y="165" width="0.4792%" height="15" fill="rgb(230,136,20)" fg:x="539" fg:w="6"/><text x="43.3011%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="43.2907%" y="149" width="0.2396%" height="15" fill="rgb(215,210,22)" fg:x="542" fg:w="3"/><text x="43.5407%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.4505%" y="133" width="0.0799%" height="15" fill="rgb(218,43,5)" fg:x="544" fg:w="1"/><text x="43.7005%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.4505%" y="117" width="0.0799%" height="15" fill="rgb(216,11,5)" fg:x="544" fg:w="1"/><text x="43.7005%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.4505%" y="101" width="0.0799%" height="15" fill="rgb(209,82,29)" fg:x="544" fg:w="1"/><text x="43.7005%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="43.5304%" y="197" width="0.0799%" height="15" fill="rgb(244,115,12)" fg:x="545" fg:w="1"/><text x="43.7804%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="43.5304%" y="181" width="0.0799%" height="15" fill="rgb(222,82,18)" fg:x="545" fg:w="1"/><text x="43.7804%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="43.6102%" y="181" width="0.1597%" height="15" fill="rgb(249,227,8)" fg:x="546" fg:w="2"/><text x="43.8602%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="43.6102%" y="165" width="0.1597%" height="15" fill="rgb(253,141,45)" fg:x="546" fg:w="2"/><text x="43.8602%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.6102%" y="149" width="0.1597%" height="15" fill="rgb(234,184,4)" fg:x="546" fg:w="2"/><text x="43.8602%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="43.6102%" y="133" width="0.1597%" height="15" fill="rgb(218,194,23)" fg:x="546" fg:w="2"/><text x="43.8602%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.8498%" y="165" width="0.0799%" height="15" fill="rgb(235,66,41)" fg:x="549" fg:w="1"/><text x="44.0998%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (75 samples, 5.99%)</title><rect x="43.6102%" y="197" width="5.9904%" height="15" fill="rgb(245,217,1)" fg:x="546" fg:w="75"/><text x="43.8602%" y="207.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (73 samples, 5.83%)</title><rect x="43.7700%" y="181" width="5.8307%" height="15" fill="rgb(229,91,1)" fg:x="548" fg:w="73"/><text x="44.0200%" y="191.50">regex_a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (71 samples, 5.67%)</title><rect x="43.9297%" y="165" width="5.6709%" height="15" fill="rgb(207,101,30)" fg:x="550" fg:w="71"/><text x="44.1797%" y="175.50">alloc::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="49.6006%" y="197" width="0.1597%" height="15" fill="rgb(223,82,49)" fg:x="621" fg:w="2"/><text x="49.8506%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (146 samples, 11.66%)</title><rect x="38.5783%" y="293" width="11.6613%" height="15" fill="rgb(218,167,17)" fg:x="483" fg:w="146"/><text x="38.8283%" y="303.50">&lt;core::iter::adap..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (146 samples, 11.66%)</title><rect x="38.5783%" y="277" width="11.6613%" height="15" fill="rgb(208,103,14)" fg:x="483" fg:w="146"/><text x="38.8283%" y="287.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (144 samples, 11.50%)</title><rect x="38.7380%" y="261" width="11.5016%" height="15" fill="rgb(238,20,8)" fg:x="485" fg:w="144"/><text x="38.9880%" y="271.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (143 samples, 11.42%)</title><rect x="38.8179%" y="245" width="11.4217%" height="15" fill="rgb(218,80,54)" fg:x="486" fg:w="143"/><text x="39.0679%" y="255.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (143 samples, 11.42%)</title><rect x="38.8179%" y="229" width="11.4217%" height="15" fill="rgb(240,144,17)" fg:x="486" fg:w="143"/><text x="39.0679%" y="239.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (141 samples, 11.26%)</title><rect x="38.9776%" y="213" width="11.2620%" height="15" fill="rgb(245,27,50)" fg:x="488" fg:w="141"/><text x="39.2276%" y="223.50">regex_automata::n..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (6 samples, 0.48%)</title><rect x="49.7604%" y="197" width="0.4792%" height="15" fill="rgb(251,51,7)" fg:x="623" fg:w="6"/><text x="50.0104%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="49.8403%" y="181" width="0.3994%" height="15" fill="rgb(245,217,29)" fg:x="624" fg:w="5"/><text x="50.0903%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="49.8403%" y="165" width="0.3994%" height="15" fill="rgb(221,176,29)" fg:x="624" fg:w="5"/><text x="50.0903%" y="175.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="49.9201%" y="149" width="0.3195%" height="15" fill="rgb(212,180,24)" fg:x="625" fg:w="4"/><text x="50.1701%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (8 samples, 0.64%)</title><rect x="50.3994%" y="277" width="0.6390%" height="15" fill="rgb(254,24,2)" fg:x="631" fg:w="8"/><text x="50.6494%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="50.7188%" y="261" width="0.3195%" height="15" fill="rgb(230,100,2)" fg:x="635" fg:w="4"/><text x="50.9688%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="50.7987%" y="245" width="0.2396%" height="15" fill="rgb(219,142,25)" fg:x="636" fg:w="3"/><text x="51.0487%" y="255.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="50.7987%" y="229" width="0.2396%" height="15" fill="rgb(240,73,43)" fg:x="636" fg:w="3"/><text x="51.0487%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (11 samples, 0.88%)</title><rect x="51.0383%" y="277" width="0.8786%" height="15" fill="rgb(214,114,15)" fg:x="639" fg:w="11"/><text x="51.2883%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="51.8371%" y="261" width="0.0799%" height="15" fill="rgb(207,130,4)" fg:x="649" fg:w="1"/><text x="52.0871%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.8371%" y="245" width="0.0799%" height="15" fill="rgb(221,25,40)" fg:x="649" fg:w="1"/><text x="52.0871%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (215 samples, 17.17%)</title><rect x="34.8243%" y="325" width="17.1725%" height="15" fill="rgb(241,184,7)" fg:x="436" fg:w="215"/><text x="35.0743%" y="335.50">regex_automata::meta::strat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (168 samples, 13.42%)</title><rect x="38.5783%" y="309" width="13.4185%" height="15" fill="rgb(235,159,4)" fg:x="483" fg:w="168"/><text x="38.8283%" y="319.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (22 samples, 1.76%)</title><rect x="50.2396%" y="293" width="1.7572%" height="15" fill="rgb(214,87,48)" fg:x="629" fg:w="22"/><text x="50.4896%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="51.9169%" y="277" width="0.0799%" height="15" fill="rgb(246,198,24)" fg:x="650" fg:w="1"/><text x="52.1669%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="52.0767%" y="277" width="0.0799%" height="15" fill="rgb(209,66,40)" fg:x="652" fg:w="1"/><text x="52.3267%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="52.0767%" y="261" width="0.0799%" height="15" fill="rgb(233,147,39)" fg:x="652" fg:w="1"/><text x="52.3267%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="52.0767%" y="293" width="0.3994%" height="15" fill="rgb(231,145,52)" fg:x="652" fg:w="5"/><text x="52.3267%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="52.1565%" y="277" width="0.3195%" height="15" fill="rgb(206,20,26)" fg:x="653" fg:w="4"/><text x="52.4065%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="52.1565%" y="261" width="0.3195%" height="15" fill="rgb(238,220,4)" fg:x="653" fg:w="4"/><text x="52.4065%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="52.1565%" y="245" width="0.3195%" height="15" fill="rgb(252,195,42)" fg:x="653" fg:w="4"/><text x="52.4065%" y="255.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="52.1565%" y="229" width="0.3195%" height="15" fill="rgb(209,10,6)" fg:x="653" fg:w="4"/><text x="52.4065%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (2 samples, 0.16%)</title><rect x="52.4760%" y="293" width="0.1597%" height="15" fill="rgb(229,3,52)" fg:x="657" fg:w="2"/><text x="52.7260%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.5559%" y="277" width="0.0799%" height="15" fill="rgb(253,49,37)" fg:x="658" fg:w="1"/><text x="52.8059%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.72%)</title><rect x="51.9968%" y="325" width="0.7188%" height="15" fill="rgb(240,103,49)" fg:x="651" fg:w="9"/><text x="52.2468%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="52.0767%" y="309" width="0.6390%" height="15" fill="rgb(250,182,30)" fg:x="652" fg:w="8"/><text x="52.3267%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="52.6358%" y="293" width="0.0799%" height="15" fill="rgb(248,8,30)" fg:x="659" fg:w="1"/><text x="52.8858%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserBuilder::build (1 samples, 0.08%)</title><rect x="52.7157%" y="325" width="0.0799%" height="15" fill="rgb(237,120,30)" fg:x="660" fg:w="1"/><text x="52.9657%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.7955%" y="277" width="0.0799%" height="15" fill="rgb(221,146,34)" fg:x="661" fg:w="1"/><text x="53.0455%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.0351%" y="261" width="0.0799%" height="15" fill="rgb(242,55,13)" fg:x="664" fg:w="1"/><text x="53.2851%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.1150%" y="261" width="0.0799%" height="15" fill="rgb(242,112,31)" fg:x="665" fg:w="1"/><text x="53.3650%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.1150%" y="245" width="0.0799%" height="15" fill="rgb(249,192,27)" fg:x="665" fg:w="1"/><text x="53.3650%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.1150%" y="229" width="0.0799%" height="15" fill="rgb(208,204,44)" fg:x="665" fg:w="1"/><text x="53.3650%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (6 samples, 0.48%)</title><rect x="52.8754%" y="277" width="0.4792%" height="15" fill="rgb(208,93,54)" fg:x="662" fg:w="6"/><text x="53.1254%" y="287.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="53.1949%" y="261" width="0.1597%" height="15" fill="rgb(242,1,31)" fg:x="666" fg:w="2"/><text x="53.4449%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (8 samples, 0.64%)</title><rect x="52.7955%" y="293" width="0.6390%" height="15" fill="rgb(241,83,25)" fg:x="661" fg:w="8"/><text x="53.0455%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="53.3546%" y="277" width="0.0799%" height="15" fill="rgb(205,169,50)" fg:x="668" fg:w="1"/><text x="53.6046%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="53.3546%" y="261" width="0.0799%" height="15" fill="rgb(239,186,37)" fg:x="668" fg:w="1"/><text x="53.6046%" y="271.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="53.5942%" y="277" width="0.1597%" height="15" fill="rgb(205,221,10)" fg:x="671" fg:w="2"/><text x="53.8442%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="53.6741%" y="261" width="0.0799%" height="15" fill="rgb(218,196,15)" fg:x="672" fg:w="1"/><text x="53.9241%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (5 samples, 0.40%)</title><rect x="53.4345%" y="293" width="0.3994%" height="15" fill="rgb(218,196,35)" fg:x="669" fg:w="5"/><text x="53.6845%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::HirFrame::unwrap_expr (1 samples, 0.08%)</title><rect x="53.7540%" y="277" width="0.0799%" height="15" fill="rgb(233,63,24)" fg:x="673" fg:w="1"/><text x="54.0040%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (244 samples, 19.49%)</title><rect x="34.6645%" y="373" width="19.4888%" height="15" fill="rgb(225,8,4)" fg:x="434" fg:w="244"/><text x="34.9145%" y="383.50">&lt;regex::regex::string::Regex as..</text></g><g><title>regex::builders::Builder::build_one_string (243 samples, 19.41%)</title><rect x="34.7444%" y="357" width="19.4089%" height="15" fill="rgb(234,105,35)" fg:x="435" fg:w="243"/><text x="34.9944%" y="367.50">regex::builders::Builder::buil..</text></g><g><title>regex_automata::meta::regex::Builder::build (243 samples, 19.41%)</title><rect x="34.7444%" y="341" width="19.4089%" height="15" fill="rgb(236,21,32)" fg:x="435" fg:w="243"/><text x="34.9944%" y="351.50">regex_automata::meta::regex::B..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (17 samples, 1.36%)</title><rect x="52.7955%" y="325" width="1.3578%" height="15" fill="rgb(228,109,6)" fg:x="661" fg:w="17"/><text x="53.0455%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (17 samples, 1.36%)</title><rect x="52.7955%" y="309" width="1.3578%" height="15" fill="rgb(229,215,31)" fg:x="661" fg:w="17"/><text x="53.0455%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (4 samples, 0.32%)</title><rect x="53.8339%" y="293" width="0.3195%" height="15" fill="rgb(221,52,54)" fg:x="674" fg:w="4"/><text x="54.0839%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (2 samples, 0.16%)</title><rect x="53.9936%" y="277" width="0.1597%" height="15" fill="rgb(252,129,43)" fg:x="676" fg:w="2"/><text x="54.2436%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="54.1534%" y="373" width="0.0799%" height="15" fill="rgb(248,183,27)" fg:x="678" fg:w="1"/><text x="54.4034%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="54.1534%" y="357" width="0.0799%" height="15" fill="rgb(250,0,22)" fg:x="678" fg:w="1"/><text x="54.4034%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="54.1534%" y="341" width="0.0799%" height="15" fill="rgb(213,166,10)" fg:x="678" fg:w="1"/><text x="54.4034%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="54.1534%" y="325" width="0.0799%" height="15" fill="rgb(207,163,36)" fg:x="678" fg:w="1"/><text x="54.4034%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="54.1534%" y="309" width="0.0799%" height="15" fill="rgb(208,122,22)" fg:x="678" fg:w="1"/><text x="54.4034%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="54.1534%" y="293" width="0.0799%" height="15" fill="rgb(207,104,49)" fg:x="678" fg:w="1"/><text x="54.4034%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.1534%" y="277" width="0.0799%" height="15" fill="rgb(248,211,50)" fg:x="678" fg:w="1"/><text x="54.4034%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="54.2332%" y="357" width="0.0799%" height="15" fill="rgb(217,13,45)" fg:x="679" fg:w="1"/><text x="54.4832%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="54.2332%" y="341" width="0.0799%" height="15" fill="rgb(211,216,49)" fg:x="679" fg:w="1"/><text x="54.4832%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="54.2332%" y="325" width="0.0799%" height="15" fill="rgb(221,58,53)" fg:x="679" fg:w="1"/><text x="54.4832%" y="335.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="54.2332%" y="309" width="0.0799%" height="15" fill="rgb(220,112,41)" fg:x="679" fg:w="1"/><text x="54.4832%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="54.3131%" y="293" width="0.0799%" height="15" fill="rgb(236,38,28)" fg:x="680" fg:w="1"/><text x="54.5631%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="54.9521%" y="277" width="0.0799%" height="15" fill="rgb(227,195,22)" fg:x="688" fg:w="1"/><text x="55.2021%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.9521%" y="261" width="0.0799%" height="15" fill="rgb(214,55,33)" fg:x="688" fg:w="1"/><text x="55.2021%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.9521%" y="245" width="0.0799%" height="15" fill="rgb(248,80,13)" fg:x="688" fg:w="1"/><text x="55.2021%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="55.0319%" y="277" width="0.0799%" height="15" fill="rgb(238,52,6)" fg:x="689" fg:w="1"/><text x="55.2819%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="55.0319%" y="261" width="0.0799%" height="15" fill="rgb(224,198,47)" fg:x="689" fg:w="1"/><text x="55.2819%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (17 samples, 1.36%)</title><rect x="54.3131%" y="309" width="1.3578%" height="15" fill="rgb(233,171,20)" fg:x="680" fg:w="17"/><text x="54.5631%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (16 samples, 1.28%)</title><rect x="54.3930%" y="293" width="1.2780%" height="15" fill="rgb(241,30,25)" fg:x="681" fg:w="16"/><text x="54.6430%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (7 samples, 0.56%)</title><rect x="55.1118%" y="277" width="0.5591%" height="15" fill="rgb(207,171,38)" fg:x="690" fg:w="7"/><text x="55.3618%" y="287.50"></text></g><g><title>indefinite::rules::number::Number::check (265 samples, 21.17%)</title><rect x="34.6645%" y="389" width="21.1661%" height="15" fill="rgb(234,70,1)" fg:x="434" fg:w="265"/><text x="34.9145%" y="399.50">indefinite::rules::number::Number..</text></g><g><title>regex::regex::string::Regex::is_match_at (20 samples, 1.60%)</title><rect x="54.2332%" y="373" width="1.5974%" height="15" fill="rgb(232,178,18)" fg:x="679" fg:w="20"/><text x="54.4832%" y="383.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (19 samples, 1.52%)</title><rect x="54.3131%" y="357" width="1.5176%" height="15" fill="rgb(241,78,40)" fg:x="680" fg:w="19"/><text x="54.5631%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (19 samples, 1.52%)</title><rect x="54.3131%" y="341" width="1.5176%" height="15" fill="rgb(222,35,25)" fg:x="680" fg:w="19"/><text x="54.5631%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (19 samples, 1.52%)</title><rect x="54.3131%" y="325" width="1.5176%" height="15" fill="rgb(207,92,16)" fg:x="680" fg:w="19"/><text x="54.5631%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.16%)</title><rect x="55.6709%" y="309" width="0.1597%" height="15" fill="rgb(216,59,51)" fg:x="697" fg:w="2"/><text x="55.9209%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="55.7508%" y="293" width="0.0799%" height="15" fill="rgb(213,80,28)" fg:x="698" fg:w="1"/><text x="56.0008%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="55.7508%" y="277" width="0.0799%" height="15" fill="rgb(220,93,7)" fg:x="698" fg:w="1"/><text x="56.0008%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.7508%" y="261" width="0.0799%" height="15" fill="rgb(225,24,44)" fg:x="698" fg:w="1"/><text x="56.0008%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.7508%" y="245" width="0.0799%" height="15" fill="rgb(243,74,40)" fg:x="698" fg:w="1"/><text x="56.0008%" y="255.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="55.8307%" y="373" width="0.0799%" height="15" fill="rgb(228,39,7)" fg:x="699" fg:w="1"/><text x="56.0807%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.0703%" y="309" width="0.0799%" height="15" fill="rgb(227,79,8)" fg:x="702" fg:w="1"/><text x="56.3203%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.0703%" y="293" width="0.0799%" height="15" fill="rgb(236,58,11)" fg:x="702" fg:w="1"/><text x="56.3203%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="56.0703%" y="277" width="0.0799%" height="15" fill="rgb(249,63,35)" fg:x="702" fg:w="1"/><text x="56.3203%" y="287.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="56.1502%" y="309" width="0.1597%" height="15" fill="rgb(252,114,16)" fg:x="703" fg:w="2"/><text x="56.4002%" y="319.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="56.3099%" y="309" width="0.2396%" height="15" fill="rgb(254,151,24)" fg:x="705" fg:w="3"/><text x="56.5599%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="56.7093%" y="245" width="0.0799%" height="15" fill="rgb(253,54,39)" fg:x="710" fg:w="1"/><text x="56.9593%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="56.5495%" y="309" width="0.3195%" height="15" fill="rgb(243,25,45)" fg:x="708" fg:w="4"/><text x="56.7995%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="56.5495%" y="293" width="0.3195%" height="15" fill="rgb(234,134,9)" fg:x="708" fg:w="4"/><text x="56.7995%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (4 samples, 0.32%)</title><rect x="56.5495%" y="277" width="0.3195%" height="15" fill="rgb(227,166,31)" fg:x="708" fg:w="4"/><text x="56.7995%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="56.5495%" y="261" width="0.3195%" height="15" fill="rgb(245,143,41)" fg:x="708" fg:w="4"/><text x="56.7995%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="56.7891%" y="245" width="0.0799%" height="15" fill="rgb(238,181,32)" fg:x="711" fg:w="1"/><text x="57.0391%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="57.1885%" y="293" width="0.0799%" height="15" fill="rgb(224,113,18)" fg:x="716" fg:w="1"/><text x="57.4385%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.1885%" y="277" width="0.0799%" height="15" fill="rgb(240,229,28)" fg:x="716" fg:w="1"/><text x="57.4385%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="57.4281%" y="277" width="0.0799%" height="15" fill="rgb(250,185,3)" fg:x="719" fg:w="1"/><text x="57.6781%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="57.5080%" y="277" width="0.1597%" height="15" fill="rgb(212,59,25)" fg:x="720" fg:w="2"/><text x="57.7580%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="57.2684%" y="293" width="0.4792%" height="15" fill="rgb(221,87,20)" fg:x="717" fg:w="6"/><text x="57.5184%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="57.6677%" y="277" width="0.0799%" height="15" fill="rgb(213,74,28)" fg:x="722" fg:w="1"/><text x="57.9177%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="57.6677%" y="261" width="0.0799%" height="15" fill="rgb(224,132,34)" fg:x="722" fg:w="1"/><text x="57.9177%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="57.6677%" y="245" width="0.0799%" height="15" fill="rgb(222,101,24)" fg:x="722" fg:w="1"/><text x="57.9177%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.6677%" y="229" width="0.0799%" height="15" fill="rgb(254,142,4)" fg:x="722" fg:w="1"/><text x="57.9177%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="57.7476%" y="261" width="0.0799%" height="15" fill="rgb(230,229,49)" fg:x="723" fg:w="1"/><text x="57.9976%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.7476%" y="245" width="0.0799%" height="15" fill="rgb(238,70,47)" fg:x="723" fg:w="1"/><text x="57.9976%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.7476%" y="229" width="0.0799%" height="15" fill="rgb(231,160,17)" fg:x="723" fg:w="1"/><text x="57.9976%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.7476%" y="213" width="0.0799%" height="15" fill="rgb(218,68,53)" fg:x="723" fg:w="1"/><text x="57.9976%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="57.7476%" y="277" width="0.1597%" height="15" fill="rgb(236,111,10)" fg:x="723" fg:w="2"/><text x="57.9976%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="57.8275%" y="261" width="0.0799%" height="15" fill="rgb(224,34,41)" fg:x="724" fg:w="1"/><text x="58.0775%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="57.8275%" y="245" width="0.0799%" height="15" fill="rgb(241,118,19)" fg:x="724" fg:w="1"/><text x="58.0775%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="57.8275%" y="229" width="0.0799%" height="15" fill="rgb(238,129,25)" fg:x="724" fg:w="1"/><text x="58.0775%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="57.8275%" y="213" width="0.0799%" height="15" fill="rgb(238,22,31)" fg:x="724" fg:w="1"/><text x="58.0775%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.8275%" y="197" width="0.0799%" height="15" fill="rgb(222,174,48)" fg:x="724" fg:w="1"/><text x="58.0775%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.8275%" y="181" width="0.0799%" height="15" fill="rgb(206,152,40)" fg:x="724" fg:w="1"/><text x="58.0775%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.8275%" y="165" width="0.0799%" height="15" fill="rgb(218,99,54)" fg:x="724" fg:w="1"/><text x="58.0775%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="57.9073%" y="277" width="0.0799%" height="15" fill="rgb(220,174,26)" fg:x="725" fg:w="1"/><text x="58.1573%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.0671%" y="261" width="0.0799%" height="15" fill="rgb(245,116,9)" fg:x="727" fg:w="1"/><text x="58.3171%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9 samples, 0.72%)</title><rect x="57.7476%" y="293" width="0.7188%" height="15" fill="rgb(209,72,35)" fg:x="723" fg:w="9"/><text x="57.9976%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="57.9872%" y="277" width="0.4792%" height="15" fill="rgb(226,126,21)" fg:x="726" fg:w="6"/><text x="58.2372%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="58.1470%" y="261" width="0.3195%" height="15" fill="rgb(227,192,1)" fg:x="728" fg:w="4"/><text x="58.3970%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (21 samples, 1.68%)</title><rect x="56.8690%" y="309" width="1.6773%" height="15" fill="rgb(237,180,29)" fg:x="712" fg:w="21"/><text x="57.1190%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="58.4665%" y="293" width="0.0799%" height="15" fill="rgb(230,197,35)" fg:x="732" fg:w="1"/><text x="58.7165%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="58.4665%" y="277" width="0.0799%" height="15" fill="rgb(246,193,31)" fg:x="732" fg:w="1"/><text x="58.7165%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="58.4665%" y="261" width="0.0799%" height="15" fill="rgb(241,36,4)" fg:x="732" fg:w="1"/><text x="58.7165%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.4665%" y="245" width="0.0799%" height="15" fill="rgb(241,130,17)" fg:x="732" fg:w="1"/><text x="58.7165%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.6262%" y="277" width="0.0799%" height="15" fill="rgb(206,137,32)" fg:x="734" fg:w="1"/><text x="58.8762%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.6262%" y="261" width="0.0799%" height="15" fill="rgb(237,228,51)" fg:x="734" fg:w="1"/><text x="58.8762%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.6262%" y="245" width="0.0799%" height="15" fill="rgb(243,6,42)" fg:x="734" fg:w="1"/><text x="58.8762%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="58.7061%" y="277" width="0.0799%" height="15" fill="rgb(251,74,28)" fg:x="735" fg:w="1"/><text x="58.9561%" y="287.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="58.7859%" y="261" width="0.1597%" height="15" fill="rgb(218,20,49)" fg:x="736" fg:w="2"/><text x="59.0359%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.8658%" y="245" width="0.0799%" height="15" fill="rgb(238,28,14)" fg:x="737" fg:w="1"/><text x="59.1158%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.8658%" y="229" width="0.0799%" height="15" fill="rgb(229,40,46)" fg:x="737" fg:w="1"/><text x="59.1158%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.8658%" y="213" width="0.0799%" height="15" fill="rgb(244,195,20)" fg:x="737" fg:w="1"/><text x="59.1158%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="58.9457%" y="261" width="0.0799%" height="15" fill="rgb(253,56,35)" fg:x="738" fg:w="1"/><text x="59.1957%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="58.9457%" y="245" width="0.0799%" height="15" fill="rgb(210,149,44)" fg:x="738" fg:w="1"/><text x="59.1957%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="59.0256%" y="261" width="0.0799%" height="15" fill="rgb(240,135,12)" fg:x="739" fg:w="1"/><text x="59.2756%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="58.7859%" y="277" width="0.3994%" height="15" fill="rgb(251,24,50)" fg:x="736" fg:w="5"/><text x="59.0359%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="59.1054%" y="261" width="0.0799%" height="15" fill="rgb(243,200,47)" fg:x="740" fg:w="1"/><text x="59.3554%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.1054%" y="245" width="0.0799%" height="15" fill="rgb(224,166,26)" fg:x="740" fg:w="1"/><text x="59.3554%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.1054%" y="229" width="0.0799%" height="15" fill="rgb(233,0,47)" fg:x="740" fg:w="1"/><text x="59.3554%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.1054%" y="213" width="0.0799%" height="15" fill="rgb(253,80,5)" fg:x="740" fg:w="1"/><text x="59.3554%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.72%)</title><rect x="58.5463%" y="309" width="0.7188%" height="15" fill="rgb(214,133,25)" fg:x="733" fg:w="9"/><text x="58.7963%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.72%)</title><rect x="58.5463%" y="293" width="0.7188%" height="15" fill="rgb(209,27,14)" fg:x="733" fg:w="9"/><text x="58.7963%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="59.1853%" y="277" width="0.0799%" height="15" fill="rgb(219,102,51)" fg:x="741" fg:w="1"/><text x="59.4353%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="59.1853%" y="261" width="0.0799%" height="15" fill="rgb(237,18,16)" fg:x="741" fg:w="1"/><text x="59.4353%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="59.2652%" y="277" width="0.1597%" height="15" fill="rgb(241,85,17)" fg:x="742" fg:w="2"/><text x="59.5152%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="59.2652%" y="261" width="0.1597%" height="15" fill="rgb(236,90,42)" fg:x="742" fg:w="2"/><text x="59.5152%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="59.4249%" y="277" width="0.1597%" height="15" fill="rgb(249,57,21)" fg:x="744" fg:w="2"/><text x="59.6749%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="59.4249%" y="261" width="0.1597%" height="15" fill="rgb(243,12,36)" fg:x="744" fg:w="2"/><text x="59.6749%" y="271.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (2 samples, 0.16%)</title><rect x="59.4249%" y="245" width="0.1597%" height="15" fill="rgb(253,128,47)" fg:x="744" fg:w="2"/><text x="59.6749%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="59.4249%" y="229" width="0.1597%" height="15" fill="rgb(207,33,20)" fg:x="744" fg:w="2"/><text x="59.6749%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (48 samples, 3.83%)</title><rect x="55.9105%" y="357" width="3.8339%" height="15" fill="rgb(233,215,35)" fg:x="700" fg:w="48"/><text x="56.1605%" y="367.50">&lt;reg..</text></g><g><title>regex::builders::Builder::build_one_string (48 samples, 3.83%)</title><rect x="55.9105%" y="341" width="3.8339%" height="15" fill="rgb(249,188,52)" fg:x="700" fg:w="48"/><text x="56.1605%" y="351.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (48 samples, 3.83%)</title><rect x="55.9105%" y="325" width="3.8339%" height="15" fill="rgb(225,12,32)" fg:x="700" fg:w="48"/><text x="56.1605%" y="335.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="59.2652%" y="309" width="0.4792%" height="15" fill="rgb(247,98,14)" fg:x="742" fg:w="6"/><text x="59.5152%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="59.2652%" y="293" width="0.4792%" height="15" fill="rgb(247,219,48)" fg:x="742" fg:w="6"/><text x="59.5152%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="59.5847%" y="277" width="0.1597%" height="15" fill="rgb(253,60,48)" fg:x="746" fg:w="2"/><text x="59.8347%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="59.8243%" y="325" width="0.0799%" height="15" fill="rgb(245,15,52)" fg:x="749" fg:w="1"/><text x="60.0743%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.8243%" y="309" width="0.0799%" height="15" fill="rgb(220,133,28)" fg:x="749" fg:w="1"/><text x="60.0743%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.8243%" y="293" width="0.0799%" height="15" fill="rgb(217,180,4)" fg:x="749" fg:w="1"/><text x="60.0743%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.8243%" y="277" width="0.0799%" height="15" fill="rgb(251,24,1)" fg:x="749" fg:w="1"/><text x="60.0743%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.9042%" y="309" width="0.0799%" height="15" fill="rgb(212,185,49)" fg:x="750" fg:w="1"/><text x="60.1542%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.9042%" y="293" width="0.0799%" height="15" fill="rgb(215,175,22)" fg:x="750" fg:w="1"/><text x="60.1542%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.9042%" y="277" width="0.0799%" height="15" fill="rgb(250,205,14)" fg:x="750" fg:w="1"/><text x="60.1542%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (4 samples, 0.32%)</title><rect x="59.7444%" y="357" width="0.3195%" height="15" fill="rgb(225,211,22)" fg:x="748" fg:w="4"/><text x="59.9944%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="59.7444%" y="341" width="0.3195%" height="15" fill="rgb(251,179,42)" fg:x="748" fg:w="4"/><text x="59.9944%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="59.9042%" y="325" width="0.1597%" height="15" fill="rgb(208,216,51)" fg:x="750" fg:w="2"/><text x="60.1542%" y="335.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="59.9840%" y="309" width="0.0799%" height="15" fill="rgb(235,36,11)" fg:x="751" fg:w="1"/><text x="60.2340%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="60.0639%" y="325" width="0.0799%" height="15" fill="rgb(213,189,28)" fg:x="752" fg:w="1"/><text x="60.3139%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="60.0639%" y="309" width="0.0799%" height="15" fill="rgb(227,203,42)" fg:x="752" fg:w="1"/><text x="60.3139%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="60.0639%" y="293" width="0.0799%" height="15" fill="rgb(244,72,36)" fg:x="752" fg:w="1"/><text x="60.3139%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.0639%" y="277" width="0.0799%" height="15" fill="rgb(213,53,17)" fg:x="752" fg:w="1"/><text x="60.3139%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="60.0639%" y="357" width="0.1597%" height="15" fill="rgb(207,167,3)" fg:x="752" fg:w="2"/><text x="60.3139%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="60.0639%" y="341" width="0.1597%" height="15" fill="rgb(216,98,30)" fg:x="752" fg:w="2"/><text x="60.3139%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="60.1438%" y="325" width="0.0799%" height="15" fill="rgb(236,123,15)" fg:x="753" fg:w="1"/><text x="60.3938%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="60.1438%" y="309" width="0.0799%" height="15" fill="rgb(248,81,50)" fg:x="753" fg:w="1"/><text x="60.3938%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.1438%" y="293" width="0.0799%" height="15" fill="rgb(214,120,4)" fg:x="753" fg:w="1"/><text x="60.3938%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="60.4633%" y="277" width="0.0799%" height="15" fill="rgb(208,179,34)" fg:x="757" fg:w="1"/><text x="60.7133%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.4633%" y="261" width="0.0799%" height="15" fill="rgb(227,140,7)" fg:x="757" fg:w="1"/><text x="60.7133%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.4633%" y="245" width="0.0799%" height="15" fill="rgb(214,22,6)" fg:x="757" fg:w="1"/><text x="60.7133%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="60.5431%" y="277" width="0.2396%" height="15" fill="rgb(207,137,27)" fg:x="758" fg:w="3"/><text x="60.7931%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.24%)</title><rect x="60.5431%" y="261" width="0.2396%" height="15" fill="rgb(210,8,46)" fg:x="758" fg:w="3"/><text x="60.7931%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.24%)</title><rect x="60.5431%" y="245" width="0.2396%" height="15" fill="rgb(240,16,54)" fg:x="758" fg:w="3"/><text x="60.7931%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.64%)</title><rect x="60.2236%" y="293" width="0.6390%" height="15" fill="rgb(211,209,29)" fg:x="754" fg:w="8"/><text x="60.4736%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="60.7827%" y="277" width="0.0799%" height="15" fill="rgb(226,228,24)" fg:x="761" fg:w="1"/><text x="61.0327%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.80%)</title><rect x="60.2236%" y="309" width="0.7987%" height="15" fill="rgb(222,84,9)" fg:x="754" fg:w="10"/><text x="60.4736%" y="319.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="60.8626%" y="293" width="0.1597%" height="15" fill="rgb(234,203,30)" fg:x="762" fg:w="2"/><text x="61.1126%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="60.8626%" y="277" width="0.1597%" height="15" fill="rgb(238,109,14)" fg:x="762" fg:w="2"/><text x="61.1126%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.9425%" y="261" width="0.0799%" height="15" fill="rgb(233,206,34)" fg:x="763" fg:w="1"/><text x="61.1925%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.9425%" y="245" width="0.0799%" height="15" fill="rgb(220,167,47)" fg:x="763" fg:w="1"/><text x="61.1925%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (536 samples, 42.81%)</title><rect x="18.3706%" y="469" width="42.8115%" height="15" fill="rgb(238,105,10)" fg:x="230" fg:w="536"/><text x="18.6206%" y="479.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe..</text></g><g><title>plugins_core::looking::model::qualify_name (517 samples, 41.29%)</title><rect x="19.8882%" y="453" width="41.2939%" height="15" fill="rgb(213,227,17)" fg:x="249" fg:w="517"/><text x="20.1382%" y="463.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (516 samples, 41.21%)</title><rect x="19.9681%" y="437" width="41.2141%" height="15" fill="rgb(217,132,38)" fg:x="250" fg:w="516"/><text x="20.2181%" y="447.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (516 samples, 41.21%)</title><rect x="19.9681%" y="421" width="41.2141%" height="15" fill="rgb(242,146,4)" fg:x="250" fg:w="516"/><text x="20.2181%" y="431.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (513 samples, 40.97%)</title><rect x="20.2077%" y="405" width="40.9744%" height="15" fill="rgb(212,61,9)" fg:x="253" fg:w="513"/><text x="20.4577%" y="415.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (67 samples, 5.35%)</title><rect x="55.8307%" y="389" width="5.3514%" height="15" fill="rgb(247,126,22)" fg:x="699" fg:w="67"/><text x="56.0807%" y="399.50">indefin..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (66 samples, 5.27%)</title><rect x="55.9105%" y="373" width="5.2716%" height="15" fill="rgb(220,196,2)" fg:x="700" fg:w="66"/><text x="56.1605%" y="383.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.96%)</title><rect x="60.2236%" y="357" width="0.9585%" height="15" fill="rgb(208,46,4)" fg:x="754" fg:w="12"/><text x="60.4736%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.96%)</title><rect x="60.2236%" y="341" width="0.9585%" height="15" fill="rgb(252,104,46)" fg:x="754" fg:w="12"/><text x="60.4736%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.96%)</title><rect x="60.2236%" y="325" width="0.9585%" height="15" fill="rgb(237,152,48)" fg:x="754" fg:w="12"/><text x="60.4736%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.16%)</title><rect x="61.0224%" y="309" width="0.1597%" height="15" fill="rgb(221,59,37)" fg:x="764" fg:w="2"/><text x="61.2724%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="61.0224%" y="293" width="0.1597%" height="15" fill="rgb(209,202,51)" fg:x="764" fg:w="2"/><text x="61.2724%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="61.0224%" y="277" width="0.1597%" height="15" fill="rgb(228,81,30)" fg:x="764" fg:w="2"/><text x="61.2724%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="61.0224%" y="261" width="0.1597%" height="15" fill="rgb(227,42,39)" fg:x="764" fg:w="2"/><text x="61.2724%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="61.0224%" y="245" width="0.1597%" height="15" fill="rgb(221,26,2)" fg:x="764" fg:w="2"/><text x="61.2724%" y="255.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.2620%" y="437" width="0.0799%" height="15" fill="rgb(254,61,31)" fg:x="767" fg:w="1"/><text x="61.5120%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.2620%" y="421" width="0.0799%" height="15" fill="rgb(222,173,38)" fg:x="767" fg:w="1"/><text x="61.5120%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.2620%" y="405" width="0.0799%" height="15" fill="rgb(218,50,12)" fg:x="767" fg:w="1"/><text x="61.5120%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.2620%" y="389" width="0.0799%" height="15" fill="rgb(223,88,40)" fg:x="767" fg:w="1"/><text x="61.5120%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.2620%" y="373" width="0.0799%" height="15" fill="rgb(237,54,19)" fg:x="767" fg:w="1"/><text x="61.5120%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.2620%" y="357" width="0.0799%" height="15" fill="rgb(251,129,25)" fg:x="767" fg:w="1"/><text x="61.5120%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="61.2620%" y="341" width="0.0799%" height="15" fill="rgb(238,97,19)" fg:x="767" fg:w="1"/><text x="61.5120%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="61.2620%" y="325" width="0.0799%" height="15" fill="rgb(240,169,18)" fg:x="767" fg:w="1"/><text x="61.5120%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="61.2620%" y="309" width="0.0799%" height="15" fill="rgb(230,187,49)" fg:x="767" fg:w="1"/><text x="61.5120%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.2620%" y="293" width="0.0799%" height="15" fill="rgb(209,44,26)" fg:x="767" fg:w="1"/><text x="61.5120%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.2620%" y="277" width="0.0799%" height="15" fill="rgb(244,0,6)" fg:x="767" fg:w="1"/><text x="61.5120%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="61.2620%" y="261" width="0.0799%" height="15" fill="rgb(248,18,21)" fg:x="767" fg:w="1"/><text x="61.5120%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="61.2620%" y="245" width="0.0799%" height="15" fill="rgb(245,180,19)" fg:x="767" fg:w="1"/><text x="61.5120%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="61.2620%" y="229" width="0.0799%" height="15" fill="rgb(252,118,36)" fg:x="767" fg:w="1"/><text x="61.5120%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="61.2620%" y="213" width="0.0799%" height="15" fill="rgb(210,224,19)" fg:x="767" fg:w="1"/><text x="61.5120%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.2620%" y="197" width="0.0799%" height="15" fill="rgb(218,30,24)" fg:x="767" fg:w="1"/><text x="61.5120%" y="207.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="61.3419%" y="437" width="0.0799%" height="15" fill="rgb(219,75,50)" fg:x="768" fg:w="1"/><text x="61.5919%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="61.3419%" y="421" width="0.0799%" height="15" fill="rgb(234,72,50)" fg:x="768" fg:w="1"/><text x="61.5919%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="61.3419%" y="405" width="0.0799%" height="15" fill="rgb(219,100,48)" fg:x="768" fg:w="1"/><text x="61.5919%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="61.3419%" y="389" width="0.0799%" height="15" fill="rgb(253,5,41)" fg:x="768" fg:w="1"/><text x="61.5919%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="61.3419%" y="373" width="0.0799%" height="15" fill="rgb(247,181,11)" fg:x="768" fg:w="1"/><text x="61.5919%" y="383.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="61.4217%" y="437" width="0.0799%" height="15" fill="rgb(222,223,25)" fg:x="769" fg:w="1"/><text x="61.6717%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="61.4217%" y="421" width="0.0799%" height="15" fill="rgb(214,198,28)" fg:x="769" fg:w="1"/><text x="61.6717%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="61.4217%" y="405" width="0.0799%" height="15" fill="rgb(230,46,43)" fg:x="769" fg:w="1"/><text x="61.6717%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="61.4217%" y="389" width="0.0799%" height="15" fill="rgb(233,65,53)" fg:x="769" fg:w="1"/><text x="61.6717%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.4217%" y="373" width="0.0799%" height="15" fill="rgb(221,121,27)" fg:x="769" fg:w="1"/><text x="61.6717%" y="383.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (628 samples, 50.16%)</title><rect x="11.4217%" y="645" width="50.1597%" height="15" fill="rgb(247,70,47)" fg:x="143" fg:w="628"/><text x="11.6717%" y="655.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (542 samples, 43.29%)</title><rect x="18.2907%" y="629" width="43.2907%" height="15" fill="rgb(228,85,35)" fg:x="229" fg:w="542"/><text x="18.5407%" y="639.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (542 samples, 43.29%)</title><rect x="18.2907%" y="613" width="43.2907%" height="15" fill="rgb(209,50,18)" fg:x="229" fg:w="542"/><text x="18.5407%" y="623.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (542 samples, 43.29%)</title><rect x="18.2907%" y="597" width="43.2907%" height="15" fill="rgb(250,19,35)" fg:x="229" fg:w="542"/><text x="18.5407%" y="607.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (542 samples, 43.29%)</title><rect x="18.2907%" y="581" width="43.2907%" height="15" fill="rgb(253,107,29)" fg:x="229" fg:w="542"/><text x="18.5407%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (542 samples, 43.29%)</title><rect x="18.2907%" y="565" width="43.2907%" height="15" fill="rgb(252,179,29)" fg:x="229" fg:w="542"/><text x="18.5407%" y="575.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (542 samples, 43.29%)</title><rect x="18.2907%" y="549" width="43.2907%" height="15" fill="rgb(238,194,6)" fg:x="229" fg:w="542"/><text x="18.5407%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (542 samples, 43.29%)</title><rect x="18.2907%" y="533" width="43.2907%" height="15" fill="rgb(238,164,29)" fg:x="229" fg:w="542"/><text x="18.5407%" y="543.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (542 samples, 43.29%)</title><rect x="18.2907%" y="517" width="43.2907%" height="15" fill="rgb(224,25,9)" fg:x="229" fg:w="542"/><text x="18.5407%" y="527.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (542 samples, 43.29%)</title><rect x="18.2907%" y="501" width="43.2907%" height="15" fill="rgb(244,153,23)" fg:x="229" fg:w="542"/><text x="18.5407%" y="511.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;..</text></g><g><title>plugins_core::looking::model::new_area_observation (542 samples, 43.29%)</title><rect x="18.2907%" y="485" width="43.2907%" height="15" fill="rgb(212,203,14)" fg:x="229" fg:w="542"/><text x="18.5407%" y="495.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.40%)</title><rect x="61.1821%" y="469" width="0.3994%" height="15" fill="rgb(220,164,20)" fg:x="766" fg:w="5"/><text x="61.4321%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="61.2620%" y="453" width="0.3195%" height="15" fill="rgb(222,203,48)" fg:x="767" fg:w="4"/><text x="61.5120%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.5016%" y="437" width="0.0799%" height="15" fill="rgb(215,159,22)" fg:x="770" fg:w="1"/><text x="61.7516%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="61.5815%" y="581" width="0.0799%" height="15" fill="rgb(216,183,47)" fg:x="771" fg:w="1"/><text x="61.8315%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="61.5815%" y="565" width="0.0799%" height="15" fill="rgb(229,195,25)" fg:x="771" fg:w="1"/><text x="61.8315%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="61.5815%" y="549" width="0.0799%" height="15" fill="rgb(224,132,51)" fg:x="771" fg:w="1"/><text x="61.8315%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.5815%" y="533" width="0.0799%" height="15" fill="rgb(240,63,7)" fg:x="771" fg:w="1"/><text x="61.8315%" y="543.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="61.6613%" y="565" width="0.0799%" height="15" fill="rgb(249,182,41)" fg:x="772" fg:w="1"/><text x="61.9113%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="61.6613%" y="549" width="0.0799%" height="15" fill="rgb(243,47,26)" fg:x="772" fg:w="1"/><text x="61.9113%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.6613%" y="533" width="0.0799%" height="15" fill="rgb(233,48,2)" fg:x="772" fg:w="1"/><text x="61.9113%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="61.6613%" y="517" width="0.0799%" height="15" fill="rgb(244,165,34)" fg:x="772" fg:w="1"/><text x="61.9113%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.6613%" y="501" width="0.0799%" height="15" fill="rgb(207,89,7)" fg:x="772" fg:w="1"/><text x="61.9113%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="61.6613%" y="485" width="0.0799%" height="15" fill="rgb(244,117,36)" fg:x="772" fg:w="1"/><text x="61.9113%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.6613%" y="469" width="0.0799%" height="15" fill="rgb(226,144,34)" fg:x="772" fg:w="1"/><text x="61.9113%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="61.6613%" y="453" width="0.0799%" height="15" fill="rgb(213,23,19)" fg:x="772" fg:w="1"/><text x="61.9113%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.6613%" y="437" width="0.0799%" height="15" fill="rgb(217,75,12)" fg:x="772" fg:w="1"/><text x="61.9113%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="61.6613%" y="421" width="0.0799%" height="15" fill="rgb(224,159,17)" fg:x="772" fg:w="1"/><text x="61.9113%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.7412%" y="485" width="0.0799%" height="15" fill="rgb(217,118,1)" fg:x="773" fg:w="1"/><text x="61.9912%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.7412%" y="469" width="0.0799%" height="15" fill="rgb(232,180,48)" fg:x="773" fg:w="1"/><text x="61.9912%" y="479.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (632 samples, 50.48%)</title><rect x="11.4217%" y="677" width="50.4792%" height="15" fill="rgb(230,27,33)" fg:x="143" fg:w="632"/><text x="11.6717%" y="687.50">&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (632 samples, 50.48%)</title><rect x="11.4217%" y="661" width="50.4792%" height="15" fill="rgb(205,31,21)" fg:x="143" fg:w="632"/><text x="11.6717%" y="671.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (4 samples, 0.32%)</title><rect x="61.5815%" y="645" width="0.3195%" height="15" fill="rgb(253,59,4)" fg:x="771" fg:w="4"/><text x="61.8315%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (4 samples, 0.32%)</title><rect x="61.5815%" y="629" width="0.3195%" height="15" fill="rgb(224,201,9)" fg:x="771" fg:w="4"/><text x="61.8315%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="61.5815%" y="613" width="0.3195%" height="15" fill="rgb(229,206,30)" fg:x="771" fg:w="4"/><text x="61.8315%" y="623.50"></text></g><g><title>engine::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="61.5815%" y="597" width="0.3195%" height="15" fill="rgb(212,67,47)" fg:x="771" fg:w="4"/><text x="61.8315%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::from_str (3 samples, 0.24%)</title><rect x="61.6613%" y="581" width="0.2396%" height="15" fill="rgb(211,96,50)" fg:x="772" fg:w="3"/><text x="61.9113%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="61.7412%" y="565" width="0.1597%" height="15" fill="rgb(252,114,18)" fg:x="773" fg:w="2"/><text x="61.9912%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="61.7412%" y="549" width="0.1597%" height="15" fill="rgb(223,58,37)" fg:x="773" fg:w="2"/><text x="61.9912%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="61.7412%" y="533" width="0.1597%" height="15" fill="rgb(237,70,4)" fg:x="773" fg:w="2"/><text x="61.9912%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="61.7412%" y="517" width="0.1597%" height="15" fill="rgb(244,85,46)" fg:x="773" fg:w="2"/><text x="61.9912%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="61.7412%" y="501" width="0.1597%" height="15" fill="rgb(223,39,52)" fg:x="773" fg:w="2"/><text x="61.9912%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.8211%" y="485" width="0.0799%" height="15" fill="rgb(218,200,14)" fg:x="774" fg:w="1"/><text x="62.0711%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.8211%" y="469" width="0.0799%" height="15" fill="rgb(208,171,16)" fg:x="774" fg:w="1"/><text x="62.0711%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="61.8211%" y="453" width="0.0799%" height="15" fill="rgb(234,200,18)" fg:x="774" fg:w="1"/><text x="62.0711%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.8211%" y="437" width="0.0799%" height="15" fill="rgb(228,45,11)" fg:x="774" fg:w="1"/><text x="62.0711%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.8211%" y="421" width="0.0799%" height="15" fill="rgb(237,182,11)" fg:x="774" fg:w="1"/><text x="62.0711%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="61.8211%" y="405" width="0.0799%" height="15" fill="rgb(241,175,49)" fg:x="774" fg:w="1"/><text x="62.0711%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.8211%" y="389" width="0.0799%" height="15" fill="rgb(247,38,35)" fg:x="774" fg:w="1"/><text x="62.0711%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (776 samples, 61.98%)</title><rect x="0.0000%" y="853" width="61.9808%" height="15" fill="rgb(228,39,49)" fg:x="0" fg:w="776"/><text x="0.2500%" y="863.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (776 samples, 61.98%)</title><rect x="0.0000%" y="837" width="61.9808%" height="15" fill="rgb(226,101,26)" fg:x="0" fg:w="776"/><text x="0.2500%" y="847.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (776 samples, 61.98%)</title><rect x="0.0000%" y="821" width="61.9808%" height="15" fill="rgb(206,141,19)" fg:x="0" fg:w="776"/><text x="0.2500%" y="831.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (636 samples, 50.80%)</title><rect x="11.1821%" y="805" width="50.7987%" height="15" fill="rgb(211,200,13)" fg:x="140" fg:w="636"/><text x="11.4321%" y="815.50">engine::session::Session::evaluate_and_perform</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (636 samples, 50.80%)</title><rect x="11.1821%" y="789" width="50.7987%" height="15" fill="rgb(241,121,6)" fg:x="140" fg:w="636"/><text x="11.4321%" y="799.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (636 samples, 50.80%)</title><rect x="11.1821%" y="773" width="50.7987%" height="15" fill="rgb(234,221,29)" fg:x="140" fg:w="636"/><text x="11.4321%" y="783.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (636 samples, 50.80%)</title><rect x="11.1821%" y="757" width="50.7987%" height="15" fill="rgb(229,136,5)" fg:x="140" fg:w="636"/><text x="11.4321%" y="767.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (636 samples, 50.80%)</title><rect x="11.1821%" y="741" width="50.7987%" height="15" fill="rgb(238,36,11)" fg:x="140" fg:w="636"/><text x="11.4321%" y="751.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>core::iter::adapters::try_process (636 samples, 50.80%)</title><rect x="11.1821%" y="725" width="50.7987%" height="15" fill="rgb(251,55,41)" fg:x="140" fg:w="636"/><text x="11.4321%" y="735.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (636 samples, 50.80%)</title><rect x="11.1821%" y="709" width="50.7987%" height="15" fill="rgb(242,34,40)" fg:x="140" fg:w="636"/><text x="11.4321%" y="719.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (636 samples, 50.80%)</title><rect x="11.1821%" y="693" width="50.7987%" height="15" fill="rgb(215,42,17)" fg:x="140" fg:w="636"/><text x="11.4321%" y="703.50">&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;:..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="61.9010%" y="677" width="0.0799%" height="15" fill="rgb(207,44,46)" fg:x="775" fg:w="1"/><text x="62.1510%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="61.9808%" y="693" width="0.0799%" height="15" fill="rgb(211,206,28)" fg:x="776" fg:w="1"/><text x="62.2308%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.9808%" y="677" width="0.0799%" height="15" fill="rgb(237,167,16)" fg:x="776" fg:w="1"/><text x="62.2308%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="61.9808%" y="805" width="0.2396%" height="15" fill="rgb(233,66,6)" fg:x="776" fg:w="3"/><text x="62.2308%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::State&gt; (3 samples, 0.24%)</title><rect x="61.9808%" y="789" width="0.2396%" height="15" fill="rgb(246,123,29)" fg:x="776" fg:w="3"/><text x="62.2308%" y="799.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="61.9808%" y="773" width="0.2396%" height="15" fill="rgb(209,62,40)" fg:x="776" fg:w="3"/><text x="62.2308%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (3 samples, 0.24%)</title><rect x="61.9808%" y="757" width="0.2396%" height="15" fill="rgb(218,4,25)" fg:x="776" fg:w="3"/><text x="62.2308%" y="767.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="61.9808%" y="741" width="0.2396%" height="15" fill="rgb(253,91,49)" fg:x="776" fg:w="3"/><text x="62.2308%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="61.9808%" y="725" width="0.2396%" height="15" fill="rgb(228,155,29)" fg:x="776" fg:w="3"/><text x="62.2308%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="61.9808%" y="709" width="0.2396%" height="15" fill="rgb(243,57,37)" fg:x="776" fg:w="3"/><text x="62.2308%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="62.0607%" y="693" width="0.1597%" height="15" fill="rgb(244,167,17)" fg:x="777" fg:w="2"/><text x="62.3107%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="62.0607%" y="677" width="0.1597%" height="15" fill="rgb(207,181,38)" fg:x="777" fg:w="2"/><text x="62.3107%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="62.1406%" y="661" width="0.0799%" height="15" fill="rgb(211,8,23)" fg:x="778" fg:w="1"/><text x="62.3906%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="62.1406%" y="645" width="0.0799%" height="15" fill="rgb(235,11,44)" fg:x="778" fg:w="1"/><text x="62.3906%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.1406%" y="629" width="0.0799%" height="15" fill="rgb(248,18,52)" fg:x="778" fg:w="1"/><text x="62.3906%" y="639.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="62.2204%" y="725" width="0.0799%" height="15" fill="rgb(208,4,7)" fg:x="779" fg:w="1"/><text x="62.4704%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="62.2204%" y="709" width="0.0799%" height="15" fill="rgb(240,17,39)" fg:x="779" fg:w="1"/><text x="62.4704%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="62.2204%" y="693" width="0.0799%" height="15" fill="rgb(207,170,3)" fg:x="779" fg:w="1"/><text x="62.4704%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="62.2204%" y="677" width="0.0799%" height="15" fill="rgb(236,100,52)" fg:x="779" fg:w="1"/><text x="62.4704%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.2204%" y="661" width="0.0799%" height="15" fill="rgb(246,78,51)" fg:x="779" fg:w="1"/><text x="62.4704%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.2204%" y="645" width="0.0799%" height="15" fill="rgb(211,17,15)" fg:x="779" fg:w="1"/><text x="62.4704%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.2204%" y="629" width="0.0799%" height="15" fill="rgb(209,59,46)" fg:x="779" fg:w="1"/><text x="62.4704%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.2204%" y="613" width="0.0799%" height="15" fill="rgb(210,92,25)" fg:x="779" fg:w="1"/><text x="62.4704%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.2204%" y="597" width="0.0799%" height="15" fill="rgb(238,174,52)" fg:x="779" fg:w="1"/><text x="62.4704%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.2204%" y="581" width="0.0799%" height="15" fill="rgb(230,73,7)" fg:x="779" fg:w="1"/><text x="62.4704%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.2204%" y="565" width="0.0799%" height="15" fill="rgb(243,124,40)" fg:x="779" fg:w="1"/><text x="62.4704%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.2204%" y="549" width="0.0799%" height="15" fill="rgb(244,170,11)" fg:x="779" fg:w="1"/><text x="62.4704%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.2204%" y="533" width="0.0799%" height="15" fill="rgb(207,114,54)" fg:x="779" fg:w="1"/><text x="62.4704%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.2204%" y="517" width="0.0799%" height="15" fill="rgb(205,42,20)" fg:x="779" fg:w="1"/><text x="62.4704%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.2204%" y="501" width="0.0799%" height="15" fill="rgb(230,30,28)" fg:x="779" fg:w="1"/><text x="62.4704%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.2204%" y="485" width="0.0799%" height="15" fill="rgb(205,73,54)" fg:x="779" fg:w="1"/><text x="62.4704%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.3003%" y="629" width="0.0799%" height="15" fill="rgb(254,227,23)" fg:x="780" fg:w="1"/><text x="62.5503%" y="639.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="62.3003%" y="613" width="0.0799%" height="15" fill="rgb(228,202,34)" fg:x="780" fg:w="1"/><text x="62.5503%" y="623.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="62.3003%" y="709" width="0.1597%" height="15" fill="rgb(222,225,37)" fg:x="780" fg:w="2"/><text x="62.5503%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="62.3003%" y="693" width="0.1597%" height="15" fill="rgb(221,14,54)" fg:x="780" fg:w="2"/><text x="62.5503%" y="703.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.3003%" y="677" width="0.1597%" height="15" fill="rgb(254,102,2)" fg:x="780" fg:w="2"/><text x="62.5503%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="62.3003%" y="661" width="0.1597%" height="15" fill="rgb(232,104,17)" fg:x="780" fg:w="2"/><text x="62.5503%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.3003%" y="645" width="0.1597%" height="15" fill="rgb(250,220,14)" fg:x="780" fg:w="2"/><text x="62.5503%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.3802%" y="629" width="0.0799%" height="15" fill="rgb(241,158,9)" fg:x="781" fg:w="1"/><text x="62.6302%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.3802%" y="613" width="0.0799%" height="15" fill="rgb(246,9,43)" fg:x="781" fg:w="1"/><text x="62.6302%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.3802%" y="597" width="0.0799%" height="15" fill="rgb(206,73,33)" fg:x="781" fg:w="1"/><text x="62.6302%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.3802%" y="581" width="0.0799%" height="15" fill="rgb(222,79,8)" fg:x="781" fg:w="1"/><text x="62.6302%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.3802%" y="565" width="0.0799%" height="15" fill="rgb(234,8,54)" fg:x="781" fg:w="1"/><text x="62.6302%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.3802%" y="549" width="0.0799%" height="15" fill="rgb(209,134,38)" fg:x="781" fg:w="1"/><text x="62.6302%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.3802%" y="533" width="0.0799%" height="15" fill="rgb(230,127,29)" fg:x="781" fg:w="1"/><text x="62.6302%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.3802%" y="517" width="0.0799%" height="15" fill="rgb(242,44,41)" fg:x="781" fg:w="1"/><text x="62.6302%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.3802%" y="501" width="0.0799%" height="15" fill="rgb(222,56,43)" fg:x="781" fg:w="1"/><text x="62.6302%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.3802%" y="485" width="0.0799%" height="15" fill="rgb(238,39,47)" fg:x="781" fg:w="1"/><text x="62.6302%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.3802%" y="469" width="0.0799%" height="15" fill="rgb(226,79,43)" fg:x="781" fg:w="1"/><text x="62.6302%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.4601%" y="677" width="0.0799%" height="15" fill="rgb(242,105,53)" fg:x="782" fg:w="1"/><text x="62.7101%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.4601%" y="661" width="0.0799%" height="15" fill="rgb(251,132,46)" fg:x="782" fg:w="1"/><text x="62.7101%" y="671.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.4601%" y="645" width="0.0799%" height="15" fill="rgb(231,77,14)" fg:x="782" fg:w="1"/><text x="62.7101%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.4601%" y="629" width="0.0799%" height="15" fill="rgb(240,135,9)" fg:x="782" fg:w="1"/><text x="62.7101%" y="639.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.4601%" y="613" width="0.0799%" height="15" fill="rgb(248,109,14)" fg:x="782" fg:w="1"/><text x="62.7101%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.4601%" y="597" width="0.0799%" height="15" fill="rgb(227,146,52)" fg:x="782" fg:w="1"/><text x="62.7101%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.4601%" y="581" width="0.0799%" height="15" fill="rgb(232,54,3)" fg:x="782" fg:w="1"/><text x="62.7101%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (5 samples, 0.40%)</title><rect x="62.2204%" y="773" width="0.3994%" height="15" fill="rgb(229,201,43)" fg:x="779" fg:w="5"/><text x="62.4704%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.40%)</title><rect x="62.2204%" y="757" width="0.3994%" height="15" fill="rgb(252,161,33)" fg:x="779" fg:w="5"/><text x="62.4704%" y="767.50"></text></g><g><title>engine::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="62.2204%" y="741" width="0.3994%" height="15" fill="rgb(226,146,40)" fg:x="779" fg:w="5"/><text x="62.4704%" y="751.50"></text></g><g><title>kernel::model::entity::Entity::from_str (4 samples, 0.32%)</title><rect x="62.3003%" y="725" width="0.3195%" height="15" fill="rgb(219,47,25)" fg:x="780" fg:w="4"/><text x="62.5503%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.4601%" y="709" width="0.1597%" height="15" fill="rgb(250,135,13)" fg:x="782" fg:w="2"/><text x="62.7101%" y="719.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.4601%" y="693" width="0.1597%" height="15" fill="rgb(219,229,18)" fg:x="782" fg:w="2"/><text x="62.7101%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.5399%" y="677" width="0.0799%" height="15" fill="rgb(217,152,27)" fg:x="783" fg:w="1"/><text x="62.7899%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.5399%" y="661" width="0.0799%" height="15" fill="rgb(225,71,47)" fg:x="783" fg:w="1"/><text x="62.7899%" y="671.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (9 samples, 0.72%)</title><rect x="62.2204%" y="805" width="0.7188%" height="15" fill="rgb(220,139,14)" fg:x="779" fg:w="9"/><text x="62.4704%" y="815.50"></text></g><g><title>engine::session::Session::new (9 samples, 0.72%)</title><rect x="62.2204%" y="789" width="0.7188%" height="15" fill="rgb(247,54,32)" fg:x="779" fg:w="9"/><text x="62.4704%" y="799.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (4 samples, 0.32%)</title><rect x="62.6198%" y="773" width="0.3195%" height="15" fill="rgb(252,131,39)" fg:x="784" fg:w="4"/><text x="62.8698%" y="783.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="62.6198%" y="757" width="0.3195%" height="15" fill="rgb(210,108,39)" fg:x="784" fg:w="4"/><text x="62.8698%" y="767.50"></text></g><g><title>libloading::os::unix::Library::open (4 samples, 0.32%)</title><rect x="62.6198%" y="741" width="0.3195%" height="15" fill="rgb(205,23,29)" fg:x="784" fg:w="4"/><text x="62.8698%" y="751.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="62.6198%" y="725" width="0.3195%" height="15" fill="rgb(246,139,46)" fg:x="784" fg:w="4"/><text x="62.8698%" y="735.50"></text></g><g><title>_dl_catch_error (4 samples, 0.32%)</title><rect x="62.6198%" y="709" width="0.3195%" height="15" fill="rgb(250,81,26)" fg:x="784" fg:w="4"/><text x="62.8698%" y="719.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="62.6198%" y="693" width="0.3195%" height="15" fill="rgb(214,104,7)" fg:x="784" fg:w="4"/><text x="62.8698%" y="703.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="62.6198%" y="677" width="0.3195%" height="15" fill="rgb(233,189,8)" fg:x="784" fg:w="4"/><text x="62.8698%" y="687.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="62.6198%" y="661" width="0.3195%" height="15" fill="rgb(228,141,17)" fg:x="784" fg:w="4"/><text x="62.8698%" y="671.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="62.9393%" y="709" width="0.0799%" height="15" fill="rgb(247,157,1)" fg:x="788" fg:w="1"/><text x="63.1893%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="62.9393%" y="693" width="0.0799%" height="15" fill="rgb(249,225,5)" fg:x="788" fg:w="1"/><text x="63.1893%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="62.9393%" y="677" width="0.0799%" height="15" fill="rgb(242,55,13)" fg:x="788" fg:w="1"/><text x="63.1893%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="62.9393%" y="661" width="0.0799%" height="15" fill="rgb(230,49,50)" fg:x="788" fg:w="1"/><text x="63.1893%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="62.9393%" y="645" width="0.0799%" height="15" fill="rgb(241,111,38)" fg:x="788" fg:w="1"/><text x="63.1893%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.9393%" y="629" width="0.0799%" height="15" fill="rgb(252,155,4)" fg:x="788" fg:w="1"/><text x="63.1893%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.9393%" y="613" width="0.0799%" height="15" fill="rgb(212,69,32)" fg:x="788" fg:w="1"/><text x="63.1893%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.9393%" y="597" width="0.0799%" height="15" fill="rgb(243,107,47)" fg:x="788" fg:w="1"/><text x="63.1893%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="63.0192%" y="677" width="0.0799%" height="15" fill="rgb(247,130,12)" fg:x="789" fg:w="1"/><text x="63.2692%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="63.0192%" y="661" width="0.0799%" height="15" fill="rgb(233,74,16)" fg:x="789" fg:w="1"/><text x="63.2692%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="63.0192%" y="645" width="0.0799%" height="15" fill="rgb(208,58,18)" fg:x="789" fg:w="1"/><text x="63.2692%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="63.0990%" y="677" width="0.0799%" height="15" fill="rgb(242,225,1)" fg:x="790" fg:w="1"/><text x="63.3490%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="63.1789%" y="645" width="0.0799%" height="15" fill="rgb(249,39,40)" fg:x="791" fg:w="1"/><text x="63.4289%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="63.1789%" y="629" width="0.0799%" height="15" fill="rgb(207,72,44)" fg:x="791" fg:w="1"/><text x="63.4289%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="63.1789%" y="613" width="0.0799%" height="15" fill="rgb(215,193,12)" fg:x="791" fg:w="1"/><text x="63.4289%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="63.1789%" y="597" width="0.0799%" height="15" fill="rgb(248,41,39)" fg:x="791" fg:w="1"/><text x="63.4289%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="63.0192%" y="693" width="0.3195%" height="15" fill="rgb(253,85,4)" fg:x="789" fg:w="4"/><text x="63.2692%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="63.1789%" y="677" width="0.1597%" height="15" fill="rgb(243,70,31)" fg:x="791" fg:w="2"/><text x="63.4289%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="63.1789%" y="661" width="0.1597%" height="15" fill="rgb(253,195,26)" fg:x="791" fg:w="2"/><text x="63.4289%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="63.2588%" y="645" width="0.0799%" height="15" fill="rgb(243,42,11)" fg:x="792" fg:w="1"/><text x="63.5088%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="63.2588%" y="629" width="0.0799%" height="15" fill="rgb(239,66,17)" fg:x="792" fg:w="1"/><text x="63.5088%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="62.9393%" y="725" width="0.4792%" height="15" fill="rgb(217,132,21)" fg:x="788" fg:w="6"/><text x="63.1893%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="63.0192%" y="709" width="0.3994%" height="15" fill="rgb(252,202,21)" fg:x="789" fg:w="5"/><text x="63.2692%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="63.3387%" y="693" width="0.0799%" height="15" fill="rgb(233,98,36)" fg:x="793" fg:w="1"/><text x="63.5887%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="63.3387%" y="677" width="0.0799%" height="15" fill="rgb(216,153,54)" fg:x="793" fg:w="1"/><text x="63.5887%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="63.3387%" y="661" width="0.0799%" height="15" fill="rgb(250,99,7)" fg:x="793" fg:w="1"/><text x="63.5887%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="63.3387%" y="645" width="0.0799%" height="15" fill="rgb(207,56,50)" fg:x="793" fg:w="1"/><text x="63.5887%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.3387%" y="629" width="0.0799%" height="15" fill="rgb(244,61,34)" fg:x="793" fg:w="1"/><text x="63.5887%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.4185%" y="677" width="0.0799%" height="15" fill="rgb(241,50,38)" fg:x="794" fg:w="1"/><text x="63.6685%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.4185%" y="661" width="0.0799%" height="15" fill="rgb(212,166,30)" fg:x="794" fg:w="1"/><text x="63.6685%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.4984%" y="629" width="0.0799%" height="15" fill="rgb(249,127,32)" fg:x="795" fg:w="1"/><text x="63.7484%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="63.4185%" y="725" width="0.2396%" height="15" fill="rgb(209,103,0)" fg:x="794" fg:w="3"/><text x="63.6685%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="63.4185%" y="709" width="0.2396%" height="15" fill="rgb(238,209,51)" fg:x="794" fg:w="3"/><text x="63.6685%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="63.4185%" y="693" width="0.2396%" height="15" fill="rgb(237,56,23)" fg:x="794" fg:w="3"/><text x="63.6685%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="63.4984%" y="677" width="0.1597%" height="15" fill="rgb(215,153,46)" fg:x="795" fg:w="2"/><text x="63.7484%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="63.4984%" y="661" width="0.1597%" height="15" fill="rgb(224,49,31)" fg:x="795" fg:w="2"/><text x="63.7484%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="63.4984%" y="645" width="0.1597%" height="15" fill="rgb(250,18,42)" fg:x="795" fg:w="2"/><text x="63.7484%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.5783%" y="629" width="0.0799%" height="15" fill="rgb(215,176,39)" fg:x="796" fg:w="1"/><text x="63.8283%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.5783%" y="613" width="0.0799%" height="15" fill="rgb(223,77,29)" fg:x="796" fg:w="1"/><text x="63.8283%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.6581%" y="677" width="0.0799%" height="15" fill="rgb(234,94,52)" fg:x="797" fg:w="1"/><text x="63.9081%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.7380%" y="661" width="0.0799%" height="15" fill="rgb(220,154,50)" fg:x="798" fg:w="1"/><text x="63.9880%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.7380%" y="645" width="0.0799%" height="15" fill="rgb(212,11,10)" fg:x="798" fg:w="1"/><text x="63.9880%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.7380%" y="629" width="0.0799%" height="15" fill="rgb(205,166,19)" fg:x="798" fg:w="1"/><text x="63.9880%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.8978%" y="597" width="0.0799%" height="15" fill="rgb(244,198,16)" fg:x="800" fg:w="1"/><text x="64.1478%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.8978%" y="581" width="0.0799%" height="15" fill="rgb(219,69,12)" fg:x="800" fg:w="1"/><text x="64.1478%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.8978%" y="565" width="0.0799%" height="15" fill="rgb(245,30,7)" fg:x="800" fg:w="1"/><text x="64.1478%" y="575.50"></text></g><g><title>engine::session::Session::flush (14 samples, 1.12%)</title><rect x="62.9393%" y="789" width="1.1182%" height="15" fill="rgb(218,221,48)" fg:x="788" fg:w="14"/><text x="63.1893%" y="799.50"></text></g><g><title>engine::session::Session::save_entity_changes (14 samples, 1.12%)</title><rect x="62.9393%" y="773" width="1.1182%" height="15" fill="rgb(216,66,15)" fg:x="788" fg:w="14"/><text x="63.1893%" y="783.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (14 samples, 1.12%)</title><rect x="62.9393%" y="757" width="1.1182%" height="15" fill="rgb(226,122,50)" fg:x="788" fg:w="14"/><text x="63.1893%" y="767.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (14 samples, 1.12%)</title><rect x="62.9393%" y="741" width="1.1182%" height="15" fill="rgb(239,156,16)" fg:x="788" fg:w="14"/><text x="63.1893%" y="751.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="63.6581%" y="725" width="0.3994%" height="15" fill="rgb(224,27,38)" fg:x="797" fg:w="5"/><text x="63.9081%" y="735.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="63.6581%" y="709" width="0.3994%" height="15" fill="rgb(224,39,27)" fg:x="797" fg:w="5"/><text x="63.9081%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="63.6581%" y="693" width="0.3994%" height="15" fill="rgb(215,92,29)" fg:x="797" fg:w="5"/><text x="63.9081%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="63.7380%" y="677" width="0.3195%" height="15" fill="rgb(207,159,16)" fg:x="798" fg:w="4"/><text x="63.9880%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="63.8179%" y="661" width="0.2396%" height="15" fill="rgb(238,163,47)" fg:x="799" fg:w="3"/><text x="64.0679%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="63.8179%" y="645" width="0.2396%" height="15" fill="rgb(219,91,49)" fg:x="799" fg:w="3"/><text x="64.0679%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="63.8179%" y="629" width="0.2396%" height="15" fill="rgb(227,167,31)" fg:x="799" fg:w="3"/><text x="64.0679%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="63.8179%" y="613" width="0.2396%" height="15" fill="rgb(234,80,54)" fg:x="799" fg:w="3"/><text x="64.0679%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="63.9776%" y="597" width="0.0799%" height="15" fill="rgb(212,114,2)" fg:x="801" fg:w="1"/><text x="64.2276%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="64.0575%" y="757" width="0.0799%" height="15" fill="rgb(234,50,24)" fg:x="802" fg:w="1"/><text x="64.3075%" y="767.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="64.0575%" y="741" width="0.0799%" height="15" fill="rgb(221,68,8)" fg:x="802" fg:w="1"/><text x="64.3075%" y="751.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="64.0575%" y="725" width="0.0799%" height="15" fill="rgb(254,180,31)" fg:x="802" fg:w="1"/><text x="64.3075%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="64.0575%" y="709" width="0.0799%" height="15" fill="rgb(247,130,50)" fg:x="802" fg:w="1"/><text x="64.3075%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="64.0575%" y="693" width="0.0799%" height="15" fill="rgb(211,109,4)" fg:x="802" fg:w="1"/><text x="64.3075%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="64.0575%" y="677" width="0.0799%" height="15" fill="rgb(238,50,21)" fg:x="802" fg:w="1"/><text x="64.3075%" y="687.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="64.0575%" y="661" width="0.0799%" height="15" fill="rgb(225,57,45)" fg:x="802" fg:w="1"/><text x="64.3075%" y="671.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="64.0575%" y="645" width="0.0799%" height="15" fill="rgb(209,196,50)" fg:x="802" fg:w="1"/><text x="64.3075%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="64.0575%" y="629" width="0.0799%" height="15" fill="rgb(242,140,13)" fg:x="802" fg:w="1"/><text x="64.3075%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="64.0575%" y="613" width="0.0799%" height="15" fill="rgb(217,111,7)" fg:x="802" fg:w="1"/><text x="64.3075%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.1374%" y="725" width="0.0799%" height="15" fill="rgb(253,193,51)" fg:x="803" fg:w="1"/><text x="64.3874%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.1374%" y="709" width="0.0799%" height="15" fill="rgb(252,70,29)" fg:x="803" fg:w="1"/><text x="64.3874%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="64.1374%" y="693" width="0.0799%" height="15" fill="rgb(232,127,12)" fg:x="803" fg:w="1"/><text x="64.3874%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="64.1374%" y="677" width="0.0799%" height="15" fill="rgb(211,180,21)" fg:x="803" fg:w="1"/><text x="64.3874%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="64.1374%" y="661" width="0.0799%" height="15" fill="rgb(229,72,13)" fg:x="803" fg:w="1"/><text x="64.3874%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.1374%" y="645" width="0.0799%" height="15" fill="rgb(240,211,49)" fg:x="803" fg:w="1"/><text x="64.3874%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.1374%" y="629" width="0.0799%" height="15" fill="rgb(219,149,40)" fg:x="803" fg:w="1"/><text x="64.3874%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="64.1374%" y="613" width="0.0799%" height="15" fill="rgb(210,127,46)" fg:x="803" fg:w="1"/><text x="64.3874%" y="623.50"></text></g><g><title>plugins_core::build::Build::into_entry (4 samples, 0.32%)</title><rect x="64.0575%" y="789" width="0.3195%" height="15" fill="rgb(220,106,7)" fg:x="802" fg:w="4"/><text x="64.3075%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="64.0575%" y="773" width="0.3195%" height="15" fill="rgb(249,31,22)" fg:x="802" fg:w="4"/><text x="64.3075%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="64.1374%" y="757" width="0.2396%" height="15" fill="rgb(253,1,49)" fg:x="803" fg:w="3"/><text x="64.3874%" y="767.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="64.1374%" y="741" width="0.2396%" height="15" fill="rgb(227,144,33)" fg:x="803" fg:w="3"/><text x="64.3874%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="64.2173%" y="725" width="0.1597%" height="15" fill="rgb(249,163,44)" fg:x="804" fg:w="2"/><text x="64.4673%" y="735.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="64.2173%" y="709" width="0.1597%" height="15" fill="rgb(234,15,39)" fg:x="804" fg:w="2"/><text x="64.4673%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="64.2173%" y="693" width="0.1597%" height="15" fill="rgb(207,66,16)" fg:x="804" fg:w="2"/><text x="64.4673%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="64.2971%" y="677" width="0.0799%" height="15" fill="rgb(233,112,24)" fg:x="805" fg:w="1"/><text x="64.5471%" y="687.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="64.3770%" y="725" width="0.0799%" height="15" fill="rgb(230,90,22)" fg:x="806" fg:w="1"/><text x="64.6270%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="64.4569%" y="709" width="0.0799%" height="15" fill="rgb(229,61,13)" fg:x="807" fg:w="1"/><text x="64.7069%" y="719.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="64.4569%" y="693" width="0.0799%" height="15" fill="rgb(225,57,24)" fg:x="807" fg:w="1"/><text x="64.7069%" y="703.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="64.4569%" y="677" width="0.0799%" height="15" fill="rgb(208,169,48)" fg:x="807" fg:w="1"/><text x="64.7069%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="64.4569%" y="661" width="0.0799%" height="15" fill="rgb(244,218,51)" fg:x="807" fg:w="1"/><text x="64.7069%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.4569%" y="645" width="0.0799%" height="15" fill="rgb(214,148,10)" fg:x="807" fg:w="1"/><text x="64.7069%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="64.4569%" y="629" width="0.0799%" height="15" fill="rgb(225,174,27)" fg:x="807" fg:w="1"/><text x="64.7069%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.4569%" y="613" width="0.0799%" height="15" fill="rgb(230,96,26)" fg:x="807" fg:w="1"/><text x="64.7069%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.4569%" y="597" width="0.0799%" height="15" fill="rgb(232,10,30)" fg:x="807" fg:w="1"/><text x="64.7069%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.4569%" y="581" width="0.0799%" height="15" fill="rgb(222,8,50)" fg:x="807" fg:w="1"/><text x="64.7069%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.4569%" y="565" width="0.0799%" height="15" fill="rgb(213,81,27)" fg:x="807" fg:w="1"/><text x="64.7069%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.4569%" y="549" width="0.0799%" height="15" fill="rgb(245,50,10)" fg:x="807" fg:w="1"/><text x="64.7069%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.5367%" y="645" width="0.0799%" height="15" fill="rgb(216,100,18)" fg:x="808" fg:w="1"/><text x="64.7867%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.32%)</title><rect x="64.3770%" y="773" width="0.3195%" height="15" fill="rgb(236,147,54)" fg:x="806" fg:w="4"/><text x="64.6270%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="64.3770%" y="757" width="0.3195%" height="15" fill="rgb(205,143,26)" fg:x="806" fg:w="4"/><text x="64.6270%" y="767.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="64.3770%" y="741" width="0.3195%" height="15" fill="rgb(236,26,9)" fg:x="806" fg:w="4"/><text x="64.6270%" y="751.50"></text></g><g><title>plugins_core::build::Build::leads_to (3 samples, 0.24%)</title><rect x="64.4569%" y="725" width="0.2396%" height="15" fill="rgb(221,165,53)" fg:x="807" fg:w="3"/><text x="64.7069%" y="735.50"></text></g><g><title>plugins_core::tools::leads_to (2 samples, 0.16%)</title><rect x="64.5367%" y="709" width="0.1597%" height="15" fill="rgb(214,110,17)" fg:x="808" fg:w="2"/><text x="64.7867%" y="719.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="64.5367%" y="693" width="0.1597%" height="15" fill="rgb(237,197,12)" fg:x="808" fg:w="2"/><text x="64.7867%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="64.5367%" y="677" width="0.1597%" height="15" fill="rgb(205,84,17)" fg:x="808" fg:w="2"/><text x="64.7867%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="64.5367%" y="661" width="0.1597%" height="15" fill="rgb(237,18,45)" fg:x="808" fg:w="2"/><text x="64.7867%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.6166%" y="645" width="0.0799%" height="15" fill="rgb(221,87,14)" fg:x="809" fg:w="1"/><text x="64.8666%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="64.6166%" y="629" width="0.0799%" height="15" fill="rgb(238,186,15)" fg:x="809" fg:w="1"/><text x="64.8666%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.6166%" y="613" width="0.0799%" height="15" fill="rgb(208,115,11)" fg:x="809" fg:w="1"/><text x="64.8666%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.6166%" y="597" width="0.0799%" height="15" fill="rgb(254,175,0)" fg:x="809" fg:w="1"/><text x="64.8666%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.6166%" y="581" width="0.0799%" height="15" fill="rgb(227,24,42)" fg:x="809" fg:w="1"/><text x="64.8666%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.6166%" y="565" width="0.0799%" height="15" fill="rgb(223,211,37)" fg:x="809" fg:w="1"/><text x="64.8666%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.6166%" y="549" width="0.0799%" height="15" fill="rgb(235,49,27)" fg:x="809" fg:w="1"/><text x="64.8666%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.6166%" y="533" width="0.0799%" height="15" fill="rgb(254,97,51)" fg:x="809" fg:w="1"/><text x="64.8666%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="64.6965%" y="741" width="0.0799%" height="15" fill="rgb(249,51,40)" fg:x="810" fg:w="1"/><text x="64.9465%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.6965%" y="725" width="0.0799%" height="15" fill="rgb(210,128,45)" fg:x="810" fg:w="1"/><text x="64.9465%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="64.6965%" y="709" width="0.0799%" height="15" fill="rgb(224,137,50)" fg:x="810" fg:w="1"/><text x="64.9465%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="64.6965%" y="693" width="0.0799%" height="15" fill="rgb(242,15,9)" fg:x="810" fg:w="1"/><text x="64.9465%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="64.7764%" y="661" width="0.0799%" height="15" fill="rgb(233,187,41)" fg:x="811" fg:w="1"/><text x="65.0264%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="64.7764%" y="645" width="0.0799%" height="15" fill="rgb(227,2,29)" fg:x="811" fg:w="1"/><text x="65.0264%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="64.7764%" y="629" width="0.0799%" height="15" fill="rgb(222,70,3)" fg:x="811" fg:w="1"/><text x="65.0264%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="64.7764%" y="613" width="0.0799%" height="15" fill="rgb(213,11,42)" fg:x="811" fg:w="1"/><text x="65.0264%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="64.8562%" y="629" width="0.0799%" height="15" fill="rgb(225,150,9)" fg:x="812" fg:w="1"/><text x="65.1062%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="64.8562%" y="613" width="0.0799%" height="15" fill="rgb(230,162,45)" fg:x="812" fg:w="1"/><text x="65.1062%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="64.9361%" y="629" width="0.0799%" height="15" fill="rgb(222,14,52)" fg:x="813" fg:w="1"/><text x="65.1861%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="64.9361%" y="613" width="0.0799%" height="15" fill="rgb(254,198,14)" fg:x="813" fg:w="1"/><text x="65.1861%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="64.9361%" y="597" width="0.0799%" height="15" fill="rgb(220,217,30)" fg:x="813" fg:w="1"/><text x="65.1861%" y="607.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="64.7764%" y="709" width="0.3195%" height="15" fill="rgb(215,146,41)" fg:x="811" fg:w="4"/><text x="65.0264%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="64.7764%" y="693" width="0.3195%" height="15" fill="rgb(217,27,36)" fg:x="811" fg:w="4"/><text x="65.0264%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="64.7764%" y="677" width="0.3195%" height="15" fill="rgb(219,218,39)" fg:x="811" fg:w="4"/><text x="65.0264%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="64.8562%" y="661" width="0.2396%" height="15" fill="rgb(219,4,42)" fg:x="812" fg:w="3"/><text x="65.1062%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="64.8562%" y="645" width="0.2396%" height="15" fill="rgb(249,119,36)" fg:x="812" fg:w="3"/><text x="65.1062%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.0160%" y="629" width="0.0799%" height="15" fill="rgb(209,23,33)" fg:x="814" fg:w="1"/><text x="65.2660%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="65.0160%" y="613" width="0.0799%" height="15" fill="rgb(211,10,0)" fg:x="814" fg:w="1"/><text x="65.2660%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.0958%" y="709" width="0.0799%" height="15" fill="rgb(208,99,37)" fg:x="815" fg:w="1"/><text x="65.3458%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="65.0958%" y="693" width="0.0799%" height="15" fill="rgb(213,132,31)" fg:x="815" fg:w="1"/><text x="65.3458%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.0958%" y="677" width="0.0799%" height="15" fill="rgb(243,129,40)" fg:x="815" fg:w="1"/><text x="65.3458%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.0958%" y="661" width="0.0799%" height="15" fill="rgb(210,66,33)" fg:x="815" fg:w="1"/><text x="65.3458%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.0958%" y="645" width="0.0799%" height="15" fill="rgb(209,189,4)" fg:x="815" fg:w="1"/><text x="65.3458%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="65.1757%" y="661" width="0.0799%" height="15" fill="rgb(214,107,37)" fg:x="816" fg:w="1"/><text x="65.4257%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="65.1757%" y="645" width="0.0799%" height="15" fill="rgb(245,88,54)" fg:x="816" fg:w="1"/><text x="65.4257%" y="655.50"></text></g><g><title>engine::session::Session::flush (8 samples, 0.64%)</title><rect x="64.6965%" y="773" width="0.6390%" height="15" fill="rgb(205,146,20)" fg:x="810" fg:w="8"/><text x="64.9465%" y="783.50"></text></g><g><title>engine::session::Session::save_entity_changes (8 samples, 0.64%)</title><rect x="64.6965%" y="757" width="0.6390%" height="15" fill="rgb(220,161,25)" fg:x="810" fg:w="8"/><text x="64.9465%" y="767.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (7 samples, 0.56%)</title><rect x="64.7764%" y="741" width="0.5591%" height="15" fill="rgb(215,152,15)" fg:x="811" fg:w="7"/><text x="65.0264%" y="751.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (7 samples, 0.56%)</title><rect x="64.7764%" y="725" width="0.5591%" height="15" fill="rgb(233,192,44)" fg:x="811" fg:w="7"/><text x="65.0264%" y="735.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="65.1757%" y="709" width="0.1597%" height="15" fill="rgb(240,170,46)" fg:x="816" fg:w="2"/><text x="65.4257%" y="719.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="65.1757%" y="693" width="0.1597%" height="15" fill="rgb(207,104,33)" fg:x="816" fg:w="2"/><text x="65.4257%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="65.1757%" y="677" width="0.1597%" height="15" fill="rgb(219,21,39)" fg:x="816" fg:w="2"/><text x="65.4257%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="65.2556%" y="661" width="0.0799%" height="15" fill="rgb(214,133,29)" fg:x="817" fg:w="1"/><text x="65.5056%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="65.2556%" y="645" width="0.0799%" height="15" fill="rgb(226,93,6)" fg:x="817" fg:w="1"/><text x="65.5056%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="65.2556%" y="629" width="0.0799%" height="15" fill="rgb(252,222,34)" fg:x="817" fg:w="1"/><text x="65.5056%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="65.2556%" y="613" width="0.0799%" height="15" fill="rgb(252,92,48)" fg:x="817" fg:w="1"/><text x="65.5056%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="65.2556%" y="597" width="0.0799%" height="15" fill="rgb(245,223,24)" fg:x="817" fg:w="1"/><text x="65.5056%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.2556%" y="581" width="0.0799%" height="15" fill="rgb(205,176,3)" fg:x="817" fg:w="1"/><text x="65.5056%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.2556%" y="565" width="0.0799%" height="15" fill="rgb(235,151,15)" fg:x="817" fg:w="1"/><text x="65.5056%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.2556%" y="549" width="0.0799%" height="15" fill="rgb(237,209,11)" fg:x="817" fg:w="1"/><text x="65.5056%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="65.3355%" y="709" width="0.0799%" height="15" fill="rgb(243,227,24)" fg:x="818" fg:w="1"/><text x="65.5855%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="65.3355%" y="693" width="0.0799%" height="15" fill="rgb(239,193,16)" fg:x="818" fg:w="1"/><text x="65.5855%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="65.3355%" y="677" width="0.0799%" height="15" fill="rgb(231,27,9)" fg:x="818" fg:w="1"/><text x="65.5855%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.3355%" y="661" width="0.0799%" height="15" fill="rgb(219,169,10)" fg:x="818" fg:w="1"/><text x="65.5855%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.3355%" y="645" width="0.0799%" height="15" fill="rgb(244,229,43)" fg:x="818" fg:w="1"/><text x="65.5855%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.3355%" y="629" width="0.0799%" height="15" fill="rgb(254,38,20)" fg:x="818" fg:w="1"/><text x="65.5855%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.3355%" y="613" width="0.0799%" height="15" fill="rgb(250,47,30)" fg:x="818" fg:w="1"/><text x="65.5855%" y="623.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="65.3355%" y="725" width="0.1597%" height="15" fill="rgb(224,124,36)" fg:x="818" fg:w="2"/><text x="65.5855%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="65.4153%" y="709" width="0.0799%" height="15" fill="rgb(246,68,51)" fg:x="819" fg:w="1"/><text x="65.6653%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="65.4153%" y="693" width="0.0799%" height="15" fill="rgb(253,43,49)" fg:x="819" fg:w="1"/><text x="65.6653%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="65.4153%" y="677" width="0.0799%" height="15" fill="rgb(219,54,36)" fg:x="819" fg:w="1"/><text x="65.6653%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.4153%" y="661" width="0.0799%" height="15" fill="rgb(227,133,34)" fg:x="819" fg:w="1"/><text x="65.6653%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.4153%" y="645" width="0.0799%" height="15" fill="rgb(247,227,15)" fg:x="819" fg:w="1"/><text x="65.6653%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.4153%" y="629" width="0.0799%" height="15" fill="rgb(229,96,14)" fg:x="819" fg:w="1"/><text x="65.6653%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.4153%" y="613" width="0.0799%" height="15" fill="rgb(220,79,17)" fg:x="819" fg:w="1"/><text x="65.6653%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="65.4153%" y="597" width="0.0799%" height="15" fill="rgb(205,131,53)" fg:x="819" fg:w="1"/><text x="65.6653%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.4153%" y="581" width="0.0799%" height="15" fill="rgb(209,50,29)" fg:x="819" fg:w="1"/><text x="65.6653%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.4153%" y="565" width="0.0799%" height="15" fill="rgb(245,86,46)" fg:x="819" fg:w="1"/><text x="65.6653%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.4153%" y="549" width="0.0799%" height="15" fill="rgb(235,66,46)" fg:x="819" fg:w="1"/><text x="65.6653%" y="559.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="65.4153%" y="533" width="0.0799%" height="15" fill="rgb(232,148,31)" fg:x="819" fg:w="1"/><text x="65.6653%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="65.3355%" y="757" width="0.2396%" height="15" fill="rgb(217,149,8)" fg:x="818" fg:w="3"/><text x="65.5855%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="65.3355%" y="741" width="0.2396%" height="15" fill="rgb(209,183,11)" fg:x="818" fg:w="3"/><text x="65.5855%" y="751.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="65.4952%" y="725" width="0.0799%" height="15" fill="rgb(208,55,20)" fg:x="820" fg:w="1"/><text x="65.7452%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.4952%" y="709" width="0.0799%" height="15" fill="rgb(218,39,14)" fg:x="820" fg:w="1"/><text x="65.7452%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.4952%" y="693" width="0.0799%" height="15" fill="rgb(216,169,33)" fg:x="820" fg:w="1"/><text x="65.7452%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="65.4952%" y="677" width="0.0799%" height="15" fill="rgb(233,80,24)" fg:x="820" fg:w="1"/><text x="65.7452%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.4952%" y="661" width="0.0799%" height="15" fill="rgb(213,179,31)" fg:x="820" fg:w="1"/><text x="65.7452%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="65.5751%" y="709" width="0.0799%" height="15" fill="rgb(209,19,5)" fg:x="821" fg:w="1"/><text x="65.8251%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="65.5751%" y="693" width="0.0799%" height="15" fill="rgb(219,18,35)" fg:x="821" fg:w="1"/><text x="65.8251%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="65.5751%" y="677" width="0.0799%" height="15" fill="rgb(209,169,16)" fg:x="821" fg:w="1"/><text x="65.8251%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.5751%" y="661" width="0.0799%" height="15" fill="rgb(245,90,51)" fg:x="821" fg:w="1"/><text x="65.8251%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.5751%" y="645" width="0.0799%" height="15" fill="rgb(220,99,45)" fg:x="821" fg:w="1"/><text x="65.8251%" y="655.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="65.5751%" y="629" width="0.0799%" height="15" fill="rgb(249,89,25)" fg:x="821" fg:w="1"/><text x="65.8251%" y="639.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="65.5751%" y="741" width="0.1597%" height="15" fill="rgb(239,193,0)" fg:x="821" fg:w="2"/><text x="65.8251%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="65.5751%" y="725" width="0.1597%" height="15" fill="rgb(231,126,1)" fg:x="821" fg:w="2"/><text x="65.8251%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="65.6550%" y="709" width="0.0799%" height="15" fill="rgb(243,166,3)" fg:x="822" fg:w="1"/><text x="65.9050%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="65.6550%" y="693" width="0.0799%" height="15" fill="rgb(223,22,34)" fg:x="822" fg:w="1"/><text x="65.9050%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="65.6550%" y="677" width="0.0799%" height="15" fill="rgb(251,52,51)" fg:x="822" fg:w="1"/><text x="65.9050%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.6550%" y="661" width="0.0799%" height="15" fill="rgb(221,165,28)" fg:x="822" fg:w="1"/><text x="65.9050%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.6550%" y="645" width="0.0799%" height="15" fill="rgb(218,121,47)" fg:x="822" fg:w="1"/><text x="65.9050%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.6550%" y="629" width="0.0799%" height="15" fill="rgb(209,120,9)" fg:x="822" fg:w="1"/><text x="65.9050%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.6550%" y="613" width="0.0799%" height="15" fill="rgb(236,68,12)" fg:x="822" fg:w="1"/><text x="65.9050%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="65.6550%" y="597" width="0.0799%" height="15" fill="rgb(225,194,26)" fg:x="822" fg:w="1"/><text x="65.9050%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.6550%" y="581" width="0.0799%" height="15" fill="rgb(231,84,39)" fg:x="822" fg:w="1"/><text x="65.9050%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="65.6550%" y="565" width="0.0799%" height="15" fill="rgb(210,11,45)" fg:x="822" fg:w="1"/><text x="65.9050%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="65.7348%" y="741" width="0.0799%" height="15" fill="rgb(224,54,52)" fg:x="823" fg:w="1"/><text x="65.9848%" y="751.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="65.7348%" y="725" width="0.0799%" height="15" fill="rgb(238,102,14)" fg:x="823" fg:w="1"/><text x="65.9848%" y="735.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="65.8147%" y="741" width="0.0799%" height="15" fill="rgb(243,160,52)" fg:x="824" fg:w="1"/><text x="66.0647%" y="751.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="65.8147%" y="725" width="0.0799%" height="15" fill="rgb(216,114,19)" fg:x="824" fg:w="1"/><text x="66.0647%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="65.8147%" y="709" width="0.0799%" height="15" fill="rgb(244,166,37)" fg:x="824" fg:w="1"/><text x="66.0647%" y="719.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="65.8147%" y="693" width="0.0799%" height="15" fill="rgb(246,29,44)" fg:x="824" fg:w="1"/><text x="66.0647%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="65.8147%" y="677" width="0.0799%" height="15" fill="rgb(215,56,53)" fg:x="824" fg:w="1"/><text x="66.0647%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.8147%" y="661" width="0.0799%" height="15" fill="rgb(217,60,2)" fg:x="824" fg:w="1"/><text x="66.0647%" y="671.50"></text></g><g><title>plugins_core::build::Build::holding (8 samples, 0.64%)</title><rect x="65.3355%" y="773" width="0.6390%" height="15" fill="rgb(207,26,24)" fg:x="818" fg:w="8"/><text x="65.5855%" y="783.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="65.5751%" y="757" width="0.3994%" height="15" fill="rgb(252,210,15)" fg:x="821" fg:w="5"/><text x="65.8251%" y="767.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="65.8946%" y="741" width="0.0799%" height="15" fill="rgb(253,209,26)" fg:x="825" fg:w="1"/><text x="66.1446%" y="751.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="65.8946%" y="725" width="0.0799%" height="15" fill="rgb(238,170,14)" fg:x="825" fg:w="1"/><text x="66.1446%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="65.8946%" y="709" width="0.0799%" height="15" fill="rgb(216,178,15)" fg:x="825" fg:w="1"/><text x="66.1446%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="65.8946%" y="693" width="0.0799%" height="15" fill="rgb(250,197,2)" fg:x="825" fg:w="1"/><text x="66.1446%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="65.8946%" y="677" width="0.0799%" height="15" fill="rgb(212,70,42)" fg:x="825" fg:w="1"/><text x="66.1446%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="65.8946%" y="661" width="0.0799%" height="15" fill="rgb(227,213,9)" fg:x="825" fg:w="1"/><text x="66.1446%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.8946%" y="645" width="0.0799%" height="15" fill="rgb(245,99,25)" fg:x="825" fg:w="1"/><text x="66.1446%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.8946%" y="629" width="0.0799%" height="15" fill="rgb(250,82,29)" fg:x="825" fg:w="1"/><text x="66.1446%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.8946%" y="613" width="0.0799%" height="15" fill="rgb(241,226,54)" fg:x="825" fg:w="1"/><text x="66.1446%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.8946%" y="597" width="0.0799%" height="15" fill="rgb(221,99,41)" fg:x="825" fg:w="1"/><text x="66.1446%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.8946%" y="581" width="0.0799%" height="15" fill="rgb(213,90,21)" fg:x="825" fg:w="1"/><text x="66.1446%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.8946%" y="565" width="0.0799%" height="15" fill="rgb(205,208,24)" fg:x="825" fg:w="1"/><text x="66.1446%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.8946%" y="549" width="0.0799%" height="15" fill="rgb(246,31,12)" fg:x="825" fg:w="1"/><text x="66.1446%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.8946%" y="533" width="0.0799%" height="15" fill="rgb(213,154,6)" fg:x="825" fg:w="1"/><text x="66.1446%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.8946%" y="517" width="0.0799%" height="15" fill="rgb(222,163,29)" fg:x="825" fg:w="1"/><text x="66.1446%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.8946%" y="501" width="0.0799%" height="15" fill="rgb(227,201,8)" fg:x="825" fg:w="1"/><text x="66.1446%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.8946%" y="485" width="0.0799%" height="15" fill="rgb(233,9,32)" fg:x="825" fg:w="1"/><text x="66.1446%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.8946%" y="469" width="0.0799%" height="15" fill="rgb(217,54,24)" fg:x="825" fg:w="1"/><text x="66.1446%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.8946%" y="453" width="0.0799%" height="15" fill="rgb(235,192,0)" fg:x="825" fg:w="1"/><text x="66.1446%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.8946%" y="437" width="0.0799%" height="15" fill="rgb(235,45,9)" fg:x="825" fg:w="1"/><text x="66.1446%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.8946%" y="421" width="0.0799%" height="15" fill="rgb(246,42,40)" fg:x="825" fg:w="1"/><text x="66.1446%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.0543%" y="501" width="0.0799%" height="15" fill="rgb(248,111,24)" fg:x="827" fg:w="1"/><text x="66.3043%" y="511.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="65.9744%" y="773" width="0.2396%" height="15" fill="rgb(249,65,22)" fg:x="826" fg:w="3"/><text x="66.2244%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="65.9744%" y="757" width="0.2396%" height="15" fill="rgb(238,111,51)" fg:x="826" fg:w="3"/><text x="66.2244%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="65.9744%" y="741" width="0.2396%" height="15" fill="rgb(250,118,22)" fg:x="826" fg:w="3"/><text x="66.2244%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="65.9744%" y="725" width="0.2396%" height="15" fill="rgb(234,84,26)" fg:x="826" fg:w="3"/><text x="66.2244%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="65.9744%" y="709" width="0.2396%" height="15" fill="rgb(243,172,12)" fg:x="826" fg:w="3"/><text x="66.2244%" y="719.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="65.9744%" y="693" width="0.2396%" height="15" fill="rgb(236,150,49)" fg:x="826" fg:w="3"/><text x="66.2244%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="65.9744%" y="677" width="0.2396%" height="15" fill="rgb(225,197,26)" fg:x="826" fg:w="3"/><text x="66.2244%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="65.9744%" y="661" width="0.2396%" height="15" fill="rgb(214,17,42)" fg:x="826" fg:w="3"/><text x="66.2244%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="65.9744%" y="645" width="0.2396%" height="15" fill="rgb(224,165,40)" fg:x="826" fg:w="3"/><text x="66.2244%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="65.9744%" y="629" width="0.2396%" height="15" fill="rgb(246,100,4)" fg:x="826" fg:w="3"/><text x="66.2244%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="65.9744%" y="613" width="0.2396%" height="15" fill="rgb(222,103,0)" fg:x="826" fg:w="3"/><text x="66.2244%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="65.9744%" y="597" width="0.2396%" height="15" fill="rgb(227,189,26)" fg:x="826" fg:w="3"/><text x="66.2244%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="65.9744%" y="581" width="0.2396%" height="15" fill="rgb(214,202,17)" fg:x="826" fg:w="3"/><text x="66.2244%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="65.9744%" y="565" width="0.2396%" height="15" fill="rgb(229,111,3)" fg:x="826" fg:w="3"/><text x="66.2244%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="65.9744%" y="549" width="0.2396%" height="15" fill="rgb(229,172,15)" fg:x="826" fg:w="3"/><text x="66.2244%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="66.0543%" y="533" width="0.1597%" height="15" fill="rgb(230,224,35)" fg:x="827" fg:w="2"/><text x="66.3043%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="66.0543%" y="517" width="0.1597%" height="15" fill="rgb(251,141,6)" fg:x="827" fg:w="2"/><text x="66.3043%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="66.1342%" y="501" width="0.0799%" height="15" fill="rgb(225,208,6)" fg:x="828" fg:w="1"/><text x="66.3842%" y="511.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="66.1342%" y="485" width="0.0799%" height="15" fill="rgb(246,181,16)" fg:x="828" fg:w="1"/><text x="66.3842%" y="495.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="66.2141%" y="773" width="0.0799%" height="15" fill="rgb(227,129,36)" fg:x="829" fg:w="1"/><text x="66.4641%" y="783.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="66.2141%" y="757" width="0.0799%" height="15" fill="rgb(248,117,24)" fg:x="829" fg:w="1"/><text x="66.4641%" y="767.50"></text></g><g><title>kernel::model::entity::Entity::new_blank (1 samples, 0.08%)</title><rect x="66.2141%" y="741" width="0.0799%" height="15" fill="rgb(214,185,35)" fg:x="829" fg:w="1"/><text x="66.4641%" y="751.50"></text></g><g><title>kernel::model::entity::Entity::new_with_key (1 samples, 0.08%)</title><rect x="66.2141%" y="725" width="0.0799%" height="15" fill="rgb(236,150,34)" fg:x="829" fg:w="1"/><text x="66.4641%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="66.2939%" y="757" width="0.0799%" height="15" fill="rgb(243,228,27)" fg:x="830" fg:w="1"/><text x="66.5439%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="66.2939%" y="741" width="0.0799%" height="15" fill="rgb(245,77,44)" fg:x="830" fg:w="1"/><text x="66.5439%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="66.2939%" y="725" width="0.0799%" height="15" fill="rgb(235,214,42)" fg:x="830" fg:w="1"/><text x="66.5439%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="66.2939%" y="709" width="0.0799%" height="15" fill="rgb(221,74,3)" fg:x="830" fg:w="1"/><text x="66.5439%" y="719.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="66.2939%" y="693" width="0.0799%" height="15" fill="rgb(206,121,29)" fg:x="830" fg:w="1"/><text x="66.5439%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="66.2939%" y="677" width="0.0799%" height="15" fill="rgb(249,131,53)" fg:x="830" fg:w="1"/><text x="66.5439%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.2939%" y="661" width="0.0799%" height="15" fill="rgb(236,170,29)" fg:x="830" fg:w="1"/><text x="66.5439%" y="671.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="66.3738%" y="741" width="0.0799%" height="15" fill="rgb(247,96,15)" fg:x="831" fg:w="1"/><text x="66.6238%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="66.3738%" y="725" width="0.0799%" height="15" fill="rgb(211,210,7)" fg:x="831" fg:w="1"/><text x="66.6238%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="66.3738%" y="709" width="0.0799%" height="15" fill="rgb(240,88,50)" fg:x="831" fg:w="1"/><text x="66.6238%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="66.3738%" y="693" width="0.0799%" height="15" fill="rgb(209,229,26)" fg:x="831" fg:w="1"/><text x="66.6238%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="66.3738%" y="677" width="0.0799%" height="15" fill="rgb(210,68,23)" fg:x="831" fg:w="1"/><text x="66.6238%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.3738%" y="661" width="0.0799%" height="15" fill="rgb(229,180,13)" fg:x="831" fg:w="1"/><text x="66.6238%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.3738%" y="645" width="0.0799%" height="15" fill="rgb(236,53,44)" fg:x="831" fg:w="1"/><text x="66.6238%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.3738%" y="629" width="0.0799%" height="15" fill="rgb(244,214,29)" fg:x="831" fg:w="1"/><text x="66.6238%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.3738%" y="613" width="0.0799%" height="15" fill="rgb(220,75,29)" fg:x="831" fg:w="1"/><text x="66.6238%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="66.3738%" y="597" width="0.0799%" height="15" fill="rgb(214,183,37)" fg:x="831" fg:w="1"/><text x="66.6238%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.3738%" y="581" width="0.0799%" height="15" fill="rgb(239,117,29)" fg:x="831" fg:w="1"/><text x="66.6238%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.3738%" y="565" width="0.0799%" height="15" fill="rgb(237,171,35)" fg:x="831" fg:w="1"/><text x="66.6238%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.3738%" y="549" width="0.0799%" height="15" fill="rgb(229,178,53)" fg:x="831" fg:w="1"/><text x="66.6238%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.3738%" y="533" width="0.0799%" height="15" fill="rgb(210,102,19)" fg:x="831" fg:w="1"/><text x="66.6238%" y="543.50"></text></g><g><title>plugins_core::build::Build::occupying (3 samples, 0.24%)</title><rect x="66.2939%" y="773" width="0.2396%" height="15" fill="rgb(235,127,22)" fg:x="830" fg:w="3"/><text x="66.5439%" y="783.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="66.3738%" y="757" width="0.1597%" height="15" fill="rgb(244,31,31)" fg:x="831" fg:w="2"/><text x="66.6238%" y="767.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="66.4537%" y="741" width="0.0799%" height="15" fill="rgb(231,43,21)" fg:x="832" fg:w="1"/><text x="66.7037%" y="751.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="66.4537%" y="725" width="0.0799%" height="15" fill="rgb(217,131,35)" fg:x="832" fg:w="1"/><text x="66.7037%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="66.4537%" y="709" width="0.0799%" height="15" fill="rgb(221,149,4)" fg:x="832" fg:w="1"/><text x="66.7037%" y="719.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="66.4537%" y="693" width="0.0799%" height="15" fill="rgb(232,170,28)" fg:x="832" fg:w="1"/><text x="66.7037%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="66.4537%" y="677" width="0.0799%" height="15" fill="rgb(238,56,10)" fg:x="832" fg:w="1"/><text x="66.7037%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.4537%" y="661" width="0.0799%" height="15" fill="rgb(235,196,14)" fg:x="832" fg:w="1"/><text x="66.7037%" y="671.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (28 samples, 2.24%)</title><rect x="64.3770%" y="789" width="2.2364%" height="15" fill="rgb(216,45,48)" fg:x="806" fg:w="28"/><text x="64.6270%" y="799.50">p..</text></g><g><title>plugins_core::build::Build::with_username (1 samples, 0.08%)</title><rect x="66.5335%" y="773" width="0.0799%" height="15" fill="rgb(238,213,17)" fg:x="833" fg:w="1"/><text x="66.7835%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="66.5335%" y="757" width="0.0799%" height="15" fill="rgb(212,13,2)" fg:x="833" fg:w="1"/><text x="66.7835%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="66.5335%" y="741" width="0.0799%" height="15" fill="rgb(240,114,20)" fg:x="833" fg:w="1"/><text x="66.7835%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="66.5335%" y="725" width="0.0799%" height="15" fill="rgb(228,41,40)" fg:x="833" fg:w="1"/><text x="66.7835%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="66.5335%" y="709" width="0.0799%" height="15" fill="rgb(244,132,35)" fg:x="833" fg:w="1"/><text x="66.7835%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="66.5335%" y="693" width="0.0799%" height="15" fill="rgb(253,189,4)" fg:x="833" fg:w="1"/><text x="66.7835%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="66.5335%" y="677" width="0.0799%" height="15" fill="rgb(224,37,19)" fg:x="833" fg:w="1"/><text x="66.7835%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.5335%" y="661" width="0.0799%" height="15" fill="rgb(235,223,18)" fg:x="833" fg:w="1"/><text x="66.7835%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.5335%" y="645" width="0.0799%" height="15" fill="rgb(235,163,25)" fg:x="833" fg:w="1"/><text x="66.7835%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.5335%" y="629" width="0.0799%" height="15" fill="rgb(217,145,28)" fg:x="833" fg:w="1"/><text x="66.7835%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.5335%" y="613" width="0.0799%" height="15" fill="rgb(223,223,32)" fg:x="833" fg:w="1"/><text x="66.7835%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="66.5335%" y="597" width="0.0799%" height="15" fill="rgb(227,189,39)" fg:x="833" fg:w="1"/><text x="66.7835%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.5335%" y="581" width="0.0799%" height="15" fill="rgb(248,10,22)" fg:x="833" fg:w="1"/><text x="66.7835%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.5335%" y="565" width="0.0799%" height="15" fill="rgb(248,46,39)" fg:x="833" fg:w="1"/><text x="66.7835%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.5335%" y="549" width="0.0799%" height="15" fill="rgb(248,113,48)" fg:x="833" fg:w="1"/><text x="66.7835%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="66.6134%" y="741" width="0.0799%" height="15" fill="rgb(245,16,25)" fg:x="834" fg:w="1"/><text x="66.8634%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="66.6933%" y="709" width="0.0799%" height="15" fill="rgb(249,152,16)" fg:x="835" fg:w="1"/><text x="66.9433%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="66.6933%" y="693" width="0.0799%" height="15" fill="rgb(250,16,1)" fg:x="835" fg:w="1"/><text x="66.9433%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="66.6933%" y="677" width="0.0799%" height="15" fill="rgb(249,138,3)" fg:x="835" fg:w="1"/><text x="66.9433%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.6933%" y="661" width="0.0799%" height="15" fill="rgb(227,71,41)" fg:x="835" fg:w="1"/><text x="66.9433%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.6933%" y="645" width="0.0799%" height="15" fill="rgb(209,184,23)" fg:x="835" fg:w="1"/><text x="66.9433%" y="655.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (49 samples, 3.91%)</title><rect x="62.9393%" y="805" width="3.9137%" height="15" fill="rgb(223,215,31)" fg:x="788" fg:w="49"/><text x="63.1893%" y="815.50">&lt;tes..</text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="66.6134%" y="789" width="0.2396%" height="15" fill="rgb(210,146,28)" fg:x="834" fg:w="3"/><text x="66.8634%" y="799.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="66.6134%" y="773" width="0.2396%" height="15" fill="rgb(209,183,41)" fg:x="834" fg:w="3"/><text x="66.8634%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="66.6134%" y="757" width="0.2396%" height="15" fill="rgb(209,224,45)" fg:x="834" fg:w="3"/><text x="66.8634%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="66.6933%" y="741" width="0.1597%" height="15" fill="rgb(224,209,51)" fg:x="835" fg:w="2"/><text x="66.9433%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="66.6933%" y="725" width="0.1597%" height="15" fill="rgb(223,17,39)" fg:x="835" fg:w="2"/><text x="66.9433%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="66.7732%" y="709" width="0.0799%" height="15" fill="rgb(234,204,37)" fg:x="836" fg:w="1"/><text x="67.0232%" y="719.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="66.7732%" y="693" width="0.0799%" height="15" fill="rgb(236,120,5)" fg:x="836" fg:w="1"/><text x="67.0232%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="66.7732%" y="677" width="0.0799%" height="15" fill="rgb(248,97,27)" fg:x="836" fg:w="1"/><text x="67.0232%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.7732%" y="661" width="0.0799%" height="15" fill="rgb(240,66,17)" fg:x="836" fg:w="1"/><text x="67.0232%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="66.7732%" y="645" width="0.0799%" height="15" fill="rgb(210,79,3)" fg:x="836" fg:w="1"/><text x="67.0232%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.7732%" y="629" width="0.0799%" height="15" fill="rgb(214,176,27)" fg:x="836" fg:w="1"/><text x="67.0232%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.7732%" y="613" width="0.0799%" height="15" fill="rgb(235,185,3)" fg:x="836" fg:w="1"/><text x="67.0232%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="66.8530%" y="725" width="0.1597%" height="15" fill="rgb(227,24,12)" fg:x="837" fg:w="2"/><text x="67.1030%" y="735.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="66.8530%" y="709" width="0.1597%" height="15" fill="rgb(252,169,48)" fg:x="837" fg:w="2"/><text x="67.1030%" y="719.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="66.8530%" y="693" width="0.1597%" height="15" fill="rgb(212,65,1)" fg:x="837" fg:w="2"/><text x="67.1030%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="66.8530%" y="677" width="0.1597%" height="15" fill="rgb(242,39,24)" fg:x="837" fg:w="2"/><text x="67.1030%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.9329%" y="661" width="0.0799%" height="15" fill="rgb(249,32,23)" fg:x="838" fg:w="1"/><text x="67.1829%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="67.0128%" y="709" width="0.1597%" height="15" fill="rgb(251,195,23)" fg:x="839" fg:w="2"/><text x="67.2628%" y="719.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="67.0128%" y="693" width="0.1597%" height="15" fill="rgb(236,174,8)" fg:x="839" fg:w="2"/><text x="67.2628%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.0927%" y="677" width="0.0799%" height="15" fill="rgb(220,197,8)" fg:x="840" fg:w="1"/><text x="67.3427%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.0927%" y="661" width="0.0799%" height="15" fill="rgb(240,108,37)" fg:x="840" fg:w="1"/><text x="67.3427%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.0927%" y="645" width="0.0799%" height="15" fill="rgb(232,176,24)" fg:x="840" fg:w="1"/><text x="67.3427%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.0927%" y="629" width="0.0799%" height="15" fill="rgb(243,35,29)" fg:x="840" fg:w="1"/><text x="67.3427%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.0927%" y="613" width="0.0799%" height="15" fill="rgb(210,37,18)" fg:x="840" fg:w="1"/><text x="67.3427%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="67.1725%" y="693" width="0.0799%" height="15" fill="rgb(224,184,40)" fg:x="841" fg:w="1"/><text x="67.4225%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.1725%" y="677" width="0.0799%" height="15" fill="rgb(236,39,29)" fg:x="841" fg:w="1"/><text x="67.4225%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.1725%" y="661" width="0.0799%" height="15" fill="rgb(232,48,39)" fg:x="841" fg:w="1"/><text x="67.4225%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.1725%" y="645" width="0.0799%" height="15" fill="rgb(236,34,42)" fg:x="841" fg:w="1"/><text x="67.4225%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="67.2524%" y="677" width="0.0799%" height="15" fill="rgb(243,106,37)" fg:x="842" fg:w="1"/><text x="67.5024%" y="687.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="66.8530%" y="741" width="0.5591%" height="15" fill="rgb(218,96,6)" fg:x="837" fg:w="7"/><text x="67.1030%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="67.0128%" y="725" width="0.3994%" height="15" fill="rgb(235,130,12)" fg:x="839" fg:w="5"/><text x="67.2628%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="67.1725%" y="709" width="0.2396%" height="15" fill="rgb(231,95,0)" fg:x="841" fg:w="3"/><text x="67.4225%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="67.2524%" y="693" width="0.1597%" height="15" fill="rgb(228,12,23)" fg:x="842" fg:w="2"/><text x="67.5024%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.3323%" y="677" width="0.0799%" height="15" fill="rgb(216,12,1)" fg:x="843" fg:w="1"/><text x="67.5823%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.3323%" y="661" width="0.0799%" height="15" fill="rgb(219,59,3)" fg:x="843" fg:w="1"/><text x="67.5823%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.3323%" y="645" width="0.0799%" height="15" fill="rgb(215,208,46)" fg:x="843" fg:w="1"/><text x="67.5823%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.3323%" y="629" width="0.0799%" height="15" fill="rgb(254,224,29)" fg:x="843" fg:w="1"/><text x="67.5823%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.3323%" y="613" width="0.0799%" height="15" fill="rgb(232,14,29)" fg:x="843" fg:w="1"/><text x="67.5823%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.3323%" y="597" width="0.0799%" height="15" fill="rgb(208,45,52)" fg:x="843" fg:w="1"/><text x="67.5823%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.3323%" y="581" width="0.0799%" height="15" fill="rgb(234,191,28)" fg:x="843" fg:w="1"/><text x="67.5823%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.3323%" y="565" width="0.0799%" height="15" fill="rgb(244,67,43)" fg:x="843" fg:w="1"/><text x="67.5823%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.3323%" y="549" width="0.0799%" height="15" fill="rgb(236,189,24)" fg:x="843" fg:w="1"/><text x="67.5823%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="67.4121%" y="725" width="0.0799%" height="15" fill="rgb(239,214,33)" fg:x="844" fg:w="1"/><text x="67.6621%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.4121%" y="709" width="0.0799%" height="15" fill="rgb(226,176,41)" fg:x="844" fg:w="1"/><text x="67.6621%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="67.4121%" y="693" width="0.0799%" height="15" fill="rgb(248,47,8)" fg:x="844" fg:w="1"/><text x="67.6621%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.4121%" y="677" width="0.0799%" height="15" fill="rgb(218,81,44)" fg:x="844" fg:w="1"/><text x="67.6621%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.4121%" y="661" width="0.0799%" height="15" fill="rgb(213,98,6)" fg:x="844" fg:w="1"/><text x="67.6621%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.4121%" y="645" width="0.0799%" height="15" fill="rgb(222,85,22)" fg:x="844" fg:w="1"/><text x="67.6621%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.4121%" y="629" width="0.0799%" height="15" fill="rgb(239,46,39)" fg:x="844" fg:w="1"/><text x="67.6621%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4920%" y="677" width="0.0799%" height="15" fill="rgb(237,12,29)" fg:x="845" fg:w="1"/><text x="67.7420%" y="687.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4920%" y="661" width="0.0799%" height="15" fill="rgb(214,77,8)" fg:x="845" fg:w="1"/><text x="67.7420%" y="671.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="67.4920%" y="645" width="0.0799%" height="15" fill="rgb(217,168,37)" fg:x="845" fg:w="1"/><text x="67.7420%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="67.5719%" y="661" width="0.0799%" height="15" fill="rgb(221,217,23)" fg:x="846" fg:w="1"/><text x="67.8219%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="67.7316%" y="645" width="0.1597%" height="15" fill="rgb(243,229,36)" fg:x="848" fg:w="2"/><text x="67.9816%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="67.7316%" y="629" width="0.1597%" height="15" fill="rgb(251,163,40)" fg:x="848" fg:w="2"/><text x="67.9816%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="67.8115%" y="613" width="0.0799%" height="15" fill="rgb(237,222,12)" fg:x="849" fg:w="1"/><text x="68.0615%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.9712%" y="613" width="0.0799%" height="15" fill="rgb(248,132,6)" fg:x="851" fg:w="1"/><text x="68.2212%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="68.0511%" y="613" width="0.0799%" height="15" fill="rgb(227,167,50)" fg:x="852" fg:w="1"/><text x="68.3011%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="68.0511%" y="597" width="0.0799%" height="15" fill="rgb(242,84,37)" fg:x="852" fg:w="1"/><text x="68.3011%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.88%)</title><rect x="67.4920%" y="725" width="0.8786%" height="15" fill="rgb(212,4,50)" fg:x="845" fg:w="11"/><text x="67.7420%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.88%)</title><rect x="67.4920%" y="709" width="0.8786%" height="15" fill="rgb(230,228,32)" fg:x="845" fg:w="11"/><text x="67.7420%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_map (11 samples, 0.88%)</title><rect x="67.4920%" y="693" width="0.8786%" height="15" fill="rgb(248,217,23)" fg:x="845" fg:w="11"/><text x="67.7420%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="67.5719%" y="677" width="0.7987%" height="15" fill="rgb(238,197,32)" fg:x="846" fg:w="10"/><text x="67.8219%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.72%)</title><rect x="67.6518%" y="661" width="0.7188%" height="15" fill="rgb(236,106,1)" fg:x="847" fg:w="9"/><text x="67.9018%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="67.8914%" y="645" width="0.4792%" height="15" fill="rgb(219,228,13)" fg:x="850" fg:w="6"/><text x="68.1414%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="67.9712%" y="629" width="0.3994%" height="15" fill="rgb(238,30,35)" fg:x="851" fg:w="5"/><text x="68.2212%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="68.1310%" y="613" width="0.2396%" height="15" fill="rgb(236,70,23)" fg:x="853" fg:w="3"/><text x="68.3810%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="68.1310%" y="597" width="0.2396%" height="15" fill="rgb(249,104,48)" fg:x="853" fg:w="3"/><text x="68.3810%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="68.1310%" y="581" width="0.2396%" height="15" fill="rgb(254,117,50)" fg:x="853" fg:w="3"/><text x="68.3810%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="68.1310%" y="565" width="0.2396%" height="15" fill="rgb(223,152,4)" fg:x="853" fg:w="3"/><text x="68.3810%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="68.1310%" y="549" width="0.2396%" height="15" fill="rgb(245,6,2)" fg:x="853" fg:w="3"/><text x="68.3810%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="68.1310%" y="533" width="0.2396%" height="15" fill="rgb(249,150,24)" fg:x="853" fg:w="3"/><text x="68.3810%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="68.2109%" y="517" width="0.1597%" height="15" fill="rgb(228,185,42)" fg:x="854" fg:w="2"/><text x="68.4609%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="68.2109%" y="501" width="0.1597%" height="15" fill="rgb(226,39,33)" fg:x="854" fg:w="2"/><text x="68.4609%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="68.2109%" y="485" width="0.1597%" height="15" fill="rgb(221,166,19)" fg:x="854" fg:w="2"/><text x="68.4609%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.5304%" y="501" width="0.0799%" height="15" fill="rgb(209,109,2)" fg:x="858" fg:w="1"/><text x="68.7804%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.5304%" y="485" width="0.0799%" height="15" fill="rgb(252,216,26)" fg:x="858" fg:w="1"/><text x="68.7804%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.5304%" y="469" width="0.0799%" height="15" fill="rgb(227,173,36)" fg:x="858" fg:w="1"/><text x="68.7804%" y="479.50"></text></g><g><title>engine::session::Session::close (23 samples, 1.84%)</title><rect x="66.8530%" y="805" width="1.8371%" height="15" fill="rgb(209,90,7)" fg:x="837" fg:w="23"/><text x="67.1030%" y="815.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (23 samples, 1.84%)</title><rect x="66.8530%" y="789" width="1.8371%" height="15" fill="rgb(250,194,11)" fg:x="837" fg:w="23"/><text x="67.1030%" y="799.50">e..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (23 samples, 1.84%)</title><rect x="66.8530%" y="773" width="1.8371%" height="15" fill="rgb(220,72,50)" fg:x="837" fg:w="23"/><text x="67.1030%" y="783.50">e..</text></g><g><title>engine::session::SavesEntities::check_for_changes (23 samples, 1.84%)</title><rect x="66.8530%" y="757" width="1.8371%" height="15" fill="rgb(222,106,48)" fg:x="837" fg:w="23"/><text x="67.1030%" y="767.50">e..</text></g><g><title>kernel::model::any_entity_changes (16 samples, 1.28%)</title><rect x="67.4121%" y="741" width="1.2780%" height="15" fill="rgb(216,220,45)" fg:x="844" fg:w="16"/><text x="67.6621%" y="751.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="68.3706%" y="725" width="0.3195%" height="15" fill="rgb(234,112,18)" fg:x="856" fg:w="4"/><text x="68.6206%" y="735.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="68.3706%" y="709" width="0.3195%" height="15" fill="rgb(206,179,9)" fg:x="856" fg:w="4"/><text x="68.6206%" y="719.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="68.3706%" y="693" width="0.3195%" height="15" fill="rgb(215,115,40)" fg:x="856" fg:w="4"/><text x="68.6206%" y="703.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="68.3706%" y="677" width="0.3195%" height="15" fill="rgb(222,69,34)" fg:x="856" fg:w="4"/><text x="68.6206%" y="687.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="68.3706%" y="661" width="0.3195%" height="15" fill="rgb(209,161,10)" fg:x="856" fg:w="4"/><text x="68.6206%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="68.3706%" y="645" width="0.3195%" height="15" fill="rgb(217,6,38)" fg:x="856" fg:w="4"/><text x="68.6206%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="68.4505%" y="629" width="0.2396%" height="15" fill="rgb(229,229,48)" fg:x="857" fg:w="3"/><text x="68.7005%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="68.4505%" y="613" width="0.2396%" height="15" fill="rgb(225,21,28)" fg:x="857" fg:w="3"/><text x="68.7005%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="68.4505%" y="597" width="0.2396%" height="15" fill="rgb(206,33,13)" fg:x="857" fg:w="3"/><text x="68.7005%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="68.4505%" y="581" width="0.2396%" height="15" fill="rgb(242,178,17)" fg:x="857" fg:w="3"/><text x="68.7005%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="68.4505%" y="565" width="0.2396%" height="15" fill="rgb(220,162,5)" fg:x="857" fg:w="3"/><text x="68.7005%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="68.4505%" y="549" width="0.2396%" height="15" fill="rgb(210,33,43)" fg:x="857" fg:w="3"/><text x="68.7005%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="68.4505%" y="533" width="0.2396%" height="15" fill="rgb(216,116,54)" fg:x="857" fg:w="3"/><text x="68.7005%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="68.4505%" y="517" width="0.2396%" height="15" fill="rgb(249,92,24)" fg:x="857" fg:w="3"/><text x="68.7005%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.6102%" y="501" width="0.0799%" height="15" fill="rgb(231,189,14)" fg:x="859" fg:w="1"/><text x="68.8602%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.6102%" y="485" width="0.0799%" height="15" fill="rgb(230,8,41)" fg:x="859" fg:w="1"/><text x="68.8602%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.6102%" y="469" width="0.0799%" height="15" fill="rgb(249,7,27)" fg:x="859" fg:w="1"/><text x="68.8602%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.6901%" y="725" width="0.0799%" height="15" fill="rgb(232,86,5)" fg:x="860" fg:w="1"/><text x="68.9401%" y="735.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.6901%" y="709" width="0.0799%" height="15" fill="rgb(224,175,18)" fg:x="860" fg:w="1"/><text x="68.9401%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.7700%" y="581" width="0.0799%" height="15" fill="rgb(220,129,12)" fg:x="861" fg:w="1"/><text x="69.0200%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.7700%" y="565" width="0.0799%" height="15" fill="rgb(210,19,36)" fg:x="861" fg:w="1"/><text x="69.0200%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.7700%" y="549" width="0.0799%" height="15" fill="rgb(219,96,14)" fg:x="861" fg:w="1"/><text x="69.0200%" y="559.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (2 samples, 0.16%)</title><rect x="68.7700%" y="629" width="0.1597%" height="15" fill="rgb(249,106,1)" fg:x="861" fg:w="2"/><text x="69.0200%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::modified (2 samples, 0.16%)</title><rect x="68.7700%" y="613" width="0.1597%" height="15" fill="rgb(249,155,20)" fg:x="861" fg:w="2"/><text x="69.0200%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.7700%" y="597" width="0.1597%" height="15" fill="rgb(244,168,9)" fg:x="861" fg:w="2"/><text x="69.0200%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.8498%" y="581" width="0.0799%" height="15" fill="rgb(216,23,50)" fg:x="862" fg:w="1"/><text x="69.0998%" y="591.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="68.9297%" y="517" width="0.0799%" height="15" fill="rgb(224,219,20)" fg:x="863" fg:w="1"/><text x="69.1797%" y="527.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (2 samples, 0.16%)</title><rect x="68.9297%" y="629" width="0.1597%" height="15" fill="rgb(222,156,15)" fg:x="863" fg:w="2"/><text x="69.1797%" y="639.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (2 samples, 0.16%)</title><rect x="68.9297%" y="613" width="0.1597%" height="15" fill="rgb(231,97,17)" fg:x="863" fg:w="2"/><text x="69.1797%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="68.9297%" y="597" width="0.1597%" height="15" fill="rgb(218,70,48)" fg:x="863" fg:w="2"/><text x="69.1797%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="68.9297%" y="581" width="0.1597%" height="15" fill="rgb(212,196,52)" fg:x="863" fg:w="2"/><text x="69.1797%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="68.9297%" y="565" width="0.1597%" height="15" fill="rgb(243,203,18)" fg:x="863" fg:w="2"/><text x="69.1797%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="68.9297%" y="549" width="0.1597%" height="15" fill="rgb(252,125,41)" fg:x="863" fg:w="2"/><text x="69.1797%" y="559.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="68.9297%" y="533" width="0.1597%" height="15" fill="rgb(223,180,33)" fg:x="863" fg:w="2"/><text x="69.1797%" y="543.50"></text></g><g><title>kernel::model::entity::Entity::from_str (1 samples, 0.08%)</title><rect x="69.0096%" y="517" width="0.0799%" height="15" fill="rgb(254,159,46)" fg:x="864" fg:w="1"/><text x="69.2596%" y="527.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="69.0096%" y="501" width="0.0799%" height="15" fill="rgb(254,38,10)" fg:x="864" fg:w="1"/><text x="69.2596%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.0096%" y="485" width="0.0799%" height="15" fill="rgb(208,217,32)" fg:x="864" fg:w="1"/><text x="69.2596%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.0096%" y="469" width="0.0799%" height="15" fill="rgb(221,120,13)" fg:x="864" fg:w="1"/><text x="69.2596%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.0096%" y="453" width="0.0799%" height="15" fill="rgb(246,54,52)" fg:x="864" fg:w="1"/><text x="69.2596%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.0096%" y="437" width="0.0799%" height="15" fill="rgb(242,34,25)" fg:x="864" fg:w="1"/><text x="69.2596%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.0096%" y="421" width="0.0799%" height="15" fill="rgb(247,209,9)" fg:x="864" fg:w="1"/><text x="69.2596%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.0096%" y="405" width="0.0799%" height="15" fill="rgb(228,71,26)" fg:x="864" fg:w="1"/><text x="69.2596%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.0096%" y="389" width="0.0799%" height="15" fill="rgb(222,145,49)" fg:x="864" fg:w="1"/><text x="69.2596%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.0096%" y="373" width="0.0799%" height="15" fill="rgb(218,121,17)" fg:x="864" fg:w="1"/><text x="69.2596%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.0096%" y="357" width="0.0799%" height="15" fill="rgb(244,50,7)" fg:x="864" fg:w="1"/><text x="69.2596%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.0096%" y="341" width="0.0799%" height="15" fill="rgb(246,229,37)" fg:x="864" fg:w="1"/><text x="69.2596%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.0096%" y="325" width="0.0799%" height="15" fill="rgb(225,18,5)" fg:x="864" fg:w="1"/><text x="69.2596%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.1693%" y="533" width="0.0799%" height="15" fill="rgb(213,204,8)" fg:x="866" fg:w="1"/><text x="69.4193%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.1693%" y="517" width="0.0799%" height="15" fill="rgb(238,103,6)" fg:x="866" fg:w="1"/><text x="69.4193%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="69.1693%" y="565" width="0.2396%" height="15" fill="rgb(222,25,35)" fg:x="866" fg:w="3"/><text x="69.4193%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="69.1693%" y="549" width="0.2396%" height="15" fill="rgb(213,203,35)" fg:x="866" fg:w="3"/><text x="69.4193%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="69.2492%" y="533" width="0.1597%" height="15" fill="rgb(221,79,53)" fg:x="867" fg:w="2"/><text x="69.4992%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (5 samples, 0.40%)</title><rect x="69.1693%" y="597" width="0.3994%" height="15" fill="rgb(243,200,35)" fg:x="866" fg:w="5"/><text x="69.4193%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="69.1693%" y="581" width="0.3994%" height="15" fill="rgb(248,60,25)" fg:x="866" fg:w="5"/><text x="69.4193%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="69.4089%" y="565" width="0.1597%" height="15" fill="rgb(227,53,46)" fg:x="869" fg:w="2"/><text x="69.6589%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.6486%" y="565" width="0.0799%" height="15" fill="rgb(216,120,32)" fg:x="872" fg:w="1"/><text x="69.8986%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.8083%" y="517" width="0.0799%" height="15" fill="rgb(220,134,1)" fg:x="874" fg:w="1"/><text x="70.0583%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="69.8882%" y="485" width="0.1597%" height="15" fill="rgb(237,168,5)" fg:x="875" fg:w="2"/><text x="70.1382%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (1 samples, 0.08%)</title><rect x="69.9681%" y="469" width="0.0799%" height="15" fill="rgb(231,100,33)" fg:x="876" fg:w="1"/><text x="70.2181%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="69.9681%" y="453" width="0.0799%" height="15" fill="rgb(236,177,47)" fg:x="876" fg:w="1"/><text x="70.2181%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="69.9681%" y="437" width="0.0799%" height="15" fill="rgb(235,7,49)" fg:x="876" fg:w="1"/><text x="70.2181%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="70.0479%" y="373" width="0.0799%" height="15" fill="rgb(232,119,22)" fg:x="877" fg:w="1"/><text x="70.2979%" y="383.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="70.0479%" y="357" width="0.0799%" height="15" fill="rgb(254,73,53)" fg:x="877" fg:w="1"/><text x="70.2979%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.0479%" y="341" width="0.0799%" height="15" fill="rgb(251,35,20)" fg:x="877" fg:w="1"/><text x="70.2979%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.0479%" y="325" width="0.0799%" height="15" fill="rgb(241,119,20)" fg:x="877" fg:w="1"/><text x="70.2979%" y="335.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.0479%" y="309" width="0.0799%" height="15" fill="rgb(207,102,14)" fg:x="877" fg:w="1"/><text x="70.2979%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.0479%" y="293" width="0.0799%" height="15" fill="rgb(248,201,50)" fg:x="877" fg:w="1"/><text x="70.2979%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="70.0479%" y="277" width="0.0799%" height="15" fill="rgb(222,185,44)" fg:x="877" fg:w="1"/><text x="70.2979%" y="287.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="70.0479%" y="421" width="0.1597%" height="15" fill="rgb(218,107,18)" fg:x="877" fg:w="2"/><text x="70.2979%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="70.0479%" y="405" width="0.1597%" height="15" fill="rgb(237,177,39)" fg:x="877" fg:w="2"/><text x="70.2979%" y="415.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="70.0479%" y="389" width="0.1597%" height="15" fill="rgb(246,69,6)" fg:x="877" fg:w="2"/><text x="70.2979%" y="399.50"></text></g><g><title>kernel::model::entity::Entity::from_str (1 samples, 0.08%)</title><rect x="70.1278%" y="373" width="0.0799%" height="15" fill="rgb(234,208,37)" fg:x="878" fg:w="1"/><text x="70.3778%" y="383.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="70.1278%" y="357" width="0.0799%" height="15" fill="rgb(225,4,6)" fg:x="878" fg:w="1"/><text x="70.3778%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.1278%" y="341" width="0.0799%" height="15" fill="rgb(233,45,0)" fg:x="878" fg:w="1"/><text x="70.3778%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.1278%" y="325" width="0.0799%" height="15" fill="rgb(226,136,5)" fg:x="878" fg:w="1"/><text x="70.3778%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.1278%" y="309" width="0.0799%" height="15" fill="rgb(211,91,47)" fg:x="878" fg:w="1"/><text x="70.3778%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1278%" y="293" width="0.0799%" height="15" fill="rgb(242,88,51)" fg:x="878" fg:w="1"/><text x="70.3778%" y="303.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="69.8882%" y="501" width="0.3994%" height="15" fill="rgb(230,91,28)" fg:x="875" fg:w="5"/><text x="70.1382%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="70.0479%" y="485" width="0.2396%" height="15" fill="rgb(254,186,29)" fg:x="877" fg:w="3"/><text x="70.2979%" y="495.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (3 samples, 0.24%)</title><rect x="70.0479%" y="469" width="0.2396%" height="15" fill="rgb(238,6,4)" fg:x="877" fg:w="3"/><text x="70.2979%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (3 samples, 0.24%)</title><rect x="70.0479%" y="453" width="0.2396%" height="15" fill="rgb(221,151,16)" fg:x="877" fg:w="3"/><text x="70.2979%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="70.0479%" y="437" width="0.2396%" height="15" fill="rgb(251,143,52)" fg:x="877" fg:w="3"/><text x="70.2979%" y="447.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2077%" y="421" width="0.0799%" height="15" fill="rgb(206,90,15)" fg:x="879" fg:w="1"/><text x="70.4577%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2077%" y="405" width="0.0799%" height="15" fill="rgb(218,35,8)" fg:x="879" fg:w="1"/><text x="70.4577%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2077%" y="389" width="0.0799%" height="15" fill="rgb(239,215,6)" fg:x="879" fg:w="1"/><text x="70.4577%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2077%" y="373" width="0.0799%" height="15" fill="rgb(245,116,39)" fg:x="879" fg:w="1"/><text x="70.4577%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2077%" y="357" width="0.0799%" height="15" fill="rgb(242,65,28)" fg:x="879" fg:w="1"/><text x="70.4577%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.2077%" y="341" width="0.0799%" height="15" fill="rgb(252,132,53)" fg:x="879" fg:w="1"/><text x="70.4577%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.2077%" y="325" width="0.0799%" height="15" fill="rgb(224,159,50)" fg:x="879" fg:w="1"/><text x="70.4577%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.2077%" y="309" width="0.0799%" height="15" fill="rgb(224,93,4)" fg:x="879" fg:w="1"/><text x="70.4577%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.2077%" y="293" width="0.0799%" height="15" fill="rgb(208,81,34)" fg:x="879" fg:w="1"/><text x="70.4577%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.2077%" y="277" width="0.0799%" height="15" fill="rgb(233,92,54)" fg:x="879" fg:w="1"/><text x="70.4577%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.2077%" y="261" width="0.0799%" height="15" fill="rgb(237,21,14)" fg:x="879" fg:w="1"/><text x="70.4577%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.2077%" y="245" width="0.0799%" height="15" fill="rgb(249,128,51)" fg:x="879" fg:w="1"/><text x="70.4577%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.2077%" y="229" width="0.0799%" height="15" fill="rgb(223,129,24)" fg:x="879" fg:w="1"/><text x="70.4577%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.2077%" y="213" width="0.0799%" height="15" fill="rgb(231,168,25)" fg:x="879" fg:w="1"/><text x="70.4577%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2077%" y="197" width="0.0799%" height="15" fill="rgb(224,39,20)" fg:x="879" fg:w="1"/><text x="70.4577%" y="207.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (7 samples, 0.56%)</title><rect x="69.8882%" y="517" width="0.5591%" height="15" fill="rgb(225,152,53)" fg:x="875" fg:w="7"/><text x="70.1382%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="70.2875%" y="501" width="0.1597%" height="15" fill="rgb(252,17,24)" fg:x="880" fg:w="2"/><text x="70.5375%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="70.2875%" y="485" width="0.1597%" height="15" fill="rgb(250,114,30)" fg:x="880" fg:w="2"/><text x="70.5375%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.3674%" y="469" width="0.0799%" height="15" fill="rgb(229,5,4)" fg:x="881" fg:w="1"/><text x="70.6174%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3674%" y="453" width="0.0799%" height="15" fill="rgb(225,176,49)" fg:x="881" fg:w="1"/><text x="70.6174%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="70.3674%" y="437" width="0.0799%" height="15" fill="rgb(224,221,49)" fg:x="881" fg:w="1"/><text x="70.6174%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="70.3674%" y="421" width="0.0799%" height="15" fill="rgb(253,169,27)" fg:x="881" fg:w="1"/><text x="70.6174%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="70.3674%" y="405" width="0.0799%" height="15" fill="rgb(211,206,16)" fg:x="881" fg:w="1"/><text x="70.6174%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.3674%" y="389" width="0.0799%" height="15" fill="rgb(244,87,35)" fg:x="881" fg:w="1"/><text x="70.6174%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3674%" y="373" width="0.0799%" height="15" fill="rgb(246,28,10)" fg:x="881" fg:w="1"/><text x="70.6174%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="70.6070%" y="373" width="0.1597%" height="15" fill="rgb(229,12,44)" fg:x="884" fg:w="2"/><text x="70.8570%" y="383.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="70.6070%" y="357" width="0.1597%" height="15" fill="rgb(210,145,37)" fg:x="884" fg:w="2"/><text x="70.8570%" y="367.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="70.6070%" y="341" width="0.1597%" height="15" fill="rgb(227,112,52)" fg:x="884" fg:w="2"/><text x="70.8570%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.6070%" y="325" width="0.1597%" height="15" fill="rgb(238,155,34)" fg:x="884" fg:w="2"/><text x="70.8570%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.6070%" y="309" width="0.1597%" height="15" fill="rgb(239,226,36)" fg:x="884" fg:w="2"/><text x="70.8570%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.6869%" y="293" width="0.0799%" height="15" fill="rgb(230,16,23)" fg:x="885" fg:w="1"/><text x="70.9369%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.6869%" y="277" width="0.0799%" height="15" fill="rgb(236,171,36)" fg:x="885" fg:w="1"/><text x="70.9369%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.6869%" y="261" width="0.0799%" height="15" fill="rgb(221,22,14)" fg:x="885" fg:w="1"/><text x="70.9369%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.6869%" y="245" width="0.0799%" height="15" fill="rgb(242,43,11)" fg:x="885" fg:w="1"/><text x="70.9369%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.8466%" y="309" width="0.0799%" height="15" fill="rgb(232,69,23)" fg:x="887" fg:w="1"/><text x="71.0966%" y="319.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="70.8466%" y="293" width="0.0799%" height="15" fill="rgb(216,180,54)" fg:x="887" fg:w="1"/><text x="71.0966%" y="303.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="70.7668%" y="357" width="0.2396%" height="15" fill="rgb(216,5,24)" fg:x="886" fg:w="3"/><text x="71.0168%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.8466%" y="341" width="0.1597%" height="15" fill="rgb(225,89,9)" fg:x="887" fg:w="2"/><text x="71.0966%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.8466%" y="325" width="0.1597%" height="15" fill="rgb(243,75,33)" fg:x="887" fg:w="2"/><text x="71.0966%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.9265%" y="309" width="0.0799%" height="15" fill="rgb(247,141,45)" fg:x="888" fg:w="1"/><text x="71.1765%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.0064%" y="325" width="0.0799%" height="15" fill="rgb(232,177,36)" fg:x="889" fg:w="1"/><text x="71.2564%" y="335.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (8 samples, 0.64%)</title><rect x="70.5272%" y="469" width="0.6390%" height="15" fill="rgb(219,125,36)" fg:x="883" fg:w="8"/><text x="70.7772%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (8 samples, 0.64%)</title><rect x="70.5272%" y="453" width="0.6390%" height="15" fill="rgb(227,94,9)" fg:x="883" fg:w="8"/><text x="70.7772%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="70.6070%" y="437" width="0.5591%" height="15" fill="rgb(240,34,52)" fg:x="884" fg:w="7"/><text x="70.8570%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (7 samples, 0.56%)</title><rect x="70.6070%" y="421" width="0.5591%" height="15" fill="rgb(216,45,12)" fg:x="884" fg:w="7"/><text x="70.8570%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (7 samples, 0.56%)</title><rect x="70.6070%" y="405" width="0.5591%" height="15" fill="rgb(246,21,19)" fg:x="884" fg:w="7"/><text x="70.8570%" y="415.50"></text></g><g><title>engine::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="70.6070%" y="389" width="0.5591%" height="15" fill="rgb(213,98,42)" fg:x="884" fg:w="7"/><text x="70.8570%" y="399.50"></text></g><g><title>kernel::model::entity::Entity::from_str (5 samples, 0.40%)</title><rect x="70.7668%" y="373" width="0.3994%" height="15" fill="rgb(250,136,47)" fg:x="886" fg:w="5"/><text x="71.0168%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.0064%" y="357" width="0.1597%" height="15" fill="rgb(251,124,27)" fg:x="889" fg:w="2"/><text x="71.2564%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.0064%" y="341" width="0.1597%" height="15" fill="rgb(229,180,14)" fg:x="889" fg:w="2"/><text x="71.2564%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.0863%" y="325" width="0.0799%" height="15" fill="rgb(245,216,25)" fg:x="890" fg:w="1"/><text x="71.3363%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.0863%" y="309" width="0.0799%" height="15" fill="rgb(251,43,5)" fg:x="890" fg:w="1"/><text x="71.3363%" y="319.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.0863%" y="293" width="0.0799%" height="15" fill="rgb(250,128,24)" fg:x="890" fg:w="1"/><text x="71.3363%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.0863%" y="277" width="0.0799%" height="15" fill="rgb(217,117,27)" fg:x="890" fg:w="1"/><text x="71.3363%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0863%" y="261" width="0.0799%" height="15" fill="rgb(245,147,4)" fg:x="890" fg:w="1"/><text x="71.3363%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="71.0863%" y="245" width="0.0799%" height="15" fill="rgb(242,201,35)" fg:x="890" fg:w="1"/><text x="71.3363%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.0863%" y="229" width="0.0799%" height="15" fill="rgb(218,181,1)" fg:x="890" fg:w="1"/><text x="71.3363%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0863%" y="213" width="0.0799%" height="15" fill="rgb(222,6,29)" fg:x="890" fg:w="1"/><text x="71.3363%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.0863%" y="197" width="0.0799%" height="15" fill="rgb(208,186,3)" fg:x="890" fg:w="1"/><text x="71.3363%" y="207.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.0863%" y="181" width="0.0799%" height="15" fill="rgb(216,36,26)" fg:x="890" fg:w="1"/><text x="71.3363%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.0863%" y="165" width="0.0799%" height="15" fill="rgb(248,201,23)" fg:x="890" fg:w="1"/><text x="71.3363%" y="175.50"></text></g><g><title>plugins_core::tools::get_contained_keys (10 samples, 0.80%)</title><rect x="70.4473%" y="517" width="0.7987%" height="15" fill="rgb(251,170,31)" fg:x="882" fg:w="10"/><text x="70.6973%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (10 samples, 0.80%)</title><rect x="70.4473%" y="501" width="0.7987%" height="15" fill="rgb(207,110,25)" fg:x="882" fg:w="10"/><text x="70.6973%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (9 samples, 0.72%)</title><rect x="70.5272%" y="485" width="0.7188%" height="15" fill="rgb(250,54,15)" fg:x="883" fg:w="9"/><text x="70.7772%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1661%" y="469" width="0.0799%" height="15" fill="rgb(227,68,33)" fg:x="891" fg:w="1"/><text x="71.4161%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1661%" y="453" width="0.0799%" height="15" fill="rgb(238,34,41)" fg:x="891" fg:w="1"/><text x="71.4161%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="71.1661%" y="437" width="0.0799%" height="15" fill="rgb(220,11,15)" fg:x="891" fg:w="1"/><text x="71.4161%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="71.1661%" y="421" width="0.0799%" height="15" fill="rgb(246,111,35)" fg:x="891" fg:w="1"/><text x="71.4161%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="71.1661%" y="405" width="0.0799%" height="15" fill="rgb(209,88,53)" fg:x="891" fg:w="1"/><text x="71.4161%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1661%" y="389" width="0.0799%" height="15" fill="rgb(231,185,47)" fg:x="891" fg:w="1"/><text x="71.4161%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1661%" y="373" width="0.0799%" height="15" fill="rgb(233,154,1)" fg:x="891" fg:w="1"/><text x="71.4161%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.3259%" y="437" width="0.0799%" height="15" fill="rgb(225,15,46)" fg:x="893" fg:w="1"/><text x="71.5759%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (22 samples, 1.76%)</title><rect x="69.7284%" y="549" width="1.7572%" height="15" fill="rgb(211,135,41)" fg:x="873" fg:w="22"/><text x="69.9784%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (22 samples, 1.76%)</title><rect x="69.7284%" y="533" width="1.7572%" height="15" fill="rgb(208,54,0)" fg:x="873" fg:w="22"/><text x="69.9784%" y="543.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (3 samples, 0.24%)</title><rect x="71.2460%" y="517" width="0.2396%" height="15" fill="rgb(244,136,14)" fg:x="892" fg:w="3"/><text x="71.4960%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="71.2460%" y="501" width="0.2396%" height="15" fill="rgb(241,56,14)" fg:x="892" fg:w="3"/><text x="71.4960%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="71.2460%" y="485" width="0.2396%" height="15" fill="rgb(205,80,24)" fg:x="892" fg:w="3"/><text x="71.4960%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="71.2460%" y="469" width="0.2396%" height="15" fill="rgb(220,57,4)" fg:x="892" fg:w="3"/><text x="71.4960%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="71.2460%" y="453" width="0.2396%" height="15" fill="rgb(226,193,50)" fg:x="892" fg:w="3"/><text x="71.4960%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.4058%" y="437" width="0.0799%" height="15" fill="rgb(231,168,22)" fg:x="894" fg:w="1"/><text x="71.6558%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4058%" y="421" width="0.0799%" height="15" fill="rgb(254,215,14)" fg:x="894" fg:w="1"/><text x="71.6558%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="71.4058%" y="405" width="0.0799%" height="15" fill="rgb(211,115,16)" fg:x="894" fg:w="1"/><text x="71.6558%" y="415.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="71.4058%" y="389" width="0.0799%" height="15" fill="rgb(236,210,16)" fg:x="894" fg:w="1"/><text x="71.6558%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4856%" y="501" width="0.0799%" height="15" fill="rgb(221,94,12)" fg:x="895" fg:w="1"/><text x="71.7356%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.5655%" y="389" width="0.0799%" height="15" fill="rgb(235,218,49)" fg:x="896" fg:w="1"/><text x="71.8155%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="71.5655%" y="501" width="0.1597%" height="15" fill="rgb(217,114,14)" fg:x="896" fg:w="2"/><text x="71.8155%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="71.5655%" y="485" width="0.1597%" height="15" fill="rgb(216,145,22)" fg:x="896" fg:w="2"/><text x="71.8155%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="71.5655%" y="469" width="0.1597%" height="15" fill="rgb(217,112,39)" fg:x="896" fg:w="2"/><text x="71.8155%" y="479.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="71.5655%" y="453" width="0.1597%" height="15" fill="rgb(225,85,32)" fg:x="896" fg:w="2"/><text x="71.8155%" y="463.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="71.5655%" y="437" width="0.1597%" height="15" fill="rgb(245,209,47)" fg:x="896" fg:w="2"/><text x="71.8155%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="71.5655%" y="421" width="0.1597%" height="15" fill="rgb(218,220,15)" fg:x="896" fg:w="2"/><text x="71.8155%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="71.5655%" y="405" width="0.1597%" height="15" fill="rgb(222,202,31)" fg:x="896" fg:w="2"/><text x="71.8155%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="71.6454%" y="389" width="0.0799%" height="15" fill="rgb(243,203,4)" fg:x="897" fg:w="1"/><text x="71.8954%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="71.6454%" y="373" width="0.0799%" height="15" fill="rgb(237,92,17)" fg:x="897" fg:w="1"/><text x="71.8954%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="71.6454%" y="357" width="0.0799%" height="15" fill="rgb(231,119,7)" fg:x="897" fg:w="1"/><text x="71.8954%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.6454%" y="341" width="0.0799%" height="15" fill="rgb(237,82,41)" fg:x="897" fg:w="1"/><text x="71.8954%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.6454%" y="325" width="0.0799%" height="15" fill="rgb(226,81,48)" fg:x="897" fg:w="1"/><text x="71.8954%" y="335.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="71.6454%" y="309" width="0.0799%" height="15" fill="rgb(234,70,51)" fg:x="897" fg:w="1"/><text x="71.8954%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="71.6454%" y="293" width="0.0799%" height="15" fill="rgb(251,86,4)" fg:x="897" fg:w="1"/><text x="71.8954%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="71.6454%" y="277" width="0.0799%" height="15" fill="rgb(244,144,28)" fg:x="897" fg:w="1"/><text x="71.8954%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="71.6454%" y="261" width="0.0799%" height="15" fill="rgb(232,161,39)" fg:x="897" fg:w="1"/><text x="71.8954%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="71.6454%" y="245" width="0.0799%" height="15" fill="rgb(247,34,51)" fg:x="897" fg:w="1"/><text x="71.8954%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="71.6454%" y="229" width="0.0799%" height="15" fill="rgb(225,132,2)" fg:x="897" fg:w="1"/><text x="71.8954%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.6454%" y="213" width="0.0799%" height="15" fill="rgb(209,159,44)" fg:x="897" fg:w="1"/><text x="71.8954%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="71.6454%" y="197" width="0.0799%" height="15" fill="rgb(251,214,1)" fg:x="897" fg:w="1"/><text x="71.8954%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.6454%" y="181" width="0.0799%" height="15" fill="rgb(247,84,47)" fg:x="897" fg:w="1"/><text x="71.8954%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="71.6454%" y="165" width="0.0799%" height="15" fill="rgb(240,111,43)" fg:x="897" fg:w="1"/><text x="71.8954%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="71.6454%" y="149" width="0.0799%" height="15" fill="rgb(215,214,35)" fg:x="897" fg:w="1"/><text x="71.8954%" y="159.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="71.6454%" y="133" width="0.0799%" height="15" fill="rgb(248,207,23)" fg:x="897" fg:w="1"/><text x="71.8954%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.6454%" y="117" width="0.0799%" height="15" fill="rgb(214,186,4)" fg:x="897" fg:w="1"/><text x="71.8954%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="71.8051%" y="405" width="0.0799%" height="15" fill="rgb(220,133,22)" fg:x="899" fg:w="1"/><text x="72.0551%" y="415.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="71.8051%" y="389" width="0.0799%" height="15" fill="rgb(239,134,19)" fg:x="899" fg:w="1"/><text x="72.0551%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.8051%" y="373" width="0.0799%" height="15" fill="rgb(250,140,9)" fg:x="899" fg:w="1"/><text x="72.0551%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="71.8051%" y="357" width="0.0799%" height="15" fill="rgb(225,59,14)" fg:x="899" fg:w="1"/><text x="72.0551%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="71.8051%" y="341" width="0.0799%" height="15" fill="rgb(214,152,51)" fg:x="899" fg:w="1"/><text x="72.0551%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.8051%" y="325" width="0.0799%" height="15" fill="rgb(251,227,43)" fg:x="899" fg:w="1"/><text x="72.0551%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="71.8051%" y="309" width="0.0799%" height="15" fill="rgb(241,96,17)" fg:x="899" fg:w="1"/><text x="72.0551%" y="319.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="71.8051%" y="293" width="0.0799%" height="15" fill="rgb(234,198,43)" fg:x="899" fg:w="1"/><text x="72.0551%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.8051%" y="277" width="0.0799%" height="15" fill="rgb(220,108,29)" fg:x="899" fg:w="1"/><text x="72.0551%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="71.8051%" y="261" width="0.0799%" height="15" fill="rgb(226,163,33)" fg:x="899" fg:w="1"/><text x="72.0551%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="71.8051%" y="245" width="0.0799%" height="15" fill="rgb(205,194,45)" fg:x="899" fg:w="1"/><text x="72.0551%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.8051%" y="229" width="0.0799%" height="15" fill="rgb(206,143,44)" fg:x="899" fg:w="1"/><text x="72.0551%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="71.8051%" y="213" width="0.0799%" height="15" fill="rgb(236,136,36)" fg:x="899" fg:w="1"/><text x="72.0551%" y="223.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="71.8051%" y="197" width="0.0799%" height="15" fill="rgb(249,172,42)" fg:x="899" fg:w="1"/><text x="72.0551%" y="207.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="71.7252%" y="485" width="0.2396%" height="15" fill="rgb(216,139,23)" fg:x="898" fg:w="3"/><text x="71.9752%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="71.7252%" y="469" width="0.2396%" height="15" fill="rgb(207,166,20)" fg:x="898" fg:w="3"/><text x="71.9752%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="71.7252%" y="453" width="0.2396%" height="15" fill="rgb(210,209,22)" fg:x="898" fg:w="3"/><text x="71.9752%" y="463.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="71.8051%" y="437" width="0.1597%" height="15" fill="rgb(232,118,20)" fg:x="899" fg:w="2"/><text x="72.0551%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="71.8051%" y="421" width="0.1597%" height="15" fill="rgb(238,113,42)" fg:x="899" fg:w="2"/><text x="72.0551%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="71.8850%" y="405" width="0.0799%" height="15" fill="rgb(231,42,5)" fg:x="900" fg:w="1"/><text x="72.1350%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.8850%" y="389" width="0.0799%" height="15" fill="rgb(243,166,24)" fg:x="900" fg:w="1"/><text x="72.1350%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="72.0447%" y="437" width="0.1597%" height="15" fill="rgb(237,226,12)" fg:x="902" fg:w="2"/><text x="72.2947%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.2045%" y="437" width="0.0799%" height="15" fill="rgb(229,133,24)" fg:x="904" fg:w="1"/><text x="72.4545%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="72.2843%" y="389" width="0.0799%" height="15" fill="rgb(238,33,43)" fg:x="905" fg:w="1"/><text x="72.5343%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.2843%" y="373" width="0.0799%" height="15" fill="rgb(227,59,38)" fg:x="905" fg:w="1"/><text x="72.5343%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.2843%" y="357" width="0.0799%" height="15" fill="rgb(230,97,0)" fg:x="905" fg:w="1"/><text x="72.5343%" y="367.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.2843%" y="341" width="0.0799%" height="15" fill="rgb(250,173,50)" fg:x="905" fg:w="1"/><text x="72.5343%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.2843%" y="325" width="0.0799%" height="15" fill="rgb(240,15,50)" fg:x="905" fg:w="1"/><text x="72.5343%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="72.3642%" y="309" width="0.0799%" height="15" fill="rgb(221,93,22)" fg:x="906" fg:w="1"/><text x="72.6142%" y="319.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (36 samples, 2.88%)</title><rect x="69.6486%" y="581" width="2.8754%" height="15" fill="rgb(245,180,53)" fg:x="872" fg:w="36"/><text x="69.8986%" y="591.50">&lt;p..</text></g><g><title>core::iter::adapters::try_process (35 samples, 2.80%)</title><rect x="69.7284%" y="565" width="2.7955%" height="15" fill="rgb(231,88,51)" fg:x="873" fg:w="35"/><text x="69.9784%" y="575.50">co..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (13 samples, 1.04%)</title><rect x="71.4856%" y="549" width="1.0383%" height="15" fill="rgb(240,58,21)" fg:x="895" fg:w="13"/><text x="71.7356%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13 samples, 1.04%)</title><rect x="71.4856%" y="533" width="1.0383%" height="15" fill="rgb(237,21,10)" fg:x="895" fg:w="13"/><text x="71.7356%" y="543.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (13 samples, 1.04%)</title><rect x="71.4856%" y="517" width="1.0383%" height="15" fill="rgb(218,43,11)" fg:x="895" fg:w="13"/><text x="71.7356%" y="527.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (10 samples, 0.80%)</title><rect x="71.7252%" y="501" width="0.7987%" height="15" fill="rgb(218,221,29)" fg:x="898" fg:w="10"/><text x="71.9752%" y="511.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (7 samples, 0.56%)</title><rect x="71.9649%" y="485" width="0.5591%" height="15" fill="rgb(214,118,42)" fg:x="901" fg:w="7"/><text x="72.2149%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="71.9649%" y="469" width="0.5591%" height="15" fill="rgb(251,200,26)" fg:x="901" fg:w="7"/><text x="72.2149%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="71.9649%" y="453" width="0.5591%" height="15" fill="rgb(237,101,39)" fg:x="901" fg:w="7"/><text x="72.2149%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="72.2843%" y="437" width="0.2396%" height="15" fill="rgb(251,117,11)" fg:x="905" fg:w="3"/><text x="72.5343%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="72.2843%" y="421" width="0.2396%" height="15" fill="rgb(216,223,23)" fg:x="905" fg:w="3"/><text x="72.5343%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="72.2843%" y="405" width="0.2396%" height="15" fill="rgb(251,54,12)" fg:x="905" fg:w="3"/><text x="72.5343%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="72.3642%" y="389" width="0.1597%" height="15" fill="rgb(254,176,54)" fg:x="906" fg:w="2"/><text x="72.6142%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="72.3642%" y="373" width="0.1597%" height="15" fill="rgb(210,32,8)" fg:x="906" fg:w="2"/><text x="72.6142%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="72.3642%" y="357" width="0.1597%" height="15" fill="rgb(235,52,38)" fg:x="906" fg:w="2"/><text x="72.6142%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="72.3642%" y="341" width="0.1597%" height="15" fill="rgb(231,4,44)" fg:x="906" fg:w="2"/><text x="72.6142%" y="351.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="72.3642%" y="325" width="0.1597%" height="15" fill="rgb(249,2,32)" fg:x="906" fg:w="2"/><text x="72.6142%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.4441%" y="309" width="0.0799%" height="15" fill="rgb(224,65,26)" fg:x="907" fg:w="1"/><text x="72.6941%" y="319.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.4441%" y="293" width="0.0799%" height="15" fill="rgb(250,73,40)" fg:x="907" fg:w="1"/><text x="72.6941%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.4441%" y="277" width="0.0799%" height="15" fill="rgb(253,177,16)" fg:x="907" fg:w="1"/><text x="72.6941%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.4441%" y="261" width="0.0799%" height="15" fill="rgb(217,32,34)" fg:x="907" fg:w="1"/><text x="72.6941%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.4441%" y="245" width="0.0799%" height="15" fill="rgb(212,7,10)" fg:x="907" fg:w="1"/><text x="72.6941%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.4441%" y="229" width="0.0799%" height="15" fill="rgb(245,89,8)" fg:x="907" fg:w="1"/><text x="72.6941%" y="239.50"></text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (44 samples, 3.51%)</title><rect x="69.0895%" y="629" width="3.5144%" height="15" fill="rgb(237,16,53)" fg:x="865" fg:w="44"/><text x="69.3395%" y="639.50">ker..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (43 samples, 3.43%)</title><rect x="69.1693%" y="613" width="3.4345%" height="15" fill="rgb(250,204,30)" fg:x="866" fg:w="43"/><text x="69.4193%" y="623.50">&lt;pl..</text></g><g><title>plugins_rpc::querying::have_surroundings (38 samples, 3.04%)</title><rect x="69.5687%" y="597" width="3.0351%" height="15" fill="rgb(208,77,27)" fg:x="871" fg:w="38"/><text x="69.8187%" y="607.50">plu..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (1 samples, 0.08%)</title><rect x="72.5240%" y="581" width="0.0799%" height="15" fill="rgb(250,204,28)" fg:x="908" fg:w="1"/><text x="72.7740%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.7636%" y="357" width="0.0799%" height="15" fill="rgb(244,63,21)" fg:x="911" fg:w="1"/><text x="73.0136%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.7636%" y="341" width="0.0799%" height="15" fill="rgb(236,85,44)" fg:x="911" fg:w="1"/><text x="73.0136%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7636%" y="325" width="0.0799%" height="15" fill="rgb(215,98,4)" fg:x="911" fg:w="1"/><text x="73.0136%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="72.7636%" y="453" width="0.1597%" height="15" fill="rgb(235,38,11)" fg:x="911" fg:w="2"/><text x="73.0136%" y="463.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="72.7636%" y="437" width="0.1597%" height="15" fill="rgb(254,186,25)" fg:x="911" fg:w="2"/><text x="73.0136%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="72.7636%" y="421" width="0.1597%" height="15" fill="rgb(225,55,31)" fg:x="911" fg:w="2"/><text x="73.0136%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.7636%" y="405" width="0.1597%" height="15" fill="rgb(211,15,21)" fg:x="911" fg:w="2"/><text x="73.0136%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.7636%" y="389" width="0.1597%" height="15" fill="rgb(215,187,41)" fg:x="911" fg:w="2"/><text x="73.0136%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.7636%" y="373" width="0.1597%" height="15" fill="rgb(248,69,32)" fg:x="911" fg:w="2"/><text x="73.0136%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.8435%" y="357" width="0.0799%" height="15" fill="rgb(252,102,52)" fg:x="912" fg:w="1"/><text x="73.0935%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.8435%" y="341" width="0.0799%" height="15" fill="rgb(253,140,32)" fg:x="912" fg:w="1"/><text x="73.0935%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.8435%" y="325" width="0.0799%" height="15" fill="rgb(216,56,42)" fg:x="912" fg:w="1"/><text x="73.0935%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.8435%" y="309" width="0.0799%" height="15" fill="rgb(216,184,14)" fg:x="912" fg:w="1"/><text x="73.0935%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.8435%" y="293" width="0.0799%" height="15" fill="rgb(237,187,27)" fg:x="912" fg:w="1"/><text x="73.0935%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.8435%" y="277" width="0.0799%" height="15" fill="rgb(219,65,3)" fg:x="912" fg:w="1"/><text x="73.0935%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.8435%" y="261" width="0.0799%" height="15" fill="rgb(245,83,25)" fg:x="912" fg:w="1"/><text x="73.0935%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.8435%" y="245" width="0.0799%" height="15" fill="rgb(214,205,45)" fg:x="912" fg:w="1"/><text x="73.0935%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.8435%" y="229" width="0.0799%" height="15" fill="rgb(241,20,18)" fg:x="912" fg:w="1"/><text x="73.0935%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.8435%" y="213" width="0.0799%" height="15" fill="rgb(232,163,23)" fg:x="912" fg:w="1"/><text x="73.0935%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.8435%" y="197" width="0.0799%" height="15" fill="rgb(214,5,46)" fg:x="912" fg:w="1"/><text x="73.0935%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.8435%" y="181" width="0.0799%" height="15" fill="rgb(229,78,17)" fg:x="912" fg:w="1"/><text x="73.0935%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="72.9233%" y="405" width="0.3195%" height="15" fill="rgb(248,89,10)" fg:x="913" fg:w="4"/><text x="73.1733%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="72.9233%" y="389" width="0.3195%" height="15" fill="rgb(248,54,15)" fg:x="913" fg:w="4"/><text x="73.1733%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="72.9233%" y="373" width="0.3195%" height="15" fill="rgb(223,116,6)" fg:x="913" fg:w="4"/><text x="73.1733%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="73.0032%" y="357" width="0.2396%" height="15" fill="rgb(205,125,38)" fg:x="914" fg:w="3"/><text x="73.2532%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.0831%" y="341" width="0.1597%" height="15" fill="rgb(251,78,38)" fg:x="915" fg:w="2"/><text x="73.3331%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="73.0831%" y="325" width="0.1597%" height="15" fill="rgb(253,78,28)" fg:x="915" fg:w="2"/><text x="73.3331%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.1629%" y="309" width="0.0799%" height="15" fill="rgb(209,120,3)" fg:x="916" fg:w="1"/><text x="73.4129%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.1629%" y="293" width="0.0799%" height="15" fill="rgb(238,229,9)" fg:x="916" fg:w="1"/><text x="73.4129%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.1629%" y="277" width="0.0799%" height="15" fill="rgb(253,159,18)" fg:x="916" fg:w="1"/><text x="73.4129%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.1629%" y="261" width="0.0799%" height="15" fill="rgb(244,42,34)" fg:x="916" fg:w="1"/><text x="73.4129%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.1629%" y="245" width="0.0799%" height="15" fill="rgb(224,8,7)" fg:x="916" fg:w="1"/><text x="73.4129%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.1629%" y="229" width="0.0799%" height="15" fill="rgb(210,201,45)" fg:x="916" fg:w="1"/><text x="73.4129%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.1629%" y="213" width="0.0799%" height="15" fill="rgb(252,185,21)" fg:x="916" fg:w="1"/><text x="73.4129%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.1629%" y="197" width="0.0799%" height="15" fill="rgb(223,131,1)" fg:x="916" fg:w="1"/><text x="73.4129%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.1629%" y="181" width="0.0799%" height="15" fill="rgb(245,141,16)" fg:x="916" fg:w="1"/><text x="73.4129%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.1629%" y="165" width="0.0799%" height="15" fill="rgb(229,55,45)" fg:x="916" fg:w="1"/><text x="73.4129%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.1629%" y="149" width="0.0799%" height="15" fill="rgb(208,92,15)" fg:x="916" fg:w="1"/><text x="73.4129%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.2428%" y="405" width="0.0799%" height="15" fill="rgb(234,185,47)" fg:x="917" fg:w="1"/><text x="73.4928%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="73.2428%" y="389" width="0.0799%" height="15" fill="rgb(253,104,50)" fg:x="917" fg:w="1"/><text x="73.4928%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.2428%" y="373" width="0.0799%" height="15" fill="rgb(205,70,7)" fg:x="917" fg:w="1"/><text x="73.4928%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.2428%" y="357" width="0.0799%" height="15" fill="rgb(240,178,43)" fg:x="917" fg:w="1"/><text x="73.4928%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.2428%" y="341" width="0.0799%" height="15" fill="rgb(214,112,2)" fg:x="917" fg:w="1"/><text x="73.4928%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.2428%" y="325" width="0.0799%" height="15" fill="rgb(206,46,17)" fg:x="917" fg:w="1"/><text x="73.4928%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.2428%" y="309" width="0.0799%" height="15" fill="rgb(225,220,16)" fg:x="917" fg:w="1"/><text x="73.4928%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.3227%" y="373" width="0.0799%" height="15" fill="rgb(238,65,40)" fg:x="918" fg:w="1"/><text x="73.5727%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.3227%" y="357" width="0.0799%" height="15" fill="rgb(230,151,21)" fg:x="918" fg:w="1"/><text x="73.5727%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.3227%" y="341" width="0.0799%" height="15" fill="rgb(218,58,49)" fg:x="918" fg:w="1"/><text x="73.5727%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.3227%" y="325" width="0.0799%" height="15" fill="rgb(219,179,14)" fg:x="918" fg:w="1"/><text x="73.5727%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.3227%" y="309" width="0.0799%" height="15" fill="rgb(223,72,1)" fg:x="918" fg:w="1"/><text x="73.5727%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.3227%" y="293" width="0.0799%" height="15" fill="rgb(238,126,10)" fg:x="918" fg:w="1"/><text x="73.5727%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (7 samples, 0.56%)</title><rect x="72.9233%" y="453" width="0.5591%" height="15" fill="rgb(224,206,38)" fg:x="913" fg:w="7"/><text x="73.1733%" y="463.50"></text></g><g><title>kernel::model::props::load_props (7 samples, 0.56%)</title><rect x="72.9233%" y="437" width="0.5591%" height="15" fill="rgb(212,201,54)" fg:x="913" fg:w="7"/><text x="73.1733%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (7 samples, 0.56%)</title><rect x="72.9233%" y="421" width="0.5591%" height="15" fill="rgb(218,154,48)" fg:x="913" fg:w="7"/><text x="73.1733%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="73.3227%" y="405" width="0.1597%" height="15" fill="rgb(232,93,24)" fg:x="918" fg:w="2"/><text x="73.5727%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.3227%" y="389" width="0.1597%" height="15" fill="rgb(245,30,21)" fg:x="918" fg:w="2"/><text x="73.5727%" y="399.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="73.4026%" y="373" width="0.0799%" height="15" fill="rgb(242,148,29)" fg:x="919" fg:w="1"/><text x="73.6526%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="73.4824%" y="405" width="0.0799%" height="15" fill="rgb(244,153,54)" fg:x="920" fg:w="1"/><text x="73.7324%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="73.4824%" y="389" width="0.0799%" height="15" fill="rgb(252,87,22)" fg:x="920" fg:w="1"/><text x="73.7324%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.4824%" y="373" width="0.0799%" height="15" fill="rgb(210,51,29)" fg:x="920" fg:w="1"/><text x="73.7324%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.4824%" y="357" width="0.0799%" height="15" fill="rgb(242,136,47)" fg:x="920" fg:w="1"/><text x="73.7324%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.4824%" y="341" width="0.0799%" height="15" fill="rgb(238,68,4)" fg:x="920" fg:w="1"/><text x="73.7324%" y="351.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="73.4824%" y="325" width="0.0799%" height="15" fill="rgb(242,161,30)" fg:x="920" fg:w="1"/><text x="73.7324%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="73.4824%" y="309" width="0.0799%" height="15" fill="rgb(218,58,44)" fg:x="920" fg:w="1"/><text x="73.7324%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="73.4824%" y="293" width="0.0799%" height="15" fill="rgb(252,125,32)" fg:x="920" fg:w="1"/><text x="73.7324%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="73.4824%" y="277" width="0.0799%" height="15" fill="rgb(219,178,0)" fg:x="920" fg:w="1"/><text x="73.7324%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="73.4824%" y="261" width="0.0799%" height="15" fill="rgb(213,152,7)" fg:x="920" fg:w="1"/><text x="73.7324%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.6422%" y="389" width="0.0799%" height="15" fill="rgb(249,109,34)" fg:x="922" fg:w="1"/><text x="73.8922%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="73.7220%" y="309" width="0.0799%" height="15" fill="rgb(232,96,21)" fg:x="923" fg:w="1"/><text x="73.9720%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="73.7220%" y="293" width="0.0799%" height="15" fill="rgb(228,27,39)" fg:x="923" fg:w="1"/><text x="73.9720%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.7220%" y="277" width="0.0799%" height="15" fill="rgb(211,182,52)" fg:x="923" fg:w="1"/><text x="73.9720%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.7220%" y="261" width="0.0799%" height="15" fill="rgb(234,178,38)" fg:x="923" fg:w="1"/><text x="73.9720%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.7220%" y="245" width="0.0799%" height="15" fill="rgb(221,111,3)" fg:x="923" fg:w="1"/><text x="73.9720%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.8019%" y="277" width="0.0799%" height="15" fill="rgb(228,175,21)" fg:x="924" fg:w="1"/><text x="74.0519%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.8019%" y="261" width="0.0799%" height="15" fill="rgb(228,174,43)" fg:x="924" fg:w="1"/><text x="74.0519%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="73.8019%" y="245" width="0.0799%" height="15" fill="rgb(211,191,0)" fg:x="924" fg:w="1"/><text x="74.0519%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="73.7220%" y="373" width="0.2396%" height="15" fill="rgb(253,117,3)" fg:x="923" fg:w="3"/><text x="73.9720%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="73.7220%" y="357" width="0.2396%" height="15" fill="rgb(241,127,19)" fg:x="923" fg:w="3"/><text x="73.9720%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="73.7220%" y="341" width="0.2396%" height="15" fill="rgb(218,103,12)" fg:x="923" fg:w="3"/><text x="73.9720%" y="351.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (3 samples, 0.24%)</title><rect x="73.7220%" y="325" width="0.2396%" height="15" fill="rgb(236,214,43)" fg:x="923" fg:w="3"/><text x="73.9720%" y="335.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="73.8019%" y="309" width="0.1597%" height="15" fill="rgb(244,144,19)" fg:x="924" fg:w="2"/><text x="74.0519%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="73.8019%" y="293" width="0.1597%" height="15" fill="rgb(246,188,10)" fg:x="924" fg:w="2"/><text x="74.0519%" y="303.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="73.8818%" y="277" width="0.0799%" height="15" fill="rgb(212,193,33)" fg:x="925" fg:w="1"/><text x="74.1318%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="73.8818%" y="261" width="0.0799%" height="15" fill="rgb(241,51,29)" fg:x="925" fg:w="1"/><text x="74.1318%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="74.0415%" y="325" width="0.0799%" height="15" fill="rgb(211,58,19)" fg:x="927" fg:w="1"/><text x="74.2915%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.0415%" y="309" width="0.0799%" height="15" fill="rgb(229,111,26)" fg:x="927" fg:w="1"/><text x="74.2915%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="74.0415%" y="293" width="0.0799%" height="15" fill="rgb(213,115,40)" fg:x="927" fg:w="1"/><text x="74.2915%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.0415%" y="277" width="0.0799%" height="15" fill="rgb(209,56,44)" fg:x="927" fg:w="1"/><text x="74.2915%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="74.1214%" y="309" width="0.4792%" height="15" fill="rgb(230,108,32)" fg:x="928" fg:w="6"/><text x="74.3714%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="74.1214%" y="293" width="0.4792%" height="15" fill="rgb(216,165,31)" fg:x="928" fg:w="6"/><text x="74.3714%" y="303.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="74.7604%" y="293" width="0.0799%" height="15" fill="rgb(218,122,21)" fg:x="936" fg:w="1"/><text x="75.0104%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="74.6006%" y="309" width="0.3195%" height="15" fill="rgb(223,224,47)" fg:x="934" fg:w="4"/><text x="74.8506%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="74.8403%" y="293" width="0.0799%" height="15" fill="rgb(238,102,44)" fg:x="937" fg:w="1"/><text x="75.0903%" y="303.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="75.0000%" y="245" width="0.0799%" height="15" fill="rgb(236,46,40)" fg:x="939" fg:w="1"/><text x="75.2500%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="75.0799%" y="245" width="0.1597%" height="15" fill="rgb(247,202,50)" fg:x="940" fg:w="2"/><text x="75.3299%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="75.0799%" y="229" width="0.1597%" height="15" fill="rgb(209,99,20)" fg:x="940" fg:w="2"/><text x="75.3299%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="75.0799%" y="213" width="0.1597%" height="15" fill="rgb(252,27,34)" fg:x="940" fg:w="2"/><text x="75.3299%" y="223.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="75.0799%" y="197" width="0.1597%" height="15" fill="rgb(215,206,23)" fg:x="940" fg:w="2"/><text x="75.3299%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="75.2396%" y="245" width="0.1597%" height="15" fill="rgb(212,135,36)" fg:x="942" fg:w="2"/><text x="75.4896%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="75.2396%" y="229" width="0.1597%" height="15" fill="rgb(240,189,1)" fg:x="942" fg:w="2"/><text x="75.4896%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="75.2396%" y="213" width="0.1597%" height="15" fill="rgb(242,56,20)" fg:x="942" fg:w="2"/><text x="75.4896%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="75.2396%" y="197" width="0.1597%" height="15" fill="rgb(247,132,33)" fg:x="942" fg:w="2"/><text x="75.4896%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="75.2396%" y="181" width="0.1597%" height="15" fill="rgb(208,149,11)" fg:x="942" fg:w="2"/><text x="75.4896%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (45 samples, 3.59%)</title><rect x="75.3994%" y="245" width="3.5942%" height="15" fill="rgb(211,33,11)" fg:x="944" fg:w="45"/><text x="75.6494%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (45 samples, 3.59%)</title><rect x="75.3994%" y="229" width="3.5942%" height="15" fill="rgb(221,29,38)" fg:x="944" fg:w="45"/><text x="75.6494%" y="239.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (45 samples, 3.59%)</title><rect x="75.3994%" y="213" width="3.5942%" height="15" fill="rgb(206,182,49)" fg:x="944" fg:w="45"/><text x="75.6494%" y="223.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="78.9936%" y="245" width="0.3195%" height="15" fill="rgb(216,140,1)" fg:x="989" fg:w="4"/><text x="79.2436%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 4.47%)</title><rect x="75.0000%" y="293" width="4.4728%" height="15" fill="rgb(232,57,40)" fg:x="939" fg:w="56"/><text x="75.2500%" y="303.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (56 samples, 4.47%)</title><rect x="75.0000%" y="277" width="4.4728%" height="15" fill="rgb(224,186,18)" fg:x="939" fg:w="56"/><text x="75.2500%" y="287.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (56 samples, 4.47%)</title><rect x="75.0000%" y="261" width="4.4728%" height="15" fill="rgb(215,121,11)" fg:x="939" fg:w="56"/><text x="75.2500%" y="271.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="79.3131%" y="245" width="0.1597%" height="15" fill="rgb(245,147,10)" fg:x="993" fg:w="2"/><text x="79.5631%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="79.5527%" y="277" width="0.3195%" height="15" fill="rgb(238,153,13)" fg:x="996" fg:w="4"/><text x="79.8027%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="79.7125%" y="261" width="0.1597%" height="15" fill="rgb(233,108,0)" fg:x="998" fg:w="2"/><text x="79.9625%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="79.7125%" y="245" width="0.1597%" height="15" fill="rgb(212,157,17)" fg:x="998" fg:w="2"/><text x="79.9625%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="79.7125%" y="229" width="0.1597%" height="15" fill="rgb(225,213,38)" fg:x="998" fg:w="2"/><text x="79.9625%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (74 samples, 5.91%)</title><rect x="74.1214%" y="325" width="5.9105%" height="15" fill="rgb(248,16,11)" fg:x="928" fg:w="74"/><text x="74.3714%" y="335.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (64 samples, 5.11%)</title><rect x="74.9201%" y="309" width="5.1118%" height="15" fill="rgb(241,33,4)" fg:x="938" fg:w="64"/><text x="75.1701%" y="319.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="79.4728%" y="293" width="0.5591%" height="15" fill="rgb(222,26,43)" fg:x="995" fg:w="7"/><text x="79.7228%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="79.8722%" y="277" width="0.1597%" height="15" fill="rgb(243,29,36)" fg:x="1000" fg:w="2"/><text x="80.1222%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.0319%" y="261" width="0.0799%" height="15" fill="rgb(241,9,27)" fg:x="1002" fg:w="1"/><text x="80.2819%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.0319%" y="245" width="0.0799%" height="15" fill="rgb(205,117,26)" fg:x="1002" fg:w="1"/><text x="80.2819%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.0319%" y="229" width="0.0799%" height="15" fill="rgb(209,80,39)" fg:x="1002" fg:w="1"/><text x="80.2819%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="80.0319%" y="325" width="0.1597%" height="15" fill="rgb(239,155,6)" fg:x="1002" fg:w="2"/><text x="80.2819%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="80.0319%" y="309" width="0.1597%" height="15" fill="rgb(212,104,12)" fg:x="1002" fg:w="2"/><text x="80.2819%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="80.0319%" y="293" width="0.1597%" height="15" fill="rgb(234,204,3)" fg:x="1002" fg:w="2"/><text x="80.2819%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="80.0319%" y="277" width="0.1597%" height="15" fill="rgb(251,218,7)" fg:x="1002" fg:w="2"/><text x="80.2819%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="80.1118%" y="261" width="0.0799%" height="15" fill="rgb(221,81,32)" fg:x="1003" fg:w="1"/><text x="80.3618%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.2716%" y="277" width="0.0799%" height="15" fill="rgb(214,152,26)" fg:x="1005" fg:w="1"/><text x="80.5216%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.2716%" y="261" width="0.0799%" height="15" fill="rgb(223,22,3)" fg:x="1005" fg:w="1"/><text x="80.5216%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.2716%" y="245" width="0.0799%" height="15" fill="rgb(207,174,7)" fg:x="1005" fg:w="1"/><text x="80.5216%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="80.1917%" y="293" width="0.2396%" height="15" fill="rgb(224,19,52)" fg:x="1004" fg:w="3"/><text x="80.4417%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_unicode_class (1 samples, 0.08%)</title><rect x="80.3514%" y="277" width="0.0799%" height="15" fill="rgb(228,24,14)" fg:x="1006" fg:w="1"/><text x="80.6014%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (82 samples, 6.55%)</title><rect x="73.9617%" y="341" width="6.5495%" height="15" fill="rgb(230,153,43)" fg:x="926" fg:w="82"/><text x="74.2117%" y="351.50">regex_aut..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="80.1917%" y="325" width="0.3195%" height="15" fill="rgb(231,106,12)" fg:x="1004" fg:w="4"/><text x="80.4417%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="80.1917%" y="309" width="0.3195%" height="15" fill="rgb(215,92,2)" fg:x="1004" fg:w="4"/><text x="80.4417%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.4313%" y="293" width="0.0799%" height="15" fill="rgb(249,143,25)" fg:x="1007" fg:w="1"/><text x="80.6813%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.4313%" y="277" width="0.0799%" height="15" fill="rgb(252,7,35)" fg:x="1007" fg:w="1"/><text x="80.6813%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.4313%" y="261" width="0.0799%" height="15" fill="rgb(216,69,40)" fg:x="1007" fg:w="1"/><text x="80.6813%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (83 samples, 6.63%)</title><rect x="73.9617%" y="373" width="6.6294%" height="15" fill="rgb(240,36,33)" fg:x="926" fg:w="83"/><text x="74.2117%" y="383.50">&lt;regex::r..</text></g><g><title>regex::builders::Builder::build_one_string (83 samples, 6.63%)</title><rect x="73.9617%" y="357" width="6.6294%" height="15" fill="rgb(231,128,14)" fg:x="926" fg:w="83"/><text x="74.2117%" y="367.50">regex::bu..</text></g><g><title>regex_automata::meta::regex::Config::utf8_empty (1 samples, 0.08%)</title><rect x="80.5112%" y="341" width="0.0799%" height="15" fill="rgb(245,143,14)" fg:x="1008" fg:w="1"/><text x="80.7612%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="80.6709%" y="341" width="0.0799%" height="15" fill="rgb(222,130,28)" fg:x="1010" fg:w="1"/><text x="80.9209%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="80.6709%" y="325" width="0.0799%" height="15" fill="rgb(212,10,48)" fg:x="1010" fg:w="1"/><text x="80.9209%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="80.6709%" y="309" width="0.0799%" height="15" fill="rgb(254,118,45)" fg:x="1010" fg:w="1"/><text x="80.9209%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.6709%" y="293" width="0.0799%" height="15" fill="rgb(228,6,45)" fg:x="1010" fg:w="1"/><text x="80.9209%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.6709%" y="277" width="0.0799%" height="15" fill="rgb(241,18,35)" fg:x="1010" fg:w="1"/><text x="80.9209%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.7508%" y="325" width="0.0799%" height="15" fill="rgb(227,214,53)" fg:x="1011" fg:w="1"/><text x="81.0008%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="80.8307%" y="325" width="0.0799%" height="15" fill="rgb(224,107,51)" fg:x="1012" fg:w="1"/><text x="81.0807%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="80.5911%" y="373" width="0.4792%" height="15" fill="rgb(248,60,28)" fg:x="1009" fg:w="6"/><text x="80.8411%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="80.6709%" y="357" width="0.3994%" height="15" fill="rgb(249,101,23)" fg:x="1010" fg:w="5"/><text x="80.9209%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="80.7508%" y="341" width="0.3195%" height="15" fill="rgb(228,51,19)" fg:x="1011" fg:w="4"/><text x="81.0008%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="80.9105%" y="325" width="0.1597%" height="15" fill="rgb(213,20,6)" fg:x="1013" fg:w="2"/><text x="81.1605%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="80.9105%" y="309" width="0.1597%" height="15" fill="rgb(212,124,10)" fg:x="1013" fg:w="2"/><text x="81.1605%" y="319.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (94 samples, 7.51%)</title><rect x="73.7220%" y="389" width="7.5080%" height="15" fill="rgb(248,3,40)" fg:x="923" fg:w="94"/><text x="73.9720%" y="399.50">indefinite..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="81.0703%" y="373" width="0.1597%" height="15" fill="rgb(223,178,23)" fg:x="1015" fg:w="2"/><text x="81.3203%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="81.0703%" y="357" width="0.1597%" height="15" fill="rgb(240,132,45)" fg:x="1015" fg:w="2"/><text x="81.3203%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="81.0703%" y="341" width="0.1597%" height="15" fill="rgb(245,164,36)" fg:x="1015" fg:w="2"/><text x="81.3203%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="81.0703%" y="325" width="0.1597%" height="15" fill="rgb(231,188,53)" fg:x="1015" fg:w="2"/><text x="81.3203%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="81.0703%" y="309" width="0.1597%" height="15" fill="rgb(237,198,39)" fg:x="1015" fg:w="2"/><text x="81.3203%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.2300%" y="325" width="0.0799%" height="15" fill="rgb(223,120,35)" fg:x="1017" fg:w="1"/><text x="81.4800%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.2300%" y="309" width="0.0799%" height="15" fill="rgb(253,107,49)" fg:x="1017" fg:w="1"/><text x="81.4800%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="81.2300%" y="293" width="0.0799%" height="15" fill="rgb(216,44,31)" fg:x="1017" fg:w="1"/><text x="81.4800%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="81.3099%" y="325" width="0.2396%" height="15" fill="rgb(253,87,21)" fg:x="1018" fg:w="3"/><text x="81.5599%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="81.3099%" y="309" width="0.2396%" height="15" fill="rgb(226,18,2)" fg:x="1018" fg:w="3"/><text x="81.5599%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.5495%" y="309" width="0.0799%" height="15" fill="rgb(216,8,46)" fg:x="1021" fg:w="1"/><text x="81.7995%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.7093%" y="293" width="0.0799%" height="15" fill="rgb(226,140,39)" fg:x="1023" fg:w="1"/><text x="81.9593%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="81.7891%" y="293" width="0.4792%" height="15" fill="rgb(221,194,54)" fg:x="1024" fg:w="6"/><text x="82.0391%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.72%)</title><rect x="81.6294%" y="309" width="0.7188%" height="15" fill="rgb(213,92,11)" fg:x="1022" fg:w="9"/><text x="81.8794%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="82.2684%" y="293" width="0.0799%" height="15" fill="rgb(229,162,46)" fg:x="1030" fg:w="1"/><text x="82.5184%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.2684%" y="277" width="0.0799%" height="15" fill="rgb(214,111,36)" fg:x="1030" fg:w="1"/><text x="82.5184%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="82.3482%" y="293" width="0.0799%" height="15" fill="rgb(207,6,21)" fg:x="1031" fg:w="1"/><text x="82.5982%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="82.3482%" y="277" width="0.0799%" height="15" fill="rgb(213,127,38)" fg:x="1031" fg:w="1"/><text x="82.5982%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="82.3482%" y="309" width="0.4792%" height="15" fill="rgb(238,118,32)" fg:x="1031" fg:w="6"/><text x="82.5982%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="82.4281%" y="293" width="0.3994%" height="15" fill="rgb(240,139,39)" fg:x="1032" fg:w="5"/><text x="82.6781%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="82.7476%" y="277" width="0.0799%" height="15" fill="rgb(235,10,37)" fg:x="1036" fg:w="1"/><text x="82.9976%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="82.9073%" y="277" width="0.1597%" height="15" fill="rgb(249,171,38)" fg:x="1038" fg:w="2"/><text x="83.1573%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="82.9073%" y="261" width="0.1597%" height="15" fill="rgb(242,144,32)" fg:x="1038" fg:w="2"/><text x="83.1573%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.9872%" y="245" width="0.0799%" height="15" fill="rgb(217,117,21)" fg:x="1039" fg:w="1"/><text x="83.2372%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.9872%" y="229" width="0.0799%" height="15" fill="rgb(249,87,1)" fg:x="1039" fg:w="1"/><text x="83.2372%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.9872%" y="213" width="0.0799%" height="15" fill="rgb(248,196,48)" fg:x="1039" fg:w="1"/><text x="83.2372%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (6 samples, 0.48%)</title><rect x="83.0671%" y="261" width="0.4792%" height="15" fill="rgb(251,206,33)" fg:x="1040" fg:w="6"/><text x="83.3171%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (6 samples, 0.48%)</title><rect x="83.0671%" y="245" width="0.4792%" height="15" fill="rgb(232,141,28)" fg:x="1040" fg:w="6"/><text x="83.3171%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (10 samples, 0.80%)</title><rect x="82.8275%" y="309" width="0.7987%" height="15" fill="rgb(209,167,14)" fg:x="1037" fg:w="10"/><text x="83.0775%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (10 samples, 0.80%)</title><rect x="82.8275%" y="293" width="0.7987%" height="15" fill="rgb(225,11,50)" fg:x="1037" fg:w="10"/><text x="83.0775%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (7 samples, 0.56%)</title><rect x="83.0671%" y="277" width="0.5591%" height="15" fill="rgb(209,50,20)" fg:x="1040" fg:w="7"/><text x="83.3171%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="83.5463%" y="261" width="0.0799%" height="15" fill="rgb(212,17,46)" fg:x="1046" fg:w="1"/><text x="83.7963%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="83.6262%" y="245" width="0.0799%" height="15" fill="rgb(216,101,39)" fg:x="1047" fg:w="1"/><text x="83.8762%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="84.6645%" y="197" width="0.2396%" height="15" fill="rgb(212,228,48)" fg:x="1060" fg:w="3"/><text x="84.9145%" y="207.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="84.9042%" y="197" width="0.1597%" height="15" fill="rgb(250,6,50)" fg:x="1063" fg:w="2"/><text x="85.1542%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="85.0639%" y="197" width="0.1597%" height="15" fill="rgb(250,160,48)" fg:x="1065" fg:w="2"/><text x="85.3139%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="85.2236%" y="197" width="0.1597%" height="15" fill="rgb(244,216,33)" fg:x="1067" fg:w="2"/><text x="85.4736%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.7827%" y="165" width="0.0799%" height="15" fill="rgb(207,157,5)" fg:x="1074" fg:w="1"/><text x="86.0327%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="85.8626%" y="165" width="0.2396%" height="15" fill="rgb(228,199,8)" fg:x="1075" fg:w="3"/><text x="86.1126%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="85.9425%" y="149" width="0.1597%" height="15" fill="rgb(227,80,20)" fg:x="1076" fg:w="2"/><text x="86.1925%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="85.9425%" y="133" width="0.1597%" height="15" fill="rgb(222,9,33)" fg:x="1076" fg:w="2"/><text x="86.1925%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (15 samples, 1.20%)</title><rect x="85.3834%" y="197" width="1.1981%" height="15" fill="rgb(239,44,28)" fg:x="1069" fg:w="15"/><text x="85.6334%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (11 samples, 0.88%)</title><rect x="85.7029%" y="181" width="0.8786%" height="15" fill="rgb(249,187,43)" fg:x="1073" fg:w="11"/><text x="85.9529%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.48%)</title><rect x="86.1022%" y="165" width="0.4792%" height="15" fill="rgb(216,141,28)" fg:x="1078" fg:w="6"/><text x="86.3522%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="86.5815%" y="197" width="0.0799%" height="15" fill="rgb(230,154,53)" fg:x="1084" fg:w="1"/><text x="86.8315%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="86.5815%" y="181" width="0.0799%" height="15" fill="rgb(227,82,4)" fg:x="1084" fg:w="1"/><text x="86.8315%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (44 samples, 3.51%)</title><rect x="86.6613%" y="197" width="3.5144%" height="15" fill="rgb(220,107,16)" fg:x="1085" fg:w="44"/><text x="86.9113%" y="207.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (44 samples, 3.51%)</title><rect x="86.6613%" y="181" width="3.5144%" height="15" fill="rgb(207,187,2)" fg:x="1085" fg:w="44"/><text x="86.9113%" y="191.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (44 samples, 3.51%)</title><rect x="86.6613%" y="165" width="3.5144%" height="15" fill="rgb(210,162,52)" fg:x="1085" fg:w="44"/><text x="86.9113%" y="175.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="90.1757%" y="197" width="0.2396%" height="15" fill="rgb(217,216,49)" fg:x="1129" fg:w="3"/><text x="90.4257%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.3355%" y="181" width="0.0799%" height="15" fill="rgb(218,146,49)" fg:x="1131" fg:w="1"/><text x="90.5855%" y="191.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="90.4153%" y="197" width="0.0799%" height="15" fill="rgb(216,55,40)" fg:x="1132" fg:w="1"/><text x="90.6653%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (88 samples, 7.03%)</title><rect x="83.6262%" y="293" width="7.0288%" height="15" fill="rgb(208,196,21)" fg:x="1047" fg:w="88"/><text x="83.8762%" y="303.50">&lt;core::it..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (88 samples, 7.03%)</title><rect x="83.6262%" y="277" width="7.0288%" height="15" fill="rgb(242,117,42)" fg:x="1047" fg:w="88"/><text x="83.8762%" y="287.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (88 samples, 7.03%)</title><rect x="83.6262%" y="261" width="7.0288%" height="15" fill="rgb(210,11,23)" fg:x="1047" fg:w="88"/><text x="83.8762%" y="271.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (87 samples, 6.95%)</title><rect x="83.7061%" y="245" width="6.9489%" height="15" fill="rgb(217,110,2)" fg:x="1048" fg:w="87"/><text x="83.9561%" y="255.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (86 samples, 6.87%)</title><rect x="83.7859%" y="229" width="6.8690%" height="15" fill="rgb(229,77,54)" fg:x="1049" fg:w="86"/><text x="84.0359%" y="239.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (86 samples, 6.87%)</title><rect x="83.7859%" y="213" width="6.8690%" height="15" fill="rgb(218,53,16)" fg:x="1049" fg:w="86"/><text x="84.0359%" y="223.50">regex_aut..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="90.4952%" y="197" width="0.1597%" height="15" fill="rgb(215,38,13)" fg:x="1133" fg:w="2"/><text x="90.7452%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.5751%" y="181" width="0.0799%" height="15" fill="rgb(235,42,18)" fg:x="1134" fg:w="1"/><text x="90.8251%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.7348%" y="277" width="0.0799%" height="15" fill="rgb(219,66,54)" fg:x="1136" fg:w="1"/><text x="90.9848%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="90.8147%" y="277" width="0.0799%" height="15" fill="rgb(222,205,4)" fg:x="1137" fg:w="1"/><text x="91.0647%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.40%)</title><rect x="90.8946%" y="277" width="0.3994%" height="15" fill="rgb(227,213,46)" fg:x="1138" fg:w="5"/><text x="91.1446%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="91.0543%" y="261" width="0.2396%" height="15" fill="rgb(250,145,42)" fg:x="1140" fg:w="3"/><text x="91.3043%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="91.0543%" y="245" width="0.2396%" height="15" fill="rgb(219,15,2)" fg:x="1140" fg:w="3"/><text x="91.3043%" y="255.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="91.0543%" y="229" width="0.2396%" height="15" fill="rgb(231,181,52)" fg:x="1140" fg:w="3"/><text x="91.3043%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (128 samples, 10.22%)</title><rect x="81.5495%" y="325" width="10.2236%" height="15" fill="rgb(235,1,42)" fg:x="1021" fg:w="128"/><text x="81.7995%" y="335.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (102 samples, 8.15%)</title><rect x="83.6262%" y="309" width="8.1470%" height="15" fill="rgb(249,88,27)" fg:x="1047" fg:w="102"/><text x="83.8762%" y="319.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (14 samples, 1.12%)</title><rect x="90.6550%" y="293" width="1.1182%" height="15" fill="rgb(235,145,16)" fg:x="1135" fg:w="14"/><text x="90.9050%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="91.2939%" y="277" width="0.4792%" height="15" fill="rgb(237,114,19)" fg:x="1143" fg:w="6"/><text x="91.5439%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="91.7732%" y="277" width="0.0799%" height="15" fill="rgb(238,51,50)" fg:x="1149" fg:w="1"/><text x="92.0232%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="91.7732%" y="261" width="0.0799%" height="15" fill="rgb(205,194,25)" fg:x="1149" fg:w="1"/><text x="92.0232%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="91.7732%" y="293" width="0.3195%" height="15" fill="rgb(215,203,17)" fg:x="1149" fg:w="4"/><text x="92.0232%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="91.8530%" y="277" width="0.2396%" height="15" fill="rgb(233,112,49)" fg:x="1150" fg:w="3"/><text x="92.1030%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="91.8530%" y="261" width="0.2396%" height="15" fill="rgb(241,130,26)" fg:x="1150" fg:w="3"/><text x="92.1030%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="91.8530%" y="245" width="0.2396%" height="15" fill="rgb(252,223,19)" fg:x="1150" fg:w="3"/><text x="92.1030%" y="255.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="91.8530%" y="229" width="0.2396%" height="15" fill="rgb(211,95,25)" fg:x="1150" fg:w="3"/><text x="92.1030%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="92.0927%" y="293" width="0.0799%" height="15" fill="rgb(251,182,27)" fg:x="1153" fg:w="1"/><text x="92.3427%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="92.0927%" y="277" width="0.0799%" height="15" fill="rgb(238,24,4)" fg:x="1153" fg:w="1"/><text x="92.3427%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="91.7732%" y="325" width="0.6390%" height="15" fill="rgb(224,220,25)" fg:x="1149" fg:w="8"/><text x="92.0232%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="91.7732%" y="309" width="0.6390%" height="15" fill="rgb(239,133,26)" fg:x="1149" fg:w="8"/><text x="92.0232%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="92.1725%" y="293" width="0.2396%" height="15" fill="rgb(211,94,48)" fg:x="1154" fg:w="3"/><text x="92.4225%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="92.3323%" y="277" width="0.0799%" height="15" fill="rgb(239,87,6)" fg:x="1156" fg:w="1"/><text x="92.5823%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (6 samples, 0.48%)</title><rect x="92.4121%" y="277" width="0.4792%" height="15" fill="rgb(227,62,0)" fg:x="1157" fg:w="6"/><text x="92.6621%" y="287.50"></text></g><g><title>core::slice::sort::merge_sort (5 samples, 0.40%)</title><rect x="92.4920%" y="261" width="0.3994%" height="15" fill="rgb(211,226,4)" fg:x="1158" fg:w="5"/><text x="92.7420%" y="271.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="92.6518%" y="245" width="0.2396%" height="15" fill="rgb(253,38,52)" fg:x="1160" fg:w="3"/><text x="92.9018%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.56%)</title><rect x="92.4121%" y="293" width="0.5591%" height="15" fill="rgb(229,126,40)" fg:x="1157" fg:w="7"/><text x="92.6621%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="92.8914%" y="277" width="0.0799%" height="15" fill="rgb(229,165,44)" fg:x="1163" fg:w="1"/><text x="93.1414%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.8914%" y="261" width="0.0799%" height="15" fill="rgb(247,95,47)" fg:x="1163" fg:w="1"/><text x="93.1414%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.8914%" y="245" width="0.0799%" height="15" fill="rgb(216,140,30)" fg:x="1163" fg:w="1"/><text x="93.1414%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.8914%" y="229" width="0.0799%" height="15" fill="rgb(246,214,8)" fg:x="1163" fg:w="1"/><text x="93.1414%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (148 samples, 11.82%)</title><rect x="81.2300%" y="373" width="11.8211%" height="15" fill="rgb(227,224,15)" fg:x="1017" fg:w="148"/><text x="81.4800%" y="383.50">&lt;regex::regex::str..</text></g><g><title>regex::builders::Builder::build_one_string (148 samples, 11.82%)</title><rect x="81.2300%" y="357" width="11.8211%" height="15" fill="rgb(233,175,4)" fg:x="1017" fg:w="148"/><text x="81.4800%" y="367.50">regex::builders::B..</text></g><g><title>regex_automata::meta::regex::Builder::build (148 samples, 11.82%)</title><rect x="81.2300%" y="341" width="11.8211%" height="15" fill="rgb(221,66,45)" fg:x="1017" fg:w="148"/><text x="81.4800%" y="351.50">regex_automata::me..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.64%)</title><rect x="92.4121%" y="325" width="0.6390%" height="15" fill="rgb(221,178,18)" fg:x="1157" fg:w="8"/><text x="92.6621%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.64%)</title><rect x="92.4121%" y="309" width="0.6390%" height="15" fill="rgb(213,81,29)" fg:x="1157" fg:w="8"/><text x="92.6621%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="92.9712%" y="293" width="0.0799%" height="15" fill="rgb(220,89,49)" fg:x="1164" fg:w="1"/><text x="93.2212%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="92.9712%" y="277" width="0.0799%" height="15" fill="rgb(227,60,33)" fg:x="1164" fg:w="1"/><text x="93.2212%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.9712%" y="261" width="0.0799%" height="15" fill="rgb(205,113,12)" fg:x="1164" fg:w="1"/><text x="93.2212%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.9712%" y="245" width="0.0799%" height="15" fill="rgb(211,32,1)" fg:x="1164" fg:w="1"/><text x="93.2212%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.9712%" y="229" width="0.0799%" height="15" fill="rgb(246,2,12)" fg:x="1164" fg:w="1"/><text x="93.2212%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="93.0511%" y="325" width="0.0799%" height="15" fill="rgb(243,37,27)" fg:x="1165" fg:w="1"/><text x="93.3011%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="93.0511%" y="309" width="0.0799%" height="15" fill="rgb(248,211,31)" fg:x="1165" fg:w="1"/><text x="93.3011%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="93.1310%" y="325" width="0.0799%" height="15" fill="rgb(242,146,47)" fg:x="1166" fg:w="1"/><text x="93.3810%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.1310%" y="309" width="0.0799%" height="15" fill="rgb(206,70,20)" fg:x="1166" fg:w="1"/><text x="93.3810%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="93.0511%" y="341" width="0.3195%" height="15" fill="rgb(215,10,51)" fg:x="1165" fg:w="4"/><text x="93.3011%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="93.2109%" y="325" width="0.1597%" height="15" fill="rgb(243,178,53)" fg:x="1167" fg:w="2"/><text x="93.4609%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="93.2109%" y="309" width="0.1597%" height="15" fill="rgb(233,221,20)" fg:x="1167" fg:w="2"/><text x="93.4609%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="93.2109%" y="293" width="0.1597%" height="15" fill="rgb(218,95,35)" fg:x="1167" fg:w="2"/><text x="93.4609%" y="303.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="93.2109%" y="277" width="0.1597%" height="15" fill="rgb(229,13,5)" fg:x="1167" fg:w="2"/><text x="93.4609%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="93.0511%" y="373" width="0.4792%" height="15" fill="rgb(252,164,30)" fg:x="1165" fg:w="6"/><text x="93.3011%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="93.0511%" y="357" width="0.4792%" height="15" fill="rgb(232,68,36)" fg:x="1165" fg:w="6"/><text x="93.3011%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="93.3706%" y="341" width="0.1597%" height="15" fill="rgb(219,59,54)" fg:x="1169" fg:w="2"/><text x="93.6206%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="93.3706%" y="325" width="0.1597%" height="15" fill="rgb(250,92,33)" fg:x="1169" fg:w="2"/><text x="93.6206%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.4505%" y="309" width="0.0799%" height="15" fill="rgb(229,162,54)" fg:x="1170" fg:w="1"/><text x="93.7005%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="93.5304%" y="309" width="0.0799%" height="15" fill="rgb(244,114,52)" fg:x="1171" fg:w="1"/><text x="93.7804%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="93.5304%" y="293" width="0.0799%" height="15" fill="rgb(212,211,43)" fg:x="1171" fg:w="1"/><text x="93.7804%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="93.5304%" y="277" width="0.0799%" height="15" fill="rgb(226,147,8)" fg:x="1171" fg:w="1"/><text x="93.7804%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="93.5304%" y="357" width="0.1597%" height="15" fill="rgb(226,23,13)" fg:x="1171" fg:w="2"/><text x="93.7804%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="93.5304%" y="341" width="0.1597%" height="15" fill="rgb(240,63,4)" fg:x="1171" fg:w="2"/><text x="93.7804%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="93.5304%" y="325" width="0.1597%" height="15" fill="rgb(221,1,32)" fg:x="1171" fg:w="2"/><text x="93.7804%" y="335.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="93.6102%" y="309" width="0.0799%" height="15" fill="rgb(242,117,10)" fg:x="1172" fg:w="1"/><text x="93.8602%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.6102%" y="293" width="0.0799%" height="15" fill="rgb(249,172,44)" fg:x="1172" fg:w="1"/><text x="93.8602%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.6102%" y="277" width="0.0799%" height="15" fill="rgb(244,46,45)" fg:x="1172" fg:w="1"/><text x="93.8602%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.6102%" y="261" width="0.0799%" height="15" fill="rgb(206,43,17)" fg:x="1172" fg:w="1"/><text x="93.8602%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="94.2492%" y="277" width="0.2396%" height="15" fill="rgb(239,218,39)" fg:x="1180" fg:w="3"/><text x="94.4992%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="94.2492%" y="261" width="0.2396%" height="15" fill="rgb(208,169,54)" fg:x="1180" fg:w="3"/><text x="94.4992%" y="271.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="94.2492%" y="245" width="0.2396%" height="15" fill="rgb(247,25,42)" fg:x="1180" fg:w="3"/><text x="94.4992%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.80%)</title><rect x="93.7700%" y="293" width="0.7987%" height="15" fill="rgb(226,23,31)" fg:x="1174" fg:w="10"/><text x="94.0200%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="94.4888%" y="277" width="0.0799%" height="15" fill="rgb(247,16,28)" fg:x="1183" fg:w="1"/><text x="94.7388%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="94.5687%" y="245" width="0.1597%" height="15" fill="rgb(231,147,38)" fg:x="1184" fg:w="2"/><text x="94.8187%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (13 samples, 1.04%)</title><rect x="93.7700%" y="309" width="1.0383%" height="15" fill="rgb(253,81,48)" fg:x="1174" fg:w="13"/><text x="94.0200%" y="319.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.24%)</title><rect x="94.5687%" y="293" width="0.2396%" height="15" fill="rgb(249,222,43)" fg:x="1184" fg:w="3"/><text x="94.8187%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="94.5687%" y="277" width="0.2396%" height="15" fill="rgb(221,3,27)" fg:x="1184" fg:w="3"/><text x="94.8187%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="94.5687%" y="261" width="0.2396%" height="15" fill="rgb(228,180,5)" fg:x="1184" fg:w="3"/><text x="94.8187%" y="271.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="94.7284%" y="245" width="0.0799%" height="15" fill="rgb(227,131,42)" fg:x="1186" fg:w="1"/><text x="94.9784%" y="255.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="94.7284%" y="229" width="0.0799%" height="15" fill="rgb(212,3,39)" fg:x="1186" fg:w="1"/><text x="94.9784%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (171 samples, 13.66%)</title><rect x="81.2300%" y="389" width="13.6581%" height="15" fill="rgb(226,45,5)" fg:x="1017" fg:w="171"/><text x="81.4800%" y="399.50">indefinite::rules::nu..</text></g><g><title>regex::regex::string::Regex::is_match_at (17 samples, 1.36%)</title><rect x="93.5304%" y="373" width="1.3578%" height="15" fill="rgb(215,167,45)" fg:x="1171" fg:w="17"/><text x="93.7804%" y="383.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (15 samples, 1.20%)</title><rect x="93.6901%" y="357" width="1.1981%" height="15" fill="rgb(250,218,53)" fg:x="1173" fg:w="15"/><text x="93.9401%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (15 samples, 1.20%)</title><rect x="93.6901%" y="341" width="1.1981%" height="15" fill="rgb(207,140,0)" fg:x="1173" fg:w="15"/><text x="93.9401%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (15 samples, 1.20%)</title><rect x="93.6901%" y="325" width="1.1981%" height="15" fill="rgb(238,133,51)" fg:x="1173" fg:w="15"/><text x="93.9401%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="94.8083%" y="309" width="0.0799%" height="15" fill="rgb(218,203,53)" fg:x="1187" fg:w="1"/><text x="95.0583%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="94.8083%" y="293" width="0.0799%" height="15" fill="rgb(226,184,25)" fg:x="1187" fg:w="1"/><text x="95.0583%" y="303.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="94.8882%" y="341" width="0.0799%" height="15" fill="rgb(231,121,21)" fg:x="1188" fg:w="1"/><text x="95.1382%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Config::utf8_empty (1 samples, 0.08%)</title><rect x="94.8882%" y="325" width="0.0799%" height="15" fill="rgb(251,14,34)" fg:x="1188" fg:w="1"/><text x="95.1382%" y="335.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="95.0479%" y="309" width="0.0799%" height="15" fill="rgb(249,193,11)" fg:x="1190" fg:w="1"/><text x="95.2979%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="95.0479%" y="293" width="0.0799%" height="15" fill="rgb(220,172,37)" fg:x="1190" fg:w="1"/><text x="95.2979%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="95.1278%" y="309" width="0.3195%" height="15" fill="rgb(231,229,43)" fg:x="1191" fg:w="4"/><text x="95.3778%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="95.1278%" y="293" width="0.3195%" height="15" fill="rgb(250,161,5)" fg:x="1191" fg:w="4"/><text x="95.3778%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="95.2077%" y="277" width="0.2396%" height="15" fill="rgb(218,225,18)" fg:x="1192" fg:w="3"/><text x="95.4577%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="95.2077%" y="261" width="0.2396%" height="15" fill="rgb(245,45,42)" fg:x="1192" fg:w="3"/><text x="95.4577%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="95.2875%" y="245" width="0.1597%" height="15" fill="rgb(211,115,1)" fg:x="1193" fg:w="2"/><text x="95.5375%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.3674%" y="229" width="0.0799%" height="15" fill="rgb(248,133,52)" fg:x="1194" fg:w="1"/><text x="95.6174%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.3674%" y="213" width="0.0799%" height="15" fill="rgb(238,100,21)" fg:x="1194" fg:w="1"/><text x="95.6174%" y="223.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="95.4473%" y="309" width="0.0799%" height="15" fill="rgb(247,144,11)" fg:x="1195" fg:w="1"/><text x="95.6973%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.6070%" y="277" width="0.0799%" height="15" fill="rgb(206,164,16)" fg:x="1197" fg:w="1"/><text x="95.8570%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="95.5272%" y="293" width="0.2396%" height="15" fill="rgb(222,34,3)" fg:x="1196" fg:w="3"/><text x="95.7772%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="95.6869%" y="277" width="0.0799%" height="15" fill="rgb(248,82,4)" fg:x="1198" fg:w="1"/><text x="95.9369%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="95.7668%" y="293" width="0.4792%" height="15" fill="rgb(228,81,46)" fg:x="1199" fg:w="6"/><text x="96.0168%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="95.7668%" y="277" width="0.4792%" height="15" fill="rgb(227,67,47)" fg:x="1199" fg:w="6"/><text x="96.0168%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="96.1661%" y="261" width="0.0799%" height="15" fill="rgb(215,93,53)" fg:x="1204" fg:w="1"/><text x="96.4161%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.1661%" y="245" width="0.0799%" height="15" fill="rgb(248,194,39)" fg:x="1204" fg:w="1"/><text x="96.4161%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.2460%" y="261" width="0.0799%" height="15" fill="rgb(215,5,19)" fg:x="1205" fg:w="1"/><text x="96.4960%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="96.2460%" y="277" width="0.2396%" height="15" fill="rgb(226,215,51)" fg:x="1205" fg:w="3"/><text x="96.4960%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="96.3259%" y="261" width="0.1597%" height="15" fill="rgb(225,56,26)" fg:x="1206" fg:w="2"/><text x="96.5759%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="96.3259%" y="245" width="0.1597%" height="15" fill="rgb(222,75,29)" fg:x="1206" fg:w="2"/><text x="96.5759%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="96.3259%" y="229" width="0.1597%" height="15" fill="rgb(236,139,6)" fg:x="1206" fg:w="2"/><text x="96.5759%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="96.4856%" y="261" width="0.0799%" height="15" fill="rgb(223,137,36)" fg:x="1208" fg:w="1"/><text x="96.7356%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="96.5655%" y="261" width="0.5591%" height="15" fill="rgb(226,99,2)" fg:x="1209" fg:w="7"/><text x="96.8155%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.0447%" y="245" width="0.0799%" height="15" fill="rgb(206,133,23)" fg:x="1215" fg:w="1"/><text x="97.2947%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.0447%" y="229" width="0.0799%" height="15" fill="rgb(243,173,15)" fg:x="1215" fg:w="1"/><text x="97.2947%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.0447%" y="213" width="0.0799%" height="15" fill="rgb(228,69,28)" fg:x="1215" fg:w="1"/><text x="97.2947%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="97.1246%" y="261" width="0.0799%" height="15" fill="rgb(212,51,22)" fg:x="1216" fg:w="1"/><text x="97.3746%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.2045%" y="229" width="0.0799%" height="15" fill="rgb(227,113,0)" fg:x="1217" fg:w="1"/><text x="97.4545%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (23 samples, 1.84%)</title><rect x="95.5272%" y="309" width="1.8371%" height="15" fill="rgb(252,84,27)" fg:x="1196" fg:w="23"/><text x="95.7772%" y="319.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (14 samples, 1.12%)</title><rect x="96.2460%" y="293" width="1.1182%" height="15" fill="rgb(223,145,39)" fg:x="1205" fg:w="14"/><text x="96.4960%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.88%)</title><rect x="96.4856%" y="277" width="0.8786%" height="15" fill="rgb(239,219,30)" fg:x="1208" fg:w="11"/><text x="96.7356%" y="287.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="97.2045%" y="261" width="0.1597%" height="15" fill="rgb(224,196,39)" fg:x="1217" fg:w="2"/><text x="97.4545%" y="271.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (2 samples, 0.16%)</title><rect x="97.2045%" y="245" width="0.1597%" height="15" fill="rgb(205,35,43)" fg:x="1217" fg:w="2"/><text x="97.4545%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.2843%" y="229" width="0.0799%" height="15" fill="rgb(228,201,21)" fg:x="1218" fg:w="1"/><text x="97.5343%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.2843%" y="213" width="0.0799%" height="15" fill="rgb(237,118,16)" fg:x="1218" fg:w="1"/><text x="97.5343%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.2843%" y="197" width="0.0799%" height="15" fill="rgb(241,17,19)" fg:x="1218" fg:w="1"/><text x="97.5343%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="97.3642%" y="261" width="0.0799%" height="15" fill="rgb(214,10,25)" fg:x="1219" fg:w="1"/><text x="97.6142%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="97.4441%" y="261" width="0.0799%" height="15" fill="rgb(238,37,29)" fg:x="1220" fg:w="1"/><text x="97.6941%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="97.4441%" y="245" width="0.0799%" height="15" fill="rgb(253,83,25)" fg:x="1220" fg:w="1"/><text x="97.6941%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="97.3642%" y="309" width="0.2396%" height="15" fill="rgb(234,192,12)" fg:x="1219" fg:w="3"/><text x="97.6142%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="97.3642%" y="293" width="0.2396%" height="15" fill="rgb(241,216,45)" fg:x="1219" fg:w="3"/><text x="97.6142%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="97.3642%" y="277" width="0.2396%" height="15" fill="rgb(242,22,33)" fg:x="1219" fg:w="3"/><text x="97.6142%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="97.5240%" y="261" width="0.0799%" height="15" fill="rgb(231,105,49)" fg:x="1221" fg:w="1"/><text x="97.7740%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.5240%" y="245" width="0.0799%" height="15" fill="rgb(218,204,15)" fg:x="1221" fg:w="1"/><text x="97.7740%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.5240%" y="229" width="0.0799%" height="15" fill="rgb(235,138,41)" fg:x="1221" fg:w="1"/><text x="97.7740%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5240%" y="213" width="0.0799%" height="15" fill="rgb(246,0,9)" fg:x="1221" fg:w="1"/><text x="97.7740%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="97.6038%" y="277" width="0.1597%" height="15" fill="rgb(210,74,4)" fg:x="1222" fg:w="2"/><text x="97.8538%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="97.6038%" y="261" width="0.1597%" height="15" fill="rgb(250,60,41)" fg:x="1222" fg:w="2"/><text x="97.8538%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.6837%" y="245" width="0.0799%" height="15" fill="rgb(220,115,12)" fg:x="1223" fg:w="1"/><text x="97.9337%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.6837%" y="229" width="0.0799%" height="15" fill="rgb(237,100,13)" fg:x="1223" fg:w="1"/><text x="97.9337%" y="239.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="97.6837%" y="213" width="0.0799%" height="15" fill="rgb(213,55,26)" fg:x="1223" fg:w="1"/><text x="97.9337%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="97.7636%" y="277" width="0.0799%" height="15" fill="rgb(216,17,4)" fg:x="1224" fg:w="1"/><text x="98.0136%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="97.7636%" y="261" width="0.0799%" height="15" fill="rgb(220,153,47)" fg:x="1224" fg:w="1"/><text x="98.0136%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (38 samples, 3.04%)</title><rect x="94.8882%" y="357" width="3.0351%" height="15" fill="rgb(215,131,9)" fg:x="1188" fg:w="38"/><text x="95.1382%" y="367.50">&lt;re..</text></g><g><title>regex::builders::Builder::build_one_string (37 samples, 2.96%)</title><rect x="94.9681%" y="341" width="2.9553%" height="15" fill="rgb(233,46,42)" fg:x="1189" fg:w="37"/><text x="95.2181%" y="351.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (37 samples, 2.96%)</title><rect x="94.9681%" y="325" width="2.9553%" height="15" fill="rgb(226,86,7)" fg:x="1189" fg:w="37"/><text x="95.2181%" y="335.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="97.6038%" y="309" width="0.3195%" height="15" fill="rgb(239,226,21)" fg:x="1222" fg:w="4"/><text x="97.8538%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="97.6038%" y="293" width="0.3195%" height="15" fill="rgb(244,137,22)" fg:x="1222" fg:w="4"/><text x="97.8538%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="97.8435%" y="277" width="0.0799%" height="15" fill="rgb(211,139,35)" fg:x="1225" fg:w="1"/><text x="98.0935%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="98.0831%" y="309" width="0.1597%" height="15" fill="rgb(214,62,50)" fg:x="1228" fg:w="2"/><text x="98.3331%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="98.0831%" y="293" width="0.1597%" height="15" fill="rgb(212,113,44)" fg:x="1228" fg:w="2"/><text x="98.3331%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="98.0831%" y="277" width="0.1597%" height="15" fill="rgb(226,150,43)" fg:x="1228" fg:w="2"/><text x="98.3331%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.1629%" y="261" width="0.0799%" height="15" fill="rgb(250,71,37)" fg:x="1229" fg:w="1"/><text x="98.4129%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (5 samples, 0.40%)</title><rect x="97.9233%" y="357" width="0.3994%" height="15" fill="rgb(219,76,19)" fg:x="1226" fg:w="5"/><text x="98.1733%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.40%)</title><rect x="97.9233%" y="341" width="0.3994%" height="15" fill="rgb(250,39,11)" fg:x="1226" fg:w="5"/><text x="98.1733%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="98.0831%" y="325" width="0.2396%" height="15" fill="rgb(230,64,31)" fg:x="1228" fg:w="3"/><text x="98.3331%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="98.2428%" y="309" width="0.0799%" height="15" fill="rgb(208,222,23)" fg:x="1230" fg:w="1"/><text x="98.4928%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="98.3227%" y="325" width="0.0799%" height="15" fill="rgb(227,125,18)" fg:x="1231" fg:w="1"/><text x="98.5727%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="98.3227%" y="309" width="0.0799%" height="15" fill="rgb(234,210,9)" fg:x="1231" fg:w="1"/><text x="98.5727%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="98.3227%" y="293" width="0.0799%" height="15" fill="rgb(217,127,24)" fg:x="1231" fg:w="1"/><text x="98.5727%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.3227%" y="277" width="0.0799%" height="15" fill="rgb(239,141,48)" fg:x="1231" fg:w="1"/><text x="98.5727%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.3227%" y="261" width="0.0799%" height="15" fill="rgb(227,109,8)" fg:x="1231" fg:w="1"/><text x="98.5727%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.4026%" y="309" width="0.0799%" height="15" fill="rgb(235,184,23)" fg:x="1232" fg:w="1"/><text x="98.6526%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="98.3227%" y="357" width="0.2396%" height="15" fill="rgb(227,226,48)" fg:x="1231" fg:w="3"/><text x="98.5727%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="98.3227%" y="341" width="0.2396%" height="15" fill="rgb(206,150,11)" fg:x="1231" fg:w="3"/><text x="98.5727%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="98.4026%" y="325" width="0.1597%" height="15" fill="rgb(254,2,33)" fg:x="1232" fg:w="2"/><text x="98.6526%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="98.4824%" y="309" width="0.0799%" height="15" fill="rgb(243,160,20)" fg:x="1233" fg:w="1"/><text x="98.7324%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.4824%" y="293" width="0.0799%" height="15" fill="rgb(218,208,30)" fg:x="1233" fg:w="1"/><text x="98.7324%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.8019%" y="277" width="0.0799%" height="15" fill="rgb(224,120,49)" fg:x="1237" fg:w="1"/><text x="99.0519%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="98.6422%" y="293" width="0.3195%" height="15" fill="rgb(246,12,2)" fg:x="1235" fg:w="4"/><text x="98.8922%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="98.8818%" y="277" width="0.0799%" height="15" fill="rgb(236,117,3)" fg:x="1238" fg:w="1"/><text x="99.1318%" y="287.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (52 samples, 4.15%)</title><rect x="94.8882%" y="373" width="4.1534%" height="15" fill="rgb(216,128,52)" fg:x="1188" fg:w="52"/><text x="95.1382%" y="383.50">indef..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="98.5623%" y="357" width="0.4792%" height="15" fill="rgb(246,145,19)" fg:x="1234" fg:w="6"/><text x="98.8123%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="98.5623%" y="341" width="0.4792%" height="15" fill="rgb(222,11,46)" fg:x="1234" fg:w="6"/><text x="98.8123%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="98.6422%" y="325" width="0.3994%" height="15" fill="rgb(245,82,36)" fg:x="1235" fg:w="5"/><text x="98.8922%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="98.6422%" y="309" width="0.3994%" height="15" fill="rgb(250,73,51)" fg:x="1235" fg:w="5"/><text x="98.8922%" y="319.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="98.9617%" y="293" width="0.0799%" height="15" fill="rgb(221,189,23)" fg:x="1239" fg:w="1"/><text x="99.2117%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.9617%" y="277" width="0.0799%" height="15" fill="rgb(210,33,7)" fg:x="1239" fg:w="1"/><text x="99.2117%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.9617%" y="261" width="0.0799%" height="15" fill="rgb(210,107,22)" fg:x="1239" fg:w="1"/><text x="99.2117%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.9617%" y="245" width="0.0799%" height="15" fill="rgb(222,116,37)" fg:x="1239" fg:w="1"/><text x="99.2117%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (332 samples, 26.52%)</title><rect x="72.6038%" y="469" width="26.5176%" height="15" fill="rgb(254,17,48)" fg:x="909" fg:w="332"/><text x="72.8538%" y="479.50">&lt;&amp;kernel::model::entry::Entry as plugins_c..</text></g><g><title>plugins_core::looking::model::qualify_name (321 samples, 25.64%)</title><rect x="73.4824%" y="453" width="25.6390%" height="15" fill="rgb(224,36,32)" fg:x="920" fg:w="321"/><text x="73.7324%" y="463.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (321 samples, 25.64%)</title><rect x="73.4824%" y="437" width="25.6390%" height="15" fill="rgb(232,90,46)" fg:x="920" fg:w="321"/><text x="73.7324%" y="447.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (321 samples, 25.64%)</title><rect x="73.4824%" y="421" width="25.6390%" height="15" fill="rgb(241,66,40)" fg:x="920" fg:w="321"/><text x="73.7324%" y="431.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (320 samples, 25.56%)</title><rect x="73.5623%" y="405" width="25.5591%" height="15" fill="rgb(249,184,29)" fg:x="921" fg:w="320"/><text x="73.8123%" y="415.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (53 samples, 4.23%)</title><rect x="94.8882%" y="389" width="4.2332%" height="15" fill="rgb(231,181,1)" fg:x="1188" fg:w="53"/><text x="95.1382%" y="399.50">indef..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="99.0415%" y="373" width="0.0799%" height="15" fill="rgb(224,94,2)" fg:x="1240" fg:w="1"/><text x="99.2915%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="99.1214%" y="469" width="0.0799%" height="15" fill="rgb(229,170,15)" fg:x="1241" fg:w="1"/><text x="99.3714%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.1214%" y="453" width="0.0799%" height="15" fill="rgb(240,127,35)" fg:x="1241" fg:w="1"/><text x="99.3714%" y="463.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2013%" y="437" width="0.0799%" height="15" fill="rgb(248,196,34)" fg:x="1242" fg:w="1"/><text x="99.4513%" y="447.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="99.2812%" y="437" width="0.0799%" height="15" fill="rgb(236,137,7)" fg:x="1243" fg:w="1"/><text x="99.5312%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="99.2812%" y="421" width="0.0799%" height="15" fill="rgb(235,127,16)" fg:x="1243" fg:w="1"/><text x="99.5312%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.2812%" y="405" width="0.0799%" height="15" fill="rgb(250,192,54)" fg:x="1243" fg:w="1"/><text x="99.5312%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="99.2812%" y="389" width="0.0799%" height="15" fill="rgb(218,98,20)" fg:x="1243" fg:w="1"/><text x="99.5312%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="99.2812%" y="373" width="0.0799%" height="15" fill="rgb(230,176,47)" fg:x="1243" fg:w="1"/><text x="99.5312%" y="383.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="99.2812%" y="357" width="0.0799%" height="15" fill="rgb(244,2,33)" fg:x="1243" fg:w="1"/><text x="99.5312%" y="367.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2812%" y="341" width="0.0799%" height="15" fill="rgb(231,100,17)" fg:x="1243" fg:w="1"/><text x="99.5312%" y="351.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (384 samples, 30.67%)</title><rect x="68.7700%" y="645" width="30.6709%" height="15" fill="rgb(245,23,12)" fg:x="861" fg:w="384"/><text x="69.0200%" y="655.50">&lt;engine::perform::StandardPerformer as kernel::ac..</text></g><g><title>kernel::plugins::mw::apply_middleware (336 samples, 26.84%)</title><rect x="72.6038%" y="629" width="26.8371%" height="15" fill="rgb(249,55,22)" fg:x="909" fg:w="336"/><text x="72.8538%" y="639.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (336 samples, 26.84%)</title><rect x="72.6038%" y="613" width="26.8371%" height="15" fill="rgb(207,134,9)" fg:x="909" fg:w="336"/><text x="72.8538%" y="623.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (336 samples, 26.84%)</title><rect x="72.6038%" y="597" width="26.8371%" height="15" fill="rgb(218,134,0)" fg:x="909" fg:w="336"/><text x="72.8538%" y="607.50">&lt;plugins_dynlib::DynamicMiddleware as kerne..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (336 samples, 26.84%)</title><rect x="72.6038%" y="581" width="26.8371%" height="15" fill="rgb(213,212,33)" fg:x="909" fg:w="336"/><text x="72.8538%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (336 samples, 26.84%)</title><rect x="72.6038%" y="565" width="26.8371%" height="15" fill="rgb(252,106,18)" fg:x="909" fg:w="336"/><text x="72.8538%" y="575.50">core::ops::function::FnOnce::call_once{{vta..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (336 samples, 26.84%)</title><rect x="72.6038%" y="549" width="26.8371%" height="15" fill="rgb(208,126,42)" fg:x="909" fg:w="336"/><text x="72.8538%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (336 samples, 26.84%)</title><rect x="72.6038%" y="533" width="26.8371%" height="15" fill="rgb(246,175,29)" fg:x="909" fg:w="336"/><text x="72.8538%" y="543.50">core::ops::function::FnOnce::call_once{{vta..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (336 samples, 26.84%)</title><rect x="72.6038%" y="517" width="26.8371%" height="15" fill="rgb(215,13,50)" fg:x="909" fg:w="336"/><text x="72.8538%" y="527.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::funct..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (336 samples, 26.84%)</title><rect x="72.6038%" y="501" width="26.8371%" height="15" fill="rgb(216,172,15)" fg:x="909" fg:w="336"/><text x="72.8538%" y="511.50">&lt;plugins_core::looking::actions::LookAction..</text></g><g><title>plugins_core::looking::model::new_area_observation (336 samples, 26.84%)</title><rect x="72.6038%" y="485" width="26.8371%" height="15" fill="rgb(212,103,13)" fg:x="909" fg:w="336"/><text x="72.8538%" y="495.50">plugins_core::looking::model::new_area_obse..</text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="99.2013%" y="469" width="0.2396%" height="15" fill="rgb(231,171,36)" fg:x="1242" fg:w="3"/><text x="99.4513%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="99.2013%" y="453" width="0.2396%" height="15" fill="rgb(250,123,20)" fg:x="1242" fg:w="3"/><text x="99.4513%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.3610%" y="437" width="0.0799%" height="15" fill="rgb(212,53,50)" fg:x="1244" fg:w="1"/><text x="99.6110%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3610%" y="421" width="0.0799%" height="15" fill="rgb(243,54,12)" fg:x="1244" fg:w="1"/><text x="99.6110%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.3610%" y="405" width="0.0799%" height="15" fill="rgb(234,101,34)" fg:x="1244" fg:w="1"/><text x="99.6110%" y="415.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.3610%" y="389" width="0.0799%" height="15" fill="rgb(254,67,22)" fg:x="1244" fg:w="1"/><text x="99.6110%" y="399.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="99.3610%" y="373" width="0.0799%" height="15" fill="rgb(250,35,47)" fg:x="1244" fg:w="1"/><text x="99.6110%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.3610%" y="357" width="0.0799%" height="15" fill="rgb(226,126,38)" fg:x="1244" fg:w="1"/><text x="99.6110%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3610%" y="341" width="0.0799%" height="15" fill="rgb(216,138,53)" fg:x="1244" fg:w="1"/><text x="99.6110%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.4409%" y="549" width="0.0799%" height="15" fill="rgb(246,199,43)" fg:x="1245" fg:w="1"/><text x="99.6909%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.4409%" y="533" width="0.0799%" height="15" fill="rgb(232,125,11)" fg:x="1245" fg:w="1"/><text x="99.6909%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.4409%" y="517" width="0.0799%" height="15" fill="rgb(218,219,45)" fg:x="1245" fg:w="1"/><text x="99.6909%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4409%" y="501" width="0.0799%" height="15" fill="rgb(216,102,54)" fg:x="1245" fg:w="1"/><text x="99.6909%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4409%" y="485" width="0.0799%" height="15" fill="rgb(250,228,7)" fg:x="1245" fg:w="1"/><text x="99.6909%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="99.4409%" y="581" width="0.1597%" height="15" fill="rgb(226,125,25)" fg:x="1245" fg:w="2"/><text x="99.6909%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="99.4409%" y="565" width="0.1597%" height="15" fill="rgb(224,165,27)" fg:x="1245" fg:w="2"/><text x="99.6909%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="99.5208%" y="549" width="0.0799%" height="15" fill="rgb(233,86,3)" fg:x="1246" fg:w="1"/><text x="99.7708%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.5208%" y="533" width="0.0799%" height="15" fill="rgb(228,116,20)" fg:x="1246" fg:w="1"/><text x="99.7708%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.5208%" y="517" width="0.0799%" height="15" fill="rgb(209,192,17)" fg:x="1246" fg:w="1"/><text x="99.7708%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5208%" y="501" width="0.0799%" height="15" fill="rgb(224,88,34)" fg:x="1246" fg:w="1"/><text x="99.7708%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5208%" y="485" width="0.0799%" height="15" fill="rgb(233,38,6)" fg:x="1246" fg:w="1"/><text x="99.7708%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5208%" y="469" width="0.0799%" height="15" fill="rgb(212,59,30)" fg:x="1246" fg:w="1"/><text x="99.7708%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5208%" y="453" width="0.0799%" height="15" fill="rgb(213,80,3)" fg:x="1246" fg:w="1"/><text x="99.7708%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.5208%" y="437" width="0.0799%" height="15" fill="rgb(251,178,7)" fg:x="1246" fg:w="1"/><text x="99.7708%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5208%" y="421" width="0.0799%" height="15" fill="rgb(213,154,26)" fg:x="1246" fg:w="1"/><text x="99.7708%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.5208%" y="405" width="0.0799%" height="15" fill="rgb(238,165,49)" fg:x="1246" fg:w="1"/><text x="99.7708%" y="415.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="99.6006%" y="581" width="0.0799%" height="15" fill="rgb(248,91,46)" fg:x="1247" fg:w="1"/><text x="99.8506%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.6006%" y="565" width="0.0799%" height="15" fill="rgb(244,21,52)" fg:x="1247" fg:w="1"/><text x="99.8506%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.6006%" y="549" width="0.0799%" height="15" fill="rgb(247,122,20)" fg:x="1247" fg:w="1"/><text x="99.8506%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.6006%" y="533" width="0.0799%" height="15" fill="rgb(218,27,9)" fg:x="1247" fg:w="1"/><text x="99.8506%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.6006%" y="517" width="0.0799%" height="15" fill="rgb(246,7,6)" fg:x="1247" fg:w="1"/><text x="99.8506%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.6006%" y="501" width="0.0799%" height="15" fill="rgb(227,135,54)" fg:x="1247" fg:w="1"/><text x="99.8506%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="99.6006%" y="485" width="0.0799%" height="15" fill="rgb(247,14,11)" fg:x="1247" fg:w="1"/><text x="99.8506%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.6006%" y="469" width="0.0799%" height="15" fill="rgb(206,149,34)" fg:x="1247" fg:w="1"/><text x="99.8506%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6805%" y="453" width="0.0799%" height="15" fill="rgb(227,228,4)" fg:x="1248" fg:w="1"/><text x="99.9305%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6805%" y="437" width="0.0799%" height="15" fill="rgb(238,218,28)" fg:x="1248" fg:w="1"/><text x="99.9305%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6805%" y="421" width="0.0799%" height="15" fill="rgb(252,86,40)" fg:x="1248" fg:w="1"/><text x="99.9305%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6805%" y="405" width="0.0799%" height="15" fill="rgb(251,225,11)" fg:x="1248" fg:w="1"/><text x="99.9305%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.40%)</title><rect x="99.4409%" y="613" width="0.3994%" height="15" fill="rgb(206,46,49)" fg:x="1245" fg:w="5"/><text x="99.6909%" y="623.50"></text></g><g><title>engine::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="99.4409%" y="597" width="0.3994%" height="15" fill="rgb(245,128,24)" fg:x="1245" fg:w="5"/><text x="99.6909%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::from_str (2 samples, 0.16%)</title><rect x="99.6805%" y="581" width="0.1597%" height="15" fill="rgb(219,177,34)" fg:x="1248" fg:w="2"/><text x="99.9305%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.6805%" y="565" width="0.1597%" height="15" fill="rgb(218,60,48)" fg:x="1248" fg:w="2"/><text x="99.9305%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6805%" y="549" width="0.1597%" height="15" fill="rgb(221,11,5)" fg:x="1248" fg:w="2"/><text x="99.9305%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.6805%" y="533" width="0.1597%" height="15" fill="rgb(220,148,13)" fg:x="1248" fg:w="2"/><text x="99.9305%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6805%" y="517" width="0.1597%" height="15" fill="rgb(210,16,3)" fg:x="1248" fg:w="2"/><text x="99.9305%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.6805%" y="501" width="0.1597%" height="15" fill="rgb(236,80,2)" fg:x="1248" fg:w="2"/><text x="99.9305%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6805%" y="485" width="0.1597%" height="15" fill="rgb(239,129,19)" fg:x="1248" fg:w="2"/><text x="99.9305%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6805%" y="469" width="0.1597%" height="15" fill="rgb(220,106,35)" fg:x="1248" fg:w="2"/><text x="99.9305%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.7604%" y="453" width="0.0799%" height="15" fill="rgb(252,139,45)" fg:x="1249" fg:w="1"/><text x="100.0104%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.7604%" y="437" width="0.0799%" height="15" fill="rgb(229,8,36)" fg:x="1249" fg:w="1"/><text x="100.0104%" y="447.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (390 samples, 31.15%)</title><rect x="68.7700%" y="677" width="31.1502%" height="15" fill="rgb(230,126,33)" fg:x="861" fg:w="390"/><text x="69.0200%" y="687.50">&lt;plugins_core::looking::LookingPlugin as kernel::p..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (390 samples, 31.15%)</title><rect x="68.7700%" y="661" width="31.1502%" height="15" fill="rgb(239,140,21)" fg:x="861" fg:w="390"/><text x="69.0200%" y="671.50">&lt;engine::perform::StandardPerformer as kernel::act..</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (6 samples, 0.48%)</title><rect x="99.4409%" y="645" width="0.4792%" height="15" fill="rgb(254,104,9)" fg:x="1245" fg:w="6"/><text x="99.6909%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (6 samples, 0.48%)</title><rect x="99.4409%" y="629" width="0.4792%" height="15" fill="rgb(239,52,14)" fg:x="1245" fg:w="6"/><text x="99.6909%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="99.8403%" y="613" width="0.0799%" height="15" fill="rgb(208,227,44)" fg:x="1250" fg:w="1"/><text x="100.0903%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.8403%" y="597" width="0.0799%" height="15" fill="rgb(246,18,19)" fg:x="1250" fg:w="1"/><text x="100.0903%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.8403%" y="581" width="0.0799%" height="15" fill="rgb(235,228,25)" fg:x="1250" fg:w="1"/><text x="100.0903%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.8403%" y="565" width="0.0799%" height="15" fill="rgb(240,156,20)" fg:x="1250" fg:w="1"/><text x="100.0903%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.8403%" y="549" width="0.0799%" height="15" fill="rgb(224,8,20)" fg:x="1250" fg:w="1"/><text x="100.0903%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.8403%" y="533" width="0.0799%" height="15" fill="rgb(214,12,52)" fg:x="1250" fg:w="1"/><text x="100.0903%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.8403%" y="517" width="0.0799%" height="15" fill="rgb(211,220,47)" fg:x="1250" fg:w="1"/><text x="100.0903%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.8403%" y="501" width="0.0799%" height="15" fill="rgb(250,173,5)" fg:x="1250" fg:w="1"/><text x="100.0903%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.8403%" y="485" width="0.0799%" height="15" fill="rgb(250,125,52)" fg:x="1250" fg:w="1"/><text x="100.0903%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.8403%" y="469" width="0.0799%" height="15" fill="rgb(209,133,18)" fg:x="1250" fg:w="1"/><text x="100.0903%" y="479.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="99.8403%" y="453" width="0.0799%" height="15" fill="rgb(216,173,22)" fg:x="1250" fg:w="1"/><text x="100.0903%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="99.8403%" y="437" width="0.0799%" height="15" fill="rgb(205,3,22)" fg:x="1250" fg:w="1"/><text x="100.0903%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="99.8403%" y="421" width="0.0799%" height="15" fill="rgb(248,22,20)" fg:x="1250" fg:w="1"/><text x="100.0903%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="99.8403%" y="405" width="0.0799%" height="15" fill="rgb(233,6,29)" fg:x="1250" fg:w="1"/><text x="100.0903%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.8403%" y="389" width="0.0799%" height="15" fill="rgb(240,22,54)" fg:x="1250" fg:w="1"/><text x="100.0903%" y="399.50"></text></g><g><title>all (1,252 samples, 100%)</title><rect x="0.0000%" y="1157" width="100.0000%" height="15" fill="rgb(231,133,32)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="1167.50"></text></g><g><title>simple-484c7248 (1,252 samples, 100.00%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(248,193,4)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="1151.50">simple-484c7248</text></g><g><title>_start (1,252 samples, 100.00%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(211,178,46)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="1135.50">_start</text></g><g><title>__libc_start_main (1,252 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(224,5,42)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="1119.50">__libc_start_main</text></g><g><title>main (1,252 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(239,176,25)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="1103.50">main</text></g><g><title>std::rt::lang_start_internal (1,252 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(245,187,50)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="1087.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,252 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(248,24,15)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="1071.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,252 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(205,166,13)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="1055.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,252 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(208,114,23)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="1039.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,252 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(239,127,18)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,252 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(219,154,28)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,252 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(225,157,23)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,252 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(219,8,6)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,252 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(212,47,6)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="959.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,252 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(224,190,4)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="943.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,252 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(239,183,29)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="927.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,252 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(213,57,7)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="911.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,252 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(216,148,1)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="895.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,252 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(236,182,29)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="879.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (476 samples, 38.02%)</title><rect x="61.9808%" y="853" width="38.0192%" height="15" fill="rgb(244,120,48)" fg:x="776" fg:w="476"/><text x="62.2308%" y="863.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Ro..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (476 samples, 38.02%)</title><rect x="61.9808%" y="837" width="38.0192%" height="15" fill="rgb(206,71,34)" fg:x="776" fg:w="476"/><text x="62.2308%" y="847.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (476 samples, 38.02%)</title><rect x="61.9808%" y="821" width="38.0192%" height="15" fill="rgb(242,32,6)" fg:x="776" fg:w="476"/><text x="62.2308%" y="831.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (392 samples, 31.31%)</title><rect x="68.6901%" y="805" width="31.3099%" height="15" fill="rgb(241,35,3)" fg:x="860" fg:w="392"/><text x="68.9401%" y="815.50">engine::session::Session::evaluate_and_perform</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (392 samples, 31.31%)</title><rect x="68.6901%" y="789" width="31.3099%" height="15" fill="rgb(222,62,19)" fg:x="860" fg:w="392"/><text x="68.9401%" y="799.50">&lt;engine::session::Session as kernel::actions::Perfo..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (392 samples, 31.31%)</title><rect x="68.6901%" y="773" width="31.3099%" height="15" fill="rgb(223,110,41)" fg:x="860" fg:w="392"/><text x="68.9401%" y="783.50">&lt;engine::perform::StandardPerformer as kernel::acti..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (392 samples, 31.31%)</title><rect x="68.6901%" y="757" width="31.3099%" height="15" fill="rgb(208,224,4)" fg:x="860" fg:w="392"/><text x="68.9401%" y="767.50">engine::perform::StandardPerformer::evaluate_and_pe..</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (392 samples, 31.31%)</title><rect x="68.6901%" y="741" width="31.3099%" height="15" fill="rgb(241,137,19)" fg:x="860" fg:w="392"/><text x="68.9401%" y="751.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins..</text></g><g><title>core::iter::adapters::try_process (391 samples, 31.23%)</title><rect x="68.7700%" y="725" width="31.2300%" height="15" fill="rgb(244,24,17)" fg:x="861" fg:w="391"/><text x="69.0200%" y="735.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (391 samples, 31.23%)</title><rect x="68.7700%" y="709" width="31.2300%" height="15" fill="rgb(245,178,49)" fg:x="861" fg:w="391"/><text x="69.0200%" y="719.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter:..</text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (391 samples, 31.23%)</title><rect x="68.7700%" y="693" width="31.2300%" height="15" fill="rgb(219,160,38)" fg:x="861" fg:w="391"/><text x="69.0200%" y="703.50">&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="99.9201%" y="677" width="0.0799%" height="15" fill="rgb(228,137,14)" fg:x="1251" fg:w="1"/><text x="100.1701%" y="687.50"></text></g></svg></svg>