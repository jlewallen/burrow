<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1110" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1093.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1093.00"> </text><svg id="frames" x="10" width="1180" total_samples="1234"><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.1621%" y="677" width="0.0810%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="1"/><text x="0.4121%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1621%" y="661" width="0.0810%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.4121%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.2431%" y="677" width="0.0810%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.4931%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0810%" y="709" width="0.3241%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="4"/><text x="0.3310%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.0810%" y="693" width="0.3241%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="4"/><text x="0.3310%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.3241%" y="677" width="0.0810%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="1"/><text x="0.5741%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6483%" y="645" width="0.0810%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="1"/><text x="0.8983%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="0.4862%" y="693" width="0.3241%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="4"/><text x="0.7362%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.5673%" y="677" width="0.2431%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="3"/><text x="0.8173%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="0.6483%" y="661" width="0.1621%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="2"/><text x="0.8983%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.08%)</title><rect x="0.7293%" y="645" width="0.0810%" height="15" fill="rgb(250,228,42)" fg:x="9" fg:w="1"/><text x="0.9793%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="0.7293%" y="629" width="0.0810%" height="15" fill="rgb(240,193,28)" fg:x="9" fg:w="1"/><text x="0.9793%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7293%" y="613" width="0.0810%" height="15" fill="rgb(216,20,37)" fg:x="9" fg:w="1"/><text x="0.9793%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.8914%" y="613" width="0.0810%" height="15" fill="rgb(206,188,39)" fg:x="11" fg:w="1"/><text x="1.1414%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8914%" y="597" width="0.0810%" height="15" fill="rgb(217,207,13)" fg:x="11" fg:w="1"/><text x="1.1414%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.9724%" y="597" width="0.0810%" height="15" fill="rgb(231,73,38)" fg:x="12" fg:w="1"/><text x="1.2224%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.0535%" y="565" width="0.0810%" height="15" fill="rgb(225,20,46)" fg:x="13" fg:w="1"/><text x="1.3035%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.8914%" y="629" width="0.3241%" height="15" fill="rgb(210,31,41)" fg:x="11" fg:w="4"/><text x="1.1414%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.9724%" y="613" width="0.2431%" height="15" fill="rgb(221,200,47)" fg:x="12" fg:w="3"/><text x="1.2224%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.0535%" y="597" width="0.1621%" height="15" fill="rgb(226,26,5)" fg:x="13" fg:w="2"/><text x="1.3035%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.0535%" y="581" width="0.1621%" height="15" fill="rgb(249,33,26)" fg:x="13" fg:w="2"/><text x="1.3035%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.1345%" y="565" width="0.0810%" height="15" fill="rgb(235,183,28)" fg:x="14" fg:w="1"/><text x="1.3845%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.1345%" y="549" width="0.0810%" height="15" fill="rgb(221,5,38)" fg:x="14" fg:w="1"/><text x="1.3845%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.2156%" y="581" width="0.0810%" height="15" fill="rgb(247,18,42)" fg:x="15" fg:w="1"/><text x="1.4656%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.2156%" y="565" width="0.0810%" height="15" fill="rgb(241,131,45)" fg:x="15" fg:w="1"/><text x="1.4656%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.2156%" y="549" width="0.0810%" height="15" fill="rgb(249,31,29)" fg:x="15" fg:w="1"/><text x="1.4656%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.2966%" y="581" width="0.0810%" height="15" fill="rgb(225,111,53)" fg:x="16" fg:w="1"/><text x="1.5466%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.13%)</title><rect x="0.4052%" y="709" width="1.1345%" height="15" fill="rgb(238,160,17)" fg:x="5" fg:w="14"/><text x="0.6552%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (9 samples, 0.73%)</title><rect x="0.8104%" y="693" width="0.7293%" height="15" fill="rgb(214,148,48)" fg:x="10" fg:w="9"/><text x="1.0604%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.73%)</title><rect x="0.8104%" y="677" width="0.7293%" height="15" fill="rgb(232,36,49)" fg:x="10" fg:w="9"/><text x="1.0604%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (8 samples, 0.65%)</title><rect x="0.8914%" y="661" width="0.6483%" height="15" fill="rgb(209,103,24)" fg:x="11" fg:w="8"/><text x="1.1414%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.65%)</title><rect x="0.8914%" y="645" width="0.6483%" height="15" fill="rgb(229,88,8)" fg:x="11" fg:w="8"/><text x="1.1414%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="1.2156%" y="629" width="0.3241%" height="15" fill="rgb(213,181,19)" fg:x="15" fg:w="4"/><text x="1.4656%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="1.2156%" y="613" width="0.3241%" height="15" fill="rgb(254,191,54)" fg:x="15" fg:w="4"/><text x="1.4656%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="1.2156%" y="597" width="0.3241%" height="15" fill="rgb(241,83,37)" fg:x="15" fg:w="4"/><text x="1.4656%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.3776%" y="581" width="0.1621%" height="15" fill="rgb(233,36,39)" fg:x="17" fg:w="2"/><text x="1.6276%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.4587%" y="565" width="0.0810%" height="15" fill="rgb(226,3,54)" fg:x="18" fg:w="1"/><text x="1.7087%" y="575.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputTakeAtPosition&gt;::split_at_position1_complete (1 samples, 0.08%)</title><rect x="1.6207%" y="629" width="0.0810%" height="15" fill="rgb(245,192,40)" fg:x="20" fg:w="1"/><text x="1.8707%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.8639%" y="549" width="0.0810%" height="15" fill="rgb(238,167,29)" fg:x="23" fg:w="1"/><text x="2.1139%" y="559.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="1.8639%" y="581" width="0.1621%" height="15" fill="rgb(232,182,51)" fg:x="23" fg:w="2"/><text x="2.1139%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="1.8639%" y="565" width="0.1621%" height="15" fill="rgb(231,60,39)" fg:x="23" fg:w="2"/><text x="2.1139%" y="575.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="1.9449%" y="549" width="0.0810%" height="15" fill="rgb(208,69,12)" fg:x="24" fg:w="1"/><text x="2.1949%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="1.9449%" y="533" width="0.0810%" height="15" fill="rgb(235,93,37)" fg:x="24" fg:w="1"/><text x="2.1949%" y="543.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (4 samples, 0.32%)</title><rect x="1.7828%" y="613" width="0.3241%" height="15" fill="rgb(213,116,39)" fg:x="22" fg:w="4"/><text x="2.0328%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (4 samples, 0.32%)</title><rect x="1.7828%" y="597" width="0.3241%" height="15" fill="rgb(222,207,29)" fg:x="22" fg:w="4"/><text x="2.0328%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.0259%" y="581" width="0.0810%" height="15" fill="rgb(206,96,30)" fg:x="25" fg:w="1"/><text x="2.2759%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.0259%" y="565" width="0.0810%" height="15" fill="rgb(218,138,4)" fg:x="25" fg:w="1"/><text x="2.2759%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.0259%" y="549" width="0.0810%" height="15" fill="rgb(250,191,14)" fg:x="25" fg:w="1"/><text x="2.2759%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.0259%" y="533" width="0.0810%" height="15" fill="rgb(239,60,40)" fg:x="25" fg:w="1"/><text x="2.2759%" y="543.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="2.1070%" y="613" width="0.0810%" height="15" fill="rgb(206,27,48)" fg:x="26" fg:w="1"/><text x="2.3570%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="2.1070%" y="597" width="0.0810%" height="15" fill="rgb(225,35,8)" fg:x="26" fg:w="1"/><text x="2.3570%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="2.1880%" y="613" width="0.0810%" height="15" fill="rgb(250,213,24)" fg:x="27" fg:w="1"/><text x="2.4380%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="2.1880%" y="597" width="0.0810%" height="15" fill="rgb(247,123,22)" fg:x="27" fg:w="1"/><text x="2.4380%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.1880%" y="581" width="0.0810%" height="15" fill="rgb(231,138,38)" fg:x="27" fg:w="1"/><text x="2.4380%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.1880%" y="565" width="0.0810%" height="15" fill="rgb(231,145,46)" fg:x="27" fg:w="1"/><text x="2.4380%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.1880%" y="549" width="0.0810%" height="15" fill="rgb(251,118,11)" fg:x="27" fg:w="1"/><text x="2.4380%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.1880%" y="533" width="0.0810%" height="15" fill="rgb(217,147,25)" fg:x="27" fg:w="1"/><text x="2.4380%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.1880%" y="517" width="0.0810%" height="15" fill="rgb(247,81,37)" fg:x="27" fg:w="1"/><text x="2.4380%" y="527.50"></text></g><g><title>&lt;plugins_rune::actions::RuneAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.2690%" y="581" width="0.0810%" height="15" fill="rgb(209,12,38)" fg:x="28" fg:w="1"/><text x="2.5190%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.2690%" y="565" width="0.0810%" height="15" fill="rgb(227,1,9)" fg:x="28" fg:w="1"/><text x="2.5190%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (10 samples, 0.81%)</title><rect x="1.7018%" y="629" width="0.8104%" height="15" fill="rgb(248,47,43)" fg:x="21" fg:w="10"/><text x="1.9518%" y="639.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="2.2690%" y="613" width="0.2431%" height="15" fill="rgb(221,10,30)" fg:x="28" fg:w="3"/><text x="2.5190%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="2.2690%" y="597" width="0.2431%" height="15" fill="rgb(210,229,1)" fg:x="28" fg:w="3"/><text x="2.5190%" y="607.50"></text></g><g><title>replies::identifier_to_key (2 samples, 0.16%)</title><rect x="2.3501%" y="581" width="0.1621%" height="15" fill="rgb(222,148,37)" fg:x="29" fg:w="2"/><text x="2.6001%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.4311%" y="565" width="0.0810%" height="15" fill="rgb(234,67,33)" fg:x="30" fg:w="1"/><text x="2.6811%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.4311%" y="549" width="0.0810%" height="15" fill="rgb(247,98,35)" fg:x="30" fg:w="1"/><text x="2.6811%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.4311%" y="533" width="0.0810%" height="15" fill="rgb(247,138,52)" fg:x="30" fg:w="1"/><text x="2.6811%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.5122%" y="581" width="0.0810%" height="15" fill="rgb(213,79,30)" fg:x="31" fg:w="1"/><text x="2.7622%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.5122%" y="565" width="0.0810%" height="15" fill="rgb(246,177,23)" fg:x="31" fg:w="1"/><text x="2.7622%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="2.5122%" y="549" width="0.0810%" height="15" fill="rgb(230,62,27)" fg:x="31" fg:w="1"/><text x="2.7622%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="2.5122%" y="533" width="0.0810%" height="15" fill="rgb(216,154,8)" fg:x="31" fg:w="1"/><text x="2.7622%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="2.5122%" y="517" width="0.0810%" height="15" fill="rgb(244,35,45)" fg:x="31" fg:w="1"/><text x="2.7622%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.5122%" y="501" width="0.0810%" height="15" fill="rgb(251,115,12)" fg:x="31" fg:w="1"/><text x="2.7622%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.5122%" y="485" width="0.0810%" height="15" fill="rgb(240,54,50)" fg:x="31" fg:w="1"/><text x="2.7622%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="2.5122%" y="469" width="0.0810%" height="15" fill="rgb(233,84,52)" fg:x="31" fg:w="1"/><text x="2.7622%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="2.5122%" y="453" width="0.0810%" height="15" fill="rgb(207,117,47)" fg:x="31" fg:w="1"/><text x="2.7622%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="2.5122%" y="437" width="0.0810%" height="15" fill="rgb(249,43,39)" fg:x="31" fg:w="1"/><text x="2.7622%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="2.5122%" y="421" width="0.0810%" height="15" fill="rgb(209,38,44)" fg:x="31" fg:w="1"/><text x="2.7622%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.5122%" y="405" width="0.0810%" height="15" fill="rgb(236,212,23)" fg:x="31" fg:w="1"/><text x="2.7622%" y="415.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (3 samples, 0.24%)</title><rect x="2.5122%" y="613" width="0.2431%" height="15" fill="rgb(242,79,21)" fg:x="31" fg:w="3"/><text x="2.7622%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="2.5122%" y="597" width="0.2431%" height="15" fill="rgb(211,96,35)" fg:x="31" fg:w="3"/><text x="2.7622%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="2.5932%" y="581" width="0.1621%" height="15" fill="rgb(253,215,40)" fg:x="32" fg:w="2"/><text x="2.8432%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.6742%" y="565" width="0.0810%" height="15" fill="rgb(211,81,21)" fg:x="33" fg:w="1"/><text x="2.9242%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.6742%" y="549" width="0.0810%" height="15" fill="rgb(208,190,38)" fg:x="33" fg:w="1"/><text x="2.9242%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="2.6742%" y="533" width="0.0810%" height="15" fill="rgb(235,213,38)" fg:x="33" fg:w="1"/><text x="2.9242%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="2.6742%" y="517" width="0.0810%" height="15" fill="rgb(237,122,38)" fg:x="33" fg:w="1"/><text x="2.9242%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="2.6742%" y="501" width="0.0810%" height="15" fill="rgb(244,218,35)" fg:x="33" fg:w="1"/><text x="2.9242%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="2.6742%" y="485" width="0.0810%" height="15" fill="rgb(240,68,47)" fg:x="33" fg:w="1"/><text x="2.9242%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="2.6742%" y="469" width="0.0810%" height="15" fill="rgb(210,16,53)" fg:x="33" fg:w="1"/><text x="2.9242%" y="479.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.41%)</title><rect x="2.7553%" y="597" width="0.4052%" height="15" fill="rgb(235,124,12)" fg:x="34" fg:w="5"/><text x="3.0053%" y="607.50"></text></g><g><title>glob::fill_todo (5 samples, 0.41%)</title><rect x="2.7553%" y="581" width="0.4052%" height="15" fill="rgb(224,169,11)" fg:x="34" fg:w="5"/><text x="3.0053%" y="591.50"></text></g><g><title>glob::is_dir (4 samples, 0.32%)</title><rect x="2.8363%" y="565" width="0.3241%" height="15" fill="rgb(250,166,2)" fg:x="35" fg:w="4"/><text x="3.0863%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="2.8363%" y="549" width="0.3241%" height="15" fill="rgb(242,216,29)" fg:x="35" fg:w="4"/><text x="3.0863%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="2.8363%" y="533" width="0.3241%" height="15" fill="rgb(230,116,27)" fg:x="35" fg:w="4"/><text x="3.0863%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="2.8363%" y="517" width="0.3241%" height="15" fill="rgb(228,99,48)" fg:x="35" fg:w="4"/><text x="3.0863%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="2.8363%" y="501" width="0.3241%" height="15" fill="rgb(253,11,6)" fg:x="35" fg:w="4"/><text x="3.0863%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.32%)</title><rect x="2.8363%" y="485" width="0.3241%" height="15" fill="rgb(247,143,39)" fg:x="35" fg:w="4"/><text x="3.0863%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.32%)</title><rect x="2.8363%" y="469" width="0.3241%" height="15" fill="rgb(236,97,10)" fg:x="35" fg:w="4"/><text x="3.0863%" y="479.50"></text></g><g><title>statx (4 samples, 0.32%)</title><rect x="2.8363%" y="453" width="0.3241%" height="15" fill="rgb(233,208,19)" fg:x="35" fg:w="4"/><text x="3.0863%" y="463.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="3.1605%" y="549" width="0.0810%" height="15" fill="rgb(216,164,2)" fg:x="39" fg:w="1"/><text x="3.4105%" y="559.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="3.1605%" y="565" width="0.1621%" height="15" fill="rgb(220,129,5)" fg:x="39" fg:w="2"/><text x="3.4105%" y="575.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.08%)</title><rect x="3.2415%" y="549" width="0.0810%" height="15" fill="rgb(242,17,10)" fg:x="40" fg:w="1"/><text x="3.4915%" y="559.50"></text></g><g><title>std::ffi::os_str::OsString::push (1 samples, 0.08%)</title><rect x="3.2415%" y="533" width="0.0810%" height="15" fill="rgb(242,107,0)" fg:x="40" fg:w="1"/><text x="3.4915%" y="543.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="3.2415%" y="517" width="0.0810%" height="15" fill="rgb(251,28,31)" fg:x="40" fg:w="1"/><text x="3.4915%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="3.2415%" y="501" width="0.0810%" height="15" fill="rgb(233,223,10)" fg:x="40" fg:w="1"/><text x="3.4915%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="3.2415%" y="485" width="0.0810%" height="15" fill="rgb(215,21,27)" fg:x="40" fg:w="1"/><text x="3.4915%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="3.2415%" y="469" width="0.0810%" height="15" fill="rgb(232,23,21)" fg:x="40" fg:w="1"/><text x="3.4915%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="3.2415%" y="453" width="0.0810%" height="15" fill="rgb(244,5,23)" fg:x="40" fg:w="1"/><text x="3.4915%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="3.2415%" y="437" width="0.0810%" height="15" fill="rgb(226,81,46)" fg:x="40" fg:w="1"/><text x="3.4915%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.2415%" y="421" width="0.0810%" height="15" fill="rgb(247,70,30)" fg:x="40" fg:w="1"/><text x="3.4915%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="3.2415%" y="405" width="0.0810%" height="15" fill="rgb(212,68,19)" fg:x="40" fg:w="1"/><text x="3.4915%" y="415.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (11 samples, 0.89%)</title><rect x="2.5122%" y="629" width="0.8914%" height="15" fill="rgb(240,187,13)" fg:x="31" fg:w="11"/><text x="2.7622%" y="639.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (8 samples, 0.65%)</title><rect x="2.7553%" y="613" width="0.6483%" height="15" fill="rgb(223,113,26)" fg:x="34" fg:w="8"/><text x="3.0053%" y="623.50"></text></g><g><title>glob::glob (3 samples, 0.24%)</title><rect x="3.1605%" y="597" width="0.2431%" height="15" fill="rgb(206,192,2)" fg:x="39" fg:w="3"/><text x="3.4105%" y="607.50"></text></g><g><title>glob::glob_with (3 samples, 0.24%)</title><rect x="3.1605%" y="581" width="0.2431%" height="15" fill="rgb(241,108,4)" fg:x="39" fg:w="3"/><text x="3.4105%" y="591.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="3.3225%" y="565" width="0.0810%" height="15" fill="rgb(247,173,49)" fg:x="41" fg:w="1"/><text x="3.5725%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.3225%" y="549" width="0.0810%" height="15" fill="rgb(224,114,35)" fg:x="41" fg:w="1"/><text x="3.5725%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.3225%" y="533" width="0.0810%" height="15" fill="rgb(245,159,27)" fg:x="41" fg:w="1"/><text x="3.5725%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.3225%" y="517" width="0.0810%" height="15" fill="rgb(245,172,44)" fg:x="41" fg:w="1"/><text x="3.5725%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.3225%" y="501" width="0.0810%" height="15" fill="rgb(236,23,11)" fg:x="41" fg:w="1"/><text x="3.5725%" y="511.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="3.4036%" y="613" width="0.3241%" height="15" fill="rgb(205,117,38)" fg:x="42" fg:w="4"/><text x="3.6536%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (6 samples, 0.49%)</title><rect x="3.4036%" y="629" width="0.4862%" height="15" fill="rgb(237,72,25)" fg:x="42" fg:w="6"/><text x="3.6536%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="3.7277%" y="613" width="0.1621%" height="15" fill="rgb(244,70,9)" fg:x="46" fg:w="2"/><text x="3.9777%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="3.7277%" y="597" width="0.1621%" height="15" fill="rgb(217,125,39)" fg:x="46" fg:w="2"/><text x="3.9777%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (29 samples, 2.35%)</title><rect x="1.6207%" y="645" width="2.3501%" height="15" fill="rgb(235,36,10)" fg:x="20" fg:w="29"/><text x="1.8707%" y="655.50">k..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="3.8898%" y="629" width="0.0810%" height="15" fill="rgb(251,123,47)" fg:x="48" fg:w="1"/><text x="4.1398%" y="639.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="3.8898%" y="613" width="0.0810%" height="15" fill="rgb(221,13,13)" fg:x="48" fg:w="1"/><text x="4.1398%" y="623.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::middleware (1 samples, 0.08%)</title><rect x="4.1329%" y="613" width="0.0810%" height="15" fill="rgb(238,131,9)" fg:x="51" fg:w="1"/><text x="4.3829%" y="623.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="4.1329%" y="597" width="0.0810%" height="15" fill="rgb(211,50,8)" fg:x="51" fg:w="1"/><text x="4.3829%" y="607.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (34 samples, 2.76%)</title><rect x="1.5397%" y="709" width="2.7553%" height="15" fill="rgb(245,182,24)" fg:x="19" fg:w="34"/><text x="1.7897%" y="719.50">&lt;e..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (34 samples, 2.76%)</title><rect x="1.5397%" y="693" width="2.7553%" height="15" fill="rgb(242,14,37)" fg:x="19" fg:w="34"/><text x="1.7897%" y="703.50">en..</text></g><g><title>engine::session::Session::new (34 samples, 2.76%)</title><rect x="1.5397%" y="677" width="2.7553%" height="15" fill="rgb(246,228,12)" fg:x="19" fg:w="34"/><text x="1.7897%" y="687.50">en..</text></g><g><title>engine::session::Session::initialize (33 samples, 2.67%)</title><rect x="1.6207%" y="661" width="2.6742%" height="15" fill="rgb(213,55,15)" fg:x="20" fg:w="33"/><text x="1.8707%" y="671.50">en..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (4 samples, 0.32%)</title><rect x="3.9708%" y="645" width="0.3241%" height="15" fill="rgb(209,9,3)" fg:x="49" fg:w="4"/><text x="4.2208%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="3.9708%" y="629" width="0.3241%" height="15" fill="rgb(230,59,30)" fg:x="49" fg:w="4"/><text x="4.2208%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.2139%" y="613" width="0.0810%" height="15" fill="rgb(209,121,21)" fg:x="52" fg:w="1"/><text x="4.4639%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.2139%" y="597" width="0.0810%" height="15" fill="rgb(220,109,13)" fg:x="52" fg:w="1"/><text x="4.4639%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.2139%" y="581" width="0.0810%" height="15" fill="rgb(232,18,1)" fg:x="52" fg:w="1"/><text x="4.4639%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.2950%" y="693" width="0.0810%" height="15" fill="rgb(215,41,42)" fg:x="53" fg:w="1"/><text x="4.5450%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="4.2950%" y="677" width="0.0810%" height="15" fill="rgb(224,123,36)" fg:x="53" fg:w="1"/><text x="4.5450%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.2950%" y="661" width="0.0810%" height="15" fill="rgb(240,125,3)" fg:x="53" fg:w="1"/><text x="4.5450%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.2950%" y="645" width="0.0810%" height="15" fill="rgb(205,98,50)" fg:x="53" fg:w="1"/><text x="4.5450%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="4.3760%" y="677" width="0.0810%" height="15" fill="rgb(205,185,37)" fg:x="54" fg:w="1"/><text x="4.6260%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.3760%" y="661" width="0.0810%" height="15" fill="rgb(238,207,15)" fg:x="54" fg:w="1"/><text x="4.6260%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.3760%" y="645" width="0.0810%" height="15" fill="rgb(213,199,42)" fg:x="54" fg:w="1"/><text x="4.6260%" y="655.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="4.4571%" y="677" width="0.0810%" height="15" fill="rgb(235,201,11)" fg:x="55" fg:w="1"/><text x="4.7071%" y="687.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="4.4571%" y="661" width="0.0810%" height="15" fill="rgb(207,46,11)" fg:x="55" fg:w="1"/><text x="4.7071%" y="671.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="4.4571%" y="645" width="0.0810%" height="15" fill="rgb(241,35,35)" fg:x="55" fg:w="1"/><text x="4.7071%" y="655.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="4.4571%" y="629" width="0.0810%" height="15" fill="rgb(243,32,47)" fg:x="55" fg:w="1"/><text x="4.7071%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="4.4571%" y="613" width="0.0810%" height="15" fill="rgb(247,202,23)" fg:x="55" fg:w="1"/><text x="4.7071%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="4.4571%" y="597" width="0.0810%" height="15" fill="rgb(219,102,11)" fg:x="55" fg:w="1"/><text x="4.7071%" y="607.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="4.4571%" y="581" width="0.0810%" height="15" fill="rgb(243,110,44)" fg:x="55" fg:w="1"/><text x="4.7071%" y="591.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="4.4571%" y="565" width="0.0810%" height="15" fill="rgb(222,74,54)" fg:x="55" fg:w="1"/><text x="4.7071%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.5381%" y="645" width="0.0810%" height="15" fill="rgb(216,99,12)" fg:x="56" fg:w="1"/><text x="4.7881%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="4.5381%" y="629" width="0.0810%" height="15" fill="rgb(226,22,26)" fg:x="56" fg:w="1"/><text x="4.7881%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="4.6191%" y="597" width="0.0810%" height="15" fill="rgb(217,163,10)" fg:x="57" fg:w="1"/><text x="4.8691%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="4.6191%" y="581" width="0.0810%" height="15" fill="rgb(213,25,53)" fg:x="57" fg:w="1"/><text x="4.8691%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.6191%" y="565" width="0.0810%" height="15" fill="rgb(252,105,26)" fg:x="57" fg:w="1"/><text x="4.8691%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.6191%" y="549" width="0.0810%" height="15" fill="rgb(220,39,43)" fg:x="57" fg:w="1"/><text x="4.8691%" y="559.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="4.6191%" y="533" width="0.0810%" height="15" fill="rgb(229,68,48)" fg:x="57" fg:w="1"/><text x="4.8691%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="4.7002%" y="581" width="0.2431%" height="15" fill="rgb(252,8,32)" fg:x="58" fg:w="3"/><text x="4.9502%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="4.7002%" y="565" width="0.2431%" height="15" fill="rgb(223,20,43)" fg:x="58" fg:w="3"/><text x="4.9502%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.7812%" y="549" width="0.1621%" height="15" fill="rgb(229,81,49)" fg:x="59" fg:w="2"/><text x="5.0312%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="4.7812%" y="533" width="0.1621%" height="15" fill="rgb(236,28,36)" fg:x="59" fg:w="2"/><text x="5.0312%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.8622%" y="517" width="0.0810%" height="15" fill="rgb(249,185,26)" fg:x="60" fg:w="1"/><text x="5.1122%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.8622%" y="501" width="0.0810%" height="15" fill="rgb(249,174,33)" fg:x="60" fg:w="1"/><text x="5.1122%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.8622%" y="485" width="0.0810%" height="15" fill="rgb(233,201,37)" fg:x="60" fg:w="1"/><text x="5.1122%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.8622%" y="469" width="0.0810%" height="15" fill="rgb(221,78,26)" fg:x="60" fg:w="1"/><text x="5.1122%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.9433%" y="565" width="0.0810%" height="15" fill="rgb(250,127,30)" fg:x="61" fg:w="1"/><text x="5.1933%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.0243%" y="565" width="0.1621%" height="15" fill="rgb(230,49,44)" fg:x="62" fg:w="2"/><text x="5.2743%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.1053%" y="549" width="0.0810%" height="15" fill="rgb(229,67,23)" fg:x="63" fg:w="1"/><text x="5.3553%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.1053%" y="533" width="0.0810%" height="15" fill="rgb(249,83,47)" fg:x="63" fg:w="1"/><text x="5.3553%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.1053%" y="517" width="0.0810%" height="15" fill="rgb(215,43,3)" fg:x="63" fg:w="1"/><text x="5.3553%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.1864%" y="517" width="0.0810%" height="15" fill="rgb(238,154,13)" fg:x="64" fg:w="1"/><text x="5.4364%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.2674%" y="517" width="0.1621%" height="15" fill="rgb(219,56,2)" fg:x="65" fg:w="2"/><text x="5.5174%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.2674%" y="501" width="0.1621%" height="15" fill="rgb(233,0,4)" fg:x="65" fg:w="2"/><text x="5.5174%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="5.2674%" y="485" width="0.1621%" height="15" fill="rgb(235,30,7)" fg:x="65" fg:w="2"/><text x="5.5174%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.3485%" y="469" width="0.0810%" height="15" fill="rgb(250,79,13)" fg:x="66" fg:w="1"/><text x="5.5985%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="5.1864%" y="549" width="0.3241%" height="15" fill="rgb(211,146,34)" fg:x="64" fg:w="4"/><text x="5.4364%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="5.1864%" y="533" width="0.3241%" height="15" fill="rgb(228,22,38)" fg:x="64" fg:w="4"/><text x="5.4364%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.4295%" y="517" width="0.0810%" height="15" fill="rgb(235,168,5)" fg:x="67" fg:w="1"/><text x="5.6795%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.4295%" y="501" width="0.0810%" height="15" fill="rgb(221,155,16)" fg:x="67" fg:w="1"/><text x="5.6795%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="5.5105%" y="549" width="0.3241%" height="15" fill="rgb(215,215,53)" fg:x="68" fg:w="4"/><text x="5.7605%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.7536%" y="533" width="0.0810%" height="15" fill="rgb(223,4,10)" fg:x="71" fg:w="1"/><text x="6.0036%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.7536%" y="517" width="0.0810%" height="15" fill="rgb(234,103,6)" fg:x="71" fg:w="1"/><text x="6.0036%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="5.7536%" y="501" width="0.0810%" height="15" fill="rgb(227,97,0)" fg:x="71" fg:w="1"/><text x="6.0036%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.8347%" y="533" width="0.0810%" height="15" fill="rgb(234,150,53)" fg:x="72" fg:w="1"/><text x="6.0847%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.8347%" y="517" width="0.0810%" height="15" fill="rgb(228,201,54)" fg:x="72" fg:w="1"/><text x="6.0847%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.8347%" y="501" width="0.0810%" height="15" fill="rgb(222,22,37)" fg:x="72" fg:w="1"/><text x="6.0847%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.8347%" y="485" width="0.0810%" height="15" fill="rgb(237,53,32)" fg:x="72" fg:w="1"/><text x="6.0847%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.9157%" y="533" width="0.1621%" height="15" fill="rgb(233,25,53)" fg:x="73" fg:w="2"/><text x="6.1657%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.9157%" y="517" width="0.1621%" height="15" fill="rgb(210,40,34)" fg:x="73" fg:w="2"/><text x="6.1657%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="5.9157%" y="501" width="0.1621%" height="15" fill="rgb(241,220,44)" fg:x="73" fg:w="2"/><text x="6.1657%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="5.9157%" y="485" width="0.1621%" height="15" fill="rgb(235,28,35)" fg:x="73" fg:w="2"/><text x="6.1657%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="5.9157%" y="469" width="0.1621%" height="15" fill="rgb(210,56,17)" fg:x="73" fg:w="2"/><text x="6.1657%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="5.9157%" y="453" width="0.1621%" height="15" fill="rgb(224,130,29)" fg:x="73" fg:w="2"/><text x="6.1657%" y="463.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="5.9157%" y="437" width="0.1621%" height="15" fill="rgb(235,212,8)" fg:x="73" fg:w="2"/><text x="6.1657%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="6.0778%" y="469" width="0.1621%" height="15" fill="rgb(223,33,50)" fg:x="75" fg:w="2"/><text x="6.3278%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.1588%" y="453" width="0.0810%" height="15" fill="rgb(219,149,13)" fg:x="76" fg:w="1"/><text x="6.4088%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.1588%" y="437" width="0.0810%" height="15" fill="rgb(250,156,29)" fg:x="76" fg:w="1"/><text x="6.4088%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.1588%" y="421" width="0.0810%" height="15" fill="rgb(216,193,19)" fg:x="76" fg:w="1"/><text x="6.4088%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="6.0778%" y="517" width="0.2431%" height="15" fill="rgb(216,135,14)" fg:x="75" fg:w="3"/><text x="6.3278%" y="527.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="6.0778%" y="501" width="0.2431%" height="15" fill="rgb(241,47,5)" fg:x="75" fg:w="3"/><text x="6.3278%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="6.0778%" y="485" width="0.2431%" height="15" fill="rgb(233,42,35)" fg:x="75" fg:w="3"/><text x="6.3278%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="6.2399%" y="469" width="0.0810%" height="15" fill="rgb(231,13,6)" fg:x="77" fg:w="1"/><text x="6.4899%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="6.0778%" y="533" width="0.3241%" height="15" fill="rgb(207,181,40)" fg:x="75" fg:w="4"/><text x="6.3278%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.3209%" y="517" width="0.0810%" height="15" fill="rgb(254,173,49)" fg:x="78" fg:w="1"/><text x="6.5709%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="5.8347%" y="549" width="0.6483%" height="15" fill="rgb(221,1,38)" fg:x="72" fg:w="8"/><text x="6.0847%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.4019%" y="533" width="0.0810%" height="15" fill="rgb(206,124,46)" fg:x="79" fg:w="1"/><text x="6.6519%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (17 samples, 1.38%)</title><rect x="5.1864%" y="565" width="1.3776%" height="15" fill="rgb(249,21,11)" fg:x="64" fg:w="17"/><text x="5.4364%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.4830%" y="549" width="0.0810%" height="15" fill="rgb(222,201,40)" fg:x="80" fg:w="1"/><text x="6.7330%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (24 samples, 1.94%)</title><rect x="4.7002%" y="597" width="1.9449%" height="15" fill="rgb(235,61,29)" fg:x="58" fg:w="24"/><text x="4.9502%" y="607.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (21 samples, 1.70%)</title><rect x="4.9433%" y="581" width="1.7018%" height="15" fill="rgb(219,207,3)" fg:x="61" fg:w="21"/><text x="5.1933%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.5640%" y="565" width="0.0810%" height="15" fill="rgb(222,56,46)" fg:x="81" fg:w="1"/><text x="6.8140%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.5640%" y="549" width="0.0810%" height="15" fill="rgb(239,76,54)" fg:x="81" fg:w="1"/><text x="6.8140%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.5640%" y="533" width="0.0810%" height="15" fill="rgb(231,124,27)" fg:x="81" fg:w="1"/><text x="6.8140%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.5640%" y="517" width="0.0810%" height="15" fill="rgb(249,195,6)" fg:x="81" fg:w="1"/><text x="6.8140%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.5640%" y="501" width="0.0810%" height="15" fill="rgb(237,174,47)" fg:x="81" fg:w="1"/><text x="6.8140%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.5640%" y="485" width="0.0810%" height="15" fill="rgb(206,201,31)" fg:x="81" fg:w="1"/><text x="6.8140%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::compare::Modified&gt; (1 samples, 0.08%)</title><rect x="6.6451%" y="597" width="0.0810%" height="15" fill="rgb(231,57,52)" fg:x="82" fg:w="1"/><text x="6.8951%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.6451%" y="581" width="0.0810%" height="15" fill="rgb(248,177,22)" fg:x="82" fg:w="1"/><text x="6.8951%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.7261%" y="565" width="0.0810%" height="15" fill="rgb(215,211,37)" fg:x="83" fg:w="1"/><text x="6.9761%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.8071%" y="549" width="0.0810%" height="15" fill="rgb(241,128,51)" fg:x="84" fg:w="1"/><text x="7.0571%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="6.8882%" y="549" width="0.1621%" height="15" fill="rgb(227,165,31)" fg:x="85" fg:w="2"/><text x="7.1382%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="6.8882%" y="533" width="0.1621%" height="15" fill="rgb(228,167,24)" fg:x="85" fg:w="2"/><text x="7.1382%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.0502%" y="533" width="0.0810%" height="15" fill="rgb(228,143,12)" fg:x="87" fg:w="1"/><text x="7.3002%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.0502%" y="517" width="0.0810%" height="15" fill="rgb(249,149,8)" fg:x="87" fg:w="1"/><text x="7.3002%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="6.7261%" y="597" width="0.5673%" height="15" fill="rgb(243,35,44)" fg:x="83" fg:w="7"/><text x="6.9761%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.57%)</title><rect x="6.7261%" y="581" width="0.5673%" height="15" fill="rgb(246,89,9)" fg:x="83" fg:w="7"/><text x="6.9761%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="6.8071%" y="565" width="0.4862%" height="15" fill="rgb(233,213,13)" fg:x="84" fg:w="6"/><text x="7.0571%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="7.0502%" y="549" width="0.2431%" height="15" fill="rgb(233,141,41)" fg:x="87" fg:w="3"/><text x="7.3002%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.1313%" y="533" width="0.1621%" height="15" fill="rgb(239,167,4)" fg:x="88" fg:w="2"/><text x="7.3813%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.2123%" y="517" width="0.0810%" height="15" fill="rgb(209,217,16)" fg:x="89" fg:w="1"/><text x="7.4623%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="7.2934%" y="581" width="0.0810%" height="15" fill="rgb(219,88,35)" fg:x="90" fg:w="1"/><text x="7.5434%" y="591.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="7.2934%" y="565" width="0.0810%" height="15" fill="rgb(220,193,23)" fg:x="90" fg:w="1"/><text x="7.5434%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.2934%" y="549" width="0.0810%" height="15" fill="rgb(230,90,52)" fg:x="90" fg:w="1"/><text x="7.5434%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="7.4554%" y="565" width="0.0810%" height="15" fill="rgb(252,106,19)" fg:x="92" fg:w="1"/><text x="7.7054%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.6175%" y="549" width="0.1621%" height="15" fill="rgb(206,74,20)" fg:x="94" fg:w="2"/><text x="7.8675%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="7.6985%" y="533" width="0.0810%" height="15" fill="rgb(230,138,44)" fg:x="95" fg:w="1"/><text x="7.9485%" y="543.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="7.7796%" y="549" width="0.0810%" height="15" fill="rgb(235,182,43)" fg:x="96" fg:w="1"/><text x="8.0296%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.7796%" y="533" width="0.0810%" height="15" fill="rgb(242,16,51)" fg:x="96" fg:w="1"/><text x="8.0296%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.7796%" y="517" width="0.0810%" height="15" fill="rgb(248,9,4)" fg:x="96" fg:w="1"/><text x="8.0296%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="7.8606%" y="549" width="0.0810%" height="15" fill="rgb(210,31,22)" fg:x="97" fg:w="1"/><text x="8.1106%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.8606%" y="533" width="0.0810%" height="15" fill="rgb(239,54,39)" fg:x="97" fg:w="1"/><text x="8.1106%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.8606%" y="517" width="0.0810%" height="15" fill="rgb(230,99,41)" fg:x="97" fg:w="1"/><text x="8.1106%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.0227%" y="501" width="0.1621%" height="15" fill="rgb(253,106,12)" fg:x="99" fg:w="2"/><text x="8.2727%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.1037%" y="485" width="0.0810%" height="15" fill="rgb(213,46,41)" fg:x="100" fg:w="1"/><text x="8.3537%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.2658%" y="485" width="0.0810%" height="15" fill="rgb(215,133,35)" fg:x="102" fg:w="1"/><text x="8.5158%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2658%" y="469" width="0.0810%" height="15" fill="rgb(213,28,5)" fg:x="102" fg:w="1"/><text x="8.5158%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.2658%" y="453" width="0.0810%" height="15" fill="rgb(215,77,49)" fg:x="102" fg:w="1"/><text x="8.5158%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.2658%" y="437" width="0.0810%" height="15" fill="rgb(248,100,22)" fg:x="102" fg:w="1"/><text x="8.5158%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.2658%" y="421" width="0.0810%" height="15" fill="rgb(208,67,9)" fg:x="102" fg:w="1"/><text x="8.5158%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="8.0227%" y="517" width="0.4052%" height="15" fill="rgb(219,133,21)" fg:x="99" fg:w="5"/><text x="8.2727%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="8.1848%" y="501" width="0.2431%" height="15" fill="rgb(246,46,29)" fg:x="101" fg:w="3"/><text x="8.4348%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.3468%" y="485" width="0.0810%" height="15" fill="rgb(246,185,52)" fg:x="103" fg:w="1"/><text x="8.5968%" y="495.50"></text></g><g><title>engine::session::Session::flush (51 samples, 4.13%)</title><rect x="4.3760%" y="693" width="4.1329%" height="15" fill="rgb(252,136,11)" fg:x="54" fg:w="51"/><text x="4.6260%" y="703.50">engin..</text></g><g><title>engine::session::state::State::close (49 samples, 3.97%)</title><rect x="4.5381%" y="677" width="3.9708%" height="15" fill="rgb(219,138,53)" fg:x="56" fg:w="49"/><text x="4.7881%" y="687.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (49 samples, 3.97%)</title><rect x="4.5381%" y="661" width="3.9708%" height="15" fill="rgb(211,51,23)" fg:x="56" fg:w="49"/><text x="4.7881%" y="671.50">engi..</text></g><g><title>core::iter::adapters::try_process (48 samples, 3.89%)</title><rect x="4.6191%" y="645" width="3.8898%" height="15" fill="rgb(247,221,28)" fg:x="57" fg:w="48"/><text x="4.8691%" y="655.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (48 samples, 3.89%)</title><rect x="4.6191%" y="629" width="3.8898%" height="15" fill="rgb(251,222,45)" fg:x="57" fg:w="48"/><text x="4.8691%" y="639.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (48 samples, 3.89%)</title><rect x="4.6191%" y="613" width="3.8898%" height="15" fill="rgb(217,162,53)" fg:x="57" fg:w="48"/><text x="4.8691%" y="623.50">engi..</text></g><g><title>kernel::model::any_entity_changes (15 samples, 1.22%)</title><rect x="7.2934%" y="597" width="1.2156%" height="15" fill="rgb(229,93,14)" fg:x="90" fg:w="15"/><text x="7.5434%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (14 samples, 1.13%)</title><rect x="7.3744%" y="581" width="1.1345%" height="15" fill="rgb(209,67,49)" fg:x="91" fg:w="14"/><text x="7.6244%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.97%)</title><rect x="7.5365%" y="565" width="0.9724%" height="15" fill="rgb(213,87,29)" fg:x="93" fg:w="12"/><text x="7.7865%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.57%)</title><rect x="7.9417%" y="549" width="0.5673%" height="15" fill="rgb(205,151,52)" fg:x="98" fg:w="7"/><text x="8.1917%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.49%)</title><rect x="8.0227%" y="533" width="0.4862%" height="15" fill="rgb(253,215,39)" fg:x="99" fg:w="6"/><text x="8.2727%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="8.4279%" y="517" width="0.0810%" height="15" fill="rgb(221,220,41)" fg:x="104" fg:w="1"/><text x="8.6779%" y="527.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="8.5089%" y="693" width="0.0810%" height="15" fill="rgb(218,133,21)" fg:x="105" fg:w="1"/><text x="8.7589%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="8.5089%" y="677" width="0.0810%" height="15" fill="rgb(221,193,43)" fg:x="105" fg:w="1"/><text x="8.7589%" y="687.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="8.5089%" y="661" width="0.0810%" height="15" fill="rgb(240,128,52)" fg:x="105" fg:w="1"/><text x="8.7589%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.5089%" y="645" width="0.0810%" height="15" fill="rgb(253,114,12)" fg:x="105" fg:w="1"/><text x="8.7589%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="8.5900%" y="677" width="0.1621%" height="15" fill="rgb(215,223,47)" fg:x="106" fg:w="2"/><text x="8.8400%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="8.5900%" y="661" width="0.1621%" height="15" fill="rgb(248,225,23)" fg:x="106" fg:w="2"/><text x="8.8400%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="8.5900%" y="645" width="0.1621%" height="15" fill="rgb(250,108,0)" fg:x="106" fg:w="2"/><text x="8.8400%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="8.5900%" y="629" width="0.1621%" height="15" fill="rgb(228,208,7)" fg:x="106" fg:w="2"/><text x="8.8400%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="8.5900%" y="613" width="0.1621%" height="15" fill="rgb(244,45,10)" fg:x="106" fg:w="2"/><text x="8.8400%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="8.5900%" y="597" width="0.1621%" height="15" fill="rgb(207,125,25)" fg:x="106" fg:w="2"/><text x="8.8400%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="8.5900%" y="581" width="0.1621%" height="15" fill="rgb(210,195,18)" fg:x="106" fg:w="2"/><text x="8.8400%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="8.5900%" y="565" width="0.1621%" height="15" fill="rgb(249,80,12)" fg:x="106" fg:w="2"/><text x="8.8400%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="8.5900%" y="549" width="0.1621%" height="15" fill="rgb(221,65,9)" fg:x="106" fg:w="2"/><text x="8.8400%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="8.5900%" y="533" width="0.1621%" height="15" fill="rgb(235,49,36)" fg:x="106" fg:w="2"/><text x="8.8400%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="8.5900%" y="517" width="0.1621%" height="15" fill="rgb(225,32,20)" fg:x="106" fg:w="2"/><text x="8.8400%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="8.5900%" y="501" width="0.1621%" height="15" fill="rgb(215,141,46)" fg:x="106" fg:w="2"/><text x="8.8400%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="8.5900%" y="485" width="0.1621%" height="15" fill="rgb(250,160,47)" fg:x="106" fg:w="2"/><text x="8.8400%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="8.5900%" y="469" width="0.1621%" height="15" fill="rgb(216,222,40)" fg:x="106" fg:w="2"/><text x="8.8400%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="8.5900%" y="453" width="0.1621%" height="15" fill="rgb(234,217,39)" fg:x="106" fg:w="2"/><text x="8.8400%" y="463.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="8.5900%" y="437" width="0.1621%" height="15" fill="rgb(207,178,40)" fg:x="106" fg:w="2"/><text x="8.8400%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="8.5900%" y="421" width="0.1621%" height="15" fill="rgb(221,136,13)" fg:x="106" fg:w="2"/><text x="8.8400%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="8.7520%" y="661" width="0.0810%" height="15" fill="rgb(249,199,10)" fg:x="108" fg:w="1"/><text x="9.0020%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.7520%" y="645" width="0.0810%" height="15" fill="rgb(249,222,13)" fg:x="108" fg:w="1"/><text x="9.0020%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="8.8331%" y="661" width="0.0810%" height="15" fill="rgb(244,185,38)" fg:x="109" fg:w="1"/><text x="9.0831%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8331%" y="645" width="0.0810%" height="15" fill="rgb(236,202,9)" fg:x="109" fg:w="1"/><text x="9.0831%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8331%" y="629" width="0.0810%" height="15" fill="rgb(250,229,37)" fg:x="109" fg:w="1"/><text x="9.0831%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8331%" y="613" width="0.0810%" height="15" fill="rgb(206,174,23)" fg:x="109" fg:w="1"/><text x="9.0831%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.9141%" y="533" width="0.0810%" height="15" fill="rgb(211,33,43)" fg:x="110" fg:w="1"/><text x="9.1641%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.9141%" y="517" width="0.0810%" height="15" fill="rgb(245,58,50)" fg:x="110" fg:w="1"/><text x="9.1641%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="8.9141%" y="645" width="0.1621%" height="15" fill="rgb(244,68,36)" fg:x="110" fg:w="2"/><text x="9.1641%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="8.9141%" y="629" width="0.1621%" height="15" fill="rgb(232,229,15)" fg:x="110" fg:w="2"/><text x="9.1641%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="8.9141%" y="613" width="0.1621%" height="15" fill="rgb(254,30,23)" fg:x="110" fg:w="2"/><text x="9.1641%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="8.9141%" y="597" width="0.1621%" height="15" fill="rgb(235,160,14)" fg:x="110" fg:w="2"/><text x="9.1641%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.9141%" y="581" width="0.1621%" height="15" fill="rgb(212,155,44)" fg:x="110" fg:w="2"/><text x="9.1641%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="8.9141%" y="565" width="0.1621%" height="15" fill="rgb(226,2,50)" fg:x="110" fg:w="2"/><text x="9.1641%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.9141%" y="549" width="0.1621%" height="15" fill="rgb(234,177,6)" fg:x="110" fg:w="2"/><text x="9.1641%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9951%" y="533" width="0.0810%" height="15" fill="rgb(217,24,9)" fg:x="111" fg:w="1"/><text x="9.2451%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9951%" y="517" width="0.0810%" height="15" fill="rgb(220,13,46)" fg:x="111" fg:w="1"/><text x="9.2451%" y="527.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="9.0762%" y="645" width="0.0810%" height="15" fill="rgb(239,221,27)" fg:x="112" fg:w="1"/><text x="9.3262%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.65%)</title><rect x="8.5900%" y="693" width="0.6483%" height="15" fill="rgb(222,198,25)" fg:x="106" fg:w="8"/><text x="8.8400%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.49%)</title><rect x="8.7520%" y="677" width="0.4862%" height="15" fill="rgb(211,99,13)" fg:x="108" fg:w="6"/><text x="9.0020%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="8.9141%" y="661" width="0.3241%" height="15" fill="rgb(232,111,31)" fg:x="110" fg:w="4"/><text x="9.1641%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="9.1572%" y="645" width="0.0810%" height="15" fill="rgb(245,82,37)" fg:x="113" fg:w="1"/><text x="9.4072%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.1572%" y="629" width="0.0810%" height="15" fill="rgb(227,149,46)" fg:x="113" fg:w="1"/><text x="9.4072%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="9.1572%" y="613" width="0.0810%" height="15" fill="rgb(218,36,50)" fg:x="113" fg:w="1"/><text x="9.4072%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="9.1572%" y="597" width="0.0810%" height="15" fill="rgb(226,80,48)" fg:x="113" fg:w="1"/><text x="9.4072%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.1572%" y="581" width="0.0810%" height="15" fill="rgb(238,224,15)" fg:x="113" fg:w="1"/><text x="9.4072%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.1572%" y="565" width="0.0810%" height="15" fill="rgb(241,136,10)" fg:x="113" fg:w="1"/><text x="9.4072%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.1572%" y="549" width="0.0810%" height="15" fill="rgb(208,32,45)" fg:x="113" fg:w="1"/><text x="9.4072%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.1572%" y="533" width="0.0810%" height="15" fill="rgb(207,135,9)" fg:x="113" fg:w="1"/><text x="9.4072%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.1572%" y="517" width="0.0810%" height="15" fill="rgb(206,86,44)" fg:x="113" fg:w="1"/><text x="9.4072%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="9.2382%" y="693" width="0.0810%" height="15" fill="rgb(245,177,15)" fg:x="114" fg:w="1"/><text x="9.4882%" y="703.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="9.2382%" y="677" width="0.0810%" height="15" fill="rgb(206,64,50)" fg:x="114" fg:w="1"/><text x="9.4882%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="9.2382%" y="661" width="0.0810%" height="15" fill="rgb(234,36,40)" fg:x="114" fg:w="1"/><text x="9.4882%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="9.3193%" y="693" width="0.0810%" height="15" fill="rgb(213,64,8)" fg:x="115" fg:w="1"/><text x="9.5693%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="9.3193%" y="677" width="0.0810%" height="15" fill="rgb(210,75,36)" fg:x="115" fg:w="1"/><text x="9.5693%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="9.3193%" y="661" width="0.0810%" height="15" fill="rgb(229,88,21)" fg:x="115" fg:w="1"/><text x="9.5693%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="9.3193%" y="645" width="0.0810%" height="15" fill="rgb(252,204,47)" fg:x="115" fg:w="1"/><text x="9.5693%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="9.3193%" y="629" width="0.0810%" height="15" fill="rgb(208,77,27)" fg:x="115" fg:w="1"/><text x="9.5693%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="9.3193%" y="613" width="0.0810%" height="15" fill="rgb(221,76,26)" fg:x="115" fg:w="1"/><text x="9.5693%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.3193%" y="597" width="0.0810%" height="15" fill="rgb(225,139,18)" fg:x="115" fg:w="1"/><text x="9.5693%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.3193%" y="581" width="0.0810%" height="15" fill="rgb(230,137,11)" fg:x="115" fg:w="1"/><text x="9.5693%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.3193%" y="565" width="0.0810%" height="15" fill="rgb(212,28,1)" fg:x="115" fg:w="1"/><text x="9.5693%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.3193%" y="549" width="0.0810%" height="15" fill="rgb(248,164,17)" fg:x="115" fg:w="1"/><text x="9.5693%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.3193%" y="533" width="0.0810%" height="15" fill="rgb(222,171,42)" fg:x="115" fg:w="1"/><text x="9.5693%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.3193%" y="517" width="0.0810%" height="15" fill="rgb(243,84,45)" fg:x="115" fg:w="1"/><text x="9.5693%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.3193%" y="501" width="0.0810%" height="15" fill="rgb(252,49,23)" fg:x="115" fg:w="1"/><text x="9.5693%" y="511.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (2 samples, 0.16%)</title><rect x="9.4003%" y="677" width="0.1621%" height="15" fill="rgb(215,19,7)" fg:x="116" fg:w="2"/><text x="9.6503%" y="687.50"></text></g><g><title>engine::users::model::add_username_to_key (2 samples, 0.16%)</title><rect x="9.4003%" y="661" width="0.1621%" height="15" fill="rgb(238,81,41)" fg:x="116" fg:w="2"/><text x="9.6503%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="9.4003%" y="645" width="0.1621%" height="15" fill="rgb(210,199,37)" fg:x="116" fg:w="2"/><text x="9.6503%" y="655.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="9.4814%" y="629" width="0.0810%" height="15" fill="rgb(244,192,49)" fg:x="117" fg:w="1"/><text x="9.7314%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.4814%" y="613" width="0.0810%" height="15" fill="rgb(226,211,11)" fg:x="117" fg:w="1"/><text x="9.7314%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="9.4814%" y="597" width="0.0810%" height="15" fill="rgb(236,162,54)" fg:x="117" fg:w="1"/><text x="9.7314%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.5624%" y="677" width="0.0810%" height="15" fill="rgb(220,229,9)" fg:x="118" fg:w="1"/><text x="9.8124%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="9.6434%" y="677" width="0.0810%" height="15" fill="rgb(250,87,22)" fg:x="119" fg:w="1"/><text x="9.8934%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="9.6434%" y="661" width="0.0810%" height="15" fill="rgb(239,43,17)" fg:x="119" fg:w="1"/><text x="9.8934%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="9.6434%" y="645" width="0.0810%" height="15" fill="rgb(231,177,25)" fg:x="119" fg:w="1"/><text x="9.8934%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="9.6434%" y="629" width="0.0810%" height="15" fill="rgb(219,179,1)" fg:x="119" fg:w="1"/><text x="9.8934%" y="639.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="9.6434%" y="613" width="0.0810%" height="15" fill="rgb(238,219,53)" fg:x="119" fg:w="1"/><text x="9.8934%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="9.6434%" y="597" width="0.0810%" height="15" fill="rgb(232,167,36)" fg:x="119" fg:w="1"/><text x="9.8934%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="9.6434%" y="581" width="0.0810%" height="15" fill="rgb(244,19,51)" fg:x="119" fg:w="1"/><text x="9.8934%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.6434%" y="565" width="0.0810%" height="15" fill="rgb(224,6,22)" fg:x="119" fg:w="1"/><text x="9.8934%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.6434%" y="549" width="0.0810%" height="15" fill="rgb(224,145,5)" fg:x="119" fg:w="1"/><text x="9.8934%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.6434%" y="533" width="0.0810%" height="15" fill="rgb(234,130,49)" fg:x="119" fg:w="1"/><text x="9.8934%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.6434%" y="517" width="0.0810%" height="15" fill="rgb(254,6,2)" fg:x="119" fg:w="1"/><text x="9.8934%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="9.6434%" y="501" width="0.0810%" height="15" fill="rgb(208,96,46)" fg:x="119" fg:w="1"/><text x="9.8934%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.6434%" y="485" width="0.0810%" height="15" fill="rgb(239,3,39)" fg:x="119" fg:w="1"/><text x="9.8934%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.6434%" y="469" width="0.0810%" height="15" fill="rgb(233,210,1)" fg:x="119" fg:w="1"/><text x="9.8934%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="9.9676%" y="485" width="0.1621%" height="15" fill="rgb(244,137,37)" fg:x="123" fg:w="2"/><text x="10.2176%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="9.9676%" y="469" width="0.1621%" height="15" fill="rgb(240,136,2)" fg:x="123" fg:w="2"/><text x="10.2176%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="9.9676%" y="453" width="0.1621%" height="15" fill="rgb(239,18,37)" fg:x="123" fg:w="2"/><text x="10.2176%" y="463.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="9.9676%" y="437" width="0.1621%" height="15" fill="rgb(218,185,22)" fg:x="123" fg:w="2"/><text x="10.2176%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="9.8865%" y="549" width="0.3241%" height="15" fill="rgb(225,218,4)" fg:x="122" fg:w="4"/><text x="10.1365%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="9.8865%" y="533" width="0.3241%" height="15" fill="rgb(230,182,32)" fg:x="122" fg:w="4"/><text x="10.1365%" y="543.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="9.8865%" y="517" width="0.3241%" height="15" fill="rgb(242,56,43)" fg:x="122" fg:w="4"/><text x="10.1365%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="9.8865%" y="501" width="0.3241%" height="15" fill="rgb(233,99,24)" fg:x="122" fg:w="4"/><text x="10.1365%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="10.1297%" y="485" width="0.0810%" height="15" fill="rgb(234,209,42)" fg:x="125" fg:w="1"/><text x="10.3797%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.2107%" y="533" width="0.1621%" height="15" fill="rgb(227,7,12)" fg:x="126" fg:w="2"/><text x="10.4607%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.2917%" y="517" width="0.0810%" height="15" fill="rgb(245,203,43)" fg:x="127" fg:w="1"/><text x="10.5417%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.2917%" y="501" width="0.0810%" height="15" fill="rgb(238,205,33)" fg:x="127" fg:w="1"/><text x="10.5417%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.4538%" y="517" width="0.0810%" height="15" fill="rgb(231,56,7)" fg:x="129" fg:w="1"/><text x="10.7038%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.4538%" y="501" width="0.0810%" height="15" fill="rgb(244,186,29)" fg:x="129" fg:w="1"/><text x="10.7038%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.4538%" y="485" width="0.0810%" height="15" fill="rgb(234,111,31)" fg:x="129" fg:w="1"/><text x="10.7038%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.5348%" y="517" width="0.0810%" height="15" fill="rgb(241,149,10)" fg:x="130" fg:w="1"/><text x="10.7848%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.5348%" y="501" width="0.0810%" height="15" fill="rgb(249,206,44)" fg:x="130" fg:w="1"/><text x="10.7848%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.5348%" y="485" width="0.0810%" height="15" fill="rgb(251,153,30)" fg:x="130" fg:w="1"/><text x="10.7848%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="10.6159%" y="485" width="0.1621%" height="15" fill="rgb(239,152,38)" fg:x="131" fg:w="2"/><text x="10.8659%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (13 samples, 1.05%)</title><rect x="9.8055%" y="565" width="1.0535%" height="15" fill="rgb(249,139,47)" fg:x="121" fg:w="13"/><text x="10.0555%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="10.2107%" y="549" width="0.6483%" height="15" fill="rgb(244,64,35)" fg:x="126" fg:w="8"/><text x="10.4607%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="10.3728%" y="533" width="0.4862%" height="15" fill="rgb(216,46,15)" fg:x="128" fg:w="6"/><text x="10.6228%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="10.6159%" y="517" width="0.2431%" height="15" fill="rgb(250,74,19)" fg:x="131" fg:w="3"/><text x="10.8659%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="10.6159%" y="501" width="0.2431%" height="15" fill="rgb(249,42,33)" fg:x="131" fg:w="3"/><text x="10.8659%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.7780%" y="485" width="0.0810%" height="15" fill="rgb(242,149,17)" fg:x="133" fg:w="1"/><text x="11.0280%" y="495.50"></text></g><g><title>core::fmt::Formatter::new (1 samples, 0.08%)</title><rect x="10.8590%" y="565" width="0.0810%" height="15" fill="rgb(244,29,21)" fg:x="134" fg:w="1"/><text x="11.1090%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.9400%" y="517" width="0.0810%" height="15" fill="rgb(220,130,37)" fg:x="135" fg:w="1"/><text x="11.1900%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.9400%" y="565" width="0.1621%" height="15" fill="rgb(211,67,2)" fg:x="135" fg:w="2"/><text x="11.1900%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="10.9400%" y="549" width="0.1621%" height="15" fill="rgb(235,68,52)" fg:x="135" fg:w="2"/><text x="11.1900%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.9400%" y="533" width="0.1621%" height="15" fill="rgb(246,142,3)" fg:x="135" fg:w="2"/><text x="11.1900%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.0211%" y="517" width="0.0810%" height="15" fill="rgb(241,25,7)" fg:x="136" fg:w="1"/><text x="11.2711%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.0211%" y="501" width="0.0810%" height="15" fill="rgb(242,119,39)" fg:x="136" fg:w="1"/><text x="11.2711%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.0211%" y="485" width="0.0810%" height="15" fill="rgb(241,98,45)" fg:x="136" fg:w="1"/><text x="11.2711%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.1831%" y="533" width="0.0810%" height="15" fill="rgb(254,28,30)" fg:x="138" fg:w="1"/><text x="11.4331%" y="543.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="11.2642%" y="533" width="0.0810%" height="15" fill="rgb(241,142,54)" fg:x="139" fg:w="1"/><text x="11.5142%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.2642%" y="517" width="0.0810%" height="15" fill="rgb(222,85,15)" fg:x="139" fg:w="1"/><text x="11.5142%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="11.3452%" y="517" width="0.0810%" height="15" fill="rgb(210,85,47)" fg:x="140" fg:w="1"/><text x="11.5952%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.3452%" y="501" width="0.0810%" height="15" fill="rgb(224,206,25)" fg:x="140" fg:w="1"/><text x="11.5952%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.3452%" y="485" width="0.0810%" height="15" fill="rgb(243,201,19)" fg:x="140" fg:w="1"/><text x="11.5952%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.32%)</title><rect x="11.1831%" y="549" width="0.3241%" height="15" fill="rgb(236,59,4)" fg:x="138" fg:w="4"/><text x="11.4331%" y="559.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="11.3452%" y="533" width="0.1621%" height="15" fill="rgb(254,179,45)" fg:x="140" fg:w="2"/><text x="11.5952%" y="543.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="11.4263%" y="517" width="0.0810%" height="15" fill="rgb(226,14,10)" fg:x="141" fg:w="1"/><text x="11.6763%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.5073%" y="469" width="0.0810%" height="15" fill="rgb(244,27,41)" fg:x="142" fg:w="1"/><text x="11.7573%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.5883%" y="469" width="0.0810%" height="15" fill="rgb(235,35,32)" fg:x="143" fg:w="1"/><text x="11.8383%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.5883%" y="453" width="0.0810%" height="15" fill="rgb(218,68,31)" fg:x="143" fg:w="1"/><text x="11.8383%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.5883%" y="437" width="0.0810%" height="15" fill="rgb(207,120,37)" fg:x="143" fg:w="1"/><text x="11.8383%" y="447.50"></text></g><g><title>engine::session::Session::flush (29 samples, 2.35%)</title><rect x="9.7245%" y="677" width="2.3501%" height="15" fill="rgb(227,98,0)" fg:x="120" fg:w="29"/><text x="9.9745%" y="687.50">e..</text></g><g><title>engine::session::Session::save_changes (29 samples, 2.35%)</title><rect x="9.7245%" y="661" width="2.3501%" height="15" fill="rgb(207,7,3)" fg:x="120" fg:w="29"/><text x="9.9745%" y="671.50">e..</text></g><g><title>engine::session::state::State::close (29 samples, 2.35%)</title><rect x="9.7245%" y="645" width="2.3501%" height="15" fill="rgb(206,98,19)" fg:x="120" fg:w="29"/><text x="9.9745%" y="655.50">e..</text></g><g><title>engine::session::state::State::flush_entities (29 samples, 2.35%)</title><rect x="9.7245%" y="629" width="2.3501%" height="15" fill="rgb(217,5,26)" fg:x="120" fg:w="29"/><text x="9.9745%" y="639.50">e..</text></g><g><title>core::iter::adapters::try_process (29 samples, 2.35%)</title><rect x="9.7245%" y="613" width="2.3501%" height="15" fill="rgb(235,190,38)" fg:x="120" fg:w="29"/><text x="9.9745%" y="623.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (29 samples, 2.35%)</title><rect x="9.7245%" y="597" width="2.3501%" height="15" fill="rgb(247,86,24)" fg:x="120" fg:w="29"/><text x="9.9745%" y="607.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (29 samples, 2.35%)</title><rect x="9.7245%" y="581" width="2.3501%" height="15" fill="rgb(205,101,16)" fg:x="120" fg:w="29"/><text x="9.9745%" y="591.50">e..</text></g><g><title>kernel::model::any_entity_changes (12 samples, 0.97%)</title><rect x="11.1021%" y="565" width="0.9724%" height="15" fill="rgb(246,168,33)" fg:x="137" fg:w="12"/><text x="11.3521%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.57%)</title><rect x="11.5073%" y="549" width="0.5673%" height="15" fill="rgb(231,114,1)" fg:x="142" fg:w="7"/><text x="11.7573%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.57%)</title><rect x="11.5073%" y="533" width="0.5673%" height="15" fill="rgb(207,184,53)" fg:x="142" fg:w="7"/><text x="11.7573%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.57%)</title><rect x="11.5073%" y="517" width="0.5673%" height="15" fill="rgb(224,95,51)" fg:x="142" fg:w="7"/><text x="11.7573%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.57%)</title><rect x="11.5073%" y="501" width="0.5673%" height="15" fill="rgb(212,188,45)" fg:x="142" fg:w="7"/><text x="11.7573%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.57%)</title><rect x="11.5073%" y="485" width="0.5673%" height="15" fill="rgb(223,154,38)" fg:x="142" fg:w="7"/><text x="11.7573%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="11.6694%" y="469" width="0.4052%" height="15" fill="rgb(251,22,52)" fg:x="144" fg:w="5"/><text x="11.9194%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="11.7504%" y="453" width="0.3241%" height="15" fill="rgb(229,209,22)" fg:x="145" fg:w="4"/><text x="12.0004%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="11.7504%" y="437" width="0.3241%" height="15" fill="rgb(234,138,34)" fg:x="145" fg:w="4"/><text x="12.0004%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="11.7504%" y="421" width="0.3241%" height="15" fill="rgb(212,95,11)" fg:x="145" fg:w="4"/><text x="12.0004%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.9125%" y="405" width="0.1621%" height="15" fill="rgb(240,179,47)" fg:x="147" fg:w="2"/><text x="12.1625%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="11.9125%" y="389" width="0.1621%" height="15" fill="rgb(240,163,11)" fg:x="147" fg:w="2"/><text x="12.1625%" y="399.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="12.0746%" y="677" width="0.0810%" height="15" fill="rgb(236,37,12)" fg:x="149" fg:w="1"/><text x="12.3246%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="12.0746%" y="661" width="0.0810%" height="15" fill="rgb(232,164,16)" fg:x="149" fg:w="1"/><text x="12.3246%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="12.0746%" y="645" width="0.0810%" height="15" fill="rgb(244,205,15)" fg:x="149" fg:w="1"/><text x="12.3246%" y="655.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="12.1556%" y="677" width="0.0810%" height="15" fill="rgb(223,117,47)" fg:x="150" fg:w="1"/><text x="12.4056%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="12.1556%" y="661" width="0.0810%" height="15" fill="rgb(244,107,35)" fg:x="150" fg:w="1"/><text x="12.4056%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="12.1556%" y="645" width="0.0810%" height="15" fill="rgb(205,140,8)" fg:x="150" fg:w="1"/><text x="12.4056%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="12.2366%" y="661" width="0.0810%" height="15" fill="rgb(228,84,46)" fg:x="151" fg:w="1"/><text x="12.4866%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.2366%" y="645" width="0.0810%" height="15" fill="rgb(254,188,9)" fg:x="151" fg:w="1"/><text x="12.4866%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.2366%" y="629" width="0.0810%" height="15" fill="rgb(206,112,54)" fg:x="151" fg:w="1"/><text x="12.4866%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.2366%" y="613" width="0.0810%" height="15" fill="rgb(216,84,49)" fg:x="151" fg:w="1"/><text x="12.4866%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.3987%" y="645" width="0.0810%" height="15" fill="rgb(214,194,35)" fg:x="153" fg:w="1"/><text x="12.6487%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.3987%" y="629" width="0.0810%" height="15" fill="rgb(249,28,3)" fg:x="153" fg:w="1"/><text x="12.6487%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.3987%" y="613" width="0.0810%" height="15" fill="rgb(222,56,52)" fg:x="153" fg:w="1"/><text x="12.6487%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.3987%" y="597" width="0.0810%" height="15" fill="rgb(245,217,50)" fg:x="153" fg:w="1"/><text x="12.6487%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.3987%" y="581" width="0.0810%" height="15" fill="rgb(213,201,24)" fg:x="153" fg:w="1"/><text x="12.6487%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.3987%" y="565" width="0.0810%" height="15" fill="rgb(248,116,28)" fg:x="153" fg:w="1"/><text x="12.6487%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.3987%" y="549" width="0.0810%" height="15" fill="rgb(219,72,43)" fg:x="153" fg:w="1"/><text x="12.6487%" y="559.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="12.4797%" y="645" width="0.1621%" height="15" fill="rgb(209,138,14)" fg:x="154" fg:w="2"/><text x="12.7297%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="12.4797%" y="629" width="0.1621%" height="15" fill="rgb(222,18,33)" fg:x="154" fg:w="2"/><text x="12.7297%" y="639.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="12.4797%" y="613" width="0.1621%" height="15" fill="rgb(213,199,7)" fg:x="154" fg:w="2"/><text x="12.7297%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="12.4797%" y="597" width="0.1621%" height="15" fill="rgb(250,110,10)" fg:x="154" fg:w="2"/><text x="12.7297%" y="607.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="12.4797%" y="581" width="0.1621%" height="15" fill="rgb(248,123,6)" fg:x="154" fg:w="2"/><text x="12.7297%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="12.4797%" y="565" width="0.1621%" height="15" fill="rgb(206,91,31)" fg:x="154" fg:w="2"/><text x="12.7297%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="12.5608%" y="549" width="0.0810%" height="15" fill="rgb(211,154,13)" fg:x="155" fg:w="1"/><text x="12.8108%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="12.5608%" y="533" width="0.0810%" height="15" fill="rgb(225,148,7)" fg:x="155" fg:w="1"/><text x="12.8108%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="12.6418%" y="597" width="0.0810%" height="15" fill="rgb(220,160,43)" fg:x="156" fg:w="1"/><text x="12.8918%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="12.6418%" y="581" width="0.0810%" height="15" fill="rgb(213,52,39)" fg:x="156" fg:w="1"/><text x="12.8918%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.6418%" y="565" width="0.0810%" height="15" fill="rgb(243,137,7)" fg:x="156" fg:w="1"/><text x="12.8918%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="12.6418%" y="613" width="0.1621%" height="15" fill="rgb(230,79,13)" fg:x="156" fg:w="2"/><text x="12.8918%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="12.7229%" y="597" width="0.0810%" height="15" fill="rgb(247,105,23)" fg:x="157" fg:w="1"/><text x="12.9729%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="12.7229%" y="581" width="0.0810%" height="15" fill="rgb(223,179,41)" fg:x="157" fg:w="1"/><text x="12.9729%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="12.7229%" y="565" width="0.0810%" height="15" fill="rgb(218,9,34)" fg:x="157" fg:w="1"/><text x="12.9729%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.7229%" y="549" width="0.0810%" height="15" fill="rgb(222,106,8)" fg:x="157" fg:w="1"/><text x="12.9729%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.7229%" y="533" width="0.0810%" height="15" fill="rgb(211,220,0)" fg:x="157" fg:w="1"/><text x="12.9729%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="12.6418%" y="629" width="0.2431%" height="15" fill="rgb(229,52,16)" fg:x="156" fg:w="3"/><text x="12.8918%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8039%" y="613" width="0.0810%" height="15" fill="rgb(212,155,18)" fg:x="158" fg:w="1"/><text x="13.0539%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8039%" y="597" width="0.0810%" height="15" fill="rgb(242,21,14)" fg:x="158" fg:w="1"/><text x="13.0539%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.8039%" y="581" width="0.0810%" height="15" fill="rgb(222,19,48)" fg:x="158" fg:w="1"/><text x="13.0539%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.8039%" y="565" width="0.0810%" height="15" fill="rgb(232,45,27)" fg:x="158" fg:w="1"/><text x="13.0539%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.8039%" y="549" width="0.0810%" height="15" fill="rgb(249,103,42)" fg:x="158" fg:w="1"/><text x="13.0539%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="12.8039%" y="533" width="0.0810%" height="15" fill="rgb(246,81,33)" fg:x="158" fg:w="1"/><text x="13.0539%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="12.8039%" y="517" width="0.0810%" height="15" fill="rgb(252,33,42)" fg:x="158" fg:w="1"/><text x="13.0539%" y="527.50"></text></g><g><title>plugins_core::build::Build::save (10 samples, 0.81%)</title><rect x="12.2366%" y="677" width="0.8104%" height="15" fill="rgb(209,212,41)" fg:x="151" fg:w="10"/><text x="12.4866%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.73%)</title><rect x="12.3177%" y="661" width="0.7293%" height="15" fill="rgb(207,154,6)" fg:x="152" fg:w="9"/><text x="12.5677%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.41%)</title><rect x="12.6418%" y="645" width="0.4052%" height="15" fill="rgb(223,64,47)" fg:x="156" fg:w="5"/><text x="12.8918%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="12.8849%" y="629" width="0.1621%" height="15" fill="rgb(211,161,38)" fg:x="159" fg:w="2"/><text x="13.1349%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="12.8849%" y="613" width="0.1621%" height="15" fill="rgb(219,138,40)" fg:x="159" fg:w="2"/><text x="13.1349%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="12.9660%" y="597" width="0.0810%" height="15" fill="rgb(241,228,46)" fg:x="160" fg:w="1"/><text x="13.2160%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="12.9660%" y="581" width="0.0810%" height="15" fill="rgb(223,209,38)" fg:x="160" fg:w="1"/><text x="13.2160%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.9660%" y="565" width="0.0810%" height="15" fill="rgb(236,164,45)" fg:x="160" fg:w="1"/><text x="13.2160%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.9660%" y="549" width="0.0810%" height="15" fill="rgb(231,15,5)" fg:x="160" fg:w="1"/><text x="13.2160%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.9660%" y="533" width="0.0810%" height="15" fill="rgb(252,35,15)" fg:x="160" fg:w="1"/><text x="13.2160%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.9660%" y="517" width="0.0810%" height="15" fill="rgb(248,181,18)" fg:x="160" fg:w="1"/><text x="13.2160%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.9660%" y="501" width="0.0810%" height="15" fill="rgb(233,39,42)" fg:x="160" fg:w="1"/><text x="13.2160%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.9660%" y="485" width="0.0810%" height="15" fill="rgb(238,110,33)" fg:x="160" fg:w="1"/><text x="13.2160%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.9660%" y="469" width="0.0810%" height="15" fill="rgb(233,195,10)" fg:x="160" fg:w="1"/><text x="13.2160%" y="479.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="13.0470%" y="613" width="0.2431%" height="15" fill="rgb(254,105,3)" fg:x="161" fg:w="3"/><text x="13.2970%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="13.0470%" y="597" width="0.2431%" height="15" fill="rgb(221,225,9)" fg:x="161" fg:w="3"/><text x="13.2970%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.1280%" y="581" width="0.1621%" height="15" fill="rgb(224,227,45)" fg:x="162" fg:w="2"/><text x="13.3780%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.1280%" y="565" width="0.1621%" height="15" fill="rgb(229,198,43)" fg:x="162" fg:w="2"/><text x="13.3780%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.2091%" y="549" width="0.0810%" height="15" fill="rgb(206,209,35)" fg:x="163" fg:w="1"/><text x="13.4591%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.2091%" y="533" width="0.0810%" height="15" fill="rgb(245,195,53)" fg:x="163" fg:w="1"/><text x="13.4591%" y="543.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="13.0470%" y="645" width="0.3241%" height="15" fill="rgb(240,92,26)" fg:x="161" fg:w="4"/><text x="13.2970%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="13.0470%" y="629" width="0.3241%" height="15" fill="rgb(207,40,23)" fg:x="161" fg:w="4"/><text x="13.2970%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="13.2901%" y="613" width="0.0810%" height="15" fill="rgb(223,111,35)" fg:x="164" fg:w="1"/><text x="13.5401%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.2901%" y="597" width="0.0810%" height="15" fill="rgb(229,147,28)" fg:x="164" fg:w="1"/><text x="13.5401%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.2901%" y="581" width="0.0810%" height="15" fill="rgb(211,29,28)" fg:x="164" fg:w="1"/><text x="13.5401%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.2901%" y="565" width="0.0810%" height="15" fill="rgb(228,72,33)" fg:x="164" fg:w="1"/><text x="13.5401%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.2901%" y="549" width="0.0810%" height="15" fill="rgb(205,214,31)" fg:x="164" fg:w="1"/><text x="13.5401%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.2901%" y="533" width="0.0810%" height="15" fill="rgb(224,111,15)" fg:x="164" fg:w="1"/><text x="13.5401%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.2901%" y="517" width="0.0810%" height="15" fill="rgb(253,21,26)" fg:x="164" fg:w="1"/><text x="13.5401%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.2901%" y="501" width="0.0810%" height="15" fill="rgb(245,139,43)" fg:x="164" fg:w="1"/><text x="13.5401%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="13.3712%" y="629" width="0.0810%" height="15" fill="rgb(252,170,7)" fg:x="165" fg:w="1"/><text x="13.6212%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.3712%" y="613" width="0.0810%" height="15" fill="rgb(231,118,14)" fg:x="165" fg:w="1"/><text x="13.6212%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.3712%" y="597" width="0.0810%" height="15" fill="rgb(238,83,0)" fg:x="165" fg:w="1"/><text x="13.6212%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (7 samples, 0.57%)</title><rect x="13.0470%" y="677" width="0.5673%" height="15" fill="rgb(221,39,39)" fg:x="161" fg:w="7"/><text x="13.2970%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (7 samples, 0.57%)</title><rect x="13.0470%" y="661" width="0.5673%" height="15" fill="rgb(222,119,46)" fg:x="161" fg:w="7"/><text x="13.2970%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="13.3712%" y="645" width="0.2431%" height="15" fill="rgb(222,165,49)" fg:x="165" fg:w="3"/><text x="13.6212%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="13.4522%" y="629" width="0.1621%" height="15" fill="rgb(219,113,52)" fg:x="166" fg:w="2"/><text x="13.7022%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.5332%" y="613" width="0.0810%" height="15" fill="rgb(214,7,15)" fg:x="167" fg:w="1"/><text x="13.7832%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="13.5332%" y="597" width="0.0810%" height="15" fill="rgb(235,32,4)" fg:x="167" fg:w="1"/><text x="13.7832%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="13.5332%" y="581" width="0.0810%" height="15" fill="rgb(238,90,54)" fg:x="167" fg:w="1"/><text x="13.7832%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.5332%" y="565" width="0.0810%" height="15" fill="rgb(213,208,19)" fg:x="167" fg:w="1"/><text x="13.7832%" y="575.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="13.6143%" y="661" width="0.0810%" height="15" fill="rgb(233,156,4)" fg:x="168" fg:w="1"/><text x="13.8643%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::new (1 samples, 0.08%)</title><rect x="13.6143%" y="645" width="0.0810%" height="15" fill="rgb(207,194,5)" fg:x="168" fg:w="1"/><text x="13.8643%" y="655.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (2 samples, 0.16%)</title><rect x="13.6143%" y="677" width="0.1621%" height="15" fill="rgb(206,111,30)" fg:x="168" fg:w="2"/><text x="13.8643%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="13.6953%" y="661" width="0.0810%" height="15" fill="rgb(243,70,54)" fg:x="169" fg:w="1"/><text x="13.9453%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="13.6953%" y="645" width="0.0810%" height="15" fill="rgb(242,28,8)" fg:x="169" fg:w="1"/><text x="13.9453%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="13.6953%" y="629" width="0.0810%" height="15" fill="rgb(219,106,18)" fg:x="169" fg:w="1"/><text x="13.9453%" y="639.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="13.6953%" y="613" width="0.0810%" height="15" fill="rgb(244,222,10)" fg:x="169" fg:w="1"/><text x="13.9453%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.6953%" y="597" width="0.0810%" height="15" fill="rgb(236,179,52)" fg:x="169" fg:w="1"/><text x="13.9453%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.6953%" y="581" width="0.0810%" height="15" fill="rgb(213,23,39)" fg:x="169" fg:w="1"/><text x="13.9453%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6953%" y="565" width="0.0810%" height="15" fill="rgb(238,48,10)" fg:x="169" fg:w="1"/><text x="13.9453%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="13.8574%" y="661" width="0.0810%" height="15" fill="rgb(251,196,23)" fg:x="171" fg:w="1"/><text x="14.1074%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="13.8574%" y="645" width="0.0810%" height="15" fill="rgb(250,152,24)" fg:x="171" fg:w="1"/><text x="14.1074%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="13.8574%" y="629" width="0.0810%" height="15" fill="rgb(209,150,17)" fg:x="171" fg:w="1"/><text x="14.1074%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.8574%" y="613" width="0.0810%" height="15" fill="rgb(234,202,34)" fg:x="171" fg:w="1"/><text x="14.1074%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.8574%" y="597" width="0.0810%" height="15" fill="rgb(253,148,53)" fg:x="171" fg:w="1"/><text x="14.1074%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.8574%" y="581" width="0.0810%" height="15" fill="rgb(218,129,16)" fg:x="171" fg:w="1"/><text x="14.1074%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.8574%" y="565" width="0.0810%" height="15" fill="rgb(216,85,19)" fg:x="171" fg:w="1"/><text x="14.1074%" y="575.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="13.9384%" y="661" width="0.0810%" height="15" fill="rgb(235,228,7)" fg:x="172" fg:w="1"/><text x="14.1884%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="13.9384%" y="645" width="0.0810%" height="15" fill="rgb(245,175,0)" fg:x="172" fg:w="1"/><text x="14.1884%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="13.9384%" y="629" width="0.0810%" height="15" fill="rgb(208,168,36)" fg:x="172" fg:w="1"/><text x="14.1884%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="13.9384%" y="613" width="0.0810%" height="15" fill="rgb(246,171,24)" fg:x="172" fg:w="1"/><text x="14.1884%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.9384%" y="597" width="0.0810%" height="15" fill="rgb(215,142,24)" fg:x="172" fg:w="1"/><text x="14.1884%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.9384%" y="581" width="0.0810%" height="15" fill="rgb(250,187,7)" fg:x="172" fg:w="1"/><text x="14.1884%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.9384%" y="565" width="0.0810%" height="15" fill="rgb(228,66,33)" fg:x="172" fg:w="1"/><text x="14.1884%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.9384%" y="549" width="0.0810%" height="15" fill="rgb(234,215,21)" fg:x="172" fg:w="1"/><text x="14.1884%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.9384%" y="533" width="0.0810%" height="15" fill="rgb(222,191,20)" fg:x="172" fg:w="1"/><text x="14.1884%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.9384%" y="517" width="0.0810%" height="15" fill="rgb(245,79,54)" fg:x="172" fg:w="1"/><text x="14.1884%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.9384%" y="501" width="0.0810%" height="15" fill="rgb(240,10,37)" fg:x="172" fg:w="1"/><text x="14.1884%" y="511.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="13.7763%" y="677" width="0.3241%" height="15" fill="rgb(214,192,32)" fg:x="170" fg:w="4"/><text x="14.0263%" y="687.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="14.0194%" y="661" width="0.0810%" height="15" fill="rgb(209,36,54)" fg:x="173" fg:w="1"/><text x="14.2694%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.0194%" y="645" width="0.0810%" height="15" fill="rgb(220,10,11)" fg:x="173" fg:w="1"/><text x="14.2694%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (59 samples, 4.78%)</title><rect x="9.4003%" y="693" width="4.7812%" height="15" fill="rgb(221,106,17)" fg:x="116" fg:w="59"/><text x="9.6503%" y="703.50">plugin..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="14.1005%" y="677" width="0.0810%" height="15" fill="rgb(251,142,44)" fg:x="174" fg:w="1"/><text x="14.3505%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="14.1005%" y="661" width="0.0810%" height="15" fill="rgb(238,13,15)" fg:x="174" fg:w="1"/><text x="14.3505%" y="671.50"></text></g><g><title>plugins_core::fashion::model::_::&lt;impl serde::ser::Serialize for plugins_core::fashion::model::Wearing&gt;::serialize (1 samples, 0.08%)</title><rect x="14.1005%" y="645" width="0.0810%" height="15" fill="rgb(208,107,27)" fg:x="174" fg:w="1"/><text x="14.3505%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.1005%" y="629" width="0.0810%" height="15" fill="rgb(205,136,37)" fg:x="174" fg:w="1"/><text x="14.3505%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="14.1005%" y="613" width="0.0810%" height="15" fill="rgb(250,205,27)" fg:x="174" fg:w="1"/><text x="14.3505%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="14.1005%" y="597" width="0.0810%" height="15" fill="rgb(210,80,43)" fg:x="174" fg:w="1"/><text x="14.3505%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="14.1815%" y="661" width="0.0810%" height="15" fill="rgb(247,160,36)" fg:x="175" fg:w="1"/><text x="14.4315%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="14.1815%" y="645" width="0.0810%" height="15" fill="rgb(234,13,49)" fg:x="175" fg:w="1"/><text x="14.4315%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="14.1815%" y="629" width="0.0810%" height="15" fill="rgb(234,122,0)" fg:x="175" fg:w="1"/><text x="14.4315%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="14.1815%" y="613" width="0.0810%" height="15" fill="rgb(207,146,38)" fg:x="175" fg:w="1"/><text x="14.4315%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.1815%" y="597" width="0.0810%" height="15" fill="rgb(207,177,25)" fg:x="175" fg:w="1"/><text x="14.4315%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="14.1815%" y="581" width="0.0810%" height="15" fill="rgb(211,178,42)" fg:x="175" fg:w="1"/><text x="14.4315%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.1815%" y="565" width="0.0810%" height="15" fill="rgb(230,69,54)" fg:x="175" fg:w="1"/><text x="14.4315%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.1815%" y="549" width="0.0810%" height="15" fill="rgb(214,135,41)" fg:x="175" fg:w="1"/><text x="14.4315%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="14.1815%" y="693" width="0.1621%" height="15" fill="rgb(237,67,25)" fg:x="175" fg:w="2"/><text x="14.4315%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="14.1815%" y="677" width="0.1621%" height="15" fill="rgb(222,189,50)" fg:x="175" fg:w="2"/><text x="14.4315%" y="687.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="14.2626%" y="661" width="0.0810%" height="15" fill="rgb(245,148,34)" fg:x="176" fg:w="1"/><text x="14.5126%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="14.2626%" y="645" width="0.0810%" height="15" fill="rgb(222,29,6)" fg:x="176" fg:w="1"/><text x="14.5126%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="14.2626%" y="629" width="0.0810%" height="15" fill="rgb(221,189,43)" fg:x="176" fg:w="1"/><text x="14.5126%" y="639.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="14.2626%" y="613" width="0.0810%" height="15" fill="rgb(207,36,27)" fg:x="176" fg:w="1"/><text x="14.5126%" y="623.50"></text></g><g><title>engine::session::Session::set_session (1 samples, 0.08%)</title><rect x="14.3436%" y="677" width="0.0810%" height="15" fill="rgb(217,90,24)" fg:x="177" fg:w="1"/><text x="14.5936%" y="687.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="14.4246%" y="677" width="0.0810%" height="15" fill="rgb(224,66,35)" fg:x="178" fg:w="1"/><text x="14.6746%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="14.4246%" y="661" width="0.0810%" height="15" fill="rgb(221,13,50)" fg:x="178" fg:w="1"/><text x="14.6746%" y="671.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="14.4246%" y="645" width="0.0810%" height="15" fill="rgb(236,68,49)" fg:x="178" fg:w="1"/><text x="14.6746%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="14.4246%" y="629" width="0.0810%" height="15" fill="rgb(229,146,28)" fg:x="178" fg:w="1"/><text x="14.6746%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="14.5057%" y="661" width="0.0810%" height="15" fill="rgb(225,31,38)" fg:x="179" fg:w="1"/><text x="14.7557%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.5057%" y="645" width="0.0810%" height="15" fill="rgb(250,208,3)" fg:x="179" fg:w="1"/><text x="14.7557%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.5057%" y="629" width="0.0810%" height="15" fill="rgb(246,54,23)" fg:x="179" fg:w="1"/><text x="14.7557%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="14.5867%" y="597" width="0.0810%" height="15" fill="rgb(243,76,11)" fg:x="180" fg:w="1"/><text x="14.8367%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.5867%" y="581" width="0.0810%" height="15" fill="rgb(245,21,50)" fg:x="180" fg:w="1"/><text x="14.8367%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5867%" y="565" width="0.0810%" height="15" fill="rgb(228,9,43)" fg:x="180" fg:w="1"/><text x="14.8367%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.5867%" y="549" width="0.0810%" height="15" fill="rgb(208,100,47)" fg:x="180" fg:w="1"/><text x="14.8367%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5867%" y="533" width="0.0810%" height="15" fill="rgb(232,26,8)" fg:x="180" fg:w="1"/><text x="14.8367%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.6677%" y="565" width="0.0810%" height="15" fill="rgb(216,166,38)" fg:x="181" fg:w="1"/><text x="14.9177%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.6677%" y="549" width="0.0810%" height="15" fill="rgb(251,202,51)" fg:x="181" fg:w="1"/><text x="14.9177%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.6677%" y="533" width="0.0810%" height="15" fill="rgb(254,216,34)" fg:x="181" fg:w="1"/><text x="14.9177%" y="543.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.7488%" y="549" width="0.0810%" height="15" fill="rgb(251,32,27)" fg:x="182" fg:w="1"/><text x="14.9988%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="14.5867%" y="629" width="0.3241%" height="15" fill="rgb(208,127,28)" fg:x="180" fg:w="4"/><text x="14.8367%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (4 samples, 0.32%)</title><rect x="14.5867%" y="613" width="0.3241%" height="15" fill="rgb(224,137,22)" fg:x="180" fg:w="4"/><text x="14.8367%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (3 samples, 0.24%)</title><rect x="14.6677%" y="597" width="0.2431%" height="15" fill="rgb(254,70,32)" fg:x="181" fg:w="3"/><text x="14.9177%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (3 samples, 0.24%)</title><rect x="14.6677%" y="581" width="0.2431%" height="15" fill="rgb(229,75,37)" fg:x="181" fg:w="3"/><text x="14.9177%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="14.7488%" y="565" width="0.1621%" height="15" fill="rgb(252,64,23)" fg:x="182" fg:w="2"/><text x="14.9988%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="14.8298%" y="549" width="0.0810%" height="15" fill="rgb(232,162,48)" fg:x="183" fg:w="1"/><text x="15.0798%" y="559.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (132 samples, 10.70%)</title><rect x="4.2950%" y="709" width="10.6969%" height="15" fill="rgb(246,160,12)" fg:x="53" fg:w="132"/><text x="4.5450%" y="719.50">&lt;tests::HoldingK..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (8 samples, 0.65%)</title><rect x="14.3436%" y="693" width="0.6483%" height="15" fill="rgb(247,166,0)" fg:x="177" fg:w="8"/><text x="14.5936%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.49%)</title><rect x="14.5057%" y="677" width="0.4862%" height="15" fill="rgb(249,219,21)" fg:x="179" fg:w="6"/><text x="14.7557%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.41%)</title><rect x="14.5867%" y="661" width="0.4052%" height="15" fill="rgb(205,209,3)" fg:x="180" fg:w="5"/><text x="14.8367%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.41%)</title><rect x="14.5867%" y="645" width="0.4052%" height="15" fill="rgb(243,44,1)" fg:x="180" fg:w="5"/><text x="14.8367%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="14.9109%" y="629" width="0.0810%" height="15" fill="rgb(206,159,16)" fg:x="184" fg:w="1"/><text x="15.1609%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.9109%" y="613" width="0.0810%" height="15" fill="rgb(244,77,30)" fg:x="184" fg:w="1"/><text x="15.1609%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="14.9919%" y="709" width="0.0810%" height="15" fill="rgb(218,69,12)" fg:x="185" fg:w="1"/><text x="15.2419%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="14.9919%" y="693" width="0.0810%" height="15" fill="rgb(212,87,7)" fg:x="185" fg:w="1"/><text x="15.2419%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="14.9919%" y="677" width="0.0810%" height="15" fill="rgb(245,114,25)" fg:x="185" fg:w="1"/><text x="15.2419%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.9919%" y="661" width="0.0810%" height="15" fill="rgb(210,61,42)" fg:x="185" fg:w="1"/><text x="15.2419%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="15.0729%" y="693" width="0.0810%" height="15" fill="rgb(211,52,33)" fg:x="186" fg:w="1"/><text x="15.3229%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.0729%" y="677" width="0.0810%" height="15" fill="rgb(234,58,33)" fg:x="186" fg:w="1"/><text x="15.3229%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="15.1540%" y="693" width="0.0810%" height="15" fill="rgb(220,115,36)" fg:x="187" fg:w="1"/><text x="15.4040%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="15.1540%" y="677" width="0.0810%" height="15" fill="rgb(243,153,54)" fg:x="187" fg:w="1"/><text x="15.4040%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.1540%" y="661" width="0.0810%" height="15" fill="rgb(251,47,18)" fg:x="187" fg:w="1"/><text x="15.4040%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="15.1540%" y="645" width="0.0810%" height="15" fill="rgb(242,102,42)" fg:x="187" fg:w="1"/><text x="15.4040%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="15.1540%" y="629" width="0.0810%" height="15" fill="rgb(234,31,38)" fg:x="187" fg:w="1"/><text x="15.4040%" y="639.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="15.1540%" y="613" width="0.0810%" height="15" fill="rgb(221,117,51)" fg:x="187" fg:w="1"/><text x="15.4040%" y="623.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="15.1540%" y="597" width="0.0810%" height="15" fill="rgb(212,20,18)" fg:x="187" fg:w="1"/><text x="15.4040%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="15.1540%" y="581" width="0.0810%" height="15" fill="rgb(245,133,36)" fg:x="187" fg:w="1"/><text x="15.4040%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.1540%" y="565" width="0.0810%" height="15" fill="rgb(212,6,19)" fg:x="187" fg:w="1"/><text x="15.4040%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="15.3160%" y="581" width="0.0810%" height="15" fill="rgb(218,1,36)" fg:x="189" fg:w="1"/><text x="15.5660%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="15.3160%" y="597" width="0.3241%" height="15" fill="rgb(246,84,54)" fg:x="189" fg:w="4"/><text x="15.5660%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="15.3971%" y="581" width="0.2431%" height="15" fill="rgb(242,110,6)" fg:x="190" fg:w="3"/><text x="15.6471%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="15.4781%" y="565" width="0.1621%" height="15" fill="rgb(214,47,5)" fg:x="191" fg:w="2"/><text x="15.7281%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="15.4781%" y="549" width="0.1621%" height="15" fill="rgb(218,159,25)" fg:x="191" fg:w="2"/><text x="15.7281%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="15.4781%" y="533" width="0.1621%" height="15" fill="rgb(215,211,28)" fg:x="191" fg:w="2"/><text x="15.7281%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="15.4781%" y="517" width="0.1621%" height="15" fill="rgb(238,59,32)" fg:x="191" fg:w="2"/><text x="15.7281%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="15.4781%" y="501" width="0.1621%" height="15" fill="rgb(226,82,3)" fg:x="191" fg:w="2"/><text x="15.7281%" y="511.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="15.4781%" y="485" width="0.1621%" height="15" fill="rgb(240,164,32)" fg:x="191" fg:w="2"/><text x="15.7281%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="15.6402%" y="581" width="0.0810%" height="15" fill="rgb(232,46,7)" fg:x="193" fg:w="1"/><text x="15.8902%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.6402%" y="565" width="0.0810%" height="15" fill="rgb(229,129,53)" fg:x="193" fg:w="1"/><text x="15.8902%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.6402%" y="549" width="0.0810%" height="15" fill="rgb(234,188,29)" fg:x="193" fg:w="1"/><text x="15.8902%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.6402%" y="533" width="0.0810%" height="15" fill="rgb(246,141,4)" fg:x="193" fg:w="1"/><text x="15.8902%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="15.7212%" y="581" width="0.1621%" height="15" fill="rgb(229,23,39)" fg:x="194" fg:w="2"/><text x="15.9712%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="15.7212%" y="565" width="0.1621%" height="15" fill="rgb(206,12,3)" fg:x="194" fg:w="2"/><text x="15.9712%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.8023%" y="549" width="0.0810%" height="15" fill="rgb(252,226,20)" fg:x="195" fg:w="1"/><text x="16.0523%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.8023%" y="533" width="0.0810%" height="15" fill="rgb(216,123,35)" fg:x="195" fg:w="1"/><text x="16.0523%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.8023%" y="517" width="0.0810%" height="15" fill="rgb(212,68,40)" fg:x="195" fg:w="1"/><text x="16.0523%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="15.6402%" y="597" width="0.3241%" height="15" fill="rgb(254,125,32)" fg:x="193" fg:w="4"/><text x="15.8902%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.8833%" y="581" width="0.0810%" height="15" fill="rgb(253,97,22)" fg:x="196" fg:w="1"/><text x="16.1333%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.9643%" y="565" width="0.0810%" height="15" fill="rgb(241,101,14)" fg:x="197" fg:w="1"/><text x="16.2143%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.9643%" y="549" width="0.0810%" height="15" fill="rgb(238,103,29)" fg:x="197" fg:w="1"/><text x="16.2143%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.9643%" y="533" width="0.0810%" height="15" fill="rgb(233,195,47)" fg:x="197" fg:w="1"/><text x="16.2143%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.9643%" y="517" width="0.0810%" height="15" fill="rgb(246,218,30)" fg:x="197" fg:w="1"/><text x="16.2143%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.81%)</title><rect x="15.3160%" y="613" width="0.8104%" height="15" fill="rgb(219,145,47)" fg:x="189" fg:w="10"/><text x="15.5660%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="15.9643%" y="597" width="0.1621%" height="15" fill="rgb(243,12,26)" fg:x="197" fg:w="2"/><text x="16.2143%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="15.9643%" y="581" width="0.1621%" height="15" fill="rgb(214,87,16)" fg:x="197" fg:w="2"/><text x="16.2143%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="16.0454%" y="565" width="0.0810%" height="15" fill="rgb(208,99,42)" fg:x="198" fg:w="1"/><text x="16.2954%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.2075%" y="581" width="0.0810%" height="15" fill="rgb(253,99,2)" fg:x="200" fg:w="1"/><text x="16.4575%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.2885%" y="533" width="0.0810%" height="15" fill="rgb(220,168,23)" fg:x="201" fg:w="1"/><text x="16.5385%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="16.1264%" y="613" width="0.3241%" height="15" fill="rgb(242,38,24)" fg:x="199" fg:w="4"/><text x="16.3764%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="16.2075%" y="597" width="0.2431%" height="15" fill="rgb(225,182,9)" fg:x="200" fg:w="3"/><text x="16.4575%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="16.2885%" y="581" width="0.1621%" height="15" fill="rgb(243,178,37)" fg:x="201" fg:w="2"/><text x="16.5385%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="16.2885%" y="565" width="0.1621%" height="15" fill="rgb(232,139,19)" fg:x="201" fg:w="2"/><text x="16.5385%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="16.2885%" y="549" width="0.1621%" height="15" fill="rgb(225,201,24)" fg:x="201" fg:w="2"/><text x="16.5385%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.3695%" y="533" width="0.0810%" height="15" fill="rgb(221,47,46)" fg:x="202" fg:w="1"/><text x="16.6195%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.4506%" y="549" width="0.0810%" height="15" fill="rgb(249,23,13)" fg:x="203" fg:w="1"/><text x="16.7006%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="16.5316%" y="533" width="0.1621%" height="15" fill="rgb(219,9,5)" fg:x="204" fg:w="2"/><text x="16.7816%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.6126%" y="517" width="0.0810%" height="15" fill="rgb(254,171,16)" fg:x="205" fg:w="1"/><text x="16.8626%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.7747%" y="501" width="0.0810%" height="15" fill="rgb(230,171,20)" fg:x="207" fg:w="1"/><text x="17.0247%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.65%)</title><rect x="16.4506%" y="581" width="0.6483%" height="15" fill="rgb(210,71,41)" fg:x="203" fg:w="8"/><text x="16.7006%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.65%)</title><rect x="16.4506%" y="565" width="0.6483%" height="15" fill="rgb(206,173,20)" fg:x="203" fg:w="8"/><text x="16.7006%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="16.5316%" y="549" width="0.5673%" height="15" fill="rgb(233,88,34)" fg:x="204" fg:w="7"/><text x="16.7816%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="16.6937%" y="533" width="0.4052%" height="15" fill="rgb(223,209,46)" fg:x="206" fg:w="5"/><text x="16.9437%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="16.7747%" y="517" width="0.3241%" height="15" fill="rgb(250,43,18)" fg:x="207" fg:w="4"/><text x="17.0247%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="16.8558%" y="501" width="0.2431%" height="15" fill="rgb(208,13,10)" fg:x="208" fg:w="3"/><text x="17.1058%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.0178%" y="485" width="0.0810%" height="15" fill="rgb(212,200,36)" fg:x="210" fg:w="1"/><text x="17.2678%" y="495.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="17.5041%" y="517" width="0.0810%" height="15" fill="rgb(225,90,30)" fg:x="216" fg:w="1"/><text x="17.7541%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="17.5041%" y="501" width="0.0810%" height="15" fill="rgb(236,182,39)" fg:x="216" fg:w="1"/><text x="17.7541%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="17.5041%" y="485" width="0.0810%" height="15" fill="rgb(212,144,35)" fg:x="216" fg:w="1"/><text x="17.7541%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (15 samples, 1.22%)</title><rect x="16.4506%" y="597" width="1.2156%" height="15" fill="rgb(228,63,44)" fg:x="203" fg:w="15"/><text x="16.7006%" y="607.50"></text></g><g><title>treediff::diff::diff (7 samples, 0.57%)</title><rect x="17.0989%" y="581" width="0.5673%" height="15" fill="rgb(228,109,6)" fg:x="211" fg:w="7"/><text x="17.3489%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (7 samples, 0.57%)</title><rect x="17.0989%" y="565" width="0.5673%" height="15" fill="rgb(238,117,24)" fg:x="211" fg:w="7"/><text x="17.3489%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.41%)</title><rect x="17.2609%" y="549" width="0.4052%" height="15" fill="rgb(242,26,26)" fg:x="213" fg:w="5"/><text x="17.5109%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="17.4230%" y="533" width="0.2431%" height="15" fill="rgb(221,92,48)" fg:x="215" fg:w="3"/><text x="17.6730%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="17.5851%" y="517" width="0.0810%" height="15" fill="rgb(209,209,32)" fg:x="217" fg:w="1"/><text x="17.8351%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="17.5851%" y="501" width="0.0810%" height="15" fill="rgb(221,70,22)" fg:x="217" fg:w="1"/><text x="17.8351%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="17.8282%" y="565" width="0.0810%" height="15" fill="rgb(248,145,5)" fg:x="220" fg:w="1"/><text x="18.0782%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="17.9092%" y="565" width="0.2431%" height="15" fill="rgb(226,116,26)" fg:x="221" fg:w="3"/><text x="18.1592%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="17.9903%" y="549" width="0.1621%" height="15" fill="rgb(244,5,17)" fg:x="222" fg:w="2"/><text x="18.2403%" y="559.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="18.1524%" y="565" width="0.0810%" height="15" fill="rgb(252,159,33)" fg:x="224" fg:w="1"/><text x="18.4024%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.1524%" y="549" width="0.0810%" height="15" fill="rgb(206,71,0)" fg:x="224" fg:w="1"/><text x="18.4024%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.1524%" y="533" width="0.0810%" height="15" fill="rgb(233,118,54)" fg:x="224" fg:w="1"/><text x="18.4024%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.1524%" y="517" width="0.0810%" height="15" fill="rgb(234,83,48)" fg:x="224" fg:w="1"/><text x="18.4024%" y="527.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="18.3955%" y="501" width="0.2431%" height="15" fill="rgb(228,3,54)" fg:x="227" fg:w="3"/><text x="18.6455%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.41%)</title><rect x="18.3144%" y="517" width="0.4052%" height="15" fill="rgb(226,155,13)" fg:x="226" fg:w="5"/><text x="18.5644%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="18.6386%" y="501" width="0.0810%" height="15" fill="rgb(241,28,37)" fg:x="230" fg:w="1"/><text x="18.8886%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="18.7196%" y="517" width="0.0810%" height="15" fill="rgb(233,93,10)" fg:x="231" fg:w="1"/><text x="18.9696%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.7196%" y="501" width="0.0810%" height="15" fill="rgb(225,113,19)" fg:x="231" fg:w="1"/><text x="18.9696%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.7196%" y="485" width="0.0810%" height="15" fill="rgb(241,2,18)" fg:x="231" fg:w="1"/><text x="18.9696%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.7196%" y="469" width="0.0810%" height="15" fill="rgb(228,207,21)" fg:x="231" fg:w="1"/><text x="18.9696%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.7196%" y="453" width="0.0810%" height="15" fill="rgb(213,211,35)" fg:x="231" fg:w="1"/><text x="18.9696%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.7196%" y="437" width="0.0810%" height="15" fill="rgb(209,83,10)" fg:x="231" fg:w="1"/><text x="18.9696%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="18.7196%" y="421" width="0.0810%" height="15" fill="rgb(209,164,1)" fg:x="231" fg:w="1"/><text x="18.9696%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.2869%" y="453" width="0.0810%" height="15" fill="rgb(213,184,43)" fg:x="238" fg:w="1"/><text x="19.5369%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.2869%" y="437" width="0.0810%" height="15" fill="rgb(231,61,34)" fg:x="238" fg:w="1"/><text x="19.5369%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.57%)</title><rect x="18.8817%" y="501" width="0.5673%" height="15" fill="rgb(235,75,3)" fg:x="233" fg:w="7"/><text x="19.1317%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="19.0438%" y="485" width="0.4052%" height="15" fill="rgb(220,106,47)" fg:x="235" fg:w="5"/><text x="19.2938%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="19.2058%" y="469" width="0.2431%" height="15" fill="rgb(210,196,33)" fg:x="237" fg:w="3"/><text x="19.4558%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="19.3679%" y="453" width="0.0810%" height="15" fill="rgb(229,154,42)" fg:x="239" fg:w="1"/><text x="19.6179%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.3679%" y="437" width="0.0810%" height="15" fill="rgb(228,114,26)" fg:x="239" fg:w="1"/><text x="19.6179%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (16 samples, 1.30%)</title><rect x="18.2334%" y="533" width="1.2966%" height="15" fill="rgb(208,144,1)" fg:x="225" fg:w="16"/><text x="18.4834%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.73%)</title><rect x="18.8006%" y="517" width="0.7293%" height="15" fill="rgb(239,112,37)" fg:x="232" fg:w="9"/><text x="19.0506%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.4489%" y="501" width="0.0810%" height="15" fill="rgb(210,96,50)" fg:x="240" fg:w="1"/><text x="19.6989%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (19 samples, 1.54%)</title><rect x="18.2334%" y="549" width="1.5397%" height="15" fill="rgb(222,178,2)" fg:x="225" fg:w="19"/><text x="18.4834%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="19.5300%" y="533" width="0.2431%" height="15" fill="rgb(226,74,18)" fg:x="241" fg:w="3"/><text x="19.7800%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="19.6110%" y="517" width="0.1621%" height="15" fill="rgb(225,67,54)" fg:x="242" fg:w="2"/><text x="19.8610%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (27 samples, 2.19%)</title><rect x="17.6661%" y="597" width="2.1880%" height="15" fill="rgb(251,92,32)" fg:x="218" fg:w="27"/><text x="17.9161%" y="607.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (26 samples, 2.11%)</title><rect x="17.7472%" y="581" width="2.1070%" height="15" fill="rgb(228,149,22)" fg:x="219" fg:w="26"/><text x="17.9972%" y="591.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (20 samples, 1.62%)</title><rect x="18.2334%" y="565" width="1.6207%" height="15" fill="rgb(243,54,13)" fg:x="225" fg:w="20"/><text x="18.4834%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.7731%" y="549" width="0.0810%" height="15" fill="rgb(243,180,28)" fg:x="244" fg:w="1"/><text x="20.0231%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="20.0162%" y="453" width="0.0810%" height="15" fill="rgb(208,167,24)" fg:x="247" fg:w="1"/><text x="20.2662%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="20.0162%" y="437" width="0.0810%" height="15" fill="rgb(245,73,45)" fg:x="247" fg:w="1"/><text x="20.2662%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="20.0162%" y="421" width="0.0810%" height="15" fill="rgb(237,203,48)" fg:x="247" fg:w="1"/><text x="20.2662%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.0162%" y="405" width="0.0810%" height="15" fill="rgb(211,197,16)" fg:x="247" fg:w="1"/><text x="20.2662%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="20.0972%" y="437" width="0.0810%" height="15" fill="rgb(243,99,51)" fg:x="248" fg:w="1"/><text x="20.3472%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="20.0972%" y="421" width="0.0810%" height="15" fill="rgb(215,123,29)" fg:x="248" fg:w="1"/><text x="20.3472%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="20.0972%" y="405" width="0.0810%" height="15" fill="rgb(239,186,37)" fg:x="248" fg:w="1"/><text x="20.3472%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="20.0162%" y="469" width="0.2431%" height="15" fill="rgb(252,136,39)" fg:x="247" fg:w="3"/><text x="20.2662%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="20.0972%" y="453" width="0.1621%" height="15" fill="rgb(223,213,32)" fg:x="248" fg:w="2"/><text x="20.3472%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.1783%" y="437" width="0.0810%" height="15" fill="rgb(233,115,5)" fg:x="249" fg:w="1"/><text x="20.4283%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.1783%" y="421" width="0.0810%" height="15" fill="rgb(207,226,44)" fg:x="249" fg:w="1"/><text x="20.4283%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.1783%" y="405" width="0.0810%" height="15" fill="rgb(208,126,0)" fg:x="249" fg:w="1"/><text x="20.4283%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="19.9352%" y="485" width="0.4052%" height="15" fill="rgb(244,66,21)" fg:x="246" fg:w="5"/><text x="20.1852%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="20.2593%" y="469" width="0.0810%" height="15" fill="rgb(222,97,12)" fg:x="250" fg:w="1"/><text x="20.5093%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="19.9352%" y="501" width="0.4862%" height="15" fill="rgb(219,213,19)" fg:x="246" fg:w="6"/><text x="20.1852%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.3404%" y="485" width="0.0810%" height="15" fill="rgb(252,169,30)" fg:x="251" fg:w="1"/><text x="20.5904%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="20.4214%" y="501" width="0.2431%" height="15" fill="rgb(206,32,51)" fg:x="252" fg:w="3"/><text x="20.6714%" y="511.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="20.4214%" y="485" width="0.2431%" height="15" fill="rgb(250,172,42)" fg:x="252" fg:w="3"/><text x="20.6714%" y="495.50"></text></g><g><title>engine::session::state::State::close (68 samples, 5.51%)</title><rect x="15.2350%" y="693" width="5.5105%" height="15" fill="rgb(209,34,43)" fg:x="188" fg:w="68"/><text x="15.4850%" y="703.50">engine:..</text></g><g><title>engine::session::state::State::flush_entities (68 samples, 5.51%)</title><rect x="15.2350%" y="677" width="5.5105%" height="15" fill="rgb(223,11,35)" fg:x="188" fg:w="68"/><text x="15.4850%" y="687.50">engine:..</text></g><g><title>core::iter::adapters::try_process (68 samples, 5.51%)</title><rect x="15.2350%" y="661" width="5.5105%" height="15" fill="rgb(251,219,26)" fg:x="188" fg:w="68"/><text x="15.4850%" y="671.50">core::i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (68 samples, 5.51%)</title><rect x="15.2350%" y="645" width="5.5105%" height="15" fill="rgb(231,119,3)" fg:x="188" fg:w="68"/><text x="15.4850%" y="655.50">&lt;alloc:..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (68 samples, 5.51%)</title><rect x="15.2350%" y="629" width="5.5105%" height="15" fill="rgb(216,97,11)" fg:x="188" fg:w="68"/><text x="15.4850%" y="639.50">engine:..</text></g><g><title>kernel::model::any_entity_changes (53 samples, 4.29%)</title><rect x="16.4506%" y="613" width="4.2950%" height="15" fill="rgb(223,59,9)" fg:x="203" fg:w="53"/><text x="16.7006%" y="623.50">kerne..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (11 samples, 0.89%)</title><rect x="19.8541%" y="597" width="0.8914%" height="15" fill="rgb(233,93,31)" fg:x="245" fg:w="11"/><text x="20.1041%" y="607.50"></text></g><g><title>serde_json::de::from_trait (11 samples, 0.89%)</title><rect x="19.8541%" y="581" width="0.8914%" height="15" fill="rgb(239,81,33)" fg:x="245" fg:w="11"/><text x="20.1041%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.89%)</title><rect x="19.8541%" y="565" width="0.8914%" height="15" fill="rgb(213,120,34)" fg:x="245" fg:w="11"/><text x="20.1041%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.89%)</title><rect x="19.8541%" y="549" width="0.8914%" height="15" fill="rgb(243,49,53)" fg:x="245" fg:w="11"/><text x="20.1041%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.89%)</title><rect x="19.8541%" y="533" width="0.8914%" height="15" fill="rgb(247,216,33)" fg:x="245" fg:w="11"/><text x="20.1041%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.89%)</title><rect x="19.8541%" y="517" width="0.8914%" height="15" fill="rgb(226,26,14)" fg:x="245" fg:w="11"/><text x="20.1041%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.6645%" y="501" width="0.0810%" height="15" fill="rgb(215,49,53)" fg:x="255" fg:w="1"/><text x="20.9145%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.6645%" y="485" width="0.0810%" height="15" fill="rgb(245,162,40)" fg:x="255" fg:w="1"/><text x="20.9145%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.6645%" y="469" width="0.0810%" height="15" fill="rgb(229,68,17)" fg:x="255" fg:w="1"/><text x="20.9145%" y="479.50"></text></g><g><title>engine::session::Session::close (71 samples, 5.75%)</title><rect x="15.0729%" y="709" width="5.7536%" height="15" fill="rgb(213,182,10)" fg:x="186" fg:w="71"/><text x="15.3229%" y="719.50">engine:..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="20.7455%" y="693" width="0.0810%" height="15" fill="rgb(245,125,30)" fg:x="256" fg:w="1"/><text x="20.9955%" y="703.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="20.9076%" y="677" width="0.0810%" height="15" fill="rgb(232,202,2)" fg:x="258" fg:w="1"/><text x="21.1576%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="20.9076%" y="661" width="0.0810%" height="15" fill="rgb(237,140,51)" fg:x="258" fg:w="1"/><text x="21.1576%" y="671.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="20.9076%" y="645" width="0.0810%" height="15" fill="rgb(236,157,25)" fg:x="258" fg:w="1"/><text x="21.1576%" y="655.50"></text></g><g><title>&lt;plugins_rune::parser::EditActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="20.9076%" y="629" width="0.0810%" height="15" fill="rgb(219,209,0)" fg:x="258" fg:w="1"/><text x="21.1576%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="21.0697%" y="661" width="0.0810%" height="15" fill="rgb(240,116,54)" fg:x="260" fg:w="1"/><text x="21.3197%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="21.0697%" y="645" width="0.0810%" height="15" fill="rgb(216,10,36)" fg:x="260" fg:w="1"/><text x="21.3197%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="21.0697%" y="629" width="0.0810%" height="15" fill="rgb(222,72,44)" fg:x="260" fg:w="1"/><text x="21.3197%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="21.0697%" y="613" width="0.0810%" height="15" fill="rgb(232,159,9)" fg:x="260" fg:w="1"/><text x="21.3197%" y="623.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="21.0697%" y="597" width="0.0810%" height="15" fill="rgb(210,39,32)" fg:x="260" fg:w="1"/><text x="21.3197%" y="607.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (1 samples, 0.08%)</title><rect x="21.0697%" y="581" width="0.0810%" height="15" fill="rgb(216,194,45)" fg:x="260" fg:w="1"/><text x="21.3197%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="21.0697%" y="565" width="0.0810%" height="15" fill="rgb(218,18,35)" fg:x="260" fg:w="1"/><text x="21.3197%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="21.0697%" y="549" width="0.0810%" height="15" fill="rgb(207,83,51)" fg:x="260" fg:w="1"/><text x="21.3197%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="21.0697%" y="533" width="0.0810%" height="15" fill="rgb(225,63,43)" fg:x="260" fg:w="1"/><text x="21.3197%" y="543.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="21.0697%" y="517" width="0.0810%" height="15" fill="rgb(207,57,36)" fg:x="260" fg:w="1"/><text x="21.3197%" y="527.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="21.0697%" y="501" width="0.0810%" height="15" fill="rgb(216,99,33)" fg:x="260" fg:w="1"/><text x="21.3197%" y="511.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="21.0697%" y="485" width="0.0810%" height="15" fill="rgb(225,42,16)" fg:x="260" fg:w="1"/><text x="21.3197%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="21.0697%" y="469" width="0.0810%" height="15" fill="rgb(220,201,45)" fg:x="260" fg:w="1"/><text x="21.3197%" y="479.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="21.0697%" y="453" width="0.0810%" height="15" fill="rgb(225,33,4)" fg:x="260" fg:w="1"/><text x="21.3197%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.0697%" y="437" width="0.0810%" height="15" fill="rgb(224,33,50)" fg:x="260" fg:w="1"/><text x="21.3197%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.0697%" y="421" width="0.0810%" height="15" fill="rgb(246,198,51)" fg:x="260" fg:w="1"/><text x="21.3197%" y="431.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="21.0697%" y="405" width="0.0810%" height="15" fill="rgb(205,22,4)" fg:x="260" fg:w="1"/><text x="21.3197%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="21.0697%" y="389" width="0.0810%" height="15" fill="rgb(206,3,8)" fg:x="260" fg:w="1"/><text x="21.3197%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="21.0697%" y="373" width="0.0810%" height="15" fill="rgb(251,23,15)" fg:x="260" fg:w="1"/><text x="21.3197%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="21.0697%" y="357" width="0.0810%" height="15" fill="rgb(252,88,28)" fg:x="260" fg:w="1"/><text x="21.3197%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="21.0697%" y="341" width="0.0810%" height="15" fill="rgb(212,127,14)" fg:x="260" fg:w="1"/><text x="21.3197%" y="351.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (1 samples, 0.08%)</title><rect x="21.2318%" y="645" width="0.0810%" height="15" fill="rgb(247,145,37)" fg:x="262" fg:w="1"/><text x="21.4818%" y="655.50"></text></g><g><title>tracing_core::callsite::register_dispatch (1 samples, 0.08%)</title><rect x="21.2318%" y="629" width="0.0810%" height="15" fill="rgb(209,117,53)" fg:x="262" fg:w="1"/><text x="21.4818%" y="639.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (1 samples, 0.08%)</title><rect x="21.2318%" y="613" width="0.0810%" height="15" fill="rgb(212,90,42)" fg:x="262" fg:w="1"/><text x="21.4818%" y="623.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="21.2318%" y="597" width="0.0810%" height="15" fill="rgb(218,164,37)" fg:x="262" fg:w="1"/><text x="21.4818%" y="607.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="21.3128%" y="517" width="0.0810%" height="15" fill="rgb(246,65,34)" fg:x="263" fg:w="1"/><text x="21.5628%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="21.3128%" y="533" width="0.1621%" height="15" fill="rgb(231,100,33)" fg:x="263" fg:w="2"/><text x="21.5628%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.3938%" y="517" width="0.0810%" height="15" fill="rgb(228,126,14)" fg:x="264" fg:w="1"/><text x="21.6438%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.3938%" y="501" width="0.0810%" height="15" fill="rgb(215,173,21)" fg:x="264" fg:w="1"/><text x="21.6438%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.3938%" y="485" width="0.0810%" height="15" fill="rgb(210,6,40)" fg:x="264" fg:w="1"/><text x="21.6438%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.3938%" y="469" width="0.0810%" height="15" fill="rgb(212,48,18)" fg:x="264" fg:w="1"/><text x="21.6438%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.4749%" y="469" width="0.1621%" height="15" fill="rgb(230,214,11)" fg:x="265" fg:w="2"/><text x="21.7249%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.4749%" y="453" width="0.1621%" height="15" fill="rgb(254,105,39)" fg:x="265" fg:w="2"/><text x="21.7249%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.4749%" y="437" width="0.1621%" height="15" fill="rgb(245,158,5)" fg:x="265" fg:w="2"/><text x="21.7249%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="21.4749%" y="421" width="0.1621%" height="15" fill="rgb(249,208,11)" fg:x="265" fg:w="2"/><text x="21.7249%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.5559%" y="405" width="0.0810%" height="15" fill="rgb(210,39,28)" fg:x="266" fg:w="1"/><text x="21.8059%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.5559%" y="389" width="0.0810%" height="15" fill="rgb(211,56,53)" fg:x="266" fg:w="1"/><text x="21.8059%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.5559%" y="373" width="0.0810%" height="15" fill="rgb(226,201,30)" fg:x="266" fg:w="1"/><text x="21.8059%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.5559%" y="357" width="0.0810%" height="15" fill="rgb(239,101,34)" fg:x="266" fg:w="1"/><text x="21.8059%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="21.5559%" y="341" width="0.0810%" height="15" fill="rgb(226,209,5)" fg:x="266" fg:w="1"/><text x="21.8059%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="21.5559%" y="325" width="0.0810%" height="15" fill="rgb(250,105,47)" fg:x="266" fg:w="1"/><text x="21.8059%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="21.5559%" y="309" width="0.0810%" height="15" fill="rgb(230,72,3)" fg:x="266" fg:w="1"/><text x="21.8059%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.5559%" y="293" width="0.0810%" height="15" fill="rgb(232,218,39)" fg:x="266" fg:w="1"/><text x="21.8059%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.5559%" y="277" width="0.0810%" height="15" fill="rgb(248,166,6)" fg:x="266" fg:w="1"/><text x="21.8059%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="21.5559%" y="261" width="0.0810%" height="15" fill="rgb(247,89,20)" fg:x="266" fg:w="1"/><text x="21.8059%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="21.5559%" y="245" width="0.0810%" height="15" fill="rgb(248,130,54)" fg:x="266" fg:w="1"/><text x="21.8059%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="21.5559%" y="229" width="0.0810%" height="15" fill="rgb(234,196,4)" fg:x="266" fg:w="1"/><text x="21.8059%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="21.5559%" y="213" width="0.0810%" height="15" fill="rgb(250,143,31)" fg:x="266" fg:w="1"/><text x="21.8059%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.5559%" y="197" width="0.0810%" height="15" fill="rgb(211,110,34)" fg:x="266" fg:w="1"/><text x="21.8059%" y="207.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="21.6370%" y="421" width="0.0810%" height="15" fill="rgb(215,124,48)" fg:x="267" fg:w="1"/><text x="21.8870%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.6370%" y="405" width="0.0810%" height="15" fill="rgb(216,46,13)" fg:x="267" fg:w="1"/><text x="21.8870%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="21.7180%" y="373" width="0.0810%" height="15" fill="rgb(205,184,25)" fg:x="268" fg:w="1"/><text x="21.9680%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="21.7180%" y="357" width="0.0810%" height="15" fill="rgb(228,1,10)" fg:x="268" fg:w="1"/><text x="21.9680%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="21.6370%" y="469" width="0.2431%" height="15" fill="rgb(213,116,27)" fg:x="267" fg:w="3"/><text x="21.8870%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="21.6370%" y="453" width="0.2431%" height="15" fill="rgb(241,95,50)" fg:x="267" fg:w="3"/><text x="21.8870%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="21.6370%" y="437" width="0.2431%" height="15" fill="rgb(238,48,32)" fg:x="267" fg:w="3"/><text x="21.8870%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="21.7180%" y="421" width="0.1621%" height="15" fill="rgb(235,113,49)" fg:x="268" fg:w="2"/><text x="21.9680%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.7180%" y="405" width="0.1621%" height="15" fill="rgb(205,127,43)" fg:x="268" fg:w="2"/><text x="21.9680%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="21.7180%" y="389" width="0.1621%" height="15" fill="rgb(250,162,2)" fg:x="268" fg:w="2"/><text x="21.9680%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.7990%" y="373" width="0.0810%" height="15" fill="rgb(220,13,41)" fg:x="269" fg:w="1"/><text x="22.0490%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="21.7990%" y="357" width="0.0810%" height="15" fill="rgb(249,221,25)" fg:x="269" fg:w="1"/><text x="22.0490%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="21.8801%" y="405" width="0.0810%" height="15" fill="rgb(215,208,19)" fg:x="270" fg:w="1"/><text x="22.1301%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="21.8801%" y="389" width="0.0810%" height="15" fill="rgb(236,175,2)" fg:x="270" fg:w="1"/><text x="22.1301%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="21.8801%" y="373" width="0.0810%" height="15" fill="rgb(241,52,2)" fg:x="270" fg:w="1"/><text x="22.1301%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="21.8801%" y="357" width="0.0810%" height="15" fill="rgb(248,140,14)" fg:x="270" fg:w="1"/><text x="22.1301%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="21.8801%" y="341" width="0.0810%" height="15" fill="rgb(253,22,42)" fg:x="270" fg:w="1"/><text x="22.1301%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="21.8801%" y="325" width="0.0810%" height="15" fill="rgb(234,61,47)" fg:x="270" fg:w="1"/><text x="22.1301%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="21.8801%" y="309" width="0.0810%" height="15" fill="rgb(208,226,15)" fg:x="270" fg:w="1"/><text x="22.1301%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="21.8801%" y="293" width="0.0810%" height="15" fill="rgb(217,221,4)" fg:x="270" fg:w="1"/><text x="22.1301%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.8801%" y="277" width="0.0810%" height="15" fill="rgb(212,174,34)" fg:x="270" fg:w="1"/><text x="22.1301%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.8801%" y="261" width="0.0810%" height="15" fill="rgb(253,83,4)" fg:x="270" fg:w="1"/><text x="22.1301%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="21.8801%" y="245" width="0.0810%" height="15" fill="rgb(250,195,49)" fg:x="270" fg:w="1"/><text x="22.1301%" y="255.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="21.4749%" y="485" width="0.5673%" height="15" fill="rgb(241,192,25)" fg:x="265" fg:w="7"/><text x="21.7249%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="21.8801%" y="469" width="0.1621%" height="15" fill="rgb(208,124,10)" fg:x="270" fg:w="2"/><text x="22.1301%" y="479.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="21.8801%" y="453" width="0.1621%" height="15" fill="rgb(222,33,0)" fg:x="270" fg:w="2"/><text x="22.1301%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="21.8801%" y="437" width="0.1621%" height="15" fill="rgb(234,209,28)" fg:x="270" fg:w="2"/><text x="22.1301%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="21.8801%" y="421" width="0.1621%" height="15" fill="rgb(224,11,23)" fg:x="270" fg:w="2"/><text x="22.1301%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="21.9611%" y="405" width="0.0810%" height="15" fill="rgb(232,99,1)" fg:x="271" fg:w="1"/><text x="22.2111%" y="415.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (10 samples, 0.81%)</title><rect x="21.3128%" y="565" width="0.8104%" height="15" fill="rgb(237,95,45)" fg:x="263" fg:w="10"/><text x="21.5628%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (10 samples, 0.81%)</title><rect x="21.3128%" y="549" width="0.8104%" height="15" fill="rgb(208,109,11)" fg:x="263" fg:w="10"/><text x="21.5628%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (8 samples, 0.65%)</title><rect x="21.4749%" y="533" width="0.6483%" height="15" fill="rgb(216,190,48)" fg:x="265" fg:w="8"/><text x="21.7249%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.65%)</title><rect x="21.4749%" y="517" width="0.6483%" height="15" fill="rgb(251,171,36)" fg:x="265" fg:w="8"/><text x="21.7249%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.65%)</title><rect x="21.4749%" y="501" width="0.6483%" height="15" fill="rgb(230,62,22)" fg:x="265" fg:w="8"/><text x="21.7249%" y="511.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="22.0421%" y="485" width="0.0810%" height="15" fill="rgb(225,114,35)" fg:x="272" fg:w="1"/><text x="22.2921%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="22.0421%" y="469" width="0.0810%" height="15" fill="rgb(215,118,42)" fg:x="272" fg:w="1"/><text x="22.2921%" y="479.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (1 samples, 0.08%)</title><rect x="22.1232%" y="533" width="0.0810%" height="15" fill="rgb(243,119,21)" fg:x="273" fg:w="1"/><text x="22.3732%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.2042%" y="325" width="0.0810%" height="15" fill="rgb(252,177,53)" fg:x="274" fg:w="1"/><text x="22.4542%" y="335.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="22.3663%" y="261" width="0.0810%" height="15" fill="rgb(237,209,29)" fg:x="276" fg:w="1"/><text x="22.6163%" y="271.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.24%)</title><rect x="22.2853%" y="325" width="0.2431%" height="15" fill="rgb(212,65,23)" fg:x="275" fg:w="3"/><text x="22.5353%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="22.2853%" y="309" width="0.2431%" height="15" fill="rgb(230,222,46)" fg:x="275" fg:w="3"/><text x="22.5353%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="22.2853%" y="293" width="0.2431%" height="15" fill="rgb(215,135,32)" fg:x="275" fg:w="3"/><text x="22.5353%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="22.3663%" y="277" width="0.1621%" height="15" fill="rgb(246,101,22)" fg:x="276" fg:w="2"/><text x="22.6163%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="22.4473%" y="261" width="0.0810%" height="15" fill="rgb(206,107,13)" fg:x="277" fg:w="1"/><text x="22.6973%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="22.6094%" y="277" width="0.1621%" height="15" fill="rgb(250,100,44)" fg:x="279" fg:w="2"/><text x="22.8594%" y="287.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (4 samples, 0.32%)</title><rect x="22.6094%" y="309" width="0.3241%" height="15" fill="rgb(231,147,38)" fg:x="279" fg:w="4"/><text x="22.8594%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="22.6094%" y="293" width="0.3241%" height="15" fill="rgb(229,8,40)" fg:x="279" fg:w="4"/><text x="22.8594%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="22.7715%" y="277" width="0.1621%" height="15" fill="rgb(221,135,30)" fg:x="281" fg:w="2"/><text x="23.0215%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="22.7715%" y="261" width="0.1621%" height="15" fill="rgb(249,193,18)" fg:x="281" fg:w="2"/><text x="23.0215%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="22.8525%" y="245" width="0.0810%" height="15" fill="rgb(209,133,39)" fg:x="282" fg:w="1"/><text x="23.1025%" y="255.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (10 samples, 0.81%)</title><rect x="22.2042%" y="357" width="0.8104%" height="15" fill="rgb(232,100,14)" fg:x="274" fg:w="10"/><text x="22.4542%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.81%)</title><rect x="22.2042%" y="341" width="0.8104%" height="15" fill="rgb(224,185,1)" fg:x="274" fg:w="10"/><text x="22.4542%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (6 samples, 0.49%)</title><rect x="22.5284%" y="325" width="0.4862%" height="15" fill="rgb(223,139,8)" fg:x="278" fg:w="6"/><text x="22.7784%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="22.9335%" y="309" width="0.0810%" height="15" fill="rgb(232,213,38)" fg:x="283" fg:w="1"/><text x="23.1835%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="22.9335%" y="293" width="0.0810%" height="15" fill="rgb(207,94,22)" fg:x="283" fg:w="1"/><text x="23.1835%" y="303.50"></text></g><g><title>&lt;core::char::ToLowercase as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="23.1767%" y="325" width="0.0810%" height="15" fill="rgb(219,183,54)" fg:x="286" fg:w="1"/><text x="23.4267%" y="335.50"></text></g><g><title>&lt;core::char::CaseMappingIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="23.1767%" y="309" width="0.0810%" height="15" fill="rgb(216,185,54)" fg:x="286" fg:w="1"/><text x="23.4267%" y="319.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (14 samples, 1.13%)</title><rect x="22.2042%" y="373" width="1.1345%" height="15" fill="rgb(254,217,39)" fg:x="274" fg:w="14"/><text x="22.4542%" y="383.50"></text></g><g><title>replies::identifier_to_key (4 samples, 0.32%)</title><rect x="23.0146%" y="357" width="0.3241%" height="15" fill="rgb(240,178,23)" fg:x="284" fg:w="4"/><text x="23.2646%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="23.0956%" y="341" width="0.2431%" height="15" fill="rgb(218,11,47)" fg:x="285" fg:w="3"/><text x="23.3456%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="23.2577%" y="325" width="0.0810%" height="15" fill="rgb(218,51,51)" fg:x="287" fg:w="1"/><text x="23.5077%" y="335.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (15 samples, 1.22%)</title><rect x="22.2042%" y="389" width="1.2156%" height="15" fill="rgb(238,126,27)" fg:x="274" fg:w="15"/><text x="22.4542%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="23.3387%" y="373" width="0.0810%" height="15" fill="rgb(249,202,22)" fg:x="288" fg:w="1"/><text x="23.5887%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="23.3387%" y="357" width="0.0810%" height="15" fill="rgb(254,195,49)" fg:x="288" fg:w="1"/><text x="23.5887%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="23.5818%" y="357" width="0.1621%" height="15" fill="rgb(208,123,14)" fg:x="291" fg:w="2"/><text x="23.8318%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.6629%" y="341" width="0.0810%" height="15" fill="rgb(224,200,8)" fg:x="292" fg:w="1"/><text x="23.9129%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.6629%" y="325" width="0.0810%" height="15" fill="rgb(217,61,36)" fg:x="292" fg:w="1"/><text x="23.9129%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.7439%" y="325" width="0.0810%" height="15" fill="rgb(206,35,45)" fg:x="293" fg:w="1"/><text x="23.9939%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.7439%" y="309" width="0.0810%" height="15" fill="rgb(217,65,33)" fg:x="293" fg:w="1"/><text x="23.9939%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.7439%" y="293" width="0.0810%" height="15" fill="rgb(222,158,48)" fg:x="293" fg:w="1"/><text x="23.9939%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.7439%" y="277" width="0.0810%" height="15" fill="rgb(254,2,54)" fg:x="293" fg:w="1"/><text x="23.9939%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.7439%" y="261" width="0.0810%" height="15" fill="rgb(250,143,38)" fg:x="293" fg:w="1"/><text x="23.9939%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="23.7439%" y="245" width="0.0810%" height="15" fill="rgb(248,25,0)" fg:x="293" fg:w="1"/><text x="23.9939%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="23.7439%" y="229" width="0.0810%" height="15" fill="rgb(206,152,27)" fg:x="293" fg:w="1"/><text x="23.9939%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="23.7439%" y="213" width="0.0810%" height="15" fill="rgb(240,77,30)" fg:x="293" fg:w="1"/><text x="23.9939%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.7439%" y="197" width="0.0810%" height="15" fill="rgb(231,5,3)" fg:x="293" fg:w="1"/><text x="23.9939%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.7439%" y="181" width="0.0810%" height="15" fill="rgb(207,226,32)" fg:x="293" fg:w="1"/><text x="23.9939%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="23.7439%" y="165" width="0.0810%" height="15" fill="rgb(222,207,47)" fg:x="293" fg:w="1"/><text x="23.9939%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="23.7439%" y="149" width="0.0810%" height="15" fill="rgb(229,115,45)" fg:x="293" fg:w="1"/><text x="23.9939%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="23.7439%" y="133" width="0.0810%" height="15" fill="rgb(224,191,6)" fg:x="293" fg:w="1"/><text x="23.9939%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="23.7439%" y="117" width="0.0810%" height="15" fill="rgb(230,227,24)" fg:x="293" fg:w="1"/><text x="23.9939%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.8250%" y="325" width="0.0810%" height="15" fill="rgb(228,80,19)" fg:x="294" fg:w="1"/><text x="24.0750%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.9060%" y="325" width="0.0810%" height="15" fill="rgb(247,229,0)" fg:x="295" fg:w="1"/><text x="24.1560%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.9870%" y="261" width="0.0810%" height="15" fill="rgb(237,194,15)" fg:x="296" fg:w="1"/><text x="24.2370%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.41%)</title><rect x="23.7439%" y="341" width="0.4052%" height="15" fill="rgb(219,203,20)" fg:x="293" fg:w="5"/><text x="23.9939%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="23.9870%" y="325" width="0.1621%" height="15" fill="rgb(234,128,8)" fg:x="296" fg:w="2"/><text x="24.2370%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="23.9870%" y="309" width="0.1621%" height="15" fill="rgb(248,202,8)" fg:x="296" fg:w="2"/><text x="24.2370%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="23.9870%" y="293" width="0.1621%" height="15" fill="rgb(206,104,37)" fg:x="296" fg:w="2"/><text x="24.2370%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="23.9870%" y="277" width="0.1621%" height="15" fill="rgb(223,8,27)" fg:x="296" fg:w="2"/><text x="24.2370%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="24.0681%" y="261" width="0.0810%" height="15" fill="rgb(216,217,28)" fg:x="297" fg:w="1"/><text x="24.3181%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.0681%" y="245" width="0.0810%" height="15" fill="rgb(249,199,1)" fg:x="297" fg:w="1"/><text x="24.3181%" y="255.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (6 samples, 0.49%)</title><rect x="23.7439%" y="357" width="0.4862%" height="15" fill="rgb(240,85,17)" fg:x="293" fg:w="6"/><text x="23.9939%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.1491%" y="341" width="0.0810%" height="15" fill="rgb(206,108,45)" fg:x="298" fg:w="1"/><text x="24.3991%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="24.2301%" y="357" width="0.0810%" height="15" fill="rgb(245,210,41)" fg:x="299" fg:w="1"/><text x="24.4801%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="24.2301%" y="341" width="0.0810%" height="15" fill="rgb(206,13,37)" fg:x="299" fg:w="1"/><text x="24.4801%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.2301%" y="325" width="0.0810%" height="15" fill="rgb(250,61,18)" fg:x="299" fg:w="1"/><text x="24.4801%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.5543%" y="341" width="0.0810%" height="15" fill="rgb(235,172,48)" fg:x="303" fg:w="1"/><text x="24.8043%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.5543%" y="325" width="0.0810%" height="15" fill="rgb(249,201,17)" fg:x="303" fg:w="1"/><text x="24.8043%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.5543%" y="309" width="0.0810%" height="15" fill="rgb(219,208,6)" fg:x="303" fg:w="1"/><text x="24.8043%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.6353%" y="341" width="0.0810%" height="15" fill="rgb(248,31,23)" fg:x="304" fg:w="1"/><text x="24.8853%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.7164%" y="261" width="0.0810%" height="15" fill="rgb(245,15,42)" fg:x="305" fg:w="1"/><text x="24.9664%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="24.7164%" y="277" width="0.1621%" height="15" fill="rgb(222,217,39)" fg:x="305" fg:w="2"/><text x="24.9664%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.7974%" y="261" width="0.0810%" height="15" fill="rgb(210,219,27)" fg:x="306" fg:w="1"/><text x="25.0474%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (8 samples, 0.65%)</title><rect x="24.3112%" y="357" width="0.6483%" height="15" fill="rgb(252,166,36)" fg:x="300" fg:w="8"/><text x="24.5612%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="24.7164%" y="341" width="0.2431%" height="15" fill="rgb(245,132,34)" fg:x="305" fg:w="3"/><text x="24.9664%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="24.7164%" y="325" width="0.2431%" height="15" fill="rgb(236,54,3)" fg:x="305" fg:w="3"/><text x="24.9664%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="24.7164%" y="309" width="0.2431%" height="15" fill="rgb(241,173,43)" fg:x="305" fg:w="3"/><text x="24.9664%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="24.7164%" y="293" width="0.2431%" height="15" fill="rgb(215,190,9)" fg:x="305" fg:w="3"/><text x="24.9664%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="24.8784%" y="277" width="0.0810%" height="15" fill="rgb(242,101,16)" fg:x="307" fg:w="1"/><text x="25.1284%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.8784%" y="261" width="0.0810%" height="15" fill="rgb(223,190,21)" fg:x="307" fg:w="1"/><text x="25.1284%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="24.9595%" y="357" width="0.1621%" height="15" fill="rgb(215,228,25)" fg:x="308" fg:w="2"/><text x="25.2095%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.2026%" y="325" width="0.0810%" height="15" fill="rgb(225,36,22)" fg:x="311" fg:w="1"/><text x="25.4526%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.2026%" y="309" width="0.0810%" height="15" fill="rgb(251,106,46)" fg:x="311" fg:w="1"/><text x="25.4526%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.2026%" y="293" width="0.0810%" height="15" fill="rgb(208,90,1)" fg:x="311" fg:w="1"/><text x="25.4526%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.2836%" y="325" width="0.0810%" height="15" fill="rgb(243,10,4)" fg:x="312" fg:w="1"/><text x="25.5336%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="25.5267%" y="261" width="0.1621%" height="15" fill="rgb(212,137,27)" fg:x="315" fg:w="2"/><text x="25.7767%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="25.5267%" y="245" width="0.1621%" height="15" fill="rgb(231,220,49)" fg:x="315" fg:w="2"/><text x="25.7767%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.16%)</title><rect x="25.5267%" y="229" width="0.1621%" height="15" fill="rgb(237,96,20)" fg:x="315" fg:w="2"/><text x="25.7767%" y="239.50"></text></g><g><title>kernel::model::EntityPtr::gid (8 samples, 0.65%)</title><rect x="25.1216%" y="357" width="0.6483%" height="15" fill="rgb(239,229,30)" fg:x="310" fg:w="8"/><text x="25.3716%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (8 samples, 0.65%)</title><rect x="25.1216%" y="341" width="0.6483%" height="15" fill="rgb(219,65,33)" fg:x="310" fg:w="8"/><text x="25.3716%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="25.3647%" y="325" width="0.4052%" height="15" fill="rgb(243,134,7)" fg:x="313" fg:w="5"/><text x="25.6147%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="25.3647%" y="309" width="0.4052%" height="15" fill="rgb(216,177,54)" fg:x="313" fg:w="5"/><text x="25.6147%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="25.5267%" y="293" width="0.2431%" height="15" fill="rgb(211,160,20)" fg:x="315" fg:w="3"/><text x="25.7767%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="25.5267%" y="277" width="0.2431%" height="15" fill="rgb(239,85,39)" fg:x="315" fg:w="3"/><text x="25.7767%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="25.6888%" y="261" width="0.0810%" height="15" fill="rgb(232,125,22)" fg:x="317" fg:w="1"/><text x="25.9388%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.8509%" y="309" width="0.0810%" height="15" fill="rgb(244,57,34)" fg:x="319" fg:w="1"/><text x="26.1009%" y="319.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (2 samples, 0.16%)</title><rect x="26.0130%" y="293" width="0.1621%" height="15" fill="rgb(214,203,32)" fg:x="321" fg:w="2"/><text x="26.2630%" y="303.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="26.0940%" y="277" width="0.0810%" height="15" fill="rgb(207,58,43)" fg:x="322" fg:w="1"/><text x="26.3440%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="26.0940%" y="261" width="0.0810%" height="15" fill="rgb(215,193,15)" fg:x="322" fg:w="1"/><text x="26.3440%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="26.0940%" y="245" width="0.0810%" height="15" fill="rgb(232,15,44)" fg:x="322" fg:w="1"/><text x="26.3440%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="26.0940%" y="229" width="0.0810%" height="15" fill="rgb(212,3,48)" fg:x="322" fg:w="1"/><text x="26.3440%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="26.0940%" y="213" width="0.0810%" height="15" fill="rgb(218,128,7)" fg:x="322" fg:w="1"/><text x="26.3440%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="26.0940%" y="197" width="0.0810%" height="15" fill="rgb(226,216,39)" fg:x="322" fg:w="1"/><text x="26.3440%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="26.0940%" y="181" width="0.0810%" height="15" fill="rgb(243,47,51)" fg:x="322" fg:w="1"/><text x="26.3440%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="26.0940%" y="165" width="0.0810%" height="15" fill="rgb(241,183,40)" fg:x="322" fg:w="1"/><text x="26.3440%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="26.3371%" y="277" width="0.2431%" height="15" fill="rgb(231,217,32)" fg:x="325" fg:w="3"/><text x="26.5871%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="26.4992%" y="261" width="0.0810%" height="15" fill="rgb(229,61,38)" fg:x="327" fg:w="1"/><text x="26.7492%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.4992%" y="245" width="0.0810%" height="15" fill="rgb(225,210,5)" fg:x="327" fg:w="1"/><text x="26.7492%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="26.4992%" y="229" width="0.0810%" height="15" fill="rgb(231,79,45)" fg:x="327" fg:w="1"/><text x="26.7492%" y="239.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="27.1475%" y="181" width="0.0810%" height="15" fill="rgb(224,100,7)" fg:x="335" fg:w="1"/><text x="27.3975%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="27.0665%" y="213" width="0.2431%" height="15" fill="rgb(241,198,18)" fg:x="334" fg:w="3"/><text x="27.3165%" y="223.50"></text></g><g><title>regex_automata::util::determinize::next (3 samples, 0.24%)</title><rect x="27.0665%" y="197" width="0.2431%" height="15" fill="rgb(252,97,53)" fg:x="334" fg:w="3"/><text x="27.3165%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="27.2285%" y="181" width="0.0810%" height="15" fill="rgb(220,88,7)" fg:x="336" fg:w="1"/><text x="27.4785%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.81%)</title><rect x="26.5802%" y="277" width="0.8104%" height="15" fill="rgb(213,176,14)" fg:x="328" fg:w="10"/><text x="26.8302%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.81%)</title><rect x="26.5802%" y="261" width="0.8104%" height="15" fill="rgb(246,73,7)" fg:x="328" fg:w="10"/><text x="26.8302%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (10 samples, 0.81%)</title><rect x="26.5802%" y="245" width="0.8104%" height="15" fill="rgb(245,64,36)" fg:x="328" fg:w="10"/><text x="26.8302%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (10 samples, 0.81%)</title><rect x="26.5802%" y="229" width="0.8104%" height="15" fill="rgb(245,80,10)" fg:x="328" fg:w="10"/><text x="26.8302%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="27.3096%" y="213" width="0.0810%" height="15" fill="rgb(232,107,50)" fg:x="337" fg:w="1"/><text x="27.5596%" y="223.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="27.3096%" y="197" width="0.0810%" height="15" fill="rgb(253,3,0)" fg:x="337" fg:w="1"/><text x="27.5596%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.3906%" y="277" width="0.0810%" height="15" fill="rgb(212,99,53)" fg:x="338" fg:w="1"/><text x="27.6406%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.4716%" y="245" width="0.0810%" height="15" fill="rgb(249,111,54)" fg:x="339" fg:w="1"/><text x="27.7216%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="27.5527%" y="245" width="0.1621%" height="15" fill="rgb(249,55,30)" fg:x="340" fg:w="2"/><text x="27.8027%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="27.6337%" y="229" width="0.0810%" height="15" fill="rgb(237,47,42)" fg:x="341" fg:w="1"/><text x="27.8837%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="27.4716%" y="277" width="0.3241%" height="15" fill="rgb(211,20,18)" fg:x="339" fg:w="4"/><text x="27.7216%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="27.4716%" y="261" width="0.3241%" height="15" fill="rgb(231,203,46)" fg:x="339" fg:w="4"/><text x="27.7216%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="27.7147%" y="245" width="0.0810%" height="15" fill="rgb(237,142,3)" fg:x="342" fg:w="1"/><text x="27.9647%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="27.7147%" y="229" width="0.0810%" height="15" fill="rgb(241,107,1)" fg:x="342" fg:w="1"/><text x="27.9647%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="28.0389%" y="229" width="0.0810%" height="15" fill="rgb(229,83,13)" fg:x="346" fg:w="1"/><text x="28.2889%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="28.0389%" y="213" width="0.0810%" height="15" fill="rgb(241,91,40)" fg:x="346" fg:w="1"/><text x="28.2889%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.4441%" y="213" width="0.0810%" height="15" fill="rgb(225,3,45)" fg:x="351" fg:w="1"/><text x="28.6941%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.6062%" y="197" width="0.0810%" height="15" fill="rgb(244,223,14)" fg:x="353" fg:w="1"/><text x="28.8562%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (17 samples, 1.38%)</title><rect x="28.5251%" y="213" width="1.3776%" height="15" fill="rgb(224,124,37)" fg:x="352" fg:w="17"/><text x="28.7751%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (15 samples, 1.22%)</title><rect x="28.6872%" y="197" width="1.2156%" height="15" fill="rgb(251,171,30)" fg:x="354" fg:w="15"/><text x="28.9372%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.8217%" y="181" width="0.0810%" height="15" fill="rgb(236,46,54)" fg:x="368" fg:w="1"/><text x="30.0717%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="29.9028%" y="213" width="0.0810%" height="15" fill="rgb(245,213,5)" fg:x="369" fg:w="1"/><text x="30.1528%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (9 samples, 0.73%)</title><rect x="29.9838%" y="213" width="0.7293%" height="15" fill="rgb(230,144,27)" fg:x="370" fg:w="9"/><text x="30.2338%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="30.4700%" y="197" width="0.2431%" height="15" fill="rgb(220,86,6)" fg:x="376" fg:w="3"/><text x="30.7200%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="30.8752%" y="165" width="0.0810%" height="15" fill="rgb(240,20,13)" fg:x="381" fg:w="1"/><text x="31.1252%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="30.8752%" y="149" width="0.0810%" height="15" fill="rgb(217,89,34)" fg:x="381" fg:w="1"/><text x="31.1252%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.8752%" y="133" width="0.0810%" height="15" fill="rgb(229,13,5)" fg:x="381" fg:w="1"/><text x="31.1252%" y="143.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.8752%" y="117" width="0.0810%" height="15" fill="rgb(244,67,35)" fg:x="381" fg:w="1"/><text x="31.1252%" y="127.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="31.1994%" y="149" width="0.0810%" height="15" fill="rgb(221,40,2)" fg:x="385" fg:w="1"/><text x="31.4494%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.2804%" y="149" width="0.0810%" height="15" fill="rgb(237,157,21)" fg:x="386" fg:w="1"/><text x="31.5304%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="31.3614%" y="149" width="0.0810%" height="15" fill="rgb(222,94,11)" fg:x="387" fg:w="1"/><text x="31.6114%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="31.4425%" y="149" width="0.1621%" height="15" fill="rgb(249,113,6)" fg:x="388" fg:w="2"/><text x="31.6925%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.5235%" y="133" width="0.0810%" height="15" fill="rgb(238,137,36)" fg:x="389" fg:w="1"/><text x="31.7735%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.5235%" y="117" width="0.0810%" height="15" fill="rgb(210,102,26)" fg:x="389" fg:w="1"/><text x="31.7735%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.5235%" y="101" width="0.0810%" height="15" fill="rgb(218,30,30)" fg:x="389" fg:w="1"/><text x="31.7735%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.6856%" y="117" width="0.0810%" height="15" fill="rgb(214,67,26)" fg:x="391" fg:w="1"/><text x="31.9356%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.6856%" y="101" width="0.0810%" height="15" fill="rgb(251,9,53)" fg:x="391" fg:w="1"/><text x="31.9356%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="31.6856%" y="85" width="0.0810%" height="15" fill="rgb(228,204,25)" fg:x="391" fg:w="1"/><text x="31.9356%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="31.6045%" y="149" width="0.3241%" height="15" fill="rgb(207,153,8)" fg:x="390" fg:w="4"/><text x="31.8545%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="31.6856%" y="133" width="0.2431%" height="15" fill="rgb(242,9,16)" fg:x="391" fg:w="3"/><text x="31.9356%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="31.7666%" y="117" width="0.1621%" height="15" fill="rgb(217,211,10)" fg:x="392" fg:w="2"/><text x="32.0166%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="31.9287%" y="133" width="0.0810%" height="15" fill="rgb(219,228,52)" fg:x="394" fg:w="1"/><text x="32.1787%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.9287%" y="117" width="0.0810%" height="15" fill="rgb(231,92,29)" fg:x="394" fg:w="1"/><text x="32.1787%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.9287%" y="101" width="0.0810%" height="15" fill="rgb(232,8,23)" fg:x="394" fg:w="1"/><text x="32.1787%" y="111.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="32.0097%" y="117" width="0.1621%" height="15" fill="rgb(216,211,34)" fg:x="395" fg:w="2"/><text x="32.2597%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (70 samples, 5.67%)</title><rect x="31.9287%" y="149" width="5.6726%" height="15" fill="rgb(236,151,0)" fg:x="394" fg:w="70"/><text x="32.1787%" y="159.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (69 samples, 5.59%)</title><rect x="32.0097%" y="133" width="5.5916%" height="15" fill="rgb(209,168,3)" fg:x="395" fg:w="69"/><text x="32.2597%" y="143.50">regex_a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (67 samples, 5.43%)</title><rect x="32.1718%" y="117" width="5.4295%" height="15" fill="rgb(208,129,28)" fg:x="397" fg:w="67"/><text x="32.4218%" y="127.50">alloc::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="37.6013%" y="149" width="0.3241%" height="15" fill="rgb(229,78,22)" fg:x="464" fg:w="4"/><text x="37.8513%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.8444%" y="133" width="0.0810%" height="15" fill="rgb(228,187,13)" fg:x="467" fg:w="1"/><text x="38.0944%" y="143.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="37.9254%" y="149" width="0.1621%" height="15" fill="rgb(240,119,24)" fg:x="468" fg:w="2"/><text x="38.1754%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 7.37%)</title><rect x="30.8752%" y="197" width="7.3744%" height="15" fill="rgb(209,194,42)" fg:x="381" fg:w="91"/><text x="31.1252%" y="207.50">&lt;core::ite..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (91 samples, 7.37%)</title><rect x="30.8752%" y="181" width="7.3744%" height="15" fill="rgb(247,200,46)" fg:x="381" fg:w="91"/><text x="31.1252%" y="191.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (90 samples, 7.29%)</title><rect x="30.9562%" y="165" width="7.2934%" height="15" fill="rgb(218,76,16)" fg:x="382" fg:w="90"/><text x="31.2062%" y="175.50">regex_auto..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="38.0875%" y="149" width="0.1621%" height="15" fill="rgb(225,21,48)" fg:x="470" fg:w="2"/><text x="38.3375%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="38.0875%" y="133" width="0.1621%" height="15" fill="rgb(239,223,50)" fg:x="470" fg:w="2"/><text x="38.3375%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="38.0875%" y="117" width="0.1621%" height="15" fill="rgb(244,45,21)" fg:x="470" fg:w="2"/><text x="38.3375%" y="127.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="38.0875%" y="101" width="0.1621%" height="15" fill="rgb(232,33,43)" fg:x="470" fg:w="2"/><text x="38.3375%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.4927%" y="181" width="0.0810%" height="15" fill="rgb(209,8,3)" fg:x="475" fg:w="1"/><text x="38.7427%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.5737%" y="181" width="0.0810%" height="15" fill="rgb(214,25,53)" fg:x="476" fg:w="1"/><text x="38.8237%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="38.6548%" y="181" width="0.1621%" height="15" fill="rgb(254,186,54)" fg:x="477" fg:w="2"/><text x="38.9048%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.57%)</title><rect x="38.8169%" y="181" width="0.5673%" height="15" fill="rgb(208,174,49)" fg:x="479" fg:w="7"/><text x="39.0669%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.3031%" y="165" width="0.0810%" height="15" fill="rgb(233,191,51)" fg:x="485" fg:w="1"/><text x="39.5531%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (15 samples, 1.22%)</title><rect x="38.2496%" y="197" width="1.2156%" height="15" fill="rgb(222,134,10)" fg:x="472" fg:w="15"/><text x="38.4996%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="39.3841%" y="181" width="0.0810%" height="15" fill="rgb(230,226,20)" fg:x="486" fg:w="1"/><text x="39.6341%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.3841%" y="165" width="0.0810%" height="15" fill="rgb(251,111,25)" fg:x="486" fg:w="1"/><text x="39.6341%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="39.4652%" y="181" width="0.0810%" height="15" fill="rgb(224,40,46)" fg:x="487" fg:w="1"/><text x="39.7152%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.4652%" y="165" width="0.0810%" height="15" fill="rgb(236,108,47)" fg:x="487" fg:w="1"/><text x="39.7152%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.4652%" y="149" width="0.0810%" height="15" fill="rgb(234,93,0)" fg:x="487" fg:w="1"/><text x="39.7152%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.4652%" y="133" width="0.0810%" height="15" fill="rgb(224,213,32)" fg:x="487" fg:w="1"/><text x="39.7152%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="39.4652%" y="197" width="0.1621%" height="15" fill="rgb(251,11,48)" fg:x="487" fg:w="2"/><text x="39.7152%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="39.5462%" y="181" width="0.0810%" height="15" fill="rgb(236,173,5)" fg:x="488" fg:w="1"/><text x="39.7962%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="39.5462%" y="165" width="0.0810%" height="15" fill="rgb(230,95,12)" fg:x="488" fg:w="1"/><text x="39.7962%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (112 samples, 9.08%)</title><rect x="30.7131%" y="213" width="9.0762%" height="15" fill="rgb(232,209,1)" fg:x="379" fg:w="112"/><text x="30.9631%" y="223.50">regex_automat..</text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.16%)</title><rect x="39.6272%" y="197" width="0.1621%" height="15" fill="rgb(232,6,1)" fg:x="489" fg:w="2"/><text x="39.8772%" y="207.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (1 samples, 0.08%)</title><rect x="39.7083%" y="181" width="0.0810%" height="15" fill="rgb(210,224,50)" fg:x="490" fg:w="1"/><text x="39.9583%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (145 samples, 11.75%)</title><rect x="28.1199%" y="229" width="11.7504%" height="15" fill="rgb(228,127,35)" fg:x="347" fg:w="145"/><text x="28.3699%" y="239.50">regex_automata::m..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="39.7893%" y="213" width="0.0810%" height="15" fill="rgb(245,102,45)" fg:x="491" fg:w="1"/><text x="40.0393%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="39.7893%" y="197" width="0.0810%" height="15" fill="rgb(214,1,49)" fg:x="491" fg:w="1"/><text x="40.0393%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="39.7893%" y="181" width="0.0810%" height="15" fill="rgb(226,163,40)" fg:x="491" fg:w="1"/><text x="40.0393%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="40.3566%" y="165" width="0.0810%" height="15" fill="rgb(239,212,28)" fg:x="498" fg:w="1"/><text x="40.6066%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="40.3566%" y="181" width="0.1621%" height="15" fill="rgb(220,20,13)" fg:x="498" fg:w="2"/><text x="40.6066%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="40.4376%" y="165" width="0.0810%" height="15" fill="rgb(210,164,35)" fg:x="499" fg:w="1"/><text x="40.6876%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="40.5186%" y="181" width="0.0810%" height="15" fill="rgb(248,109,41)" fg:x="500" fg:w="1"/><text x="40.7686%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="40.5186%" y="165" width="0.0810%" height="15" fill="rgb(238,23,50)" fg:x="500" fg:w="1"/><text x="40.7686%" y="175.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="40.5186%" y="149" width="0.0810%" height="15" fill="rgb(211,48,49)" fg:x="500" fg:w="1"/><text x="40.7686%" y="159.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="40.5997%" y="133" width="0.3241%" height="15" fill="rgb(223,36,21)" fg:x="501" fg:w="4"/><text x="40.8497%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (14 samples, 1.13%)</title><rect x="39.8703%" y="229" width="1.1345%" height="15" fill="rgb(207,123,46)" fg:x="492" fg:w="14"/><text x="40.1203%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (14 samples, 1.13%)</title><rect x="39.8703%" y="213" width="1.1345%" height="15" fill="rgb(240,218,32)" fg:x="492" fg:w="14"/><text x="40.1203%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (10 samples, 0.81%)</title><rect x="40.1945%" y="197" width="0.8104%" height="15" fill="rgb(252,5,43)" fg:x="496" fg:w="10"/><text x="40.4445%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.41%)</title><rect x="40.5997%" y="181" width="0.4052%" height="15" fill="rgb(252,84,19)" fg:x="501" fg:w="5"/><text x="40.8497%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.41%)</title><rect x="40.5997%" y="165" width="0.4052%" height="15" fill="rgb(243,152,39)" fg:x="501" fg:w="5"/><text x="40.8497%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.41%)</title><rect x="40.5997%" y="149" width="0.4052%" height="15" fill="rgb(234,160,15)" fg:x="501" fg:w="5"/><text x="40.8497%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="40.9238%" y="133" width="0.0810%" height="15" fill="rgb(237,34,20)" fg:x="505" fg:w="1"/><text x="41.1738%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.0859%" y="181" width="0.0810%" height="15" fill="rgb(229,97,13)" fg:x="507" fg:w="1"/><text x="41.3359%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.0859%" y="165" width="0.0810%" height="15" fill="rgb(234,71,50)" fg:x="507" fg:w="1"/><text x="41.3359%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.0859%" y="149" width="0.0810%" height="15" fill="rgb(253,155,4)" fg:x="507" fg:w="1"/><text x="41.3359%" y="159.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="41.1669%" y="181" width="0.2431%" height="15" fill="rgb(222,185,37)" fg:x="508" fg:w="3"/><text x="41.4169%" y="191.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="41.3290%" y="165" width="0.0810%" height="15" fill="rgb(251,177,13)" fg:x="510" fg:w="1"/><text x="41.5790%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (6 samples, 0.49%)</title><rect x="41.0859%" y="197" width="0.4862%" height="15" fill="rgb(250,179,40)" fg:x="507" fg:w="6"/><text x="41.3359%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (2 samples, 0.16%)</title><rect x="41.4100%" y="181" width="0.1621%" height="15" fill="rgb(242,44,2)" fg:x="511" fg:w="2"/><text x="41.6600%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.4911%" y="165" width="0.0810%" height="15" fill="rgb(216,177,13)" fg:x="512" fg:w="1"/><text x="41.7411%" y="175.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (171 samples, 13.86%)</title><rect x="27.7958%" y="261" width="13.8574%" height="15" fill="rgb(216,106,43)" fg:x="343" fg:w="171"/><text x="28.0458%" y="271.50">regex::builders::stri..</text></g><g><title>regex_automata::meta::regex::Builder::build (170 samples, 13.78%)</title><rect x="27.8768%" y="245" width="13.7763%" height="15" fill="rgb(216,183,2)" fg:x="344" fg:w="170"/><text x="28.1268%" y="255.50">regex_automata::meta:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.65%)</title><rect x="41.0049%" y="229" width="0.6483%" height="15" fill="rgb(249,75,3)" fg:x="506" fg:w="8"/><text x="41.2549%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.65%)</title><rect x="41.0049%" y="213" width="0.6483%" height="15" fill="rgb(219,67,39)" fg:x="506" fg:w="8"/><text x="41.2549%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="41.5721%" y="197" width="0.0810%" height="15" fill="rgb(253,228,2)" fg:x="513" fg:w="1"/><text x="41.8221%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (172 samples, 13.94%)</title><rect x="27.7958%" y="277" width="13.9384%" height="15" fill="rgb(235,138,27)" fg:x="343" fg:w="172"/><text x="28.0458%" y="287.50">regex::regex::string:..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="41.6532%" y="261" width="0.0810%" height="15" fill="rgb(236,97,51)" fg:x="514" fg:w="1"/><text x="41.9032%" y="271.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="41.6532%" y="245" width="0.0810%" height="15" fill="rgb(240,80,30)" fg:x="514" fg:w="1"/><text x="41.9032%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="42.2204%" y="197" width="0.2431%" height="15" fill="rgb(230,178,19)" fg:x="521" fg:w="3"/><text x="42.4704%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="42.3015%" y="181" width="0.1621%" height="15" fill="rgb(210,190,27)" fg:x="522" fg:w="2"/><text x="42.5515%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="42.3015%" y="165" width="0.1621%" height="15" fill="rgb(222,107,31)" fg:x="522" fg:w="2"/><text x="42.5515%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="42.4635%" y="197" width="0.2431%" height="15" fill="rgb(216,127,34)" fg:x="524" fg:w="3"/><text x="42.7135%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="42.6256%" y="181" width="0.0810%" height="15" fill="rgb(234,116,52)" fg:x="526" fg:w="1"/><text x="42.8756%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="42.6256%" y="165" width="0.0810%" height="15" fill="rgb(222,124,15)" fg:x="526" fg:w="1"/><text x="42.8756%" y="175.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (207 samples, 16.77%)</title><rect x="26.1750%" y="293" width="16.7747%" height="15" fill="rgb(231,179,28)" fg:x="323" fg:w="207"/><text x="26.4250%" y="303.50">indefinite::helper::Helper..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (15 samples, 1.22%)</title><rect x="41.7342%" y="277" width="1.2156%" height="15" fill="rgb(226,93,45)" fg:x="515" fg:w="15"/><text x="41.9842%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (15 samples, 1.22%)</title><rect x="41.7342%" y="261" width="1.2156%" height="15" fill="rgb(215,8,51)" fg:x="515" fg:w="15"/><text x="41.9842%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (15 samples, 1.22%)</title><rect x="41.7342%" y="245" width="1.2156%" height="15" fill="rgb(223,106,5)" fg:x="515" fg:w="15"/><text x="41.9842%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (14 samples, 1.13%)</title><rect x="41.8152%" y="229" width="1.1345%" height="15" fill="rgb(250,191,5)" fg:x="516" fg:w="14"/><text x="42.0652%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (14 samples, 1.13%)</title><rect x="41.8152%" y="213" width="1.1345%" height="15" fill="rgb(242,132,44)" fg:x="516" fg:w="14"/><text x="42.0652%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="42.7066%" y="197" width="0.2431%" height="15" fill="rgb(251,152,29)" fg:x="527" fg:w="3"/><text x="42.9566%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.0308%" y="261" width="0.0810%" height="15" fill="rgb(218,179,5)" fg:x="531" fg:w="1"/><text x="43.2808%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="43.1118%" y="229" width="0.1621%" height="15" fill="rgb(227,67,19)" fg:x="532" fg:w="2"/><text x="43.3618%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="43.1929%" y="213" width="0.0810%" height="15" fill="rgb(233,119,31)" fg:x="533" fg:w="1"/><text x="43.4429%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.2739%" y="213" width="0.0810%" height="15" fill="rgb(241,120,22)" fg:x="534" fg:w="1"/><text x="43.5239%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="43.1118%" y="245" width="0.3241%" height="15" fill="rgb(224,102,30)" fg:x="532" fg:w="4"/><text x="43.3618%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="43.2739%" y="229" width="0.1621%" height="15" fill="rgb(210,164,37)" fg:x="534" fg:w="2"/><text x="43.5239%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::OnePass&gt; (1 samples, 0.08%)</title><rect x="43.3549%" y="213" width="0.0810%" height="15" fill="rgb(226,191,16)" fg:x="535" fg:w="1"/><text x="43.6049%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.3549%" y="197" width="0.0810%" height="15" fill="rgb(214,40,45)" fg:x="535" fg:w="1"/><text x="43.6049%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="43.4360%" y="229" width="0.0810%" height="15" fill="rgb(244,29,26)" fg:x="536" fg:w="1"/><text x="43.6860%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.4360%" y="213" width="0.0810%" height="15" fill="rgb(216,16,5)" fg:x="536" fg:w="1"/><text x="43.6860%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (9 samples, 0.73%)</title><rect x="43.0308%" y="277" width="0.7293%" height="15" fill="rgb(249,76,35)" fg:x="531" fg:w="9"/><text x="43.2808%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (8 samples, 0.65%)</title><rect x="43.1118%" y="261" width="0.6483%" height="15" fill="rgb(207,11,44)" fg:x="532" fg:w="8"/><text x="43.3618%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="43.4360%" y="245" width="0.3241%" height="15" fill="rgb(228,190,49)" fg:x="536" fg:w="4"/><text x="43.6860%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="43.5170%" y="229" width="0.2431%" height="15" fill="rgb(214,173,12)" fg:x="537" fg:w="3"/><text x="43.7670%" y="239.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="43.5170%" y="213" width="0.2431%" height="15" fill="rgb(218,26,35)" fg:x="537" fg:w="3"/><text x="43.7670%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="43.7601%" y="261" width="0.1621%" height="15" fill="rgb(220,200,19)" fg:x="540" fg:w="2"/><text x="44.0101%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="43.7601%" y="245" width="0.1621%" height="15" fill="rgb(239,95,49)" fg:x="540" fg:w="2"/><text x="44.0101%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="43.8412%" y="229" width="0.0810%" height="15" fill="rgb(235,85,53)" fg:x="541" fg:w="1"/><text x="44.0912%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="43.8412%" y="213" width="0.0810%" height="15" fill="rgb(233,133,31)" fg:x="541" fg:w="1"/><text x="44.0912%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.2464%" y="149" width="0.0810%" height="15" fill="rgb(218,25,20)" fg:x="546" fg:w="1"/><text x="44.4964%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="44.2464%" y="181" width="0.2431%" height="15" fill="rgb(252,210,38)" fg:x="546" fg:w="3"/><text x="44.4964%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="44.2464%" y="165" width="0.2431%" height="15" fill="rgb(242,134,21)" fg:x="546" fg:w="3"/><text x="44.4964%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="44.3274%" y="149" width="0.1621%" height="15" fill="rgb(213,28,48)" fg:x="547" fg:w="2"/><text x="44.5774%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="44.4895%" y="181" width="0.0810%" height="15" fill="rgb(250,196,2)" fg:x="549" fg:w="1"/><text x="44.7395%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="44.4895%" y="165" width="0.0810%" height="15" fill="rgb(227,5,17)" fg:x="549" fg:w="1"/><text x="44.7395%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.4895%" y="149" width="0.0810%" height="15" fill="rgb(221,226,24)" fg:x="549" fg:w="1"/><text x="44.7395%" y="159.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.97%)</title><rect x="43.9222%" y="197" width="0.9724%" height="15" fill="rgb(211,5,48)" fg:x="542" fg:w="12"/><text x="44.1722%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="44.5705%" y="181" width="0.3241%" height="15" fill="rgb(219,150,6)" fg:x="550" fg:w="4"/><text x="44.8205%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (16 samples, 1.30%)</title><rect x="43.7601%" y="277" width="1.2966%" height="15" fill="rgb(251,46,16)" fg:x="540" fg:w="16"/><text x="44.0101%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (14 samples, 1.13%)</title><rect x="43.9222%" y="261" width="1.1345%" height="15" fill="rgb(220,204,40)" fg:x="542" fg:w="14"/><text x="44.1722%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (14 samples, 1.13%)</title><rect x="43.9222%" y="245" width="1.1345%" height="15" fill="rgb(211,85,2)" fg:x="542" fg:w="14"/><text x="44.1722%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (14 samples, 1.13%)</title><rect x="43.9222%" y="229" width="1.1345%" height="15" fill="rgb(229,17,7)" fg:x="542" fg:w="14"/><text x="44.1722%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (14 samples, 1.13%)</title><rect x="43.9222%" y="213" width="1.1345%" height="15" fill="rgb(239,72,28)" fg:x="542" fg:w="14"/><text x="44.1722%" y="223.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="44.8947%" y="197" width="0.1621%" height="15" fill="rgb(230,47,54)" fg:x="554" fg:w="2"/><text x="45.1447%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="44.9757%" y="181" width="0.0810%" height="15" fill="rgb(214,50,8)" fg:x="555" fg:w="1"/><text x="45.2257%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.9757%" y="165" width="0.0810%" height="15" fill="rgb(216,198,43)" fg:x="555" fg:w="1"/><text x="45.2257%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.9757%" y="149" width="0.0810%" height="15" fill="rgb(234,20,35)" fg:x="555" fg:w="1"/><text x="45.2257%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="45.2188%" y="229" width="0.1621%" height="15" fill="rgb(254,45,19)" fg:x="558" fg:w="2"/><text x="45.4688%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="45.2188%" y="213" width="0.1621%" height="15" fill="rgb(219,14,44)" fg:x="558" fg:w="2"/><text x="45.4688%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.2998%" y="197" width="0.0810%" height="15" fill="rgb(217,220,26)" fg:x="559" fg:w="1"/><text x="45.5498%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="45.3809%" y="229" width="0.0810%" height="15" fill="rgb(213,158,28)" fg:x="560" fg:w="1"/><text x="45.6309%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="45.4619%" y="229" width="0.0810%" height="15" fill="rgb(252,51,52)" fg:x="561" fg:w="1"/><text x="45.7119%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="45.4619%" y="213" width="0.0810%" height="15" fill="rgb(246,89,16)" fg:x="561" fg:w="1"/><text x="45.7119%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="45.4619%" y="197" width="0.0810%" height="15" fill="rgb(216,158,49)" fg:x="561" fg:w="1"/><text x="45.7119%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="45.4619%" y="181" width="0.0810%" height="15" fill="rgb(236,107,19)" fg:x="561" fg:w="1"/><text x="45.7119%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="45.4619%" y="165" width="0.0810%" height="15" fill="rgb(228,185,30)" fg:x="561" fg:w="1"/><text x="45.7119%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="45.4619%" y="149" width="0.0810%" height="15" fill="rgb(246,134,8)" fg:x="561" fg:w="1"/><text x="45.7119%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.4619%" y="133" width="0.0810%" height="15" fill="rgb(214,143,50)" fg:x="561" fg:w="1"/><text x="45.7119%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="45.4619%" y="117" width="0.0810%" height="15" fill="rgb(228,75,8)" fg:x="561" fg:w="1"/><text x="45.7119%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (21 samples, 1.70%)</title><rect x="45.6240%" y="213" width="1.7018%" height="15" fill="rgb(207,175,4)" fg:x="563" fg:w="21"/><text x="45.8740%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (20 samples, 1.62%)</title><rect x="45.7050%" y="197" width="1.6207%" height="15" fill="rgb(205,108,24)" fg:x="564" fg:w="20"/><text x="45.9550%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="47.3258%" y="197" width="0.0810%" height="15" fill="rgb(244,120,49)" fg:x="584" fg:w="1"/><text x="47.5758%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="47.3258%" y="181" width="0.0810%" height="15" fill="rgb(223,47,38)" fg:x="584" fg:w="1"/><text x="47.5758%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.3258%" y="165" width="0.0810%" height="15" fill="rgb(229,179,11)" fg:x="584" fg:w="1"/><text x="47.5758%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (2 samples, 0.16%)</title><rect x="47.3258%" y="213" width="0.1621%" height="15" fill="rgb(231,122,1)" fg:x="584" fg:w="2"/><text x="47.5758%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="47.4068%" y="197" width="0.0810%" height="15" fill="rgb(245,119,9)" fg:x="585" fg:w="1"/><text x="47.6568%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="47.4068%" y="181" width="0.0810%" height="15" fill="rgb(241,163,25)" fg:x="585" fg:w="1"/><text x="47.6568%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="47.4068%" y="165" width="0.0810%" height="15" fill="rgb(217,214,3)" fg:x="585" fg:w="1"/><text x="47.6568%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.4068%" y="149" width="0.0810%" height="15" fill="rgb(240,86,28)" fg:x="585" fg:w="1"/><text x="47.6568%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.4068%" y="133" width="0.0810%" height="15" fill="rgb(215,47,9)" fg:x="585" fg:w="1"/><text x="47.6568%" y="143.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="47.4068%" y="117" width="0.0810%" height="15" fill="rgb(252,25,45)" fg:x="585" fg:w="1"/><text x="47.6568%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="47.4068%" y="101" width="0.0810%" height="15" fill="rgb(251,164,9)" fg:x="585" fg:w="1"/><text x="47.6568%" y="111.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="47.8120%" y="197" width="0.0810%" height="15" fill="rgb(233,194,0)" fg:x="590" fg:w="1"/><text x="48.0620%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.65%)</title><rect x="47.4878%" y="213" width="0.6483%" height="15" fill="rgb(249,111,24)" fg:x="586" fg:w="8"/><text x="47.7378%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="47.8930%" y="197" width="0.2431%" height="15" fill="rgb(250,223,3)" fg:x="591" fg:w="3"/><text x="48.1430%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="48.0551%" y="181" width="0.0810%" height="15" fill="rgb(236,178,37)" fg:x="593" fg:w="1"/><text x="48.3051%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.0551%" y="165" width="0.0810%" height="15" fill="rgb(241,158,50)" fg:x="593" fg:w="1"/><text x="48.3051%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.3793%" y="181" width="0.0810%" height="15" fill="rgb(213,121,41)" fg:x="597" fg:w="1"/><text x="48.6293%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="48.4603%" y="181" width="0.1621%" height="15" fill="rgb(240,92,3)" fg:x="598" fg:w="2"/><text x="48.7103%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="48.4603%" y="165" width="0.1621%" height="15" fill="rgb(205,123,3)" fg:x="598" fg:w="2"/><text x="48.7103%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.5413%" y="149" width="0.0810%" height="15" fill="rgb(205,97,47)" fg:x="599" fg:w="1"/><text x="48.7913%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (6 samples, 0.49%)</title><rect x="48.6224%" y="181" width="0.4862%" height="15" fill="rgb(247,152,14)" fg:x="600" fg:w="6"/><text x="48.8724%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.41%)</title><rect x="48.7034%" y="165" width="0.4052%" height="15" fill="rgb(248,195,53)" fg:x="601" fg:w="5"/><text x="48.9534%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.41%)</title><rect x="48.7034%" y="149" width="0.4052%" height="15" fill="rgb(226,201,16)" fg:x="601" fg:w="5"/><text x="48.9534%" y="159.50"></text></g><g><title>realloc (5 samples, 0.41%)</title><rect x="48.7034%" y="133" width="0.4052%" height="15" fill="rgb(205,98,0)" fg:x="601" fg:w="5"/><text x="48.9534%" y="143.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="49.1086%" y="181" width="0.2431%" height="15" fill="rgb(214,191,48)" fg:x="606" fg:w="3"/><text x="49.3586%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="49.1896%" y="165" width="0.1621%" height="15" fill="rgb(237,112,39)" fg:x="607" fg:w="2"/><text x="49.4396%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.2707%" y="149" width="0.0810%" height="15" fill="rgb(247,203,27)" fg:x="608" fg:w="1"/><text x="49.5207%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.2707%" y="133" width="0.0810%" height="15" fill="rgb(235,124,28)" fg:x="608" fg:w="1"/><text x="49.5207%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="49.2707%" y="117" width="0.0810%" height="15" fill="rgb(208,207,46)" fg:x="608" fg:w="1"/><text x="49.5207%" y="127.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (11 samples, 0.89%)</title><rect x="49.3517%" y="181" width="0.8914%" height="15" fill="rgb(234,176,4)" fg:x="609" fg:w="11"/><text x="49.6017%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (10 samples, 0.81%)</title><rect x="49.4327%" y="165" width="0.8104%" height="15" fill="rgb(230,133,28)" fg:x="610" fg:w="10"/><text x="49.6827%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (10 samples, 0.81%)</title><rect x="49.4327%" y="149" width="0.8104%" height="15" fill="rgb(211,137,40)" fg:x="610" fg:w="10"/><text x="49.6827%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (28 samples, 2.27%)</title><rect x="48.1361%" y="213" width="2.2690%" height="15" fill="rgb(254,35,13)" fg:x="594" fg:w="28"/><text x="48.3861%" y="223.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (28 samples, 2.27%)</title><rect x="48.1361%" y="197" width="2.2690%" height="15" fill="rgb(225,49,51)" fg:x="594" fg:w="28"/><text x="48.3861%" y="207.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (2 samples, 0.16%)</title><rect x="50.2431%" y="181" width="0.1621%" height="15" fill="rgb(251,10,15)" fg:x="620" fg:w="2"/><text x="50.4931%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="50.4052%" y="213" width="0.0810%" height="15" fill="rgb(228,207,15)" fg:x="622" fg:w="1"/><text x="50.6552%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="50.4052%" y="197" width="0.0810%" height="15" fill="rgb(241,99,19)" fg:x="622" fg:w="1"/><text x="50.6552%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="50.4052%" y="181" width="0.0810%" height="15" fill="rgb(207,104,49)" fg:x="622" fg:w="1"/><text x="50.6552%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="50.4052%" y="165" width="0.0810%" height="15" fill="rgb(234,99,18)" fg:x="622" fg:w="1"/><text x="50.6552%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="50.4862%" y="181" width="0.0810%" height="15" fill="rgb(213,191,49)" fg:x="623" fg:w="1"/><text x="50.7362%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (3 samples, 0.24%)</title><rect x="50.5673%" y="165" width="0.2431%" height="15" fill="rgb(210,226,19)" fg:x="624" fg:w="3"/><text x="50.8173%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="50.5673%" y="149" width="0.2431%" height="15" fill="rgb(229,97,18)" fg:x="624" fg:w="3"/><text x="50.8173%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="50.5673%" y="133" width="0.2431%" height="15" fill="rgb(211,167,15)" fg:x="624" fg:w="3"/><text x="50.8173%" y="143.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="50.5673%" y="117" width="0.2431%" height="15" fill="rgb(210,169,34)" fg:x="624" fg:w="3"/><text x="50.8173%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="50.8104%" y="149" width="0.0810%" height="15" fill="rgb(241,121,31)" fg:x="627" fg:w="1"/><text x="51.0604%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="52.1880%" y="101" width="0.3241%" height="15" fill="rgb(232,40,11)" fg:x="644" fg:w="4"/><text x="52.4380%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="52.5122%" y="101" width="0.1621%" height="15" fill="rgb(205,86,26)" fg:x="648" fg:w="2"/><text x="52.7622%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.5932%" y="85" width="0.0810%" height="15" fill="rgb(231,126,28)" fg:x="649" fg:w="1"/><text x="52.8432%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.5932%" y="69" width="0.0810%" height="15" fill="rgb(219,221,18)" fg:x="649" fg:w="1"/><text x="52.8432%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.5932%" y="53" width="0.0810%" height="15" fill="rgb(211,40,0)" fg:x="649" fg:w="1"/><text x="52.8432%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (4 samples, 0.32%)</title><rect x="52.6742%" y="101" width="0.3241%" height="15" fill="rgb(239,85,43)" fg:x="650" fg:w="4"/><text x="52.9242%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="52.8363%" y="85" width="0.1621%" height="15" fill="rgb(231,55,21)" fg:x="652" fg:w="2"/><text x="53.0863%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="52.8363%" y="69" width="0.1621%" height="15" fill="rgb(225,184,43)" fg:x="652" fg:w="2"/><text x="53.0863%" y="79.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="52.8363%" y="53" width="0.1621%" height="15" fill="rgb(251,158,41)" fg:x="652" fg:w="2"/><text x="53.0863%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="53.6467%" y="69" width="0.3241%" height="15" fill="rgb(234,159,37)" fg:x="662" fg:w="4"/><text x="53.8967%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="53.7277%" y="53" width="0.2431%" height="15" fill="rgb(216,204,22)" fg:x="663" fg:w="3"/><text x="53.9777%" y="63.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="53.8088%" y="37" width="0.1621%" height="15" fill="rgb(214,17,3)" fg:x="664" fg:w="2"/><text x="54.0588%" y="47.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.4571%" y="53" width="0.0810%" height="15" fill="rgb(212,111,17)" fg:x="672" fg:w="1"/><text x="54.7071%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (24 samples, 1.94%)</title><rect x="52.9984%" y="101" width="1.9449%" height="15" fill="rgb(221,157,24)" fg:x="654" fg:w="24"/><text x="53.2484%" y="111.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (20 samples, 1.62%)</title><rect x="53.3225%" y="85" width="1.6207%" height="15" fill="rgb(252,16,13)" fg:x="658" fg:w="20"/><text x="53.5725%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (12 samples, 0.97%)</title><rect x="53.9708%" y="69" width="0.9724%" height="15" fill="rgb(221,62,2)" fg:x="666" fg:w="12"/><text x="54.2208%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.41%)</title><rect x="54.5381%" y="53" width="0.4052%" height="15" fill="rgb(247,87,22)" fg:x="673" fg:w="5"/><text x="54.7881%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="54.9433%" y="85" width="0.0810%" height="15" fill="rgb(215,73,9)" fg:x="678" fg:w="1"/><text x="55.1933%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="54.9433%" y="101" width="0.1621%" height="15" fill="rgb(207,175,33)" fg:x="678" fg:w="2"/><text x="55.1933%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="55.0243%" y="85" width="0.0810%" height="15" fill="rgb(243,129,54)" fg:x="679" fg:w="1"/><text x="55.2743%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.0243%" y="69" width="0.0810%" height="15" fill="rgb(227,119,45)" fg:x="679" fg:w="1"/><text x="55.2743%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.0243%" y="53" width="0.0810%" height="15" fill="rgb(205,109,36)" fg:x="679" fg:w="1"/><text x="55.2743%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.0243%" y="37" width="0.0810%" height="15" fill="rgb(205,6,39)" fg:x="679" fg:w="1"/><text x="55.2743%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.1053%" y="85" width="0.0810%" height="15" fill="rgb(221,32,16)" fg:x="680" fg:w="1"/><text x="55.3553%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.1053%" y="69" width="0.0810%" height="15" fill="rgb(228,144,50)" fg:x="680" fg:w="1"/><text x="55.3553%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.1053%" y="53" width="0.0810%" height="15" fill="rgb(229,201,53)" fg:x="680" fg:w="1"/><text x="55.3553%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (92 samples, 7.46%)</title><rect x="55.1053%" y="101" width="7.4554%" height="15" fill="rgb(249,153,27)" fg:x="680" fg:w="92"/><text x="55.3553%" y="111.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (91 samples, 7.37%)</title><rect x="55.1864%" y="85" width="7.3744%" height="15" fill="rgb(227,106,25)" fg:x="681" fg:w="91"/><text x="55.4364%" y="95.50">regex_auto..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (91 samples, 7.37%)</title><rect x="55.1864%" y="69" width="7.3744%" height="15" fill="rgb(230,65,29)" fg:x="681" fg:w="91"/><text x="55.4364%" y="79.50">alloc::vec..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="62.5608%" y="101" width="0.1621%" height="15" fill="rgb(221,57,46)" fg:x="772" fg:w="2"/><text x="62.8108%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.6418%" y="85" width="0.0810%" height="15" fill="rgb(229,161,17)" fg:x="773" fg:w="1"/><text x="62.8918%" y="95.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (3 samples, 0.24%)</title><rect x="62.7229%" y="101" width="0.2431%" height="15" fill="rgb(222,213,11)" fg:x="774" fg:w="3"/><text x="62.9729%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (159 samples, 12.88%)</title><rect x="50.4862%" y="197" width="12.8849%" height="15" fill="rgb(235,35,13)" fg:x="623" fg:w="159"/><text x="50.7362%" y="207.50">&lt;core::iter::adapte..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (158 samples, 12.80%)</title><rect x="50.5673%" y="181" width="12.8039%" height="15" fill="rgb(233,158,34)" fg:x="624" fg:w="158"/><text x="50.8173%" y="191.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (155 samples, 12.56%)</title><rect x="50.8104%" y="165" width="12.5608%" height="15" fill="rgb(215,151,48)" fg:x="627" fg:w="155"/><text x="51.0604%" y="175.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (154 samples, 12.48%)</title><rect x="50.8914%" y="149" width="12.4797%" height="15" fill="rgb(229,84,14)" fg:x="628" fg:w="154"/><text x="51.1414%" y="159.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (153 samples, 12.40%)</title><rect x="50.9724%" y="133" width="12.3987%" height="15" fill="rgb(229,68,14)" fg:x="629" fg:w="153"/><text x="51.2224%" y="143.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (153 samples, 12.40%)</title><rect x="50.9724%" y="117" width="12.3987%" height="15" fill="rgb(243,106,26)" fg:x="629" fg:w="153"/><text x="51.2224%" y="127.50">regex_automata::nfa..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (5 samples, 0.41%)</title><rect x="62.9660%" y="101" width="0.4052%" height="15" fill="rgb(206,45,38)" fg:x="777" fg:w="5"/><text x="63.2160%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="63.1280%" y="85" width="0.2431%" height="15" fill="rgb(226,6,15)" fg:x="779" fg:w="3"/><text x="63.3780%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.2091%" y="69" width="0.1621%" height="15" fill="rgb(232,22,54)" fg:x="780" fg:w="2"/><text x="63.4591%" y="79.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="63.2091%" y="53" width="0.1621%" height="15" fill="rgb(229,222,32)" fg:x="780" fg:w="2"/><text x="63.4591%" y="63.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="63.4522%" y="181" width="0.1621%" height="15" fill="rgb(228,62,29)" fg:x="783" fg:w="2"/><text x="63.7022%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (7 samples, 0.57%)</title><rect x="63.6143%" y="181" width="0.5673%" height="15" fill="rgb(251,103,34)" fg:x="785" fg:w="7"/><text x="63.8643%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.1005%" y="165" width="0.0810%" height="15" fill="rgb(233,12,30)" fg:x="791" fg:w="1"/><text x="64.3505%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.1005%" y="149" width="0.0810%" height="15" fill="rgb(238,52,0)" fg:x="791" fg:w="1"/><text x="64.3505%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.1005%" y="133" width="0.0810%" height="15" fill="rgb(223,98,5)" fg:x="791" fg:w="1"/><text x="64.3505%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="64.3436%" y="165" width="0.1621%" height="15" fill="rgb(228,75,37)" fg:x="794" fg:w="2"/><text x="64.5936%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="64.3436%" y="149" width="0.1621%" height="15" fill="rgb(205,115,49)" fg:x="794" fg:w="2"/><text x="64.5936%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="64.3436%" y="133" width="0.1621%" height="15" fill="rgb(250,154,43)" fg:x="794" fg:w="2"/><text x="64.5936%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.41%)</title><rect x="64.1815%" y="181" width="0.4052%" height="15" fill="rgb(226,43,29)" fg:x="792" fg:w="5"/><text x="64.4315%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.5057%" y="165" width="0.0810%" height="15" fill="rgb(249,228,39)" fg:x="796" fg:w="1"/><text x="64.7557%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (4 samples, 0.32%)</title><rect x="64.5867%" y="181" width="0.3241%" height="15" fill="rgb(216,79,43)" fg:x="797" fg:w="4"/><text x="64.8367%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (240 samples, 19.45%)</title><rect x="45.5429%" y="229" width="19.4489%" height="15" fill="rgb(228,95,12)" fg:x="562" fg:w="240"/><text x="45.7929%" y="239.50">regex_automata::meta::strategy..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (179 samples, 14.51%)</title><rect x="50.4862%" y="213" width="14.5057%" height="15" fill="rgb(249,221,15)" fg:x="623" fg:w="179"/><text x="50.7362%" y="223.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (20 samples, 1.62%)</title><rect x="63.3712%" y="197" width="1.6207%" height="15" fill="rgb(233,34,13)" fg:x="782" fg:w="20"/><text x="63.6212%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="64.9109%" y="181" width="0.0810%" height="15" fill="rgb(214,103,39)" fg:x="801" fg:w="1"/><text x="65.1609%" y="191.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="64.9109%" y="165" width="0.0810%" height="15" fill="rgb(251,126,39)" fg:x="801" fg:w="1"/><text x="65.1609%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.9109%" y="149" width="0.0810%" height="15" fill="rgb(214,216,36)" fg:x="801" fg:w="1"/><text x="65.1609%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.9109%" y="133" width="0.0810%" height="15" fill="rgb(220,221,8)" fg:x="801" fg:w="1"/><text x="65.1609%" y="143.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.9109%" y="117" width="0.0810%" height="15" fill="rgb(240,216,3)" fg:x="801" fg:w="1"/><text x="65.1609%" y="127.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="65.2350%" y="181" width="0.0810%" height="15" fill="rgb(232,218,17)" fg:x="805" fg:w="1"/><text x="65.4850%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="65.3160%" y="181" width="0.0810%" height="15" fill="rgb(229,163,45)" fg:x="806" fg:w="1"/><text x="65.5660%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="65.3160%" y="165" width="0.0810%" height="15" fill="rgb(231,110,42)" fg:x="806" fg:w="1"/><text x="65.5660%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="65.3160%" y="149" width="0.0810%" height="15" fill="rgb(208,170,48)" fg:x="806" fg:w="1"/><text x="65.5660%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (9 samples, 0.73%)</title><rect x="65.0729%" y="197" width="0.7293%" height="15" fill="rgb(239,116,25)" fg:x="803" fg:w="9"/><text x="65.3229%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.41%)</title><rect x="65.3971%" y="181" width="0.4052%" height="15" fill="rgb(219,200,50)" fg:x="807" fg:w="5"/><text x="65.6471%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.41%)</title><rect x="65.3971%" y="165" width="0.4052%" height="15" fill="rgb(245,200,0)" fg:x="807" fg:w="5"/><text x="65.6471%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.41%)</title><rect x="65.3971%" y="149" width="0.4052%" height="15" fill="rgb(245,119,33)" fg:x="807" fg:w="5"/><text x="65.6471%" y="159.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="65.4781%" y="133" width="0.3241%" height="15" fill="rgb(231,125,12)" fg:x="808" fg:w="4"/><text x="65.7281%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="65.8023%" y="197" width="0.0810%" height="15" fill="rgb(216,96,41)" fg:x="812" fg:w="1"/><text x="66.0523%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="65.8023%" y="181" width="0.0810%" height="15" fill="rgb(248,43,45)" fg:x="812" fg:w="1"/><text x="66.0523%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="65.8833%" y="197" width="0.0810%" height="15" fill="rgb(217,222,7)" fg:x="813" fg:w="1"/><text x="66.1333%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="65.8833%" y="181" width="0.0810%" height="15" fill="rgb(233,28,6)" fg:x="813" fg:w="1"/><text x="66.1333%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (13 samples, 1.05%)</title><rect x="64.9919%" y="229" width="1.0535%" height="15" fill="rgb(231,218,15)" fg:x="802" fg:w="13"/><text x="65.2419%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (12 samples, 0.97%)</title><rect x="65.0729%" y="213" width="0.9724%" height="15" fill="rgb(226,171,48)" fg:x="803" fg:w="12"/><text x="65.3229%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="65.9643%" y="197" width="0.0810%" height="15" fill="rgb(235,201,9)" fg:x="814" fg:w="1"/><text x="66.2143%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="66.2075%" y="165" width="0.1621%" height="15" fill="rgb(217,80,15)" fg:x="817" fg:w="2"/><text x="66.4575%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="66.2075%" y="149" width="0.1621%" height="15" fill="rgb(219,152,8)" fg:x="817" fg:w="2"/><text x="66.4575%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="66.2075%" y="133" width="0.1621%" height="15" fill="rgb(243,107,38)" fg:x="817" fg:w="2"/><text x="66.4575%" y="143.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (7 samples, 0.57%)</title><rect x="66.0454%" y="181" width="0.5673%" height="15" fill="rgb(231,17,5)" fg:x="815" fg:w="7"/><text x="66.2954%" y="191.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.24%)</title><rect x="66.3695%" y="165" width="0.2431%" height="15" fill="rgb(209,25,54)" fg:x="819" fg:w="3"/><text x="66.6195%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.5316%" y="149" width="0.0810%" height="15" fill="rgb(219,0,2)" fg:x="821" fg:w="1"/><text x="66.7816%" y="159.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="66.6126%" y="181" width="0.0810%" height="15" fill="rgb(246,9,5)" fg:x="822" fg:w="1"/><text x="66.8626%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.6126%" y="165" width="0.0810%" height="15" fill="rgb(226,159,4)" fg:x="822" fg:w="1"/><text x="66.8626%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.6126%" y="149" width="0.0810%" height="15" fill="rgb(219,175,34)" fg:x="822" fg:w="1"/><text x="66.8626%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.6126%" y="133" width="0.0810%" height="15" fill="rgb(236,10,46)" fg:x="822" fg:w="1"/><text x="66.8626%" y="143.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (9 samples, 0.73%)</title><rect x="66.0454%" y="197" width="0.7293%" height="15" fill="rgb(240,211,16)" fg:x="815" fg:w="9"/><text x="66.2954%" y="207.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="66.6937%" y="181" width="0.0810%" height="15" fill="rgb(205,3,43)" fg:x="823" fg:w="1"/><text x="66.9437%" y="191.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="66.6937%" y="165" width="0.0810%" height="15" fill="rgb(245,7,22)" fg:x="823" fg:w="1"/><text x="66.9437%" y="175.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="66.6937%" y="149" width="0.0810%" height="15" fill="rgb(239,132,32)" fg:x="823" fg:w="1"/><text x="66.9437%" y="159.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="66.9368%" y="181" width="0.0810%" height="15" fill="rgb(228,202,34)" fg:x="826" fg:w="1"/><text x="67.1868%" y="191.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="66.9368%" y="165" width="0.0810%" height="15" fill="rgb(254,200,22)" fg:x="826" fg:w="1"/><text x="67.1868%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.0178%" y="165" width="0.0810%" height="15" fill="rgb(219,10,39)" fg:x="827" fg:w="1"/><text x="67.2678%" y="175.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="67.0178%" y="181" width="0.1621%" height="15" fill="rgb(226,210,39)" fg:x="827" fg:w="2"/><text x="67.2678%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.0989%" y="165" width="0.0810%" height="15" fill="rgb(208,219,16)" fg:x="828" fg:w="1"/><text x="67.3489%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (6 samples, 0.49%)</title><rect x="66.7747%" y="197" width="0.4862%" height="15" fill="rgb(216,158,51)" fg:x="824" fg:w="6"/><text x="67.0247%" y="207.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="67.1799%" y="181" width="0.0810%" height="15" fill="rgb(233,14,44)" fg:x="829" fg:w="1"/><text x="67.4299%" y="191.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (276 samples, 22.37%)</title><rect x="45.1378%" y="261" width="22.3663%" height="15" fill="rgb(237,97,39)" fg:x="557" fg:w="276"/><text x="45.3878%" y="271.50">regex::builders::string::RegexBuild..</text></g><g><title>regex_automata::meta::regex::Builder::build (276 samples, 22.37%)</title><rect x="45.1378%" y="245" width="22.3663%" height="15" fill="rgb(218,198,43)" fg:x="557" fg:w="276"/><text x="45.3878%" y="255.50">regex_automata::meta::regex::Builde..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (18 samples, 1.46%)</title><rect x="66.0454%" y="229" width="1.4587%" height="15" fill="rgb(231,104,20)" fg:x="815" fg:w="18"/><text x="66.2954%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (18 samples, 1.46%)</title><rect x="66.0454%" y="213" width="1.4587%" height="15" fill="rgb(254,36,13)" fg:x="815" fg:w="18"/><text x="66.2954%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (3 samples, 0.24%)</title><rect x="67.2609%" y="197" width="0.2431%" height="15" fill="rgb(248,14,50)" fg:x="830" fg:w="3"/><text x="67.5109%" y="207.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (3 samples, 0.24%)</title><rect x="67.2609%" y="181" width="0.2431%" height="15" fill="rgb(217,107,29)" fg:x="830" fg:w="3"/><text x="67.5109%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="67.3420%" y="165" width="0.1621%" height="15" fill="rgb(251,169,33)" fg:x="831" fg:w="2"/><text x="67.5920%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="67.3420%" y="149" width="0.1621%" height="15" fill="rgb(217,108,32)" fg:x="831" fg:w="2"/><text x="67.5920%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="67.3420%" y="133" width="0.1621%" height="15" fill="rgb(219,66,42)" fg:x="831" fg:w="2"/><text x="67.5920%" y="143.50"></text></g><g><title>indefinite::rules::number::Number::check (304 samples, 24.64%)</title><rect x="42.9498%" y="293" width="24.6353%" height="15" fill="rgb(206,180,7)" fg:x="530" fg:w="304"/><text x="43.1998%" y="303.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::new (278 samples, 22.53%)</title><rect x="45.0567%" y="277" width="22.5284%" height="15" fill="rgb(208,226,31)" fg:x="556" fg:w="278"/><text x="45.3067%" y="287.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="67.5041%" y="261" width="0.0810%" height="15" fill="rgb(218,26,49)" fg:x="833" fg:w="1"/><text x="67.7541%" y="271.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="67.5041%" y="245" width="0.0810%" height="15" fill="rgb(233,197,48)" fg:x="833" fg:w="1"/><text x="67.7541%" y="255.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="67.5851%" y="277" width="0.0810%" height="15" fill="rgb(252,181,51)" fg:x="834" fg:w="1"/><text x="67.8351%" y="287.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="67.5851%" y="261" width="0.0810%" height="15" fill="rgb(253,90,19)" fg:x="834" fg:w="1"/><text x="67.8351%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="67.5851%" y="245" width="0.0810%" height="15" fill="rgb(215,171,30)" fg:x="834" fg:w="1"/><text x="67.8351%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.5851%" y="229" width="0.0810%" height="15" fill="rgb(214,222,9)" fg:x="834" fg:w="1"/><text x="67.8351%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.5851%" y="213" width="0.0810%" height="15" fill="rgb(223,3,22)" fg:x="834" fg:w="1"/><text x="67.8351%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.5851%" y="197" width="0.0810%" height="15" fill="rgb(225,196,46)" fg:x="834" fg:w="1"/><text x="67.8351%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.5851%" y="181" width="0.0810%" height="15" fill="rgb(209,110,37)" fg:x="834" fg:w="1"/><text x="67.8351%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.5851%" y="165" width="0.0810%" height="15" fill="rgb(249,89,12)" fg:x="834" fg:w="1"/><text x="67.8351%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.5851%" y="149" width="0.0810%" height="15" fill="rgb(226,27,33)" fg:x="834" fg:w="1"/><text x="67.8351%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="67.5851%" y="133" width="0.0810%" height="15" fill="rgb(213,82,22)" fg:x="834" fg:w="1"/><text x="67.8351%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="67.5851%" y="117" width="0.0810%" height="15" fill="rgb(248,140,0)" fg:x="834" fg:w="1"/><text x="67.8351%" y="127.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.6661%" y="165" width="0.0810%" height="15" fill="rgb(228,106,3)" fg:x="835" fg:w="1"/><text x="67.9161%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="67.6661%" y="213" width="0.1621%" height="15" fill="rgb(209,23,37)" fg:x="835" fg:w="2"/><text x="67.9161%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="67.6661%" y="197" width="0.1621%" height="15" fill="rgb(241,93,50)" fg:x="835" fg:w="2"/><text x="67.9161%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="67.6661%" y="181" width="0.1621%" height="15" fill="rgb(253,46,43)" fg:x="835" fg:w="2"/><text x="67.9161%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.7472%" y="165" width="0.0810%" height="15" fill="rgb(226,206,43)" fg:x="836" fg:w="1"/><text x="67.9972%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.7472%" y="149" width="0.0810%" height="15" fill="rgb(217,54,7)" fg:x="836" fg:w="1"/><text x="67.9972%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="67.8282%" y="213" width="0.0810%" height="15" fill="rgb(223,5,52)" fg:x="837" fg:w="1"/><text x="68.0782%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.8282%" y="197" width="0.0810%" height="15" fill="rgb(206,52,46)" fg:x="837" fg:w="1"/><text x="68.0782%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="67.8282%" y="181" width="0.0810%" height="15" fill="rgb(253,136,11)" fg:x="837" fg:w="1"/><text x="68.0782%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.8282%" y="165" width="0.0810%" height="15" fill="rgb(208,106,33)" fg:x="837" fg:w="1"/><text x="68.0782%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.9092%" y="197" width="0.0810%" height="15" fill="rgb(206,54,4)" fg:x="838" fg:w="1"/><text x="68.1592%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="67.9903%" y="197" width="0.0810%" height="15" fill="rgb(213,3,15)" fg:x="839" fg:w="1"/><text x="68.2403%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="67.9903%" y="181" width="0.0810%" height="15" fill="rgb(252,211,39)" fg:x="839" fg:w="1"/><text x="68.2403%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="68.0713%" y="181" width="0.0810%" height="15" fill="rgb(223,6,36)" fg:x="840" fg:w="1"/><text x="68.3213%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="68.0713%" y="165" width="0.0810%" height="15" fill="rgb(252,169,45)" fg:x="840" fg:w="1"/><text x="68.3213%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="68.1524%" y="181" width="0.2431%" height="15" fill="rgb(212,48,26)" fg:x="841" fg:w="3"/><text x="68.4024%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.41%)</title><rect x="68.0713%" y="197" width="0.4052%" height="15" fill="rgb(251,102,48)" fg:x="840" fg:w="5"/><text x="68.3213%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="68.3955%" y="181" width="0.0810%" height="15" fill="rgb(243,208,16)" fg:x="844" fg:w="1"/><text x="68.6455%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="68.3955%" y="165" width="0.0810%" height="15" fill="rgb(219,96,24)" fg:x="844" fg:w="1"/><text x="68.6455%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="68.4765%" y="181" width="0.0810%" height="15" fill="rgb(219,33,29)" fg:x="845" fg:w="1"/><text x="68.7265%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.4765%" y="165" width="0.0810%" height="15" fill="rgb(223,176,5)" fg:x="845" fg:w="1"/><text x="68.7265%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="68.8006%" y="165" width="0.1621%" height="15" fill="rgb(228,140,14)" fg:x="849" fg:w="2"/><text x="69.0506%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.8817%" y="149" width="0.0810%" height="15" fill="rgb(217,179,31)" fg:x="850" fg:w="1"/><text x="69.1317%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.8817%" y="133" width="0.0810%" height="15" fill="rgb(230,9,30)" fg:x="850" fg:w="1"/><text x="69.1317%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.8817%" y="117" width="0.0810%" height="15" fill="rgb(230,136,20)" fg:x="850" fg:w="1"/><text x="69.1317%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.41%)</title><rect x="68.9627%" y="165" width="0.4052%" height="15" fill="rgb(215,210,22)" fg:x="851" fg:w="5"/><text x="69.2127%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (19 samples, 1.54%)</title><rect x="67.9092%" y="213" width="1.5397%" height="15" fill="rgb(218,43,5)" fg:x="838" fg:w="19"/><text x="68.1592%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (12 samples, 0.97%)</title><rect x="68.4765%" y="197" width="0.9724%" height="15" fill="rgb(216,11,5)" fg:x="845" fg:w="12"/><text x="68.7265%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.89%)</title><rect x="68.5575%" y="181" width="0.8914%" height="15" fill="rgb(209,82,29)" fg:x="846" fg:w="11"/><text x="68.8075%" y="191.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="69.3679%" y="165" width="0.0810%" height="15" fill="rgb(244,115,12)" fg:x="856" fg:w="1"/><text x="69.6179%" y="175.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="69.3679%" y="149" width="0.0810%" height="15" fill="rgb(222,82,18)" fg:x="856" fg:w="1"/><text x="69.6179%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="69.3679%" y="133" width="0.0810%" height="15" fill="rgb(249,227,8)" fg:x="856" fg:w="1"/><text x="69.6179%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.3679%" y="117" width="0.0810%" height="15" fill="rgb(253,141,45)" fg:x="856" fg:w="1"/><text x="69.6179%" y="127.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="69.6110%" y="165" width="0.0810%" height="15" fill="rgb(234,184,4)" fg:x="859" fg:w="1"/><text x="69.8610%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="69.6110%" y="149" width="0.0810%" height="15" fill="rgb(218,194,23)" fg:x="859" fg:w="1"/><text x="69.8610%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.6110%" y="133" width="0.0810%" height="15" fill="rgb(235,66,41)" fg:x="859" fg:w="1"/><text x="69.8610%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.6110%" y="117" width="0.0810%" height="15" fill="rgb(245,217,1)" fg:x="859" fg:w="1"/><text x="69.8610%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="69.6921%" y="165" width="0.0810%" height="15" fill="rgb(229,91,1)" fg:x="860" fg:w="1"/><text x="69.9421%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="69.6921%" y="149" width="0.0810%" height="15" fill="rgb(207,101,30)" fg:x="860" fg:w="1"/><text x="69.9421%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="69.6921%" y="133" width="0.0810%" height="15" fill="rgb(223,82,49)" fg:x="860" fg:w="1"/><text x="69.9421%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="69.7731%" y="165" width="0.0810%" height="15" fill="rgb(218,167,17)" fg:x="861" fg:w="1"/><text x="70.0231%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="69.7731%" y="149" width="0.0810%" height="15" fill="rgb(208,103,14)" fg:x="861" fg:w="1"/><text x="70.0231%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.49%)</title><rect x="69.5300%" y="181" width="0.4862%" height="15" fill="rgb(238,20,8)" fg:x="858" fg:w="6"/><text x="69.7800%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="69.8541%" y="165" width="0.1621%" height="15" fill="rgb(218,80,54)" fg:x="862" fg:w="2"/><text x="70.1041%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="69.8541%" y="149" width="0.1621%" height="15" fill="rgb(240,144,17)" fg:x="862" fg:w="2"/><text x="70.1041%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="69.8541%" y="133" width="0.1621%" height="15" fill="rgb(245,27,50)" fg:x="862" fg:w="2"/><text x="70.1041%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="69.8541%" y="117" width="0.1621%" height="15" fill="rgb(251,51,7)" fg:x="862" fg:w="2"/><text x="70.1041%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.65%)</title><rect x="69.4489%" y="213" width="0.6483%" height="15" fill="rgb(245,217,29)" fg:x="857" fg:w="8"/><text x="69.6989%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.65%)</title><rect x="69.4489%" y="197" width="0.6483%" height="15" fill="rgb(221,176,29)" fg:x="857" fg:w="8"/><text x="69.6989%" y="207.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="70.0162%" y="181" width="0.0810%" height="15" fill="rgb(212,180,24)" fg:x="864" fg:w="1"/><text x="70.2662%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="70.0162%" y="165" width="0.0810%" height="15" fill="rgb(254,24,2)" fg:x="864" fg:w="1"/><text x="70.2662%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="70.0972%" y="181" width="0.0810%" height="15" fill="rgb(230,100,2)" fg:x="865" fg:w="1"/><text x="70.3472%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="70.0972%" y="165" width="0.0810%" height="15" fill="rgb(219,142,25)" fg:x="865" fg:w="1"/><text x="70.3472%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (32 samples, 2.59%)</title><rect x="67.6661%" y="261" width="2.5932%" height="15" fill="rgb(240,73,43)" fg:x="835" fg:w="32"/><text x="67.9161%" y="271.50">re..</text></g><g><title>regex::builders::string::RegexBuilder::build (32 samples, 2.59%)</title><rect x="67.6661%" y="245" width="2.5932%" height="15" fill="rgb(214,114,15)" fg:x="835" fg:w="32"/><text x="67.9161%" y="255.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (32 samples, 2.59%)</title><rect x="67.6661%" y="229" width="2.5932%" height="15" fill="rgb(207,130,4)" fg:x="835" fg:w="32"/><text x="67.9161%" y="239.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="70.0972%" y="213" width="0.1621%" height="15" fill="rgb(221,25,40)" fg:x="865" fg:w="2"/><text x="70.3472%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="70.0972%" y="197" width="0.1621%" height="15" fill="rgb(241,184,7)" fg:x="865" fg:w="2"/><text x="70.3472%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="70.1783%" y="181" width="0.0810%" height="15" fill="rgb(235,159,4)" fg:x="866" fg:w="1"/><text x="70.4283%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="70.1783%" y="165" width="0.0810%" height="15" fill="rgb(214,87,48)" fg:x="866" fg:w="1"/><text x="70.4283%" y="175.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="70.1783%" y="149" width="0.0810%" height="15" fill="rgb(246,198,24)" fg:x="866" fg:w="1"/><text x="70.4283%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.5024%" y="181" width="0.0810%" height="15" fill="rgb(209,66,40)" fg:x="870" fg:w="1"/><text x="70.7524%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="70.5024%" y="165" width="0.0810%" height="15" fill="rgb(233,147,39)" fg:x="870" fg:w="1"/><text x="70.7524%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.49%)</title><rect x="70.2593%" y="213" width="0.4862%" height="15" fill="rgb(231,145,52)" fg:x="867" fg:w="6"/><text x="70.5093%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.49%)</title><rect x="70.2593%" y="197" width="0.4862%" height="15" fill="rgb(206,20,26)" fg:x="867" fg:w="6"/><text x="70.5093%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="70.5835%" y="181" width="0.1621%" height="15" fill="rgb(238,220,4)" fg:x="871" fg:w="2"/><text x="70.8335%" y="191.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (40 samples, 3.24%)</title><rect x="67.6661%" y="277" width="3.2415%" height="15" fill="rgb(252,195,42)" fg:x="835" fg:w="40"/><text x="67.9161%" y="287.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.65%)</title><rect x="70.2593%" y="261" width="0.6483%" height="15" fill="rgb(209,10,6)" fg:x="867" fg:w="8"/><text x="70.5093%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.65%)</title><rect x="70.2593%" y="245" width="0.6483%" height="15" fill="rgb(229,3,52)" fg:x="867" fg:w="8"/><text x="70.5093%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.65%)</title><rect x="70.2593%" y="229" width="0.6483%" height="15" fill="rgb(253,49,37)" fg:x="867" fg:w="8"/><text x="70.5093%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (2 samples, 0.16%)</title><rect x="70.7455%" y="213" width="0.1621%" height="15" fill="rgb(240,103,49)" fg:x="873" fg:w="2"/><text x="70.9955%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="70.7455%" y="197" width="0.1621%" height="15" fill="rgb(250,182,30)" fg:x="873" fg:w="2"/><text x="70.9955%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="70.8266%" y="181" width="0.0810%" height="15" fill="rgb(248,8,30)" fg:x="874" fg:w="1"/><text x="71.0766%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (586 samples, 47.49%)</title><rect x="23.5818%" y="373" width="47.4878%" height="15" fill="rgb(237,120,30)" fg:x="291" fg:w="586"/><text x="23.8318%" y="383.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::O..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (559 samples, 45.30%)</title><rect x="25.7699%" y="357" width="45.2998%" height="15" fill="rgb(221,146,34)" fg:x="318" fg:w="559"/><text x="26.0199%" y="367.50">plugins_core::looking::model::Unqualified::qualify</text></g><g><title>indefinite::indefinite (559 samples, 45.30%)</title><rect x="25.7699%" y="341" width="45.2998%" height="15" fill="rgb(242,55,13)" fg:x="318" fg:w="559"/><text x="26.0199%" y="351.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (558 samples, 45.22%)</title><rect x="25.8509%" y="325" width="45.2188%" height="15" fill="rgb(242,112,31)" fg:x="319" fg:w="558"/><text x="26.1009%" y="335.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (557 samples, 45.14%)</title><rect x="25.9319%" y="309" width="45.1378%" height="15" fill="rgb(249,192,27)" fg:x="320" fg:w="557"/><text x="26.1819%" y="319.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (43 samples, 3.48%)</title><rect x="67.5851%" y="293" width="3.4846%" height="15" fill="rgb(208,204,44)" fg:x="834" fg:w="43"/><text x="67.8351%" y="303.50">ind..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="70.9076%" y="277" width="0.1621%" height="15" fill="rgb(208,93,54)" fg:x="875" fg:w="2"/><text x="71.1576%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.0697%" y="357" width="0.1621%" height="15" fill="rgb(242,1,31)" fg:x="877" fg:w="2"/><text x="71.3197%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.0697%" y="341" width="0.1621%" height="15" fill="rgb(241,83,25)" fg:x="877" fg:w="2"/><text x="71.3197%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.1507%" y="325" width="0.0810%" height="15" fill="rgb(205,169,50)" fg:x="878" fg:w="1"/><text x="71.4007%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1507%" y="309" width="0.0810%" height="15" fill="rgb(239,186,37)" fg:x="878" fg:w="1"/><text x="71.4007%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1507%" y="293" width="0.0810%" height="15" fill="rgb(205,221,10)" fg:x="878" fg:w="1"/><text x="71.4007%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.1507%" y="277" width="0.0810%" height="15" fill="rgb(218,196,15)" fg:x="878" fg:w="1"/><text x="71.4007%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.1507%" y="261" width="0.0810%" height="15" fill="rgb(218,196,35)" fg:x="878" fg:w="1"/><text x="71.4007%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.1507%" y="245" width="0.0810%" height="15" fill="rgb(233,63,24)" fg:x="878" fg:w="1"/><text x="71.4007%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.1507%" y="229" width="0.0810%" height="15" fill="rgb(225,8,4)" fg:x="878" fg:w="1"/><text x="71.4007%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.1507%" y="213" width="0.0810%" height="15" fill="rgb(234,105,35)" fg:x="878" fg:w="1"/><text x="71.4007%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.1507%" y="197" width="0.0810%" height="15" fill="rgb(236,21,32)" fg:x="878" fg:w="1"/><text x="71.4007%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.1507%" y="181" width="0.0810%" height="15" fill="rgb(228,109,6)" fg:x="878" fg:w="1"/><text x="71.4007%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.1507%" y="165" width="0.0810%" height="15" fill="rgb(229,215,31)" fg:x="878" fg:w="1"/><text x="71.4007%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.1507%" y="149" width="0.0810%" height="15" fill="rgb(221,52,54)" fg:x="878" fg:w="1"/><text x="71.4007%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.1507%" y="133" width="0.0810%" height="15" fill="rgb(252,129,43)" fg:x="878" fg:w="1"/><text x="71.4007%" y="143.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="71.2318%" y="357" width="0.0810%" height="15" fill="rgb(248,183,27)" fg:x="879" fg:w="1"/><text x="71.4818%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.2318%" y="341" width="0.0810%" height="15" fill="rgb(250,0,22)" fg:x="879" fg:w="1"/><text x="71.4818%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::EnumDeserializer as serde::de::EnumAccess&gt;::variant_seed (1 samples, 0.08%)</title><rect x="71.3128%" y="261" width="0.0810%" height="15" fill="rgb(213,166,10)" fg:x="880" fg:w="1"/><text x="71.5628%" y="271.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.3128%" y="277" width="0.1621%" height="15" fill="rgb(207,163,36)" fg:x="880" fg:w="2"/><text x="71.5628%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.3938%" y="261" width="0.0810%" height="15" fill="rgb(208,122,22)" fg:x="881" fg:w="1"/><text x="71.6438%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.3938%" y="245" width="0.0810%" height="15" fill="rgb(207,104,49)" fg:x="881" fg:w="1"/><text x="71.6438%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.3938%" y="229" width="0.0810%" height="15" fill="rgb(248,211,50)" fg:x="881" fg:w="1"/><text x="71.6438%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.3938%" y="213" width="0.0810%" height="15" fill="rgb(217,13,45)" fg:x="881" fg:w="1"/><text x="71.6438%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="71.4749%" y="245" width="0.0810%" height="15" fill="rgb(211,216,49)" fg:x="882" fg:w="1"/><text x="71.7249%" y="255.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.57%)</title><rect x="71.0697%" y="373" width="0.5673%" height="15" fill="rgb(221,58,53)" fg:x="877" fg:w="7"/><text x="71.3197%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="71.3128%" y="357" width="0.3241%" height="15" fill="rgb(220,112,41)" fg:x="880" fg:w="4"/><text x="71.5628%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="71.3128%" y="341" width="0.3241%" height="15" fill="rgb(236,38,28)" fg:x="880" fg:w="4"/><text x="71.5628%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (4 samples, 0.32%)</title><rect x="71.3128%" y="325" width="0.3241%" height="15" fill="rgb(227,195,22)" fg:x="880" fg:w="4"/><text x="71.5628%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (4 samples, 0.32%)</title><rect x="71.3128%" y="309" width="0.3241%" height="15" fill="rgb(214,55,33)" fg:x="880" fg:w="4"/><text x="71.5628%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (4 samples, 0.32%)</title><rect x="71.3128%" y="293" width="0.3241%" height="15" fill="rgb(248,80,13)" fg:x="880" fg:w="4"/><text x="71.5628%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.4749%" y="277" width="0.1621%" height="15" fill="rgb(238,52,6)" fg:x="882" fg:w="2"/><text x="71.7249%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.4749%" y="261" width="0.1621%" height="15" fill="rgb(224,198,47)" fg:x="882" fg:w="2"/><text x="71.7249%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="71.5559%" y="245" width="0.0810%" height="15" fill="rgb(233,171,20)" fg:x="883" fg:w="1"/><text x="71.8059%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="71.6370%" y="325" width="0.0810%" height="15" fill="rgb(241,30,25)" fg:x="884" fg:w="1"/><text x="71.8870%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.6370%" y="309" width="0.0810%" height="15" fill="rgb(207,171,38)" fg:x="884" fg:w="1"/><text x="71.8870%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.6370%" y="293" width="0.0810%" height="15" fill="rgb(234,70,1)" fg:x="884" fg:w="1"/><text x="71.8870%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.6370%" y="277" width="0.0810%" height="15" fill="rgb(232,178,18)" fg:x="884" fg:w="1"/><text x="71.8870%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.6370%" y="261" width="0.0810%" height="15" fill="rgb(241,78,40)" fg:x="884" fg:w="1"/><text x="71.8870%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.6370%" y="245" width="0.0810%" height="15" fill="rgb(222,35,25)" fg:x="884" fg:w="1"/><text x="71.8870%" y="255.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="71.6370%" y="341" width="0.1621%" height="15" fill="rgb(207,92,16)" fg:x="884" fg:w="2"/><text x="71.8870%" y="351.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="71.7180%" y="325" width="0.0810%" height="15" fill="rgb(216,59,51)" fg:x="885" fg:w="1"/><text x="71.9680%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="71.7990%" y="341" width="0.0810%" height="15" fill="rgb(213,80,28)" fg:x="886" fg:w="1"/><text x="72.0490%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.7990%" y="325" width="0.0810%" height="15" fill="rgb(220,93,7)" fg:x="886" fg:w="1"/><text x="72.0490%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.7990%" y="309" width="0.0810%" height="15" fill="rgb(225,24,44)" fg:x="886" fg:w="1"/><text x="72.0490%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.7990%" y="293" width="0.0810%" height="15" fill="rgb(243,74,40)" fg:x="886" fg:w="1"/><text x="72.0490%" y="303.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (4 samples, 0.32%)</title><rect x="71.6370%" y="357" width="0.3241%" height="15" fill="rgb(228,39,7)" fg:x="884" fg:w="4"/><text x="71.8870%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="71.8801%" y="341" width="0.0810%" height="15" fill="rgb(227,79,8)" fg:x="887" fg:w="1"/><text x="72.1301%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="71.8801%" y="325" width="0.0810%" height="15" fill="rgb(236,58,11)" fg:x="887" fg:w="1"/><text x="72.1301%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.8801%" y="309" width="0.0810%" height="15" fill="rgb(249,63,35)" fg:x="887" fg:w="1"/><text x="72.1301%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.8801%" y="293" width="0.0810%" height="15" fill="rgb(252,114,16)" fg:x="887" fg:w="1"/><text x="72.1301%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.8801%" y="277" width="0.0810%" height="15" fill="rgb(254,151,24)" fg:x="887" fg:w="1"/><text x="72.1301%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.9611%" y="293" width="0.0810%" height="15" fill="rgb(253,54,39)" fg:x="888" fg:w="1"/><text x="72.2111%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.9611%" y="277" width="0.0810%" height="15" fill="rgb(243,25,45)" fg:x="888" fg:w="1"/><text x="72.2111%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.9611%" y="261" width="0.0810%" height="15" fill="rgb(234,134,9)" fg:x="888" fg:w="1"/><text x="72.2111%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9611%" y="245" width="0.0810%" height="15" fill="rgb(227,166,31)" fg:x="888" fg:w="1"/><text x="72.2111%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9611%" y="229" width="0.0810%" height="15" fill="rgb(245,143,41)" fg:x="888" fg:w="1"/><text x="72.2111%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.9611%" y="213" width="0.0810%" height="15" fill="rgb(238,181,32)" fg:x="888" fg:w="1"/><text x="72.2111%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.9611%" y="197" width="0.0810%" height="15" fill="rgb(224,113,18)" fg:x="888" fg:w="1"/><text x="72.2111%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.9611%" y="181" width="0.0810%" height="15" fill="rgb(240,229,28)" fg:x="888" fg:w="1"/><text x="72.2111%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.9611%" y="165" width="0.0810%" height="15" fill="rgb(250,185,3)" fg:x="888" fg:w="1"/><text x="72.2111%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.9611%" y="149" width="0.0810%" height="15" fill="rgb(212,59,25)" fg:x="888" fg:w="1"/><text x="72.2111%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.9611%" y="133" width="0.0810%" height="15" fill="rgb(221,87,20)" fg:x="888" fg:w="1"/><text x="72.2111%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.9611%" y="117" width="0.0810%" height="15" fill="rgb(213,74,28)" fg:x="888" fg:w="1"/><text x="72.2111%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.9611%" y="101" width="0.0810%" height="15" fill="rgb(224,132,34)" fg:x="888" fg:w="1"/><text x="72.2111%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.9611%" y="85" width="0.0810%" height="15" fill="rgb(222,101,24)" fg:x="888" fg:w="1"/><text x="72.2111%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.9611%" y="69" width="0.0810%" height="15" fill="rgb(254,142,4)" fg:x="888" fg:w="1"/><text x="72.2111%" y="79.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="72.0421%" y="293" width="0.0810%" height="15" fill="rgb(230,229,49)" fg:x="889" fg:w="1"/><text x="72.2921%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.0421%" y="277" width="0.0810%" height="15" fill="rgb(238,70,47)" fg:x="889" fg:w="1"/><text x="72.2921%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.0421%" y="261" width="0.0810%" height="15" fill="rgb(231,160,17)" fg:x="889" fg:w="1"/><text x="72.2921%" y="271.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="72.1232%" y="293" width="0.1621%" height="15" fill="rgb(218,68,53)" fg:x="890" fg:w="2"/><text x="72.3732%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.1232%" y="277" width="0.1621%" height="15" fill="rgb(236,111,10)" fg:x="890" fg:w="2"/><text x="72.3732%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.1232%" y="261" width="0.1621%" height="15" fill="rgb(224,34,41)" fg:x="890" fg:w="2"/><text x="72.3732%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="72.1232%" y="245" width="0.1621%" height="15" fill="rgb(241,118,19)" fg:x="890" fg:w="2"/><text x="72.3732%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.1232%" y="229" width="0.1621%" height="15" fill="rgb(238,129,25)" fg:x="890" fg:w="2"/><text x="72.3732%" y="239.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="72.1232%" y="213" width="0.1621%" height="15" fill="rgb(238,22,31)" fg:x="890" fg:w="2"/><text x="72.3732%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.1232%" y="197" width="0.1621%" height="15" fill="rgb(222,174,48)" fg:x="890" fg:w="2"/><text x="72.3732%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.1232%" y="181" width="0.1621%" height="15" fill="rgb(206,152,40)" fg:x="890" fg:w="2"/><text x="72.3732%" y="191.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="72.1232%" y="165" width="0.1621%" height="15" fill="rgb(218,99,54)" fg:x="890" fg:w="2"/><text x="72.3732%" y="175.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.2853%" y="229" width="0.0810%" height="15" fill="rgb(220,174,26)" fg:x="892" fg:w="1"/><text x="72.5353%" y="239.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="72.2853%" y="213" width="0.0810%" height="15" fill="rgb(245,116,9)" fg:x="892" fg:w="1"/><text x="72.5353%" y="223.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.49%)</title><rect x="71.9611%" y="357" width="0.4862%" height="15" fill="rgb(209,72,35)" fg:x="888" fg:w="6"/><text x="72.2111%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.49%)</title><rect x="71.9611%" y="341" width="0.4862%" height="15" fill="rgb(226,126,21)" fg:x="888" fg:w="6"/><text x="72.2111%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.49%)</title><rect x="71.9611%" y="325" width="0.4862%" height="15" fill="rgb(227,192,1)" fg:x="888" fg:w="6"/><text x="72.2111%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.49%)</title><rect x="71.9611%" y="309" width="0.4862%" height="15" fill="rgb(237,180,29)" fg:x="888" fg:w="6"/><text x="72.2111%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="72.2853%" y="293" width="0.1621%" height="15" fill="rgb(230,197,35)" fg:x="892" fg:w="2"/><text x="72.5353%" y="303.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="72.2853%" y="277" width="0.1621%" height="15" fill="rgb(246,193,31)" fg:x="892" fg:w="2"/><text x="72.5353%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.2853%" y="261" width="0.1621%" height="15" fill="rgb(241,36,4)" fg:x="892" fg:w="2"/><text x="72.5353%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.2853%" y="245" width="0.1621%" height="15" fill="rgb(241,130,17)" fg:x="892" fg:w="2"/><text x="72.5353%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.3663%" y="229" width="0.0810%" height="15" fill="rgb(206,137,32)" fg:x="893" fg:w="1"/><text x="72.6163%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.89%)</title><rect x="71.6370%" y="373" width="0.8914%" height="15" fill="rgb(237,228,51)" fg:x="884" fg:w="11"/><text x="71.8870%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.4473%" y="357" width="0.0810%" height="15" fill="rgb(243,6,42)" fg:x="894" fg:w="1"/><text x="72.6973%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (622 samples, 50.41%)</title><rect x="22.2042%" y="533" width="50.4052%" height="15" fill="rgb(251,74,28)" fg:x="274" fg:w="622"/><text x="22.4542%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (622 samples, 50.41%)</title><rect x="22.2042%" y="517" width="50.4052%" height="15" fill="rgb(218,20,49)" fg:x="274" fg:w="622"/><text x="22.4542%" y="527.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (622 samples, 50.41%)</title><rect x="22.2042%" y="501" width="50.4052%" height="15" fill="rgb(238,28,14)" fg:x="274" fg:w="622"/><text x="22.4542%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (622 samples, 50.41%)</title><rect x="22.2042%" y="485" width="50.4052%" height="15" fill="rgb(229,40,46)" fg:x="274" fg:w="622"/><text x="22.4542%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (622 samples, 50.41%)</title><rect x="22.2042%" y="469" width="50.4052%" height="15" fill="rgb(244,195,20)" fg:x="274" fg:w="622"/><text x="22.4542%" y="479.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (622 samples, 50.41%)</title><rect x="22.2042%" y="453" width="50.4052%" height="15" fill="rgb(253,56,35)" fg:x="274" fg:w="622"/><text x="22.4542%" y="463.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (622 samples, 50.41%)</title><rect x="22.2042%" y="437" width="50.4052%" height="15" fill="rgb(210,149,44)" fg:x="274" fg:w="622"/><text x="22.4542%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (622 samples, 50.41%)</title><rect x="22.2042%" y="421" width="50.4052%" height="15" fill="rgb(240,135,12)" fg:x="274" fg:w="622"/><text x="22.4542%" y="431.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (622 samples, 50.41%)</title><rect x="22.2042%" y="405" width="50.4052%" height="15" fill="rgb(251,24,50)" fg:x="274" fg:w="622"/><text x="22.4542%" y="415.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (607 samples, 49.19%)</title><rect x="23.4198%" y="389" width="49.1896%" height="15" fill="rgb(243,200,47)" fg:x="289" fg:w="607"/><text x="23.6698%" y="399.50">plugins_core::looking::model::new_area_observation</text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="72.5284%" y="373" width="0.0810%" height="15" fill="rgb(224,166,26)" fg:x="895" fg:w="1"/><text x="72.7784%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="72.5284%" y="357" width="0.0810%" height="15" fill="rgb(233,0,47)" fg:x="895" fg:w="1"/><text x="72.7784%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.7715%" y="469" width="0.0810%" height="15" fill="rgb(253,80,5)" fg:x="898" fg:w="1"/><text x="73.0215%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.7715%" y="453" width="0.0810%" height="15" fill="rgb(214,133,25)" fg:x="898" fg:w="1"/><text x="73.0215%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.8525%" y="437" width="0.0810%" height="15" fill="rgb(209,27,14)" fg:x="899" fg:w="1"/><text x="73.1025%" y="447.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="72.7715%" y="485" width="0.2431%" height="15" fill="rgb(219,102,51)" fg:x="898" fg:w="3"/><text x="73.0215%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.8525%" y="469" width="0.1621%" height="15" fill="rgb(237,18,16)" fg:x="899" fg:w="2"/><text x="73.1025%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.8525%" y="453" width="0.1621%" height="15" fill="rgb(241,85,17)" fg:x="899" fg:w="2"/><text x="73.1025%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="72.9335%" y="437" width="0.0810%" height="15" fill="rgb(236,90,42)" fg:x="900" fg:w="1"/><text x="73.1835%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="72.9335%" y="421" width="0.0810%" height="15" fill="rgb(249,57,21)" fg:x="900" fg:w="1"/><text x="73.1835%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="72.9335%" y="405" width="0.0810%" height="15" fill="rgb(243,12,36)" fg:x="900" fg:w="1"/><text x="73.1835%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.9335%" y="389" width="0.0810%" height="15" fill="rgb(253,128,47)" fg:x="900" fg:w="1"/><text x="73.1835%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.9335%" y="373" width="0.0810%" height="15" fill="rgb(207,33,20)" fg:x="900" fg:w="1"/><text x="73.1835%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.9335%" y="357" width="0.0810%" height="15" fill="rgb(233,215,35)" fg:x="900" fg:w="1"/><text x="73.1835%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0146%" y="373" width="0.0810%" height="15" fill="rgb(249,188,52)" fg:x="901" fg:w="1"/><text x="73.2646%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0146%" y="357" width="0.0810%" height="15" fill="rgb(225,12,32)" fg:x="901" fg:w="1"/><text x="73.2646%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.0146%" y="421" width="0.1621%" height="15" fill="rgb(247,98,14)" fg:x="901" fg:w="2"/><text x="73.2646%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.0146%" y="405" width="0.1621%" height="15" fill="rgb(247,219,48)" fg:x="901" fg:w="2"/><text x="73.2646%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.0146%" y="389" width="0.1621%" height="15" fill="rgb(253,60,48)" fg:x="901" fg:w="2"/><text x="73.2646%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0956%" y="373" width="0.0810%" height="15" fill="rgb(245,15,52)" fg:x="902" fg:w="1"/><text x="73.3456%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.1767%" y="421" width="0.0810%" height="15" fill="rgb(220,133,28)" fg:x="903" fg:w="1"/><text x="73.4267%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.1767%" y="405" width="0.0810%" height="15" fill="rgb(217,180,4)" fg:x="903" fg:w="1"/><text x="73.4267%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.1767%" y="389" width="0.0810%" height="15" fill="rgb(251,24,1)" fg:x="903" fg:w="1"/><text x="73.4267%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.1767%" y="373" width="0.0810%" height="15" fill="rgb(212,185,49)" fg:x="903" fg:w="1"/><text x="73.4267%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.1767%" y="357" width="0.0810%" height="15" fill="rgb(215,175,22)" fg:x="903" fg:w="1"/><text x="73.4267%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.1767%" y="341" width="0.0810%" height="15" fill="rgb(250,205,14)" fg:x="903" fg:w="1"/><text x="73.4267%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.1767%" y="325" width="0.0810%" height="15" fill="rgb(225,211,22)" fg:x="903" fg:w="1"/><text x="73.4267%" y="335.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="73.2577%" y="421" width="0.0810%" height="15" fill="rgb(251,179,42)" fg:x="904" fg:w="1"/><text x="73.5077%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.2577%" y="405" width="0.0810%" height="15" fill="rgb(208,216,51)" fg:x="904" fg:w="1"/><text x="73.5077%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="73.2577%" y="389" width="0.0810%" height="15" fill="rgb(235,36,11)" fg:x="904" fg:w="1"/><text x="73.5077%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.2577%" y="373" width="0.0810%" height="15" fill="rgb(213,189,28)" fg:x="904" fg:w="1"/><text x="73.5077%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.3387%" y="293" width="0.0810%" height="15" fill="rgb(227,203,42)" fg:x="905" fg:w="1"/><text x="73.5887%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.3387%" y="277" width="0.0810%" height="15" fill="rgb(244,72,36)" fg:x="905" fg:w="1"/><text x="73.5887%" y="287.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.3387%" y="261" width="0.0810%" height="15" fill="rgb(213,53,17)" fg:x="905" fg:w="1"/><text x="73.5887%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.3387%" y="245" width="0.0810%" height="15" fill="rgb(207,167,3)" fg:x="905" fg:w="1"/><text x="73.5887%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.3387%" y="229" width="0.0810%" height="15" fill="rgb(216,98,30)" fg:x="905" fg:w="1"/><text x="73.5887%" y="239.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.3387%" y="213" width="0.0810%" height="15" fill="rgb(236,123,15)" fg:x="905" fg:w="1"/><text x="73.5887%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.3387%" y="197" width="0.0810%" height="15" fill="rgb(248,81,50)" fg:x="905" fg:w="1"/><text x="73.5887%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.3387%" y="181" width="0.0810%" height="15" fill="rgb(214,120,4)" fg:x="905" fg:w="1"/><text x="73.5887%" y="191.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="73.3387%" y="421" width="0.1621%" height="15" fill="rgb(208,179,34)" fg:x="905" fg:w="2"/><text x="73.5887%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="73.3387%" y="405" width="0.1621%" height="15" fill="rgb(227,140,7)" fg:x="905" fg:w="2"/><text x="73.5887%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.3387%" y="389" width="0.1621%" height="15" fill="rgb(214,22,6)" fg:x="905" fg:w="2"/><text x="73.5887%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="73.3387%" y="373" width="0.1621%" height="15" fill="rgb(207,137,27)" fg:x="905" fg:w="2"/><text x="73.5887%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.3387%" y="357" width="0.1621%" height="15" fill="rgb(210,8,46)" fg:x="905" fg:w="2"/><text x="73.5887%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="73.3387%" y="341" width="0.1621%" height="15" fill="rgb(240,16,54)" fg:x="905" fg:w="2"/><text x="73.5887%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.3387%" y="325" width="0.1621%" height="15" fill="rgb(211,209,29)" fg:x="905" fg:w="2"/><text x="73.5887%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.3387%" y="309" width="0.1621%" height="15" fill="rgb(226,228,24)" fg:x="905" fg:w="2"/><text x="73.5887%" y="319.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.4198%" y="293" width="0.0810%" height="15" fill="rgb(222,84,9)" fg:x="906" fg:w="1"/><text x="73.6698%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.4198%" y="277" width="0.0810%" height="15" fill="rgb(234,203,30)" fg:x="906" fg:w="1"/><text x="73.6698%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.4198%" y="261" width="0.0810%" height="15" fill="rgb(238,109,14)" fg:x="906" fg:w="1"/><text x="73.6698%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.4198%" y="245" width="0.0810%" height="15" fill="rgb(233,206,34)" fg:x="906" fg:w="1"/><text x="73.6698%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.4198%" y="229" width="0.0810%" height="15" fill="rgb(220,167,47)" fg:x="906" fg:w="1"/><text x="73.6698%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.5008%" y="325" width="0.1621%" height="15" fill="rgb(238,105,10)" fg:x="907" fg:w="2"/><text x="73.7508%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.5008%" y="309" width="0.1621%" height="15" fill="rgb(213,227,17)" fg:x="907" fg:w="2"/><text x="73.7508%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.5008%" y="293" width="0.1621%" height="15" fill="rgb(217,132,38)" fg:x="907" fg:w="2"/><text x="73.7508%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.5008%" y="277" width="0.1621%" height="15" fill="rgb(242,146,4)" fg:x="907" fg:w="2"/><text x="73.7508%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.5008%" y="261" width="0.1621%" height="15" fill="rgb(212,61,9)" fg:x="907" fg:w="2"/><text x="73.7508%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.5008%" y="245" width="0.1621%" height="15" fill="rgb(247,126,22)" fg:x="907" fg:w="2"/><text x="73.7508%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.5818%" y="229" width="0.0810%" height="15" fill="rgb(220,196,2)" fg:x="908" fg:w="1"/><text x="73.8318%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.5818%" y="213" width="0.0810%" height="15" fill="rgb(208,46,4)" fg:x="908" fg:w="1"/><text x="73.8318%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.6629%" y="325" width="0.0810%" height="15" fill="rgb(252,104,46)" fg:x="909" fg:w="1"/><text x="73.9129%" y="335.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="73.6629%" y="309" width="0.0810%" height="15" fill="rgb(237,152,48)" fg:x="909" fg:w="1"/><text x="73.9129%" y="319.50"></text></g><g><title>plugins_core::tools::contained_by (13 samples, 1.05%)</title><rect x="72.7715%" y="501" width="1.0535%" height="15" fill="rgb(221,59,37)" fg:x="898" fg:w="13"/><text x="73.0215%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (10 samples, 0.81%)</title><rect x="73.0146%" y="485" width="0.8104%" height="15" fill="rgb(209,202,51)" fg:x="901" fg:w="10"/><text x="73.2646%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (10 samples, 0.81%)</title><rect x="73.0146%" y="469" width="0.8104%" height="15" fill="rgb(228,81,30)" fg:x="901" fg:w="10"/><text x="73.2646%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.81%)</title><rect x="73.0146%" y="453" width="0.8104%" height="15" fill="rgb(227,42,39)" fg:x="901" fg:w="10"/><text x="73.2646%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.81%)</title><rect x="73.0146%" y="437" width="0.8104%" height="15" fill="rgb(221,26,2)" fg:x="901" fg:w="10"/><text x="73.2646%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="73.5008%" y="421" width="0.3241%" height="15" fill="rgb(254,61,31)" fg:x="907" fg:w="4"/><text x="73.7508%" y="431.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="73.5008%" y="405" width="0.3241%" height="15" fill="rgb(222,173,38)" fg:x="907" fg:w="4"/><text x="73.7508%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="73.5008%" y="389" width="0.3241%" height="15" fill="rgb(218,50,12)" fg:x="907" fg:w="4"/><text x="73.7508%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="73.5008%" y="373" width="0.3241%" height="15" fill="rgb(223,88,40)" fg:x="907" fg:w="4"/><text x="73.7508%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="73.5008%" y="357" width="0.3241%" height="15" fill="rgb(237,54,19)" fg:x="907" fg:w="4"/><text x="73.7508%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="73.5008%" y="341" width="0.3241%" height="15" fill="rgb(251,129,25)" fg:x="907" fg:w="4"/><text x="73.7508%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.7439%" y="325" width="0.0810%" height="15" fill="rgb(238,97,19)" fg:x="910" fg:w="1"/><text x="73.9939%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.7439%" y="309" width="0.0810%" height="15" fill="rgb(240,169,18)" fg:x="910" fg:w="1"/><text x="73.9939%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="73.7439%" y="293" width="0.0810%" height="15" fill="rgb(230,187,49)" fg:x="910" fg:w="1"/><text x="73.9939%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="73.8250%" y="485" width="0.0810%" height="15" fill="rgb(209,44,26)" fg:x="911" fg:w="1"/><text x="74.0750%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.8250%" y="469" width="0.0810%" height="15" fill="rgb(244,0,6)" fg:x="911" fg:w="1"/><text x="74.0750%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8250%" y="453" width="0.0810%" height="15" fill="rgb(248,18,21)" fg:x="911" fg:w="1"/><text x="74.0750%" y="463.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="73.8250%" y="501" width="0.1621%" height="15" fill="rgb(245,180,19)" fg:x="911" fg:w="2"/><text x="74.0750%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="73.9060%" y="485" width="0.0810%" height="15" fill="rgb(252,118,36)" fg:x="912" fg:w="1"/><text x="74.1560%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.9060%" y="469" width="0.0810%" height="15" fill="rgb(210,224,19)" fg:x="912" fg:w="1"/><text x="74.1560%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.9060%" y="453" width="0.0810%" height="15" fill="rgb(218,30,24)" fg:x="912" fg:w="1"/><text x="74.1560%" y="463.50"></text></g><g><title>engine::session::Session::captured (655 samples, 53.08%)</title><rect x="20.9887%" y="677" width="53.0794%" height="15" fill="rgb(219,75,50)" fg:x="259" fg:w="655"/><text x="21.2387%" y="687.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (653 samples, 52.92%)</title><rect x="21.1507%" y="661" width="52.9173%" height="15" fill="rgb(234,72,50)" fg:x="261" fg:w="653"/><text x="21.4007%" y="671.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (651 samples, 52.76%)</title><rect x="21.3128%" y="645" width="52.7553%" height="15" fill="rgb(219,100,48)" fg:x="263" fg:w="651"/><text x="21.5628%" y="655.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (651 samples, 52.76%)</title><rect x="21.3128%" y="629" width="52.7553%" height="15" fill="rgb(253,5,41)" fg:x="263" fg:w="651"/><text x="21.5628%" y="639.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (651 samples, 52.76%)</title><rect x="21.3128%" y="613" width="52.7553%" height="15" fill="rgb(247,181,11)" fg:x="263" fg:w="651"/><text x="21.5628%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (651 samples, 52.76%)</title><rect x="21.3128%" y="597" width="52.7553%" height="15" fill="rgb(222,223,25)" fg:x="263" fg:w="651"/><text x="21.5628%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (651 samples, 52.76%)</title><rect x="21.3128%" y="581" width="52.7553%" height="15" fill="rgb(214,198,28)" fg:x="263" fg:w="651"/><text x="21.5628%" y="591.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::han..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (641 samples, 51.94%)</title><rect x="22.1232%" y="565" width="51.9449%" height="15" fill="rgb(230,46,43)" fg:x="273" fg:w="641"/><text x="22.3732%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (641 samples, 51.94%)</title><rect x="22.1232%" y="549" width="51.9449%" height="15" fill="rgb(233,65,53)" fg:x="273" fg:w="641"/><text x="22.3732%" y="559.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (18 samples, 1.46%)</title><rect x="72.6094%" y="533" width="1.4587%" height="15" fill="rgb(221,121,27)" fg:x="896" fg:w="18"/><text x="72.8594%" y="543.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (16 samples, 1.30%)</title><rect x="72.7715%" y="517" width="1.2966%" height="15" fill="rgb(247,70,47)" fg:x="898" fg:w="16"/><text x="73.0215%" y="527.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="73.9870%" y="501" width="0.0810%" height="15" fill="rgb(228,85,35)" fg:x="913" fg:w="1"/><text x="74.2370%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0681%" y="629" width="0.0810%" height="15" fill="rgb(209,50,18)" fg:x="914" fg:w="1"/><text x="74.3181%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0681%" y="613" width="0.0810%" height="15" fill="rgb(250,19,35)" fg:x="914" fg:w="1"/><text x="74.3181%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0681%" y="597" width="0.0810%" height="15" fill="rgb(253,107,29)" fg:x="914" fg:w="1"/><text x="74.3181%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0681%" y="581" width="0.0810%" height="15" fill="rgb(252,179,29)" fg:x="914" fg:w="1"/><text x="74.3181%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0681%" y="565" width="0.0810%" height="15" fill="rgb(238,194,6)" fg:x="914" fg:w="1"/><text x="74.3181%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0681%" y="549" width="0.0810%" height="15" fill="rgb(238,164,29)" fg:x="914" fg:w="1"/><text x="74.3181%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.0681%" y="533" width="0.0810%" height="15" fill="rgb(224,25,9)" fg:x="914" fg:w="1"/><text x="74.3181%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.0681%" y="517" width="0.0810%" height="15" fill="rgb(244,153,23)" fg:x="914" fg:w="1"/><text x="74.3181%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.0681%" y="501" width="0.0810%" height="15" fill="rgb(212,203,14)" fg:x="914" fg:w="1"/><text x="74.3181%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.0681%" y="485" width="0.0810%" height="15" fill="rgb(220,164,20)" fg:x="914" fg:w="1"/><text x="74.3181%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.0681%" y="469" width="0.0810%" height="15" fill="rgb(222,203,48)" fg:x="914" fg:w="1"/><text x="74.3181%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.0681%" y="453" width="0.0810%" height="15" fill="rgb(215,159,22)" fg:x="914" fg:w="1"/><text x="74.3181%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.0681%" y="437" width="0.0810%" height="15" fill="rgb(216,183,47)" fg:x="914" fg:w="1"/><text x="74.3181%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.0681%" y="421" width="0.0810%" height="15" fill="rgb(229,195,25)" fg:x="914" fg:w="1"/><text x="74.3181%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.0681%" y="405" width="0.0810%" height="15" fill="rgb(224,132,51)" fg:x="914" fg:w="1"/><text x="74.3181%" y="415.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="74.0681%" y="389" width="0.0810%" height="15" fill="rgb(240,63,7)" fg:x="914" fg:w="1"/><text x="74.3181%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="74.0681%" y="373" width="0.0810%" height="15" fill="rgb(249,182,41)" fg:x="914" fg:w="1"/><text x="74.3181%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1491%" y="581" width="0.0810%" height="15" fill="rgb(243,47,26)" fg:x="915" fg:w="1"/><text x="74.3991%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.1491%" y="565" width="0.0810%" height="15" fill="rgb(233,48,2)" fg:x="915" fg:w="1"/><text x="74.3991%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.1491%" y="549" width="0.0810%" height="15" fill="rgb(244,165,34)" fg:x="915" fg:w="1"/><text x="74.3991%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.1491%" y="533" width="0.0810%" height="15" fill="rgb(207,89,7)" fg:x="915" fg:w="1"/><text x="74.3991%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.1491%" y="517" width="0.0810%" height="15" fill="rgb(244,117,36)" fg:x="915" fg:w="1"/><text x="74.3991%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.1491%" y="501" width="0.0810%" height="15" fill="rgb(226,144,34)" fg:x="915" fg:w="1"/><text x="74.3991%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.1491%" y="485" width="0.0810%" height="15" fill="rgb(213,23,19)" fg:x="915" fg:w="1"/><text x="74.3991%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.1491%" y="469" width="0.0810%" height="15" fill="rgb(217,75,12)" fg:x="915" fg:w="1"/><text x="74.3991%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.1491%" y="453" width="0.0810%" height="15" fill="rgb(224,159,17)" fg:x="915" fg:w="1"/><text x="74.3991%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.1491%" y="437" width="0.0810%" height="15" fill="rgb(217,118,1)" fg:x="915" fg:w="1"/><text x="74.3991%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.1491%" y="421" width="0.0810%" height="15" fill="rgb(232,180,48)" fg:x="915" fg:w="1"/><text x="74.3991%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.1491%" y="405" width="0.0810%" height="15" fill="rgb(230,27,33)" fg:x="915" fg:w="1"/><text x="74.3991%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="74.3922%" y="501" width="0.0810%" height="15" fill="rgb(205,31,21)" fg:x="918" fg:w="1"/><text x="74.6422%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="74.4733%" y="389" width="0.0810%" height="15" fill="rgb(253,59,4)" fg:x="919" fg:w="1"/><text x="74.7233%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="74.4733%" y="373" width="0.0810%" height="15" fill="rgb(224,201,9)" fg:x="919" fg:w="1"/><text x="74.7233%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="74.4733%" y="357" width="0.0810%" height="15" fill="rgb(229,206,30)" fg:x="919" fg:w="1"/><text x="74.7233%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="74.4733%" y="341" width="0.0810%" height="15" fill="rgb(212,67,47)" fg:x="919" fg:w="1"/><text x="74.7233%" y="351.50"></text></g><g><title>&lt;serde::de::Unexpected as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="74.4733%" y="325" width="0.0810%" height="15" fill="rgb(211,96,50)" fg:x="919" fg:w="1"/><text x="74.7233%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="74.4733%" y="309" width="0.0810%" height="15" fill="rgb(252,114,18)" fg:x="919" fg:w="1"/><text x="74.7233%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="74.4733%" y="293" width="0.0810%" height="15" fill="rgb(223,58,37)" fg:x="919" fg:w="1"/><text x="74.7233%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.4733%" y="277" width="0.0810%" height="15" fill="rgb(237,70,4)" fg:x="919" fg:w="1"/><text x="74.7233%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.4733%" y="261" width="0.0810%" height="15" fill="rgb(244,85,46)" fg:x="919" fg:w="1"/><text x="74.7233%" y="271.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="74.4733%" y="245" width="0.0810%" height="15" fill="rgb(223,39,52)" fg:x="919" fg:w="1"/><text x="74.7233%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="74.4733%" y="229" width="0.0810%" height="15" fill="rgb(218,200,14)" fg:x="919" fg:w="1"/><text x="74.7233%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="74.4733%" y="213" width="0.0810%" height="15" fill="rgb(208,171,16)" fg:x="919" fg:w="1"/><text x="74.7233%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="74.4733%" y="197" width="0.0810%" height="15" fill="rgb(234,200,18)" fg:x="919" fg:w="1"/><text x="74.7233%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="74.4733%" y="181" width="0.0810%" height="15" fill="rgb(228,45,11)" fg:x="919" fg:w="1"/><text x="74.7233%" y="191.50"></text></g><g><title>engine::session::internal::Added::find_refs (7 samples, 0.57%)</title><rect x="74.0681%" y="661" width="0.5673%" height="15" fill="rgb(237,182,11)" fg:x="914" fg:w="7"/><text x="74.3181%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.57%)</title><rect x="74.0681%" y="645" width="0.5673%" height="15" fill="rgb(241,175,49)" fg:x="914" fg:w="7"/><text x="74.3181%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.49%)</title><rect x="74.1491%" y="629" width="0.4862%" height="15" fill="rgb(247,38,35)" fg:x="915" fg:w="6"/><text x="74.3991%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.49%)</title><rect x="74.1491%" y="613" width="0.4862%" height="15" fill="rgb(228,39,49)" fg:x="915" fg:w="6"/><text x="74.3991%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.49%)</title><rect x="74.1491%" y="597" width="0.4862%" height="15" fill="rgb(226,101,26)" fg:x="915" fg:w="6"/><text x="74.3991%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="74.2301%" y="581" width="0.4052%" height="15" fill="rgb(206,141,19)" fg:x="916" fg:w="5"/><text x="74.4801%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.41%)</title><rect x="74.2301%" y="565" width="0.4052%" height="15" fill="rgb(211,200,13)" fg:x="916" fg:w="5"/><text x="74.4801%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="74.3112%" y="549" width="0.3241%" height="15" fill="rgb(241,121,6)" fg:x="917" fg:w="4"/><text x="74.5612%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="74.3922%" y="533" width="0.2431%" height="15" fill="rgb(234,221,29)" fg:x="918" fg:w="3"/><text x="74.6422%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="74.3922%" y="517" width="0.2431%" height="15" fill="rgb(229,136,5)" fg:x="918" fg:w="3"/><text x="74.6422%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="74.4733%" y="501" width="0.1621%" height="15" fill="rgb(238,36,11)" fg:x="919" fg:w="2"/><text x="74.7233%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="74.4733%" y="485" width="0.1621%" height="15" fill="rgb(251,55,41)" fg:x="919" fg:w="2"/><text x="74.7233%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.4733%" y="469" width="0.1621%" height="15" fill="rgb(242,34,40)" fg:x="919" fg:w="2"/><text x="74.7233%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (2 samples, 0.16%)</title><rect x="74.4733%" y="453" width="0.1621%" height="15" fill="rgb(215,42,17)" fg:x="919" fg:w="2"/><text x="74.7233%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (2 samples, 0.16%)</title><rect x="74.4733%" y="437" width="0.1621%" height="15" fill="rgb(207,44,46)" fg:x="919" fg:w="2"/><text x="74.7233%" y="447.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (2 samples, 0.16%)</title><rect x="74.4733%" y="421" width="0.1621%" height="15" fill="rgb(211,206,28)" fg:x="919" fg:w="2"/><text x="74.7233%" y="431.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (2 samples, 0.16%)</title><rect x="74.4733%" y="405" width="0.1621%" height="15" fill="rgb(237,167,16)" fg:x="919" fg:w="2"/><text x="74.7233%" y="415.50"></text></g><g><title>serde_json::error::make_error (1 samples, 0.08%)</title><rect x="74.5543%" y="389" width="0.0810%" height="15" fill="rgb(233,66,6)" fg:x="920" fg:w="1"/><text x="74.8043%" y="399.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.08%)</title><rect x="74.5543%" y="373" width="0.0810%" height="15" fill="rgb(246,123,29)" fg:x="920" fg:w="1"/><text x="74.8043%" y="383.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (1 samples, 0.08%)</title><rect x="74.5543%" y="357" width="0.0810%" height="15" fill="rgb(209,62,40)" fg:x="920" fg:w="1"/><text x="74.8043%" y="367.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::maximal_suffix (1 samples, 0.08%)</title><rect x="74.5543%" y="341" width="0.0810%" height="15" fill="rgb(218,4,25)" fg:x="920" fg:w="1"/><text x="74.8043%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.6353%" y="645" width="0.1621%" height="15" fill="rgb(253,91,49)" fg:x="921" fg:w="2"/><text x="74.8853%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.7164%" y="629" width="0.0810%" height="15" fill="rgb(228,155,29)" fg:x="922" fg:w="1"/><text x="74.9664%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.7164%" y="613" width="0.0810%" height="15" fill="rgb(243,57,37)" fg:x="922" fg:w="1"/><text x="74.9664%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.7164%" y="597" width="0.0810%" height="15" fill="rgb(244,167,17)" fg:x="922" fg:w="1"/><text x="74.9664%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.7164%" y="581" width="0.0810%" height="15" fill="rgb(207,181,38)" fg:x="922" fg:w="1"/><text x="74.9664%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.7164%" y="565" width="0.0810%" height="15" fill="rgb(211,8,23)" fg:x="922" fg:w="1"/><text x="74.9664%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.7164%" y="549" width="0.0810%" height="15" fill="rgb(235,11,44)" fg:x="922" fg:w="1"/><text x="74.9664%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.7164%" y="533" width="0.0810%" height="15" fill="rgb(248,18,52)" fg:x="922" fg:w="1"/><text x="74.9664%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.7164%" y="517" width="0.0810%" height="15" fill="rgb(208,4,7)" fg:x="922" fg:w="1"/><text x="74.9664%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.7164%" y="501" width="0.0810%" height="15" fill="rgb(240,17,39)" fg:x="922" fg:w="1"/><text x="74.9664%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.7164%" y="485" width="0.0810%" height="15" fill="rgb(207,170,3)" fg:x="922" fg:w="1"/><text x="74.9664%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.7164%" y="469" width="0.0810%" height="15" fill="rgb(236,100,52)" fg:x="922" fg:w="1"/><text x="74.9664%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.7164%" y="453" width="0.0810%" height="15" fill="rgb(246,78,51)" fg:x="922" fg:w="1"/><text x="74.9664%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="74.7974%" y="645" width="0.0810%" height="15" fill="rgb(211,17,15)" fg:x="923" fg:w="1"/><text x="75.0474%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.7974%" y="629" width="0.0810%" height="15" fill="rgb(209,59,46)" fg:x="923" fg:w="1"/><text x="75.0474%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.7974%" y="613" width="0.0810%" height="15" fill="rgb(210,92,25)" fg:x="923" fg:w="1"/><text x="75.0474%" y="623.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="74.8784%" y="645" width="0.0810%" height="15" fill="rgb(238,174,52)" fg:x="924" fg:w="1"/><text x="75.1284%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.8784%" y="629" width="0.0810%" height="15" fill="rgb(230,73,7)" fg:x="924" fg:w="1"/><text x="75.1284%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.8784%" y="613" width="0.0810%" height="15" fill="rgb(243,124,40)" fg:x="924" fg:w="1"/><text x="75.1284%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.0405%" y="565" width="0.0810%" height="15" fill="rgb(244,170,11)" fg:x="926" fg:w="1"/><text x="75.2905%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="75.0405%" y="549" width="0.0810%" height="15" fill="rgb(207,114,54)" fg:x="926" fg:w="1"/><text x="75.2905%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.1216%" y="549" width="0.0810%" height="15" fill="rgb(205,42,20)" fg:x="927" fg:w="1"/><text x="75.3716%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.1216%" y="533" width="0.0810%" height="15" fill="rgb(230,30,28)" fg:x="927" fg:w="1"/><text x="75.3716%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.1216%" y="517" width="0.0810%" height="15" fill="rgb(205,73,54)" fg:x="927" fg:w="1"/><text x="75.3716%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.1216%" y="501" width="0.0810%" height="15" fill="rgb(254,227,23)" fg:x="927" fg:w="1"/><text x="75.3716%" y="511.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="75.1216%" y="485" width="0.0810%" height="15" fill="rgb(228,202,34)" fg:x="927" fg:w="1"/><text x="75.3716%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.1216%" y="469" width="0.0810%" height="15" fill="rgb(222,225,37)" fg:x="927" fg:w="1"/><text x="75.3716%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.1216%" y="453" width="0.0810%" height="15" fill="rgb(221,14,54)" fg:x="927" fg:w="1"/><text x="75.3716%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="74.9595%" y="645" width="0.3241%" height="15" fill="rgb(254,102,2)" fg:x="925" fg:w="4"/><text x="75.2095%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="74.9595%" y="629" width="0.3241%" height="15" fill="rgb(232,104,17)" fg:x="925" fg:w="4"/><text x="75.2095%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="75.0405%" y="613" width="0.2431%" height="15" fill="rgb(250,220,14)" fg:x="926" fg:w="3"/><text x="75.2905%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="75.0405%" y="597" width="0.2431%" height="15" fill="rgb(241,158,9)" fg:x="926" fg:w="3"/><text x="75.2905%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="75.0405%" y="581" width="0.2431%" height="15" fill="rgb(246,9,43)" fg:x="926" fg:w="3"/><text x="75.2905%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="75.1216%" y="565" width="0.1621%" height="15" fill="rgb(206,73,33)" fg:x="927" fg:w="2"/><text x="75.3716%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.2026%" y="549" width="0.0810%" height="15" fill="rgb(222,79,8)" fg:x="928" fg:w="1"/><text x="75.4526%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.2026%" y="533" width="0.0810%" height="15" fill="rgb(234,8,54)" fg:x="928" fg:w="1"/><text x="75.4526%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.2026%" y="517" width="0.0810%" height="15" fill="rgb(209,134,38)" fg:x="928" fg:w="1"/><text x="75.4526%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.2026%" y="501" width="0.0810%" height="15" fill="rgb(230,127,29)" fg:x="928" fg:w="1"/><text x="75.4526%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.2026%" y="485" width="0.0810%" height="15" fill="rgb(242,44,41)" fg:x="928" fg:w="1"/><text x="75.4526%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="75.2836%" y="469" width="0.0810%" height="15" fill="rgb(222,56,43)" fg:x="929" fg:w="1"/><text x="75.5336%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.2836%" y="549" width="0.1621%" height="15" fill="rgb(238,39,47)" fg:x="929" fg:w="2"/><text x="75.5336%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.2836%" y="533" width="0.1621%" height="15" fill="rgb(226,79,43)" fg:x="929" fg:w="2"/><text x="75.5336%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.2836%" y="517" width="0.1621%" height="15" fill="rgb(242,105,53)" fg:x="929" fg:w="2"/><text x="75.5336%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.2836%" y="501" width="0.1621%" height="15" fill="rgb(251,132,46)" fg:x="929" fg:w="2"/><text x="75.5336%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="75.2836%" y="485" width="0.1621%" height="15" fill="rgb(231,77,14)" fg:x="929" fg:w="2"/><text x="75.5336%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.3647%" y="469" width="0.0810%" height="15" fill="rgb(240,135,9)" fg:x="930" fg:w="1"/><text x="75.6147%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.2836%" y="565" width="0.2431%" height="15" fill="rgb(248,109,14)" fg:x="929" fg:w="3"/><text x="75.5336%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.4457%" y="549" width="0.0810%" height="15" fill="rgb(227,146,52)" fg:x="931" fg:w="1"/><text x="75.6957%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="75.4457%" y="533" width="0.0810%" height="15" fill="rgb(232,54,3)" fg:x="931" fg:w="1"/><text x="75.6957%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (19 samples, 1.54%)</title><rect x="74.0681%" y="677" width="1.5397%" height="15" fill="rgb(229,201,43)" fg:x="914" fg:w="19"/><text x="74.3181%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.97%)</title><rect x="74.6353%" y="661" width="0.9724%" height="15" fill="rgb(252,161,33)" fg:x="921" fg:w="12"/><text x="74.8853%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="75.2836%" y="645" width="0.3241%" height="15" fill="rgb(226,146,40)" fg:x="929" fg:w="4"/><text x="75.5336%" y="655.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="75.2836%" y="629" width="0.3241%" height="15" fill="rgb(219,47,25)" fg:x="929" fg:w="4"/><text x="75.5336%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="75.2836%" y="613" width="0.3241%" height="15" fill="rgb(250,135,13)" fg:x="929" fg:w="4"/><text x="75.5336%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="75.2836%" y="597" width="0.3241%" height="15" fill="rgb(219,229,18)" fg:x="929" fg:w="4"/><text x="75.5336%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="75.2836%" y="581" width="0.3241%" height="15" fill="rgb(217,152,27)" fg:x="929" fg:w="4"/><text x="75.5336%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.5267%" y="565" width="0.0810%" height="15" fill="rgb(225,71,47)" fg:x="932" fg:w="1"/><text x="75.7767%" y="575.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="75.6078%" y="661" width="0.0810%" height="15" fill="rgb(220,139,14)" fg:x="933" fg:w="1"/><text x="75.8578%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.6078%" y="645" width="0.0810%" height="15" fill="rgb(247,54,32)" fg:x="933" fg:w="1"/><text x="75.8578%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6078%" y="629" width="0.0810%" height="15" fill="rgb(252,131,39)" fg:x="933" fg:w="1"/><text x="75.8578%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.6078%" y="613" width="0.0810%" height="15" fill="rgb(210,108,39)" fg:x="933" fg:w="1"/><text x="75.8578%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6078%" y="597" width="0.0810%" height="15" fill="rgb(205,23,29)" fg:x="933" fg:w="1"/><text x="75.8578%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.6078%" y="581" width="0.0810%" height="15" fill="rgb(246,139,46)" fg:x="933" fg:w="1"/><text x="75.8578%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="75.6078%" y="565" width="0.0810%" height="15" fill="rgb(250,81,26)" fg:x="933" fg:w="1"/><text x="75.8578%" y="575.50"></text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="75.6078%" y="677" width="0.1621%" height="15" fill="rgb(214,104,7)" fg:x="933" fg:w="2"/><text x="75.8578%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="75.6888%" y="661" width="0.0810%" height="15" fill="rgb(233,189,8)" fg:x="934" fg:w="1"/><text x="75.9388%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.7699%" y="629" width="0.0810%" height="15" fill="rgb(228,141,17)" fg:x="935" fg:w="1"/><text x="76.0199%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.7699%" y="613" width="0.0810%" height="15" fill="rgb(247,157,1)" fg:x="935" fg:w="1"/><text x="76.0199%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.7699%" y="597" width="0.0810%" height="15" fill="rgb(249,225,5)" fg:x="935" fg:w="1"/><text x="76.0199%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.7699%" y="581" width="0.0810%" height="15" fill="rgb(242,55,13)" fg:x="935" fg:w="1"/><text x="76.0199%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.7699%" y="565" width="0.0810%" height="15" fill="rgb(230,49,50)" fg:x="935" fg:w="1"/><text x="76.0199%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.7699%" y="549" width="0.0810%" height="15" fill="rgb(241,111,38)" fg:x="935" fg:w="1"/><text x="76.0199%" y="559.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="75.8509%" y="629" width="0.0810%" height="15" fill="rgb(252,155,4)" fg:x="936" fg:w="1"/><text x="76.1009%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.8509%" y="613" width="0.0810%" height="15" fill="rgb(212,69,32)" fg:x="936" fg:w="1"/><text x="76.1009%" y="623.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.9319%" y="533" width="0.0810%" height="15" fill="rgb(243,107,47)" fg:x="937" fg:w="1"/><text x="76.1819%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.9319%" y="517" width="0.0810%" height="15" fill="rgb(247,130,12)" fg:x="937" fg:w="1"/><text x="76.1819%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="75.9319%" y="629" width="0.1621%" height="15" fill="rgb(233,74,16)" fg:x="937" fg:w="2"/><text x="76.1819%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.9319%" y="613" width="0.1621%" height="15" fill="rgb(208,58,18)" fg:x="937" fg:w="2"/><text x="76.1819%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.9319%" y="597" width="0.1621%" height="15" fill="rgb(242,225,1)" fg:x="937" fg:w="2"/><text x="76.1819%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="75.9319%" y="581" width="0.1621%" height="15" fill="rgb(249,39,40)" fg:x="937" fg:w="2"/><text x="76.1819%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.9319%" y="565" width="0.1621%" height="15" fill="rgb(207,72,44)" fg:x="937" fg:w="2"/><text x="76.1819%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="75.9319%" y="549" width="0.1621%" height="15" fill="rgb(215,193,12)" fg:x="937" fg:w="2"/><text x="76.1819%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0130%" y="533" width="0.0810%" height="15" fill="rgb(248,41,39)" fg:x="938" fg:w="1"/><text x="76.2630%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.0130%" y="517" width="0.0810%" height="15" fill="rgb(253,85,4)" fg:x="938" fg:w="1"/><text x="76.2630%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="76.0130%" y="501" width="0.0810%" height="15" fill="rgb(243,70,31)" fg:x="938" fg:w="1"/><text x="76.2630%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0130%" y="485" width="0.0810%" height="15" fill="rgb(253,195,26)" fg:x="938" fg:w="1"/><text x="76.2630%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.0130%" y="469" width="0.0810%" height="15" fill="rgb(243,42,11)" fg:x="938" fg:w="1"/><text x="76.2630%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (940 samples, 76.18%)</title><rect x="0.0000%" y="757" width="76.1750%" height="15" fill="rgb(239,66,17)" fg:x="0" fg:w="940"/><text x="0.2500%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (940 samples, 76.18%)</title><rect x="0.0000%" y="741" width="76.1750%" height="15" fill="rgb(217,132,21)" fg:x="0" fg:w="940"/><text x="0.2500%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (940 samples, 76.18%)</title><rect x="0.0000%" y="725" width="76.1750%" height="15" fill="rgb(252,202,21)" fg:x="0" fg:w="940"/><text x="0.2500%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (683 samples, 55.35%)</title><rect x="20.8266%" y="709" width="55.3485%" height="15" fill="rgb(233,98,36)" fg:x="257" fg:w="683"/><text x="21.0766%" y="719.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (683 samples, 55.35%)</title><rect x="20.8266%" y="693" width="55.3485%" height="15" fill="rgb(216,153,54)" fg:x="257" fg:w="683"/><text x="21.0766%" y="703.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (5 samples, 0.41%)</title><rect x="75.7699%" y="677" width="0.4052%" height="15" fill="rgb(250,99,7)" fg:x="935" fg:w="5"/><text x="76.0199%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.41%)</title><rect x="75.7699%" y="661" width="0.4052%" height="15" fill="rgb(207,56,50)" fg:x="935" fg:w="5"/><text x="76.0199%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.41%)</title><rect x="75.7699%" y="645" width="0.4052%" height="15" fill="rgb(244,61,34)" fg:x="935" fg:w="5"/><text x="76.0199%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="76.0940%" y="629" width="0.0810%" height="15" fill="rgb(241,50,38)" fg:x="939" fg:w="1"/><text x="76.3440%" y="639.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="76.0940%" y="613" width="0.0810%" height="15" fill="rgb(212,166,30)" fg:x="939" fg:w="1"/><text x="76.3440%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.0940%" y="597" width="0.0810%" height="15" fill="rgb(249,127,32)" fg:x="939" fg:w="1"/><text x="76.3440%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.0940%" y="581" width="0.0810%" height="15" fill="rgb(209,103,0)" fg:x="939" fg:w="1"/><text x="76.3440%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.0940%" y="565" width="0.0810%" height="15" fill="rgb(238,209,51)" fg:x="939" fg:w="1"/><text x="76.3440%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.1750%" y="709" width="0.0810%" height="15" fill="rgb(237,56,23)" fg:x="940" fg:w="1"/><text x="76.4250%" y="719.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.1750%" y="693" width="0.0810%" height="15" fill="rgb(215,153,46)" fg:x="940" fg:w="1"/><text x="76.4250%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.1750%" y="677" width="0.0810%" height="15" fill="rgb(224,49,31)" fg:x="940" fg:w="1"/><text x="76.4250%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.2561%" y="629" width="0.0810%" height="15" fill="rgb(250,18,42)" fg:x="941" fg:w="1"/><text x="76.5061%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="76.2561%" y="693" width="0.1621%" height="15" fill="rgb(215,176,39)" fg:x="941" fg:w="2"/><text x="76.5061%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="76.2561%" y="677" width="0.1621%" height="15" fill="rgb(223,77,29)" fg:x="941" fg:w="2"/><text x="76.5061%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="76.2561%" y="661" width="0.1621%" height="15" fill="rgb(234,94,52)" fg:x="941" fg:w="2"/><text x="76.5061%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.16%)</title><rect x="76.2561%" y="645" width="0.1621%" height="15" fill="rgb(220,154,50)" fg:x="941" fg:w="2"/><text x="76.5061%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="76.3371%" y="629" width="0.0810%" height="15" fill="rgb(212,11,10)" fg:x="942" fg:w="1"/><text x="76.5871%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.3371%" y="613" width="0.0810%" height="15" fill="rgb(205,166,19)" fg:x="942" fg:w="1"/><text x="76.5871%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.4182%" y="597" width="0.0810%" height="15" fill="rgb(244,198,16)" fg:x="943" fg:w="1"/><text x="76.6682%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="76.4182%" y="629" width="0.1621%" height="15" fill="rgb(219,69,12)" fg:x="943" fg:w="2"/><text x="76.6682%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.4182%" y="613" width="0.1621%" height="15" fill="rgb(245,30,7)" fg:x="943" fg:w="2"/><text x="76.6682%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.4992%" y="597" width="0.0810%" height="15" fill="rgb(218,221,48)" fg:x="944" fg:w="1"/><text x="76.7492%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.4992%" y="581" width="0.0810%" height="15" fill="rgb(216,66,15)" fg:x="944" fg:w="1"/><text x="76.7492%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.4992%" y="565" width="0.0810%" height="15" fill="rgb(226,122,50)" fg:x="944" fg:w="1"/><text x="76.7492%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.5802%" y="597" width="0.0810%" height="15" fill="rgb(239,156,16)" fg:x="945" fg:w="1"/><text x="76.8302%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="76.2561%" y="709" width="0.4862%" height="15" fill="rgb(224,27,38)" fg:x="941" fg:w="6"/><text x="76.5061%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (4 samples, 0.32%)</title><rect x="76.4182%" y="693" width="0.3241%" height="15" fill="rgb(224,39,27)" fg:x="943" fg:w="4"/><text x="76.6682%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="76.4182%" y="677" width="0.3241%" height="15" fill="rgb(215,92,29)" fg:x="943" fg:w="4"/><text x="76.6682%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (4 samples, 0.32%)</title><rect x="76.4182%" y="661" width="0.3241%" height="15" fill="rgb(207,159,16)" fg:x="943" fg:w="4"/><text x="76.6682%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="76.4182%" y="645" width="0.3241%" height="15" fill="rgb(238,163,47)" fg:x="943" fg:w="4"/><text x="76.6682%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="76.5802%" y="629" width="0.1621%" height="15" fill="rgb(219,91,49)" fg:x="945" fg:w="2"/><text x="76.8302%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="76.5802%" y="613" width="0.1621%" height="15" fill="rgb(227,167,31)" fg:x="945" fg:w="2"/><text x="76.8302%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.6613%" y="597" width="0.0810%" height="15" fill="rgb(234,80,54)" fg:x="946" fg:w="1"/><text x="76.9113%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.6613%" y="581" width="0.0810%" height="15" fill="rgb(212,114,2)" fg:x="946" fg:w="1"/><text x="76.9113%" y="591.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="76.7423%" y="613" width="0.0810%" height="15" fill="rgb(234,50,24)" fg:x="947" fg:w="1"/><text x="76.9923%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="76.7423%" y="597" width="0.0810%" height="15" fill="rgb(221,68,8)" fg:x="947" fg:w="1"/><text x="76.9923%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="76.7423%" y="581" width="0.0810%" height="15" fill="rgb(254,180,31)" fg:x="947" fg:w="1"/><text x="76.9923%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.7423%" y="565" width="0.0810%" height="15" fill="rgb(247,130,50)" fg:x="947" fg:w="1"/><text x="76.9923%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.7423%" y="549" width="0.0810%" height="15" fill="rgb(211,109,4)" fg:x="947" fg:w="1"/><text x="76.9923%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.7423%" y="533" width="0.0810%" height="15" fill="rgb(238,50,21)" fg:x="947" fg:w="1"/><text x="76.9923%" y="543.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="76.8233%" y="613" width="0.0810%" height="15" fill="rgb(225,57,45)" fg:x="948" fg:w="1"/><text x="77.0733%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="76.8233%" y="597" width="0.0810%" height="15" fill="rgb(209,196,50)" fg:x="948" fg:w="1"/><text x="77.0733%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.8233%" y="581" width="0.0810%" height="15" fill="rgb(242,140,13)" fg:x="948" fg:w="1"/><text x="77.0733%" y="591.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="76.9044%" y="613" width="0.0810%" height="15" fill="rgb(217,111,7)" fg:x="949" fg:w="1"/><text x="77.1544%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="76.9044%" y="597" width="0.0810%" height="15" fill="rgb(253,193,51)" fg:x="949" fg:w="1"/><text x="77.1544%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="76.9044%" y="581" width="0.0810%" height="15" fill="rgb(252,70,29)" fg:x="949" fg:w="1"/><text x="77.1544%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.9044%" y="565" width="0.0810%" height="15" fill="rgb(232,127,12)" fg:x="949" fg:w="1"/><text x="77.1544%" y="575.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="76.9854%" y="581" width="0.1621%" height="15" fill="rgb(211,180,21)" fg:x="950" fg:w="2"/><text x="77.2354%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="76.9854%" y="565" width="0.1621%" height="15" fill="rgb(229,72,13)" fg:x="950" fg:w="2"/><text x="77.2354%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (6 samples, 0.49%)</title><rect x="76.7423%" y="629" width="0.4862%" height="15" fill="rgb(240,211,49)" fg:x="947" fg:w="6"/><text x="76.9923%" y="639.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="76.9854%" y="613" width="0.2431%" height="15" fill="rgb(219,149,40)" fg:x="950" fg:w="3"/><text x="77.2354%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="76.9854%" y="597" width="0.2431%" height="15" fill="rgb(210,127,46)" fg:x="950" fg:w="3"/><text x="77.2354%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::actions::DeactivateRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="77.1475%" y="581" width="0.0810%" height="15" fill="rgb(220,106,7)" fg:x="952" fg:w="1"/><text x="77.3975%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="77.1475%" y="565" width="0.0810%" height="15" fill="rgb(249,31,22)" fg:x="952" fg:w="1"/><text x="77.3975%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.2285%" y="565" width="0.0810%" height="15" fill="rgb(253,1,49)" fg:x="953" fg:w="1"/><text x="77.4785%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.2285%" y="549" width="0.0810%" height="15" fill="rgb(227,144,33)" fg:x="953" fg:w="1"/><text x="77.4785%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="77.2285%" y="533" width="0.0810%" height="15" fill="rgb(249,163,44)" fg:x="953" fg:w="1"/><text x="77.4785%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="77.2285%" y="517" width="0.0810%" height="15" fill="rgb(234,15,39)" fg:x="953" fg:w="1"/><text x="77.4785%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="77.2285%" y="501" width="0.0810%" height="15" fill="rgb(207,66,16)" fg:x="953" fg:w="1"/><text x="77.4785%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="77.2285%" y="485" width="0.0810%" height="15" fill="rgb(233,112,24)" fg:x="953" fg:w="1"/><text x="77.4785%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="77.2285%" y="469" width="0.0810%" height="15" fill="rgb(230,90,22)" fg:x="953" fg:w="1"/><text x="77.4785%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.08%)</title><rect x="77.3096%" y="389" width="0.0810%" height="15" fill="rgb(229,61,13)" fg:x="954" fg:w="1"/><text x="77.5596%" y="399.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="77.2285%" y="613" width="0.2431%" height="15" fill="rgb(225,57,24)" fg:x="953" fg:w="3"/><text x="77.4785%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="77.2285%" y="597" width="0.2431%" height="15" fill="rgb(208,169,48)" fg:x="953" fg:w="3"/><text x="77.4785%" y="607.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="77.2285%" y="581" width="0.2431%" height="15" fill="rgb(244,218,51)" fg:x="953" fg:w="3"/><text x="77.4785%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="77.3096%" y="565" width="0.1621%" height="15" fill="rgb(214,148,10)" fg:x="954" fg:w="2"/><text x="77.5596%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="77.3096%" y="549" width="0.1621%" height="15" fill="rgb(225,174,27)" fg:x="954" fg:w="2"/><text x="77.5596%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="77.3096%" y="533" width="0.1621%" height="15" fill="rgb(230,96,26)" fg:x="954" fg:w="2"/><text x="77.5596%" y="543.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="77.3096%" y="517" width="0.1621%" height="15" fill="rgb(232,10,30)" fg:x="954" fg:w="2"/><text x="77.5596%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="77.3096%" y="501" width="0.1621%" height="15" fill="rgb(222,8,50)" fg:x="954" fg:w="2"/><text x="77.5596%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="77.3096%" y="485" width="0.1621%" height="15" fill="rgb(213,81,27)" fg:x="954" fg:w="2"/><text x="77.5596%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="77.3096%" y="469" width="0.1621%" height="15" fill="rgb(245,50,10)" fg:x="954" fg:w="2"/><text x="77.5596%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="77.3096%" y="453" width="0.1621%" height="15" fill="rgb(216,100,18)" fg:x="954" fg:w="2"/><text x="77.5596%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="77.3096%" y="437" width="0.1621%" height="15" fill="rgb(236,147,54)" fg:x="954" fg:w="2"/><text x="77.5596%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="77.3096%" y="421" width="0.1621%" height="15" fill="rgb(205,143,26)" fg:x="954" fg:w="2"/><text x="77.5596%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.16%)</title><rect x="77.3096%" y="405" width="0.1621%" height="15" fill="rgb(236,26,9)" fg:x="954" fg:w="2"/><text x="77.5596%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.3906%" y="389" width="0.0810%" height="15" fill="rgb(221,165,53)" fg:x="955" fg:w="1"/><text x="77.6406%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.3906%" y="373" width="0.0810%" height="15" fill="rgb(214,110,17)" fg:x="955" fg:w="1"/><text x="77.6406%" y="383.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="77.2285%" y="629" width="0.3241%" height="15" fill="rgb(237,197,12)" fg:x="953" fg:w="4"/><text x="77.4785%" y="639.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="77.4716%" y="613" width="0.0810%" height="15" fill="rgb(205,84,17)" fg:x="956" fg:w="1"/><text x="77.7216%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="77.4716%" y="597" width="0.0810%" height="15" fill="rgb(237,18,45)" fg:x="956" fg:w="1"/><text x="77.7216%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="77.4716%" y="581" width="0.0810%" height="15" fill="rgb(221,87,14)" fg:x="956" fg:w="1"/><text x="77.7216%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="77.4716%" y="565" width="0.0810%" height="15" fill="rgb(238,186,15)" fg:x="956" fg:w="1"/><text x="77.7216%" y="575.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (1 samples, 0.08%)</title><rect x="77.5527%" y="613" width="0.0810%" height="15" fill="rgb(208,115,11)" fg:x="957" fg:w="1"/><text x="77.8027%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.5527%" y="597" width="0.0810%" height="15" fill="rgb(254,175,0)" fg:x="957" fg:w="1"/><text x="77.8027%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.5527%" y="581" width="0.0810%" height="15" fill="rgb(227,24,42)" fg:x="957" fg:w="1"/><text x="77.8027%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.5527%" y="565" width="0.0810%" height="15" fill="rgb(223,211,37)" fg:x="957" fg:w="1"/><text x="77.8027%" y="575.50"></text></g><g><title>glob::is_dir (1 samples, 0.08%)</title><rect x="77.6337%" y="565" width="0.0810%" height="15" fill="rgb(235,49,27)" fg:x="958" fg:w="1"/><text x="77.8837%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="77.6337%" y="549" width="0.0810%" height="15" fill="rgb(254,97,51)" fg:x="958" fg:w="1"/><text x="77.8837%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="77.6337%" y="533" width="0.0810%" height="15" fill="rgb(249,51,40)" fg:x="958" fg:w="1"/><text x="77.8837%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="77.6337%" y="517" width="0.0810%" height="15" fill="rgb(210,128,45)" fg:x="958" fg:w="1"/><text x="77.8837%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="77.6337%" y="501" width="0.0810%" height="15" fill="rgb(224,137,50)" fg:x="958" fg:w="1"/><text x="77.8837%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="77.6337%" y="485" width="0.0810%" height="15" fill="rgb(242,15,9)" fg:x="958" fg:w="1"/><text x="77.8837%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="77.6337%" y="469" width="0.0810%" height="15" fill="rgb(233,187,41)" fg:x="958" fg:w="1"/><text x="77.8837%" y="479.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="77.6337%" y="453" width="0.0810%" height="15" fill="rgb(227,2,29)" fg:x="958" fg:w="1"/><text x="77.8837%" y="463.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="77.6337%" y="597" width="0.2431%" height="15" fill="rgb(222,70,3)" fg:x="958" fg:w="3"/><text x="77.8837%" y="607.50"></text></g><g><title>glob::fill_todo (3 samples, 0.24%)</title><rect x="77.6337%" y="581" width="0.2431%" height="15" fill="rgb(213,11,42)" fg:x="958" fg:w="3"/><text x="77.8837%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="77.7147%" y="565" width="0.1621%" height="15" fill="rgb(225,150,9)" fg:x="959" fg:w="2"/><text x="77.9647%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="77.7147%" y="549" width="0.1621%" height="15" fill="rgb(230,162,45)" fg:x="959" fg:w="2"/><text x="77.9647%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="77.7147%" y="533" width="0.1621%" height="15" fill="rgb(222,14,52)" fg:x="959" fg:w="2"/><text x="77.9647%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="77.7147%" y="517" width="0.1621%" height="15" fill="rgb(254,198,14)" fg:x="959" fg:w="2"/><text x="77.9647%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="77.7147%" y="501" width="0.1621%" height="15" fill="rgb(220,217,30)" fg:x="959" fg:w="2"/><text x="77.9647%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="77.7147%" y="485" width="0.1621%" height="15" fill="rgb(215,146,41)" fg:x="959" fg:w="2"/><text x="77.9647%" y="495.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="77.7147%" y="469" width="0.1621%" height="15" fill="rgb(217,27,36)" fg:x="959" fg:w="2"/><text x="77.9647%" y="479.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.8768%" y="565" width="0.0810%" height="15" fill="rgb(219,218,39)" fg:x="961" fg:w="1"/><text x="78.1268%" y="575.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.49%)</title><rect x="77.5527%" y="629" width="0.4862%" height="15" fill="rgb(219,4,42)" fg:x="957" fg:w="6"/><text x="77.8027%" y="639.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (5 samples, 0.41%)</title><rect x="77.6337%" y="613" width="0.4052%" height="15" fill="rgb(249,119,36)" fg:x="958" fg:w="5"/><text x="77.8837%" y="623.50"></text></g><g><title>glob::glob (2 samples, 0.16%)</title><rect x="77.8768%" y="597" width="0.1621%" height="15" fill="rgb(209,23,33)" fg:x="961" fg:w="2"/><text x="78.1268%" y="607.50"></text></g><g><title>glob::glob_with (2 samples, 0.16%)</title><rect x="77.8768%" y="581" width="0.1621%" height="15" fill="rgb(211,10,0)" fg:x="961" fg:w="2"/><text x="78.1268%" y="591.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="77.9579%" y="565" width="0.0810%" height="15" fill="rgb(208,99,37)" fg:x="962" fg:w="1"/><text x="78.2079%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.9579%" y="549" width="0.0810%" height="15" fill="rgb(213,132,31)" fg:x="962" fg:w="1"/><text x="78.2079%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.9579%" y="533" width="0.0810%" height="15" fill="rgb(243,129,40)" fg:x="962" fg:w="1"/><text x="78.2079%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.9579%" y="517" width="0.0810%" height="15" fill="rgb(210,66,33)" fg:x="962" fg:w="1"/><text x="78.2079%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.0389%" y="613" width="0.0810%" height="15" fill="rgb(209,189,4)" fg:x="963" fg:w="1"/><text x="78.2889%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (3 samples, 0.24%)</title><rect x="78.0389%" y="629" width="0.2431%" height="15" fill="rgb(214,107,37)" fg:x="963" fg:w="3"/><text x="78.2889%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="78.1199%" y="613" width="0.1621%" height="15" fill="rgb(245,88,54)" fg:x="964" fg:w="2"/><text x="78.3699%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="78.1199%" y="597" width="0.1621%" height="15" fill="rgb(205,146,20)" fg:x="964" fg:w="2"/><text x="78.3699%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (20 samples, 1.62%)</title><rect x="76.7423%" y="645" width="1.6207%" height="15" fill="rgb(220,161,25)" fg:x="947" fg:w="20"/><text x="76.9923%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="78.2820%" y="629" width="0.0810%" height="15" fill="rgb(215,152,15)" fg:x="966" fg:w="1"/><text x="78.5320%" y="639.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="78.2820%" y="613" width="0.0810%" height="15" fill="rgb(233,192,44)" fg:x="966" fg:w="1"/><text x="78.5320%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (21 samples, 1.70%)</title><rect x="76.7423%" y="709" width="1.7018%" height="15" fill="rgb(240,170,46)" fg:x="947" fg:w="21"/><text x="76.9923%" y="719.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (21 samples, 1.70%)</title><rect x="76.7423%" y="693" width="1.7018%" height="15" fill="rgb(207,104,33)" fg:x="947" fg:w="21"/><text x="76.9923%" y="703.50"></text></g><g><title>engine::session::Session::new (21 samples, 1.70%)</title><rect x="76.7423%" y="677" width="1.7018%" height="15" fill="rgb(219,21,39)" fg:x="947" fg:w="21"/><text x="76.9923%" y="687.50"></text></g><g><title>engine::session::Session::initialize (21 samples, 1.70%)</title><rect x="76.7423%" y="661" width="1.7018%" height="15" fill="rgb(214,133,29)" fg:x="947" fg:w="21"/><text x="76.9923%" y="671.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="78.3630%" y="645" width="0.0810%" height="15" fill="rgb(226,93,6)" fg:x="967" fg:w="1"/><text x="78.6130%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.3630%" y="629" width="0.0810%" height="15" fill="rgb(252,222,34)" fg:x="967" fg:w="1"/><text x="78.6130%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.3630%" y="613" width="0.0810%" height="15" fill="rgb(252,92,48)" fg:x="967" fg:w="1"/><text x="78.6130%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.3630%" y="597" width="0.0810%" height="15" fill="rgb(245,223,24)" fg:x="967" fg:w="1"/><text x="78.6130%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.3630%" y="581" width="0.0810%" height="15" fill="rgb(205,176,3)" fg:x="967" fg:w="1"/><text x="78.6130%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="78.4441%" y="677" width="0.1621%" height="15" fill="rgb(235,151,15)" fg:x="968" fg:w="2"/><text x="78.6941%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.5251%" y="661" width="0.0810%" height="15" fill="rgb(237,209,11)" fg:x="969" fg:w="1"/><text x="78.7751%" y="671.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="78.6062%" y="581" width="0.0810%" height="15" fill="rgb(243,227,24)" fg:x="970" fg:w="1"/><text x="78.8562%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.6062%" y="565" width="0.0810%" height="15" fill="rgb(239,193,16)" fg:x="970" fg:w="1"/><text x="78.8562%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.6062%" y="549" width="0.0810%" height="15" fill="rgb(231,27,9)" fg:x="970" fg:w="1"/><text x="78.8562%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.6062%" y="533" width="0.0810%" height="15" fill="rgb(219,169,10)" fg:x="970" fg:w="1"/><text x="78.8562%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="78.6062%" y="517" width="0.0810%" height="15" fill="rgb(244,229,43)" fg:x="970" fg:w="1"/><text x="78.8562%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="78.6872%" y="565" width="0.2431%" height="15" fill="rgb(254,38,20)" fg:x="971" fg:w="3"/><text x="78.9372%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="78.7682%" y="549" width="0.1621%" height="15" fill="rgb(250,47,30)" fg:x="972" fg:w="2"/><text x="79.0182%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.0924%" y="549" width="0.0810%" height="15" fill="rgb(224,124,36)" fg:x="976" fg:w="1"/><text x="79.3424%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.0924%" y="533" width="0.0810%" height="15" fill="rgb(246,68,51)" fg:x="976" fg:w="1"/><text x="79.3424%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.0924%" y="517" width="0.0810%" height="15" fill="rgb(253,43,49)" fg:x="976" fg:w="1"/><text x="79.3424%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.0924%" y="501" width="0.0810%" height="15" fill="rgb(219,54,36)" fg:x="976" fg:w="1"/><text x="79.3424%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.1734%" y="533" width="0.0810%" height="15" fill="rgb(227,133,34)" fg:x="977" fg:w="1"/><text x="79.4234%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.1734%" y="517" width="0.0810%" height="15" fill="rgb(247,227,15)" fg:x="977" fg:w="1"/><text x="79.4234%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.1734%" y="501" width="0.0810%" height="15" fill="rgb(229,96,14)" fg:x="977" fg:w="1"/><text x="79.4234%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="79.2545%" y="517" width="0.0810%" height="15" fill="rgb(220,79,17)" fg:x="978" fg:w="1"/><text x="79.5045%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="78.9303%" y="565" width="0.4862%" height="15" fill="rgb(205,131,53)" fg:x="974" fg:w="6"/><text x="79.1803%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="79.1734%" y="549" width="0.2431%" height="15" fill="rgb(209,50,29)" fg:x="977" fg:w="3"/><text x="79.4234%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="79.2545%" y="533" width="0.1621%" height="15" fill="rgb(245,86,46)" fg:x="978" fg:w="2"/><text x="79.5045%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.3355%" y="517" width="0.0810%" height="15" fill="rgb(235,66,46)" fg:x="979" fg:w="1"/><text x="79.5855%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.3355%" y="501" width="0.0810%" height="15" fill="rgb(232,148,31)" fg:x="979" fg:w="1"/><text x="79.5855%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.3355%" y="485" width="0.0810%" height="15" fill="rgb(217,149,8)" fg:x="979" fg:w="1"/><text x="79.5855%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.89%)</title><rect x="78.6062%" y="597" width="0.8914%" height="15" fill="rgb(209,183,11)" fg:x="970" fg:w="11"/><text x="78.8562%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.81%)</title><rect x="78.6872%" y="581" width="0.8104%" height="15" fill="rgb(208,55,20)" fg:x="971" fg:w="10"/><text x="78.9372%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.4165%" y="565" width="0.0810%" height="15" fill="rgb(218,39,14)" fg:x="980" fg:w="1"/><text x="79.6665%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.4165%" y="549" width="0.0810%" height="15" fill="rgb(216,169,33)" fg:x="980" fg:w="1"/><text x="79.6665%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.4165%" y="533" width="0.0810%" height="15" fill="rgb(233,80,24)" fg:x="980" fg:w="1"/><text x="79.6665%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.4976%" y="597" width="0.0810%" height="15" fill="rgb(213,179,31)" fg:x="981" fg:w="1"/><text x="79.7476%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="79.4976%" y="581" width="0.0810%" height="15" fill="rgb(209,19,5)" fg:x="981" fg:w="1"/><text x="79.7476%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.4976%" y="565" width="0.0810%" height="15" fill="rgb(219,18,35)" fg:x="981" fg:w="1"/><text x="79.7476%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.4976%" y="549" width="0.0810%" height="15" fill="rgb(209,169,16)" fg:x="981" fg:w="1"/><text x="79.7476%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="79.5786%" y="549" width="0.0810%" height="15" fill="rgb(245,90,51)" fg:x="982" fg:w="1"/><text x="79.8286%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.5786%" y="533" width="0.0810%" height="15" fill="rgb(220,99,45)" fg:x="982" fg:w="1"/><text x="79.8286%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.5786%" y="517" width="0.0810%" height="15" fill="rgb(249,89,25)" fg:x="982" fg:w="1"/><text x="79.8286%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="79.6596%" y="501" width="0.1621%" height="15" fill="rgb(239,193,0)" fg:x="983" fg:w="2"/><text x="79.9096%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="79.6596%" y="485" width="0.1621%" height="15" fill="rgb(231,126,1)" fg:x="983" fg:w="2"/><text x="79.9096%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.7407%" y="469" width="0.0810%" height="15" fill="rgb(243,166,3)" fg:x="984" fg:w="1"/><text x="79.9907%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.7407%" y="453" width="0.0810%" height="15" fill="rgb(223,22,34)" fg:x="984" fg:w="1"/><text x="79.9907%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.7407%" y="437" width="0.0810%" height="15" fill="rgb(251,52,51)" fg:x="984" fg:w="1"/><text x="79.9907%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.7407%" y="421" width="0.0810%" height="15" fill="rgb(221,165,28)" fg:x="984" fg:w="1"/><text x="79.9907%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.7407%" y="405" width="0.0810%" height="15" fill="rgb(218,121,47)" fg:x="984" fg:w="1"/><text x="79.9907%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.41%)</title><rect x="79.6596%" y="533" width="0.4052%" height="15" fill="rgb(209,120,9)" fg:x="983" fg:w="5"/><text x="79.9096%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="79.6596%" y="517" width="0.4052%" height="15" fill="rgb(236,68,12)" fg:x="983" fg:w="5"/><text x="79.9096%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="79.8217%" y="501" width="0.2431%" height="15" fill="rgb(225,194,26)" fg:x="985" fg:w="3"/><text x="80.0717%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="79.9028%" y="485" width="0.1621%" height="15" fill="rgb(231,84,39)" fg:x="986" fg:w="2"/><text x="80.1528%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="79.9028%" y="469" width="0.1621%" height="15" fill="rgb(210,11,45)" fg:x="986" fg:w="2"/><text x="80.1528%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.9838%" y="453" width="0.0810%" height="15" fill="rgb(224,54,52)" fg:x="987" fg:w="1"/><text x="80.2338%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.9838%" y="437" width="0.0810%" height="15" fill="rgb(238,102,14)" fg:x="987" fg:w="1"/><text x="80.2338%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.9838%" y="421" width="0.0810%" height="15" fill="rgb(243,160,52)" fg:x="987" fg:w="1"/><text x="80.2338%" y="431.50"></text></g><g><title>engine::session::Session::flush (21 samples, 1.70%)</title><rect x="78.4441%" y="693" width="1.7018%" height="15" fill="rgb(216,114,19)" fg:x="968" fg:w="21"/><text x="78.6941%" y="703.50"></text></g><g><title>engine::session::state::State::close (19 samples, 1.54%)</title><rect x="78.6062%" y="677" width="1.5397%" height="15" fill="rgb(244,166,37)" fg:x="970" fg:w="19"/><text x="78.8562%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (19 samples, 1.54%)</title><rect x="78.6062%" y="661" width="1.5397%" height="15" fill="rgb(246,29,44)" fg:x="970" fg:w="19"/><text x="78.8562%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (19 samples, 1.54%)</title><rect x="78.6062%" y="645" width="1.5397%" height="15" fill="rgb(215,56,53)" fg:x="970" fg:w="19"/><text x="78.8562%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 1.54%)</title><rect x="78.6062%" y="629" width="1.5397%" height="15" fill="rgb(217,60,2)" fg:x="970" fg:w="19"/><text x="78.8562%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (19 samples, 1.54%)</title><rect x="78.6062%" y="613" width="1.5397%" height="15" fill="rgb(207,26,24)" fg:x="970" fg:w="19"/><text x="78.8562%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.57%)</title><rect x="79.5786%" y="597" width="0.5673%" height="15" fill="rgb(252,210,15)" fg:x="982" fg:w="7"/><text x="79.8286%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.57%)</title><rect x="79.5786%" y="581" width="0.5673%" height="15" fill="rgb(253,209,26)" fg:x="982" fg:w="7"/><text x="79.8286%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.57%)</title><rect x="79.5786%" y="565" width="0.5673%" height="15" fill="rgb(238,170,14)" fg:x="982" fg:w="7"/><text x="79.8286%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.49%)</title><rect x="79.6596%" y="549" width="0.4862%" height="15" fill="rgb(216,178,15)" fg:x="983" fg:w="6"/><text x="79.9096%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.0648%" y="533" width="0.0810%" height="15" fill="rgb(250,197,2)" fg:x="988" fg:w="1"/><text x="80.3148%" y="543.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="80.1459%" y="693" width="0.0810%" height="15" fill="rgb(212,70,42)" fg:x="989" fg:w="1"/><text x="80.3959%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="80.1459%" y="677" width="0.0810%" height="15" fill="rgb(227,213,9)" fg:x="989" fg:w="1"/><text x="80.3959%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="80.1459%" y="661" width="0.0810%" height="15" fill="rgb(245,99,25)" fg:x="989" fg:w="1"/><text x="80.3959%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="80.1459%" y="645" width="0.0810%" height="15" fill="rgb(250,82,29)" fg:x="989" fg:w="1"/><text x="80.3959%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="80.1459%" y="629" width="0.0810%" height="15" fill="rgb(241,226,54)" fg:x="989" fg:w="1"/><text x="80.3959%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="80.1459%" y="613" width="0.0810%" height="15" fill="rgb(221,99,41)" fg:x="989" fg:w="1"/><text x="80.3959%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="80.1459%" y="597" width="0.0810%" height="15" fill="rgb(213,90,21)" fg:x="989" fg:w="1"/><text x="80.3959%" y="607.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.1459%" y="581" width="0.0810%" height="15" fill="rgb(205,208,24)" fg:x="989" fg:w="1"/><text x="80.3959%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="80.2269%" y="693" width="0.0810%" height="15" fill="rgb(246,31,12)" fg:x="990" fg:w="1"/><text x="80.4769%" y="703.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="80.2269%" y="677" width="0.0810%" height="15" fill="rgb(213,154,6)" fg:x="990" fg:w="1"/><text x="80.4769%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.2269%" y="661" width="0.0810%" height="15" fill="rgb(222,163,29)" fg:x="990" fg:w="1"/><text x="80.4769%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="80.2269%" y="645" width="0.0810%" height="15" fill="rgb(227,201,8)" fg:x="990" fg:w="1"/><text x="80.4769%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.2269%" y="629" width="0.0810%" height="15" fill="rgb(233,9,32)" fg:x="990" fg:w="1"/><text x="80.4769%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="80.2269%" y="613" width="0.0810%" height="15" fill="rgb(217,54,24)" fg:x="990" fg:w="1"/><text x="80.4769%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.2269%" y="597" width="0.0810%" height="15" fill="rgb(235,192,0)" fg:x="990" fg:w="1"/><text x="80.4769%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="80.3079%" y="661" width="0.0810%" height="15" fill="rgb(235,45,9)" fg:x="991" fg:w="1"/><text x="80.5579%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="80.3079%" y="645" width="0.0810%" height="15" fill="rgb(246,42,40)" fg:x="991" fg:w="1"/><text x="80.5579%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="80.3079%" y="629" width="0.0810%" height="15" fill="rgb(248,111,24)" fg:x="991" fg:w="1"/><text x="80.5579%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="80.3079%" y="613" width="0.0810%" height="15" fill="rgb(249,65,22)" fg:x="991" fg:w="1"/><text x="80.5579%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.3079%" y="597" width="0.0810%" height="15" fill="rgb(238,111,51)" fg:x="991" fg:w="1"/><text x="80.5579%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.3079%" y="581" width="0.0810%" height="15" fill="rgb(250,118,22)" fg:x="991" fg:w="1"/><text x="80.5579%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.3079%" y="565" width="0.0810%" height="15" fill="rgb(234,84,26)" fg:x="991" fg:w="1"/><text x="80.5579%" y="575.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.3890%" y="661" width="0.0810%" height="15" fill="rgb(243,172,12)" fg:x="992" fg:w="1"/><text x="80.6390%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="80.3890%" y="645" width="0.0810%" height="15" fill="rgb(236,150,49)" fg:x="992" fg:w="1"/><text x="80.6390%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.3890%" y="629" width="0.0810%" height="15" fill="rgb(225,197,26)" fg:x="992" fg:w="1"/><text x="80.6390%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.3890%" y="613" width="0.0810%" height="15" fill="rgb(214,17,42)" fg:x="992" fg:w="1"/><text x="80.6390%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.4700%" y="645" width="0.0810%" height="15" fill="rgb(224,165,40)" fg:x="993" fg:w="1"/><text x="80.7200%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.4700%" y="629" width="0.0810%" height="15" fill="rgb(246,100,4)" fg:x="993" fg:w="1"/><text x="80.7200%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.4700%" y="613" width="0.0810%" height="15" fill="rgb(222,103,0)" fg:x="993" fg:w="1"/><text x="80.7200%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.4700%" y="597" width="0.0810%" height="15" fill="rgb(227,189,26)" fg:x="993" fg:w="1"/><text x="80.7200%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.4700%" y="581" width="0.0810%" height="15" fill="rgb(214,202,17)" fg:x="993" fg:w="1"/><text x="80.7200%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="80.5511%" y="613" width="0.0810%" height="15" fill="rgb(229,111,3)" fg:x="994" fg:w="1"/><text x="80.8011%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="80.5511%" y="597" width="0.0810%" height="15" fill="rgb(229,172,15)" fg:x="994" fg:w="1"/><text x="80.8011%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.5511%" y="581" width="0.0810%" height="15" fill="rgb(230,224,35)" fg:x="994" fg:w="1"/><text x="80.8011%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.5511%" y="565" width="0.0810%" height="15" fill="rgb(251,141,6)" fg:x="994" fg:w="1"/><text x="80.8011%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.5511%" y="549" width="0.0810%" height="15" fill="rgb(225,208,6)" fg:x="994" fg:w="1"/><text x="80.8011%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.5511%" y="533" width="0.0810%" height="15" fill="rgb(246,181,16)" fg:x="994" fg:w="1"/><text x="80.8011%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.5511%" y="517" width="0.0810%" height="15" fill="rgb(227,129,36)" fg:x="994" fg:w="1"/><text x="80.8011%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.5511%" y="501" width="0.0810%" height="15" fill="rgb(248,117,24)" fg:x="994" fg:w="1"/><text x="80.8011%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="80.5511%" y="485" width="0.0810%" height="15" fill="rgb(214,185,35)" fg:x="994" fg:w="1"/><text x="80.8011%" y="495.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="80.4700%" y="661" width="0.2431%" height="15" fill="rgb(236,150,34)" fg:x="993" fg:w="3"/><text x="80.7200%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="80.5511%" y="645" width="0.1621%" height="15" fill="rgb(243,228,27)" fg:x="994" fg:w="2"/><text x="80.8011%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="80.5511%" y="629" width="0.1621%" height="15" fill="rgb(245,77,44)" fg:x="994" fg:w="2"/><text x="80.8011%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="80.6321%" y="613" width="0.0810%" height="15" fill="rgb(235,214,42)" fg:x="995" fg:w="1"/><text x="80.8821%" y="623.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="80.6321%" y="597" width="0.0810%" height="15" fill="rgb(221,74,3)" fg:x="995" fg:w="1"/><text x="80.8821%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (6 samples, 0.49%)</title><rect x="80.3079%" y="693" width="0.4862%" height="15" fill="rgb(206,121,29)" fg:x="991" fg:w="6"/><text x="80.5579%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.49%)</title><rect x="80.3079%" y="677" width="0.4862%" height="15" fill="rgb(249,131,53)" fg:x="991" fg:w="6"/><text x="80.5579%" y="687.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="80.7131%" y="661" width="0.0810%" height="15" fill="rgb(236,170,29)" fg:x="996" fg:w="1"/><text x="80.9631%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.7131%" y="645" width="0.0810%" height="15" fill="rgb(247,96,15)" fg:x="996" fg:w="1"/><text x="80.9631%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="80.7942%" y="677" width="0.0810%" height="15" fill="rgb(211,210,7)" fg:x="997" fg:w="1"/><text x="81.0442%" y="687.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="80.7942%" y="661" width="0.0810%" height="15" fill="rgb(240,88,50)" fg:x="997" fg:w="1"/><text x="81.0442%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.8752%" y="677" width="0.0810%" height="15" fill="rgb(209,229,26)" fg:x="998" fg:w="1"/><text x="81.1252%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.8752%" y="661" width="0.0810%" height="15" fill="rgb(210,68,23)" fg:x="998" fg:w="1"/><text x="81.1252%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="80.9562%" y="677" width="0.0810%" height="15" fill="rgb(229,180,13)" fg:x="999" fg:w="1"/><text x="81.2062%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="81.0373%" y="661" width="0.0810%" height="15" fill="rgb(236,53,44)" fg:x="1000" fg:w="1"/><text x="81.2873%" y="671.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="81.0373%" y="645" width="0.0810%" height="15" fill="rgb(244,214,29)" fg:x="1000" fg:w="1"/><text x="81.2873%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.0373%" y="629" width="0.0810%" height="15" fill="rgb(220,75,29)" fg:x="1000" fg:w="1"/><text x="81.2873%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="81.1183%" y="549" width="0.0810%" height="15" fill="rgb(214,183,37)" fg:x="1001" fg:w="1"/><text x="81.3683%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.1183%" y="533" width="0.0810%" height="15" fill="rgb(239,117,29)" fg:x="1001" fg:w="1"/><text x="81.3683%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.1183%" y="517" width="0.0810%" height="15" fill="rgb(237,171,35)" fg:x="1001" fg:w="1"/><text x="81.3683%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.1183%" y="501" width="0.0810%" height="15" fill="rgb(229,178,53)" fg:x="1001" fg:w="1"/><text x="81.3683%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="81.1994%" y="517" width="0.0810%" height="15" fill="rgb(210,102,19)" fg:x="1002" fg:w="1"/><text x="81.4494%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.1994%" y="501" width="0.0810%" height="15" fill="rgb(235,127,22)" fg:x="1002" fg:w="1"/><text x="81.4494%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.1994%" y="485" width="0.0810%" height="15" fill="rgb(244,31,31)" fg:x="1002" fg:w="1"/><text x="81.4494%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.1994%" y="469" width="0.0810%" height="15" fill="rgb(231,43,21)" fg:x="1002" fg:w="1"/><text x="81.4494%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="81.2804%" y="501" width="0.0810%" height="15" fill="rgb(217,131,35)" fg:x="1003" fg:w="1"/><text x="81.5304%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.2804%" y="485" width="0.0810%" height="15" fill="rgb(221,149,4)" fg:x="1003" fg:w="1"/><text x="81.5304%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="81.1994%" y="549" width="0.2431%" height="15" fill="rgb(232,170,28)" fg:x="1002" fg:w="3"/><text x="81.4494%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="81.1994%" y="533" width="0.2431%" height="15" fill="rgb(238,56,10)" fg:x="1002" fg:w="3"/><text x="81.4494%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="81.2804%" y="517" width="0.1621%" height="15" fill="rgb(235,196,14)" fg:x="1003" fg:w="2"/><text x="81.5304%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.3614%" y="501" width="0.0810%" height="15" fill="rgb(216,45,48)" fg:x="1004" fg:w="1"/><text x="81.6114%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.41%)</title><rect x="81.1183%" y="565" width="0.4052%" height="15" fill="rgb(238,213,17)" fg:x="1001" fg:w="5"/><text x="81.3683%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.4425%" y="549" width="0.0810%" height="15" fill="rgb(212,13,2)" fg:x="1005" fg:w="1"/><text x="81.6925%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.4425%" y="533" width="0.0810%" height="15" fill="rgb(240,114,20)" fg:x="1005" fg:w="1"/><text x="81.6925%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.4425%" y="517" width="0.0810%" height="15" fill="rgb(228,41,40)" fg:x="1005" fg:w="1"/><text x="81.6925%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.5235%" y="533" width="0.0810%" height="15" fill="rgb(244,132,35)" fg:x="1006" fg:w="1"/><text x="81.7735%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.6045%" y="517" width="0.0810%" height="15" fill="rgb(253,189,4)" fg:x="1007" fg:w="1"/><text x="81.8545%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.6045%" y="501" width="0.0810%" height="15" fill="rgb(224,37,19)" fg:x="1007" fg:w="1"/><text x="81.8545%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.7666%" y="485" width="0.0810%" height="15" fill="rgb(235,223,18)" fg:x="1009" fg:w="1"/><text x="82.0166%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.8476%" y="485" width="0.0810%" height="15" fill="rgb(235,163,25)" fg:x="1010" fg:w="1"/><text x="82.0976%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.9287%" y="469" width="0.0810%" height="15" fill="rgb(217,145,28)" fg:x="1011" fg:w="1"/><text x="82.1787%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="81.5235%" y="565" width="0.5673%" height="15" fill="rgb(223,223,32)" fg:x="1006" fg:w="7"/><text x="81.7735%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.57%)</title><rect x="81.5235%" y="549" width="0.5673%" height="15" fill="rgb(227,189,39)" fg:x="1006" fg:w="7"/><text x="81.7735%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="81.6045%" y="533" width="0.4862%" height="15" fill="rgb(248,10,22)" fg:x="1007" fg:w="6"/><text x="81.8545%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="81.6856%" y="517" width="0.4052%" height="15" fill="rgb(248,46,39)" fg:x="1008" fg:w="5"/><text x="81.9356%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="81.6856%" y="501" width="0.4052%" height="15" fill="rgb(248,113,48)" fg:x="1008" fg:w="5"/><text x="81.9356%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="81.9287%" y="485" width="0.1621%" height="15" fill="rgb(245,16,25)" fg:x="1011" fg:w="2"/><text x="82.1787%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="82.0097%" y="469" width="0.0810%" height="15" fill="rgb(249,152,16)" fg:x="1012" fg:w="1"/><text x="82.2597%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="82.0908%" y="549" width="0.0810%" height="15" fill="rgb(250,16,1)" fg:x="1013" fg:w="1"/><text x="82.3408%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="82.0908%" y="533" width="0.0810%" height="15" fill="rgb(249,138,3)" fg:x="1013" fg:w="1"/><text x="82.3408%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="82.3339%" y="469" width="0.1621%" height="15" fill="rgb(227,71,41)" fg:x="1016" fg:w="2"/><text x="82.5839%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="82.3339%" y="453" width="0.1621%" height="15" fill="rgb(209,184,23)" fg:x="1016" fg:w="2"/><text x="82.5839%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="82.4959%" y="469" width="0.0810%" height="15" fill="rgb(223,215,31)" fg:x="1018" fg:w="1"/><text x="82.7459%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.4959%" y="453" width="0.0810%" height="15" fill="rgb(210,146,28)" fg:x="1018" fg:w="1"/><text x="82.7459%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.4959%" y="437" width="0.0810%" height="15" fill="rgb(209,183,41)" fg:x="1018" fg:w="1"/><text x="82.7459%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.4959%" y="421" width="0.0810%" height="15" fill="rgb(209,224,45)" fg:x="1018" fg:w="1"/><text x="82.7459%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.57%)</title><rect x="82.1718%" y="501" width="0.5673%" height="15" fill="rgb(224,209,51)" fg:x="1014" fg:w="7"/><text x="82.4218%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="82.2528%" y="485" width="0.4862%" height="15" fill="rgb(223,17,39)" fg:x="1015" fg:w="6"/><text x="82.5028%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="82.5770%" y="469" width="0.1621%" height="15" fill="rgb(234,204,37)" fg:x="1019" fg:w="2"/><text x="82.8270%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="82.5770%" y="453" width="0.1621%" height="15" fill="rgb(236,120,5)" fg:x="1019" fg:w="2"/><text x="82.8270%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="82.5770%" y="437" width="0.1621%" height="15" fill="rgb(248,97,27)" fg:x="1019" fg:w="2"/><text x="82.8270%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.6580%" y="421" width="0.0810%" height="15" fill="rgb(240,66,17)" fg:x="1020" fg:w="1"/><text x="82.9080%" y="431.50"></text></g><g><title>engine::session::Session::flush (22 samples, 1.78%)</title><rect x="81.0373%" y="677" width="1.7828%" height="15" fill="rgb(210,79,3)" fg:x="1000" fg:w="22"/><text x="81.2873%" y="687.50">e..</text></g><g><title>engine::session::Session::save_changes (21 samples, 1.70%)</title><rect x="81.1183%" y="661" width="1.7018%" height="15" fill="rgb(214,176,27)" fg:x="1001" fg:w="21"/><text x="81.3683%" y="671.50"></text></g><g><title>engine::session::state::State::close (21 samples, 1.70%)</title><rect x="81.1183%" y="645" width="1.7018%" height="15" fill="rgb(235,185,3)" fg:x="1001" fg:w="21"/><text x="81.3683%" y="655.50"></text></g><g><title>engine::session::state::State::flush_entities (21 samples, 1.70%)</title><rect x="81.1183%" y="629" width="1.7018%" height="15" fill="rgb(227,24,12)" fg:x="1001" fg:w="21"/><text x="81.3683%" y="639.50"></text></g><g><title>core::iter::adapters::try_process (21 samples, 1.70%)</title><rect x="81.1183%" y="613" width="1.7018%" height="15" fill="rgb(252,169,48)" fg:x="1001" fg:w="21"/><text x="81.3683%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 1.70%)</title><rect x="81.1183%" y="597" width="1.7018%" height="15" fill="rgb(212,65,1)" fg:x="1001" fg:w="21"/><text x="81.3683%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (21 samples, 1.70%)</title><rect x="81.1183%" y="581" width="1.7018%" height="15" fill="rgb(242,39,24)" fg:x="1001" fg:w="21"/><text x="81.3683%" y="591.50"></text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.73%)</title><rect x="82.0908%" y="565" width="0.7293%" height="15" fill="rgb(249,32,23)" fg:x="1013" fg:w="9"/><text x="82.3408%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.65%)</title><rect x="82.1718%" y="549" width="0.6483%" height="15" fill="rgb(251,195,23)" fg:x="1014" fg:w="8"/><text x="82.4218%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.65%)</title><rect x="82.1718%" y="533" width="0.6483%" height="15" fill="rgb(236,174,8)" fg:x="1014" fg:w="8"/><text x="82.4218%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.65%)</title><rect x="82.1718%" y="517" width="0.6483%" height="15" fill="rgb(220,197,8)" fg:x="1014" fg:w="8"/><text x="82.4218%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.7391%" y="501" width="0.0810%" height="15" fill="rgb(240,108,37)" fg:x="1021" fg:w="1"/><text x="82.9891%" y="511.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="82.8201%" y="677" width="0.0810%" height="15" fill="rgb(232,176,24)" fg:x="1022" fg:w="1"/><text x="83.0701%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="82.8201%" y="661" width="0.0810%" height="15" fill="rgb(243,35,29)" fg:x="1022" fg:w="1"/><text x="83.0701%" y="671.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="82.8201%" y="645" width="0.0810%" height="15" fill="rgb(210,37,18)" fg:x="1022" fg:w="1"/><text x="83.0701%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="82.8201%" y="629" width="0.0810%" height="15" fill="rgb(224,184,40)" fg:x="1022" fg:w="1"/><text x="83.0701%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.8201%" y="613" width="0.0810%" height="15" fill="rgb(236,39,29)" fg:x="1022" fg:w="1"/><text x="83.0701%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="82.8201%" y="597" width="0.0810%" height="15" fill="rgb(232,48,39)" fg:x="1022" fg:w="1"/><text x="83.0701%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="82.9011%" y="661" width="0.0810%" height="15" fill="rgb(236,34,42)" fg:x="1023" fg:w="1"/><text x="83.1511%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="82.9011%" y="645" width="0.0810%" height="15" fill="rgb(243,106,37)" fg:x="1023" fg:w="1"/><text x="83.1511%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.9011%" y="629" width="0.0810%" height="15" fill="rgb(218,96,6)" fg:x="1023" fg:w="1"/><text x="83.1511%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.9011%" y="613" width="0.0810%" height="15" fill="rgb(235,130,12)" fg:x="1023" fg:w="1"/><text x="83.1511%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="82.9822%" y="645" width="0.0810%" height="15" fill="rgb(231,95,0)" fg:x="1024" fg:w="1"/><text x="83.2322%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.9822%" y="629" width="0.0810%" height="15" fill="rgb(228,12,23)" fg:x="1024" fg:w="1"/><text x="83.2322%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.9822%" y="613" width="0.0810%" height="15" fill="rgb(216,12,1)" fg:x="1024" fg:w="1"/><text x="83.2322%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.9822%" y="597" width="0.0810%" height="15" fill="rgb(219,59,3)" fg:x="1024" fg:w="1"/><text x="83.2322%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="83.0632%" y="645" width="0.0810%" height="15" fill="rgb(215,208,46)" fg:x="1025" fg:w="1"/><text x="83.3132%" y="655.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="83.0632%" y="629" width="0.0810%" height="15" fill="rgb(254,224,29)" fg:x="1025" fg:w="1"/><text x="83.3132%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.0632%" y="613" width="0.0810%" height="15" fill="rgb(232,14,29)" fg:x="1025" fg:w="1"/><text x="83.3132%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="83.0632%" y="597" width="0.0810%" height="15" fill="rgb(208,45,52)" fg:x="1025" fg:w="1"/><text x="83.3132%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="83.1442%" y="629" width="0.0810%" height="15" fill="rgb(234,191,28)" fg:x="1026" fg:w="1"/><text x="83.3942%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="83.1442%" y="613" width="0.0810%" height="15" fill="rgb(244,67,43)" fg:x="1026" fg:w="1"/><text x="83.3942%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="83.1442%" y="597" width="0.0810%" height="15" fill="rgb(236,189,24)" fg:x="1026" fg:w="1"/><text x="83.3942%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.1442%" y="581" width="0.0810%" height="15" fill="rgb(239,214,33)" fg:x="1026" fg:w="1"/><text x="83.3942%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.1442%" y="565" width="0.0810%" height="15" fill="rgb(226,176,41)" fg:x="1026" fg:w="1"/><text x="83.3942%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="83.1442%" y="549" width="0.0810%" height="15" fill="rgb(248,47,8)" fg:x="1026" fg:w="1"/><text x="83.3942%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.1442%" y="533" width="0.0810%" height="15" fill="rgb(218,81,44)" fg:x="1026" fg:w="1"/><text x="83.3942%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.1442%" y="517" width="0.0810%" height="15" fill="rgb(213,98,6)" fg:x="1026" fg:w="1"/><text x="83.3942%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.1442%" y="501" width="0.0810%" height="15" fill="rgb(222,85,22)" fg:x="1026" fg:w="1"/><text x="83.3942%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.1442%" y="485" width="0.0810%" height="15" fill="rgb(239,46,39)" fg:x="1026" fg:w="1"/><text x="83.3942%" y="495.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.41%)</title><rect x="82.9011%" y="677" width="0.4052%" height="15" fill="rgb(237,12,29)" fg:x="1023" fg:w="5"/><text x="83.1511%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="82.9822%" y="661" width="0.3241%" height="15" fill="rgb(214,77,8)" fg:x="1024" fg:w="4"/><text x="83.2322%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="83.1442%" y="645" width="0.1621%" height="15" fill="rgb(217,168,37)" fg:x="1026" fg:w="2"/><text x="83.3942%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="83.2253%" y="629" width="0.0810%" height="15" fill="rgb(221,217,23)" fg:x="1027" fg:w="1"/><text x="83.4753%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.2253%" y="613" width="0.0810%" height="15" fill="rgb(243,229,36)" fg:x="1027" fg:w="1"/><text x="83.4753%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="83.2253%" y="597" width="0.0810%" height="15" fill="rgb(251,163,40)" fg:x="1027" fg:w="1"/><text x="83.4753%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (1 samples, 0.08%)</title><rect x="83.3063%" y="677" width="0.0810%" height="15" fill="rgb(237,222,12)" fg:x="1028" fg:w="1"/><text x="83.5563%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="83.3063%" y="661" width="0.0810%" height="15" fill="rgb(248,132,6)" fg:x="1028" fg:w="1"/><text x="83.5563%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="83.3063%" y="645" width="0.0810%" height="15" fill="rgb(227,167,50)" fg:x="1028" fg:w="1"/><text x="83.5563%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="83.3063%" y="629" width="0.0810%" height="15" fill="rgb(242,84,37)" fg:x="1028" fg:w="1"/><text x="83.5563%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="83.3063%" y="613" width="0.0810%" height="15" fill="rgb(212,4,50)" fg:x="1028" fg:w="1"/><text x="83.5563%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="83.3063%" y="597" width="0.0810%" height="15" fill="rgb(230,228,32)" fg:x="1028" fg:w="1"/><text x="83.5563%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.3063%" y="581" width="0.0810%" height="15" fill="rgb(248,217,23)" fg:x="1028" fg:w="1"/><text x="83.5563%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.3063%" y="565" width="0.0810%" height="15" fill="rgb(238,197,32)" fg:x="1028" fg:w="1"/><text x="83.5563%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="83.3063%" y="549" width="0.0810%" height="15" fill="rgb(236,106,1)" fg:x="1028" fg:w="1"/><text x="83.5563%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.3063%" y="533" width="0.0810%" height="15" fill="rgb(219,228,13)" fg:x="1028" fg:w="1"/><text x="83.5563%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.3063%" y="517" width="0.0810%" height="15" fill="rgb(238,30,35)" fg:x="1028" fg:w="1"/><text x="83.5563%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="83.3874%" y="677" width="0.0810%" height="15" fill="rgb(236,70,23)" fg:x="1029" fg:w="1"/><text x="83.6374%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="83.3874%" y="661" width="0.0810%" height="15" fill="rgb(249,104,48)" fg:x="1029" fg:w="1"/><text x="83.6374%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Route&gt; (1 samples, 0.08%)</title><rect x="83.3874%" y="645" width="0.0810%" height="15" fill="rgb(254,117,50)" fg:x="1029" fg:w="1"/><text x="83.6374%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="83.4684%" y="645" width="0.0810%" height="15" fill="rgb(223,152,4)" fg:x="1030" fg:w="1"/><text x="83.7184%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.4684%" y="629" width="0.0810%" height="15" fill="rgb(245,6,2)" fg:x="1030" fg:w="1"/><text x="83.7184%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.4684%" y="613" width="0.0810%" height="15" fill="rgb(249,150,24)" fg:x="1030" fg:w="1"/><text x="83.7184%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.4684%" y="597" width="0.0810%" height="15" fill="rgb(228,185,42)" fg:x="1030" fg:w="1"/><text x="83.7184%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.4684%" y="581" width="0.0810%" height="15" fill="rgb(226,39,33)" fg:x="1030" fg:w="1"/><text x="83.7184%" y="591.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="83.4684%" y="661" width="0.1621%" height="15" fill="rgb(221,166,19)" fg:x="1030" fg:w="2"/><text x="83.7184%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="83.5494%" y="645" width="0.0810%" height="15" fill="rgb(209,109,2)" fg:x="1031" fg:w="1"/><text x="83.7994%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="83.5494%" y="629" width="0.0810%" height="15" fill="rgb(252,216,26)" fg:x="1031" fg:w="1"/><text x="83.7994%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="83.5494%" y="613" width="0.0810%" height="15" fill="rgb(227,173,36)" fg:x="1031" fg:w="1"/><text x="83.7994%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="83.5494%" y="597" width="0.0810%" height="15" fill="rgb(209,90,7)" fg:x="1031" fg:w="1"/><text x="83.7994%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.5494%" y="581" width="0.0810%" height="15" fill="rgb(250,194,11)" fg:x="1031" fg:w="1"/><text x="83.7994%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.5494%" y="565" width="0.0810%" height="15" fill="rgb(220,72,50)" fg:x="1031" fg:w="1"/><text x="83.7994%" y="575.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="83.4684%" y="677" width="0.2431%" height="15" fill="rgb(222,106,48)" fg:x="1030" fg:w="3"/><text x="83.7184%" y="687.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="83.6305%" y="661" width="0.0810%" height="15" fill="rgb(216,220,45)" fg:x="1032" fg:w="1"/><text x="83.8805%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="83.6305%" y="645" width="0.0810%" height="15" fill="rgb(234,112,18)" fg:x="1032" fg:w="1"/><text x="83.8805%" y="655.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="83.6305%" y="629" width="0.0810%" height="15" fill="rgb(206,179,9)" fg:x="1032" fg:w="1"/><text x="83.8805%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.6305%" y="613" width="0.0810%" height="15" fill="rgb(215,115,40)" fg:x="1032" fg:w="1"/><text x="83.8805%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (37 samples, 3.00%)</title><rect x="80.7942%" y="693" width="2.9984%" height="15" fill="rgb(222,69,34)" fg:x="997" fg:w="37"/><text x="81.0442%" y="703.50">plu..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="83.7115%" y="677" width="0.0810%" height="15" fill="rgb(209,161,10)" fg:x="1033" fg:w="1"/><text x="83.9615%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="83.7115%" y="661" width="0.0810%" height="15" fill="rgb(217,6,38)" fg:x="1033" fg:w="1"/><text x="83.9615%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="83.7115%" y="645" width="0.0810%" height="15" fill="rgb(229,229,48)" fg:x="1033" fg:w="1"/><text x="83.9615%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.7115%" y="629" width="0.0810%" height="15" fill="rgb(225,21,28)" fg:x="1033" fg:w="1"/><text x="83.9615%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="83.7925%" y="693" width="0.0810%" height="15" fill="rgb(206,33,13)" fg:x="1034" fg:w="1"/><text x="84.0425%" y="703.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="83.7925%" y="677" width="0.0810%" height="15" fill="rgb(242,178,17)" fg:x="1034" fg:w="1"/><text x="84.0425%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="83.7925%" y="661" width="0.0810%" height="15" fill="rgb(220,162,5)" fg:x="1034" fg:w="1"/><text x="84.0425%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="83.7925%" y="645" width="0.0810%" height="15" fill="rgb(210,33,43)" fg:x="1034" fg:w="1"/><text x="84.0425%" y="655.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="83.7925%" y="629" width="0.0810%" height="15" fill="rgb(216,116,54)" fg:x="1034" fg:w="1"/><text x="84.0425%" y="639.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="83.8736%" y="661" width="0.0810%" height="15" fill="rgb(249,92,24)" fg:x="1035" fg:w="1"/><text x="84.1236%" y="671.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="83.8736%" y="645" width="0.0810%" height="15" fill="rgb(231,189,14)" fg:x="1035" fg:w="1"/><text x="84.1236%" y="655.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="83.8736%" y="629" width="0.0810%" height="15" fill="rgb(230,8,41)" fg:x="1035" fg:w="1"/><text x="84.1236%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="83.8736%" y="613" width="0.0810%" height="15" fill="rgb(249,7,27)" fg:x="1035" fg:w="1"/><text x="84.1236%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.8736%" y="597" width="0.0810%" height="15" fill="rgb(232,86,5)" fg:x="1035" fg:w="1"/><text x="84.1236%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="83.9546%" y="645" width="0.0810%" height="15" fill="rgb(224,175,18)" fg:x="1036" fg:w="1"/><text x="84.2046%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="83.9546%" y="629" width="0.0810%" height="15" fill="rgb(220,129,12)" fg:x="1036" fg:w="1"/><text x="84.2046%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.9546%" y="613" width="0.0810%" height="15" fill="rgb(210,19,36)" fg:x="1036" fg:w="1"/><text x="84.2046%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.9546%" y="597" width="0.0810%" height="15" fill="rgb(219,96,14)" fg:x="1036" fg:w="1"/><text x="84.2046%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="83.9546%" y="581" width="0.0810%" height="15" fill="rgb(249,106,1)" fg:x="1036" fg:w="1"/><text x="84.2046%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.9546%" y="565" width="0.0810%" height="15" fill="rgb(249,155,20)" fg:x="1036" fg:w="1"/><text x="84.2046%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.9546%" y="549" width="0.0810%" height="15" fill="rgb(244,168,9)" fg:x="1036" fg:w="1"/><text x="84.2046%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.9546%" y="533" width="0.0810%" height="15" fill="rgb(216,23,50)" fg:x="1036" fg:w="1"/><text x="84.2046%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="84.0357%" y="581" width="0.0810%" height="15" fill="rgb(224,219,20)" fg:x="1037" fg:w="1"/><text x="84.2857%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.0357%" y="565" width="0.0810%" height="15" fill="rgb(222,156,15)" fg:x="1037" fg:w="1"/><text x="84.2857%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="84.0357%" y="613" width="0.1621%" height="15" fill="rgb(231,97,17)" fg:x="1037" fg:w="2"/><text x="84.2857%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="84.0357%" y="597" width="0.1621%" height="15" fill="rgb(218,70,48)" fg:x="1037" fg:w="2"/><text x="84.2857%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="84.1167%" y="581" width="0.0810%" height="15" fill="rgb(212,196,52)" fg:x="1038" fg:w="1"/><text x="84.3667%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="84.1167%" y="565" width="0.0810%" height="15" fill="rgb(243,203,18)" fg:x="1038" fg:w="1"/><text x="84.3667%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="84.1167%" y="549" width="0.0810%" height="15" fill="rgb(252,125,41)" fg:x="1038" fg:w="1"/><text x="84.3667%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.1167%" y="533" width="0.0810%" height="15" fill="rgb(223,180,33)" fg:x="1038" fg:w="1"/><text x="84.3667%" y="543.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="84.1977%" y="613" width="0.0810%" height="15" fill="rgb(254,159,46)" fg:x="1039" fg:w="1"/><text x="84.4477%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (6 samples, 0.49%)</title><rect x="83.8736%" y="693" width="0.4862%" height="15" fill="rgb(254,38,10)" fg:x="1035" fg:w="6"/><text x="84.1236%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (6 samples, 0.49%)</title><rect x="83.8736%" y="677" width="0.4862%" height="15" fill="rgb(208,217,32)" fg:x="1035" fg:w="6"/><text x="84.1236%" y="687.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.41%)</title><rect x="83.9546%" y="661" width="0.4052%" height="15" fill="rgb(221,120,13)" fg:x="1036" fg:w="5"/><text x="84.2046%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="84.0357%" y="645" width="0.3241%" height="15" fill="rgb(246,54,52)" fg:x="1037" fg:w="4"/><text x="84.2857%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="84.0357%" y="629" width="0.3241%" height="15" fill="rgb(242,34,25)" fg:x="1037" fg:w="4"/><text x="84.2857%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="84.2788%" y="613" width="0.0810%" height="15" fill="rgb(247,209,9)" fg:x="1040" fg:w="1"/><text x="84.5288%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.2788%" y="597" width="0.0810%" height="15" fill="rgb(228,71,26)" fg:x="1040" fg:w="1"/><text x="84.5288%" y="607.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="84.2788%" y="581" width="0.0810%" height="15" fill="rgb(222,145,49)" fg:x="1040" fg:w="1"/><text x="84.5288%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.2788%" y="565" width="0.0810%" height="15" fill="rgb(218,121,17)" fg:x="1040" fg:w="1"/><text x="84.5288%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="84.3598%" y="677" width="0.0810%" height="15" fill="rgb(244,50,7)" fg:x="1041" fg:w="1"/><text x="84.6098%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="84.3598%" y="661" width="0.0810%" height="15" fill="rgb(246,229,37)" fg:x="1041" fg:w="1"/><text x="84.6098%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="84.3598%" y="645" width="0.0810%" height="15" fill="rgb(225,18,5)" fg:x="1041" fg:w="1"/><text x="84.6098%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="84.3598%" y="629" width="0.0810%" height="15" fill="rgb(213,204,8)" fg:x="1041" fg:w="1"/><text x="84.6098%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.3598%" y="613" width="0.0810%" height="15" fill="rgb(238,103,6)" fg:x="1041" fg:w="1"/><text x="84.6098%" y="623.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (75 samples, 6.08%)</title><rect x="78.4441%" y="709" width="6.0778%" height="15" fill="rgb(222,25,35)" fg:x="968" fg:w="75"/><text x="78.6941%" y="719.50">&lt;tests::..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (2 samples, 0.16%)</title><rect x="84.3598%" y="693" width="0.1621%" height="15" fill="rgb(213,203,35)" fg:x="1041" fg:w="2"/><text x="84.6098%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="84.4408%" y="677" width="0.0810%" height="15" fill="rgb(221,79,53)" fg:x="1042" fg:w="1"/><text x="84.6908%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="84.4408%" y="661" width="0.0810%" height="15" fill="rgb(243,200,35)" fg:x="1042" fg:w="1"/><text x="84.6908%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="84.6029%" y="661" width="0.0810%" height="15" fill="rgb(248,60,25)" fg:x="1044" fg:w="1"/><text x="84.8529%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.6029%" y="645" width="0.0810%" height="15" fill="rgb(227,53,46)" fg:x="1044" fg:w="1"/><text x="84.8529%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="84.6840%" y="597" width="0.0810%" height="15" fill="rgb(216,120,32)" fg:x="1045" fg:w="1"/><text x="84.9340%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="84.6840%" y="581" width="0.0810%" height="15" fill="rgb(220,134,1)" fg:x="1045" fg:w="1"/><text x="84.9340%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="84.6840%" y="565" width="0.0810%" height="15" fill="rgb(237,168,5)" fg:x="1045" fg:w="1"/><text x="84.9340%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="84.7650%" y="565" width="0.0810%" height="15" fill="rgb(231,100,33)" fg:x="1046" fg:w="1"/><text x="85.0150%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="84.7650%" y="549" width="0.0810%" height="15" fill="rgb(236,177,47)" fg:x="1046" fg:w="1"/><text x="85.0150%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="84.8460%" y="533" width="0.0810%" height="15" fill="rgb(235,7,49)" fg:x="1047" fg:w="1"/><text x="85.0960%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="84.7650%" y="581" width="0.2431%" height="15" fill="rgb(232,119,22)" fg:x="1046" fg:w="3"/><text x="85.0150%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="84.8460%" y="565" width="0.1621%" height="15" fill="rgb(254,73,53)" fg:x="1047" fg:w="2"/><text x="85.0960%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="84.8460%" y="549" width="0.1621%" height="15" fill="rgb(251,35,20)" fg:x="1047" fg:w="2"/><text x="85.0960%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="84.9271%" y="533" width="0.0810%" height="15" fill="rgb(241,119,20)" fg:x="1048" fg:w="1"/><text x="85.1771%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.41%)</title><rect x="84.6840%" y="613" width="0.4052%" height="15" fill="rgb(207,102,14)" fg:x="1045" fg:w="5"/><text x="84.9340%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="84.7650%" y="597" width="0.3241%" height="15" fill="rgb(248,201,50)" fg:x="1046" fg:w="4"/><text x="85.0150%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="85.0081%" y="581" width="0.0810%" height="15" fill="rgb(222,185,44)" fg:x="1049" fg:w="1"/><text x="85.2581%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="85.0081%" y="565" width="0.0810%" height="15" fill="rgb(218,107,18)" fg:x="1049" fg:w="1"/><text x="85.2581%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="85.0081%" y="549" width="0.0810%" height="15" fill="rgb(237,177,39)" fg:x="1049" fg:w="1"/><text x="85.2581%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.0891%" y="549" width="0.0810%" height="15" fill="rgb(246,69,6)" fg:x="1050" fg:w="1"/><text x="85.3391%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="85.0891%" y="613" width="0.1621%" height="15" fill="rgb(234,208,37)" fg:x="1050" fg:w="2"/><text x="85.3391%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="85.0891%" y="597" width="0.1621%" height="15" fill="rgb(225,4,6)" fg:x="1050" fg:w="2"/><text x="85.3391%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="85.0891%" y="581" width="0.1621%" height="15" fill="rgb(233,45,0)" fg:x="1050" fg:w="2"/><text x="85.3391%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="85.0891%" y="565" width="0.1621%" height="15" fill="rgb(226,136,5)" fg:x="1050" fg:w="2"/><text x="85.3391%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.1702%" y="549" width="0.0810%" height="15" fill="rgb(211,91,47)" fg:x="1051" fg:w="1"/><text x="85.4202%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.1702%" y="533" width="0.0810%" height="15" fill="rgb(242,88,51)" fg:x="1051" fg:w="1"/><text x="85.4202%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.1702%" y="517" width="0.0810%" height="15" fill="rgb(230,91,28)" fg:x="1051" fg:w="1"/><text x="85.4202%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="85.2512%" y="533" width="0.0810%" height="15" fill="rgb(254,186,29)" fg:x="1052" fg:w="1"/><text x="85.5012%" y="543.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="85.2512%" y="517" width="0.0810%" height="15" fill="rgb(238,6,4)" fg:x="1052" fg:w="1"/><text x="85.5012%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="85.2512%" y="501" width="0.0810%" height="15" fill="rgb(221,151,16)" fg:x="1052" fg:w="1"/><text x="85.5012%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="85.2512%" y="485" width="0.0810%" height="15" fill="rgb(251,143,52)" fg:x="1052" fg:w="1"/><text x="85.5012%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="85.2512%" y="469" width="0.0810%" height="15" fill="rgb(206,90,15)" fg:x="1052" fg:w="1"/><text x="85.5012%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="85.2512%" y="597" width="0.1621%" height="15" fill="rgb(218,35,8)" fg:x="1052" fg:w="2"/><text x="85.5012%" y="607.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="85.2512%" y="581" width="0.1621%" height="15" fill="rgb(239,215,6)" fg:x="1052" fg:w="2"/><text x="85.5012%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="85.2512%" y="565" width="0.1621%" height="15" fill="rgb(245,116,39)" fg:x="1052" fg:w="2"/><text x="85.5012%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="85.2512%" y="549" width="0.1621%" height="15" fill="rgb(242,65,28)" fg:x="1052" fg:w="2"/><text x="85.5012%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="85.3323%" y="533" width="0.0810%" height="15" fill="rgb(252,132,53)" fg:x="1053" fg:w="1"/><text x="85.5823%" y="543.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="85.4133%" y="565" width="0.0810%" height="15" fill="rgb(224,159,50)" fg:x="1054" fg:w="1"/><text x="85.6633%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="85.4133%" y="549" width="0.0810%" height="15" fill="rgb(224,93,4)" fg:x="1054" fg:w="1"/><text x="85.6633%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="85.4943%" y="565" width="0.0810%" height="15" fill="rgb(208,81,34)" fg:x="1055" fg:w="1"/><text x="85.7443%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="85.4943%" y="549" width="0.0810%" height="15" fill="rgb(233,92,54)" fg:x="1055" fg:w="1"/><text x="85.7443%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.4943%" y="533" width="0.0810%" height="15" fill="rgb(237,21,14)" fg:x="1055" fg:w="1"/><text x="85.7443%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="85.7374%" y="469" width="0.0810%" height="15" fill="rgb(249,128,51)" fg:x="1058" fg:w="1"/><text x="85.9874%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="85.8185%" y="469" width="0.0810%" height="15" fill="rgb(223,129,24)" fg:x="1059" fg:w="1"/><text x="86.0685%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.41%)</title><rect x="85.5754%" y="549" width="0.4052%" height="15" fill="rgb(231,168,25)" fg:x="1056" fg:w="5"/><text x="85.8254%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="85.5754%" y="533" width="0.4052%" height="15" fill="rgb(224,39,20)" fg:x="1056" fg:w="5"/><text x="85.8254%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="85.5754%" y="517" width="0.4052%" height="15" fill="rgb(225,152,53)" fg:x="1056" fg:w="5"/><text x="85.8254%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="85.5754%" y="501" width="0.4052%" height="15" fill="rgb(252,17,24)" fg:x="1056" fg:w="5"/><text x="85.8254%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="85.6564%" y="485" width="0.3241%" height="15" fill="rgb(250,114,30)" fg:x="1057" fg:w="4"/><text x="85.9064%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="85.8995%" y="469" width="0.0810%" height="15" fill="rgb(229,5,4)" fg:x="1060" fg:w="1"/><text x="86.1495%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.8995%" y="453" width="0.0810%" height="15" fill="rgb(225,176,49)" fg:x="1060" fg:w="1"/><text x="86.1495%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.8995%" y="437" width="0.0810%" height="15" fill="rgb(224,221,49)" fg:x="1060" fg:w="1"/><text x="86.1495%" y="447.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.65%)</title><rect x="85.4133%" y="597" width="0.6483%" height="15" fill="rgb(253,169,27)" fg:x="1054" fg:w="8"/><text x="85.6633%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.65%)</title><rect x="85.4133%" y="581" width="0.6483%" height="15" fill="rgb(211,206,16)" fg:x="1054" fg:w="8"/><text x="85.6633%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.49%)</title><rect x="85.5754%" y="565" width="0.4862%" height="15" fill="rgb(244,87,35)" fg:x="1056" fg:w="6"/><text x="85.8254%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.9806%" y="549" width="0.0810%" height="15" fill="rgb(246,28,10)" fg:x="1061" fg:w="1"/><text x="86.2306%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="86.0616%" y="533" width="0.1621%" height="15" fill="rgb(229,12,44)" fg:x="1062" fg:w="2"/><text x="86.3116%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="86.0616%" y="517" width="0.1621%" height="15" fill="rgb(210,145,37)" fg:x="1062" fg:w="2"/><text x="86.3116%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="86.1426%" y="501" width="0.0810%" height="15" fill="rgb(227,112,52)" fg:x="1063" fg:w="1"/><text x="86.3926%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="86.1426%" y="485" width="0.0810%" height="15" fill="rgb(238,155,34)" fg:x="1063" fg:w="1"/><text x="86.3926%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="86.1426%" y="469" width="0.0810%" height="15" fill="rgb(239,226,36)" fg:x="1063" fg:w="1"/><text x="86.3926%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="86.1426%" y="453" width="0.0810%" height="15" fill="rgb(230,16,23)" fg:x="1063" fg:w="1"/><text x="86.3926%" y="463.50"></text></g><g><title>engine::session::Session::close (22 samples, 1.78%)</title><rect x="84.5219%" y="709" width="1.7828%" height="15" fill="rgb(236,171,36)" fg:x="1043" fg:w="22"/><text x="84.7719%" y="719.50">e..</text></g><g><title>engine::session::state::State::close (21 samples, 1.70%)</title><rect x="84.6029%" y="693" width="1.7018%" height="15" fill="rgb(221,22,14)" fg:x="1044" fg:w="21"/><text x="84.8529%" y="703.50"></text></g><g><title>engine::session::state::State::flush_entities (21 samples, 1.70%)</title><rect x="84.6029%" y="677" width="1.7018%" height="15" fill="rgb(242,43,11)" fg:x="1044" fg:w="21"/><text x="84.8529%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (20 samples, 1.62%)</title><rect x="84.6840%" y="661" width="1.6207%" height="15" fill="rgb(232,69,23)" fg:x="1045" fg:w="20"/><text x="84.9340%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (20 samples, 1.62%)</title><rect x="84.6840%" y="645" width="1.6207%" height="15" fill="rgb(216,180,54)" fg:x="1045" fg:w="20"/><text x="84.9340%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (20 samples, 1.62%)</title><rect x="84.6840%" y="629" width="1.6207%" height="15" fill="rgb(216,5,24)" fg:x="1045" fg:w="20"/><text x="84.9340%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.05%)</title><rect x="85.2512%" y="613" width="1.0535%" height="15" fill="rgb(225,89,9)" fg:x="1052" fg:w="13"/><text x="85.5012%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="86.0616%" y="597" width="0.2431%" height="15" fill="rgb(243,75,33)" fg:x="1062" fg:w="3"/><text x="86.3116%" y="607.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="86.0616%" y="581" width="0.2431%" height="15" fill="rgb(247,141,45)" fg:x="1062" fg:w="3"/><text x="86.3116%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="86.0616%" y="565" width="0.2431%" height="15" fill="rgb(232,177,36)" fg:x="1062" fg:w="3"/><text x="86.3116%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="86.0616%" y="549" width="0.2431%" height="15" fill="rgb(219,125,36)" fg:x="1062" fg:w="3"/><text x="86.3116%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="86.2237%" y="533" width="0.0810%" height="15" fill="rgb(227,94,9)" fg:x="1064" fg:w="1"/><text x="86.4737%" y="543.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="86.2237%" y="517" width="0.0810%" height="15" fill="rgb(240,34,52)" fg:x="1064" fg:w="1"/><text x="86.4737%" y="527.50"></text></g><g><title>core::fmt::Formatter::debug_struct (1 samples, 0.08%)</title><rect x="86.3857%" y="501" width="0.0810%" height="15" fill="rgb(216,45,12)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="511.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="86.3857%" y="485" width="0.0810%" height="15" fill="rgb(246,21,19)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="86.3857%" y="469" width="0.0810%" height="15" fill="rgb(213,98,42)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="86.3857%" y="453" width="0.0810%" height="15" fill="rgb(250,136,47)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="86.3857%" y="437" width="0.0810%" height="15" fill="rgb(251,124,27)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="447.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="86.3857%" y="421" width="0.0810%" height="15" fill="rgb(229,180,14)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="86.3857%" y="405" width="0.0810%" height="15" fill="rgb(245,216,25)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="86.3857%" y="389" width="0.0810%" height="15" fill="rgb(251,43,5)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="86.3857%" y="373" width="0.0810%" height="15" fill="rgb(250,128,24)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="86.3857%" y="357" width="0.0810%" height="15" fill="rgb(217,117,27)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="86.3857%" y="341" width="0.0810%" height="15" fill="rgb(245,147,4)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.3857%" y="325" width="0.0810%" height="15" fill="rgb(242,201,35)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="86.3857%" y="309" width="0.0810%" height="15" fill="rgb(218,181,1)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.3857%" y="293" width="0.0810%" height="15" fill="rgb(222,6,29)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="86.3857%" y="277" width="0.0810%" height="15" fill="rgb(208,186,3)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="86.3857%" y="261" width="0.0810%" height="15" fill="rgb(216,36,26)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="271.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="86.3857%" y="245" width="0.0810%" height="15" fill="rgb(248,201,23)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.3857%" y="229" width="0.0810%" height="15" fill="rgb(251,170,31)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="239.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="86.3857%" y="661" width="0.1621%" height="15" fill="rgb(207,110,25)" fg:x="1066" fg:w="2"/><text x="86.6357%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="86.3857%" y="645" width="0.1621%" height="15" fill="rgb(250,54,15)" fg:x="1066" fg:w="2"/><text x="86.6357%" y="655.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="86.3857%" y="629" width="0.1621%" height="15" fill="rgb(227,68,33)" fg:x="1066" fg:w="2"/><text x="86.6357%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="86.3857%" y="613" width="0.1621%" height="15" fill="rgb(238,34,41)" fg:x="1066" fg:w="2"/><text x="86.6357%" y="623.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="86.3857%" y="597" width="0.1621%" height="15" fill="rgb(220,11,15)" fg:x="1066" fg:w="2"/><text x="86.6357%" y="607.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (2 samples, 0.16%)</title><rect x="86.3857%" y="581" width="0.1621%" height="15" fill="rgb(246,111,35)" fg:x="1066" fg:w="2"/><text x="86.6357%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="86.3857%" y="565" width="0.1621%" height="15" fill="rgb(209,88,53)" fg:x="1066" fg:w="2"/><text x="86.6357%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="86.3857%" y="549" width="0.1621%" height="15" fill="rgb(231,185,47)" fg:x="1066" fg:w="2"/><text x="86.6357%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="86.3857%" y="533" width="0.1621%" height="15" fill="rgb(233,154,1)" fg:x="1066" fg:w="2"/><text x="86.6357%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="86.3857%" y="517" width="0.1621%" height="15" fill="rgb(225,15,46)" fg:x="1066" fg:w="2"/><text x="86.6357%" y="527.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="86.4668%" y="501" width="0.0810%" height="15" fill="rgb(211,135,41)" fg:x="1067" fg:w="1"/><text x="86.7168%" y="511.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::from_box (1 samples, 0.08%)</title><rect x="86.5478%" y="661" width="0.0810%" height="15" fill="rgb(208,54,0)" fg:x="1068" fg:w="1"/><text x="86.7978%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.5478%" y="645" width="0.0810%" height="15" fill="rgb(244,136,14)" fg:x="1068" fg:w="1"/><text x="86.7978%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.7909%" y="469" width="0.0810%" height="15" fill="rgb(241,56,14)" fg:x="1071" fg:w="1"/><text x="87.0409%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.7909%" y="453" width="0.0810%" height="15" fill="rgb(205,80,24)" fg:x="1071" fg:w="1"/><text x="87.0409%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.7909%" y="437" width="0.0810%" height="15" fill="rgb(220,57,4)" fg:x="1071" fg:w="1"/><text x="87.0409%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.7909%" y="421" width="0.0810%" height="15" fill="rgb(226,193,50)" fg:x="1071" fg:w="1"/><text x="87.0409%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="86.7909%" y="405" width="0.0810%" height="15" fill="rgb(231,168,22)" fg:x="1071" fg:w="1"/><text x="87.0409%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="86.7909%" y="389" width="0.0810%" height="15" fill="rgb(254,215,14)" fg:x="1071" fg:w="1"/><text x="87.0409%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="86.7909%" y="373" width="0.0810%" height="15" fill="rgb(211,115,16)" fg:x="1071" fg:w="1"/><text x="87.0409%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="86.7909%" y="357" width="0.0810%" height="15" fill="rgb(236,210,16)" fg:x="1071" fg:w="1"/><text x="87.0409%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="86.7909%" y="341" width="0.0810%" height="15" fill="rgb(221,94,12)" fg:x="1071" fg:w="1"/><text x="87.0409%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="86.7909%" y="325" width="0.0810%" height="15" fill="rgb(235,218,49)" fg:x="1071" fg:w="1"/><text x="87.0409%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="86.7909%" y="309" width="0.0810%" height="15" fill="rgb(217,114,14)" fg:x="1071" fg:w="1"/><text x="87.0409%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="86.7909%" y="293" width="0.0810%" height="15" fill="rgb(216,145,22)" fg:x="1071" fg:w="1"/><text x="87.0409%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="86.7909%" y="277" width="0.0810%" height="15" fill="rgb(217,112,39)" fg:x="1071" fg:w="1"/><text x="87.0409%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.7909%" y="261" width="0.0810%" height="15" fill="rgb(225,85,32)" fg:x="1071" fg:w="1"/><text x="87.0409%" y="271.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="86.8720%" y="469" width="0.0810%" height="15" fill="rgb(245,209,47)" fg:x="1072" fg:w="1"/><text x="87.1220%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="86.8720%" y="453" width="0.0810%" height="15" fill="rgb(218,220,15)" fg:x="1072" fg:w="1"/><text x="87.1220%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.8720%" y="437" width="0.0810%" height="15" fill="rgb(222,202,31)" fg:x="1072" fg:w="1"/><text x="87.1220%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="86.8720%" y="421" width="0.0810%" height="15" fill="rgb(243,203,4)" fg:x="1072" fg:w="1"/><text x="87.1220%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.8720%" y="405" width="0.0810%" height="15" fill="rgb(237,92,17)" fg:x="1072" fg:w="1"/><text x="87.1220%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="86.8720%" y="389" width="0.0810%" height="15" fill="rgb(231,119,7)" fg:x="1072" fg:w="1"/><text x="87.1220%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="86.8720%" y="373" width="0.0810%" height="15" fill="rgb(237,82,41)" fg:x="1072" fg:w="1"/><text x="87.1220%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="86.8720%" y="357" width="0.0810%" height="15" fill="rgb(226,81,48)" fg:x="1072" fg:w="1"/><text x="87.1220%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="86.8720%" y="341" width="0.0810%" height="15" fill="rgb(234,70,51)" fg:x="1072" fg:w="1"/><text x="87.1220%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="86.9530%" y="373" width="0.1621%" height="15" fill="rgb(251,86,4)" fg:x="1073" fg:w="2"/><text x="87.2030%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="86.9530%" y="357" width="0.1621%" height="15" fill="rgb(244,144,28)" fg:x="1073" fg:w="2"/><text x="87.2030%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="86.9530%" y="341" width="0.1621%" height="15" fill="rgb(232,161,39)" fg:x="1073" fg:w="2"/><text x="87.2030%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="86.9530%" y="325" width="0.1621%" height="15" fill="rgb(247,34,51)" fg:x="1073" fg:w="2"/><text x="87.2030%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="86.9530%" y="309" width="0.1621%" height="15" fill="rgb(225,132,2)" fg:x="1073" fg:w="2"/><text x="87.2030%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="86.9530%" y="293" width="0.1621%" height="15" fill="rgb(209,159,44)" fg:x="1073" fg:w="2"/><text x="87.2030%" y="303.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (5 samples, 0.41%)</title><rect x="86.7909%" y="565" width="0.4052%" height="15" fill="rgb(251,214,1)" fg:x="1071" fg:w="5"/><text x="87.0409%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (5 samples, 0.41%)</title><rect x="86.7909%" y="549" width="0.4052%" height="15" fill="rgb(247,84,47)" fg:x="1071" fg:w="5"/><text x="87.0409%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (5 samples, 0.41%)</title><rect x="86.7909%" y="533" width="0.4052%" height="15" fill="rgb(240,111,43)" fg:x="1071" fg:w="5"/><text x="87.0409%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.41%)</title><rect x="86.7909%" y="517" width="0.4052%" height="15" fill="rgb(215,214,35)" fg:x="1071" fg:w="5"/><text x="87.0409%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.41%)</title><rect x="86.7909%" y="501" width="0.4052%" height="15" fill="rgb(248,207,23)" fg:x="1071" fg:w="5"/><text x="87.0409%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.41%)</title><rect x="86.7909%" y="485" width="0.4052%" height="15" fill="rgb(214,186,4)" fg:x="1071" fg:w="5"/><text x="87.0409%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="86.9530%" y="469" width="0.2431%" height="15" fill="rgb(220,133,22)" fg:x="1073" fg:w="3"/><text x="87.2030%" y="479.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="86.9530%" y="453" width="0.2431%" height="15" fill="rgb(239,134,19)" fg:x="1073" fg:w="3"/><text x="87.2030%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="86.9530%" y="437" width="0.2431%" height="15" fill="rgb(250,140,9)" fg:x="1073" fg:w="3"/><text x="87.2030%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="86.9530%" y="421" width="0.2431%" height="15" fill="rgb(225,59,14)" fg:x="1073" fg:w="3"/><text x="87.2030%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="86.9530%" y="405" width="0.2431%" height="15" fill="rgb(214,152,51)" fg:x="1073" fg:w="3"/><text x="87.2030%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="86.9530%" y="389" width="0.2431%" height="15" fill="rgb(251,227,43)" fg:x="1073" fg:w="3"/><text x="87.2030%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.1151%" y="373" width="0.0810%" height="15" fill="rgb(241,96,17)" fg:x="1075" fg:w="1"/><text x="87.3651%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="87.2771%" y="325" width="0.0810%" height="15" fill="rgb(234,198,43)" fg:x="1077" fg:w="1"/><text x="87.5271%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="87.2771%" y="309" width="0.0810%" height="15" fill="rgb(220,108,29)" fg:x="1077" fg:w="1"/><text x="87.5271%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.2771%" y="293" width="0.0810%" height="15" fill="rgb(226,163,33)" fg:x="1077" fg:w="1"/><text x="87.5271%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="87.3582%" y="309" width="0.0810%" height="15" fill="rgb(205,194,45)" fg:x="1078" fg:w="1"/><text x="87.6082%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="87.3582%" y="293" width="0.0810%" height="15" fill="rgb(206,143,44)" fg:x="1078" fg:w="1"/><text x="87.6082%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.3582%" y="277" width="0.0810%" height="15" fill="rgb(236,136,36)" fg:x="1078" fg:w="1"/><text x="87.6082%" y="287.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (3 samples, 0.24%)</title><rect x="87.2771%" y="357" width="0.2431%" height="15" fill="rgb(249,172,42)" fg:x="1077" fg:w="3"/><text x="87.5271%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="87.2771%" y="341" width="0.2431%" height="15" fill="rgb(216,139,23)" fg:x="1077" fg:w="3"/><text x="87.5271%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="87.3582%" y="325" width="0.1621%" height="15" fill="rgb(207,166,20)" fg:x="1078" fg:w="2"/><text x="87.6082%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="87.4392%" y="309" width="0.0810%" height="15" fill="rgb(210,209,22)" fg:x="1079" fg:w="1"/><text x="87.6892%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="87.4392%" y="293" width="0.0810%" height="15" fill="rgb(232,118,20)" fg:x="1079" fg:w="1"/><text x="87.6892%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="87.4392%" y="277" width="0.0810%" height="15" fill="rgb(238,113,42)" fg:x="1079" fg:w="1"/><text x="87.6892%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="87.4392%" y="261" width="0.0810%" height="15" fill="rgb(231,42,5)" fg:x="1079" fg:w="1"/><text x="87.6892%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.4392%" y="245" width="0.0810%" height="15" fill="rgb(243,166,24)" fg:x="1079" fg:w="1"/><text x="87.6892%" y="255.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (4 samples, 0.32%)</title><rect x="87.2771%" y="389" width="0.3241%" height="15" fill="rgb(237,226,12)" fg:x="1077" fg:w="4"/><text x="87.5271%" y="399.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (4 samples, 0.32%)</title><rect x="87.2771%" y="373" width="0.3241%" height="15" fill="rgb(229,133,24)" fg:x="1077" fg:w="4"/><text x="87.5271%" y="383.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="87.5203%" y="357" width="0.0810%" height="15" fill="rgb(238,33,43)" fg:x="1080" fg:w="1"/><text x="87.7703%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.5203%" y="341" width="0.0810%" height="15" fill="rgb(227,59,38)" fg:x="1080" fg:w="1"/><text x="87.7703%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.5203%" y="325" width="0.0810%" height="15" fill="rgb(230,97,0)" fg:x="1080" fg:w="1"/><text x="87.7703%" y="335.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="87.5203%" y="309" width="0.0810%" height="15" fill="rgb(250,173,50)" fg:x="1080" fg:w="1"/><text x="87.7703%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="87.6823%" y="357" width="0.0810%" height="15" fill="rgb(240,15,50)" fg:x="1082" fg:w="1"/><text x="87.9323%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.6823%" y="341" width="0.0810%" height="15" fill="rgb(221,93,22)" fg:x="1082" fg:w="1"/><text x="87.9323%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.6823%" y="325" width="0.0810%" height="15" fill="rgb(245,180,53)" fg:x="1082" fg:w="1"/><text x="87.9323%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="87.7634%" y="357" width="0.0810%" height="15" fill="rgb(231,88,51)" fg:x="1083" fg:w="1"/><text x="88.0134%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="87.7634%" y="341" width="0.0810%" height="15" fill="rgb(240,58,21)" fg:x="1083" fg:w="1"/><text x="88.0134%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.7634%" y="325" width="0.0810%" height="15" fill="rgb(237,21,10)" fg:x="1083" fg:w="1"/><text x="88.0134%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.7634%" y="309" width="0.0810%" height="15" fill="rgb(218,43,11)" fg:x="1083" fg:w="1"/><text x="88.0134%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="87.7634%" y="293" width="0.0810%" height="15" fill="rgb(218,221,29)" fg:x="1083" fg:w="1"/><text x="88.0134%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.7634%" y="277" width="0.0810%" height="15" fill="rgb(214,118,42)" fg:x="1083" fg:w="1"/><text x="88.0134%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="87.7634%" y="261" width="0.0810%" height="15" fill="rgb(251,200,26)" fg:x="1083" fg:w="1"/><text x="88.0134%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.7634%" y="245" width="0.0810%" height="15" fill="rgb(237,101,39)" fg:x="1083" fg:w="1"/><text x="88.0134%" y="255.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="87.8444%" y="357" width="0.0810%" height="15" fill="rgb(251,117,11)" fg:x="1084" fg:w="1"/><text x="88.0944%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="87.8444%" y="341" width="0.0810%" height="15" fill="rgb(216,223,23)" fg:x="1084" fg:w="1"/><text x="88.0944%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.9254%" y="341" width="0.0810%" height="15" fill="rgb(251,54,12)" fg:x="1085" fg:w="1"/><text x="88.1754%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="87.9254%" y="357" width="0.1621%" height="15" fill="rgb(254,176,54)" fg:x="1085" fg:w="2"/><text x="88.1754%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.0065%" y="341" width="0.0810%" height="15" fill="rgb(210,32,8)" fg:x="1086" fg:w="1"/><text x="88.2565%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.0875%" y="325" width="0.0810%" height="15" fill="rgb(235,52,38)" fg:x="1087" fg:w="1"/><text x="88.3375%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.0875%" y="309" width="0.0810%" height="15" fill="rgb(231,4,44)" fg:x="1087" fg:w="1"/><text x="88.3375%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.0875%" y="293" width="0.0810%" height="15" fill="rgb(249,2,32)" fg:x="1087" fg:w="1"/><text x="88.3375%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="88.0875%" y="341" width="0.1621%" height="15" fill="rgb(224,65,26)" fg:x="1087" fg:w="2"/><text x="88.3375%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.1686%" y="325" width="0.0810%" height="15" fill="rgb(250,73,40)" fg:x="1088" fg:w="1"/><text x="88.4186%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.1686%" y="309" width="0.0810%" height="15" fill="rgb(253,177,16)" fg:x="1088" fg:w="1"/><text x="88.4186%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="88.1686%" y="293" width="0.0810%" height="15" fill="rgb(217,32,34)" fg:x="1088" fg:w="1"/><text x="88.4186%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.1686%" y="277" width="0.0810%" height="15" fill="rgb(212,7,10)" fg:x="1088" fg:w="1"/><text x="88.4186%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.1686%" y="261" width="0.0810%" height="15" fill="rgb(245,89,8)" fg:x="1088" fg:w="1"/><text x="88.4186%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="88.1686%" y="245" width="0.0810%" height="15" fill="rgb(237,16,53)" fg:x="1088" fg:w="1"/><text x="88.4186%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.2496%" y="341" width="0.0810%" height="15" fill="rgb(250,204,30)" fg:x="1089" fg:w="1"/><text x="88.4996%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="88.3306%" y="341" width="0.0810%" height="15" fill="rgb(208,77,27)" fg:x="1090" fg:w="1"/><text x="88.5806%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::gid (5 samples, 0.41%)</title><rect x="88.0875%" y="357" width="0.4052%" height="15" fill="rgb(250,204,28)" fg:x="1087" fg:w="5"/><text x="88.3375%" y="367.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="88.4117%" y="341" width="0.0810%" height="15" fill="rgb(244,63,21)" fg:x="1091" fg:w="1"/><text x="88.6617%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="88.4117%" y="325" width="0.0810%" height="15" fill="rgb(236,85,44)" fg:x="1091" fg:w="1"/><text x="88.6617%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="88.4117%" y="309" width="0.0810%" height="15" fill="rgb(215,98,4)" fg:x="1091" fg:w="1"/><text x="88.6617%" y="319.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="88.4927%" y="357" width="0.0810%" height="15" fill="rgb(235,38,11)" fg:x="1092" fg:w="1"/><text x="88.7427%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="88.4927%" y="341" width="0.0810%" height="15" fill="rgb(254,186,25)" fg:x="1092" fg:w="1"/><text x="88.7427%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="88.7358%" y="213" width="0.0810%" height="15" fill="rgb(225,55,31)" fg:x="1095" fg:w="1"/><text x="88.9858%" y="223.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="88.7358%" y="197" width="0.0810%" height="15" fill="rgb(211,15,21)" fg:x="1095" fg:w="1"/><text x="88.9858%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="88.6548%" y="277" width="0.3241%" height="15" fill="rgb(215,187,41)" fg:x="1094" fg:w="4"/><text x="88.9048%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="88.6548%" y="261" width="0.3241%" height="15" fill="rgb(248,69,32)" fg:x="1094" fg:w="4"/><text x="88.9048%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.32%)</title><rect x="88.6548%" y="245" width="0.3241%" height="15" fill="rgb(252,102,52)" fg:x="1094" fg:w="4"/><text x="88.9048%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="88.6548%" y="229" width="0.3241%" height="15" fill="rgb(253,140,32)" fg:x="1094" fg:w="4"/><text x="88.9048%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="88.8169%" y="213" width="0.1621%" height="15" fill="rgb(216,56,42)" fg:x="1096" fg:w="2"/><text x="89.0669%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.8979%" y="197" width="0.0810%" height="15" fill="rgb(216,184,14)" fg:x="1097" fg:w="1"/><text x="89.1479%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="88.8979%" y="181" width="0.0810%" height="15" fill="rgb(237,187,27)" fg:x="1097" fg:w="1"/><text x="89.1479%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.9789%" y="261" width="0.0810%" height="15" fill="rgb(219,65,3)" fg:x="1098" fg:w="1"/><text x="89.2289%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="88.9789%" y="277" width="0.1621%" height="15" fill="rgb(245,83,25)" fg:x="1098" fg:w="2"/><text x="89.2289%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="89.0600%" y="261" width="0.0810%" height="15" fill="rgb(214,205,45)" fg:x="1099" fg:w="1"/><text x="89.3100%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="89.0600%" y="245" width="0.0810%" height="15" fill="rgb(241,20,18)" fg:x="1099" fg:w="1"/><text x="89.3100%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="89.0600%" y="229" width="0.0810%" height="15" fill="rgb(232,163,23)" fg:x="1099" fg:w="1"/><text x="89.3100%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="89.0600%" y="213" width="0.0810%" height="15" fill="rgb(214,5,46)" fg:x="1099" fg:w="1"/><text x="89.3100%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::RegexInfoI&gt; (1 samples, 0.08%)</title><rect x="89.0600%" y="197" width="0.0810%" height="15" fill="rgb(229,78,17)" fg:x="1099" fg:w="1"/><text x="89.3100%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="89.3031%" y="229" width="0.0810%" height="15" fill="rgb(248,89,10)" fg:x="1102" fg:w="1"/><text x="89.5531%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.3031%" y="213" width="0.0810%" height="15" fill="rgb(248,54,15)" fg:x="1102" fg:w="1"/><text x="89.5531%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.3031%" y="197" width="0.0810%" height="15" fill="rgb(223,116,6)" fg:x="1102" fg:w="1"/><text x="89.5531%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="89.3841%" y="229" width="0.0810%" height="15" fill="rgb(205,125,38)" fg:x="1103" fg:w="1"/><text x="89.6341%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.65%)</title><rect x="89.5462%" y="213" width="0.6483%" height="15" fill="rgb(251,78,38)" fg:x="1105" fg:w="8"/><text x="89.7962%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.57%)</title><rect x="89.6272%" y="197" width="0.5673%" height="15" fill="rgb(253,78,28)" fg:x="1106" fg:w="7"/><text x="89.8772%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="90.1945%" y="213" width="0.0810%" height="15" fill="rgb(209,120,3)" fg:x="1113" fg:w="1"/><text x="90.4445%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="90.1945%" y="197" width="0.0810%" height="15" fill="rgb(238,229,9)" fg:x="1113" fg:w="1"/><text x="90.4445%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="90.2755%" y="213" width="0.0810%" height="15" fill="rgb(253,159,18)" fg:x="1114" fg:w="1"/><text x="90.5255%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="90.2755%" y="197" width="0.0810%" height="15" fill="rgb(244,42,34)" fg:x="1114" fg:w="1"/><text x="90.5255%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="90.5186%" y="149" width="0.0810%" height="15" fill="rgb(224,8,7)" fg:x="1117" fg:w="1"/><text x="90.7686%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.5186%" y="133" width="0.0810%" height="15" fill="rgb(210,201,45)" fg:x="1117" fg:w="1"/><text x="90.7686%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.5186%" y="117" width="0.0810%" height="15" fill="rgb(252,185,21)" fg:x="1117" fg:w="1"/><text x="90.7686%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="90.5997%" y="149" width="0.0810%" height="15" fill="rgb(223,131,1)" fg:x="1118" fg:w="1"/><text x="90.8497%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="90.6807%" y="117" width="0.0810%" height="15" fill="rgb(245,141,16)" fg:x="1119" fg:w="1"/><text x="90.9307%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="90.6807%" y="101" width="0.0810%" height="15" fill="rgb(229,55,45)" fg:x="1119" fg:w="1"/><text x="90.9307%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (14 samples, 1.13%)</title><rect x="90.6807%" y="149" width="1.1345%" height="15" fill="rgb(208,92,15)" fg:x="1119" fg:w="14"/><text x="90.9307%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (14 samples, 1.13%)</title><rect x="90.6807%" y="133" width="1.1345%" height="15" fill="rgb(234,185,47)" fg:x="1119" fg:w="14"/><text x="90.9307%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (13 samples, 1.05%)</title><rect x="90.7618%" y="117" width="1.0535%" height="15" fill="rgb(253,104,50)" fg:x="1120" fg:w="13"/><text x="91.0118%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 1.54%)</title><rect x="90.4376%" y="197" width="1.5397%" height="15" fill="rgb(205,70,7)" fg:x="1116" fg:w="19"/><text x="90.6876%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (19 samples, 1.54%)</title><rect x="90.4376%" y="181" width="1.5397%" height="15" fill="rgb(240,178,43)" fg:x="1116" fg:w="19"/><text x="90.6876%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (19 samples, 1.54%)</title><rect x="90.4376%" y="165" width="1.5397%" height="15" fill="rgb(214,112,2)" fg:x="1116" fg:w="19"/><text x="90.6876%" y="175.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="91.8152%" y="149" width="0.1621%" height="15" fill="rgb(206,46,17)" fg:x="1133" fg:w="2"/><text x="92.0652%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.8963%" y="133" width="0.0810%" height="15" fill="rgb(225,220,16)" fg:x="1134" fg:w="1"/><text x="92.1463%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.9773%" y="181" width="0.0810%" height="15" fill="rgb(238,65,40)" fg:x="1135" fg:w="1"/><text x="92.2273%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.2204%" y="133" width="0.0810%" height="15" fill="rgb(230,151,21)" fg:x="1138" fg:w="1"/><text x="92.4704%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (26 samples, 2.11%)</title><rect x="90.3566%" y="213" width="2.1070%" height="15" fill="rgb(218,58,49)" fg:x="1115" fg:w="26"/><text x="90.6066%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.49%)</title><rect x="91.9773%" y="197" width="0.4862%" height="15" fill="rgb(219,179,14)" fg:x="1135" fg:w="6"/><text x="92.2273%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.41%)</title><rect x="92.0583%" y="181" width="0.4052%" height="15" fill="rgb(223,72,1)" fg:x="1136" fg:w="5"/><text x="92.3083%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="92.1394%" y="165" width="0.3241%" height="15" fill="rgb(238,126,10)" fg:x="1137" fg:w="4"/><text x="92.3894%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="92.2204%" y="149" width="0.2431%" height="15" fill="rgb(224,206,38)" fg:x="1138" fg:w="3"/><text x="92.4704%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="92.3015%" y="133" width="0.1621%" height="15" fill="rgb(212,201,54)" fg:x="1139" fg:w="2"/><text x="92.5515%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="92.4635%" y="213" width="0.0810%" height="15" fill="rgb(218,154,48)" fg:x="1141" fg:w="1"/><text x="92.7135%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="92.4635%" y="197" width="0.0810%" height="15" fill="rgb(232,93,24)" fg:x="1141" fg:w="1"/><text x="92.7135%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="92.4635%" y="181" width="0.0810%" height="15" fill="rgb(245,30,21)" fg:x="1141" fg:w="1"/><text x="92.7135%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (39 samples, 3.16%)</title><rect x="89.4652%" y="229" width="3.1605%" height="15" fill="rgb(242,148,29)" fg:x="1104" fg:w="39"/><text x="89.7152%" y="239.50">reg..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="92.5446%" y="213" width="0.0810%" height="15" fill="rgb(244,153,54)" fg:x="1142" fg:w="1"/><text x="92.7946%" y="223.50"></text></g><g><title>regex_syntax::hir::literal::Seq::union (1 samples, 0.08%)</title><rect x="92.5446%" y="197" width="0.0810%" height="15" fill="rgb(252,87,22)" fg:x="1142" fg:w="1"/><text x="92.7946%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="92.6256%" y="181" width="0.0810%" height="15" fill="rgb(210,51,29)" fg:x="1143" fg:w="1"/><text x="92.8756%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (46 samples, 3.73%)</title><rect x="89.1410%" y="277" width="3.7277%" height="15" fill="rgb(242,136,47)" fg:x="1100" fg:w="46"/><text x="89.3910%" y="287.50">rege..</text></g><g><title>regex::builders::string::RegexBuilder::build (46 samples, 3.73%)</title><rect x="89.1410%" y="261" width="3.7277%" height="15" fill="rgb(238,68,4)" fg:x="1100" fg:w="46"/><text x="89.3910%" y="271.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (45 samples, 3.65%)</title><rect x="89.2220%" y="245" width="3.6467%" height="15" fill="rgb(242,161,30)" fg:x="1101" fg:w="45"/><text x="89.4720%" y="255.50">rege..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="92.6256%" y="229" width="0.2431%" height="15" fill="rgb(218,58,44)" fg:x="1143" fg:w="3"/><text x="92.8756%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="92.6256%" y="213" width="0.2431%" height="15" fill="rgb(252,125,32)" fg:x="1143" fg:w="3"/><text x="92.8756%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="92.6256%" y="197" width="0.2431%" height="15" fill="rgb(219,178,0)" fg:x="1143" fg:w="3"/><text x="92.8756%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="92.7066%" y="181" width="0.1621%" height="15" fill="rgb(213,152,7)" fg:x="1144" fg:w="2"/><text x="92.9566%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="92.7066%" y="165" width="0.1621%" height="15" fill="rgb(249,109,34)" fg:x="1144" fg:w="2"/><text x="92.9566%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="92.7066%" y="149" width="0.1621%" height="15" fill="rgb(232,96,21)" fg:x="1144" fg:w="2"/><text x="92.9566%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="92.7066%" y="133" width="0.1621%" height="15" fill="rgb(228,27,39)" fg:x="1144" fg:w="2"/><text x="92.9566%" y="143.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="92.8687%" y="229" width="0.2431%" height="15" fill="rgb(211,182,52)" fg:x="1146" fg:w="3"/><text x="93.1187%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="92.8687%" y="213" width="0.2431%" height="15" fill="rgb(234,178,38)" fg:x="1146" fg:w="3"/><text x="93.1187%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="93.0308%" y="197" width="0.0810%" height="15" fill="rgb(221,111,3)" fg:x="1148" fg:w="1"/><text x="93.2808%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (57 samples, 4.62%)</title><rect x="88.5737%" y="293" width="4.6191%" height="15" fill="rgb(228,175,21)" fg:x="1093" fg:w="57"/><text x="88.8237%" y="303.50">indef..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="92.8687%" y="277" width="0.3241%" height="15" fill="rgb(228,174,43)" fg:x="1146" fg:w="4"/><text x="93.1187%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="92.8687%" y="261" width="0.3241%" height="15" fill="rgb(211,191,0)" fg:x="1146" fg:w="4"/><text x="93.1187%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="92.8687%" y="245" width="0.3241%" height="15" fill="rgb(253,117,3)" fg:x="1146" fg:w="4"/><text x="93.1187%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="93.1118%" y="229" width="0.0810%" height="15" fill="rgb(241,127,19)" fg:x="1149" fg:w="1"/><text x="93.3618%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="93.1118%" y="213" width="0.0810%" height="15" fill="rgb(218,103,12)" fg:x="1149" fg:w="1"/><text x="93.3618%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.1118%" y="197" width="0.0810%" height="15" fill="rgb(236,214,43)" fg:x="1149" fg:w="1"/><text x="93.3618%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.1118%" y="181" width="0.0810%" height="15" fill="rgb(244,144,19)" fg:x="1149" fg:w="1"/><text x="93.3618%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.1118%" y="165" width="0.0810%" height="15" fill="rgb(246,188,10)" fg:x="1149" fg:w="1"/><text x="93.3618%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="93.1929%" y="277" width="0.1621%" height="15" fill="rgb(212,193,33)" fg:x="1150" fg:w="2"/><text x="93.4429%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="93.1929%" y="261" width="0.1621%" height="15" fill="rgb(241,51,29)" fg:x="1150" fg:w="2"/><text x="93.4429%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="93.1929%" y="245" width="0.1621%" height="15" fill="rgb(211,58,19)" fg:x="1150" fg:w="2"/><text x="93.4429%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="93.1929%" y="229" width="0.1621%" height="15" fill="rgb(229,111,26)" fg:x="1150" fg:w="2"/><text x="93.4429%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="93.1929%" y="213" width="0.1621%" height="15" fill="rgb(213,115,40)" fg:x="1150" fg:w="2"/><text x="93.4429%" y="223.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (3 samples, 0.24%)</title><rect x="93.3549%" y="277" width="0.2431%" height="15" fill="rgb(209,56,44)" fg:x="1152" fg:w="3"/><text x="93.6049%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="93.3549%" y="261" width="0.2431%" height="15" fill="rgb(230,108,32)" fg:x="1152" fg:w="3"/><text x="93.6049%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="93.3549%" y="245" width="0.2431%" height="15" fill="rgb(216,165,31)" fg:x="1152" fg:w="3"/><text x="93.6049%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="93.3549%" y="229" width="0.2431%" height="15" fill="rgb(218,122,21)" fg:x="1152" fg:w="3"/><text x="93.6049%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="93.3549%" y="213" width="0.2431%" height="15" fill="rgb(223,224,47)" fg:x="1152" fg:w="3"/><text x="93.6049%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="93.3549%" y="197" width="0.2431%" height="15" fill="rgb(238,102,44)" fg:x="1152" fg:w="3"/><text x="93.6049%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="93.5170%" y="181" width="0.0810%" height="15" fill="rgb(236,46,40)" fg:x="1154" fg:w="1"/><text x="93.7670%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="93.5981%" y="229" width="0.0810%" height="15" fill="rgb(247,202,50)" fg:x="1155" fg:w="1"/><text x="93.8481%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.5981%" y="213" width="0.0810%" height="15" fill="rgb(209,99,20)" fg:x="1155" fg:w="1"/><text x="93.8481%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="93.5981%" y="197" width="0.0810%" height="15" fill="rgb(252,27,34)" fg:x="1155" fg:w="1"/><text x="93.8481%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.5981%" y="181" width="0.0810%" height="15" fill="rgb(215,206,23)" fg:x="1155" fg:w="1"/><text x="93.8481%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.5981%" y="165" width="0.0810%" height="15" fill="rgb(212,135,36)" fg:x="1155" fg:w="1"/><text x="93.8481%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.41%)</title><rect x="93.6791%" y="213" width="0.4052%" height="15" fill="rgb(240,189,1)" fg:x="1156" fg:w="5"/><text x="93.9291%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.41%)</title><rect x="93.6791%" y="197" width="0.4052%" height="15" fill="rgb(242,56,20)" fg:x="1156" fg:w="5"/><text x="93.9291%" y="207.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="93.9222%" y="181" width="0.1621%" height="15" fill="rgb(247,132,33)" fg:x="1159" fg:w="2"/><text x="94.1722%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.0843%" y="181" width="0.0810%" height="15" fill="rgb(208,149,11)" fg:x="1161" fg:w="1"/><text x="94.3343%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (3 samples, 0.24%)</title><rect x="94.0843%" y="213" width="0.2431%" height="15" fill="rgb(211,33,11)" fg:x="1161" fg:w="3"/><text x="94.3343%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="94.0843%" y="197" width="0.2431%" height="15" fill="rgb(221,29,38)" fg:x="1161" fg:w="3"/><text x="94.3343%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="94.1653%" y="181" width="0.1621%" height="15" fill="rgb(206,182,49)" fg:x="1162" fg:w="2"/><text x="94.4153%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="94.2464%" y="165" width="0.0810%" height="15" fill="rgb(216,140,1)" fg:x="1163" fg:w="1"/><text x="94.4964%" y="175.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="94.4084%" y="101" width="0.0810%" height="15" fill="rgb(232,57,40)" fg:x="1165" fg:w="1"/><text x="94.6584%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="94.4895%" y="101" width="0.1621%" height="15" fill="rgb(224,186,18)" fg:x="1166" fg:w="2"/><text x="94.7395%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.5705%" y="85" width="0.0810%" height="15" fill="rgb(215,121,11)" fg:x="1167" fg:w="1"/><text x="94.8205%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.5705%" y="69" width="0.0810%" height="15" fill="rgb(245,147,10)" fg:x="1167" fg:w="1"/><text x="94.8205%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.5705%" y="53" width="0.0810%" height="15" fill="rgb(238,153,13)" fg:x="1167" fg:w="1"/><text x="94.8205%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="94.6515%" y="101" width="0.2431%" height="15" fill="rgb(233,108,0)" fg:x="1168" fg:w="3"/><text x="94.9015%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="94.8136%" y="85" width="0.0810%" height="15" fill="rgb(212,157,17)" fg:x="1170" fg:w="1"/><text x="95.0636%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="94.8136%" y="69" width="0.0810%" height="15" fill="rgb(225,213,38)" fg:x="1170" fg:w="1"/><text x="95.0636%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (13 samples, 1.05%)</title><rect x="94.8947%" y="101" width="1.0535%" height="15" fill="rgb(248,16,11)" fg:x="1171" fg:w="13"/><text x="95.1447%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (13 samples, 1.05%)</title><rect x="94.8947%" y="85" width="1.0535%" height="15" fill="rgb(241,33,4)" fg:x="1171" fg:w="13"/><text x="95.1447%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (13 samples, 1.05%)</title><rect x="94.8947%" y="69" width="1.0535%" height="15" fill="rgb(222,26,43)" fg:x="1171" fg:w="13"/><text x="95.1447%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="95.9481%" y="101" width="0.0810%" height="15" fill="rgb(243,29,36)" fg:x="1184" fg:w="1"/><text x="96.1981%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 1.86%)</title><rect x="94.3274%" y="197" width="1.8639%" height="15" fill="rgb(241,9,27)" fg:x="1164" fg:w="23"/><text x="94.5774%" y="207.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (23 samples, 1.86%)</title><rect x="94.3274%" y="181" width="1.8639%" height="15" fill="rgb(205,117,26)" fg:x="1164" fg:w="23"/><text x="94.5774%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (23 samples, 1.86%)</title><rect x="94.3274%" y="165" width="1.8639%" height="15" fill="rgb(209,80,39)" fg:x="1164" fg:w="23"/><text x="94.5774%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (23 samples, 1.86%)</title><rect x="94.3274%" y="149" width="1.8639%" height="15" fill="rgb(239,155,6)" fg:x="1164" fg:w="23"/><text x="94.5774%" y="159.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (23 samples, 1.86%)</title><rect x="94.3274%" y="133" width="1.8639%" height="15" fill="rgb(212,104,12)" fg:x="1164" fg:w="23"/><text x="94.5774%" y="143.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (23 samples, 1.86%)</title><rect x="94.3274%" y="117" width="1.8639%" height="15" fill="rgb(234,204,3)" fg:x="1164" fg:w="23"/><text x="94.5774%" y="127.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="96.0292%" y="101" width="0.1621%" height="15" fill="rgb(251,218,7)" fg:x="1185" fg:w="2"/><text x="96.2792%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="96.0292%" y="85" width="0.1621%" height="15" fill="rgb(221,81,32)" fg:x="1185" fg:w="2"/><text x="96.2792%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="96.0292%" y="69" width="0.1621%" height="15" fill="rgb(214,152,26)" fg:x="1185" fg:w="2"/><text x="96.2792%" y="79.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="96.0292%" y="53" width="0.1621%" height="15" fill="rgb(223,22,3)" fg:x="1185" fg:w="2"/><text x="96.2792%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="96.2723%" y="181" width="0.1621%" height="15" fill="rgb(207,174,7)" fg:x="1188" fg:w="2"/><text x="96.5223%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="96.2723%" y="165" width="0.1621%" height="15" fill="rgb(224,19,52)" fg:x="1188" fg:w="2"/><text x="96.5223%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="96.2723%" y="149" width="0.1621%" height="15" fill="rgb(228,24,14)" fg:x="1188" fg:w="2"/><text x="96.5223%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="96.2723%" y="133" width="0.1621%" height="15" fill="rgb(230,153,43)" fg:x="1188" fg:w="2"/><text x="96.5223%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (36 samples, 2.92%)</title><rect x="93.6791%" y="229" width="2.9173%" height="15" fill="rgb(231,106,12)" fg:x="1156" fg:w="36"/><text x="93.9291%" y="239.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (28 samples, 2.27%)</title><rect x="94.3274%" y="213" width="2.2690%" height="15" fill="rgb(215,92,2)" fg:x="1164" fg:w="28"/><text x="94.5774%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.41%)</title><rect x="96.1912%" y="197" width="0.4052%" height="15" fill="rgb(249,143,25)" fg:x="1187" fg:w="5"/><text x="96.4412%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="96.4344%" y="181" width="0.1621%" height="15" fill="rgb(252,7,35)" fg:x="1190" fg:w="2"/><text x="96.6844%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="96.5964%" y="197" width="0.0810%" height="15" fill="rgb(216,69,40)" fg:x="1192" fg:w="1"/><text x="96.8464%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="96.5964%" y="181" width="0.0810%" height="15" fill="rgb(240,36,33)" fg:x="1192" fg:w="1"/><text x="96.8464%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="96.5964%" y="165" width="0.0810%" height="15" fill="rgb(231,128,14)" fg:x="1192" fg:w="1"/><text x="96.8464%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="96.5964%" y="229" width="0.1621%" height="15" fill="rgb(245,143,14)" fg:x="1192" fg:w="2"/><text x="96.8464%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="96.5964%" y="213" width="0.1621%" height="15" fill="rgb(222,130,28)" fg:x="1192" fg:w="2"/><text x="96.8464%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.6775%" y="197" width="0.0810%" height="15" fill="rgb(212,10,48)" fg:x="1193" fg:w="1"/><text x="96.9275%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.6775%" y="181" width="0.0810%" height="15" fill="rgb(254,118,45)" fg:x="1193" fg:w="1"/><text x="96.9275%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.6775%" y="165" width="0.0810%" height="15" fill="rgb(228,6,45)" fg:x="1193" fg:w="1"/><text x="96.9275%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.6775%" y="149" width="0.0810%" height="15" fill="rgb(241,18,35)" fg:x="1193" fg:w="1"/><text x="96.9275%" y="159.50"></text></g><g><title>indefinite::rules::number::Number::check (46 samples, 3.73%)</title><rect x="93.1929%" y="293" width="3.7277%" height="15" fill="rgb(227,214,53)" fg:x="1150" fg:w="46"/><text x="93.4429%" y="303.50">inde..</text></g><g><title>regex::regex::string::Regex::new (41 samples, 3.32%)</title><rect x="93.5981%" y="277" width="3.3225%" height="15" fill="rgb(224,107,51)" fg:x="1155" fg:w="41"/><text x="93.8481%" y="287.50">reg..</text></g><g><title>regex::builders::string::RegexBuilder::build (41 samples, 3.32%)</title><rect x="93.5981%" y="261" width="3.3225%" height="15" fill="rgb(248,60,28)" fg:x="1155" fg:w="41"/><text x="93.8481%" y="271.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (41 samples, 3.32%)</title><rect x="93.5981%" y="245" width="3.3225%" height="15" fill="rgb(249,101,23)" fg:x="1155" fg:w="41"/><text x="93.8481%" y="255.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="96.7585%" y="229" width="0.1621%" height="15" fill="rgb(228,51,19)" fg:x="1194" fg:w="2"/><text x="97.0085%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="96.7585%" y="213" width="0.1621%" height="15" fill="rgb(213,20,6)" fg:x="1194" fg:w="2"/><text x="97.0085%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="96.8395%" y="197" width="0.0810%" height="15" fill="rgb(212,124,10)" fg:x="1195" fg:w="1"/><text x="97.0895%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="96.9206%" y="149" width="0.0810%" height="15" fill="rgb(248,3,40)" fg:x="1196" fg:w="1"/><text x="97.1706%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="97.0016%" y="149" width="0.0810%" height="15" fill="rgb(223,178,23)" fg:x="1197" fg:w="1"/><text x="97.2516%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="96.9206%" y="181" width="0.3241%" height="15" fill="rgb(240,132,45)" fg:x="1196" fg:w="4"/><text x="97.1706%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (4 samples, 0.32%)</title><rect x="96.9206%" y="165" width="0.3241%" height="15" fill="rgb(245,164,36)" fg:x="1196" fg:w="4"/><text x="97.1706%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="97.0827%" y="149" width="0.1621%" height="15" fill="rgb(231,188,53)" fg:x="1198" fg:w="2"/><text x="97.3327%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="97.1637%" y="133" width="0.0810%" height="15" fill="rgb(237,198,39)" fg:x="1199" fg:w="1"/><text x="97.4137%" y="143.50"></text></g><g><title>regex::regex::string::Regex::new (5 samples, 0.41%)</title><rect x="96.9206%" y="261" width="0.4052%" height="15" fill="rgb(223,120,35)" fg:x="1196" fg:w="5"/><text x="97.1706%" y="271.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (5 samples, 0.41%)</title><rect x="96.9206%" y="245" width="0.4052%" height="15" fill="rgb(253,107,49)" fg:x="1196" fg:w="5"/><text x="97.1706%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (5 samples, 0.41%)</title><rect x="96.9206%" y="229" width="0.4052%" height="15" fill="rgb(216,44,31)" fg:x="1196" fg:w="5"/><text x="97.1706%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (5 samples, 0.41%)</title><rect x="96.9206%" y="213" width="0.4052%" height="15" fill="rgb(253,87,21)" fg:x="1196" fg:w="5"/><text x="97.1706%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (5 samples, 0.41%)</title><rect x="96.9206%" y="197" width="0.4052%" height="15" fill="rgb(226,18,2)" fg:x="1196" fg:w="5"/><text x="97.1706%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="97.2447%" y="181" width="0.0810%" height="15" fill="rgb(216,8,46)" fg:x="1200" fg:w="1"/><text x="97.4947%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="97.2447%" y="165" width="0.0810%" height="15" fill="rgb(226,140,39)" fg:x="1200" fg:w="1"/><text x="97.4947%" y="175.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (122 samples, 9.89%)</title><rect x="87.6013%" y="373" width="9.8865%" height="15" fill="rgb(221,194,54)" fg:x="1081" fg:w="122"/><text x="87.8513%" y="383.50">&lt;&amp;kernel::mode..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (110 samples, 8.91%)</title><rect x="88.5737%" y="357" width="8.9141%" height="15" fill="rgb(213,92,11)" fg:x="1093" fg:w="110"/><text x="88.8237%" y="367.50">plugins_core:..</text></g><g><title>indefinite::indefinite (110 samples, 8.91%)</title><rect x="88.5737%" y="341" width="8.9141%" height="15" fill="rgb(229,162,46)" fg:x="1093" fg:w="110"/><text x="88.8237%" y="351.50">indefinite::i..</text></g><g><title>indefinite::methods::indefinite (110 samples, 8.91%)</title><rect x="88.5737%" y="325" width="8.9141%" height="15" fill="rgb(214,111,36)" fg:x="1093" fg:w="110"/><text x="88.8237%" y="335.50">indefinite::m..</text></g><g><title>indefinite::methods::apply_rules (110 samples, 8.91%)</title><rect x="88.5737%" y="309" width="8.9141%" height="15" fill="rgb(207,6,21)" fg:x="1093" fg:w="110"/><text x="88.8237%" y="319.50">indefinite::m..</text></g><g><title>indefinite::rules::other::Other::run (7 samples, 0.57%)</title><rect x="96.9206%" y="293" width="0.5673%" height="15" fill="rgb(213,127,38)" fg:x="1196" fg:w="7"/><text x="97.1706%" y="303.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (7 samples, 0.57%)</title><rect x="96.9206%" y="277" width="0.5673%" height="15" fill="rgb(238,118,32)" fg:x="1196" fg:w="7"/><text x="97.1706%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="97.3258%" y="261" width="0.1621%" height="15" fill="rgb(240,139,39)" fg:x="1201" fg:w="2"/><text x="97.5758%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="97.3258%" y="245" width="0.1621%" height="15" fill="rgb(235,10,37)" fg:x="1201" fg:w="2"/><text x="97.5758%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="97.3258%" y="229" width="0.1621%" height="15" fill="rgb(249,171,38)" fg:x="1201" fg:w="2"/><text x="97.5758%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="97.3258%" y="213" width="0.1621%" height="15" fill="rgb(242,144,32)" fg:x="1201" fg:w="2"/><text x="97.5758%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="97.3258%" y="197" width="0.1621%" height="15" fill="rgb(217,117,21)" fg:x="1201" fg:w="2"/><text x="97.5758%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="97.4068%" y="181" width="0.0810%" height="15" fill="rgb(249,87,1)" fg:x="1202" fg:w="1"/><text x="97.6568%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.4068%" y="165" width="0.0810%" height="15" fill="rgb(248,196,48)" fg:x="1202" fg:w="1"/><text x="97.6568%" y="175.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.4878%" y="373" width="0.0810%" height="15" fill="rgb(251,206,33)" fg:x="1203" fg:w="1"/><text x="97.7378%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.4878%" y="357" width="0.0810%" height="15" fill="rgb(232,141,28)" fg:x="1203" fg:w="1"/><text x="97.7378%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.4878%" y="341" width="0.0810%" height="15" fill="rgb(209,167,14)" fg:x="1203" fg:w="1"/><text x="97.7378%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.4878%" y="325" width="0.0810%" height="15" fill="rgb(225,11,50)" fg:x="1203" fg:w="1"/><text x="97.7378%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.5689%" y="341" width="0.0810%" height="15" fill="rgb(209,50,20)" fg:x="1204" fg:w="1"/><text x="97.8189%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.5689%" y="325" width="0.0810%" height="15" fill="rgb(212,17,46)" fg:x="1204" fg:w="1"/><text x="97.8189%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6499%" y="309" width="0.0810%" height="15" fill="rgb(216,101,39)" fg:x="1205" fg:w="1"/><text x="97.8999%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6499%" y="293" width="0.0810%" height="15" fill="rgb(212,228,48)" fg:x="1205" fg:w="1"/><text x="97.8999%" y="303.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (3 samples, 0.24%)</title><rect x="97.5689%" y="357" width="0.2431%" height="15" fill="rgb(250,6,50)" fg:x="1204" fg:w="3"/><text x="97.8189%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="97.6499%" y="341" width="0.1621%" height="15" fill="rgb(250,160,48)" fg:x="1205" fg:w="2"/><text x="97.8999%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="97.6499%" y="325" width="0.1621%" height="15" fill="rgb(244,216,33)" fg:x="1205" fg:w="2"/><text x="97.8999%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.7310%" y="309" width="0.0810%" height="15" fill="rgb(207,157,5)" fg:x="1206" fg:w="1"/><text x="97.9810%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7310%" y="293" width="0.0810%" height="15" fill="rgb(228,199,8)" fg:x="1206" fg:w="1"/><text x="97.9810%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.7310%" y="277" width="0.0810%" height="15" fill="rgb(227,80,20)" fg:x="1206" fg:w="1"/><text x="97.9810%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7310%" y="261" width="0.0810%" height="15" fill="rgb(222,9,33)" fg:x="1206" fg:w="1"/><text x="97.9810%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.7310%" y="245" width="0.0810%" height="15" fill="rgb(239,44,28)" fg:x="1206" fg:w="1"/><text x="97.9810%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7310%" y="229" width="0.0810%" height="15" fill="rgb(249,187,43)" fg:x="1206" fg:w="1"/><text x="97.9810%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.8120%" y="293" width="0.0810%" height="15" fill="rgb(216,141,28)" fg:x="1207" fg:w="1"/><text x="98.0620%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.8120%" y="277" width="0.0810%" height="15" fill="rgb(230,154,53)" fg:x="1207" fg:w="1"/><text x="98.0620%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.8120%" y="261" width="0.0810%" height="15" fill="rgb(227,82,4)" fg:x="1207" fg:w="1"/><text x="98.0620%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.8120%" y="245" width="0.0810%" height="15" fill="rgb(220,107,16)" fg:x="1207" fg:w="1"/><text x="98.0620%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.8930%" y="197" width="0.0810%" height="15" fill="rgb(207,187,2)" fg:x="1208" fg:w="1"/><text x="98.1430%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.8930%" y="181" width="0.0810%" height="15" fill="rgb(210,162,52)" fg:x="1208" fg:w="1"/><text x="98.1430%" y="191.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="97.8930%" y="165" width="0.0810%" height="15" fill="rgb(217,216,49)" fg:x="1208" fg:w="1"/><text x="98.1430%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="97.8930%" y="149" width="0.0810%" height="15" fill="rgb(218,146,49)" fg:x="1208" fg:w="1"/><text x="98.1430%" y="159.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="97.8930%" y="293" width="0.1621%" height="15" fill="rgb(216,55,40)" fg:x="1208" fg:w="2"/><text x="98.1430%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.8930%" y="277" width="0.1621%" height="15" fill="rgb(208,196,21)" fg:x="1208" fg:w="2"/><text x="98.1430%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.8930%" y="261" width="0.1621%" height="15" fill="rgb(242,117,42)" fg:x="1208" fg:w="2"/><text x="98.1430%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="97.8930%" y="245" width="0.1621%" height="15" fill="rgb(210,11,23)" fg:x="1208" fg:w="2"/><text x="98.1430%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.8930%" y="229" width="0.1621%" height="15" fill="rgb(217,110,2)" fg:x="1208" fg:w="2"/><text x="98.1430%" y="239.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.8930%" y="213" width="0.1621%" height="15" fill="rgb(229,77,54)" fg:x="1208" fg:w="2"/><text x="98.1430%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9741%" y="197" width="0.0810%" height="15" fill="rgb(218,53,16)" fg:x="1209" fg:w="1"/><text x="98.2241%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9741%" y="181" width="0.0810%" height="15" fill="rgb(215,38,13)" fg:x="1209" fg:w="1"/><text x="98.2241%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.9741%" y="165" width="0.0810%" height="15" fill="rgb(235,42,18)" fg:x="1209" fg:w="1"/><text x="98.2241%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9741%" y="149" width="0.0810%" height="15" fill="rgb(219,66,54)" fg:x="1209" fg:w="1"/><text x="98.2241%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9741%" y="133" width="0.0810%" height="15" fill="rgb(222,205,4)" fg:x="1209" fg:w="1"/><text x="98.2241%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.9741%" y="117" width="0.0810%" height="15" fill="rgb(227,213,46)" fg:x="1209" fg:w="1"/><text x="98.2241%" y="127.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9741%" y="101" width="0.0810%" height="15" fill="rgb(250,145,42)" fg:x="1209" fg:w="1"/><text x="98.2241%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9741%" y="85" width="0.0810%" height="15" fill="rgb(219,15,2)" fg:x="1209" fg:w="1"/><text x="98.2241%" y="95.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.0551%" y="165" width="0.1621%" height="15" fill="rgb(231,181,52)" fg:x="1210" fg:w="2"/><text x="98.3051%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.0551%" y="149" width="0.1621%" height="15" fill="rgb(235,1,42)" fg:x="1210" fg:w="2"/><text x="98.3051%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.1361%" y="133" width="0.0810%" height="15" fill="rgb(249,88,27)" fg:x="1211" fg:w="1"/><text x="98.3861%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.1361%" y="117" width="0.0810%" height="15" fill="rgb(235,145,16)" fg:x="1211" fg:w="1"/><text x="98.3861%" y="127.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.1361%" y="101" width="0.0810%" height="15" fill="rgb(237,114,19)" fg:x="1211" fg:w="1"/><text x="98.3861%" y="111.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="98.1361%" y="85" width="0.0810%" height="15" fill="rgb(238,51,50)" fg:x="1211" fg:w="1"/><text x="98.3861%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.73%)</title><rect x="97.5689%" y="373" width="0.7293%" height="15" fill="rgb(205,194,25)" fg:x="1204" fg:w="9"/><text x="97.8189%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.49%)</title><rect x="97.8120%" y="357" width="0.4862%" height="15" fill="rgb(215,203,17)" fg:x="1207" fg:w="6"/><text x="98.0620%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.49%)</title><rect x="97.8120%" y="341" width="0.4862%" height="15" fill="rgb(233,112,49)" fg:x="1207" fg:w="6"/><text x="98.0620%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.49%)</title><rect x="97.8120%" y="325" width="0.4862%" height="15" fill="rgb(241,130,26)" fg:x="1207" fg:w="6"/><text x="98.0620%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.49%)</title><rect x="97.8120%" y="309" width="0.4862%" height="15" fill="rgb(252,223,19)" fg:x="1207" fg:w="6"/><text x="98.0620%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="98.0551%" y="293" width="0.2431%" height="15" fill="rgb(211,95,25)" fg:x="1210" fg:w="3"/><text x="98.3051%" y="303.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="98.0551%" y="277" width="0.2431%" height="15" fill="rgb(251,182,27)" fg:x="1210" fg:w="3"/><text x="98.3051%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="98.0551%" y="261" width="0.2431%" height="15" fill="rgb(238,24,4)" fg:x="1210" fg:w="3"/><text x="98.3051%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="98.0551%" y="245" width="0.2431%" height="15" fill="rgb(224,220,25)" fg:x="1210" fg:w="3"/><text x="98.3051%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="98.0551%" y="229" width="0.2431%" height="15" fill="rgb(239,133,26)" fg:x="1210" fg:w="3"/><text x="98.3051%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="98.0551%" y="213" width="0.2431%" height="15" fill="rgb(211,94,48)" fg:x="1210" fg:w="3"/><text x="98.3051%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="98.0551%" y="197" width="0.2431%" height="15" fill="rgb(239,87,6)" fg:x="1210" fg:w="3"/><text x="98.3051%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="98.0551%" y="181" width="0.2431%" height="15" fill="rgb(227,62,0)" fg:x="1210" fg:w="3"/><text x="98.3051%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.2172%" y="165" width="0.0810%" height="15" fill="rgb(211,226,4)" fg:x="1212" fg:w="1"/><text x="98.4672%" y="175.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.2172%" y="149" width="0.0810%" height="15" fill="rgb(253,38,52)" fg:x="1212" fg:w="1"/><text x="98.4672%" y="159.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (138 samples, 11.18%)</title><rect x="87.1961%" y="533" width="11.1831%" height="15" fill="rgb(229,126,40)" fg:x="1076" fg:w="138"/><text x="87.4461%" y="543.50">kernel::plugins:..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (138 samples, 11.18%)</title><rect x="87.1961%" y="517" width="11.1831%" height="15" fill="rgb(229,165,44)" fg:x="1076" fg:w="138"/><text x="87.4461%" y="527.50">&lt;plugins_dynlib:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (138 samples, 11.18%)</title><rect x="87.1961%" y="501" width="11.1831%" height="15" fill="rgb(247,95,47)" fg:x="1076" fg:w="138"/><text x="87.4461%" y="511.50">kernel::plugins:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (138 samples, 11.18%)</title><rect x="87.1961%" y="485" width="11.1831%" height="15" fill="rgb(216,140,30)" fg:x="1076" fg:w="138"/><text x="87.4461%" y="495.50">core::ops::funct..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (138 samples, 11.18%)</title><rect x="87.1961%" y="469" width="11.1831%" height="15" fill="rgb(246,214,8)" fg:x="1076" fg:w="138"/><text x="87.4461%" y="479.50">kernel::plugins:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (138 samples, 11.18%)</title><rect x="87.1961%" y="453" width="11.1831%" height="15" fill="rgb(227,224,15)" fg:x="1076" fg:w="138"/><text x="87.4461%" y="463.50">core::ops::funct..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (138 samples, 11.18%)</title><rect x="87.1961%" y="437" width="11.1831%" height="15" fill="rgb(233,175,4)" fg:x="1076" fg:w="138"/><text x="87.4461%" y="447.50">&lt;alloc::boxed::B..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (138 samples, 11.18%)</title><rect x="87.1961%" y="421" width="11.1831%" height="15" fill="rgb(221,66,45)" fg:x="1076" fg:w="138"/><text x="87.4461%" y="431.50">&lt;engine::session..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (137 samples, 11.10%)</title><rect x="87.2771%" y="405" width="11.1021%" height="15" fill="rgb(221,178,18)" fg:x="1077" fg:w="137"/><text x="87.5271%" y="415.50">&lt;plugins_core::l..</text></g><g><title>plugins_core::looking::model::new_area_observation (133 samples, 10.78%)</title><rect x="87.6013%" y="389" width="10.7780%" height="15" fill="rgb(213,81,29)" fg:x="1081" fg:w="133"/><text x="87.8513%" y="399.50">plugins_core::lo..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.2982%" y="373" width="0.0810%" height="15" fill="rgb(220,89,49)" fg:x="1213" fg:w="1"/><text x="98.5482%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.3793%" y="501" width="0.0810%" height="15" fill="rgb(227,60,33)" fg:x="1214" fg:w="1"/><text x="98.6293%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.4603%" y="485" width="0.0810%" height="15" fill="rgb(205,113,12)" fg:x="1215" fg:w="1"/><text x="98.7103%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5413%" y="421" width="0.0810%" height="15" fill="rgb(211,32,1)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5413%" y="405" width="0.0810%" height="15" fill="rgb(246,2,12)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5413%" y="389" width="0.0810%" height="15" fill="rgb(243,37,27)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.5413%" y="373" width="0.0810%" height="15" fill="rgb(248,211,31)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.5413%" y="357" width="0.0810%" height="15" fill="rgb(242,146,47)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.5413%" y="341" width="0.0810%" height="15" fill="rgb(206,70,20)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.5413%" y="325" width="0.0810%" height="15" fill="rgb(215,10,51)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.5413%" y="309" width="0.0810%" height="15" fill="rgb(243,178,53)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.5413%" y="293" width="0.0810%" height="15" fill="rgb(233,221,20)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.5413%" y="277" width="0.0810%" height="15" fill="rgb(218,95,35)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.5413%" y="261" width="0.0810%" height="15" fill="rgb(229,13,5)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.5413%" y="245" width="0.0810%" height="15" fill="rgb(252,164,30)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.5413%" y="229" width="0.0810%" height="15" fill="rgb(232,68,36)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.5413%" y="213" width="0.0810%" height="15" fill="rgb(219,59,54)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.5413%" y="197" width="0.0810%" height="15" fill="rgb(250,92,33)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.6224%" y="293" width="0.0810%" height="15" fill="rgb(229,162,54)" fg:x="1217" fg:w="1"/><text x="98.8724%" y="303.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="98.6224%" y="421" width="0.1621%" height="15" fill="rgb(244,114,52)" fg:x="1217" fg:w="2"/><text x="98.8724%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.6224%" y="405" width="0.1621%" height="15" fill="rgb(212,211,43)" fg:x="1217" fg:w="2"/><text x="98.8724%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.6224%" y="389" width="0.1621%" height="15" fill="rgb(226,147,8)" fg:x="1217" fg:w="2"/><text x="98.8724%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="98.6224%" y="373" width="0.1621%" height="15" fill="rgb(226,23,13)" fg:x="1217" fg:w="2"/><text x="98.8724%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.6224%" y="357" width="0.1621%" height="15" fill="rgb(240,63,4)" fg:x="1217" fg:w="2"/><text x="98.8724%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.6224%" y="341" width="0.1621%" height="15" fill="rgb(221,1,32)" fg:x="1217" fg:w="2"/><text x="98.8724%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.6224%" y="325" width="0.1621%" height="15" fill="rgb(242,117,10)" fg:x="1217" fg:w="2"/><text x="98.8724%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.6224%" y="309" width="0.1621%" height="15" fill="rgb(249,172,44)" fg:x="1217" fg:w="2"/><text x="98.8724%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.7034%" y="293" width="0.0810%" height="15" fill="rgb(244,46,45)" fg:x="1218" fg:w="1"/><text x="98.9534%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.7034%" y="277" width="0.0810%" height="15" fill="rgb(206,43,17)" fg:x="1218" fg:w="1"/><text x="98.9534%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.7034%" y="261" width="0.0810%" height="15" fill="rgb(239,218,39)" fg:x="1218" fg:w="1"/><text x="98.9534%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7034%" y="245" width="0.0810%" height="15" fill="rgb(208,169,54)" fg:x="1218" fg:w="1"/><text x="98.9534%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7034%" y="229" width="0.0810%" height="15" fill="rgb(247,25,42)" fg:x="1218" fg:w="1"/><text x="98.9534%" y="239.50"></text></g><g><title>plugins_core::tools::contained_by (5 samples, 0.41%)</title><rect x="98.4603%" y="501" width="0.4052%" height="15" fill="rgb(226,23,31)" fg:x="1215" fg:w="5"/><text x="98.7103%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.32%)</title><rect x="98.5413%" y="485" width="0.3241%" height="15" fill="rgb(247,16,28)" fg:x="1216" fg:w="4"/><text x="98.7913%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.32%)</title><rect x="98.5413%" y="469" width="0.3241%" height="15" fill="rgb(231,147,38)" fg:x="1216" fg:w="4"/><text x="98.7913%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="98.5413%" y="453" width="0.3241%" height="15" fill="rgb(253,81,48)" fg:x="1216" fg:w="4"/><text x="98.7913%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="98.5413%" y="437" width="0.3241%" height="15" fill="rgb(249,222,43)" fg:x="1216" fg:w="4"/><text x="98.7913%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="98.7844%" y="421" width="0.0810%" height="15" fill="rgb(221,3,27)" fg:x="1219" fg:w="1"/><text x="99.0344%" y="431.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.7844%" y="405" width="0.0810%" height="15" fill="rgb(228,180,5)" fg:x="1219" fg:w="1"/><text x="99.0344%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.7844%" y="389" width="0.0810%" height="15" fill="rgb(227,131,42)" fg:x="1219" fg:w="1"/><text x="99.0344%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7844%" y="373" width="0.0810%" height="15" fill="rgb(212,3,39)" fg:x="1219" fg:w="1"/><text x="99.0344%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8655%" y="389" width="0.0810%" height="15" fill="rgb(226,45,5)" fg:x="1220" fg:w="1"/><text x="99.1155%" y="399.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.9465%" y="389" width="0.0810%" height="15" fill="rgb(215,167,45)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.9465%" y="373" width="0.0810%" height="15" fill="rgb(250,218,53)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9465%" y="357" width="0.0810%" height="15" fill="rgb(207,140,0)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.9465%" y="341" width="0.0810%" height="15" fill="rgb(238,133,51)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9465%" y="325" width="0.0810%" height="15" fill="rgb(218,203,53)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="335.50"></text></g><g><title>plugins_core::tools::occupied_by (3 samples, 0.24%)</title><rect x="98.8655%" y="501" width="0.2431%" height="15" fill="rgb(226,184,25)" fg:x="1220" fg:w="3"/><text x="99.1155%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="98.8655%" y="485" width="0.2431%" height="15" fill="rgb(231,121,21)" fg:x="1220" fg:w="3"/><text x="99.1155%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="98.8655%" y="469" width="0.2431%" height="15" fill="rgb(251,14,34)" fg:x="1220" fg:w="3"/><text x="99.1155%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.8655%" y="453" width="0.2431%" height="15" fill="rgb(249,193,11)" fg:x="1220" fg:w="3"/><text x="99.1155%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="98.8655%" y="437" width="0.2431%" height="15" fill="rgb(220,172,37)" fg:x="1220" fg:w="3"/><text x="99.1155%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="98.8655%" y="421" width="0.2431%" height="15" fill="rgb(231,229,43)" fg:x="1220" fg:w="3"/><text x="99.1155%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="98.8655%" y="405" width="0.2431%" height="15" fill="rgb(250,161,5)" fg:x="1220" fg:w="3"/><text x="99.1155%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.0276%" y="389" width="0.0810%" height="15" fill="rgb(218,225,18)" fg:x="1222" fg:w="1"/><text x="99.2776%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0276%" y="373" width="0.0810%" height="15" fill="rgb(245,45,42)" fg:x="1222" fg:w="1"/><text x="99.2776%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.0276%" y="357" width="0.0810%" height="15" fill="rgb(211,115,1)" fg:x="1222" fg:w="1"/><text x="99.2776%" y="367.50"></text></g><g><title>engine::session::Session::captured (159 samples, 12.88%)</title><rect x="86.3047%" y="677" width="12.8849%" height="15" fill="rgb(248,133,52)" fg:x="1065" fg:w="159"/><text x="86.5547%" y="687.50">engine::session::Se..</text></g><g><title>engine::session::logs::capture (155 samples, 12.56%)</title><rect x="86.6288%" y="661" width="12.5608%" height="15" fill="rgb(238,100,21)" fg:x="1069" fg:w="155"/><text x="86.8788%" y="671.50">engine::session::lo..</text></g><g><title>tracing_core::dispatcher::with_default (154 samples, 12.48%)</title><rect x="86.7099%" y="645" width="12.4797%" height="15" fill="rgb(247,144,11)" fg:x="1070" fg:w="154"/><text x="86.9599%" y="655.50">tracing_core::dispa..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (154 samples, 12.48%)</title><rect x="86.7099%" y="629" width="12.4797%" height="15" fill="rgb(206,164,16)" fg:x="1070" fg:w="154"/><text x="86.9599%" y="639.50">&lt;engine::session::S..</text></g><g><title>kernel::plugins::mw::apply_middleware (154 samples, 12.48%)</title><rect x="86.7099%" y="613" width="12.4797%" height="15" fill="rgb(222,34,3)" fg:x="1070" fg:w="154"/><text x="86.9599%" y="623.50">kernel::plugins::mw..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (154 samples, 12.48%)</title><rect x="86.7099%" y="597" width="12.4797%" height="15" fill="rgb(248,82,4)" fg:x="1070" fg:w="154"/><text x="86.9599%" y="607.50">kernel::plugins::mw..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (154 samples, 12.48%)</title><rect x="86.7099%" y="581" width="12.4797%" height="15" fill="rgb(228,81,46)" fg:x="1070" fg:w="154"/><text x="86.9599%" y="591.50">&lt;engine::session::E..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (148 samples, 11.99%)</title><rect x="87.1961%" y="565" width="11.9935%" height="15" fill="rgb(227,67,47)" fg:x="1076" fg:w="148"/><text x="87.4461%" y="575.50">kernel::plugins::m..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (148 samples, 11.99%)</title><rect x="87.1961%" y="549" width="11.9935%" height="15" fill="rgb(215,93,53)" fg:x="1076" fg:w="148"/><text x="87.4461%" y="559.50">&lt;plugins_rune::Run..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (10 samples, 0.81%)</title><rect x="98.3793%" y="533" width="0.8104%" height="15" fill="rgb(248,194,39)" fg:x="1214" fg:w="10"/><text x="98.6293%" y="543.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (10 samples, 0.81%)</title><rect x="98.3793%" y="517" width="0.8104%" height="15" fill="rgb(215,5,19)" fg:x="1214" fg:w="10"/><text x="98.6293%" y="527.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="99.1086%" y="501" width="0.0810%" height="15" fill="rgb(226,215,51)" fg:x="1223" fg:w="1"/><text x="99.3586%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.1086%" y="485" width="0.0810%" height="15" fill="rgb(225,56,26)" fg:x="1223" fg:w="1"/><text x="99.3586%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1086%" y="469" width="0.0810%" height="15" fill="rgb(222,75,29)" fg:x="1223" fg:w="1"/><text x="99.3586%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1086%" y="453" width="0.0810%" height="15" fill="rgb(236,139,6)" fg:x="1223" fg:w="1"/><text x="99.3586%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.1086%" y="437" width="0.0810%" height="15" fill="rgb(223,137,36)" fg:x="1223" fg:w="1"/><text x="99.3586%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.1086%" y="421" width="0.0810%" height="15" fill="rgb(226,99,2)" fg:x="1223" fg:w="1"/><text x="99.3586%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1896%" y="581" width="0.0810%" height="15" fill="rgb(206,133,23)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="591.50"></text></g><g><title>engine::session::internal::Added::find_refs (2 samples, 0.16%)</title><rect x="99.1896%" y="661" width="0.1621%" height="15" fill="rgb(243,173,15)" fg:x="1224" fg:w="2"/><text x="99.4396%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.1896%" y="645" width="0.1621%" height="15" fill="rgb(228,69,28)" fg:x="1224" fg:w="2"/><text x="99.4396%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.1896%" y="629" width="0.1621%" height="15" fill="rgb(212,51,22)" fg:x="1224" fg:w="2"/><text x="99.4396%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="99.1896%" y="613" width="0.1621%" height="15" fill="rgb(227,113,0)" fg:x="1224" fg:w="2"/><text x="99.4396%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.1896%" y="597" width="0.1621%" height="15" fill="rgb(252,84,27)" fg:x="1224" fg:w="2"/><text x="99.4396%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.2707%" y="581" width="0.0810%" height="15" fill="rgb(223,145,39)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.2707%" y="565" width="0.0810%" height="15" fill="rgb(239,219,30)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.2707%" y="549" width="0.0810%" height="15" fill="rgb(224,196,39)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.2707%" y="533" width="0.0810%" height="15" fill="rgb(205,35,43)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.2707%" y="517" width="0.0810%" height="15" fill="rgb(228,201,21)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.2707%" y="501" width="0.0810%" height="15" fill="rgb(237,118,16)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.2707%" y="485" width="0.0810%" height="15" fill="rgb(241,17,19)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.2707%" y="469" width="0.0810%" height="15" fill="rgb(214,10,25)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.2707%" y="453" width="0.0810%" height="15" fill="rgb(238,37,29)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2707%" y="437" width="0.0810%" height="15" fill="rgb(253,83,25)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2707%" y="421" width="0.0810%" height="15" fill="rgb(234,192,12)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2707%" y="405" width="0.0810%" height="15" fill="rgb(241,216,45)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.2707%" y="389" width="0.0810%" height="15" fill="rgb(242,22,33)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.2707%" y="373" width="0.0810%" height="15" fill="rgb(231,105,49)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.2707%" y="357" width="0.0810%" height="15" fill="rgb(218,204,15)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.2707%" y="341" width="0.0810%" height="15" fill="rgb(235,138,41)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.2707%" y="325" width="0.0810%" height="15" fill="rgb(246,0,9)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.2707%" y="309" width="0.0810%" height="15" fill="rgb(210,74,4)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.2707%" y="293" width="0.0810%" height="15" fill="rgb(250,60,41)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.2707%" y="277" width="0.0810%" height="15" fill="rgb(220,115,12)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.2707%" y="261" width="0.0810%" height="15" fill="rgb(237,100,13)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.2707%" y="245" width="0.0810%" height="15" fill="rgb(213,55,26)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3517%" y="645" width="0.0810%" height="15" fill="rgb(216,17,4)" fg:x="1226" fg:w="1"/><text x="99.6017%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3517%" y="629" width="0.0810%" height="15" fill="rgb(220,153,47)" fg:x="1226" fg:w="1"/><text x="99.6017%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3517%" y="613" width="0.0810%" height="15" fill="rgb(215,131,9)" fg:x="1226" fg:w="1"/><text x="99.6017%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3517%" y="597" width="0.0810%" height="15" fill="rgb(233,46,42)" fg:x="1226" fg:w="1"/><text x="99.6017%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3517%" y="581" width="0.0810%" height="15" fill="rgb(226,86,7)" fg:x="1226" fg:w="1"/><text x="99.6017%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.3517%" y="565" width="0.0810%" height="15" fill="rgb(239,226,21)" fg:x="1226" fg:w="1"/><text x="99.6017%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.3517%" y="549" width="0.0810%" height="15" fill="rgb(244,137,22)" fg:x="1226" fg:w="1"/><text x="99.6017%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.3517%" y="533" width="0.0810%" height="15" fill="rgb(211,139,35)" fg:x="1226" fg:w="1"/><text x="99.6017%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.3517%" y="517" width="0.0810%" height="15" fill="rgb(214,62,50)" fg:x="1226" fg:w="1"/><text x="99.6017%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.3517%" y="501" width="0.0810%" height="15" fill="rgb(212,113,44)" fg:x="1226" fg:w="1"/><text x="99.6017%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.3517%" y="485" width="0.0810%" height="15" fill="rgb(226,150,43)" fg:x="1226" fg:w="1"/><text x="99.6017%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.3517%" y="469" width="0.0810%" height="15" fill="rgb(250,71,37)" fg:x="1226" fg:w="1"/><text x="99.6017%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.3517%" y="453" width="0.0810%" height="15" fill="rgb(219,76,19)" fg:x="1226" fg:w="1"/><text x="99.6017%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.3517%" y="437" width="0.0810%" height="15" fill="rgb(250,39,11)" fg:x="1226" fg:w="1"/><text x="99.6017%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.3517%" y="421" width="0.0810%" height="15" fill="rgb(230,64,31)" fg:x="1226" fg:w="1"/><text x="99.6017%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.3517%" y="405" width="0.0810%" height="15" fill="rgb(208,222,23)" fg:x="1226" fg:w="1"/><text x="99.6017%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.3517%" y="389" width="0.0810%" height="15" fill="rgb(227,125,18)" fg:x="1226" fg:w="1"/><text x="99.6017%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="99.1896%" y="677" width="0.3241%" height="15" fill="rgb(234,210,9)" fg:x="1224" fg:w="4"/><text x="99.4396%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.3517%" y="661" width="0.1621%" height="15" fill="rgb(217,127,24)" fg:x="1226" fg:w="2"/><text x="99.6017%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.4327%" y="645" width="0.0810%" height="15" fill="rgb(239,141,48)" fg:x="1227" fg:w="1"/><text x="99.6827%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4327%" y="629" width="0.0810%" height="15" fill="rgb(227,109,8)" fg:x="1227" fg:w="1"/><text x="99.6827%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4327%" y="613" width="0.0810%" height="15" fill="rgb(235,184,23)" fg:x="1227" fg:w="1"/><text x="99.6827%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.4327%" y="597" width="0.0810%" height="15" fill="rgb(227,226,48)" fg:x="1227" fg:w="1"/><text x="99.6827%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4327%" y="581" width="0.0810%" height="15" fill="rgb(206,150,11)" fg:x="1227" fg:w="1"/><text x="99.6827%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.4327%" y="565" width="0.0810%" height="15" fill="rgb(254,2,33)" fg:x="1227" fg:w="1"/><text x="99.6827%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4327%" y="549" width="0.0810%" height="15" fill="rgb(243,160,20)" fg:x="1227" fg:w="1"/><text x="99.6827%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.5138%" y="629" width="0.0810%" height="15" fill="rgb(218,208,30)" fg:x="1228" fg:w="1"/><text x="99.7638%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5138%" y="613" width="0.0810%" height="15" fill="rgb(224,120,49)" fg:x="1228" fg:w="1"/><text x="99.7638%" y="623.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5948%" y="533" width="0.0810%" height="15" fill="rgb(246,12,2)" fg:x="1229" fg:w="1"/><text x="99.8448%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5948%" y="517" width="0.0810%" height="15" fill="rgb(236,117,3)" fg:x="1229" fg:w="1"/><text x="99.8448%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5948%" y="501" width="0.0810%" height="15" fill="rgb(216,128,52)" fg:x="1229" fg:w="1"/><text x="99.8448%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5948%" y="485" width="0.0810%" height="15" fill="rgb(246,145,19)" fg:x="1229" fg:w="1"/><text x="99.8448%" y="495.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.5948%" y="469" width="0.0810%" height="15" fill="rgb(222,11,46)" fg:x="1229" fg:w="1"/><text x="99.8448%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5948%" y="453" width="0.0810%" height="15" fill="rgb(245,82,36)" fg:x="1229" fg:w="1"/><text x="99.8448%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5948%" y="437" width="0.0810%" height="15" fill="rgb(250,73,51)" fg:x="1229" fg:w="1"/><text x="99.8448%" y="447.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.5948%" y="421" width="0.0810%" height="15" fill="rgb(221,189,23)" fg:x="1229" fg:w="1"/><text x="99.8448%" y="431.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="99.5948%" y="629" width="0.2431%" height="15" fill="rgb(210,33,7)" fg:x="1229" fg:w="3"/><text x="99.8448%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.5948%" y="613" width="0.2431%" height="15" fill="rgb(210,107,22)" fg:x="1229" fg:w="3"/><text x="99.8448%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.5948%" y="597" width="0.2431%" height="15" fill="rgb(222,116,37)" fg:x="1229" fg:w="3"/><text x="99.8448%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="99.5948%" y="581" width="0.2431%" height="15" fill="rgb(254,17,48)" fg:x="1229" fg:w="3"/><text x="99.8448%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.5948%" y="565" width="0.2431%" height="15" fill="rgb(224,36,32)" fg:x="1229" fg:w="3"/><text x="99.8448%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="99.5948%" y="549" width="0.2431%" height="15" fill="rgb(232,90,46)" fg:x="1229" fg:w="3"/><text x="99.8448%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6759%" y="533" width="0.1621%" height="15" fill="rgb(241,66,40)" fg:x="1230" fg:w="2"/><text x="99.9259%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6759%" y="517" width="0.1621%" height="15" fill="rgb(249,184,29)" fg:x="1230" fg:w="2"/><text x="99.9259%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="99.6759%" y="501" width="0.1621%" height="15" fill="rgb(231,181,1)" fg:x="1230" fg:w="2"/><text x="99.9259%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6759%" y="485" width="0.1621%" height="15" fill="rgb(224,94,2)" fg:x="1230" fg:w="2"/><text x="99.9259%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6759%" y="469" width="0.1621%" height="15" fill="rgb(229,170,15)" fg:x="1230" fg:w="2"/><text x="99.9259%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.7569%" y="453" width="0.0810%" height="15" fill="rgb(240,127,35)" fg:x="1231" fg:w="1"/><text x="100.0069%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7569%" y="437" width="0.0810%" height="15" fill="rgb(248,196,34)" fg:x="1231" fg:w="1"/><text x="100.0069%" y="447.50"></text></g><g><title>all (1,234 samples, 100%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(236,137,7)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="1071.50"></text></g><g><title>simple-4ed3b75e (1,234 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(235,127,16)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="1055.50">simple-4ed3b75e</text></g><g><title>_start (1,234 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(250,192,54)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="1039.50">_start</text></g><g><title>__libc_start_main (1,234 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(218,98,20)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="1023.50">__libc_start_main</text></g><g><title>main (1,234 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(230,176,47)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="1007.50">main</text></g><g><title>std::rt::lang_start_internal (1,234 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(244,2,33)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="991.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,234 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(231,100,17)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="975.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,234 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(245,23,12)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,234 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(249,55,22)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="943.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,234 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(207,134,9)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,234 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(218,134,0)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,234 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(213,212,33)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,234 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(252,106,18)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,234 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(208,126,42)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="863.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,234 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(246,175,29)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="847.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,234 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(215,13,50)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="831.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,234 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(216,172,15)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="815.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,234 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(212,103,13)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="799.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,234 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(231,171,36)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="783.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (294 samples, 23.82%)</title><rect x="76.1750%" y="757" width="23.8250%" height="15" fill="rgb(250,123,20)" fg:x="940" fg:w="294"/><text x="76.4250%" y="767.50">&lt;criterion::routine::Function&lt;M,F,T&gt; a..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (294 samples, 23.82%)</title><rect x="76.1750%" y="741" width="23.8250%" height="15" fill="rgb(212,53,50)" fg:x="940" fg:w="294"/><text x="76.4250%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (294 samples, 23.82%)</title><rect x="76.1750%" y="725" width="23.8250%" height="15" fill="rgb(243,54,12)" fg:x="940" fg:w="294"/><text x="76.4250%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (169 samples, 13.70%)</title><rect x="86.3047%" y="709" width="13.6953%" height="15" fill="rgb(234,101,34)" fg:x="1065" fg:w="169"/><text x="86.5547%" y="719.50">engine::session::Sess..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (169 samples, 13.70%)</title><rect x="86.3047%" y="693" width="13.6953%" height="15" fill="rgb(254,67,22)" fg:x="1065" fg:w="169"/><text x="86.5547%" y="703.50">engine::session::Sess..</text></g><g><title>kernel::model::EntityPtrResolver::world (6 samples, 0.49%)</title><rect x="99.5138%" y="677" width="0.4862%" height="15" fill="rgb(250,35,47)" fg:x="1228" fg:w="6"/><text x="99.7638%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.49%)</title><rect x="99.5138%" y="661" width="0.4862%" height="15" fill="rgb(226,126,38)" fg:x="1228" fg:w="6"/><text x="99.7638%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.49%)</title><rect x="99.5138%" y="645" width="0.4862%" height="15" fill="rgb(216,138,53)" fg:x="1228" fg:w="6"/><text x="99.7638%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.8379%" y="629" width="0.1621%" height="15" fill="rgb(246,199,43)" fg:x="1232" fg:w="2"/><text x="100.0879%" y="639.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.8379%" y="613" width="0.1621%" height="15" fill="rgb(232,125,11)" fg:x="1232" fg:w="2"/><text x="100.0879%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8379%" y="597" width="0.1621%" height="15" fill="rgb(218,219,45)" fg:x="1232" fg:w="2"/><text x="100.0879%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8379%" y="581" width="0.1621%" height="15" fill="rgb(216,102,54)" fg:x="1232" fg:w="2"/><text x="100.0879%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8379%" y="565" width="0.1621%" height="15" fill="rgb(250,228,7)" fg:x="1232" fg:w="2"/><text x="100.0879%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8379%" y="549" width="0.1621%" height="15" fill="rgb(226,125,25)" fg:x="1232" fg:w="2"/><text x="100.0879%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9190%" y="533" width="0.0810%" height="15" fill="rgb(224,165,27)" fg:x="1233" fg:w="1"/><text x="100.1690%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9190%" y="517" width="0.0810%" height="15" fill="rgb(233,86,3)" fg:x="1233" fg:w="1"/><text x="100.1690%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9190%" y="501" width="0.0810%" height="15" fill="rgb(228,116,20)" fg:x="1233" fg:w="1"/><text x="100.1690%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9190%" y="485" width="0.0810%" height="15" fill="rgb(209,192,17)" fg:x="1233" fg:w="1"/><text x="100.1690%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9190%" y="469" width="0.0810%" height="15" fill="rgb(224,88,34)" fg:x="1233" fg:w="1"/><text x="100.1690%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9190%" y="453" width="0.0810%" height="15" fill="rgb(233,38,6)" fg:x="1233" fg:w="1"/><text x="100.1690%" y="463.50"></text></g></svg></svg>