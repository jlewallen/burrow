<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1245"><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0803%" y="693" width="0.1606%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="2"/><text x="0.3303%" y="703.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="0.4016%" y="661" width="0.2410%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="3"/><text x="0.6516%" y="671.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.6426%" y="645" width="0.1606%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="2"/><text x="0.8926%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (10 samples, 0.80%)</title><rect x="0.0803%" y="725" width="0.8032%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="10"/><text x="0.3303%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="0.0803%" y="709" width="0.8032%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="10"/><text x="0.3303%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (8 samples, 0.64%)</title><rect x="0.2410%" y="693" width="0.6426%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="8"/><text x="0.4910%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (7 samples, 0.56%)</title><rect x="0.3213%" y="677" width="0.5622%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="7"/><text x="0.5713%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (3 samples, 0.24%)</title><rect x="0.6426%" y="661" width="0.2410%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="3"/><text x="0.8926%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::plugins::ArgumentType&gt; (1 samples, 0.08%)</title><rect x="0.8032%" y="645" width="0.0803%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="1"/><text x="1.0532%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::plugins::ArgumentType&gt; (1 samples, 0.08%)</title><rect x="0.8032%" y="629" width="0.0803%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="1"/><text x="1.0532%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2048%" y="597" width="0.0803%" height="15" fill="rgb(250,228,42)" fg:x="15" fg:w="1"/><text x="1.4548%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.2851%" y="597" width="0.1606%" height="15" fill="rgb(240,193,28)" fg:x="16" fg:w="2"/><text x="1.5351%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.2851%" y="581" width="0.1606%" height="15" fill="rgb(216,20,37)" fg:x="16" fg:w="2"/><text x="1.5351%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="1.4458%" y="597" width="0.0803%" height="15" fill="rgb(206,188,39)" fg:x="18" fg:w="1"/><text x="1.6958%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="1.4458%" y="581" width="0.0803%" height="15" fill="rgb(217,207,13)" fg:x="18" fg:w="1"/><text x="1.6958%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.4458%" y="565" width="0.0803%" height="15" fill="rgb(231,73,38)" fg:x="18" fg:w="1"/><text x="1.6958%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="0.9639%" y="661" width="0.7229%" height="15" fill="rgb(225,20,46)" fg:x="12" fg:w="9"/><text x="1.2139%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (9 samples, 0.72%)</title><rect x="0.9639%" y="645" width="0.7229%" height="15" fill="rgb(210,31,41)" fg:x="12" fg:w="9"/><text x="1.2139%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.64%)</title><rect x="1.0442%" y="629" width="0.6426%" height="15" fill="rgb(221,200,47)" fg:x="13" fg:w="8"/><text x="1.2942%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="1.1245%" y="613" width="0.5622%" height="15" fill="rgb(226,26,5)" fg:x="14" fg:w="7"/><text x="1.3745%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.5261%" y="597" width="0.1606%" height="15" fill="rgb(249,33,26)" fg:x="19" fg:w="2"/><text x="1.7761%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.5261%" y="581" width="0.1606%" height="15" fill="rgb(235,183,28)" fg:x="19" fg:w="2"/><text x="1.7761%" y="591.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="1.6867%" y="661" width="0.3213%" height="15" fill="rgb(221,5,38)" fg:x="21" fg:w="4"/><text x="1.9367%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0080%" y="645" width="0.0803%" height="15" fill="rgb(247,18,42)" fg:x="25" fg:w="1"/><text x="2.2580%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.0884%" y="645" width="0.0803%" height="15" fill="rgb(241,131,45)" fg:x="26" fg:w="1"/><text x="2.3384%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0884%" y="629" width="0.0803%" height="15" fill="rgb(249,31,29)" fg:x="26" fg:w="1"/><text x="2.3384%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.2490%" y="597" width="0.0803%" height="15" fill="rgb(225,111,53)" fg:x="28" fg:w="1"/><text x="2.4990%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 2.41%)</title><rect x="0.0000%" y="741" width="2.4096%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="30"/><text x="0.2500%" y="751.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (19 samples, 1.53%)</title><rect x="0.8835%" y="725" width="1.5261%" height="15" fill="rgb(214,148,48)" fg:x="11" fg:w="19"/><text x="1.1335%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 1.53%)</title><rect x="0.8835%" y="709" width="1.5261%" height="15" fill="rgb(232,36,49)" fg:x="11" fg:w="19"/><text x="1.1335%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (19 samples, 1.53%)</title><rect x="0.8835%" y="693" width="1.5261%" height="15" fill="rgb(209,103,24)" fg:x="11" fg:w="19"/><text x="1.1335%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 1.53%)</title><rect x="0.8835%" y="677" width="1.5261%" height="15" fill="rgb(229,88,8)" fg:x="11" fg:w="19"/><text x="1.1335%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="2.0080%" y="661" width="0.4016%" height="15" fill="rgb(213,181,19)" fg:x="25" fg:w="5"/><text x="2.2580%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="2.1687%" y="645" width="0.2410%" height="15" fill="rgb(254,191,54)" fg:x="27" fg:w="3"/><text x="2.4187%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="2.1687%" y="629" width="0.2410%" height="15" fill="rgb(241,83,37)" fg:x="27" fg:w="3"/><text x="2.4187%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.2490%" y="613" width="0.1606%" height="15" fill="rgb(233,36,39)" fg:x="28" fg:w="2"/><text x="2.4990%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.3293%" y="597" width="0.0803%" height="15" fill="rgb(226,3,54)" fg:x="29" fg:w="1"/><text x="2.5793%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="2.4900%" y="693" width="0.0803%" height="15" fill="rgb(245,192,40)" fg:x="31" fg:w="1"/><text x="2.7400%" y="703.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="2.7309%" y="613" width="0.1606%" height="15" fill="rgb(238,167,29)" fg:x="34" fg:w="2"/><text x="2.9809%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.8112%" y="597" width="0.0803%" height="15" fill="rgb(232,182,51)" fg:x="35" fg:w="1"/><text x="3.0612%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.8112%" y="581" width="0.0803%" height="15" fill="rgb(231,60,39)" fg:x="35" fg:w="1"/><text x="3.0612%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8112%" y="565" width="0.0803%" height="15" fill="rgb(208,69,12)" fg:x="35" fg:w="1"/><text x="3.0612%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="2.8916%" y="613" width="0.0803%" height="15" fill="rgb(235,93,37)" fg:x="36" fg:w="1"/><text x="3.1416%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8916%" y="597" width="0.0803%" height="15" fill="rgb(213,116,39)" fg:x="36" fg:w="1"/><text x="3.1416%" y="607.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (4 samples, 0.32%)</title><rect x="2.7309%" y="645" width="0.3213%" height="15" fill="rgb(222,207,29)" fg:x="34" fg:w="4"/><text x="2.9809%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (4 samples, 0.32%)</title><rect x="2.7309%" y="629" width="0.3213%" height="15" fill="rgb(206,96,30)" fg:x="34" fg:w="4"/><text x="2.9809%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="2.9719%" y="613" width="0.0803%" height="15" fill="rgb(218,138,4)" fg:x="37" fg:w="1"/><text x="3.2219%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.9719%" y="597" width="0.0803%" height="15" fill="rgb(250,191,14)" fg:x="37" fg:w="1"/><text x="3.2219%" y="607.50"></text></g><g><title>&lt;core::char::ToLowercase as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.9719%" y="581" width="0.0803%" height="15" fill="rgb(239,60,40)" fg:x="37" fg:w="1"/><text x="3.2219%" y="591.50"></text></g><g><title>&lt;core::char::CaseMappingIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.9719%" y="565" width="0.0803%" height="15" fill="rgb(206,27,48)" fg:x="37" fg:w="1"/><text x="3.2219%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::actions::PutInsideAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="3.0522%" y="613" width="0.1606%" height="15" fill="rgb(225,35,8)" fg:x="38" fg:w="2"/><text x="3.3022%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.2129%" y="613" width="0.0803%" height="15" fill="rgb(250,213,24)" fg:x="40" fg:w="1"/><text x="3.4629%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.2129%" y="597" width="0.0803%" height="15" fill="rgb(247,123,22)" fg:x="40" fg:w="1"/><text x="3.4629%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (4 samples, 0.32%)</title><rect x="3.0522%" y="645" width="0.3213%" height="15" fill="rgb(231,138,38)" fg:x="38" fg:w="4"/><text x="3.3022%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (4 samples, 0.32%)</title><rect x="3.0522%" y="629" width="0.3213%" height="15" fill="rgb(231,145,46)" fg:x="38" fg:w="4"/><text x="3.3022%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="3.2932%" y="613" width="0.0803%" height="15" fill="rgb(251,118,11)" fg:x="41" fg:w="1"/><text x="3.5432%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.2932%" y="597" width="0.0803%" height="15" fill="rgb(217,147,25)" fg:x="41" fg:w="1"/><text x="3.5432%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.2932%" y="581" width="0.0803%" height="15" fill="rgb(247,81,37)" fg:x="41" fg:w="1"/><text x="3.5432%" y="591.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="3.3735%" y="645" width="0.1606%" height="15" fill="rgb(209,12,38)" fg:x="42" fg:w="2"/><text x="3.6235%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="3.3735%" y="629" width="0.1606%" height="15" fill="rgb(227,1,9)" fg:x="42" fg:w="2"/><text x="3.6235%" y="639.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="3.3735%" y="613" width="0.1606%" height="15" fill="rgb(248,47,43)" fg:x="42" fg:w="2"/><text x="3.6235%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.4538%" y="597" width="0.0803%" height="15" fill="rgb(221,10,30)" fg:x="43" fg:w="1"/><text x="3.7038%" y="607.50"></text></g><g><title>&lt;plugins_core::emote::EmotePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.5341%" y="645" width="0.0803%" height="15" fill="rgb(210,229,1)" fg:x="44" fg:w="1"/><text x="3.7841%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.5341%" y="629" width="0.0803%" height="15" fill="rgb(222,148,37)" fg:x="44" fg:w="1"/><text x="3.7841%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="3.5341%" y="613" width="0.0803%" height="15" fill="rgb(234,67,33)" fg:x="44" fg:w="1"/><text x="3.7841%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.5341%" y="597" width="0.0803%" height="15" fill="rgb(247,98,35)" fg:x="44" fg:w="1"/><text x="3.7841%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.5341%" y="581" width="0.0803%" height="15" fill="rgb(247,138,52)" fg:x="44" fg:w="1"/><text x="3.7841%" y="591.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="3.6145%" y="645" width="0.1606%" height="15" fill="rgb(213,79,30)" fg:x="45" fg:w="2"/><text x="3.8645%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="3.6145%" y="629" width="0.1606%" height="15" fill="rgb(246,177,23)" fg:x="45" fg:w="2"/><text x="3.8645%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="3.6948%" y="613" width="0.0803%" height="15" fill="rgb(230,62,27)" fg:x="46" fg:w="1"/><text x="3.9448%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.6948%" y="597" width="0.0803%" height="15" fill="rgb(216,154,8)" fg:x="46" fg:w="1"/><text x="3.9448%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="3.7751%" y="613" width="0.1606%" height="15" fill="rgb(244,35,45)" fg:x="47" fg:w="2"/><text x="4.0251%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="3.7751%" y="597" width="0.1606%" height="15" fill="rgb(251,115,12)" fg:x="47" fg:w="2"/><text x="4.0251%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="3.7751%" y="645" width="0.2410%" height="15" fill="rgb(240,54,50)" fg:x="47" fg:w="3"/><text x="4.0251%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="3.7751%" y="629" width="0.2410%" height="15" fill="rgb(233,84,52)" fg:x="47" fg:w="3"/><text x="4.0251%" y="639.50"></text></g><g><title>&lt;plugins_core::moving::actions::DeactivateRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.9357%" y="613" width="0.0803%" height="15" fill="rgb(207,117,47)" fg:x="49" fg:w="1"/><text x="4.1857%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.9357%" y="597" width="0.0803%" height="15" fill="rgb(249,43,39)" fg:x="49" fg:w="1"/><text x="4.1857%" y="607.50"></text></g><g><title>&lt;plugins_rune::actions::RuneAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.0161%" y="613" width="0.0803%" height="15" fill="rgb(209,38,44)" fg:x="50" fg:w="1"/><text x="4.2661%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.0161%" y="597" width="0.0803%" height="15" fill="rgb(236,212,23)" fg:x="50" fg:w="1"/><text x="4.2661%" y="607.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (19 samples, 1.53%)</title><rect x="2.6506%" y="661" width="1.5261%" height="15" fill="rgb(242,79,21)" fg:x="33" fg:w="19"/><text x="2.9006%" y="671.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="4.0161%" y="645" width="0.1606%" height="15" fill="rgb(211,96,35)" fg:x="50" fg:w="2"/><text x="4.2661%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="4.0161%" y="629" width="0.1606%" height="15" fill="rgb(253,215,40)" fg:x="50" fg:w="2"/><text x="4.2661%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="4.0964%" y="613" width="0.0803%" height="15" fill="rgb(211,81,21)" fg:x="51" fg:w="1"/><text x="4.3464%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.1767%" y="645" width="0.0803%" height="15" fill="rgb(208,190,38)" fg:x="52" fg:w="1"/><text x="4.4267%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="4.2570%" y="645" width="0.0803%" height="15" fill="rgb(235,213,38)" fg:x="53" fg:w="1"/><text x="4.5070%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="4.2570%" y="629" width="0.0803%" height="15" fill="rgb(237,122,38)" fg:x="53" fg:w="1"/><text x="4.5070%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.2570%" y="613" width="0.0803%" height="15" fill="rgb(244,218,35)" fg:x="53" fg:w="1"/><text x="4.5070%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.2570%" y="597" width="0.0803%" height="15" fill="rgb(240,68,47)" fg:x="53" fg:w="1"/><text x="4.5070%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.2570%" y="581" width="0.0803%" height="15" fill="rgb(210,16,53)" fg:x="53" fg:w="1"/><text x="4.5070%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.2570%" y="565" width="0.0803%" height="15" fill="rgb(235,124,12)" fg:x="53" fg:w="1"/><text x="4.5070%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="4.2570%" y="549" width="0.0803%" height="15" fill="rgb(224,169,11)" fg:x="53" fg:w="1"/><text x="4.5070%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="4.2570%" y="533" width="0.0803%" height="15" fill="rgb(250,166,2)" fg:x="53" fg:w="1"/><text x="4.5070%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="4.2570%" y="517" width="0.0803%" height="15" fill="rgb(242,216,29)" fg:x="53" fg:w="1"/><text x="4.5070%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="4.2570%" y="501" width="0.0803%" height="15" fill="rgb(230,116,27)" fg:x="53" fg:w="1"/><text x="4.5070%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="4.2570%" y="485" width="0.0803%" height="15" fill="rgb(228,99,48)" fg:x="53" fg:w="1"/><text x="4.5070%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="4.2570%" y="469" width="0.0803%" height="15" fill="rgb(253,11,6)" fg:x="53" fg:w="1"/><text x="4.5070%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.2570%" y="453" width="0.0803%" height="15" fill="rgb(247,143,39)" fg:x="53" fg:w="1"/><text x="4.5070%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="4.2570%" y="437" width="0.0803%" height="15" fill="rgb(236,97,10)" fg:x="53" fg:w="1"/><text x="4.5070%" y="447.50"></text></g><g><title>core::cmp::max (1 samples, 0.08%)</title><rect x="4.2570%" y="421" width="0.0803%" height="15" fill="rgb(233,208,19)" fg:x="53" fg:w="1"/><text x="4.5070%" y="431.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.08%)</title><rect x="4.2570%" y="405" width="0.0803%" height="15" fill="rgb(216,164,2)" fg:x="53" fg:w="1"/><text x="4.5070%" y="415.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.08%)</title><rect x="4.2570%" y="389" width="0.0803%" height="15" fill="rgb(220,129,5)" fg:x="53" fg:w="1"/><text x="4.5070%" y="399.50"></text></g><g><title>anyhow::__private::format_err (2 samples, 0.16%)</title><rect x="4.3373%" y="645" width="0.1606%" height="15" fill="rgb(242,17,10)" fg:x="54" fg:w="2"/><text x="4.5873%" y="655.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (13 samples, 1.04%)</title><rect x="4.1767%" y="661" width="1.0442%" height="15" fill="rgb(242,107,0)" fg:x="52" fg:w="13"/><text x="4.4267%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (9 samples, 0.72%)</title><rect x="4.4980%" y="645" width="0.7229%" height="15" fill="rgb(251,28,31)" fg:x="56" fg:w="9"/><text x="4.7480%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (9 samples, 0.72%)</title><rect x="4.4980%" y="629" width="0.7229%" height="15" fill="rgb(233,223,10)" fg:x="56" fg:w="9"/><text x="4.7480%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (9 samples, 0.72%)</title><rect x="4.4980%" y="613" width="0.7229%" height="15" fill="rgb(215,21,27)" fg:x="56" fg:w="9"/><text x="4.7480%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (9 samples, 0.72%)</title><rect x="4.4980%" y="597" width="0.7229%" height="15" fill="rgb(232,23,21)" fg:x="56" fg:w="9"/><text x="4.7480%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (8 samples, 0.64%)</title><rect x="4.5783%" y="581" width="0.6426%" height="15" fill="rgb(244,5,23)" fg:x="57" fg:w="8"/><text x="4.8283%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (8 samples, 0.64%)</title><rect x="4.5783%" y="565" width="0.6426%" height="15" fill="rgb(226,81,46)" fg:x="57" fg:w="8"/><text x="4.8283%" y="575.50"></text></g><g><title>statx (8 samples, 0.64%)</title><rect x="4.5783%" y="549" width="0.6426%" height="15" fill="rgb(247,70,30)" fg:x="57" fg:w="8"/><text x="4.8283%" y="559.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (3 samples, 0.24%)</title><rect x="5.2209%" y="645" width="0.2410%" height="15" fill="rgb(212,68,19)" fg:x="65" fg:w="3"/><text x="5.4709%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="5.2209%" y="629" width="0.2410%" height="15" fill="rgb(240,187,13)" fg:x="65" fg:w="3"/><text x="5.4709%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="5.3012%" y="613" width="0.1606%" height="15" fill="rgb(223,113,26)" fg:x="66" fg:w="2"/><text x="5.5512%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.3815%" y="597" width="0.0803%" height="15" fill="rgb(206,192,2)" fg:x="67" fg:w="1"/><text x="5.6315%" y="607.50"></text></g><g><title>glob::is_dir (5 samples, 0.40%)</title><rect x="5.5422%" y="597" width="0.4016%" height="15" fill="rgb(241,108,4)" fg:x="69" fg:w="5"/><text x="5.7922%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (5 samples, 0.40%)</title><rect x="5.5422%" y="581" width="0.4016%" height="15" fill="rgb(247,173,49)" fg:x="69" fg:w="5"/><text x="5.7922%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (5 samples, 0.40%)</title><rect x="5.5422%" y="565" width="0.4016%" height="15" fill="rgb(224,114,35)" fg:x="69" fg:w="5"/><text x="5.7922%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (5 samples, 0.40%)</title><rect x="5.5422%" y="549" width="0.4016%" height="15" fill="rgb(245,159,27)" fg:x="69" fg:w="5"/><text x="5.7922%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (5 samples, 0.40%)</title><rect x="5.5422%" y="533" width="0.4016%" height="15" fill="rgb(245,172,44)" fg:x="69" fg:w="5"/><text x="5.7922%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (5 samples, 0.40%)</title><rect x="5.5422%" y="517" width="0.4016%" height="15" fill="rgb(236,23,11)" fg:x="69" fg:w="5"/><text x="5.7922%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (5 samples, 0.40%)</title><rect x="5.5422%" y="501" width="0.4016%" height="15" fill="rgb(205,117,38)" fg:x="69" fg:w="5"/><text x="5.7922%" y="511.50"></text></g><g><title>statx (5 samples, 0.40%)</title><rect x="5.5422%" y="485" width="0.4016%" height="15" fill="rgb(237,72,25)" fg:x="69" fg:w="5"/><text x="5.7922%" y="495.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.72%)</title><rect x="5.4618%" y="629" width="0.7229%" height="15" fill="rgb(244,70,9)" fg:x="68" fg:w="9"/><text x="5.7118%" y="639.50"></text></g><g><title>glob::fill_todo (9 samples, 0.72%)</title><rect x="5.4618%" y="613" width="0.7229%" height="15" fill="rgb(217,125,39)" fg:x="68" fg:w="9"/><text x="5.7118%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="5.9438%" y="597" width="0.2410%" height="15" fill="rgb(235,36,10)" fg:x="74" fg:w="3"/><text x="6.1938%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="5.9438%" y="581" width="0.2410%" height="15" fill="rgb(251,123,47)" fg:x="74" fg:w="3"/><text x="6.1938%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="5.9438%" y="565" width="0.2410%" height="15" fill="rgb(221,13,13)" fg:x="74" fg:w="3"/><text x="6.1938%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="5.9438%" y="549" width="0.2410%" height="15" fill="rgb(238,131,9)" fg:x="74" fg:w="3"/><text x="6.1938%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="6.0241%" y="533" width="0.1606%" height="15" fill="rgb(211,50,8)" fg:x="75" fg:w="2"/><text x="6.2741%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="6.0241%" y="517" width="0.1606%" height="15" fill="rgb(245,182,24)" fg:x="75" fg:w="2"/><text x="6.2741%" y="527.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="6.0241%" y="501" width="0.1606%" height="15" fill="rgb(242,14,37)" fg:x="75" fg:w="2"/><text x="6.2741%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="6.3454%" y="485" width="0.0803%" height="15" fill="rgb(246,228,12)" fg:x="79" fg:w="1"/><text x="6.5954%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="6.3454%" y="469" width="0.0803%" height="15" fill="rgb(213,55,15)" fg:x="79" fg:w="1"/><text x="6.5954%" y="479.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="6.3454%" y="597" width="0.1606%" height="15" fill="rgb(209,9,3)" fg:x="79" fg:w="2"/><text x="6.5954%" y="607.50"></text></g><g><title>std::path::PathBuf::_push (2 samples, 0.16%)</title><rect x="6.3454%" y="581" width="0.1606%" height="15" fill="rgb(230,59,30)" fg:x="79" fg:w="2"/><text x="6.5954%" y="591.50"></text></g><g><title>std::ffi::os_str::OsString::push (2 samples, 0.16%)</title><rect x="6.3454%" y="565" width="0.1606%" height="15" fill="rgb(209,121,21)" fg:x="79" fg:w="2"/><text x="6.5954%" y="575.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (2 samples, 0.16%)</title><rect x="6.3454%" y="549" width="0.1606%" height="15" fill="rgb(220,109,13)" fg:x="79" fg:w="2"/><text x="6.5954%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="6.3454%" y="533" width="0.1606%" height="15" fill="rgb(232,18,1)" fg:x="79" fg:w="2"/><text x="6.5954%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="6.3454%" y="517" width="0.1606%" height="15" fill="rgb(215,41,42)" fg:x="79" fg:w="2"/><text x="6.5954%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="6.3454%" y="501" width="0.1606%" height="15" fill="rgb(224,123,36)" fg:x="79" fg:w="2"/><text x="6.5954%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="6.4257%" y="485" width="0.0803%" height="15" fill="rgb(240,125,3)" fg:x="80" fg:w="1"/><text x="6.6757%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.5060%" y="597" width="0.0803%" height="15" fill="rgb(205,98,50)" fg:x="81" fg:w="1"/><text x="6.7560%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="6.5863%" y="581" width="0.1606%" height="15" fill="rgb(205,185,37)" fg:x="82" fg:w="2"/><text x="6.8363%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="6.5863%" y="565" width="0.1606%" height="15" fill="rgb(238,207,15)" fg:x="82" fg:w="2"/><text x="6.8363%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="6.5863%" y="549" width="0.1606%" height="15" fill="rgb(213,199,42)" fg:x="82" fg:w="2"/><text x="6.8363%" y="559.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="6.5863%" y="533" width="0.1606%" height="15" fill="rgb(235,201,11)" fg:x="82" fg:w="2"/><text x="6.8363%" y="543.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (20 samples, 1.61%)</title><rect x="5.2209%" y="661" width="1.6064%" height="15" fill="rgb(207,46,11)" fg:x="65" fg:w="20"/><text x="5.4709%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (17 samples, 1.37%)</title><rect x="5.4618%" y="645" width="1.3655%" height="15" fill="rgb(241,35,35)" fg:x="68" fg:w="17"/><text x="5.7118%" y="655.50"></text></g><g><title>glob::glob (8 samples, 0.64%)</title><rect x="6.1847%" y="629" width="0.6426%" height="15" fill="rgb(243,32,47)" fg:x="77" fg:w="8"/><text x="6.4347%" y="639.50"></text></g><g><title>glob::glob_with (8 samples, 0.64%)</title><rect x="6.1847%" y="613" width="0.6426%" height="15" fill="rgb(247,202,23)" fg:x="77" fg:w="8"/><text x="6.4347%" y="623.50"></text></g><g><title>glob::Pattern::new (3 samples, 0.24%)</title><rect x="6.5863%" y="597" width="0.2410%" height="15" fill="rgb(219,102,11)" fg:x="82" fg:w="3"/><text x="6.8363%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="6.7470%" y="581" width="0.0803%" height="15" fill="rgb(243,110,44)" fg:x="84" fg:w="1"/><text x="6.9970%" y="591.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="6.8273%" y="645" width="0.3213%" height="15" fill="rgb(222,74,54)" fg:x="85" fg:w="4"/><text x="7.0773%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (6 samples, 0.48%)</title><rect x="6.8273%" y="661" width="0.4819%" height="15" fill="rgb(216,99,12)" fg:x="85" fg:w="6"/><text x="7.0773%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="7.1486%" y="645" width="0.1606%" height="15" fill="rgb(226,22,26)" fg:x="89" fg:w="2"/><text x="7.3986%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.2289%" y="629" width="0.0803%" height="15" fill="rgb(217,163,10)" fg:x="90" fg:w="1"/><text x="7.4789%" y="639.50"></text></g><g><title>clock_getres (1 samples, 0.08%)</title><rect x="7.3896%" y="645" width="0.0803%" height="15" fill="rgb(213,25,53)" fg:x="92" fg:w="1"/><text x="7.6396%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (62 samples, 4.98%)</title><rect x="2.6506%" y="677" width="4.9799%" height="15" fill="rgb(252,105,26)" fg:x="33" fg:w="62"/><text x="2.9006%" y="687.50">kernel..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (4 samples, 0.32%)</title><rect x="7.3092%" y="661" width="0.3213%" height="15" fill="rgb(220,39,43)" fg:x="91" fg:w="4"/><text x="7.5592%" y="671.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="7.4699%" y="645" width="0.1606%" height="15" fill="rgb(229,68,48)" fg:x="93" fg:w="2"/><text x="7.7199%" y="655.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::middleware (1 samples, 0.08%)</title><rect x="7.7912%" y="645" width="0.0803%" height="15" fill="rgb(252,8,32)" fg:x="97" fg:w="1"/><text x="8.0412%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.7912%" y="629" width="0.0803%" height="15" fill="rgb(223,20,43)" fg:x="97" fg:w="1"/><text x="8.0412%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.8715%" y="645" width="0.0803%" height="15" fill="rgb(229,81,49)" fg:x="98" fg:w="1"/><text x="8.1215%" y="655.50"></text></g><g><title>engine::session::Session::initialize (68 samples, 5.46%)</title><rect x="2.5703%" y="693" width="5.4618%" height="15" fill="rgb(236,28,36)" fg:x="32" fg:w="68"/><text x="2.8203%" y="703.50">engine:..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (5 samples, 0.40%)</title><rect x="7.6305%" y="677" width="0.4016%" height="15" fill="rgb(249,185,26)" fg:x="95" fg:w="5"/><text x="7.8805%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="7.6305%" y="661" width="0.4016%" height="15" fill="rgb(249,174,33)" fg:x="95" fg:w="5"/><text x="7.8805%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.9518%" y="645" width="0.0803%" height="15" fill="rgb(233,201,37)" fg:x="99" fg:w="1"/><text x="8.2018%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.9518%" y="629" width="0.0803%" height="15" fill="rgb(221,78,26)" fg:x="99" fg:w="1"/><text x="8.2018%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.9518%" y="613" width="0.0803%" height="15" fill="rgb(250,127,30)" fg:x="99" fg:w="1"/><text x="8.2018%" y="623.50"></text></g><g><title>&lt;plugins_core::emote::actions::LaughAction as kernel::actions::Action&gt;::perform (1 samples, 0.08%)</title><rect x="8.1928%" y="661" width="0.0803%" height="15" fill="rgb(230,49,44)" fg:x="102" fg:w="1"/><text x="8.4428%" y="671.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (74 samples, 5.94%)</title><rect x="2.4096%" y="741" width="5.9438%" height="15" fill="rgb(229,67,23)" fg:x="30" fg:w="74"/><text x="2.6596%" y="751.50">&lt;engine:..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (74 samples, 5.94%)</title><rect x="2.4096%" y="725" width="5.9438%" height="15" fill="rgb(249,83,47)" fg:x="30" fg:w="74"/><text x="2.6596%" y="735.50">engine::..</text></g><g><title>engine::session::Session::new (73 samples, 5.86%)</title><rect x="2.4900%" y="709" width="5.8635%" height="15" fill="rgb(215,43,3)" fg:x="31" fg:w="73"/><text x="2.7400%" y="719.50">engine:..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (4 samples, 0.32%)</title><rect x="8.0321%" y="693" width="0.3213%" height="15" fill="rgb(238,154,13)" fg:x="100" fg:w="4"/><text x="8.2821%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="8.1124%" y="677" width="0.2410%" height="15" fill="rgb(219,56,2)" fg:x="101" fg:w="3"/><text x="8.3624%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.2731%" y="661" width="0.0803%" height="15" fill="rgb(233,0,4)" fg:x="103" fg:w="1"/><text x="8.5231%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.2731%" y="645" width="0.0803%" height="15" fill="rgb(235,30,7)" fg:x="103" fg:w="1"/><text x="8.5231%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.2731%" y="629" width="0.0803%" height="15" fill="rgb(250,79,13)" fg:x="103" fg:w="1"/><text x="8.5231%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="8.3534%" y="645" width="0.0803%" height="15" fill="rgb(211,146,34)" fg:x="104" fg:w="1"/><text x="8.6034%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.3534%" y="629" width="0.0803%" height="15" fill="rgb(228,22,38)" fg:x="104" fg:w="1"/><text x="8.6034%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.3534%" y="613" width="0.0803%" height="15" fill="rgb(235,168,5)" fg:x="104" fg:w="1"/><text x="8.6034%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.3534%" y="597" width="0.0803%" height="15" fill="rgb(221,155,16)" fg:x="104" fg:w="1"/><text x="8.6034%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.3534%" y="581" width="0.0803%" height="15" fill="rgb(215,215,53)" fg:x="104" fg:w="1"/><text x="8.6034%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.3534%" y="565" width="0.0803%" height="15" fill="rgb(223,4,10)" fg:x="104" fg:w="1"/><text x="8.6034%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="8.3534%" y="549" width="0.0803%" height="15" fill="rgb(234,103,6)" fg:x="104" fg:w="1"/><text x="8.6034%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="8.3534%" y="533" width="0.0803%" height="15" fill="rgb(227,97,0)" fg:x="104" fg:w="1"/><text x="8.6034%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="8.3534%" y="677" width="0.2410%" height="15" fill="rgb(234,150,53)" fg:x="104" fg:w="3"/><text x="8.6034%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="8.3534%" y="661" width="0.2410%" height="15" fill="rgb(228,201,54)" fg:x="104" fg:w="3"/><text x="8.6034%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (2 samples, 0.16%)</title><rect x="8.4337%" y="645" width="0.1606%" height="15" fill="rgb(222,22,37)" fg:x="105" fg:w="2"/><text x="8.6837%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5141%" y="629" width="0.0803%" height="15" fill="rgb(237,53,32)" fg:x="106" fg:w="1"/><text x="8.7641%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.5944%" y="645" width="0.0803%" height="15" fill="rgb(233,25,53)" fg:x="107" fg:w="1"/><text x="8.8444%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.6747%" y="645" width="0.0803%" height="15" fill="rgb(210,40,34)" fg:x="108" fg:w="1"/><text x="8.9247%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.6747%" y="629" width="0.0803%" height="15" fill="rgb(241,220,44)" fg:x="108" fg:w="1"/><text x="8.9247%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.6747%" y="613" width="0.0803%" height="15" fill="rgb(235,28,35)" fg:x="108" fg:w="1"/><text x="8.9247%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="8.7550%" y="613" width="0.2410%" height="15" fill="rgb(210,56,17)" fg:x="109" fg:w="3"/><text x="9.0050%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.8353%" y="597" width="0.1606%" height="15" fill="rgb(224,130,29)" fg:x="110" fg:w="2"/><text x="9.0853%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.8353%" y="581" width="0.1606%" height="15" fill="rgb(235,212,8)" fg:x="110" fg:w="2"/><text x="9.0853%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="8.9960%" y="581" width="0.2410%" height="15" fill="rgb(223,33,50)" fg:x="112" fg:w="3"/><text x="9.2460%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="9.0763%" y="565" width="0.1606%" height="15" fill="rgb(219,149,13)" fg:x="113" fg:w="2"/><text x="9.3263%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.1566%" y="549" width="0.0803%" height="15" fill="rgb(250,156,29)" fg:x="114" fg:w="1"/><text x="9.4066%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.1566%" y="533" width="0.0803%" height="15" fill="rgb(216,193,19)" fg:x="114" fg:w="1"/><text x="9.4066%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.3173%" y="565" width="0.0803%" height="15" fill="rgb(216,135,14)" fg:x="116" fg:w="1"/><text x="9.5673%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="9.3976%" y="565" width="0.2410%" height="15" fill="rgb(241,47,5)" fg:x="117" fg:w="3"/><text x="9.6476%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="9.4779%" y="549" width="0.1606%" height="15" fill="rgb(233,42,35)" fg:x="118" fg:w="2"/><text x="9.7279%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="9.4779%" y="533" width="0.1606%" height="15" fill="rgb(231,13,6)" fg:x="118" fg:w="2"/><text x="9.7279%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="9.4779%" y="517" width="0.1606%" height="15" fill="rgb(207,181,40)" fg:x="118" fg:w="2"/><text x="9.7279%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="9.6386%" y="549" width="0.2410%" height="15" fill="rgb(254,173,49)" fg:x="120" fg:w="3"/><text x="9.8886%" y="559.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="9.6386%" y="533" width="0.2410%" height="15" fill="rgb(221,1,38)" fg:x="120" fg:w="3"/><text x="9.8886%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="9.7189%" y="517" width="0.1606%" height="15" fill="rgb(206,124,46)" fg:x="121" fg:w="2"/><text x="9.9689%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="9.7189%" y="501" width="0.1606%" height="15" fill="rgb(249,21,11)" fg:x="121" fg:w="2"/><text x="9.9689%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="9.6386%" y="565" width="0.3213%" height="15" fill="rgb(222,201,40)" fg:x="120" fg:w="4"/><text x="9.8886%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.8795%" y="549" width="0.0803%" height="15" fill="rgb(235,61,29)" fg:x="123" fg:w="1"/><text x="10.1295%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="9.2369%" y="581" width="0.8032%" height="15" fill="rgb(219,207,3)" fg:x="115" fg:w="10"/><text x="9.4869%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.9598%" y="565" width="0.0803%" height="15" fill="rgb(222,56,46)" fg:x="124" fg:w="1"/><text x="10.2098%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.9598%" y="549" width="0.0803%" height="15" fill="rgb(239,76,54)" fg:x="124" fg:w="1"/><text x="10.2098%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.9598%" y="533" width="0.0803%" height="15" fill="rgb(231,124,27)" fg:x="124" fg:w="1"/><text x="10.2098%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (19 samples, 1.53%)</title><rect x="8.7550%" y="629" width="1.5261%" height="15" fill="rgb(249,195,6)" fg:x="109" fg:w="19"/><text x="9.0050%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.29%)</title><rect x="8.9960%" y="613" width="1.2851%" height="15" fill="rgb(237,174,47)" fg:x="112" fg:w="16"/><text x="9.2460%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.29%)</title><rect x="8.9960%" y="597" width="1.2851%" height="15" fill="rgb(206,201,31)" fg:x="112" fg:w="16"/><text x="9.2460%" y="607.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="10.0402%" y="581" width="0.2410%" height="15" fill="rgb(231,57,52)" fg:x="125" fg:w="3"/><text x="10.2902%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="10.1205%" y="565" width="0.1606%" height="15" fill="rgb(248,177,22)" fg:x="126" fg:w="2"/><text x="10.3705%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.2008%" y="549" width="0.0803%" height="15" fill="rgb(215,211,37)" fg:x="127" fg:w="1"/><text x="10.4508%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="10.3614%" y="581" width="0.1606%" height="15" fill="rgb(241,128,51)" fg:x="129" fg:w="2"/><text x="10.6114%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.5221%" y="565" width="0.0803%" height="15" fill="rgb(227,165,31)" fg:x="131" fg:w="1"/><text x="10.7721%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.6024%" y="549" width="0.0803%" height="15" fill="rgb(228,167,24)" fg:x="132" fg:w="1"/><text x="10.8524%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.6024%" y="533" width="0.0803%" height="15" fill="rgb(228,143,12)" fg:x="132" fg:w="1"/><text x="10.8524%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="10.2811%" y="629" width="0.4819%" height="15" fill="rgb(249,149,8)" fg:x="128" fg:w="6"/><text x="10.5311%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="10.2811%" y="613" width="0.4819%" height="15" fill="rgb(243,35,44)" fg:x="128" fg:w="6"/><text x="10.5311%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="10.2811%" y="597" width="0.4819%" height="15" fill="rgb(246,89,9)" fg:x="128" fg:w="6"/><text x="10.5311%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="10.5221%" y="581" width="0.2410%" height="15" fill="rgb(233,213,13)" fg:x="131" fg:w="3"/><text x="10.7721%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.6024%" y="565" width="0.1606%" height="15" fill="rgb(233,141,41)" fg:x="132" fg:w="2"/><text x="10.8524%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.6827%" y="549" width="0.0803%" height="15" fill="rgb(239,167,4)" fg:x="133" fg:w="1"/><text x="10.9327%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.7631%" y="597" width="0.0803%" height="15" fill="rgb(209,217,16)" fg:x="134" fg:w="1"/><text x="11.0131%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.7631%" y="581" width="0.0803%" height="15" fill="rgb(219,88,35)" fg:x="134" fg:w="1"/><text x="11.0131%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="10.7631%" y="613" width="0.1606%" height="15" fill="rgb(220,193,23)" fg:x="134" fg:w="2"/><text x="11.0131%" y="623.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="10.8434%" y="597" width="0.0803%" height="15" fill="rgb(230,90,52)" fg:x="135" fg:w="1"/><text x="11.0934%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="10.8434%" y="581" width="0.0803%" height="15" fill="rgb(252,106,19)" fg:x="135" fg:w="1"/><text x="11.0934%" y="591.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.8434%" y="565" width="0.0803%" height="15" fill="rgb(206,74,20)" fg:x="135" fg:w="1"/><text x="11.0934%" y="575.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="10.8434%" y="549" width="0.0803%" height="15" fill="rgb(230,138,44)" fg:x="135" fg:w="1"/><text x="11.0934%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.8434%" y="533" width="0.0803%" height="15" fill="rgb(235,182,43)" fg:x="135" fg:w="1"/><text x="11.0934%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="11.0040%" y="581" width="0.2410%" height="15" fill="rgb(242,16,51)" fg:x="137" fg:w="3"/><text x="11.2540%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="11.1647%" y="565" width="0.0803%" height="15" fill="rgb(248,9,4)" fg:x="139" fg:w="1"/><text x="11.4147%" y="575.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="11.2450%" y="581" width="0.0803%" height="15" fill="rgb(210,31,22)" fg:x="140" fg:w="1"/><text x="11.4950%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="11.2450%" y="565" width="0.0803%" height="15" fill="rgb(239,54,39)" fg:x="140" fg:w="1"/><text x="11.4950%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="11.3253%" y="565" width="0.0803%" height="15" fill="rgb(230,99,41)" fg:x="141" fg:w="1"/><text x="11.5753%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.4859%" y="533" width="0.0803%" height="15" fill="rgb(253,106,12)" fg:x="143" fg:w="1"/><text x="11.7359%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.4859%" y="517" width="0.0803%" height="15" fill="rgb(213,46,41)" fg:x="143" fg:w="1"/><text x="11.7359%" y="527.50"></text></g><g><title>engine::session::Session::flush (44 samples, 3.53%)</title><rect x="8.3534%" y="725" width="3.5341%" height="15" fill="rgb(215,133,35)" fg:x="104" fg:w="44"/><text x="8.6034%" y="735.50">eng..</text></g><g><title>engine::session::state::State::close (44 samples, 3.53%)</title><rect x="8.3534%" y="709" width="3.5341%" height="15" fill="rgb(213,28,5)" fg:x="104" fg:w="44"/><text x="8.6034%" y="719.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (44 samples, 3.53%)</title><rect x="8.3534%" y="693" width="3.5341%" height="15" fill="rgb(215,77,49)" fg:x="104" fg:w="44"/><text x="8.6034%" y="703.50">eng..</text></g><g><title>core::iter::adapters::try_process (41 samples, 3.29%)</title><rect x="8.5944%" y="677" width="3.2932%" height="15" fill="rgb(248,100,22)" fg:x="107" fg:w="41"/><text x="8.8444%" y="687.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (41 samples, 3.29%)</title><rect x="8.5944%" y="661" width="3.2932%" height="15" fill="rgb(208,67,9)" fg:x="107" fg:w="41"/><text x="8.8444%" y="671.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (39 samples, 3.13%)</title><rect x="8.7550%" y="645" width="3.1325%" height="15" fill="rgb(219,133,21)" fg:x="109" fg:w="39"/><text x="9.0050%" y="655.50">eng..</text></g><g><title>kernel::model::any_entity_changes (14 samples, 1.12%)</title><rect x="10.7631%" y="629" width="1.1245%" height="15" fill="rgb(246,46,29)" fg:x="134" fg:w="14"/><text x="11.0131%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.96%)</title><rect x="10.9237%" y="613" width="0.9639%" height="15" fill="rgb(246,185,52)" fg:x="136" fg:w="12"/><text x="11.1737%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.96%)</title><rect x="10.9237%" y="597" width="0.9639%" height="15" fill="rgb(252,136,11)" fg:x="136" fg:w="12"/><text x="11.1737%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="11.3253%" y="581" width="0.5622%" height="15" fill="rgb(219,138,53)" fg:x="141" fg:w="7"/><text x="11.5753%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="11.4056%" y="565" width="0.4819%" height="15" fill="rgb(211,51,23)" fg:x="142" fg:w="6"/><text x="11.6556%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="11.4056%" y="549" width="0.4819%" height="15" fill="rgb(247,221,28)" fg:x="142" fg:w="6"/><text x="11.6556%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="11.5663%" y="533" width="0.3213%" height="15" fill="rgb(251,222,45)" fg:x="144" fg:w="4"/><text x="11.8163%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="11.6466%" y="517" width="0.2410%" height="15" fill="rgb(217,162,53)" fg:x="145" fg:w="3"/><text x="11.8966%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="11.7269%" y="501" width="0.1606%" height="15" fill="rgb(229,93,14)" fg:x="146" fg:w="2"/><text x="11.9769%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.8072%" y="485" width="0.0803%" height="15" fill="rgb(209,67,49)" fg:x="147" fg:w="1"/><text x="12.0572%" y="495.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="11.8876%" y="725" width="0.0803%" height="15" fill="rgb(213,87,29)" fg:x="148" fg:w="1"/><text x="12.1376%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="11.8876%" y="709" width="0.0803%" height="15" fill="rgb(205,151,52)" fg:x="148" fg:w="1"/><text x="12.1376%" y="719.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="11.8876%" y="693" width="0.0803%" height="15" fill="rgb(253,215,39)" fg:x="148" fg:w="1"/><text x="12.1376%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.9679%" y="677" width="0.0803%" height="15" fill="rgb(221,220,41)" fg:x="149" fg:w="1"/><text x="12.2179%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.9679%" y="661" width="0.0803%" height="15" fill="rgb(218,133,21)" fg:x="149" fg:w="1"/><text x="12.2179%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="11.9679%" y="709" width="0.1606%" height="15" fill="rgb(221,193,43)" fg:x="149" fg:w="2"/><text x="12.2179%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="11.9679%" y="693" width="0.1606%" height="15" fill="rgb(240,128,52)" fg:x="149" fg:w="2"/><text x="12.2179%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.0482%" y="677" width="0.0803%" height="15" fill="rgb(253,114,12)" fg:x="150" fg:w="1"/><text x="12.2982%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.0482%" y="661" width="0.0803%" height="15" fill="rgb(215,223,47)" fg:x="150" fg:w="1"/><text x="12.2982%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.0482%" y="645" width="0.0803%" height="15" fill="rgb(248,225,23)" fg:x="150" fg:w="1"/><text x="12.2982%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.0482%" y="629" width="0.0803%" height="15" fill="rgb(250,108,0)" fg:x="150" fg:w="1"/><text x="12.2982%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.0482%" y="613" width="0.0803%" height="15" fill="rgb(228,208,7)" fg:x="150" fg:w="1"/><text x="12.2982%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.2088%" y="693" width="0.0803%" height="15" fill="rgb(244,45,10)" fg:x="152" fg:w="1"/><text x="12.4588%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="12.2088%" y="677" width="0.0803%" height="15" fill="rgb(207,125,25)" fg:x="152" fg:w="1"/><text x="12.4588%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.2892%" y="693" width="0.0803%" height="15" fill="rgb(210,195,18)" fg:x="153" fg:w="1"/><text x="12.5392%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="12.3695%" y="661" width="0.0803%" height="15" fill="rgb(249,80,12)" fg:x="154" fg:w="1"/><text x="12.6195%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.3695%" y="645" width="0.0803%" height="15" fill="rgb(221,65,9)" fg:x="154" fg:w="1"/><text x="12.6195%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="12.3695%" y="629" width="0.0803%" height="15" fill="rgb(235,49,36)" fg:x="154" fg:w="1"/><text x="12.6195%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="12.3695%" y="677" width="0.1606%" height="15" fill="rgb(225,32,20)" fg:x="154" fg:w="2"/><text x="12.6195%" y="687.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.4498%" y="661" width="0.0803%" height="15" fill="rgb(215,141,46)" fg:x="155" fg:w="1"/><text x="12.6998%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.4498%" y="645" width="0.0803%" height="15" fill="rgb(250,160,47)" fg:x="155" fg:w="1"/><text x="12.6998%" y="655.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.4498%" y="629" width="0.0803%" height="15" fill="rgb(216,222,40)" fg:x="155" fg:w="1"/><text x="12.6998%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.4498%" y="613" width="0.0803%" height="15" fill="rgb(234,217,39)" fg:x="155" fg:w="1"/><text x="12.6998%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="12.4498%" y="597" width="0.0803%" height="15" fill="rgb(207,178,40)" fg:x="155" fg:w="1"/><text x="12.6998%" y="607.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="12.4498%" y="581" width="0.0803%" height="15" fill="rgb(221,136,13)" fg:x="155" fg:w="1"/><text x="12.6998%" y="591.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="12.4498%" y="565" width="0.0803%" height="15" fill="rgb(249,199,10)" fg:x="155" fg:w="1"/><text x="12.6998%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="12.5301%" y="661" width="0.0803%" height="15" fill="rgb(249,222,13)" fg:x="156" fg:w="1"/><text x="12.7801%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5301%" y="645" width="0.0803%" height="15" fill="rgb(244,185,38)" fg:x="156" fg:w="1"/><text x="12.7801%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.5301%" y="629" width="0.0803%" height="15" fill="rgb(236,202,9)" fg:x="156" fg:w="1"/><text x="12.7801%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (4 samples, 0.32%)</title><rect x="12.3695%" y="693" width="0.3213%" height="15" fill="rgb(250,229,37)" fg:x="154" fg:w="4"/><text x="12.6195%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="12.5301%" y="677" width="0.1606%" height="15" fill="rgb(206,174,23)" fg:x="156" fg:w="2"/><text x="12.7801%" y="687.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="12.6104%" y="661" width="0.0803%" height="15" fill="rgb(211,33,43)" fg:x="157" fg:w="1"/><text x="12.8604%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.6104%" y="645" width="0.0803%" height="15" fill="rgb(245,58,50)" fg:x="157" fg:w="1"/><text x="12.8604%" y="655.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="12.6104%" y="629" width="0.0803%" height="15" fill="rgb(244,68,36)" fg:x="157" fg:w="1"/><text x="12.8604%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.6104%" y="613" width="0.0803%" height="15" fill="rgb(232,229,15)" fg:x="157" fg:w="1"/><text x="12.8604%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="12.6908%" y="645" width="0.1606%" height="15" fill="rgb(254,30,23)" fg:x="158" fg:w="2"/><text x="12.9408%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="12.6908%" y="629" width="0.1606%" height="15" fill="rgb(235,160,14)" fg:x="158" fg:w="2"/><text x="12.9408%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="12.6908%" y="613" width="0.1606%" height="15" fill="rgb(212,155,44)" fg:x="158" fg:w="2"/><text x="12.9408%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="12.6908%" y="597" width="0.1606%" height="15" fill="rgb(226,2,50)" fg:x="158" fg:w="2"/><text x="12.9408%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="12.6908%" y="581" width="0.1606%" height="15" fill="rgb(234,177,6)" fg:x="158" fg:w="2"/><text x="12.9408%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.7711%" y="565" width="0.0803%" height="15" fill="rgb(217,24,9)" fg:x="159" fg:w="1"/><text x="13.0211%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.7711%" y="549" width="0.0803%" height="15" fill="rgb(220,13,46)" fg:x="159" fg:w="1"/><text x="13.0211%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="12.6908%" y="677" width="0.2410%" height="15" fill="rgb(239,221,27)" fg:x="158" fg:w="3"/><text x="12.9408%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="12.6908%" y="661" width="0.2410%" height="15" fill="rgb(222,198,25)" fg:x="158" fg:w="3"/><text x="12.9408%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.8514%" y="645" width="0.0803%" height="15" fill="rgb(211,99,13)" fg:x="160" fg:w="1"/><text x="13.1014%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.9317%" y="661" width="0.0803%" height="15" fill="rgb(232,111,31)" fg:x="161" fg:w="1"/><text x="13.1817%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.9317%" y="645" width="0.0803%" height="15" fill="rgb(245,82,37)" fg:x="161" fg:w="1"/><text x="13.1817%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.9317%" y="629" width="0.0803%" height="15" fill="rgb(227,149,46)" fg:x="161" fg:w="1"/><text x="13.1817%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.9317%" y="613" width="0.0803%" height="15" fill="rgb(218,36,50)" fg:x="161" fg:w="1"/><text x="13.1817%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.9317%" y="597" width="0.0803%" height="15" fill="rgb(226,80,48)" fg:x="161" fg:w="1"/><text x="13.1817%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.9317%" y="581" width="0.0803%" height="15" fill="rgb(238,224,15)" fg:x="161" fg:w="1"/><text x="13.1817%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.9317%" y="565" width="0.0803%" height="15" fill="rgb(241,136,10)" fg:x="161" fg:w="1"/><text x="13.1817%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.9317%" y="549" width="0.0803%" height="15" fill="rgb(208,32,45)" fg:x="161" fg:w="1"/><text x="13.1817%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.9317%" y="533" width="0.0803%" height="15" fill="rgb(207,135,9)" fg:x="161" fg:w="1"/><text x="13.1817%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.9317%" y="517" width="0.0803%" height="15" fill="rgb(206,86,44)" fg:x="161" fg:w="1"/><text x="13.1817%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.9317%" y="501" width="0.0803%" height="15" fill="rgb(245,177,15)" fg:x="161" fg:w="1"/><text x="13.1817%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.9317%" y="485" width="0.0803%" height="15" fill="rgb(206,64,50)" fg:x="161" fg:w="1"/><text x="13.1817%" y="495.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="12.9317%" y="677" width="0.1606%" height="15" fill="rgb(234,36,40)" fg:x="161" fg:w="2"/><text x="13.1817%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.0120%" y="661" width="0.0803%" height="15" fill="rgb(213,64,8)" fg:x="162" fg:w="1"/><text x="13.2620%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="13.0120%" y="645" width="0.0803%" height="15" fill="rgb(210,75,36)" fg:x="162" fg:w="1"/><text x="13.2620%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="13.0924%" y="645" width="0.0803%" height="15" fill="rgb(229,88,21)" fg:x="163" fg:w="1"/><text x="13.3424%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (16 samples, 1.29%)</title><rect x="11.9679%" y="725" width="1.2851%" height="15" fill="rgb(252,204,47)" fg:x="149" fg:w="16"/><text x="12.2179%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (14 samples, 1.12%)</title><rect x="12.1285%" y="709" width="1.1245%" height="15" fill="rgb(208,77,27)" fg:x="151" fg:w="14"/><text x="12.3785%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.56%)</title><rect x="12.6908%" y="693" width="0.5622%" height="15" fill="rgb(221,76,26)" fg:x="158" fg:w="7"/><text x="12.9408%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="13.0924%" y="677" width="0.1606%" height="15" fill="rgb(225,139,18)" fg:x="163" fg:w="2"/><text x="13.3424%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="13.0924%" y="661" width="0.1606%" height="15" fill="rgb(230,137,11)" fg:x="163" fg:w="2"/><text x="13.3424%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="13.1727%" y="645" width="0.0803%" height="15" fill="rgb(212,28,1)" fg:x="164" fg:w="1"/><text x="13.4227%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="13.1727%" y="629" width="0.0803%" height="15" fill="rgb(248,164,17)" fg:x="164" fg:w="1"/><text x="13.4227%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="13.1727%" y="613" width="0.0803%" height="15" fill="rgb(222,171,42)" fg:x="164" fg:w="1"/><text x="13.4227%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="13.1727%" y="597" width="0.0803%" height="15" fill="rgb(243,84,45)" fg:x="164" fg:w="1"/><text x="13.4227%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="13.1727%" y="581" width="0.0803%" height="15" fill="rgb(252,49,23)" fg:x="164" fg:w="1"/><text x="13.4227%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="13.1727%" y="565" width="0.0803%" height="15" fill="rgb(215,19,7)" fg:x="164" fg:w="1"/><text x="13.4227%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="13.1727%" y="549" width="0.0803%" height="15" fill="rgb(238,81,41)" fg:x="164" fg:w="1"/><text x="13.4227%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.1727%" y="533" width="0.0803%" height="15" fill="rgb(210,199,37)" fg:x="164" fg:w="1"/><text x="13.4227%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.1727%" y="517" width="0.0803%" height="15" fill="rgb(244,192,49)" fg:x="164" fg:w="1"/><text x="13.4227%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="13.2530%" y="677" width="0.0803%" height="15" fill="rgb(226,211,11)" fg:x="165" fg:w="1"/><text x="13.5030%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.2530%" y="661" width="0.0803%" height="15" fill="rgb(236,162,54)" fg:x="165" fg:w="1"/><text x="13.5030%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (2 samples, 0.16%)</title><rect x="13.2530%" y="725" width="0.1606%" height="15" fill="rgb(220,229,9)" fg:x="165" fg:w="2"/><text x="13.5030%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (2 samples, 0.16%)</title><rect x="13.2530%" y="709" width="0.1606%" height="15" fill="rgb(250,87,22)" fg:x="165" fg:w="2"/><text x="13.5030%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="13.2530%" y="693" width="0.1606%" height="15" fill="rgb(239,43,17)" fg:x="165" fg:w="2"/><text x="13.5030%" y="703.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="13.3333%" y="677" width="0.0803%" height="15" fill="rgb(231,177,25)" fg:x="166" fg:w="1"/><text x="13.5833%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="13.3333%" y="661" width="0.0803%" height="15" fill="rgb(219,179,1)" fg:x="166" fg:w="1"/><text x="13.5833%" y="671.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="13.3333%" y="645" width="0.0803%" height="15" fill="rgb(238,219,53)" fg:x="166" fg:w="1"/><text x="13.5833%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="13.3333%" y="629" width="0.0803%" height="15" fill="rgb(232,167,36)" fg:x="166" fg:w="1"/><text x="13.5833%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="13.3333%" y="613" width="0.0803%" height="15" fill="rgb(244,19,51)" fg:x="166" fg:w="1"/><text x="13.5833%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="13.3333%" y="597" width="0.0803%" height="15" fill="rgb(224,6,22)" fg:x="166" fg:w="1"/><text x="13.5833%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="13.3333%" y="581" width="0.0803%" height="15" fill="rgb(224,145,5)" fg:x="166" fg:w="1"/><text x="13.5833%" y="591.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="13.3333%" y="565" width="0.0803%" height="15" fill="rgb(234,130,49)" fg:x="166" fg:w="1"/><text x="13.5833%" y="575.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="13.3333%" y="549" width="0.0803%" height="15" fill="rgb(254,6,2)" fg:x="166" fg:w="1"/><text x="13.5833%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.3333%" y="533" width="0.0803%" height="15" fill="rgb(208,96,46)" fg:x="166" fg:w="1"/><text x="13.5833%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="13.4137%" y="645" width="0.1606%" height="15" fill="rgb(239,3,39)" fg:x="167" fg:w="2"/><text x="13.6637%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.4940%" y="629" width="0.0803%" height="15" fill="rgb(233,210,1)" fg:x="168" fg:w="1"/><text x="13.7440%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.4940%" y="613" width="0.0803%" height="15" fill="rgb(244,137,37)" fg:x="168" fg:w="1"/><text x="13.7440%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.4940%" y="597" width="0.0803%" height="15" fill="rgb(240,136,2)" fg:x="168" fg:w="1"/><text x="13.7440%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="13.4137%" y="693" width="0.2410%" height="15" fill="rgb(239,18,37)" fg:x="167" fg:w="3"/><text x="13.6637%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="13.4137%" y="677" width="0.2410%" height="15" fill="rgb(218,185,22)" fg:x="167" fg:w="3"/><text x="13.6637%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="13.4137%" y="661" width="0.2410%" height="15" fill="rgb(225,218,4)" fg:x="167" fg:w="3"/><text x="13.6637%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="13.5743%" y="645" width="0.0803%" height="15" fill="rgb(230,182,32)" fg:x="169" fg:w="1"/><text x="13.8243%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.5743%" y="629" width="0.0803%" height="15" fill="rgb(242,56,43)" fg:x="169" fg:w="1"/><text x="13.8243%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="13.6546%" y="693" width="0.0803%" height="15" fill="rgb(233,99,24)" fg:x="170" fg:w="1"/><text x="13.9046%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="13.6546%" y="677" width="0.0803%" height="15" fill="rgb(234,209,42)" fg:x="170" fg:w="1"/><text x="13.9046%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.6546%" y="661" width="0.0803%" height="15" fill="rgb(227,7,12)" fg:x="170" fg:w="1"/><text x="13.9046%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="13.7349%" y="677" width="0.0803%" height="15" fill="rgb(245,203,43)" fg:x="171" fg:w="1"/><text x="13.9849%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.7349%" y="661" width="0.0803%" height="15" fill="rgb(238,205,33)" fg:x="171" fg:w="1"/><text x="13.9849%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.7349%" y="645" width="0.0803%" height="15" fill="rgb(231,56,7)" fg:x="171" fg:w="1"/><text x="13.9849%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.7349%" y="629" width="0.0803%" height="15" fill="rgb(244,186,29)" fg:x="171" fg:w="1"/><text x="13.9849%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="13.7349%" y="693" width="0.2410%" height="15" fill="rgb(234,111,31)" fg:x="171" fg:w="3"/><text x="13.9849%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="13.8153%" y="677" width="0.1606%" height="15" fill="rgb(241,149,10)" fg:x="172" fg:w="2"/><text x="14.0653%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="13.8153%" y="661" width="0.1606%" height="15" fill="rgb(249,206,44)" fg:x="172" fg:w="2"/><text x="14.0653%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="13.8153%" y="645" width="0.1606%" height="15" fill="rgb(251,153,30)" fg:x="172" fg:w="2"/><text x="14.0653%" y="655.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="13.8956%" y="629" width="0.0803%" height="15" fill="rgb(239,152,38)" fg:x="173" fg:w="1"/><text x="14.1456%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="13.9759%" y="661" width="0.0803%" height="15" fill="rgb(249,139,47)" fg:x="174" fg:w="1"/><text x="14.2259%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.9759%" y="645" width="0.0803%" height="15" fill="rgb(244,64,35)" fg:x="174" fg:w="1"/><text x="14.2259%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.9759%" y="629" width="0.0803%" height="15" fill="rgb(216,46,15)" fg:x="174" fg:w="1"/><text x="14.2259%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (9 samples, 0.72%)</title><rect x="13.4137%" y="725" width="0.7229%" height="15" fill="rgb(250,74,19)" fg:x="167" fg:w="9"/><text x="13.6637%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (9 samples, 0.72%)</title><rect x="13.4137%" y="709" width="0.7229%" height="15" fill="rgb(249,42,33)" fg:x="167" fg:w="9"/><text x="13.6637%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="13.9759%" y="693" width="0.1606%" height="15" fill="rgb(242,149,17)" fg:x="174" fg:w="2"/><text x="14.2259%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="13.9759%" y="677" width="0.1606%" height="15" fill="rgb(244,29,21)" fg:x="174" fg:w="2"/><text x="14.2259%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="14.0562%" y="661" width="0.0803%" height="15" fill="rgb(220,130,37)" fg:x="175" fg:w="1"/><text x="14.3062%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.0562%" y="645" width="0.0803%" height="15" fill="rgb(211,67,2)" fg:x="175" fg:w="1"/><text x="14.3062%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="14.0562%" y="629" width="0.0803%" height="15" fill="rgb(235,68,52)" fg:x="175" fg:w="1"/><text x="14.3062%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="14.0562%" y="613" width="0.0803%" height="15" fill="rgb(246,142,3)" fg:x="175" fg:w="1"/><text x="14.3062%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.1365%" y="709" width="0.0803%" height="15" fill="rgb(241,25,7)" fg:x="176" fg:w="1"/><text x="14.3865%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.1365%" y="693" width="0.0803%" height="15" fill="rgb(242,119,39)" fg:x="176" fg:w="1"/><text x="14.3865%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="14.1365%" y="677" width="0.0803%" height="15" fill="rgb(241,98,45)" fg:x="176" fg:w="1"/><text x="14.3865%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.1365%" y="661" width="0.0803%" height="15" fill="rgb(254,28,30)" fg:x="176" fg:w="1"/><text x="14.3865%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.1365%" y="645" width="0.0803%" height="15" fill="rgb(241,142,54)" fg:x="176" fg:w="1"/><text x="14.3865%" y="655.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="14.2169%" y="709" width="0.0803%" height="15" fill="rgb(222,85,15)" fg:x="177" fg:w="1"/><text x="14.4669%" y="719.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="14.2169%" y="693" width="0.0803%" height="15" fill="rgb(210,85,47)" fg:x="177" fg:w="1"/><text x="14.4669%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="14.2169%" y="677" width="0.0803%" height="15" fill="rgb(224,206,25)" fg:x="177" fg:w="1"/><text x="14.4669%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="14.2169%" y="661" width="0.0803%" height="15" fill="rgb(243,201,19)" fg:x="177" fg:w="1"/><text x="14.4669%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.2169%" y="645" width="0.0803%" height="15" fill="rgb(236,59,4)" fg:x="177" fg:w="1"/><text x="14.4669%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="14.2972%" y="709" width="0.0803%" height="15" fill="rgb(254,179,45)" fg:x="178" fg:w="1"/><text x="14.5472%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="14.2972%" y="693" width="0.0803%" height="15" fill="rgb(226,14,10)" fg:x="178" fg:w="1"/><text x="14.5472%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="14.2972%" y="677" width="0.0803%" height="15" fill="rgb(244,27,41)" fg:x="178" fg:w="1"/><text x="14.5472%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="14.2972%" y="661" width="0.0803%" height="15" fill="rgb(235,35,32)" fg:x="178" fg:w="1"/><text x="14.5472%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="14.2972%" y="645" width="0.0803%" height="15" fill="rgb(218,68,31)" fg:x="178" fg:w="1"/><text x="14.5472%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="14.2972%" y="629" width="0.0803%" height="15" fill="rgb(207,120,37)" fg:x="178" fg:w="1"/><text x="14.5472%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.2972%" y="613" width="0.0803%" height="15" fill="rgb(227,98,0)" fg:x="178" fg:w="1"/><text x="14.5472%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.2972%" y="597" width="0.0803%" height="15" fill="rgb(207,7,3)" fg:x="178" fg:w="1"/><text x="14.5472%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.2972%" y="581" width="0.0803%" height="15" fill="rgb(206,98,19)" fg:x="178" fg:w="1"/><text x="14.5472%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.2972%" y="565" width="0.0803%" height="15" fill="rgb(217,5,26)" fg:x="178" fg:w="1"/><text x="14.5472%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.2972%" y="549" width="0.0803%" height="15" fill="rgb(235,190,38)" fg:x="178" fg:w="1"/><text x="14.5472%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.2972%" y="533" width="0.0803%" height="15" fill="rgb(247,86,24)" fg:x="178" fg:w="1"/><text x="14.5472%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="14.3775%" y="693" width="0.0803%" height="15" fill="rgb(205,101,16)" fg:x="179" fg:w="1"/><text x="14.6275%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.3775%" y="677" width="0.0803%" height="15" fill="rgb(246,168,33)" fg:x="179" fg:w="1"/><text x="14.6275%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.3775%" y="661" width="0.0803%" height="15" fill="rgb(231,114,1)" fg:x="179" fg:w="1"/><text x="14.6275%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.3775%" y="645" width="0.0803%" height="15" fill="rgb(207,184,53)" fg:x="179" fg:w="1"/><text x="14.6275%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.3775%" y="629" width="0.0803%" height="15" fill="rgb(224,95,51)" fg:x="179" fg:w="1"/><text x="14.6275%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.3775%" y="613" width="0.0803%" height="15" fill="rgb(212,188,45)" fg:x="179" fg:w="1"/><text x="14.6275%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.3775%" y="597" width="0.0803%" height="15" fill="rgb(223,154,38)" fg:x="179" fg:w="1"/><text x="14.6275%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.3775%" y="581" width="0.0803%" height="15" fill="rgb(251,22,52)" fg:x="179" fg:w="1"/><text x="14.6275%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.3775%" y="565" width="0.0803%" height="15" fill="rgb(229,209,22)" fg:x="179" fg:w="1"/><text x="14.6275%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.3775%" y="549" width="0.0803%" height="15" fill="rgb(234,138,34)" fg:x="179" fg:w="1"/><text x="14.6275%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.3775%" y="533" width="0.0803%" height="15" fill="rgb(212,95,11)" fg:x="179" fg:w="1"/><text x="14.6275%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.3775%" y="517" width="0.0803%" height="15" fill="rgb(240,179,47)" fg:x="179" fg:w="1"/><text x="14.6275%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.3775%" y="501" width="0.0803%" height="15" fill="rgb(240,163,11)" fg:x="179" fg:w="1"/><text x="14.6275%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="14.5382%" y="645" width="0.1606%" height="15" fill="rgb(236,37,12)" fg:x="181" fg:w="2"/><text x="14.7882%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="14.6185%" y="629" width="0.0803%" height="15" fill="rgb(232,164,16)" fg:x="182" fg:w="1"/><text x="14.8685%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="14.6185%" y="613" width="0.0803%" height="15" fill="rgb(244,205,15)" fg:x="182" fg:w="1"/><text x="14.8685%" y="623.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="14.6185%" y="597" width="0.0803%" height="15" fill="rgb(223,117,47)" fg:x="182" fg:w="1"/><text x="14.8685%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="14.6988%" y="581" width="0.0803%" height="15" fill="rgb(244,107,35)" fg:x="183" fg:w="1"/><text x="14.9488%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="14.7791%" y="565" width="0.1606%" height="15" fill="rgb(205,140,8)" fg:x="184" fg:w="2"/><text x="15.0291%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="14.7791%" y="549" width="0.1606%" height="15" fill="rgb(228,84,46)" fg:x="184" fg:w="2"/><text x="15.0291%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.8594%" y="533" width="0.0803%" height="15" fill="rgb(254,188,9)" fg:x="185" fg:w="1"/><text x="15.1094%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.8594%" y="517" width="0.0803%" height="15" fill="rgb(206,112,54)" fg:x="185" fg:w="1"/><text x="15.1094%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.8594%" y="501" width="0.0803%" height="15" fill="rgb(216,84,49)" fg:x="185" fg:w="1"/><text x="15.1094%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.8594%" y="485" width="0.0803%" height="15" fill="rgb(214,194,35)" fg:x="185" fg:w="1"/><text x="15.1094%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="14.8594%" y="469" width="0.0803%" height="15" fill="rgb(249,28,3)" fg:x="185" fg:w="1"/><text x="15.1094%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="14.7791%" y="581" width="0.2410%" height="15" fill="rgb(222,56,52)" fg:x="184" fg:w="3"/><text x="15.0291%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.9398%" y="565" width="0.0803%" height="15" fill="rgb(245,217,50)" fg:x="186" fg:w="1"/><text x="15.1898%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.9398%" y="549" width="0.0803%" height="15" fill="rgb(213,201,24)" fg:x="186" fg:w="1"/><text x="15.1898%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="14.9398%" y="533" width="0.0803%" height="15" fill="rgb(248,116,28)" fg:x="186" fg:w="1"/><text x="15.1898%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="15.1004%" y="565" width="0.1606%" height="15" fill="rgb(219,72,43)" fg:x="188" fg:w="2"/><text x="15.3504%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="15.1004%" y="549" width="0.1606%" height="15" fill="rgb(209,138,14)" fg:x="188" fg:w="2"/><text x="15.3504%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="15.1004%" y="533" width="0.1606%" height="15" fill="rgb(222,18,33)" fg:x="188" fg:w="2"/><text x="15.3504%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="15.1004%" y="517" width="0.1606%" height="15" fill="rgb(213,199,7)" fg:x="188" fg:w="2"/><text x="15.3504%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="15.1004%" y="501" width="0.1606%" height="15" fill="rgb(250,110,10)" fg:x="188" fg:w="2"/><text x="15.3504%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="15.1004%" y="485" width="0.1606%" height="15" fill="rgb(248,123,6)" fg:x="188" fg:w="2"/><text x="15.3504%" y="495.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="15.1004%" y="469" width="0.1606%" height="15" fill="rgb(206,91,31)" fg:x="188" fg:w="2"/><text x="15.3504%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="15.2610%" y="549" width="0.0803%" height="15" fill="rgb(211,154,13)" fg:x="190" fg:w="1"/><text x="15.5110%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="15.2610%" y="533" width="0.0803%" height="15" fill="rgb(225,148,7)" fg:x="190" fg:w="1"/><text x="15.5110%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="15.2610%" y="517" width="0.0803%" height="15" fill="rgb(220,160,43)" fg:x="190" fg:w="1"/><text x="15.5110%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="15.2610%" y="501" width="0.0803%" height="15" fill="rgb(213,52,39)" fg:x="190" fg:w="1"/><text x="15.5110%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.2610%" y="485" width="0.0803%" height="15" fill="rgb(243,137,7)" fg:x="190" fg:w="1"/><text x="15.5110%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.2610%" y="469" width="0.0803%" height="15" fill="rgb(230,79,13)" fg:x="190" fg:w="1"/><text x="15.5110%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.2610%" y="453" width="0.0803%" height="15" fill="rgb(247,105,23)" fg:x="190" fg:w="1"/><text x="15.5110%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="15.3414%" y="549" width="0.2410%" height="15" fill="rgb(223,179,41)" fg:x="191" fg:w="3"/><text x="15.5914%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="15.4217%" y="533" width="0.1606%" height="15" fill="rgb(218,9,34)" fg:x="192" fg:w="2"/><text x="15.6717%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="15.4217%" y="517" width="0.1606%" height="15" fill="rgb(222,106,8)" fg:x="192" fg:w="2"/><text x="15.6717%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.5020%" y="501" width="0.0803%" height="15" fill="rgb(211,220,0)" fg:x="193" fg:w="1"/><text x="15.7520%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="15.6627%" y="533" width="0.3213%" height="15" fill="rgb(229,52,16)" fg:x="195" fg:w="4"/><text x="15.9127%" y="543.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="15.6627%" y="517" width="0.3213%" height="15" fill="rgb(212,155,18)" fg:x="195" fg:w="4"/><text x="15.9127%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="15.7430%" y="501" width="0.2410%" height="15" fill="rgb(242,21,14)" fg:x="196" fg:w="3"/><text x="15.9930%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="15.7430%" y="485" width="0.2410%" height="15" fill="rgb(222,19,48)" fg:x="196" fg:w="3"/><text x="15.9930%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="15.7430%" y="469" width="0.2410%" height="15" fill="rgb(232,45,27)" fg:x="196" fg:w="3"/><text x="15.9930%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="15.7430%" y="453" width="0.2410%" height="15" fill="rgb(249,103,42)" fg:x="196" fg:w="3"/><text x="15.9930%" y="463.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="15.7430%" y="437" width="0.2410%" height="15" fill="rgb(246,81,33)" fg:x="196" fg:w="3"/><text x="15.9930%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 0.48%)</title><rect x="15.9839%" y="517" width="0.4819%" height="15" fill="rgb(252,33,42)" fg:x="199" fg:w="6"/><text x="16.2339%" y="527.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.40%)</title><rect x="16.0643%" y="501" width="0.4016%" height="15" fill="rgb(209,212,41)" fg:x="200" fg:w="5"/><text x="16.3143%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="16.2249%" y="485" width="0.2410%" height="15" fill="rgb(207,154,6)" fg:x="202" fg:w="3"/><text x="16.4749%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="16.2249%" y="469" width="0.2410%" height="15" fill="rgb(223,64,47)" fg:x="202" fg:w="3"/><text x="16.4749%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="16.2249%" y="453" width="0.2410%" height="15" fill="rgb(211,161,38)" fg:x="202" fg:w="3"/><text x="16.4749%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="16.2249%" y="437" width="0.2410%" height="15" fill="rgb(219,138,40)" fg:x="202" fg:w="3"/><text x="16.4749%" y="447.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="16.2249%" y="421" width="0.2410%" height="15" fill="rgb(241,228,46)" fg:x="202" fg:w="3"/><text x="16.4749%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="15.9839%" y="533" width="0.5622%" height="15" fill="rgb(223,209,38)" fg:x="199" fg:w="7"/><text x="16.2339%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.4659%" y="517" width="0.0803%" height="15" fill="rgb(236,164,45)" fg:x="205" fg:w="1"/><text x="16.7159%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.4659%" y="501" width="0.0803%" height="15" fill="rgb(231,15,5)" fg:x="205" fg:w="1"/><text x="16.7159%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.4659%" y="485" width="0.0803%" height="15" fill="rgb(252,35,15)" fg:x="205" fg:w="1"/><text x="16.7159%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.04%)</title><rect x="15.5823%" y="549" width="1.0442%" height="15" fill="rgb(248,181,18)" fg:x="194" fg:w="13"/><text x="15.8323%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.5462%" y="533" width="0.0803%" height="15" fill="rgb(233,39,42)" fg:x="206" fg:w="1"/><text x="16.7962%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.5462%" y="517" width="0.0803%" height="15" fill="rgb(238,110,33)" fg:x="206" fg:w="1"/><text x="16.7962%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.5462%" y="501" width="0.0803%" height="15" fill="rgb(233,195,10)" fg:x="206" fg:w="1"/><text x="16.7962%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (18 samples, 1.45%)</title><rect x="15.2610%" y="565" width="1.4458%" height="15" fill="rgb(254,105,3)" fg:x="190" fg:w="18"/><text x="15.5110%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.6265%" y="549" width="0.0803%" height="15" fill="rgb(221,225,9)" fg:x="207" fg:w="1"/><text x="16.8765%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.6265%" y="533" width="0.0803%" height="15" fill="rgb(224,227,45)" fg:x="207" fg:w="1"/><text x="16.8765%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.6265%" y="517" width="0.0803%" height="15" fill="rgb(229,198,43)" fg:x="207" fg:w="1"/><text x="16.8765%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (24 samples, 1.93%)</title><rect x="15.0201%" y="581" width="1.9277%" height="15" fill="rgb(206,209,35)" fg:x="187" fg:w="24"/><text x="15.2701%" y="591.50">s..</text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="16.7068%" y="565" width="0.2410%" height="15" fill="rgb(245,195,53)" fg:x="208" fg:w="3"/><text x="16.9568%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="16.7068%" y="549" width="0.2410%" height="15" fill="rgb(240,92,26)" fg:x="208" fg:w="3"/><text x="16.9568%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="16.7068%" y="533" width="0.2410%" height="15" fill="rgb(207,40,23)" fg:x="208" fg:w="3"/><text x="16.9568%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="16.8675%" y="517" width="0.0803%" height="15" fill="rgb(223,111,35)" fg:x="210" fg:w="1"/><text x="17.1175%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (29 samples, 2.33%)</title><rect x="14.6988%" y="597" width="2.3293%" height="15" fill="rgb(229,147,28)" fg:x="183" fg:w="29"/><text x="14.9488%" y="607.50">&lt;..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.9478%" y="581" width="0.0803%" height="15" fill="rgb(211,29,28)" fg:x="211" fg:w="1"/><text x="17.1978%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="17.0281%" y="597" width="0.0803%" height="15" fill="rgb(228,72,33)" fg:x="212" fg:w="1"/><text x="17.2781%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="17.0281%" y="581" width="0.0803%" height="15" fill="rgb(205,214,31)" fg:x="212" fg:w="1"/><text x="17.2781%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="17.0281%" y="565" width="0.0803%" height="15" fill="rgb(224,111,15)" fg:x="212" fg:w="1"/><text x="17.2781%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.0281%" y="549" width="0.0803%" height="15" fill="rgb(253,21,26)" fg:x="212" fg:w="1"/><text x="17.2781%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="17.1084%" y="565" width="0.1606%" height="15" fill="rgb(245,139,43)" fg:x="213" fg:w="2"/><text x="17.3584%" y="575.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="17.2691%" y="565" width="0.0803%" height="15" fill="rgb(252,170,7)" fg:x="215" fg:w="1"/><text x="17.5191%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="17.2691%" y="549" width="0.0803%" height="15" fill="rgb(231,118,14)" fg:x="215" fg:w="1"/><text x="17.5191%" y="559.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::iter (1 samples, 0.08%)</title><rect x="17.3494%" y="565" width="0.0803%" height="15" fill="rgb(238,83,0)" fg:x="216" fg:w="1"/><text x="17.5994%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (6 samples, 0.48%)</title><rect x="17.1084%" y="581" width="0.4819%" height="15" fill="rgb(221,39,39)" fg:x="213" fg:w="6"/><text x="17.3584%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (2 samples, 0.16%)</title><rect x="17.4297%" y="565" width="0.1606%" height="15" fill="rgb(222,119,46)" fg:x="217" fg:w="2"/><text x="17.6797%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="17.4297%" y="549" width="0.1606%" height="15" fill="rgb(222,165,49)" fg:x="217" fg:w="2"/><text x="17.6797%" y="559.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="17.5100%" y="533" width="0.0803%" height="15" fill="rgb(219,113,52)" fg:x="218" fg:w="1"/><text x="17.7600%" y="543.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="17.5100%" y="517" width="0.0803%" height="15" fill="rgb(214,7,15)" fg:x="218" fg:w="1"/><text x="17.7600%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.6707%" y="549" width="0.0803%" height="15" fill="rgb(235,32,4)" fg:x="220" fg:w="1"/><text x="17.9207%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="17.6707%" y="533" width="0.0803%" height="15" fill="rgb(238,90,54)" fg:x="220" fg:w="1"/><text x="17.9207%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.7510%" y="501" width="0.0803%" height="15" fill="rgb(213,208,19)" fg:x="221" fg:w="1"/><text x="18.0010%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.7510%" y="485" width="0.0803%" height="15" fill="rgb(233,156,4)" fg:x="221" fg:w="1"/><text x="18.0010%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="17.8313%" y="501" width="0.0803%" height="15" fill="rgb(207,194,5)" fg:x="222" fg:w="1"/><text x="18.0813%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.8313%" y="485" width="0.0803%" height="15" fill="rgb(206,111,30)" fg:x="222" fg:w="1"/><text x="18.0813%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.8313%" y="469" width="0.0803%" height="15" fill="rgb(243,70,54)" fg:x="222" fg:w="1"/><text x="18.0813%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.8313%" y="453" width="0.0803%" height="15" fill="rgb(242,28,8)" fg:x="222" fg:w="1"/><text x="18.0813%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.8313%" y="437" width="0.0803%" height="15" fill="rgb(219,106,18)" fg:x="222" fg:w="1"/><text x="18.0813%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.8313%" y="421" width="0.0803%" height="15" fill="rgb(244,222,10)" fg:x="222" fg:w="1"/><text x="18.0813%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.8313%" y="405" width="0.0803%" height="15" fill="rgb(236,179,52)" fg:x="222" fg:w="1"/><text x="18.0813%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.9116%" y="469" width="0.0803%" height="15" fill="rgb(213,23,39)" fg:x="223" fg:w="1"/><text x="18.1616%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.9920%" y="453" width="0.0803%" height="15" fill="rgb(238,48,10)" fg:x="224" fg:w="1"/><text x="18.2420%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.9920%" y="437" width="0.0803%" height="15" fill="rgb(251,196,23)" fg:x="224" fg:w="1"/><text x="18.2420%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.9920%" y="421" width="0.0803%" height="15" fill="rgb(250,152,24)" fg:x="224" fg:w="1"/><text x="18.2420%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="17.7510%" y="517" width="0.4016%" height="15" fill="rgb(209,150,17)" fg:x="221" fg:w="5"/><text x="18.0010%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="17.9116%" y="501" width="0.2410%" height="15" fill="rgb(234,202,34)" fg:x="223" fg:w="3"/><text x="18.1616%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="17.9116%" y="485" width="0.2410%" height="15" fill="rgb(253,148,53)" fg:x="223" fg:w="3"/><text x="18.1616%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="17.9920%" y="469" width="0.1606%" height="15" fill="rgb(218,129,16)" fg:x="224" fg:w="2"/><text x="18.2420%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.0723%" y="453" width="0.0803%" height="15" fill="rgb(216,85,19)" fg:x="225" fg:w="1"/><text x="18.3223%" y="463.50"></text></g><g><title>engine::session::Session::flush (48 samples, 3.86%)</title><rect x="14.3775%" y="709" width="3.8554%" height="15" fill="rgb(235,228,7)" fg:x="179" fg:w="48"/><text x="14.6275%" y="719.50">engi..</text></g><g><title>engine::session::Session::save_changes (47 samples, 3.78%)</title><rect x="14.4578%" y="693" width="3.7751%" height="15" fill="rgb(245,175,0)" fg:x="180" fg:w="47"/><text x="14.7078%" y="703.50">engi..</text></g><g><title>engine::session::state::State::close (46 samples, 3.69%)</title><rect x="14.5382%" y="677" width="3.6948%" height="15" fill="rgb(208,168,36)" fg:x="181" fg:w="46"/><text x="14.7882%" y="687.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (46 samples, 3.69%)</title><rect x="14.5382%" y="661" width="3.6948%" height="15" fill="rgb(246,171,24)" fg:x="181" fg:w="46"/><text x="14.7882%" y="671.50">engi..</text></g><g><title>core::iter::adapters::try_process (44 samples, 3.53%)</title><rect x="14.6988%" y="645" width="3.5341%" height="15" fill="rgb(215,142,24)" fg:x="183" fg:w="44"/><text x="14.9488%" y="655.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (44 samples, 3.53%)</title><rect x="14.6988%" y="629" width="3.5341%" height="15" fill="rgb(250,187,7)" fg:x="183" fg:w="44"/><text x="14.9488%" y="639.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (44 samples, 3.53%)</title><rect x="14.6988%" y="613" width="3.5341%" height="15" fill="rgb(228,66,33)" fg:x="183" fg:w="44"/><text x="14.9488%" y="623.50">eng..</text></g><g><title>kernel::model::any_entity_changes (14 samples, 1.12%)</title><rect x="17.1084%" y="597" width="1.1245%" height="15" fill="rgb(234,215,21)" fg:x="213" fg:w="14"/><text x="17.3584%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="17.5904%" y="581" width="0.6426%" height="15" fill="rgb(222,191,20)" fg:x="219" fg:w="8"/><text x="17.8404%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="17.5904%" y="565" width="0.6426%" height="15" fill="rgb(245,79,54)" fg:x="219" fg:w="8"/><text x="17.8404%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="17.7510%" y="549" width="0.4819%" height="15" fill="rgb(240,10,37)" fg:x="221" fg:w="6"/><text x="18.0010%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="17.7510%" y="533" width="0.4819%" height="15" fill="rgb(214,192,32)" fg:x="221" fg:w="6"/><text x="18.0010%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="18.1526%" y="517" width="0.0803%" height="15" fill="rgb(209,36,54)" fg:x="226" fg:w="1"/><text x="18.4026%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="18.2329%" y="677" width="0.0803%" height="15" fill="rgb(220,10,11)" fg:x="227" fg:w="1"/><text x="18.4829%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.2329%" y="661" width="0.0803%" height="15" fill="rgb(221,106,17)" fg:x="227" fg:w="1"/><text x="18.4829%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.2329%" y="645" width="0.0803%" height="15" fill="rgb(251,142,44)" fg:x="227" fg:w="1"/><text x="18.4829%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="18.2329%" y="629" width="0.0803%" height="15" fill="rgb(238,13,15)" fg:x="227" fg:w="1"/><text x="18.4829%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="18.3133%" y="677" width="0.0803%" height="15" fill="rgb(208,107,27)" fg:x="228" fg:w="1"/><text x="18.5633%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="18.3133%" y="661" width="0.0803%" height="15" fill="rgb(205,136,37)" fg:x="228" fg:w="1"/><text x="18.5633%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="18.3133%" y="645" width="0.0803%" height="15" fill="rgb(250,205,27)" fg:x="228" fg:w="1"/><text x="18.5633%" y="655.50"></text></g><g><title>plugins_core::build::Build::named (3 samples, 0.24%)</title><rect x="18.2329%" y="709" width="0.2410%" height="15" fill="rgb(210,80,43)" fg:x="227" fg:w="3"/><text x="18.4829%" y="719.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (3 samples, 0.24%)</title><rect x="18.2329%" y="693" width="0.2410%" height="15" fill="rgb(247,160,36)" fg:x="227" fg:w="3"/><text x="18.4829%" y="703.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="18.3936%" y="677" width="0.0803%" height="15" fill="rgb(234,13,49)" fg:x="229" fg:w="1"/><text x="18.6436%" y="687.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.5542%" y="661" width="0.0803%" height="15" fill="rgb(234,122,0)" fg:x="231" fg:w="1"/><text x="18.8042%" y="671.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (3 samples, 0.24%)</title><rect x="18.5542%" y="677" width="0.2410%" height="15" fill="rgb(207,146,38)" fg:x="231" fg:w="3"/><text x="18.8042%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="18.6345%" y="661" width="0.1606%" height="15" fill="rgb(207,177,25)" fg:x="232" fg:w="2"/><text x="18.8845%" y="671.50"></text></g><g><title>plugins_core::build::Build::new (5 samples, 0.40%)</title><rect x="18.4739%" y="709" width="0.4016%" height="15" fill="rgb(211,178,42)" fg:x="230" fg:w="5"/><text x="18.7239%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (5 samples, 0.40%)</title><rect x="18.4739%" y="693" width="0.4016%" height="15" fill="rgb(230,69,54)" fg:x="230" fg:w="5"/><text x="18.7239%" y="703.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="18.7952%" y="677" width="0.0803%" height="15" fill="rgb(214,135,41)" fg:x="234" fg:w="1"/><text x="19.0452%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="18.7952%" y="661" width="0.0803%" height="15" fill="rgb(237,67,25)" fg:x="234" fg:w="1"/><text x="19.0452%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="18.7952%" y="645" width="0.0803%" height="15" fill="rgb(222,189,50)" fg:x="234" fg:w="1"/><text x="19.0452%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="18.9558%" y="693" width="0.0803%" height="15" fill="rgb(245,148,34)" fg:x="236" fg:w="1"/><text x="19.2058%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="18.9558%" y="677" width="0.0803%" height="15" fill="rgb(222,29,6)" fg:x="236" fg:w="1"/><text x="19.2058%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.9558%" y="661" width="0.0803%" height="15" fill="rgb(221,189,43)" fg:x="236" fg:w="1"/><text x="19.2058%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.9558%" y="645" width="0.0803%" height="15" fill="rgb(207,36,27)" fg:x="236" fg:w="1"/><text x="19.2058%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="18.9558%" y="629" width="0.0803%" height="15" fill="rgb(217,90,24)" fg:x="236" fg:w="1"/><text x="19.2058%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.9558%" y="613" width="0.0803%" height="15" fill="rgb(224,66,35)" fg:x="236" fg:w="1"/><text x="19.2058%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.9558%" y="597" width="0.0803%" height="15" fill="rgb(221,13,50)" fg:x="236" fg:w="1"/><text x="19.2058%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.9558%" y="581" width="0.0803%" height="15" fill="rgb(236,68,49)" fg:x="236" fg:w="1"/><text x="19.2058%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.0361%" y="661" width="0.0803%" height="15" fill="rgb(229,146,28)" fg:x="237" fg:w="1"/><text x="19.2861%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.0361%" y="645" width="0.0803%" height="15" fill="rgb(225,31,38)" fg:x="237" fg:w="1"/><text x="19.2861%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.0361%" y="629" width="0.0803%" height="15" fill="rgb(250,208,3)" fg:x="237" fg:w="1"/><text x="19.2861%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.0361%" y="613" width="0.0803%" height="15" fill="rgb(246,54,23)" fg:x="237" fg:w="1"/><text x="19.2861%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.0361%" y="597" width="0.0803%" height="15" fill="rgb(243,76,11)" fg:x="237" fg:w="1"/><text x="19.2861%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.0361%" y="581" width="0.0803%" height="15" fill="rgb(245,21,50)" fg:x="237" fg:w="1"/><text x="19.2861%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.0361%" y="565" width="0.0803%" height="15" fill="rgb(228,9,43)" fg:x="237" fg:w="1"/><text x="19.2861%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.0361%" y="549" width="0.0803%" height="15" fill="rgb(208,100,47)" fg:x="237" fg:w="1"/><text x="19.2861%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.0361%" y="533" width="0.0803%" height="15" fill="rgb(232,26,8)" fg:x="237" fg:w="1"/><text x="19.2861%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.0361%" y="517" width="0.0803%" height="15" fill="rgb(216,166,38)" fg:x="237" fg:w="1"/><text x="19.2861%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.0361%" y="501" width="0.0803%" height="15" fill="rgb(251,202,51)" fg:x="237" fg:w="1"/><text x="19.2861%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.0361%" y="485" width="0.0803%" height="15" fill="rgb(254,216,34)" fg:x="237" fg:w="1"/><text x="19.2861%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.0361%" y="469" width="0.0803%" height="15" fill="rgb(251,32,27)" fg:x="237" fg:w="1"/><text x="19.2861%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.0361%" y="453" width="0.0803%" height="15" fill="rgb(208,127,28)" fg:x="237" fg:w="1"/><text x="19.2861%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="19.0361%" y="677" width="0.1606%" height="15" fill="rgb(224,137,22)" fg:x="237" fg:w="2"/><text x="19.2861%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.1165%" y="661" width="0.0803%" height="15" fill="rgb(254,70,32)" fg:x="238" fg:w="1"/><text x="19.3665%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.1165%" y="645" width="0.0803%" height="15" fill="rgb(229,75,37)" fg:x="238" fg:w="1"/><text x="19.3665%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="19.1165%" y="629" width="0.0803%" height="15" fill="rgb(252,64,23)" fg:x="238" fg:w="1"/><text x="19.3665%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.1165%" y="613" width="0.0803%" height="15" fill="rgb(232,162,48)" fg:x="238" fg:w="1"/><text x="19.3665%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.1165%" y="597" width="0.0803%" height="15" fill="rgb(246,160,12)" fg:x="238" fg:w="1"/><text x="19.3665%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.1165%" y="581" width="0.0803%" height="15" fill="rgb(247,166,0)" fg:x="238" fg:w="1"/><text x="19.3665%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="19.1165%" y="565" width="0.0803%" height="15" fill="rgb(249,219,21)" fg:x="238" fg:w="1"/><text x="19.3665%" y="575.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="19.1968%" y="661" width="0.0803%" height="15" fill="rgb(205,209,3)" fg:x="239" fg:w="1"/><text x="19.4468%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="19.1968%" y="645" width="0.0803%" height="15" fill="rgb(243,44,1)" fg:x="239" fg:w="1"/><text x="19.4468%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="19.1968%" y="677" width="0.1606%" height="15" fill="rgb(206,159,16)" fg:x="239" fg:w="2"/><text x="19.4468%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="19.2771%" y="661" width="0.0803%" height="15" fill="rgb(244,77,30)" fg:x="240" fg:w="1"/><text x="19.5271%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="19.2771%" y="645" width="0.0803%" height="15" fill="rgb(218,69,12)" fg:x="240" fg:w="1"/><text x="19.5271%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.2771%" y="629" width="0.0803%" height="15" fill="rgb(212,87,7)" fg:x="240" fg:w="1"/><text x="19.5271%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="19.2771%" y="613" width="0.0803%" height="15" fill="rgb(245,114,25)" fg:x="240" fg:w="1"/><text x="19.5271%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="19.2771%" y="597" width="0.0803%" height="15" fill="rgb(210,61,42)" fg:x="240" fg:w="1"/><text x="19.5271%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.2771%" y="581" width="0.0803%" height="15" fill="rgb(211,52,33)" fg:x="240" fg:w="1"/><text x="19.5271%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="19.3574%" y="661" width="0.0803%" height="15" fill="rgb(234,58,33)" fg:x="241" fg:w="1"/><text x="19.6074%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="19.3574%" y="645" width="0.0803%" height="15" fill="rgb(220,115,36)" fg:x="241" fg:w="1"/><text x="19.6074%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="19.3574%" y="629" width="0.0803%" height="15" fill="rgb(243,153,54)" fg:x="241" fg:w="1"/><text x="19.6074%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.3574%" y="613" width="0.0803%" height="15" fill="rgb(251,47,18)" fg:x="241" fg:w="1"/><text x="19.6074%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.3574%" y="597" width="0.0803%" height="15" fill="rgb(242,102,42)" fg:x="241" fg:w="1"/><text x="19.6074%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.3574%" y="581" width="0.0803%" height="15" fill="rgb(234,31,38)" fg:x="241" fg:w="1"/><text x="19.6074%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.3574%" y="565" width="0.0803%" height="15" fill="rgb(221,117,51)" fg:x="241" fg:w="1"/><text x="19.6074%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.3574%" y="549" width="0.0803%" height="15" fill="rgb(212,20,18)" fg:x="241" fg:w="1"/><text x="19.6074%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.3574%" y="533" width="0.0803%" height="15" fill="rgb(245,133,36)" fg:x="241" fg:w="1"/><text x="19.6074%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.3574%" y="517" width="0.0803%" height="15" fill="rgb(212,6,19)" fg:x="241" fg:w="1"/><text x="19.6074%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.3574%" y="501" width="0.0803%" height="15" fill="rgb(218,1,36)" fg:x="241" fg:w="1"/><text x="19.6074%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.3574%" y="485" width="0.0803%" height="15" fill="rgb(246,84,54)" fg:x="241" fg:w="1"/><text x="19.6074%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.3574%" y="469" width="0.0803%" height="15" fill="rgb(242,110,6)" fg:x="241" fg:w="1"/><text x="19.6074%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.3574%" y="453" width="0.0803%" height="15" fill="rgb(214,47,5)" fg:x="241" fg:w="1"/><text x="19.6074%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.3574%" y="437" width="0.0803%" height="15" fill="rgb(218,159,25)" fg:x="241" fg:w="1"/><text x="19.6074%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.3574%" y="421" width="0.0803%" height="15" fill="rgb(215,211,28)" fg:x="241" fg:w="1"/><text x="19.6074%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.3574%" y="405" width="0.0803%" height="15" fill="rgb(238,59,32)" fg:x="241" fg:w="1"/><text x="19.6074%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.3574%" y="389" width="0.0803%" height="15" fill="rgb(226,82,3)" fg:x="241" fg:w="1"/><text x="19.6074%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.5181%" y="629" width="0.0803%" height="15" fill="rgb(240,164,32)" fg:x="243" fg:w="1"/><text x="19.7681%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="19.5984%" y="629" width="0.0803%" height="15" fill="rgb(232,46,7)" fg:x="244" fg:w="1"/><text x="19.8484%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.5984%" y="613" width="0.0803%" height="15" fill="rgb(229,129,53)" fg:x="244" fg:w="1"/><text x="19.8484%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="19.6787%" y="629" width="0.0803%" height="15" fill="rgb(234,188,29)" fg:x="245" fg:w="1"/><text x="19.9287%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.6787%" y="613" width="0.0803%" height="15" fill="rgb(246,141,4)" fg:x="245" fg:w="1"/><text x="19.9287%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.6787%" y="597" width="0.0803%" height="15" fill="rgb(229,23,39)" fg:x="245" fg:w="1"/><text x="19.9287%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="19.8394%" y="533" width="0.0803%" height="15" fill="rgb(206,12,3)" fg:x="247" fg:w="1"/><text x="20.0894%" y="543.50"></text></g><g><title>plugins_core::build::Build::save (14 samples, 1.12%)</title><rect x="18.8755%" y="709" width="1.1245%" height="15" fill="rgb(252,226,20)" fg:x="235" fg:w="14"/><text x="19.1255%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (12 samples, 0.96%)</title><rect x="19.0361%" y="693" width="0.9639%" height="15" fill="rgb(216,123,35)" fg:x="237" fg:w="12"/><text x="19.2861%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (8 samples, 0.64%)</title><rect x="19.3574%" y="677" width="0.6426%" height="15" fill="rgb(212,68,40)" fg:x="241" fg:w="8"/><text x="19.6074%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="19.4378%" y="661" width="0.5622%" height="15" fill="rgb(254,125,32)" fg:x="242" fg:w="7"/><text x="19.6878%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="19.5181%" y="645" width="0.4819%" height="15" fill="rgb(253,97,22)" fg:x="243" fg:w="6"/><text x="19.7681%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="19.7590%" y="629" width="0.2410%" height="15" fill="rgb(241,101,14)" fg:x="246" fg:w="3"/><text x="20.0090%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="19.7590%" y="613" width="0.2410%" height="15" fill="rgb(238,103,29)" fg:x="246" fg:w="3"/><text x="20.0090%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="19.7590%" y="597" width="0.2410%" height="15" fill="rgb(233,195,47)" fg:x="246" fg:w="3"/><text x="20.0090%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="19.7590%" y="581" width="0.2410%" height="15" fill="rgb(246,218,30)" fg:x="246" fg:w="3"/><text x="20.0090%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="19.7590%" y="565" width="0.2410%" height="15" fill="rgb(219,145,47)" fg:x="246" fg:w="3"/><text x="20.0090%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="19.7590%" y="549" width="0.2410%" height="15" fill="rgb(243,12,26)" fg:x="246" fg:w="3"/><text x="20.0090%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="19.9197%" y="533" width="0.0803%" height="15" fill="rgb(214,87,16)" fg:x="248" fg:w="1"/><text x="20.1697%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="20.0000%" y="629" width="0.0803%" height="15" fill="rgb(208,99,42)" fg:x="249" fg:w="1"/><text x="20.2500%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="20.0000%" y="645" width="0.1606%" height="15" fill="rgb(253,99,2)" fg:x="249" fg:w="2"/><text x="20.2500%" y="655.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="20.0803%" y="629" width="0.0803%" height="15" fill="rgb(220,168,23)" fg:x="250" fg:w="1"/><text x="20.3303%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="20.1606%" y="549" width="0.0803%" height="15" fill="rgb(242,38,24)" fg:x="251" fg:w="1"/><text x="20.4106%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.1606%" y="533" width="0.0803%" height="15" fill="rgb(225,182,9)" fg:x="251" fg:w="1"/><text x="20.4106%" y="543.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="20.0000%" y="677" width="0.3213%" height="15" fill="rgb(243,178,37)" fg:x="249" fg:w="4"/><text x="20.2500%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="20.0000%" y="661" width="0.3213%" height="15" fill="rgb(232,139,19)" fg:x="249" fg:w="4"/><text x="20.2500%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="20.1606%" y="645" width="0.1606%" height="15" fill="rgb(225,201,24)" fg:x="251" fg:w="2"/><text x="20.4106%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="20.1606%" y="629" width="0.1606%" height="15" fill="rgb(221,47,46)" fg:x="251" fg:w="2"/><text x="20.4106%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="20.1606%" y="613" width="0.1606%" height="15" fill="rgb(249,23,13)" fg:x="251" fg:w="2"/><text x="20.4106%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="20.1606%" y="597" width="0.1606%" height="15" fill="rgb(219,9,5)" fg:x="251" fg:w="2"/><text x="20.4106%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="20.1606%" y="581" width="0.1606%" height="15" fill="rgb(254,171,16)" fg:x="251" fg:w="2"/><text x="20.4106%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="20.1606%" y="565" width="0.1606%" height="15" fill="rgb(230,171,20)" fg:x="251" fg:w="2"/><text x="20.4106%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.2410%" y="549" width="0.0803%" height="15" fill="rgb(210,71,41)" fg:x="252" fg:w="1"/><text x="20.4910%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.2410%" y="533" width="0.0803%" height="15" fill="rgb(206,173,20)" fg:x="252" fg:w="1"/><text x="20.4910%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.2410%" y="517" width="0.0803%" height="15" fill="rgb(233,88,34)" fg:x="252" fg:w="1"/><text x="20.4910%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="20.3213%" y="661" width="0.0803%" height="15" fill="rgb(223,209,46)" fg:x="253" fg:w="1"/><text x="20.5713%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.3213%" y="645" width="0.0803%" height="15" fill="rgb(250,43,18)" fg:x="253" fg:w="1"/><text x="20.5713%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="20.3213%" y="629" width="0.0803%" height="15" fill="rgb(208,13,10)" fg:x="253" fg:w="1"/><text x="20.5713%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (6 samples, 0.48%)</title><rect x="20.0000%" y="709" width="0.4819%" height="15" fill="rgb(212,200,36)" fg:x="249" fg:w="6"/><text x="20.2500%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (6 samples, 0.48%)</title><rect x="20.0000%" y="693" width="0.4819%" height="15" fill="rgb(225,90,30)" fg:x="249" fg:w="6"/><text x="20.2500%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="20.3213%" y="677" width="0.1606%" height="15" fill="rgb(236,182,39)" fg:x="253" fg:w="2"/><text x="20.5713%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="20.4016%" y="661" width="0.0803%" height="15" fill="rgb(212,144,35)" fg:x="254" fg:w="1"/><text x="20.6516%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.4016%" y="645" width="0.0803%" height="15" fill="rgb(228,63,44)" fg:x="254" fg:w="1"/><text x="20.6516%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.4016%" y="629" width="0.0803%" height="15" fill="rgb(228,109,6)" fg:x="254" fg:w="1"/><text x="20.6516%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="20.4819%" y="693" width="0.0803%" height="15" fill="rgb(238,117,24)" fg:x="255" fg:w="1"/><text x="20.7319%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.4819%" y="677" width="0.0803%" height="15" fill="rgb(242,26,26)" fg:x="255" fg:w="1"/><text x="20.7319%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.4819%" y="661" width="0.0803%" height="15" fill="rgb(221,92,48)" fg:x="255" fg:w="1"/><text x="20.7319%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.4819%" y="645" width="0.0803%" height="15" fill="rgb(209,209,32)" fg:x="255" fg:w="1"/><text x="20.7319%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.4819%" y="629" width="0.0803%" height="15" fill="rgb(221,70,22)" fg:x="255" fg:w="1"/><text x="20.7319%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.4819%" y="613" width="0.0803%" height="15" fill="rgb(248,145,5)" fg:x="255" fg:w="1"/><text x="20.7319%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.4819%" y="597" width="0.0803%" height="15" fill="rgb(226,116,26)" fg:x="255" fg:w="1"/><text x="20.7319%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.4819%" y="581" width="0.0803%" height="15" fill="rgb(244,5,17)" fg:x="255" fg:w="1"/><text x="20.7319%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.4819%" y="565" width="0.0803%" height="15" fill="rgb(252,159,33)" fg:x="255" fg:w="1"/><text x="20.7319%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="20.4819%" y="549" width="0.0803%" height="15" fill="rgb(206,71,0)" fg:x="255" fg:w="1"/><text x="20.7319%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="20.4819%" y="533" width="0.0803%" height="15" fill="rgb(233,118,54)" fg:x="255" fg:w="1"/><text x="20.7319%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="20.4819%" y="517" width="0.0803%" height="15" fill="rgb(234,83,48)" fg:x="255" fg:w="1"/><text x="20.7319%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="20.4819%" y="501" width="0.0803%" height="15" fill="rgb(228,3,54)" fg:x="255" fg:w="1"/><text x="20.7319%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.4819%" y="485" width="0.0803%" height="15" fill="rgb(226,155,13)" fg:x="255" fg:w="1"/><text x="20.7319%" y="495.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (2 samples, 0.16%)</title><rect x="20.4819%" y="709" width="0.1606%" height="15" fill="rgb(241,28,37)" fg:x="255" fg:w="2"/><text x="20.7319%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="20.5622%" y="693" width="0.0803%" height="15" fill="rgb(233,93,10)" fg:x="256" fg:w="1"/><text x="20.8122%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="20.6426%" y="693" width="0.1606%" height="15" fill="rgb(225,113,19)" fg:x="257" fg:w="2"/><text x="20.8926%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (2 samples, 0.16%)</title><rect x="20.6426%" y="677" width="0.1606%" height="15" fill="rgb(241,2,18)" fg:x="257" fg:w="2"/><text x="20.8926%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="20.6426%" y="661" width="0.1606%" height="15" fill="rgb(228,207,21)" fg:x="257" fg:w="2"/><text x="20.8926%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="20.7229%" y="645" width="0.0803%" height="15" fill="rgb(213,211,35)" fg:x="258" fg:w="1"/><text x="20.9729%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::OpenedScopeRefMut&lt;plugins_core::carrying::model::Containing,kernel::model::entity::Entity&gt;&gt; (1 samples, 0.08%)</title><rect x="20.8032%" y="693" width="0.0803%" height="15" fill="rgb(209,83,10)" fg:x="259" fg:w="1"/><text x="21.0532%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="20.8032%" y="677" width="0.0803%" height="15" fill="rgb(209,164,1)" fg:x="259" fg:w="1"/><text x="21.0532%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.8835%" y="629" width="0.0803%" height="15" fill="rgb(213,184,43)" fg:x="260" fg:w="1"/><text x="21.1335%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.8835%" y="613" width="0.0803%" height="15" fill="rgb(231,61,34)" fg:x="260" fg:w="1"/><text x="21.1335%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="20.8835%" y="661" width="0.1606%" height="15" fill="rgb(235,75,3)" fg:x="260" fg:w="2"/><text x="21.1335%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="20.8835%" y="645" width="0.1606%" height="15" fill="rgb(220,106,47)" fg:x="260" fg:w="2"/><text x="21.1335%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.9639%" y="629" width="0.0803%" height="15" fill="rgb(210,196,33)" fg:x="261" fg:w="1"/><text x="21.2139%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.9639%" y="613" width="0.0803%" height="15" fill="rgb(229,154,42)" fg:x="261" fg:w="1"/><text x="21.2139%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="20.9639%" y="597" width="0.0803%" height="15" fill="rgb(228,114,26)" fg:x="261" fg:w="1"/><text x="21.2139%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.9639%" y="581" width="0.0803%" height="15" fill="rgb(208,144,1)" fg:x="261" fg:w="1"/><text x="21.2139%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="20.9639%" y="565" width="0.0803%" height="15" fill="rgb(239,112,37)" fg:x="261" fg:w="1"/><text x="21.2139%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="20.8835%" y="693" width="0.2410%" height="15" fill="rgb(210,96,50)" fg:x="260" fg:w="3"/><text x="21.1335%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="20.8835%" y="677" width="0.2410%" height="15" fill="rgb(222,178,2)" fg:x="260" fg:w="3"/><text x="21.1335%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="21.0442%" y="661" width="0.0803%" height="15" fill="rgb(226,74,18)" fg:x="262" fg:w="1"/><text x="21.2942%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="21.0442%" y="645" width="0.0803%" height="15" fill="rgb(225,67,54)" fg:x="262" fg:w="1"/><text x="21.2942%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="21.1245%" y="677" width="0.0803%" height="15" fill="rgb(251,92,32)" fg:x="263" fg:w="1"/><text x="21.3745%" y="687.50"></text></g><g><title>plugins_core::tools::set_container (8 samples, 0.64%)</title><rect x="20.6426%" y="709" width="0.6426%" height="15" fill="rgb(228,149,22)" fg:x="257" fg:w="8"/><text x="20.8926%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="21.1245%" y="693" width="0.1606%" height="15" fill="rgb(243,54,13)" fg:x="263" fg:w="2"/><text x="21.3745%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="21.2048%" y="677" width="0.0803%" height="15" fill="rgb(243,180,28)" fg:x="264" fg:w="1"/><text x="21.4548%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="21.2048%" y="661" width="0.0803%" height="15" fill="rgb(208,167,24)" fg:x="264" fg:w="1"/><text x="21.4548%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="21.2048%" y="645" width="0.0803%" height="15" fill="rgb(245,73,45)" fg:x="264" fg:w="1"/><text x="21.4548%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="21.2048%" y="629" width="0.0803%" height="15" fill="rgb(237,203,48)" fg:x="264" fg:w="1"/><text x="21.4548%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.2048%" y="613" width="0.0803%" height="15" fill="rgb(211,197,16)" fg:x="264" fg:w="1"/><text x="21.4548%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.2048%" y="597" width="0.0803%" height="15" fill="rgb(243,99,51)" fg:x="264" fg:w="1"/><text x="21.4548%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (91 samples, 7.31%)</title><rect x="14.1365%" y="725" width="7.3092%" height="15" fill="rgb(215,123,29)" fg:x="176" fg:w="91"/><text x="14.3865%" y="735.50">plugins_co..</text></g><g><title>plugins_core::tools::set_wearing (2 samples, 0.16%)</title><rect x="21.2851%" y="709" width="0.1606%" height="15" fill="rgb(239,186,37)" fg:x="265" fg:w="2"/><text x="21.5351%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="21.2851%" y="693" width="0.1606%" height="15" fill="rgb(252,136,39)" fg:x="265" fg:w="2"/><text x="21.5351%" y="703.50"></text></g><g><title>plugins_core::fashion::model::_::&lt;impl serde::ser::Serialize for plugins_core::fashion::model::Wearing&gt;::serialize (1 samples, 0.08%)</title><rect x="21.3655%" y="677" width="0.0803%" height="15" fill="rgb(223,213,32)" fg:x="266" fg:w="1"/><text x="21.6155%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="21.3655%" y="661" width="0.0803%" height="15" fill="rgb(233,115,5)" fg:x="266" fg:w="1"/><text x="21.6155%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="21.4458%" y="693" width="0.0803%" height="15" fill="rgb(207,226,44)" fg:x="267" fg:w="1"/><text x="21.6958%" y="703.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="21.4458%" y="677" width="0.0803%" height="15" fill="rgb(208,126,0)" fg:x="267" fg:w="1"/><text x="21.6958%" y="687.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="21.5261%" y="677" width="0.0803%" height="15" fill="rgb(244,66,21)" fg:x="268" fg:w="1"/><text x="21.7761%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="21.5261%" y="661" width="0.0803%" height="15" fill="rgb(222,97,12)" fg:x="268" fg:w="1"/><text x="21.7761%" y="671.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (3 samples, 0.24%)</title><rect x="21.4458%" y="725" width="0.2410%" height="15" fill="rgb(219,213,19)" fg:x="267" fg:w="3"/><text x="21.6958%" y="735.50"></text></g><g><title>plugins_core::build::Build::new (3 samples, 0.24%)</title><rect x="21.4458%" y="709" width="0.2410%" height="15" fill="rgb(252,169,30)" fg:x="267" fg:w="3"/><text x="21.6958%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="21.5261%" y="693" width="0.1606%" height="15" fill="rgb(206,32,51)" fg:x="268" fg:w="2"/><text x="21.7761%" y="703.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="21.6064%" y="677" width="0.0803%" height="15" fill="rgb(250,172,42)" fg:x="269" fg:w="1"/><text x="21.8564%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="21.6064%" y="661" width="0.0803%" height="15" fill="rgb(209,34,43)" fg:x="269" fg:w="1"/><text x="21.8564%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.6064%" y="645" width="0.0803%" height="15" fill="rgb(223,11,35)" fg:x="269" fg:w="1"/><text x="21.8564%" y="655.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="21.6867%" y="693" width="0.1606%" height="15" fill="rgb(251,219,26)" fg:x="270" fg:w="2"/><text x="21.9367%" y="703.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="21.6867%" y="677" width="0.1606%" height="15" fill="rgb(231,119,3)" fg:x="270" fg:w="2"/><text x="21.9367%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="21.7671%" y="661" width="0.0803%" height="15" fill="rgb(216,97,11)" fg:x="271" fg:w="1"/><text x="22.0171%" y="671.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="21.7671%" y="645" width="0.0803%" height="15" fill="rgb(223,59,9)" fg:x="271" fg:w="1"/><text x="22.0171%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="21.8474%" y="677" width="0.0803%" height="15" fill="rgb(233,93,31)" fg:x="272" fg:w="1"/><text x="22.0974%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="21.8474%" y="661" width="0.0803%" height="15" fill="rgb(239,81,33)" fg:x="272" fg:w="1"/><text x="22.0974%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.8474%" y="645" width="0.0803%" height="15" fill="rgb(213,120,34)" fg:x="272" fg:w="1"/><text x="22.0974%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.8474%" y="629" width="0.0803%" height="15" fill="rgb(243,49,53)" fg:x="272" fg:w="1"/><text x="22.0974%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="21.8474%" y="613" width="0.0803%" height="15" fill="rgb(247,216,33)" fg:x="272" fg:w="1"/><text x="22.0974%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.8474%" y="597" width="0.0803%" height="15" fill="rgb(226,26,14)" fg:x="272" fg:w="1"/><text x="22.0974%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.8474%" y="581" width="0.0803%" height="15" fill="rgb(215,49,53)" fg:x="272" fg:w="1"/><text x="22.0974%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.8474%" y="565" width="0.0803%" height="15" fill="rgb(245,162,40)" fg:x="272" fg:w="1"/><text x="22.0974%" y="575.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="21.9277%" y="661" width="0.1606%" height="15" fill="rgb(229,68,17)" fg:x="273" fg:w="2"/><text x="22.1777%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="21.9277%" y="645" width="0.1606%" height="15" fill="rgb(213,182,10)" fg:x="273" fg:w="2"/><text x="22.1777%" y="655.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="21.9277%" y="629" width="0.1606%" height="15" fill="rgb(245,125,30)" fg:x="273" fg:w="2"/><text x="22.1777%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="21.9277%" y="613" width="0.1606%" height="15" fill="rgb(232,202,2)" fg:x="273" fg:w="2"/><text x="22.1777%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="22.0080%" y="597" width="0.0803%" height="15" fill="rgb(237,140,51)" fg:x="274" fg:w="1"/><text x="22.2580%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="22.0080%" y="581" width="0.0803%" height="15" fill="rgb(236,157,25)" fg:x="274" fg:w="1"/><text x="22.2580%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="22.0884%" y="613" width="0.0803%" height="15" fill="rgb(219,209,0)" fg:x="275" fg:w="1"/><text x="22.3384%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.0884%" y="597" width="0.0803%" height="15" fill="rgb(240,116,54)" fg:x="275" fg:w="1"/><text x="22.3384%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.0884%" y="581" width="0.0803%" height="15" fill="rgb(216,10,36)" fg:x="275" fg:w="1"/><text x="22.3384%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="22.1687%" y="581" width="0.0803%" height="15" fill="rgb(222,72,44)" fg:x="276" fg:w="1"/><text x="22.4187%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="22.0884%" y="645" width="0.2410%" height="15" fill="rgb(232,159,9)" fg:x="275" fg:w="3"/><text x="22.3384%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="22.0884%" y="629" width="0.2410%" height="15" fill="rgb(210,39,32)" fg:x="275" fg:w="3"/><text x="22.3384%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="22.1687%" y="613" width="0.1606%" height="15" fill="rgb(216,194,45)" fg:x="276" fg:w="2"/><text x="22.4187%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="22.1687%" y="597" width="0.1606%" height="15" fill="rgb(218,18,35)" fg:x="276" fg:w="2"/><text x="22.4187%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="22.2490%" y="581" width="0.0803%" height="15" fill="rgb(207,83,51)" fg:x="277" fg:w="1"/><text x="22.4990%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.2490%" y="565" width="0.0803%" height="15" fill="rgb(225,63,43)" fg:x="277" fg:w="1"/><text x="22.4990%" y="575.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="22.3293%" y="645" width="0.0803%" height="15" fill="rgb(207,57,36)" fg:x="278" fg:w="1"/><text x="22.5793%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (10 samples, 0.80%)</title><rect x="21.6867%" y="725" width="0.8032%" height="15" fill="rgb(216,99,33)" fg:x="270" fg:w="10"/><text x="21.9367%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (10 samples, 0.80%)</title><rect x="21.6867%" y="709" width="0.8032%" height="15" fill="rgb(225,42,16)" fg:x="270" fg:w="10"/><text x="21.9367%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.64%)</title><rect x="21.8474%" y="693" width="0.6426%" height="15" fill="rgb(220,201,45)" fg:x="272" fg:w="8"/><text x="22.0974%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="21.9277%" y="677" width="0.5622%" height="15" fill="rgb(225,33,4)" fg:x="273" fg:w="7"/><text x="22.1777%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="22.0884%" y="661" width="0.4016%" height="15" fill="rgb(224,33,50)" fg:x="275" fg:w="5"/><text x="22.3384%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="22.4096%" y="645" width="0.0803%" height="15" fill="rgb(246,198,51)" fg:x="279" fg:w="1"/><text x="22.6596%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="22.4096%" y="629" width="0.0803%" height="15" fill="rgb(205,22,4)" fg:x="279" fg:w="1"/><text x="22.6596%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="22.4096%" y="613" width="0.0803%" height="15" fill="rgb(206,3,8)" fg:x="279" fg:w="1"/><text x="22.6596%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.4096%" y="597" width="0.0803%" height="15" fill="rgb(251,23,15)" fg:x="279" fg:w="1"/><text x="22.6596%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.4900%" y="677" width="0.0803%" height="15" fill="rgb(252,88,28)" fg:x="280" fg:w="1"/><text x="22.7400%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (4 samples, 0.32%)</title><rect x="22.4900%" y="693" width="0.3213%" height="15" fill="rgb(212,127,14)" fg:x="280" fg:w="4"/><text x="22.7400%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="22.5703%" y="677" width="0.2410%" height="15" fill="rgb(247,145,37)" fg:x="281" fg:w="3"/><text x="22.8203%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="22.5703%" y="661" width="0.2410%" height="15" fill="rgb(209,117,53)" fg:x="281" fg:w="3"/><text x="22.8203%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="22.7309%" y="645" width="0.0803%" height="15" fill="rgb(212,90,42)" fg:x="283" fg:w="1"/><text x="22.9809%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (6 samples, 0.48%)</title><rect x="22.4900%" y="709" width="0.4819%" height="15" fill="rgb(218,164,37)" fg:x="280" fg:w="6"/><text x="22.7400%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="22.8112%" y="693" width="0.1606%" height="15" fill="rgb(246,65,34)" fg:x="284" fg:w="2"/><text x="23.0612%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="22.8112%" y="677" width="0.1606%" height="15" fill="rgb(231,100,33)" fg:x="284" fg:w="2"/><text x="23.0612%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="22.8916%" y="661" width="0.0803%" height="15" fill="rgb(228,126,14)" fg:x="285" fg:w="1"/><text x="23.1416%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="22.8916%" y="645" width="0.0803%" height="15" fill="rgb(215,173,21)" fg:x="285" fg:w="1"/><text x="23.1416%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.08%)</title><rect x="22.8916%" y="629" width="0.0803%" height="15" fill="rgb(210,6,40)" fg:x="285" fg:w="1"/><text x="23.1416%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="22.9719%" y="709" width="0.1606%" height="15" fill="rgb(212,48,18)" fg:x="286" fg:w="2"/><text x="23.2219%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="23.0522%" y="693" width="0.0803%" height="15" fill="rgb(230,214,11)" fg:x="287" fg:w="1"/><text x="23.3022%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="23.0522%" y="677" width="0.0803%" height="15" fill="rgb(254,105,39)" fg:x="287" fg:w="1"/><text x="23.3022%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="23.0522%" y="661" width="0.0803%" height="15" fill="rgb(245,158,5)" fg:x="287" fg:w="1"/><text x="23.3022%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.0522%" y="645" width="0.0803%" height="15" fill="rgb(249,208,11)" fg:x="287" fg:w="1"/><text x="23.3022%" y="655.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="23.1325%" y="709" width="0.0803%" height="15" fill="rgb(210,39,28)" fg:x="288" fg:w="1"/><text x="23.3825%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="23.1325%" y="693" width="0.0803%" height="15" fill="rgb(211,56,53)" fg:x="288" fg:w="1"/><text x="23.3825%" y="703.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="23.1325%" y="677" width="0.0803%" height="15" fill="rgb(226,201,30)" fg:x="288" fg:w="1"/><text x="23.3825%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="23.1325%" y="661" width="0.0803%" height="15" fill="rgb(239,101,34)" fg:x="288" fg:w="1"/><text x="23.3825%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.1325%" y="645" width="0.0803%" height="15" fill="rgb(226,209,5)" fg:x="288" fg:w="1"/><text x="23.3825%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="23.1325%" y="629" width="0.0803%" height="15" fill="rgb(250,105,47)" fg:x="288" fg:w="1"/><text x="23.3825%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.2129%" y="661" width="0.0803%" height="15" fill="rgb(230,72,3)" fg:x="289" fg:w="1"/><text x="23.4629%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.2129%" y="645" width="0.0803%" height="15" fill="rgb(232,218,39)" fg:x="289" fg:w="1"/><text x="23.4629%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.2129%" y="629" width="0.0803%" height="15" fill="rgb(248,166,6)" fg:x="289" fg:w="1"/><text x="23.4629%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.2129%" y="613" width="0.0803%" height="15" fill="rgb(247,89,20)" fg:x="289" fg:w="1"/><text x="23.4629%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.2129%" y="597" width="0.0803%" height="15" fill="rgb(248,130,54)" fg:x="289" fg:w="1"/><text x="23.4629%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="23.2129%" y="581" width="0.0803%" height="15" fill="rgb(234,196,4)" fg:x="289" fg:w="1"/><text x="23.4629%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="23.2129%" y="565" width="0.0803%" height="15" fill="rgb(250,143,31)" fg:x="289" fg:w="1"/><text x="23.4629%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="23.2129%" y="549" width="0.0803%" height="15" fill="rgb(211,110,34)" fg:x="289" fg:w="1"/><text x="23.4629%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.2129%" y="533" width="0.0803%" height="15" fill="rgb(215,124,48)" fg:x="289" fg:w="1"/><text x="23.4629%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.2129%" y="517" width="0.0803%" height="15" fill="rgb(216,46,13)" fg:x="289" fg:w="1"/><text x="23.4629%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="23.2129%" y="501" width="0.0803%" height="15" fill="rgb(205,184,25)" fg:x="289" fg:w="1"/><text x="23.4629%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="23.2129%" y="485" width="0.0803%" height="15" fill="rgb(228,1,10)" fg:x="289" fg:w="1"/><text x="23.4629%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="23.2129%" y="469" width="0.0803%" height="15" fill="rgb(213,116,27)" fg:x="289" fg:w="1"/><text x="23.4629%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="23.2129%" y="453" width="0.0803%" height="15" fill="rgb(241,95,50)" fg:x="289" fg:w="1"/><text x="23.4629%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.2129%" y="437" width="0.0803%" height="15" fill="rgb(238,48,32)" fg:x="289" fg:w="1"/><text x="23.4629%" y="447.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="23.2129%" y="693" width="0.1606%" height="15" fill="rgb(235,113,49)" fg:x="289" fg:w="2"/><text x="23.4629%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="23.2129%" y="677" width="0.1606%" height="15" fill="rgb(205,127,43)" fg:x="289" fg:w="2"/><text x="23.4629%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.2932%" y="661" width="0.0803%" height="15" fill="rgb(250,162,2)" fg:x="290" fg:w="1"/><text x="23.5432%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.2932%" y="645" width="0.0803%" height="15" fill="rgb(220,13,41)" fg:x="290" fg:w="1"/><text x="23.5432%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="23.2932%" y="629" width="0.0803%" height="15" fill="rgb(249,221,25)" fg:x="290" fg:w="1"/><text x="23.5432%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.2932%" y="613" width="0.0803%" height="15" fill="rgb(215,208,19)" fg:x="290" fg:w="1"/><text x="23.5432%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.2932%" y="597" width="0.0803%" height="15" fill="rgb(236,175,2)" fg:x="290" fg:w="1"/><text x="23.5432%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="23.2932%" y="581" width="0.0803%" height="15" fill="rgb(241,52,2)" fg:x="290" fg:w="1"/><text x="23.5432%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="23.2932%" y="565" width="0.0803%" height="15" fill="rgb(248,140,14)" fg:x="290" fg:w="1"/><text x="23.5432%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="23.3735%" y="677" width="0.0803%" height="15" fill="rgb(253,22,42)" fg:x="291" fg:w="1"/><text x="23.6235%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.3735%" y="661" width="0.0803%" height="15" fill="rgb(234,61,47)" fg:x="291" fg:w="1"/><text x="23.6235%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.3735%" y="645" width="0.0803%" height="15" fill="rgb(208,226,15)" fg:x="291" fg:w="1"/><text x="23.6235%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="23.3735%" y="629" width="0.0803%" height="15" fill="rgb(217,221,4)" fg:x="291" fg:w="1"/><text x="23.6235%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="23.4538%" y="661" width="0.0803%" height="15" fill="rgb(212,174,34)" fg:x="292" fg:w="1"/><text x="23.7038%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="23.4538%" y="645" width="0.0803%" height="15" fill="rgb(253,83,4)" fg:x="292" fg:w="1"/><text x="23.7038%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="23.4538%" y="629" width="0.0803%" height="15" fill="rgb(250,195,49)" fg:x="292" fg:w="1"/><text x="23.7038%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.4538%" y="613" width="0.0803%" height="15" fill="rgb(241,192,25)" fg:x="292" fg:w="1"/><text x="23.7038%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.4538%" y="597" width="0.0803%" height="15" fill="rgb(208,124,10)" fg:x="292" fg:w="1"/><text x="23.7038%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.4538%" y="581" width="0.0803%" height="15" fill="rgb(222,33,0)" fg:x="292" fg:w="1"/><text x="23.7038%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.5341%" y="645" width="0.0803%" height="15" fill="rgb(234,209,28)" fg:x="293" fg:w="1"/><text x="23.7841%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.5341%" y="629" width="0.0803%" height="15" fill="rgb(224,11,23)" fg:x="293" fg:w="1"/><text x="23.7841%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="23.5341%" y="613" width="0.0803%" height="15" fill="rgb(232,99,1)" fg:x="293" fg:w="1"/><text x="23.7841%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="23.5341%" y="597" width="0.0803%" height="15" fill="rgb(237,95,45)" fg:x="293" fg:w="1"/><text x="23.7841%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="23.5341%" y="581" width="0.0803%" height="15" fill="rgb(208,109,11)" fg:x="293" fg:w="1"/><text x="23.7841%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="23.5341%" y="565" width="0.0803%" height="15" fill="rgb(216,190,48)" fg:x="293" fg:w="1"/><text x="23.7841%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="23.5341%" y="549" width="0.0803%" height="15" fill="rgb(251,171,36)" fg:x="293" fg:w="1"/><text x="23.7841%" y="559.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="23.5341%" y="661" width="0.1606%" height="15" fill="rgb(230,62,22)" fg:x="293" fg:w="2"/><text x="23.7841%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.6145%" y="645" width="0.0803%" height="15" fill="rgb(225,114,35)" fg:x="294" fg:w="1"/><text x="23.8645%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="23.6145%" y="629" width="0.0803%" height="15" fill="rgb(215,118,42)" fg:x="294" fg:w="1"/><text x="23.8645%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.6948%" y="629" width="0.0803%" height="15" fill="rgb(243,119,21)" fg:x="295" fg:w="1"/><text x="23.9448%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="23.4538%" y="677" width="0.4016%" height="15" fill="rgb(252,177,53)" fg:x="292" fg:w="5"/><text x="23.7038%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="23.6948%" y="661" width="0.1606%" height="15" fill="rgb(237,209,29)" fg:x="295" fg:w="2"/><text x="23.9448%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="23.6948%" y="645" width="0.1606%" height="15" fill="rgb(212,65,23)" fg:x="295" fg:w="2"/><text x="23.9448%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.7751%" y="629" width="0.0803%" height="15" fill="rgb(230,222,46)" fg:x="296" fg:w="1"/><text x="24.0251%" y="639.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (194 samples, 15.58%)</title><rect x="8.3534%" y="741" width="15.5823%" height="15" fill="rgb(215,135,32)" fg:x="104" fg:w="194"/><text x="8.6034%" y="751.50">&lt;tests::HoldingKeyInVess..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (18 samples, 1.45%)</title><rect x="22.4900%" y="725" width="1.4458%" height="15" fill="rgb(246,101,22)" fg:x="280" fg:w="18"/><text x="22.7400%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (9 samples, 0.72%)</title><rect x="23.2129%" y="709" width="0.7229%" height="15" fill="rgb(206,107,13)" fg:x="289" fg:w="9"/><text x="23.4629%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="23.3735%" y="693" width="0.5622%" height="15" fill="rgb(250,100,44)" fg:x="291" fg:w="7"/><text x="23.6235%" y="703.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="23.8554%" y="677" width="0.0803%" height="15" fill="rgb(231,147,38)" fg:x="297" fg:w="1"/><text x="24.1054%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.8554%" y="661" width="0.0803%" height="15" fill="rgb(229,8,40)" fg:x="297" fg:w="1"/><text x="24.1054%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="23.9357%" y="741" width="0.0803%" height="15" fill="rgb(221,135,30)" fg:x="298" fg:w="1"/><text x="24.1857%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="23.9357%" y="725" width="0.0803%" height="15" fill="rgb(249,193,18)" fg:x="298" fg:w="1"/><text x="24.1857%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="23.9357%" y="709" width="0.0803%" height="15" fill="rgb(209,133,39)" fg:x="298" fg:w="1"/><text x="24.1857%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="24.0161%" y="741" width="0.0803%" height="15" fill="rgb(232,100,14)" fg:x="299" fg:w="1"/><text x="24.2661%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="24.0161%" y="725" width="0.0803%" height="15" fill="rgb(224,185,1)" fg:x="299" fg:w="1"/><text x="24.2661%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="24.0161%" y="709" width="0.0803%" height="15" fill="rgb(223,139,8)" fg:x="299" fg:w="1"/><text x="24.2661%" y="719.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.0161%" y="693" width="0.0803%" height="15" fill="rgb(232,213,38)" fg:x="299" fg:w="1"/><text x="24.2661%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="24.0964%" y="725" width="0.0803%" height="15" fill="rgb(207,94,22)" fg:x="300" fg:w="1"/><text x="24.3464%" y="735.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="24.1767%" y="725" width="0.0803%" height="15" fill="rgb(219,183,54)" fg:x="301" fg:w="1"/><text x="24.4267%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="24.1767%" y="709" width="0.0803%" height="15" fill="rgb(216,185,54)" fg:x="301" fg:w="1"/><text x="24.4267%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="24.1767%" y="693" width="0.0803%" height="15" fill="rgb(254,217,39)" fg:x="301" fg:w="1"/><text x="24.4267%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="24.1767%" y="677" width="0.0803%" height="15" fill="rgb(240,178,23)" fg:x="301" fg:w="1"/><text x="24.4267%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="24.1767%" y="661" width="0.0803%" height="15" fill="rgb(218,11,47)" fg:x="301" fg:w="1"/><text x="24.4267%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="24.1767%" y="645" width="0.0803%" height="15" fill="rgb(218,51,51)" fg:x="301" fg:w="1"/><text x="24.4267%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="24.1767%" y="629" width="0.0803%" height="15" fill="rgb(238,126,27)" fg:x="301" fg:w="1"/><text x="24.4267%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="24.1767%" y="613" width="0.0803%" height="15" fill="rgb(249,202,22)" fg:x="301" fg:w="1"/><text x="24.4267%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="24.1767%" y="597" width="0.0803%" height="15" fill="rgb(254,195,49)" fg:x="301" fg:w="1"/><text x="24.4267%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="24.1767%" y="581" width="0.0803%" height="15" fill="rgb(208,123,14)" fg:x="301" fg:w="1"/><text x="24.4267%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.1767%" y="565" width="0.0803%" height="15" fill="rgb(224,200,8)" fg:x="301" fg:w="1"/><text x="24.4267%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.1767%" y="549" width="0.0803%" height="15" fill="rgb(217,61,36)" fg:x="301" fg:w="1"/><text x="24.4267%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="24.1767%" y="533" width="0.0803%" height="15" fill="rgb(206,35,45)" fg:x="301" fg:w="1"/><text x="24.4267%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="24.1767%" y="517" width="0.0803%" height="15" fill="rgb(217,65,33)" fg:x="301" fg:w="1"/><text x="24.4267%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="24.1767%" y="501" width="0.0803%" height="15" fill="rgb(222,158,48)" fg:x="301" fg:w="1"/><text x="24.4267%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="24.1767%" y="485" width="0.0803%" height="15" fill="rgb(254,2,54)" fg:x="301" fg:w="1"/><text x="24.4267%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="24.1767%" y="469" width="0.0803%" height="15" fill="rgb(250,143,38)" fg:x="301" fg:w="1"/><text x="24.4267%" y="479.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="24.3373%" y="661" width="0.0803%" height="15" fill="rgb(248,25,0)" fg:x="303" fg:w="1"/><text x="24.5873%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.3373%" y="645" width="0.0803%" height="15" fill="rgb(206,152,27)" fg:x="303" fg:w="1"/><text x="24.5873%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.3373%" y="629" width="0.0803%" height="15" fill="rgb(240,77,30)" fg:x="303" fg:w="1"/><text x="24.5873%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="24.3373%" y="613" width="0.0803%" height="15" fill="rgb(231,5,3)" fg:x="303" fg:w="1"/><text x="24.5873%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="24.3373%" y="597" width="0.0803%" height="15" fill="rgb(207,226,32)" fg:x="303" fg:w="1"/><text x="24.5873%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="24.3373%" y="581" width="0.0803%" height="15" fill="rgb(222,207,47)" fg:x="303" fg:w="1"/><text x="24.5873%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.3373%" y="565" width="0.0803%" height="15" fill="rgb(229,115,45)" fg:x="303" fg:w="1"/><text x="24.5873%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.3373%" y="549" width="0.0803%" height="15" fill="rgb(224,191,6)" fg:x="303" fg:w="1"/><text x="24.5873%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="24.3373%" y="533" width="0.0803%" height="15" fill="rgb(230,227,24)" fg:x="303" fg:w="1"/><text x="24.5873%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="24.3373%" y="517" width="0.0803%" height="15" fill="rgb(228,80,19)" fg:x="303" fg:w="1"/><text x="24.5873%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="24.3373%" y="501" width="0.0803%" height="15" fill="rgb(247,229,0)" fg:x="303" fg:w="1"/><text x="24.5873%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="24.3373%" y="485" width="0.0803%" height="15" fill="rgb(237,194,15)" fg:x="303" fg:w="1"/><text x="24.5873%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.3373%" y="469" width="0.0803%" height="15" fill="rgb(219,203,20)" fg:x="303" fg:w="1"/><text x="24.5873%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="24.3373%" y="693" width="0.1606%" height="15" fill="rgb(234,128,8)" fg:x="303" fg:w="2"/><text x="24.5873%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="24.3373%" y="677" width="0.1606%" height="15" fill="rgb(248,202,8)" fg:x="303" fg:w="2"/><text x="24.5873%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.4177%" y="661" width="0.0803%" height="15" fill="rgb(206,104,37)" fg:x="304" fg:w="1"/><text x="24.6677%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.5783%" y="661" width="0.0803%" height="15" fill="rgb(223,8,27)" fg:x="306" fg:w="1"/><text x="24.8283%" y="671.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="24.7390%" y="629" width="0.2410%" height="15" fill="rgb(216,217,28)" fg:x="308" fg:w="3"/><text x="24.9890%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="24.8193%" y="613" width="0.1606%" height="15" fill="rgb(249,199,1)" fg:x="309" fg:w="2"/><text x="25.0693%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="24.8193%" y="597" width="0.1606%" height="15" fill="rgb(240,85,17)" fg:x="309" fg:w="2"/><text x="25.0693%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="24.8996%" y="581" width="0.0803%" height="15" fill="rgb(206,108,45)" fg:x="310" fg:w="1"/><text x="25.1496%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.8996%" y="565" width="0.0803%" height="15" fill="rgb(245,210,41)" fg:x="310" fg:w="1"/><text x="25.1496%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="24.8996%" y="549" width="0.0803%" height="15" fill="rgb(206,13,37)" fg:x="310" fg:w="1"/><text x="25.1496%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="24.9799%" y="613" width="0.1606%" height="15" fill="rgb(250,61,18)" fg:x="311" fg:w="2"/><text x="25.2299%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.0602%" y="597" width="0.0803%" height="15" fill="rgb(235,172,48)" fg:x="312" fg:w="1"/><text x="25.3102%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="25.0602%" y="581" width="0.0803%" height="15" fill="rgb(249,201,17)" fg:x="312" fg:w="1"/><text x="25.3102%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.0602%" y="565" width="0.0803%" height="15" fill="rgb(219,208,6)" fg:x="312" fg:w="1"/><text x="25.3102%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="25.2209%" y="597" width="0.0803%" height="15" fill="rgb(248,31,23)" fg:x="314" fg:w="1"/><text x="25.4709%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="25.3012%" y="565" width="0.0803%" height="15" fill="rgb(245,15,42)" fg:x="315" fg:w="1"/><text x="25.5512%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.3012%" y="549" width="0.0803%" height="15" fill="rgb(222,217,39)" fg:x="315" fg:w="1"/><text x="25.5512%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="25.3012%" y="533" width="0.0803%" height="15" fill="rgb(210,219,27)" fg:x="315" fg:w="1"/><text x="25.5512%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.3012%" y="517" width="0.0803%" height="15" fill="rgb(252,166,36)" fg:x="315" fg:w="1"/><text x="25.5512%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="25.3012%" y="501" width="0.0803%" height="15" fill="rgb(245,132,34)" fg:x="315" fg:w="1"/><text x="25.5512%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.3012%" y="485" width="0.0803%" height="15" fill="rgb(236,54,3)" fg:x="315" fg:w="1"/><text x="25.5512%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="25.3012%" y="469" width="0.0803%" height="15" fill="rgb(241,173,43)" fg:x="315" fg:w="1"/><text x="25.5512%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="25.3815%" y="565" width="0.0803%" height="15" fill="rgb(215,190,9)" fg:x="316" fg:w="1"/><text x="25.6315%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="25.3012%" y="597" width="0.2410%" height="15" fill="rgb(242,101,16)" fg:x="315" fg:w="3"/><text x="25.5512%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="25.3012%" y="581" width="0.2410%" height="15" fill="rgb(223,190,21)" fg:x="315" fg:w="3"/><text x="25.5512%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.4618%" y="565" width="0.0803%" height="15" fill="rgb(215,228,25)" fg:x="317" fg:w="1"/><text x="25.7118%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="25.4618%" y="549" width="0.0803%" height="15" fill="rgb(225,36,22)" fg:x="317" fg:w="1"/><text x="25.7118%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="25.5422%" y="597" width="0.1606%" height="15" fill="rgb(251,106,46)" fg:x="318" fg:w="2"/><text x="25.7922%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.6225%" y="581" width="0.0803%" height="15" fill="rgb(208,90,1)" fg:x="319" fg:w="1"/><text x="25.8725%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="25.7028%" y="581" width="0.3213%" height="15" fill="rgb(243,10,4)" fg:x="320" fg:w="4"/><text x="25.9528%" y="591.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="25.7028%" y="565" width="0.3213%" height="15" fill="rgb(212,137,27)" fg:x="320" fg:w="4"/><text x="25.9528%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="25.7831%" y="549" width="0.2410%" height="15" fill="rgb(231,220,49)" fg:x="321" fg:w="3"/><text x="26.0331%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="25.7831%" y="533" width="0.2410%" height="15" fill="rgb(237,96,20)" fg:x="321" fg:w="3"/><text x="26.0331%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="25.8635%" y="517" width="0.1606%" height="15" fill="rgb(239,229,30)" fg:x="322" fg:w="2"/><text x="26.1135%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="25.8635%" y="501" width="0.1606%" height="15" fill="rgb(219,65,33)" fg:x="322" fg:w="2"/><text x="26.1135%" y="511.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="25.8635%" y="485" width="0.1606%" height="15" fill="rgb(243,134,7)" fg:x="322" fg:w="2"/><text x="26.1135%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.04%)</title><rect x="25.1406%" y="613" width="1.0442%" height="15" fill="rgb(216,177,54)" fg:x="313" fg:w="13"/><text x="25.3906%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="25.7028%" y="597" width="0.4819%" height="15" fill="rgb(211,160,20)" fg:x="320" fg:w="6"/><text x="25.9528%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="26.0241%" y="581" width="0.1606%" height="15" fill="rgb(239,85,39)" fg:x="324" fg:w="2"/><text x="26.2741%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="26.1044%" y="565" width="0.0803%" height="15" fill="rgb(232,125,22)" fg:x="325" fg:w="1"/><text x="26.3544%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="26.1044%" y="549" width="0.0803%" height="15" fill="rgb(244,57,34)" fg:x="325" fg:w="1"/><text x="26.3544%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (21 samples, 1.69%)</title><rect x="24.7390%" y="645" width="1.6867%" height="15" fill="rgb(214,203,32)" fg:x="308" fg:w="21"/><text x="24.9890%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (18 samples, 1.45%)</title><rect x="24.9799%" y="629" width="1.4458%" height="15" fill="rgb(207,58,43)" fg:x="311" fg:w="18"/><text x="25.2299%" y="639.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="26.1847%" y="613" width="0.2410%" height="15" fill="rgb(215,193,15)" fg:x="326" fg:w="3"/><text x="26.4347%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="26.3454%" y="597" width="0.0803%" height="15" fill="rgb(232,15,44)" fg:x="328" fg:w="1"/><text x="26.5954%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="26.3454%" y="581" width="0.0803%" height="15" fill="rgb(212,3,48)" fg:x="328" fg:w="1"/><text x="26.5954%" y="591.50"></text></g><g><title>burrow_bon::perms::find_acls (1 samples, 0.08%)</title><rect x="26.4257%" y="645" width="0.0803%" height="15" fill="rgb(218,128,7)" fg:x="329" fg:w="1"/><text x="26.6757%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="26.5863%" y="613" width="0.1606%" height="15" fill="rgb(226,216,39)" fg:x="331" fg:w="2"/><text x="26.8363%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.7470%" y="597" width="0.0803%" height="15" fill="rgb(243,47,51)" fg:x="333" fg:w="1"/><text x="26.9970%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="26.8273%" y="581" width="0.1606%" height="15" fill="rgb(241,183,40)" fg:x="334" fg:w="2"/><text x="27.0773%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.9076%" y="565" width="0.0803%" height="15" fill="rgb(231,217,32)" fg:x="335" fg:w="1"/><text x="27.1576%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="26.9880%" y="581" width="0.0803%" height="15" fill="rgb(229,61,38)" fg:x="336" fg:w="1"/><text x="27.2380%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.1486%" y="565" width="0.0803%" height="15" fill="rgb(225,210,5)" fg:x="338" fg:w="1"/><text x="27.3986%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="27.2289%" y="565" width="0.0803%" height="15" fill="rgb(231,79,45)" fg:x="339" fg:w="1"/><text x="27.4789%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="27.2289%" y="549" width="0.0803%" height="15" fill="rgb(224,100,7)" fg:x="339" fg:w="1"/><text x="27.4789%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.2289%" y="533" width="0.0803%" height="15" fill="rgb(241,198,18)" fg:x="339" fg:w="1"/><text x="27.4789%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.88%)</title><rect x="26.5060%" y="645" width="0.8835%" height="15" fill="rgb(252,97,53)" fg:x="330" fg:w="11"/><text x="26.7560%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (11 samples, 0.88%)</title><rect x="26.5060%" y="629" width="0.8835%" height="15" fill="rgb(220,88,7)" fg:x="330" fg:w="11"/><text x="26.7560%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="26.7470%" y="613" width="0.6426%" height="15" fill="rgb(213,176,14)" fg:x="333" fg:w="8"/><text x="26.9970%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="26.8273%" y="597" width="0.5622%" height="15" fill="rgb(246,73,7)" fg:x="334" fg:w="7"/><text x="27.0773%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="27.0683%" y="581" width="0.3213%" height="15" fill="rgb(245,64,36)" fg:x="337" fg:w="4"/><text x="27.3183%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="27.3092%" y="565" width="0.0803%" height="15" fill="rgb(245,80,10)" fg:x="340" fg:w="1"/><text x="27.5592%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="27.3092%" y="549" width="0.0803%" height="15" fill="rgb(232,107,50)" fg:x="340" fg:w="1"/><text x="27.5592%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.4699%" y="581" width="0.0803%" height="15" fill="rgb(253,3,0)" fg:x="342" fg:w="1"/><text x="27.7199%" y="591.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="27.5502%" y="565" width="0.2410%" height="15" fill="rgb(212,99,53)" fg:x="343" fg:w="3"/><text x="27.8002%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="27.7912%" y="565" width="0.1606%" height="15" fill="rgb(249,111,54)" fg:x="346" fg:w="2"/><text x="28.0412%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.8715%" y="549" width="0.0803%" height="15" fill="rgb(249,55,30)" fg:x="347" fg:w="1"/><text x="28.1215%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.1124%" y="549" width="0.0803%" height="15" fill="rgb(237,47,42)" fg:x="350" fg:w="1"/><text x="28.3624%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="28.1928%" y="533" width="0.1606%" height="15" fill="rgb(211,20,18)" fg:x="351" fg:w="2"/><text x="28.4428%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.96%)</title><rect x="27.4699%" y="613" width="0.9639%" height="15" fill="rgb(231,203,46)" fg:x="342" fg:w="12"/><text x="27.7199%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (12 samples, 0.96%)</title><rect x="27.4699%" y="597" width="0.9639%" height="15" fill="rgb(237,142,3)" fg:x="342" fg:w="12"/><text x="27.7199%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.88%)</title><rect x="27.5502%" y="581" width="0.8835%" height="15" fill="rgb(241,107,1)" fg:x="343" fg:w="11"/><text x="27.8002%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="27.9518%" y="565" width="0.4819%" height="15" fill="rgb(229,83,13)" fg:x="348" fg:w="6"/><text x="28.2018%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="28.1928%" y="549" width="0.2410%" height="15" fill="rgb(241,91,40)" fg:x="351" fg:w="3"/><text x="28.4428%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="28.3534%" y="533" width="0.0803%" height="15" fill="rgb(225,3,45)" fg:x="353" fg:w="1"/><text x="28.6034%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="28.3534%" y="517" width="0.0803%" height="15" fill="rgb(244,223,14)" fg:x="353" fg:w="1"/><text x="28.6034%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.3534%" y="501" width="0.0803%" height="15" fill="rgb(224,124,37)" fg:x="353" fg:w="1"/><text x="28.6034%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.4337%" y="613" width="0.0803%" height="15" fill="rgb(251,171,30)" fg:x="354" fg:w="1"/><text x="28.6837%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.4337%" y="597" width="0.0803%" height="15" fill="rgb(236,46,54)" fg:x="354" fg:w="1"/><text x="28.6837%" y="607.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (16 samples, 1.29%)</title><rect x="27.3896%" y="629" width="1.2851%" height="15" fill="rgb(245,213,5)" fg:x="341" fg:w="16"/><text x="27.6396%" y="639.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="28.5141%" y="613" width="0.1606%" height="15" fill="rgb(230,144,27)" fg:x="355" fg:w="2"/><text x="28.7641%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="28.5141%" y="597" width="0.1606%" height="15" fill="rgb(220,86,6)" fg:x="355" fg:w="2"/><text x="28.7641%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="28.5141%" y="581" width="0.1606%" height="15" fill="rgb(240,20,13)" fg:x="355" fg:w="2"/><text x="28.7641%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="28.5944%" y="565" width="0.0803%" height="15" fill="rgb(217,89,34)" fg:x="356" fg:w="1"/><text x="28.8444%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="28.6747%" y="613" width="0.0803%" height="15" fill="rgb(229,13,5)" fg:x="357" fg:w="1"/><text x="28.9247%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.40%)</title><rect x="28.7550%" y="597" width="0.4016%" height="15" fill="rgb(244,67,35)" fg:x="358" fg:w="5"/><text x="29.0050%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="28.9960%" y="581" width="0.1606%" height="15" fill="rgb(221,40,2)" fg:x="361" fg:w="2"/><text x="29.2460%" y="591.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="29.1566%" y="597" width="0.1606%" height="15" fill="rgb(237,157,21)" fg:x="363" fg:w="2"/><text x="29.4066%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="29.1566%" y="581" width="0.1606%" height="15" fill="rgb(222,94,11)" fg:x="363" fg:w="2"/><text x="29.4066%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="29.2369%" y="565" width="0.0803%" height="15" fill="rgb(249,113,6)" fg:x="364" fg:w="1"/><text x="29.4869%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="29.3173%" y="597" width="0.0803%" height="15" fill="rgb(238,137,36)" fg:x="365" fg:w="1"/><text x="29.5673%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="29.3173%" y="581" width="0.0803%" height="15" fill="rgb(210,102,26)" fg:x="365" fg:w="1"/><text x="29.5673%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="29.3976%" y="597" width="0.0803%" height="15" fill="rgb(218,30,30)" fg:x="366" fg:w="1"/><text x="29.6476%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="29.3976%" y="581" width="0.0803%" height="15" fill="rgb(214,67,26)" fg:x="366" fg:w="1"/><text x="29.6476%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.3976%" y="565" width="0.0803%" height="15" fill="rgb(251,9,53)" fg:x="366" fg:w="1"/><text x="29.6476%" y="575.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="29.6386%" y="533" width="0.1606%" height="15" fill="rgb(228,204,25)" fg:x="369" fg:w="2"/><text x="29.8886%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="29.6386%" y="549" width="0.2410%" height="15" fill="rgb(207,153,8)" fg:x="369" fg:w="3"/><text x="29.8886%" y="559.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="29.7992%" y="533" width="0.0803%" height="15" fill="rgb(242,9,16)" fg:x="371" fg:w="1"/><text x="30.0492%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="29.7992%" y="517" width="0.0803%" height="15" fill="rgb(217,211,10)" fg:x="371" fg:w="1"/><text x="30.0492%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="29.8795%" y="549" width="0.1606%" height="15" fill="rgb(219,228,52)" fg:x="372" fg:w="2"/><text x="30.1295%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="29.8795%" y="533" width="0.1606%" height="15" fill="rgb(231,92,29)" fg:x="372" fg:w="2"/><text x="30.1295%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="29.9598%" y="517" width="0.0803%" height="15" fill="rgb(232,8,23)" fg:x="373" fg:w="1"/><text x="30.2098%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="29.9598%" y="501" width="0.0803%" height="15" fill="rgb(216,211,34)" fg:x="373" fg:w="1"/><text x="30.2098%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="29.9598%" y="485" width="0.0803%" height="15" fill="rgb(236,151,0)" fg:x="373" fg:w="1"/><text x="30.2098%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="29.9598%" y="469" width="0.0803%" height="15" fill="rgb(209,168,3)" fg:x="373" fg:w="1"/><text x="30.2098%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="29.9598%" y="453" width="0.0803%" height="15" fill="rgb(208,129,28)" fg:x="373" fg:w="1"/><text x="30.2098%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.2008%" y="517" width="0.1606%" height="15" fill="rgb(229,78,22)" fg:x="376" fg:w="2"/><text x="30.4508%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="30.2811%" y="501" width="0.0803%" height="15" fill="rgb(228,187,13)" fg:x="377" fg:w="1"/><text x="30.5311%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="30.3614%" y="501" width="0.2410%" height="15" fill="rgb(240,119,24)" fg:x="378" fg:w="3"/><text x="30.6114%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.5221%" y="485" width="0.0803%" height="15" fill="rgb(209,194,42)" fg:x="380" fg:w="1"/><text x="30.7721%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="30.1205%" y="533" width="0.5622%" height="15" fill="rgb(247,200,46)" fg:x="375" fg:w="7"/><text x="30.3705%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="30.3614%" y="517" width="0.3213%" height="15" fill="rgb(218,76,16)" fg:x="378" fg:w="4"/><text x="30.6114%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.6024%" y="501" width="0.0803%" height="15" fill="rgb(225,21,48)" fg:x="381" fg:w="1"/><text x="30.8524%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (15 samples, 1.20%)</title><rect x="29.5582%" y="565" width="1.2048%" height="15" fill="rgb(239,223,50)" fg:x="368" fg:w="15"/><text x="29.8082%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.72%)</title><rect x="30.0402%" y="549" width="0.7229%" height="15" fill="rgb(244,45,21)" fg:x="374" fg:w="9"/><text x="30.2902%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.6827%" y="533" width="0.0803%" height="15" fill="rgb(232,33,43)" fg:x="382" fg:w="1"/><text x="30.9327%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (20 samples, 1.61%)</title><rect x="29.4779%" y="581" width="1.6064%" height="15" fill="rgb(209,8,3)" fg:x="367" fg:w="20"/><text x="29.7279%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="30.7631%" y="565" width="0.3213%" height="15" fill="rgb(214,25,53)" fg:x="383" fg:w="4"/><text x="31.0131%" y="575.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.9237%" y="549" width="0.1606%" height="15" fill="rgb(254,186,54)" fg:x="385" fg:w="2"/><text x="31.1737%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (31 samples, 2.49%)</title><rect x="28.6747%" y="629" width="2.4900%" height="15" fill="rgb(208,174,49)" fg:x="357" fg:w="31"/><text x="28.9247%" y="639.50">ke..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (30 samples, 2.41%)</title><rect x="28.7550%" y="613" width="2.4096%" height="15" fill="rgb(233,191,51)" fg:x="358" fg:w="30"/><text x="29.0050%" y="623.50">&lt;s..</text></g><g><title>serde::ser::Serializer::collect_map (21 samples, 1.69%)</title><rect x="29.4779%" y="597" width="1.6867%" height="15" fill="rgb(222,134,10)" fg:x="367" fg:w="21"/><text x="29.7279%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.0843%" y="581" width="0.0803%" height="15" fill="rgb(230,226,20)" fg:x="387" fg:w="1"/><text x="31.3343%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="31.4859%" y="485" width="0.0803%" height="15" fill="rgb(251,111,25)" fg:x="392" fg:w="1"/><text x="31.7359%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="31.4859%" y="469" width="0.0803%" height="15" fill="rgb(224,40,46)" fg:x="392" fg:w="1"/><text x="31.7359%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="31.4859%" y="453" width="0.0803%" height="15" fill="rgb(236,108,47)" fg:x="392" fg:w="1"/><text x="31.7359%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.4859%" y="437" width="0.0803%" height="15" fill="rgb(234,93,0)" fg:x="392" fg:w="1"/><text x="31.7359%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="31.5663%" y="437" width="0.1606%" height="15" fill="rgb(224,213,32)" fg:x="393" fg:w="2"/><text x="31.8163%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="31.7269%" y="437" width="0.0803%" height="15" fill="rgb(251,11,48)" fg:x="395" fg:w="1"/><text x="31.9769%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.7269%" y="421" width="0.0803%" height="15" fill="rgb(236,173,5)" fg:x="395" fg:w="1"/><text x="31.9769%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="31.4859%" y="501" width="0.4016%" height="15" fill="rgb(230,95,12)" fg:x="392" fg:w="5"/><text x="31.7359%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="31.5663%" y="485" width="0.3213%" height="15" fill="rgb(232,209,1)" fg:x="393" fg:w="4"/><text x="31.8163%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="31.5663%" y="469" width="0.3213%" height="15" fill="rgb(232,6,1)" fg:x="393" fg:w="4"/><text x="31.8163%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="31.5663%" y="453" width="0.3213%" height="15" fill="rgb(210,224,50)" fg:x="393" fg:w="4"/><text x="31.8163%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.8072%" y="437" width="0.0803%" height="15" fill="rgb(228,127,35)" fg:x="396" fg:w="1"/><text x="32.0572%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.72%)</title><rect x="31.2450%" y="533" width="0.7229%" height="15" fill="rgb(245,102,45)" fg:x="389" fg:w="9"/><text x="31.4950%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="31.4056%" y="517" width="0.5622%" height="15" fill="rgb(214,1,49)" fg:x="391" fg:w="7"/><text x="31.6556%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="31.8876%" y="501" width="0.0803%" height="15" fill="rgb(226,163,40)" fg:x="397" fg:w="1"/><text x="32.1376%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.8876%" y="485" width="0.0803%" height="15" fill="rgb(239,212,28)" fg:x="397" fg:w="1"/><text x="32.1376%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.96%)</title><rect x="31.2450%" y="565" width="0.9639%" height="15" fill="rgb(220,20,13)" fg:x="389" fg:w="12"/><text x="31.4950%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (12 samples, 0.96%)</title><rect x="31.2450%" y="549" width="0.9639%" height="15" fill="rgb(210,164,35)" fg:x="389" fg:w="12"/><text x="31.4950%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="31.9679%" y="533" width="0.2410%" height="15" fill="rgb(248,109,41)" fg:x="398" fg:w="3"/><text x="32.2179%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.1285%" y="517" width="0.0803%" height="15" fill="rgb(238,23,50)" fg:x="400" fg:w="1"/><text x="32.3785%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="32.2088%" y="565" width="0.1606%" height="15" fill="rgb(211,48,49)" fg:x="401" fg:w="2"/><text x="32.4588%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.2892%" y="549" width="0.0803%" height="15" fill="rgb(223,36,21)" fg:x="402" fg:w="1"/><text x="32.5392%" y="559.50"></text></g><g><title>engine::session::state::State::close (103 samples, 8.27%)</title><rect x="24.2570%" y="725" width="8.2731%" height="15" fill="rgb(207,123,46)" fg:x="302" fg:w="103"/><text x="24.5070%" y="735.50">engine::sess..</text></g><g><title>engine::session::state::State::flush_entities (102 samples, 8.19%)</title><rect x="24.3373%" y="709" width="8.1928%" height="15" fill="rgb(240,218,32)" fg:x="303" fg:w="102"/><text x="24.5873%" y="719.50">engine::ses..</text></g><g><title>core::iter::adapters::try_process (100 samples, 8.03%)</title><rect x="24.4980%" y="693" width="8.0321%" height="15" fill="rgb(252,5,43)" fg:x="305" fg:w="100"/><text x="24.7480%" y="703.50">core::iter:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (100 samples, 8.03%)</title><rect x="24.4980%" y="677" width="8.0321%" height="15" fill="rgb(252,84,19)" fg:x="305" fg:w="100"/><text x="24.7480%" y="687.50">&lt;alloc::vec..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (98 samples, 7.87%)</title><rect x="24.6586%" y="661" width="7.8715%" height="15" fill="rgb(243,152,39)" fg:x="307" fg:w="98"/><text x="24.9086%" y="671.50">engine::ses..</text></g><g><title>kernel::model::any_entity_changes (64 samples, 5.14%)</title><rect x="27.3896%" y="645" width="5.1406%" height="15" fill="rgb(234,160,15)" fg:x="341" fg:w="64"/><text x="27.6396%" y="655.50">kernel..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (17 samples, 1.37%)</title><rect x="31.1647%" y="629" width="1.3655%" height="15" fill="rgb(237,34,20)" fg:x="388" fg:w="17"/><text x="31.4147%" y="639.50"></text></g><g><title>serde_json::de::from_trait (17 samples, 1.37%)</title><rect x="31.1647%" y="613" width="1.3655%" height="15" fill="rgb(229,97,13)" fg:x="388" fg:w="17"/><text x="31.4147%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (17 samples, 1.37%)</title><rect x="31.1647%" y="597" width="1.3655%" height="15" fill="rgb(234,71,50)" fg:x="388" fg:w="17"/><text x="31.4147%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (17 samples, 1.37%)</title><rect x="31.1647%" y="581" width="1.3655%" height="15" fill="rgb(253,155,4)" fg:x="388" fg:w="17"/><text x="31.4147%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="32.3695%" y="565" width="0.1606%" height="15" fill="rgb(222,185,37)" fg:x="403" fg:w="2"/><text x="32.6195%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.4498%" y="549" width="0.0803%" height="15" fill="rgb(251,177,13)" fg:x="404" fg:w="1"/><text x="32.6998%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.4498%" y="533" width="0.0803%" height="15" fill="rgb(250,179,40)" fg:x="404" fg:w="1"/><text x="32.6998%" y="543.50"></text></g><g><title>engine::session::Session::close (108 samples, 8.67%)</title><rect x="24.0964%" y="741" width="8.6747%" height="15" fill="rgb(242,44,2)" fg:x="300" fg:w="108"/><text x="24.3464%" y="751.50">engine::sess..</text></g><g><title>kernel::plugins::SessionPlugins::stop (3 samples, 0.24%)</title><rect x="32.5301%" y="725" width="0.2410%" height="15" fill="rgb(216,177,13)" fg:x="405" fg:w="3"/><text x="32.7801%" y="735.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="32.8514%" y="709" width="0.0803%" height="15" fill="rgb(216,106,43)" fg:x="409" fg:w="1"/><text x="33.1014%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="32.8514%" y="693" width="0.0803%" height="15" fill="rgb(216,183,2)" fg:x="409" fg:w="1"/><text x="33.1014%" y="703.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="32.8514%" y="677" width="0.0803%" height="15" fill="rgb(249,75,3)" fg:x="409" fg:w="1"/><text x="33.1014%" y="687.50"></text></g><g><title>&lt;plugins_rune::parser::RegisterActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="32.8514%" y="661" width="0.0803%" height="15" fill="rgb(219,67,39)" fg:x="409" fg:w="1"/><text x="33.1014%" y="671.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="32.8514%" y="645" width="0.0803%" height="15" fill="rgb(253,228,2)" fg:x="409" fg:w="1"/><text x="33.1014%" y="655.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="32.9317%" y="517" width="0.0803%" height="15" fill="rgb(235,138,27)" fg:x="410" fg:w="1"/><text x="33.1817%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="32.9317%" y="501" width="0.0803%" height="15" fill="rgb(236,97,51)" fg:x="410" fg:w="1"/><text x="33.1817%" y="511.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="32.9317%" y="485" width="0.0803%" height="15" fill="rgb(240,80,30)" fg:x="410" fg:w="1"/><text x="33.1817%" y="495.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="32.9317%" y="549" width="0.1606%" height="15" fill="rgb(230,178,19)" fg:x="410" fg:w="2"/><text x="33.1817%" y="559.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (2 samples, 0.16%)</title><rect x="32.9317%" y="533" width="0.1606%" height="15" fill="rgb(210,190,27)" fg:x="410" fg:w="2"/><text x="33.1817%" y="543.50"></text></g><g><title>core::fmt::builders::DebugTuple::finish (1 samples, 0.08%)</title><rect x="33.0120%" y="517" width="0.0803%" height="15" fill="rgb(222,107,31)" fg:x="411" fg:w="1"/><text x="33.2620%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="33.0120%" y="501" width="0.0803%" height="15" fill="rgb(216,127,34)" fg:x="411" fg:w="1"/><text x="33.2620%" y="511.50"></text></g><g><title>core::fmt::builders::DebugTuple::finish::{{closure}} (1 samples, 0.08%)</title><rect x="33.0120%" y="485" width="0.0803%" height="15" fill="rgb(234,116,52)" fg:x="411" fg:w="1"/><text x="33.2620%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="33.0120%" y="469" width="0.0803%" height="15" fill="rgb(222,124,15)" fg:x="411" fg:w="1"/><text x="33.2620%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.0924%" y="533" width="0.0803%" height="15" fill="rgb(231,179,28)" fg:x="412" fg:w="1"/><text x="33.3424%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (4 samples, 0.32%)</title><rect x="32.9317%" y="693" width="0.3213%" height="15" fill="rgb(226,93,45)" fg:x="410" fg:w="4"/><text x="33.1817%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (4 samples, 0.32%)</title><rect x="32.9317%" y="677" width="0.3213%" height="15" fill="rgb(215,8,51)" fg:x="410" fg:w="4"/><text x="33.1817%" y="687.50"></text></g><g><title>core::fmt::write (4 samples, 0.32%)</title><rect x="32.9317%" y="661" width="0.3213%" height="15" fill="rgb(223,106,5)" fg:x="410" fg:w="4"/><text x="33.1817%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (4 samples, 0.32%)</title><rect x="32.9317%" y="645" width="0.3213%" height="15" fill="rgb(250,191,5)" fg:x="410" fg:w="4"/><text x="33.1817%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (4 samples, 0.32%)</title><rect x="32.9317%" y="629" width="0.3213%" height="15" fill="rgb(242,132,44)" fg:x="410" fg:w="4"/><text x="33.1817%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (4 samples, 0.32%)</title><rect x="32.9317%" y="613" width="0.3213%" height="15" fill="rgb(251,152,29)" fg:x="410" fg:w="4"/><text x="33.1817%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (4 samples, 0.32%)</title><rect x="32.9317%" y="597" width="0.3213%" height="15" fill="rgb(218,179,5)" fg:x="410" fg:w="4"/><text x="33.1817%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (4 samples, 0.32%)</title><rect x="32.9317%" y="581" width="0.3213%" height="15" fill="rgb(227,67,19)" fg:x="410" fg:w="4"/><text x="33.1817%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (4 samples, 0.32%)</title><rect x="32.9317%" y="565" width="0.3213%" height="15" fill="rgb(233,119,31)" fg:x="410" fg:w="4"/><text x="33.1817%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="33.0924%" y="549" width="0.1606%" height="15" fill="rgb(241,120,22)" fg:x="412" fg:w="2"/><text x="33.3424%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="33.1727%" y="533" width="0.0803%" height="15" fill="rgb(224,102,30)" fg:x="413" fg:w="1"/><text x="33.4227%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="33.1727%" y="517" width="0.0803%" height="15" fill="rgb(210,164,37)" fg:x="413" fg:w="1"/><text x="33.4227%" y="527.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="33.1727%" y="501" width="0.0803%" height="15" fill="rgb(226,191,16)" fg:x="413" fg:w="1"/><text x="33.4227%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="33.1727%" y="485" width="0.0803%" height="15" fill="rgb(214,40,45)" fg:x="413" fg:w="1"/><text x="33.4227%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="33.1727%" y="469" width="0.0803%" height="15" fill="rgb(244,29,26)" fg:x="413" fg:w="1"/><text x="33.4227%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="33.1727%" y="453" width="0.0803%" height="15" fill="rgb(216,16,5)" fg:x="413" fg:w="1"/><text x="33.4227%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="33.1727%" y="437" width="0.0803%" height="15" fill="rgb(249,76,35)" fg:x="413" fg:w="1"/><text x="33.4227%" y="447.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="33.1727%" y="421" width="0.0803%" height="15" fill="rgb(207,11,44)" fg:x="413" fg:w="1"/><text x="33.4227%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="33.1727%" y="405" width="0.0803%" height="15" fill="rgb(228,190,49)" fg:x="413" fg:w="1"/><text x="33.4227%" y="415.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="33.1727%" y="389" width="0.0803%" height="15" fill="rgb(214,173,12)" fg:x="413" fg:w="1"/><text x="33.4227%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="33.1727%" y="373" width="0.0803%" height="15" fill="rgb(218,26,35)" fg:x="413" fg:w="1"/><text x="33.4227%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="33.1727%" y="357" width="0.0803%" height="15" fill="rgb(220,200,19)" fg:x="413" fg:w="1"/><text x="33.4227%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="33.1727%" y="341" width="0.0803%" height="15" fill="rgb(239,95,49)" fg:x="413" fg:w="1"/><text x="33.4227%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="33.1727%" y="325" width="0.0803%" height="15" fill="rgb(235,85,53)" fg:x="413" fg:w="1"/><text x="33.4227%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="33.1727%" y="309" width="0.0803%" height="15" fill="rgb(233,133,31)" fg:x="413" fg:w="1"/><text x="33.4227%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.1727%" y="293" width="0.0803%" height="15" fill="rgb(218,25,20)" fg:x="413" fg:w="1"/><text x="33.4227%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="33.1727%" y="277" width="0.0803%" height="15" fill="rgb(252,210,38)" fg:x="413" fg:w="1"/><text x="33.4227%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.1727%" y="261" width="0.0803%" height="15" fill="rgb(242,134,21)" fg:x="413" fg:w="1"/><text x="33.4227%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="33.1727%" y="245" width="0.0803%" height="15" fill="rgb(213,28,48)" fg:x="413" fg:w="1"/><text x="33.4227%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="33.1727%" y="229" width="0.0803%" height="15" fill="rgb(250,196,2)" fg:x="413" fg:w="1"/><text x="33.4227%" y="239.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="33.1727%" y="213" width="0.0803%" height="15" fill="rgb(227,5,17)" fg:x="413" fg:w="1"/><text x="33.4227%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.1727%" y="197" width="0.0803%" height="15" fill="rgb(221,226,24)" fg:x="413" fg:w="1"/><text x="33.4227%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="33.3333%" y="677" width="0.1606%" height="15" fill="rgb(211,5,48)" fg:x="415" fg:w="2"/><text x="33.5833%" y="687.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (2 samples, 0.16%)</title><rect x="33.4940%" y="677" width="0.1606%" height="15" fill="rgb(219,150,6)" fg:x="417" fg:w="2"/><text x="33.7440%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (2 samples, 0.16%)</title><rect x="33.4940%" y="661" width="0.1606%" height="15" fill="rgb(251,46,16)" fg:x="417" fg:w="2"/><text x="33.7440%" y="671.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (2 samples, 0.16%)</title><rect x="33.4940%" y="645" width="0.1606%" height="15" fill="rgb(220,204,40)" fg:x="417" fg:w="2"/><text x="33.7440%" y="655.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (2 samples, 0.16%)</title><rect x="33.4940%" y="629" width="0.1606%" height="15" fill="rgb(211,85,2)" fg:x="417" fg:w="2"/><text x="33.7440%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="33.8153%" y="565" width="0.3213%" height="15" fill="rgb(229,17,7)" fg:x="421" fg:w="4"/><text x="34.0653%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="33.8153%" y="549" width="0.3213%" height="15" fill="rgb(239,72,28)" fg:x="421" fg:w="4"/><text x="34.0653%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="33.9759%" y="533" width="0.1606%" height="15" fill="rgb(230,47,54)" fg:x="423" fg:w="2"/><text x="34.2259%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="34.0562%" y="517" width="0.0803%" height="15" fill="rgb(214,50,8)" fg:x="424" fg:w="1"/><text x="34.3062%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.0562%" y="501" width="0.0803%" height="15" fill="rgb(216,198,43)" fg:x="424" fg:w="1"/><text x="34.3062%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="34.2972%" y="453" width="0.0803%" height="15" fill="rgb(234,20,35)" fg:x="427" fg:w="1"/><text x="34.5472%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="34.2972%" y="437" width="0.0803%" height="15" fill="rgb(254,45,19)" fg:x="427" fg:w="1"/><text x="34.5472%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.2972%" y="421" width="0.0803%" height="15" fill="rgb(219,14,44)" fg:x="427" fg:w="1"/><text x="34.5472%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.2972%" y="405" width="0.0803%" height="15" fill="rgb(217,220,26)" fg:x="427" fg:w="1"/><text x="34.5472%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="34.2972%" y="389" width="0.0803%" height="15" fill="rgb(213,158,28)" fg:x="427" fg:w="1"/><text x="34.5472%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="34.2972%" y="373" width="0.0803%" height="15" fill="rgb(252,51,52)" fg:x="427" fg:w="1"/><text x="34.5472%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="34.2972%" y="357" width="0.0803%" height="15" fill="rgb(246,89,16)" fg:x="427" fg:w="1"/><text x="34.5472%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.2972%" y="341" width="0.0803%" height="15" fill="rgb(216,158,49)" fg:x="427" fg:w="1"/><text x="34.5472%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.2972%" y="325" width="0.0803%" height="15" fill="rgb(236,107,19)" fg:x="427" fg:w="1"/><text x="34.5472%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="34.2972%" y="309" width="0.0803%" height="15" fill="rgb(228,185,30)" fg:x="427" fg:w="1"/><text x="34.5472%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="34.2972%" y="293" width="0.0803%" height="15" fill="rgb(246,134,8)" fg:x="427" fg:w="1"/><text x="34.5472%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="34.2972%" y="277" width="0.0803%" height="15" fill="rgb(214,143,50)" fg:x="427" fg:w="1"/><text x="34.5472%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="34.2972%" y="261" width="0.0803%" height="15" fill="rgb(228,75,8)" fg:x="427" fg:w="1"/><text x="34.5472%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.2972%" y="245" width="0.0803%" height="15" fill="rgb(207,175,4)" fg:x="427" fg:w="1"/><text x="34.5472%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="34.1365%" y="501" width="0.3213%" height="15" fill="rgb(205,108,24)" fg:x="425" fg:w="4"/><text x="34.3865%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="34.2169%" y="485" width="0.2410%" height="15" fill="rgb(244,120,49)" fg:x="426" fg:w="3"/><text x="34.4669%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="34.2972%" y="469" width="0.1606%" height="15" fill="rgb(223,47,38)" fg:x="427" fg:w="2"/><text x="34.5472%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.3775%" y="453" width="0.0803%" height="15" fill="rgb(229,179,11)" fg:x="428" fg:w="1"/><text x="34.6275%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="34.3775%" y="437" width="0.0803%" height="15" fill="rgb(231,122,1)" fg:x="428" fg:w="1"/><text x="34.6275%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="34.3775%" y="421" width="0.0803%" height="15" fill="rgb(245,119,9)" fg:x="428" fg:w="1"/><text x="34.6275%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="34.3775%" y="405" width="0.0803%" height="15" fill="rgb(241,163,25)" fg:x="428" fg:w="1"/><text x="34.6275%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.3775%" y="389" width="0.0803%" height="15" fill="rgb(217,214,3)" fg:x="428" fg:w="1"/><text x="34.6275%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.3775%" y="373" width="0.0803%" height="15" fill="rgb(240,86,28)" fg:x="428" fg:w="1"/><text x="34.6275%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="34.3775%" y="357" width="0.0803%" height="15" fill="rgb(215,47,9)" fg:x="428" fg:w="1"/><text x="34.6275%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="34.3775%" y="341" width="0.0803%" height="15" fill="rgb(252,25,45)" fg:x="428" fg:w="1"/><text x="34.6275%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="34.3775%" y="325" width="0.0803%" height="15" fill="rgb(251,164,9)" fg:x="428" fg:w="1"/><text x="34.6275%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="34.3775%" y="309" width="0.0803%" height="15" fill="rgb(233,194,0)" fg:x="428" fg:w="1"/><text x="34.6275%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="34.3775%" y="293" width="0.0803%" height="15" fill="rgb(249,111,24)" fg:x="428" fg:w="1"/><text x="34.6275%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="34.4578%" y="501" width="0.0803%" height="15" fill="rgb(250,223,3)" fg:x="429" fg:w="1"/><text x="34.7078%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="34.4578%" y="485" width="0.0803%" height="15" fill="rgb(236,178,37)" fg:x="429" fg:w="1"/><text x="34.7078%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.4578%" y="469" width="0.0803%" height="15" fill="rgb(241,158,50)" fg:x="429" fg:w="1"/><text x="34.7078%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="34.4578%" y="453" width="0.0803%" height="15" fill="rgb(213,121,41)" fg:x="429" fg:w="1"/><text x="34.7078%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.4578%" y="437" width="0.0803%" height="15" fill="rgb(240,92,3)" fg:x="429" fg:w="1"/><text x="34.7078%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="34.4578%" y="421" width="0.0803%" height="15" fill="rgb(205,123,3)" fg:x="429" fg:w="1"/><text x="34.7078%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.4578%" y="405" width="0.0803%" height="15" fill="rgb(205,97,47)" fg:x="429" fg:w="1"/><text x="34.7078%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="34.5382%" y="405" width="0.0803%" height="15" fill="rgb(247,152,14)" fg:x="430" fg:w="1"/><text x="34.7882%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="34.5382%" y="389" width="0.0803%" height="15" fill="rgb(248,195,53)" fg:x="430" fg:w="1"/><text x="34.7882%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="34.5382%" y="373" width="0.0803%" height="15" fill="rgb(226,201,16)" fg:x="430" fg:w="1"/><text x="34.7882%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="34.5382%" y="357" width="0.0803%" height="15" fill="rgb(205,98,0)" fg:x="430" fg:w="1"/><text x="34.7882%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.5382%" y="341" width="0.0803%" height="15" fill="rgb(214,191,48)" fg:x="430" fg:w="1"/><text x="34.7882%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="34.6185%" y="405" width="0.0803%" height="15" fill="rgb(237,112,39)" fg:x="431" fg:w="1"/><text x="34.8685%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.6185%" y="389" width="0.0803%" height="15" fill="rgb(247,203,27)" fg:x="431" fg:w="1"/><text x="34.8685%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="34.6185%" y="373" width="0.0803%" height="15" fill="rgb(235,124,28)" fg:x="431" fg:w="1"/><text x="34.8685%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="34.6185%" y="357" width="0.0803%" height="15" fill="rgb(208,207,46)" fg:x="431" fg:w="1"/><text x="34.8685%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.6185%" y="341" width="0.0803%" height="15" fill="rgb(234,176,4)" fg:x="431" fg:w="1"/><text x="34.8685%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="34.7791%" y="357" width="0.0803%" height="15" fill="rgb(230,133,28)" fg:x="433" fg:w="1"/><text x="35.0291%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="34.7791%" y="341" width="0.0803%" height="15" fill="rgb(211,137,40)" fg:x="433" fg:w="1"/><text x="35.0291%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.7791%" y="325" width="0.0803%" height="15" fill="rgb(254,35,13)" fg:x="433" fg:w="1"/><text x="35.0291%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="34.7791%" y="309" width="0.0803%" height="15" fill="rgb(225,49,51)" fg:x="433" fg:w="1"/><text x="35.0291%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="34.7791%" y="293" width="0.0803%" height="15" fill="rgb(251,10,15)" fg:x="433" fg:w="1"/><text x="35.0291%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.7791%" y="277" width="0.0803%" height="15" fill="rgb(228,207,15)" fg:x="433" fg:w="1"/><text x="35.0291%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="34.7791%" y="261" width="0.0803%" height="15" fill="rgb(241,99,19)" fg:x="433" fg:w="1"/><text x="35.0291%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="34.7791%" y="245" width="0.0803%" height="15" fill="rgb(207,104,49)" fg:x="433" fg:w="1"/><text x="35.0291%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.7791%" y="229" width="0.0803%" height="15" fill="rgb(234,99,18)" fg:x="433" fg:w="1"/><text x="35.0291%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="34.7791%" y="213" width="0.0803%" height="15" fill="rgb(213,191,49)" fg:x="433" fg:w="1"/><text x="35.0291%" y="223.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="34.5382%" y="501" width="0.4016%" height="15" fill="rgb(210,226,19)" fg:x="430" fg:w="5"/><text x="34.7882%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="34.5382%" y="485" width="0.4016%" height="15" fill="rgb(229,97,18)" fg:x="430" fg:w="5"/><text x="34.7882%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="34.5382%" y="469" width="0.4016%" height="15" fill="rgb(211,167,15)" fg:x="430" fg:w="5"/><text x="34.7882%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="34.5382%" y="453" width="0.4016%" height="15" fill="rgb(210,169,34)" fg:x="430" fg:w="5"/><text x="34.7882%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="34.5382%" y="437" width="0.4016%" height="15" fill="rgb(241,121,31)" fg:x="430" fg:w="5"/><text x="34.7882%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="34.5382%" y="421" width="0.4016%" height="15" fill="rgb(232,40,11)" fg:x="430" fg:w="5"/><text x="34.7882%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="34.6988%" y="405" width="0.2410%" height="15" fill="rgb(205,86,26)" fg:x="432" fg:w="3"/><text x="34.9488%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="34.6988%" y="389" width="0.2410%" height="15" fill="rgb(231,126,28)" fg:x="432" fg:w="3"/><text x="34.9488%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="34.7791%" y="373" width="0.1606%" height="15" fill="rgb(219,221,18)" fg:x="433" fg:w="2"/><text x="35.0291%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.8594%" y="357" width="0.0803%" height="15" fill="rgb(211,40,0)" fg:x="434" fg:w="1"/><text x="35.1094%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="34.8594%" y="341" width="0.0803%" height="15" fill="rgb(239,85,43)" fg:x="434" fg:w="1"/><text x="35.1094%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="34.8594%" y="325" width="0.0803%" height="15" fill="rgb(231,55,21)" fg:x="434" fg:w="1"/><text x="35.1094%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.8594%" y="309" width="0.0803%" height="15" fill="rgb(225,184,43)" fg:x="434" fg:w="1"/><text x="35.1094%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="34.8594%" y="293" width="0.0803%" height="15" fill="rgb(251,158,41)" fg:x="434" fg:w="1"/><text x="35.1094%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="35.0201%" y="325" width="0.0803%" height="15" fill="rgb(234,159,37)" fg:x="436" fg:w="1"/><text x="35.2701%" y="335.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="35.0201%" y="309" width="0.0803%" height="15" fill="rgb(216,204,22)" fg:x="436" fg:w="1"/><text x="35.2701%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="34.9398%" y="373" width="0.2410%" height="15" fill="rgb(214,17,3)" fg:x="435" fg:w="3"/><text x="35.1898%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="35.0201%" y="357" width="0.1606%" height="15" fill="rgb(212,111,17)" fg:x="436" fg:w="2"/><text x="35.2701%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="35.0201%" y="341" width="0.1606%" height="15" fill="rgb(221,157,24)" fg:x="436" fg:w="2"/><text x="35.2701%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="35.1004%" y="325" width="0.0803%" height="15" fill="rgb(252,16,13)" fg:x="437" fg:w="1"/><text x="35.3504%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="34.9398%" y="405" width="0.3213%" height="15" fill="rgb(221,62,2)" fg:x="435" fg:w="4"/><text x="35.1898%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="34.9398%" y="389" width="0.3213%" height="15" fill="rgb(247,87,22)" fg:x="435" fg:w="4"/><text x="35.1898%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="35.1807%" y="373" width="0.0803%" height="15" fill="rgb(215,73,9)" fg:x="438" fg:w="1"/><text x="35.4307%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="35.1807%" y="357" width="0.0803%" height="15" fill="rgb(207,175,33)" fg:x="438" fg:w="1"/><text x="35.4307%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="34.9398%" y="437" width="0.4016%" height="15" fill="rgb(243,129,54)" fg:x="435" fg:w="5"/><text x="35.1898%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="34.9398%" y="421" width="0.4016%" height="15" fill="rgb(227,119,45)" fg:x="435" fg:w="5"/><text x="35.1898%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.2610%" y="405" width="0.0803%" height="15" fill="rgb(205,109,36)" fg:x="439" fg:w="1"/><text x="35.5110%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.2610%" y="389" width="0.0803%" height="15" fill="rgb(205,6,39)" fg:x="439" fg:w="1"/><text x="35.5110%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.2610%" y="373" width="0.0803%" height="15" fill="rgb(221,32,16)" fg:x="439" fg:w="1"/><text x="35.5110%" y="383.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (20 samples, 1.61%)</title><rect x="33.8153%" y="581" width="1.6064%" height="15" fill="rgb(228,144,50)" fg:x="421" fg:w="20"/><text x="34.0653%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (16 samples, 1.29%)</title><rect x="34.1365%" y="565" width="1.2851%" height="15" fill="rgb(229,201,53)" fg:x="425" fg:w="16"/><text x="34.3865%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (16 samples, 1.29%)</title><rect x="34.1365%" y="549" width="1.2851%" height="15" fill="rgb(249,153,27)" fg:x="425" fg:w="16"/><text x="34.3865%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (16 samples, 1.29%)</title><rect x="34.1365%" y="533" width="1.2851%" height="15" fill="rgb(227,106,25)" fg:x="425" fg:w="16"/><text x="34.3865%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (16 samples, 1.29%)</title><rect x="34.1365%" y="517" width="1.2851%" height="15" fill="rgb(230,65,29)" fg:x="425" fg:w="16"/><text x="34.3865%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="34.9398%" y="501" width="0.4819%" height="15" fill="rgb(221,57,46)" fg:x="435" fg:w="6"/><text x="35.1898%" y="511.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="34.9398%" y="485" width="0.4819%" height="15" fill="rgb(229,161,17)" fg:x="435" fg:w="6"/><text x="35.1898%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="34.9398%" y="469" width="0.4819%" height="15" fill="rgb(222,213,11)" fg:x="435" fg:w="6"/><text x="35.1898%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="34.9398%" y="453" width="0.4819%" height="15" fill="rgb(235,35,13)" fg:x="435" fg:w="6"/><text x="35.1898%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.3414%" y="437" width="0.0803%" height="15" fill="rgb(233,158,34)" fg:x="440" fg:w="1"/><text x="35.5914%" y="447.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (22 samples, 1.77%)</title><rect x="33.8153%" y="597" width="1.7671%" height="15" fill="rgb(215,151,48)" fg:x="421" fg:w="22"/><text x="34.0653%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (2 samples, 0.16%)</title><rect x="35.4217%" y="581" width="0.1606%" height="15" fill="rgb(229,84,14)" fg:x="441" fg:w="2"/><text x="35.6717%" y="591.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (2 samples, 0.16%)</title><rect x="35.4217%" y="565" width="0.1606%" height="15" fill="rgb(229,68,14)" fg:x="441" fg:w="2"/><text x="35.6717%" y="575.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="35.5020%" y="549" width="0.0803%" height="15" fill="rgb(243,106,26)" fg:x="442" fg:w="1"/><text x="35.7520%" y="559.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="35.5020%" y="533" width="0.0803%" height="15" fill="rgb(206,45,38)" fg:x="442" fg:w="1"/><text x="35.7520%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="35.5020%" y="517" width="0.0803%" height="15" fill="rgb(226,6,15)" fg:x="442" fg:w="1"/><text x="35.7520%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="35.5020%" y="501" width="0.0803%" height="15" fill="rgb(232,22,54)" fg:x="442" fg:w="1"/><text x="35.7520%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.7430%" y="389" width="0.0803%" height="15" fill="rgb(229,222,32)" fg:x="445" fg:w="1"/><text x="35.9930%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="35.8233%" y="357" width="0.1606%" height="15" fill="rgb(228,62,29)" fg:x="446" fg:w="2"/><text x="36.0733%" y="367.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="35.9839%" y="325" width="0.1606%" height="15" fill="rgb(251,103,34)" fg:x="448" fg:w="2"/><text x="36.2339%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (5 samples, 0.40%)</title><rect x="35.9839%" y="357" width="0.4016%" height="15" fill="rgb(233,12,30)" fg:x="448" fg:w="5"/><text x="36.2339%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="35.9839%" y="341" width="0.4016%" height="15" fill="rgb(238,52,0)" fg:x="448" fg:w="5"/><text x="36.2339%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="36.1446%" y="325" width="0.2410%" height="15" fill="rgb(223,98,5)" fg:x="450" fg:w="3"/><text x="36.3946%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.3052%" y="309" width="0.0803%" height="15" fill="rgb(228,75,37)" fg:x="452" fg:w="1"/><text x="36.5552%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.3052%" y="293" width="0.0803%" height="15" fill="rgb(205,115,49)" fg:x="452" fg:w="1"/><text x="36.5552%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.3855%" y="309" width="0.0803%" height="15" fill="rgb(250,154,43)" fg:x="453" fg:w="1"/><text x="36.6355%" y="319.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (9 samples, 0.72%)</title><rect x="35.8233%" y="389" width="0.7229%" height="15" fill="rgb(226,43,29)" fg:x="446" fg:w="9"/><text x="36.0733%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="35.8233%" y="373" width="0.7229%" height="15" fill="rgb(249,228,39)" fg:x="446" fg:w="9"/><text x="36.0733%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="36.3855%" y="357" width="0.1606%" height="15" fill="rgb(216,79,43)" fg:x="453" fg:w="2"/><text x="36.6355%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (2 samples, 0.16%)</title><rect x="36.3855%" y="341" width="0.1606%" height="15" fill="rgb(228,95,12)" fg:x="453" fg:w="2"/><text x="36.6355%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="36.3855%" y="325" width="0.1606%" height="15" fill="rgb(249,221,15)" fg:x="453" fg:w="2"/><text x="36.6355%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="36.4659%" y="309" width="0.0803%" height="15" fill="rgb(233,34,13)" fg:x="454" fg:w="1"/><text x="36.7159%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="36.4659%" y="293" width="0.0803%" height="15" fill="rgb(214,103,39)" fg:x="454" fg:w="1"/><text x="36.7159%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.4659%" y="277" width="0.0803%" height="15" fill="rgb(251,126,39)" fg:x="454" fg:w="1"/><text x="36.7159%" y="287.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (11 samples, 0.88%)</title><rect x="35.7430%" y="405" width="0.8835%" height="15" fill="rgb(214,216,36)" fg:x="445" fg:w="11"/><text x="35.9930%" y="415.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="36.5462%" y="389" width="0.0803%" height="15" fill="rgb(220,221,8)" fg:x="455" fg:w="1"/><text x="36.7962%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="36.5462%" y="373" width="0.0803%" height="15" fill="rgb(240,216,3)" fg:x="455" fg:w="1"/><text x="36.7962%" y="383.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (13 samples, 1.04%)</title><rect x="35.7430%" y="421" width="1.0442%" height="15" fill="rgb(232,218,17)" fg:x="445" fg:w="13"/><text x="35.9930%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (2 samples, 0.16%)</title><rect x="36.6265%" y="405" width="0.1606%" height="15" fill="rgb(229,163,45)" fg:x="456" fg:w="2"/><text x="36.8765%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="36.6265%" y="389" width="0.1606%" height="15" fill="rgb(231,110,42)" fg:x="456" fg:w="2"/><text x="36.8765%" y="399.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="36.6265%" y="373" width="0.1606%" height="15" fill="rgb(208,170,48)" fg:x="456" fg:w="2"/><text x="36.8765%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="37.0281%" y="389" width="0.0803%" height="15" fill="rgb(239,116,25)" fg:x="461" fg:w="1"/><text x="37.2781%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="37.0281%" y="373" width="0.0803%" height="15" fill="rgb(219,200,50)" fg:x="461" fg:w="1"/><text x="37.2781%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.0281%" y="357" width="0.0803%" height="15" fill="rgb(245,200,0)" fg:x="461" fg:w="1"/><text x="37.2781%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="37.1084%" y="357" width="0.1606%" height="15" fill="rgb(245,119,33)" fg:x="462" fg:w="2"/><text x="37.3584%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="37.1888%" y="341" width="0.0803%" height="15" fill="rgb(231,125,12)" fg:x="463" fg:w="1"/><text x="37.4388%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="37.1888%" y="325" width="0.0803%" height="15" fill="rgb(216,96,41)" fg:x="463" fg:w="1"/><text x="37.4388%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.2691%" y="357" width="0.0803%" height="15" fill="rgb(248,43,45)" fg:x="464" fg:w="1"/><text x="37.5191%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (2 samples, 0.16%)</title><rect x="37.3494%" y="357" width="0.1606%" height="15" fill="rgb(217,222,7)" fg:x="465" fg:w="2"/><text x="37.5994%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.4297%" y="341" width="0.0803%" height="15" fill="rgb(233,28,6)" fg:x="466" fg:w="1"/><text x="37.6797%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="37.5100%" y="325" width="0.0803%" height="15" fill="rgb(231,218,15)" fg:x="467" fg:w="1"/><text x="37.7600%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="37.6707%" y="293" width="0.1606%" height="15" fill="rgb(226,171,48)" fg:x="469" fg:w="2"/><text x="37.9207%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="37.6707%" y="277" width="0.1606%" height="15" fill="rgb(235,201,9)" fg:x="469" fg:w="2"/><text x="37.9207%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.7510%" y="261" width="0.0803%" height="15" fill="rgb(217,80,15)" fg:x="470" fg:w="1"/><text x="38.0010%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (11 samples, 0.88%)</title><rect x="37.1084%" y="373" width="0.8835%" height="15" fill="rgb(219,152,8)" fg:x="462" fg:w="11"/><text x="37.3584%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="37.5100%" y="357" width="0.4819%" height="15" fill="rgb(243,107,38)" fg:x="467" fg:w="6"/><text x="37.7600%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="37.5100%" y="341" width="0.4819%" height="15" fill="rgb(231,17,5)" fg:x="467" fg:w="6"/><text x="37.7600%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="37.5904%" y="325" width="0.4016%" height="15" fill="rgb(209,25,54)" fg:x="468" fg:w="5"/><text x="37.8404%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="37.5904%" y="309" width="0.4016%" height="15" fill="rgb(219,0,2)" fg:x="468" fg:w="5"/><text x="37.8404%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="37.8313%" y="293" width="0.1606%" height="15" fill="rgb(246,9,5)" fg:x="471" fg:w="2"/><text x="38.0813%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="37.8313%" y="277" width="0.1606%" height="15" fill="rgb(226,159,4)" fg:x="471" fg:w="2"/><text x="38.0813%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="37.9116%" y="261" width="0.0803%" height="15" fill="rgb(219,175,34)" fg:x="472" fg:w="1"/><text x="38.1616%" y="271.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (12 samples, 0.96%)</title><rect x="37.1084%" y="389" width="0.9639%" height="15" fill="rgb(236,10,46)" fg:x="462" fg:w="12"/><text x="37.3584%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.9920%" y="373" width="0.0803%" height="15" fill="rgb(240,211,16)" fg:x="473" fg:w="1"/><text x="38.2420%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="38.0723%" y="389" width="0.0803%" height="15" fill="rgb(205,3,43)" fg:x="474" fg:w="1"/><text x="38.3223%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="38.0723%" y="373" width="0.0803%" height="15" fill="rgb(245,7,22)" fg:x="474" fg:w="1"/><text x="38.3223%" y="383.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="38.1526%" y="389" width="0.1606%" height="15" fill="rgb(239,132,32)" fg:x="475" fg:w="2"/><text x="38.4026%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="38.1526%" y="373" width="0.1606%" height="15" fill="rgb(228,202,34)" fg:x="475" fg:w="2"/><text x="38.4026%" y="383.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="38.1526%" y="357" width="0.1606%" height="15" fill="rgb(254,200,22)" fg:x="475" fg:w="2"/><text x="38.4026%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="38.1526%" y="341" width="0.1606%" height="15" fill="rgb(219,10,39)" fg:x="475" fg:w="2"/><text x="38.4026%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="38.1526%" y="325" width="0.1606%" height="15" fill="rgb(226,210,39)" fg:x="475" fg:w="2"/><text x="38.4026%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="38.1526%" y="309" width="0.1606%" height="15" fill="rgb(208,219,16)" fg:x="475" fg:w="2"/><text x="38.4026%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.2329%" y="293" width="0.0803%" height="15" fill="rgb(216,158,51)" fg:x="476" fg:w="1"/><text x="38.4829%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.2329%" y="277" width="0.0803%" height="15" fill="rgb(233,14,44)" fg:x="476" fg:w="1"/><text x="38.4829%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="38.3936%" y="373" width="0.1606%" height="15" fill="rgb(237,97,39)" fg:x="478" fg:w="2"/><text x="38.6436%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="38.3936%" y="357" width="0.1606%" height="15" fill="rgb(218,198,43)" fg:x="478" fg:w="2"/><text x="38.6436%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="38.3936%" y="341" width="0.1606%" height="15" fill="rgb(231,104,20)" fg:x="478" fg:w="2"/><text x="38.6436%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="38.4739%" y="325" width="0.0803%" height="15" fill="rgb(254,36,13)" fg:x="479" fg:w="1"/><text x="38.7239%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.5542%" y="373" width="0.0803%" height="15" fill="rgb(248,14,50)" fg:x="480" fg:w="1"/><text x="38.8042%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.48%)</title><rect x="38.3133%" y="389" width="0.4819%" height="15" fill="rgb(217,107,29)" fg:x="477" fg:w="6"/><text x="38.5633%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="38.6345%" y="373" width="0.1606%" height="15" fill="rgb(251,169,33)" fg:x="481" fg:w="2"/><text x="38.8845%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="38.6345%" y="357" width="0.1606%" height="15" fill="rgb(217,108,32)" fg:x="481" fg:w="2"/><text x="38.8845%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="38.7149%" y="341" width="0.0803%" height="15" fill="rgb(219,66,42)" fg:x="482" fg:w="1"/><text x="38.9649%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="38.7149%" y="325" width="0.0803%" height="15" fill="rgb(206,180,7)" fg:x="482" fg:w="1"/><text x="38.9649%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="38.7149%" y="309" width="0.0803%" height="15" fill="rgb(208,226,31)" fg:x="482" fg:w="1"/><text x="38.9649%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="38.7149%" y="293" width="0.0803%" height="15" fill="rgb(218,26,49)" fg:x="482" fg:w="1"/><text x="38.9649%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="38.7149%" y="277" width="0.0803%" height="15" fill="rgb(233,197,48)" fg:x="482" fg:w="1"/><text x="38.9649%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="38.8755%" y="357" width="0.1606%" height="15" fill="rgb(252,181,51)" fg:x="484" fg:w="2"/><text x="39.1255%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="38.8755%" y="341" width="0.1606%" height="15" fill="rgb(253,90,19)" fg:x="484" fg:w="2"/><text x="39.1255%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="38.9558%" y="325" width="0.0803%" height="15" fill="rgb(215,171,30)" fg:x="485" fg:w="1"/><text x="39.2058%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="38.9558%" y="309" width="0.0803%" height="15" fill="rgb(214,222,9)" fg:x="485" fg:w="1"/><text x="39.2058%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="38.9558%" y="293" width="0.0803%" height="15" fill="rgb(223,3,22)" fg:x="485" fg:w="1"/><text x="39.2058%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="38.9558%" y="277" width="0.0803%" height="15" fill="rgb(225,196,46)" fg:x="485" fg:w="1"/><text x="39.2058%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="38.9558%" y="261" width="0.0803%" height="15" fill="rgb(209,110,37)" fg:x="485" fg:w="1"/><text x="39.2058%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="38.9558%" y="245" width="0.0803%" height="15" fill="rgb(249,89,12)" fg:x="485" fg:w="1"/><text x="39.2058%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="38.9558%" y="229" width="0.0803%" height="15" fill="rgb(226,27,33)" fg:x="485" fg:w="1"/><text x="39.2058%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="38.9558%" y="213" width="0.0803%" height="15" fill="rgb(213,82,22)" fg:x="485" fg:w="1"/><text x="39.2058%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="38.9558%" y="197" width="0.0803%" height="15" fill="rgb(248,140,0)" fg:x="485" fg:w="1"/><text x="39.2058%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="38.9558%" y="181" width="0.0803%" height="15" fill="rgb(228,106,3)" fg:x="485" fg:w="1"/><text x="39.2058%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="38.9558%" y="165" width="0.0803%" height="15" fill="rgb(209,23,37)" fg:x="485" fg:w="1"/><text x="39.2058%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="38.9558%" y="149" width="0.0803%" height="15" fill="rgb(241,93,50)" fg:x="485" fg:w="1"/><text x="39.2058%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.9558%" y="133" width="0.0803%" height="15" fill="rgb(253,46,43)" fg:x="485" fg:w="1"/><text x="39.2058%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.2771%" y="261" width="0.0803%" height="15" fill="rgb(226,206,43)" fg:x="489" fg:w="1"/><text x="39.5271%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::gid (8 samples, 0.64%)</title><rect x="38.7952%" y="389" width="0.6426%" height="15" fill="rgb(217,54,7)" fg:x="483" fg:w="8"/><text x="39.0452%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (8 samples, 0.64%)</title><rect x="38.7952%" y="373" width="0.6426%" height="15" fill="rgb(223,5,52)" fg:x="483" fg:w="8"/><text x="39.0452%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="39.0361%" y="357" width="0.4016%" height="15" fill="rgb(206,52,46)" fg:x="486" fg:w="5"/><text x="39.2861%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="39.1165%" y="341" width="0.3213%" height="15" fill="rgb(253,136,11)" fg:x="487" fg:w="4"/><text x="39.3665%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="39.1968%" y="325" width="0.2410%" height="15" fill="rgb(208,106,33)" fg:x="488" fg:w="3"/><text x="39.4468%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="39.1968%" y="309" width="0.2410%" height="15" fill="rgb(206,54,4)" fg:x="488" fg:w="3"/><text x="39.4468%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="39.2771%" y="293" width="0.1606%" height="15" fill="rgb(213,3,15)" fg:x="489" fg:w="2"/><text x="39.5271%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="39.2771%" y="277" width="0.1606%" height="15" fill="rgb(252,211,39)" fg:x="489" fg:w="2"/><text x="39.5271%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="39.3574%" y="261" width="0.0803%" height="15" fill="rgb(223,6,36)" fg:x="490" fg:w="1"/><text x="39.6074%" y="271.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="39.4378%" y="341" width="0.0803%" height="15" fill="rgb(252,169,45)" fg:x="491" fg:w="1"/><text x="39.6878%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="39.4378%" y="325" width="0.0803%" height="15" fill="rgb(212,48,26)" fg:x="491" fg:w="1"/><text x="39.6878%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="39.4378%" y="309" width="0.0803%" height="15" fill="rgb(251,102,48)" fg:x="491" fg:w="1"/><text x="39.6878%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="39.4378%" y="293" width="0.0803%" height="15" fill="rgb(243,208,16)" fg:x="491" fg:w="1"/><text x="39.6878%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="39.8394%" y="229" width="0.0803%" height="15" fill="rgb(219,96,24)" fg:x="496" fg:w="1"/><text x="40.0894%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="39.8394%" y="213" width="0.0803%" height="15" fill="rgb(219,33,29)" fg:x="496" fg:w="1"/><text x="40.0894%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="39.5984%" y="309" width="0.4819%" height="15" fill="rgb(223,176,5)" fg:x="493" fg:w="6"/><text x="39.8484%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="39.5984%" y="293" width="0.4819%" height="15" fill="rgb(228,140,14)" fg:x="493" fg:w="6"/><text x="39.8484%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (6 samples, 0.48%)</title><rect x="39.5984%" y="277" width="0.4819%" height="15" fill="rgb(217,179,31)" fg:x="493" fg:w="6"/><text x="39.8484%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.40%)</title><rect x="39.6787%" y="261" width="0.4016%" height="15" fill="rgb(230,9,30)" fg:x="494" fg:w="5"/><text x="39.9287%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="39.8394%" y="245" width="0.2410%" height="15" fill="rgb(230,136,20)" fg:x="496" fg:w="3"/><text x="40.0894%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="39.9197%" y="229" width="0.1606%" height="15" fill="rgb(215,210,22)" fg:x="497" fg:w="2"/><text x="40.1697%" y="239.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="40.0000%" y="213" width="0.0803%" height="15" fill="rgb(218,43,5)" fg:x="498" fg:w="1"/><text x="40.2500%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.0803%" y="277" width="0.0803%" height="15" fill="rgb(216,11,5)" fg:x="499" fg:w="1"/><text x="40.3303%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="40.1606%" y="261" width="0.0803%" height="15" fill="rgb(209,82,29)" fg:x="500" fg:w="1"/><text x="40.4106%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="40.1606%" y="277" width="0.1606%" height="15" fill="rgb(244,115,12)" fg:x="500" fg:w="2"/><text x="40.4106%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="40.2410%" y="261" width="0.0803%" height="15" fill="rgb(222,82,18)" fg:x="501" fg:w="1"/><text x="40.4910%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="40.2410%" y="245" width="0.0803%" height="15" fill="rgb(249,227,8)" fg:x="501" fg:w="1"/><text x="40.4910%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="40.2410%" y="229" width="0.0803%" height="15" fill="rgb(253,141,45)" fg:x="501" fg:w="1"/><text x="40.4910%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="40.0803%" y="309" width="0.3213%" height="15" fill="rgb(234,184,4)" fg:x="499" fg:w="4"/><text x="40.3303%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="40.0803%" y="293" width="0.3213%" height="15" fill="rgb(218,194,23)" fg:x="499" fg:w="4"/><text x="40.3303%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="40.3213%" y="277" width="0.0803%" height="15" fill="rgb(235,66,41)" fg:x="502" fg:w="1"/><text x="40.5713%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="40.6426%" y="261" width="0.1606%" height="15" fill="rgb(245,217,1)" fg:x="506" fg:w="2"/><text x="40.8926%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="40.8032%" y="261" width="0.0803%" height="15" fill="rgb(229,91,1)" fg:x="508" fg:w="1"/><text x="41.0532%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="40.8032%" y="245" width="0.0803%" height="15" fill="rgb(207,101,30)" fg:x="508" fg:w="1"/><text x="41.0532%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (11 samples, 0.88%)</title><rect x="41.0442%" y="245" width="0.8835%" height="15" fill="rgb(223,82,49)" fg:x="511" fg:w="11"/><text x="41.2942%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.88%)</title><rect x="41.0442%" y="229" width="0.8835%" height="15" fill="rgb(218,167,17)" fg:x="511" fg:w="11"/><text x="41.2942%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.8474%" y="213" width="0.0803%" height="15" fill="rgb(208,103,14)" fg:x="521" fg:w="1"/><text x="42.0974%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="41.9277%" y="245" width="0.3213%" height="15" fill="rgb(238,20,8)" fg:x="522" fg:w="4"/><text x="42.1777%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="42.0080%" y="229" width="0.2410%" height="15" fill="rgb(218,80,54)" fg:x="523" fg:w="3"/><text x="42.2580%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="42.1687%" y="213" width="0.0803%" height="15" fill="rgb(240,144,17)" fg:x="525" fg:w="1"/><text x="42.4187%" y="223.50"></text></g><g><title>alloc::sync::arcinner_layout_for_value_layout (1 samples, 0.08%)</title><rect x="42.1687%" y="197" width="0.0803%" height="15" fill="rgb(245,27,50)" fg:x="525" fg:w="1"/><text x="42.4187%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::extend (1 samples, 0.08%)</title><rect x="42.1687%" y="181" width="0.0803%" height="15" fill="rgb(251,51,7)" fg:x="525" fg:w="1"/><text x="42.4187%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::padding_needed_for (1 samples, 0.08%)</title><rect x="42.1687%" y="165" width="0.0803%" height="15" fill="rgb(245,217,29)" fg:x="525" fg:w="1"/><text x="42.4187%" y="175.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="42.4900%" y="181" width="0.2410%" height="15" fill="rgb(221,176,29)" fg:x="529" fg:w="3"/><text x="42.7400%" y="191.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="42.7309%" y="181" width="0.1606%" height="15" fill="rgb(212,180,24)" fg:x="532" fg:w="2"/><text x="42.9809%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="42.8916%" y="181" width="0.0803%" height="15" fill="rgb(254,24,2)" fg:x="534" fg:w="1"/><text x="43.1416%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="42.9719%" y="181" width="0.1606%" height="15" fill="rgb(230,100,2)" fg:x="535" fg:w="2"/><text x="43.2219%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="42.9719%" y="165" width="0.1606%" height="15" fill="rgb(219,142,25)" fg:x="535" fg:w="2"/><text x="43.2219%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="43.1325%" y="149" width="0.1606%" height="15" fill="rgb(240,73,43)" fg:x="537" fg:w="2"/><text x="43.3825%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.1325%" y="133" width="0.1606%" height="15" fill="rgb(214,114,15)" fg:x="537" fg:w="2"/><text x="43.3825%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.2129%" y="117" width="0.0803%" height="15" fill="rgb(207,130,4)" fg:x="538" fg:w="1"/><text x="43.4629%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="43.1325%" y="181" width="0.2410%" height="15" fill="rgb(221,25,40)" fg:x="537" fg:w="3"/><text x="43.3825%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="43.1325%" y="165" width="0.2410%" height="15" fill="rgb(241,184,7)" fg:x="537" fg:w="3"/><text x="43.3825%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="43.2932%" y="149" width="0.0803%" height="15" fill="rgb(235,159,4)" fg:x="539" fg:w="1"/><text x="43.5432%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="43.2932%" y="133" width="0.0803%" height="15" fill="rgb(214,87,48)" fg:x="539" fg:w="1"/><text x="43.5432%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.2932%" y="117" width="0.0803%" height="15" fill="rgb(246,198,24)" fg:x="539" fg:w="1"/><text x="43.5432%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.2932%" y="101" width="0.0803%" height="15" fill="rgb(209,66,40)" fg:x="539" fg:w="1"/><text x="43.5432%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.2932%" y="85" width="0.0803%" height="15" fill="rgb(233,147,39)" fg:x="539" fg:w="1"/><text x="43.5432%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="43.3735%" y="181" width="0.0803%" height="15" fill="rgb(231,145,52)" fg:x="540" fg:w="1"/><text x="43.6235%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="43.3735%" y="165" width="0.0803%" height="15" fill="rgb(206,20,26)" fg:x="540" fg:w="1"/><text x="43.6235%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (33 samples, 2.65%)</title><rect x="43.4538%" y="181" width="2.6506%" height="15" fill="rgb(238,220,4)" fg:x="541" fg:w="33"/><text x="43.7038%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (33 samples, 2.65%)</title><rect x="43.4538%" y="165" width="2.6506%" height="15" fill="rgb(252,195,42)" fg:x="541" fg:w="33"/><text x="43.7038%" y="175.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (33 samples, 2.65%)</title><rect x="43.4538%" y="149" width="2.6506%" height="15" fill="rgb(209,10,6)" fg:x="541" fg:w="33"/><text x="43.7038%" y="159.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="46.1044%" y="181" width="0.2410%" height="15" fill="rgb(229,3,52)" fg:x="574" fg:w="3"/><text x="46.3544%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.2651%" y="165" width="0.0803%" height="15" fill="rgb(253,49,37)" fg:x="576" fg:w="1"/><text x="46.5151%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 4.18%)</title><rect x="42.3293%" y="229" width="4.1767%" height="15" fill="rgb(240,103,49)" fg:x="527" fg:w="52"/><text x="42.5793%" y="239.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (52 samples, 4.18%)</title><rect x="42.3293%" y="213" width="4.1767%" height="15" fill="rgb(250,182,30)" fg:x="527" fg:w="52"/><text x="42.5793%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (51 samples, 4.10%)</title><rect x="42.4096%" y="197" width="4.0964%" height="15" fill="rgb(248,8,30)" fg:x="528" fg:w="51"/><text x="42.6596%" y="207.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="46.3454%" y="181" width="0.1606%" height="15" fill="rgb(237,120,30)" fg:x="577" fg:w="2"/><text x="46.5954%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.4257%" y="165" width="0.0803%" height="15" fill="rgb(221,146,34)" fg:x="578" fg:w="1"/><text x="46.6757%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.4257%" y="149" width="0.0803%" height="15" fill="rgb(242,55,13)" fg:x="578" fg:w="1"/><text x="46.6757%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.5060%" y="229" width="0.0803%" height="15" fill="rgb(242,112,31)" fg:x="579" fg:w="1"/><text x="46.7560%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.48%)</title><rect x="46.8273%" y="213" width="0.4819%" height="15" fill="rgb(249,192,27)" fg:x="583" fg:w="6"/><text x="47.0773%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="47.0683%" y="197" width="0.2410%" height="15" fill="rgb(208,204,44)" fg:x="586" fg:w="3"/><text x="47.3183%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="47.0683%" y="181" width="0.2410%" height="15" fill="rgb(208,93,54)" fg:x="586" fg:w="3"/><text x="47.3183%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="47.1486%" y="165" width="0.1606%" height="15" fill="rgb(242,1,31)" fg:x="587" fg:w="2"/><text x="47.3986%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.5502%" y="197" width="0.0803%" height="15" fill="rgb(241,83,25)" fg:x="592" fg:w="1"/><text x="47.8002%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="47.3092%" y="213" width="0.4016%" height="15" fill="rgb(205,169,50)" fg:x="589" fg:w="5"/><text x="47.5592%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="47.6305%" y="197" width="0.0803%" height="15" fill="rgb(239,186,37)" fg:x="593" fg:w="1"/><text x="47.8805%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.6305%" y="181" width="0.0803%" height="15" fill="rgb(205,221,10)" fg:x="593" fg:w="1"/><text x="47.8805%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.6305%" y="165" width="0.0803%" height="15" fill="rgb(218,196,15)" fg:x="593" fg:w="1"/><text x="47.8805%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (69 samples, 5.54%)</title><rect x="42.2490%" y="245" width="5.5422%" height="15" fill="rgb(218,196,35)" fg:x="526" fg:w="69"/><text x="42.4990%" y="255.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (15 samples, 1.20%)</title><rect x="46.5863%" y="229" width="1.2048%" height="15" fill="rgb(233,63,24)" fg:x="580" fg:w="15"/><text x="46.8363%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="47.7108%" y="213" width="0.0803%" height="15" fill="rgb(225,8,4)" fg:x="594" fg:w="1"/><text x="47.9608%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="47.7912%" y="245" width="0.0803%" height="15" fill="rgb(234,105,35)" fg:x="595" fg:w="1"/><text x="48.0412%" y="255.50"></text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="47.8715%" y="245" width="0.0803%" height="15" fill="rgb(236,21,32)" fg:x="596" fg:w="1"/><text x="48.1215%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (89 samples, 7.15%)</title><rect x="40.8835%" y="261" width="7.1486%" height="15" fill="rgb(228,109,6)" fg:x="509" fg:w="89"/><text x="41.1335%" y="271.50">regex_auto..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="47.9518%" y="245" width="0.0803%" height="15" fill="rgb(229,215,31)" fg:x="597" fg:w="1"/><text x="48.2018%" y="255.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="48.0321%" y="261" width="0.0803%" height="15" fill="rgb(221,52,54)" fg:x="598" fg:w="1"/><text x="48.2821%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="48.0321%" y="245" width="0.0803%" height="15" fill="rgb(252,129,43)" fg:x="598" fg:w="1"/><text x="48.2821%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="48.0321%" y="229" width="0.0803%" height="15" fill="rgb(248,183,27)" fg:x="598" fg:w="1"/><text x="48.2821%" y="239.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="48.0321%" y="213" width="0.0803%" height="15" fill="rgb(250,0,22)" fg:x="598" fg:w="1"/><text x="48.2821%" y="223.50"></text></g><g><title>posix_memalign (1 samples, 0.08%)</title><rect x="48.0321%" y="197" width="0.0803%" height="15" fill="rgb(213,166,10)" fg:x="598" fg:w="1"/><text x="48.2821%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="48.1124%" y="261" width="0.3213%" height="15" fill="rgb(207,163,36)" fg:x="599" fg:w="4"/><text x="48.3624%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="48.1124%" y="245" width="0.3213%" height="15" fill="rgb(208,122,22)" fg:x="599" fg:w="4"/><text x="48.3624%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="48.1928%" y="229" width="0.2410%" height="15" fill="rgb(207,104,49)" fg:x="600" fg:w="3"/><text x="48.4428%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="48.1928%" y="213" width="0.2410%" height="15" fill="rgb(248,211,50)" fg:x="600" fg:w="3"/><text x="48.4428%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="48.1928%" y="197" width="0.2410%" height="15" fill="rgb(217,13,45)" fg:x="600" fg:w="3"/><text x="48.4428%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="48.1928%" y="181" width="0.2410%" height="15" fill="rgb(211,216,49)" fg:x="600" fg:w="3"/><text x="48.4428%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="48.1928%" y="165" width="0.2410%" height="15" fill="rgb(221,58,53)" fg:x="600" fg:w="3"/><text x="48.4428%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::merge_sort::RunVec&lt;alloc::slice::stable_sort&lt;regex_syntax::ast::Span,&lt;regex_syntax::ast::Span as core::cmp::PartialOrd&gt;::lt&gt;::{{closure}},alloc::slice::stable_sort&lt;regex_syntax::ast::Span,&lt;regex_syntax::ast::Span as core::cmp::PartialOrd&gt;::lt&gt;::{{closure}}&gt;&gt; (1 samples, 0.08%)</title><rect x="48.4337%" y="197" width="0.0803%" height="15" fill="rgb(220,112,41)" fg:x="603" fg:w="1"/><text x="48.6837%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="48.4337%" y="229" width="0.1606%" height="15" fill="rgb(236,38,28)" fg:x="603" fg:w="2"/><text x="48.6837%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="48.4337%" y="213" width="0.1606%" height="15" fill="rgb(227,195,22)" fg:x="603" fg:w="2"/><text x="48.6837%" y="223.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="48.5141%" y="197" width="0.0803%" height="15" fill="rgb(214,55,33)" fg:x="604" fg:w="1"/><text x="48.7641%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="48.5944%" y="213" width="0.0803%" height="15" fill="rgb(248,80,13)" fg:x="605" fg:w="1"/><text x="48.8444%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="48.5944%" y="229" width="0.1606%" height="15" fill="rgb(238,52,6)" fg:x="605" fg:w="2"/><text x="48.8444%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="48.6747%" y="213" width="0.0803%" height="15" fill="rgb(224,198,47)" fg:x="606" fg:w="1"/><text x="48.9247%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (104 samples, 8.35%)</title><rect x="40.4819%" y="277" width="8.3534%" height="15" fill="rgb(233,171,20)" fg:x="504" fg:w="104"/><text x="40.7319%" y="287.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="48.4337%" y="261" width="0.4016%" height="15" fill="rgb(241,30,25)" fg:x="603" fg:w="5"/><text x="48.6837%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="48.4337%" y="245" width="0.4016%" height="15" fill="rgb(207,171,38)" fg:x="603" fg:w="5"/><text x="48.6837%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.7550%" y="229" width="0.0803%" height="15" fill="rgb(234,70,1)" fg:x="607" fg:w="1"/><text x="49.0050%" y="239.50"></text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="48.8353%" y="277" width="0.0803%" height="15" fill="rgb(232,178,18)" fg:x="608" fg:w="1"/><text x="49.0853%" y="287.50"></text></g><g><title>regex::regex::string::Regex::new (107 samples, 8.59%)</title><rect x="40.4016%" y="309" width="8.5944%" height="15" fill="rgb(241,78,40)" fg:x="503" fg:w="107"/><text x="40.6516%" y="319.50">regex::regex..</text></g><g><title>regex::builders::string::RegexBuilder::build (107 samples, 8.59%)</title><rect x="40.4016%" y="293" width="8.5944%" height="15" fill="rgb(222,35,25)" fg:x="503" fg:w="107"/><text x="40.6516%" y="303.50">regex::build..</text></g><g><title>regex_automata::util::syntax::Config::utf8 (1 samples, 0.08%)</title><rect x="48.9157%" y="277" width="0.0803%" height="15" fill="rgb(207,92,16)" fg:x="609" fg:w="1"/><text x="49.1657%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="49.0763%" y="245" width="0.0803%" height="15" fill="rgb(216,59,51)" fg:x="611" fg:w="1"/><text x="49.3263%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="49.0763%" y="229" width="0.0803%" height="15" fill="rgb(213,80,28)" fg:x="611" fg:w="1"/><text x="49.3263%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="49.0763%" y="213" width="0.0803%" height="15" fill="rgb(220,93,7)" fg:x="611" fg:w="1"/><text x="49.3263%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="49.3173%" y="229" width="0.0803%" height="15" fill="rgb(225,24,44)" fg:x="614" fg:w="1"/><text x="49.5673%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="49.3173%" y="213" width="0.0803%" height="15" fill="rgb(243,74,40)" fg:x="614" fg:w="1"/><text x="49.5673%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="49.3173%" y="197" width="0.0803%" height="15" fill="rgb(228,39,7)" fg:x="614" fg:w="1"/><text x="49.5673%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (126 samples, 10.12%)</title><rect x="39.5181%" y="325" width="10.1205%" height="15" fill="rgb(227,79,8)" fg:x="492" fg:w="126"/><text x="39.7681%" y="335.50">indefinite::hel..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="48.9960%" y="309" width="0.6426%" height="15" fill="rgb(236,58,11)" fg:x="610" fg:w="8"/><text x="49.2460%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="49.0763%" y="293" width="0.5622%" height="15" fill="rgb(249,63,35)" fg:x="611" fg:w="7"/><text x="49.3263%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="49.0763%" y="277" width="0.5622%" height="15" fill="rgb(252,114,16)" fg:x="611" fg:w="7"/><text x="49.3263%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="49.0763%" y="261" width="0.5622%" height="15" fill="rgb(254,151,24)" fg:x="611" fg:w="7"/><text x="49.3263%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="49.1566%" y="245" width="0.4819%" height="15" fill="rgb(253,54,39)" fg:x="612" fg:w="6"/><text x="49.4066%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="49.3976%" y="229" width="0.2410%" height="15" fill="rgb(243,25,45)" fg:x="615" fg:w="3"/><text x="49.6476%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.7189%" y="245" width="0.0803%" height="15" fill="rgb(234,134,9)" fg:x="619" fg:w="1"/><text x="49.9689%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="49.7189%" y="261" width="0.1606%" height="15" fill="rgb(227,166,31)" fg:x="619" fg:w="2"/><text x="49.9689%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.7992%" y="245" width="0.0803%" height="15" fill="rgb(245,143,41)" fg:x="620" fg:w="1"/><text x="50.0492%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="49.7189%" y="277" width="0.3213%" height="15" fill="rgb(238,181,32)" fg:x="619" fg:w="4"/><text x="49.9689%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="49.8795%" y="261" width="0.1606%" height="15" fill="rgb(224,113,18)" fg:x="621" fg:w="2"/><text x="50.1295%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="49.8795%" y="245" width="0.1606%" height="15" fill="rgb(240,229,28)" fg:x="621" fg:w="2"/><text x="50.1295%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="49.8795%" y="229" width="0.1606%" height="15" fill="rgb(250,185,3)" fg:x="621" fg:w="2"/><text x="50.1295%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="49.8795%" y="213" width="0.1606%" height="15" fill="rgb(212,59,25)" fg:x="621" fg:w="2"/><text x="50.1295%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="50.0402%" y="261" width="0.1606%" height="15" fill="rgb(221,87,20)" fg:x="623" fg:w="2"/><text x="50.2902%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="50.0402%" y="245" width="0.1606%" height="15" fill="rgb(213,74,28)" fg:x="623" fg:w="2"/><text x="50.2902%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (8 samples, 0.64%)</title><rect x="49.7189%" y="309" width="0.6426%" height="15" fill="rgb(224,132,34)" fg:x="619" fg:w="8"/><text x="49.9689%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (8 samples, 0.64%)</title><rect x="49.7189%" y="293" width="0.6426%" height="15" fill="rgb(222,101,24)" fg:x="619" fg:w="8"/><text x="49.9689%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="50.0402%" y="277" width="0.3213%" height="15" fill="rgb(254,142,4)" fg:x="623" fg:w="4"/><text x="50.2902%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (2 samples, 0.16%)</title><rect x="50.2008%" y="261" width="0.1606%" height="15" fill="rgb(230,229,49)" fg:x="625" fg:w="2"/><text x="50.4508%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="50.2008%" y="245" width="0.1606%" height="15" fill="rgb(238,70,47)" fg:x="625" fg:w="2"/><text x="50.4508%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="50.4418%" y="229" width="0.0803%" height="15" fill="rgb(231,160,17)" fg:x="628" fg:w="1"/><text x="50.6918%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="50.7631%" y="213" width="0.1606%" height="15" fill="rgb(218,68,53)" fg:x="632" fg:w="2"/><text x="51.0131%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="50.7631%" y="197" width="0.1606%" height="15" fill="rgb(236,111,10)" fg:x="632" fg:w="2"/><text x="51.0131%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="50.7631%" y="181" width="0.1606%" height="15" fill="rgb(224,34,41)" fg:x="632" fg:w="2"/><text x="51.0131%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (12 samples, 0.96%)</title><rect x="50.3614%" y="309" width="0.9639%" height="15" fill="rgb(241,118,19)" fg:x="627" fg:w="12"/><text x="50.6114%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.88%)</title><rect x="50.4418%" y="293" width="0.8835%" height="15" fill="rgb(238,129,25)" fg:x="628" fg:w="11"/><text x="50.6918%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.88%)</title><rect x="50.4418%" y="277" width="0.8835%" height="15" fill="rgb(238,22,31)" fg:x="628" fg:w="11"/><text x="50.6918%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.88%)</title><rect x="50.4418%" y="261" width="0.8835%" height="15" fill="rgb(222,174,48)" fg:x="628" fg:w="11"/><text x="50.6918%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (11 samples, 0.88%)</title><rect x="50.4418%" y="245" width="0.8835%" height="15" fill="rgb(206,152,40)" fg:x="628" fg:w="11"/><text x="50.6918%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.80%)</title><rect x="50.5221%" y="229" width="0.8032%" height="15" fill="rgb(218,99,54)" fg:x="629" fg:w="10"/><text x="50.7721%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (5 samples, 0.40%)</title><rect x="50.9237%" y="213" width="0.4016%" height="15" fill="rgb(220,174,26)" fg:x="634" fg:w="5"/><text x="51.1737%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="51.3253%" y="261" width="0.0803%" height="15" fill="rgb(245,116,9)" fg:x="639" fg:w="1"/><text x="51.5753%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="51.3253%" y="245" width="0.0803%" height="15" fill="rgb(209,72,35)" fg:x="639" fg:w="1"/><text x="51.5753%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.3253%" y="229" width="0.0803%" height="15" fill="rgb(226,126,21)" fg:x="639" fg:w="1"/><text x="51.5753%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="51.4056%" y="229" width="0.0803%" height="15" fill="rgb(227,192,1)" fg:x="640" fg:w="1"/><text x="51.6556%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="51.4056%" y="213" width="0.0803%" height="15" fill="rgb(237,180,29)" fg:x="640" fg:w="1"/><text x="51.6556%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.4056%" y="197" width="0.0803%" height="15" fill="rgb(230,197,35)" fg:x="640" fg:w="1"/><text x="51.6556%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.4056%" y="181" width="0.0803%" height="15" fill="rgb(246,193,31)" fg:x="640" fg:w="1"/><text x="51.6556%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="51.5663%" y="197" width="0.0803%" height="15" fill="rgb(241,36,4)" fg:x="642" fg:w="1"/><text x="51.8163%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="51.4056%" y="261" width="0.3213%" height="15" fill="rgb(241,130,17)" fg:x="640" fg:w="4"/><text x="51.6556%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="51.4056%" y="245" width="0.3213%" height="15" fill="rgb(206,137,32)" fg:x="640" fg:w="4"/><text x="51.6556%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="51.4859%" y="229" width="0.2410%" height="15" fill="rgb(237,228,51)" fg:x="641" fg:w="3"/><text x="51.7359%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="51.4859%" y="213" width="0.2410%" height="15" fill="rgb(243,6,42)" fg:x="641" fg:w="3"/><text x="51.7359%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.6466%" y="197" width="0.0803%" height="15" fill="rgb(251,74,28)" fg:x="643" fg:w="1"/><text x="51.8966%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.8072%" y="229" width="0.0803%" height="15" fill="rgb(218,20,49)" fg:x="645" fg:w="1"/><text x="52.0572%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (13 samples, 1.04%)</title><rect x="51.8072%" y="245" width="1.0442%" height="15" fill="rgb(238,28,14)" fg:x="645" fg:w="13"/><text x="52.0572%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (12 samples, 0.96%)</title><rect x="51.8876%" y="229" width="0.9639%" height="15" fill="rgb(229,40,46)" fg:x="646" fg:w="12"/><text x="52.1376%" y="239.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="52.6104%" y="213" width="0.2410%" height="15" fill="rgb(244,195,20)" fg:x="655" fg:w="3"/><text x="52.8604%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="52.9317%" y="229" width="0.3213%" height="15" fill="rgb(253,56,35)" fg:x="659" fg:w="4"/><text x="53.1817%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="52.8514%" y="245" width="0.4819%" height="15" fill="rgb(210,149,44)" fg:x="658" fg:w="6"/><text x="53.1014%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="53.2530%" y="229" width="0.0803%" height="15" fill="rgb(240,135,12)" fg:x="663" fg:w="1"/><text x="53.5030%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="53.2530%" y="213" width="0.0803%" height="15" fill="rgb(251,24,50)" fg:x="663" fg:w="1"/><text x="53.5030%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="53.2530%" y="197" width="0.0803%" height="15" fill="rgb(243,200,47)" fg:x="663" fg:w="1"/><text x="53.5030%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.2530%" y="181" width="0.0803%" height="15" fill="rgb(224,166,26)" fg:x="663" fg:w="1"/><text x="53.5030%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.2530%" y="165" width="0.0803%" height="15" fill="rgb(233,0,47)" fg:x="663" fg:w="1"/><text x="53.5030%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.6546%" y="213" width="0.0803%" height="15" fill="rgb(253,80,5)" fg:x="668" fg:w="1"/><text x="53.9046%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::sparse_set::SparseSet&gt; (1 samples, 0.08%)</title><rect x="53.7349%" y="213" width="0.0803%" height="15" fill="rgb(214,133,25)" fg:x="669" fg:w="1"/><text x="53.9849%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="53.8153%" y="213" width="0.0803%" height="15" fill="rgb(209,27,14)" fg:x="670" fg:w="1"/><text x="54.0653%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="53.8153%" y="197" width="0.0803%" height="15" fill="rgb(219,102,51)" fg:x="670" fg:w="1"/><text x="54.0653%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.8153%" y="181" width="0.0803%" height="15" fill="rgb(237,18,16)" fg:x="670" fg:w="1"/><text x="54.0653%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.8153%" y="165" width="0.0803%" height="15" fill="rgb(241,85,17)" fg:x="670" fg:w="1"/><text x="54.0653%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (7 samples, 0.56%)</title><rect x="53.8956%" y="213" width="0.5622%" height="15" fill="rgb(236,90,42)" fg:x="671" fg:w="7"/><text x="54.1456%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="54.2169%" y="197" width="0.2410%" height="15" fill="rgb(249,57,21)" fg:x="675" fg:w="3"/><text x="54.4669%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.3775%" y="181" width="0.0803%" height="15" fill="rgb(243,12,36)" fg:x="677" fg:w="1"/><text x="54.6275%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.3775%" y="165" width="0.0803%" height="15" fill="rgb(253,128,47)" fg:x="677" fg:w="1"/><text x="54.6275%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.3775%" y="149" width="0.0803%" height="15" fill="rgb(207,33,20)" fg:x="677" fg:w="1"/><text x="54.6275%" y="159.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="54.4578%" y="197" width="0.3213%" height="15" fill="rgb(233,215,35)" fg:x="678" fg:w="4"/><text x="54.7078%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.32%)</title><rect x="54.4578%" y="181" width="0.3213%" height="15" fill="rgb(249,188,52)" fg:x="678" fg:w="4"/><text x="54.7078%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (19 samples, 1.53%)</title><rect x="53.3333%" y="245" width="1.5261%" height="15" fill="rgb(225,12,32)" fg:x="664" fg:w="19"/><text x="53.5833%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (19 samples, 1.53%)</title><rect x="53.3333%" y="229" width="1.5261%" height="15" fill="rgb(247,98,14)" fg:x="664" fg:w="19"/><text x="53.5833%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.40%)</title><rect x="54.4578%" y="213" width="0.4016%" height="15" fill="rgb(247,219,48)" fg:x="678" fg:w="5"/><text x="54.7078%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="54.7791%" y="197" width="0.0803%" height="15" fill="rgb(253,60,48)" fg:x="682" fg:w="1"/><text x="55.0291%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="54.8594%" y="245" width="0.0803%" height="15" fill="rgb(245,15,52)" fg:x="683" fg:w="1"/><text x="55.1094%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="54.8594%" y="229" width="0.0803%" height="15" fill="rgb(220,133,28)" fg:x="683" fg:w="1"/><text x="55.1094%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="54.8594%" y="213" width="0.0803%" height="15" fill="rgb(217,180,4)" fg:x="683" fg:w="1"/><text x="55.1094%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="54.9398%" y="165" width="0.0803%" height="15" fill="rgb(251,24,1)" fg:x="684" fg:w="1"/><text x="55.1898%" y="175.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="55.9839%" y="133" width="0.3213%" height="15" fill="rgb(212,185,49)" fg:x="697" fg:w="4"/><text x="56.2339%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (7 samples, 0.56%)</title><rect x="56.3052%" y="133" width="0.5622%" height="15" fill="rgb(215,175,22)" fg:x="701" fg:w="7"/><text x="56.5552%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="56.6265%" y="117" width="0.2410%" height="15" fill="rgb(250,205,14)" fg:x="705" fg:w="3"/><text x="56.8765%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="56.6265%" y="101" width="0.2410%" height="15" fill="rgb(225,211,22)" fg:x="705" fg:w="3"/><text x="56.8765%" y="111.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="56.6265%" y="85" width="0.2410%" height="15" fill="rgb(251,179,42)" fg:x="705" fg:w="3"/><text x="56.8765%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="57.1888%" y="101" width="0.2410%" height="15" fill="rgb(208,216,51)" fg:x="712" fg:w="3"/><text x="57.4388%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="57.1888%" y="85" width="0.2410%" height="15" fill="rgb(235,36,11)" fg:x="712" fg:w="3"/><text x="57.4388%" y="95.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="57.2691%" y="69" width="0.1606%" height="15" fill="rgb(213,189,28)" fg:x="713" fg:w="2"/><text x="57.5191%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.8313%" y="85" width="0.0803%" height="15" fill="rgb(227,203,42)" fg:x="720" fg:w="1"/><text x="58.0813%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (14 samples, 1.12%)</title><rect x="56.8675%" y="133" width="1.1245%" height="15" fill="rgb(244,72,36)" fg:x="708" fg:w="14"/><text x="57.1175%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (12 samples, 0.96%)</title><rect x="57.0281%" y="117" width="0.9639%" height="15" fill="rgb(213,53,17)" fg:x="710" fg:w="12"/><text x="57.2781%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (7 samples, 0.56%)</title><rect x="57.4297%" y="101" width="0.5622%" height="15" fill="rgb(207,167,3)" fg:x="715" fg:w="7"/><text x="57.6797%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="57.9116%" y="85" width="0.0803%" height="15" fill="rgb(216,98,30)" fg:x="721" fg:w="1"/><text x="58.1616%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.9116%" y="69" width="0.0803%" height="15" fill="rgb(236,123,15)" fg:x="721" fg:w="1"/><text x="58.1616%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.9116%" y="53" width="0.0803%" height="15" fill="rgb(248,81,50)" fg:x="721" fg:w="1"/><text x="58.1616%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.9920%" y="117" width="0.0803%" height="15" fill="rgb(214,120,4)" fg:x="722" fg:w="1"/><text x="58.2420%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.9920%" y="101" width="0.0803%" height="15" fill="rgb(208,179,34)" fg:x="722" fg:w="1"/><text x="58.2420%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.9920%" y="85" width="0.0803%" height="15" fill="rgb(227,140,7)" fg:x="722" fg:w="1"/><text x="58.2420%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="58.0723%" y="117" width="0.0803%" height="15" fill="rgb(214,22,6)" fg:x="723" fg:w="1"/><text x="58.3223%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.0723%" y="101" width="0.0803%" height="15" fill="rgb(207,137,27)" fg:x="723" fg:w="1"/><text x="58.3223%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (52 samples, 4.18%)</title><rect x="57.9920%" y="133" width="4.1767%" height="15" fill="rgb(210,8,46)" fg:x="722" fg:w="52"/><text x="58.2420%" y="143.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (50 samples, 4.02%)</title><rect x="58.1526%" y="117" width="4.0161%" height="15" fill="rgb(240,16,54)" fg:x="724" fg:w="50"/><text x="58.4026%" y="127.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (50 samples, 4.02%)</title><rect x="58.1526%" y="101" width="4.0161%" height="15" fill="rgb(211,209,29)" fg:x="724" fg:w="50"/><text x="58.4026%" y="111.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="62.1687%" y="133" width="0.2410%" height="15" fill="rgb(226,228,24)" fg:x="774" fg:w="3"/><text x="62.4187%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (100 samples, 8.03%)</title><rect x="54.9398%" y="229" width="8.0321%" height="15" fill="rgb(222,84,9)" fg:x="684" fg:w="100"/><text x="55.1898%" y="239.50">&lt;core::iter..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (100 samples, 8.03%)</title><rect x="54.9398%" y="213" width="8.0321%" height="15" fill="rgb(234,203,30)" fg:x="684" fg:w="100"/><text x="55.1898%" y="223.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (100 samples, 8.03%)</title><rect x="54.9398%" y="197" width="8.0321%" height="15" fill="rgb(238,109,14)" fg:x="684" fg:w="100"/><text x="55.1898%" y="207.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (100 samples, 8.03%)</title><rect x="54.9398%" y="181" width="8.0321%" height="15" fill="rgb(233,206,34)" fg:x="684" fg:w="100"/><text x="55.1898%" y="191.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (99 samples, 7.95%)</title><rect x="55.0201%" y="165" width="7.9518%" height="15" fill="rgb(220,167,47)" fg:x="685" fg:w="99"/><text x="55.2701%" y="175.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (99 samples, 7.95%)</title><rect x="55.0201%" y="149" width="7.9518%" height="15" fill="rgb(238,105,10)" fg:x="685" fg:w="99"/><text x="55.2701%" y="159.50">regex_autom..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (7 samples, 0.56%)</title><rect x="62.4096%" y="133" width="0.5622%" height="15" fill="rgb(213,227,17)" fg:x="777" fg:w="7"/><text x="62.6596%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="62.5703%" y="117" width="0.4016%" height="15" fill="rgb(217,132,38)" fg:x="779" fg:w="5"/><text x="62.8203%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="62.5703%" y="101" width="0.4016%" height="15" fill="rgb(242,146,4)" fg:x="779" fg:w="5"/><text x="62.8203%" y="111.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="62.6506%" y="85" width="0.3213%" height="15" fill="rgb(212,61,9)" fg:x="780" fg:w="4"/><text x="62.9006%" y="95.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="62.9719%" y="213" width="0.1606%" height="15" fill="rgb(247,126,22)" fg:x="784" fg:w="2"/><text x="63.2219%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (8 samples, 0.64%)</title><rect x="63.1325%" y="213" width="0.6426%" height="15" fill="rgb(220,196,2)" fg:x="786" fg:w="8"/><text x="63.3825%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="63.6145%" y="197" width="0.1606%" height="15" fill="rgb(208,46,4)" fg:x="792" fg:w="2"/><text x="63.8645%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.6145%" y="181" width="0.1606%" height="15" fill="rgb(252,104,46)" fg:x="792" fg:w="2"/><text x="63.8645%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="63.6145%" y="165" width="0.1606%" height="15" fill="rgb(237,152,48)" fg:x="792" fg:w="2"/><text x="63.8645%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.0964%" y="197" width="0.0803%" height="15" fill="rgb(221,59,37)" fg:x="798" fg:w="1"/><text x="64.3464%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="63.7751%" y="213" width="0.4819%" height="15" fill="rgb(209,202,51)" fg:x="794" fg:w="6"/><text x="64.0251%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.1767%" y="197" width="0.0803%" height="15" fill="rgb(228,81,30)" fg:x="799" fg:w="1"/><text x="64.4267%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.1767%" y="181" width="0.0803%" height="15" fill="rgb(227,42,39)" fg:x="799" fg:w="1"/><text x="64.4267%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.1767%" y="165" width="0.0803%" height="15" fill="rgb(221,26,2)" fg:x="799" fg:w="1"/><text x="64.4267%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (118 samples, 9.48%)</title><rect x="54.9398%" y="245" width="9.4779%" height="15" fill="rgb(254,61,31)" fg:x="684" fg:w="118"/><text x="55.1898%" y="255.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (18 samples, 1.45%)</title><rect x="62.9719%" y="229" width="1.4458%" height="15" fill="rgb(222,173,38)" fg:x="784" fg:w="18"/><text x="63.2219%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="64.2570%" y="213" width="0.1606%" height="15" fill="rgb(218,50,12)" fg:x="800" fg:w="2"/><text x="64.5070%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (159 samples, 12.77%)</title><rect x="51.7269%" y="261" width="12.7711%" height="15" fill="rgb(223,88,40)" fg:x="644" fg:w="159"/><text x="51.9769%" y="271.50">regex_automata::met..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="64.4177%" y="245" width="0.0803%" height="15" fill="rgb(237,54,19)" fg:x="802" fg:w="1"/><text x="64.6677%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="64.4177%" y="229" width="0.0803%" height="15" fill="rgb(251,129,25)" fg:x="802" fg:w="1"/><text x="64.6677%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="64.4177%" y="213" width="0.0803%" height="15" fill="rgb(238,97,19)" fg:x="802" fg:w="1"/><text x="64.6677%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.4177%" y="197" width="0.0803%" height="15" fill="rgb(240,169,18)" fg:x="802" fg:w="1"/><text x="64.6677%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.4177%" y="181" width="0.0803%" height="15" fill="rgb(230,187,49)" fg:x="802" fg:w="1"/><text x="64.6677%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.4177%" y="165" width="0.0803%" height="15" fill="rgb(209,44,26)" fg:x="802" fg:w="1"/><text x="64.6677%" y="175.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="64.5783%" y="213" width="0.0803%" height="15" fill="rgb(244,0,6)" fg:x="804" fg:w="1"/><text x="64.8283%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="64.5783%" y="229" width="0.2410%" height="15" fill="rgb(248,18,21)" fg:x="804" fg:w="3"/><text x="64.8283%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="64.6586%" y="213" width="0.1606%" height="15" fill="rgb(245,180,19)" fg:x="805" fg:w="2"/><text x="64.9086%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="64.6586%" y="197" width="0.1606%" height="15" fill="rgb(252,118,36)" fg:x="805" fg:w="2"/><text x="64.9086%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="64.6586%" y="181" width="0.1606%" height="15" fill="rgb(210,224,19)" fg:x="805" fg:w="2"/><text x="64.9086%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="64.6586%" y="165" width="0.1606%" height="15" fill="rgb(218,30,24)" fg:x="805" fg:w="2"/><text x="64.9086%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="64.4980%" y="261" width="0.4016%" height="15" fill="rgb(219,75,50)" fg:x="803" fg:w="5"/><text x="64.7480%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="64.4980%" y="245" width="0.4016%" height="15" fill="rgb(234,72,50)" fg:x="803" fg:w="5"/><text x="64.7480%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="64.8193%" y="229" width="0.0803%" height="15" fill="rgb(219,100,48)" fg:x="807" fg:w="1"/><text x="65.0693%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="65.0602%" y="213" width="0.1606%" height="15" fill="rgb(253,5,41)" fg:x="810" fg:w="2"/><text x="65.3102%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="65.0602%" y="229" width="0.2410%" height="15" fill="rgb(247,181,11)" fg:x="810" fg:w="3"/><text x="65.3102%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="65.2209%" y="213" width="0.0803%" height="15" fill="rgb(222,223,25)" fg:x="812" fg:w="1"/><text x="65.4709%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="65.2209%" y="197" width="0.0803%" height="15" fill="rgb(214,198,28)" fg:x="812" fg:w="1"/><text x="65.4709%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="65.3012%" y="229" width="0.2410%" height="15" fill="rgb(230,46,43)" fg:x="813" fg:w="3"/><text x="65.5512%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="65.4618%" y="213" width="0.0803%" height="15" fill="rgb(233,65,53)" fg:x="815" fg:w="1"/><text x="65.7118%" y="223.50"></text></g><g><title>indefinite::rules::number::Number::check (199 samples, 15.98%)</title><rect x="49.6386%" y="325" width="15.9839%" height="15" fill="rgb(221,121,27)" fg:x="618" fg:w="199"/><text x="49.8886%" y="335.50">indefinite::rules::number..</text></g><g><title>regex::regex::string::Regex::new (178 samples, 14.30%)</title><rect x="51.3253%" y="309" width="14.2972%" height="15" fill="rgb(247,70,47)" fg:x="639" fg:w="178"/><text x="51.5753%" y="319.50">regex::regex::string::..</text></g><g><title>regex::builders::string::RegexBuilder::build (178 samples, 14.30%)</title><rect x="51.3253%" y="293" width="14.2972%" height="15" fill="rgb(228,85,35)" fg:x="639" fg:w="178"/><text x="51.5753%" y="303.50">regex::builders::strin..</text></g><g><title>regex_automata::meta::regex::Builder::build (178 samples, 14.30%)</title><rect x="51.3253%" y="277" width="14.2972%" height="15" fill="rgb(209,50,18)" fg:x="639" fg:w="178"/><text x="51.5753%" y="287.50">regex_automata::meta::..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (9 samples, 0.72%)</title><rect x="64.8996%" y="261" width="0.7229%" height="15" fill="rgb(250,19,35)" fg:x="808" fg:w="9"/><text x="65.1496%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (9 samples, 0.72%)</title><rect x="64.8996%" y="245" width="0.7229%" height="15" fill="rgb(253,107,29)" fg:x="808" fg:w="9"/><text x="65.1496%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="65.5422%" y="229" width="0.0803%" height="15" fill="rgb(252,179,29)" fg:x="816" fg:w="1"/><text x="65.7922%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="65.6225%" y="293" width="0.0803%" height="15" fill="rgb(238,194,6)" fg:x="817" fg:w="1"/><text x="65.8725%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="65.6225%" y="277" width="0.0803%" height="15" fill="rgb(238,164,29)" fg:x="817" fg:w="1"/><text x="65.8725%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="65.6225%" y="261" width="0.0803%" height="15" fill="rgb(224,25,9)" fg:x="817" fg:w="1"/><text x="65.8725%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="65.6225%" y="245" width="0.0803%" height="15" fill="rgb(244,153,23)" fg:x="817" fg:w="1"/><text x="65.8725%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="65.6225%" y="229" width="0.0803%" height="15" fill="rgb(212,203,14)" fg:x="817" fg:w="1"/><text x="65.8725%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="65.7028%" y="293" width="0.0803%" height="15" fill="rgb(220,164,20)" fg:x="818" fg:w="1"/><text x="65.9528%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="65.7028%" y="277" width="0.0803%" height="15" fill="rgb(222,203,48)" fg:x="818" fg:w="1"/><text x="65.9528%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="65.7028%" y="261" width="0.0803%" height="15" fill="rgb(215,159,22)" fg:x="818" fg:w="1"/><text x="65.9528%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="65.7028%" y="245" width="0.0803%" height="15" fill="rgb(216,183,47)" fg:x="818" fg:w="1"/><text x="65.9528%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.7028%" y="229" width="0.0803%" height="15" fill="rgb(229,195,25)" fg:x="818" fg:w="1"/><text x="65.9528%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.8635%" y="245" width="0.0803%" height="15" fill="rgb(224,132,51)" fg:x="820" fg:w="1"/><text x="66.1135%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.8635%" y="229" width="0.0803%" height="15" fill="rgb(240,63,7)" fg:x="820" fg:w="1"/><text x="66.1135%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.8635%" y="213" width="0.0803%" height="15" fill="rgb(249,182,41)" fg:x="820" fg:w="1"/><text x="66.1135%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.1044%" y="229" width="0.0803%" height="15" fill="rgb(243,47,26)" fg:x="823" fg:w="1"/><text x="66.3544%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="66.1847%" y="229" width="0.0803%" height="15" fill="rgb(233,48,2)" fg:x="824" fg:w="1"/><text x="66.4347%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="66.1847%" y="213" width="0.0803%" height="15" fill="rgb(244,165,34)" fg:x="824" fg:w="1"/><text x="66.4347%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="66.2651%" y="229" width="0.0803%" height="15" fill="rgb(207,89,7)" fg:x="825" fg:w="1"/><text x="66.5151%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="66.2651%" y="213" width="0.0803%" height="15" fill="rgb(244,117,36)" fg:x="825" fg:w="1"/><text x="66.5151%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="66.3454%" y="197" width="0.1606%" height="15" fill="rgb(226,144,34)" fg:x="826" fg:w="2"/><text x="66.5954%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="66.3454%" y="181" width="0.1606%" height="15" fill="rgb(213,23,19)" fg:x="826" fg:w="2"/><text x="66.5954%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="66.3454%" y="165" width="0.1606%" height="15" fill="rgb(217,75,12)" fg:x="826" fg:w="2"/><text x="66.5954%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="66.3454%" y="149" width="0.1606%" height="15" fill="rgb(224,159,17)" fg:x="826" fg:w="2"/><text x="66.5954%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="66.3454%" y="213" width="0.3213%" height="15" fill="rgb(217,118,1)" fg:x="826" fg:w="4"/><text x="66.5954%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="66.5060%" y="197" width="0.1606%" height="15" fill="rgb(232,180,48)" fg:x="828" fg:w="2"/><text x="66.7560%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="66.5060%" y="181" width="0.1606%" height="15" fill="rgb(230,27,33)" fg:x="828" fg:w="2"/><text x="66.7560%" y="191.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="66.6667%" y="197" width="0.0803%" height="15" fill="rgb(205,31,21)" fg:x="830" fg:w="1"/><text x="66.9167%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (14 samples, 1.12%)</title><rect x="65.9438%" y="245" width="1.1245%" height="15" fill="rgb(253,59,4)" fg:x="821" fg:w="14"/><text x="66.1938%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9 samples, 0.72%)</title><rect x="66.3454%" y="229" width="0.7229%" height="15" fill="rgb(224,201,9)" fg:x="826" fg:w="9"/><text x="66.5954%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="66.6667%" y="213" width="0.4016%" height="15" fill="rgb(229,206,30)" fg:x="830" fg:w="5"/><text x="66.9167%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="66.7470%" y="197" width="0.3213%" height="15" fill="rgb(212,67,47)" fg:x="831" fg:w="4"/><text x="66.9970%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.9880%" y="181" width="0.0803%" height="15" fill="rgb(211,96,50)" fg:x="834" fg:w="1"/><text x="67.2380%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="67.0683%" y="213" width="0.2410%" height="15" fill="rgb(252,114,18)" fg:x="835" fg:w="3"/><text x="67.3183%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="67.1486%" y="197" width="0.1606%" height="15" fill="rgb(223,58,37)" fg:x="836" fg:w="2"/><text x="67.3986%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.2289%" y="181" width="0.0803%" height="15" fill="rgb(237,70,4)" fg:x="837" fg:w="1"/><text x="67.4789%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.2289%" y="165" width="0.0803%" height="15" fill="rgb(244,85,46)" fg:x="837" fg:w="1"/><text x="67.4789%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.2289%" y="149" width="0.0803%" height="15" fill="rgb(223,39,52)" fg:x="837" fg:w="1"/><text x="67.4789%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="67.0683%" y="245" width="0.3213%" height="15" fill="rgb(218,200,14)" fg:x="835" fg:w="4"/><text x="67.3183%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="67.0683%" y="229" width="0.3213%" height="15" fill="rgb(208,171,16)" fg:x="835" fg:w="4"/><text x="67.3183%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="67.3092%" y="213" width="0.0803%" height="15" fill="rgb(234,200,18)" fg:x="838" fg:w="1"/><text x="67.5592%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="67.3092%" y="197" width="0.0803%" height="15" fill="rgb(228,45,11)" fg:x="838" fg:w="1"/><text x="67.5592%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="67.3896%" y="213" width="0.0803%" height="15" fill="rgb(237,182,11)" fg:x="839" fg:w="1"/><text x="67.6396%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="67.3896%" y="197" width="0.0803%" height="15" fill="rgb(241,175,49)" fg:x="839" fg:w="1"/><text x="67.6396%" y="207.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (23 samples, 1.85%)</title><rect x="65.7831%" y="277" width="1.8474%" height="15" fill="rgb(247,38,35)" fg:x="819" fg:w="23"/><text x="66.0331%" y="287.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (22 samples, 1.77%)</title><rect x="65.8635%" y="261" width="1.7671%" height="15" fill="rgb(228,39,49)" fg:x="820" fg:w="22"/><text x="66.1135%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="67.3896%" y="245" width="0.2410%" height="15" fill="rgb(226,101,26)" fg:x="839" fg:w="3"/><text x="67.6396%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="67.3896%" y="229" width="0.2410%" height="15" fill="rgb(206,141,19)" fg:x="839" fg:w="3"/><text x="67.6396%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="67.4699%" y="213" width="0.1606%" height="15" fill="rgb(211,200,13)" fg:x="840" fg:w="2"/><text x="67.7199%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="67.4699%" y="197" width="0.1606%" height="15" fill="rgb(241,121,6)" fg:x="840" fg:w="2"/><text x="67.7199%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.5502%" y="181" width="0.0803%" height="15" fill="rgb(234,221,29)" fg:x="841" fg:w="1"/><text x="67.8002%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (24 samples, 1.93%)</title><rect x="65.7831%" y="293" width="1.9277%" height="15" fill="rgb(229,136,5)" fg:x="819" fg:w="24"/><text x="66.0331%" y="303.50">r..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="67.6305%" y="277" width="0.0803%" height="15" fill="rgb(238,36,11)" fg:x="842" fg:w="1"/><text x="67.8805%" y="287.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="67.6305%" y="261" width="0.0803%" height="15" fill="rgb(251,55,41)" fg:x="842" fg:w="1"/><text x="67.8805%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="67.7108%" y="229" width="0.4819%" height="15" fill="rgb(242,34,40)" fg:x="843" fg:w="6"/><text x="67.9608%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="68.1124%" y="213" width="0.0803%" height="15" fill="rgb(215,42,17)" fg:x="848" fg:w="1"/><text x="68.3624%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="67.7108%" y="245" width="0.5622%" height="15" fill="rgb(207,44,46)" fg:x="843" fg:w="7"/><text x="67.9608%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="68.1928%" y="229" width="0.0803%" height="15" fill="rgb(211,206,28)" fg:x="849" fg:w="1"/><text x="68.4428%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.1928%" y="213" width="0.0803%" height="15" fill="rgb(237,167,16)" fg:x="849" fg:w="1"/><text x="68.4428%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (391 samples, 31.41%)</title><rect x="36.9478%" y="405" width="31.4056%" height="15" fill="rgb(233,66,6)" fg:x="460" fg:w="391"/><text x="37.1978%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::looking..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (360 samples, 28.92%)</title><rect x="39.4378%" y="389" width="28.9157%" height="15" fill="rgb(246,123,29)" fg:x="491" fg:w="360"/><text x="39.6878%" y="399.50">plugins_core::looking::model::Unqualified::qual..</text></g><g><title>indefinite::indefinite (360 samples, 28.92%)</title><rect x="39.4378%" y="373" width="28.9157%" height="15" fill="rgb(209,62,40)" fg:x="491" fg:w="360"/><text x="39.6878%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (360 samples, 28.92%)</title><rect x="39.4378%" y="357" width="28.9157%" height="15" fill="rgb(218,4,25)" fg:x="491" fg:w="360"/><text x="39.6878%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (359 samples, 28.84%)</title><rect x="39.5181%" y="341" width="28.8353%" height="15" fill="rgb(253,91,49)" fg:x="492" fg:w="359"/><text x="39.7681%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (34 samples, 2.73%)</title><rect x="65.6225%" y="325" width="2.7309%" height="15" fill="rgb(228,155,29)" fg:x="817" fg:w="34"/><text x="65.8725%" y="335.50">in..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (34 samples, 2.73%)</title><rect x="65.6225%" y="309" width="2.7309%" height="15" fill="rgb(243,57,37)" fg:x="817" fg:w="34"/><text x="65.8725%" y="319.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="67.7108%" y="293" width="0.6426%" height="15" fill="rgb(244,167,17)" fg:x="843" fg:w="8"/><text x="67.9608%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.64%)</title><rect x="67.7108%" y="277" width="0.6426%" height="15" fill="rgb(207,181,38)" fg:x="843" fg:w="8"/><text x="67.9608%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.64%)</title><rect x="67.7108%" y="261" width="0.6426%" height="15" fill="rgb(211,8,23)" fg:x="843" fg:w="8"/><text x="67.9608%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="68.2731%" y="245" width="0.0803%" height="15" fill="rgb(235,11,44)" fg:x="850" fg:w="1"/><text x="68.5231%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="68.2731%" y="229" width="0.0803%" height="15" fill="rgb(248,18,52)" fg:x="850" fg:w="1"/><text x="68.5231%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.2731%" y="213" width="0.0803%" height="15" fill="rgb(208,4,7)" fg:x="850" fg:w="1"/><text x="68.5231%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.2731%" y="197" width="0.0803%" height="15" fill="rgb(240,17,39)" fg:x="850" fg:w="1"/><text x="68.5231%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="68.3534%" y="389" width="0.2410%" height="15" fill="rgb(207,170,3)" fg:x="851" fg:w="3"/><text x="68.6034%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="68.4337%" y="373" width="0.1606%" height="15" fill="rgb(236,100,52)" fg:x="852" fg:w="2"/><text x="68.6837%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.5141%" y="357" width="0.0803%" height="15" fill="rgb(246,78,51)" fg:x="853" fg:w="1"/><text x="68.7641%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.5141%" y="341" width="0.0803%" height="15" fill="rgb(211,17,15)" fg:x="853" fg:w="1"/><text x="68.7641%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.5141%" y="325" width="0.0803%" height="15" fill="rgb(209,59,46)" fg:x="853" fg:w="1"/><text x="68.7641%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.5141%" y="309" width="0.0803%" height="15" fill="rgb(210,92,25)" fg:x="853" fg:w="1"/><text x="68.7641%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="68.5944%" y="389" width="0.0803%" height="15" fill="rgb(238,174,52)" fg:x="854" fg:w="1"/><text x="68.8444%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.5944%" y="373" width="0.0803%" height="15" fill="rgb(230,73,7)" fg:x="854" fg:w="1"/><text x="68.8444%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.7550%" y="357" width="0.0803%" height="15" fill="rgb(243,124,40)" fg:x="856" fg:w="1"/><text x="69.0050%" y="367.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.8353%" y="309" width="0.0803%" height="15" fill="rgb(244,170,11)" fg:x="857" fg:w="1"/><text x="69.0853%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.8353%" y="293" width="0.0803%" height="15" fill="rgb(207,114,54)" fg:x="857" fg:w="1"/><text x="69.0853%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8353%" y="277" width="0.0803%" height="15" fill="rgb(205,42,20)" fg:x="857" fg:w="1"/><text x="69.0853%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.8353%" y="261" width="0.0803%" height="15" fill="rgb(230,30,28)" fg:x="857" fg:w="1"/><text x="69.0853%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8353%" y="245" width="0.0803%" height="15" fill="rgb(205,73,54)" fg:x="857" fg:w="1"/><text x="69.0853%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.8353%" y="229" width="0.0803%" height="15" fill="rgb(254,227,23)" fg:x="857" fg:w="1"/><text x="69.0853%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.8353%" y="213" width="0.0803%" height="15" fill="rgb(228,202,34)" fg:x="857" fg:w="1"/><text x="69.0853%" y="223.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (8 samples, 0.64%)</title><rect x="68.3534%" y="405" width="0.6426%" height="15" fill="rgb(222,225,37)" fg:x="851" fg:w="8"/><text x="68.6034%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="68.6747%" y="389" width="0.3213%" height="15" fill="rgb(221,14,54)" fg:x="855" fg:w="4"/><text x="68.9247%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="68.6747%" y="373" width="0.3213%" height="15" fill="rgb(254,102,2)" fg:x="855" fg:w="4"/><text x="68.9247%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="68.8353%" y="357" width="0.1606%" height="15" fill="rgb(232,104,17)" fg:x="857" fg:w="2"/><text x="69.0853%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="68.8353%" y="341" width="0.1606%" height="15" fill="rgb(250,220,14)" fg:x="857" fg:w="2"/><text x="69.0853%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="68.8353%" y="325" width="0.1606%" height="15" fill="rgb(241,158,9)" fg:x="857" fg:w="2"/><text x="69.0853%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.9157%" y="309" width="0.0803%" height="15" fill="rgb(246,9,43)" fg:x="858" fg:w="1"/><text x="69.1657%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.9157%" y="293" width="0.0803%" height="15" fill="rgb(206,73,33)" fg:x="858" fg:w="1"/><text x="69.1657%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.9157%" y="277" width="0.0803%" height="15" fill="rgb(222,79,8)" fg:x="858" fg:w="1"/><text x="69.1657%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="68.9960%" y="405" width="0.1606%" height="15" fill="rgb(234,8,54)" fg:x="859" fg:w="2"/><text x="69.2460%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;replies::ObservedEntity&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="69.0763%" y="389" width="0.0803%" height="15" fill="rgb(209,134,38)" fg:x="860" fg:w="1"/><text x="69.3263%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.0763%" y="373" width="0.0803%" height="15" fill="rgb(230,127,29)" fg:x="860" fg:w="1"/><text x="69.3263%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="69.2369%" y="373" width="0.0803%" height="15" fill="rgb(242,44,41)" fg:x="862" fg:w="1"/><text x="69.4869%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="69.2369%" y="357" width="0.0803%" height="15" fill="rgb(222,56,43)" fg:x="862" fg:w="1"/><text x="69.4869%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2369%" y="341" width="0.0803%" height="15" fill="rgb(238,39,47)" fg:x="862" fg:w="1"/><text x="69.4869%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2369%" y="325" width="0.0803%" height="15" fill="rgb(226,79,43)" fg:x="862" fg:w="1"/><text x="69.4869%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.2369%" y="309" width="0.0803%" height="15" fill="rgb(242,105,53)" fg:x="862" fg:w="1"/><text x="69.4869%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2369%" y="293" width="0.0803%" height="15" fill="rgb(251,132,46)" fg:x="862" fg:w="1"/><text x="69.4869%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.2369%" y="277" width="0.0803%" height="15" fill="rgb(231,77,14)" fg:x="862" fg:w="1"/><text x="69.4869%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="69.3173%" y="373" width="0.1606%" height="15" fill="rgb(240,135,9)" fg:x="863" fg:w="2"/><text x="69.5673%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.3173%" y="357" width="0.1606%" height="15" fill="rgb(248,109,14)" fg:x="863" fg:w="2"/><text x="69.5673%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3976%" y="341" width="0.0803%" height="15" fill="rgb(227,146,52)" fg:x="864" fg:w="1"/><text x="69.6476%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.3976%" y="325" width="0.0803%" height="15" fill="rgb(232,54,3)" fg:x="864" fg:w="1"/><text x="69.6476%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3976%" y="309" width="0.0803%" height="15" fill="rgb(229,201,43)" fg:x="864" fg:w="1"/><text x="69.6476%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.3976%" y="293" width="0.0803%" height="15" fill="rgb(252,161,33)" fg:x="864" fg:w="1"/><text x="69.6476%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3976%" y="277" width="0.0803%" height="15" fill="rgb(226,146,40)" fg:x="864" fg:w="1"/><text x="69.6476%" y="287.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (4 samples, 0.32%)</title><rect x="69.2369%" y="389" width="0.3213%" height="15" fill="rgb(219,47,25)" fg:x="862" fg:w="4"/><text x="69.4869%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="69.4779%" y="373" width="0.0803%" height="15" fill="rgb(250,135,13)" fg:x="865" fg:w="1"/><text x="69.7279%" y="383.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="69.4779%" y="357" width="0.0803%" height="15" fill="rgb(219,229,18)" fg:x="865" fg:w="1"/><text x="69.7279%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.4779%" y="341" width="0.0803%" height="15" fill="rgb(217,152,27)" fg:x="865" fg:w="1"/><text x="69.7279%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="69.4779%" y="325" width="0.0803%" height="15" fill="rgb(225,71,47)" fg:x="865" fg:w="1"/><text x="69.7279%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.5582%" y="325" width="0.1606%" height="15" fill="rgb(220,139,14)" fg:x="866" fg:w="2"/><text x="69.8082%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.5582%" y="309" width="0.1606%" height="15" fill="rgb(247,54,32)" fg:x="866" fg:w="2"/><text x="69.8082%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.5582%" y="293" width="0.1606%" height="15" fill="rgb(252,131,39)" fg:x="866" fg:w="2"/><text x="69.8082%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.5582%" y="277" width="0.1606%" height="15" fill="rgb(210,108,39)" fg:x="866" fg:w="2"/><text x="69.8082%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.6386%" y="261" width="0.0803%" height="15" fill="rgb(205,23,29)" fg:x="867" fg:w="1"/><text x="69.8886%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.6386%" y="245" width="0.0803%" height="15" fill="rgb(246,139,46)" fg:x="867" fg:w="1"/><text x="69.8886%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.6386%" y="229" width="0.0803%" height="15" fill="rgb(250,81,26)" fg:x="867" fg:w="1"/><text x="69.8886%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.6386%" y="213" width="0.0803%" height="15" fill="rgb(214,104,7)" fg:x="867" fg:w="1"/><text x="69.8886%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.6386%" y="197" width="0.0803%" height="15" fill="rgb(233,189,8)" fg:x="867" fg:w="1"/><text x="69.8886%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.6386%" y="181" width="0.0803%" height="15" fill="rgb(228,141,17)" fg:x="867" fg:w="1"/><text x="69.8886%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.6386%" y="165" width="0.0803%" height="15" fill="rgb(247,157,1)" fg:x="867" fg:w="1"/><text x="69.8886%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.6386%" y="149" width="0.0803%" height="15" fill="rgb(249,225,5)" fg:x="867" fg:w="1"/><text x="69.8886%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.6386%" y="133" width="0.0803%" height="15" fill="rgb(242,55,13)" fg:x="867" fg:w="1"/><text x="69.8886%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.6386%" y="117" width="0.0803%" height="15" fill="rgb(230,49,50)" fg:x="867" fg:w="1"/><text x="69.8886%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.6386%" y="101" width="0.0803%" height="15" fill="rgb(241,111,38)" fg:x="867" fg:w="1"/><text x="69.8886%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.6386%" y="85" width="0.0803%" height="15" fill="rgb(252,155,4)" fg:x="867" fg:w="1"/><text x="69.8886%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.6386%" y="69" width="0.0803%" height="15" fill="rgb(212,69,32)" fg:x="867" fg:w="1"/><text x="69.8886%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.64%)</title><rect x="69.1566%" y="405" width="0.6426%" height="15" fill="rgb(243,107,47)" fg:x="861" fg:w="8"/><text x="69.4066%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="69.5582%" y="389" width="0.2410%" height="15" fill="rgb(247,130,12)" fg:x="866" fg:w="3"/><text x="69.8082%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="69.5582%" y="373" width="0.2410%" height="15" fill="rgb(233,74,16)" fg:x="866" fg:w="3"/><text x="69.8082%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="69.5582%" y="357" width="0.2410%" height="15" fill="rgb(208,58,18)" fg:x="866" fg:w="3"/><text x="69.8082%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="69.5582%" y="341" width="0.2410%" height="15" fill="rgb(242,225,1)" fg:x="866" fg:w="3"/><text x="69.8082%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="69.7189%" y="325" width="0.0803%" height="15" fill="rgb(249,39,40)" fg:x="868" fg:w="1"/><text x="69.9689%" y="335.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="69.7189%" y="309" width="0.0803%" height="15" fill="rgb(207,72,44)" fg:x="868" fg:w="1"/><text x="69.9689%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.7189%" y="293" width="0.0803%" height="15" fill="rgb(215,193,12)" fg:x="868" fg:w="1"/><text x="69.9689%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.7189%" y="277" width="0.0803%" height="15" fill="rgb(248,41,39)" fg:x="868" fg:w="1"/><text x="69.9689%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.7189%" y="261" width="0.0803%" height="15" fill="rgb(253,85,4)" fg:x="868" fg:w="1"/><text x="69.9689%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.7189%" y="245" width="0.0803%" height="15" fill="rgb(243,70,31)" fg:x="868" fg:w="1"/><text x="69.9689%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.7189%" y="229" width="0.0803%" height="15" fill="rgb(253,195,26)" fg:x="868" fg:w="1"/><text x="69.9689%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.7189%" y="213" width="0.0803%" height="15" fill="rgb(243,42,11)" fg:x="868" fg:w="1"/><text x="69.9689%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.7189%" y="197" width="0.0803%" height="15" fill="rgb(239,66,17)" fg:x="868" fg:w="1"/><text x="69.9689%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.7189%" y="181" width="0.0803%" height="15" fill="rgb(217,132,21)" fg:x="868" fg:w="1"/><text x="69.9689%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.7189%" y="165" width="0.0803%" height="15" fill="rgb(252,202,21)" fg:x="868" fg:w="1"/><text x="69.9689%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.7189%" y="149" width="0.0803%" height="15" fill="rgb(233,98,36)" fg:x="868" fg:w="1"/><text x="69.9689%" y="159.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="69.7992%" y="405" width="0.0803%" height="15" fill="rgb(216,153,54)" fg:x="869" fg:w="1"/><text x="70.0492%" y="415.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (428 samples, 34.38%)</title><rect x="35.5823%" y="565" width="34.3775%" height="15" fill="rgb(250,99,7)" fg:x="443" fg:w="428"/><text x="35.8323%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (428 samples, 34.38%)</title><rect x="35.5823%" y="549" width="34.3775%" height="15" fill="rgb(207,56,50)" fg:x="443" fg:w="428"/><text x="35.8323%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::m..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (428 samples, 34.38%)</title><rect x="35.5823%" y="533" width="34.3775%" height="15" fill="rgb(244,61,34)" fg:x="443" fg:w="428"/><text x="35.8323%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (428 samples, 34.38%)</title><rect x="35.5823%" y="517" width="34.3775%" height="15" fill="rgb(241,50,38)" fg:x="443" fg:w="428"/><text x="35.8323%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (428 samples, 34.38%)</title><rect x="35.5823%" y="501" width="34.3775%" height="15" fill="rgb(212,166,30)" fg:x="443" fg:w="428"/><text x="35.8323%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (427 samples, 34.30%)</title><rect x="35.6627%" y="485" width="34.2972%" height="15" fill="rgb(249,127,32)" fg:x="444" fg:w="427"/><text x="35.9127%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (427 samples, 34.30%)</title><rect x="35.6627%" y="469" width="34.2972%" height="15" fill="rgb(209,103,0)" fg:x="444" fg:w="427"/><text x="35.9127%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;A..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (427 samples, 34.30%)</title><rect x="35.6627%" y="453" width="34.2972%" height="15" fill="rgb(238,209,51)" fg:x="444" fg:w="427"/><text x="35.9127%" y="463.50">&lt;engine::session::state::State as kernel::actions::Perfo..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (426 samples, 34.22%)</title><rect x="35.7430%" y="437" width="34.2169%" height="15" fill="rgb(237,56,23)" fg:x="445" fg:w="426"/><text x="35.9930%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kernel::..</text></g><g><title>plugins_core::looking::model::new_area_observation (413 samples, 33.17%)</title><rect x="36.7871%" y="421" width="33.1727%" height="15" fill="rgb(215,153,46)" fg:x="458" fg:w="413"/><text x="37.0371%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="69.8795%" y="405" width="0.0803%" height="15" fill="rgb(224,49,31)" fg:x="870" fg:w="1"/><text x="70.1295%" y="415.50"></text></g><g><title>plugins_rune::runner::SharedRunners::after (1 samples, 0.08%)</title><rect x="69.9598%" y="565" width="0.0803%" height="15" fill="rgb(250,18,42)" fg:x="871" fg:w="1"/><text x="70.2098%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="70.2008%" y="549" width="0.0803%" height="15" fill="rgb(215,176,39)" fg:x="874" fg:w="1"/><text x="70.4508%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2008%" y="533" width="0.0803%" height="15" fill="rgb(223,77,29)" fg:x="874" fg:w="1"/><text x="70.4508%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="70.2811%" y="517" width="0.1606%" height="15" fill="rgb(234,94,52)" fg:x="875" fg:w="2"/><text x="70.5311%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.2811%" y="501" width="0.1606%" height="15" fill="rgb(220,154,50)" fg:x="875" fg:w="2"/><text x="70.5311%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.3614%" y="485" width="0.0803%" height="15" fill="rgb(212,11,10)" fg:x="876" fg:w="1"/><text x="70.6114%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.3614%" y="469" width="0.0803%" height="15" fill="rgb(205,166,19)" fg:x="876" fg:w="1"/><text x="70.6114%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.3614%" y="453" width="0.0803%" height="15" fill="rgb(244,198,16)" fg:x="876" fg:w="1"/><text x="70.6114%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.3614%" y="437" width="0.0803%" height="15" fill="rgb(219,69,12)" fg:x="876" fg:w="1"/><text x="70.6114%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.3614%" y="421" width="0.0803%" height="15" fill="rgb(245,30,7)" fg:x="876" fg:w="1"/><text x="70.6114%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.3614%" y="405" width="0.0803%" height="15" fill="rgb(218,221,48)" fg:x="876" fg:w="1"/><text x="70.6114%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.3614%" y="389" width="0.0803%" height="15" fill="rgb(216,66,15)" fg:x="876" fg:w="1"/><text x="70.6114%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.3614%" y="373" width="0.0803%" height="15" fill="rgb(226,122,50)" fg:x="876" fg:w="1"/><text x="70.6114%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.3614%" y="357" width="0.0803%" height="15" fill="rgb(239,156,16)" fg:x="876" fg:w="1"/><text x="70.6114%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.3614%" y="341" width="0.0803%" height="15" fill="rgb(224,27,38)" fg:x="876" fg:w="1"/><text x="70.6114%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.3614%" y="325" width="0.0803%" height="15" fill="rgb(224,39,27)" fg:x="876" fg:w="1"/><text x="70.6114%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.3614%" y="309" width="0.0803%" height="15" fill="rgb(215,92,29)" fg:x="876" fg:w="1"/><text x="70.6114%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.3614%" y="293" width="0.0803%" height="15" fill="rgb(207,159,16)" fg:x="876" fg:w="1"/><text x="70.6114%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3614%" y="277" width="0.0803%" height="15" fill="rgb(238,163,47)" fg:x="876" fg:w="1"/><text x="70.6114%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.4418%" y="453" width="0.0803%" height="15" fill="rgb(219,91,49)" fg:x="877" fg:w="1"/><text x="70.6918%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.4418%" y="437" width="0.0803%" height="15" fill="rgb(227,167,31)" fg:x="877" fg:w="1"/><text x="70.6918%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.4418%" y="421" width="0.0803%" height="15" fill="rgb(234,80,54)" fg:x="877" fg:w="1"/><text x="70.6918%" y="431.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="70.5221%" y="453" width="0.0803%" height="15" fill="rgb(212,114,2)" fg:x="878" fg:w="1"/><text x="70.7721%" y="463.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="70.5221%" y="437" width="0.0803%" height="15" fill="rgb(234,50,24)" fg:x="878" fg:w="1"/><text x="70.7721%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="70.5221%" y="421" width="0.0803%" height="15" fill="rgb(221,68,8)" fg:x="878" fg:w="1"/><text x="70.7721%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.6024%" y="357" width="0.0803%" height="15" fill="rgb(254,180,31)" fg:x="879" fg:w="1"/><text x="70.8524%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.6024%" y="341" width="0.0803%" height="15" fill="rgb(247,130,50)" fg:x="879" fg:w="1"/><text x="70.8524%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="70.6024%" y="453" width="0.1606%" height="15" fill="rgb(211,109,4)" fg:x="879" fg:w="2"/><text x="70.8524%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.6024%" y="437" width="0.1606%" height="15" fill="rgb(238,50,21)" fg:x="879" fg:w="2"/><text x="70.8524%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.6024%" y="421" width="0.1606%" height="15" fill="rgb(225,57,45)" fg:x="879" fg:w="2"/><text x="70.8524%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="70.6024%" y="405" width="0.1606%" height="15" fill="rgb(209,196,50)" fg:x="879" fg:w="2"/><text x="70.8524%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.6024%" y="389" width="0.1606%" height="15" fill="rgb(242,140,13)" fg:x="879" fg:w="2"/><text x="70.8524%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.6024%" y="373" width="0.1606%" height="15" fill="rgb(217,111,7)" fg:x="879" fg:w="2"/><text x="70.8524%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.6827%" y="357" width="0.0803%" height="15" fill="rgb(253,193,51)" fg:x="880" fg:w="1"/><text x="70.9327%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.6827%" y="341" width="0.0803%" height="15" fill="rgb(252,70,29)" fg:x="880" fg:w="1"/><text x="70.9327%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.6827%" y="325" width="0.0803%" height="15" fill="rgb(232,127,12)" fg:x="880" fg:w="1"/><text x="70.9327%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.6827%" y="309" width="0.0803%" height="15" fill="rgb(211,180,21)" fg:x="880" fg:w="1"/><text x="70.9327%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.6827%" y="293" width="0.0803%" height="15" fill="rgb(229,72,13)" fg:x="880" fg:w="1"/><text x="70.9327%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.6827%" y="277" width="0.0803%" height="15" fill="rgb(240,211,49)" fg:x="880" fg:w="1"/><text x="70.9327%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.6827%" y="261" width="0.0803%" height="15" fill="rgb(219,149,40)" fg:x="880" fg:w="1"/><text x="70.9327%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.6827%" y="245" width="0.0803%" height="15" fill="rgb(210,127,46)" fg:x="880" fg:w="1"/><text x="70.9327%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.7631%" y="325" width="0.0803%" height="15" fill="rgb(220,106,7)" fg:x="881" fg:w="1"/><text x="71.0131%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.7631%" y="309" width="0.0803%" height="15" fill="rgb(249,31,22)" fg:x="881" fg:w="1"/><text x="71.0131%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.7631%" y="293" width="0.0803%" height="15" fill="rgb(253,1,49)" fg:x="881" fg:w="1"/><text x="71.0131%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.7631%" y="277" width="0.0803%" height="15" fill="rgb(227,144,33)" fg:x="881" fg:w="1"/><text x="71.0131%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.7631%" y="261" width="0.0803%" height="15" fill="rgb(249,163,44)" fg:x="881" fg:w="1"/><text x="71.0131%" y="271.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="70.7631%" y="245" width="0.0803%" height="15" fill="rgb(234,15,39)" fg:x="881" fg:w="1"/><text x="71.0131%" y="255.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="70.8434%" y="309" width="0.0803%" height="15" fill="rgb(207,66,16)" fg:x="882" fg:w="1"/><text x="71.0934%" y="319.50"></text></g><g><title>plugins_core::tools::contained_by (9 samples, 0.72%)</title><rect x="70.2811%" y="533" width="0.7229%" height="15" fill="rgb(233,112,24)" fg:x="875" fg:w="9"/><text x="70.5311%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (7 samples, 0.56%)</title><rect x="70.4418%" y="517" width="0.5622%" height="15" fill="rgb(230,90,22)" fg:x="877" fg:w="7"/><text x="70.6918%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (7 samples, 0.56%)</title><rect x="70.4418%" y="501" width="0.5622%" height="15" fill="rgb(229,61,13)" fg:x="877" fg:w="7"/><text x="70.6918%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.56%)</title><rect x="70.4418%" y="485" width="0.5622%" height="15" fill="rgb(225,57,24)" fg:x="877" fg:w="7"/><text x="70.6918%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="70.4418%" y="469" width="0.5622%" height="15" fill="rgb(208,169,48)" fg:x="877" fg:w="7"/><text x="70.6918%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="70.7631%" y="453" width="0.2410%" height="15" fill="rgb(244,218,51)" fg:x="881" fg:w="3"/><text x="71.0131%" y="463.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="70.7631%" y="437" width="0.2410%" height="15" fill="rgb(214,148,10)" fg:x="881" fg:w="3"/><text x="71.0131%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="70.7631%" y="421" width="0.2410%" height="15" fill="rgb(225,174,27)" fg:x="881" fg:w="3"/><text x="71.0131%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.7631%" y="405" width="0.2410%" height="15" fill="rgb(230,96,26)" fg:x="881" fg:w="3"/><text x="71.0131%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="70.7631%" y="389" width="0.2410%" height="15" fill="rgb(232,10,30)" fg:x="881" fg:w="3"/><text x="71.0131%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.7631%" y="373" width="0.2410%" height="15" fill="rgb(222,8,50)" fg:x="881" fg:w="3"/><text x="71.0131%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="70.7631%" y="357" width="0.2410%" height="15" fill="rgb(213,81,27)" fg:x="881" fg:w="3"/><text x="71.0131%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.7631%" y="341" width="0.2410%" height="15" fill="rgb(245,50,10)" fg:x="881" fg:w="3"/><text x="71.0131%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="70.8434%" y="325" width="0.1606%" height="15" fill="rgb(216,100,18)" fg:x="882" fg:w="2"/><text x="71.0934%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.9237%" y="309" width="0.0803%" height="15" fill="rgb(236,147,54)" fg:x="883" fg:w="1"/><text x="71.1737%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="71.0040%" y="501" width="0.0803%" height="15" fill="rgb(205,143,26)" fg:x="884" fg:w="1"/><text x="71.2540%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.0040%" y="485" width="0.0803%" height="15" fill="rgb(236,26,9)" fg:x="884" fg:w="1"/><text x="71.2540%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (468 samples, 37.59%)</title><rect x="33.6546%" y="661" width="37.5904%" height="15" fill="rgb(221,165,53)" fg:x="419" fg:w="468"/><text x="33.9046%" y="671.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::per..</text></g><g><title>kernel::plugins::mw::apply_middleware (468 samples, 37.59%)</title><rect x="33.6546%" y="645" width="37.5904%" height="15" fill="rgb(214,110,17)" fg:x="419" fg:w="468"/><text x="33.9046%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (467 samples, 37.51%)</title><rect x="33.7349%" y="629" width="37.5100%" height="15" fill="rgb(237,197,12)" fg:x="420" fg:w="467"/><text x="33.9849%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (466 samples, 37.43%)</title><rect x="33.8153%" y="613" width="37.4297%" height="15" fill="rgb(205,84,17)" fg:x="421" fg:w="466"/><text x="34.0653%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plu..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (444 samples, 35.66%)</title><rect x="35.5823%" y="597" width="35.6627%" height="15" fill="rgb(237,18,45)" fg:x="443" fg:w="444"/><text x="35.8323%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (444 samples, 35.66%)</title><rect x="35.5823%" y="581" width="35.6627%" height="15" fill="rgb(221,87,14)" fg:x="443" fg:w="444"/><text x="35.8323%" y="591.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Midd..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (15 samples, 1.20%)</title><rect x="70.0402%" y="565" width="1.2048%" height="15" fill="rgb(238,186,15)" fg:x="872" fg:w="15"/><text x="70.2902%" y="575.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (12 samples, 0.96%)</title><rect x="70.2811%" y="549" width="0.9639%" height="15" fill="rgb(208,115,11)" fg:x="875" fg:w="12"/><text x="70.5311%" y="559.50"></text></g><g><title>plugins_core::tools::occupied_by (3 samples, 0.24%)</title><rect x="71.0040%" y="533" width="0.2410%" height="15" fill="rgb(254,175,0)" fg:x="884" fg:w="3"/><text x="71.2540%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="71.0040%" y="517" width="0.2410%" height="15" fill="rgb(227,24,42)" fg:x="884" fg:w="3"/><text x="71.2540%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.0843%" y="501" width="0.1606%" height="15" fill="rgb(223,211,37)" fg:x="885" fg:w="2"/><text x="71.3343%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.0843%" y="485" width="0.1606%" height="15" fill="rgb(235,49,27)" fg:x="885" fg:w="2"/><text x="71.3343%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="71.0843%" y="469" width="0.1606%" height="15" fill="rgb(254,97,51)" fg:x="885" fg:w="2"/><text x="71.3343%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="71.0843%" y="453" width="0.1606%" height="15" fill="rgb(249,51,40)" fg:x="885" fg:w="2"/><text x="71.3343%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="71.0843%" y="437" width="0.1606%" height="15" fill="rgb(210,128,45)" fg:x="885" fg:w="2"/><text x="71.3343%" y="447.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.0843%" y="421" width="0.1606%" height="15" fill="rgb(224,137,50)" fg:x="885" fg:w="2"/><text x="71.3343%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1647%" y="405" width="0.0803%" height="15" fill="rgb(242,15,9)" fg:x="886" fg:w="1"/><text x="71.4147%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1647%" y="389" width="0.0803%" height="15" fill="rgb(233,187,41)" fg:x="886" fg:w="1"/><text x="71.4147%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.1647%" y="373" width="0.0803%" height="15" fill="rgb(227,2,29)" fg:x="886" fg:w="1"/><text x="71.4147%" y="383.50"></text></g><g><title>engine::session::Session::captured (478 samples, 38.39%)</title><rect x="32.9317%" y="709" width="38.3936%" height="15" fill="rgb(222,70,3)" fg:x="410" fg:w="478"/><text x="33.1817%" y="719.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (474 samples, 38.07%)</title><rect x="33.2530%" y="693" width="38.0723%" height="15" fill="rgb(213,11,42)" fg:x="414" fg:w="474"/><text x="33.5030%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (469 samples, 37.67%)</title><rect x="33.6546%" y="677" width="37.6707%" height="15" fill="rgb(225,150,9)" fg:x="419" fg:w="469"/><text x="33.9046%" y="687.50">tracing_core::dispatcher::with_default</text></g><g><title>core::ptr::drop_in_place&lt;tracing_core::dispatcher::DefaultGuard&gt; (1 samples, 0.08%)</title><rect x="71.2450%" y="661" width="0.0803%" height="15" fill="rgb(230,162,45)" fg:x="887" fg:w="1"/><text x="71.4950%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3253%" y="645" width="0.0803%" height="15" fill="rgb(222,14,52)" fg:x="888" fg:w="1"/><text x="71.5753%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.3253%" y="661" width="0.1606%" height="15" fill="rgb(254,198,14)" fg:x="888" fg:w="2"/><text x="71.5753%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4056%" y="645" width="0.0803%" height="15" fill="rgb(220,217,30)" fg:x="889" fg:w="1"/><text x="71.6556%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4056%" y="629" width="0.0803%" height="15" fill="rgb(215,146,41)" fg:x="889" fg:w="1"/><text x="71.6556%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.4056%" y="613" width="0.0803%" height="15" fill="rgb(217,27,36)" fg:x="889" fg:w="1"/><text x="71.6556%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.4056%" y="597" width="0.0803%" height="15" fill="rgb(219,218,39)" fg:x="889" fg:w="1"/><text x="71.6556%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.4056%" y="581" width="0.0803%" height="15" fill="rgb(219,4,42)" fg:x="889" fg:w="1"/><text x="71.6556%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="71.4056%" y="565" width="0.0803%" height="15" fill="rgb(249,119,36)" fg:x="889" fg:w="1"/><text x="71.6556%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.4056%" y="549" width="0.0803%" height="15" fill="rgb(209,23,33)" fg:x="889" fg:w="1"/><text x="71.6556%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.4859%" y="613" width="0.1606%" height="15" fill="rgb(211,10,0)" fg:x="890" fg:w="2"/><text x="71.7359%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.5663%" y="597" width="0.0803%" height="15" fill="rgb(208,99,37)" fg:x="891" fg:w="1"/><text x="71.8163%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.5663%" y="581" width="0.0803%" height="15" fill="rgb(213,132,31)" fg:x="891" fg:w="1"/><text x="71.8163%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.5663%" y="565" width="0.0803%" height="15" fill="rgb(243,129,40)" fg:x="891" fg:w="1"/><text x="71.8163%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.5663%" y="549" width="0.0803%" height="15" fill="rgb(210,66,33)" fg:x="891" fg:w="1"/><text x="71.8163%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.5663%" y="533" width="0.0803%" height="15" fill="rgb(209,189,4)" fg:x="891" fg:w="1"/><text x="71.8163%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.5663%" y="517" width="0.0803%" height="15" fill="rgb(214,107,37)" fg:x="891" fg:w="1"/><text x="71.8163%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.5663%" y="501" width="0.0803%" height="15" fill="rgb(245,88,54)" fg:x="891" fg:w="1"/><text x="71.8163%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.5663%" y="485" width="0.0803%" height="15" fill="rgb(205,146,20)" fg:x="891" fg:w="1"/><text x="71.8163%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.5663%" y="469" width="0.0803%" height="15" fill="rgb(220,161,25)" fg:x="891" fg:w="1"/><text x="71.8163%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.5663%" y="453" width="0.0803%" height="15" fill="rgb(215,152,15)" fg:x="891" fg:w="1"/><text x="71.8163%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.5663%" y="437" width="0.0803%" height="15" fill="rgb(233,192,44)" fg:x="891" fg:w="1"/><text x="71.8163%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.5663%" y="421" width="0.0803%" height="15" fill="rgb(240,170,46)" fg:x="891" fg:w="1"/><text x="71.8163%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.5663%" y="405" width="0.0803%" height="15" fill="rgb(207,104,33)" fg:x="891" fg:w="1"/><text x="71.8163%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.5663%" y="389" width="0.0803%" height="15" fill="rgb(219,21,39)" fg:x="891" fg:w="1"/><text x="71.8163%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.5663%" y="373" width="0.0803%" height="15" fill="rgb(214,133,29)" fg:x="891" fg:w="1"/><text x="71.8163%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="71.6466%" y="581" width="0.0803%" height="15" fill="rgb(226,93,6)" fg:x="892" fg:w="1"/><text x="71.8966%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="71.6466%" y="613" width="0.3213%" height="15" fill="rgb(252,222,34)" fg:x="892" fg:w="4"/><text x="71.8966%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="71.6466%" y="597" width="0.3213%" height="15" fill="rgb(252,92,48)" fg:x="892" fg:w="4"/><text x="71.8966%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="71.7269%" y="581" width="0.2410%" height="15" fill="rgb(245,223,24)" fg:x="893" fg:w="3"/><text x="71.9769%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="71.7269%" y="565" width="0.2410%" height="15" fill="rgb(205,176,3)" fg:x="893" fg:w="3"/><text x="71.9769%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="71.7269%" y="549" width="0.2410%" height="15" fill="rgb(235,151,15)" fg:x="893" fg:w="3"/><text x="71.9769%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="71.7269%" y="533" width="0.2410%" height="15" fill="rgb(237,209,11)" fg:x="893" fg:w="3"/><text x="71.9769%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.8072%" y="517" width="0.1606%" height="15" fill="rgb(243,227,24)" fg:x="894" fg:w="2"/><text x="72.0572%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.8072%" y="501" width="0.1606%" height="15" fill="rgb(239,193,16)" fg:x="894" fg:w="2"/><text x="72.0572%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (2 samples, 0.16%)</title><rect x="71.8072%" y="485" width="0.1606%" height="15" fill="rgb(231,27,9)" fg:x="894" fg:w="2"/><text x="72.0572%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (2 samples, 0.16%)</title><rect x="71.8072%" y="469" width="0.1606%" height="15" fill="rgb(219,169,10)" fg:x="894" fg:w="2"/><text x="72.0572%" y="479.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="71.8876%" y="453" width="0.0803%" height="15" fill="rgb(244,229,43)" fg:x="895" fg:w="1"/><text x="72.1376%" y="463.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="71.8876%" y="437" width="0.0803%" height="15" fill="rgb(254,38,20)" fg:x="895" fg:w="1"/><text x="72.1376%" y="447.50"></text></g><g><title>serde_json::error::make_error (1 samples, 0.08%)</title><rect x="71.8876%" y="421" width="0.0803%" height="15" fill="rgb(250,47,30)" fg:x="895" fg:w="1"/><text x="72.1376%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.9679%" y="581" width="0.0803%" height="15" fill="rgb(224,124,36)" fg:x="896" fg:w="1"/><text x="72.2179%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.9679%" y="565" width="0.0803%" height="15" fill="rgb(246,68,51)" fg:x="896" fg:w="1"/><text x="72.2179%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.9679%" y="549" width="0.0803%" height="15" fill="rgb(253,43,49)" fg:x="896" fg:w="1"/><text x="72.2179%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="71.9679%" y="533" width="0.0803%" height="15" fill="rgb(219,54,36)" fg:x="896" fg:w="1"/><text x="72.2179%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.9679%" y="517" width="0.0803%" height="15" fill="rgb(227,133,34)" fg:x="896" fg:w="1"/><text x="72.2179%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.9679%" y="501" width="0.0803%" height="15" fill="rgb(247,227,15)" fg:x="896" fg:w="1"/><text x="72.2179%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.9679%" y="485" width="0.0803%" height="15" fill="rgb(229,96,14)" fg:x="896" fg:w="1"/><text x="72.2179%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="71.4859%" y="661" width="0.6426%" height="15" fill="rgb(220,79,17)" fg:x="890" fg:w="8"/><text x="71.7359%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.64%)</title><rect x="71.4859%" y="645" width="0.6426%" height="15" fill="rgb(205,131,53)" fg:x="890" fg:w="8"/><text x="71.7359%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.64%)</title><rect x="71.4859%" y="629" width="0.6426%" height="15" fill="rgb(209,50,29)" fg:x="890" fg:w="8"/><text x="71.7359%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.9679%" y="613" width="0.1606%" height="15" fill="rgb(245,86,46)" fg:x="896" fg:w="2"/><text x="72.2179%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.9679%" y="597" width="0.1606%" height="15" fill="rgb(235,66,46)" fg:x="896" fg:w="2"/><text x="72.2179%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.0482%" y="581" width="0.0803%" height="15" fill="rgb(232,148,31)" fg:x="897" fg:w="1"/><text x="72.2982%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.0482%" y="565" width="0.0803%" height="15" fill="rgb(217,149,8)" fg:x="897" fg:w="1"/><text x="72.2982%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="72.2892%" y="597" width="0.1606%" height="15" fill="rgb(209,183,11)" fg:x="900" fg:w="2"/><text x="72.5392%" y="607.50"></text></g><g><title>engine::session::internal::Added::find_refs (15 samples, 1.20%)</title><rect x="71.3253%" y="693" width="1.2048%" height="15" fill="rgb(208,55,20)" fg:x="888" fg:w="15"/><text x="71.5753%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (15 samples, 1.20%)</title><rect x="71.3253%" y="677" width="1.2048%" height="15" fill="rgb(218,39,14)" fg:x="888" fg:w="15"/><text x="71.5753%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="72.1285%" y="661" width="0.4016%" height="15" fill="rgb(216,169,33)" fg:x="898" fg:w="5"/><text x="72.3785%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="72.1285%" y="645" width="0.4016%" height="15" fill="rgb(233,80,24)" fg:x="898" fg:w="5"/><text x="72.3785%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="72.2088%" y="629" width="0.3213%" height="15" fill="rgb(213,179,31)" fg:x="899" fg:w="4"/><text x="72.4588%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="72.2892%" y="613" width="0.2410%" height="15" fill="rgb(209,19,5)" fg:x="900" fg:w="3"/><text x="72.5392%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.4498%" y="597" width="0.0803%" height="15" fill="rgb(219,18,35)" fg:x="902" fg:w="1"/><text x="72.6998%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.4498%" y="581" width="0.0803%" height="15" fill="rgb(209,169,16)" fg:x="902" fg:w="1"/><text x="72.6998%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.4498%" y="565" width="0.0803%" height="15" fill="rgb(245,90,51)" fg:x="902" fg:w="1"/><text x="72.6998%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.4498%" y="549" width="0.0803%" height="15" fill="rgb(220,99,45)" fg:x="902" fg:w="1"/><text x="72.6998%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.4498%" y="533" width="0.0803%" height="15" fill="rgb(249,89,25)" fg:x="902" fg:w="1"/><text x="72.6998%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="72.5301%" y="677" width="0.2410%" height="15" fill="rgb(239,193,0)" fg:x="903" fg:w="3"/><text x="72.7801%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.6104%" y="661" width="0.1606%" height="15" fill="rgb(231,126,1)" fg:x="904" fg:w="2"/><text x="72.8604%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.6104%" y="645" width="0.1606%" height="15" fill="rgb(243,166,3)" fg:x="904" fg:w="2"/><text x="72.8604%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.6908%" y="629" width="0.0803%" height="15" fill="rgb(223,22,34)" fg:x="905" fg:w="1"/><text x="72.9408%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="72.7711%" y="677" width="0.0803%" height="15" fill="rgb(251,52,51)" fg:x="906" fg:w="1"/><text x="73.0211%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.7711%" y="661" width="0.0803%" height="15" fill="rgb(221,165,28)" fg:x="906" fg:w="1"/><text x="73.0211%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.7711%" y="645" width="0.0803%" height="15" fill="rgb(218,121,47)" fg:x="906" fg:w="1"/><text x="73.0211%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.7711%" y="629" width="0.0803%" height="15" fill="rgb(209,120,9)" fg:x="906" fg:w="1"/><text x="73.0211%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.7711%" y="613" width="0.0803%" height="15" fill="rgb(236,68,12)" fg:x="906" fg:w="1"/><text x="73.0211%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.7711%" y="597" width="0.0803%" height="15" fill="rgb(225,194,26)" fg:x="906" fg:w="1"/><text x="73.0211%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7711%" y="581" width="0.0803%" height="15" fill="rgb(231,84,39)" fg:x="906" fg:w="1"/><text x="73.0211%" y="591.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="72.8514%" y="677" width="0.0803%" height="15" fill="rgb(210,11,45)" fg:x="907" fg:w="1"/><text x="73.1014%" y="687.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="72.9317%" y="677" width="0.0803%" height="15" fill="rgb(224,54,52)" fg:x="908" fg:w="1"/><text x="73.1817%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (23 samples, 1.85%)</title><rect x="71.3253%" y="709" width="1.8474%" height="15" fill="rgb(238,102,14)" fg:x="888" fg:w="23"/><text x="71.5753%" y="719.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.64%)</title><rect x="72.5301%" y="693" width="0.6426%" height="15" fill="rgb(243,160,52)" fg:x="903" fg:w="8"/><text x="72.7801%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="73.0120%" y="677" width="0.1606%" height="15" fill="rgb(216,114,19)" fg:x="909" fg:w="2"/><text x="73.2620%" y="687.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="73.0120%" y="661" width="0.1606%" height="15" fill="rgb(244,166,37)" fg:x="909" fg:w="2"/><text x="73.2620%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.0120%" y="645" width="0.1606%" height="15" fill="rgb(246,29,44)" fg:x="909" fg:w="2"/><text x="73.2620%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.0120%" y="629" width="0.1606%" height="15" fill="rgb(215,56,53)" fg:x="909" fg:w="2"/><text x="73.2620%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.0120%" y="613" width="0.1606%" height="15" fill="rgb(217,60,2)" fg:x="909" fg:w="2"/><text x="73.2620%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.0120%" y="597" width="0.1606%" height="15" fill="rgb(207,26,24)" fg:x="909" fg:w="2"/><text x="73.2620%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.0924%" y="581" width="0.0803%" height="15" fill="rgb(252,210,15)" fg:x="910" fg:w="1"/><text x="73.3424%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.0924%" y="565" width="0.0803%" height="15" fill="rgb(253,209,26)" fg:x="910" fg:w="1"/><text x="73.3424%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.0924%" y="549" width="0.0803%" height="15" fill="rgb(238,170,14)" fg:x="910" fg:w="1"/><text x="73.3424%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.0924%" y="533" width="0.0803%" height="15" fill="rgb(216,178,15)" fg:x="910" fg:w="1"/><text x="73.3424%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.1727%" y="677" width="0.0803%" height="15" fill="rgb(250,197,2)" fg:x="911" fg:w="1"/><text x="73.4227%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.1727%" y="661" width="0.0803%" height="15" fill="rgb(212,70,42)" fg:x="911" fg:w="1"/><text x="73.4227%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.1727%" y="645" width="0.0803%" height="15" fill="rgb(227,213,9)" fg:x="911" fg:w="1"/><text x="73.4227%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.1727%" y="629" width="0.0803%" height="15" fill="rgb(245,99,25)" fg:x="911" fg:w="1"/><text x="73.4227%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.1727%" y="613" width="0.0803%" height="15" fill="rgb(250,82,29)" fg:x="911" fg:w="1"/><text x="73.4227%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.1727%" y="597" width="0.0803%" height="15" fill="rgb(241,226,54)" fg:x="911" fg:w="1"/><text x="73.4227%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.1727%" y="581" width="0.0803%" height="15" fill="rgb(221,99,41)" fg:x="911" fg:w="1"/><text x="73.4227%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.1727%" y="565" width="0.0803%" height="15" fill="rgb(213,90,21)" fg:x="911" fg:w="1"/><text x="73.4227%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.1727%" y="549" width="0.0803%" height="15" fill="rgb(205,208,24)" fg:x="911" fg:w="1"/><text x="73.4227%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.1727%" y="533" width="0.0803%" height="15" fill="rgb(246,31,12)" fg:x="911" fg:w="1"/><text x="73.4227%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.1727%" y="517" width="0.0803%" height="15" fill="rgb(213,154,6)" fg:x="911" fg:w="1"/><text x="73.4227%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.1727%" y="501" width="0.0803%" height="15" fill="rgb(222,163,29)" fg:x="911" fg:w="1"/><text x="73.4227%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.1727%" y="485" width="0.0803%" height="15" fill="rgb(227,201,8)" fg:x="911" fg:w="1"/><text x="73.4227%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.2530%" y="645" width="0.0803%" height="15" fill="rgb(233,9,32)" fg:x="912" fg:w="1"/><text x="73.5030%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.2530%" y="629" width="0.0803%" height="15" fill="rgb(217,54,24)" fg:x="912" fg:w="1"/><text x="73.5030%" y="639.50"></text></g><g><title>engine::users::model::username_to_key (3 samples, 0.24%)</title><rect x="73.1727%" y="709" width="0.2410%" height="15" fill="rgb(235,192,0)" fg:x="911" fg:w="3"/><text x="73.4227%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="73.1727%" y="693" width="0.2410%" height="15" fill="rgb(235,45,9)" fg:x="911" fg:w="3"/><text x="73.4227%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="73.2530%" y="677" width="0.1606%" height="15" fill="rgb(246,42,40)" fg:x="912" fg:w="2"/><text x="73.5030%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.2530%" y="661" width="0.1606%" height="15" fill="rgb(248,111,24)" fg:x="912" fg:w="2"/><text x="73.5030%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.3333%" y="645" width="0.0803%" height="15" fill="rgb(249,65,22)" fg:x="913" fg:w="1"/><text x="73.5833%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.3333%" y="629" width="0.0803%" height="15" fill="rgb(238,111,51)" fg:x="913" fg:w="1"/><text x="73.5833%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.3333%" y="613" width="0.0803%" height="15" fill="rgb(250,118,22)" fg:x="913" fg:w="1"/><text x="73.5833%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.4137%" y="661" width="0.0803%" height="15" fill="rgb(234,84,26)" fg:x="914" fg:w="1"/><text x="73.6637%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.4137%" y="645" width="0.0803%" height="15" fill="rgb(243,172,12)" fg:x="914" fg:w="1"/><text x="73.6637%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.4137%" y="629" width="0.0803%" height="15" fill="rgb(236,150,49)" fg:x="914" fg:w="1"/><text x="73.6637%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.4137%" y="613" width="0.0803%" height="15" fill="rgb(225,197,26)" fg:x="914" fg:w="1"/><text x="73.6637%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.4137%" y="597" width="0.0803%" height="15" fill="rgb(214,17,42)" fg:x="914" fg:w="1"/><text x="73.6637%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.4137%" y="581" width="0.0803%" height="15" fill="rgb(224,165,40)" fg:x="914" fg:w="1"/><text x="73.6637%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.4137%" y="565" width="0.0803%" height="15" fill="rgb(246,100,4)" fg:x="914" fg:w="1"/><text x="73.6637%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.4137%" y="549" width="0.0803%" height="15" fill="rgb(222,103,0)" fg:x="914" fg:w="1"/><text x="73.6637%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.4137%" y="533" width="0.0803%" height="15" fill="rgb(227,189,26)" fg:x="914" fg:w="1"/><text x="73.6637%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.4137%" y="517" width="0.0803%" height="15" fill="rgb(214,202,17)" fg:x="914" fg:w="1"/><text x="73.6637%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.4137%" y="501" width="0.0803%" height="15" fill="rgb(229,111,3)" fg:x="914" fg:w="1"/><text x="73.6637%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.4137%" y="485" width="0.0803%" height="15" fill="rgb(229,172,15)" fg:x="914" fg:w="1"/><text x="73.6637%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.4137%" y="469" width="0.0803%" height="15" fill="rgb(230,224,35)" fg:x="914" fg:w="1"/><text x="73.6637%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.4940%" y="661" width="0.0803%" height="15" fill="rgb(251,141,6)" fg:x="915" fg:w="1"/><text x="73.7440%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.4940%" y="645" width="0.0803%" height="15" fill="rgb(225,208,6)" fg:x="915" fg:w="1"/><text x="73.7440%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.4940%" y="629" width="0.0803%" height="15" fill="rgb(246,181,16)" fg:x="915" fg:w="1"/><text x="73.7440%" y="639.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="73.5743%" y="661" width="0.0803%" height="15" fill="rgb(227,129,36)" fg:x="916" fg:w="1"/><text x="73.8243%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.5743%" y="645" width="0.0803%" height="15" fill="rgb(248,117,24)" fg:x="916" fg:w="1"/><text x="73.8243%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.5743%" y="629" width="0.0803%" height="15" fill="rgb(214,185,35)" fg:x="916" fg:w="1"/><text x="73.8243%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.5743%" y="613" width="0.0803%" height="15" fill="rgb(236,150,34)" fg:x="916" fg:w="1"/><text x="73.8243%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.5743%" y="597" width="0.0803%" height="15" fill="rgb(243,228,27)" fg:x="916" fg:w="1"/><text x="73.8243%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.5743%" y="581" width="0.0803%" height="15" fill="rgb(245,77,44)" fg:x="916" fg:w="1"/><text x="73.8243%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.5743%" y="565" width="0.0803%" height="15" fill="rgb(235,214,42)" fg:x="916" fg:w="1"/><text x="73.8243%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.5743%" y="549" width="0.0803%" height="15" fill="rgb(221,74,3)" fg:x="916" fg:w="1"/><text x="73.8243%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.5743%" y="533" width="0.0803%" height="15" fill="rgb(206,121,29)" fg:x="916" fg:w="1"/><text x="73.8243%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.5743%" y="517" width="0.0803%" height="15" fill="rgb(249,131,53)" fg:x="916" fg:w="1"/><text x="73.8243%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.5743%" y="501" width="0.0803%" height="15" fill="rgb(236,170,29)" fg:x="916" fg:w="1"/><text x="73.8243%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.5743%" y="485" width="0.0803%" height="15" fill="rgb(247,96,15)" fg:x="916" fg:w="1"/><text x="73.8243%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.5743%" y="469" width="0.0803%" height="15" fill="rgb(211,210,7)" fg:x="916" fg:w="1"/><text x="73.8243%" y="479.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.8153%" y="613" width="0.0803%" height="15" fill="rgb(240,88,50)" fg:x="919" fg:w="1"/><text x="74.0653%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8153%" y="597" width="0.0803%" height="15" fill="rgb(209,229,26)" fg:x="919" fg:w="1"/><text x="74.0653%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.9759%" y="533" width="0.0803%" height="15" fill="rgb(210,68,23)" fg:x="921" fg:w="1"/><text x="74.2259%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.9759%" y="517" width="0.0803%" height="15" fill="rgb(229,180,13)" fg:x="921" fg:w="1"/><text x="74.2259%" y="527.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.9759%" y="501" width="0.0803%" height="15" fill="rgb(236,53,44)" fg:x="921" fg:w="1"/><text x="74.2259%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="73.9759%" y="485" width="0.0803%" height="15" fill="rgb(244,214,29)" fg:x="921" fg:w="1"/><text x="74.2259%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.9759%" y="469" width="0.0803%" height="15" fill="rgb(220,75,29)" fg:x="921" fg:w="1"/><text x="74.2259%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.9759%" y="565" width="0.1606%" height="15" fill="rgb(214,183,37)" fg:x="921" fg:w="2"/><text x="74.2259%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.9759%" y="549" width="0.1606%" height="15" fill="rgb(239,117,29)" fg:x="921" fg:w="2"/><text x="74.2259%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="74.0562%" y="533" width="0.0803%" height="15" fill="rgb(237,171,35)" fg:x="922" fg:w="1"/><text x="74.3062%" y="543.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.56%)</title><rect x="73.6546%" y="661" width="0.5622%" height="15" fill="rgb(229,178,53)" fg:x="917" fg:w="7"/><text x="73.9046%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.56%)</title><rect x="73.6546%" y="645" width="0.5622%" height="15" fill="rgb(210,102,19)" fg:x="917" fg:w="7"/><text x="73.9046%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="73.6546%" y="629" width="0.5622%" height="15" fill="rgb(235,127,22)" fg:x="917" fg:w="7"/><text x="73.9046%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="73.8956%" y="613" width="0.3213%" height="15" fill="rgb(244,31,31)" fg:x="920" fg:w="4"/><text x="74.1456%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="73.8956%" y="597" width="0.3213%" height="15" fill="rgb(231,43,21)" fg:x="920" fg:w="4"/><text x="74.1456%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="73.9759%" y="581" width="0.2410%" height="15" fill="rgb(217,131,35)" fg:x="921" fg:w="3"/><text x="74.2259%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="74.1365%" y="565" width="0.0803%" height="15" fill="rgb(221,149,4)" fg:x="923" fg:w="1"/><text x="74.3865%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.1365%" y="549" width="0.0803%" height="15" fill="rgb(232,170,28)" fg:x="923" fg:w="1"/><text x="74.3865%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="74.1365%" y="533" width="0.0803%" height="15" fill="rgb(238,56,10)" fg:x="923" fg:w="1"/><text x="74.3865%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.1365%" y="517" width="0.0803%" height="15" fill="rgb(235,196,14)" fg:x="923" fg:w="1"/><text x="74.3865%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="74.2169%" y="549" width="0.0803%" height="15" fill="rgb(216,45,48)" fg:x="924" fg:w="1"/><text x="74.4669%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="74.2169%" y="565" width="0.1606%" height="15" fill="rgb(238,213,17)" fg:x="924" fg:w="2"/><text x="74.4669%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.2972%" y="549" width="0.0803%" height="15" fill="rgb(212,13,2)" fg:x="925" fg:w="1"/><text x="74.5472%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.2972%" y="533" width="0.0803%" height="15" fill="rgb(240,114,20)" fg:x="925" fg:w="1"/><text x="74.5472%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.2972%" y="517" width="0.0803%" height="15" fill="rgb(228,41,40)" fg:x="925" fg:w="1"/><text x="74.5472%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.2972%" y="501" width="0.0803%" height="15" fill="rgb(244,132,35)" fg:x="925" fg:w="1"/><text x="74.5472%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="74.2169%" y="597" width="0.2410%" height="15" fill="rgb(253,189,4)" fg:x="924" fg:w="3"/><text x="74.4669%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="74.2169%" y="581" width="0.2410%" height="15" fill="rgb(224,37,19)" fg:x="924" fg:w="3"/><text x="74.4669%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.3775%" y="565" width="0.0803%" height="15" fill="rgb(235,223,18)" fg:x="926" fg:w="1"/><text x="74.6275%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="74.3775%" y="549" width="0.0803%" height="15" fill="rgb(235,163,25)" fg:x="926" fg:w="1"/><text x="74.6275%" y="559.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (520 samples, 41.77%)</title><rect x="32.7711%" y="741" width="41.7671%" height="15" fill="rgb(217,145,28)" fg:x="408" fg:w="520"/><text x="33.0211%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (519 samples, 41.69%)</title><rect x="32.8514%" y="725" width="41.6867%" height="15" fill="rgb(223,223,32)" fg:x="409" fg:w="519"/><text x="33.1014%" y="735.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (14 samples, 1.12%)</title><rect x="73.4137%" y="709" width="1.1245%" height="15" fill="rgb(227,189,39)" fg:x="914" fg:w="14"/><text x="73.6637%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (14 samples, 1.12%)</title><rect x="73.4137%" y="693" width="1.1245%" height="15" fill="rgb(248,10,22)" fg:x="914" fg:w="14"/><text x="73.6637%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (14 samples, 1.12%)</title><rect x="73.4137%" y="677" width="1.1245%" height="15" fill="rgb(248,46,39)" fg:x="914" fg:w="14"/><text x="73.6637%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="74.2169%" y="661" width="0.3213%" height="15" fill="rgb(248,113,48)" fg:x="924" fg:w="4"/><text x="74.4669%" y="671.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="74.2169%" y="645" width="0.3213%" height="15" fill="rgb(245,16,25)" fg:x="924" fg:w="4"/><text x="74.4669%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="74.2169%" y="629" width="0.3213%" height="15" fill="rgb(249,152,16)" fg:x="924" fg:w="4"/><text x="74.4669%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="74.2169%" y="613" width="0.3213%" height="15" fill="rgb(250,16,1)" fg:x="924" fg:w="4"/><text x="74.4669%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4578%" y="597" width="0.0803%" height="15" fill="rgb(249,138,3)" fg:x="927" fg:w="1"/><text x="74.7078%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (929 samples, 74.62%)</title><rect x="0.0000%" y="789" width="74.6185%" height="15" fill="rgb(227,71,41)" fg:x="0" fg:w="929"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (929 samples, 74.62%)</title><rect x="0.0000%" y="773" width="74.6185%" height="15" fill="rgb(209,184,23)" fg:x="0" fg:w="929"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (929 samples, 74.62%)</title><rect x="0.0000%" y="757" width="74.6185%" height="15" fill="rgb(223,215,31)" fg:x="0" fg:w="929"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="74.5382%" y="741" width="0.0803%" height="15" fill="rgb(210,146,28)" fg:x="928" fg:w="1"/><text x="74.7882%" y="751.50"></text></g><g><title>engine::domain::Domain::new (1 samples, 0.08%)</title><rect x="74.5382%" y="725" width="0.0803%" height="15" fill="rgb(209,183,41)" fg:x="928" fg:w="1"/><text x="74.7882%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="74.6185%" y="725" width="0.1606%" height="15" fill="rgb(209,224,45)" fg:x="929" fg:w="2"/><text x="74.8685%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.6185%" y="709" width="0.1606%" height="15" fill="rgb(224,209,51)" fg:x="929" fg:w="2"/><text x="74.8685%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="74.6988%" y="693" width="0.0803%" height="15" fill="rgb(223,17,39)" fg:x="930" fg:w="1"/><text x="74.9488%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.08%)</title><rect x="74.6988%" y="677" width="0.0803%" height="15" fill="rgb(234,204,37)" fg:x="930" fg:w="1"/><text x="74.9488%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.6988%" y="661" width="0.0803%" height="15" fill="rgb(236,120,5)" fg:x="930" fg:w="1"/><text x="74.9488%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="74.6185%" y="741" width="0.2410%" height="15" fill="rgb(248,97,27)" fg:x="929" fg:w="3"/><text x="74.8685%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (1 samples, 0.08%)</title><rect x="74.7791%" y="725" width="0.0803%" height="15" fill="rgb(240,66,17)" fg:x="931" fg:w="1"/><text x="75.0291%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.7791%" y="709" width="0.0803%" height="15" fill="rgb(210,79,3)" fg:x="931" fg:w="1"/><text x="75.0291%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="74.7791%" y="693" width="0.0803%" height="15" fill="rgb(214,176,27)" fg:x="931" fg:w="1"/><text x="75.0291%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.7791%" y="677" width="0.0803%" height="15" fill="rgb(235,185,3)" fg:x="931" fg:w="1"/><text x="75.0291%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.7791%" y="661" width="0.0803%" height="15" fill="rgb(227,24,12)" fg:x="931" fg:w="1"/><text x="75.0291%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="74.7791%" y="645" width="0.0803%" height="15" fill="rgb(252,169,48)" fg:x="931" fg:w="1"/><text x="75.0291%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.7791%" y="629" width="0.0803%" height="15" fill="rgb(212,65,1)" fg:x="931" fg:w="1"/><text x="75.0291%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.7791%" y="613" width="0.0803%" height="15" fill="rgb(242,39,24)" fg:x="931" fg:w="1"/><text x="75.0291%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.7791%" y="597" width="0.0803%" height="15" fill="rgb(249,32,23)" fg:x="931" fg:w="1"/><text x="75.0291%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.7791%" y="581" width="0.0803%" height="15" fill="rgb(251,195,23)" fg:x="931" fg:w="1"/><text x="75.0291%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.7791%" y="565" width="0.0803%" height="15" fill="rgb(236,174,8)" fg:x="931" fg:w="1"/><text x="75.0291%" y="575.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="74.9398%" y="645" width="0.1606%" height="15" fill="rgb(220,197,8)" fg:x="933" fg:w="2"/><text x="75.1898%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="74.9398%" y="629" width="0.1606%" height="15" fill="rgb(240,108,37)" fg:x="933" fg:w="2"/><text x="75.1898%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="75.0201%" y="613" width="0.0803%" height="15" fill="rgb(232,176,24)" fg:x="934" fg:w="1"/><text x="75.2701%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.0201%" y="597" width="0.0803%" height="15" fill="rgb(243,35,29)" fg:x="934" fg:w="1"/><text x="75.2701%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="75.1004%" y="613" width="0.0803%" height="15" fill="rgb(210,37,18)" fg:x="935" fg:w="1"/><text x="75.3504%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="75.1004%" y="597" width="0.0803%" height="15" fill="rgb(224,184,40)" fg:x="935" fg:w="1"/><text x="75.3504%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.1004%" y="581" width="0.0803%" height="15" fill="rgb(236,39,29)" fg:x="935" fg:w="1"/><text x="75.3504%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (5 samples, 0.40%)</title><rect x="74.8594%" y="661" width="0.4016%" height="15" fill="rgb(232,48,39)" fg:x="932" fg:w="5"/><text x="75.1094%" y="671.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="75.1004%" y="645" width="0.1606%" height="15" fill="rgb(236,34,42)" fg:x="935" fg:w="2"/><text x="75.3504%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="75.1004%" y="629" width="0.1606%" height="15" fill="rgb(243,106,37)" fg:x="935" fg:w="2"/><text x="75.3504%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="75.1807%" y="613" width="0.0803%" height="15" fill="rgb(218,96,6)" fg:x="936" fg:w="1"/><text x="75.4307%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.1807%" y="597" width="0.0803%" height="15" fill="rgb(235,130,12)" fg:x="936" fg:w="1"/><text x="75.4307%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.1807%" y="581" width="0.0803%" height="15" fill="rgb(231,95,0)" fg:x="936" fg:w="1"/><text x="75.4307%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.1807%" y="565" width="0.0803%" height="15" fill="rgb(228,12,23)" fg:x="936" fg:w="1"/><text x="75.4307%" y="575.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="75.3414%" y="645" width="0.0803%" height="15" fill="rgb(216,12,1)" fg:x="938" fg:w="1"/><text x="75.5914%" y="655.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="75.3414%" y="629" width="0.0803%" height="15" fill="rgb(219,59,3)" fg:x="938" fg:w="1"/><text x="75.5914%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="75.2610%" y="661" width="0.3213%" height="15" fill="rgb(215,208,46)" fg:x="937" fg:w="4"/><text x="75.5110%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="75.4217%" y="645" width="0.1606%" height="15" fill="rgb(254,224,29)" fg:x="939" fg:w="2"/><text x="75.6717%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="75.4217%" y="629" width="0.1606%" height="15" fill="rgb(232,14,29)" fg:x="939" fg:w="2"/><text x="75.6717%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="75.4217%" y="613" width="0.1606%" height="15" fill="rgb(208,45,52)" fg:x="939" fg:w="2"/><text x="75.6717%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="75.4217%" y="597" width="0.1606%" height="15" fill="rgb(234,191,28)" fg:x="939" fg:w="2"/><text x="75.6717%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="75.4217%" y="581" width="0.1606%" height="15" fill="rgb(244,67,43)" fg:x="939" fg:w="2"/><text x="75.6717%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="75.4217%" y="565" width="0.1606%" height="15" fill="rgb(236,189,24)" fg:x="939" fg:w="2"/><text x="75.6717%" y="575.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="75.4217%" y="549" width="0.1606%" height="15" fill="rgb(239,214,33)" fg:x="939" fg:w="2"/><text x="75.6717%" y="559.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="75.5823%" y="629" width="0.0803%" height="15" fill="rgb(226,176,41)" fg:x="941" fg:w="1"/><text x="75.8323%" y="639.50"></text></g><g><title>glob::fill_todo (1 samples, 0.08%)</title><rect x="75.5823%" y="613" width="0.0803%" height="15" fill="rgb(248,47,8)" fg:x="941" fg:w="1"/><text x="75.8323%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="75.5823%" y="597" width="0.0803%" height="15" fill="rgb(218,81,44)" fg:x="941" fg:w="1"/><text x="75.8323%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="75.5823%" y="581" width="0.0803%" height="15" fill="rgb(213,98,6)" fg:x="941" fg:w="1"/><text x="75.8323%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="75.5823%" y="565" width="0.0803%" height="15" fill="rgb(222,85,22)" fg:x="941" fg:w="1"/><text x="75.8323%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="75.5823%" y="549" width="0.0803%" height="15" fill="rgb(239,46,39)" fg:x="941" fg:w="1"/><text x="75.8323%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="75.5823%" y="533" width="0.0803%" height="15" fill="rgb(237,12,29)" fg:x="941" fg:w="1"/><text x="75.8323%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="75.5823%" y="517" width="0.0803%" height="15" fill="rgb(214,77,8)" fg:x="941" fg:w="1"/><text x="75.8323%" y="527.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="75.5823%" y="501" width="0.0803%" height="15" fill="rgb(217,168,37)" fg:x="941" fg:w="1"/><text x="75.8323%" y="511.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="75.5823%" y="661" width="0.2410%" height="15" fill="rgb(221,217,23)" fg:x="941" fg:w="3"/><text x="75.8323%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (3 samples, 0.24%)</title><rect x="75.5823%" y="645" width="0.2410%" height="15" fill="rgb(243,229,36)" fg:x="941" fg:w="3"/><text x="75.8323%" y="655.50"></text></g><g><title>glob::glob (2 samples, 0.16%)</title><rect x="75.6627%" y="629" width="0.1606%" height="15" fill="rgb(251,163,40)" fg:x="942" fg:w="2"/><text x="75.9127%" y="639.50"></text></g><g><title>glob::glob_with (2 samples, 0.16%)</title><rect x="75.6627%" y="613" width="0.1606%" height="15" fill="rgb(237,222,12)" fg:x="942" fg:w="2"/><text x="75.9127%" y="623.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="75.6627%" y="597" width="0.1606%" height="15" fill="rgb(248,132,6)" fg:x="942" fg:w="2"/><text x="75.9127%" y="607.50"></text></g><g><title>&lt;std::sys::unix::os_str::Slice as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="75.7430%" y="581" width="0.0803%" height="15" fill="rgb(227,167,50)" fg:x="943" fg:w="1"/><text x="75.9930%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="75.8233%" y="661" width="0.0803%" height="15" fill="rgb(242,84,37)" fg:x="944" fg:w="1"/><text x="76.0733%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.8233%" y="645" width="0.0803%" height="15" fill="rgb(212,4,50)" fg:x="944" fg:w="1"/><text x="76.0733%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (14 samples, 1.12%)</title><rect x="74.8594%" y="677" width="1.1245%" height="15" fill="rgb(230,228,32)" fg:x="932" fg:w="14"/><text x="75.1094%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="75.9036%" y="661" width="0.0803%" height="15" fill="rgb(248,217,23)" fg:x="945" fg:w="1"/><text x="76.1536%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="75.9036%" y="645" width="0.0803%" height="15" fill="rgb(238,197,32)" fg:x="945" fg:w="1"/><text x="76.1536%" y="655.50"></text></g><g><title>engine::session::Session::initialize (15 samples, 1.20%)</title><rect x="74.8594%" y="693" width="1.2048%" height="15" fill="rgb(236,106,1)" fg:x="932" fg:w="15"/><text x="75.1094%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="75.9839%" y="677" width="0.0803%" height="15" fill="rgb(219,228,13)" fg:x="946" fg:w="1"/><text x="76.2339%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.9839%" y="661" width="0.0803%" height="15" fill="rgb(238,30,35)" fg:x="946" fg:w="1"/><text x="76.2339%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.9839%" y="645" width="0.0803%" height="15" fill="rgb(236,70,23)" fg:x="946" fg:w="1"/><text x="76.2339%" y="655.50"></text></g><g><title>clock_getres (1 samples, 0.08%)</title><rect x="76.0643%" y="677" width="0.0803%" height="15" fill="rgb(249,104,48)" fg:x="947" fg:w="1"/><text x="76.3143%" y="687.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (17 samples, 1.37%)</title><rect x="74.8594%" y="741" width="1.3655%" height="15" fill="rgb(254,117,50)" fg:x="932" fg:w="17"/><text x="75.1094%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (17 samples, 1.37%)</title><rect x="74.8594%" y="725" width="1.3655%" height="15" fill="rgb(223,152,4)" fg:x="932" fg:w="17"/><text x="75.1094%" y="735.50"></text></g><g><title>engine::session::Session::new (17 samples, 1.37%)</title><rect x="74.8594%" y="709" width="1.3655%" height="15" fill="rgb(245,6,2)" fg:x="932" fg:w="17"/><text x="75.1094%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="76.0643%" y="693" width="0.1606%" height="15" fill="rgb(249,150,24)" fg:x="947" fg:w="2"/><text x="76.3143%" y="703.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="76.1446%" y="677" width="0.0803%" height="15" fill="rgb(228,185,42)" fg:x="948" fg:w="1"/><text x="76.3946%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.2249%" y="725" width="0.0803%" height="15" fill="rgb(226,39,33)" fg:x="949" fg:w="1"/><text x="76.4749%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="76.2249%" y="709" width="0.0803%" height="15" fill="rgb(221,166,19)" fg:x="949" fg:w="1"/><text x="76.4749%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.2249%" y="693" width="0.0803%" height="15" fill="rgb(209,109,2)" fg:x="949" fg:w="1"/><text x="76.4749%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.2249%" y="677" width="0.0803%" height="15" fill="rgb(252,216,26)" fg:x="949" fg:w="1"/><text x="76.4749%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.3052%" y="645" width="0.0803%" height="15" fill="rgb(227,173,36)" fg:x="950" fg:w="1"/><text x="76.5552%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.3052%" y="629" width="0.0803%" height="15" fill="rgb(209,90,7)" fg:x="950" fg:w="1"/><text x="76.5552%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.3052%" y="613" width="0.0803%" height="15" fill="rgb(250,194,11)" fg:x="950" fg:w="1"/><text x="76.5552%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="76.3855%" y="613" width="0.1606%" height="15" fill="rgb(220,72,50)" fg:x="951" fg:w="2"/><text x="76.6355%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.4659%" y="597" width="0.0803%" height="15" fill="rgb(222,106,48)" fg:x="952" fg:w="1"/><text x="76.7159%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.4659%" y="581" width="0.0803%" height="15" fill="rgb(216,220,45)" fg:x="952" fg:w="1"/><text x="76.7159%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.4659%" y="565" width="0.0803%" height="15" fill="rgb(234,112,18)" fg:x="952" fg:w="1"/><text x="76.7159%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="76.4659%" y="549" width="0.0803%" height="15" fill="rgb(206,179,9)" fg:x="952" fg:w="1"/><text x="76.7159%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.5462%" y="597" width="0.0803%" height="15" fill="rgb(215,115,40)" fg:x="953" fg:w="1"/><text x="76.7962%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.5462%" y="581" width="0.0803%" height="15" fill="rgb(222,69,34)" fg:x="953" fg:w="1"/><text x="76.7962%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.5462%" y="565" width="0.0803%" height="15" fill="rgb(209,161,10)" fg:x="953" fg:w="1"/><text x="76.7962%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.5462%" y="549" width="0.0803%" height="15" fill="rgb(217,6,38)" fg:x="953" fg:w="1"/><text x="76.7962%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.6265%" y="581" width="0.0803%" height="15" fill="rgb(229,229,48)" fg:x="954" fg:w="1"/><text x="76.8765%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6265%" y="565" width="0.0803%" height="15" fill="rgb(225,21,28)" fg:x="954" fg:w="1"/><text x="76.8765%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6265%" y="549" width="0.0803%" height="15" fill="rgb(206,33,13)" fg:x="954" fg:w="1"/><text x="76.8765%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.6265%" y="533" width="0.0803%" height="15" fill="rgb(242,178,17)" fg:x="954" fg:w="1"/><text x="76.8765%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="76.7068%" y="581" width="0.2410%" height="15" fill="rgb(220,162,5)" fg:x="955" fg:w="3"/><text x="76.9568%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="76.7871%" y="565" width="0.1606%" height="15" fill="rgb(210,33,43)" fg:x="956" fg:w="2"/><text x="77.0371%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="77.0281%" y="549" width="0.1606%" height="15" fill="rgb(216,116,54)" fg:x="959" fg:w="2"/><text x="77.2781%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.1084%" y="533" width="0.0803%" height="15" fill="rgb(249,92,24)" fg:x="960" fg:w="1"/><text x="77.3584%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.1084%" y="517" width="0.0803%" height="15" fill="rgb(231,189,14)" fg:x="960" fg:w="1"/><text x="77.3584%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.1084%" y="501" width="0.0803%" height="15" fill="rgb(230,8,41)" fg:x="960" fg:w="1"/><text x="77.3584%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.1084%" y="485" width="0.0803%" height="15" fill="rgb(249,7,27)" fg:x="960" fg:w="1"/><text x="77.3584%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.1084%" y="469" width="0.0803%" height="15" fill="rgb(232,86,5)" fg:x="960" fg:w="1"/><text x="77.3584%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.1084%" y="453" width="0.0803%" height="15" fill="rgb(224,175,18)" fg:x="960" fg:w="1"/><text x="77.3584%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="76.9478%" y="581" width="0.3213%" height="15" fill="rgb(220,129,12)" fg:x="958" fg:w="4"/><text x="77.1978%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="77.0281%" y="565" width="0.2410%" height="15" fill="rgb(210,19,36)" fg:x="959" fg:w="3"/><text x="77.2781%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1888%" y="549" width="0.0803%" height="15" fill="rgb(219,96,14)" fg:x="961" fg:w="1"/><text x="77.4388%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.96%)</title><rect x="76.3855%" y="629" width="0.9639%" height="15" fill="rgb(249,106,1)" fg:x="951" fg:w="12"/><text x="76.6355%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="76.5462%" y="613" width="0.8032%" height="15" fill="rgb(249,155,20)" fg:x="953" fg:w="10"/><text x="76.7962%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="76.6265%" y="597" width="0.7229%" height="15" fill="rgb(244,168,9)" fg:x="954" fg:w="9"/><text x="76.8765%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.2691%" y="581" width="0.0803%" height="15" fill="rgb(216,23,50)" fg:x="962" fg:w="1"/><text x="77.5191%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.4297%" y="565" width="0.0803%" height="15" fill="rgb(224,219,20)" fg:x="964" fg:w="1"/><text x="77.6797%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.4297%" y="549" width="0.0803%" height="15" fill="rgb(222,156,15)" fg:x="964" fg:w="1"/><text x="77.6797%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="77.3494%" y="629" width="0.2410%" height="15" fill="rgb(231,97,17)" fg:x="963" fg:w="3"/><text x="77.5994%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="77.3494%" y="613" width="0.2410%" height="15" fill="rgb(218,70,48)" fg:x="963" fg:w="3"/><text x="77.5994%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="77.3494%" y="597" width="0.2410%" height="15" fill="rgb(212,196,52)" fg:x="963" fg:w="3"/><text x="77.5994%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.4297%" y="581" width="0.1606%" height="15" fill="rgb(243,203,18)" fg:x="964" fg:w="2"/><text x="77.6797%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.5100%" y="565" width="0.0803%" height="15" fill="rgb(252,125,41)" fg:x="965" fg:w="1"/><text x="77.7600%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.5100%" y="549" width="0.0803%" height="15" fill="rgb(223,180,33)" fg:x="965" fg:w="1"/><text x="77.7600%" y="559.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="77.5904%" y="565" width="0.0803%" height="15" fill="rgb(254,159,46)" fg:x="966" fg:w="1"/><text x="77.8404%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="77.5904%" y="613" width="0.1606%" height="15" fill="rgb(254,38,10)" fg:x="966" fg:w="2"/><text x="77.8404%" y="623.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (2 samples, 0.16%)</title><rect x="77.5904%" y="597" width="0.1606%" height="15" fill="rgb(208,217,32)" fg:x="966" fg:w="2"/><text x="77.8404%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="77.5904%" y="581" width="0.1606%" height="15" fill="rgb(221,120,13)" fg:x="966" fg:w="2"/><text x="77.8404%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.6707%" y="565" width="0.0803%" height="15" fill="rgb(246,54,52)" fg:x="967" fg:w="1"/><text x="77.9207%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="77.7510%" y="581" width="0.0803%" height="15" fill="rgb(242,34,25)" fg:x="968" fg:w="1"/><text x="78.0010%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.7510%" y="565" width="0.0803%" height="15" fill="rgb(247,209,9)" fg:x="968" fg:w="1"/><text x="78.0010%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.7510%" y="549" width="0.0803%" height="15" fill="rgb(228,71,26)" fg:x="968" fg:w="1"/><text x="78.0010%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.9116%" y="533" width="0.0803%" height="15" fill="rgb(222,145,49)" fg:x="970" fg:w="1"/><text x="78.1616%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.9920%" y="501" width="0.0803%" height="15" fill="rgb(218,121,17)" fg:x="971" fg:w="1"/><text x="78.2420%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.9920%" y="485" width="0.0803%" height="15" fill="rgb(244,50,7)" fg:x="971" fg:w="1"/><text x="78.2420%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="77.9920%" y="517" width="0.1606%" height="15" fill="rgb(246,229,37)" fg:x="971" fg:w="2"/><text x="78.2420%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.0723%" y="501" width="0.0803%" height="15" fill="rgb(225,18,5)" fg:x="972" fg:w="1"/><text x="78.3223%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.0723%" y="485" width="0.0803%" height="15" fill="rgb(213,204,8)" fg:x="972" fg:w="1"/><text x="78.3223%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.0723%" y="469" width="0.0803%" height="15" fill="rgb(238,103,6)" fg:x="972" fg:w="1"/><text x="78.3223%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.0723%" y="453" width="0.0803%" height="15" fill="rgb(222,25,35)" fg:x="972" fg:w="1"/><text x="78.3223%" y="463.50"></text></g><g><title>engine::session::Session::flush (24 samples, 1.93%)</title><rect x="76.3052%" y="725" width="1.9277%" height="15" fill="rgb(213,203,35)" fg:x="950" fg:w="24"/><text x="76.5552%" y="735.50">e..</text></g><g><title>engine::session::state::State::close (24 samples, 1.93%)</title><rect x="76.3052%" y="709" width="1.9277%" height="15" fill="rgb(221,79,53)" fg:x="950" fg:w="24"/><text x="76.5552%" y="719.50">e..</text></g><g><title>engine::session::state::State::flush_entities (24 samples, 1.93%)</title><rect x="76.3052%" y="693" width="1.9277%" height="15" fill="rgb(243,200,35)" fg:x="950" fg:w="24"/><text x="76.5552%" y="703.50">e..</text></g><g><title>core::iter::adapters::try_process (24 samples, 1.93%)</title><rect x="76.3052%" y="677" width="1.9277%" height="15" fill="rgb(248,60,25)" fg:x="950" fg:w="24"/><text x="76.5552%" y="687.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (24 samples, 1.93%)</title><rect x="76.3052%" y="661" width="1.9277%" height="15" fill="rgb(227,53,46)" fg:x="950" fg:w="24"/><text x="76.5552%" y="671.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (23 samples, 1.85%)</title><rect x="76.3855%" y="645" width="1.8474%" height="15" fill="rgb(216,120,32)" fg:x="951" fg:w="23"/><text x="76.6355%" y="655.50">e..</text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.64%)</title><rect x="77.5904%" y="629" width="0.6426%" height="15" fill="rgb(220,134,1)" fg:x="966" fg:w="8"/><text x="77.8404%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="77.7510%" y="613" width="0.4819%" height="15" fill="rgb(237,168,5)" fg:x="968" fg:w="6"/><text x="78.0010%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="77.7510%" y="597" width="0.4819%" height="15" fill="rgb(231,100,33)" fg:x="968" fg:w="6"/><text x="78.0010%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="77.8313%" y="581" width="0.4016%" height="15" fill="rgb(236,177,47)" fg:x="969" fg:w="5"/><text x="78.0813%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="77.8313%" y="565" width="0.4016%" height="15" fill="rgb(235,7,49)" fg:x="969" fg:w="5"/><text x="78.0813%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="77.8313%" y="549" width="0.4016%" height="15" fill="rgb(232,119,22)" fg:x="969" fg:w="5"/><text x="78.0813%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="77.9920%" y="533" width="0.2410%" height="15" fill="rgb(254,73,53)" fg:x="971" fg:w="3"/><text x="78.2420%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_map (1 samples, 0.08%)</title><rect x="78.1526%" y="517" width="0.0803%" height="15" fill="rgb(251,35,20)" fg:x="973" fg:w="1"/><text x="78.4026%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="78.2329%" y="693" width="0.0803%" height="15" fill="rgb(241,119,20)" fg:x="974" fg:w="1"/><text x="78.4829%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.2329%" y="677" width="0.0803%" height="15" fill="rgb(207,102,14)" fg:x="974" fg:w="1"/><text x="78.4829%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.2329%" y="661" width="0.0803%" height="15" fill="rgb(248,201,50)" fg:x="974" fg:w="1"/><text x="78.4829%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.2329%" y="645" width="0.0803%" height="15" fill="rgb(222,185,44)" fg:x="974" fg:w="1"/><text x="78.4829%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.2329%" y="629" width="0.0803%" height="15" fill="rgb(218,107,18)" fg:x="974" fg:w="1"/><text x="78.4829%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.2329%" y="613" width="0.0803%" height="15" fill="rgb(237,177,39)" fg:x="974" fg:w="1"/><text x="78.4829%" y="623.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="78.3133%" y="677" width="0.0803%" height="15" fill="rgb(246,69,6)" fg:x="975" fg:w="1"/><text x="78.5633%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3133%" y="661" width="0.0803%" height="15" fill="rgb(234,208,37)" fg:x="975" fg:w="1"/><text x="78.5633%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="78.3133%" y="645" width="0.0803%" height="15" fill="rgb(225,4,6)" fg:x="975" fg:w="1"/><text x="78.5633%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="78.3133%" y="629" width="0.0803%" height="15" fill="rgb(233,45,0)" fg:x="975" fg:w="1"/><text x="78.5633%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3936%" y="645" width="0.0803%" height="15" fill="rgb(226,136,5)" fg:x="976" fg:w="1"/><text x="78.6436%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3936%" y="629" width="0.0803%" height="15" fill="rgb(211,91,47)" fg:x="976" fg:w="1"/><text x="78.6436%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="78.4739%" y="629" width="0.1606%" height="15" fill="rgb(242,88,51)" fg:x="977" fg:w="2"/><text x="78.7239%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="78.4739%" y="613" width="0.1606%" height="15" fill="rgb(230,91,28)" fg:x="977" fg:w="2"/><text x="78.7239%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="78.4739%" y="597" width="0.1606%" height="15" fill="rgb(254,186,29)" fg:x="977" fg:w="2"/><text x="78.7239%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="78.4739%" y="581" width="0.1606%" height="15" fill="rgb(238,6,4)" fg:x="977" fg:w="2"/><text x="78.7239%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="78.4739%" y="565" width="0.1606%" height="15" fill="rgb(221,151,16)" fg:x="977" fg:w="2"/><text x="78.7239%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.5542%" y="549" width="0.0803%" height="15" fill="rgb(251,143,52)" fg:x="978" fg:w="1"/><text x="78.8042%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.5542%" y="533" width="0.0803%" height="15" fill="rgb(206,90,15)" fg:x="978" fg:w="1"/><text x="78.8042%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="78.3133%" y="693" width="0.4016%" height="15" fill="rgb(218,35,8)" fg:x="975" fg:w="5"/><text x="78.5633%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="78.3936%" y="677" width="0.3213%" height="15" fill="rgb(239,215,6)" fg:x="976" fg:w="4"/><text x="78.6436%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="78.3936%" y="661" width="0.3213%" height="15" fill="rgb(245,116,39)" fg:x="976" fg:w="4"/><text x="78.6436%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="78.4739%" y="645" width="0.2410%" height="15" fill="rgb(242,65,28)" fg:x="977" fg:w="3"/><text x="78.7239%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.6345%" y="629" width="0.0803%" height="15" fill="rgb(252,132,53)" fg:x="979" fg:w="1"/><text x="78.8845%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.56%)</title><rect x="78.2329%" y="725" width="0.5622%" height="15" fill="rgb(224,159,50)" fg:x="974" fg:w="7"/><text x="78.4829%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="78.2329%" y="709" width="0.5622%" height="15" fill="rgb(224,93,4)" fg:x="974" fg:w="7"/><text x="78.4829%" y="719.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="78.7149%" y="693" width="0.0803%" height="15" fill="rgb(208,81,34)" fg:x="980" fg:w="1"/><text x="78.9649%" y="703.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="78.7149%" y="677" width="0.0803%" height="15" fill="rgb(233,92,54)" fg:x="980" fg:w="1"/><text x="78.9649%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.7149%" y="661" width="0.0803%" height="15" fill="rgb(237,21,14)" fg:x="980" fg:w="1"/><text x="78.9649%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="78.7952%" y="677" width="0.0803%" height="15" fill="rgb(249,128,51)" fg:x="981" fg:w="1"/><text x="79.0452%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.7952%" y="661" width="0.0803%" height="15" fill="rgb(223,129,24)" fg:x="981" fg:w="1"/><text x="79.0452%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (2 samples, 0.16%)</title><rect x="78.7952%" y="725" width="0.1606%" height="15" fill="rgb(231,168,25)" fg:x="981" fg:w="2"/><text x="79.0452%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (2 samples, 0.16%)</title><rect x="78.7952%" y="709" width="0.1606%" height="15" fill="rgb(224,39,20)" fg:x="981" fg:w="2"/><text x="79.0452%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="78.7952%" y="693" width="0.1606%" height="15" fill="rgb(225,152,53)" fg:x="981" fg:w="2"/><text x="79.0452%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="78.8755%" y="677" width="0.0803%" height="15" fill="rgb(252,17,24)" fg:x="982" fg:w="1"/><text x="79.1255%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.8755%" y="661" width="0.0803%" height="15" fill="rgb(250,114,30)" fg:x="982" fg:w="1"/><text x="79.1255%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="78.8755%" y="645" width="0.0803%" height="15" fill="rgb(229,5,4)" fg:x="982" fg:w="1"/><text x="79.1255%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.8755%" y="629" width="0.0803%" height="15" fill="rgb(225,176,49)" fg:x="982" fg:w="1"/><text x="79.1255%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="78.8755%" y="613" width="0.0803%" height="15" fill="rgb(224,221,49)" fg:x="982" fg:w="1"/><text x="79.1255%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.8755%" y="597" width="0.0803%" height="15" fill="rgb(253,169,27)" fg:x="982" fg:w="1"/><text x="79.1255%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.8755%" y="581" width="0.0803%" height="15" fill="rgb(211,206,16)" fg:x="982" fg:w="1"/><text x="79.1255%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.8755%" y="565" width="0.0803%" height="15" fill="rgb(244,87,35)" fg:x="982" fg:w="1"/><text x="79.1255%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="78.9558%" y="725" width="0.0803%" height="15" fill="rgb(246,28,10)" fg:x="983" fg:w="1"/><text x="79.2058%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="78.9558%" y="709" width="0.0803%" height="15" fill="rgb(229,12,44)" fg:x="983" fg:w="1"/><text x="79.2058%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="78.9558%" y="693" width="0.0803%" height="15" fill="rgb(210,145,37)" fg:x="983" fg:w="1"/><text x="79.2058%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="78.9558%" y="677" width="0.0803%" height="15" fill="rgb(227,112,52)" fg:x="983" fg:w="1"/><text x="79.2058%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.9558%" y="661" width="0.0803%" height="15" fill="rgb(238,155,34)" fg:x="983" fg:w="1"/><text x="79.2058%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="78.9558%" y="645" width="0.0803%" height="15" fill="rgb(239,226,36)" fg:x="983" fg:w="1"/><text x="79.2058%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="78.9558%" y="629" width="0.0803%" height="15" fill="rgb(230,16,23)" fg:x="983" fg:w="1"/><text x="79.2058%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.9558%" y="613" width="0.0803%" height="15" fill="rgb(236,171,36)" fg:x="983" fg:w="1"/><text x="79.2058%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.9558%" y="597" width="0.0803%" height="15" fill="rgb(221,22,14)" fg:x="983" fg:w="1"/><text x="79.2058%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.0361%" y="709" width="0.0803%" height="15" fill="rgb(242,43,11)" fg:x="984" fg:w="1"/><text x="79.2861%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.0361%" y="693" width="0.0803%" height="15" fill="rgb(232,69,23)" fg:x="984" fg:w="1"/><text x="79.2861%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="79.0361%" y="677" width="0.0803%" height="15" fill="rgb(216,180,54)" fg:x="984" fg:w="1"/><text x="79.2861%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.0361%" y="661" width="0.0803%" height="15" fill="rgb(216,5,24)" fg:x="984" fg:w="1"/><text x="79.2861%" y="671.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="79.1968%" y="629" width="0.0803%" height="15" fill="rgb(225,89,9)" fg:x="986" fg:w="1"/><text x="79.4468%" y="639.50"></text></g><g><title>engine::session::should_force_rollback (3 samples, 0.24%)</title><rect x="79.1165%" y="677" width="0.2410%" height="15" fill="rgb(243,75,33)" fg:x="985" fg:w="3"/><text x="79.3665%" y="687.50"></text></g><g><title>std::env::_var (2 samples, 0.16%)</title><rect x="79.1968%" y="661" width="0.1606%" height="15" fill="rgb(247,141,45)" fg:x="986" fg:w="2"/><text x="79.4468%" y="671.50"></text></g><g><title>std::env::var_os (2 samples, 0.16%)</title><rect x="79.1968%" y="645" width="0.1606%" height="15" fill="rgb(232,177,36)" fg:x="986" fg:w="2"/><text x="79.4468%" y="655.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="79.2771%" y="629" width="0.0803%" height="15" fill="rgb(219,125,36)" fg:x="987" fg:w="1"/><text x="79.5271%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="79.2771%" y="613" width="0.0803%" height="15" fill="rgb(227,94,9)" fg:x="987" fg:w="1"/><text x="79.5271%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="79.2771%" y="597" width="0.0803%" height="15" fill="rgb(240,34,52)" fg:x="987" fg:w="1"/><text x="79.5271%" y="607.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="79.2771%" y="581" width="0.0803%" height="15" fill="rgb(216,45,12)" fg:x="987" fg:w="1"/><text x="79.5271%" y="591.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="79.2771%" y="565" width="0.0803%" height="15" fill="rgb(246,21,19)" fg:x="987" fg:w="1"/><text x="79.5271%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.3574%" y="645" width="0.0803%" height="15" fill="rgb(213,98,42)" fg:x="988" fg:w="1"/><text x="79.6074%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="79.3574%" y="629" width="0.0803%" height="15" fill="rgb(250,136,47)" fg:x="988" fg:w="1"/><text x="79.6074%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="79.3574%" y="613" width="0.0803%" height="15" fill="rgb(251,124,27)" fg:x="988" fg:w="1"/><text x="79.6074%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="79.3574%" y="597" width="0.0803%" height="15" fill="rgb(229,180,14)" fg:x="988" fg:w="1"/><text x="79.6074%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.3574%" y="581" width="0.0803%" height="15" fill="rgb(245,216,25)" fg:x="988" fg:w="1"/><text x="79.6074%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.4378%" y="613" width="0.0803%" height="15" fill="rgb(251,43,5)" fg:x="989" fg:w="1"/><text x="79.6878%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="79.5181%" y="581" width="0.0803%" height="15" fill="rgb(250,128,24)" fg:x="990" fg:w="1"/><text x="79.7681%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.5181%" y="565" width="0.0803%" height="15" fill="rgb(217,117,27)" fg:x="990" fg:w="1"/><text x="79.7681%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.5181%" y="549" width="0.0803%" height="15" fill="rgb(245,147,4)" fg:x="990" fg:w="1"/><text x="79.7681%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.5181%" y="533" width="0.0803%" height="15" fill="rgb(242,201,35)" fg:x="990" fg:w="1"/><text x="79.7681%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.5181%" y="517" width="0.0803%" height="15" fill="rgb(218,181,1)" fg:x="990" fg:w="1"/><text x="79.7681%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="79.5984%" y="565" width="0.1606%" height="15" fill="rgb(222,6,29)" fg:x="991" fg:w="2"/><text x="79.8484%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.6787%" y="549" width="0.0803%" height="15" fill="rgb(208,186,3)" fg:x="992" fg:w="1"/><text x="79.9287%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="79.7590%" y="533" width="0.2410%" height="15" fill="rgb(216,36,26)" fg:x="993" fg:w="3"/><text x="80.0090%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="79.7590%" y="517" width="0.2410%" height="15" fill="rgb(248,201,23)" fg:x="993" fg:w="3"/><text x="80.0090%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.9197%" y="501" width="0.0803%" height="15" fill="rgb(251,170,31)" fg:x="995" fg:w="1"/><text x="80.1697%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.9197%" y="485" width="0.0803%" height="15" fill="rgb(207,110,25)" fg:x="995" fg:w="1"/><text x="80.1697%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.9197%" y="469" width="0.0803%" height="15" fill="rgb(250,54,15)" fg:x="995" fg:w="1"/><text x="80.1697%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="79.5181%" y="597" width="0.5622%" height="15" fill="rgb(227,68,33)" fg:x="990" fg:w="7"/><text x="79.7681%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="79.5984%" y="581" width="0.4819%" height="15" fill="rgb(238,34,41)" fg:x="991" fg:w="6"/><text x="79.8484%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="79.7590%" y="565" width="0.3213%" height="15" fill="rgb(220,11,15)" fg:x="993" fg:w="4"/><text x="80.0090%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="79.7590%" y="549" width="0.3213%" height="15" fill="rgb(246,111,35)" fg:x="993" fg:w="4"/><text x="80.0090%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.0000%" y="533" width="0.0803%" height="15" fill="rgb(209,88,53)" fg:x="996" fg:w="1"/><text x="80.2500%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.0803%" y="597" width="0.0803%" height="15" fill="rgb(231,185,47)" fg:x="997" fg:w="1"/><text x="80.3303%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="80.0803%" y="581" width="0.0803%" height="15" fill="rgb(233,154,1)" fg:x="997" fg:w="1"/><text x="80.3303%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.0803%" y="565" width="0.0803%" height="15" fill="rgb(225,15,46)" fg:x="997" fg:w="1"/><text x="80.3303%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.0803%" y="549" width="0.0803%" height="15" fill="rgb(211,135,41)" fg:x="997" fg:w="1"/><text x="80.3303%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.0803%" y="533" width="0.0803%" height="15" fill="rgb(208,54,0)" fg:x="997" fg:w="1"/><text x="80.3303%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="80.1606%" y="581" width="0.0803%" height="15" fill="rgb(244,136,14)" fg:x="998" fg:w="1"/><text x="80.4106%" y="591.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="80.1606%" y="565" width="0.0803%" height="15" fill="rgb(241,56,14)" fg:x="998" fg:w="1"/><text x="80.4106%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="80.1606%" y="549" width="0.0803%" height="15" fill="rgb(205,80,24)" fg:x="998" fg:w="1"/><text x="80.4106%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="80.1606%" y="533" width="0.0803%" height="15" fill="rgb(220,57,4)" fg:x="998" fg:w="1"/><text x="80.4106%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.3213%" y="549" width="0.0803%" height="15" fill="rgb(226,193,50)" fg:x="1000" fg:w="1"/><text x="80.5713%" y="559.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="80.4016%" y="549" width="0.0803%" height="15" fill="rgb(231,168,22)" fg:x="1001" fg:w="1"/><text x="80.6516%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="80.4819%" y="549" width="0.0803%" height="15" fill="rgb(254,215,14)" fg:x="1002" fg:w="1"/><text x="80.7319%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.4819%" y="533" width="0.0803%" height="15" fill="rgb(211,115,16)" fg:x="1002" fg:w="1"/><text x="80.7319%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.4819%" y="517" width="0.0803%" height="15" fill="rgb(236,210,16)" fg:x="1002" fg:w="1"/><text x="80.7319%" y="527.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.53%)</title><rect x="79.1165%" y="709" width="1.5261%" height="15" fill="rgb(221,94,12)" fg:x="985" fg:w="19"/><text x="79.3665%" y="719.50"></text></g><g><title>engine::session::Session::save_changes (19 samples, 1.53%)</title><rect x="79.1165%" y="693" width="1.5261%" height="15" fill="rgb(235,218,49)" fg:x="985" fg:w="19"/><text x="79.3665%" y="703.50"></text></g><g><title>engine::session::state::State::close (16 samples, 1.29%)</title><rect x="79.3574%" y="677" width="1.2851%" height="15" fill="rgb(217,114,14)" fg:x="988" fg:w="16"/><text x="79.6074%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (16 samples, 1.29%)</title><rect x="79.3574%" y="661" width="1.2851%" height="15" fill="rgb(216,145,22)" fg:x="988" fg:w="16"/><text x="79.6074%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (15 samples, 1.20%)</title><rect x="79.4378%" y="645" width="1.2048%" height="15" fill="rgb(217,112,39)" fg:x="989" fg:w="15"/><text x="79.6878%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 1.20%)</title><rect x="79.4378%" y="629" width="1.2048%" height="15" fill="rgb(225,85,32)" fg:x="989" fg:w="15"/><text x="79.6878%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (14 samples, 1.12%)</title><rect x="79.5181%" y="613" width="1.1245%" height="15" fill="rgb(245,209,47)" fg:x="990" fg:w="14"/><text x="79.7681%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.48%)</title><rect x="80.1606%" y="597" width="0.4819%" height="15" fill="rgb(218,220,15)" fg:x="998" fg:w="6"/><text x="80.4106%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="80.2410%" y="581" width="0.4016%" height="15" fill="rgb(222,202,31)" fg:x="999" fg:w="5"/><text x="80.4910%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="80.2410%" y="565" width="0.4016%" height="15" fill="rgb(243,203,4)" fg:x="999" fg:w="5"/><text x="80.4910%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="80.5622%" y="549" width="0.0803%" height="15" fill="rgb(237,92,17)" fg:x="1003" fg:w="1"/><text x="80.8122%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="80.5622%" y="533" width="0.0803%" height="15" fill="rgb(231,119,7)" fg:x="1003" fg:w="1"/><text x="80.8122%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.5622%" y="517" width="0.0803%" height="15" fill="rgb(237,82,41)" fg:x="1003" fg:w="1"/><text x="80.8122%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.5622%" y="501" width="0.0803%" height="15" fill="rgb(226,81,48)" fg:x="1003" fg:w="1"/><text x="80.8122%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="80.5622%" y="485" width="0.0803%" height="15" fill="rgb(234,70,51)" fg:x="1003" fg:w="1"/><text x="80.8122%" y="495.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="80.6426%" y="709" width="0.0803%" height="15" fill="rgb(251,86,4)" fg:x="1004" fg:w="1"/><text x="80.8926%" y="719.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="80.6426%" y="693" width="0.0803%" height="15" fill="rgb(244,144,28)" fg:x="1004" fg:w="1"/><text x="80.8926%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.6426%" y="677" width="0.0803%" height="15" fill="rgb(232,161,39)" fg:x="1004" fg:w="1"/><text x="80.8926%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="80.7229%" y="677" width="0.0803%" height="15" fill="rgb(247,34,51)" fg:x="1005" fg:w="1"/><text x="80.9729%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.7229%" y="661" width="0.0803%" height="15" fill="rgb(225,132,2)" fg:x="1005" fg:w="1"/><text x="80.9729%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.7229%" y="645" width="0.0803%" height="15" fill="rgb(209,159,44)" fg:x="1005" fg:w="1"/><text x="80.9729%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.7229%" y="629" width="0.0803%" height="15" fill="rgb(251,214,1)" fg:x="1005" fg:w="1"/><text x="80.9729%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.7229%" y="613" width="0.0803%" height="15" fill="rgb(247,84,47)" fg:x="1005" fg:w="1"/><text x="80.9729%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.7229%" y="597" width="0.0803%" height="15" fill="rgb(240,111,43)" fg:x="1005" fg:w="1"/><text x="80.9729%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="80.8032%" y="661" width="0.0803%" height="15" fill="rgb(215,214,35)" fg:x="1006" fg:w="1"/><text x="81.0532%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="80.8032%" y="645" width="0.0803%" height="15" fill="rgb(248,207,23)" fg:x="1006" fg:w="1"/><text x="81.0532%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="80.8032%" y="629" width="0.0803%" height="15" fill="rgb(214,186,4)" fg:x="1006" fg:w="1"/><text x="81.0532%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.8032%" y="613" width="0.0803%" height="15" fill="rgb(220,133,22)" fg:x="1006" fg:w="1"/><text x="81.0532%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="80.7229%" y="693" width="0.2410%" height="15" fill="rgb(239,134,19)" fg:x="1005" fg:w="3"/><text x="80.9729%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="80.8032%" y="677" width="0.1606%" height="15" fill="rgb(250,140,9)" fg:x="1006" fg:w="2"/><text x="81.0532%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="80.8835%" y="661" width="0.0803%" height="15" fill="rgb(225,59,14)" fg:x="1007" fg:w="1"/><text x="81.1335%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.8835%" y="645" width="0.0803%" height="15" fill="rgb(214,152,51)" fg:x="1007" fg:w="1"/><text x="81.1335%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="80.8835%" y="629" width="0.0803%" height="15" fill="rgb(251,227,43)" fg:x="1007" fg:w="1"/><text x="81.1335%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="80.8835%" y="613" width="0.0803%" height="15" fill="rgb(241,96,17)" fg:x="1007" fg:w="1"/><text x="81.1335%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.8835%" y="597" width="0.0803%" height="15" fill="rgb(234,198,43)" fg:x="1007" fg:w="1"/><text x="81.1335%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.8835%" y="581" width="0.0803%" height="15" fill="rgb(220,108,29)" fg:x="1007" fg:w="1"/><text x="81.1335%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.8835%" y="565" width="0.0803%" height="15" fill="rgb(226,163,33)" fg:x="1007" fg:w="1"/><text x="81.1335%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.8835%" y="549" width="0.0803%" height="15" fill="rgb(205,194,45)" fg:x="1007" fg:w="1"/><text x="81.1335%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.8835%" y="533" width="0.0803%" height="15" fill="rgb(206,143,44)" fg:x="1007" fg:w="1"/><text x="81.1335%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.8835%" y="517" width="0.0803%" height="15" fill="rgb(236,136,36)" fg:x="1007" fg:w="1"/><text x="81.1335%" y="527.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="80.7229%" y="709" width="0.3213%" height="15" fill="rgb(249,172,42)" fg:x="1005" fg:w="4"/><text x="80.9729%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.9639%" y="693" width="0.0803%" height="15" fill="rgb(216,139,23)" fg:x="1008" fg:w="1"/><text x="81.2139%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="81.0442%" y="645" width="0.0803%" height="15" fill="rgb(207,166,20)" fg:x="1009" fg:w="1"/><text x="81.2942%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="81.0442%" y="629" width="0.0803%" height="15" fill="rgb(210,209,22)" fg:x="1009" fg:w="1"/><text x="81.2942%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.0442%" y="613" width="0.0803%" height="15" fill="rgb(232,118,20)" fg:x="1009" fg:w="1"/><text x="81.2942%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.0442%" y="597" width="0.0803%" height="15" fill="rgb(238,113,42)" fg:x="1009" fg:w="1"/><text x="81.2942%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.0442%" y="581" width="0.0803%" height="15" fill="rgb(231,42,5)" fg:x="1009" fg:w="1"/><text x="81.2942%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.1245%" y="613" width="0.0803%" height="15" fill="rgb(243,166,24)" fg:x="1010" fg:w="1"/><text x="81.3745%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (3 samples, 0.24%)</title><rect x="81.0442%" y="709" width="0.2410%" height="15" fill="rgb(237,226,12)" fg:x="1009" fg:w="3"/><text x="81.2942%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="81.0442%" y="693" width="0.2410%" height="15" fill="rgb(229,133,24)" fg:x="1009" fg:w="3"/><text x="81.2942%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="81.0442%" y="677" width="0.2410%" height="15" fill="rgb(238,33,43)" fg:x="1009" fg:w="3"/><text x="81.2942%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="81.0442%" y="661" width="0.2410%" height="15" fill="rgb(227,59,38)" fg:x="1009" fg:w="3"/><text x="81.2942%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="81.1245%" y="645" width="0.1606%" height="15" fill="rgb(230,97,0)" fg:x="1010" fg:w="2"/><text x="81.3745%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="81.1245%" y="629" width="0.1606%" height="15" fill="rgb(250,173,50)" fg:x="1010" fg:w="2"/><text x="81.3745%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.2048%" y="613" width="0.0803%" height="15" fill="rgb(240,15,50)" fg:x="1011" fg:w="1"/><text x="81.4548%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.2048%" y="597" width="0.0803%" height="15" fill="rgb(221,93,22)" fg:x="1011" fg:w="1"/><text x="81.4548%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="81.2048%" y="581" width="0.0803%" height="15" fill="rgb(245,180,53)" fg:x="1011" fg:w="1"/><text x="81.4548%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.2048%" y="565" width="0.0803%" height="15" fill="rgb(231,88,51)" fg:x="1011" fg:w="1"/><text x="81.4548%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="81.2048%" y="549" width="0.0803%" height="15" fill="rgb(240,58,21)" fg:x="1011" fg:w="1"/><text x="81.4548%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.2048%" y="533" width="0.0803%" height="15" fill="rgb(237,21,10)" fg:x="1011" fg:w="1"/><text x="81.4548%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="81.2851%" y="709" width="0.0803%" height="15" fill="rgb(218,43,11)" fg:x="1012" fg:w="1"/><text x="81.5351%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.2851%" y="693" width="0.0803%" height="15" fill="rgb(218,221,29)" fg:x="1012" fg:w="1"/><text x="81.5351%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="81.2851%" y="677" width="0.0803%" height="15" fill="rgb(214,118,42)" fg:x="1012" fg:w="1"/><text x="81.5351%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.2851%" y="661" width="0.0803%" height="15" fill="rgb(251,200,26)" fg:x="1012" fg:w="1"/><text x="81.5351%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.2851%" y="645" width="0.0803%" height="15" fill="rgb(237,101,39)" fg:x="1012" fg:w="1"/><text x="81.5351%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.2851%" y="629" width="0.0803%" height="15" fill="rgb(251,117,11)" fg:x="1012" fg:w="1"/><text x="81.5351%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (30 samples, 2.41%)</title><rect x="79.0361%" y="725" width="2.4096%" height="15" fill="rgb(216,223,23)" fg:x="984" fg:w="30"/><text x="79.2861%" y="735.50">pl..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="81.3655%" y="709" width="0.0803%" height="15" fill="rgb(251,54,12)" fg:x="1013" fg:w="1"/><text x="81.6155%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.3655%" y="693" width="0.0803%" height="15" fill="rgb(254,176,54)" fg:x="1013" fg:w="1"/><text x="81.6155%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="81.3655%" y="677" width="0.0803%" height="15" fill="rgb(210,32,8)" fg:x="1013" fg:w="1"/><text x="81.6155%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.3655%" y="661" width="0.0803%" height="15" fill="rgb(235,52,38)" fg:x="1013" fg:w="1"/><text x="81.6155%" y="671.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="81.4458%" y="725" width="0.0803%" height="15" fill="rgb(231,4,44)" fg:x="1014" fg:w="1"/><text x="81.6958%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="81.4458%" y="709" width="0.0803%" height="15" fill="rgb(249,2,32)" fg:x="1014" fg:w="1"/><text x="81.6958%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="81.4458%" y="693" width="0.0803%" height="15" fill="rgb(224,65,26)" fg:x="1014" fg:w="1"/><text x="81.6958%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="81.4458%" y="677" width="0.0803%" height="15" fill="rgb(250,73,40)" fg:x="1014" fg:w="1"/><text x="81.6958%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::new (1 samples, 0.08%)</title><rect x="81.4458%" y="661" width="0.0803%" height="15" fill="rgb(253,177,16)" fg:x="1014" fg:w="1"/><text x="81.6958%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="81.5261%" y="693" width="0.0803%" height="15" fill="rgb(217,32,34)" fg:x="1015" fg:w="1"/><text x="81.7761%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="81.5261%" y="677" width="0.0803%" height="15" fill="rgb(212,7,10)" fg:x="1015" fg:w="1"/><text x="81.7761%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.5261%" y="661" width="0.0803%" height="15" fill="rgb(245,89,8)" fg:x="1015" fg:w="1"/><text x="81.7761%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.5261%" y="645" width="0.0803%" height="15" fill="rgb(237,16,53)" fg:x="1015" fg:w="1"/><text x="81.7761%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="81.5261%" y="629" width="0.0803%" height="15" fill="rgb(250,204,30)" fg:x="1015" fg:w="1"/><text x="81.7761%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.5261%" y="613" width="0.0803%" height="15" fill="rgb(208,77,27)" fg:x="1015" fg:w="1"/><text x="81.7761%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="81.6064%" y="629" width="0.0803%" height="15" fill="rgb(250,204,28)" fg:x="1016" fg:w="1"/><text x="81.8564%" y="639.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (69 samples, 5.54%)</title><rect x="76.2249%" y="741" width="5.5422%" height="15" fill="rgb(244,63,21)" fg:x="949" fg:w="69"/><text x="76.4749%" y="751.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.24%)</title><rect x="81.5261%" y="725" width="0.2410%" height="15" fill="rgb(236,85,44)" fg:x="1015" fg:w="3"/><text x="81.7761%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="81.5261%" y="709" width="0.2410%" height="15" fill="rgb(215,98,4)" fg:x="1015" fg:w="3"/><text x="81.7761%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="81.6064%" y="693" width="0.1606%" height="15" fill="rgb(235,38,11)" fg:x="1016" fg:w="2"/><text x="81.8564%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="81.6064%" y="677" width="0.1606%" height="15" fill="rgb(254,186,25)" fg:x="1016" fg:w="2"/><text x="81.8564%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="81.6064%" y="661" width="0.1606%" height="15" fill="rgb(225,55,31)" fg:x="1016" fg:w="2"/><text x="81.8564%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="81.6064%" y="645" width="0.1606%" height="15" fill="rgb(211,15,21)" fg:x="1016" fg:w="2"/><text x="81.8564%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="81.6867%" y="629" width="0.0803%" height="15" fill="rgb(215,187,41)" fg:x="1017" fg:w="1"/><text x="81.9367%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="81.6867%" y="613" width="0.0803%" height="15" fill="rgb(248,69,32)" fg:x="1017" fg:w="1"/><text x="81.9367%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="81.6867%" y="597" width="0.0803%" height="15" fill="rgb(252,102,52)" fg:x="1017" fg:w="1"/><text x="81.9367%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.6867%" y="581" width="0.0803%" height="15" fill="rgb(253,140,32)" fg:x="1017" fg:w="1"/><text x="81.9367%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="81.7671%" y="741" width="0.0803%" height="15" fill="rgb(216,56,42)" fg:x="1018" fg:w="1"/><text x="82.0171%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="81.7671%" y="725" width="0.0803%" height="15" fill="rgb(216,184,14)" fg:x="1018" fg:w="1"/><text x="82.0171%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.7671%" y="709" width="0.0803%" height="15" fill="rgb(237,187,27)" fg:x="1018" fg:w="1"/><text x="82.0171%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="81.7671%" y="693" width="0.0803%" height="15" fill="rgb(219,65,3)" fg:x="1018" fg:w="1"/><text x="82.0171%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="81.7671%" y="677" width="0.0803%" height="15" fill="rgb(245,83,25)" fg:x="1018" fg:w="1"/><text x="82.0171%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.7671%" y="661" width="0.0803%" height="15" fill="rgb(214,205,45)" fg:x="1018" fg:w="1"/><text x="82.0171%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.7671%" y="645" width="0.0803%" height="15" fill="rgb(241,20,18)" fg:x="1018" fg:w="1"/><text x="82.0171%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.7671%" y="629" width="0.0803%" height="15" fill="rgb(232,163,23)" fg:x="1018" fg:w="1"/><text x="82.0171%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="81.9277%" y="725" width="0.0803%" height="15" fill="rgb(214,5,46)" fg:x="1020" fg:w="1"/><text x="82.1777%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.9277%" y="709" width="0.0803%" height="15" fill="rgb(229,78,17)" fg:x="1020" fg:w="1"/><text x="82.1777%" y="719.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="82.0080%" y="725" width="0.0803%" height="15" fill="rgb(248,89,10)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="82.0080%" y="709" width="0.0803%" height="15" fill="rgb(248,54,15)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="82.0080%" y="693" width="0.0803%" height="15" fill="rgb(223,116,6)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="82.0080%" y="677" width="0.0803%" height="15" fill="rgb(205,125,38)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="82.0080%" y="661" width="0.0803%" height="15" fill="rgb(251,78,38)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="82.0080%" y="645" width="0.0803%" height="15" fill="rgb(253,78,28)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="82.0080%" y="629" width="0.0803%" height="15" fill="rgb(209,120,3)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="82.0080%" y="613" width="0.0803%" height="15" fill="rgb(238,229,9)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="82.0080%" y="597" width="0.0803%" height="15" fill="rgb(253,159,18)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.0080%" y="581" width="0.0803%" height="15" fill="rgb(244,42,34)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.0080%" y="565" width="0.0803%" height="15" fill="rgb(224,8,7)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="82.0080%" y="549" width="0.0803%" height="15" fill="rgb(210,201,45)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="82.0080%" y="533" width="0.0803%" height="15" fill="rgb(252,185,21)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="82.0080%" y="517" width="0.0803%" height="15" fill="rgb(223,131,1)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="82.0080%" y="501" width="0.0803%" height="15" fill="rgb(245,141,16)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="82.0080%" y="485" width="0.0803%" height="15" fill="rgb(229,55,45)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="495.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="82.0884%" y="725" width="0.0803%" height="15" fill="rgb(208,92,15)" fg:x="1022" fg:w="1"/><text x="82.3384%" y="735.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="82.0884%" y="709" width="0.0803%" height="15" fill="rgb(234,185,47)" fg:x="1022" fg:w="1"/><text x="82.3384%" y="719.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="82.0884%" y="693" width="0.0803%" height="15" fill="rgb(253,104,50)" fg:x="1022" fg:w="1"/><text x="82.3384%" y="703.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="82.0884%" y="677" width="0.0803%" height="15" fill="rgb(205,70,7)" fg:x="1022" fg:w="1"/><text x="82.3384%" y="687.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="82.0884%" y="661" width="0.0803%" height="15" fill="rgb(240,178,43)" fg:x="1022" fg:w="1"/><text x="82.3384%" y="671.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="82.0884%" y="645" width="0.0803%" height="15" fill="rgb(214,112,2)" fg:x="1022" fg:w="1"/><text x="82.3384%" y="655.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="82.0884%" y="629" width="0.0803%" height="15" fill="rgb(206,46,17)" fg:x="1022" fg:w="1"/><text x="82.3384%" y="639.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="82.0884%" y="613" width="0.0803%" height="15" fill="rgb(225,220,16)" fg:x="1022" fg:w="1"/><text x="82.3384%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.1687%" y="613" width="0.0803%" height="15" fill="rgb(238,65,40)" fg:x="1023" fg:w="1"/><text x="82.4187%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.1687%" y="597" width="0.0803%" height="15" fill="rgb(230,151,21)" fg:x="1023" fg:w="1"/><text x="82.4187%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.1687%" y="581" width="0.0803%" height="15" fill="rgb(218,58,49)" fg:x="1023" fg:w="1"/><text x="82.4187%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.3293%" y="597" width="0.0803%" height="15" fill="rgb(219,179,14)" fg:x="1025" fg:w="1"/><text x="82.5793%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.4096%" y="565" width="0.0803%" height="15" fill="rgb(223,72,1)" fg:x="1026" fg:w="1"/><text x="82.6596%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.4096%" y="549" width="0.0803%" height="15" fill="rgb(238,126,10)" fg:x="1026" fg:w="1"/><text x="82.6596%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.4096%" y="533" width="0.0803%" height="15" fill="rgb(224,206,38)" fg:x="1026" fg:w="1"/><text x="82.6596%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="82.4096%" y="597" width="0.1606%" height="15" fill="rgb(212,201,54)" fg:x="1026" fg:w="2"/><text x="82.6596%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="82.4096%" y="581" width="0.1606%" height="15" fill="rgb(218,154,48)" fg:x="1026" fg:w="2"/><text x="82.6596%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="82.4900%" y="565" width="0.0803%" height="15" fill="rgb(232,93,24)" fg:x="1027" fg:w="1"/><text x="82.7400%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.4900%" y="549" width="0.0803%" height="15" fill="rgb(245,30,21)" fg:x="1027" fg:w="1"/><text x="82.7400%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="82.1687%" y="645" width="0.4819%" height="15" fill="rgb(242,148,29)" fg:x="1023" fg:w="6"/><text x="82.4187%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="82.1687%" y="629" width="0.4819%" height="15" fill="rgb(244,153,54)" fg:x="1023" fg:w="6"/><text x="82.4187%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="82.2490%" y="613" width="0.4016%" height="15" fill="rgb(252,87,22)" fg:x="1024" fg:w="5"/><text x="82.4990%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.5703%" y="597" width="0.0803%" height="15" fill="rgb(210,51,29)" fg:x="1028" fg:w="1"/><text x="82.8203%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.5703%" y="581" width="0.0803%" height="15" fill="rgb(242,136,47)" fg:x="1028" fg:w="1"/><text x="82.8203%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.5703%" y="565" width="0.0803%" height="15" fill="rgb(238,68,4)" fg:x="1028" fg:w="1"/><text x="82.8203%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="82.6506%" y="597" width="0.0803%" height="15" fill="rgb(242,161,30)" fg:x="1029" fg:w="1"/><text x="82.9006%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.6506%" y="581" width="0.0803%" height="15" fill="rgb(218,58,44)" fg:x="1029" fg:w="1"/><text x="82.9006%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.7309%" y="565" width="0.0803%" height="15" fill="rgb(252,125,32)" fg:x="1030" fg:w="1"/><text x="82.9809%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="82.8112%" y="565" width="0.0803%" height="15" fill="rgb(219,178,0)" fg:x="1031" fg:w="1"/><text x="83.0612%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="82.6506%" y="645" width="0.3213%" height="15" fill="rgb(213,152,7)" fg:x="1029" fg:w="4"/><text x="82.9006%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="82.6506%" y="629" width="0.3213%" height="15" fill="rgb(249,109,34)" fg:x="1029" fg:w="4"/><text x="82.9006%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="82.6506%" y="613" width="0.3213%" height="15" fill="rgb(232,96,21)" fg:x="1029" fg:w="4"/><text x="82.9006%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="82.7309%" y="597" width="0.2410%" height="15" fill="rgb(228,27,39)" fg:x="1030" fg:w="3"/><text x="82.9809%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="82.7309%" y="581" width="0.2410%" height="15" fill="rgb(211,182,52)" fg:x="1030" fg:w="3"/><text x="82.9809%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.8916%" y="565" width="0.0803%" height="15" fill="rgb(234,178,38)" fg:x="1032" fg:w="1"/><text x="83.1416%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.9719%" y="581" width="0.0803%" height="15" fill="rgb(221,111,3)" fg:x="1033" fg:w="1"/><text x="83.2219%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.0522%" y="565" width="0.0803%" height="15" fill="rgb(228,175,21)" fg:x="1034" fg:w="1"/><text x="83.3022%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="83.1325%" y="549" width="0.1606%" height="15" fill="rgb(228,174,43)" fg:x="1035" fg:w="2"/><text x="83.3825%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.2932%" y="549" width="0.0803%" height="15" fill="rgb(211,191,0)" fg:x="1037" fg:w="1"/><text x="83.5432%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.2932%" y="533" width="0.0803%" height="15" fill="rgb(253,117,3)" fg:x="1037" fg:w="1"/><text x="83.5432%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="83.4538%" y="533" width="0.1606%" height="15" fill="rgb(241,127,19)" fg:x="1039" fg:w="2"/><text x="83.7038%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="83.4538%" y="517" width="0.1606%" height="15" fill="rgb(218,103,12)" fg:x="1039" fg:w="2"/><text x="83.7038%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.5341%" y="501" width="0.0803%" height="15" fill="rgb(236,214,43)" fg:x="1040" fg:w="1"/><text x="83.7841%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="82.9719%" y="613" width="0.7229%" height="15" fill="rgb(244,144,19)" fg:x="1033" fg:w="9"/><text x="83.2219%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.72%)</title><rect x="82.9719%" y="597" width="0.7229%" height="15" fill="rgb(246,188,10)" fg:x="1033" fg:w="9"/><text x="83.2219%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="83.0522%" y="581" width="0.6426%" height="15" fill="rgb(212,193,33)" fg:x="1034" fg:w="8"/><text x="83.3022%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="83.1325%" y="565" width="0.5622%" height="15" fill="rgb(241,51,29)" fg:x="1035" fg:w="7"/><text x="83.3825%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="83.3735%" y="549" width="0.3213%" height="15" fill="rgb(211,58,19)" fg:x="1038" fg:w="4"/><text x="83.6235%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="83.6145%" y="533" width="0.0803%" height="15" fill="rgb(229,111,26)" fg:x="1041" fg:w="1"/><text x="83.8645%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.6145%" y="517" width="0.0803%" height="15" fill="rgb(213,115,40)" fg:x="1041" fg:w="1"/><text x="83.8645%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (12 samples, 0.96%)</title><rect x="82.9719%" y="629" width="0.9639%" height="15" fill="rgb(209,56,44)" fg:x="1033" fg:w="12"/><text x="83.2219%" y="639.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="83.6948%" y="613" width="0.2410%" height="15" fill="rgb(230,108,32)" fg:x="1042" fg:w="3"/><text x="83.9448%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="83.6948%" y="597" width="0.2410%" height="15" fill="rgb(216,165,31)" fg:x="1042" fg:w="3"/><text x="83.9448%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="83.7751%" y="581" width="0.1606%" height="15" fill="rgb(218,122,21)" fg:x="1043" fg:w="2"/><text x="84.0251%" y="591.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="83.8554%" y="565" width="0.0803%" height="15" fill="rgb(223,224,47)" fg:x="1044" fg:w="1"/><text x="84.1054%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="83.9357%" y="597" width="0.2410%" height="15" fill="rgb(238,102,44)" fg:x="1045" fg:w="3"/><text x="84.1857%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="84.0964%" y="581" width="0.0803%" height="15" fill="rgb(236,46,40)" fg:x="1047" fg:w="1"/><text x="84.3464%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="84.1767%" y="597" width="0.0803%" height="15" fill="rgb(247,202,50)" fg:x="1048" fg:w="1"/><text x="84.4267%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="84.1767%" y="581" width="0.0803%" height="15" fill="rgb(209,99,20)" fg:x="1048" fg:w="1"/><text x="84.4267%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="84.4177%" y="549" width="0.0803%" height="15" fill="rgb(252,27,34)" fg:x="1051" fg:w="1"/><text x="84.6677%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="84.4177%" y="533" width="0.0803%" height="15" fill="rgb(215,206,23)" fg:x="1051" fg:w="1"/><text x="84.6677%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="84.4177%" y="517" width="0.0803%" height="15" fill="rgb(212,135,36)" fg:x="1051" fg:w="1"/><text x="84.6677%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.4177%" y="501" width="0.0803%" height="15" fill="rgb(240,189,1)" fg:x="1051" fg:w="1"/><text x="84.6677%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="84.4177%" y="485" width="0.0803%" height="15" fill="rgb(242,56,20)" fg:x="1051" fg:w="1"/><text x="84.6677%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.4980%" y="517" width="0.0803%" height="15" fill="rgb(247,132,33)" fg:x="1052" fg:w="1"/><text x="84.7480%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="84.4980%" y="501" width="0.0803%" height="15" fill="rgb(208,149,11)" fg:x="1052" fg:w="1"/><text x="84.7480%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="84.6586%" y="501" width="0.1606%" height="15" fill="rgb(211,33,11)" fg:x="1054" fg:w="2"/><text x="84.9086%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.7390%" y="485" width="0.0803%" height="15" fill="rgb(221,29,38)" fg:x="1055" fg:w="1"/><text x="84.9890%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.7390%" y="469" width="0.0803%" height="15" fill="rgb(206,182,49)" fg:x="1055" fg:w="1"/><text x="84.9890%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.96%)</title><rect x="83.9357%" y="629" width="0.9639%" height="15" fill="rgb(216,140,1)" fg:x="1045" fg:w="12"/><text x="84.1857%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.96%)</title><rect x="83.9357%" y="613" width="0.9639%" height="15" fill="rgb(232,57,40)" fg:x="1045" fg:w="12"/><text x="84.1857%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="84.2570%" y="597" width="0.6426%" height="15" fill="rgb(224,186,18)" fg:x="1049" fg:w="8"/><text x="84.5070%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="84.3373%" y="581" width="0.5622%" height="15" fill="rgb(215,121,11)" fg:x="1050" fg:w="7"/><text x="84.5873%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="84.4177%" y="565" width="0.4819%" height="15" fill="rgb(245,147,10)" fg:x="1051" fg:w="6"/><text x="84.6677%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="84.4980%" y="549" width="0.4016%" height="15" fill="rgb(238,153,13)" fg:x="1052" fg:w="5"/><text x="84.7480%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="84.4980%" y="533" width="0.4016%" height="15" fill="rgb(233,108,0)" fg:x="1052" fg:w="5"/><text x="84.7480%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="84.5783%" y="517" width="0.3213%" height="15" fill="rgb(212,157,17)" fg:x="1053" fg:w="4"/><text x="84.8283%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.8193%" y="501" width="0.0803%" height="15" fill="rgb(225,213,38)" fg:x="1056" fg:w="1"/><text x="85.0693%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.8996%" y="485" width="0.0803%" height="15" fill="rgb(248,16,11)" fg:x="1057" fg:w="1"/><text x="85.1496%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.8996%" y="469" width="0.0803%" height="15" fill="rgb(241,33,4)" fg:x="1057" fg:w="1"/><text x="85.1496%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.8996%" y="453" width="0.0803%" height="15" fill="rgb(222,26,43)" fg:x="1057" fg:w="1"/><text x="85.1496%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="85.0602%" y="437" width="0.1606%" height="15" fill="rgb(243,29,36)" fg:x="1059" fg:w="2"/><text x="85.3102%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.1406%" y="421" width="0.0803%" height="15" fill="rgb(241,9,27)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="85.0602%" y="469" width="0.2410%" height="15" fill="rgb(205,117,26)" fg:x="1059" fg:w="3"/><text x="85.3102%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="85.0602%" y="453" width="0.2410%" height="15" fill="rgb(209,80,39)" fg:x="1059" fg:w="3"/><text x="85.3102%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="85.2209%" y="437" width="0.0803%" height="15" fill="rgb(239,155,6)" fg:x="1061" fg:w="1"/><text x="85.4709%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.2209%" y="421" width="0.0803%" height="15" fill="rgb(212,104,12)" fg:x="1061" fg:w="1"/><text x="85.4709%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="84.8996%" y="501" width="0.4819%" height="15" fill="rgb(234,204,3)" fg:x="1057" fg:w="6"/><text x="85.1496%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="84.9799%" y="485" width="0.4016%" height="15" fill="rgb(251,218,7)" fg:x="1058" fg:w="5"/><text x="85.2299%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.3012%" y="469" width="0.0803%" height="15" fill="rgb(221,81,32)" fg:x="1062" fg:w="1"/><text x="85.5512%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="85.3815%" y="501" width="0.1606%" height="15" fill="rgb(214,152,26)" fg:x="1063" fg:w="2"/><text x="85.6315%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="85.3815%" y="485" width="0.1606%" height="15" fill="rgb(223,22,3)" fg:x="1063" fg:w="2"/><text x="85.6315%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.72%)</title><rect x="84.8996%" y="533" width="0.7229%" height="15" fill="rgb(207,174,7)" fg:x="1057" fg:w="9"/><text x="85.1496%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.72%)</title><rect x="84.8996%" y="517" width="0.7229%" height="15" fill="rgb(224,19,52)" fg:x="1057" fg:w="9"/><text x="85.1496%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.5422%" y="501" width="0.0803%" height="15" fill="rgb(228,24,14)" fg:x="1065" fg:w="1"/><text x="85.7922%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.5422%" y="485" width="0.0803%" height="15" fill="rgb(230,153,43)" fg:x="1065" fg:w="1"/><text x="85.7922%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="85.5422%" y="469" width="0.0803%" height="15" fill="rgb(231,106,12)" fg:x="1065" fg:w="1"/><text x="85.7922%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.88%)</title><rect x="84.8996%" y="565" width="0.8835%" height="15" fill="rgb(215,92,2)" fg:x="1057" fg:w="11"/><text x="85.1496%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.88%)</title><rect x="84.8996%" y="549" width="0.8835%" height="15" fill="rgb(249,143,25)" fg:x="1057" fg:w="11"/><text x="85.1496%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="85.6225%" y="533" width="0.1606%" height="15" fill="rgb(252,7,35)" fg:x="1066" fg:w="2"/><text x="85.8725%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="85.6225%" y="517" width="0.1606%" height="15" fill="rgb(216,69,40)" fg:x="1066" fg:w="2"/><text x="85.8725%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="85.7831%" y="565" width="0.0803%" height="15" fill="rgb(240,36,33)" fg:x="1068" fg:w="1"/><text x="86.0331%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.7831%" y="549" width="0.0803%" height="15" fill="rgb(231,128,14)" fg:x="1068" fg:w="1"/><text x="86.0331%" y="559.50"></text></g><g><title>engine::session::Session::close (51 samples, 4.10%)</title><rect x="81.8474%" y="741" width="4.0964%" height="15" fill="rgb(245,143,14)" fg:x="1019" fg:w="51"/><text x="82.0974%" y="751.50">engi..</text></g><g><title>engine::session::state::State::close (47 samples, 3.78%)</title><rect x="82.1687%" y="725" width="3.7751%" height="15" fill="rgb(222,130,28)" fg:x="1023" fg:w="47"/><text x="82.4187%" y="735.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (47 samples, 3.78%)</title><rect x="82.1687%" y="709" width="3.7751%" height="15" fill="rgb(212,10,48)" fg:x="1023" fg:w="47"/><text x="82.4187%" y="719.50">engi..</text></g><g><title>core::iter::adapters::try_process (47 samples, 3.78%)</title><rect x="82.1687%" y="693" width="3.7751%" height="15" fill="rgb(254,118,45)" fg:x="1023" fg:w="47"/><text x="82.4187%" y="703.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (47 samples, 3.78%)</title><rect x="82.1687%" y="677" width="3.7751%" height="15" fill="rgb(228,6,45)" fg:x="1023" fg:w="47"/><text x="82.4187%" y="687.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (47 samples, 3.78%)</title><rect x="82.1687%" y="661" width="3.7751%" height="15" fill="rgb(241,18,35)" fg:x="1023" fg:w="47"/><text x="82.4187%" y="671.50">engi..</text></g><g><title>kernel::model::any_entity_changes (37 samples, 2.97%)</title><rect x="82.9719%" y="645" width="2.9719%" height="15" fill="rgb(227,214,53)" fg:x="1033" fg:w="37"/><text x="83.2219%" y="655.50">ker..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (13 samples, 1.04%)</title><rect x="84.8996%" y="629" width="1.0442%" height="15" fill="rgb(224,107,51)" fg:x="1057" fg:w="13"/><text x="85.1496%" y="639.50"></text></g><g><title>serde_json::de::from_trait (13 samples, 1.04%)</title><rect x="84.8996%" y="613" width="1.0442%" height="15" fill="rgb(248,60,28)" fg:x="1057" fg:w="13"/><text x="85.1496%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.04%)</title><rect x="84.8996%" y="597" width="1.0442%" height="15" fill="rgb(249,101,23)" fg:x="1057" fg:w="13"/><text x="85.1496%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 1.04%)</title><rect x="84.8996%" y="581" width="1.0442%" height="15" fill="rgb(228,51,19)" fg:x="1057" fg:w="13"/><text x="85.1496%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.8635%" y="565" width="0.0803%" height="15" fill="rgb(213,20,6)" fg:x="1069" fg:w="1"/><text x="86.1135%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.8635%" y="549" width="0.0803%" height="15" fill="rgb(212,124,10)" fg:x="1069" fg:w="1"/><text x="86.1135%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="85.8635%" y="533" width="0.0803%" height="15" fill="rgb(248,3,40)" fg:x="1069" fg:w="1"/><text x="86.1135%" y="543.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (1 samples, 0.08%)</title><rect x="86.0241%" y="677" width="0.0803%" height="15" fill="rgb(223,178,23)" fg:x="1071" fg:w="1"/><text x="86.2741%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (1 samples, 0.08%)</title><rect x="86.0241%" y="661" width="0.0803%" height="15" fill="rgb(240,132,45)" fg:x="1071" fg:w="1"/><text x="86.2741%" y="671.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (1 samples, 0.08%)</title><rect x="86.0241%" y="645" width="0.0803%" height="15" fill="rgb(245,164,36)" fg:x="1071" fg:w="1"/><text x="86.2741%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="86.1847%" y="565" width="0.0803%" height="15" fill="rgb(231,188,53)" fg:x="1073" fg:w="1"/><text x="86.4347%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="86.1847%" y="549" width="0.0803%" height="15" fill="rgb(237,198,39)" fg:x="1073" fg:w="1"/><text x="86.4347%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.1847%" y="533" width="0.0803%" height="15" fill="rgb(223,120,35)" fg:x="1073" fg:w="1"/><text x="86.4347%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="86.1847%" y="517" width="0.0803%" height="15" fill="rgb(253,107,49)" fg:x="1073" fg:w="1"/><text x="86.4347%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.1847%" y="501" width="0.0803%" height="15" fill="rgb(216,44,31)" fg:x="1073" fg:w="1"/><text x="86.4347%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="86.2651%" y="501" width="0.0803%" height="15" fill="rgb(253,87,21)" fg:x="1074" fg:w="1"/><text x="86.5151%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.2651%" y="485" width="0.0803%" height="15" fill="rgb(226,18,2)" fg:x="1074" fg:w="1"/><text x="86.5151%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.2651%" y="469" width="0.0803%" height="15" fill="rgb(216,8,46)" fg:x="1074" fg:w="1"/><text x="86.5151%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.2651%" y="453" width="0.0803%" height="15" fill="rgb(226,140,39)" fg:x="1074" fg:w="1"/><text x="86.5151%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.2651%" y="437" width="0.0803%" height="15" fill="rgb(221,194,54)" fg:x="1074" fg:w="1"/><text x="86.5151%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.2651%" y="421" width="0.0803%" height="15" fill="rgb(213,92,11)" fg:x="1074" fg:w="1"/><text x="86.5151%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="86.2651%" y="405" width="0.0803%" height="15" fill="rgb(229,162,46)" fg:x="1074" fg:w="1"/><text x="86.5151%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="86.2651%" y="389" width="0.0803%" height="15" fill="rgb(214,111,36)" fg:x="1074" fg:w="1"/><text x="86.5151%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="86.2651%" y="373" width="0.0803%" height="15" fill="rgb(207,6,21)" fg:x="1074" fg:w="1"/><text x="86.5151%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="86.2651%" y="357" width="0.0803%" height="15" fill="rgb(213,127,38)" fg:x="1074" fg:w="1"/><text x="86.5151%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="86.2651%" y="341" width="0.0803%" height="15" fill="rgb(238,118,32)" fg:x="1074" fg:w="1"/><text x="86.5151%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="86.2651%" y="325" width="0.0803%" height="15" fill="rgb(240,139,39)" fg:x="1074" fg:w="1"/><text x="86.5151%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="86.2651%" y="309" width="0.0803%" height="15" fill="rgb(235,10,37)" fg:x="1074" fg:w="1"/><text x="86.5151%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="86.2651%" y="293" width="0.0803%" height="15" fill="rgb(249,171,38)" fg:x="1074" fg:w="1"/><text x="86.5151%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="86.2651%" y="277" width="0.0803%" height="15" fill="rgb(242,144,32)" fg:x="1074" fg:w="1"/><text x="86.5151%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.2651%" y="261" width="0.0803%" height="15" fill="rgb(217,117,21)" fg:x="1074" fg:w="1"/><text x="86.5151%" y="271.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (3 samples, 0.24%)</title><rect x="86.1847%" y="597" width="0.2410%" height="15" fill="rgb(249,87,1)" fg:x="1073" fg:w="3"/><text x="86.4347%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (3 samples, 0.24%)</title><rect x="86.1847%" y="581" width="0.2410%" height="15" fill="rgb(248,196,48)" fg:x="1073" fg:w="3"/><text x="86.4347%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (2 samples, 0.16%)</title><rect x="86.2651%" y="565" width="0.1606%" height="15" fill="rgb(251,206,33)" fg:x="1074" fg:w="2"/><text x="86.5151%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="86.2651%" y="549" width="0.1606%" height="15" fill="rgb(232,141,28)" fg:x="1074" fg:w="2"/><text x="86.5151%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="86.2651%" y="533" width="0.1606%" height="15" fill="rgb(209,167,14)" fg:x="1074" fg:w="2"/><text x="86.5151%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="86.2651%" y="517" width="0.1606%" height="15" fill="rgb(225,11,50)" fg:x="1074" fg:w="2"/><text x="86.5151%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="86.3454%" y="501" width="0.0803%" height="15" fill="rgb(209,50,20)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="511.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="86.3454%" y="485" width="0.0803%" height="15" fill="rgb(212,17,46)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="86.3454%" y="469" width="0.0803%" height="15" fill="rgb(216,101,39)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="86.3454%" y="453" width="0.0803%" height="15" fill="rgb(212,228,48)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="86.3454%" y="437" width="0.0803%" height="15" fill="rgb(250,6,50)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="86.3454%" y="421" width="0.0803%" height="15" fill="rgb(250,160,48)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.5060%" y="325" width="0.0803%" height="15" fill="rgb(244,216,33)" fg:x="1077" fg:w="1"/><text x="86.7560%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.24%)</title><rect x="86.4257%" y="357" width="0.2410%" height="15" fill="rgb(207,157,5)" fg:x="1076" fg:w="3"/><text x="86.6757%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="86.4257%" y="341" width="0.2410%" height="15" fill="rgb(228,199,8)" fg:x="1076" fg:w="3"/><text x="86.6757%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.5863%" y="325" width="0.0803%" height="15" fill="rgb(227,80,20)" fg:x="1078" fg:w="1"/><text x="86.8363%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="86.6667%" y="341" width="0.1606%" height="15" fill="rgb(222,9,33)" fg:x="1079" fg:w="2"/><text x="86.9167%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="86.6667%" y="325" width="0.1606%" height="15" fill="rgb(239,44,28)" fg:x="1079" fg:w="2"/><text x="86.9167%" y="335.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="86.6667%" y="309" width="0.1606%" height="15" fill="rgb(249,187,43)" fg:x="1079" fg:w="2"/><text x="86.9167%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::end (1 samples, 0.08%)</title><rect x="86.8273%" y="325" width="0.0803%" height="15" fill="rgb(216,141,28)" fg:x="1081" fg:w="1"/><text x="87.0773%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.8273%" y="309" width="0.0803%" height="15" fill="rgb(230,154,53)" fg:x="1081" fg:w="1"/><text x="87.0773%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.8273%" y="293" width="0.0803%" height="15" fill="rgb(227,82,4)" fg:x="1081" fg:w="1"/><text x="87.0773%" y="303.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (7 samples, 0.56%)</title><rect x="86.4257%" y="421" width="0.5622%" height="15" fill="rgb(220,107,16)" fg:x="1076" fg:w="7"/><text x="86.6757%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (7 samples, 0.56%)</title><rect x="86.4257%" y="405" width="0.5622%" height="15" fill="rgb(207,187,2)" fg:x="1076" fg:w="7"/><text x="86.6757%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (7 samples, 0.56%)</title><rect x="86.4257%" y="389" width="0.5622%" height="15" fill="rgb(210,162,52)" fg:x="1076" fg:w="7"/><text x="86.6757%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="86.4257%" y="373" width="0.5622%" height="15" fill="rgb(217,216,49)" fg:x="1076" fg:w="7"/><text x="86.6757%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="86.6667%" y="357" width="0.3213%" height="15" fill="rgb(218,146,49)" fg:x="1079" fg:w="4"/><text x="86.9167%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (2 samples, 0.16%)</title><rect x="86.8273%" y="341" width="0.1606%" height="15" fill="rgb(216,55,40)" fg:x="1081" fg:w="2"/><text x="87.0773%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="86.9076%" y="325" width="0.0803%" height="15" fill="rgb(208,196,21)" fg:x="1082" fg:w="1"/><text x="87.1576%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.9076%" y="309" width="0.0803%" height="15" fill="rgb(242,117,42)" fg:x="1082" fg:w="1"/><text x="87.1576%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="87.0683%" y="389" width="0.0803%" height="15" fill="rgb(210,11,23)" fg:x="1084" fg:w="1"/><text x="87.3183%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="87.0683%" y="373" width="0.0803%" height="15" fill="rgb(217,110,2)" fg:x="1084" fg:w="1"/><text x="87.3183%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="87.0683%" y="357" width="0.0803%" height="15" fill="rgb(229,77,54)" fg:x="1084" fg:w="1"/><text x="87.3183%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="87.0683%" y="341" width="0.0803%" height="15" fill="rgb(218,53,16)" fg:x="1084" fg:w="1"/><text x="87.3183%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.1486%" y="373" width="0.0803%" height="15" fill="rgb(215,38,13)" fg:x="1085" fg:w="1"/><text x="87.3986%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.1486%" y="357" width="0.0803%" height="15" fill="rgb(235,42,18)" fg:x="1085" fg:w="1"/><text x="87.3986%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.1486%" y="341" width="0.0803%" height="15" fill="rgb(219,66,54)" fg:x="1085" fg:w="1"/><text x="87.3986%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.1486%" y="325" width="0.0803%" height="15" fill="rgb(222,205,4)" fg:x="1085" fg:w="1"/><text x="87.3986%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.1486%" y="309" width="0.0803%" height="15" fill="rgb(227,213,46)" fg:x="1085" fg:w="1"/><text x="87.3986%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="87.1486%" y="293" width="0.0803%" height="15" fill="rgb(250,145,42)" fg:x="1085" fg:w="1"/><text x="87.3986%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="87.1486%" y="277" width="0.0803%" height="15" fill="rgb(219,15,2)" fg:x="1085" fg:w="1"/><text x="87.3986%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="87.1486%" y="261" width="0.0803%" height="15" fill="rgb(231,181,52)" fg:x="1085" fg:w="1"/><text x="87.3986%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.1486%" y="245" width="0.0803%" height="15" fill="rgb(235,1,42)" fg:x="1085" fg:w="1"/><text x="87.3986%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.1486%" y="229" width="0.0803%" height="15" fill="rgb(249,88,27)" fg:x="1085" fg:w="1"/><text x="87.3986%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="87.1486%" y="213" width="0.0803%" height="15" fill="rgb(235,145,16)" fg:x="1085" fg:w="1"/><text x="87.3986%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="87.1486%" y="389" width="0.1606%" height="15" fill="rgb(237,114,19)" fg:x="1085" fg:w="2"/><text x="87.3986%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.2289%" y="373" width="0.0803%" height="15" fill="rgb(238,51,50)" fg:x="1086" fg:w="1"/><text x="87.4789%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.2289%" y="357" width="0.0803%" height="15" fill="rgb(205,194,25)" fg:x="1086" fg:w="1"/><text x="87.4789%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="87.2289%" y="341" width="0.0803%" height="15" fill="rgb(215,203,17)" fg:x="1086" fg:w="1"/><text x="87.4789%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.2289%" y="325" width="0.0803%" height="15" fill="rgb(233,112,49)" fg:x="1086" fg:w="1"/><text x="87.4789%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.2289%" y="309" width="0.0803%" height="15" fill="rgb(241,130,26)" fg:x="1086" fg:w="1"/><text x="87.4789%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.3896%" y="357" width="0.0803%" height="15" fill="rgb(252,223,19)" fg:x="1088" fg:w="1"/><text x="87.6396%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.3896%" y="341" width="0.0803%" height="15" fill="rgb(211,95,25)" fg:x="1088" fg:w="1"/><text x="87.6396%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.3896%" y="325" width="0.0803%" height="15" fill="rgb(251,182,27)" fg:x="1088" fg:w="1"/><text x="87.6396%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.3896%" y="309" width="0.0803%" height="15" fill="rgb(238,24,4)" fg:x="1088" fg:w="1"/><text x="87.6396%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.3896%" y="293" width="0.0803%" height="15" fill="rgb(224,220,25)" fg:x="1088" fg:w="1"/><text x="87.6396%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="87.3896%" y="277" width="0.0803%" height="15" fill="rgb(239,133,26)" fg:x="1088" fg:w="1"/><text x="87.6396%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="87.3896%" y="261" width="0.0803%" height="15" fill="rgb(211,94,48)" fg:x="1088" fg:w="1"/><text x="87.6396%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="87.3896%" y="245" width="0.0803%" height="15" fill="rgb(239,87,6)" fg:x="1088" fg:w="1"/><text x="87.6396%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.3896%" y="229" width="0.0803%" height="15" fill="rgb(227,62,0)" fg:x="1088" fg:w="1"/><text x="87.6396%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.3896%" y="213" width="0.0803%" height="15" fill="rgb(211,226,4)" fg:x="1088" fg:w="1"/><text x="87.6396%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="87.3896%" y="197" width="0.0803%" height="15" fill="rgb(253,38,52)" fg:x="1088" fg:w="1"/><text x="87.6396%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="87.3896%" y="181" width="0.0803%" height="15" fill="rgb(229,126,40)" fg:x="1088" fg:w="1"/><text x="87.6396%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="87.3896%" y="165" width="0.0803%" height="15" fill="rgb(229,165,44)" fg:x="1088" fg:w="1"/><text x="87.6396%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="87.3896%" y="149" width="0.0803%" height="15" fill="rgb(247,95,47)" fg:x="1088" fg:w="1"/><text x="87.6396%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.3896%" y="133" width="0.0803%" height="15" fill="rgb(216,140,30)" fg:x="1088" fg:w="1"/><text x="87.6396%" y="143.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="87.3092%" y="373" width="0.2410%" height="15" fill="rgb(246,214,8)" fg:x="1087" fg:w="3"/><text x="87.5592%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.4699%" y="357" width="0.0803%" height="15" fill="rgb(227,224,15)" fg:x="1089" fg:w="1"/><text x="87.7199%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.4699%" y="341" width="0.0803%" height="15" fill="rgb(233,175,4)" fg:x="1089" fg:w="1"/><text x="87.7199%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="87.4699%" y="325" width="0.0803%" height="15" fill="rgb(221,66,45)" fg:x="1089" fg:w="1"/><text x="87.7199%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.4699%" y="309" width="0.0803%" height="15" fill="rgb(221,178,18)" fg:x="1089" fg:w="1"/><text x="87.7199%" y="319.50"></text></g><g><title>kernel::model::EntityPtr::gid (4 samples, 0.32%)</title><rect x="87.3092%" y="389" width="0.3213%" height="15" fill="rgb(213,81,29)" fg:x="1087" fg:w="4"/><text x="87.5592%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="87.5502%" y="373" width="0.0803%" height="15" fill="rgb(220,89,49)" fg:x="1090" fg:w="1"/><text x="87.8002%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="87.7108%" y="309" width="0.0803%" height="15" fill="rgb(227,60,33)" fg:x="1092" fg:w="1"/><text x="87.9608%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="87.7108%" y="293" width="0.0803%" height="15" fill="rgb(205,113,12)" fg:x="1092" fg:w="1"/><text x="87.9608%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="87.7108%" y="277" width="0.0803%" height="15" fill="rgb(211,32,1)" fg:x="1092" fg:w="1"/><text x="87.9608%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="87.7108%" y="261" width="0.0803%" height="15" fill="rgb(246,2,12)" fg:x="1092" fg:w="1"/><text x="87.9608%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="87.7108%" y="245" width="0.0803%" height="15" fill="rgb(243,37,27)" fg:x="1092" fg:w="1"/><text x="87.9608%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="87.7108%" y="229" width="0.0803%" height="15" fill="rgb(248,211,31)" fg:x="1092" fg:w="1"/><text x="87.9608%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="87.7912%" y="309" width="0.0803%" height="15" fill="rgb(242,146,47)" fg:x="1093" fg:w="1"/><text x="88.0412%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="87.7912%" y="293" width="0.0803%" height="15" fill="rgb(206,70,20)" fg:x="1093" fg:w="1"/><text x="88.0412%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.7912%" y="277" width="0.0803%" height="15" fill="rgb(215,10,51)" fg:x="1093" fg:w="1"/><text x="88.0412%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="87.8715%" y="261" width="0.0803%" height="15" fill="rgb(243,178,53)" fg:x="1094" fg:w="1"/><text x="88.1215%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.8715%" y="245" width="0.0803%" height="15" fill="rgb(233,221,20)" fg:x="1094" fg:w="1"/><text x="88.1215%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="87.8715%" y="229" width="0.0803%" height="15" fill="rgb(218,95,35)" fg:x="1094" fg:w="1"/><text x="88.1215%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.8715%" y="213" width="0.0803%" height="15" fill="rgb(229,13,5)" fg:x="1094" fg:w="1"/><text x="88.1215%" y="223.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="87.9518%" y="261" width="0.0803%" height="15" fill="rgb(252,164,30)" fg:x="1095" fg:w="1"/><text x="88.2018%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="87.9518%" y="245" width="0.0803%" height="15" fill="rgb(232,68,36)" fg:x="1095" fg:w="1"/><text x="88.2018%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="88.0321%" y="245" width="0.2410%" height="15" fill="rgb(219,59,54)" fg:x="1096" fg:w="3"/><text x="88.2821%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="88.0321%" y="229" width="0.2410%" height="15" fill="rgb(250,92,33)" fg:x="1096" fg:w="3"/><text x="88.2821%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.1928%" y="213" width="0.0803%" height="15" fill="rgb(229,162,54)" fg:x="1098" fg:w="1"/><text x="88.4428%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="88.2731%" y="245" width="0.0803%" height="15" fill="rgb(244,114,52)" fg:x="1099" fg:w="1"/><text x="88.5231%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="88.2731%" y="229" width="0.0803%" height="15" fill="rgb(212,211,43)" fg:x="1099" fg:w="1"/><text x="88.5231%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="88.2731%" y="213" width="0.0803%" height="15" fill="rgb(226,147,8)" fg:x="1099" fg:w="1"/><text x="88.5231%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="88.2731%" y="197" width="0.0803%" height="15" fill="rgb(226,23,13)" fg:x="1099" fg:w="1"/><text x="88.5231%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="88.3534%" y="245" width="0.2410%" height="15" fill="rgb(240,63,4)" fg:x="1100" fg:w="3"/><text x="88.6034%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="88.3534%" y="229" width="0.2410%" height="15" fill="rgb(221,1,32)" fg:x="1100" fg:w="3"/><text x="88.6034%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="88.6747%" y="181" width="0.1606%" height="15" fill="rgb(242,117,10)" fg:x="1104" fg:w="2"/><text x="88.9247%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="88.6747%" y="165" width="0.1606%" height="15" fill="rgb(249,172,44)" fg:x="1104" fg:w="2"/><text x="88.9247%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.7550%" y="149" width="0.0803%" height="15" fill="rgb(244,46,45)" fg:x="1105" fg:w="1"/><text x="89.0050%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.7550%" y="133" width="0.0803%" height="15" fill="rgb(206,43,17)" fg:x="1105" fg:w="1"/><text x="89.0050%" y="143.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="88.7550%" y="117" width="0.0803%" height="15" fill="rgb(239,218,39)" fg:x="1105" fg:w="1"/><text x="89.0050%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="88.7550%" y="101" width="0.0803%" height="15" fill="rgb(208,169,54)" fg:x="1105" fg:w="1"/><text x="89.0050%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.8353%" y="165" width="0.0803%" height="15" fill="rgb(247,25,42)" fg:x="1106" fg:w="1"/><text x="89.0853%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.8353%" y="149" width="0.0803%" height="15" fill="rgb(226,23,31)" fg:x="1106" fg:w="1"/><text x="89.0853%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.8353%" y="133" width="0.0803%" height="15" fill="rgb(247,16,28)" fg:x="1106" fg:w="1"/><text x="89.0853%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (14 samples, 1.12%)</title><rect x="88.8353%" y="181" width="1.1245%" height="15" fill="rgb(231,147,38)" fg:x="1106" fg:w="14"/><text x="89.0853%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (13 samples, 1.04%)</title><rect x="88.9157%" y="165" width="1.0442%" height="15" fill="rgb(253,81,48)" fg:x="1107" fg:w="13"/><text x="89.1657%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (13 samples, 1.04%)</title><rect x="88.9157%" y="149" width="1.0442%" height="15" fill="rgb(249,222,43)" fg:x="1107" fg:w="13"/><text x="89.1657%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 1.61%)</title><rect x="88.5944%" y="229" width="1.6064%" height="15" fill="rgb(221,3,27)" fg:x="1103" fg:w="20"/><text x="88.8444%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (20 samples, 1.61%)</title><rect x="88.5944%" y="213" width="1.6064%" height="15" fill="rgb(228,180,5)" fg:x="1103" fg:w="20"/><text x="88.8444%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (19 samples, 1.53%)</title><rect x="88.6747%" y="197" width="1.5261%" height="15" fill="rgb(227,131,42)" fg:x="1104" fg:w="19"/><text x="88.9247%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="89.9598%" y="181" width="0.2410%" height="15" fill="rgb(212,3,39)" fg:x="1120" fg:w="3"/><text x="90.2098%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.1205%" y="165" width="0.0803%" height="15" fill="rgb(226,45,5)" fg:x="1122" fg:w="1"/><text x="90.3705%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="90.2008%" y="213" width="0.1606%" height="15" fill="rgb(215,167,45)" fg:x="1123" fg:w="2"/><text x="90.4508%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="90.2008%" y="197" width="0.1606%" height="15" fill="rgb(250,218,53)" fg:x="1123" fg:w="2"/><text x="90.4508%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="90.2008%" y="181" width="0.1606%" height="15" fill="rgb(207,140,0)" fg:x="1123" fg:w="2"/><text x="90.4508%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.2811%" y="165" width="0.0803%" height="15" fill="rgb(238,133,51)" fg:x="1124" fg:w="1"/><text x="90.5311%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (24 samples, 1.93%)</title><rect x="88.5944%" y="245" width="1.9277%" height="15" fill="rgb(218,203,53)" fg:x="1103" fg:w="24"/><text x="88.8444%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="90.2008%" y="229" width="0.3213%" height="15" fill="rgb(226,184,25)" fg:x="1123" fg:w="4"/><text x="90.4508%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="90.3614%" y="213" width="0.1606%" height="15" fill="rgb(231,121,21)" fg:x="1125" fg:w="2"/><text x="90.6114%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.4418%" y="197" width="0.0803%" height="15" fill="rgb(251,14,34)" fg:x="1126" fg:w="1"/><text x="90.6918%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (32 samples, 2.57%)</title><rect x="88.0321%" y="261" width="2.5703%" height="15" fill="rgb(249,193,11)" fg:x="1096" fg:w="32"/><text x="88.2821%" y="271.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="90.5221%" y="245" width="0.0803%" height="15" fill="rgb(220,172,37)" fg:x="1127" fg:w="1"/><text x="90.7721%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="90.5221%" y="229" width="0.0803%" height="15" fill="rgb(231,229,43)" fg:x="1127" fg:w="1"/><text x="90.7721%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="90.5221%" y="213" width="0.0803%" height="15" fill="rgb(250,161,5)" fg:x="1127" fg:w="1"/><text x="90.7721%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.5221%" y="197" width="0.0803%" height="15" fill="rgb(218,225,18)" fg:x="1127" fg:w="1"/><text x="90.7721%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.5221%" y="181" width="0.0803%" height="15" fill="rgb(245,45,42)" fg:x="1127" fg:w="1"/><text x="90.7721%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.5221%" y="165" width="0.0803%" height="15" fill="rgb(211,115,1)" fg:x="1127" fg:w="1"/><text x="90.7721%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="90.6024%" y="213" width="0.0803%" height="15" fill="rgb(248,133,52)" fg:x="1128" fg:w="1"/><text x="90.8524%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="90.6024%" y="229" width="0.1606%" height="15" fill="rgb(238,100,21)" fg:x="1128" fg:w="2"/><text x="90.8524%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="90.6827%" y="213" width="0.0803%" height="15" fill="rgb(247,144,11)" fg:x="1129" fg:w="1"/><text x="90.9327%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.6827%" y="197" width="0.0803%" height="15" fill="rgb(206,164,16)" fg:x="1129" fg:w="1"/><text x="90.9327%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (37 samples, 2.97%)</title><rect x="87.8715%" y="309" width="2.9719%" height="15" fill="rgb(222,34,3)" fg:x="1094" fg:w="37"/><text x="88.1215%" y="319.50">reg..</text></g><g><title>regex::builders::string::RegexBuilder::build (37 samples, 2.97%)</title><rect x="87.8715%" y="293" width="2.9719%" height="15" fill="rgb(248,82,4)" fg:x="1094" fg:w="37"/><text x="88.1215%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (37 samples, 2.97%)</title><rect x="87.8715%" y="277" width="2.9719%" height="15" fill="rgb(228,81,46)" fg:x="1094" fg:w="37"/><text x="88.1215%" y="287.50">reg..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="90.6024%" y="261" width="0.2410%" height="15" fill="rgb(227,67,47)" fg:x="1128" fg:w="3"/><text x="90.8524%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="90.6024%" y="245" width="0.2410%" height="15" fill="rgb(215,93,53)" fg:x="1128" fg:w="3"/><text x="90.8524%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="90.7631%" y="229" width="0.0803%" height="15" fill="rgb(248,194,39)" fg:x="1130" fg:w="1"/><text x="91.0131%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (41 samples, 3.29%)</title><rect x="87.7108%" y="325" width="3.2932%" height="15" fill="rgb(215,5,19)" fg:x="1092" fg:w="41"/><text x="87.9608%" y="335.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="90.8434%" y="309" width="0.1606%" height="15" fill="rgb(226,215,51)" fg:x="1131" fg:w="2"/><text x="91.0934%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="90.8434%" y="293" width="0.1606%" height="15" fill="rgb(225,56,26)" fg:x="1131" fg:w="2"/><text x="91.0934%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="90.8434%" y="277" width="0.1606%" height="15" fill="rgb(222,75,29)" fg:x="1131" fg:w="2"/><text x="91.0934%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="90.8434%" y="261" width="0.1606%" height="15" fill="rgb(236,139,6)" fg:x="1131" fg:w="2"/><text x="91.0934%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="90.8434%" y="245" width="0.1606%" height="15" fill="rgb(223,137,36)" fg:x="1131" fg:w="2"/><text x="91.0934%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="90.9237%" y="229" width="0.0803%" height="15" fill="rgb(226,99,2)" fg:x="1132" fg:w="1"/><text x="91.1737%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="91.0040%" y="309" width="0.0803%" height="15" fill="rgb(206,133,23)" fg:x="1133" fg:w="1"/><text x="91.2540%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="91.0040%" y="293" width="0.0803%" height="15" fill="rgb(243,173,15)" fg:x="1133" fg:w="1"/><text x="91.2540%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="91.0040%" y="277" width="0.0803%" height="15" fill="rgb(228,69,28)" fg:x="1133" fg:w="1"/><text x="91.2540%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="91.0040%" y="261" width="0.0803%" height="15" fill="rgb(212,51,22)" fg:x="1133" fg:w="1"/><text x="91.2540%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.0040%" y="245" width="0.0803%" height="15" fill="rgb(227,113,0)" fg:x="1133" fg:w="1"/><text x="91.2540%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="91.0843%" y="293" width="0.0803%" height="15" fill="rgb(252,84,27)" fg:x="1134" fg:w="1"/><text x="91.3343%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="91.0843%" y="277" width="0.0803%" height="15" fill="rgb(223,145,39)" fg:x="1134" fg:w="1"/><text x="91.3343%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="91.0843%" y="261" width="0.0803%" height="15" fill="rgb(239,219,30)" fg:x="1134" fg:w="1"/><text x="91.3343%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="91.0843%" y="245" width="0.0803%" height="15" fill="rgb(224,196,39)" fg:x="1134" fg:w="1"/><text x="91.3343%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="91.1647%" y="213" width="0.0803%" height="15" fill="rgb(205,35,43)" fg:x="1135" fg:w="1"/><text x="91.4147%" y="223.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (4 samples, 0.32%)</title><rect x="91.0843%" y="309" width="0.3213%" height="15" fill="rgb(228,201,21)" fg:x="1134" fg:w="4"/><text x="91.3343%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="91.1647%" y="293" width="0.2410%" height="15" fill="rgb(237,118,16)" fg:x="1135" fg:w="3"/><text x="91.4147%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="91.1647%" y="277" width="0.2410%" height="15" fill="rgb(241,17,19)" fg:x="1135" fg:w="3"/><text x="91.4147%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="91.1647%" y="261" width="0.2410%" height="15" fill="rgb(214,10,25)" fg:x="1135" fg:w="3"/><text x="91.4147%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="91.1647%" y="245" width="0.2410%" height="15" fill="rgb(238,37,29)" fg:x="1135" fg:w="3"/><text x="91.4147%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="91.1647%" y="229" width="0.2410%" height="15" fill="rgb(253,83,25)" fg:x="1135" fg:w="3"/><text x="91.4147%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="91.2450%" y="213" width="0.1606%" height="15" fill="rgb(234,192,12)" fg:x="1136" fg:w="2"/><text x="91.4950%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.4056%" y="261" width="0.0803%" height="15" fill="rgb(241,216,45)" fg:x="1138" fg:w="1"/><text x="91.6556%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.4056%" y="245" width="0.0803%" height="15" fill="rgb(242,22,33)" fg:x="1138" fg:w="1"/><text x="91.6556%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.4859%" y="261" width="0.0803%" height="15" fill="rgb(231,105,49)" fg:x="1139" fg:w="1"/><text x="91.7359%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="91.5663%" y="245" width="0.1606%" height="15" fill="rgb(218,204,15)" fg:x="1140" fg:w="2"/><text x="91.8163%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="91.5663%" y="229" width="0.1606%" height="15" fill="rgb(235,138,41)" fg:x="1140" fg:w="2"/><text x="91.8163%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="91.7269%" y="245" width="0.1606%" height="15" fill="rgb(246,0,9)" fg:x="1142" fg:w="2"/><text x="91.9769%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="91.8072%" y="229" width="0.0803%" height="15" fill="rgb(210,74,4)" fg:x="1143" fg:w="1"/><text x="92.0572%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="91.9679%" y="213" width="0.0803%" height="15" fill="rgb(250,60,41)" fg:x="1145" fg:w="1"/><text x="92.2179%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.9679%" y="197" width="0.0803%" height="15" fill="rgb(220,115,12)" fg:x="1145" fg:w="1"/><text x="92.2179%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.9679%" y="181" width="0.0803%" height="15" fill="rgb(237,100,13)" fg:x="1145" fg:w="1"/><text x="92.2179%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.9679%" y="165" width="0.0803%" height="15" fill="rgb(213,55,26)" fg:x="1145" fg:w="1"/><text x="92.2179%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (8 samples, 0.64%)</title><rect x="91.8876%" y="245" width="0.6426%" height="15" fill="rgb(216,17,4)" fg:x="1144" fg:w="8"/><text x="92.1376%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (8 samples, 0.64%)</title><rect x="91.8876%" y="229" width="0.6426%" height="15" fill="rgb(220,153,47)" fg:x="1144" fg:w="8"/><text x="92.1376%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (6 samples, 0.48%)</title><rect x="92.0482%" y="213" width="0.4819%" height="15" fill="rgb(215,131,9)" fg:x="1146" fg:w="6"/><text x="92.2982%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (6 samples, 0.48%)</title><rect x="92.0482%" y="197" width="0.4819%" height="15" fill="rgb(233,46,42)" fg:x="1146" fg:w="6"/><text x="92.2982%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (6 samples, 0.48%)</title><rect x="92.0482%" y="181" width="0.4819%" height="15" fill="rgb(226,86,7)" fg:x="1146" fg:w="6"/><text x="92.2982%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="92.6104%" y="133" width="0.0803%" height="15" fill="rgb(239,226,21)" fg:x="1153" fg:w="1"/><text x="92.8604%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.6908%" y="133" width="0.0803%" height="15" fill="rgb(244,137,22)" fg:x="1154" fg:w="1"/><text x="92.9408%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.8514%" y="101" width="0.0803%" height="15" fill="rgb(211,139,35)" fg:x="1156" fg:w="1"/><text x="93.1014%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.8514%" y="85" width="0.0803%" height="15" fill="rgb(214,62,50)" fg:x="1156" fg:w="1"/><text x="93.1014%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.8514%" y="69" width="0.0803%" height="15" fill="rgb(212,113,44)" fg:x="1156" fg:w="1"/><text x="93.1014%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.0924%" y="85" width="0.0803%" height="15" fill="rgb(226,150,43)" fg:x="1159" fg:w="1"/><text x="93.3424%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.64%)</title><rect x="92.7711%" y="133" width="0.6426%" height="15" fill="rgb(250,71,37)" fg:x="1155" fg:w="8"/><text x="93.0211%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (7 samples, 0.56%)</title><rect x="92.8514%" y="117" width="0.5622%" height="15" fill="rgb(219,76,19)" fg:x="1156" fg:w="7"/><text x="93.1014%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.48%)</title><rect x="92.9317%" y="101" width="0.4819%" height="15" fill="rgb(250,39,11)" fg:x="1157" fg:w="6"/><text x="93.1817%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="93.1727%" y="85" width="0.2410%" height="15" fill="rgb(230,64,31)" fg:x="1160" fg:w="3"/><text x="93.4227%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="93.1727%" y="69" width="0.2410%" height="15" fill="rgb(208,222,23)" fg:x="1160" fg:w="3"/><text x="93.4227%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="93.1727%" y="53" width="0.2410%" height="15" fill="rgb(227,125,18)" fg:x="1160" fg:w="3"/><text x="93.4227%" y="63.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="93.2530%" y="37" width="0.1606%" height="15" fill="rgb(234,210,9)" fg:x="1161" fg:w="2"/><text x="93.5030%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (11 samples, 0.88%)</title><rect x="93.4137%" y="133" width="0.8835%" height="15" fill="rgb(217,127,24)" fg:x="1163" fg:w="11"/><text x="93.6637%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (11 samples, 0.88%)</title><rect x="93.4137%" y="117" width="0.8835%" height="15" fill="rgb(239,141,48)" fg:x="1163" fg:w="11"/><text x="93.6637%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (11 samples, 0.88%)</title><rect x="93.4137%" y="101" width="0.8835%" height="15" fill="rgb(227,109,8)" fg:x="1163" fg:w="11"/><text x="93.6637%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="94.2972%" y="133" width="0.1606%" height="15" fill="rgb(235,184,23)" fg:x="1174" fg:w="2"/><text x="94.5472%" y="143.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="94.4578%" y="133" width="0.0803%" height="15" fill="rgb(227,226,48)" fg:x="1176" fg:w="1"/><text x="94.7078%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 2.17%)</title><rect x="92.5301%" y="229" width="2.1687%" height="15" fill="rgb(206,150,11)" fg:x="1152" fg:w="27"/><text x="92.7801%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (27 samples, 2.17%)</title><rect x="92.5301%" y="213" width="2.1687%" height="15" fill="rgb(254,2,33)" fg:x="1152" fg:w="27"/><text x="92.7801%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (27 samples, 2.17%)</title><rect x="92.5301%" y="197" width="2.1687%" height="15" fill="rgb(243,160,20)" fg:x="1152" fg:w="27"/><text x="92.7801%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (27 samples, 2.17%)</title><rect x="92.5301%" y="181" width="2.1687%" height="15" fill="rgb(218,208,30)" fg:x="1152" fg:w="27"/><text x="92.7801%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (27 samples, 2.17%)</title><rect x="92.5301%" y="165" width="2.1687%" height="15" fill="rgb(224,120,49)" fg:x="1152" fg:w="27"/><text x="92.7801%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (27 samples, 2.17%)</title><rect x="92.5301%" y="149" width="2.1687%" height="15" fill="rgb(246,12,2)" fg:x="1152" fg:w="27"/><text x="92.7801%" y="159.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="94.5382%" y="133" width="0.1606%" height="15" fill="rgb(236,117,3)" fg:x="1177" fg:w="2"/><text x="94.7882%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.6185%" y="117" width="0.0803%" height="15" fill="rgb(216,128,52)" fg:x="1178" fg:w="1"/><text x="94.8685%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.6185%" y="101" width="0.0803%" height="15" fill="rgb(246,145,19)" fg:x="1178" fg:w="1"/><text x="94.8685%" y="111.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="94.6185%" y="85" width="0.0803%" height="15" fill="rgb(222,11,46)" fg:x="1178" fg:w="1"/><text x="94.8685%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="94.6185%" y="69" width="0.0803%" height="15" fill="rgb(245,82,36)" fg:x="1178" fg:w="1"/><text x="94.8685%" y="79.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="94.8594%" y="213" width="0.0803%" height="15" fill="rgb(250,73,51)" fg:x="1181" fg:w="1"/><text x="95.1094%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="94.8594%" y="197" width="0.0803%" height="15" fill="rgb(221,189,23)" fg:x="1181" fg:w="1"/><text x="95.1094%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (44 samples, 3.53%)</title><rect x="91.5663%" y="261" width="3.5341%" height="15" fill="rgb(210,33,7)" fg:x="1140" fg:w="44"/><text x="91.8163%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (32 samples, 2.57%)</title><rect x="92.5301%" y="245" width="2.5703%" height="15" fill="rgb(210,107,22)" fg:x="1152" fg:w="32"/><text x="92.7801%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="94.6988%" y="229" width="0.4016%" height="15" fill="rgb(222,116,37)" fg:x="1179" fg:w="5"/><text x="94.9488%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="94.9398%" y="213" width="0.1606%" height="15" fill="rgb(254,17,48)" fg:x="1182" fg:w="2"/><text x="95.1898%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.0201%" y="197" width="0.0803%" height="15" fill="rgb(224,36,32)" fg:x="1183" fg:w="1"/><text x="95.2701%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.0201%" y="181" width="0.0803%" height="15" fill="rgb(232,90,46)" fg:x="1183" fg:w="1"/><text x="95.2701%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.0201%" y="165" width="0.0803%" height="15" fill="rgb(241,66,40)" fg:x="1183" fg:w="1"/><text x="95.2701%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="95.1004%" y="229" width="0.0803%" height="15" fill="rgb(249,184,29)" fg:x="1184" fg:w="1"/><text x="95.3504%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="95.1004%" y="213" width="0.0803%" height="15" fill="rgb(231,181,1)" fg:x="1184" fg:w="1"/><text x="95.3504%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.1004%" y="197" width="0.0803%" height="15" fill="rgb(224,94,2)" fg:x="1184" fg:w="1"/><text x="95.3504%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.1004%" y="181" width="0.0803%" height="15" fill="rgb(229,170,15)" fg:x="1184" fg:w="1"/><text x="95.3504%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.1004%" y="165" width="0.0803%" height="15" fill="rgb(240,127,35)" fg:x="1184" fg:w="1"/><text x="95.3504%" y="175.50"></text></g><g><title>indefinite::rules::number::Number::check (53 samples, 4.26%)</title><rect x="91.0040%" y="325" width="4.2570%" height="15" fill="rgb(248,196,34)" fg:x="1133" fg:w="53"/><text x="91.2540%" y="335.50">indef..</text></g><g><title>regex::regex::string::Regex::new (48 samples, 3.86%)</title><rect x="91.4056%" y="309" width="3.8554%" height="15" fill="rgb(236,137,7)" fg:x="1138" fg:w="48"/><text x="91.6556%" y="319.50">rege..</text></g><g><title>regex::builders::string::RegexBuilder::build (48 samples, 3.86%)</title><rect x="91.4056%" y="293" width="3.8554%" height="15" fill="rgb(235,127,16)" fg:x="1138" fg:w="48"/><text x="91.6556%" y="303.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (48 samples, 3.86%)</title><rect x="91.4056%" y="277" width="3.8554%" height="15" fill="rgb(250,192,54)" fg:x="1138" fg:w="48"/><text x="91.6556%" y="287.50">rege..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="95.1004%" y="261" width="0.1606%" height="15" fill="rgb(218,98,20)" fg:x="1184" fg:w="2"/><text x="95.3504%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="95.1004%" y="245" width="0.1606%" height="15" fill="rgb(230,176,47)" fg:x="1184" fg:w="2"/><text x="95.3504%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="95.1807%" y="229" width="0.0803%" height="15" fill="rgb(244,2,33)" fg:x="1185" fg:w="1"/><text x="95.4307%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="95.2610%" y="293" width="0.0803%" height="15" fill="rgb(231,100,17)" fg:x="1186" fg:w="1"/><text x="95.5110%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="95.2610%" y="277" width="0.0803%" height="15" fill="rgb(245,23,12)" fg:x="1186" fg:w="1"/><text x="95.5110%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="95.2610%" y="261" width="0.0803%" height="15" fill="rgb(249,55,22)" fg:x="1186" fg:w="1"/><text x="95.5110%" y="271.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="95.2610%" y="245" width="0.0803%" height="15" fill="rgb(207,134,9)" fg:x="1186" fg:w="1"/><text x="95.5110%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="95.3414%" y="293" width="0.0803%" height="15" fill="rgb(218,134,0)" fg:x="1187" fg:w="1"/><text x="95.5914%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="95.3414%" y="277" width="0.0803%" height="15" fill="rgb(213,212,33)" fg:x="1187" fg:w="1"/><text x="95.5914%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="95.3414%" y="261" width="0.0803%" height="15" fill="rgb(252,106,18)" fg:x="1187" fg:w="1"/><text x="95.5914%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.3414%" y="245" width="0.0803%" height="15" fill="rgb(208,126,42)" fg:x="1187" fg:w="1"/><text x="95.5914%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.3414%" y="229" width="0.0803%" height="15" fill="rgb(246,175,29)" fg:x="1187" fg:w="1"/><text x="95.5914%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.4217%" y="245" width="0.0803%" height="15" fill="rgb(215,13,50)" fg:x="1188" fg:w="1"/><text x="95.6717%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.4217%" y="229" width="0.0803%" height="15" fill="rgb(216,172,15)" fg:x="1188" fg:w="1"/><text x="95.6717%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="95.4217%" y="213" width="0.0803%" height="15" fill="rgb(212,103,13)" fg:x="1188" fg:w="1"/><text x="95.6717%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.4217%" y="197" width="0.0803%" height="15" fill="rgb(231,171,36)" fg:x="1188" fg:w="1"/><text x="95.6717%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.4217%" y="181" width="0.0803%" height="15" fill="rgb(250,123,20)" fg:x="1188" fg:w="1"/><text x="95.6717%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.4217%" y="165" width="0.0803%" height="15" fill="rgb(212,53,50)" fg:x="1188" fg:w="1"/><text x="95.6717%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="95.5020%" y="245" width="0.0803%" height="15" fill="rgb(243,54,12)" fg:x="1189" fg:w="1"/><text x="95.7520%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.5020%" y="229" width="0.0803%" height="15" fill="rgb(234,101,34)" fg:x="1189" fg:w="1"/><text x="95.7520%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="95.5823%" y="229" width="0.0803%" height="15" fill="rgb(254,67,22)" fg:x="1190" fg:w="1"/><text x="95.8323%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="95.5823%" y="213" width="0.0803%" height="15" fill="rgb(250,35,47)" fg:x="1190" fg:w="1"/><text x="95.8323%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="95.5823%" y="197" width="0.0803%" height="15" fill="rgb(226,126,38)" fg:x="1190" fg:w="1"/><text x="95.8323%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="95.5823%" y="181" width="0.0803%" height="15" fill="rgb(216,138,53)" fg:x="1190" fg:w="1"/><text x="95.8323%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.5823%" y="165" width="0.0803%" height="15" fill="rgb(246,199,43)" fg:x="1190" fg:w="1"/><text x="95.8323%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.5823%" y="149" width="0.0803%" height="15" fill="rgb(232,125,11)" fg:x="1190" fg:w="1"/><text x="95.8323%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="95.5823%" y="133" width="0.0803%" height="15" fill="rgb(218,219,45)" fg:x="1190" fg:w="1"/><text x="95.8323%" y="143.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="95.6627%" y="229" width="0.1606%" height="15" fill="rgb(216,102,54)" fg:x="1191" fg:w="2"/><text x="95.9127%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="95.6627%" y="213" width="0.1606%" height="15" fill="rgb(250,228,7)" fg:x="1191" fg:w="2"/><text x="95.9127%" y="223.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="95.8233%" y="197" width="0.0803%" height="15" fill="rgb(226,125,25)" fg:x="1193" fg:w="1"/><text x="96.0733%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="95.9036%" y="197" width="0.0803%" height="15" fill="rgb(224,165,27)" fg:x="1194" fg:w="1"/><text x="96.1536%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="95.8233%" y="229" width="0.2410%" height="15" fill="rgb(233,86,3)" fg:x="1193" fg:w="3"/><text x="96.0733%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="95.8233%" y="213" width="0.2410%" height="15" fill="rgb(228,116,20)" fg:x="1193" fg:w="3"/><text x="96.0733%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="95.9839%" y="197" width="0.0803%" height="15" fill="rgb(209,192,17)" fg:x="1195" fg:w="1"/><text x="96.2339%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.9839%" y="181" width="0.0803%" height="15" fill="rgb(224,88,34)" fg:x="1195" fg:w="1"/><text x="96.2339%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (7 samples, 0.56%)</title><rect x="95.5823%" y="245" width="0.5622%" height="15" fill="rgb(233,38,6)" fg:x="1190" fg:w="7"/><text x="95.8323%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="96.0643%" y="229" width="0.0803%" height="15" fill="rgb(212,59,30)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="96.0643%" y="213" width="0.0803%" height="15" fill="rgb(213,80,3)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="96.0643%" y="197" width="0.0803%" height="15" fill="rgb(251,178,7)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.1446%" y="181" width="0.0803%" height="15" fill="rgb(213,154,26)" fg:x="1197" fg:w="1"/><text x="96.3946%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.1446%" y="165" width="0.0803%" height="15" fill="rgb(238,165,49)" fg:x="1197" fg:w="1"/><text x="96.3946%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.1446%" y="149" width="0.0803%" height="15" fill="rgb(248,91,46)" fg:x="1197" fg:w="1"/><text x="96.3946%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="96.1446%" y="213" width="0.1606%" height="15" fill="rgb(244,21,52)" fg:x="1197" fg:w="2"/><text x="96.3946%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="96.1446%" y="197" width="0.1606%" height="15" fill="rgb(247,122,20)" fg:x="1197" fg:w="2"/><text x="96.3946%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="96.2249%" y="181" width="0.0803%" height="15" fill="rgb(218,27,9)" fg:x="1198" fg:w="1"/><text x="96.4749%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="96.2249%" y="165" width="0.0803%" height="15" fill="rgb(246,7,6)" fg:x="1198" fg:w="1"/><text x="96.4749%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="96.1446%" y="245" width="0.2410%" height="15" fill="rgb(227,135,54)" fg:x="1197" fg:w="3"/><text x="96.3946%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="96.1446%" y="229" width="0.2410%" height="15" fill="rgb(247,14,11)" fg:x="1197" fg:w="3"/><text x="96.3946%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="96.3052%" y="213" width="0.0803%" height="15" fill="rgb(206,149,34)" fg:x="1199" fg:w="1"/><text x="96.5552%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.3855%" y="197" width="0.0803%" height="15" fill="rgb(227,228,4)" fg:x="1200" fg:w="1"/><text x="96.6355%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.3855%" y="181" width="0.0803%" height="15" fill="rgb(238,218,28)" fg:x="1200" fg:w="1"/><text x="96.6355%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.3855%" y="165" width="0.0803%" height="15" fill="rgb(252,86,40)" fg:x="1200" fg:w="1"/><text x="96.6355%" y="175.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (14 samples, 1.12%)</title><rect x="95.4217%" y="261" width="1.1245%" height="15" fill="rgb(251,225,11)" fg:x="1188" fg:w="14"/><text x="95.6717%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="96.3855%" y="245" width="0.1606%" height="15" fill="rgb(206,46,49)" fg:x="1200" fg:w="2"/><text x="96.6355%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="96.3855%" y="229" width="0.1606%" height="15" fill="rgb(245,128,24)" fg:x="1200" fg:w="2"/><text x="96.6355%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="96.3855%" y="213" width="0.1606%" height="15" fill="rgb(219,177,34)" fg:x="1200" fg:w="2"/><text x="96.6355%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="96.4659%" y="197" width="0.0803%" height="15" fill="rgb(218,60,48)" fg:x="1201" fg:w="1"/><text x="96.7159%" y="207.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="96.4659%" y="181" width="0.0803%" height="15" fill="rgb(221,11,5)" fg:x="1201" fg:w="1"/><text x="96.7159%" y="191.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (15 samples, 1.20%)</title><rect x="95.4217%" y="277" width="1.2048%" height="15" fill="rgb(220,148,13)" fg:x="1188" fg:w="15"/><text x="95.6717%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Config::match_kind (1 samples, 0.08%)</title><rect x="96.5462%" y="261" width="0.0803%" height="15" fill="rgb(210,16,3)" fg:x="1202" fg:w="1"/><text x="96.7962%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (16 samples, 1.29%)</title><rect x="95.4217%" y="293" width="1.2851%" height="15" fill="rgb(236,80,2)" fg:x="1188" fg:w="16"/><text x="95.6717%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="96.6265%" y="277" width="0.0803%" height="15" fill="rgb(239,129,19)" fg:x="1203" fg:w="1"/><text x="96.8765%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="96.6265%" y="261" width="0.0803%" height="15" fill="rgb(220,106,35)" fg:x="1203" fg:w="1"/><text x="96.8765%" y="271.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (124 samples, 9.96%)</title><rect x="87.0683%" y="405" width="9.9598%" height="15" fill="rgb(252,139,45)" fg:x="1084" fg:w="124"/><text x="87.3183%" y="415.50">&lt;&amp;kernel::mode..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (117 samples, 9.40%)</title><rect x="87.6305%" y="389" width="9.3976%" height="15" fill="rgb(229,8,36)" fg:x="1091" fg:w="117"/><text x="87.8805%" y="399.50">plugins_core:..</text></g><g><title>indefinite::indefinite (117 samples, 9.40%)</title><rect x="87.6305%" y="373" width="9.3976%" height="15" fill="rgb(230,126,33)" fg:x="1091" fg:w="117"/><text x="87.8805%" y="383.50">indefinite::i..</text></g><g><title>indefinite::methods::indefinite (117 samples, 9.40%)</title><rect x="87.6305%" y="357" width="9.3976%" height="15" fill="rgb(239,140,21)" fg:x="1091" fg:w="117"/><text x="87.8805%" y="367.50">indefinite::m..</text></g><g><title>indefinite::methods::apply_rules (117 samples, 9.40%)</title><rect x="87.6305%" y="341" width="9.3976%" height="15" fill="rgb(254,104,9)" fg:x="1091" fg:w="117"/><text x="87.8805%" y="351.50">indefinite::m..</text></g><g><title>indefinite::rules::other::Other::run (22 samples, 1.77%)</title><rect x="95.2610%" y="325" width="1.7671%" height="15" fill="rgb(239,52,14)" fg:x="1186" fg:w="22"/><text x="95.5110%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (22 samples, 1.77%)</title><rect x="95.2610%" y="309" width="1.7671%" height="15" fill="rgb(208,227,44)" fg:x="1186" fg:w="22"/><text x="95.5110%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="96.7068%" y="293" width="0.3213%" height="15" fill="rgb(246,18,19)" fg:x="1204" fg:w="4"/><text x="96.9568%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="96.7068%" y="277" width="0.3213%" height="15" fill="rgb(235,228,25)" fg:x="1204" fg:w="4"/><text x="96.9568%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="96.7068%" y="261" width="0.3213%" height="15" fill="rgb(240,156,20)" fg:x="1204" fg:w="4"/><text x="96.9568%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="96.7068%" y="245" width="0.3213%" height="15" fill="rgb(224,8,20)" fg:x="1204" fg:w="4"/><text x="96.9568%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="96.7068%" y="229" width="0.3213%" height="15" fill="rgb(214,12,52)" fg:x="1204" fg:w="4"/><text x="96.9568%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="96.8675%" y="213" width="0.1606%" height="15" fill="rgb(211,220,47)" fg:x="1206" fg:w="2"/><text x="97.1175%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.0281%" y="389" width="0.0803%" height="15" fill="rgb(250,173,5)" fg:x="1208" fg:w="1"/><text x="97.2781%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.0281%" y="373" width="0.0803%" height="15" fill="rgb(250,125,52)" fg:x="1208" fg:w="1"/><text x="97.2781%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.0281%" y="357" width="0.0803%" height="15" fill="rgb(209,133,18)" fg:x="1208" fg:w="1"/><text x="97.2781%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.0281%" y="341" width="0.0803%" height="15" fill="rgb(216,173,22)" fg:x="1208" fg:w="1"/><text x="97.2781%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.0281%" y="325" width="0.0803%" height="15" fill="rgb(205,3,22)" fg:x="1208" fg:w="1"/><text x="97.2781%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.0281%" y="309" width="0.0803%" height="15" fill="rgb(248,22,20)" fg:x="1208" fg:w="1"/><text x="97.2781%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.0281%" y="293" width="0.0803%" height="15" fill="rgb(233,6,29)" fg:x="1208" fg:w="1"/><text x="97.2781%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.0281%" y="277" width="0.0803%" height="15" fill="rgb(240,22,54)" fg:x="1208" fg:w="1"/><text x="97.2781%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.0281%" y="261" width="0.0803%" height="15" fill="rgb(231,133,32)" fg:x="1208" fg:w="1"/><text x="97.2781%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.0281%" y="245" width="0.0803%" height="15" fill="rgb(248,193,4)" fg:x="1208" fg:w="1"/><text x="97.2781%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.0281%" y="229" width="0.0803%" height="15" fill="rgb(211,178,46)" fg:x="1208" fg:w="1"/><text x="97.2781%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.0281%" y="213" width="0.0803%" height="15" fill="rgb(224,5,42)" fg:x="1208" fg:w="1"/><text x="97.2781%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.0281%" y="197" width="0.0803%" height="15" fill="rgb(239,176,25)" fg:x="1208" fg:w="1"/><text x="97.2781%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.0281%" y="181" width="0.0803%" height="15" fill="rgb(245,187,50)" fg:x="1208" fg:w="1"/><text x="97.2781%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.1084%" y="389" width="0.0803%" height="15" fill="rgb(248,24,15)" fg:x="1209" fg:w="1"/><text x="97.3584%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="97.0281%" y="405" width="0.2410%" height="15" fill="rgb(205,166,13)" fg:x="1208" fg:w="3"/><text x="97.2781%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.1888%" y="389" width="0.0803%" height="15" fill="rgb(208,114,23)" fg:x="1210" fg:w="1"/><text x="97.4388%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1888%" y="373" width="0.0803%" height="15" fill="rgb(239,127,18)" fg:x="1210" fg:w="1"/><text x="97.4388%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.1888%" y="357" width="0.0803%" height="15" fill="rgb(219,154,28)" fg:x="1210" fg:w="1"/><text x="97.4388%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="97.2691%" y="373" width="0.0803%" height="15" fill="rgb(225,157,23)" fg:x="1211" fg:w="1"/><text x="97.5191%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="97.2691%" y="357" width="0.0803%" height="15" fill="rgb(219,8,6)" fg:x="1211" fg:w="1"/><text x="97.5191%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.2691%" y="341" width="0.0803%" height="15" fill="rgb(212,47,6)" fg:x="1211" fg:w="1"/><text x="97.5191%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.2691%" y="325" width="0.0803%" height="15" fill="rgb(224,190,4)" fg:x="1211" fg:w="1"/><text x="97.5191%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.2691%" y="309" width="0.0803%" height="15" fill="rgb(239,183,29)" fg:x="1211" fg:w="1"/><text x="97.5191%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.2691%" y="293" width="0.0803%" height="15" fill="rgb(213,57,7)" fg:x="1211" fg:w="1"/><text x="97.5191%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.2691%" y="277" width="0.0803%" height="15" fill="rgb(216,148,1)" fg:x="1211" fg:w="1"/><text x="97.5191%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.2691%" y="261" width="0.0803%" height="15" fill="rgb(236,182,29)" fg:x="1211" fg:w="1"/><text x="97.5191%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.3494%" y="357" width="0.1606%" height="15" fill="rgb(244,120,48)" fg:x="1212" fg:w="2"/><text x="97.5994%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.3494%" y="341" width="0.1606%" height="15" fill="rgb(206,71,34)" fg:x="1212" fg:w="2"/><text x="97.5994%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.3494%" y="325" width="0.1606%" height="15" fill="rgb(242,32,6)" fg:x="1212" fg:w="2"/><text x="97.5994%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.4297%" y="309" width="0.0803%" height="15" fill="rgb(241,35,3)" fg:x="1213" fg:w="1"/><text x="97.6797%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.4297%" y="293" width="0.0803%" height="15" fill="rgb(222,62,19)" fg:x="1213" fg:w="1"/><text x="97.6797%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.4297%" y="277" width="0.0803%" height="15" fill="rgb(223,110,41)" fg:x="1213" fg:w="1"/><text x="97.6797%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.4297%" y="261" width="0.0803%" height="15" fill="rgb(208,224,4)" fg:x="1213" fg:w="1"/><text x="97.6797%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.4297%" y="245" width="0.0803%" height="15" fill="rgb(241,137,19)" fg:x="1213" fg:w="1"/><text x="97.6797%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.4297%" y="229" width="0.0803%" height="15" fill="rgb(244,24,17)" fg:x="1213" fg:w="1"/><text x="97.6797%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.4297%" y="213" width="0.0803%" height="15" fill="rgb(245,178,49)" fg:x="1213" fg:w="1"/><text x="97.6797%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.4297%" y="197" width="0.0803%" height="15" fill="rgb(219,160,38)" fg:x="1213" fg:w="1"/><text x="97.6797%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.4297%" y="181" width="0.0803%" height="15" fill="rgb(228,137,14)" fg:x="1213" fg:w="1"/><text x="97.6797%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.4297%" y="165" width="0.0803%" height="15" fill="rgb(237,134,11)" fg:x="1213" fg:w="1"/><text x="97.6797%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.4297%" y="149" width="0.0803%" height="15" fill="rgb(211,126,44)" fg:x="1213" fg:w="1"/><text x="97.6797%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="97.4297%" y="133" width="0.0803%" height="15" fill="rgb(226,171,33)" fg:x="1213" fg:w="1"/><text x="97.6797%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="97.4297%" y="117" width="0.0803%" height="15" fill="rgb(253,99,13)" fg:x="1213" fg:w="1"/><text x="97.6797%" y="127.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (4 samples, 0.32%)</title><rect x="97.2691%" y="389" width="0.3213%" height="15" fill="rgb(244,48,7)" fg:x="1211" fg:w="4"/><text x="97.5191%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="97.3494%" y="373" width="0.2410%" height="15" fill="rgb(244,217,54)" fg:x="1212" fg:w="3"/><text x="97.5994%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.5100%" y="357" width="0.0803%" height="15" fill="rgb(224,15,18)" fg:x="1214" fg:w="1"/><text x="97.7600%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.5100%" y="341" width="0.0803%" height="15" fill="rgb(244,99,12)" fg:x="1214" fg:w="1"/><text x="97.7600%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.5100%" y="325" width="0.0803%" height="15" fill="rgb(233,226,8)" fg:x="1214" fg:w="1"/><text x="97.7600%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.5100%" y="309" width="0.0803%" height="15" fill="rgb(229,211,3)" fg:x="1214" fg:w="1"/><text x="97.7600%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.5100%" y="293" width="0.0803%" height="15" fill="rgb(216,140,21)" fg:x="1214" fg:w="1"/><text x="97.7600%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.5100%" y="277" width="0.0803%" height="15" fill="rgb(234,122,30)" fg:x="1214" fg:w="1"/><text x="97.7600%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5904%" y="325" width="0.0803%" height="15" fill="rgb(236,25,46)" fg:x="1215" fg:w="1"/><text x="97.8404%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5904%" y="309" width="0.0803%" height="15" fill="rgb(217,52,54)" fg:x="1215" fg:w="1"/><text x="97.8404%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5904%" y="293" width="0.0803%" height="15" fill="rgb(222,29,26)" fg:x="1215" fg:w="1"/><text x="97.8404%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.5904%" y="277" width="0.0803%" height="15" fill="rgb(216,177,29)" fg:x="1215" fg:w="1"/><text x="97.8404%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.5904%" y="261" width="0.0803%" height="15" fill="rgb(247,136,51)" fg:x="1215" fg:w="1"/><text x="97.8404%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.5904%" y="245" width="0.0803%" height="15" fill="rgb(231,47,47)" fg:x="1215" fg:w="1"/><text x="97.8404%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.5904%" y="229" width="0.0803%" height="15" fill="rgb(211,192,36)" fg:x="1215" fg:w="1"/><text x="97.8404%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.5904%" y="213" width="0.0803%" height="15" fill="rgb(229,156,32)" fg:x="1215" fg:w="1"/><text x="97.8404%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.5904%" y="197" width="0.0803%" height="15" fill="rgb(248,213,20)" fg:x="1215" fg:w="1"/><text x="97.8404%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.5904%" y="181" width="0.0803%" height="15" fill="rgb(217,64,7)" fg:x="1215" fg:w="1"/><text x="97.8404%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.5904%" y="165" width="0.0803%" height="15" fill="rgb(232,142,8)" fg:x="1215" fg:w="1"/><text x="97.8404%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.5904%" y="149" width="0.0803%" height="15" fill="rgb(224,92,44)" fg:x="1215" fg:w="1"/><text x="97.8404%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.5904%" y="133" width="0.0803%" height="15" fill="rgb(214,169,17)" fg:x="1215" fg:w="1"/><text x="97.8404%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.5904%" y="117" width="0.0803%" height="15" fill="rgb(210,59,37)" fg:x="1215" fg:w="1"/><text x="97.8404%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5904%" y="101" width="0.0803%" height="15" fill="rgb(214,116,48)" fg:x="1215" fg:w="1"/><text x="97.8404%" y="111.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="97.6707%" y="325" width="0.0803%" height="15" fill="rgb(244,191,6)" fg:x="1216" fg:w="1"/><text x="97.9207%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6707%" y="309" width="0.0803%" height="15" fill="rgb(241,50,52)" fg:x="1216" fg:w="1"/><text x="97.9207%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6707%" y="293" width="0.0803%" height="15" fill="rgb(236,75,39)" fg:x="1216" fg:w="1"/><text x="97.9207%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.56%)</title><rect x="97.2691%" y="405" width="0.5622%" height="15" fill="rgb(236,99,0)" fg:x="1211" fg:w="7"/><text x="97.5191%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="97.5904%" y="389" width="0.2410%" height="15" fill="rgb(207,202,15)" fg:x="1215" fg:w="3"/><text x="97.8404%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="97.5904%" y="373" width="0.2410%" height="15" fill="rgb(233,207,14)" fg:x="1215" fg:w="3"/><text x="97.8404%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="97.5904%" y="357" width="0.2410%" height="15" fill="rgb(226,27,51)" fg:x="1215" fg:w="3"/><text x="97.8404%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="97.5904%" y="341" width="0.2410%" height="15" fill="rgb(206,104,42)" fg:x="1215" fg:w="3"/><text x="97.8404%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="97.7510%" y="325" width="0.0803%" height="15" fill="rgb(212,225,4)" fg:x="1217" fg:w="1"/><text x="98.0010%" y="335.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="97.7510%" y="309" width="0.0803%" height="15" fill="rgb(233,96,42)" fg:x="1217" fg:w="1"/><text x="98.0010%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.7510%" y="293" width="0.0803%" height="15" fill="rgb(229,21,32)" fg:x="1217" fg:w="1"/><text x="98.0010%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.7510%" y="277" width="0.0803%" height="15" fill="rgb(226,216,24)" fg:x="1217" fg:w="1"/><text x="98.0010%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.7510%" y="261" width="0.0803%" height="15" fill="rgb(221,163,17)" fg:x="1217" fg:w="1"/><text x="98.0010%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.7510%" y="245" width="0.0803%" height="15" fill="rgb(216,216,42)" fg:x="1217" fg:w="1"/><text x="98.0010%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.7510%" y="229" width="0.0803%" height="15" fill="rgb(240,118,7)" fg:x="1217" fg:w="1"/><text x="98.0010%" y="239.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (143 samples, 11.49%)</title><rect x="86.4257%" y="565" width="11.4859%" height="15" fill="rgb(221,67,37)" fg:x="1076" fg:w="143"/><text x="86.6757%" y="575.50">kernel::plugins::..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (143 samples, 11.49%)</title><rect x="86.4257%" y="549" width="11.4859%" height="15" fill="rgb(241,32,44)" fg:x="1076" fg:w="143"/><text x="86.6757%" y="559.50">&lt;plugins_dynlib::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (143 samples, 11.49%)</title><rect x="86.4257%" y="533" width="11.4859%" height="15" fill="rgb(235,204,43)" fg:x="1076" fg:w="143"/><text x="86.6757%" y="543.50">kernel::plugins::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (143 samples, 11.49%)</title><rect x="86.4257%" y="517" width="11.4859%" height="15" fill="rgb(213,116,10)" fg:x="1076" fg:w="143"/><text x="86.6757%" y="527.50">core::ops::functi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (143 samples, 11.49%)</title><rect x="86.4257%" y="501" width="11.4859%" height="15" fill="rgb(239,15,48)" fg:x="1076" fg:w="143"/><text x="86.6757%" y="511.50">kernel::plugins::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (143 samples, 11.49%)</title><rect x="86.4257%" y="485" width="11.4859%" height="15" fill="rgb(207,123,36)" fg:x="1076" fg:w="143"/><text x="86.6757%" y="495.50">core::ops::functi..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (143 samples, 11.49%)</title><rect x="86.4257%" y="469" width="11.4859%" height="15" fill="rgb(209,103,30)" fg:x="1076" fg:w="143"/><text x="86.6757%" y="479.50">&lt;alloc::boxed::Bo..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (143 samples, 11.49%)</title><rect x="86.4257%" y="453" width="11.4859%" height="15" fill="rgb(238,100,19)" fg:x="1076" fg:w="143"/><text x="86.6757%" y="463.50">&lt;engine::session:..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (143 samples, 11.49%)</title><rect x="86.4257%" y="437" width="11.4859%" height="15" fill="rgb(244,30,14)" fg:x="1076" fg:w="143"/><text x="86.6757%" y="447.50">&lt;plugins_core::lo..</text></g><g><title>plugins_core::looking::model::new_area_observation (136 samples, 10.92%)</title><rect x="86.9880%" y="421" width="10.9237%" height="15" fill="rgb(249,174,6)" fg:x="1083" fg:w="136"/><text x="87.2380%" y="431.50">plugins_core::lo..</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="97.8313%" y="405" width="0.0803%" height="15" fill="rgb(235,213,41)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.9116%" y="517" width="0.0803%" height="15" fill="rgb(213,118,6)" fg:x="1219" fg:w="1"/><text x="98.1616%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="97.9116%" y="501" width="0.0803%" height="15" fill="rgb(235,44,51)" fg:x="1219" fg:w="1"/><text x="98.1616%" y="511.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="98.0723%" y="469" width="0.0803%" height="15" fill="rgb(217,9,53)" fg:x="1221" fg:w="1"/><text x="98.3223%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="98.1526%" y="453" width="0.0803%" height="15" fill="rgb(237,172,34)" fg:x="1222" fg:w="1"/><text x="98.4026%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1526%" y="437" width="0.0803%" height="15" fill="rgb(206,206,11)" fg:x="1222" fg:w="1"/><text x="98.4026%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1526%" y="421" width="0.0803%" height="15" fill="rgb(214,149,29)" fg:x="1222" fg:w="1"/><text x="98.4026%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.1526%" y="405" width="0.0803%" height="15" fill="rgb(208,123,3)" fg:x="1222" fg:w="1"/><text x="98.4026%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1526%" y="389" width="0.0803%" height="15" fill="rgb(229,126,4)" fg:x="1222" fg:w="1"/><text x="98.4026%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1526%" y="373" width="0.0803%" height="15" fill="rgb(222,92,36)" fg:x="1222" fg:w="1"/><text x="98.4026%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1526%" y="357" width="0.0803%" height="15" fill="rgb(216,39,41)" fg:x="1222" fg:w="1"/><text x="98.4026%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.1526%" y="341" width="0.0803%" height="15" fill="rgb(253,127,28)" fg:x="1222" fg:w="1"/><text x="98.4026%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="98.2329%" y="405" width="0.0803%" height="15" fill="rgb(249,152,51)" fg:x="1223" fg:w="1"/><text x="98.4829%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="98.2329%" y="453" width="0.1606%" height="15" fill="rgb(209,123,42)" fg:x="1223" fg:w="2"/><text x="98.4829%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.2329%" y="437" width="0.1606%" height="15" fill="rgb(241,118,22)" fg:x="1223" fg:w="2"/><text x="98.4829%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.2329%" y="421" width="0.1606%" height="15" fill="rgb(208,25,7)" fg:x="1223" fg:w="2"/><text x="98.4829%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.3133%" y="405" width="0.0803%" height="15" fill="rgb(243,144,39)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3133%" y="389" width="0.0803%" height="15" fill="rgb(250,50,5)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.3133%" y="373" width="0.0803%" height="15" fill="rgb(207,67,11)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3133%" y="357" width="0.0803%" height="15" fill="rgb(245,204,40)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3133%" y="341" width="0.0803%" height="15" fill="rgb(238,228,24)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.3936%" y="357" width="0.0803%" height="15" fill="rgb(217,116,22)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3936%" y="341" width="0.0803%" height="15" fill="rgb(234,98,12)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.3936%" y="325" width="0.0803%" height="15" fill="rgb(242,170,50)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3936%" y="309" width="0.0803%" height="15" fill="rgb(235,7,5)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.3936%" y="293" width="0.0803%" height="15" fill="rgb(241,114,28)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3936%" y="277" width="0.0803%" height="15" fill="rgb(246,112,42)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.3936%" y="261" width="0.0803%" height="15" fill="rgb(248,228,14)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.3936%" y="245" width="0.0803%" height="15" fill="rgb(208,133,18)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="98.3936%" y="229" width="0.0803%" height="15" fill="rgb(207,35,49)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="239.50"></text></g><g><title>plugins_core::tools::contained_by (8 samples, 0.64%)</title><rect x="97.9116%" y="533" width="0.6426%" height="15" fill="rgb(205,68,36)" fg:x="1219" fg:w="8"/><text x="98.1616%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (7 samples, 0.56%)</title><rect x="97.9920%" y="517" width="0.5622%" height="15" fill="rgb(245,62,40)" fg:x="1220" fg:w="7"/><text x="98.2420%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.48%)</title><rect x="98.0723%" y="501" width="0.4819%" height="15" fill="rgb(228,27,24)" fg:x="1221" fg:w="6"/><text x="98.3223%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="98.0723%" y="485" width="0.4819%" height="15" fill="rgb(253,19,12)" fg:x="1221" fg:w="6"/><text x="98.3223%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="98.1526%" y="469" width="0.4016%" height="15" fill="rgb(232,28,20)" fg:x="1222" fg:w="5"/><text x="98.4026%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="98.3936%" y="453" width="0.1606%" height="15" fill="rgb(218,35,51)" fg:x="1225" fg:w="2"/><text x="98.6436%" y="463.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="98.3936%" y="437" width="0.1606%" height="15" fill="rgb(212,90,40)" fg:x="1225" fg:w="2"/><text x="98.6436%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.3936%" y="421" width="0.1606%" height="15" fill="rgb(220,172,12)" fg:x="1225" fg:w="2"/><text x="98.6436%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.3936%" y="405" width="0.1606%" height="15" fill="rgb(226,159,20)" fg:x="1225" fg:w="2"/><text x="98.6436%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.3936%" y="389" width="0.1606%" height="15" fill="rgb(234,205,16)" fg:x="1225" fg:w="2"/><text x="98.6436%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.3936%" y="373" width="0.1606%" height="15" fill="rgb(207,9,39)" fg:x="1225" fg:w="2"/><text x="98.6436%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.4739%" y="357" width="0.0803%" height="15" fill="rgb(249,143,15)" fg:x="1226" fg:w="1"/><text x="98.7239%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5542%" y="501" width="0.0803%" height="15" fill="rgb(253,133,29)" fg:x="1227" fg:w="1"/><text x="98.8042%" y="511.50"></text></g><g><title>engine::session::Session::captured (158 samples, 12.69%)</title><rect x="86.0241%" y="709" width="12.6908%" height="15" fill="rgb(221,187,0)" fg:x="1071" fg:w="158"/><text x="86.2741%" y="719.50">engine::session::Se..</text></g><g><title>engine::session::logs::capture (158 samples, 12.69%)</title><rect x="86.0241%" y="693" width="12.6908%" height="15" fill="rgb(205,204,26)" fg:x="1071" fg:w="158"/><text x="86.2741%" y="703.50">engine::session::lo..</text></g><g><title>tracing_core::dispatcher::with_default (157 samples, 12.61%)</title><rect x="86.1044%" y="677" width="12.6104%" height="15" fill="rgb(224,68,54)" fg:x="1072" fg:w="157"/><text x="86.3544%" y="687.50">tracing_core::dispa..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (157 samples, 12.61%)</title><rect x="86.1044%" y="661" width="12.6104%" height="15" fill="rgb(209,67,4)" fg:x="1072" fg:w="157"/><text x="86.3544%" y="671.50">&lt;engine::session::S..</text></g><g><title>kernel::plugins::mw::apply_middleware (156 samples, 12.53%)</title><rect x="86.1847%" y="645" width="12.5301%" height="15" fill="rgb(228,229,18)" fg:x="1073" fg:w="156"/><text x="86.4347%" y="655.50">kernel::plugins::mw..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (156 samples, 12.53%)</title><rect x="86.1847%" y="629" width="12.5301%" height="15" fill="rgb(231,89,13)" fg:x="1073" fg:w="156"/><text x="86.4347%" y="639.50">kernel::plugins::mw..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (156 samples, 12.53%)</title><rect x="86.1847%" y="613" width="12.5301%" height="15" fill="rgb(210,182,18)" fg:x="1073" fg:w="156"/><text x="86.4347%" y="623.50">&lt;engine::session::E..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (153 samples, 12.29%)</title><rect x="86.4257%" y="597" width="12.2892%" height="15" fill="rgb(240,105,2)" fg:x="1076" fg:w="153"/><text x="86.6757%" y="607.50">kernel::plugins::m..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (153 samples, 12.29%)</title><rect x="86.4257%" y="581" width="12.2892%" height="15" fill="rgb(207,170,50)" fg:x="1076" fg:w="153"/><text x="86.6757%" y="591.50">&lt;plugins_rune::Run..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (10 samples, 0.80%)</title><rect x="97.9116%" y="565" width="0.8032%" height="15" fill="rgb(232,133,24)" fg:x="1219" fg:w="10"/><text x="98.1616%" y="575.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (10 samples, 0.80%)</title><rect x="97.9116%" y="549" width="0.8032%" height="15" fill="rgb(235,166,27)" fg:x="1219" fg:w="10"/><text x="98.1616%" y="559.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="98.5542%" y="533" width="0.1606%" height="15" fill="rgb(209,19,13)" fg:x="1227" fg:w="2"/><text x="98.8042%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.5542%" y="517" width="0.1606%" height="15" fill="rgb(226,79,39)" fg:x="1227" fg:w="2"/><text x="98.8042%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.6345%" y="501" width="0.0803%" height="15" fill="rgb(222,163,10)" fg:x="1228" fg:w="1"/><text x="98.8845%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6345%" y="485" width="0.0803%" height="15" fill="rgb(214,44,19)" fg:x="1228" fg:w="1"/><text x="98.8845%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.6345%" y="469" width="0.0803%" height="15" fill="rgb(210,217,13)" fg:x="1228" fg:w="1"/><text x="98.8845%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.6345%" y="453" width="0.0803%" height="15" fill="rgb(237,61,54)" fg:x="1228" fg:w="1"/><text x="98.8845%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.6345%" y="437" width="0.0803%" height="15" fill="rgb(226,184,24)" fg:x="1228" fg:w="1"/><text x="98.8845%" y="447.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.6345%" y="421" width="0.0803%" height="15" fill="rgb(223,226,4)" fg:x="1228" fg:w="1"/><text x="98.8845%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.6345%" y="405" width="0.0803%" height="15" fill="rgb(210,26,41)" fg:x="1228" fg:w="1"/><text x="98.8845%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7952%" y="613" width="0.0803%" height="15" fill="rgb(220,221,6)" fg:x="1230" fg:w="1"/><text x="99.0452%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7952%" y="597" width="0.0803%" height="15" fill="rgb(225,89,49)" fg:x="1230" fg:w="1"/><text x="99.0452%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7952%" y="581" width="0.0803%" height="15" fill="rgb(218,70,45)" fg:x="1230" fg:w="1"/><text x="99.0452%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7952%" y="565" width="0.0803%" height="15" fill="rgb(238,166,21)" fg:x="1230" fg:w="1"/><text x="99.0452%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7952%" y="549" width="0.0803%" height="15" fill="rgb(224,141,44)" fg:x="1230" fg:w="1"/><text x="99.0452%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7952%" y="533" width="0.0803%" height="15" fill="rgb(230,12,49)" fg:x="1230" fg:w="1"/><text x="99.0452%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.7952%" y="517" width="0.0803%" height="15" fill="rgb(212,174,12)" fg:x="1230" fg:w="1"/><text x="99.0452%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.7952%" y="501" width="0.0803%" height="15" fill="rgb(246,67,9)" fg:x="1230" fg:w="1"/><text x="99.0452%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.7952%" y="485" width="0.0803%" height="15" fill="rgb(239,35,23)" fg:x="1230" fg:w="1"/><text x="99.0452%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.7952%" y="469" width="0.0803%" height="15" fill="rgb(211,167,0)" fg:x="1230" fg:w="1"/><text x="99.0452%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.7952%" y="453" width="0.0803%" height="15" fill="rgb(225,119,45)" fg:x="1230" fg:w="1"/><text x="99.0452%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.7952%" y="437" width="0.0803%" height="15" fill="rgb(210,162,6)" fg:x="1230" fg:w="1"/><text x="99.0452%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.7952%" y="421" width="0.0803%" height="15" fill="rgb(208,118,35)" fg:x="1230" fg:w="1"/><text x="99.0452%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.7952%" y="405" width="0.0803%" height="15" fill="rgb(239,4,53)" fg:x="1230" fg:w="1"/><text x="99.0452%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.7952%" y="389" width="0.0803%" height="15" fill="rgb(213,130,21)" fg:x="1230" fg:w="1"/><text x="99.0452%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.7952%" y="373" width="0.0803%" height="15" fill="rgb(235,148,0)" fg:x="1230" fg:w="1"/><text x="99.0452%" y="383.50"></text></g><g><title>engine::session::internal::Added::find_refs (3 samples, 0.24%)</title><rect x="98.7149%" y="693" width="0.2410%" height="15" fill="rgb(244,224,18)" fg:x="1229" fg:w="3"/><text x="98.9649%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.7149%" y="677" width="0.2410%" height="15" fill="rgb(211,214,4)" fg:x="1229" fg:w="3"/><text x="98.9649%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.7149%" y="661" width="0.2410%" height="15" fill="rgb(206,119,25)" fg:x="1229" fg:w="3"/><text x="98.9649%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.7149%" y="645" width="0.2410%" height="15" fill="rgb(243,93,47)" fg:x="1229" fg:w="3"/><text x="98.9649%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="98.7952%" y="629" width="0.1606%" height="15" fill="rgb(224,194,6)" fg:x="1230" fg:w="2"/><text x="99.0452%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.8755%" y="613" width="0.0803%" height="15" fill="rgb(243,229,6)" fg:x="1231" fg:w="1"/><text x="99.1255%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9558%" y="677" width="0.0803%" height="15" fill="rgb(207,23,50)" fg:x="1232" fg:w="1"/><text x="99.2058%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9558%" y="661" width="0.0803%" height="15" fill="rgb(253,192,32)" fg:x="1232" fg:w="1"/><text x="99.2058%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9558%" y="645" width="0.0803%" height="15" fill="rgb(213,21,6)" fg:x="1232" fg:w="1"/><text x="99.2058%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.9558%" y="629" width="0.0803%" height="15" fill="rgb(243,151,13)" fg:x="1232" fg:w="1"/><text x="99.2058%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9558%" y="613" width="0.0803%" height="15" fill="rgb(233,165,41)" fg:x="1232" fg:w="1"/><text x="99.2058%" y="623.50"></text></g><g><title>kernel::model::base::&lt;impl core::convert::From&lt;kernel::model::base::EntityGid&gt; for u64&gt;::from (1 samples, 0.08%)</title><rect x="99.0361%" y="677" width="0.0803%" height="15" fill="rgb(246,176,45)" fg:x="1233" fg:w="1"/><text x="99.2861%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.1165%" y="629" width="0.0803%" height="15" fill="rgb(217,170,52)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1165%" y="613" width="0.0803%" height="15" fill="rgb(214,203,54)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.1165%" y="597" width="0.0803%" height="15" fill="rgb(248,215,49)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1165%" y="581" width="0.0803%" height="15" fill="rgb(208,46,10)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1165%" y="565" width="0.0803%" height="15" fill="rgb(254,5,31)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.1165%" y="549" width="0.0803%" height="15" fill="rgb(222,104,33)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.1165%" y="533" width="0.0803%" height="15" fill="rgb(248,49,16)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.1165%" y="517" width="0.0803%" height="15" fill="rgb(232,198,41)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.1165%" y="677" width="0.1606%" height="15" fill="rgb(214,125,3)" fg:x="1234" fg:w="2"/><text x="99.3665%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.1165%" y="661" width="0.1606%" height="15" fill="rgb(229,220,28)" fg:x="1234" fg:w="2"/><text x="99.3665%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.1165%" y="645" width="0.1606%" height="15" fill="rgb(222,64,37)" fg:x="1234" fg:w="2"/><text x="99.3665%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1968%" y="629" width="0.0803%" height="15" fill="rgb(249,184,13)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1968%" y="613" width="0.0803%" height="15" fill="rgb(252,176,6)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="623.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.2771%" y="565" width="0.0803%" height="15" fill="rgb(228,153,7)" fg:x="1236" fg:w="1"/><text x="99.5271%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.2771%" y="581" width="0.1606%" height="15" fill="rgb(242,193,5)" fg:x="1236" fg:w="2"/><text x="99.5271%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3574%" y="565" width="0.0803%" height="15" fill="rgb(232,140,9)" fg:x="1237" fg:w="1"/><text x="99.6074%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3574%" y="549" width="0.0803%" height="15" fill="rgb(213,222,16)" fg:x="1237" fg:w="1"/><text x="99.6074%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3574%" y="533" width="0.0803%" height="15" fill="rgb(222,75,50)" fg:x="1237" fg:w="1"/><text x="99.6074%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.3574%" y="517" width="0.0803%" height="15" fill="rgb(205,180,2)" fg:x="1237" fg:w="1"/><text x="99.6074%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.80%)</title><rect x="98.7149%" y="709" width="0.8032%" height="15" fill="rgb(216,34,7)" fg:x="1229" fg:w="10"/><text x="98.9649%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="98.9558%" y="693" width="0.5622%" height="15" fill="rgb(253,16,32)" fg:x="1232" fg:w="7"/><text x="99.2058%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="99.2771%" y="677" width="0.2410%" height="15" fill="rgb(208,97,28)" fg:x="1236" fg:w="3"/><text x="99.5271%" y="687.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="99.2771%" y="661" width="0.2410%" height="15" fill="rgb(225,92,11)" fg:x="1236" fg:w="3"/><text x="99.5271%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="99.2771%" y="645" width="0.2410%" height="15" fill="rgb(243,38,12)" fg:x="1236" fg:w="3"/><text x="99.5271%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.2771%" y="629" width="0.2410%" height="15" fill="rgb(208,139,16)" fg:x="1236" fg:w="3"/><text x="99.5271%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="99.2771%" y="613" width="0.2410%" height="15" fill="rgb(227,24,9)" fg:x="1236" fg:w="3"/><text x="99.5271%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.2771%" y="597" width="0.2410%" height="15" fill="rgb(206,62,11)" fg:x="1236" fg:w="3"/><text x="99.5271%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.4378%" y="581" width="0.0803%" height="15" fill="rgb(228,134,27)" fg:x="1238" fg:w="1"/><text x="99.6878%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.4378%" y="565" width="0.0803%" height="15" fill="rgb(205,55,33)" fg:x="1238" fg:w="1"/><text x="99.6878%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4378%" y="549" width="0.0803%" height="15" fill="rgb(243,75,43)" fg:x="1238" fg:w="1"/><text x="99.6878%" y="559.50"></text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="99.5181%" y="709" width="0.1606%" height="15" fill="rgb(223,27,42)" fg:x="1239" fg:w="2"/><text x="99.7681%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="99.5181%" y="693" width="0.1606%" height="15" fill="rgb(232,189,33)" fg:x="1239" fg:w="2"/><text x="99.7681%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.5181%" y="677" width="0.1606%" height="15" fill="rgb(210,9,39)" fg:x="1239" fg:w="2"/><text x="99.7681%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5181%" y="661" width="0.1606%" height="15" fill="rgb(242,85,26)" fg:x="1239" fg:w="2"/><text x="99.7681%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.5181%" y="645" width="0.1606%" height="15" fill="rgb(248,44,4)" fg:x="1239" fg:w="2"/><text x="99.7681%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5181%" y="629" width="0.1606%" height="15" fill="rgb(250,96,46)" fg:x="1239" fg:w="2"/><text x="99.7681%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="99.5181%" y="613" width="0.1606%" height="15" fill="rgb(229,116,26)" fg:x="1239" fg:w="2"/><text x="99.7681%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.5984%" y="597" width="0.0803%" height="15" fill="rgb(246,94,34)" fg:x="1240" fg:w="1"/><text x="99.8484%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6787%" y="565" width="0.0803%" height="15" fill="rgb(251,73,21)" fg:x="1241" fg:w="1"/><text x="99.9287%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6787%" y="549" width="0.0803%" height="15" fill="rgb(254,121,25)" fg:x="1241" fg:w="1"/><text x="99.9287%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6787%" y="533" width="0.0803%" height="15" fill="rgb(215,161,49)" fg:x="1241" fg:w="1"/><text x="99.9287%" y="543.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.6787%" y="661" width="0.1606%" height="15" fill="rgb(221,43,13)" fg:x="1241" fg:w="2"/><text x="99.9287%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.6787%" y="645" width="0.1606%" height="15" fill="rgb(249,5,37)" fg:x="1241" fg:w="2"/><text x="99.9287%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6787%" y="629" width="0.1606%" height="15" fill="rgb(226,25,44)" fg:x="1241" fg:w="2"/><text x="99.9287%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.6787%" y="613" width="0.1606%" height="15" fill="rgb(238,189,16)" fg:x="1241" fg:w="2"/><text x="99.9287%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6787%" y="597" width="0.1606%" height="15" fill="rgb(251,186,8)" fg:x="1241" fg:w="2"/><text x="99.9287%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.6787%" y="581" width="0.1606%" height="15" fill="rgb(254,34,31)" fg:x="1241" fg:w="2"/><text x="99.9287%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7590%" y="565" width="0.0803%" height="15" fill="rgb(225,215,27)" fg:x="1242" fg:w="1"/><text x="100.0090%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7590%" y="549" width="0.0803%" height="15" fill="rgb(221,192,48)" fg:x="1242" fg:w="1"/><text x="100.0090%" y="559.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (174 samples, 13.98%)</title><rect x="85.9438%" y="741" width="13.9759%" height="15" fill="rgb(219,137,20)" fg:x="1070" fg:w="174"/><text x="86.1938%" y="751.50">engine::session::Sess..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (174 samples, 13.98%)</title><rect x="85.9438%" y="725" width="13.9759%" height="15" fill="rgb(219,84,11)" fg:x="1070" fg:w="174"/><text x="86.1938%" y="735.50">engine::session::Sess..</text></g><g><title>kernel::model::EntityPtrResolver::world (3 samples, 0.24%)</title><rect x="99.6787%" y="709" width="0.2410%" height="15" fill="rgb(224,10,23)" fg:x="1241" fg:w="3"/><text x="99.9287%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="99.6787%" y="693" width="0.2410%" height="15" fill="rgb(248,22,39)" fg:x="1241" fg:w="3"/><text x="99.9287%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.6787%" y="677" width="0.2410%" height="15" fill="rgb(212,154,20)" fg:x="1241" fg:w="3"/><text x="99.9287%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.8394%" y="661" width="0.0803%" height="15" fill="rgb(236,199,50)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="671.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.8394%" y="645" width="0.0803%" height="15" fill="rgb(211,9,17)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8394%" y="629" width="0.0803%" height="15" fill="rgb(243,216,36)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8394%" y="613" width="0.0803%" height="15" fill="rgb(250,2,10)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8394%" y="597" width="0.0803%" height="15" fill="rgb(226,50,48)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8394%" y="581" width="0.0803%" height="15" fill="rgb(243,81,16)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8394%" y="565" width="0.0803%" height="15" fill="rgb(250,14,2)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8394%" y="549" width="0.0803%" height="15" fill="rgb(233,135,29)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8394%" y="533" width="0.0803%" height="15" fill="rgb(224,64,43)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="543.50"></text></g><g><title>all (1,245 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(238,84,13)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-a3fc65a7 (1,245 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(253,48,26)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1087.50">simple-a3fc65a7</text></g><g><title>_start (1,245 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(205,223,31)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,245 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(221,41,32)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,245 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(213,158,31)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,245 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(245,126,43)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,245 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(227,7,22)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,245 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(252,90,44)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,245 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(253,91,0)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,245 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(252,175,49)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,245 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(246,150,1)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,245 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(241,192,25)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,245 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(239,187,11)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,245 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(218,202,51)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,245 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(225,176,8)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,245 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(219,122,41)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,245 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(248,140,20)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,245 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(245,41,37)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,245 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(235,82,39)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (316 samples, 25.38%)</title><rect x="74.6185%" y="789" width="25.3815%" height="15" fill="rgb(230,108,42)" fg:x="929" fg:w="316"/><text x="74.8685%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as c..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (316 samples, 25.38%)</title><rect x="74.6185%" y="773" width="25.3815%" height="15" fill="rgb(215,150,50)" fg:x="929" fg:w="316"/><text x="74.8685%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (316 samples, 25.38%)</title><rect x="74.6185%" y="757" width="25.3815%" height="15" fill="rgb(233,212,5)" fg:x="929" fg:w="316"/><text x="74.8685%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="99.9197%" y="741" width="0.0803%" height="15" fill="rgb(245,80,22)" fg:x="1244" fg:w="1"/><text x="100.1697%" y="751.50"></text></g></svg></svg>