<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1190" onload="init(evt)" viewBox="0 0 1200 1190" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1190" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1173.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1173.00"> </text><svg id="frames" x="10" width="1180" total_samples="1234"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="741" width="0.0810%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0810%" y="709" width="0.0810%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.3310%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;kernel::model::entity::ScopeValue&gt;&gt; (1 samples, 0.08%)</title><rect x="0.2431%" y="693" width="0.0810%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.4931%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.2431%" y="677" width="0.0810%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.4931%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="0.2431%" y="661" width="0.0810%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="0.4931%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.2431%" y="645" width="0.0810%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="0.4931%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2431%" y="629" width="0.0810%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="1"/><text x="0.4931%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="0.0000%" y="789" width="0.4862%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="6"/><text x="0.2500%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (6 samples, 0.49%)</title><rect x="0.0000%" y="773" width="0.4862%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="6"/><text x="0.2500%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="0.0000%" y="757" width="0.4862%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="6"/><text x="0.2500%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (5 samples, 0.41%)</title><rect x="0.0810%" y="741" width="0.4052%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="5"/><text x="0.3310%" y="751.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="0.0810%" y="725" width="0.4052%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="5"/><text x="0.3310%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.1621%" y="709" width="0.3241%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="4"/><text x="0.4121%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.3241%" y="693" width="0.1621%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="2"/><text x="0.5741%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="0.3241%" y="677" width="0.1621%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="2"/><text x="0.5741%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.3241%" y="661" width="0.1621%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="2"/><text x="0.5741%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4052%" y="645" width="0.0810%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="0.6552%" y="655.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="0.4862%" y="693" width="0.0810%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="1"/><text x="0.7362%" y="703.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="0.4862%" y="677" width="0.0810%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="1"/><text x="0.7362%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.4862%" y="661" width="0.0810%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="1"/><text x="0.7362%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.4862%" y="645" width="0.0810%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="1"/><text x="0.7362%" y="655.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.4862%" y="629" width="0.0810%" height="15" fill="rgb(235,183,28)" fg:x="6" fg:w="1"/><text x="0.7362%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.4862%" y="613" width="0.0810%" height="15" fill="rgb(221,5,38)" fg:x="6" fg:w="1"/><text x="0.7362%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.4862%" y="597" width="0.0810%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="1"/><text x="0.7362%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="0.4862%" y="581" width="0.0810%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="1"/><text x="0.7362%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.4862%" y="565" width="0.0810%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="1"/><text x="0.7362%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4862%" y="549" width="0.0810%" height="15" fill="rgb(225,111,53)" fg:x="6" fg:w="1"/><text x="0.7362%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="0.4862%" y="757" width="0.1621%" height="15" fill="rgb(238,160,17)" fg:x="6" fg:w="2"/><text x="0.7362%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="0.4862%" y="741" width="0.1621%" height="15" fill="rgb(214,148,48)" fg:x="6" fg:w="2"/><text x="0.7362%" y="751.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="0.4862%" y="725" width="0.1621%" height="15" fill="rgb(232,36,49)" fg:x="6" fg:w="2"/><text x="0.7362%" y="735.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="0.4862%" y="709" width="0.1621%" height="15" fill="rgb(209,103,24)" fg:x="6" fg:w="2"/><text x="0.7362%" y="719.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="0.5673%" y="693" width="0.0810%" height="15" fill="rgb(229,88,8)" fg:x="7" fg:w="1"/><text x="0.8173%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.5673%" y="677" width="0.0810%" height="15" fill="rgb(213,181,19)" fg:x="7" fg:w="1"/><text x="0.8173%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.5673%" y="661" width="0.0810%" height="15" fill="rgb(254,191,54)" fg:x="7" fg:w="1"/><text x="0.8173%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.5673%" y="645" width="0.0810%" height="15" fill="rgb(241,83,37)" fg:x="7" fg:w="1"/><text x="0.8173%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.5673%" y="629" width="0.0810%" height="15" fill="rgb(233,36,39)" fg:x="7" fg:w="1"/><text x="0.8173%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.5673%" y="613" width="0.0810%" height="15" fill="rgb(226,3,54)" fg:x="7" fg:w="1"/><text x="0.8173%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.5673%" y="597" width="0.0810%" height="15" fill="rgb(245,192,40)" fg:x="7" fg:w="1"/><text x="0.8173%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="0.5673%" y="581" width="0.0810%" height="15" fill="rgb(238,167,29)" fg:x="7" fg:w="1"/><text x="0.8173%" y="591.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="0.6483%" y="757" width="0.0810%" height="15" fill="rgb(232,182,51)" fg:x="8" fg:w="1"/><text x="0.8983%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.6483%" y="741" width="0.0810%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="1"/><text x="0.8983%" y="751.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="0.8104%" y="709" width="0.0810%" height="15" fill="rgb(208,69,12)" fg:x="10" fg:w="1"/><text x="1.0604%" y="719.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="0.8104%" y="693" width="0.0810%" height="15" fill="rgb(235,93,37)" fg:x="10" fg:w="1"/><text x="1.0604%" y="703.50"></text></g><g><title>__strerror_r (1 samples, 0.08%)</title><rect x="0.8104%" y="677" width="0.0810%" height="15" fill="rgb(213,116,39)" fg:x="10" fg:w="1"/><text x="1.0604%" y="687.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (6 samples, 0.49%)</title><rect x="0.4862%" y="789" width="0.4862%" height="15" fill="rgb(222,207,29)" fg:x="6" fg:w="6"/><text x="0.7362%" y="799.50"></text></g><g><title>engine::session::Session::new (6 samples, 0.49%)</title><rect x="0.4862%" y="773" width="0.4862%" height="15" fill="rgb(206,96,30)" fg:x="6" fg:w="6"/><text x="0.7362%" y="783.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (3 samples, 0.24%)</title><rect x="0.7293%" y="757" width="0.2431%" height="15" fill="rgb(218,138,4)" fg:x="9" fg:w="3"/><text x="0.9793%" y="767.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (2 samples, 0.16%)</title><rect x="0.8104%" y="741" width="0.1621%" height="15" fill="rgb(250,191,14)" fg:x="10" fg:w="2"/><text x="1.0604%" y="751.50"></text></g><g><title>libloading::os::unix::Library::open (2 samples, 0.16%)</title><rect x="0.8104%" y="725" width="0.1621%" height="15" fill="rgb(239,60,40)" fg:x="10" fg:w="2"/><text x="1.0604%" y="735.50"></text></g><g><title>dlopen (1 samples, 0.08%)</title><rect x="0.8914%" y="709" width="0.0810%" height="15" fill="rgb(206,27,48)" fg:x="11" fg:w="1"/><text x="1.1414%" y="719.50"></text></g><g><title>_dl_catch_error (1 samples, 0.08%)</title><rect x="0.8914%" y="693" width="0.0810%" height="15" fill="rgb(225,35,8)" fg:x="11" fg:w="1"/><text x="1.1414%" y="703.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="0.8914%" y="677" width="0.0810%" height="15" fill="rgb(250,213,24)" fg:x="11" fg:w="1"/><text x="1.1414%" y="687.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="0.8914%" y="661" width="0.0810%" height="15" fill="rgb(247,123,22)" fg:x="11" fg:w="1"/><text x="1.1414%" y="671.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="0.8914%" y="645" width="0.0810%" height="15" fill="rgb(231,138,38)" fg:x="11" fg:w="1"/><text x="1.1414%" y="655.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="0.9724%" y="741" width="0.0810%" height="15" fill="rgb(231,145,46)" fg:x="12" fg:w="1"/><text x="1.2224%" y="751.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="0.9724%" y="725" width="0.0810%" height="15" fill="rgb(251,118,11)" fg:x="12" fg:w="1"/><text x="1.2224%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="0.9724%" y="709" width="0.0810%" height="15" fill="rgb(217,147,25)" fg:x="12" fg:w="1"/><text x="1.2224%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="0.9724%" y="693" width="0.0810%" height="15" fill="rgb(247,81,37)" fg:x="12" fg:w="1"/><text x="1.2224%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="0.9724%" y="677" width="0.0810%" height="15" fill="rgb(209,12,38)" fg:x="12" fg:w="1"/><text x="1.2224%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="1.0535%" y="709" width="0.0810%" height="15" fill="rgb(227,1,9)" fg:x="13" fg:w="1"/><text x="1.3035%" y="719.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="1.0535%" y="693" width="0.0810%" height="15" fill="rgb(248,47,43)" fg:x="13" fg:w="1"/><text x="1.3035%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="1.0535%" y="677" width="0.0810%" height="15" fill="rgb(221,10,30)" fg:x="13" fg:w="1"/><text x="1.3035%" y="687.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="1.0535%" y="661" width="0.0810%" height="15" fill="rgb(210,229,1)" fg:x="13" fg:w="1"/><text x="1.3035%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.0535%" y="645" width="0.0810%" height="15" fill="rgb(222,148,37)" fg:x="13" fg:w="1"/><text x="1.3035%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.0535%" y="629" width="0.0810%" height="15" fill="rgb(234,67,33)" fg:x="13" fg:w="1"/><text x="1.3035%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.0535%" y="613" width="0.0810%" height="15" fill="rgb(247,98,35)" fg:x="13" fg:w="1"/><text x="1.3035%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1.1345%" y="693" width="0.0810%" height="15" fill="rgb(247,138,52)" fg:x="14" fg:w="1"/><text x="1.3845%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.1345%" y="677" width="0.0810%" height="15" fill="rgb(213,79,30)" fg:x="14" fg:w="1"/><text x="1.3845%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.1345%" y="661" width="0.0810%" height="15" fill="rgb(246,177,23)" fg:x="14" fg:w="1"/><text x="1.3845%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.1345%" y="645" width="0.0810%" height="15" fill="rgb(230,62,27)" fg:x="14" fg:w="1"/><text x="1.3845%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="1.2156%" y="677" width="0.1621%" height="15" fill="rgb(216,154,8)" fg:x="15" fg:w="2"/><text x="1.4656%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.2966%" y="661" width="0.0810%" height="15" fill="rgb(244,35,45)" fg:x="16" fg:w="1"/><text x="1.5466%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.3776%" y="661" width="0.0810%" height="15" fill="rgb(251,115,12)" fg:x="17" fg:w="1"/><text x="1.6276%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.3776%" y="645" width="0.0810%" height="15" fill="rgb(240,54,50)" fg:x="17" fg:w="1"/><text x="1.6276%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.4587%" y="645" width="0.0810%" height="15" fill="rgb(233,84,52)" fg:x="18" fg:w="1"/><text x="1.7087%" y="655.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.49%)</title><rect x="1.1345%" y="709" width="0.4862%" height="15" fill="rgb(207,117,47)" fg:x="14" fg:w="6"/><text x="1.3845%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="1.2156%" y="693" width="0.4052%" height="15" fill="rgb(249,43,39)" fg:x="15" fg:w="5"/><text x="1.4656%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="1.3776%" y="677" width="0.2431%" height="15" fill="rgb(209,38,44)" fg:x="17" fg:w="3"/><text x="1.6276%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.4587%" y="661" width="0.1621%" height="15" fill="rgb(236,212,23)" fg:x="18" fg:w="2"/><text x="1.7087%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.5397%" y="645" width="0.0810%" height="15" fill="rgb(242,79,21)" fg:x="19" fg:w="1"/><text x="1.7897%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.5397%" y="629" width="0.0810%" height="15" fill="rgb(211,96,35)" fg:x="19" fg:w="1"/><text x="1.7897%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.5397%" y="613" width="0.0810%" height="15" fill="rgb(253,215,40)" fg:x="19" fg:w="1"/><text x="1.7897%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="1.5397%" y="597" width="0.0810%" height="15" fill="rgb(211,81,21)" fg:x="19" fg:w="1"/><text x="1.7897%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.5397%" y="581" width="0.0810%" height="15" fill="rgb(208,190,38)" fg:x="19" fg:w="1"/><text x="1.7897%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.5397%" y="565" width="0.0810%" height="15" fill="rgb(235,213,38)" fg:x="19" fg:w="1"/><text x="1.7897%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.5397%" y="549" width="0.0810%" height="15" fill="rgb(237,122,38)" fg:x="19" fg:w="1"/><text x="1.7897%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.6207%" y="709" width="0.0810%" height="15" fill="rgb(244,218,35)" fg:x="20" fg:w="1"/><text x="1.8707%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="1.6207%" y="693" width="0.0810%" height="15" fill="rgb(240,68,47)" fg:x="20" fg:w="1"/><text x="1.8707%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.6207%" y="677" width="0.0810%" height="15" fill="rgb(210,16,53)" fg:x="20" fg:w="1"/><text x="1.8707%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.6207%" y="661" width="0.0810%" height="15" fill="rgb(235,124,12)" fg:x="20" fg:w="1"/><text x="1.8707%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.6207%" y="645" width="0.0810%" height="15" fill="rgb(224,169,11)" fg:x="20" fg:w="1"/><text x="1.8707%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="1.7828%" y="661" width="0.0810%" height="15" fill="rgb(250,166,2)" fg:x="22" fg:w="1"/><text x="2.0328%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="1.7828%" y="645" width="0.0810%" height="15" fill="rgb(242,216,29)" fg:x="22" fg:w="1"/><text x="2.0328%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.7828%" y="629" width="0.0810%" height="15" fill="rgb(230,116,27)" fg:x="22" fg:w="1"/><text x="2.0328%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="1.9449%" y="613" width="0.0810%" height="15" fill="rgb(228,99,48)" fg:x="24" fg:w="1"/><text x="2.1949%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="1.9449%" y="597" width="0.0810%" height="15" fill="rgb(253,11,6)" fg:x="24" fg:w="1"/><text x="2.1949%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.0259%" y="565" width="0.0810%" height="15" fill="rgb(247,143,39)" fg:x="25" fg:w="1"/><text x="2.2759%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.0259%" y="549" width="0.0810%" height="15" fill="rgb(236,97,10)" fg:x="25" fg:w="1"/><text x="2.2759%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.0259%" y="533" width="0.0810%" height="15" fill="rgb(233,208,19)" fg:x="25" fg:w="1"/><text x="2.2759%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.0259%" y="517" width="0.0810%" height="15" fill="rgb(216,164,2)" fg:x="25" fg:w="1"/><text x="2.2759%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.0259%" y="501" width="0.0810%" height="15" fill="rgb(220,129,5)" fg:x="25" fg:w="1"/><text x="2.2759%" y="511.50"></text></g><g><title>engine::session::Session::flush (15 samples, 1.22%)</title><rect x="0.9724%" y="773" width="1.2156%" height="15" fill="rgb(242,17,10)" fg:x="12" fg:w="15"/><text x="1.2224%" y="783.50"></text></g><g><title>engine::session::Session::save_entity_changes (15 samples, 1.22%)</title><rect x="0.9724%" y="757" width="1.2156%" height="15" fill="rgb(242,107,0)" fg:x="12" fg:w="15"/><text x="1.2224%" y="767.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (14 samples, 1.13%)</title><rect x="1.0535%" y="741" width="1.1345%" height="15" fill="rgb(251,28,31)" fg:x="13" fg:w="14"/><text x="1.3035%" y="751.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (14 samples, 1.13%)</title><rect x="1.0535%" y="725" width="1.1345%" height="15" fill="rgb(233,223,10)" fg:x="13" fg:w="14"/><text x="1.3035%" y="735.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.49%)</title><rect x="1.7018%" y="709" width="0.4862%" height="15" fill="rgb(215,21,27)" fg:x="21" fg:w="6"/><text x="1.9518%" y="719.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.49%)</title><rect x="1.7018%" y="693" width="0.4862%" height="15" fill="rgb(232,23,21)" fg:x="21" fg:w="6"/><text x="1.9518%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="1.7018%" y="677" width="0.4862%" height="15" fill="rgb(244,5,23)" fg:x="21" fg:w="6"/><text x="1.9518%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="1.8639%" y="661" width="0.3241%" height="15" fill="rgb(226,81,46)" fg:x="23" fg:w="4"/><text x="2.1139%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="1.9449%" y="645" width="0.2431%" height="15" fill="rgb(247,70,30)" fg:x="24" fg:w="3"/><text x="2.1949%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="1.9449%" y="629" width="0.2431%" height="15" fill="rgb(212,68,19)" fg:x="24" fg:w="3"/><text x="2.1949%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.0259%" y="613" width="0.1621%" height="15" fill="rgb(240,187,13)" fg:x="25" fg:w="2"/><text x="2.2759%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.0259%" y="597" width="0.1621%" height="15" fill="rgb(223,113,26)" fg:x="25" fg:w="2"/><text x="2.2759%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.0259%" y="581" width="0.1621%" height="15" fill="rgb(206,192,2)" fg:x="25" fg:w="2"/><text x="2.2759%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.1070%" y="565" width="0.0810%" height="15" fill="rgb(241,108,4)" fg:x="26" fg:w="1"/><text x="2.3570%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="2.1880%" y="709" width="0.0810%" height="15" fill="rgb(247,173,49)" fg:x="27" fg:w="1"/><text x="2.4380%" y="719.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="2.1880%" y="693" width="0.0810%" height="15" fill="rgb(224,114,35)" fg:x="27" fg:w="1"/><text x="2.4380%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="2.1880%" y="677" width="0.0810%" height="15" fill="rgb(245,159,27)" fg:x="27" fg:w="1"/><text x="2.4380%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.1880%" y="661" width="0.0810%" height="15" fill="rgb(245,172,44)" fg:x="27" fg:w="1"/><text x="2.4380%" y="671.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="2.1880%" y="741" width="0.1621%" height="15" fill="rgb(236,23,11)" fg:x="27" fg:w="2"/><text x="2.4380%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="2.1880%" y="725" width="0.1621%" height="15" fill="rgb(205,117,38)" fg:x="27" fg:w="2"/><text x="2.4380%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="2.2690%" y="709" width="0.0810%" height="15" fill="rgb(237,72,25)" fg:x="28" fg:w="1"/><text x="2.5190%" y="719.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="2.2690%" y="693" width="0.0810%" height="15" fill="rgb(244,70,9)" fg:x="28" fg:w="1"/><text x="2.5190%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="2.2690%" y="677" width="0.0810%" height="15" fill="rgb(217,125,39)" fg:x="28" fg:w="1"/><text x="2.5190%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.2690%" y="661" width="0.0810%" height="15" fill="rgb(235,36,10)" fg:x="28" fg:w="1"/><text x="2.5190%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.2690%" y="645" width="0.0810%" height="15" fill="rgb(251,123,47)" fg:x="28" fg:w="1"/><text x="2.5190%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.2690%" y="629" width="0.0810%" height="15" fill="rgb(221,13,13)" fg:x="28" fg:w="1"/><text x="2.5190%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.2690%" y="613" width="0.0810%" height="15" fill="rgb(238,131,9)" fg:x="28" fg:w="1"/><text x="2.5190%" y="623.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="2.2690%" y="597" width="0.0810%" height="15" fill="rgb(211,50,8)" fg:x="28" fg:w="1"/><text x="2.5190%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.2690%" y="581" width="0.0810%" height="15" fill="rgb(245,182,24)" fg:x="28" fg:w="1"/><text x="2.5190%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.2690%" y="565" width="0.0810%" height="15" fill="rgb(242,14,37)" fg:x="28" fg:w="1"/><text x="2.5190%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.2690%" y="549" width="0.0810%" height="15" fill="rgb(246,228,12)" fg:x="28" fg:w="1"/><text x="2.5190%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.2690%" y="533" width="0.0810%" height="15" fill="rgb(213,55,15)" fg:x="28" fg:w="1"/><text x="2.5190%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.2690%" y="517" width="0.0810%" height="15" fill="rgb(209,9,3)" fg:x="28" fg:w="1"/><text x="2.5190%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="2.3501%" y="741" width="0.0810%" height="15" fill="rgb(230,59,30)" fg:x="29" fg:w="1"/><text x="2.6001%" y="751.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="2.3501%" y="725" width="0.0810%" height="15" fill="rgb(209,121,21)" fg:x="29" fg:w="1"/><text x="2.6001%" y="735.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="2.4311%" y="741" width="0.0810%" height="15" fill="rgb(220,109,13)" fg:x="30" fg:w="1"/><text x="2.6811%" y="751.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="2.4311%" y="725" width="0.0810%" height="15" fill="rgb(232,18,1)" fg:x="30" fg:w="1"/><text x="2.6811%" y="735.50"></text></g><g><title>plugins_core::build::Build::holding (6 samples, 0.49%)</title><rect x="2.1880%" y="773" width="0.4862%" height="15" fill="rgb(215,41,42)" fg:x="27" fg:w="6"/><text x="2.4380%" y="783.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.49%)</title><rect x="2.1880%" y="757" width="0.4862%" height="15" fill="rgb(224,123,36)" fg:x="27" fg:w="6"/><text x="2.4380%" y="767.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="2.5122%" y="741" width="0.1621%" height="15" fill="rgb(240,125,3)" fg:x="31" fg:w="2"/><text x="2.7622%" y="751.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="2.5122%" y="725" width="0.1621%" height="15" fill="rgb(205,98,50)" fg:x="31" fg:w="2"/><text x="2.7622%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="2.5122%" y="709" width="0.1621%" height="15" fill="rgb(205,185,37)" fg:x="31" fg:w="2"/><text x="2.7622%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="2.5122%" y="693" width="0.1621%" height="15" fill="rgb(238,207,15)" fg:x="31" fg:w="2"/><text x="2.7622%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="2.5122%" y="677" width="0.1621%" height="15" fill="rgb(213,199,42)" fg:x="31" fg:w="2"/><text x="2.7622%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="2.5122%" y="661" width="0.1621%" height="15" fill="rgb(235,201,11)" fg:x="31" fg:w="2"/><text x="2.7622%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.5932%" y="645" width="0.0810%" height="15" fill="rgb(207,46,11)" fg:x="32" fg:w="1"/><text x="2.8432%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.5932%" y="629" width="0.0810%" height="15" fill="rgb(241,35,35)" fg:x="32" fg:w="1"/><text x="2.8432%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.5932%" y="613" width="0.0810%" height="15" fill="rgb(243,32,47)" fg:x="32" fg:w="1"/><text x="2.8432%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.5932%" y="597" width="0.0810%" height="15" fill="rgb(247,202,23)" fg:x="32" fg:w="1"/><text x="2.8432%" y="607.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="2.5932%" y="581" width="0.0810%" height="15" fill="rgb(219,102,11)" fg:x="32" fg:w="1"/><text x="2.8432%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.5932%" y="565" width="0.0810%" height="15" fill="rgb(243,110,44)" fg:x="32" fg:w="1"/><text x="2.8432%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.5932%" y="549" width="0.0810%" height="15" fill="rgb(222,74,54)" fg:x="32" fg:w="1"/><text x="2.8432%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.5932%" y="533" width="0.0810%" height="15" fill="rgb(216,99,12)" fg:x="32" fg:w="1"/><text x="2.8432%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="2.7553%" y="709" width="0.0810%" height="15" fill="rgb(226,22,26)" fg:x="34" fg:w="1"/><text x="3.0053%" y="719.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="2.7553%" y="693" width="0.0810%" height="15" fill="rgb(217,163,10)" fg:x="34" fg:w="1"/><text x="3.0053%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="2.7553%" y="677" width="0.0810%" height="15" fill="rgb(213,25,53)" fg:x="34" fg:w="1"/><text x="3.0053%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.7553%" y="661" width="0.0810%" height="15" fill="rgb(252,105,26)" fg:x="34" fg:w="1"/><text x="3.0053%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.7553%" y="645" width="0.0810%" height="15" fill="rgb(220,39,43)" fg:x="34" fg:w="1"/><text x="3.0053%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.7553%" y="629" width="0.0810%" height="15" fill="rgb(229,68,48)" fg:x="34" fg:w="1"/><text x="3.0053%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.7553%" y="613" width="0.0810%" height="15" fill="rgb(252,8,32)" fg:x="34" fg:w="1"/><text x="3.0053%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.7553%" y="597" width="0.0810%" height="15" fill="rgb(223,20,43)" fg:x="34" fg:w="1"/><text x="3.0053%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.7553%" y="581" width="0.0810%" height="15" fill="rgb(229,81,49)" fg:x="34" fg:w="1"/><text x="3.0053%" y="591.50"></text></g><g><title>&lt;kernel::model::scopes::Properties as kernel::model::scopes::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="2.8363%" y="693" width="0.0810%" height="15" fill="rgb(236,28,36)" fg:x="35" fg:w="1"/><text x="3.0863%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.8363%" y="677" width="0.0810%" height="15" fill="rgb(249,185,26)" fg:x="35" fg:w="1"/><text x="3.0863%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.8363%" y="661" width="0.0810%" height="15" fill="rgb(249,174,33)" fg:x="35" fg:w="1"/><text x="3.0863%" y="671.50"></text></g><g><title>plugins_core::build::Build::into_entry (4 samples, 0.32%)</title><rect x="2.6742%" y="773" width="0.3241%" height="15" fill="rgb(233,201,37)" fg:x="33" fg:w="4"/><text x="2.9242%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="2.6742%" y="757" width="0.3241%" height="15" fill="rgb(221,78,26)" fg:x="33" fg:w="4"/><text x="2.9242%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="2.7553%" y="741" width="0.2431%" height="15" fill="rgb(250,127,30)" fg:x="34" fg:w="3"/><text x="3.0053%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="2.7553%" y="725" width="0.2431%" height="15" fill="rgb(230,49,44)" fg:x="34" fg:w="3"/><text x="3.0053%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="2.8363%" y="709" width="0.1621%" height="15" fill="rgb(229,67,23)" fg:x="35" fg:w="2"/><text x="3.0863%" y="719.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="2.9173%" y="693" width="0.0810%" height="15" fill="rgb(249,83,47)" fg:x="36" fg:w="1"/><text x="3.1673%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="2.9173%" y="677" width="0.0810%" height="15" fill="rgb(215,43,3)" fg:x="36" fg:w="1"/><text x="3.1673%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="2.9173%" y="661" width="0.0810%" height="15" fill="rgb(238,154,13)" fg:x="36" fg:w="1"/><text x="3.1673%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.9173%" y="645" width="0.0810%" height="15" fill="rgb(219,56,2)" fg:x="36" fg:w="1"/><text x="3.1673%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="2.9173%" y="629" width="0.0810%" height="15" fill="rgb(233,0,4)" fg:x="36" fg:w="1"/><text x="3.1673%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.9173%" y="613" width="0.0810%" height="15" fill="rgb(235,30,7)" fg:x="36" fg:w="1"/><text x="3.1673%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.9173%" y="597" width="0.0810%" height="15" fill="rgb(250,79,13)" fg:x="36" fg:w="1"/><text x="3.1673%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.9984%" y="581" width="0.0810%" height="15" fill="rgb(211,146,34)" fg:x="37" fg:w="1"/><text x="3.2484%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.9984%" y="565" width="0.0810%" height="15" fill="rgb(228,22,38)" fg:x="37" fg:w="1"/><text x="3.2484%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="2.9984%" y="549" width="0.0810%" height="15" fill="rgb(235,168,5)" fg:x="37" fg:w="1"/><text x="3.2484%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="2.9984%" y="533" width="0.0810%" height="15" fill="rgb(221,155,16)" fg:x="37" fg:w="1"/><text x="3.2484%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="2.9984%" y="517" width="0.0810%" height="15" fill="rgb(215,215,53)" fg:x="37" fg:w="1"/><text x="3.2484%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.9984%" y="501" width="0.0810%" height="15" fill="rgb(223,4,10)" fg:x="37" fg:w="1"/><text x="3.2484%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.9984%" y="485" width="0.0810%" height="15" fill="rgb(234,103,6)" fg:x="37" fg:w="1"/><text x="3.2484%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="2.9984%" y="469" width="0.0810%" height="15" fill="rgb(227,97,0)" fg:x="37" fg:w="1"/><text x="3.2484%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="2.9984%" y="453" width="0.0810%" height="15" fill="rgb(234,150,53)" fg:x="37" fg:w="1"/><text x="3.2484%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="2.9984%" y="437" width="0.0810%" height="15" fill="rgb(228,201,54)" fg:x="37" fg:w="1"/><text x="3.2484%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="2.9984%" y="421" width="0.0810%" height="15" fill="rgb(222,22,37)" fg:x="37" fg:w="1"/><text x="3.2484%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.9984%" y="405" width="0.0810%" height="15" fill="rgb(237,53,32)" fg:x="37" fg:w="1"/><text x="3.2484%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="2.9984%" y="661" width="0.1621%" height="15" fill="rgb(233,25,53)" fg:x="37" fg:w="2"/><text x="3.2484%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="2.9984%" y="645" width="0.1621%" height="15" fill="rgb(210,40,34)" fg:x="37" fg:w="2"/><text x="3.2484%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="2.9984%" y="629" width="0.1621%" height="15" fill="rgb(241,220,44)" fg:x="37" fg:w="2"/><text x="3.2484%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="2.9984%" y="613" width="0.1621%" height="15" fill="rgb(235,28,35)" fg:x="37" fg:w="2"/><text x="3.2484%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="2.9984%" y="597" width="0.1621%" height="15" fill="rgb(210,56,17)" fg:x="37" fg:w="2"/><text x="3.2484%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.0794%" y="581" width="0.0810%" height="15" fill="rgb(224,130,29)" fg:x="38" fg:w="1"/><text x="3.3294%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="2.9984%" y="757" width="0.2431%" height="15" fill="rgb(235,212,8)" fg:x="37" fg:w="3"/><text x="3.2484%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="2.9984%" y="741" width="0.2431%" height="15" fill="rgb(223,33,50)" fg:x="37" fg:w="3"/><text x="3.2484%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="2.9984%" y="725" width="0.2431%" height="15" fill="rgb(219,149,13)" fg:x="37" fg:w="3"/><text x="3.2484%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="2.9984%" y="709" width="0.2431%" height="15" fill="rgb(250,156,29)" fg:x="37" fg:w="3"/><text x="3.2484%" y="719.50"></text></g><g><title>kernel::model::scopes::load_props (3 samples, 0.24%)</title><rect x="2.9984%" y="693" width="0.2431%" height="15" fill="rgb(216,193,19)" fg:x="37" fg:w="3"/><text x="3.2484%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (3 samples, 0.24%)</title><rect x="2.9984%" y="677" width="0.2431%" height="15" fill="rgb(216,135,14)" fg:x="37" fg:w="3"/><text x="3.2484%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="3.1605%" y="661" width="0.0810%" height="15" fill="rgb(241,47,5)" fg:x="39" fg:w="1"/><text x="3.4105%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.1605%" y="645" width="0.0810%" height="15" fill="rgb(233,42,35)" fg:x="39" fg:w="1"/><text x="3.4105%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.1605%" y="629" width="0.0810%" height="15" fill="rgb(231,13,6)" fg:x="39" fg:w="1"/><text x="3.4105%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.1605%" y="613" width="0.0810%" height="15" fill="rgb(207,181,40)" fg:x="39" fg:w="1"/><text x="3.4105%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.1605%" y="597" width="0.0810%" height="15" fill="rgb(254,173,49)" fg:x="39" fg:w="1"/><text x="3.4105%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.1605%" y="581" width="0.0810%" height="15" fill="rgb(221,1,38)" fg:x="39" fg:w="1"/><text x="3.4105%" y="591.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.2415%" y="757" width="0.0810%" height="15" fill="rgb(206,124,46)" fg:x="40" fg:w="1"/><text x="3.4915%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.2415%" y="741" width="0.0810%" height="15" fill="rgb(249,21,11)" fg:x="40" fg:w="1"/><text x="3.4915%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.2415%" y="725" width="0.0810%" height="15" fill="rgb(222,201,40)" fg:x="40" fg:w="1"/><text x="3.4915%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.2415%" y="709" width="0.0810%" height="15" fill="rgb(235,61,29)" fg:x="40" fg:w="1"/><text x="3.4915%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.2415%" y="693" width="0.0810%" height="15" fill="rgb(219,207,3)" fg:x="40" fg:w="1"/><text x="3.4915%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.2415%" y="677" width="0.0810%" height="15" fill="rgb(222,56,46)" fg:x="40" fg:w="1"/><text x="3.4915%" y="687.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="3.2415%" y="661" width="0.0810%" height="15" fill="rgb(239,76,54)" fg:x="40" fg:w="1"/><text x="3.4915%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.2415%" y="645" width="0.0810%" height="15" fill="rgb(231,124,27)" fg:x="40" fg:w="1"/><text x="3.4915%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3225%" y="549" width="0.0810%" height="15" fill="rgb(249,195,6)" fg:x="41" fg:w="1"/><text x="3.5725%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3225%" y="533" width="0.0810%" height="15" fill="rgb(237,174,47)" fg:x="41" fg:w="1"/><text x="3.5725%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3225%" y="517" width="0.0810%" height="15" fill="rgb(206,201,31)" fg:x="41" fg:w="1"/><text x="3.5725%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3225%" y="501" width="0.0810%" height="15" fill="rgb(231,57,52)" fg:x="41" fg:w="1"/><text x="3.5725%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.3225%" y="485" width="0.0810%" height="15" fill="rgb(248,177,22)" fg:x="41" fg:w="1"/><text x="3.5725%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.3225%" y="469" width="0.0810%" height="15" fill="rgb(215,211,37)" fg:x="41" fg:w="1"/><text x="3.5725%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.3225%" y="453" width="0.0810%" height="15" fill="rgb(241,128,51)" fg:x="41" fg:w="1"/><text x="3.5725%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.3225%" y="437" width="0.0810%" height="15" fill="rgb(227,165,31)" fg:x="41" fg:w="1"/><text x="3.5725%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.3225%" y="421" width="0.0810%" height="15" fill="rgb(228,167,24)" fg:x="41" fg:w="1"/><text x="3.5725%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.3225%" y="405" width="0.0810%" height="15" fill="rgb(228,143,12)" fg:x="41" fg:w="1"/><text x="3.5725%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.3225%" y="389" width="0.0810%" height="15" fill="rgb(249,149,8)" fg:x="41" fg:w="1"/><text x="3.5725%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.3225%" y="373" width="0.0810%" height="15" fill="rgb(243,35,44)" fg:x="41" fg:w="1"/><text x="3.5725%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.3225%" y="357" width="0.0810%" height="15" fill="rgb(246,89,9)" fg:x="41" fg:w="1"/><text x="3.5725%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.3225%" y="341" width="0.0810%" height="15" fill="rgb(233,213,13)" fg:x="41" fg:w="1"/><text x="3.5725%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.3225%" y="325" width="0.0810%" height="15" fill="rgb(233,141,41)" fg:x="41" fg:w="1"/><text x="3.5725%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.3225%" y="309" width="0.0810%" height="15" fill="rgb(239,167,4)" fg:x="41" fg:w="1"/><text x="3.5725%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="3.3225%" y="757" width="0.1621%" height="15" fill="rgb(209,217,16)" fg:x="41" fg:w="2"/><text x="3.5725%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="3.3225%" y="741" width="0.1621%" height="15" fill="rgb(219,88,35)" fg:x="41" fg:w="2"/><text x="3.5725%" y="751.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="3.3225%" y="725" width="0.1621%" height="15" fill="rgb(220,193,23)" fg:x="41" fg:w="2"/><text x="3.5725%" y="735.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="3.3225%" y="709" width="0.1621%" height="15" fill="rgb(230,90,52)" fg:x="41" fg:w="2"/><text x="3.5725%" y="719.50"></text></g><g><title>plugins_core::tools::leads_to (2 samples, 0.16%)</title><rect x="3.3225%" y="693" width="0.1621%" height="15" fill="rgb(252,106,19)" fg:x="41" fg:w="2"/><text x="3.5725%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="3.3225%" y="677" width="0.1621%" height="15" fill="rgb(206,74,20)" fg:x="41" fg:w="2"/><text x="3.5725%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="3.3225%" y="661" width="0.1621%" height="15" fill="rgb(230,138,44)" fg:x="41" fg:w="2"/><text x="3.5725%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="3.3225%" y="645" width="0.1621%" height="15" fill="rgb(235,182,43)" fg:x="41" fg:w="2"/><text x="3.5725%" y="655.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="3.3225%" y="629" width="0.1621%" height="15" fill="rgb(242,16,51)" fg:x="41" fg:w="2"/><text x="3.5725%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="3.3225%" y="613" width="0.1621%" height="15" fill="rgb(248,9,4)" fg:x="41" fg:w="2"/><text x="3.5725%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.3225%" y="597" width="0.1621%" height="15" fill="rgb(210,31,22)" fg:x="41" fg:w="2"/><text x="3.5725%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.3225%" y="581" width="0.1621%" height="15" fill="rgb(239,54,39)" fg:x="41" fg:w="2"/><text x="3.5725%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="3.3225%" y="565" width="0.1621%" height="15" fill="rgb(230,99,41)" fg:x="41" fg:w="2"/><text x="3.5725%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.4036%" y="549" width="0.0810%" height="15" fill="rgb(253,106,12)" fg:x="42" fg:w="1"/><text x="3.6536%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.4036%" y="533" width="0.0810%" height="15" fill="rgb(213,46,41)" fg:x="42" fg:w="1"/><text x="3.6536%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.4036%" y="517" width="0.0810%" height="15" fill="rgb(215,133,35)" fg:x="42" fg:w="1"/><text x="3.6536%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.4036%" y="501" width="0.0810%" height="15" fill="rgb(213,28,5)" fg:x="42" fg:w="1"/><text x="3.6536%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.4036%" y="485" width="0.0810%" height="15" fill="rgb(215,77,49)" fg:x="42" fg:w="1"/><text x="3.6536%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="3.4036%" y="469" width="0.0810%" height="15" fill="rgb(248,100,22)" fg:x="42" fg:w="1"/><text x="3.6536%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.4036%" y="453" width="0.0810%" height="15" fill="rgb(208,67,9)" fg:x="42" fg:w="1"/><text x="3.6536%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="3.4846%" y="757" width="0.0810%" height="15" fill="rgb(219,133,21)" fg:x="43" fg:w="1"/><text x="3.7346%" y="767.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="3.5656%" y="725" width="0.0810%" height="15" fill="rgb(246,46,29)" fg:x="44" fg:w="1"/><text x="3.8156%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.5656%" y="709" width="0.0810%" height="15" fill="rgb(246,185,52)" fg:x="44" fg:w="1"/><text x="3.8156%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.5656%" y="693" width="0.0810%" height="15" fill="rgb(252,136,11)" fg:x="44" fg:w="1"/><text x="3.8156%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.5656%" y="677" width="0.0810%" height="15" fill="rgb(219,138,53)" fg:x="44" fg:w="1"/><text x="3.8156%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.5656%" y="661" width="0.0810%" height="15" fill="rgb(211,51,23)" fg:x="44" fg:w="1"/><text x="3.8156%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.5656%" y="645" width="0.0810%" height="15" fill="rgb(247,221,28)" fg:x="44" fg:w="1"/><text x="3.8156%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.5656%" y="629" width="0.0810%" height="15" fill="rgb(251,222,45)" fg:x="44" fg:w="1"/><text x="3.8156%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.5656%" y="613" width="0.0810%" height="15" fill="rgb(217,162,53)" fg:x="44" fg:w="1"/><text x="3.8156%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.5656%" y="597" width="0.0810%" height="15" fill="rgb(229,93,14)" fg:x="44" fg:w="1"/><text x="3.8156%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.5656%" y="581" width="0.0810%" height="15" fill="rgb(209,67,49)" fg:x="44" fg:w="1"/><text x="3.8156%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.5656%" y="565" width="0.0810%" height="15" fill="rgb(213,87,29)" fg:x="44" fg:w="1"/><text x="3.8156%" y="575.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.5656%" y="549" width="0.0810%" height="15" fill="rgb(205,151,52)" fg:x="44" fg:w="1"/><text x="3.8156%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.5656%" y="533" width="0.0810%" height="15" fill="rgb(253,215,39)" fg:x="44" fg:w="1"/><text x="3.8156%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.6467%" y="725" width="0.0810%" height="15" fill="rgb(221,220,41)" fg:x="45" fg:w="1"/><text x="3.8967%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="3.6467%" y="709" width="0.0810%" height="15" fill="rgb(218,133,21)" fg:x="45" fg:w="1"/><text x="3.8967%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="3.6467%" y="693" width="0.0810%" height="15" fill="rgb(221,193,43)" fg:x="45" fg:w="1"/><text x="3.8967%" y="703.50"></text></g><g><title>engine::identifiers::model::set_gid (1 samples, 0.08%)</title><rect x="3.7277%" y="725" width="0.0810%" height="15" fill="rgb(240,128,52)" fg:x="46" fg:w="1"/><text x="3.9777%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;engine::identifiers::model::Identifiers&gt;&gt; (1 samples, 0.08%)</title><rect x="3.7277%" y="709" width="0.0810%" height="15" fill="rgb(253,114,12)" fg:x="46" fg:w="1"/><text x="3.9777%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="3.7277%" y="693" width="0.0810%" height="15" fill="rgb(215,223,47)" fg:x="46" fg:w="1"/><text x="3.9777%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="3.8088%" y="677" width="0.0810%" height="15" fill="rgb(248,225,23)" fg:x="47" fg:w="1"/><text x="4.0588%" y="687.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="3.8898%" y="677" width="0.0810%" height="15" fill="rgb(250,108,0)" fg:x="48" fg:w="1"/><text x="4.1398%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.8898%" y="661" width="0.0810%" height="15" fill="rgb(228,208,7)" fg:x="48" fg:w="1"/><text x="4.1398%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.8898%" y="645" width="0.0810%" height="15" fill="rgb(244,45,10)" fg:x="48" fg:w="1"/><text x="4.1398%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="3.9708%" y="661" width="0.3241%" height="15" fill="rgb(207,125,25)" fg:x="49" fg:w="4"/><text x="4.2208%" y="671.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="4.0519%" y="645" width="0.2431%" height="15" fill="rgb(210,195,18)" fg:x="50" fg:w="3"/><text x="4.3019%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="4.1329%" y="629" width="0.1621%" height="15" fill="rgb(249,80,12)" fg:x="51" fg:w="2"/><text x="4.3829%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.2139%" y="613" width="0.0810%" height="15" fill="rgb(221,65,9)" fg:x="52" fg:w="1"/><text x="4.4639%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="4.2950%" y="645" width="0.1621%" height="15" fill="rgb(235,49,36)" fg:x="53" fg:w="2"/><text x="4.5450%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.3760%" y="629" width="0.0810%" height="15" fill="rgb(225,32,20)" fg:x="54" fg:w="1"/><text x="4.6260%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.3760%" y="613" width="0.0810%" height="15" fill="rgb(215,141,46)" fg:x="54" fg:w="1"/><text x="4.6260%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.3760%" y="597" width="0.0810%" height="15" fill="rgb(250,160,47)" fg:x="54" fg:w="1"/><text x="4.6260%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.4571%" y="597" width="0.0810%" height="15" fill="rgb(216,222,40)" fg:x="55" fg:w="1"/><text x="4.7071%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.4571%" y="629" width="0.1621%" height="15" fill="rgb(234,217,39)" fg:x="55" fg:w="2"/><text x="4.7071%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.4571%" y="613" width="0.1621%" height="15" fill="rgb(207,178,40)" fg:x="55" fg:w="2"/><text x="4.7071%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.5381%" y="597" width="0.0810%" height="15" fill="rgb(221,136,13)" fg:x="56" fg:w="1"/><text x="4.7881%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="4.2950%" y="661" width="0.4052%" height="15" fill="rgb(249,199,10)" fg:x="53" fg:w="5"/><text x="4.5450%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="4.4571%" y="645" width="0.2431%" height="15" fill="rgb(249,222,13)" fg:x="55" fg:w="3"/><text x="4.7071%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.6191%" y="629" width="0.0810%" height="15" fill="rgb(244,185,38)" fg:x="57" fg:w="1"/><text x="4.8691%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.97%)</title><rect x="3.8088%" y="693" width="0.9724%" height="15" fill="rgb(236,202,9)" fg:x="47" fg:w="12"/><text x="4.0588%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.81%)</title><rect x="3.9708%" y="677" width="0.8104%" height="15" fill="rgb(250,229,37)" fg:x="49" fg:w="10"/><text x="4.2208%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.7002%" y="661" width="0.0810%" height="15" fill="rgb(206,174,23)" fg:x="58" fg:w="1"/><text x="4.9502%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.7002%" y="645" width="0.0810%" height="15" fill="rgb(211,33,43)" fg:x="58" fg:w="1"/><text x="4.9502%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.7812%" y="693" width="0.0810%" height="15" fill="rgb(245,58,50)" fg:x="59" fg:w="1"/><text x="5.0312%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.7812%" y="677" width="0.0810%" height="15" fill="rgb(244,68,36)" fg:x="59" fg:w="1"/><text x="5.0312%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.7812%" y="661" width="0.0810%" height="15" fill="rgb(232,229,15)" fg:x="59" fg:w="1"/><text x="5.0312%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.7812%" y="645" width="0.0810%" height="15" fill="rgb(254,30,23)" fg:x="59" fg:w="1"/><text x="5.0312%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.7812%" y="629" width="0.0810%" height="15" fill="rgb(235,160,14)" fg:x="59" fg:w="1"/><text x="5.0312%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.7812%" y="613" width="0.0810%" height="15" fill="rgb(212,155,44)" fg:x="59" fg:w="1"/><text x="5.0312%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="4.9433%" y="645" width="0.0810%" height="15" fill="rgb(226,2,50)" fg:x="61" fg:w="1"/><text x="5.1933%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.9433%" y="629" width="0.0810%" height="15" fill="rgb(234,177,6)" fg:x="61" fg:w="1"/><text x="5.1933%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.9433%" y="613" width="0.0810%" height="15" fill="rgb(217,24,9)" fg:x="61" fg:w="1"/><text x="5.1933%" y="623.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.54%)</title><rect x="3.5656%" y="757" width="1.5397%" height="15" fill="rgb(220,13,46)" fg:x="44" fg:w="19"/><text x="3.8156%" y="767.50"></text></g><g><title>engine::session::Session::save_entity_changes (19 samples, 1.54%)</title><rect x="3.5656%" y="741" width="1.5397%" height="15" fill="rgb(239,221,27)" fg:x="44" fg:w="19"/><text x="3.8156%" y="751.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (16 samples, 1.30%)</title><rect x="3.8088%" y="725" width="1.2966%" height="15" fill="rgb(222,198,25)" fg:x="47" fg:w="16"/><text x="4.0588%" y="735.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (16 samples, 1.30%)</title><rect x="3.8088%" y="709" width="1.2966%" height="15" fill="rgb(211,99,13)" fg:x="47" fg:w="16"/><text x="4.0588%" y="719.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="4.8622%" y="693" width="0.2431%" height="15" fill="rgb(232,111,31)" fg:x="60" fg:w="3"/><text x="5.1122%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="4.8622%" y="677" width="0.2431%" height="15" fill="rgb(245,82,37)" fg:x="60" fg:w="3"/><text x="5.1122%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="4.8622%" y="661" width="0.2431%" height="15" fill="rgb(227,149,46)" fg:x="60" fg:w="3"/><text x="5.1122%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="5.0243%" y="645" width="0.0810%" height="15" fill="rgb(218,36,50)" fg:x="62" fg:w="1"/><text x="5.2743%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.0243%" y="629" width="0.0810%" height="15" fill="rgb(226,80,48)" fg:x="62" fg:w="1"/><text x="5.2743%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.0243%" y="613" width="0.0810%" height="15" fill="rgb(238,224,15)" fg:x="62" fg:w="1"/><text x="5.2743%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.0243%" y="597" width="0.0810%" height="15" fill="rgb(241,136,10)" fg:x="62" fg:w="1"/><text x="5.2743%" y="607.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="5.1053%" y="677" width="0.0810%" height="15" fill="rgb(208,32,45)" fg:x="63" fg:w="1"/><text x="5.3553%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="5.1053%" y="661" width="0.0810%" height="15" fill="rgb(207,135,9)" fg:x="63" fg:w="1"/><text x="5.3553%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::scopes::Property)&gt; (1 samples, 0.08%)</title><rect x="5.1864%" y="661" width="0.0810%" height="15" fill="rgb(206,86,44)" fg:x="64" fg:w="1"/><text x="5.4364%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.1864%" y="645" width="0.0810%" height="15" fill="rgb(245,177,15)" fg:x="64" fg:w="1"/><text x="5.4364%" y="655.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="5.1053%" y="709" width="0.2431%" height="15" fill="rgb(206,64,50)" fg:x="63" fg:w="3"/><text x="5.3553%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="5.1053%" y="693" width="0.2431%" height="15" fill="rgb(234,36,40)" fg:x="63" fg:w="3"/><text x="5.3553%" y="703.50"></text></g><g><title>kernel::model::scopes::save_props (2 samples, 0.16%)</title><rect x="5.1864%" y="677" width="0.1621%" height="15" fill="rgb(213,64,8)" fg:x="64" fg:w="2"/><text x="5.4364%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="5.2674%" y="661" width="0.0810%" height="15" fill="rgb(210,75,36)" fg:x="65" fg:w="1"/><text x="5.5174%" y="671.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::ser::Serialize for kernel::model::scopes::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2674%" y="645" width="0.0810%" height="15" fill="rgb(229,88,21)" fg:x="65" fg:w="1"/><text x="5.5174%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.2674%" y="629" width="0.0810%" height="15" fill="rgb(252,204,47)" fg:x="65" fg:w="1"/><text x="5.5174%" y="639.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::ser::Serialize for kernel::model::scopes::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2674%" y="613" width="0.0810%" height="15" fill="rgb(208,77,27)" fg:x="65" fg:w="1"/><text x="5.5174%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.2674%" y="597" width="0.0810%" height="15" fill="rgb(221,76,26)" fg:x="65" fg:w="1"/><text x="5.5174%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="5.2674%" y="581" width="0.0810%" height="15" fill="rgb(225,139,18)" fg:x="65" fg:w="1"/><text x="5.5174%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::ser::Serialize for kernel::model::scopes::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2674%" y="565" width="0.0810%" height="15" fill="rgb(230,137,11)" fg:x="65" fg:w="1"/><text x="5.5174%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.2674%" y="549" width="0.0810%" height="15" fill="rgb(212,28,1)" fg:x="65" fg:w="1"/><text x="5.5174%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2674%" y="533" width="0.0810%" height="15" fill="rgb(248,164,17)" fg:x="65" fg:w="1"/><text x="5.5174%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="5.2674%" y="517" width="0.0810%" height="15" fill="rgb(222,171,42)" fg:x="65" fg:w="1"/><text x="5.5174%" y="527.50"></text></g><g><title>engine::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="5.1053%" y="725" width="0.3241%" height="15" fill="rgb(243,84,45)" fg:x="63" fg:w="4"/><text x="5.3553%" y="735.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="5.3485%" y="709" width="0.0810%" height="15" fill="rgb(252,49,23)" fg:x="66" fg:w="1"/><text x="5.5985%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.3485%" y="693" width="0.0810%" height="15" fill="rgb(215,19,7)" fg:x="66" fg:w="1"/><text x="5.5985%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.3485%" y="677" width="0.0810%" height="15" fill="rgb(238,81,41)" fg:x="66" fg:w="1"/><text x="5.5985%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="5.3485%" y="661" width="0.0810%" height="15" fill="rgb(210,199,37)" fg:x="66" fg:w="1"/><text x="5.5985%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.3485%" y="645" width="0.0810%" height="15" fill="rgb(244,192,49)" fg:x="66" fg:w="1"/><text x="5.5985%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.41%)</title><rect x="5.1053%" y="741" width="0.4052%" height="15" fill="rgb(226,211,11)" fg:x="63" fg:w="5"/><text x="5.3553%" y="751.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="5.4295%" y="725" width="0.0810%" height="15" fill="rgb(236,162,54)" fg:x="67" fg:w="1"/><text x="5.6795%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.4295%" y="709" width="0.0810%" height="15" fill="rgb(220,229,9)" fg:x="67" fg:w="1"/><text x="5.6795%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="5.5105%" y="725" width="0.0810%" height="15" fill="rgb(250,87,22)" fg:x="68" fg:w="1"/><text x="5.7605%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="5.5105%" y="709" width="0.0810%" height="15" fill="rgb(239,43,17)" fg:x="68" fg:w="1"/><text x="5.7605%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.5105%" y="693" width="0.0810%" height="15" fill="rgb(231,177,25)" fg:x="68" fg:w="1"/><text x="5.7605%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="5.5916%" y="725" width="0.0810%" height="15" fill="rgb(219,179,1)" fg:x="69" fg:w="1"/><text x="5.8416%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="5.5916%" y="709" width="0.0810%" height="15" fill="rgb(238,219,53)" fg:x="69" fg:w="1"/><text x="5.8416%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="5.5916%" y="693" width="0.0810%" height="15" fill="rgb(232,167,36)" fg:x="69" fg:w="1"/><text x="5.8416%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="5.5916%" y="677" width="0.0810%" height="15" fill="rgb(244,19,51)" fg:x="69" fg:w="1"/><text x="5.8416%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="5.5916%" y="661" width="0.0810%" height="15" fill="rgb(224,6,22)" fg:x="69" fg:w="1"/><text x="5.8416%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.5916%" y="645" width="0.0810%" height="15" fill="rgb(224,145,5)" fg:x="69" fg:w="1"/><text x="5.8416%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.5916%" y="629" width="0.0810%" height="15" fill="rgb(234,130,49)" fg:x="69" fg:w="1"/><text x="5.8416%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.5916%" y="613" width="0.0810%" height="15" fill="rgb(254,6,2)" fg:x="69" fg:w="1"/><text x="5.8416%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.5916%" y="597" width="0.0810%" height="15" fill="rgb(208,96,46)" fg:x="69" fg:w="1"/><text x="5.8416%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.5916%" y="581" width="0.0810%" height="15" fill="rgb(239,3,39)" fg:x="69" fg:w="1"/><text x="5.8416%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.5916%" y="565" width="0.0810%" height="15" fill="rgb(233,210,1)" fg:x="69" fg:w="1"/><text x="5.8416%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.5916%" y="549" width="0.0810%" height="15" fill="rgb(244,137,37)" fg:x="69" fg:w="1"/><text x="5.8416%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.6726%" y="677" width="0.0810%" height="15" fill="rgb(240,136,2)" fg:x="70" fg:w="1"/><text x="5.9226%" y="687.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="5.6726%" y="661" width="0.0810%" height="15" fill="rgb(239,18,37)" fg:x="70" fg:w="1"/><text x="5.9226%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="5.6726%" y="645" width="0.0810%" height="15" fill="rgb(218,185,22)" fg:x="70" fg:w="1"/><text x="5.9226%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.6726%" y="629" width="0.0810%" height="15" fill="rgb(225,218,4)" fg:x="70" fg:w="1"/><text x="5.9226%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.6726%" y="613" width="0.0810%" height="15" fill="rgb(230,182,32)" fg:x="70" fg:w="1"/><text x="5.9226%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.6726%" y="597" width="0.0810%" height="15" fill="rgb(242,56,43)" fg:x="70" fg:w="1"/><text x="5.9226%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.6726%" y="581" width="0.0810%" height="15" fill="rgb(233,99,24)" fg:x="70" fg:w="1"/><text x="5.9226%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.6726%" y="565" width="0.0810%" height="15" fill="rgb(234,209,42)" fg:x="70" fg:w="1"/><text x="5.9226%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.6726%" y="549" width="0.0810%" height="15" fill="rgb(227,7,12)" fg:x="70" fg:w="1"/><text x="5.9226%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.7536%" y="629" width="0.0810%" height="15" fill="rgb(245,203,43)" fg:x="71" fg:w="1"/><text x="6.0036%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.7536%" y="613" width="0.0810%" height="15" fill="rgb(238,205,33)" fg:x="71" fg:w="1"/><text x="6.0036%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.7536%" y="597" width="0.0810%" height="15" fill="rgb(231,56,7)" fg:x="71" fg:w="1"/><text x="6.0036%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.7536%" y="581" width="0.0810%" height="15" fill="rgb(244,186,29)" fg:x="71" fg:w="1"/><text x="6.0036%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.7536%" y="565" width="0.0810%" height="15" fill="rgb(234,111,31)" fg:x="71" fg:w="1"/><text x="6.0036%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.7536%" y="549" width="0.0810%" height="15" fill="rgb(241,149,10)" fg:x="71" fg:w="1"/><text x="6.0036%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.7536%" y="533" width="0.0810%" height="15" fill="rgb(249,206,44)" fg:x="71" fg:w="1"/><text x="6.0036%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.7536%" y="517" width="0.0810%" height="15" fill="rgb(251,153,30)" fg:x="71" fg:w="1"/><text x="6.0036%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.7536%" y="501" width="0.0810%" height="15" fill="rgb(239,152,38)" fg:x="71" fg:w="1"/><text x="6.0036%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.7536%" y="485" width="0.0810%" height="15" fill="rgb(249,139,47)" fg:x="71" fg:w="1"/><text x="6.0036%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.7536%" y="469" width="0.0810%" height="15" fill="rgb(244,64,35)" fg:x="71" fg:w="1"/><text x="6.0036%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.7536%" y="453" width="0.0810%" height="15" fill="rgb(216,46,15)" fg:x="71" fg:w="1"/><text x="6.0036%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.7536%" y="437" width="0.0810%" height="15" fill="rgb(250,74,19)" fg:x="71" fg:w="1"/><text x="6.0036%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.7536%" y="421" width="0.0810%" height="15" fill="rgb(249,42,33)" fg:x="71" fg:w="1"/><text x="6.0036%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.7536%" y="405" width="0.0810%" height="15" fill="rgb(242,149,17)" fg:x="71" fg:w="1"/><text x="6.0036%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.7536%" y="389" width="0.0810%" height="15" fill="rgb(244,29,21)" fg:x="71" fg:w="1"/><text x="6.0036%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.7536%" y="373" width="0.0810%" height="15" fill="rgb(220,130,37)" fg:x="71" fg:w="1"/><text x="6.0036%" y="383.50"></text></g><g><title>plugins_core::build::Build::holding (10 samples, 0.81%)</title><rect x="5.1053%" y="757" width="0.8104%" height="15" fill="rgb(211,67,2)" fg:x="63" fg:w="10"/><text x="5.3553%" y="767.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.41%)</title><rect x="5.5105%" y="741" width="0.4052%" height="15" fill="rgb(235,68,52)" fg:x="68" fg:w="5"/><text x="5.7605%" y="751.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="5.6726%" y="725" width="0.2431%" height="15" fill="rgb(246,142,3)" fg:x="70" fg:w="3"/><text x="5.9226%" y="735.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="5.6726%" y="709" width="0.2431%" height="15" fill="rgb(241,25,7)" fg:x="70" fg:w="3"/><text x="5.9226%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="5.6726%" y="693" width="0.2431%" height="15" fill="rgb(242,119,39)" fg:x="70" fg:w="3"/><text x="5.9226%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="5.7536%" y="677" width="0.1621%" height="15" fill="rgb(241,98,45)" fg:x="71" fg:w="2"/><text x="6.0036%" y="687.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="5.7536%" y="661" width="0.1621%" height="15" fill="rgb(254,28,30)" fg:x="71" fg:w="2"/><text x="6.0036%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="5.7536%" y="645" width="0.1621%" height="15" fill="rgb(241,142,54)" fg:x="71" fg:w="2"/><text x="6.0036%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="5.8347%" y="629" width="0.0810%" height="15" fill="rgb(222,85,15)" fg:x="72" fg:w="1"/><text x="6.0847%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.8347%" y="613" width="0.0810%" height="15" fill="rgb(210,85,47)" fg:x="72" fg:w="1"/><text x="6.0847%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.8347%" y="597" width="0.0810%" height="15" fill="rgb(224,206,25)" fg:x="72" fg:w="1"/><text x="6.0847%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.8347%" y="581" width="0.0810%" height="15" fill="rgb(243,201,19)" fg:x="72" fg:w="1"/><text x="6.0847%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.8347%" y="565" width="0.0810%" height="15" fill="rgb(236,59,4)" fg:x="72" fg:w="1"/><text x="6.0847%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.8347%" y="549" width="0.0810%" height="15" fill="rgb(254,179,45)" fg:x="72" fg:w="1"/><text x="6.0847%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9157%" y="709" width="0.0810%" height="15" fill="rgb(226,14,10)" fg:x="73" fg:w="1"/><text x="6.1657%" y="719.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="5.9157%" y="757" width="0.1621%" height="15" fill="rgb(244,27,41)" fg:x="73" fg:w="2"/><text x="6.1657%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="5.9157%" y="741" width="0.1621%" height="15" fill="rgb(235,35,32)" fg:x="73" fg:w="2"/><text x="6.1657%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="5.9157%" y="725" width="0.1621%" height="15" fill="rgb(218,68,31)" fg:x="73" fg:w="2"/><text x="6.1657%" y="735.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="5.9968%" y="709" width="0.0810%" height="15" fill="rgb(207,120,37)" fg:x="74" fg:w="1"/><text x="6.2468%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.9968%" y="693" width="0.0810%" height="15" fill="rgb(227,98,0)" fg:x="74" fg:w="1"/><text x="6.2468%" y="703.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="6.0778%" y="757" width="0.0810%" height="15" fill="rgb(207,7,3)" fg:x="75" fg:w="1"/><text x="6.3278%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="6.0778%" y="741" width="0.0810%" height="15" fill="rgb(206,98,19)" fg:x="75" fg:w="1"/><text x="6.3278%" y="751.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="6.0778%" y="725" width="0.0810%" height="15" fill="rgb(217,5,26)" fg:x="75" fg:w="1"/><text x="6.3278%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="6.0778%" y="709" width="0.0810%" height="15" fill="rgb(235,190,38)" fg:x="75" fg:w="1"/><text x="6.3278%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.0778%" y="693" width="0.0810%" height="15" fill="rgb(247,86,24)" fg:x="75" fg:w="1"/><text x="6.3278%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.0778%" y="677" width="0.0810%" height="15" fill="rgb(205,101,16)" fg:x="75" fg:w="1"/><text x="6.3278%" y="687.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="6.1588%" y="757" width="0.0810%" height="15" fill="rgb(246,168,33)" fg:x="76" fg:w="1"/><text x="6.4088%" y="767.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="6.1588%" y="741" width="0.0810%" height="15" fill="rgb(231,114,1)" fg:x="76" fg:w="1"/><text x="6.4088%" y="751.50"></text></g><g><title>kernel::model::entity::Entity::new_blank (1 samples, 0.08%)</title><rect x="6.1588%" y="725" width="0.0810%" height="15" fill="rgb(207,184,53)" fg:x="76" fg:w="1"/><text x="6.4088%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.2399%" y="741" width="0.0810%" height="15" fill="rgb(224,95,51)" fg:x="77" fg:w="1"/><text x="6.4899%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.2399%" y="725" width="0.0810%" height="15" fill="rgb(212,188,45)" fg:x="77" fg:w="1"/><text x="6.4899%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.2399%" y="709" width="0.0810%" height="15" fill="rgb(223,154,38)" fg:x="77" fg:w="1"/><text x="6.4899%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.2399%" y="693" width="0.0810%" height="15" fill="rgb(251,22,52)" fg:x="77" fg:w="1"/><text x="6.4899%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="6.2399%" y="677" width="0.0810%" height="15" fill="rgb(229,209,22)" fg:x="77" fg:w="1"/><text x="6.4899%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="6.2399%" y="661" width="0.0810%" height="15" fill="rgb(234,138,34)" fg:x="77" fg:w="1"/><text x="6.4899%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.2399%" y="645" width="0.0810%" height="15" fill="rgb(212,95,11)" fg:x="77" fg:w="1"/><text x="6.4899%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.2399%" y="629" width="0.0810%" height="15" fill="rgb(240,179,47)" fg:x="77" fg:w="1"/><text x="6.4899%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.2399%" y="613" width="0.0810%" height="15" fill="rgb(240,163,11)" fg:x="77" fg:w="1"/><text x="6.4899%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.2399%" y="597" width="0.0810%" height="15" fill="rgb(236,37,12)" fg:x="77" fg:w="1"/><text x="6.4899%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.2399%" y="581" width="0.0810%" height="15" fill="rgb(232,164,16)" fg:x="77" fg:w="1"/><text x="6.4899%" y="591.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="6.3209%" y="725" width="0.0810%" height="15" fill="rgb(244,205,15)" fg:x="78" fg:w="1"/><text x="6.5709%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="6.3209%" y="709" width="0.0810%" height="15" fill="rgb(223,117,47)" fg:x="78" fg:w="1"/><text x="6.5709%" y="719.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="6.3209%" y="693" width="0.0810%" height="15" fill="rgb(244,107,35)" fg:x="78" fg:w="1"/><text x="6.5709%" y="703.50"></text></g><g><title>plugins_core::build::Build::occupying (3 samples, 0.24%)</title><rect x="6.2399%" y="757" width="0.2431%" height="15" fill="rgb(205,140,8)" fg:x="77" fg:w="3"/><text x="6.4899%" y="767.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="6.3209%" y="741" width="0.1621%" height="15" fill="rgb(228,84,46)" fg:x="78" fg:w="2"/><text x="6.5709%" y="751.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="6.4019%" y="725" width="0.0810%" height="15" fill="rgb(254,188,9)" fg:x="79" fg:w="1"/><text x="6.6519%" y="735.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="6.4019%" y="709" width="0.0810%" height="15" fill="rgb(206,112,54)" fg:x="79" fg:w="1"/><text x="6.6519%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="6.4019%" y="693" width="0.0810%" height="15" fill="rgb(216,84,49)" fg:x="79" fg:w="1"/><text x="6.6519%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.4019%" y="677" width="0.0810%" height="15" fill="rgb(214,194,35)" fg:x="79" fg:w="1"/><text x="6.6519%" y="687.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="6.4019%" y="661" width="0.0810%" height="15" fill="rgb(249,28,3)" fg:x="79" fg:w="1"/><text x="6.6519%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="6.4019%" y="645" width="0.0810%" height="15" fill="rgb(222,56,52)" fg:x="79" fg:w="1"/><text x="6.6519%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.4019%" y="629" width="0.0810%" height="15" fill="rgb(245,217,50)" fg:x="79" fg:w="1"/><text x="6.6519%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.4019%" y="613" width="0.0810%" height="15" fill="rgb(213,201,24)" fg:x="79" fg:w="1"/><text x="6.6519%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4019%" y="597" width="0.0810%" height="15" fill="rgb(248,116,28)" fg:x="79" fg:w="1"/><text x="6.6519%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4019%" y="581" width="0.0810%" height="15" fill="rgb(219,72,43)" fg:x="79" fg:w="1"/><text x="6.6519%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.4830%" y="741" width="0.0810%" height="15" fill="rgb(209,138,14)" fg:x="80" fg:w="1"/><text x="6.7330%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.4830%" y="725" width="0.0810%" height="15" fill="rgb(222,18,33)" fg:x="80" fg:w="1"/><text x="6.7330%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.4830%" y="709" width="0.0810%" height="15" fill="rgb(213,199,7)" fg:x="80" fg:w="1"/><text x="6.7330%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.4830%" y="693" width="0.0810%" height="15" fill="rgb(250,110,10)" fg:x="80" fg:w="1"/><text x="6.7330%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="6.4830%" y="677" width="0.0810%" height="15" fill="rgb(248,123,6)" fg:x="80" fg:w="1"/><text x="6.7330%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="6.4830%" y="661" width="0.0810%" height="15" fill="rgb(206,91,31)" fg:x="80" fg:w="1"/><text x="6.7330%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.4830%" y="645" width="0.0810%" height="15" fill="rgb(211,154,13)" fg:x="80" fg:w="1"/><text x="6.7330%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4830%" y="629" width="0.0810%" height="15" fill="rgb(225,148,7)" fg:x="80" fg:w="1"/><text x="6.7330%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4830%" y="613" width="0.0810%" height="15" fill="rgb(220,160,43)" fg:x="80" fg:w="1"/><text x="6.7330%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4830%" y="597" width="0.0810%" height="15" fill="rgb(213,52,39)" fg:x="80" fg:w="1"/><text x="6.7330%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4830%" y="581" width="0.0810%" height="15" fill="rgb(243,137,7)" fg:x="80" fg:w="1"/><text x="6.7330%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.4830%" y="565" width="0.0810%" height="15" fill="rgb(230,79,13)" fg:x="80" fg:w="1"/><text x="6.7330%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.4830%" y="549" width="0.0810%" height="15" fill="rgb(247,105,23)" fg:x="80" fg:w="1"/><text x="6.7330%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.4830%" y="533" width="0.0810%" height="15" fill="rgb(223,179,41)" fg:x="80" fg:w="1"/><text x="6.7330%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.4830%" y="517" width="0.0810%" height="15" fill="rgb(218,9,34)" fg:x="80" fg:w="1"/><text x="6.7330%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.4830%" y="501" width="0.0810%" height="15" fill="rgb(222,106,8)" fg:x="80" fg:w="1"/><text x="6.7330%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.4830%" y="485" width="0.0810%" height="15" fill="rgb(211,220,0)" fg:x="80" fg:w="1"/><text x="6.7330%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.4830%" y="469" width="0.0810%" height="15" fill="rgb(229,52,16)" fg:x="80" fg:w="1"/><text x="6.7330%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.4830%" y="453" width="0.0810%" height="15" fill="rgb(212,155,18)" fg:x="80" fg:w="1"/><text x="6.7330%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.4830%" y="437" width="0.0810%" height="15" fill="rgb(242,21,14)" fg:x="80" fg:w="1"/><text x="6.7330%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.4830%" y="421" width="0.0810%" height="15" fill="rgb(222,19,48)" fg:x="80" fg:w="1"/><text x="6.7330%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.4830%" y="405" width="0.0810%" height="15" fill="rgb(232,45,27)" fg:x="80" fg:w="1"/><text x="6.7330%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4830%" y="389" width="0.0810%" height="15" fill="rgb(249,103,42)" fg:x="80" fg:w="1"/><text x="6.7330%" y="399.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (45 samples, 3.65%)</title><rect x="2.9984%" y="773" width="3.6467%" height="15" fill="rgb(246,81,33)" fg:x="37" fg:w="45"/><text x="3.2484%" y="783.50">plug..</text></g><g><title>plugins_core::build::Build::with_username (2 samples, 0.16%)</title><rect x="6.4830%" y="757" width="0.1621%" height="15" fill="rgb(252,33,42)" fg:x="80" fg:w="2"/><text x="6.7330%" y="767.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="6.5640%" y="741" width="0.0810%" height="15" fill="rgb(209,212,41)" fg:x="81" fg:w="1"/><text x="6.8140%" y="751.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="6.5640%" y="725" width="0.0810%" height="15" fill="rgb(207,154,6)" fg:x="81" fg:w="1"/><text x="6.8140%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="6.5640%" y="709" width="0.0810%" height="15" fill="rgb(223,64,47)" fg:x="81" fg:w="1"/><text x="6.8140%" y="719.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.5640%" y="693" width="0.0810%" height="15" fill="rgb(211,161,38)" fg:x="81" fg:w="1"/><text x="6.8140%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.5640%" y="677" width="0.0810%" height="15" fill="rgb(219,138,40)" fg:x="81" fg:w="1"/><text x="6.8140%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.5640%" y="661" width="0.0810%" height="15" fill="rgb(241,228,46)" fg:x="81" fg:w="1"/><text x="6.8140%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.5640%" y="645" width="0.0810%" height="15" fill="rgb(223,209,38)" fg:x="81" fg:w="1"/><text x="6.8140%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.5640%" y="629" width="0.0810%" height="15" fill="rgb(236,164,45)" fg:x="81" fg:w="1"/><text x="6.8140%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.5640%" y="613" width="0.0810%" height="15" fill="rgb(231,15,5)" fg:x="81" fg:w="1"/><text x="6.8140%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="6.5640%" y="597" width="0.0810%" height="15" fill="rgb(252,35,15)" fg:x="81" fg:w="1"/><text x="6.8140%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="6.5640%" y="581" width="0.0810%" height="15" fill="rgb(248,181,18)" fg:x="81" fg:w="1"/><text x="6.8140%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="6.6451%" y="725" width="0.0810%" height="15" fill="rgb(233,39,42)" fg:x="82" fg:w="1"/><text x="6.8951%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="6.6451%" y="709" width="0.0810%" height="15" fill="rgb(238,110,33)" fg:x="82" fg:w="1"/><text x="6.8951%" y="719.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="6.6451%" y="693" width="0.0810%" height="15" fill="rgb(233,195,10)" fg:x="82" fg:w="1"/><text x="6.8951%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="6.6451%" y="677" width="0.0810%" height="15" fill="rgb(254,105,3)" fg:x="82" fg:w="1"/><text x="6.8951%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.6451%" y="661" width="0.0810%" height="15" fill="rgb(221,225,9)" fg:x="82" fg:w="1"/><text x="6.8951%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="6.6451%" y="645" width="0.0810%" height="15" fill="rgb(224,227,45)" fg:x="82" fg:w="1"/><text x="6.8951%" y="655.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="6.6451%" y="629" width="0.0810%" height="15" fill="rgb(229,198,43)" fg:x="82" fg:w="1"/><text x="6.8951%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="6.6451%" y="613" width="0.0810%" height="15" fill="rgb(206,209,35)" fg:x="82" fg:w="1"/><text x="6.8951%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.6451%" y="597" width="0.0810%" height="15" fill="rgb(245,195,53)" fg:x="82" fg:w="1"/><text x="6.8951%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.6451%" y="581" width="0.0810%" height="15" fill="rgb(240,92,26)" fg:x="82" fg:w="1"/><text x="6.8951%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.6451%" y="565" width="0.0810%" height="15" fill="rgb(207,40,23)" fg:x="82" fg:w="1"/><text x="6.8951%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="6.6451%" y="549" width="0.0810%" height="15" fill="rgb(223,111,35)" fg:x="82" fg:w="1"/><text x="6.8951%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="6.6451%" y="533" width="0.0810%" height="15" fill="rgb(229,147,28)" fg:x="82" fg:w="1"/><text x="6.8951%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="6.6451%" y="517" width="0.0810%" height="15" fill="rgb(211,29,28)" fg:x="82" fg:w="1"/><text x="6.8951%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="6.6451%" y="501" width="0.0810%" height="15" fill="rgb(228,72,33)" fg:x="82" fg:w="1"/><text x="6.8951%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="6.6451%" y="485" width="0.0810%" height="15" fill="rgb(205,214,31)" fg:x="82" fg:w="1"/><text x="6.8951%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="6.7261%" y="693" width="0.2431%" height="15" fill="rgb(224,111,15)" fg:x="83" fg:w="3"/><text x="6.9761%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (3 samples, 0.24%)</title><rect x="6.7261%" y="677" width="0.2431%" height="15" fill="rgb(253,21,26)" fg:x="83" fg:w="3"/><text x="6.9761%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (3 samples, 0.24%)</title><rect x="6.7261%" y="661" width="0.2431%" height="15" fill="rgb(245,139,43)" fg:x="83" fg:w="3"/><text x="6.9761%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="6.7261%" y="645" width="0.2431%" height="15" fill="rgb(252,170,7)" fg:x="83" fg:w="3"/><text x="6.9761%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="6.7261%" y="629" width="0.2431%" height="15" fill="rgb(231,118,14)" fg:x="83" fg:w="3"/><text x="6.9761%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.8071%" y="613" width="0.1621%" height="15" fill="rgb(238,83,0)" fg:x="84" fg:w="2"/><text x="7.0571%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.8071%" y="597" width="0.1621%" height="15" fill="rgb(221,39,39)" fg:x="84" fg:w="2"/><text x="7.0571%" y="607.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="6.8071%" y="581" width="0.1621%" height="15" fill="rgb(222,119,46)" fg:x="84" fg:w="2"/><text x="7.0571%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (5 samples, 0.41%)</title><rect x="6.6451%" y="773" width="0.4052%" height="15" fill="rgb(222,165,49)" fg:x="82" fg:w="5"/><text x="6.8951%" y="783.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.41%)</title><rect x="6.6451%" y="757" width="0.4052%" height="15" fill="rgb(219,113,52)" fg:x="82" fg:w="5"/><text x="6.8951%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.41%)</title><rect x="6.6451%" y="741" width="0.4052%" height="15" fill="rgb(214,7,15)" fg:x="82" fg:w="5"/><text x="6.8951%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="6.7261%" y="725" width="0.3241%" height="15" fill="rgb(235,32,4)" fg:x="83" fg:w="4"/><text x="6.9761%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="6.7261%" y="709" width="0.3241%" height="15" fill="rgb(238,90,54)" fg:x="83" fg:w="4"/><text x="6.9761%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="6.9692%" y="693" width="0.0810%" height="15" fill="rgb(213,208,19)" fg:x="86" fg:w="1"/><text x="7.2192%" y="703.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="6.9692%" y="677" width="0.0810%" height="15" fill="rgb(233,156,4)" fg:x="86" fg:w="1"/><text x="7.2192%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="6.9692%" y="661" width="0.0810%" height="15" fill="rgb(207,194,5)" fg:x="86" fg:w="1"/><text x="7.2192%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.9692%" y="645" width="0.0810%" height="15" fill="rgb(206,111,30)" fg:x="86" fg:w="1"/><text x="7.2192%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.9692%" y="629" width="0.0810%" height="15" fill="rgb(243,70,54)" fg:x="86" fg:w="1"/><text x="7.2192%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.9692%" y="613" width="0.0810%" height="15" fill="rgb(242,28,8)" fg:x="86" fg:w="1"/><text x="7.2192%" y="623.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (76 samples, 6.16%)</title><rect x="0.9724%" y="789" width="6.1588%" height="15" fill="rgb(219,106,18)" fg:x="12" fg:w="76"/><text x="1.2224%" y="799.50">&lt;tests::..</text></g><g><title>plugins_core::build::BuildSurroundings::route (1 samples, 0.08%)</title><rect x="7.0502%" y="773" width="0.0810%" height="15" fill="rgb(244,222,10)" fg:x="87" fg:w="1"/><text x="7.3002%" y="783.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="7.1313%" y="789" width="0.0810%" height="15" fill="rgb(236,179,52)" fg:x="88" fg:w="1"/><text x="7.3813%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.2934%" y="757" width="0.0810%" height="15" fill="rgb(213,23,39)" fg:x="90" fg:w="1"/><text x="7.5434%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;engine::session::ModifiedEntity&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="7.2934%" y="741" width="0.0810%" height="15" fill="rgb(238,48,10)" fg:x="90" fg:w="1"/><text x="7.5434%" y="751.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.2934%" y="725" width="0.0810%" height="15" fill="rgb(251,196,23)" fg:x="90" fg:w="1"/><text x="7.5434%" y="735.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="7.3744%" y="757" width="0.0810%" height="15" fill="rgb(250,152,24)" fg:x="91" fg:w="1"/><text x="7.6244%" y="767.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="7.3744%" y="741" width="0.0810%" height="15" fill="rgb(209,150,17)" fg:x="91" fg:w="1"/><text x="7.6244%" y="751.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="7.3744%" y="725" width="0.0810%" height="15" fill="rgb(234,202,34)" fg:x="91" fg:w="1"/><text x="7.6244%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.3744%" y="709" width="0.0810%" height="15" fill="rgb(253,148,53)" fg:x="91" fg:w="1"/><text x="7.6244%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="7.4554%" y="709" width="0.0810%" height="15" fill="rgb(218,129,16)" fg:x="92" fg:w="1"/><text x="7.7054%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.5365%" y="693" width="0.0810%" height="15" fill="rgb(216,85,19)" fg:x="93" fg:w="1"/><text x="7.7865%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.5365%" y="677" width="0.0810%" height="15" fill="rgb(235,228,7)" fg:x="93" fg:w="1"/><text x="7.7865%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.5365%" y="661" width="0.0810%" height="15" fill="rgb(245,175,0)" fg:x="93" fg:w="1"/><text x="7.7865%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.5365%" y="645" width="0.0810%" height="15" fill="rgb(208,168,36)" fg:x="93" fg:w="1"/><text x="7.7865%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="7.5365%" y="709" width="0.2431%" height="15" fill="rgb(246,171,24)" fg:x="93" fg:w="3"/><text x="7.7865%" y="719.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.6175%" y="693" width="0.1621%" height="15" fill="rgb(215,142,24)" fg:x="94" fg:w="2"/><text x="7.8675%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.6985%" y="677" width="0.0810%" height="15" fill="rgb(250,187,7)" fg:x="95" fg:w="1"/><text x="7.9485%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.6985%" y="661" width="0.0810%" height="15" fill="rgb(228,66,33)" fg:x="95" fg:w="1"/><text x="7.9485%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.7796%" y="693" width="0.0810%" height="15" fill="rgb(234,215,21)" fg:x="96" fg:w="1"/><text x="8.0296%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.7796%" y="677" width="0.0810%" height="15" fill="rgb(222,191,20)" fg:x="96" fg:w="1"/><text x="8.0296%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.8606%" y="677" width="0.0810%" height="15" fill="rgb(245,79,54)" fg:x="97" fg:w="1"/><text x="8.1106%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.8606%" y="661" width="0.0810%" height="15" fill="rgb(240,10,37)" fg:x="97" fg:w="1"/><text x="8.1106%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.9417%" y="661" width="0.0810%" height="15" fill="rgb(214,192,32)" fg:x="98" fg:w="1"/><text x="8.1917%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.9417%" y="645" width="0.0810%" height="15" fill="rgb(209,36,54)" fg:x="98" fg:w="1"/><text x="8.1917%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.9417%" y="629" width="0.0810%" height="15" fill="rgb(220,10,11)" fg:x="98" fg:w="1"/><text x="8.1917%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="7.8606%" y="693" width="0.2431%" height="15" fill="rgb(221,106,17)" fg:x="97" fg:w="3"/><text x="8.1106%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="7.9417%" y="677" width="0.1621%" height="15" fill="rgb(251,142,44)" fg:x="98" fg:w="2"/><text x="8.1917%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.0227%" y="661" width="0.0810%" height="15" fill="rgb(238,13,15)" fg:x="99" fg:w="1"/><text x="8.2727%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="7.7796%" y="709" width="0.4052%" height="15" fill="rgb(208,107,27)" fg:x="96" fg:w="5"/><text x="8.0296%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.1037%" y="693" width="0.0810%" height="15" fill="rgb(205,136,37)" fg:x="100" fg:w="1"/><text x="8.3537%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.1037%" y="677" width="0.0810%" height="15" fill="rgb(250,205,27)" fg:x="100" fg:w="1"/><text x="8.3537%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.1037%" y="661" width="0.0810%" height="15" fill="rgb(210,80,43)" fg:x="100" fg:w="1"/><text x="8.3537%" y="671.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.81%)</title><rect x="7.4554%" y="725" width="0.8104%" height="15" fill="rgb(247,160,36)" fg:x="92" fg:w="10"/><text x="7.7054%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.1848%" y="709" width="0.0810%" height="15" fill="rgb(234,13,49)" fg:x="101" fg:w="1"/><text x="8.4348%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.1848%" y="693" width="0.0810%" height="15" fill="rgb(234,122,0)" fg:x="101" fg:w="1"/><text x="8.4348%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.1848%" y="677" width="0.0810%" height="15" fill="rgb(207,146,38)" fg:x="101" fg:w="1"/><text x="8.4348%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.1848%" y="661" width="0.0810%" height="15" fill="rgb(207,177,25)" fg:x="101" fg:w="1"/><text x="8.4348%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.2658%" y="677" width="0.0810%" height="15" fill="rgb(211,178,42)" fg:x="102" fg:w="1"/><text x="8.5158%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.2658%" y="661" width="0.0810%" height="15" fill="rgb(230,69,54)" fg:x="102" fg:w="1"/><text x="8.5158%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.2658%" y="725" width="0.1621%" height="15" fill="rgb(214,135,41)" fg:x="102" fg:w="2"/><text x="8.5158%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="8.2658%" y="709" width="0.1621%" height="15" fill="rgb(237,67,25)" fg:x="102" fg:w="2"/><text x="8.5158%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.2658%" y="693" width="0.1621%" height="15" fill="rgb(222,189,50)" fg:x="102" fg:w="2"/><text x="8.5158%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.3468%" y="677" width="0.0810%" height="15" fill="rgb(245,148,34)" fg:x="103" fg:w="1"/><text x="8.5968%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.3468%" y="661" width="0.0810%" height="15" fill="rgb(222,29,6)" fg:x="103" fg:w="1"/><text x="8.5968%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.3468%" y="645" width="0.0810%" height="15" fill="rgb(221,189,43)" fg:x="103" fg:w="1"/><text x="8.5968%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.4279%" y="661" width="0.0810%" height="15" fill="rgb(207,36,27)" fg:x="104" fg:w="1"/><text x="8.6779%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.6710%" y="581" width="0.0810%" height="15" fill="rgb(217,90,24)" fg:x="107" fg:w="1"/><text x="8.9210%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="8.4279%" y="693" width="0.4052%" height="15" fill="rgb(224,66,35)" fg:x="104" fg:w="5"/><text x="8.6779%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.41%)</title><rect x="8.4279%" y="677" width="0.4052%" height="15" fill="rgb(221,13,50)" fg:x="104" fg:w="5"/><text x="8.6779%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="8.5089%" y="661" width="0.3241%" height="15" fill="rgb(236,68,49)" fg:x="105" fg:w="4"/><text x="8.7589%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.5900%" y="645" width="0.2431%" height="15" fill="rgb(229,146,28)" fg:x="106" fg:w="3"/><text x="8.8400%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.6710%" y="629" width="0.1621%" height="15" fill="rgb(225,31,38)" fg:x="107" fg:w="2"/><text x="8.9210%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.6710%" y="613" width="0.1621%" height="15" fill="rgb(250,208,3)" fg:x="107" fg:w="2"/><text x="8.9210%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.6710%" y="597" width="0.1621%" height="15" fill="rgb(246,54,23)" fg:x="107" fg:w="2"/><text x="8.9210%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.7520%" y="581" width="0.0810%" height="15" fill="rgb(243,76,11)" fg:x="108" fg:w="1"/><text x="9.0020%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="8.8331%" y="661" width="0.0810%" height="15" fill="rgb(245,21,50)" fg:x="109" fg:w="1"/><text x="9.0831%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="8.8331%" y="645" width="0.0810%" height="15" fill="rgb(228,9,43)" fg:x="109" fg:w="1"/><text x="9.0831%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="8.8331%" y="629" width="0.0810%" height="15" fill="rgb(208,100,47)" fg:x="109" fg:w="1"/><text x="9.0831%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="8.8331%" y="613" width="0.0810%" height="15" fill="rgb(232,26,8)" fg:x="109" fg:w="1"/><text x="9.0831%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="8.8331%" y="597" width="0.0810%" height="15" fill="rgb(216,166,38)" fg:x="109" fg:w="1"/><text x="9.0831%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="8.8331%" y="581" width="0.0810%" height="15" fill="rgb(251,202,51)" fg:x="109" fg:w="1"/><text x="9.0831%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (7 samples, 0.57%)</title><rect x="8.4279%" y="709" width="0.5673%" height="15" fill="rgb(254,216,34)" fg:x="104" fg:w="7"/><text x="8.6779%" y="719.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="8.8331%" y="693" width="0.1621%" height="15" fill="rgb(251,32,27)" fg:x="109" fg:w="2"/><text x="9.0831%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="8.8331%" y="677" width="0.1621%" height="15" fill="rgb(208,127,28)" fg:x="109" fg:w="2"/><text x="9.0831%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.9141%" y="661" width="0.0810%" height="15" fill="rgb(224,137,22)" fg:x="110" fg:w="1"/><text x="9.1641%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="8.9951%" y="677" width="0.0810%" height="15" fill="rgb(254,70,32)" fg:x="111" fg:w="1"/><text x="9.2451%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="9.3193%" y="629" width="0.1621%" height="15" fill="rgb(229,75,37)" fg:x="115" fg:w="2"/><text x="9.5693%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.4003%" y="613" width="0.0810%" height="15" fill="rgb(252,64,23)" fg:x="116" fg:w="1"/><text x="9.6503%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.4003%" y="597" width="0.0810%" height="15" fill="rgb(232,162,48)" fg:x="116" fg:w="1"/><text x="9.6503%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="9.4814%" y="597" width="0.2431%" height="15" fill="rgb(246,160,12)" fg:x="117" fg:w="3"/><text x="9.7314%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.5624%" y="581" width="0.1621%" height="15" fill="rgb(247,166,0)" fg:x="118" fg:w="2"/><text x="9.8124%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="9.5624%" y="565" width="0.1621%" height="15" fill="rgb(249,219,21)" fg:x="118" fg:w="2"/><text x="9.8124%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.7245%" y="581" width="0.0810%" height="15" fill="rgb(205,209,3)" fg:x="120" fg:w="1"/><text x="9.9745%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8055%" y="565" width="0.0810%" height="15" fill="rgb(243,44,1)" fg:x="121" fg:w="1"/><text x="10.0555%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8055%" y="549" width="0.0810%" height="15" fill="rgb(206,159,16)" fg:x="121" fg:w="1"/><text x="10.0555%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.8055%" y="533" width="0.0810%" height="15" fill="rgb(244,77,30)" fg:x="121" fg:w="1"/><text x="10.0555%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0486%" y="501" width="0.0810%" height="15" fill="rgb(218,69,12)" fg:x="124" fg:w="1"/><text x="10.2986%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0486%" y="485" width="0.0810%" height="15" fill="rgb(212,87,7)" fg:x="124" fg:w="1"/><text x="10.2986%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.0486%" y="469" width="0.0810%" height="15" fill="rgb(245,114,25)" fg:x="124" fg:w="1"/><text x="10.2986%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="9.8055%" y="581" width="0.4052%" height="15" fill="rgb(210,61,42)" fg:x="121" fg:w="5"/><text x="10.0555%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="9.8865%" y="565" width="0.3241%" height="15" fill="rgb(211,52,33)" fg:x="122" fg:w="4"/><text x="10.1365%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="9.9676%" y="549" width="0.2431%" height="15" fill="rgb(234,58,33)" fg:x="123" fg:w="3"/><text x="10.2176%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="9.9676%" y="533" width="0.2431%" height="15" fill="rgb(220,115,36)" fg:x="123" fg:w="3"/><text x="10.2176%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.0486%" y="517" width="0.1621%" height="15" fill="rgb(243,153,54)" fg:x="124" fg:w="2"/><text x="10.2986%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.1297%" y="501" width="0.0810%" height="15" fill="rgb(251,47,18)" fg:x="125" fg:w="1"/><text x="10.3797%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (16 samples, 1.30%)</title><rect x="8.9951%" y="709" width="1.2966%" height="15" fill="rgb(242,102,42)" fg:x="111" fg:w="16"/><text x="9.2451%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.30%)</title><rect x="8.9951%" y="693" width="1.2966%" height="15" fill="rgb(234,31,38)" fg:x="111" fg:w="16"/><text x="9.2451%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (15 samples, 1.22%)</title><rect x="9.0762%" y="677" width="1.2156%" height="15" fill="rgb(221,117,51)" fg:x="112" fg:w="15"/><text x="9.3262%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.05%)</title><rect x="9.2382%" y="661" width="1.0535%" height="15" fill="rgb(212,20,18)" fg:x="114" fg:w="13"/><text x="9.4882%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (12 samples, 0.97%)</title><rect x="9.3193%" y="645" width="0.9724%" height="15" fill="rgb(245,133,36)" fg:x="115" fg:w="12"/><text x="9.5693%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (10 samples, 0.81%)</title><rect x="9.4814%" y="629" width="0.8104%" height="15" fill="rgb(212,6,19)" fg:x="117" fg:w="10"/><text x="9.7314%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 0.81%)</title><rect x="9.4814%" y="613" width="0.8104%" height="15" fill="rgb(218,1,36)" fg:x="117" fg:w="10"/><text x="9.7314%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.57%)</title><rect x="9.7245%" y="597" width="0.5673%" height="15" fill="rgb(246,84,54)" fg:x="120" fg:w="7"/><text x="9.9745%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.2107%" y="581" width="0.0810%" height="15" fill="rgb(242,110,6)" fg:x="126" fg:w="1"/><text x="10.4607%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.5348%" y="453" width="0.0810%" height="15" fill="rgb(214,47,5)" fg:x="130" fg:w="1"/><text x="10.7848%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.5348%" y="437" width="0.0810%" height="15" fill="rgb(218,159,25)" fg:x="130" fg:w="1"/><text x="10.7848%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="10.5348%" y="517" width="0.1621%" height="15" fill="rgb(215,211,28)" fg:x="130" fg:w="2"/><text x="10.7848%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="10.5348%" y="501" width="0.1621%" height="15" fill="rgb(238,59,32)" fg:x="130" fg:w="2"/><text x="10.7848%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="10.5348%" y="485" width="0.1621%" height="15" fill="rgb(226,82,3)" fg:x="130" fg:w="2"/><text x="10.7848%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="10.5348%" y="469" width="0.1621%" height="15" fill="rgb(240,164,32)" fg:x="130" fg:w="2"/><text x="10.7848%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.6159%" y="453" width="0.0810%" height="15" fill="rgb(232,46,7)" fg:x="131" fg:w="1"/><text x="10.8659%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.6159%" y="437" width="0.0810%" height="15" fill="rgb(229,129,53)" fg:x="131" fg:w="1"/><text x="10.8659%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.6159%" y="421" width="0.0810%" height="15" fill="rgb(234,188,29)" fg:x="131" fg:w="1"/><text x="10.8659%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.6969%" y="517" width="0.0810%" height="15" fill="rgb(246,141,4)" fg:x="132" fg:w="1"/><text x="10.9469%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="10.5348%" y="581" width="0.4052%" height="15" fill="rgb(229,23,39)" fg:x="130" fg:w="5"/><text x="10.7848%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="10.5348%" y="565" width="0.4052%" height="15" fill="rgb(206,12,3)" fg:x="130" fg:w="5"/><text x="10.7848%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="10.5348%" y="549" width="0.4052%" height="15" fill="rgb(252,226,20)" fg:x="130" fg:w="5"/><text x="10.7848%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="10.5348%" y="533" width="0.4052%" height="15" fill="rgb(216,123,35)" fg:x="130" fg:w="5"/><text x="10.7848%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.7780%" y="517" width="0.1621%" height="15" fill="rgb(212,68,40)" fg:x="133" fg:w="2"/><text x="11.0280%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.7780%" y="501" width="0.1621%" height="15" fill="rgb(254,125,32)" fg:x="133" fg:w="2"/><text x="11.0280%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.57%)</title><rect x="10.4538%" y="613" width="0.5673%" height="15" fill="rgb(253,97,22)" fg:x="129" fg:w="7"/><text x="10.7038%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="10.5348%" y="597" width="0.4862%" height="15" fill="rgb(241,101,14)" fg:x="130" fg:w="6"/><text x="10.7848%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9400%" y="581" width="0.0810%" height="15" fill="rgb(238,103,29)" fg:x="135" fg:w="1"/><text x="11.1900%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9400%" y="565" width="0.0810%" height="15" fill="rgb(233,195,47)" fg:x="135" fg:w="1"/><text x="11.1900%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.73%)</title><rect x="10.3728%" y="645" width="0.7293%" height="15" fill="rgb(246,218,30)" fg:x="128" fg:w="9"/><text x="10.6228%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.73%)</title><rect x="10.3728%" y="629" width="0.7293%" height="15" fill="rgb(219,145,47)" fg:x="128" fg:w="9"/><text x="10.6228%" y="639.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.0211%" y="613" width="0.0810%" height="15" fill="rgb(243,12,26)" fg:x="136" fg:w="1"/><text x="11.2711%" y="623.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="11.0211%" y="597" width="0.0810%" height="15" fill="rgb(214,87,16)" fg:x="136" fg:w="1"/><text x="11.2711%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="11.0211%" y="581" width="0.0810%" height="15" fill="rgb(208,99,42)" fg:x="136" fg:w="1"/><text x="11.2711%" y="591.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (47 samples, 3.81%)</title><rect x="7.4554%" y="757" width="3.8088%" height="15" fill="rgb(253,99,2)" fg:x="92" fg:w="47"/><text x="7.7054%" y="767.50">engi..</text></g><g><title>engine::session::SavesEntities::check_for_changes (47 samples, 3.81%)</title><rect x="7.4554%" y="741" width="3.8088%" height="15" fill="rgb(220,168,23)" fg:x="92" fg:w="47"/><text x="7.7054%" y="751.50">engi..</text></g><g><title>kernel::model::any_entity_changes (35 samples, 2.84%)</title><rect x="8.4279%" y="725" width="2.8363%" height="15" fill="rgb(242,38,24)" fg:x="104" fg:w="35"/><text x="8.6779%" y="735.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (12 samples, 0.97%)</title><rect x="10.2917%" y="709" width="0.9724%" height="15" fill="rgb(225,182,9)" fg:x="127" fg:w="12"/><text x="10.5417%" y="719.50"></text></g><g><title>serde_json::de::from_trait (12 samples, 0.97%)</title><rect x="10.2917%" y="693" width="0.9724%" height="15" fill="rgb(243,178,37)" fg:x="127" fg:w="12"/><text x="10.5417%" y="703.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.97%)</title><rect x="10.2917%" y="677" width="0.9724%" height="15" fill="rgb(232,139,19)" fg:x="127" fg:w="12"/><text x="10.5417%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (12 samples, 0.97%)</title><rect x="10.2917%" y="661" width="0.9724%" height="15" fill="rgb(225,201,24)" fg:x="127" fg:w="12"/><text x="10.5417%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.1021%" y="645" width="0.1621%" height="15" fill="rgb(221,47,46)" fg:x="137" fg:w="2"/><text x="11.3521%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.1021%" y="629" width="0.1621%" height="15" fill="rgb(249,23,13)" fg:x="137" fg:w="2"/><text x="11.3521%" y="639.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="11.1021%" y="613" width="0.1621%" height="15" fill="rgb(219,9,5)" fg:x="137" fg:w="2"/><text x="11.3521%" y="623.50"></text></g><g><title>engine::session::Session::save_entity_changes (50 samples, 4.05%)</title><rect x="7.2934%" y="773" width="4.0519%" height="15" fill="rgb(254,171,16)" fg:x="90" fg:w="50"/><text x="7.5434%" y="783.50">engi..</text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="11.2642%" y="757" width="0.0810%" height="15" fill="rgb(230,171,20)" fg:x="139" fg:w="1"/><text x="11.5142%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="11.2642%" y="741" width="0.0810%" height="15" fill="rgb(210,71,41)" fg:x="139" fg:w="1"/><text x="11.5142%" y="751.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="11.2642%" y="725" width="0.0810%" height="15" fill="rgb(206,173,20)" fg:x="139" fg:w="1"/><text x="11.5142%" y="735.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="11.2642%" y="709" width="0.0810%" height="15" fill="rgb(233,88,34)" fg:x="139" fg:w="1"/><text x="11.5142%" y="719.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="11.2642%" y="693" width="0.0810%" height="15" fill="rgb(223,209,46)" fg:x="139" fg:w="1"/><text x="11.5142%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="11.2642%" y="677" width="0.0810%" height="15" fill="rgb(250,43,18)" fg:x="139" fg:w="1"/><text x="11.5142%" y="687.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="11.2642%" y="661" width="0.0810%" height="15" fill="rgb(208,13,10)" fg:x="139" fg:w="1"/><text x="11.5142%" y="671.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="11.2642%" y="645" width="0.0810%" height="15" fill="rgb(212,200,36)" fg:x="139" fg:w="1"/><text x="11.5142%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="11.3452%" y="773" width="0.0810%" height="15" fill="rgb(225,90,30)" fg:x="140" fg:w="1"/><text x="11.5952%" y="783.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::deliver (1 samples, 0.08%)</title><rect x="11.3452%" y="757" width="0.0810%" height="15" fill="rgb(236,182,39)" fg:x="140" fg:w="1"/><text x="11.5952%" y="767.50"></text></g><g><title>engine::session::Session::close (53 samples, 4.29%)</title><rect x="7.2123%" y="789" width="4.2950%" height="15" fill="rgb(212,144,35)" fg:x="89" fg:w="53"/><text x="7.4623%" y="799.50">engin..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="11.4263%" y="773" width="0.0810%" height="15" fill="rgb(228,63,44)" fg:x="141" fg:w="1"/><text x="11.6763%" y="783.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="11.4263%" y="757" width="0.0810%" height="15" fill="rgb(228,109,6)" fg:x="141" fg:w="1"/><text x="11.6763%" y="767.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="11.4263%" y="741" width="0.0810%" height="15" fill="rgb(238,117,24)" fg:x="141" fg:w="1"/><text x="11.6763%" y="751.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="11.4263%" y="725" width="0.0810%" height="15" fill="rgb(242,26,26)" fg:x="141" fg:w="1"/><text x="11.6763%" y="735.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="11.4263%" y="709" width="0.0810%" height="15" fill="rgb(221,92,48)" fg:x="141" fg:w="1"/><text x="11.6763%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.5883%" y="741" width="0.0810%" height="15" fill="rgb(209,209,32)" fg:x="143" fg:w="1"/><text x="11.8383%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.5883%" y="725" width="0.0810%" height="15" fill="rgb(221,70,22)" fg:x="143" fg:w="1"/><text x="11.8383%" y="735.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="11.6694%" y="693" width="0.0810%" height="15" fill="rgb(248,145,5)" fg:x="144" fg:w="1"/><text x="11.9194%" y="703.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="11.6694%" y="677" width="0.0810%" height="15" fill="rgb(226,116,26)" fg:x="144" fg:w="1"/><text x="11.9194%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="11.9125%" y="629" width="0.0810%" height="15" fill="rgb(244,5,17)" fg:x="147" fg:w="1"/><text x="12.1625%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.9125%" y="613" width="0.0810%" height="15" fill="rgb(252,159,33)" fg:x="147" fg:w="1"/><text x="12.1625%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.2366%" y="549" width="0.0810%" height="15" fill="rgb(206,71,0)" fg:x="151" fg:w="1"/><text x="12.4866%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.2366%" y="533" width="0.0810%" height="15" fill="rgb(233,118,54)" fg:x="151" fg:w="1"/><text x="12.4866%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.3177%" y="421" width="0.0810%" height="15" fill="rgb(234,83,48)" fg:x="152" fg:w="1"/><text x="12.5677%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.3987%" y="389" width="0.0810%" height="15" fill="rgb(228,3,54)" fg:x="153" fg:w="1"/><text x="12.6487%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::desc (5 samples, 0.41%)</title><rect x="12.1556%" y="597" width="0.4052%" height="15" fill="rgb(226,155,13)" fg:x="150" fg:w="5"/><text x="12.4056%" y="607.50"></text></g><g><title>kernel::model::scopes::load_props (5 samples, 0.41%)</title><rect x="12.1556%" y="581" width="0.4052%" height="15" fill="rgb(241,28,37)" fg:x="150" fg:w="5"/><text x="12.4056%" y="591.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (5 samples, 0.41%)</title><rect x="12.1556%" y="565" width="0.4052%" height="15" fill="rgb(233,93,10)" fg:x="150" fg:w="5"/><text x="12.4056%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="12.3177%" y="549" width="0.2431%" height="15" fill="rgb(225,113,19)" fg:x="152" fg:w="3"/><text x="12.5677%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="12.3177%" y="533" width="0.2431%" height="15" fill="rgb(241,2,18)" fg:x="152" fg:w="3"/><text x="12.5677%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="12.3177%" y="517" width="0.2431%" height="15" fill="rgb(228,207,21)" fg:x="152" fg:w="3"/><text x="12.5677%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="12.3177%" y="501" width="0.2431%" height="15" fill="rgb(213,211,35)" fg:x="152" fg:w="3"/><text x="12.5677%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (3 samples, 0.24%)</title><rect x="12.3177%" y="485" width="0.2431%" height="15" fill="rgb(209,83,10)" fg:x="152" fg:w="3"/><text x="12.5677%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="12.3177%" y="469" width="0.2431%" height="15" fill="rgb(209,164,1)" fg:x="152" fg:w="3"/><text x="12.5677%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="12.3177%" y="453" width="0.2431%" height="15" fill="rgb(213,184,43)" fg:x="152" fg:w="3"/><text x="12.5677%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="12.3177%" y="437" width="0.2431%" height="15" fill="rgb(231,61,34)" fg:x="152" fg:w="3"/><text x="12.5677%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="12.3987%" y="421" width="0.1621%" height="15" fill="rgb(235,75,3)" fg:x="153" fg:w="2"/><text x="12.6487%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="12.3987%" y="405" width="0.1621%" height="15" fill="rgb(220,106,47)" fg:x="153" fg:w="2"/><text x="12.6487%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="12.4797%" y="389" width="0.0810%" height="15" fill="rgb(210,196,33)" fg:x="154" fg:w="1"/><text x="12.7297%" y="399.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="12.4797%" y="373" width="0.0810%" height="15" fill="rgb(229,154,42)" fg:x="154" fg:w="1"/><text x="12.7297%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.5608%" y="533" width="0.1621%" height="15" fill="rgb(228,114,26)" fg:x="155" fg:w="2"/><text x="12.8108%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.5608%" y="517" width="0.1621%" height="15" fill="rgb(208,144,1)" fg:x="155" fg:w="2"/><text x="12.8108%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.5608%" y="501" width="0.1621%" height="15" fill="rgb(239,112,37)" fg:x="155" fg:w="2"/><text x="12.8108%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.5608%" y="485" width="0.1621%" height="15" fill="rgb(210,96,50)" fg:x="155" fg:w="2"/><text x="12.8108%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.6418%" y="469" width="0.0810%" height="15" fill="rgb(222,178,2)" fg:x="156" fg:w="1"/><text x="12.8918%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.6418%" y="453" width="0.0810%" height="15" fill="rgb(226,74,18)" fg:x="156" fg:w="1"/><text x="12.8918%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.6418%" y="437" width="0.0810%" height="15" fill="rgb(225,67,54)" fg:x="156" fg:w="1"/><text x="12.8918%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.6418%" y="421" width="0.0810%" height="15" fill="rgb(251,92,32)" fg:x="156" fg:w="1"/><text x="12.8918%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.6418%" y="405" width="0.0810%" height="15" fill="rgb(228,149,22)" fg:x="156" fg:w="1"/><text x="12.8918%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.6418%" y="389" width="0.0810%" height="15" fill="rgb(243,54,13)" fg:x="156" fg:w="1"/><text x="12.8918%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="12.6418%" y="373" width="0.0810%" height="15" fill="rgb(243,180,28)" fg:x="156" fg:w="1"/><text x="12.8918%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="12.6418%" y="357" width="0.0810%" height="15" fill="rgb(208,167,24)" fg:x="156" fg:w="1"/><text x="12.8918%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="12.7229%" y="501" width="0.2431%" height="15" fill="rgb(245,73,45)" fg:x="157" fg:w="3"/><text x="12.9729%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="12.7229%" y="485" width="0.2431%" height="15" fill="rgb(237,203,48)" fg:x="157" fg:w="3"/><text x="12.9729%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.8039%" y="469" width="0.1621%" height="15" fill="rgb(211,197,16)" fg:x="158" fg:w="2"/><text x="13.0539%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.8039%" y="453" width="0.1621%" height="15" fill="rgb(243,99,51)" fg:x="158" fg:w="2"/><text x="13.0539%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="12.8039%" y="437" width="0.1621%" height="15" fill="rgb(215,123,29)" fg:x="158" fg:w="2"/><text x="13.0539%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (6 samples, 0.49%)</title><rect x="12.5608%" y="549" width="0.4862%" height="15" fill="rgb(239,186,37)" fg:x="155" fg:w="6"/><text x="12.8108%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="12.7229%" y="533" width="0.3241%" height="15" fill="rgb(252,136,39)" fg:x="157" fg:w="4"/><text x="12.9729%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="12.7229%" y="517" width="0.3241%" height="15" fill="rgb(223,213,32)" fg:x="157" fg:w="4"/><text x="12.9729%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.9660%" y="501" width="0.0810%" height="15" fill="rgb(233,115,5)" fg:x="160" fg:w="1"/><text x="13.2160%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.0470%" y="549" width="0.0810%" height="15" fill="rgb(207,226,44)" fg:x="161" fg:w="1"/><text x="13.2970%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="13.1280%" y="453" width="0.0810%" height="15" fill="rgb(208,126,0)" fg:x="162" fg:w="1"/><text x="13.3780%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.1280%" y="437" width="0.0810%" height="15" fill="rgb(244,66,21)" fg:x="162" fg:w="1"/><text x="13.3780%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.1280%" y="421" width="0.0810%" height="15" fill="rgb(222,97,12)" fg:x="162" fg:w="1"/><text x="13.3780%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (9 samples, 0.73%)</title><rect x="12.5608%" y="597" width="0.7293%" height="15" fill="rgb(219,213,19)" fg:x="155" fg:w="9"/><text x="12.8108%" y="607.50"></text></g><g><title>kernel::model::scopes::load_props (9 samples, 0.73%)</title><rect x="12.5608%" y="581" width="0.7293%" height="15" fill="rgb(252,169,30)" fg:x="155" fg:w="9"/><text x="12.8108%" y="591.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (9 samples, 0.73%)</title><rect x="12.5608%" y="565" width="0.7293%" height="15" fill="rgb(206,32,51)" fg:x="155" fg:w="9"/><text x="12.8108%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.1280%" y="549" width="0.1621%" height="15" fill="rgb(250,172,42)" fg:x="162" fg:w="2"/><text x="13.3780%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.1280%" y="533" width="0.1621%" height="15" fill="rgb(209,34,43)" fg:x="162" fg:w="2"/><text x="13.3780%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.1280%" y="517" width="0.1621%" height="15" fill="rgb(223,11,35)" fg:x="162" fg:w="2"/><text x="13.3780%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.1280%" y="501" width="0.1621%" height="15" fill="rgb(251,219,26)" fg:x="162" fg:w="2"/><text x="13.3780%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="13.1280%" y="485" width="0.1621%" height="15" fill="rgb(231,119,3)" fg:x="162" fg:w="2"/><text x="13.3780%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.1280%" y="469" width="0.1621%" height="15" fill="rgb(216,97,11)" fg:x="162" fg:w="2"/><text x="13.3780%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.2091%" y="453" width="0.0810%" height="15" fill="rgb(223,59,9)" fg:x="163" fg:w="1"/><text x="13.4591%" y="463.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="13.2901%" y="597" width="0.0810%" height="15" fill="rgb(233,93,31)" fg:x="164" fg:w="1"/><text x="13.5401%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.3712%" y="549" width="0.0810%" height="15" fill="rgb(239,81,33)" fg:x="165" fg:w="1"/><text x="13.6212%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="13.4522%" y="549" width="0.1621%" height="15" fill="rgb(213,120,34)" fg:x="166" fg:w="2"/><text x="13.7022%" y="559.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="13.4522%" y="533" width="0.1621%" height="15" fill="rgb(243,49,53)" fg:x="166" fg:w="2"/><text x="13.7022%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="13.5332%" y="517" width="0.0810%" height="15" fill="rgb(247,216,33)" fg:x="167" fg:w="1"/><text x="13.7832%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.5332%" y="501" width="0.0810%" height="15" fill="rgb(226,26,14)" fg:x="167" fg:w="1"/><text x="13.7832%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.5332%" y="485" width="0.0810%" height="15" fill="rgb(215,49,53)" fg:x="167" fg:w="1"/><text x="13.7832%" y="495.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="13.5332%" y="469" width="0.0810%" height="15" fill="rgb(245,162,40)" fg:x="167" fg:w="1"/><text x="13.7832%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="13.5332%" y="453" width="0.0810%" height="15" fill="rgb(229,68,17)" fg:x="167" fg:w="1"/><text x="13.7832%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="13.5332%" y="437" width="0.0810%" height="15" fill="rgb(213,182,10)" fg:x="167" fg:w="1"/><text x="13.7832%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="13.5332%" y="421" width="0.0810%" height="15" fill="rgb(245,125,30)" fg:x="167" fg:w="1"/><text x="13.7832%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="13.5332%" y="405" width="0.0810%" height="15" fill="rgb(232,202,2)" fg:x="167" fg:w="1"/><text x="13.7832%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.16%)</title><rect x="13.6143%" y="421" width="0.1621%" height="15" fill="rgb(237,140,51)" fg:x="168" fg:w="2"/><text x="13.8643%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (4 samples, 0.32%)</title><rect x="13.6143%" y="437" width="0.3241%" height="15" fill="rgb(236,157,25)" fg:x="168" fg:w="4"/><text x="13.8643%" y="447.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="13.7763%" y="421" width="0.1621%" height="15" fill="rgb(219,209,0)" fg:x="170" fg:w="2"/><text x="14.0263%" y="431.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="13.8574%" y="405" width="0.0810%" height="15" fill="rgb(240,116,54)" fg:x="171" fg:w="1"/><text x="14.1074%" y="415.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.41%)</title><rect x="13.6143%" y="453" width="0.4052%" height="15" fill="rgb(216,10,36)" fg:x="168" fg:w="5"/><text x="13.8643%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="13.9384%" y="437" width="0.0810%" height="15" fill="rgb(222,72,44)" fg:x="172" fg:w="1"/><text x="14.1884%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.49%)</title><rect x="13.6143%" y="517" width="0.4862%" height="15" fill="rgb(232,159,9)" fg:x="168" fg:w="6"/><text x="13.8643%" y="527.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.49%)</title><rect x="13.6143%" y="501" width="0.4862%" height="15" fill="rgb(210,39,32)" fg:x="168" fg:w="6"/><text x="13.8643%" y="511.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (6 samples, 0.49%)</title><rect x="13.6143%" y="485" width="0.4862%" height="15" fill="rgb(216,194,45)" fg:x="168" fg:w="6"/><text x="13.8643%" y="495.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (6 samples, 0.49%)</title><rect x="13.6143%" y="469" width="0.4862%" height="15" fill="rgb(218,18,35)" fg:x="168" fg:w="6"/><text x="13.8643%" y="479.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="14.0194%" y="453" width="0.0810%" height="15" fill="rgb(207,83,51)" fg:x="173" fg:w="1"/><text x="14.2694%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="14.0194%" y="437" width="0.0810%" height="15" fill="rgb(225,63,43)" fg:x="173" fg:w="1"/><text x="14.2694%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.0194%" y="421" width="0.0810%" height="15" fill="rgb(207,57,36)" fg:x="173" fg:w="1"/><text x="14.2694%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.0194%" y="405" width="0.0810%" height="15" fill="rgb(216,99,33)" fg:x="173" fg:w="1"/><text x="14.2694%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.0194%" y="389" width="0.0810%" height="15" fill="rgb(225,42,16)" fg:x="173" fg:w="1"/><text x="14.2694%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.1815%" y="469" width="0.0810%" height="15" fill="rgb(220,201,45)" fg:x="175" fg:w="1"/><text x="14.4315%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="14.1815%" y="453" width="0.0810%" height="15" fill="rgb(225,33,4)" fg:x="175" fg:w="1"/><text x="14.4315%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.2626%" y="469" width="0.0810%" height="15" fill="rgb(224,33,50)" fg:x="176" fg:w="1"/><text x="14.5126%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.3436%" y="437" width="0.0810%" height="15" fill="rgb(246,198,51)" fg:x="177" fg:w="1"/><text x="14.5936%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="14.3436%" y="469" width="0.1621%" height="15" fill="rgb(205,22,4)" fg:x="177" fg:w="2"/><text x="14.5936%" y="479.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="14.3436%" y="453" width="0.1621%" height="15" fill="rgb(206,3,8)" fg:x="177" fg:w="2"/><text x="14.5936%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.4246%" y="437" width="0.0810%" height="15" fill="rgb(251,23,15)" fg:x="178" fg:w="1"/><text x="14.6746%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.6677%" y="453" width="0.0810%" height="15" fill="rgb(252,88,28)" fg:x="181" fg:w="1"/><text x="14.9177%" y="463.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="14.7488%" y="437" width="0.1621%" height="15" fill="rgb(212,127,14)" fg:x="182" fg:w="2"/><text x="14.9988%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (35 samples, 2.84%)</title><rect x="14.7488%" y="453" width="2.8363%" height="15" fill="rgb(247,145,37)" fg:x="182" fg:w="35"/><text x="14.9988%" y="463.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (33 samples, 2.67%)</title><rect x="14.9109%" y="437" width="2.6742%" height="15" fill="rgb(209,117,53)" fg:x="184" fg:w="33"/><text x="15.1609%" y="447.50">co..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.5041%" y="421" width="0.0810%" height="15" fill="rgb(212,90,42)" fg:x="216" fg:w="1"/><text x="17.7541%" y="431.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.65%)</title><rect x="17.5851%" y="453" width="0.6483%" height="15" fill="rgb(218,164,37)" fg:x="217" fg:w="8"/><text x="17.8351%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.41%)</title><rect x="17.8282%" y="437" width="0.4052%" height="15" fill="rgb(246,65,34)" fg:x="220" fg:w="5"/><text x="18.0782%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="18.3955%" y="405" width="0.0810%" height="15" fill="rgb(231,100,33)" fg:x="227" fg:w="1"/><text x="18.6455%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.3955%" y="389" width="0.0810%" height="15" fill="rgb(228,126,14)" fg:x="227" fg:w="1"/><text x="18.6455%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.3955%" y="373" width="0.0810%" height="15" fill="rgb(215,173,21)" fg:x="227" fg:w="1"/><text x="18.6455%" y="383.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="18.5575%" y="389" width="0.0810%" height="15" fill="rgb(210,6,40)" fg:x="229" fg:w="1"/><text x="18.8075%" y="399.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="18.6386%" y="389" width="0.1621%" height="15" fill="rgb(212,48,18)" fg:x="230" fg:w="2"/><text x="18.8886%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="18.8006%" y="389" width="0.1621%" height="15" fill="rgb(230,214,11)" fg:x="232" fg:w="2"/><text x="19.0506%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="18.8006%" y="373" width="0.1621%" height="15" fill="rgb(254,105,39)" fg:x="232" fg:w="2"/><text x="19.0506%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="18.8006%" y="357" width="0.1621%" height="15" fill="rgb(245,158,5)" fg:x="232" fg:w="2"/><text x="19.0506%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="18.8817%" y="341" width="0.0810%" height="15" fill="rgb(249,208,11)" fg:x="233" fg:w="1"/><text x="19.1317%" y="351.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="19.0438%" y="325" width="0.0810%" height="15" fill="rgb(210,39,28)" fg:x="235" fg:w="1"/><text x="19.2938%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="18.9627%" y="389" width="0.3241%" height="15" fill="rgb(211,56,53)" fg:x="234" fg:w="4"/><text x="19.2127%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="19.0438%" y="373" width="0.2431%" height="15" fill="rgb(226,201,30)" fg:x="235" fg:w="3"/><text x="19.2938%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="19.0438%" y="357" width="0.2431%" height="15" fill="rgb(239,101,34)" fg:x="235" fg:w="3"/><text x="19.2938%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="19.0438%" y="341" width="0.2431%" height="15" fill="rgb(226,209,5)" fg:x="235" fg:w="3"/><text x="19.2938%" y="351.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="19.1248%" y="325" width="0.1621%" height="15" fill="rgb(250,105,47)" fg:x="236" fg:w="2"/><text x="19.3748%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (3 samples, 0.24%)</title><rect x="19.2869%" y="389" width="0.2431%" height="15" fill="rgb(230,72,3)" fg:x="238" fg:w="3"/><text x="19.5369%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="19.2869%" y="373" width="0.2431%" height="15" fill="rgb(232,218,39)" fg:x="238" fg:w="3"/><text x="19.5369%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="19.3679%" y="357" width="0.1621%" height="15" fill="rgb(248,166,6)" fg:x="239" fg:w="2"/><text x="19.6179%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="19.5300%" y="373" width="0.0810%" height="15" fill="rgb(247,89,20)" fg:x="241" fg:w="1"/><text x="19.7800%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.5300%" y="357" width="0.0810%" height="15" fill="rgb(248,130,54)" fg:x="241" fg:w="1"/><text x="19.7800%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.5300%" y="341" width="0.0810%" height="15" fill="rgb(234,196,4)" fg:x="241" fg:w="1"/><text x="19.7800%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (133 samples, 10.78%)</title><rect x="19.5300%" y="389" width="10.7780%" height="15" fill="rgb(250,143,31)" fg:x="241" fg:w="133"/><text x="19.7800%" y="399.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (132 samples, 10.70%)</title><rect x="19.6110%" y="373" width="10.6969%" height="15" fill="rgb(211,110,34)" fg:x="242" fg:w="132"/><text x="19.8610%" y="383.50">regex_automata::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (132 samples, 10.70%)</title><rect x="19.6110%" y="357" width="10.6969%" height="15" fill="rgb(215,124,48)" fg:x="242" fg:w="132"/><text x="19.8610%" y="367.50">alloc::vec::Vec&lt;..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.49%)</title><rect x="30.3079%" y="389" width="0.4862%" height="15" fill="rgb(216,46,13)" fg:x="374" fg:w="6"/><text x="30.5579%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (155 samples, 12.56%)</title><rect x="18.3144%" y="437" width="12.5608%" height="15" fill="rgb(205,184,25)" fg:x="226" fg:w="155"/><text x="18.5644%" y="447.50">&lt;core::iter::adapte..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (155 samples, 12.56%)</title><rect x="18.3144%" y="421" width="12.5608%" height="15" fill="rgb(228,1,10)" fg:x="226" fg:w="155"/><text x="18.5644%" y="431.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (153 samples, 12.40%)</title><rect x="18.4765%" y="405" width="12.3987%" height="15" fill="rgb(213,116,27)" fg:x="228" fg:w="153"/><text x="18.7265%" y="415.50">regex_automata::nfa..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="30.7942%" y="389" width="0.0810%" height="15" fill="rgb(241,95,50)" fg:x="380" fg:w="1"/><text x="31.0442%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="30.7942%" y="373" width="0.0810%" height="15" fill="rgb(238,48,32)" fg:x="380" fg:w="1"/><text x="31.0442%" y="383.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="30.9562%" y="421" width="0.0810%" height="15" fill="rgb(235,113,49)" fg:x="382" fg:w="1"/><text x="31.2062%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.0373%" y="421" width="0.0810%" height="15" fill="rgb(205,127,43)" fg:x="383" fg:w="1"/><text x="31.2873%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.1183%" y="421" width="0.0810%" height="15" fill="rgb(250,162,2)" fg:x="384" fg:w="1"/><text x="31.3683%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.1183%" y="405" width="0.0810%" height="15" fill="rgb(220,13,41)" fg:x="384" fg:w="1"/><text x="31.3683%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="31.1994%" y="421" width="0.1621%" height="15" fill="rgb(249,221,25)" fg:x="385" fg:w="2"/><text x="31.4494%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="31.1994%" y="405" width="0.1621%" height="15" fill="rgb(215,208,19)" fg:x="385" fg:w="2"/><text x="31.4494%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="31.1994%" y="389" width="0.1621%" height="15" fill="rgb(236,175,2)" fg:x="385" fg:w="2"/><text x="31.4494%" y="399.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="31.1994%" y="373" width="0.1621%" height="15" fill="rgb(241,52,2)" fg:x="385" fg:w="2"/><text x="31.4494%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.57%)</title><rect x="31.3614%" y="421" width="0.5673%" height="15" fill="rgb(248,140,14)" fg:x="387" fg:w="7"/><text x="31.6114%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.8476%" y="405" width="0.0810%" height="15" fill="rgb(253,22,42)" fg:x="393" fg:w="1"/><text x="32.0976%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.8476%" y="389" width="0.0810%" height="15" fill="rgb(234,61,47)" fg:x="393" fg:w="1"/><text x="32.0976%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.8476%" y="373" width="0.0810%" height="15" fill="rgb(208,226,15)" fg:x="393" fg:w="1"/><text x="32.0976%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (14 samples, 1.13%)</title><rect x="30.8752%" y="437" width="1.1345%" height="15" fill="rgb(217,221,4)" fg:x="381" fg:w="14"/><text x="31.1252%" y="447.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="31.9287%" y="421" width="0.0810%" height="15" fill="rgb(212,174,34)" fg:x="394" fg:w="1"/><text x="32.1787%" y="431.50"></text></g><g><title>regex_automata::meta::strategy::new (217 samples, 17.59%)</title><rect x="14.5057%" y="469" width="17.5851%" height="15" fill="rgb(253,83,4)" fg:x="179" fg:w="217"/><text x="14.7557%" y="479.50">regex_automata::meta::strat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (171 samples, 13.86%)</title><rect x="18.2334%" y="453" width="13.8574%" height="15" fill="rgb(250,195,49)" fg:x="225" fg:w="171"/><text x="18.4834%" y="463.50">regex_automata::nfa::..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="32.0097%" y="437" width="0.0810%" height="15" fill="rgb(241,192,25)" fg:x="395" fg:w="1"/><text x="32.2597%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="32.1718%" y="421" width="0.0810%" height="15" fill="rgb(208,124,10)" fg:x="397" fg:w="1"/><text x="32.4218%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="32.1718%" y="405" width="0.0810%" height="15" fill="rgb(222,33,0)" fg:x="397" fg:w="1"/><text x="32.4218%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="32.1718%" y="389" width="0.0810%" height="15" fill="rgb(234,209,28)" fg:x="397" fg:w="1"/><text x="32.4218%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="32.0908%" y="469" width="0.3241%" height="15" fill="rgb(224,11,23)" fg:x="396" fg:w="4"/><text x="32.3408%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="32.1718%" y="453" width="0.2431%" height="15" fill="rgb(232,99,1)" fg:x="397" fg:w="3"/><text x="32.4218%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="32.1718%" y="437" width="0.2431%" height="15" fill="rgb(237,95,45)" fg:x="397" fg:w="3"/><text x="32.4218%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="32.2528%" y="421" width="0.1621%" height="15" fill="rgb(208,109,11)" fg:x="398" fg:w="2"/><text x="32.5028%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="32.2528%" y="405" width="0.1621%" height="15" fill="rgb(216,190,48)" fg:x="398" fg:w="2"/><text x="32.5028%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="32.2528%" y="389" width="0.1621%" height="15" fill="rgb(251,171,36)" fg:x="398" fg:w="2"/><text x="32.5028%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="32.2528%" y="373" width="0.1621%" height="15" fill="rgb(230,62,22)" fg:x="398" fg:w="2"/><text x="32.5028%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="32.4959%" y="437" width="0.0810%" height="15" fill="rgb(225,114,35)" fg:x="401" fg:w="1"/><text x="32.7459%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.6580%" y="405" width="0.0810%" height="15" fill="rgb(215,118,42)" fg:x="403" fg:w="1"/><text x="32.9080%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.6580%" y="389" width="0.0810%" height="15" fill="rgb(243,119,21)" fg:x="403" fg:w="1"/><text x="32.9080%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.6580%" y="373" width="0.0810%" height="15" fill="rgb(252,177,53)" fg:x="403" fg:w="1"/><text x="32.9080%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (230 samples, 18.64%)</title><rect x="14.1815%" y="485" width="18.6386%" height="15" fill="rgb(237,209,29)" fg:x="175" fg:w="230"/><text x="14.4315%" y="495.50">regex_automata::meta::regex::..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.41%)</title><rect x="32.4149%" y="469" width="0.4052%" height="15" fill="rgb(212,65,23)" fg:x="400" fg:w="5"/><text x="32.6649%" y="479.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.41%)</title><rect x="32.4149%" y="453" width="0.4052%" height="15" fill="rgb(230,222,46)" fg:x="400" fg:w="5"/><text x="32.6649%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="32.5770%" y="437" width="0.2431%" height="15" fill="rgb(215,135,32)" fg:x="402" fg:w="3"/><text x="32.8270%" y="447.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="32.5770%" y="421" width="0.2431%" height="15" fill="rgb(246,101,22)" fg:x="402" fg:w="3"/><text x="32.8270%" y="431.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="32.7391%" y="405" width="0.0810%" height="15" fill="rgb(206,107,13)" fg:x="404" fg:w="1"/><text x="32.9891%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="32.8201%" y="485" width="0.0810%" height="15" fill="rgb(250,100,44)" fg:x="405" fg:w="1"/><text x="33.0701%" y="495.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (233 samples, 18.88%)</title><rect x="14.1005%" y="517" width="18.8817%" height="15" fill="rgb(231,147,38)" fg:x="174" fg:w="233"/><text x="14.3505%" y="527.50">&lt;regex::regex::string::Regex a..</text></g><g><title>regex::builders::Builder::build_one_string (233 samples, 18.88%)</title><rect x="14.1005%" y="501" width="18.8817%" height="15" fill="rgb(229,8,40)" fg:x="174" fg:w="233"/><text x="14.3505%" y="511.50">regex::builders::Builder::buil..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="32.9011%" y="485" width="0.0810%" height="15" fill="rgb(221,135,30)" fg:x="406" fg:w="1"/><text x="33.1511%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="33.0632%" y="469" width="0.0810%" height="15" fill="rgb(249,193,18)" fg:x="408" fg:w="1"/><text x="33.3132%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="33.0632%" y="453" width="0.0810%" height="15" fill="rgb(209,133,39)" fg:x="408" fg:w="1"/><text x="33.3132%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.0632%" y="437" width="0.0810%" height="15" fill="rgb(232,100,14)" fg:x="408" fg:w="1"/><text x="33.3132%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="33.0632%" y="485" width="0.1621%" height="15" fill="rgb(224,185,1)" fg:x="408" fg:w="2"/><text x="33.3132%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="33.1442%" y="469" width="0.0810%" height="15" fill="rgb(223,139,8)" fg:x="409" fg:w="1"/><text x="33.3942%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="33.1442%" y="453" width="0.0810%" height="15" fill="rgb(232,213,38)" fg:x="409" fg:w="1"/><text x="33.3942%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="33.3063%" y="453" width="0.1621%" height="15" fill="rgb(207,94,22)" fg:x="411" fg:w="2"/><text x="33.5563%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.3874%" y="437" width="0.0810%" height="15" fill="rgb(219,183,54)" fg:x="412" fg:w="1"/><text x="33.6374%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (10 samples, 0.81%)</title><rect x="32.9822%" y="517" width="0.8104%" height="15" fill="rgb(216,185,54)" fg:x="407" fg:w="10"/><text x="33.2322%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (10 samples, 0.81%)</title><rect x="32.9822%" y="501" width="0.8104%" height="15" fill="rgb(254,217,39)" fg:x="407" fg:w="10"/><text x="33.2322%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (7 samples, 0.57%)</title><rect x="33.2253%" y="485" width="0.5673%" height="15" fill="rgb(240,178,23)" fg:x="410" fg:w="7"/><text x="33.4753%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (7 samples, 0.57%)</title><rect x="33.2253%" y="469" width="0.5673%" height="15" fill="rgb(218,11,47)" fg:x="410" fg:w="7"/><text x="33.4753%" y="479.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="33.4684%" y="453" width="0.3241%" height="15" fill="rgb(218,51,51)" fg:x="413" fg:w="4"/><text x="33.7184%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="34.4408%" y="421" width="0.0810%" height="15" fill="rgb(238,126,27)" fg:x="425" fg:w="1"/><text x="34.6908%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="34.4408%" y="405" width="0.0810%" height="15" fill="rgb(249,202,22)" fg:x="425" fg:w="1"/><text x="34.6908%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="34.3598%" y="437" width="0.2431%" height="15" fill="rgb(254,195,49)" fg:x="424" fg:w="3"/><text x="34.6098%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.5219%" y="421" width="0.0810%" height="15" fill="rgb(208,123,14)" fg:x="426" fg:w="1"/><text x="34.7719%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="34.5219%" y="405" width="0.0810%" height="15" fill="rgb(224,200,8)" fg:x="426" fg:w="1"/><text x="34.7719%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.5219%" y="389" width="0.0810%" height="15" fill="rgb(217,61,36)" fg:x="426" fg:w="1"/><text x="34.7719%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (14 samples, 1.13%)</title><rect x="33.7925%" y="453" width="1.1345%" height="15" fill="rgb(206,35,45)" fg:x="417" fg:w="14"/><text x="34.0425%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="34.6029%" y="437" width="0.3241%" height="15" fill="rgb(217,65,33)" fg:x="427" fg:w="4"/><text x="34.8529%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.9271%" y="405" width="0.0810%" height="15" fill="rgb(222,158,48)" fg:x="431" fg:w="1"/><text x="35.1771%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (16 samples, 1.30%)</title><rect x="33.7925%" y="469" width="1.2966%" height="15" fill="rgb(254,2,54)" fg:x="417" fg:w="16"/><text x="34.0425%" y="479.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="34.9271%" y="453" width="0.1621%" height="15" fill="rgb(250,143,38)" fg:x="431" fg:w="2"/><text x="35.1771%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="34.9271%" y="437" width="0.1621%" height="15" fill="rgb(248,25,0)" fg:x="431" fg:w="2"/><text x="35.1771%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="34.9271%" y="421" width="0.1621%" height="15" fill="rgb(206,152,27)" fg:x="431" fg:w="2"/><text x="35.1771%" y="431.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="35.0081%" y="405" width="0.0810%" height="15" fill="rgb(240,77,30)" fg:x="432" fg:w="1"/><text x="35.2581%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="35.0081%" y="389" width="0.0810%" height="15" fill="rgb(231,5,3)" fg:x="432" fg:w="1"/><text x="35.2581%" y="399.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (266 samples, 21.56%)</title><rect x="13.6143%" y="533" width="21.5559%" height="15" fill="rgb(207,226,32)" fg:x="168" fg:w="266"/><text x="13.8643%" y="543.50">indefinite::helper::Helper::get_fi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (17 samples, 1.38%)</title><rect x="33.7925%" y="517" width="1.3776%" height="15" fill="rgb(222,207,47)" fg:x="417" fg:w="17"/><text x="34.0425%" y="527.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (17 samples, 1.38%)</title><rect x="33.7925%" y="501" width="1.3776%" height="15" fill="rgb(229,115,45)" fg:x="417" fg:w="17"/><text x="34.0425%" y="511.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (17 samples, 1.38%)</title><rect x="33.7925%" y="485" width="1.3776%" height="15" fill="rgb(224,191,6)" fg:x="417" fg:w="17"/><text x="34.0425%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="35.0891%" y="469" width="0.0810%" height="15" fill="rgb(230,227,24)" fg:x="433" fg:w="1"/><text x="35.3391%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="35.0891%" y="453" width="0.0810%" height="15" fill="rgb(228,80,19)" fg:x="433" fg:w="1"/><text x="35.3391%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="35.3323%" y="437" width="0.0810%" height="15" fill="rgb(247,229,0)" fg:x="436" fg:w="1"/><text x="35.5823%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="35.3323%" y="421" width="0.0810%" height="15" fill="rgb(237,194,15)" fg:x="436" fg:w="1"/><text x="35.5823%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.3323%" y="405" width="0.0810%" height="15" fill="rgb(219,203,20)" fg:x="436" fg:w="1"/><text x="35.5823%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.3323%" y="389" width="0.0810%" height="15" fill="rgb(234,128,8)" fg:x="436" fg:w="1"/><text x="35.5823%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.4133%" y="437" width="0.0810%" height="15" fill="rgb(248,202,8)" fg:x="437" fg:w="1"/><text x="35.6633%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="35.3323%" y="469" width="0.2431%" height="15" fill="rgb(206,104,37)" fg:x="436" fg:w="3"/><text x="35.5823%" y="479.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="35.3323%" y="453" width="0.2431%" height="15" fill="rgb(223,8,27)" fg:x="436" fg:w="3"/><text x="35.5823%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="35.4943%" y="437" width="0.0810%" height="15" fill="rgb(216,217,28)" fg:x="438" fg:w="1"/><text x="35.7443%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="35.5754%" y="437" width="0.0810%" height="15" fill="rgb(249,199,1)" fg:x="439" fg:w="1"/><text x="35.8254%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="35.5754%" y="421" width="0.0810%" height="15" fill="rgb(240,85,17)" fg:x="439" fg:w="1"/><text x="35.8254%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.5754%" y="405" width="0.0810%" height="15" fill="rgb(206,108,45)" fg:x="439" fg:w="1"/><text x="35.8254%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.5754%" y="389" width="0.0810%" height="15" fill="rgb(245,210,41)" fg:x="439" fg:w="1"/><text x="35.8254%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="35.5754%" y="469" width="0.1621%" height="15" fill="rgb(206,13,37)" fg:x="439" fg:w="2"/><text x="35.8254%" y="479.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="35.5754%" y="453" width="0.1621%" height="15" fill="rgb(250,61,18)" fg:x="439" fg:w="2"/><text x="35.8254%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="35.6564%" y="437" width="0.0810%" height="15" fill="rgb(235,172,48)" fg:x="440" fg:w="1"/><text x="35.9064%" y="447.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.6564%" y="421" width="0.0810%" height="15" fill="rgb(249,201,17)" fg:x="440" fg:w="1"/><text x="35.9064%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="35.6564%" y="405" width="0.0810%" height="15" fill="rgb(219,208,6)" fg:x="440" fg:w="1"/><text x="35.9064%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.6564%" y="389" width="0.0810%" height="15" fill="rgb(248,31,23)" fg:x="440" fg:w="1"/><text x="35.9064%" y="399.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="35.9806%" y="437" width="0.2431%" height="15" fill="rgb(245,15,42)" fg:x="444" fg:w="3"/><text x="36.2306%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (34 samples, 2.76%)</title><rect x="35.9806%" y="453" width="2.7553%" height="15" fill="rgb(222,217,39)" fg:x="444" fg:w="34"/><text x="36.2306%" y="463.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (31 samples, 2.51%)</title><rect x="36.2237%" y="437" width="2.5122%" height="15" fill="rgb(210,219,27)" fg:x="447" fg:w="31"/><text x="36.4737%" y="447.50">co..</text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="38.4927%" y="421" width="0.2431%" height="15" fill="rgb(252,166,36)" fg:x="475" fg:w="3"/><text x="38.7427%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::error::BuildError&gt; (1 samples, 0.08%)</title><rect x="38.7358%" y="453" width="0.0810%" height="15" fill="rgb(245,132,34)" fg:x="478" fg:w="1"/><text x="38.9858%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="38.8979%" y="437" width="0.0810%" height="15" fill="rgb(236,54,3)" fg:x="480" fg:w="1"/><text x="39.1479%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="38.8979%" y="421" width="0.0810%" height="15" fill="rgb(241,173,43)" fg:x="480" fg:w="1"/><text x="39.1479%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.49%)</title><rect x="38.9789%" y="437" width="0.4862%" height="15" fill="rgb(215,190,9)" fg:x="481" fg:w="6"/><text x="39.2289%" y="447.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (9 samples, 0.73%)</title><rect x="38.8169%" y="453" width="0.7293%" height="15" fill="rgb(242,101,16)" fg:x="479" fg:w="9"/><text x="39.0669%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="39.4652%" y="437" width="0.0810%" height="15" fill="rgb(223,190,21)" fg:x="487" fg:w="1"/><text x="39.7152%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="39.4652%" y="421" width="0.0810%" height="15" fill="rgb(215,228,25)" fg:x="487" fg:w="1"/><text x="39.7152%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="39.4652%" y="405" width="0.0810%" height="15" fill="rgb(225,36,22)" fg:x="487" fg:w="1"/><text x="39.7152%" y="415.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="40.1135%" y="421" width="0.1621%" height="15" fill="rgb(251,106,46)" fg:x="495" fg:w="2"/><text x="40.3635%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="40.1135%" y="405" width="0.1621%" height="15" fill="rgb(208,90,1)" fg:x="495" fg:w="2"/><text x="40.3635%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="40.1135%" y="389" width="0.1621%" height="15" fill="rgb(243,10,4)" fg:x="495" fg:w="2"/><text x="40.3635%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.1945%" y="373" width="0.0810%" height="15" fill="rgb(212,137,27)" fg:x="496" fg:w="1"/><text x="40.4445%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="40.4376%" y="389" width="0.1621%" height="15" fill="rgb(231,220,49)" fg:x="499" fg:w="2"/><text x="40.6876%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="40.4376%" y="373" width="0.1621%" height="15" fill="rgb(237,96,20)" fg:x="499" fg:w="2"/><text x="40.6876%" y="383.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="40.4376%" y="357" width="0.1621%" height="15" fill="rgb(239,229,30)" fg:x="499" fg:w="2"/><text x="40.6876%" y="367.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (5 samples, 0.41%)</title><rect x="40.2755%" y="421" width="0.4052%" height="15" fill="rgb(219,65,33)" fg:x="497" fg:w="5"/><text x="40.5255%" y="431.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="40.3566%" y="405" width="0.3241%" height="15" fill="rgb(243,134,7)" fg:x="498" fg:w="4"/><text x="40.6066%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.5997%" y="389" width="0.0810%" height="15" fill="rgb(216,177,54)" fg:x="501" fg:w="1"/><text x="40.8497%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.5997%" y="373" width="0.0810%" height="15" fill="rgb(211,160,20)" fg:x="501" fg:w="1"/><text x="40.8497%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.5997%" y="357" width="0.0810%" height="15" fill="rgb(239,85,39)" fg:x="501" fg:w="1"/><text x="40.8497%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.6807%" y="389" width="0.0810%" height="15" fill="rgb(232,125,22)" fg:x="502" fg:w="1"/><text x="40.9307%" y="399.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="40.6807%" y="421" width="0.2431%" height="15" fill="rgb(244,57,34)" fg:x="502" fg:w="3"/><text x="40.9307%" y="431.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="40.6807%" y="405" width="0.2431%" height="15" fill="rgb(214,203,32)" fg:x="502" fg:w="3"/><text x="40.9307%" y="415.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="40.7618%" y="389" width="0.1621%" height="15" fill="rgb(207,58,43)" fg:x="503" fg:w="2"/><text x="41.0118%" y="399.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (18 samples, 1.46%)</title><rect x="39.5462%" y="453" width="1.4587%" height="15" fill="rgb(215,193,15)" fg:x="488" fg:w="18"/><text x="39.7962%" y="463.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (15 samples, 1.22%)</title><rect x="39.7893%" y="437" width="1.2156%" height="15" fill="rgb(232,15,44)" fg:x="491" fg:w="15"/><text x="40.0393%" y="447.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="40.9238%" y="421" width="0.0810%" height="15" fill="rgb(212,3,48)" fg:x="505" fg:w="1"/><text x="41.1738%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.0049%" y="421" width="0.0810%" height="15" fill="rgb(218,128,7)" fg:x="506" fg:w="1"/><text x="41.2549%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.0049%" y="405" width="0.0810%" height="15" fill="rgb(226,216,39)" fg:x="506" fg:w="1"/><text x="41.2549%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.0049%" y="389" width="0.0810%" height="15" fill="rgb(243,47,51)" fg:x="506" fg:w="1"/><text x="41.2549%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="41.1669%" y="405" width="0.0810%" height="15" fill="rgb(241,183,40)" fg:x="508" fg:w="1"/><text x="41.4169%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="41.2480%" y="405" width="0.0810%" height="15" fill="rgb(231,217,32)" fg:x="509" fg:w="1"/><text x="41.4980%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.2480%" y="389" width="0.0810%" height="15" fill="rgb(229,61,38)" fg:x="509" fg:w="1"/><text x="41.4980%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.2480%" y="373" width="0.0810%" height="15" fill="rgb(225,210,5)" fg:x="509" fg:w="1"/><text x="41.4980%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.2480%" y="357" width="0.0810%" height="15" fill="rgb(231,79,45)" fg:x="509" fg:w="1"/><text x="41.4980%" y="367.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="42.7066%" y="341" width="0.2431%" height="15" fill="rgb(224,100,7)" fg:x="527" fg:w="3"/><text x="42.9566%" y="351.50"></text></g><g><title>__libc_free (5 samples, 0.41%)</title><rect x="42.9498%" y="341" width="0.4052%" height="15" fill="rgb(241,198,18)" fg:x="530" fg:w="5"/><text x="43.1998%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="43.3549%" y="341" width="0.3241%" height="15" fill="rgb(252,97,53)" fg:x="535" fg:w="4"/><text x="43.6049%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="43.4360%" y="325" width="0.2431%" height="15" fill="rgb(220,88,7)" fg:x="536" fg:w="3"/><text x="43.6860%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="43.4360%" y="309" width="0.2431%" height="15" fill="rgb(213,176,14)" fg:x="536" fg:w="3"/><text x="43.6860%" y="319.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="43.4360%" y="293" width="0.2431%" height="15" fill="rgb(246,73,7)" fg:x="536" fg:w="3"/><text x="43.6860%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="43.6791%" y="341" width="0.1621%" height="15" fill="rgb(245,64,36)" fg:x="539" fg:w="2"/><text x="43.9291%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.1653%" y="309" width="0.0810%" height="15" fill="rgb(245,80,10)" fg:x="545" fg:w="1"/><text x="44.4153%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.1653%" y="293" width="0.0810%" height="15" fill="rgb(232,107,50)" fg:x="545" fg:w="1"/><text x="44.4153%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.1653%" y="277" width="0.0810%" height="15" fill="rgb(253,3,0)" fg:x="545" fg:w="1"/><text x="44.4153%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (10 samples, 0.81%)</title><rect x="43.8412%" y="341" width="0.8104%" height="15" fill="rgb(212,99,53)" fg:x="541" fg:w="10"/><text x="44.0912%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (9 samples, 0.73%)</title><rect x="43.9222%" y="325" width="0.7293%" height="15" fill="rgb(249,111,54)" fg:x="542" fg:w="9"/><text x="44.1722%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.41%)</title><rect x="44.2464%" y="309" width="0.4052%" height="15" fill="rgb(249,55,30)" fg:x="546" fg:w="5"/><text x="44.4964%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="44.5705%" y="293" width="0.0810%" height="15" fill="rgb(237,47,42)" fg:x="550" fg:w="1"/><text x="44.8205%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.5705%" y="277" width="0.0810%" height="15" fill="rgb(211,20,18)" fg:x="550" fg:w="1"/><text x="44.8205%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.5705%" y="261" width="0.0810%" height="15" fill="rgb(231,203,46)" fg:x="550" fg:w="1"/><text x="44.8205%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="44.5705%" y="245" width="0.0810%" height="15" fill="rgb(237,142,3)" fg:x="550" fg:w="1"/><text x="44.8205%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (120 samples, 9.72%)</title><rect x="44.6515%" y="341" width="9.7245%" height="15" fill="rgb(241,107,1)" fg:x="551" fg:w="120"/><text x="44.9015%" y="351.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (120 samples, 9.72%)</title><rect x="44.6515%" y="325" width="9.7245%" height="15" fill="rgb(229,83,13)" fg:x="551" fg:w="120"/><text x="44.9015%" y="335.50">regex_automata..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (118 samples, 9.56%)</title><rect x="44.8136%" y="309" width="9.5624%" height="15" fill="rgb(241,91,40)" fg:x="553" fg:w="118"/><text x="45.0636%" y="319.50">alloc::vec::Ve..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="54.3760%" y="341" width="0.1621%" height="15" fill="rgb(225,3,45)" fg:x="671" fg:w="2"/><text x="54.6260%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.4571%" y="325" width="0.0810%" height="15" fill="rgb(244,223,14)" fg:x="672" fg:w="1"/><text x="54.7071%" y="335.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="54.5381%" y="341" width="0.0810%" height="15" fill="rgb(224,124,37)" fg:x="673" fg:w="1"/><text x="54.7881%" y="351.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (3 samples, 0.24%)</title><rect x="54.6191%" y="341" width="0.2431%" height="15" fill="rgb(251,171,30)" fg:x="674" fg:w="3"/><text x="54.8691%" y="351.50"></text></g><g><title>__libc_malloc (6 samples, 0.49%)</title><rect x="55.5105%" y="293" width="0.4862%" height="15" fill="rgb(236,46,54)" fg:x="685" fg:w="6"/><text x="55.7605%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (186 samples, 15.07%)</title><rect x="41.0049%" y="437" width="15.0729%" height="15" fill="rgb(245,213,5)" fg:x="506" fg:w="186"/><text x="41.2549%" y="447.50">&lt;core::iter::adapters::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (185 samples, 14.99%)</title><rect x="41.0859%" y="421" width="14.9919%" height="15" fill="rgb(230,144,27)" fg:x="507" fg:w="185"/><text x="41.3359%" y="431.50">regex_automata::nfa::th..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (182 samples, 14.75%)</title><rect x="41.3290%" y="405" width="14.7488%" height="15" fill="rgb(220,86,6)" fg:x="510" fg:w="182"/><text x="41.5790%" y="415.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (181 samples, 14.67%)</title><rect x="41.4100%" y="389" width="14.6677%" height="15" fill="rgb(240,20,13)" fg:x="511" fg:w="181"/><text x="41.6600%" y="399.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (181 samples, 14.67%)</title><rect x="41.4100%" y="373" width="14.6677%" height="15" fill="rgb(217,89,34)" fg:x="511" fg:w="181"/><text x="41.6600%" y="383.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (181 samples, 14.67%)</title><rect x="41.4100%" y="357" width="14.6677%" height="15" fill="rgb(229,13,5)" fg:x="511" fg:w="181"/><text x="41.6600%" y="367.50">regex_automata::nfa::t..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (15 samples, 1.22%)</title><rect x="54.8622%" y="341" width="1.2156%" height="15" fill="rgb(244,67,35)" fg:x="677" fg:w="15"/><text x="55.1122%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.89%)</title><rect x="55.1864%" y="325" width="0.8914%" height="15" fill="rgb(221,40,2)" fg:x="681" fg:w="11"/><text x="55.4364%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.65%)</title><rect x="55.4295%" y="309" width="0.6483%" height="15" fill="rgb(237,157,21)" fg:x="684" fg:w="8"/><text x="55.6795%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="55.9968%" y="293" width="0.0810%" height="15" fill="rgb(222,94,11)" fg:x="691" fg:w="1"/><text x="56.2468%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="55.9968%" y="277" width="0.0810%" height="15" fill="rgb(249,113,6)" fg:x="691" fg:w="1"/><text x="56.2468%" y="287.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="56.1588%" y="421" width="0.0810%" height="15" fill="rgb(238,137,36)" fg:x="693" fg:w="1"/><text x="56.4088%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.2399%" y="421" width="0.0810%" height="15" fill="rgb(210,102,26)" fg:x="694" fg:w="1"/><text x="56.4899%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.3209%" y="421" width="0.0810%" height="15" fill="rgb(218,30,30)" fg:x="695" fg:w="1"/><text x="56.5709%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.3209%" y="405" width="0.0810%" height="15" fill="rgb(214,67,26)" fg:x="695" fg:w="1"/><text x="56.5709%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.3209%" y="389" width="0.0810%" height="15" fill="rgb(251,9,53)" fg:x="695" fg:w="1"/><text x="56.5709%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="56.4019%" y="421" width="0.0810%" height="15" fill="rgb(228,204,25)" fg:x="696" fg:w="1"/><text x="56.6519%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (11 samples, 0.89%)</title><rect x="56.4830%" y="421" width="0.8914%" height="15" fill="rgb(207,153,8)" fg:x="697" fg:w="11"/><text x="56.7330%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="57.0502%" y="405" width="0.3241%" height="15" fill="rgb(242,9,16)" fg:x="704" fg:w="4"/><text x="57.3002%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="57.1313%" y="389" width="0.2431%" height="15" fill="rgb(217,211,10)" fg:x="705" fg:w="3"/><text x="57.3813%" y="399.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="57.1313%" y="373" width="0.2431%" height="15" fill="rgb(219,228,52)" fg:x="705" fg:w="3"/><text x="57.3813%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.41%)</title><rect x="57.3744%" y="421" width="0.4052%" height="15" fill="rgb(231,92,29)" fg:x="708" fg:w="5"/><text x="57.6244%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="57.7796%" y="421" width="0.0810%" height="15" fill="rgb(232,8,23)" fg:x="713" fg:w="1"/><text x="58.0296%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (24 samples, 1.94%)</title><rect x="56.0778%" y="437" width="1.9449%" height="15" fill="rgb(216,211,34)" fg:x="692" fg:w="24"/><text x="56.3278%" y="447.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="57.8606%" y="421" width="0.1621%" height="15" fill="rgb(236,151,0)" fg:x="714" fg:w="2"/><text x="58.1106%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (211 samples, 17.10%)</title><rect x="41.0049%" y="453" width="17.0989%" height="15" fill="rgb(209,168,3)" fg:x="506" fg:w="211"/><text x="41.2549%" y="463.50">regex_automata::nfa::thomp..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="58.0227%" y="437" width="0.0810%" height="15" fill="rgb(208,129,28)" fg:x="716" fg:w="1"/><text x="58.2727%" y="447.50"></text></g><g><title>regex_automata::meta::strategy::new (277 samples, 22.45%)</title><rect x="35.7374%" y="469" width="22.4473%" height="15" fill="rgb(229,78,22)" fg:x="441" fg:w="277"/><text x="35.9874%" y="479.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="58.1037%" y="453" width="0.0810%" height="15" fill="rgb(228,187,13)" fg:x="717" fg:w="1"/><text x="58.3537%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="58.1037%" y="437" width="0.0810%" height="15" fill="rgb(240,119,24)" fg:x="717" fg:w="1"/><text x="58.3537%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="58.1037%" y="421" width="0.0810%" height="15" fill="rgb(209,194,42)" fg:x="717" fg:w="1"/><text x="58.3537%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="58.1848%" y="437" width="0.1621%" height="15" fill="rgb(247,200,46)" fg:x="718" fg:w="2"/><text x="58.4348%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="58.1848%" y="421" width="0.1621%" height="15" fill="rgb(218,76,16)" fg:x="718" fg:w="2"/><text x="58.4348%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.2658%" y="405" width="0.0810%" height="15" fill="rgb(225,21,48)" fg:x="719" fg:w="1"/><text x="58.5158%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.2658%" y="389" width="0.0810%" height="15" fill="rgb(239,223,50)" fg:x="719" fg:w="1"/><text x="58.5158%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.2658%" y="373" width="0.0810%" height="15" fill="rgb(244,45,21)" fg:x="719" fg:w="1"/><text x="58.5158%" y="383.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (2 samples, 0.16%)</title><rect x="58.4279%" y="421" width="0.1621%" height="15" fill="rgb(232,33,43)" fg:x="721" fg:w="2"/><text x="58.6779%" y="431.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="58.5900%" y="421" width="0.0810%" height="15" fill="rgb(209,8,3)" fg:x="723" fg:w="1"/><text x="58.8400%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.57%)</title><rect x="58.1848%" y="469" width="0.5673%" height="15" fill="rgb(214,25,53)" fg:x="718" fg:w="7"/><text x="58.4348%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.57%)</title><rect x="58.1848%" y="453" width="0.5673%" height="15" fill="rgb(254,186,54)" fg:x="718" fg:w="7"/><text x="58.4348%" y="463.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.41%)</title><rect x="58.3468%" y="437" width="0.4052%" height="15" fill="rgb(208,174,49)" fg:x="720" fg:w="5"/><text x="58.5968%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.6710%" y="421" width="0.0810%" height="15" fill="rgb(233,191,51)" fg:x="724" fg:w="1"/><text x="58.9210%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.6710%" y="405" width="0.0810%" height="15" fill="rgb(222,134,10)" fg:x="724" fg:w="1"/><text x="58.9210%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.6710%" y="389" width="0.0810%" height="15" fill="rgb(230,226,20)" fg:x="724" fg:w="1"/><text x="58.9210%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.9951%" y="405" width="0.0810%" height="15" fill="rgb(251,111,25)" fg:x="728" fg:w="1"/><text x="59.2451%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.9951%" y="389" width="0.0810%" height="15" fill="rgb(224,40,46)" fg:x="728" fg:w="1"/><text x="59.2451%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.9951%" y="373" width="0.0810%" height="15" fill="rgb(236,108,47)" fg:x="728" fg:w="1"/><text x="59.2451%" y="383.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (7 samples, 0.57%)</title><rect x="58.8331%" y="421" width="0.5673%" height="15" fill="rgb(234,93,0)" fg:x="726" fg:w="7"/><text x="59.0831%" y="431.50"></text></g><g><title>core::slice::sort::merge_sort (4 samples, 0.32%)</title><rect x="59.0762%" y="405" width="0.3241%" height="15" fill="rgb(224,213,32)" fg:x="729" fg:w="4"/><text x="59.3262%" y="415.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="59.4003%" y="421" width="0.0810%" height="15" fill="rgb(251,11,48)" fg:x="733" fg:w="1"/><text x="59.6503%" y="431.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="59.4003%" y="405" width="0.0810%" height="15" fill="rgb(236,173,5)" fg:x="733" fg:w="1"/><text x="59.6503%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (9 samples, 0.73%)</title><rect x="58.8331%" y="437" width="0.7293%" height="15" fill="rgb(230,95,12)" fg:x="726" fg:w="9"/><text x="59.0831%" y="447.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="59.4814%" y="421" width="0.0810%" height="15" fill="rgb(232,209,1)" fg:x="734" fg:w="1"/><text x="59.7314%" y="431.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="59.4814%" y="405" width="0.0810%" height="15" fill="rgb(232,6,1)" fg:x="734" fg:w="1"/><text x="59.7314%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.4814%" y="389" width="0.0810%" height="15" fill="rgb(210,224,50)" fg:x="734" fg:w="1"/><text x="59.7314%" y="399.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="59.5624%" y="437" width="0.2431%" height="15" fill="rgb(228,127,35)" fg:x="735" fg:w="3"/><text x="59.8124%" y="447.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="59.7245%" y="421" width="0.0810%" height="15" fill="rgb(245,102,45)" fg:x="737" fg:w="1"/><text x="59.9745%" y="431.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (307 samples, 24.88%)</title><rect x="35.1702%" y="517" width="24.8784%" height="15" fill="rgb(214,1,49)" fg:x="434" fg:w="307"/><text x="35.4202%" y="527.50">&lt;regex::regex::string::Regex as core::co..</text></g><g><title>regex::builders::Builder::build_one_string (306 samples, 24.80%)</title><rect x="35.2512%" y="501" width="24.7974%" height="15" fill="rgb(226,163,40)" fg:x="435" fg:w="306"/><text x="35.5012%" y="511.50">regex::builders::Builder::build_one_stri..</text></g><g><title>regex_automata::meta::regex::Builder::build (306 samples, 24.80%)</title><rect x="35.2512%" y="485" width="24.7974%" height="15" fill="rgb(239,212,28)" fg:x="435" fg:w="306"/><text x="35.5012%" y="495.50">regex_automata::meta::regex::Builder::bu..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (16 samples, 1.30%)</title><rect x="58.7520%" y="469" width="1.2966%" height="15" fill="rgb(220,20,13)" fg:x="725" fg:w="16"/><text x="59.0020%" y="479.50"></text></g><g><title>regex_syntax::ast::visitor::visit (16 samples, 1.30%)</title><rect x="58.7520%" y="453" width="1.2966%" height="15" fill="rgb(210,164,35)" fg:x="725" fg:w="16"/><text x="59.0020%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (3 samples, 0.24%)</title><rect x="59.8055%" y="437" width="0.2431%" height="15" fill="rgb(248,109,41)" fg:x="738" fg:w="3"/><text x="60.0555%" y="447.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (2 samples, 0.16%)</title><rect x="59.8865%" y="421" width="0.1621%" height="15" fill="rgb(238,23,50)" fg:x="739" fg:w="2"/><text x="60.1365%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="59.8865%" y="405" width="0.1621%" height="15" fill="rgb(211,48,49)" fg:x="739" fg:w="2"/><text x="60.1365%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="59.8865%" y="389" width="0.1621%" height="15" fill="rgb(223,36,21)" fg:x="739" fg:w="2"/><text x="60.1365%" y="399.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="59.8865%" y="373" width="0.1621%" height="15" fill="rgb(207,123,46)" fg:x="739" fg:w="2"/><text x="60.1365%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.0486%" y="517" width="0.0810%" height="15" fill="rgb(240,218,32)" fg:x="741" fg:w="1"/><text x="60.2986%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="60.1297%" y="469" width="0.0810%" height="15" fill="rgb(252,5,43)" fg:x="742" fg:w="1"/><text x="60.3797%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.1297%" y="453" width="0.0810%" height="15" fill="rgb(252,84,19)" fg:x="742" fg:w="1"/><text x="60.3797%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="60.1297%" y="485" width="0.1621%" height="15" fill="rgb(243,152,39)" fg:x="742" fg:w="2"/><text x="60.3797%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="60.2107%" y="469" width="0.0810%" height="15" fill="rgb(234,160,15)" fg:x="743" fg:w="1"/><text x="60.4607%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="60.2107%" y="453" width="0.0810%" height="15" fill="rgb(237,34,20)" fg:x="743" fg:w="1"/><text x="60.4607%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.2107%" y="437" width="0.0810%" height="15" fill="rgb(229,97,13)" fg:x="743" fg:w="1"/><text x="60.4607%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="60.3728%" y="453" width="0.2431%" height="15" fill="rgb(234,71,50)" fg:x="745" fg:w="3"/><text x="60.6228%" y="463.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="60.4538%" y="437" width="0.1621%" height="15" fill="rgb(253,155,4)" fg:x="746" fg:w="2"/><text x="60.7038%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (6 samples, 0.49%)</title><rect x="60.2917%" y="469" width="0.4862%" height="15" fill="rgb(222,185,37)" fg:x="744" fg:w="6"/><text x="60.5417%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="60.6159%" y="453" width="0.1621%" height="15" fill="rgb(251,177,13)" fg:x="748" fg:w="2"/><text x="60.8659%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (9 samples, 0.73%)</title><rect x="60.1297%" y="517" width="0.7293%" height="15" fill="rgb(250,179,40)" fg:x="742" fg:w="9"/><text x="60.3797%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (9 samples, 0.73%)</title><rect x="60.1297%" y="501" width="0.7293%" height="15" fill="rgb(242,44,2)" fg:x="742" fg:w="9"/><text x="60.3797%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (7 samples, 0.57%)</title><rect x="60.2917%" y="485" width="0.5673%" height="15" fill="rgb(216,177,13)" fg:x="744" fg:w="7"/><text x="60.5417%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="60.7780%" y="469" width="0.0810%" height="15" fill="rgb(216,106,43)" fg:x="750" fg:w="1"/><text x="61.0280%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="60.8590%" y="469" width="0.0810%" height="15" fill="rgb(216,183,2)" fg:x="751" fg:w="1"/><text x="61.1090%" y="479.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="60.8590%" y="453" width="0.0810%" height="15" fill="rgb(249,75,3)" fg:x="751" fg:w="1"/><text x="61.1090%" y="463.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="60.8590%" y="501" width="0.1621%" height="15" fill="rgb(219,67,39)" fg:x="751" fg:w="2"/><text x="61.1090%" y="511.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="60.8590%" y="485" width="0.1621%" height="15" fill="rgb(253,228,2)" fg:x="751" fg:w="2"/><text x="61.1090%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="60.9400%" y="469" width="0.0810%" height="15" fill="rgb(235,138,27)" fg:x="752" fg:w="1"/><text x="61.1900%" y="479.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="60.9400%" y="453" width="0.0810%" height="15" fill="rgb(236,97,51)" fg:x="752" fg:w="1"/><text x="61.1900%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.9935%" y="421" width="0.0810%" height="15" fill="rgb(240,80,30)" fg:x="765" fg:w="1"/><text x="62.2435%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.9935%" y="405" width="0.0810%" height="15" fill="rgb(230,178,19)" fg:x="765" fg:w="1"/><text x="62.2435%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="61.9935%" y="389" width="0.0810%" height="15" fill="rgb(210,190,27)" fg:x="765" fg:w="1"/><text x="62.2435%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (13 samples, 1.05%)</title><rect x="61.1831%" y="437" width="1.0535%" height="15" fill="rgb(222,107,31)" fg:x="755" fg:w="13"/><text x="61.4331%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="62.0746%" y="421" width="0.1621%" height="15" fill="rgb(216,127,34)" fg:x="766" fg:w="2"/><text x="62.3246%" y="431.50"></text></g><g><title>indefinite::rules::number::Number::check (336 samples, 27.23%)</title><rect x="35.1702%" y="533" width="27.2285%" height="15" fill="rgb(234,116,52)" fg:x="434" fg:w="336"/><text x="35.4202%" y="543.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::is_match_at (19 samples, 1.54%)</title><rect x="60.8590%" y="517" width="1.5397%" height="15" fill="rgb(222,124,15)" fg:x="751" fg:w="19"/><text x="61.1090%" y="527.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (17 samples, 1.38%)</title><rect x="61.0211%" y="501" width="1.3776%" height="15" fill="rgb(231,179,28)" fg:x="753" fg:w="17"/><text x="61.2711%" y="511.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (16 samples, 1.30%)</title><rect x="61.1021%" y="485" width="1.2966%" height="15" fill="rgb(226,93,45)" fg:x="754" fg:w="16"/><text x="61.3521%" y="495.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (16 samples, 1.30%)</title><rect x="61.1021%" y="469" width="1.2966%" height="15" fill="rgb(215,8,51)" fg:x="754" fg:w="16"/><text x="61.3521%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (15 samples, 1.22%)</title><rect x="61.1831%" y="453" width="1.2156%" height="15" fill="rgb(223,106,5)" fg:x="755" fg:w="15"/><text x="61.4331%" y="463.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="62.2366%" y="437" width="0.1621%" height="15" fill="rgb(250,191,5)" fg:x="768" fg:w="2"/><text x="62.4866%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="62.2366%" y="421" width="0.1621%" height="15" fill="rgb(242,132,44)" fg:x="768" fg:w="2"/><text x="62.4866%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="62.2366%" y="405" width="0.1621%" height="15" fill="rgb(251,152,29)" fg:x="768" fg:w="2"/><text x="62.4866%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="62.2366%" y="389" width="0.1621%" height="15" fill="rgb(218,179,5)" fg:x="768" fg:w="2"/><text x="62.4866%" y="399.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="62.3987%" y="517" width="0.0810%" height="15" fill="rgb(227,67,19)" fg:x="770" fg:w="1"/><text x="62.6487%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.5608%" y="453" width="0.0810%" height="15" fill="rgb(233,119,31)" fg:x="772" fg:w="1"/><text x="62.8108%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="62.6418%" y="453" width="0.1621%" height="15" fill="rgb(241,120,22)" fg:x="773" fg:w="2"/><text x="62.8918%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.7229%" y="437" width="0.0810%" height="15" fill="rgb(224,102,30)" fg:x="774" fg:w="1"/><text x="62.9729%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.7229%" y="421" width="0.0810%" height="15" fill="rgb(210,164,37)" fg:x="774" fg:w="1"/><text x="62.9729%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="62.8039%" y="389" width="0.1621%" height="15" fill="rgb(226,191,16)" fg:x="775" fg:w="2"/><text x="63.0539%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="62.8039%" y="373" width="0.1621%" height="15" fill="rgb(214,40,45)" fg:x="775" fg:w="2"/><text x="63.0539%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.8849%" y="357" width="0.0810%" height="15" fill="rgb(244,29,26)" fg:x="776" fg:w="1"/><text x="63.1349%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.8849%" y="341" width="0.0810%" height="15" fill="rgb(216,16,5)" fg:x="776" fg:w="1"/><text x="63.1349%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="62.8039%" y="453" width="0.2431%" height="15" fill="rgb(249,76,35)" fg:x="775" fg:w="3"/><text x="63.0539%" y="463.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="62.8039%" y="437" width="0.2431%" height="15" fill="rgb(207,11,44)" fg:x="775" fg:w="3"/><text x="63.0539%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="62.8039%" y="421" width="0.2431%" height="15" fill="rgb(228,190,49)" fg:x="775" fg:w="3"/><text x="63.0539%" y="431.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="62.8039%" y="405" width="0.2431%" height="15" fill="rgb(214,173,12)" fg:x="775" fg:w="3"/><text x="63.0539%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.9660%" y="389" width="0.0810%" height="15" fill="rgb(218,26,35)" fg:x="777" fg:w="1"/><text x="63.2160%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="63.2091%" y="437" width="0.0810%" height="15" fill="rgb(220,200,19)" fg:x="780" fg:w="1"/><text x="63.4591%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="63.2901%" y="421" width="0.0810%" height="15" fill="rgb(239,95,49)" fg:x="781" fg:w="1"/><text x="63.5401%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="63.2901%" y="405" width="0.0810%" height="15" fill="rgb(235,85,53)" fg:x="781" fg:w="1"/><text x="63.5401%" y="415.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (2 samples, 0.16%)</title><rect x="63.2901%" y="437" width="0.1621%" height="15" fill="rgb(233,133,31)" fg:x="781" fg:w="2"/><text x="63.5401%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="63.3712%" y="421" width="0.0810%" height="15" fill="rgb(218,25,20)" fg:x="782" fg:w="1"/><text x="63.6212%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="63.3712%" y="405" width="0.0810%" height="15" fill="rgb(252,210,38)" fg:x="782" fg:w="1"/><text x="63.6212%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="63.3712%" y="389" width="0.0810%" height="15" fill="rgb(242,134,21)" fg:x="782" fg:w="1"/><text x="63.6212%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="63.4522%" y="421" width="0.1621%" height="15" fill="rgb(213,28,48)" fg:x="783" fg:w="2"/><text x="63.7022%" y="431.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="63.4522%" y="437" width="0.2431%" height="15" fill="rgb(250,196,2)" fg:x="783" fg:w="3"/><text x="63.7022%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="63.6143%" y="421" width="0.0810%" height="15" fill="rgb(227,5,17)" fg:x="785" fg:w="1"/><text x="63.8643%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="63.6143%" y="405" width="0.0810%" height="15" fill="rgb(221,226,24)" fg:x="785" fg:w="1"/><text x="63.8643%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="63.6953%" y="421" width="0.0810%" height="15" fill="rgb(211,5,48)" fg:x="786" fg:w="1"/><text x="63.9453%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="63.6953%" y="405" width="0.0810%" height="15" fill="rgb(219,150,6)" fg:x="786" fg:w="1"/><text x="63.9453%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.6953%" y="389" width="0.0810%" height="15" fill="rgb(251,46,16)" fg:x="786" fg:w="1"/><text x="63.9453%" y="399.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="63.6953%" y="437" width="0.1621%" height="15" fill="rgb(220,204,40)" fg:x="786" fg:w="2"/><text x="63.9453%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="63.7763%" y="421" width="0.0810%" height="15" fill="rgb(211,85,2)" fg:x="787" fg:w="1"/><text x="64.0263%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="63.7763%" y="405" width="0.0810%" height="15" fill="rgb(229,17,7)" fg:x="787" fg:w="1"/><text x="64.0263%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.8574%" y="405" width="0.0810%" height="15" fill="rgb(239,72,28)" fg:x="788" fg:w="1"/><text x="64.1074%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.8574%" y="389" width="0.0810%" height="15" fill="rgb(230,47,54)" fg:x="788" fg:w="1"/><text x="64.1074%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.8574%" y="373" width="0.0810%" height="15" fill="rgb(214,50,8)" fg:x="788" fg:w="1"/><text x="64.1074%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="63.8574%" y="421" width="0.2431%" height="15" fill="rgb(216,198,43)" fg:x="788" fg:w="3"/><text x="64.1074%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="63.9384%" y="405" width="0.1621%" height="15" fill="rgb(234,20,35)" fg:x="789" fg:w="2"/><text x="64.1884%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="64.0194%" y="389" width="0.0810%" height="15" fill="rgb(254,45,19)" fg:x="790" fg:w="1"/><text x="64.2694%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="64.0194%" y="373" width="0.0810%" height="15" fill="rgb(219,14,44)" fg:x="790" fg:w="1"/><text x="64.2694%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="64.0194%" y="357" width="0.0810%" height="15" fill="rgb(217,220,26)" fg:x="790" fg:w="1"/><text x="64.2694%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.0194%" y="341" width="0.0810%" height="15" fill="rgb(213,158,28)" fg:x="790" fg:w="1"/><text x="64.2694%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.0194%" y="325" width="0.0810%" height="15" fill="rgb(252,51,52)" fg:x="790" fg:w="1"/><text x="64.2694%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.0194%" y="309" width="0.0810%" height="15" fill="rgb(246,89,16)" fg:x="790" fg:w="1"/><text x="64.2694%" y="319.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="64.1005%" y="405" width="0.0810%" height="15" fill="rgb(216,158,49)" fg:x="791" fg:w="1"/><text x="64.3505%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="64.1815%" y="405" width="0.1621%" height="15" fill="rgb(236,107,19)" fg:x="792" fg:w="2"/><text x="64.4315%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.49%)</title><rect x="64.3436%" y="405" width="0.4862%" height="15" fill="rgb(228,185,30)" fg:x="794" fg:w="6"/><text x="64.5936%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="64.8298%" y="405" width="0.0810%" height="15" fill="rgb(246,134,8)" fg:x="800" fg:w="1"/><text x="65.0798%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (15 samples, 1.22%)</title><rect x="63.8574%" y="437" width="1.2156%" height="15" fill="rgb(214,143,50)" fg:x="788" fg:w="15"/><text x="64.1074%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.97%)</title><rect x="64.1005%" y="421" width="0.9724%" height="15" fill="rgb(228,75,8)" fg:x="791" fg:w="12"/><text x="64.3505%" y="431.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="64.9109%" y="405" width="0.1621%" height="15" fill="rgb(207,175,4)" fg:x="801" fg:w="2"/><text x="65.1609%" y="415.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="64.9919%" y="389" width="0.0810%" height="15" fill="rgb(205,108,24)" fg:x="802" fg:w="1"/><text x="65.2419%" y="399.50"></text></g><g><title>regex_automata::meta::strategy::new (26 samples, 2.11%)</title><rect x="63.0470%" y="453" width="2.1070%" height="15" fill="rgb(244,120,49)" fg:x="778" fg:w="26"/><text x="63.2970%" y="463.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="65.0729%" y="437" width="0.0810%" height="15" fill="rgb(223,47,38)" fg:x="803" fg:w="1"/><text x="65.3229%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="65.0729%" y="421" width="0.0810%" height="15" fill="rgb(229,179,11)" fg:x="803" fg:w="1"/><text x="65.3229%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="65.0729%" y="405" width="0.0810%" height="15" fill="rgb(231,122,1)" fg:x="803" fg:w="1"/><text x="65.3229%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="65.3160%" y="405" width="0.0810%" height="15" fill="rgb(245,119,9)" fg:x="806" fg:w="1"/><text x="65.5660%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="65.3971%" y="405" width="0.1621%" height="15" fill="rgb(241,163,25)" fg:x="807" fg:w="2"/><text x="65.6471%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (2 samples, 0.16%)</title><rect x="65.3971%" y="389" width="0.1621%" height="15" fill="rgb(217,214,3)" fg:x="807" fg:w="2"/><text x="65.6471%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (9 samples, 0.73%)</title><rect x="65.1540%" y="421" width="0.7293%" height="15" fill="rgb(240,86,28)" fg:x="804" fg:w="9"/><text x="65.4040%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="65.5592%" y="405" width="0.3241%" height="15" fill="rgb(215,47,9)" fg:x="809" fg:w="4"/><text x="65.8092%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="65.5592%" y="389" width="0.3241%" height="15" fill="rgb(252,25,45)" fg:x="809" fg:w="4"/><text x="65.8092%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="65.5592%" y="373" width="0.3241%" height="15" fill="rgb(251,164,9)" fg:x="809" fg:w="4"/><text x="65.8092%" y="383.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="65.5592%" y="357" width="0.3241%" height="15" fill="rgb(233,194,0)" fg:x="809" fg:w="4"/><text x="65.8092%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="65.8833%" y="421" width="0.0810%" height="15" fill="rgb(249,111,24)" fg:x="813" fg:w="1"/><text x="66.1333%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (11 samples, 0.89%)</title><rect x="65.1540%" y="453" width="0.8914%" height="15" fill="rgb(250,223,3)" fg:x="804" fg:w="11"/><text x="65.4040%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.89%)</title><rect x="65.1540%" y="437" width="0.8914%" height="15" fill="rgb(236,178,37)" fg:x="804" fg:w="11"/><text x="65.4040%" y="447.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="65.9643%" y="421" width="0.0810%" height="15" fill="rgb(241,158,50)" fg:x="814" fg:w="1"/><text x="66.2143%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.9643%" y="405" width="0.0810%" height="15" fill="rgb(213,121,41)" fg:x="814" fg:w="1"/><text x="66.2143%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.9643%" y="389" width="0.0810%" height="15" fill="rgb(240,92,3)" fg:x="814" fg:w="1"/><text x="66.2143%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.9643%" y="373" width="0.0810%" height="15" fill="rgb(205,123,3)" fg:x="814" fg:w="1"/><text x="66.2143%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="66.0454%" y="421" width="0.1621%" height="15" fill="rgb(205,97,47)" fg:x="815" fg:w="2"/><text x="66.2954%" y="431.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="66.0454%" y="405" width="0.1621%" height="15" fill="rgb(247,152,14)" fg:x="815" fg:w="2"/><text x="66.2954%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.1264%" y="389" width="0.0810%" height="15" fill="rgb(248,195,53)" fg:x="816" fg:w="1"/><text x="66.3764%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.1264%" y="373" width="0.0810%" height="15" fill="rgb(226,201,16)" fg:x="816" fg:w="1"/><text x="66.3764%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.1264%" y="357" width="0.0810%" height="15" fill="rgb(205,98,0)" fg:x="816" fg:w="1"/><text x="66.3764%" y="367.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="66.2075%" y="405" width="0.0810%" height="15" fill="rgb(214,191,48)" fg:x="817" fg:w="1"/><text x="66.4575%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="66.2075%" y="421" width="0.1621%" height="15" fill="rgb(237,112,39)" fg:x="817" fg:w="2"/><text x="66.4575%" y="431.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="66.2885%" y="405" width="0.0810%" height="15" fill="rgb(247,203,27)" fg:x="818" fg:w="1"/><text x="66.5385%" y="415.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (49 samples, 3.97%)</title><rect x="62.4797%" y="501" width="3.9708%" height="15" fill="rgb(235,124,28)" fg:x="771" fg:w="49"/><text x="62.7297%" y="511.50">&lt;reg..</text></g><g><title>regex::builders::Builder::build_one_string (49 samples, 3.97%)</title><rect x="62.4797%" y="485" width="3.9708%" height="15" fill="rgb(208,207,46)" fg:x="771" fg:w="49"/><text x="62.7297%" y="495.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (48 samples, 3.89%)</title><rect x="62.5608%" y="469" width="3.8898%" height="15" fill="rgb(234,176,4)" fg:x="772" fg:w="48"/><text x="62.8108%" y="479.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.41%)</title><rect x="66.0454%" y="453" width="0.4052%" height="15" fill="rgb(230,133,28)" fg:x="815" fg:w="5"/><text x="66.2954%" y="463.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.41%)</title><rect x="66.0454%" y="437" width="0.4052%" height="15" fill="rgb(211,137,40)" fg:x="815" fg:w="5"/><text x="66.2954%" y="447.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="66.3695%" y="421" width="0.0810%" height="15" fill="rgb(254,35,13)" fg:x="819" fg:w="1"/><text x="66.6195%" y="431.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="66.4506%" y="501" width="0.2431%" height="15" fill="rgb(225,49,51)" fg:x="820" fg:w="3"/><text x="66.7006%" y="511.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="66.4506%" y="485" width="0.2431%" height="15" fill="rgb(251,10,15)" fg:x="820" fg:w="3"/><text x="66.7006%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="66.4506%" y="469" width="0.2431%" height="15" fill="rgb(228,207,15)" fg:x="820" fg:w="3"/><text x="66.7006%" y="479.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="66.5316%" y="453" width="0.1621%" height="15" fill="rgb(241,99,19)" fg:x="821" fg:w="2"/><text x="66.7816%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="66.6937%" y="469" width="0.0810%" height="15" fill="rgb(207,104,49)" fg:x="823" fg:w="1"/><text x="66.9437%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="66.6937%" y="453" width="0.0810%" height="15" fill="rgb(234,99,18)" fg:x="823" fg:w="1"/><text x="66.9437%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="66.6937%" y="437" width="0.0810%" height="15" fill="rgb(213,191,49)" fg:x="823" fg:w="1"/><text x="66.9437%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.6937%" y="421" width="0.0810%" height="15" fill="rgb(210,226,19)" fg:x="823" fg:w="1"/><text x="66.9437%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="66.7747%" y="453" width="0.1621%" height="15" fill="rgb(229,97,18)" fg:x="824" fg:w="2"/><text x="67.0247%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.8558%" y="437" width="0.0810%" height="15" fill="rgb(211,167,15)" fg:x="825" fg:w="1"/><text x="67.1058%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.8558%" y="421" width="0.0810%" height="15" fill="rgb(210,169,34)" fg:x="825" fg:w="1"/><text x="67.1058%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="66.6937%" y="501" width="0.3241%" height="15" fill="rgb(241,121,31)" fg:x="823" fg:w="4"/><text x="66.9437%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="66.6937%" y="485" width="0.3241%" height="15" fill="rgb(232,40,11)" fg:x="823" fg:w="4"/><text x="66.9437%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="66.7747%" y="469" width="0.2431%" height="15" fill="rgb(205,86,26)" fg:x="824" fg:w="3"/><text x="67.0247%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="66.9368%" y="453" width="0.0810%" height="15" fill="rgb(231,126,28)" fg:x="826" fg:w="1"/><text x="67.1868%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.1799%" y="453" width="0.0810%" height="15" fill="rgb(219,221,18)" fg:x="829" fg:w="1"/><text x="67.4299%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="67.4230%" y="421" width="0.2431%" height="15" fill="rgb(211,40,0)" fg:x="832" fg:w="3"/><text x="67.6730%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="67.5041%" y="405" width="0.1621%" height="15" fill="rgb(239,85,43)" fg:x="833" fg:w="2"/><text x="67.7541%" y="415.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="67.5041%" y="389" width="0.1621%" height="15" fill="rgb(231,55,21)" fg:x="833" fg:w="2"/><text x="67.7541%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="67.6661%" y="421" width="0.2431%" height="15" fill="rgb(225,184,43)" fg:x="835" fg:w="3"/><text x="67.9161%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.73%)</title><rect x="67.2609%" y="437" width="0.7293%" height="15" fill="rgb(251,158,41)" fg:x="830" fg:w="9"/><text x="67.5109%" y="447.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="67.9092%" y="421" width="0.0810%" height="15" fill="rgb(234,159,37)" fg:x="838" fg:w="1"/><text x="68.1592%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.9092%" y="405" width="0.0810%" height="15" fill="rgb(216,204,22)" fg:x="838" fg:w="1"/><text x="68.1592%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.9092%" y="389" width="0.0810%" height="15" fill="rgb(214,17,3)" fg:x="838" fg:w="1"/><text x="68.1592%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.9092%" y="373" width="0.0810%" height="15" fill="rgb(212,111,17)" fg:x="838" fg:w="1"/><text x="68.1592%" y="383.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (69 samples, 5.59%)</title><rect x="62.4797%" y="517" width="5.5916%" height="15" fill="rgb(221,157,24)" fg:x="771" fg:w="69"/><text x="62.7297%" y="527.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (13 samples, 1.05%)</title><rect x="67.0178%" y="501" width="1.0535%" height="15" fill="rgb(252,16,13)" fg:x="827" fg:w="13"/><text x="67.2678%" y="511.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.97%)</title><rect x="67.0989%" y="485" width="0.9724%" height="15" fill="rgb(221,62,2)" fg:x="828" fg:w="12"/><text x="67.3489%" y="495.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.89%)</title><rect x="67.1799%" y="469" width="0.8914%" height="15" fill="rgb(247,87,22)" fg:x="829" fg:w="11"/><text x="67.4299%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.81%)</title><rect x="67.2609%" y="453" width="0.8104%" height="15" fill="rgb(215,73,9)" fg:x="830" fg:w="10"/><text x="67.5109%" y="463.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="67.9903%" y="437" width="0.0810%" height="15" fill="rgb(207,175,33)" fg:x="839" fg:w="1"/><text x="68.2403%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.9903%" y="421" width="0.0810%" height="15" fill="rgb(243,129,54)" fg:x="839" fg:w="1"/><text x="68.2403%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.9903%" y="405" width="0.0810%" height="15" fill="rgb(227,119,45)" fg:x="839" fg:w="1"/><text x="68.2403%" y="415.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="67.9903%" y="389" width="0.0810%" height="15" fill="rgb(205,109,36)" fg:x="839" fg:w="1"/><text x="68.2403%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="67.9903%" y="373" width="0.0810%" height="15" fill="rgb(205,6,39)" fg:x="839" fg:w="1"/><text x="68.2403%" y="383.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (691 samples, 56.00%)</title><rect x="12.1556%" y="613" width="55.9968%" height="15" fill="rgb(221,32,16)" fg:x="150" fg:w="691"/><text x="12.4056%" y="623.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEnti..</text></g><g><title>plugins_core::looking::model::qualify_name (676 samples, 54.78%)</title><rect x="13.3712%" y="597" width="54.7812%" height="15" fill="rgb(228,144,50)" fg:x="165" fg:w="676"/><text x="13.6212%" y="607.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (676 samples, 54.78%)</title><rect x="13.3712%" y="581" width="54.7812%" height="15" fill="rgb(229,201,53)" fg:x="165" fg:w="676"/><text x="13.6212%" y="591.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (676 samples, 54.78%)</title><rect x="13.3712%" y="565" width="54.7812%" height="15" fill="rgb(249,153,27)" fg:x="165" fg:w="676"/><text x="13.6212%" y="575.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (673 samples, 54.54%)</title><rect x="13.6143%" y="549" width="54.5381%" height="15" fill="rgb(227,106,25)" fg:x="168" fg:w="673"/><text x="13.8643%" y="559.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (71 samples, 5.75%)</title><rect x="62.3987%" y="533" width="5.7536%" height="15" fill="rgb(230,65,29)" fg:x="770" fg:w="71"/><text x="62.6487%" y="543.50">indefin..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="68.0713%" y="517" width="0.0810%" height="15" fill="rgb(221,57,46)" fg:x="840" fg:w="1"/><text x="68.3213%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (2 samples, 0.16%)</title><rect x="68.1524%" y="613" width="0.1621%" height="15" fill="rgb(229,161,17)" fg:x="841" fg:w="2"/><text x="68.4024%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="68.1524%" y="597" width="0.1621%" height="15" fill="rgb(222,213,11)" fg:x="841" fg:w="2"/><text x="68.4024%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="68.2334%" y="581" width="0.0810%" height="15" fill="rgb(235,35,13)" fg:x="842" fg:w="1"/><text x="68.4834%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="68.2334%" y="565" width="0.0810%" height="15" fill="rgb(233,158,34)" fg:x="842" fg:w="1"/><text x="68.4834%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="68.2334%" y="549" width="0.0810%" height="15" fill="rgb(215,151,48)" fg:x="842" fg:w="1"/><text x="68.4834%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="68.2334%" y="533" width="0.0810%" height="15" fill="rgb(229,84,14)" fg:x="842" fg:w="1"/><text x="68.4834%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="68.2334%" y="517" width="0.0810%" height="15" fill="rgb(229,68,14)" fg:x="842" fg:w="1"/><text x="68.4834%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="68.2334%" y="501" width="0.0810%" height="15" fill="rgb(243,106,26)" fg:x="842" fg:w="1"/><text x="68.4834%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="68.2334%" y="485" width="0.0810%" height="15" fill="rgb(206,45,38)" fg:x="842" fg:w="1"/><text x="68.4834%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="68.2334%" y="469" width="0.0810%" height="15" fill="rgb(226,6,15)" fg:x="842" fg:w="1"/><text x="68.4834%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.2334%" y="453" width="0.0810%" height="15" fill="rgb(232,22,54)" fg:x="842" fg:w="1"/><text x="68.4834%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.2334%" y="437" width="0.0810%" height="15" fill="rgb(229,222,32)" fg:x="842" fg:w="1"/><text x="68.4834%" y="447.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="68.2334%" y="421" width="0.0810%" height="15" fill="rgb(228,62,29)" fg:x="842" fg:w="1"/><text x="68.4834%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="68.2334%" y="405" width="0.0810%" height="15" fill="rgb(251,103,34)" fg:x="842" fg:w="1"/><text x="68.4834%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="68.2334%" y="389" width="0.0810%" height="15" fill="rgb(233,12,30)" fg:x="842" fg:w="1"/><text x="68.4834%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="68.2334%" y="373" width="0.0810%" height="15" fill="rgb(238,52,0)" fg:x="842" fg:w="1"/><text x="68.4834%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="68.2334%" y="357" width="0.0810%" height="15" fill="rgb(223,98,5)" fg:x="842" fg:w="1"/><text x="68.4834%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="68.2334%" y="341" width="0.0810%" height="15" fill="rgb(228,75,37)" fg:x="842" fg:w="1"/><text x="68.4834%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.2334%" y="325" width="0.0810%" height="15" fill="rgb(205,115,49)" fg:x="842" fg:w="1"/><text x="68.4834%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="68.2334%" y="309" width="0.0810%" height="15" fill="rgb(250,154,43)" fg:x="842" fg:w="1"/><text x="68.4834%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.2334%" y="293" width="0.0810%" height="15" fill="rgb(226,43,29)" fg:x="842" fg:w="1"/><text x="68.4834%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.2334%" y="277" width="0.0810%" height="15" fill="rgb(249,228,39)" fg:x="842" fg:w="1"/><text x="68.4834%" y="287.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (697 samples, 56.48%)</title><rect x="11.9125%" y="645" width="56.4830%" height="15" fill="rgb(216,79,43)" fg:x="147" fg:w="697"/><text x="12.1625%" y="655.50">&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (696 samples, 56.40%)</title><rect x="11.9935%" y="629" width="56.4019%" height="15" fill="rgb(228,95,12)" fg:x="148" fg:w="696"/><text x="12.2435%" y="639.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="68.3144%" y="613" width="0.0810%" height="15" fill="rgb(249,221,15)" fg:x="843" fg:w="1"/><text x="68.5644%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="68.3144%" y="597" width="0.0810%" height="15" fill="rgb(233,34,13)" fg:x="843" fg:w="1"/><text x="68.5644%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.3144%" y="581" width="0.0810%" height="15" fill="rgb(214,103,39)" fg:x="843" fg:w="1"/><text x="68.5644%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.3144%" y="565" width="0.0810%" height="15" fill="rgb(251,126,39)" fg:x="843" fg:w="1"/><text x="68.5644%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.3144%" y="549" width="0.0810%" height="15" fill="rgb(214,216,36)" fg:x="843" fg:w="1"/><text x="68.5644%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.4765%" y="533" width="0.0810%" height="15" fill="rgb(220,221,8)" fg:x="845" fg:w="1"/><text x="68.7265%" y="543.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="68.4765%" y="517" width="0.0810%" height="15" fill="rgb(240,216,3)" fg:x="845" fg:w="1"/><text x="68.7265%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="68.4765%" y="501" width="0.0810%" height="15" fill="rgb(232,218,17)" fg:x="845" fg:w="1"/><text x="68.7265%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.4765%" y="485" width="0.0810%" height="15" fill="rgb(229,163,45)" fg:x="845" fg:w="1"/><text x="68.7265%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.4765%" y="469" width="0.0810%" height="15" fill="rgb(231,110,42)" fg:x="845" fg:w="1"/><text x="68.7265%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.4765%" y="453" width="0.0810%" height="15" fill="rgb(208,170,48)" fg:x="845" fg:w="1"/><text x="68.7265%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.4765%" y="437" width="0.0810%" height="15" fill="rgb(239,116,25)" fg:x="845" fg:w="1"/><text x="68.7265%" y="447.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.4765%" y="421" width="0.0810%" height="15" fill="rgb(219,200,50)" fg:x="845" fg:w="1"/><text x="68.7265%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.4765%" y="405" width="0.0810%" height="15" fill="rgb(245,200,0)" fg:x="845" fg:w="1"/><text x="68.7265%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.4765%" y="389" width="0.0810%" height="15" fill="rgb(245,119,33)" fg:x="845" fg:w="1"/><text x="68.7265%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.4765%" y="373" width="0.0810%" height="15" fill="rgb(231,125,12)" fg:x="845" fg:w="1"/><text x="68.7265%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="68.5575%" y="517" width="0.0810%" height="15" fill="rgb(216,96,41)" fg:x="846" fg:w="1"/><text x="68.8075%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="68.5575%" y="501" width="0.0810%" height="15" fill="rgb(248,43,45)" fg:x="846" fg:w="1"/><text x="68.8075%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.5575%" y="485" width="0.0810%" height="15" fill="rgb(217,222,7)" fg:x="846" fg:w="1"/><text x="68.8075%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.5575%" y="469" width="0.0810%" height="15" fill="rgb(233,28,6)" fg:x="846" fg:w="1"/><text x="68.8075%" y="479.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.5575%" y="453" width="0.0810%" height="15" fill="rgb(231,218,15)" fg:x="846" fg:w="1"/><text x="68.8075%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.5575%" y="437" width="0.0810%" height="15" fill="rgb(226,171,48)" fg:x="846" fg:w="1"/><text x="68.8075%" y="447.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.5575%" y="421" width="0.0810%" height="15" fill="rgb(235,201,9)" fg:x="846" fg:w="1"/><text x="68.8075%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.5575%" y="405" width="0.0810%" height="15" fill="rgb(217,80,15)" fg:x="846" fg:w="1"/><text x="68.8075%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.5575%" y="389" width="0.0810%" height="15" fill="rgb(219,152,8)" fg:x="846" fg:w="1"/><text x="68.8075%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.5575%" y="373" width="0.0810%" height="15" fill="rgb(243,107,38)" fg:x="846" fg:w="1"/><text x="68.8075%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.5575%" y="357" width="0.0810%" height="15" fill="rgb(231,17,5)" fg:x="846" fg:w="1"/><text x="68.8075%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.5575%" y="341" width="0.0810%" height="15" fill="rgb(209,25,54)" fg:x="846" fg:w="1"/><text x="68.8075%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.5575%" y="325" width="0.0810%" height="15" fill="rgb(219,0,2)" fg:x="846" fg:w="1"/><text x="68.8075%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="68.5575%" y="309" width="0.0810%" height="15" fill="rgb(246,9,5)" fg:x="846" fg:w="1"/><text x="68.8075%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.5575%" y="293" width="0.0810%" height="15" fill="rgb(226,159,4)" fg:x="846" fg:w="1"/><text x="68.8075%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.5575%" y="277" width="0.0810%" height="15" fill="rgb(219,175,34)" fg:x="846" fg:w="1"/><text x="68.8075%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.5575%" y="261" width="0.0810%" height="15" fill="rgb(236,10,46)" fg:x="846" fg:w="1"/><text x="68.8075%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.6386%" y="469" width="0.0810%" height="15" fill="rgb(240,211,16)" fg:x="847" fg:w="1"/><text x="68.8886%" y="479.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (5 samples, 0.41%)</title><rect x="68.3955%" y="645" width="0.4052%" height="15" fill="rgb(205,3,43)" fg:x="844" fg:w="5"/><text x="68.6455%" y="655.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (4 samples, 0.32%)</title><rect x="68.4765%" y="629" width="0.3241%" height="15" fill="rgb(245,7,22)" fg:x="845" fg:w="4"/><text x="68.7265%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="68.4765%" y="613" width="0.3241%" height="15" fill="rgb(239,132,32)" fg:x="845" fg:w="4"/><text x="68.7265%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (4 samples, 0.32%)</title><rect x="68.4765%" y="597" width="0.3241%" height="15" fill="rgb(228,202,34)" fg:x="845" fg:w="4"/><text x="68.7265%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.32%)</title><rect x="68.4765%" y="581" width="0.3241%" height="15" fill="rgb(254,200,22)" fg:x="845" fg:w="4"/><text x="68.7265%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="68.4765%" y="565" width="0.3241%" height="15" fill="rgb(219,10,39)" fg:x="845" fg:w="4"/><text x="68.7265%" y="575.50"></text></g><g><title>engine::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="68.4765%" y="549" width="0.3241%" height="15" fill="rgb(226,210,39)" fg:x="845" fg:w="4"/><text x="68.7265%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="68.5575%" y="533" width="0.2431%" height="15" fill="rgb(208,219,16)" fg:x="846" fg:w="3"/><text x="68.8075%" y="543.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="68.6386%" y="517" width="0.1621%" height="15" fill="rgb(216,158,51)" fg:x="847" fg:w="2"/><text x="68.8886%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.6386%" y="501" width="0.1621%" height="15" fill="rgb(233,14,44)" fg:x="847" fg:w="2"/><text x="68.8886%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.6386%" y="485" width="0.1621%" height="15" fill="rgb(237,97,39)" fg:x="847" fg:w="2"/><text x="68.8886%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.7196%" y="469" width="0.0810%" height="15" fill="rgb(218,198,43)" fg:x="848" fg:w="1"/><text x="68.9696%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.7196%" y="453" width="0.0810%" height="15" fill="rgb(231,104,20)" fg:x="848" fg:w="1"/><text x="68.9696%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.7196%" y="437" width="0.0810%" height="15" fill="rgb(254,36,13)" fg:x="848" fg:w="1"/><text x="68.9696%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.7196%" y="421" width="0.0810%" height="15" fill="rgb(248,14,50)" fg:x="848" fg:w="1"/><text x="68.9696%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.7196%" y="405" width="0.0810%" height="15" fill="rgb(217,107,29)" fg:x="848" fg:w="1"/><text x="68.9696%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.7196%" y="389" width="0.0810%" height="15" fill="rgb(251,169,33)" fg:x="848" fg:w="1"/><text x="68.9696%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.7196%" y="373" width="0.0810%" height="15" fill="rgb(217,108,32)" fg:x="848" fg:w="1"/><text x="68.9696%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.9627%" y="501" width="0.0810%" height="15" fill="rgb(219,66,42)" fg:x="851" fg:w="1"/><text x="69.2127%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="68.9627%" y="485" width="0.0810%" height="15" fill="rgb(206,180,7)" fg:x="851" fg:w="1"/><text x="69.2127%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="68.8817%" y="549" width="0.4052%" height="15" fill="rgb(208,226,31)" fg:x="850" fg:w="5"/><text x="69.1317%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="68.9627%" y="533" width="0.3241%" height="15" fill="rgb(218,26,49)" fg:x="851" fg:w="4"/><text x="69.2127%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="68.9627%" y="517" width="0.3241%" height="15" fill="rgb(233,197,48)" fg:x="851" fg:w="4"/><text x="69.2127%" y="527.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="69.0438%" y="501" width="0.2431%" height="15" fill="rgb(252,181,51)" fg:x="852" fg:w="3"/><text x="69.2938%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="69.2869%" y="549" width="0.1621%" height="15" fill="rgb(253,90,19)" fg:x="855" fg:w="2"/><text x="69.5369%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.65%)</title><rect x="68.8817%" y="597" width="0.6483%" height="15" fill="rgb(215,171,30)" fg:x="850" fg:w="8"/><text x="69.1317%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.65%)</title><rect x="68.8817%" y="581" width="0.6483%" height="15" fill="rgb(214,222,9)" fg:x="850" fg:w="8"/><text x="69.1317%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.65%)</title><rect x="68.8817%" y="565" width="0.6483%" height="15" fill="rgb(223,3,22)" fg:x="850" fg:w="8"/><text x="69.1317%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="69.4489%" y="549" width="0.0810%" height="15" fill="rgb(225,196,46)" fg:x="857" fg:w="1"/><text x="69.6989%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.4489%" y="533" width="0.0810%" height="15" fill="rgb(209,110,37)" fg:x="857" fg:w="1"/><text x="69.6989%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (9 samples, 0.73%)</title><rect x="68.8817%" y="613" width="0.7293%" height="15" fill="rgb(249,89,12)" fg:x="850" fg:w="9"/><text x="69.1317%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.5300%" y="597" width="0.0810%" height="15" fill="rgb(226,27,33)" fg:x="858" fg:w="1"/><text x="69.7800%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.6921%" y="565" width="0.0810%" height="15" fill="rgb(213,82,22)" fg:x="860" fg:w="1"/><text x="69.9421%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="69.6110%" y="581" width="0.2431%" height="15" fill="rgb(248,140,0)" fg:x="859" fg:w="3"/><text x="69.8610%" y="591.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.08%)</title><rect x="69.7731%" y="565" width="0.0810%" height="15" fill="rgb(228,106,3)" fg:x="861" fg:w="1"/><text x="70.0231%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="69.7731%" y="549" width="0.0810%" height="15" fill="rgb(209,23,37)" fg:x="861" fg:w="1"/><text x="70.0231%" y="559.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.8541%" y="581" width="0.0810%" height="15" fill="rgb(241,93,50)" fg:x="862" fg:w="1"/><text x="70.1041%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="69.8541%" y="565" width="0.0810%" height="15" fill="rgb(253,46,43)" fg:x="862" fg:w="1"/><text x="70.1041%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.9352%" y="517" width="0.0810%" height="15" fill="rgb(226,206,43)" fg:x="863" fg:w="1"/><text x="70.1852%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.0162%" y="501" width="0.0810%" height="15" fill="rgb(217,54,7)" fg:x="864" fg:w="1"/><text x="70.2662%" y="511.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="70.0972%" y="405" width="0.0810%" height="15" fill="rgb(223,5,52)" fg:x="865" fg:w="1"/><text x="70.3472%" y="415.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="70.0972%" y="389" width="0.0810%" height="15" fill="rgb(206,52,46)" fg:x="865" fg:w="1"/><text x="70.3472%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="70.0972%" y="373" width="0.0810%" height="15" fill="rgb(253,136,11)" fg:x="865" fg:w="1"/><text x="70.3472%" y="383.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="70.0972%" y="357" width="0.0810%" height="15" fill="rgb(208,106,33)" fg:x="865" fg:w="1"/><text x="70.3472%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="70.0972%" y="341" width="0.0810%" height="15" fill="rgb(206,54,4)" fg:x="865" fg:w="1"/><text x="70.3472%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.0972%" y="325" width="0.0810%" height="15" fill="rgb(213,3,15)" fg:x="865" fg:w="1"/><text x="70.3472%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0972%" y="309" width="0.0810%" height="15" fill="rgb(252,211,39)" fg:x="865" fg:w="1"/><text x="70.3472%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.0972%" y="293" width="0.0810%" height="15" fill="rgb(223,6,36)" fg:x="865" fg:w="1"/><text x="70.3472%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0972%" y="277" width="0.0810%" height="15" fill="rgb(252,169,45)" fg:x="865" fg:w="1"/><text x="70.3472%" y="287.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.0972%" y="261" width="0.0810%" height="15" fill="rgb(212,48,26)" fg:x="865" fg:w="1"/><text x="70.3472%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0972%" y="245" width="0.0810%" height="15" fill="rgb(251,102,48)" fg:x="865" fg:w="1"/><text x="70.3472%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.0972%" y="229" width="0.0810%" height="15" fill="rgb(243,208,16)" fg:x="865" fg:w="1"/><text x="70.3472%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0972%" y="213" width="0.0810%" height="15" fill="rgb(219,96,24)" fg:x="865" fg:w="1"/><text x="70.3472%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.0972%" y="197" width="0.0810%" height="15" fill="rgb(219,33,29)" fg:x="865" fg:w="1"/><text x="70.3472%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.0972%" y="181" width="0.0810%" height="15" fill="rgb(223,176,5)" fg:x="865" fg:w="1"/><text x="70.3472%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.1783%" y="277" width="0.0810%" height="15" fill="rgb(228,140,14)" fg:x="866" fg:w="1"/><text x="70.4283%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1783%" y="261" width="0.0810%" height="15" fill="rgb(217,179,31)" fg:x="866" fg:w="1"/><text x="70.4283%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1783%" y="245" width="0.0810%" height="15" fill="rgb(230,9,30)" fg:x="866" fg:w="1"/><text x="70.4283%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.1783%" y="229" width="0.0810%" height="15" fill="rgb(230,136,20)" fg:x="866" fg:w="1"/><text x="70.4283%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.1783%" y="213" width="0.0810%" height="15" fill="rgb(215,210,22)" fg:x="866" fg:w="1"/><text x="70.4283%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.1783%" y="197" width="0.0810%" height="15" fill="rgb(218,43,5)" fg:x="866" fg:w="1"/><text x="70.4283%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.1783%" y="181" width="0.0810%" height="15" fill="rgb(216,11,5)" fg:x="866" fg:w="1"/><text x="70.4283%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.1783%" y="165" width="0.0810%" height="15" fill="rgb(209,82,29)" fg:x="866" fg:w="1"/><text x="70.4283%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.1783%" y="149" width="0.0810%" height="15" fill="rgb(244,115,12)" fg:x="866" fg:w="1"/><text x="70.4283%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.1783%" y="133" width="0.0810%" height="15" fill="rgb(222,82,18)" fg:x="866" fg:w="1"/><text x="70.4283%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.1783%" y="117" width="0.0810%" height="15" fill="rgb(249,227,8)" fg:x="866" fg:w="1"/><text x="70.4283%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.1783%" y="101" width="0.0810%" height="15" fill="rgb(253,141,45)" fg:x="866" fg:w="1"/><text x="70.4283%" y="111.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="70.1783%" y="405" width="0.1621%" height="15" fill="rgb(234,184,4)" fg:x="866" fg:w="2"/><text x="70.4283%" y="415.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="70.1783%" y="389" width="0.1621%" height="15" fill="rgb(218,194,23)" fg:x="866" fg:w="2"/><text x="70.4283%" y="399.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="70.1783%" y="373" width="0.1621%" height="15" fill="rgb(235,66,41)" fg:x="866" fg:w="2"/><text x="70.4283%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="70.1783%" y="357" width="0.1621%" height="15" fill="rgb(245,217,1)" fg:x="866" fg:w="2"/><text x="70.4283%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.1783%" y="341" width="0.1621%" height="15" fill="rgb(229,91,1)" fg:x="866" fg:w="2"/><text x="70.4283%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.1783%" y="325" width="0.1621%" height="15" fill="rgb(207,101,30)" fg:x="866" fg:w="2"/><text x="70.4283%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.1783%" y="309" width="0.1621%" height="15" fill="rgb(223,82,49)" fg:x="866" fg:w="2"/><text x="70.4283%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.1783%" y="293" width="0.1621%" height="15" fill="rgb(218,167,17)" fg:x="866" fg:w="2"/><text x="70.4283%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2593%" y="277" width="0.0810%" height="15" fill="rgb(208,103,14)" fg:x="867" fg:w="1"/><text x="70.5093%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2593%" y="261" width="0.0810%" height="15" fill="rgb(238,20,8)" fg:x="867" fg:w="1"/><text x="70.5093%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.2593%" y="245" width="0.0810%" height="15" fill="rgb(218,80,54)" fg:x="867" fg:w="1"/><text x="70.5093%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.2593%" y="229" width="0.0810%" height="15" fill="rgb(240,144,17)" fg:x="867" fg:w="1"/><text x="70.5093%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.2593%" y="213" width="0.0810%" height="15" fill="rgb(245,27,50)" fg:x="867" fg:w="1"/><text x="70.5093%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.2593%" y="197" width="0.0810%" height="15" fill="rgb(251,51,7)" fg:x="867" fg:w="1"/><text x="70.5093%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.2593%" y="181" width="0.0810%" height="15" fill="rgb(245,217,29)" fg:x="867" fg:w="1"/><text x="70.5093%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.2593%" y="165" width="0.0810%" height="15" fill="rgb(221,176,29)" fg:x="867" fg:w="1"/><text x="70.5093%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.2593%" y="149" width="0.0810%" height="15" fill="rgb(212,180,24)" fg:x="867" fg:w="1"/><text x="70.5093%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.2593%" y="133" width="0.0810%" height="15" fill="rgb(254,24,2)" fg:x="867" fg:w="1"/><text x="70.5093%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.2593%" y="117" width="0.0810%" height="15" fill="rgb(230,100,2)" fg:x="867" fg:w="1"/><text x="70.5093%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2593%" y="101" width="0.0810%" height="15" fill="rgb(219,142,25)" fg:x="867" fg:w="1"/><text x="70.5093%" y="111.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="70.3404%" y="389" width="0.0810%" height="15" fill="rgb(240,73,43)" fg:x="868" fg:w="1"/><text x="70.5904%" y="399.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="70.3404%" y="373" width="0.0810%" height="15" fill="rgb(214,114,15)" fg:x="868" fg:w="1"/><text x="70.5904%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.3404%" y="357" width="0.0810%" height="15" fill="rgb(207,130,4)" fg:x="868" fg:w="1"/><text x="70.5904%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3404%" y="341" width="0.0810%" height="15" fill="rgb(221,25,40)" fg:x="868" fg:w="1"/><text x="70.5904%" y="351.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.3404%" y="325" width="0.0810%" height="15" fill="rgb(241,184,7)" fg:x="868" fg:w="1"/><text x="70.5904%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3404%" y="309" width="0.0810%" height="15" fill="rgb(235,159,4)" fg:x="868" fg:w="1"/><text x="70.5904%" y="319.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.3404%" y="293" width="0.0810%" height="15" fill="rgb(214,87,48)" fg:x="868" fg:w="1"/><text x="70.5904%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3404%" y="277" width="0.0810%" height="15" fill="rgb(246,198,24)" fg:x="868" fg:w="1"/><text x="70.5904%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.3404%" y="261" width="0.0810%" height="15" fill="rgb(209,66,40)" fg:x="868" fg:w="1"/><text x="70.5904%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.3404%" y="245" width="0.0810%" height="15" fill="rgb(233,147,39)" fg:x="868" fg:w="1"/><text x="70.5904%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3404%" y="229" width="0.0810%" height="15" fill="rgb(231,145,52)" fg:x="868" fg:w="1"/><text x="70.5904%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.3404%" y="213" width="0.0810%" height="15" fill="rgb(206,20,26)" fg:x="868" fg:w="1"/><text x="70.5904%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.3404%" y="197" width="0.0810%" height="15" fill="rgb(238,220,4)" fg:x="868" fg:w="1"/><text x="70.5904%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3404%" y="181" width="0.0810%" height="15" fill="rgb(252,195,42)" fg:x="868" fg:w="1"/><text x="70.5904%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.3404%" y="165" width="0.0810%" height="15" fill="rgb(209,10,6)" fg:x="868" fg:w="1"/><text x="70.5904%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.3404%" y="149" width="0.0810%" height="15" fill="rgb(229,3,52)" fg:x="868" fg:w="1"/><text x="70.5904%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3404%" y="133" width="0.0810%" height="15" fill="rgb(253,49,37)" fg:x="868" fg:w="1"/><text x="70.5904%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.3404%" y="117" width="0.0810%" height="15" fill="rgb(240,103,49)" fg:x="868" fg:w="1"/><text x="70.5904%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.3404%" y="101" width="0.0810%" height="15" fill="rgb(250,182,30)" fg:x="868" fg:w="1"/><text x="70.5904%" y="111.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3404%" y="85" width="0.0810%" height="15" fill="rgb(248,8,30)" fg:x="868" fg:w="1"/><text x="70.5904%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.3404%" y="69" width="0.0810%" height="15" fill="rgb(237,120,30)" fg:x="868" fg:w="1"/><text x="70.5904%" y="79.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="70.3404%" y="53" width="0.0810%" height="15" fill="rgb(221,146,34)" fg:x="868" fg:w="1"/><text x="70.5904%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="70.3404%" y="37" width="0.0810%" height="15" fill="rgb(242,55,13)" fg:x="868" fg:w="1"/><text x="70.5904%" y="47.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.4214%" y="341" width="0.0810%" height="15" fill="rgb(242,112,31)" fg:x="869" fg:w="1"/><text x="70.6714%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.5024%" y="213" width="0.0810%" height="15" fill="rgb(249,192,27)" fg:x="870" fg:w="1"/><text x="70.7524%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.5024%" y="197" width="0.0810%" height="15" fill="rgb(208,204,44)" fg:x="870" fg:w="1"/><text x="70.7524%" y="207.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (8 samples, 0.65%)</title><rect x="70.0162%" y="517" width="0.6483%" height="15" fill="rgb(208,93,54)" fg:x="864" fg:w="8"/><text x="70.2662%" y="527.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (7 samples, 0.57%)</title><rect x="70.0972%" y="501" width="0.5673%" height="15" fill="rgb(242,1,31)" fg:x="865" fg:w="7"/><text x="70.3472%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (7 samples, 0.57%)</title><rect x="70.0972%" y="485" width="0.5673%" height="15" fill="rgb(241,83,25)" fg:x="865" fg:w="7"/><text x="70.3472%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (7 samples, 0.57%)</title><rect x="70.0972%" y="469" width="0.5673%" height="15" fill="rgb(205,169,50)" fg:x="865" fg:w="7"/><text x="70.3472%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (7 samples, 0.57%)</title><rect x="70.0972%" y="453" width="0.5673%" height="15" fill="rgb(239,186,37)" fg:x="865" fg:w="7"/><text x="70.3472%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (7 samples, 0.57%)</title><rect x="70.0972%" y="437" width="0.5673%" height="15" fill="rgb(205,221,10)" fg:x="865" fg:w="7"/><text x="70.3472%" y="447.50"></text></g><g><title>engine::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="70.0972%" y="421" width="0.5673%" height="15" fill="rgb(218,196,15)" fg:x="865" fg:w="7"/><text x="70.3472%" y="431.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.32%)</title><rect x="70.3404%" y="405" width="0.3241%" height="15" fill="rgb(218,196,35)" fg:x="868" fg:w="4"/><text x="70.5904%" y="415.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="70.4214%" y="389" width="0.2431%" height="15" fill="rgb(233,63,24)" fg:x="869" fg:w="3"/><text x="70.6714%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="70.4214%" y="373" width="0.2431%" height="15" fill="rgb(225,8,4)" fg:x="869" fg:w="3"/><text x="70.6714%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.4214%" y="357" width="0.2431%" height="15" fill="rgb(234,105,35)" fg:x="869" fg:w="3"/><text x="70.6714%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.5024%" y="341" width="0.1621%" height="15" fill="rgb(236,21,32)" fg:x="870" fg:w="2"/><text x="70.7524%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.5024%" y="325" width="0.1621%" height="15" fill="rgb(228,109,6)" fg:x="870" fg:w="2"/><text x="70.7524%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.5024%" y="309" width="0.1621%" height="15" fill="rgb(229,215,31)" fg:x="870" fg:w="2"/><text x="70.7524%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.5024%" y="293" width="0.1621%" height="15" fill="rgb(221,52,54)" fg:x="870" fg:w="2"/><text x="70.7524%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.5024%" y="277" width="0.1621%" height="15" fill="rgb(252,129,43)" fg:x="870" fg:w="2"/><text x="70.7524%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.5024%" y="261" width="0.1621%" height="15" fill="rgb(248,183,27)" fg:x="870" fg:w="2"/><text x="70.7524%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.5024%" y="245" width="0.1621%" height="15" fill="rgb(250,0,22)" fg:x="870" fg:w="2"/><text x="70.7524%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.5024%" y="229" width="0.1621%" height="15" fill="rgb(213,166,10)" fg:x="870" fg:w="2"/><text x="70.7524%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.5835%" y="213" width="0.0810%" height="15" fill="rgb(207,163,36)" fg:x="871" fg:w="1"/><text x="70.8335%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.5835%" y="197" width="0.0810%" height="15" fill="rgb(208,122,22)" fg:x="871" fg:w="1"/><text x="70.8335%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.5835%" y="181" width="0.0810%" height="15" fill="rgb(207,104,49)" fg:x="871" fg:w="1"/><text x="70.8335%" y="191.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.5835%" y="165" width="0.0810%" height="15" fill="rgb(248,211,50)" fg:x="871" fg:w="1"/><text x="70.8335%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.5835%" y="149" width="0.0810%" height="15" fill="rgb(217,13,45)" fg:x="871" fg:w="1"/><text x="70.8335%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;plugins_core::carrying::model::Containing&gt;&gt; (2 samples, 0.16%)</title><rect x="70.6645%" y="517" width="0.1621%" height="15" fill="rgb(211,216,49)" fg:x="872" fg:w="2"/><text x="70.9145%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (2 samples, 0.16%)</title><rect x="70.6645%" y="501" width="0.1621%" height="15" fill="rgb(221,58,53)" fg:x="872" fg:w="2"/><text x="70.9145%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="70.6645%" y="485" width="0.1621%" height="15" fill="rgb(220,112,41)" fg:x="872" fg:w="2"/><text x="70.9145%" y="495.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="70.8266%" y="485" width="0.0810%" height="15" fill="rgb(236,38,28)" fg:x="874" fg:w="1"/><text x="71.0766%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.8266%" y="469" width="0.0810%" height="15" fill="rgb(227,195,22)" fg:x="874" fg:w="1"/><text x="71.0766%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="70.8266%" y="453" width="0.0810%" height="15" fill="rgb(214,55,33)" fg:x="874" fg:w="1"/><text x="71.0766%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="70.8266%" y="437" width="0.0810%" height="15" fill="rgb(248,80,13)" fg:x="874" fg:w="1"/><text x="71.0766%" y="447.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as core::convert::Into&lt;kernel::model::entity::EntityRef&gt;&gt;::into (1 samples, 0.08%)</title><rect x="70.8266%" y="421" width="0.0810%" height="15" fill="rgb(238,52,6)" fg:x="874" fg:w="1"/><text x="71.0766%" y="431.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (13 samples, 1.05%)</title><rect x="69.9352%" y="533" width="1.0535%" height="15" fill="rgb(224,198,47)" fg:x="863" fg:w="13"/><text x="70.1852%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="70.8266%" y="517" width="0.1621%" height="15" fill="rgb(233,171,20)" fg:x="874" fg:w="2"/><text x="71.0766%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="70.8266%" y="501" width="0.1621%" height="15" fill="rgb(241,30,25)" fg:x="874" fg:w="2"/><text x="71.0766%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.9076%" y="485" width="0.0810%" height="15" fill="rgb(207,171,38)" fg:x="875" fg:w="1"/><text x="71.1576%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9076%" y="469" width="0.0810%" height="15" fill="rgb(234,70,1)" fg:x="875" fg:w="1"/><text x="71.1576%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="70.9887%" y="517" width="0.0810%" height="15" fill="rgb(232,178,18)" fg:x="876" fg:w="1"/><text x="71.2387%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="70.9887%" y="501" width="0.0810%" height="15" fill="rgb(241,78,40)" fg:x="876" fg:w="1"/><text x="71.2387%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.9887%" y="485" width="0.0810%" height="15" fill="rgb(222,35,25)" fg:x="876" fg:w="1"/><text x="71.2387%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.0697%" y="485" width="0.1621%" height="15" fill="rgb(207,92,16)" fg:x="877" fg:w="2"/><text x="71.3197%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.0697%" y="469" width="0.1621%" height="15" fill="rgb(216,59,51)" fg:x="877" fg:w="2"/><text x="71.3197%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.0697%" y="453" width="0.1621%" height="15" fill="rgb(213,80,28)" fg:x="877" fg:w="2"/><text x="71.3197%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.0697%" y="437" width="0.1621%" height="15" fill="rgb(220,93,7)" fg:x="877" fg:w="2"/><text x="71.3197%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1507%" y="421" width="0.0810%" height="15" fill="rgb(225,24,44)" fg:x="878" fg:w="1"/><text x="71.4007%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1507%" y="405" width="0.0810%" height="15" fill="rgb(243,74,40)" fg:x="878" fg:w="1"/><text x="71.4007%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.1507%" y="389" width="0.0810%" height="15" fill="rgb(228,39,7)" fg:x="878" fg:w="1"/><text x="71.4007%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.1507%" y="373" width="0.0810%" height="15" fill="rgb(227,79,8)" fg:x="878" fg:w="1"/><text x="71.4007%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.1507%" y="357" width="0.0810%" height="15" fill="rgb(236,58,11)" fg:x="878" fg:w="1"/><text x="71.4007%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="71.1507%" y="341" width="0.0810%" height="15" fill="rgb(249,63,35)" fg:x="878" fg:w="1"/><text x="71.4007%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.1507%" y="325" width="0.0810%" height="15" fill="rgb(252,114,16)" fg:x="878" fg:w="1"/><text x="71.4007%" y="335.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="71.3128%" y="405" width="0.0810%" height="15" fill="rgb(254,151,24)" fg:x="880" fg:w="1"/><text x="71.5628%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="71.4749%" y="389" width="0.0810%" height="15" fill="rgb(253,54,39)" fg:x="882" fg:w="1"/><text x="71.7249%" y="399.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="71.4749%" y="373" width="0.0810%" height="15" fill="rgb(243,25,45)" fg:x="882" fg:w="1"/><text x="71.7249%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.4749%" y="357" width="0.0810%" height="15" fill="rgb(234,134,9)" fg:x="882" fg:w="1"/><text x="71.7249%" y="367.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="71.4749%" y="341" width="0.0810%" height="15" fill="rgb(227,166,31)" fg:x="882" fg:w="1"/><text x="71.7249%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="71.4749%" y="325" width="0.0810%" height="15" fill="rgb(245,143,41)" fg:x="882" fg:w="1"/><text x="71.7249%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4749%" y="309" width="0.0810%" height="15" fill="rgb(238,181,32)" fg:x="882" fg:w="1"/><text x="71.7249%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4749%" y="293" width="0.0810%" height="15" fill="rgb(224,113,18)" fg:x="882" fg:w="1"/><text x="71.7249%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4749%" y="277" width="0.0810%" height="15" fill="rgb(240,229,28)" fg:x="882" fg:w="1"/><text x="71.7249%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.4749%" y="261" width="0.0810%" height="15" fill="rgb(250,185,3)" fg:x="882" fg:w="1"/><text x="71.7249%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.5559%" y="341" width="0.0810%" height="15" fill="rgb(212,59,25)" fg:x="883" fg:w="1"/><text x="71.8059%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.5559%" y="325" width="0.0810%" height="15" fill="rgb(221,87,20)" fg:x="883" fg:w="1"/><text x="71.8059%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="71.5559%" y="389" width="0.1621%" height="15" fill="rgb(213,74,28)" fg:x="883" fg:w="2"/><text x="71.8059%" y="399.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="71.5559%" y="373" width="0.1621%" height="15" fill="rgb(224,132,34)" fg:x="883" fg:w="2"/><text x="71.8059%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="71.5559%" y="357" width="0.1621%" height="15" fill="rgb(222,101,24)" fg:x="883" fg:w="2"/><text x="71.8059%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.6370%" y="341" width="0.0810%" height="15" fill="rgb(254,142,4)" fg:x="884" fg:w="1"/><text x="71.8870%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.6370%" y="325" width="0.0810%" height="15" fill="rgb(230,229,49)" fg:x="884" fg:w="1"/><text x="71.8870%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.6370%" y="309" width="0.0810%" height="15" fill="rgb(238,70,47)" fg:x="884" fg:w="1"/><text x="71.8870%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.6370%" y="293" width="0.0810%" height="15" fill="rgb(231,160,17)" fg:x="884" fg:w="1"/><text x="71.8870%" y="303.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.6370%" y="277" width="0.0810%" height="15" fill="rgb(218,68,53)" fg:x="884" fg:w="1"/><text x="71.8870%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.6370%" y="261" width="0.0810%" height="15" fill="rgb(236,111,10)" fg:x="884" fg:w="1"/><text x="71.8870%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.6370%" y="245" width="0.0810%" height="15" fill="rgb(224,34,41)" fg:x="884" fg:w="1"/><text x="71.8870%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.6370%" y="229" width="0.0810%" height="15" fill="rgb(241,118,19)" fg:x="884" fg:w="1"/><text x="71.8870%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.6370%" y="213" width="0.0810%" height="15" fill="rgb(238,129,25)" fg:x="884" fg:w="1"/><text x="71.8870%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.7180%" y="277" width="0.0810%" height="15" fill="rgb(238,22,31)" fg:x="885" fg:w="1"/><text x="71.9680%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.7180%" y="261" width="0.0810%" height="15" fill="rgb(222,174,48)" fg:x="885" fg:w="1"/><text x="71.9680%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="71.7180%" y="245" width="0.0810%" height="15" fill="rgb(206,152,40)" fg:x="885" fg:w="1"/><text x="71.9680%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.7990%" y="229" width="0.0810%" height="15" fill="rgb(218,99,54)" fg:x="886" fg:w="1"/><text x="72.0490%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.7990%" y="213" width="0.0810%" height="15" fill="rgb(220,174,26)" fg:x="886" fg:w="1"/><text x="72.0490%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.7990%" y="197" width="0.0810%" height="15" fill="rgb(245,116,9)" fg:x="886" fg:w="1"/><text x="72.0490%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.7990%" y="181" width="0.0810%" height="15" fill="rgb(209,72,35)" fg:x="886" fg:w="1"/><text x="72.0490%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="71.7990%" y="165" width="0.0810%" height="15" fill="rgb(226,126,21)" fg:x="886" fg:w="1"/><text x="72.0490%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="71.7990%" y="261" width="0.2431%" height="15" fill="rgb(227,192,1)" fg:x="886" fg:w="3"/><text x="72.0490%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="71.7990%" y="245" width="0.2431%" height="15" fill="rgb(237,180,29)" fg:x="886" fg:w="3"/><text x="72.0490%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="71.8801%" y="229" width="0.1621%" height="15" fill="rgb(230,197,35)" fg:x="887" fg:w="2"/><text x="72.1301%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="71.8801%" y="213" width="0.1621%" height="15" fill="rgb(246,193,31)" fg:x="887" fg:w="2"/><text x="72.1301%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="71.8801%" y="197" width="0.1621%" height="15" fill="rgb(241,36,4)" fg:x="887" fg:w="2"/><text x="72.1301%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.8801%" y="181" width="0.1621%" height="15" fill="rgb(241,130,17)" fg:x="887" fg:w="2"/><text x="72.1301%" y="191.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="71.8801%" y="165" width="0.1621%" height="15" fill="rgb(206,137,32)" fg:x="887" fg:w="2"/><text x="72.1301%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="71.8801%" y="149" width="0.1621%" height="15" fill="rgb(237,228,51)" fg:x="887" fg:w="2"/><text x="72.1301%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="71.8801%" y="133" width="0.1621%" height="15" fill="rgb(243,6,42)" fg:x="887" fg:w="2"/><text x="72.1301%" y="143.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (5 samples, 0.41%)</title><rect x="71.7180%" y="373" width="0.4052%" height="15" fill="rgb(251,74,28)" fg:x="885" fg:w="5"/><text x="71.9680%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (5 samples, 0.41%)</title><rect x="71.7180%" y="357" width="0.4052%" height="15" fill="rgb(218,20,49)" fg:x="885" fg:w="5"/><text x="71.9680%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="71.7180%" y="341" width="0.4052%" height="15" fill="rgb(238,28,14)" fg:x="885" fg:w="5"/><text x="71.9680%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="71.7180%" y="325" width="0.4052%" height="15" fill="rgb(229,40,46)" fg:x="885" fg:w="5"/><text x="71.9680%" y="335.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (5 samples, 0.41%)</title><rect x="71.7180%" y="309" width="0.4052%" height="15" fill="rgb(244,195,20)" fg:x="885" fg:w="5"/><text x="71.9680%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="71.7180%" y="293" width="0.4052%" height="15" fill="rgb(253,56,35)" fg:x="885" fg:w="5"/><text x="71.9680%" y="303.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="71.7990%" y="277" width="0.3241%" height="15" fill="rgb(210,149,44)" fg:x="886" fg:w="4"/><text x="72.0490%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.0421%" y="261" width="0.0810%" height="15" fill="rgb(240,135,12)" fg:x="889" fg:w="1"/><text x="72.2921%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.0421%" y="245" width="0.0810%" height="15" fill="rgb(251,24,50)" fg:x="889" fg:w="1"/><text x="72.2921%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="72.0421%" y="229" width="0.0810%" height="15" fill="rgb(243,200,47)" fg:x="889" fg:w="1"/><text x="72.2921%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.0421%" y="213" width="0.0810%" height="15" fill="rgb(224,166,26)" fg:x="889" fg:w="1"/><text x="72.2921%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.0421%" y="197" width="0.0810%" height="15" fill="rgb(233,0,47)" fg:x="889" fg:w="1"/><text x="72.2921%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="72.0421%" y="181" width="0.0810%" height="15" fill="rgb(253,80,5)" fg:x="889" fg:w="1"/><text x="72.2921%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.0421%" y="165" width="0.0810%" height="15" fill="rgb(214,133,25)" fg:x="889" fg:w="1"/><text x="72.2921%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.0421%" y="149" width="0.0810%" height="15" fill="rgb(209,27,14)" fg:x="889" fg:w="1"/><text x="72.2921%" y="159.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.1232%" y="325" width="0.0810%" height="15" fill="rgb(219,102,51)" fg:x="890" fg:w="1"/><text x="72.3732%" y="335.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="72.1232%" y="309" width="0.0810%" height="15" fill="rgb(237,18,16)" fg:x="890" fg:w="1"/><text x="72.3732%" y="319.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="72.2042%" y="245" width="0.0810%" height="15" fill="rgb(241,85,17)" fg:x="891" fg:w="1"/><text x="72.4542%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="72.2042%" y="261" width="0.1621%" height="15" fill="rgb(236,90,42)" fg:x="891" fg:w="2"/><text x="72.4542%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.2853%" y="245" width="0.0810%" height="15" fill="rgb(249,57,21)" fg:x="892" fg:w="1"/><text x="72.5353%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.3663%" y="229" width="0.0810%" height="15" fill="rgb(243,12,36)" fg:x="893" fg:w="1"/><text x="72.6163%" y="239.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="72.4473%" y="149" width="0.0810%" height="15" fill="rgb(253,128,47)" fg:x="894" fg:w="1"/><text x="72.6973%" y="159.50"></text></g><g><title>engine::internal::Entities::add_persisted (15 samples, 1.22%)</title><rect x="71.3938%" y="405" width="1.2156%" height="15" fill="rgb(207,33,20)" fg:x="881" fg:w="15"/><text x="71.6438%" y="415.50"></text></g><g><title>kernel::model::deserialize_entity (11 samples, 0.89%)</title><rect x="71.7180%" y="389" width="0.8914%" height="15" fill="rgb(233,215,35)" fg:x="885" fg:w="11"/><text x="71.9680%" y="399.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.49%)</title><rect x="72.1232%" y="373" width="0.4862%" height="15" fill="rgb(249,188,52)" fg:x="890" fg:w="6"/><text x="72.3732%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.49%)</title><rect x="72.1232%" y="357" width="0.4862%" height="15" fill="rgb(225,12,32)" fg:x="890" fg:w="6"/><text x="72.3732%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="72.1232%" y="341" width="0.4862%" height="15" fill="rgb(247,98,14)" fg:x="890" fg:w="6"/><text x="72.3732%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.41%)</title><rect x="72.2042%" y="325" width="0.4052%" height="15" fill="rgb(247,219,48)" fg:x="891" fg:w="5"/><text x="72.4542%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="72.2042%" y="309" width="0.4052%" height="15" fill="rgb(253,60,48)" fg:x="891" fg:w="5"/><text x="72.4542%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.41%)</title><rect x="72.2042%" y="293" width="0.4052%" height="15" fill="rgb(245,15,52)" fg:x="891" fg:w="5"/><text x="72.4542%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="72.2042%" y="277" width="0.4052%" height="15" fill="rgb(220,133,28)" fg:x="891" fg:w="5"/><text x="72.4542%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="72.3663%" y="261" width="0.2431%" height="15" fill="rgb(217,180,4)" fg:x="893" fg:w="3"/><text x="72.6163%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.3663%" y="245" width="0.2431%" height="15" fill="rgb(251,24,1)" fg:x="893" fg:w="3"/><text x="72.6163%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="72.4473%" y="229" width="0.1621%" height="15" fill="rgb(212,185,49)" fg:x="894" fg:w="2"/><text x="72.6973%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.4473%" y="213" width="0.1621%" height="15" fill="rgb(215,175,22)" fg:x="894" fg:w="2"/><text x="72.6973%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="72.4473%" y="197" width="0.1621%" height="15" fill="rgb(250,205,14)" fg:x="894" fg:w="2"/><text x="72.6973%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.4473%" y="181" width="0.1621%" height="15" fill="rgb(225,211,22)" fg:x="894" fg:w="2"/><text x="72.6973%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="72.4473%" y="165" width="0.1621%" height="15" fill="rgb(251,179,42)" fg:x="894" fg:w="2"/><text x="72.6973%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.5284%" y="149" width="0.0810%" height="15" fill="rgb(208,216,51)" fg:x="895" fg:w="1"/><text x="72.7784%" y="159.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (18 samples, 1.46%)</title><rect x="71.2318%" y="485" width="1.4587%" height="15" fill="rgb(235,36,11)" fg:x="879" fg:w="18"/><text x="71.4818%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18 samples, 1.46%)</title><rect x="71.2318%" y="469" width="1.4587%" height="15" fill="rgb(213,189,28)" fg:x="879" fg:w="18"/><text x="71.4818%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (18 samples, 1.46%)</title><rect x="71.2318%" y="453" width="1.4587%" height="15" fill="rgb(227,203,42)" fg:x="879" fg:w="18"/><text x="71.4818%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (18 samples, 1.46%)</title><rect x="71.2318%" y="437" width="1.4587%" height="15" fill="rgb(244,72,36)" fg:x="879" fg:w="18"/><text x="71.4818%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (17 samples, 1.38%)</title><rect x="71.3128%" y="421" width="1.3776%" height="15" fill="rgb(213,53,17)" fg:x="880" fg:w="17"/><text x="71.5628%" y="431.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="72.6094%" y="405" width="0.0810%" height="15" fill="rgb(207,167,3)" fg:x="896" fg:w="1"/><text x="72.8594%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.6094%" y="389" width="0.0810%" height="15" fill="rgb(216,98,30)" fg:x="896" fg:w="1"/><text x="72.8594%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.6904%" y="453" width="0.0810%" height="15" fill="rgb(236,123,15)" fg:x="897" fg:w="1"/><text x="72.9404%" y="463.50"></text></g><g><title>plugins_core::tools::get_contained_keys (23 samples, 1.86%)</title><rect x="70.9887%" y="533" width="1.8639%" height="15" fill="rgb(248,81,50)" fg:x="876" fg:w="23"/><text x="71.2387%" y="543.50">p..</text></g><g><title>kernel::model::entry::Entry::scope (22 samples, 1.78%)</title><rect x="71.0697%" y="517" width="1.7828%" height="15" fill="rgb(214,120,4)" fg:x="877" fg:w="22"/><text x="71.3197%" y="527.50">k..</text></g><g><title>kernel::model::entity::Entity::load_scope (22 samples, 1.78%)</title><rect x="71.0697%" y="501" width="1.7828%" height="15" fill="rgb(208,179,34)" fg:x="877" fg:w="22"/><text x="71.3197%" y="511.50">k..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.6904%" y="485" width="0.1621%" height="15" fill="rgb(227,140,7)" fg:x="897" fg:w="2"/><text x="72.9404%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.6904%" y="469" width="0.1621%" height="15" fill="rgb(214,22,6)" fg:x="897" fg:w="2"/><text x="72.9404%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="72.7715%" y="453" width="0.0810%" height="15" fill="rgb(207,137,27)" fg:x="898" fg:w="1"/><text x="73.0215%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="72.7715%" y="437" width="0.0810%" height="15" fill="rgb(210,8,46)" fg:x="898" fg:w="1"/><text x="73.0215%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="72.7715%" y="421" width="0.0810%" height="15" fill="rgb(240,16,54)" fg:x="898" fg:w="1"/><text x="73.0215%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.7715%" y="405" width="0.0810%" height="15" fill="rgb(211,209,29)" fg:x="898" fg:w="1"/><text x="73.0215%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (38 samples, 3.08%)</title><rect x="69.9352%" y="565" width="3.0794%" height="15" fill="rgb(226,228,24)" fg:x="863" fg:w="38"/><text x="70.1852%" y="575.50">&lt;al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (38 samples, 3.08%)</title><rect x="69.9352%" y="549" width="3.0794%" height="15" fill="rgb(222,84,9)" fg:x="863" fg:w="38"/><text x="70.1852%" y="559.50">&lt;co..</text></g><g><title>plugins_core::tools::get_occupant_keys (2 samples, 0.16%)</title><rect x="72.8525%" y="533" width="0.1621%" height="15" fill="rgb(234,203,30)" fg:x="899" fg:w="2"/><text x="73.1025%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="72.8525%" y="517" width="0.1621%" height="15" fill="rgb(238,109,14)" fg:x="899" fg:w="2"/><text x="73.1025%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="72.9335%" y="501" width="0.0810%" height="15" fill="rgb(233,206,34)" fg:x="900" fg:w="1"/><text x="73.1835%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.9335%" y="485" width="0.0810%" height="15" fill="rgb(220,167,47)" fg:x="900" fg:w="1"/><text x="73.1835%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.9335%" y="469" width="0.0810%" height="15" fill="rgb(238,105,10)" fg:x="900" fg:w="1"/><text x="73.1835%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0956%" y="517" width="0.0810%" height="15" fill="rgb(213,227,17)" fg:x="902" fg:w="1"/><text x="73.3456%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0956%" y="501" width="0.0810%" height="15" fill="rgb(217,132,38)" fg:x="902" fg:w="1"/><text x="73.3456%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.0956%" y="485" width="0.0810%" height="15" fill="rgb(242,146,4)" fg:x="902" fg:w="1"/><text x="73.3456%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.0956%" y="469" width="0.0810%" height="15" fill="rgb(212,61,9)" fg:x="902" fg:w="1"/><text x="73.3456%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.0956%" y="453" width="0.0810%" height="15" fill="rgb(247,126,22)" fg:x="902" fg:w="1"/><text x="73.3456%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0956%" y="437" width="0.0810%" height="15" fill="rgb(220,196,2)" fg:x="902" fg:w="1"/><text x="73.3456%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0956%" y="421" width="0.0810%" height="15" fill="rgb(208,46,4)" fg:x="902" fg:w="1"/><text x="73.3456%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.0956%" y="405" width="0.0810%" height="15" fill="rgb(252,104,46)" fg:x="902" fg:w="1"/><text x="73.3456%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.0956%" y="389" width="0.0810%" height="15" fill="rgb(237,152,48)" fg:x="902" fg:w="1"/><text x="73.3456%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.0956%" y="373" width="0.0810%" height="15" fill="rgb(221,59,37)" fg:x="902" fg:w="1"/><text x="73.3456%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.0956%" y="357" width="0.0810%" height="15" fill="rgb(209,202,51)" fg:x="902" fg:w="1"/><text x="73.3456%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0956%" y="341" width="0.0810%" height="15" fill="rgb(228,81,30)" fg:x="902" fg:w="1"/><text x="73.3456%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="73.1767%" y="501" width="0.0810%" height="15" fill="rgb(227,42,39)" fg:x="903" fg:w="1"/><text x="73.4267%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="73.2577%" y="165" width="0.0810%" height="15" fill="rgb(221,26,2)" fg:x="904" fg:w="1"/><text x="73.5077%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="73.2577%" y="149" width="0.0810%" height="15" fill="rgb(254,61,31)" fg:x="904" fg:w="1"/><text x="73.5077%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.2577%" y="133" width="0.0810%" height="15" fill="rgb(222,173,38)" fg:x="904" fg:w="1"/><text x="73.5077%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="73.2577%" y="117" width="0.0810%" height="15" fill="rgb(218,50,12)" fg:x="904" fg:w="1"/><text x="73.5077%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.2577%" y="101" width="0.0810%" height="15" fill="rgb(223,88,40)" fg:x="904" fg:w="1"/><text x="73.5077%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="73.2577%" y="85" width="0.0810%" height="15" fill="rgb(237,54,19)" fg:x="904" fg:w="1"/><text x="73.5077%" y="95.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="73.2577%" y="69" width="0.0810%" height="15" fill="rgb(251,129,25)" fg:x="904" fg:w="1"/><text x="73.5077%" y="79.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="73.2577%" y="53" width="0.0810%" height="15" fill="rgb(238,97,19)" fg:x="904" fg:w="1"/><text x="73.5077%" y="63.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.24%)</title><rect x="73.1767%" y="517" width="0.2431%" height="15" fill="rgb(240,169,18)" fg:x="903" fg:w="3"/><text x="73.4267%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="73.2577%" y="501" width="0.1621%" height="15" fill="rgb(230,187,49)" fg:x="904" fg:w="2"/><text x="73.5077%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="73.2577%" y="485" width="0.1621%" height="15" fill="rgb(209,44,26)" fg:x="904" fg:w="2"/><text x="73.5077%" y="495.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="73.2577%" y="469" width="0.1621%" height="15" fill="rgb(244,0,6)" fg:x="904" fg:w="2"/><text x="73.5077%" y="479.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="73.2577%" y="453" width="0.1621%" height="15" fill="rgb(248,18,21)" fg:x="904" fg:w="2"/><text x="73.5077%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="73.2577%" y="437" width="0.1621%" height="15" fill="rgb(245,180,19)" fg:x="904" fg:w="2"/><text x="73.5077%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="73.2577%" y="421" width="0.1621%" height="15" fill="rgb(252,118,36)" fg:x="904" fg:w="2"/><text x="73.5077%" y="431.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="73.2577%" y="405" width="0.1621%" height="15" fill="rgb(210,224,19)" fg:x="904" fg:w="2"/><text x="73.5077%" y="415.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="73.2577%" y="389" width="0.1621%" height="15" fill="rgb(218,30,24)" fg:x="904" fg:w="2"/><text x="73.5077%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="73.2577%" y="373" width="0.1621%" height="15" fill="rgb(219,75,50)" fg:x="904" fg:w="2"/><text x="73.5077%" y="383.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="73.2577%" y="357" width="0.1621%" height="15" fill="rgb(234,72,50)" fg:x="904" fg:w="2"/><text x="73.5077%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="73.2577%" y="341" width="0.1621%" height="15" fill="rgb(219,100,48)" fg:x="904" fg:w="2"/><text x="73.5077%" y="351.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="73.2577%" y="325" width="0.1621%" height="15" fill="rgb(253,5,41)" fg:x="904" fg:w="2"/><text x="73.5077%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="73.2577%" y="309" width="0.1621%" height="15" fill="rgb(247,181,11)" fg:x="904" fg:w="2"/><text x="73.5077%" y="319.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (2 samples, 0.16%)</title><rect x="73.2577%" y="293" width="0.1621%" height="15" fill="rgb(222,223,25)" fg:x="904" fg:w="2"/><text x="73.5077%" y="303.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (2 samples, 0.16%)</title><rect x="73.2577%" y="277" width="0.1621%" height="15" fill="rgb(214,198,28)" fg:x="904" fg:w="2"/><text x="73.5077%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="73.2577%" y="261" width="0.1621%" height="15" fill="rgb(230,46,43)" fg:x="904" fg:w="2"/><text x="73.5077%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="73.2577%" y="245" width="0.1621%" height="15" fill="rgb(233,65,53)" fg:x="904" fg:w="2"/><text x="73.5077%" y="255.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="73.2577%" y="229" width="0.1621%" height="15" fill="rgb(221,121,27)" fg:x="904" fg:w="2"/><text x="73.5077%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="73.2577%" y="213" width="0.1621%" height="15" fill="rgb(247,70,47)" fg:x="904" fg:w="2"/><text x="73.5077%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="73.2577%" y="197" width="0.1621%" height="15" fill="rgb(228,85,35)" fg:x="904" fg:w="2"/><text x="73.5077%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="73.2577%" y="181" width="0.1621%" height="15" fill="rgb(209,50,18)" fg:x="904" fg:w="2"/><text x="73.5077%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="73.3387%" y="165" width="0.0810%" height="15" fill="rgb(250,19,35)" fg:x="905" fg:w="1"/><text x="73.5887%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="73.5818%" y="229" width="0.1621%" height="15" fill="rgb(253,107,29)" fg:x="908" fg:w="2"/><text x="73.8318%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="73.5818%" y="213" width="0.1621%" height="15" fill="rgb(252,179,29)" fg:x="908" fg:w="2"/><text x="73.8318%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="73.5008%" y="341" width="0.3241%" height="15" fill="rgb(238,194,6)" fg:x="907" fg:w="4"/><text x="73.7508%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="73.5008%" y="325" width="0.3241%" height="15" fill="rgb(238,164,29)" fg:x="907" fg:w="4"/><text x="73.7508%" y="335.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="73.5008%" y="309" width="0.3241%" height="15" fill="rgb(224,25,9)" fg:x="907" fg:w="4"/><text x="73.7508%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="73.5818%" y="293" width="0.2431%" height="15" fill="rgb(244,153,23)" fg:x="908" fg:w="3"/><text x="73.8318%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="73.5818%" y="277" width="0.2431%" height="15" fill="rgb(212,203,14)" fg:x="908" fg:w="3"/><text x="73.8318%" y="287.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="73.5818%" y="261" width="0.2431%" height="15" fill="rgb(220,164,20)" fg:x="908" fg:w="3"/><text x="73.8318%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="73.5818%" y="245" width="0.2431%" height="15" fill="rgb(222,203,48)" fg:x="908" fg:w="3"/><text x="73.8318%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="73.7439%" y="229" width="0.0810%" height="15" fill="rgb(215,159,22)" fg:x="910" fg:w="1"/><text x="73.9939%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.7439%" y="213" width="0.0810%" height="15" fill="rgb(216,183,47)" fg:x="910" fg:w="1"/><text x="73.9939%" y="223.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (5 samples, 0.41%)</title><rect x="73.5008%" y="453" width="0.4052%" height="15" fill="rgb(229,195,25)" fg:x="907" fg:w="5"/><text x="73.7508%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="73.5008%" y="437" width="0.4052%" height="15" fill="rgb(224,132,51)" fg:x="907" fg:w="5"/><text x="73.7508%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.41%)</title><rect x="73.5008%" y="421" width="0.4052%" height="15" fill="rgb(240,63,7)" fg:x="907" fg:w="5"/><text x="73.7508%" y="431.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (5 samples, 0.41%)</title><rect x="73.5008%" y="405" width="0.4052%" height="15" fill="rgb(249,182,41)" fg:x="907" fg:w="5"/><text x="73.7508%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="73.5008%" y="389" width="0.4052%" height="15" fill="rgb(243,47,26)" fg:x="907" fg:w="5"/><text x="73.7508%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.41%)</title><rect x="73.5008%" y="373" width="0.4052%" height="15" fill="rgb(233,48,2)" fg:x="907" fg:w="5"/><text x="73.7508%" y="383.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (5 samples, 0.41%)</title><rect x="73.5008%" y="357" width="0.4052%" height="15" fill="rgb(244,165,34)" fg:x="907" fg:w="5"/><text x="73.7508%" y="367.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.8250%" y="341" width="0.0810%" height="15" fill="rgb(207,89,7)" fg:x="911" fg:w="1"/><text x="74.0750%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="73.8250%" y="325" width="0.0810%" height="15" fill="rgb(244,117,36)" fg:x="911" fg:w="1"/><text x="74.0750%" y="335.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="73.8250%" y="309" width="0.0810%" height="15" fill="rgb(226,144,34)" fg:x="911" fg:w="1"/><text x="74.0750%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.8250%" y="293" width="0.0810%" height="15" fill="rgb(213,23,19)" fg:x="911" fg:w="1"/><text x="74.0750%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="73.8250%" y="277" width="0.0810%" height="15" fill="rgb(217,75,12)" fg:x="911" fg:w="1"/><text x="74.0750%" y="287.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (7 samples, 0.57%)</title><rect x="73.4198%" y="501" width="0.5673%" height="15" fill="rgb(224,159,17)" fg:x="906" fg:w="7"/><text x="73.6698%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7 samples, 0.57%)</title><rect x="73.4198%" y="485" width="0.5673%" height="15" fill="rgb(217,118,1)" fg:x="906" fg:w="7"/><text x="73.6698%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.57%)</title><rect x="73.4198%" y="469" width="0.5673%" height="15" fill="rgb(232,180,48)" fg:x="906" fg:w="7"/><text x="73.6698%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.9060%" y="453" width="0.0810%" height="15" fill="rgb(230,27,33)" fg:x="912" fg:w="1"/><text x="74.1560%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.9060%" y="437" width="0.0810%" height="15" fill="rgb(205,31,21)" fg:x="912" fg:w="1"/><text x="74.1560%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.0681%" y="453" width="0.0810%" height="15" fill="rgb(253,59,4)" fg:x="914" fg:w="1"/><text x="74.3181%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.1491%" y="421" width="0.0810%" height="15" fill="rgb(224,201,9)" fg:x="915" fg:w="1"/><text x="74.3991%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="74.1491%" y="453" width="0.1621%" height="15" fill="rgb(229,206,30)" fg:x="915" fg:w="2"/><text x="74.3991%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="74.1491%" y="437" width="0.1621%" height="15" fill="rgb(212,67,47)" fg:x="915" fg:w="2"/><text x="74.3991%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.2301%" y="421" width="0.0810%" height="15" fill="rgb(211,96,50)" fg:x="916" fg:w="1"/><text x="74.4801%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="74.3922%" y="421" width="0.0810%" height="15" fill="rgb(252,114,18)" fg:x="918" fg:w="1"/><text x="74.6422%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.5543%" y="373" width="0.0810%" height="15" fill="rgb(223,58,37)" fg:x="920" fg:w="1"/><text x="74.8043%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.7164%" y="341" width="0.0810%" height="15" fill="rgb(237,70,4)" fg:x="922" fg:w="1"/><text x="74.9664%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.7164%" y="325" width="0.0810%" height="15" fill="rgb(244,85,46)" fg:x="922" fg:w="1"/><text x="74.9664%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.7164%" y="309" width="0.0810%" height="15" fill="rgb(223,39,52)" fg:x="922" fg:w="1"/><text x="74.9664%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="74.7974%" y="325" width="0.0810%" height="15" fill="rgb(218,200,14)" fg:x="923" fg:w="1"/><text x="75.0474%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.8784%" y="309" width="0.0810%" height="15" fill="rgb(208,171,16)" fg:x="924" fg:w="1"/><text x="75.1284%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.8784%" y="293" width="0.0810%" height="15" fill="rgb(234,200,18)" fg:x="924" fg:w="1"/><text x="75.1284%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="74.9595%" y="293" width="0.0810%" height="15" fill="rgb(228,45,11)" fg:x="925" fg:w="1"/><text x="75.2095%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="74.8784%" y="325" width="0.2431%" height="15" fill="rgb(237,182,11)" fg:x="924" fg:w="3"/><text x="75.1284%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="74.9595%" y="309" width="0.1621%" height="15" fill="rgb(241,175,49)" fg:x="925" fg:w="2"/><text x="75.2095%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.0405%" y="293" width="0.0810%" height="15" fill="rgb(247,38,35)" fg:x="926" fg:w="1"/><text x="75.2905%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="74.7164%" y="357" width="0.4862%" height="15" fill="rgb(228,39,49)" fg:x="922" fg:w="6"/><text x="74.9664%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="74.7974%" y="341" width="0.4052%" height="15" fill="rgb(226,101,26)" fg:x="923" fg:w="5"/><text x="75.0474%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.1216%" y="325" width="0.0810%" height="15" fill="rgb(206,141,19)" fg:x="927" fg:w="1"/><text x="75.3716%" y="335.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (70 samples, 5.67%)</title><rect x="69.6110%" y="597" width="5.6726%" height="15" fill="rgb(211,200,13)" fg:x="859" fg:w="70"/><text x="69.8610%" y="607.50">&lt;plugin..</text></g><g><title>core::iter::adapters::try_process (66 samples, 5.35%)</title><rect x="69.9352%" y="581" width="5.3485%" height="15" fill="rgb(241,121,6)" fg:x="863" fg:w="66"/><text x="70.1852%" y="591.50">core::i..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (28 samples, 2.27%)</title><rect x="73.0146%" y="565" width="2.2690%" height="15" fill="rgb(234,221,29)" fg:x="901" fg:w="28"/><text x="73.2646%" y="575.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (28 samples, 2.27%)</title><rect x="73.0146%" y="549" width="2.2690%" height="15" fill="rgb(229,136,5)" fg:x="901" fg:w="28"/><text x="73.2646%" y="559.50">&lt;..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (28 samples, 2.27%)</title><rect x="73.0146%" y="533" width="2.2690%" height="15" fill="rgb(238,36,11)" fg:x="901" fg:w="28"/><text x="73.2646%" y="543.50">p..</text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (23 samples, 1.86%)</title><rect x="73.4198%" y="517" width="1.8639%" height="15" fill="rgb(251,55,41)" fg:x="906" fg:w="23"/><text x="73.6698%" y="527.50">&lt;..</text></g><g><title>kernel::model::EntityPtr::to_json_value (16 samples, 1.30%)</title><rect x="73.9870%" y="501" width="1.2966%" height="15" fill="rgb(242,34,40)" fg:x="913" fg:w="16"/><text x="74.2370%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (16 samples, 1.30%)</title><rect x="73.9870%" y="485" width="1.2966%" height="15" fill="rgb(215,42,17)" fg:x="913" fg:w="16"/><text x="74.2370%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.30%)</title><rect x="73.9870%" y="469" width="1.2966%" height="15" fill="rgb(207,44,46)" fg:x="913" fg:w="16"/><text x="74.2370%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (12 samples, 0.97%)</title><rect x="74.3112%" y="453" width="0.9724%" height="15" fill="rgb(211,206,28)" fg:x="917" fg:w="12"/><text x="74.5612%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.89%)</title><rect x="74.3922%" y="437" width="0.8914%" height="15" fill="rgb(237,167,16)" fg:x="918" fg:w="11"/><text x="74.6422%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 0.81%)</title><rect x="74.4733%" y="421" width="0.8104%" height="15" fill="rgb(233,66,6)" fg:x="919" fg:w="10"/><text x="74.7233%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (10 samples, 0.81%)</title><rect x="74.4733%" y="405" width="0.8104%" height="15" fill="rgb(246,123,29)" fg:x="919" fg:w="10"/><text x="74.7233%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.73%)</title><rect x="74.5543%" y="389" width="0.7293%" height="15" fill="rgb(209,62,40)" fg:x="920" fg:w="9"/><text x="74.8043%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.65%)</title><rect x="74.6353%" y="373" width="0.6483%" height="15" fill="rgb(218,4,25)" fg:x="921" fg:w="8"/><text x="74.8853%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.2026%" y="357" width="0.0810%" height="15" fill="rgb(253,91,49)" fg:x="928" fg:w="1"/><text x="75.4526%" y="367.50"></text></g><g><title>&lt;rpc_proto::Surroundings as core::convert::TryFrom&lt;&amp;kernel::surround::Surroundings&gt;&gt;::try_from (1 samples, 0.08%)</title><rect x="75.2836%" y="597" width="0.0810%" height="15" fill="rgb(228,155,29)" fg:x="929" fg:w="1"/><text x="75.5336%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="75.2836%" y="581" width="0.0810%" height="15" fill="rgb(243,57,37)" fg:x="929" fg:w="1"/><text x="75.5336%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="75.2836%" y="565" width="0.0810%" height="15" fill="rgb(244,167,17)" fg:x="929" fg:w="1"/><text x="75.5336%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="75.2836%" y="549" width="0.0810%" height="15" fill="rgb(207,181,38)" fg:x="929" fg:w="1"/><text x="75.5336%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="75.2836%" y="533" width="0.0810%" height="15" fill="rgb(211,8,23)" fg:x="929" fg:w="1"/><text x="75.5336%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="75.2836%" y="517" width="0.0810%" height="15" fill="rgb(235,11,44)" fg:x="929" fg:w="1"/><text x="75.5336%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.3647%" y="597" width="0.0810%" height="15" fill="rgb(248,18,52)" fg:x="930" fg:w="1"/><text x="75.6147%" y="607.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (785 samples, 63.61%)</title><rect x="11.9125%" y="661" width="63.6143%" height="15" fill="rgb(208,4,7)" fg:x="147" fg:w="785"/><text x="12.1625%" y="671.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (83 samples, 6.73%)</title><rect x="68.8006%" y="645" width="6.7261%" height="15" fill="rgb(240,17,39)" fg:x="849" fg:w="83"/><text x="69.0506%" y="655.50">kernel::p..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (83 samples, 6.73%)</title><rect x="68.8006%" y="629" width="6.7261%" height="15" fill="rgb(207,170,3)" fg:x="849" fg:w="83"/><text x="69.0506%" y="639.50">&lt;plugins_..</text></g><g><title>plugins_rpc::querying::have_surroundings (73 samples, 5.92%)</title><rect x="69.6110%" y="613" width="5.9157%" height="15" fill="rgb(236,100,52)" fg:x="859" fg:w="73"/><text x="69.8610%" y="623.50">plugins_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="75.4457%" y="597" width="0.0810%" height="15" fill="rgb(246,78,51)" fg:x="931" fg:w="1"/><text x="75.6957%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.4457%" y="581" width="0.0810%" height="15" fill="rgb(211,17,15)" fg:x="931" fg:w="1"/><text x="75.6957%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.4457%" y="565" width="0.0810%" height="15" fill="rgb(209,59,46)" fg:x="931" fg:w="1"/><text x="75.6957%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="75.5267%" y="597" width="0.0810%" height="15" fill="rgb(210,92,25)" fg:x="932" fg:w="1"/><text x="75.7767%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="75.5267%" y="581" width="0.0810%" height="15" fill="rgb(238,174,52)" fg:x="932" fg:w="1"/><text x="75.7767%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="75.5267%" y="565" width="0.0810%" height="15" fill="rgb(230,73,7)" fg:x="932" fg:w="1"/><text x="75.7767%" y="575.50"></text></g><g><title>kernel::model::scopes::Props::property_named (1 samples, 0.08%)</title><rect x="75.5267%" y="549" width="0.0810%" height="15" fill="rgb(243,124,40)" fg:x="932" fg:w="1"/><text x="75.7767%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.6078%" y="517" width="0.0810%" height="15" fill="rgb(244,170,11)" fg:x="933" fg:w="1"/><text x="75.8578%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.6888%" y="469" width="0.0810%" height="15" fill="rgb(207,114,54)" fg:x="934" fg:w="1"/><text x="75.9388%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.6888%" y="453" width="0.0810%" height="15" fill="rgb(205,42,20)" fg:x="934" fg:w="1"/><text x="75.9388%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.6888%" y="437" width="0.0810%" height="15" fill="rgb(230,30,28)" fg:x="934" fg:w="1"/><text x="75.9388%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.6888%" y="421" width="0.0810%" height="15" fill="rgb(205,73,54)" fg:x="934" fg:w="1"/><text x="75.9388%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.6888%" y="405" width="0.0810%" height="15" fill="rgb(254,227,23)" fg:x="934" fg:w="1"/><text x="75.9388%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.6888%" y="389" width="0.0810%" height="15" fill="rgb(228,202,34)" fg:x="934" fg:w="1"/><text x="75.9388%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.6888%" y="373" width="0.0810%" height="15" fill="rgb(222,225,37)" fg:x="934" fg:w="1"/><text x="75.9388%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (4 samples, 0.32%)</title><rect x="75.6078%" y="581" width="0.3241%" height="15" fill="rgb(221,14,54)" fg:x="933" fg:w="4"/><text x="75.8578%" y="591.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (4 samples, 0.32%)</title><rect x="75.6078%" y="565" width="0.3241%" height="15" fill="rgb(254,102,2)" fg:x="933" fg:w="4"/><text x="75.8578%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="75.6078%" y="549" width="0.3241%" height="15" fill="rgb(232,104,17)" fg:x="933" fg:w="4"/><text x="75.8578%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="75.6078%" y="533" width="0.3241%" height="15" fill="rgb(250,220,14)" fg:x="933" fg:w="4"/><text x="75.8578%" y="543.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (3 samples, 0.24%)</title><rect x="75.6888%" y="517" width="0.2431%" height="15" fill="rgb(241,158,9)" fg:x="934" fg:w="3"/><text x="75.9388%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="75.6888%" y="501" width="0.2431%" height="15" fill="rgb(246,9,43)" fg:x="934" fg:w="3"/><text x="75.9388%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="75.6888%" y="485" width="0.2431%" height="15" fill="rgb(206,73,33)" fg:x="934" fg:w="3"/><text x="75.9388%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.7699%" y="469" width="0.1621%" height="15" fill="rgb(222,79,8)" fg:x="935" fg:w="2"/><text x="76.0199%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.8509%" y="453" width="0.0810%" height="15" fill="rgb(234,8,54)" fg:x="936" fg:w="1"/><text x="76.1009%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="75.8509%" y="437" width="0.0810%" height="15" fill="rgb(209,134,38)" fg:x="936" fg:w="1"/><text x="76.1009%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.8509%" y="421" width="0.0810%" height="15" fill="rgb(230,127,29)" fg:x="936" fg:w="1"/><text x="76.1009%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.8509%" y="405" width="0.0810%" height="15" fill="rgb(242,44,41)" fg:x="936" fg:w="1"/><text x="76.1009%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="75.8509%" y="389" width="0.0810%" height="15" fill="rgb(222,56,43)" fg:x="936" fg:w="1"/><text x="76.1009%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.8509%" y="373" width="0.0810%" height="15" fill="rgb(238,39,47)" fg:x="936" fg:w="1"/><text x="76.1009%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.8509%" y="357" width="0.0810%" height="15" fill="rgb(226,79,43)" fg:x="936" fg:w="1"/><text x="76.1009%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.49%)</title><rect x="75.5267%" y="629" width="0.4862%" height="15" fill="rgb(242,105,53)" fg:x="932" fg:w="6"/><text x="75.7767%" y="639.50"></text></g><g><title>engine::internal::Entities::add_persisted (6 samples, 0.49%)</title><rect x="75.5267%" y="613" width="0.4862%" height="15" fill="rgb(251,132,46)" fg:x="932" fg:w="6"/><text x="75.7767%" y="623.50"></text></g><g><title>kernel::model::deserialize_entity (5 samples, 0.41%)</title><rect x="75.6078%" y="597" width="0.4052%" height="15" fill="rgb(231,77,14)" fg:x="933" fg:w="5"/><text x="75.8578%" y="607.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="75.9319%" y="581" width="0.0810%" height="15" fill="rgb(240,135,9)" fg:x="937" fg:w="1"/><text x="76.1819%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.9319%" y="565" width="0.0810%" height="15" fill="rgb(248,109,14)" fg:x="937" fg:w="1"/><text x="76.1819%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.9319%" y="549" width="0.0810%" height="15" fill="rgb(227,146,52)" fg:x="937" fg:w="1"/><text x="76.1819%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.9319%" y="533" width="0.0810%" height="15" fill="rgb(232,54,3)" fg:x="937" fg:w="1"/><text x="76.1819%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.9319%" y="517" width="0.0810%" height="15" fill="rgb(229,201,43)" fg:x="937" fg:w="1"/><text x="76.1819%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.9319%" y="501" width="0.0810%" height="15" fill="rgb(252,161,33)" fg:x="937" fg:w="1"/><text x="76.1819%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.9319%" y="485" width="0.0810%" height="15" fill="rgb(226,146,40)" fg:x="937" fg:w="1"/><text x="76.1819%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.9319%" y="469" width="0.0810%" height="15" fill="rgb(219,47,25)" fg:x="937" fg:w="1"/><text x="76.1819%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.9319%" y="453" width="0.0810%" height="15" fill="rgb(250,135,13)" fg:x="937" fg:w="1"/><text x="76.1819%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.9319%" y="437" width="0.0810%" height="15" fill="rgb(219,229,18)" fg:x="937" fg:w="1"/><text x="76.1819%" y="447.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (794 samples, 64.34%)</title><rect x="11.7504%" y="693" width="64.3436%" height="15" fill="rgb(217,152,27)" fg:x="145" fg:w="794"/><text x="12.0004%" y="703.50">&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (793 samples, 64.26%)</title><rect x="11.8314%" y="677" width="64.2626%" height="15" fill="rgb(225,71,47)" fg:x="146" fg:w="793"/><text x="12.0814%" y="687.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (7 samples, 0.57%)</title><rect x="75.5267%" y="661" width="0.5673%" height="15" fill="rgb(220,139,14)" fg:x="932" fg:w="7"/><text x="75.7767%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (7 samples, 0.57%)</title><rect x="75.5267%" y="645" width="0.5673%" height="15" fill="rgb(247,54,32)" fg:x="932" fg:w="7"/><text x="75.7767%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="76.0130%" y="629" width="0.0810%" height="15" fill="rgb(252,131,39)" fg:x="938" fg:w="1"/><text x="76.2630%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="76.0130%" y="613" width="0.0810%" height="15" fill="rgb(210,108,39)" fg:x="938" fg:w="1"/><text x="76.2630%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="76.0130%" y="597" width="0.0810%" height="15" fill="rgb(205,23,29)" fg:x="938" fg:w="1"/><text x="76.2630%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="76.0130%" y="581" width="0.0810%" height="15" fill="rgb(246,139,46)" fg:x="938" fg:w="1"/><text x="76.2630%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="76.0130%" y="565" width="0.0810%" height="15" fill="rgb(250,81,26)" fg:x="938" fg:w="1"/><text x="76.2630%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="76.0130%" y="549" width="0.0810%" height="15" fill="rgb(214,104,7)" fg:x="938" fg:w="1"/><text x="76.2630%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="76.0130%" y="533" width="0.0810%" height="15" fill="rgb(233,189,8)" fg:x="938" fg:w="1"/><text x="76.2630%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="76.0130%" y="517" width="0.0810%" height="15" fill="rgb(228,141,17)" fg:x="938" fg:w="1"/><text x="76.2630%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="76.0130%" y="501" width="0.0810%" height="15" fill="rgb(247,157,1)" fg:x="938" fg:w="1"/><text x="76.2630%" y="511.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="76.0130%" y="485" width="0.0810%" height="15" fill="rgb(249,225,5)" fg:x="938" fg:w="1"/><text x="76.2630%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="76.0130%" y="469" width="0.0810%" height="15" fill="rgb(242,55,13)" fg:x="938" fg:w="1"/><text x="76.2630%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="76.0130%" y="453" width="0.0810%" height="15" fill="rgb(230,49,50)" fg:x="938" fg:w="1"/><text x="76.2630%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="76.0130%" y="437" width="0.0810%" height="15" fill="rgb(241,111,38)" fg:x="938" fg:w="1"/><text x="76.2630%" y="447.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.0130%" y="421" width="0.0810%" height="15" fill="rgb(252,155,4)" fg:x="938" fg:w="1"/><text x="76.2630%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.0130%" y="405" width="0.0810%" height="15" fill="rgb(212,69,32)" fg:x="938" fg:w="1"/><text x="76.2630%" y="415.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="76.0130%" y="389" width="0.0810%" height="15" fill="rgb(243,107,47)" fg:x="938" fg:w="1"/><text x="76.2630%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="76.0130%" y="373" width="0.0810%" height="15" fill="rgb(247,130,12)" fg:x="938" fg:w="1"/><text x="76.2630%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="76.0130%" y="357" width="0.0810%" height="15" fill="rgb(233,74,16)" fg:x="938" fg:w="1"/><text x="76.2630%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="76.0130%" y="341" width="0.0810%" height="15" fill="rgb(208,58,18)" fg:x="938" fg:w="1"/><text x="76.2630%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="76.0130%" y="325" width="0.0810%" height="15" fill="rgb(242,225,1)" fg:x="938" fg:w="1"/><text x="76.2630%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (940 samples, 76.18%)</title><rect x="0.0000%" y="837" width="76.1750%" height="15" fill="rgb(249,39,40)" fg:x="0" fg:w="940"/><text x="0.2500%" y="847.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (940 samples, 76.18%)</title><rect x="0.0000%" y="821" width="76.1750%" height="15" fill="rgb(207,72,44)" fg:x="0" fg:w="940"/><text x="0.2500%" y="831.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (940 samples, 76.18%)</title><rect x="0.0000%" y="805" width="76.1750%" height="15" fill="rgb(215,193,12)" fg:x="0" fg:w="940"/><text x="0.2500%" y="815.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (798 samples, 64.67%)</title><rect x="11.5073%" y="789" width="64.6677%" height="15" fill="rgb(248,41,39)" fg:x="142" fg:w="798"/><text x="11.7573%" y="799.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (798 samples, 64.67%)</title><rect x="11.5073%" y="773" width="64.6677%" height="15" fill="rgb(253,85,4)" fg:x="142" fg:w="798"/><text x="11.7573%" y="783.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (797 samples, 64.59%)</title><rect x="11.5883%" y="757" width="64.5867%" height="15" fill="rgb(243,70,31)" fg:x="143" fg:w="797"/><text x="11.8383%" y="767.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>core::iter::adapters::try_process (796 samples, 64.51%)</title><rect x="11.6694%" y="741" width="64.5057%" height="15" fill="rgb(253,195,26)" fg:x="144" fg:w="796"/><text x="11.9194%" y="751.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (796 samples, 64.51%)</title><rect x="11.6694%" y="725" width="64.5057%" height="15" fill="rgb(243,42,11)" fg:x="144" fg:w="796"/><text x="11.9194%" y="735.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (796 samples, 64.51%)</title><rect x="11.6694%" y="709" width="64.5057%" height="15" fill="rgb(239,66,17)" fg:x="144" fg:w="796"/><text x="11.9194%" y="719.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="76.0940%" y="693" width="0.0810%" height="15" fill="rgb(217,132,21)" fg:x="939" fg:w="1"/><text x="76.3440%" y="703.50"></text></g><g><title>plugins_core::looking::model::new_area_observation (1 samples, 0.08%)</title><rect x="76.0940%" y="677" width="0.0810%" height="15" fill="rgb(252,202,21)" fg:x="939" fg:w="1"/><text x="76.3440%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.1750%" y="789" width="0.0810%" height="15" fill="rgb(233,98,36)" fg:x="940" fg:w="1"/><text x="76.4250%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (1 samples, 0.08%)</title><rect x="76.1750%" y="773" width="0.0810%" height="15" fill="rgb(216,153,54)" fg:x="940" fg:w="1"/><text x="76.4250%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.1750%" y="757" width="0.0810%" height="15" fill="rgb(250,99,7)" fg:x="940" fg:w="1"/><text x="76.4250%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="76.1750%" y="741" width="0.0810%" height="15" fill="rgb(207,56,50)" fg:x="940" fg:w="1"/><text x="76.4250%" y="751.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.1750%" y="725" width="0.0810%" height="15" fill="rgb(244,61,34)" fg:x="940" fg:w="1"/><text x="76.4250%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.1750%" y="709" width="0.0810%" height="15" fill="rgb(241,50,38)" fg:x="940" fg:w="1"/><text x="76.4250%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.1750%" y="693" width="0.0810%" height="15" fill="rgb(212,166,30)" fg:x="940" fg:w="1"/><text x="76.4250%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.1750%" y="677" width="0.0810%" height="15" fill="rgb(249,127,32)" fg:x="940" fg:w="1"/><text x="76.4250%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.1750%" y="661" width="0.0810%" height="15" fill="rgb(209,103,0)" fg:x="940" fg:w="1"/><text x="76.4250%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.1750%" y="645" width="0.0810%" height="15" fill="rgb(238,209,51)" fg:x="940" fg:w="1"/><text x="76.4250%" y="655.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (1 samples, 0.08%)</title><rect x="76.2561%" y="789" width="0.0810%" height="15" fill="rgb(237,56,23)" fg:x="941" fg:w="1"/><text x="76.5061%" y="799.50"></text></g><g><title>engine::session::Session::new (1 samples, 0.08%)</title><rect x="76.2561%" y="773" width="0.0810%" height="15" fill="rgb(215,153,46)" fg:x="941" fg:w="1"/><text x="76.5061%" y="783.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (1 samples, 0.08%)</title><rect x="76.2561%" y="757" width="0.0810%" height="15" fill="rgb(224,49,31)" fg:x="941" fg:w="1"/><text x="76.5061%" y="767.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="76.2561%" y="741" width="0.0810%" height="15" fill="rgb(250,18,42)" fg:x="941" fg:w="1"/><text x="76.5061%" y="751.50"></text></g><g><title>libloading::os::unix::Library::open (1 samples, 0.08%)</title><rect x="76.2561%" y="725" width="0.0810%" height="15" fill="rgb(215,176,39)" fg:x="941" fg:w="1"/><text x="76.5061%" y="735.50"></text></g><g><title>dlopen (1 samples, 0.08%)</title><rect x="76.2561%" y="709" width="0.0810%" height="15" fill="rgb(223,77,29)" fg:x="941" fg:w="1"/><text x="76.5061%" y="719.50"></text></g><g><title>_dl_catch_error (1 samples, 0.08%)</title><rect x="76.2561%" y="693" width="0.0810%" height="15" fill="rgb(234,94,52)" fg:x="941" fg:w="1"/><text x="76.5061%" y="703.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="76.2561%" y="677" width="0.0810%" height="15" fill="rgb(220,154,50)" fg:x="941" fg:w="1"/><text x="76.5061%" y="687.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="76.2561%" y="661" width="0.0810%" height="15" fill="rgb(212,11,10)" fg:x="941" fg:w="1"/><text x="76.5061%" y="671.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="76.2561%" y="645" width="0.0810%" height="15" fill="rgb(205,166,19)" fg:x="941" fg:w="1"/><text x="76.5061%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="76.3371%" y="773" width="0.0810%" height="15" fill="rgb(244,198,16)" fg:x="942" fg:w="1"/><text x="76.5871%" y="783.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.3371%" y="757" width="0.0810%" height="15" fill="rgb(219,69,12)" fg:x="942" fg:w="1"/><text x="76.5871%" y="767.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.4182%" y="677" width="0.0810%" height="15" fill="rgb(245,30,7)" fg:x="943" fg:w="1"/><text x="76.6682%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.4182%" y="661" width="0.0810%" height="15" fill="rgb(218,221,48)" fg:x="943" fg:w="1"/><text x="76.6682%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.4182%" y="645" width="0.0810%" height="15" fill="rgb(216,66,15)" fg:x="943" fg:w="1"/><text x="76.6682%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.4182%" y="629" width="0.0810%" height="15" fill="rgb(226,122,50)" fg:x="943" fg:w="1"/><text x="76.6682%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.4992%" y="661" width="0.0810%" height="15" fill="rgb(239,156,16)" fg:x="944" fg:w="1"/><text x="76.7492%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.4992%" y="645" width="0.0810%" height="15" fill="rgb(224,27,38)" fg:x="944" fg:w="1"/><text x="76.7492%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.4992%" y="629" width="0.0810%" height="15" fill="rgb(224,39,27)" fg:x="944" fg:w="1"/><text x="76.7492%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.4992%" y="613" width="0.0810%" height="15" fill="rgb(215,92,29)" fg:x="944" fg:w="1"/><text x="76.7492%" y="623.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="76.4182%" y="709" width="0.2431%" height="15" fill="rgb(207,159,16)" fg:x="943" fg:w="3"/><text x="76.6682%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="76.4182%" y="693" width="0.2431%" height="15" fill="rgb(238,163,47)" fg:x="943" fg:w="3"/><text x="76.6682%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="76.4992%" y="677" width="0.1621%" height="15" fill="rgb(219,91,49)" fg:x="944" fg:w="2"/><text x="76.7492%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5802%" y="661" width="0.0810%" height="15" fill="rgb(227,167,31)" fg:x="945" fg:w="1"/><text x="76.8302%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.5802%" y="645" width="0.0810%" height="15" fill="rgb(234,80,54)" fg:x="945" fg:w="1"/><text x="76.8302%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.5802%" y="629" width="0.0810%" height="15" fill="rgb(212,114,2)" fg:x="945" fg:w="1"/><text x="76.8302%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.5802%" y="613" width="0.0810%" height="15" fill="rgb(234,50,24)" fg:x="945" fg:w="1"/><text x="76.8302%" y="623.50"></text></g><g><title>engine::session::Session::flush (4 samples, 0.32%)</title><rect x="76.4182%" y="773" width="0.3241%" height="15" fill="rgb(221,68,8)" fg:x="943" fg:w="4"/><text x="76.6682%" y="783.50"></text></g><g><title>engine::session::Session::save_entity_changes (4 samples, 0.32%)</title><rect x="76.4182%" y="757" width="0.3241%" height="15" fill="rgb(254,180,31)" fg:x="943" fg:w="4"/><text x="76.6682%" y="767.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (4 samples, 0.32%)</title><rect x="76.4182%" y="741" width="0.3241%" height="15" fill="rgb(247,130,50)" fg:x="943" fg:w="4"/><text x="76.6682%" y="751.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (4 samples, 0.32%)</title><rect x="76.4182%" y="725" width="0.3241%" height="15" fill="rgb(211,109,4)" fg:x="943" fg:w="4"/><text x="76.6682%" y="735.50"></text></g><g><title>kernel::model::any_entity_changes (1 samples, 0.08%)</title><rect x="76.6613%" y="709" width="0.0810%" height="15" fill="rgb(238,50,21)" fg:x="946" fg:w="1"/><text x="76.9113%" y="719.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6613%" y="693" width="0.0810%" height="15" fill="rgb(225,57,45)" fg:x="946" fg:w="1"/><text x="76.9113%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.6613%" y="677" width="0.0810%" height="15" fill="rgb(209,196,50)" fg:x="946" fg:w="1"/><text x="76.9113%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.6613%" y="661" width="0.0810%" height="15" fill="rgb(242,140,13)" fg:x="946" fg:w="1"/><text x="76.9113%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="76.7423%" y="757" width="0.0810%" height="15" fill="rgb(217,111,7)" fg:x="947" fg:w="1"/><text x="76.9923%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="76.7423%" y="741" width="0.0810%" height="15" fill="rgb(253,193,51)" fg:x="947" fg:w="1"/><text x="76.9923%" y="751.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="76.7423%" y="725" width="0.0810%" height="15" fill="rgb(252,70,29)" fg:x="947" fg:w="1"/><text x="76.9923%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7423%" y="709" width="0.0810%" height="15" fill="rgb(232,127,12)" fg:x="947" fg:w="1"/><text x="76.9923%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7423%" y="693" width="0.0810%" height="15" fill="rgb(211,180,21)" fg:x="947" fg:w="1"/><text x="76.9923%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.7423%" y="677" width="0.0810%" height="15" fill="rgb(229,72,13)" fg:x="947" fg:w="1"/><text x="76.9923%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.7423%" y="661" width="0.0810%" height="15" fill="rgb(240,211,49)" fg:x="947" fg:w="1"/><text x="76.9923%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.7423%" y="645" width="0.0810%" height="15" fill="rgb(219,149,40)" fg:x="947" fg:w="1"/><text x="76.9923%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.7423%" y="629" width="0.0810%" height="15" fill="rgb(210,127,46)" fg:x="947" fg:w="1"/><text x="76.9923%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.7423%" y="613" width="0.0810%" height="15" fill="rgb(220,106,7)" fg:x="947" fg:w="1"/><text x="76.9923%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.7423%" y="597" width="0.0810%" height="15" fill="rgb(249,31,22)" fg:x="947" fg:w="1"/><text x="76.9923%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.7423%" y="581" width="0.0810%" height="15" fill="rgb(253,1,49)" fg:x="947" fg:w="1"/><text x="76.9923%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.7423%" y="565" width="0.0810%" height="15" fill="rgb(227,144,33)" fg:x="947" fg:w="1"/><text x="76.9923%" y="575.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.7423%" y="549" width="0.0810%" height="15" fill="rgb(249,163,44)" fg:x="947" fg:w="1"/><text x="76.9923%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.7423%" y="533" width="0.0810%" height="15" fill="rgb(234,15,39)" fg:x="947" fg:w="1"/><text x="76.9923%" y="543.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.16%)</title><rect x="76.7423%" y="773" width="0.1621%" height="15" fill="rgb(207,66,16)" fg:x="947" fg:w="2"/><text x="76.9923%" y="783.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="76.8233%" y="757" width="0.0810%" height="15" fill="rgb(233,112,24)" fg:x="948" fg:w="1"/><text x="77.0733%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;plugins_core::carrying::model::Location&gt;&gt; (1 samples, 0.08%)</title><rect x="76.8233%" y="741" width="0.0810%" height="15" fill="rgb(230,90,22)" fg:x="948" fg:w="1"/><text x="77.0733%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="76.8233%" y="725" width="0.0810%" height="15" fill="rgb(229,61,13)" fg:x="948" fg:w="1"/><text x="77.0733%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="76.8233%" y="709" width="0.0810%" height="15" fill="rgb(225,57,24)" fg:x="948" fg:w="1"/><text x="77.0733%" y="719.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="76.9044%" y="757" width="0.0810%" height="15" fill="rgb(208,169,48)" fg:x="949" fg:w="1"/><text x="77.1544%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.9044%" y="741" width="0.0810%" height="15" fill="rgb(244,218,51)" fg:x="949" fg:w="1"/><text x="77.1544%" y="751.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="76.9044%" y="725" width="0.0810%" height="15" fill="rgb(214,148,10)" fg:x="949" fg:w="1"/><text x="77.1544%" y="735.50"></text></g><g><title>plugins_core::build::Build::leads_to (1 samples, 0.08%)</title><rect x="76.9044%" y="709" width="0.0810%" height="15" fill="rgb(225,174,27)" fg:x="949" fg:w="1"/><text x="77.1544%" y="719.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="76.9044%" y="693" width="0.0810%" height="15" fill="rgb(230,96,26)" fg:x="949" fg:w="1"/><text x="77.1544%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="76.9044%" y="677" width="0.0810%" height="15" fill="rgb(232,10,30)" fg:x="949" fg:w="1"/><text x="77.1544%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="76.9044%" y="661" width="0.0810%" height="15" fill="rgb(222,8,50)" fg:x="949" fg:w="1"/><text x="77.1544%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="76.9044%" y="645" width="0.0810%" height="15" fill="rgb(213,81,27)" fg:x="949" fg:w="1"/><text x="77.1544%" y="655.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="76.9044%" y="629" width="0.0810%" height="15" fill="rgb(245,50,10)" fg:x="949" fg:w="1"/><text x="77.1544%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="76.9044%" y="613" width="0.0810%" height="15" fill="rgb(216,100,18)" fg:x="949" fg:w="1"/><text x="77.1544%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.9044%" y="597" width="0.0810%" height="15" fill="rgb(236,147,54)" fg:x="949" fg:w="1"/><text x="77.1544%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.9044%" y="581" width="0.0810%" height="15" fill="rgb(205,143,26)" fg:x="949" fg:w="1"/><text x="77.1544%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.9044%" y="565" width="0.0810%" height="15" fill="rgb(236,26,9)" fg:x="949" fg:w="1"/><text x="77.1544%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.9044%" y="549" width="0.0810%" height="15" fill="rgb(221,165,53)" fg:x="949" fg:w="1"/><text x="77.1544%" y="559.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.9044%" y="533" width="0.0810%" height="15" fill="rgb(214,110,17)" fg:x="949" fg:w="1"/><text x="77.1544%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.9044%" y="517" width="0.0810%" height="15" fill="rgb(237,197,12)" fg:x="949" fg:w="1"/><text x="77.1544%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.9854%" y="661" width="0.0810%" height="15" fill="rgb(205,84,17)" fg:x="950" fg:w="1"/><text x="77.2354%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.9854%" y="645" width="0.0810%" height="15" fill="rgb(237,18,45)" fg:x="950" fg:w="1"/><text x="77.2354%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.9854%" y="629" width="0.0810%" height="15" fill="rgb(221,87,14)" fg:x="950" fg:w="1"/><text x="77.2354%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.9854%" y="613" width="0.0810%" height="15" fill="rgb(238,186,15)" fg:x="950" fg:w="1"/><text x="77.2354%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.9854%" y="597" width="0.0810%" height="15" fill="rgb(208,115,11)" fg:x="950" fg:w="1"/><text x="77.2354%" y="607.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="76.9854%" y="693" width="0.1621%" height="15" fill="rgb(254,175,0)" fg:x="950" fg:w="2"/><text x="77.2354%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="76.9854%" y="677" width="0.1621%" height="15" fill="rgb(227,24,42)" fg:x="950" fg:w="2"/><text x="77.2354%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.0665%" y="661" width="0.0810%" height="15" fill="rgb(223,211,37)" fg:x="951" fg:w="1"/><text x="77.3165%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.0665%" y="645" width="0.0810%" height="15" fill="rgb(235,49,27)" fg:x="951" fg:w="1"/><text x="77.3165%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.0665%" y="629" width="0.0810%" height="15" fill="rgb(254,97,51)" fg:x="951" fg:w="1"/><text x="77.3165%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.0665%" y="613" width="0.0810%" height="15" fill="rgb(249,51,40)" fg:x="951" fg:w="1"/><text x="77.3165%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.0665%" y="597" width="0.0810%" height="15" fill="rgb(210,128,45)" fg:x="951" fg:w="1"/><text x="77.3165%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.0665%" y="581" width="0.0810%" height="15" fill="rgb(224,137,50)" fg:x="951" fg:w="1"/><text x="77.3165%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.1475%" y="613" width="0.0810%" height="15" fill="rgb(242,15,9)" fg:x="952" fg:w="1"/><text x="77.3975%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.1475%" y="693" width="0.1621%" height="15" fill="rgb(233,187,41)" fg:x="952" fg:w="2"/><text x="77.3975%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="77.1475%" y="677" width="0.1621%" height="15" fill="rgb(227,2,29)" fg:x="952" fg:w="2"/><text x="77.3975%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.1475%" y="661" width="0.1621%" height="15" fill="rgb(222,70,3)" fg:x="952" fg:w="2"/><text x="77.3975%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.1475%" y="645" width="0.1621%" height="15" fill="rgb(213,11,42)" fg:x="952" fg:w="2"/><text x="77.3975%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.1475%" y="629" width="0.1621%" height="15" fill="rgb(225,150,9)" fg:x="952" fg:w="2"/><text x="77.3975%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.2285%" y="613" width="0.0810%" height="15" fill="rgb(230,162,45)" fg:x="953" fg:w="1"/><text x="77.4785%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.2285%" y="597" width="0.0810%" height="15" fill="rgb(222,14,52)" fg:x="953" fg:w="1"/><text x="77.4785%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.3096%" y="565" width="0.0810%" height="15" fill="rgb(254,198,14)" fg:x="954" fg:w="1"/><text x="77.5596%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.3096%" y="549" width="0.0810%" height="15" fill="rgb(220,217,30)" fg:x="954" fg:w="1"/><text x="77.5596%" y="559.50"></text></g><g><title>engine::session::Session::flush (6 samples, 0.49%)</title><rect x="76.9854%" y="757" width="0.4862%" height="15" fill="rgb(215,146,41)" fg:x="950" fg:w="6"/><text x="77.2354%" y="767.50"></text></g><g><title>engine::session::Session::save_entity_changes (6 samples, 0.49%)</title><rect x="76.9854%" y="741" width="0.4862%" height="15" fill="rgb(217,27,36)" fg:x="950" fg:w="6"/><text x="77.2354%" y="751.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (6 samples, 0.49%)</title><rect x="76.9854%" y="725" width="0.4862%" height="15" fill="rgb(219,218,39)" fg:x="950" fg:w="6"/><text x="77.2354%" y="735.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (6 samples, 0.49%)</title><rect x="76.9854%" y="709" width="0.4862%" height="15" fill="rgb(219,4,42)" fg:x="950" fg:w="6"/><text x="77.2354%" y="719.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="77.3096%" y="693" width="0.1621%" height="15" fill="rgb(249,119,36)" fg:x="954" fg:w="2"/><text x="77.5596%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="77.3096%" y="677" width="0.1621%" height="15" fill="rgb(209,23,33)" fg:x="954" fg:w="2"/><text x="77.5596%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="77.3096%" y="661" width="0.1621%" height="15" fill="rgb(211,10,0)" fg:x="954" fg:w="2"/><text x="77.5596%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="77.3096%" y="645" width="0.1621%" height="15" fill="rgb(208,99,37)" fg:x="954" fg:w="2"/><text x="77.5596%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="77.3096%" y="629" width="0.1621%" height="15" fill="rgb(213,132,31)" fg:x="954" fg:w="2"/><text x="77.5596%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="77.3096%" y="613" width="0.1621%" height="15" fill="rgb(243,129,40)" fg:x="954" fg:w="2"/><text x="77.5596%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="77.3096%" y="597" width="0.1621%" height="15" fill="rgb(210,66,33)" fg:x="954" fg:w="2"/><text x="77.5596%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="77.3096%" y="581" width="0.1621%" height="15" fill="rgb(209,189,4)" fg:x="954" fg:w="2"/><text x="77.5596%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.3906%" y="565" width="0.0810%" height="15" fill="rgb(214,107,37)" fg:x="955" fg:w="1"/><text x="77.6406%" y="575.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="77.4716%" y="709" width="0.0810%" height="15" fill="rgb(245,88,54)" fg:x="956" fg:w="1"/><text x="77.7216%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="77.4716%" y="693" width="0.0810%" height="15" fill="rgb(205,146,20)" fg:x="956" fg:w="1"/><text x="77.7216%" y="703.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="77.4716%" y="677" width="0.0810%" height="15" fill="rgb(220,161,25)" fg:x="956" fg:w="1"/><text x="77.7216%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="77.4716%" y="661" width="0.0810%" height="15" fill="rgb(215,152,15)" fg:x="956" fg:w="1"/><text x="77.7216%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.4716%" y="645" width="0.0810%" height="15" fill="rgb(233,192,44)" fg:x="956" fg:w="1"/><text x="77.7216%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.4716%" y="629" width="0.0810%" height="15" fill="rgb(240,170,46)" fg:x="956" fg:w="1"/><text x="77.7216%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.4716%" y="613" width="0.0810%" height="15" fill="rgb(207,104,33)" fg:x="956" fg:w="1"/><text x="77.7216%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.4716%" y="597" width="0.0810%" height="15" fill="rgb(219,21,39)" fg:x="956" fg:w="1"/><text x="77.7216%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.4716%" y="581" width="0.0810%" height="15" fill="rgb(214,133,29)" fg:x="956" fg:w="1"/><text x="77.7216%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.4716%" y="565" width="0.0810%" height="15" fill="rgb(226,93,6)" fg:x="956" fg:w="1"/><text x="77.7216%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="77.4716%" y="741" width="0.2431%" height="15" fill="rgb(252,222,34)" fg:x="956" fg:w="3"/><text x="77.7216%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="77.4716%" y="725" width="0.2431%" height="15" fill="rgb(252,92,48)" fg:x="956" fg:w="3"/><text x="77.7216%" y="735.50"></text></g><g><title>engine::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="77.5527%" y="709" width="0.1621%" height="15" fill="rgb(245,223,24)" fg:x="957" fg:w="2"/><text x="77.8027%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="77.5527%" y="693" width="0.1621%" height="15" fill="rgb(205,176,3)" fg:x="957" fg:w="2"/><text x="77.8027%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="77.5527%" y="677" width="0.1621%" height="15" fill="rgb(235,151,15)" fg:x="957" fg:w="2"/><text x="77.8027%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="77.5527%" y="661" width="0.1621%" height="15" fill="rgb(237,209,11)" fg:x="957" fg:w="2"/><text x="77.8027%" y="671.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="77.5527%" y="645" width="0.1621%" height="15" fill="rgb(243,227,24)" fg:x="957" fg:w="2"/><text x="77.8027%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="77.7147%" y="693" width="0.1621%" height="15" fill="rgb(239,193,16)" fg:x="959" fg:w="2"/><text x="77.9647%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="77.7147%" y="677" width="0.1621%" height="15" fill="rgb(231,27,9)" fg:x="959" fg:w="2"/><text x="77.9647%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="77.7147%" y="661" width="0.1621%" height="15" fill="rgb(219,169,10)" fg:x="959" fg:w="2"/><text x="77.9647%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="77.7147%" y="645" width="0.1621%" height="15" fill="rgb(244,229,43)" fg:x="959" fg:w="2"/><text x="77.9647%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="77.7147%" y="629" width="0.1621%" height="15" fill="rgb(254,38,20)" fg:x="959" fg:w="2"/><text x="77.9647%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.7958%" y="613" width="0.0810%" height="15" fill="rgb(250,47,30)" fg:x="960" fg:w="1"/><text x="78.0458%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.7958%" y="597" width="0.0810%" height="15" fill="rgb(224,124,36)" fg:x="960" fg:w="1"/><text x="78.0458%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.7958%" y="581" width="0.0810%" height="15" fill="rgb(246,68,51)" fg:x="960" fg:w="1"/><text x="78.0458%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.7958%" y="565" width="0.0810%" height="15" fill="rgb(253,43,49)" fg:x="960" fg:w="1"/><text x="78.0458%" y="575.50"></text></g><g><title>plugins_core::build::Build::holding (6 samples, 0.49%)</title><rect x="77.4716%" y="757" width="0.4862%" height="15" fill="rgb(219,54,36)" fg:x="956" fg:w="6"/><text x="77.7216%" y="767.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="77.7147%" y="741" width="0.2431%" height="15" fill="rgb(227,133,34)" fg:x="959" fg:w="3"/><text x="77.9647%" y="751.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="77.7147%" y="725" width="0.2431%" height="15" fill="rgb(247,227,15)" fg:x="959" fg:w="3"/><text x="77.9647%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="77.7147%" y="709" width="0.2431%" height="15" fill="rgb(229,96,14)" fg:x="959" fg:w="3"/><text x="77.9647%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="77.8768%" y="693" width="0.0810%" height="15" fill="rgb(220,79,17)" fg:x="961" fg:w="1"/><text x="78.1268%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="77.8768%" y="677" width="0.0810%" height="15" fill="rgb(205,131,53)" fg:x="961" fg:w="1"/><text x="78.1268%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="77.8768%" y="661" width="0.0810%" height="15" fill="rgb(209,50,29)" fg:x="961" fg:w="1"/><text x="78.1268%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="77.8768%" y="645" width="0.0810%" height="15" fill="rgb(245,86,46)" fg:x="961" fg:w="1"/><text x="78.1268%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (14 samples, 1.13%)</title><rect x="76.9044%" y="773" width="1.1345%" height="15" fill="rgb(235,66,46)" fg:x="949" fg:w="14"/><text x="77.1544%" y="783.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="77.9579%" y="757" width="0.0810%" height="15" fill="rgb(232,148,31)" fg:x="962" fg:w="1"/><text x="78.2079%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="77.9579%" y="741" width="0.0810%" height="15" fill="rgb(217,149,8)" fg:x="962" fg:w="1"/><text x="78.2079%" y="751.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="77.9579%" y="725" width="0.0810%" height="15" fill="rgb(209,183,11)" fg:x="962" fg:w="1"/><text x="78.2079%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.9579%" y="709" width="0.0810%" height="15" fill="rgb(208,55,20)" fg:x="962" fg:w="1"/><text x="78.2079%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::Build&gt; (1 samples, 0.08%)</title><rect x="78.0389%" y="741" width="0.0810%" height="15" fill="rgb(218,39,14)" fg:x="963" fg:w="1"/><text x="78.2889%" y="751.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.0389%" y="725" width="0.0810%" height="15" fill="rgb(216,169,33)" fg:x="963" fg:w="1"/><text x="78.2889%" y="735.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (23 samples, 1.86%)</title><rect x="76.3371%" y="789" width="1.8639%" height="15" fill="rgb(233,80,24)" fg:x="942" fg:w="23"/><text x="76.5871%" y="799.50">&lt;..</text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="78.0389%" y="773" width="0.1621%" height="15" fill="rgb(213,179,31)" fg:x="963" fg:w="2"/><text x="78.2889%" y="783.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="78.0389%" y="757" width="0.1621%" height="15" fill="rgb(209,19,5)" fg:x="963" fg:w="2"/><text x="78.2889%" y="767.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="78.1199%" y="741" width="0.0810%" height="15" fill="rgb(219,18,35)" fg:x="964" fg:w="1"/><text x="78.3699%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="78.1199%" y="725" width="0.0810%" height="15" fill="rgb(209,169,16)" fg:x="964" fg:w="1"/><text x="78.3699%" y="735.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="78.1199%" y="709" width="0.0810%" height="15" fill="rgb(245,90,51)" fg:x="964" fg:w="1"/><text x="78.3699%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="78.1199%" y="693" width="0.0810%" height="15" fill="rgb(220,99,45)" fg:x="964" fg:w="1"/><text x="78.3699%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.2820%" y="693" width="0.0810%" height="15" fill="rgb(249,89,25)" fg:x="966" fg:w="1"/><text x="78.5320%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.3630%" y="677" width="0.0810%" height="15" fill="rgb(239,193,0)" fg:x="967" fg:w="1"/><text x="78.6130%" y="687.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="78.2820%" y="725" width="0.3241%" height="15" fill="rgb(231,126,1)" fg:x="966" fg:w="4"/><text x="78.5320%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="78.2820%" y="709" width="0.3241%" height="15" fill="rgb(243,166,3)" fg:x="966" fg:w="4"/><text x="78.5320%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="78.3630%" y="693" width="0.2431%" height="15" fill="rgb(223,22,34)" fg:x="967" fg:w="3"/><text x="78.6130%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="78.4441%" y="677" width="0.1621%" height="15" fill="rgb(251,52,51)" fg:x="968" fg:w="2"/><text x="78.6941%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="78.4441%" y="661" width="0.1621%" height="15" fill="rgb(221,165,28)" fg:x="968" fg:w="2"/><text x="78.6941%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.6062%" y="661" width="0.0810%" height="15" fill="rgb(218,121,47)" fg:x="970" fg:w="1"/><text x="78.8562%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="78.6062%" y="693" width="0.1621%" height="15" fill="rgb(209,120,9)" fg:x="970" fg:w="2"/><text x="78.8562%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="78.6062%" y="677" width="0.1621%" height="15" fill="rgb(236,68,12)" fg:x="970" fg:w="2"/><text x="78.8562%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.6872%" y="661" width="0.0810%" height="15" fill="rgb(225,194,26)" fg:x="971" fg:w="1"/><text x="78.9372%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.6872%" y="645" width="0.0810%" height="15" fill="rgb(231,84,39)" fg:x="971" fg:w="1"/><text x="78.9372%" y="655.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.24%)</title><rect x="78.6062%" y="709" width="0.2431%" height="15" fill="rgb(210,11,45)" fg:x="970" fg:w="3"/><text x="78.8562%" y="719.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="78.7682%" y="693" width="0.0810%" height="15" fill="rgb(224,54,52)" fg:x="972" fg:w="1"/><text x="79.0182%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="78.7682%" y="677" width="0.0810%" height="15" fill="rgb(238,102,14)" fg:x="972" fg:w="1"/><text x="79.0182%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="78.7682%" y="661" width="0.0810%" height="15" fill="rgb(243,160,52)" fg:x="972" fg:w="1"/><text x="79.0182%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.8493%" y="677" width="0.0810%" height="15" fill="rgb(216,114,19)" fg:x="973" fg:w="1"/><text x="79.0993%" y="687.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.8493%" y="661" width="0.0810%" height="15" fill="rgb(244,166,37)" fg:x="973" fg:w="1"/><text x="79.0993%" y="671.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="78.8493%" y="645" width="0.0810%" height="15" fill="rgb(246,29,44)" fg:x="973" fg:w="1"/><text x="79.0993%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.0113%" y="629" width="0.0810%" height="15" fill="rgb(215,56,53)" fg:x="975" fg:w="1"/><text x="79.2613%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="78.8493%" y="709" width="0.3241%" height="15" fill="rgb(217,60,2)" fg:x="973" fg:w="4"/><text x="79.0993%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="78.8493%" y="693" width="0.3241%" height="15" fill="rgb(207,26,24)" fg:x="973" fg:w="4"/><text x="79.0993%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="78.9303%" y="677" width="0.2431%" height="15" fill="rgb(252,210,15)" fg:x="974" fg:w="3"/><text x="79.1803%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="79.0113%" y="661" width="0.1621%" height="15" fill="rgb(253,209,26)" fg:x="975" fg:w="2"/><text x="79.2613%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="79.0113%" y="645" width="0.1621%" height="15" fill="rgb(238,170,14)" fg:x="975" fg:w="2"/><text x="79.2613%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.0924%" y="629" width="0.0810%" height="15" fill="rgb(216,178,15)" fg:x="976" fg:w="1"/><text x="79.3424%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.0924%" y="613" width="0.0810%" height="15" fill="rgb(250,197,2)" fg:x="976" fg:w="1"/><text x="79.3424%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.0924%" y="597" width="0.0810%" height="15" fill="rgb(212,70,42)" fg:x="976" fg:w="1"/><text x="79.3424%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.0924%" y="581" width="0.0810%" height="15" fill="rgb(227,213,9)" fg:x="976" fg:w="1"/><text x="79.3424%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.0924%" y="565" width="0.0810%" height="15" fill="rgb(245,99,25)" fg:x="976" fg:w="1"/><text x="79.3424%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.0924%" y="549" width="0.0810%" height="15" fill="rgb(250,82,29)" fg:x="976" fg:w="1"/><text x="79.3424%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.0924%" y="533" width="0.0810%" height="15" fill="rgb(241,226,54)" fg:x="976" fg:w="1"/><text x="79.3424%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.0924%" y="517" width="0.0810%" height="15" fill="rgb(221,99,41)" fg:x="976" fg:w="1"/><text x="79.3424%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="79.1734%" y="613" width="0.0810%" height="15" fill="rgb(213,90,21)" fg:x="977" fg:w="1"/><text x="79.4234%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.1734%" y="597" width="0.0810%" height="15" fill="rgb(205,208,24)" fg:x="977" fg:w="1"/><text x="79.4234%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="79.1734%" y="645" width="0.1621%" height="15" fill="rgb(246,31,12)" fg:x="977" fg:w="2"/><text x="79.4234%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="79.1734%" y="629" width="0.1621%" height="15" fill="rgb(213,154,6)" fg:x="977" fg:w="2"/><text x="79.4234%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.2545%" y="613" width="0.0810%" height="15" fill="rgb(222,163,29)" fg:x="978" fg:w="1"/><text x="79.5045%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.2545%" y="597" width="0.0810%" height="15" fill="rgb(227,201,8)" fg:x="978" fg:w="1"/><text x="79.5045%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.2545%" y="581" width="0.0810%" height="15" fill="rgb(233,9,32)" fg:x="978" fg:w="1"/><text x="79.5045%" y="591.50"></text></g><g><title>engine::session::Session::close (15 samples, 1.22%)</title><rect x="78.2010%" y="789" width="1.2156%" height="15" fill="rgb(217,54,24)" fg:x="965" fg:w="15"/><text x="78.4510%" y="799.50"></text></g><g><title>engine::session::Session::save_entity_changes (15 samples, 1.22%)</title><rect x="78.2010%" y="773" width="1.2156%" height="15" fill="rgb(235,192,0)" fg:x="965" fg:w="15"/><text x="78.4510%" y="783.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (14 samples, 1.13%)</title><rect x="78.2820%" y="757" width="1.1345%" height="15" fill="rgb(235,45,9)" fg:x="966" fg:w="14"/><text x="78.5320%" y="767.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (14 samples, 1.13%)</title><rect x="78.2820%" y="741" width="1.1345%" height="15" fill="rgb(246,42,40)" fg:x="966" fg:w="14"/><text x="78.5320%" y="751.50"></text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.81%)</title><rect x="78.6062%" y="725" width="0.8104%" height="15" fill="rgb(248,111,24)" fg:x="970" fg:w="10"/><text x="78.8562%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="79.1734%" y="709" width="0.2431%" height="15" fill="rgb(249,65,22)" fg:x="977" fg:w="3"/><text x="79.4234%" y="719.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="79.1734%" y="693" width="0.2431%" height="15" fill="rgb(238,111,51)" fg:x="977" fg:w="3"/><text x="79.4234%" y="703.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="79.1734%" y="677" width="0.2431%" height="15" fill="rgb(250,118,22)" fg:x="977" fg:w="3"/><text x="79.4234%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="79.1734%" y="661" width="0.2431%" height="15" fill="rgb(234,84,26)" fg:x="977" fg:w="3"/><text x="79.4234%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.3355%" y="645" width="0.0810%" height="15" fill="rgb(243,172,12)" fg:x="979" fg:w="1"/><text x="79.5855%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.4165%" y="741" width="0.0810%" height="15" fill="rgb(236,150,49)" fg:x="980" fg:w="1"/><text x="79.6665%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="79.4165%" y="725" width="0.0810%" height="15" fill="rgb(225,197,26)" fg:x="980" fg:w="1"/><text x="79.6665%" y="735.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="79.4976%" y="693" width="0.0810%" height="15" fill="rgb(214,17,42)" fg:x="981" fg:w="1"/><text x="79.7476%" y="703.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="79.4976%" y="677" width="0.0810%" height="15" fill="rgb(224,165,40)" fg:x="981" fg:w="1"/><text x="79.7476%" y="687.50"></text></g><g><title>&lt;plugins_core::carrying::parser::DropActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="79.4976%" y="661" width="0.0810%" height="15" fill="rgb(246,100,4)" fg:x="981" fg:w="1"/><text x="79.7476%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="79.6596%" y="549" width="0.0810%" height="15" fill="rgb(222,103,0)" fg:x="983" fg:w="1"/><text x="79.9096%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.6596%" y="533" width="0.0810%" height="15" fill="rgb(227,189,26)" fg:x="983" fg:w="1"/><text x="79.9096%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="79.6596%" y="517" width="0.0810%" height="15" fill="rgb(214,202,17)" fg:x="983" fg:w="1"/><text x="79.9096%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.6596%" y="501" width="0.0810%" height="15" fill="rgb(229,111,3)" fg:x="983" fg:w="1"/><text x="79.9096%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.6596%" y="485" width="0.0810%" height="15" fill="rgb(229,172,15)" fg:x="983" fg:w="1"/><text x="79.9096%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.6596%" y="469" width="0.0810%" height="15" fill="rgb(230,224,35)" fg:x="983" fg:w="1"/><text x="79.9096%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.6596%" y="453" width="0.0810%" height="15" fill="rgb(251,141,6)" fg:x="983" fg:w="1"/><text x="79.9096%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="79.5786%" y="597" width="0.2431%" height="15" fill="rgb(225,208,6)" fg:x="982" fg:w="3"/><text x="79.8286%" y="607.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="79.6596%" y="581" width="0.1621%" height="15" fill="rgb(246,181,16)" fg:x="983" fg:w="2"/><text x="79.9096%" y="591.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="79.6596%" y="565" width="0.1621%" height="15" fill="rgb(227,129,36)" fg:x="983" fg:w="2"/><text x="79.9096%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.7407%" y="549" width="0.0810%" height="15" fill="rgb(248,117,24)" fg:x="984" fg:w="1"/><text x="79.9907%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.7407%" y="533" width="0.0810%" height="15" fill="rgb(214,185,35)" fg:x="984" fg:w="1"/><text x="79.9907%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.7407%" y="517" width="0.0810%" height="15" fill="rgb(236,150,34)" fg:x="984" fg:w="1"/><text x="79.9907%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.7407%" y="501" width="0.0810%" height="15" fill="rgb(243,228,27)" fg:x="984" fg:w="1"/><text x="79.9907%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.7407%" y="485" width="0.0810%" height="15" fill="rgb(245,77,44)" fg:x="984" fg:w="1"/><text x="79.9907%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.7407%" y="469" width="0.0810%" height="15" fill="rgb(235,214,42)" fg:x="984" fg:w="1"/><text x="79.9907%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.7407%" y="453" width="0.0810%" height="15" fill="rgb(221,74,3)" fg:x="984" fg:w="1"/><text x="79.9907%" y="463.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="79.9028%" y="453" width="0.0810%" height="15" fill="rgb(206,121,29)" fg:x="986" fg:w="1"/><text x="80.1528%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="79.9838%" y="437" width="0.0810%" height="15" fill="rgb(249,131,53)" fg:x="987" fg:w="1"/><text x="80.2338%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="79.9838%" y="421" width="0.0810%" height="15" fill="rgb(236,170,29)" fg:x="987" fg:w="1"/><text x="80.2338%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="79.9028%" y="517" width="0.2431%" height="15" fill="rgb(247,96,15)" fg:x="986" fg:w="3"/><text x="80.1528%" y="527.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="79.9028%" y="501" width="0.2431%" height="15" fill="rgb(211,210,7)" fg:x="986" fg:w="3"/><text x="80.1528%" y="511.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="79.9028%" y="485" width="0.2431%" height="15" fill="rgb(240,88,50)" fg:x="986" fg:w="3"/><text x="80.1528%" y="495.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (3 samples, 0.24%)</title><rect x="79.9028%" y="469" width="0.2431%" height="15" fill="rgb(209,229,26)" fg:x="986" fg:w="3"/><text x="80.1528%" y="479.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="79.9838%" y="453" width="0.1621%" height="15" fill="rgb(210,68,23)" fg:x="987" fg:w="2"/><text x="80.2338%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="80.0648%" y="437" width="0.0810%" height="15" fill="rgb(229,180,13)" fg:x="988" fg:w="1"/><text x="80.3148%" y="447.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="80.0648%" y="421" width="0.0810%" height="15" fill="rgb(236,53,44)" fg:x="988" fg:w="1"/><text x="80.3148%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.1459%" y="485" width="0.0810%" height="15" fill="rgb(244,214,29)" fg:x="989" fg:w="1"/><text x="80.3959%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.2269%" y="469" width="0.0810%" height="15" fill="rgb(220,75,29)" fg:x="990" fg:w="1"/><text x="80.4769%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.2269%" y="453" width="0.0810%" height="15" fill="rgb(214,183,37)" fg:x="990" fg:w="1"/><text x="80.4769%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.3890%" y="437" width="0.0810%" height="15" fill="rgb(239,117,29)" fg:x="992" fg:w="1"/><text x="80.6390%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.97%)</title><rect x="80.3890%" y="453" width="0.9724%" height="15" fill="rgb(237,171,35)" fg:x="992" fg:w="12"/><text x="80.6390%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.89%)</title><rect x="80.4700%" y="437" width="0.8914%" height="15" fill="rgb(229,178,53)" fg:x="993" fg:w="11"/><text x="80.7200%" y="447.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="81.3614%" y="453" width="0.3241%" height="15" fill="rgb(210,102,19)" fg:x="1004" fg:w="4"/><text x="81.6114%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="81.3614%" y="437" width="0.3241%" height="15" fill="rgb(235,127,22)" fg:x="1004" fg:w="4"/><text x="81.6114%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="81.6856%" y="405" width="0.0810%" height="15" fill="rgb(244,31,31)" fg:x="1008" fg:w="1"/><text x="81.9356%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.0097%" y="389" width="0.0810%" height="15" fill="rgb(231,43,21)" fg:x="1012" fg:w="1"/><text x="82.2597%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.1718%" y="357" width="0.0810%" height="15" fill="rgb(217,131,35)" fg:x="1014" fg:w="1"/><text x="82.4218%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.1718%" y="341" width="0.0810%" height="15" fill="rgb(221,149,4)" fg:x="1014" fg:w="1"/><text x="82.4218%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.1718%" y="325" width="0.0810%" height="15" fill="rgb(232,170,28)" fg:x="1014" fg:w="1"/><text x="82.4218%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="82.0908%" y="389" width="0.2431%" height="15" fill="rgb(238,56,10)" fg:x="1013" fg:w="3"/><text x="82.3408%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="82.0908%" y="373" width="0.2431%" height="15" fill="rgb(235,196,14)" fg:x="1013" fg:w="3"/><text x="82.3408%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="82.2528%" y="357" width="0.0810%" height="15" fill="rgb(216,45,48)" fg:x="1015" fg:w="1"/><text x="82.5028%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.3339%" y="357" width="0.0810%" height="15" fill="rgb(238,213,17)" fg:x="1016" fg:w="1"/><text x="82.5839%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (45 samples, 3.65%)</title><rect x="82.3339%" y="389" width="3.6467%" height="15" fill="rgb(212,13,2)" fg:x="1016" fg:w="45"/><text x="82.5839%" y="399.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (45 samples, 3.65%)</title><rect x="82.3339%" y="373" width="3.6467%" height="15" fill="rgb(240,114,20)" fg:x="1016" fg:w="45"/><text x="82.5839%" y="383.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (44 samples, 3.57%)</title><rect x="82.4149%" y="357" width="3.5656%" height="15" fill="rgb(228,41,40)" fg:x="1017" fg:w="44"/><text x="82.6649%" y="367.50">allo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (55 samples, 4.46%)</title><rect x="81.6856%" y="437" width="4.4571%" height="15" fill="rgb(244,132,35)" fg:x="1008" fg:w="55"/><text x="81.9356%" y="447.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (55 samples, 4.46%)</title><rect x="81.6856%" y="421" width="4.4571%" height="15" fill="rgb(253,189,4)" fg:x="1008" fg:w="55"/><text x="81.9356%" y="431.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (54 samples, 4.38%)</title><rect x="81.7666%" y="405" width="4.3760%" height="15" fill="rgb(224,37,19)" fg:x="1009" fg:w="54"/><text x="82.0166%" y="415.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="85.9806%" y="389" width="0.1621%" height="15" fill="rgb(235,223,18)" fg:x="1061" fg:w="2"/><text x="86.2306%" y="399.50"></text></g><g><title>regex_automata::meta::strategy::new (75 samples, 6.08%)</title><rect x="80.3079%" y="469" width="6.0778%" height="15" fill="rgb(235,163,25)" fg:x="991" fg:w="75"/><text x="80.5579%" y="479.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (58 samples, 4.70%)</title><rect x="81.6856%" y="453" width="4.7002%" height="15" fill="rgb(217,145,28)" fg:x="1008" fg:w="58"/><text x="81.9356%" y="463.50">regex..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="86.1426%" y="437" width="0.2431%" height="15" fill="rgb(223,223,32)" fg:x="1063" fg:w="3"/><text x="86.3926%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="86.1426%" y="421" width="0.2431%" height="15" fill="rgb(227,189,39)" fg:x="1063" fg:w="3"/><text x="86.3926%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="86.3857%" y="469" width="0.0810%" height="15" fill="rgb(248,10,22)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="86.3857%" y="453" width="0.0810%" height="15" fill="rgb(248,46,39)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="86.3857%" y="437" width="0.0810%" height="15" fill="rgb(248,113,48)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="86.3857%" y="421" width="0.0810%" height="15" fill="rgb(245,16,25)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.3857%" y="405" width="0.0810%" height="15" fill="rgb(249,152,16)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.3857%" y="389" width="0.0810%" height="15" fill="rgb(250,16,1)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.3857%" y="373" width="0.0810%" height="15" fill="rgb(249,138,3)" fg:x="1066" fg:w="1"/><text x="86.6357%" y="383.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (79 samples, 6.40%)</title><rect x="80.1459%" y="517" width="6.4019%" height="15" fill="rgb(227,71,41)" fg:x="989" fg:w="79"/><text x="80.3959%" y="527.50">&lt;regex::..</text></g><g><title>regex::builders::Builder::build_one_string (79 samples, 6.40%)</title><rect x="80.1459%" y="501" width="6.4019%" height="15" fill="rgb(209,184,23)" fg:x="989" fg:w="79"/><text x="80.3959%" y="511.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (78 samples, 6.32%)</title><rect x="80.2269%" y="485" width="6.3209%" height="15" fill="rgb(223,215,31)" fg:x="990" fg:w="78"/><text x="80.4769%" y="495.50">regex_au..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="86.4668%" y="469" width="0.0810%" height="15" fill="rgb(210,146,28)" fg:x="1067" fg:w="1"/><text x="86.7168%" y="479.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="86.4668%" y="453" width="0.0810%" height="15" fill="rgb(209,183,41)" fg:x="1067" fg:w="1"/><text x="86.7168%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="86.4668%" y="437" width="0.0810%" height="15" fill="rgb(209,224,45)" fg:x="1067" fg:w="1"/><text x="86.7168%" y="447.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="86.4668%" y="421" width="0.0810%" height="15" fill="rgb(224,209,51)" fg:x="1067" fg:w="1"/><text x="86.7168%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.5478%" y="485" width="0.0810%" height="15" fill="rgb(223,17,39)" fg:x="1068" fg:w="1"/><text x="86.7978%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.5478%" y="469" width="0.0810%" height="15" fill="rgb(234,204,37)" fg:x="1068" fg:w="1"/><text x="86.7978%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="86.5478%" y="517" width="0.1621%" height="15" fill="rgb(236,120,5)" fg:x="1068" fg:w="2"/><text x="86.7978%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="86.5478%" y="501" width="0.1621%" height="15" fill="rgb(248,97,27)" fg:x="1068" fg:w="2"/><text x="86.7978%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="86.6288%" y="485" width="0.0810%" height="15" fill="rgb(240,66,17)" fg:x="1069" fg:w="1"/><text x="86.8788%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.6288%" y="469" width="0.0810%" height="15" fill="rgb(210,79,3)" fg:x="1069" fg:w="1"/><text x="86.8788%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="86.7909%" y="469" width="0.2431%" height="15" fill="rgb(214,176,27)" fg:x="1071" fg:w="3"/><text x="87.0409%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="86.7909%" y="453" width="0.2431%" height="15" fill="rgb(235,185,3)" fg:x="1071" fg:w="3"/><text x="87.0409%" y="463.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (90 samples, 7.29%)</title><rect x="79.8217%" y="533" width="7.2934%" height="15" fill="rgb(227,24,12)" fg:x="985" fg:w="90"/><text x="80.0717%" y="543.50">indefinite..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.41%)</title><rect x="86.7099%" y="517" width="0.4052%" height="15" fill="rgb(252,169,48)" fg:x="1070" fg:w="5"/><text x="86.9599%" y="527.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.41%)</title><rect x="86.7099%" y="501" width="0.4052%" height="15" fill="rgb(212,65,1)" fg:x="1070" fg:w="5"/><text x="86.9599%" y="511.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="86.7909%" y="485" width="0.3241%" height="15" fill="rgb(242,39,24)" fg:x="1071" fg:w="4"/><text x="87.0409%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="87.0340%" y="469" width="0.0810%" height="15" fill="rgb(249,32,23)" fg:x="1074" fg:w="1"/><text x="87.2840%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="87.0340%" y="453" width="0.0810%" height="15" fill="rgb(251,195,23)" fg:x="1074" fg:w="1"/><text x="87.2840%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="87.1151%" y="501" width="0.0810%" height="15" fill="rgb(236,174,8)" fg:x="1075" fg:w="1"/><text x="87.3651%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="87.1151%" y="485" width="0.0810%" height="15" fill="rgb(220,197,8)" fg:x="1075" fg:w="1"/><text x="87.3651%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="87.1961%" y="469" width="0.0810%" height="15" fill="rgb(240,108,37)" fg:x="1076" fg:w="1"/><text x="87.4461%" y="479.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.1961%" y="453" width="0.0810%" height="15" fill="rgb(232,176,24)" fg:x="1076" fg:w="1"/><text x="87.4461%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.2771%" y="437" width="0.0810%" height="15" fill="rgb(243,35,29)" fg:x="1077" fg:w="1"/><text x="87.5271%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.81%)</title><rect x="87.2771%" y="453" width="0.8104%" height="15" fill="rgb(210,37,18)" fg:x="1077" fg:w="10"/><text x="87.5271%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.73%)</title><rect x="87.3582%" y="437" width="0.7293%" height="15" fill="rgb(224,184,40)" fg:x="1078" fg:w="9"/><text x="87.6082%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.0065%" y="421" width="0.0810%" height="15" fill="rgb(236,39,29)" fg:x="1086" fg:w="1"/><text x="88.2565%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="88.1686%" y="437" width="0.0810%" height="15" fill="rgb(232,48,39)" fg:x="1088" fg:w="1"/><text x="88.4186%" y="447.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="88.0875%" y="453" width="0.2431%" height="15" fill="rgb(236,34,42)" fg:x="1087" fg:w="3"/><text x="88.3375%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="88.2496%" y="437" width="0.0810%" height="15" fill="rgb(243,106,37)" fg:x="1089" fg:w="1"/><text x="88.4996%" y="447.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="88.3306%" y="421" width="0.1621%" height="15" fill="rgb(218,96,6)" fg:x="1090" fg:w="2"/><text x="88.5806%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="88.3306%" y="405" width="0.1621%" height="15" fill="rgb(235,130,12)" fg:x="1090" fg:w="2"/><text x="88.5806%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="88.3306%" y="389" width="0.1621%" height="15" fill="rgb(231,95,0)" fg:x="1090" fg:w="2"/><text x="88.5806%" y="399.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="88.3306%" y="373" width="0.1621%" height="15" fill="rgb(228,12,23)" fg:x="1090" fg:w="2"/><text x="88.5806%" y="383.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="88.4927%" y="421" width="0.2431%" height="15" fill="rgb(216,12,1)" fg:x="1092" fg:w="3"/><text x="88.7427%" y="431.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="88.7358%" y="405" width="0.0810%" height="15" fill="rgb(219,59,3)" fg:x="1095" fg:w="1"/><text x="88.9858%" y="415.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="88.7358%" y="389" width="0.0810%" height="15" fill="rgb(215,208,46)" fg:x="1095" fg:w="1"/><text x="88.9858%" y="399.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (7 samples, 0.57%)</title><rect x="88.3306%" y="453" width="0.5673%" height="15" fill="rgb(254,224,29)" fg:x="1090" fg:w="7"/><text x="88.5806%" y="463.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (7 samples, 0.57%)</title><rect x="88.3306%" y="437" width="0.5673%" height="15" fill="rgb(232,14,29)" fg:x="1090" fg:w="7"/><text x="88.5806%" y="447.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="88.7358%" y="421" width="0.1621%" height="15" fill="rgb(208,45,52)" fg:x="1095" fg:w="2"/><text x="88.9858%" y="431.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="88.8169%" y="405" width="0.0810%" height="15" fill="rgb(234,191,28)" fg:x="1096" fg:w="1"/><text x="89.0669%" y="415.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="89.2220%" y="341" width="0.1621%" height="15" fill="rgb(244,67,43)" fg:x="1101" fg:w="2"/><text x="89.4720%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="89.3841%" y="341" width="0.2431%" height="15" fill="rgb(236,189,24)" fg:x="1103" fg:w="3"/><text x="89.6341%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="89.3841%" y="325" width="0.2431%" height="15" fill="rgb(239,214,33)" fg:x="1103" fg:w="3"/><text x="89.6341%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="89.3841%" y="309" width="0.2431%" height="15" fill="rgb(226,176,41)" fg:x="1103" fg:w="3"/><text x="89.6341%" y="319.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="89.3841%" y="293" width="0.2431%" height="15" fill="rgb(248,47,8)" fg:x="1103" fg:w="3"/><text x="89.6341%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="89.6272%" y="309" width="0.2431%" height="15" fill="rgb(218,81,44)" fg:x="1106" fg:w="3"/><text x="89.8772%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="89.6272%" y="293" width="0.2431%" height="15" fill="rgb(213,98,6)" fg:x="1106" fg:w="3"/><text x="89.8772%" y="303.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="89.6272%" y="277" width="0.2431%" height="15" fill="rgb(222,85,22)" fg:x="1106" fg:w="3"/><text x="89.8772%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.9514%" y="293" width="0.0810%" height="15" fill="rgb(239,46,39)" fg:x="1110" fg:w="1"/><text x="90.2014%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.49%)</title><rect x="89.6272%" y="341" width="0.4862%" height="15" fill="rgb(237,12,29)" fg:x="1106" fg:w="6"/><text x="89.8772%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.49%)</title><rect x="89.6272%" y="325" width="0.4862%" height="15" fill="rgb(214,77,8)" fg:x="1106" fg:w="6"/><text x="89.8772%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="89.8703%" y="309" width="0.2431%" height="15" fill="rgb(217,168,37)" fg:x="1109" fg:w="3"/><text x="90.1203%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="90.0324%" y="293" width="0.0810%" height="15" fill="rgb(221,217,23)" fg:x="1111" fg:w="1"/><text x="90.2824%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.0324%" y="277" width="0.0810%" height="15" fill="rgb(243,229,36)" fg:x="1111" fg:w="1"/><text x="90.2824%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.0324%" y="261" width="0.0810%" height="15" fill="rgb(251,163,40)" fg:x="1111" fg:w="1"/><text x="90.2824%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.0324%" y="245" width="0.0810%" height="15" fill="rgb(237,222,12)" fg:x="1111" fg:w="1"/><text x="90.2824%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (44 samples, 3.57%)</title><rect x="90.1135%" y="341" width="3.5656%" height="15" fill="rgb(248,132,6)" fg:x="1112" fg:w="44"/><text x="90.3635%" y="351.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (44 samples, 3.57%)</title><rect x="90.1135%" y="325" width="3.5656%" height="15" fill="rgb(227,167,50)" fg:x="1112" fg:w="44"/><text x="90.3635%" y="335.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (44 samples, 3.57%)</title><rect x="90.1135%" y="309" width="3.5656%" height="15" fill="rgb(242,84,37)" fg:x="1112" fg:w="44"/><text x="90.3635%" y="319.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="93.6791%" y="341" width="0.2431%" height="15" fill="rgb(212,4,50)" fg:x="1156" fg:w="3"/><text x="93.9291%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.8412%" y="325" width="0.0810%" height="15" fill="rgb(230,228,32)" fg:x="1158" fg:w="1"/><text x="94.0912%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 5.27%)</title><rect x="88.8979%" y="437" width="5.2674%" height="15" fill="rgb(248,217,23)" fg:x="1097" fg:w="65"/><text x="89.1479%" y="447.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (64 samples, 5.19%)</title><rect x="88.9789%" y="421" width="5.1864%" height="15" fill="rgb(238,197,32)" fg:x="1098" fg:w="64"/><text x="89.2289%" y="431.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (64 samples, 5.19%)</title><rect x="88.9789%" y="405" width="5.1864%" height="15" fill="rgb(236,106,1)" fg:x="1098" fg:w="64"/><text x="89.2289%" y="415.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (64 samples, 5.19%)</title><rect x="88.9789%" y="389" width="5.1864%" height="15" fill="rgb(219,228,13)" fg:x="1098" fg:w="64"/><text x="89.2289%" y="399.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (64 samples, 5.19%)</title><rect x="88.9789%" y="373" width="5.1864%" height="15" fill="rgb(238,30,35)" fg:x="1098" fg:w="64"/><text x="89.2289%" y="383.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (64 samples, 5.19%)</title><rect x="88.9789%" y="357" width="5.1864%" height="15" fill="rgb(236,70,23)" fg:x="1098" fg:w="64"/><text x="89.2289%" y="367.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="93.9222%" y="341" width="0.2431%" height="15" fill="rgb(249,104,48)" fg:x="1159" fg:w="3"/><text x="94.1722%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="93.9222%" y="325" width="0.2431%" height="15" fill="rgb(254,117,50)" fg:x="1159" fg:w="3"/><text x="94.1722%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.0032%" y="309" width="0.1621%" height="15" fill="rgb(223,152,4)" fg:x="1160" fg:w="2"/><text x="94.2532%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="94.0032%" y="293" width="0.1621%" height="15" fill="rgb(245,6,2)" fg:x="1160" fg:w="2"/><text x="94.2532%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.41%)</title><rect x="94.2464%" y="421" width="0.4052%" height="15" fill="rgb(249,150,24)" fg:x="1163" fg:w="5"/><text x="94.4964%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.5705%" y="405" width="0.0810%" height="15" fill="rgb(228,185,42)" fg:x="1167" fg:w="1"/><text x="94.8205%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.5705%" y="389" width="0.0810%" height="15" fill="rgb(226,39,33)" fg:x="1167" fg:w="1"/><text x="94.8205%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.5705%" y="373" width="0.0810%" height="15" fill="rgb(221,166,19)" fg:x="1167" fg:w="1"/><text x="94.8205%" y="383.50"></text></g><g><title>regex_automata::meta::strategy::new (93 samples, 7.54%)</title><rect x="87.2771%" y="469" width="7.5365%" height="15" fill="rgb(209,109,2)" fg:x="1077" fg:w="93"/><text x="87.5271%" y="479.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (73 samples, 5.92%)</title><rect x="88.8979%" y="453" width="5.9157%" height="15" fill="rgb(252,216,26)" fg:x="1097" fg:w="73"/><text x="89.1479%" y="463.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.65%)</title><rect x="94.1653%" y="437" width="0.6483%" height="15" fill="rgb(227,173,36)" fg:x="1162" fg:w="8"/><text x="94.4153%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="94.6515%" y="421" width="0.1621%" height="15" fill="rgb(209,90,7)" fg:x="1168" fg:w="2"/><text x="94.9015%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.7326%" y="405" width="0.0810%" height="15" fill="rgb(250,194,11)" fg:x="1169" fg:w="1"/><text x="94.9826%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.7326%" y="389" width="0.0810%" height="15" fill="rgb(220,72,50)" fg:x="1169" fg:w="1"/><text x="94.9826%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.7326%" y="373" width="0.0810%" height="15" fill="rgb(222,106,48)" fg:x="1169" fg:w="1"/><text x="94.9826%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.8136%" y="437" width="0.0810%" height="15" fill="rgb(216,220,45)" fg:x="1170" fg:w="1"/><text x="95.0636%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.8136%" y="421" width="0.0810%" height="15" fill="rgb(234,112,18)" fg:x="1170" fg:w="1"/><text x="95.0636%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.8136%" y="405" width="0.0810%" height="15" fill="rgb(206,179,9)" fg:x="1170" fg:w="1"/><text x="95.0636%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="94.8947%" y="437" width="0.1621%" height="15" fill="rgb(215,115,40)" fg:x="1171" fg:w="2"/><text x="95.1447%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="94.8947%" y="421" width="0.1621%" height="15" fill="rgb(222,69,34)" fg:x="1171" fg:w="2"/><text x="95.1447%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="94.9757%" y="405" width="0.0810%" height="15" fill="rgb(209,161,10)" fg:x="1172" fg:w="1"/><text x="95.2257%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="94.8136%" y="469" width="0.3241%" height="15" fill="rgb(217,6,38)" fg:x="1170" fg:w="4"/><text x="95.0636%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="94.8136%" y="453" width="0.3241%" height="15" fill="rgb(229,229,48)" fg:x="1170" fg:w="4"/><text x="95.0636%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="95.0567%" y="437" width="0.0810%" height="15" fill="rgb(225,21,28)" fg:x="1173" fg:w="1"/><text x="95.3067%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.0567%" y="421" width="0.0810%" height="15" fill="rgb(206,33,13)" fg:x="1173" fg:w="1"/><text x="95.3067%" y="431.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (100 samples, 8.10%)</title><rect x="87.1151%" y="517" width="8.1037%" height="15" fill="rgb(242,178,17)" fg:x="1075" fg:w="100"/><text x="87.3651%" y="527.50">&lt;regex::reg..</text></g><g><title>regex::builders::Builder::build_one_string (99 samples, 8.02%)</title><rect x="87.1961%" y="501" width="8.0227%" height="15" fill="rgb(220,162,5)" fg:x="1076" fg:w="99"/><text x="87.4461%" y="511.50">regex::buil..</text></g><g><title>regex_automata::meta::regex::Builder::build (99 samples, 8.02%)</title><rect x="87.1961%" y="485" width="8.0227%" height="15" fill="rgb(210,33,43)" fg:x="1076" fg:w="99"/><text x="87.4461%" y="495.50">regex_autom..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="95.1378%" y="469" width="0.0810%" height="15" fill="rgb(216,116,54)" fg:x="1174" fg:w="1"/><text x="95.3878%" y="479.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.1378%" y="453" width="0.0810%" height="15" fill="rgb(249,92,24)" fg:x="1174" fg:w="1"/><text x="95.3878%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="95.1378%" y="437" width="0.0810%" height="15" fill="rgb(231,189,14)" fg:x="1174" fg:w="1"/><text x="95.3878%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.2188%" y="485" width="0.0810%" height="15" fill="rgb(230,8,41)" fg:x="1175" fg:w="1"/><text x="95.4688%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.2998%" y="485" width="0.0810%" height="15" fill="rgb(249,7,27)" fg:x="1176" fg:w="1"/><text x="95.5498%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.2998%" y="469" width="0.0810%" height="15" fill="rgb(232,86,5)" fg:x="1176" fg:w="1"/><text x="95.5498%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.2998%" y="453" width="0.0810%" height="15" fill="rgb(224,175,18)" fg:x="1176" fg:w="1"/><text x="95.5498%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="95.2188%" y="517" width="0.2431%" height="15" fill="rgb(220,129,12)" fg:x="1175" fg:w="3"/><text x="95.4688%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="95.2188%" y="501" width="0.2431%" height="15" fill="rgb(210,19,36)" fg:x="1175" fg:w="3"/><text x="95.4688%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="95.3809%" y="485" width="0.0810%" height="15" fill="rgb(219,96,14)" fg:x="1177" fg:w="1"/><text x="95.6309%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="95.3809%" y="469" width="0.0810%" height="15" fill="rgb(249,106,1)" fg:x="1177" fg:w="1"/><text x="95.6309%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.3809%" y="453" width="0.0810%" height="15" fill="rgb(249,155,20)" fg:x="1177" fg:w="1"/><text x="95.6309%" y="463.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="95.4619%" y="501" width="0.0810%" height="15" fill="rgb(244,168,9)" fg:x="1178" fg:w="1"/><text x="95.7119%" y="511.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="95.4619%" y="485" width="0.0810%" height="15" fill="rgb(216,23,50)" fg:x="1178" fg:w="1"/><text x="95.7119%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="95.4619%" y="469" width="0.0810%" height="15" fill="rgb(224,219,20)" fg:x="1178" fg:w="1"/><text x="95.7119%" y="479.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="95.4619%" y="453" width="0.0810%" height="15" fill="rgb(222,156,15)" fg:x="1178" fg:w="1"/><text x="95.7119%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="95.5429%" y="453" width="0.1621%" height="15" fill="rgb(231,97,17)" fg:x="1179" fg:w="2"/><text x="95.7929%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.7861%" y="421" width="0.0810%" height="15" fill="rgb(218,70,48)" fg:x="1182" fg:w="1"/><text x="96.0361%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.41%)</title><rect x="95.7050%" y="437" width="0.4052%" height="15" fill="rgb(212,196,52)" fg:x="1181" fg:w="5"/><text x="95.9550%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="95.8671%" y="421" width="0.2431%" height="15" fill="rgb(243,203,18)" fg:x="1183" fg:w="3"/><text x="96.1171%" y="431.50"></text></g><g><title>indefinite::rules::number::Number::check (112 samples, 9.08%)</title><rect x="87.1151%" y="533" width="9.0762%" height="15" fill="rgb(252,125,41)" fg:x="1075" fg:w="112"/><text x="87.3651%" y="543.50">indefinite::r..</text></g><g><title>regex::regex::string::Regex::is_match_at (9 samples, 0.73%)</title><rect x="95.4619%" y="517" width="0.7293%" height="15" fill="rgb(223,180,33)" fg:x="1178" fg:w="9"/><text x="95.7119%" y="527.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.65%)</title><rect x="95.5429%" y="501" width="0.6483%" height="15" fill="rgb(254,159,46)" fg:x="1179" fg:w="8"/><text x="95.7929%" y="511.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.65%)</title><rect x="95.5429%" y="485" width="0.6483%" height="15" fill="rgb(254,38,10)" fg:x="1179" fg:w="8"/><text x="95.7929%" y="495.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.65%)</title><rect x="95.5429%" y="469" width="0.6483%" height="15" fill="rgb(208,217,32)" fg:x="1179" fg:w="8"/><text x="95.7929%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.49%)</title><rect x="95.7050%" y="453" width="0.4862%" height="15" fill="rgb(221,120,13)" fg:x="1181" fg:w="6"/><text x="95.9550%" y="463.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="96.1102%" y="437" width="0.0810%" height="15" fill="rgb(246,54,52)" fg:x="1186" fg:w="1"/><text x="96.3602%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.1102%" y="421" width="0.0810%" height="15" fill="rgb(242,34,25)" fg:x="1186" fg:w="1"/><text x="96.3602%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.1102%" y="405" width="0.0810%" height="15" fill="rgb(247,209,9)" fg:x="1186" fg:w="1"/><text x="96.3602%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.1102%" y="389" width="0.0810%" height="15" fill="rgb(228,71,26)" fg:x="1186" fg:w="1"/><text x="96.3602%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.1912%" y="453" width="0.1621%" height="15" fill="rgb(222,145,49)" fg:x="1187" fg:w="2"/><text x="96.4412%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.1912%" y="437" width="0.1621%" height="15" fill="rgb(218,121,17)" fg:x="1187" fg:w="2"/><text x="96.4412%" y="447.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.2723%" y="421" width="0.0810%" height="15" fill="rgb(244,50,7)" fg:x="1188" fg:w="1"/><text x="96.5223%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.4344%" y="437" width="0.0810%" height="15" fill="rgb(246,229,37)" fg:x="1190" fg:w="1"/><text x="96.6844%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="96.5154%" y="421" width="0.2431%" height="15" fill="rgb(225,18,5)" fg:x="1191" fg:w="3"/><text x="96.7654%" y="431.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="96.5154%" y="437" width="0.3241%" height="15" fill="rgb(213,204,8)" fg:x="1191" fg:w="4"/><text x="96.7654%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="96.7585%" y="421" width="0.0810%" height="15" fill="rgb(238,103,6)" fg:x="1194" fg:w="1"/><text x="97.0085%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="96.7585%" y="405" width="0.0810%" height="15" fill="rgb(222,25,35)" fg:x="1194" fg:w="1"/><text x="97.0085%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="96.7585%" y="389" width="0.0810%" height="15" fill="rgb(213,203,35)" fg:x="1194" fg:w="1"/><text x="97.0085%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="96.8395%" y="405" width="0.0810%" height="15" fill="rgb(221,79,53)" fg:x="1195" fg:w="1"/><text x="97.0895%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.8395%" y="389" width="0.0810%" height="15" fill="rgb(243,200,35)" fg:x="1195" fg:w="1"/><text x="97.0895%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.8395%" y="373" width="0.0810%" height="15" fill="rgb(248,60,25)" fg:x="1195" fg:w="1"/><text x="97.0895%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.8395%" y="357" width="0.0810%" height="15" fill="rgb(227,53,46)" fg:x="1195" fg:w="1"/><text x="97.0895%" y="367.50"></text></g><g><title>regex_automata::meta::strategy::new (9 samples, 0.73%)</title><rect x="96.3533%" y="453" width="0.7293%" height="15" fill="rgb(216,120,32)" fg:x="1189" fg:w="9"/><text x="96.6033%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="96.8395%" y="437" width="0.2431%" height="15" fill="rgb(220,134,1)" fg:x="1195" fg:w="3"/><text x="97.0895%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="96.8395%" y="421" width="0.2431%" height="15" fill="rgb(237,168,5)" fg:x="1195" fg:w="3"/><text x="97.0895%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="96.9206%" y="405" width="0.1621%" height="15" fill="rgb(231,100,33)" fg:x="1196" fg:w="2"/><text x="97.1706%" y="415.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="97.0827%" y="405" width="0.0810%" height="15" fill="rgb(236,177,47)" fg:x="1198" fg:w="1"/><text x="97.3327%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.0827%" y="389" width="0.0810%" height="15" fill="rgb(235,7,49)" fg:x="1198" fg:w="1"/><text x="97.3327%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.0827%" y="373" width="0.0810%" height="15" fill="rgb(232,119,22)" fg:x="1198" fg:w="1"/><text x="97.3327%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.0827%" y="357" width="0.0810%" height="15" fill="rgb(254,73,53)" fg:x="1198" fg:w="1"/><text x="97.3327%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="97.0827%" y="421" width="0.2431%" height="15" fill="rgb(251,35,20)" fg:x="1198" fg:w="3"/><text x="97.3327%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="97.1637%" y="405" width="0.1621%" height="15" fill="rgb(241,119,20)" fg:x="1199" fg:w="2"/><text x="97.4137%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="97.1637%" y="389" width="0.1621%" height="15" fill="rgb(207,102,14)" fg:x="1199" fg:w="2"/><text x="97.4137%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="97.1637%" y="373" width="0.1621%" height="15" fill="rgb(248,201,50)" fg:x="1199" fg:w="2"/><text x="97.4137%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="97.1637%" y="357" width="0.1621%" height="15" fill="rgb(222,185,44)" fg:x="1199" fg:w="2"/><text x="97.4137%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="97.0827%" y="453" width="0.3241%" height="15" fill="rgb(218,107,18)" fg:x="1198" fg:w="4"/><text x="97.3327%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="97.0827%" y="437" width="0.3241%" height="15" fill="rgb(237,177,39)" fg:x="1198" fg:w="4"/><text x="97.3327%" y="447.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.3258%" y="421" width="0.0810%" height="15" fill="rgb(246,69,6)" fg:x="1201" fg:w="1"/><text x="97.5758%" y="431.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="97.3258%" y="405" width="0.0810%" height="15" fill="rgb(234,208,37)" fg:x="1201" fg:w="1"/><text x="97.5758%" y="415.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (16 samples, 1.30%)</title><rect x="96.1912%" y="501" width="1.2966%" height="15" fill="rgb(225,4,6)" fg:x="1187" fg:w="16"/><text x="96.4412%" y="511.50"></text></g><g><title>regex::builders::Builder::build_one_string (16 samples, 1.30%)</title><rect x="96.1912%" y="485" width="1.2966%" height="15" fill="rgb(233,45,0)" fg:x="1187" fg:w="16"/><text x="96.4412%" y="495.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (16 samples, 1.30%)</title><rect x="96.1912%" y="469" width="1.2966%" height="15" fill="rgb(226,136,5)" fg:x="1187" fg:w="16"/><text x="96.4412%" y="479.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="97.4068%" y="453" width="0.0810%" height="15" fill="rgb(211,91,47)" fg:x="1202" fg:w="1"/><text x="97.6568%" y="463.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.4068%" y="437" width="0.0810%" height="15" fill="rgb(242,88,51)" fg:x="1202" fg:w="1"/><text x="97.6568%" y="447.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="97.4068%" y="421" width="0.0810%" height="15" fill="rgb(230,91,28)" fg:x="1202" fg:w="1"/><text x="97.6568%" y="431.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="97.4068%" y="405" width="0.0810%" height="15" fill="rgb(254,186,29)" fg:x="1202" fg:w="1"/><text x="97.6568%" y="415.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="97.4068%" y="389" width="0.0810%" height="15" fill="rgb(238,6,4)" fg:x="1202" fg:w="1"/><text x="97.6568%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="97.4878%" y="501" width="0.0810%" height="15" fill="rgb(221,151,16)" fg:x="1203" fg:w="1"/><text x="97.7378%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="97.4878%" y="485" width="0.0810%" height="15" fill="rgb(251,143,52)" fg:x="1203" fg:w="1"/><text x="97.7378%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.4878%" y="469" width="0.0810%" height="15" fill="rgb(206,90,15)" fg:x="1203" fg:w="1"/><text x="97.7378%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="97.4878%" y="453" width="0.0810%" height="15" fill="rgb(218,35,8)" fg:x="1203" fg:w="1"/><text x="97.7378%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.4878%" y="437" width="0.0810%" height="15" fill="rgb(239,215,6)" fg:x="1203" fg:w="1"/><text x="97.7378%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.4878%" y="421" width="0.0810%" height="15" fill="rgb(245,116,39)" fg:x="1203" fg:w="1"/><text x="97.7378%" y="431.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (21 samples, 1.70%)</title><rect x="96.1912%" y="517" width="1.7018%" height="15" fill="rgb(242,65,28)" fg:x="1187" fg:w="21"/><text x="96.4412%" y="527.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="97.5689%" y="501" width="0.3241%" height="15" fill="rgb(252,132,53)" fg:x="1204" fg:w="4"/><text x="97.8189%" y="511.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="97.5689%" y="485" width="0.3241%" height="15" fill="rgb(224,159,50)" fg:x="1204" fg:w="4"/><text x="97.8189%" y="495.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="97.5689%" y="469" width="0.3241%" height="15" fill="rgb(224,93,4)" fg:x="1204" fg:w="4"/><text x="97.8189%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="97.5689%" y="453" width="0.3241%" height="15" fill="rgb(208,81,34)" fg:x="1204" fg:w="4"/><text x="97.8189%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="97.5689%" y="437" width="0.3241%" height="15" fill="rgb(233,92,54)" fg:x="1204" fg:w="4"/><text x="97.8189%" y="447.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="97.8120%" y="421" width="0.0810%" height="15" fill="rgb(237,21,14)" fg:x="1207" fg:w="1"/><text x="98.0620%" y="431.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (227 samples, 18.40%)</title><rect x="79.5786%" y="613" width="18.3955%" height="15" fill="rgb(249,128,51)" fg:x="982" fg:w="227"/><text x="79.8286%" y="623.50">&lt;&amp;kernel::model::entry::Entry..</text></g><g><title>plugins_core::looking::model::qualify_name (224 samples, 18.15%)</title><rect x="79.8217%" y="597" width="18.1524%" height="15" fill="rgb(223,129,24)" fg:x="985" fg:w="224"/><text x="80.0717%" y="607.50">plugins_core::looking::model..</text></g><g><title>indefinite::indefinite (224 samples, 18.15%)</title><rect x="79.8217%" y="581" width="18.1524%" height="15" fill="rgb(231,168,25)" fg:x="985" fg:w="224"/><text x="80.0717%" y="591.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (224 samples, 18.15%)</title><rect x="79.8217%" y="565" width="18.1524%" height="15" fill="rgb(224,39,20)" fg:x="985" fg:w="224"/><text x="80.0717%" y="575.50">indefinite::methods::indefin..</text></g><g><title>indefinite::methods::apply_rules (224 samples, 18.15%)</title><rect x="79.8217%" y="549" width="18.1524%" height="15" fill="rgb(225,152,53)" fg:x="985" fg:w="224"/><text x="80.0717%" y="559.50">indefinite::methods::apply_r..</text></g><g><title>indefinite::rules::other::Other::run (22 samples, 1.78%)</title><rect x="96.1912%" y="533" width="1.7828%" height="15" fill="rgb(252,17,24)" fg:x="1187" fg:w="22"/><text x="96.4412%" y="543.50">i..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="97.8930%" y="517" width="0.0810%" height="15" fill="rgb(250,114,30)" fg:x="1208" fg:w="1"/><text x="98.1430%" y="527.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (228 samples, 18.48%)</title><rect x="79.5786%" y="645" width="18.4765%" height="15" fill="rgb(229,5,4)" fg:x="982" fg:w="228"/><text x="79.8286%" y="655.50">&lt;plugins_core::looking::actio..</text></g><g><title>plugins_core::looking::model::new_area_observation (228 samples, 18.48%)</title><rect x="79.5786%" y="629" width="18.4765%" height="15" fill="rgb(225,176,49)" fg:x="982" fg:w="228"/><text x="79.8286%" y="639.50">plugins_core::looking::model:..</text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (1 samples, 0.08%)</title><rect x="97.9741%" y="613" width="0.0810%" height="15" fill="rgb(224,221,49)" fg:x="1209" fg:w="1"/><text x="98.2241%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="97.9741%" y="597" width="0.0810%" height="15" fill="rgb(253,169,27)" fg:x="1209" fg:w="1"/><text x="98.2241%" y="607.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (1 samples, 0.08%)</title><rect x="98.0551%" y="645" width="0.0810%" height="15" fill="rgb(211,206,16)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="655.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (1 samples, 0.08%)</title><rect x="98.0551%" y="629" width="0.0810%" height="15" fill="rgb(244,87,35)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="98.0551%" y="613" width="0.0810%" height="15" fill="rgb(246,28,10)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="98.0551%" y="597" width="0.0810%" height="15" fill="rgb(229,12,44)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="98.0551%" y="581" width="0.0810%" height="15" fill="rgb(210,145,37)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="98.0551%" y="565" width="0.0810%" height="15" fill="rgb(227,112,52)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="575.50"></text></g><g><title>engine::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="98.0551%" y="549" width="0.0810%" height="15" fill="rgb(238,155,34)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="98.0551%" y="533" width="0.0810%" height="15" fill="rgb(239,226,36)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="543.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="98.0551%" y="517" width="0.0810%" height="15" fill="rgb(230,16,23)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="98.0551%" y="501" width="0.0810%" height="15" fill="rgb(236,171,36)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.0551%" y="485" width="0.0810%" height="15" fill="rgb(221,22,14)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0551%" y="469" width="0.0810%" height="15" fill="rgb(242,43,11)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="479.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.0551%" y="453" width="0.0810%" height="15" fill="rgb(232,69,23)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0551%" y="437" width="0.0810%" height="15" fill="rgb(216,180,54)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="447.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.0551%" y="421" width="0.0810%" height="15" fill="rgb(216,5,24)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.0551%" y="405" width="0.0810%" height="15" fill="rgb(225,89,9)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.0551%" y="389" width="0.0810%" height="15" fill="rgb(243,75,33)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.0551%" y="373" width="0.0810%" height="15" fill="rgb(247,141,45)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.0551%" y="357" width="0.0810%" height="15" fill="rgb(232,177,36)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.0551%" y="341" width="0.0810%" height="15" fill="rgb(219,125,36)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.0551%" y="325" width="0.0810%" height="15" fill="rgb(227,94,9)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.0551%" y="309" width="0.0810%" height="15" fill="rgb(240,34,52)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.0551%" y="293" width="0.0810%" height="15" fill="rgb(216,45,12)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.0551%" y="277" width="0.0810%" height="15" fill="rgb(246,21,19)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.0551%" y="261" width="0.0810%" height="15" fill="rgb(213,98,42)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.2982%" y="517" width="0.0810%" height="15" fill="rgb(250,136,47)" fg:x="1213" fg:w="1"/><text x="98.5482%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (4 samples, 0.32%)</title><rect x="98.1361%" y="613" width="0.3241%" height="15" fill="rgb(251,124,27)" fg:x="1211" fg:w="4"/><text x="98.3861%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="98.1361%" y="597" width="0.3241%" height="15" fill="rgb(229,180,14)" fg:x="1211" fg:w="4"/><text x="98.3861%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="98.1361%" y="581" width="0.3241%" height="15" fill="rgb(245,216,25)" fg:x="1211" fg:w="4"/><text x="98.3861%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="98.1361%" y="565" width="0.3241%" height="15" fill="rgb(251,43,5)" fg:x="1211" fg:w="4"/><text x="98.3861%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="98.2982%" y="549" width="0.1621%" height="15" fill="rgb(250,128,24)" fg:x="1213" fg:w="2"/><text x="98.5482%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="98.2982%" y="533" width="0.1621%" height="15" fill="rgb(217,117,27)" fg:x="1213" fg:w="2"/><text x="98.5482%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.3793%" y="517" width="0.0810%" height="15" fill="rgb(245,147,4)" fg:x="1214" fg:w="1"/><text x="98.6293%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.4603%" y="581" width="0.0810%" height="15" fill="rgb(242,201,35)" fg:x="1215" fg:w="1"/><text x="98.7103%" y="591.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.08%)</title><rect x="98.4603%" y="565" width="0.0810%" height="15" fill="rgb(218,181,1)" fg:x="1215" fg:w="1"/><text x="98.7103%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="98.4603%" y="549" width="0.0810%" height="15" fill="rgb(222,6,29)" fg:x="1215" fg:w="1"/><text x="98.7103%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="98.4603%" y="533" width="0.0810%" height="15" fill="rgb(208,186,3)" fg:x="1215" fg:w="1"/><text x="98.7103%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.4603%" y="517" width="0.0810%" height="15" fill="rgb(216,36,26)" fg:x="1215" fg:w="1"/><text x="98.7103%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.4603%" y="501" width="0.0810%" height="15" fill="rgb(248,201,23)" fg:x="1215" fg:w="1"/><text x="98.7103%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="98.4603%" y="485" width="0.0810%" height="15" fill="rgb(251,170,31)" fg:x="1215" fg:w="1"/><text x="98.7103%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.5413%" y="581" width="0.0810%" height="15" fill="rgb(207,110,25)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.6224%" y="517" width="0.0810%" height="15" fill="rgb(250,54,15)" fg:x="1217" fg:w="1"/><text x="98.8724%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.6224%" y="501" width="0.0810%" height="15" fill="rgb(227,68,33)" fg:x="1217" fg:w="1"/><text x="98.8724%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.7034%" y="517" width="0.0810%" height="15" fill="rgb(238,34,41)" fg:x="1218" fg:w="1"/><text x="98.9534%" y="527.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (3 samples, 0.24%)</title><rect x="98.6224%" y="533" width="0.2431%" height="15" fill="rgb(220,11,15)" fg:x="1217" fg:w="3"/><text x="98.8724%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="98.7844%" y="517" width="0.0810%" height="15" fill="rgb(246,111,35)" fg:x="1219" fg:w="1"/><text x="99.0344%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="98.7844%" y="501" width="0.0810%" height="15" fill="rgb(209,88,53)" fg:x="1219" fg:w="1"/><text x="99.0344%" y="511.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="98.7844%" y="485" width="0.0810%" height="15" fill="rgb(231,185,47)" fg:x="1219" fg:w="1"/><text x="99.0344%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.7844%" y="469" width="0.0810%" height="15" fill="rgb(233,154,1)" fg:x="1219" fg:w="1"/><text x="99.0344%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="98.7844%" y="453" width="0.0810%" height="15" fill="rgb(225,15,46)" fg:x="1219" fg:w="1"/><text x="99.0344%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="98.7844%" y="437" width="0.0810%" height="15" fill="rgb(211,135,41)" fg:x="1219" fg:w="1"/><text x="99.0344%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="98.7844%" y="421" width="0.0810%" height="15" fill="rgb(208,54,0)" fg:x="1219" fg:w="1"/><text x="99.0344%" y="431.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="98.7844%" y="405" width="0.0810%" height="15" fill="rgb(244,136,14)" fg:x="1219" fg:w="1"/><text x="99.0344%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.7844%" y="389" width="0.0810%" height="15" fill="rgb(241,56,14)" fg:x="1219" fg:w="1"/><text x="99.0344%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="98.7844%" y="373" width="0.0810%" height="15" fill="rgb(205,80,24)" fg:x="1219" fg:w="1"/><text x="99.0344%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8655%" y="485" width="0.0810%" height="15" fill="rgb(220,57,4)" fg:x="1220" fg:w="1"/><text x="99.1155%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8655%" y="469" width="0.0810%" height="15" fill="rgb(226,193,50)" fg:x="1220" fg:w="1"/><text x="99.1155%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8655%" y="453" width="0.0810%" height="15" fill="rgb(231,168,22)" fg:x="1220" fg:w="1"/><text x="99.1155%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8655%" y="437" width="0.0810%" height="15" fill="rgb(254,215,14)" fg:x="1220" fg:w="1"/><text x="99.1155%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8655%" y="421" width="0.0810%" height="15" fill="rgb(211,115,16)" fg:x="1220" fg:w="1"/><text x="99.1155%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="98.9465%" y="389" width="0.0810%" height="15" fill="rgb(236,210,16)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="399.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="98.9465%" y="373" width="0.0810%" height="15" fill="rgb(221,94,12)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="98.9465%" y="357" width="0.0810%" height="15" fill="rgb(235,218,49)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.9465%" y="341" width="0.0810%" height="15" fill="rgb(217,114,14)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9465%" y="325" width="0.0810%" height="15" fill="rgb(216,145,22)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9465%" y="309" width="0.0810%" height="15" fill="rgb(217,112,39)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9465%" y="293" width="0.0810%" height="15" fill="rgb(225,85,32)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9465%" y="277" width="0.0810%" height="15" fill="rgb(245,209,47)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.9465%" y="261" width="0.0810%" height="15" fill="rgb(218,220,15)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.9465%" y="245" width="0.0810%" height="15" fill="rgb(222,202,31)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.9465%" y="229" width="0.0810%" height="15" fill="rgb(243,203,4)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.9465%" y="213" width="0.0810%" height="15" fill="rgb(237,92,17)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.9465%" y="197" width="0.0810%" height="15" fill="rgb(231,119,7)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.9465%" y="181" width="0.0810%" height="15" fill="rgb(237,82,41)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.9465%" y="165" width="0.0810%" height="15" fill="rgb(226,81,48)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.9465%" y="149" width="0.0810%" height="15" fill="rgb(234,70,51)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.9465%" y="133" width="0.0810%" height="15" fill="rgb(251,86,4)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.9465%" y="117" width="0.0810%" height="15" fill="rgb(244,144,28)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.9465%" y="101" width="0.0810%" height="15" fill="rgb(232,161,39)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.9465%" y="85" width="0.0810%" height="15" fill="rgb(247,34,51)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="95.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="99.0276%" y="389" width="0.0810%" height="15" fill="rgb(225,132,2)" fg:x="1222" fg:w="1"/><text x="99.2776%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.0276%" y="373" width="0.0810%" height="15" fill="rgb(209,159,44)" fg:x="1222" fg:w="1"/><text x="99.2776%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.0276%" y="357" width="0.0810%" height="15" fill="rgb(251,214,1)" fg:x="1222" fg:w="1"/><text x="99.2776%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="99.0276%" y="341" width="0.0810%" height="15" fill="rgb(247,84,47)" fg:x="1222" fg:w="1"/><text x="99.2776%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.0276%" y="325" width="0.0810%" height="15" fill="rgb(240,111,43)" fg:x="1222" fg:w="1"/><text x="99.2776%" y="335.50"></text></g><g><title>plugins_core::tools::get_contained_keys (4 samples, 0.32%)</title><rect x="98.8655%" y="533" width="0.3241%" height="15" fill="rgb(215,214,35)" fg:x="1220" fg:w="4"/><text x="99.1155%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="98.8655%" y="517" width="0.3241%" height="15" fill="rgb(248,207,23)" fg:x="1220" fg:w="4"/><text x="99.1155%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (4 samples, 0.32%)</title><rect x="98.8655%" y="501" width="0.3241%" height="15" fill="rgb(214,186,4)" fg:x="1220" fg:w="4"/><text x="99.1155%" y="511.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (3 samples, 0.24%)</title><rect x="98.9465%" y="485" width="0.2431%" height="15" fill="rgb(220,133,22)" fg:x="1221" fg:w="3"/><text x="99.1965%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.9465%" y="469" width="0.2431%" height="15" fill="rgb(239,134,19)" fg:x="1221" fg:w="3"/><text x="99.1965%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="98.9465%" y="453" width="0.2431%" height="15" fill="rgb(250,140,9)" fg:x="1221" fg:w="3"/><text x="99.1965%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="98.9465%" y="437" width="0.2431%" height="15" fill="rgb(225,59,14)" fg:x="1221" fg:w="3"/><text x="99.1965%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="98.9465%" y="421" width="0.2431%" height="15" fill="rgb(214,152,51)" fg:x="1221" fg:w="3"/><text x="99.1965%" y="431.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="98.9465%" y="405" width="0.2431%" height="15" fill="rgb(251,227,43)" fg:x="1221" fg:w="3"/><text x="99.1965%" y="415.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="99.1086%" y="389" width="0.0810%" height="15" fill="rgb(241,96,17)" fg:x="1223" fg:w="1"/><text x="99.3586%" y="399.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.1086%" y="373" width="0.0810%" height="15" fill="rgb(234,198,43)" fg:x="1223" fg:w="1"/><text x="99.3586%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.1086%" y="357" width="0.0810%" height="15" fill="rgb(220,108,29)" fg:x="1223" fg:w="1"/><text x="99.3586%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1086%" y="341" width="0.0810%" height="15" fill="rgb(226,163,33)" fg:x="1223" fg:w="1"/><text x="99.3586%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.1086%" y="325" width="0.0810%" height="15" fill="rgb(205,194,45)" fg:x="1223" fg:w="1"/><text x="99.3586%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1086%" y="309" width="0.0810%" height="15" fill="rgb(206,143,44)" fg:x="1223" fg:w="1"/><text x="99.3586%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.1086%" y="293" width="0.0810%" height="15" fill="rgb(236,136,36)" fg:x="1223" fg:w="1"/><text x="99.3586%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1086%" y="277" width="0.0810%" height="15" fill="rgb(249,172,42)" fg:x="1223" fg:w="1"/><text x="99.3586%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.1086%" y="261" width="0.0810%" height="15" fill="rgb(216,139,23)" fg:x="1223" fg:w="1"/><text x="99.3586%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1086%" y="245" width="0.0810%" height="15" fill="rgb(207,166,20)" fg:x="1223" fg:w="1"/><text x="99.3586%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.1086%" y="229" width="0.0810%" height="15" fill="rgb(210,209,22)" fg:x="1223" fg:w="1"/><text x="99.3586%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1086%" y="213" width="0.0810%" height="15" fill="rgb(232,118,20)" fg:x="1223" fg:w="1"/><text x="99.3586%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.1086%" y="197" width="0.0810%" height="15" fill="rgb(238,113,42)" fg:x="1223" fg:w="1"/><text x="99.3586%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1086%" y="181" width="0.0810%" height="15" fill="rgb(231,42,5)" fg:x="1223" fg:w="1"/><text x="99.3586%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.1086%" y="165" width="0.0810%" height="15" fill="rgb(243,166,24)" fg:x="1223" fg:w="1"/><text x="99.3586%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.65%)</title><rect x="98.6224%" y="565" width="0.6483%" height="15" fill="rgb(237,226,12)" fg:x="1217" fg:w="8"/><text x="98.8724%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.65%)</title><rect x="98.6224%" y="549" width="0.6483%" height="15" fill="rgb(229,133,24)" fg:x="1217" fg:w="8"/><text x="98.8724%" y="559.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (1 samples, 0.08%)</title><rect x="99.1896%" y="533" width="0.0810%" height="15" fill="rgb(238,33,43)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="99.1896%" y="517" width="0.0810%" height="15" fill="rgb(227,59,38)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="99.1896%" y="501" width="0.0810%" height="15" fill="rgb(230,97,0)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1896%" y="485" width="0.0810%" height="15" fill="rgb(250,173,50)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1896%" y="469" width="0.0810%" height="15" fill="rgb(240,15,50)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1896%" y="453" width="0.0810%" height="15" fill="rgb(221,93,22)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1896%" y="437" width="0.0810%" height="15" fill="rgb(245,180,53)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1896%" y="421" width="0.0810%" height="15" fill="rgb(231,88,51)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1896%" y="405" width="0.0810%" height="15" fill="rgb(240,58,21)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.1896%" y="389" width="0.0810%" height="15" fill="rgb(237,21,10)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.1896%" y="373" width="0.0810%" height="15" fill="rgb(218,43,11)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.1896%" y="357" width="0.0810%" height="15" fill="rgb(218,221,29)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.1896%" y="341" width="0.0810%" height="15" fill="rgb(214,118,42)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.1896%" y="325" width="0.0810%" height="15" fill="rgb(251,200,26)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.1896%" y="309" width="0.0810%" height="15" fill="rgb(237,101,39)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.1896%" y="293" width="0.0810%" height="15" fill="rgb(251,117,11)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.1896%" y="277" width="0.0810%" height="15" fill="rgb(216,223,23)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.1896%" y="261" width="0.0810%" height="15" fill="rgb(251,54,12)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1896%" y="245" width="0.0810%" height="15" fill="rgb(254,176,54)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="99.4327%" y="277" width="0.1621%" height="15" fill="rgb(210,32,8)" fg:x="1227" fg:w="2"/><text x="99.6827%" y="287.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="99.3517%" y="405" width="0.3241%" height="15" fill="rgb(235,52,38)" fg:x="1226" fg:w="4"/><text x="99.6017%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="99.3517%" y="389" width="0.3241%" height="15" fill="rgb(231,4,44)" fg:x="1226" fg:w="4"/><text x="99.6017%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="99.3517%" y="373" width="0.3241%" height="15" fill="rgb(249,2,32)" fg:x="1226" fg:w="4"/><text x="99.6017%" y="383.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="99.4327%" y="357" width="0.2431%" height="15" fill="rgb(224,65,26)" fg:x="1227" fg:w="3"/><text x="99.6827%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="99.4327%" y="341" width="0.2431%" height="15" fill="rgb(250,73,40)" fg:x="1227" fg:w="3"/><text x="99.6827%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="99.4327%" y="325" width="0.2431%" height="15" fill="rgb(253,177,16)" fg:x="1227" fg:w="3"/><text x="99.6827%" y="335.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="99.4327%" y="309" width="0.2431%" height="15" fill="rgb(217,32,34)" fg:x="1227" fg:w="3"/><text x="99.6827%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="99.4327%" y="293" width="0.2431%" height="15" fill="rgb(212,7,10)" fg:x="1227" fg:w="3"/><text x="99.6827%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="99.5948%" y="277" width="0.0810%" height="15" fill="rgb(245,89,8)" fg:x="1229" fg:w="1"/><text x="99.8448%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5948%" y="261" width="0.0810%" height="15" fill="rgb(237,16,53)" fg:x="1229" fg:w="1"/><text x="99.8448%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (5 samples, 0.41%)</title><rect x="99.3517%" y="501" width="0.4052%" height="15" fill="rgb(250,204,30)" fg:x="1226" fg:w="5"/><text x="99.6017%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="99.3517%" y="485" width="0.4052%" height="15" fill="rgb(208,77,27)" fg:x="1226" fg:w="5"/><text x="99.6017%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.41%)</title><rect x="99.3517%" y="469" width="0.4052%" height="15" fill="rgb(250,204,28)" fg:x="1226" fg:w="5"/><text x="99.6017%" y="479.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (5 samples, 0.41%)</title><rect x="99.3517%" y="453" width="0.4052%" height="15" fill="rgb(244,63,21)" fg:x="1226" fg:w="5"/><text x="99.6017%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="99.3517%" y="437" width="0.4052%" height="15" fill="rgb(236,85,44)" fg:x="1226" fg:w="5"/><text x="99.6017%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.41%)</title><rect x="99.3517%" y="421" width="0.4052%" height="15" fill="rgb(215,98,4)" fg:x="1226" fg:w="5"/><text x="99.6017%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.6759%" y="405" width="0.0810%" height="15" fill="rgb(235,38,11)" fg:x="1230" fg:w="1"/><text x="99.9259%" y="415.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (17 samples, 1.38%)</title><rect x="98.4603%" y="597" width="1.3776%" height="15" fill="rgb(254,186,25)" fg:x="1215" fg:w="17"/><text x="98.7103%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (15 samples, 1.22%)</title><rect x="98.6224%" y="581" width="1.2156%" height="15" fill="rgb(225,55,31)" fg:x="1217" fg:w="15"/><text x="98.8724%" y="591.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (7 samples, 0.57%)</title><rect x="99.2707%" y="565" width="0.5673%" height="15" fill="rgb(211,15,21)" fg:x="1225" fg:w="7"/><text x="99.5207%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 0.57%)</title><rect x="99.2707%" y="549" width="0.5673%" height="15" fill="rgb(215,187,41)" fg:x="1225" fg:w="7"/><text x="99.5207%" y="559.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (6 samples, 0.49%)</title><rect x="99.3517%" y="533" width="0.4862%" height="15" fill="rgb(248,69,32)" fg:x="1226" fg:w="6"/><text x="99.6017%" y="543.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (6 samples, 0.49%)</title><rect x="99.3517%" y="517" width="0.4862%" height="15" fill="rgb(252,102,52)" fg:x="1226" fg:w="6"/><text x="99.6017%" y="527.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (1 samples, 0.08%)</title><rect x="99.7569%" y="501" width="0.0810%" height="15" fill="rgb(253,140,32)" fg:x="1231" fg:w="1"/><text x="100.0069%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="99.7569%" y="485" width="0.0810%" height="15" fill="rgb(216,56,42)" fg:x="1231" fg:w="1"/><text x="100.0069%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="99.7569%" y="469" width="0.0810%" height="15" fill="rgb(216,184,14)" fg:x="1231" fg:w="1"/><text x="100.0069%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="99.7569%" y="453" width="0.0810%" height="15" fill="rgb(237,187,27)" fg:x="1231" fg:w="1"/><text x="100.0069%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.7569%" y="437" width="0.0810%" height="15" fill="rgb(219,65,3)" fg:x="1231" fg:w="1"/><text x="100.0069%" y="447.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (253 samples, 20.50%)</title><rect x="79.4165%" y="789" width="20.5024%" height="15" fill="rgb(245,83,25)" fg:x="980" fg:w="253"/><text x="79.6665%" y="799.50">engine::session::Session::evalua..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (253 samples, 20.50%)</title><rect x="79.4165%" y="773" width="20.5024%" height="15" fill="rgb(214,205,45)" fg:x="980" fg:w="253"/><text x="79.6665%" y="783.50">engine::perform::StandardPerform..</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (253 samples, 20.50%)</title><rect x="79.4165%" y="757" width="20.5024%" height="15" fill="rgb(241,20,18)" fg:x="980" fg:w="253"/><text x="79.6665%" y="767.50">&lt;kernel::plugins::SessionPlugins..</text></g><g><title>core::iter::adapters::try_process (252 samples, 20.42%)</title><rect x="79.4976%" y="741" width="20.4214%" height="15" fill="rgb(232,163,23)" fg:x="981" fg:w="252"/><text x="79.7476%" y="751.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (252 samples, 20.42%)</title><rect x="79.4976%" y="725" width="20.4214%" height="15" fill="rgb(214,5,46)" fg:x="981" fg:w="252"/><text x="79.7476%" y="735.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::ve..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (252 samples, 20.42%)</title><rect x="79.4976%" y="709" width="20.4214%" height="15" fill="rgb(229,78,17)" fg:x="981" fg:w="252"/><text x="79.7476%" y="719.50">&lt;core::iter::adapters::map::Map&lt;..</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (251 samples, 20.34%)</title><rect x="79.5786%" y="693" width="20.3404%" height="15" fill="rgb(248,89,10)" fg:x="982" fg:w="251"/><text x="79.8286%" y="703.50">&lt;plugins_core::looking::LookingP..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (251 samples, 20.34%)</title><rect x="79.5786%" y="677" width="20.3404%" height="15" fill="rgb(248,54,15)" fg:x="982" fg:w="251"/><text x="79.8286%" y="687.50">&lt;engine::perform::StandardPerfor..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (251 samples, 20.34%)</title><rect x="79.5786%" y="661" width="20.3404%" height="15" fill="rgb(223,116,6)" fg:x="982" fg:w="251"/><text x="79.8286%" y="671.50">&lt;engine::perform::StandardPerfor..</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (22 samples, 1.78%)</title><rect x="98.1361%" y="645" width="1.7828%" height="15" fill="rgb(205,125,38)" fg:x="1211" fg:w="22"/><text x="98.3861%" y="655.50">k..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (22 samples, 1.78%)</title><rect x="98.1361%" y="629" width="1.7828%" height="15" fill="rgb(251,78,38)" fg:x="1211" fg:w="22"/><text x="98.3861%" y="639.50">&lt;..</text></g><g><title>plugins_rpc::querying::have_surroundings (18 samples, 1.46%)</title><rect x="98.4603%" y="613" width="1.4587%" height="15" fill="rgb(253,78,28)" fg:x="1215" fg:w="18"/><text x="98.7103%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.8379%" y="597" width="0.0810%" height="15" fill="rgb(209,120,3)" fg:x="1232" fg:w="1"/><text x="100.0879%" y="607.50"></text></g><g><title>rpc_proto::&lt;impl core::convert::Into&lt;rpc_proto::EntityKey&gt; for kernel::model::base::EntityKey&gt;::into (1 samples, 0.08%)</title><rect x="99.8379%" y="581" width="0.0810%" height="15" fill="rgb(238,229,9)" fg:x="1232" fg:w="1"/><text x="100.0879%" y="591.50"></text></g><g><title>kernel::model::base::&lt;impl core::convert::From&lt;kernel::model::base::EntityKey&gt; for alloc::string::String&gt;::from (1 samples, 0.08%)</title><rect x="99.8379%" y="565" width="0.0810%" height="15" fill="rgb(253,159,18)" fg:x="1232" fg:w="1"/><text x="100.0879%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.8379%" y="549" width="0.0810%" height="15" fill="rgb(244,42,34)" fg:x="1232" fg:w="1"/><text x="100.0879%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.8379%" y="533" width="0.0810%" height="15" fill="rgb(224,8,7)" fg:x="1232" fg:w="1"/><text x="100.0879%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.8379%" y="517" width="0.0810%" height="15" fill="rgb(210,201,45)" fg:x="1232" fg:w="1"/><text x="100.0879%" y="527.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="99.8379%" y="501" width="0.0810%" height="15" fill="rgb(252,185,21)" fg:x="1232" fg:w="1"/><text x="100.0879%" y="511.50"></text></g><g><title>all (1,234 samples, 100%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(223,131,1)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="1151.50"></text></g><g><title>simple-5e588292 (1,234 samples, 100.00%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(245,141,16)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="1135.50">simple-5e588292</text></g><g><title>_start (1,234 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(229,55,45)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="1119.50">_start</text></g><g><title>__libc_start_main (1,234 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(208,92,15)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="1103.50">__libc_start_main</text></g><g><title>main (1,234 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(234,185,47)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="1087.50">main</text></g><g><title>std::rt::lang_start_internal (1,234 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(253,104,50)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="1071.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,234 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(205,70,7)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="1055.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,234 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(240,178,43)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="1039.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,234 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(214,112,2)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="1023.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,234 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(206,46,17)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="1007.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,234 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(225,220,16)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,234 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(238,65,40)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,234 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(230,151,21)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="959.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,234 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(218,58,49)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="943.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,234 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(219,179,14)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="927.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,234 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(223,72,1)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="911.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,234 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(238,126,10)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="895.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,234 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(224,206,38)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="879.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,234 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(212,201,54)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="863.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (294 samples, 23.82%)</title><rect x="76.1750%" y="837" width="23.8250%" height="15" fill="rgb(218,154,48)" fg:x="940" fg:w="294"/><text x="76.4250%" y="847.50">&lt;criterion::routine::Function&lt;M,F,T&gt; a..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (294 samples, 23.82%)</title><rect x="76.1750%" y="821" width="23.8250%" height="15" fill="rgb(232,93,24)" fg:x="940" fg:w="294"/><text x="76.4250%" y="831.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (294 samples, 23.82%)</title><rect x="76.1750%" y="805" width="23.8250%" height="15" fill="rgb(245,30,21)" fg:x="940" fg:w="294"/><text x="76.4250%" y="815.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="99.9190%" y="789" width="0.0810%" height="15" fill="rgb(242,148,29)" fg:x="1233" fg:w="1"/><text x="100.1690%" y="799.50"></text></g></svg></svg>