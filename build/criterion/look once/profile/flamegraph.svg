<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1304"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0767%" y="677" width="0.0767%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.3267%" y="687.50"></text></g><g><title>__libc_free (3 samples, 0.23%)</title><rect x="0.2301%" y="661" width="0.2301%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="3"/><text x="0.4801%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (7 samples, 0.54%)</title><rect x="0.0767%" y="725" width="0.5368%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="7"/><text x="0.3267%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.54%)</title><rect x="0.0767%" y="709" width="0.5368%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="7"/><text x="0.3267%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (7 samples, 0.54%)</title><rect x="0.0767%" y="693" width="0.5368%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="7"/><text x="0.3267%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (6 samples, 0.46%)</title><rect x="0.1534%" y="677" width="0.4601%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="6"/><text x="0.4034%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.15%)</title><rect x="0.4601%" y="661" width="0.1534%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="2"/><text x="0.7101%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5368%" y="645" width="0.0767%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="1"/><text x="0.7868%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6902%" y="613" width="0.0767%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="1"/><text x="0.9402%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.9969%" y="565" width="0.0767%" height="15" fill="rgb(220,122,19)" fg:x="13" fg:w="1"/><text x="1.2469%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.38%)</title><rect x="0.8436%" y="597" width="0.3834%" height="15" fill="rgb(250,228,42)" fg:x="11" fg:w="5"/><text x="1.0936%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.31%)</title><rect x="0.9202%" y="581" width="0.3067%" height="15" fill="rgb(240,193,28)" fg:x="12" fg:w="4"/><text x="1.1702%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.15%)</title><rect x="1.0736%" y="565" width="0.1534%" height="15" fill="rgb(216,20,37)" fg:x="14" fg:w="2"/><text x="1.3236%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.15%)</title><rect x="1.0736%" y="549" width="0.1534%" height="15" fill="rgb(206,188,39)" fg:x="14" fg:w="2"/><text x="1.3236%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1503%" y="533" width="0.0767%" height="15" fill="rgb(217,207,13)" fg:x="15" fg:w="1"/><text x="1.4003%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.69%)</title><rect x="0.6135%" y="661" width="0.6902%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="9"/><text x="0.8635%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (9 samples, 0.69%)</title><rect x="0.6135%" y="645" width="0.6902%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="9"/><text x="0.8635%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.69%)</title><rect x="0.6135%" y="629" width="0.6902%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="9"/><text x="0.8635%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.54%)</title><rect x="0.7669%" y="613" width="0.5368%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="7"/><text x="1.0169%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.2270%" y="597" width="0.0767%" height="15" fill="rgb(226,26,5)" fg:x="16" fg:w="1"/><text x="1.4770%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2270%" y="581" width="0.0767%" height="15" fill="rgb(249,33,26)" fg:x="16" fg:w="1"/><text x="1.4770%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3037%" y="661" width="0.0767%" height="15" fill="rgb(235,183,28)" fg:x="17" fg:w="1"/><text x="1.5537%" y="671.50"></text></g><g><title>__libc_free (2 samples, 0.15%)</title><rect x="1.3804%" y="645" width="0.1534%" height="15" fill="rgb(221,5,38)" fg:x="18" fg:w="2"/><text x="1.6304%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.5337%" y="645" width="0.0767%" height="15" fill="rgb(247,18,42)" fg:x="20" fg:w="1"/><text x="1.7837%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.15%)</title><rect x="1.6871%" y="629" width="0.1534%" height="15" fill="rgb(241,131,45)" fg:x="22" fg:w="2"/><text x="1.9371%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.15%)</title><rect x="1.8405%" y="629" width="0.1534%" height="15" fill="rgb(249,31,29)" fg:x="24" fg:w="2"/><text x="2.0905%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.9172%" y="613" width="0.0767%" height="15" fill="rgb(225,111,53)" fg:x="25" fg:w="1"/><text x="2.1672%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="2.0706%" y="597" width="0.0767%" height="15" fill="rgb(238,160,17)" fg:x="27" fg:w="1"/><text x="2.3206%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="2.0706%" y="581" width="0.0767%" height="15" fill="rgb(214,148,48)" fg:x="27" fg:w="1"/><text x="2.3206%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0706%" y="565" width="0.0767%" height="15" fill="rgb(232,36,49)" fg:x="27" fg:w="1"/><text x="2.3206%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.1472%" y="581" width="0.0767%" height="15" fill="rgb(209,103,24)" fg:x="28" fg:w="1"/><text x="2.3972%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 1.69%)</title><rect x="0.6135%" y="709" width="1.6871%" height="15" fill="rgb(229,88,8)" fg:x="8" fg:w="22"/><text x="0.8635%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (22 samples, 1.69%)</title><rect x="0.6135%" y="693" width="1.6871%" height="15" fill="rgb(213,181,19)" fg:x="8" fg:w="22"/><text x="0.8635%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 1.69%)</title><rect x="0.6135%" y="677" width="1.6871%" height="15" fill="rgb(254,191,54)" fg:x="8" fg:w="22"/><text x="0.8635%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (12 samples, 0.92%)</title><rect x="1.3804%" y="661" width="0.9202%" height="15" fill="rgb(241,83,37)" fg:x="18" fg:w="12"/><text x="1.6304%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.69%)</title><rect x="1.6104%" y="645" width="0.6902%" height="15" fill="rgb(233,36,39)" fg:x="21" fg:w="9"/><text x="1.8604%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="1.9939%" y="629" width="0.3067%" height="15" fill="rgb(226,3,54)" fg:x="26" fg:w="4"/><text x="2.2439%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="1.9939%" y="613" width="0.3067%" height="15" fill="rgb(245,192,40)" fg:x="26" fg:w="4"/><text x="2.2439%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.15%)</title><rect x="2.1472%" y="597" width="0.1534%" height="15" fill="rgb(238,167,29)" fg:x="28" fg:w="2"/><text x="2.3972%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.2239%" y="581" width="0.0767%" height="15" fill="rgb(232,182,51)" fg:x="29" fg:w="1"/><text x="2.4739%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 2.30%)</title><rect x="0.0767%" y="741" width="2.3006%" height="15" fill="rgb(231,60,39)" fg:x="1" fg:w="30"/><text x="0.3267%" y="751.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (23 samples, 1.76%)</title><rect x="0.6135%" y="725" width="1.7638%" height="15" fill="rgb(208,69,12)" fg:x="8" fg:w="23"/><text x="0.8635%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.3006%" y="709" width="0.0767%" height="15" fill="rgb(235,93,37)" fg:x="30" fg:w="1"/><text x="2.5506%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.15%)</title><rect x="2.3773%" y="693" width="0.1534%" height="15" fill="rgb(213,116,39)" fg:x="31" fg:w="2"/><text x="2.6273%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.15%)</title><rect x="2.3773%" y="677" width="0.1534%" height="15" fill="rgb(222,207,29)" fg:x="31" fg:w="2"/><text x="2.6273%" y="687.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (2 samples, 0.15%)</title><rect x="2.5307%" y="693" width="0.1534%" height="15" fill="rgb(206,96,30)" fg:x="33" fg:w="2"/><text x="2.7807%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.6074%" y="677" width="0.0767%" height="15" fill="rgb(218,138,4)" fg:x="34" fg:w="1"/><text x="2.8574%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.15%)</title><rect x="2.6840%" y="677" width="0.1534%" height="15" fill="rgb(250,191,14)" fg:x="35" fg:w="2"/><text x="2.9340%" y="687.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.23%)</title><rect x="2.9908%" y="645" width="0.2301%" height="15" fill="rgb(239,60,40)" fg:x="39" fg:w="3"/><text x="3.2408%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.23%)</title><rect x="2.9908%" y="629" width="0.2301%" height="15" fill="rgb(206,27,48)" fg:x="39" fg:w="3"/><text x="3.2408%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.1442%" y="613" width="0.0767%" height="15" fill="rgb(225,35,8)" fg:x="41" fg:w="1"/><text x="3.3942%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.1442%" y="597" width="0.0767%" height="15" fill="rgb(250,213,24)" fg:x="41" fg:w="1"/><text x="3.3942%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.1442%" y="581" width="0.0767%" height="15" fill="rgb(247,123,22)" fg:x="41" fg:w="1"/><text x="3.3942%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.1442%" y="565" width="0.0767%" height="15" fill="rgb(231,138,38)" fg:x="41" fg:w="1"/><text x="3.3942%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.3742%" y="613" width="0.0767%" height="15" fill="rgb(231,145,46)" fg:x="44" fg:w="1"/><text x="3.6242%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.3742%" y="597" width="0.0767%" height="15" fill="rgb(251,118,11)" fg:x="44" fg:w="1"/><text x="3.6242%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.3742%" y="581" width="0.0767%" height="15" fill="rgb(217,147,25)" fg:x="44" fg:w="1"/><text x="3.6242%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.3742%" y="565" width="0.0767%" height="15" fill="rgb(247,81,37)" fg:x="44" fg:w="1"/><text x="3.6242%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.3742%" y="549" width="0.0767%" height="15" fill="rgb(209,12,38)" fg:x="44" fg:w="1"/><text x="3.6242%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.4509%" y="613" width="0.0767%" height="15" fill="rgb(227,1,9)" fg:x="45" fg:w="1"/><text x="3.7009%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.4509%" y="597" width="0.0767%" height="15" fill="rgb(248,47,43)" fg:x="45" fg:w="1"/><text x="3.7009%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.4509%" y="581" width="0.0767%" height="15" fill="rgb(221,10,30)" fg:x="45" fg:w="1"/><text x="3.7009%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (5 samples, 0.38%)</title><rect x="3.2209%" y="645" width="0.3834%" height="15" fill="rgb(210,229,1)" fg:x="42" fg:w="5"/><text x="3.4709%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (5 samples, 0.38%)</title><rect x="3.2209%" y="629" width="0.3834%" height="15" fill="rgb(222,148,37)" fg:x="42" fg:w="5"/><text x="3.4709%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="3.5276%" y="613" width="0.0767%" height="15" fill="rgb(234,67,33)" fg:x="46" fg:w="1"/><text x="3.7776%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.5276%" y="597" width="0.0767%" height="15" fill="rgb(247,98,35)" fg:x="46" fg:w="1"/><text x="3.7776%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.5276%" y="581" width="0.0767%" height="15" fill="rgb(247,138,52)" fg:x="46" fg:w="1"/><text x="3.7776%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.5276%" y="565" width="0.0767%" height="15" fill="rgb(213,79,30)" fg:x="46" fg:w="1"/><text x="3.7776%" y="575.50"></text></g><g><title>&lt;plugins_core::emote::EmotePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.6043%" y="645" width="0.0767%" height="15" fill="rgb(246,177,23)" fg:x="47" fg:w="1"/><text x="3.8543%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.6043%" y="629" width="0.0767%" height="15" fill="rgb(230,62,27)" fg:x="47" fg:w="1"/><text x="3.8543%" y="639.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.6810%" y="645" width="0.0767%" height="15" fill="rgb(216,154,8)" fg:x="48" fg:w="1"/><text x="3.9310%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.6810%" y="629" width="0.0767%" height="15" fill="rgb(244,35,45)" fg:x="48" fg:w="1"/><text x="3.9310%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.6810%" y="613" width="0.0767%" height="15" fill="rgb(251,115,12)" fg:x="48" fg:w="1"/><text x="3.9310%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.6810%" y="597" width="0.0767%" height="15" fill="rgb(240,54,50)" fg:x="48" fg:w="1"/><text x="3.9310%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.6810%" y="581" width="0.0767%" height="15" fill="rgb(233,84,52)" fg:x="48" fg:w="1"/><text x="3.9310%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.6810%" y="565" width="0.0767%" height="15" fill="rgb(207,117,47)" fg:x="48" fg:w="1"/><text x="3.9310%" y="575.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.7577%" y="645" width="0.0767%" height="15" fill="rgb(249,43,39)" fg:x="49" fg:w="1"/><text x="4.0077%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.7577%" y="629" width="0.0767%" height="15" fill="rgb(209,38,44)" fg:x="49" fg:w="1"/><text x="4.0077%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="3.7577%" y="613" width="0.0767%" height="15" fill="rgb(236,212,23)" fg:x="49" fg:w="1"/><text x="4.0077%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.7577%" y="597" width="0.0767%" height="15" fill="rgb(242,79,21)" fg:x="49" fg:w="1"/><text x="4.0077%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.8344%" y="613" width="0.0767%" height="15" fill="rgb(211,96,35)" fg:x="50" fg:w="1"/><text x="4.0844%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.8344%" y="597" width="0.0767%" height="15" fill="rgb(253,215,40)" fg:x="50" fg:w="1"/><text x="4.0844%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.8344%" y="581" width="0.0767%" height="15" fill="rgb(211,81,21)" fg:x="50" fg:w="1"/><text x="4.0844%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.8344%" y="565" width="0.0767%" height="15" fill="rgb(208,190,38)" fg:x="50" fg:w="1"/><text x="4.0844%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.8344%" y="549" width="0.0767%" height="15" fill="rgb(235,213,38)" fg:x="50" fg:w="1"/><text x="4.0844%" y="559.50"></text></g><g><title>&lt;plugins_core::moving::actions::RemoveRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.9110%" y="613" width="0.0767%" height="15" fill="rgb(237,122,38)" fg:x="51" fg:w="1"/><text x="4.1610%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.9110%" y="597" width="0.0767%" height="15" fill="rgb(244,218,35)" fg:x="51" fg:w="1"/><text x="4.1610%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.9110%" y="581" width="0.0767%" height="15" fill="rgb(240,68,47)" fg:x="51" fg:w="1"/><text x="4.1610%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.9110%" y="565" width="0.0767%" height="15" fill="rgb(210,16,53)" fg:x="51" fg:w="1"/><text x="4.1610%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.9110%" y="549" width="0.0767%" height="15" fill="rgb(235,124,12)" fg:x="51" fg:w="1"/><text x="4.1610%" y="559.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.23%)</title><rect x="3.8344%" y="645" width="0.2301%" height="15" fill="rgb(224,169,11)" fg:x="50" fg:w="3"/><text x="4.0844%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.23%)</title><rect x="3.8344%" y="629" width="0.2301%" height="15" fill="rgb(250,166,2)" fg:x="50" fg:w="3"/><text x="4.0844%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="3.9877%" y="613" width="0.0767%" height="15" fill="rgb(242,216,29)" fg:x="52" fg:w="1"/><text x="4.2377%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.9877%" y="597" width="0.0767%" height="15" fill="rgb(230,116,27)" fg:x="52" fg:w="1"/><text x="4.2377%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.9877%" y="581" width="0.0767%" height="15" fill="rgb(228,99,48)" fg:x="52" fg:w="1"/><text x="4.2377%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.9877%" y="565" width="0.0767%" height="15" fill="rgb(253,11,6)" fg:x="52" fg:w="1"/><text x="4.2377%" y="575.50"></text></g><g><title>&lt;plugins_rune::actions::RuneAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.0644%" y="613" width="0.0767%" height="15" fill="rgb(247,143,39)" fg:x="53" fg:w="1"/><text x="4.3144%" y="623.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.15%)</title><rect x="4.0644%" y="645" width="0.1534%" height="15" fill="rgb(236,97,10)" fg:x="53" fg:w="2"/><text x="4.3144%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.15%)</title><rect x="4.0644%" y="629" width="0.1534%" height="15" fill="rgb(233,208,19)" fg:x="53" fg:w="2"/><text x="4.3144%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="4.1411%" y="613" width="0.0767%" height="15" fill="rgb(216,164,2)" fg:x="54" fg:w="1"/><text x="4.3911%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.1411%" y="597" width="0.0767%" height="15" fill="rgb(220,129,5)" fg:x="54" fg:w="1"/><text x="4.3911%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.15%)</title><rect x="4.2178%" y="645" width="0.1534%" height="15" fill="rgb(242,17,10)" fg:x="55" fg:w="2"/><text x="4.4678%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="4.2945%" y="629" width="0.0767%" height="15" fill="rgb(242,107,0)" fg:x="56" fg:w="1"/><text x="4.5445%" y="639.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (21 samples, 1.61%)</title><rect x="2.8374%" y="661" width="1.6104%" height="15" fill="rgb(251,28,31)" fg:x="37" fg:w="21"/><text x="3.0874%" y="671.50"></text></g><g><title>kernel::plugins::Plugin::schema (1 samples, 0.08%)</title><rect x="4.3712%" y="645" width="0.0767%" height="15" fill="rgb(233,223,10)" fg:x="57" fg:w="1"/><text x="4.6212%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.5245%" y="645" width="0.0767%" height="15" fill="rgb(215,21,27)" fg:x="59" fg:w="1"/><text x="4.7745%" y="655.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.23%)</title><rect x="4.4479%" y="661" width="0.2301%" height="15" fill="rgb(232,23,21)" fg:x="58" fg:w="3"/><text x="4.6979%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="4.6012%" y="645" width="0.0767%" height="15" fill="rgb(244,5,23)" fg:x="60" fg:w="1"/><text x="4.8512%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="4.6012%" y="629" width="0.0767%" height="15" fill="rgb(226,81,46)" fg:x="60" fg:w="1"/><text x="4.8512%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="4.6012%" y="613" width="0.0767%" height="15" fill="rgb(247,70,30)" fg:x="60" fg:w="1"/><text x="4.8512%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="4.6012%" y="597" width="0.0767%" height="15" fill="rgb(212,68,19)" fg:x="60" fg:w="1"/><text x="4.8512%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="4.6012%" y="581" width="0.0767%" height="15" fill="rgb(240,187,13)" fg:x="60" fg:w="1"/><text x="4.8512%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="4.6012%" y="565" width="0.0767%" height="15" fill="rgb(223,113,26)" fg:x="60" fg:w="1"/><text x="4.8512%" y="575.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="4.6012%" y="549" width="0.0767%" height="15" fill="rgb(206,192,2)" fg:x="60" fg:w="1"/><text x="4.8512%" y="559.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.15%)</title><rect x="4.7546%" y="645" width="0.1534%" height="15" fill="rgb(241,108,4)" fg:x="62" fg:w="2"/><text x="5.0046%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.15%)</title><rect x="4.7546%" y="629" width="0.1534%" height="15" fill="rgb(247,173,49)" fg:x="62" fg:w="2"/><text x="5.0046%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.15%)</title><rect x="4.7546%" y="613" width="0.1534%" height="15" fill="rgb(224,114,35)" fg:x="62" fg:w="2"/><text x="5.0046%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.15%)</title><rect x="4.7546%" y="597" width="0.1534%" height="15" fill="rgb(245,159,27)" fg:x="62" fg:w="2"/><text x="5.0046%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.8313%" y="581" width="0.0767%" height="15" fill="rgb(245,172,44)" fg:x="63" fg:w="1"/><text x="5.0813%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.8313%" y="565" width="0.0767%" height="15" fill="rgb(236,23,11)" fg:x="63" fg:w="1"/><text x="5.0813%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.8313%" y="549" width="0.0767%" height="15" fill="rgb(205,117,38)" fg:x="63" fg:w="1"/><text x="5.0813%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.8313%" y="533" width="0.0767%" height="15" fill="rgb(237,72,25)" fg:x="63" fg:w="1"/><text x="5.0813%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.8313%" y="517" width="0.0767%" height="15" fill="rgb(244,70,9)" fg:x="63" fg:w="1"/><text x="5.0813%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.8313%" y="501" width="0.0767%" height="15" fill="rgb(217,125,39)" fg:x="63" fg:w="1"/><text x="5.0813%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.8313%" y="485" width="0.0767%" height="15" fill="rgb(235,36,10)" fg:x="63" fg:w="1"/><text x="5.0813%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.8313%" y="469" width="0.0767%" height="15" fill="rgb(251,123,47)" fg:x="63" fg:w="1"/><text x="5.0813%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.8313%" y="453" width="0.0767%" height="15" fill="rgb(221,13,13)" fg:x="63" fg:w="1"/><text x="5.0813%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.8313%" y="437" width="0.0767%" height="15" fill="rgb(238,131,9)" fg:x="63" fg:w="1"/><text x="5.0813%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.8313%" y="421" width="0.0767%" height="15" fill="rgb(211,50,8)" fg:x="63" fg:w="1"/><text x="5.0813%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.0613%" y="597" width="0.0767%" height="15" fill="rgb(245,182,24)" fg:x="66" fg:w="1"/><text x="5.3113%" y="607.50"></text></g><g><title>glob::is_dir (6 samples, 0.46%)</title><rect x="5.1380%" y="597" width="0.4601%" height="15" fill="rgb(242,14,37)" fg:x="67" fg:w="6"/><text x="5.3880%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (6 samples, 0.46%)</title><rect x="5.1380%" y="581" width="0.4601%" height="15" fill="rgb(246,228,12)" fg:x="67" fg:w="6"/><text x="5.3880%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (6 samples, 0.46%)</title><rect x="5.1380%" y="565" width="0.4601%" height="15" fill="rgb(213,55,15)" fg:x="67" fg:w="6"/><text x="5.3880%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (6 samples, 0.46%)</title><rect x="5.1380%" y="549" width="0.4601%" height="15" fill="rgb(209,9,3)" fg:x="67" fg:w="6"/><text x="5.3880%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (6 samples, 0.46%)</title><rect x="5.1380%" y="533" width="0.4601%" height="15" fill="rgb(230,59,30)" fg:x="67" fg:w="6"/><text x="5.3880%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (6 samples, 0.46%)</title><rect x="5.1380%" y="517" width="0.4601%" height="15" fill="rgb(209,121,21)" fg:x="67" fg:w="6"/><text x="5.3880%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (6 samples, 0.46%)</title><rect x="5.1380%" y="501" width="0.4601%" height="15" fill="rgb(220,109,13)" fg:x="67" fg:w="6"/><text x="5.3880%" y="511.50"></text></g><g><title>statx (6 samples, 0.46%)</title><rect x="5.1380%" y="485" width="0.4601%" height="15" fill="rgb(232,18,1)" fg:x="67" fg:w="6"/><text x="5.3880%" y="495.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.69%)</title><rect x="4.9847%" y="629" width="0.6902%" height="15" fill="rgb(215,41,42)" fg:x="65" fg:w="9"/><text x="5.2347%" y="639.50"></text></g><g><title>glob::fill_todo (9 samples, 0.69%)</title><rect x="4.9847%" y="613" width="0.6902%" height="15" fill="rgb(224,123,36)" fg:x="65" fg:w="9"/><text x="5.2347%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="5.5982%" y="597" width="0.0767%" height="15" fill="rgb(240,125,3)" fg:x="73" fg:w="1"/><text x="5.8482%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="5.5982%" y="581" width="0.0767%" height="15" fill="rgb(205,98,50)" fg:x="73" fg:w="1"/><text x="5.8482%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="5.5982%" y="565" width="0.0767%" height="15" fill="rgb(205,185,37)" fg:x="73" fg:w="1"/><text x="5.8482%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="5.5982%" y="549" width="0.0767%" height="15" fill="rgb(238,207,15)" fg:x="73" fg:w="1"/><text x="5.8482%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="5.5982%" y="533" width="0.0767%" height="15" fill="rgb(213,199,42)" fg:x="73" fg:w="1"/><text x="5.8482%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="5.5982%" y="517" width="0.0767%" height="15" fill="rgb(235,201,11)" fg:x="73" fg:w="1"/><text x="5.8482%" y="527.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="5.5982%" y="501" width="0.0767%" height="15" fill="rgb(207,46,11)" fg:x="73" fg:w="1"/><text x="5.8482%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;glob::Paths&gt; (2 samples, 0.15%)</title><rect x="5.6748%" y="629" width="0.1534%" height="15" fill="rgb(241,35,35)" fg:x="74" fg:w="2"/><text x="5.9248%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.15%)</title><rect x="5.6748%" y="613" width="0.1534%" height="15" fill="rgb(243,32,47)" fg:x="74" fg:w="2"/><text x="5.9248%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.15%)</title><rect x="5.6748%" y="597" width="0.1534%" height="15" fill="rgb(247,202,23)" fg:x="74" fg:w="2"/><text x="5.9248%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.8282%" y="581" width="0.0767%" height="15" fill="rgb(219,102,11)" fg:x="76" fg:w="1"/><text x="6.0782%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.9049%" y="581" width="0.0767%" height="15" fill="rgb(243,110,44)" fg:x="77" fg:w="1"/><text x="6.1549%" y="591.50"></text></g><g><title>glob::Pattern::new (4 samples, 0.31%)</title><rect x="5.8282%" y="597" width="0.3067%" height="15" fill="rgb(222,74,54)" fg:x="76" fg:w="4"/><text x="6.0782%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.15%)</title><rect x="5.9816%" y="581" width="0.1534%" height="15" fill="rgb(216,99,12)" fg:x="78" fg:w="2"/><text x="6.2316%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.15%)</title><rect x="5.9816%" y="565" width="0.1534%" height="15" fill="rgb(226,22,26)" fg:x="78" fg:w="2"/><text x="6.2316%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.0583%" y="549" width="0.0767%" height="15" fill="rgb(217,163,10)" fg:x="79" fg:w="1"/><text x="6.3083%" y="559.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (20 samples, 1.53%)</title><rect x="4.6779%" y="661" width="1.5337%" height="15" fill="rgb(213,25,53)" fg:x="61" fg:w="20"/><text x="4.9279%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (17 samples, 1.30%)</title><rect x="4.9080%" y="645" width="1.3037%" height="15" fill="rgb(252,105,26)" fg:x="64" fg:w="17"/><text x="5.1580%" y="655.50"></text></g><g><title>glob::glob (5 samples, 0.38%)</title><rect x="5.8282%" y="629" width="0.3834%" height="15" fill="rgb(220,39,43)" fg:x="76" fg:w="5"/><text x="6.0782%" y="639.50"></text></g><g><title>glob::glob_with (5 samples, 0.38%)</title><rect x="5.8282%" y="613" width="0.3834%" height="15" fill="rgb(229,68,48)" fg:x="76" fg:w="5"/><text x="6.0782%" y="623.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_owned (1 samples, 0.08%)</title><rect x="6.1350%" y="597" width="0.0767%" height="15" fill="rgb(252,8,32)" fg:x="80" fg:w="1"/><text x="6.3850%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.1350%" y="581" width="0.0767%" height="15" fill="rgb(223,20,43)" fg:x="80" fg:w="1"/><text x="6.3850%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.1350%" y="565" width="0.0767%" height="15" fill="rgb(229,81,49)" fg:x="80" fg:w="1"/><text x="6.3850%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.1350%" y="549" width="0.0767%" height="15" fill="rgb(236,28,36)" fg:x="80" fg:w="1"/><text x="6.3850%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.1350%" y="533" width="0.0767%" height="15" fill="rgb(249,185,26)" fg:x="80" fg:w="1"/><text x="6.3850%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="6.1350%" y="517" width="0.0767%" height="15" fill="rgb(249,174,33)" fg:x="80" fg:w="1"/><text x="6.3850%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="6.1350%" y="501" width="0.0767%" height="15" fill="rgb(233,201,37)" fg:x="80" fg:w="1"/><text x="6.3850%" y="511.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (45 samples, 3.45%)</title><rect x="2.8374%" y="677" width="3.4509%" height="15" fill="rgb(221,78,26)" fg:x="37" fg:w="45"/><text x="3.0874%" y="687.50">ker..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="6.2117%" y="661" width="0.0767%" height="15" fill="rgb(250,127,30)" fg:x="81" fg:w="1"/><text x="6.4617%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.2117%" y="645" width="0.0767%" height="15" fill="rgb(230,49,44)" fg:x="81" fg:w="1"/><text x="6.4617%" y="655.50"></text></g><g><title>engine::session::Session::initialize (50 samples, 3.83%)</title><rect x="2.6840%" y="693" width="3.8344%" height="15" fill="rgb(229,67,23)" fg:x="35" fg:w="50"/><text x="2.9340%" y="703.50">engi..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (3 samples, 0.23%)</title><rect x="6.2883%" y="677" width="0.2301%" height="15" fill="rgb(249,83,47)" fg:x="82" fg:w="3"/><text x="6.5383%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.23%)</title><rect x="6.2883%" y="661" width="0.2301%" height="15" fill="rgb(215,43,3)" fg:x="82" fg:w="3"/><text x="6.5383%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.15%)</title><rect x="6.3650%" y="645" width="0.1534%" height="15" fill="rgb(238,154,13)" fg:x="83" fg:w="2"/><text x="6.6150%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.15%)</title><rect x="6.3650%" y="629" width="0.1534%" height="15" fill="rgb(219,56,2)" fg:x="83" fg:w="2"/><text x="6.6150%" y="639.50"></text></g><g><title>realloc (2 samples, 0.15%)</title><rect x="6.3650%" y="613" width="0.1534%" height="15" fill="rgb(233,0,4)" fg:x="83" fg:w="2"/><text x="6.6150%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (56 samples, 4.29%)</title><rect x="2.3773%" y="741" width="4.2945%" height="15" fill="rgb(235,30,7)" fg:x="31" fg:w="56"/><text x="2.6273%" y="751.50">&lt;engi..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (56 samples, 4.29%)</title><rect x="2.3773%" y="725" width="4.2945%" height="15" fill="rgb(250,79,13)" fg:x="31" fg:w="56"/><text x="2.6273%" y="735.50">engin..</text></g><g><title>engine::session::Session::new (56 samples, 4.29%)</title><rect x="2.3773%" y="709" width="4.2945%" height="15" fill="rgb(211,146,34)" fg:x="31" fg:w="56"/><text x="2.6273%" y="719.50">engin..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.15%)</title><rect x="6.5184%" y="693" width="0.1534%" height="15" fill="rgb(228,22,38)" fg:x="85" fg:w="2"/><text x="6.7684%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.15%)</title><rect x="6.5184%" y="677" width="0.1534%" height="15" fill="rgb(235,168,5)" fg:x="85" fg:w="2"/><text x="6.7684%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.5951%" y="661" width="0.0767%" height="15" fill="rgb(221,155,16)" fg:x="86" fg:w="1"/><text x="6.8451%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.5951%" y="645" width="0.0767%" height="15" fill="rgb(215,215,53)" fg:x="86" fg:w="1"/><text x="6.8451%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.5951%" y="629" width="0.0767%" height="15" fill="rgb(223,4,10)" fg:x="86" fg:w="1"/><text x="6.8451%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.6718%" y="693" width="0.0767%" height="15" fill="rgb(234,103,6)" fg:x="87" fg:w="1"/><text x="6.9218%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.15%)</title><rect x="6.6718%" y="709" width="0.1534%" height="15" fill="rgb(227,97,0)" fg:x="87" fg:w="2"/><text x="6.9218%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.7485%" y="693" width="0.0767%" height="15" fill="rgb(234,150,53)" fg:x="88" fg:w="1"/><text x="6.9985%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.8252%" y="677" width="0.0767%" height="15" fill="rgb(228,201,54)" fg:x="89" fg:w="1"/><text x="7.0752%" y="687.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.9018%" y="677" width="0.0767%" height="15" fill="rgb(222,22,37)" fg:x="90" fg:w="1"/><text x="7.1518%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="6.9018%" y="661" width="0.0767%" height="15" fill="rgb(237,53,32)" fg:x="90" fg:w="1"/><text x="7.1518%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.9018%" y="645" width="0.0767%" height="15" fill="rgb(233,25,53)" fg:x="90" fg:w="1"/><text x="7.1518%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="7.0552%" y="613" width="0.0767%" height="15" fill="rgb(210,40,34)" fg:x="92" fg:w="1"/><text x="7.3052%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.0552%" y="597" width="0.0767%" height="15" fill="rgb(241,220,44)" fg:x="92" fg:w="1"/><text x="7.3052%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.1319%" y="597" width="0.0767%" height="15" fill="rgb(235,28,35)" fg:x="93" fg:w="1"/><text x="7.3819%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.1319%" y="581" width="0.0767%" height="15" fill="rgb(210,56,17)" fg:x="93" fg:w="1"/><text x="7.3819%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.1319%" y="565" width="0.0767%" height="15" fill="rgb(224,130,29)" fg:x="93" fg:w="1"/><text x="7.3819%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.2086%" y="549" width="0.0767%" height="15" fill="rgb(235,212,8)" fg:x="94" fg:w="1"/><text x="7.4586%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.15%)</title><rect x="7.2086%" y="581" width="0.1534%" height="15" fill="rgb(223,33,50)" fg:x="94" fg:w="2"/><text x="7.4586%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.15%)</title><rect x="7.2086%" y="565" width="0.1534%" height="15" fill="rgb(219,149,13)" fg:x="94" fg:w="2"/><text x="7.4586%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.2853%" y="549" width="0.0767%" height="15" fill="rgb(250,156,29)" fg:x="95" fg:w="1"/><text x="7.5353%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.23%)</title><rect x="7.3620%" y="581" width="0.2301%" height="15" fill="rgb(216,193,19)" fg:x="96" fg:w="3"/><text x="7.6120%" y="591.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.23%)</title><rect x="7.3620%" y="565" width="0.2301%" height="15" fill="rgb(216,135,14)" fg:x="96" fg:w="3"/><text x="7.6120%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.5153%" y="549" width="0.0767%" height="15" fill="rgb(241,47,5)" fg:x="98" fg:w="1"/><text x="7.7653%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.5153%" y="533" width="0.0767%" height="15" fill="rgb(233,42,35)" fg:x="98" fg:w="1"/><text x="7.7653%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.23%)</title><rect x="7.6687%" y="565" width="0.2301%" height="15" fill="rgb(231,13,6)" fg:x="100" fg:w="3"/><text x="7.9187%" y="575.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.23%)</title><rect x="7.6687%" y="549" width="0.2301%" height="15" fill="rgb(207,181,40)" fg:x="100" fg:w="3"/><text x="7.9187%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.15%)</title><rect x="7.7454%" y="533" width="0.1534%" height="15" fill="rgb(254,173,49)" fg:x="101" fg:w="2"/><text x="7.9954%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.8221%" y="517" width="0.0767%" height="15" fill="rgb(221,1,38)" fg:x="102" fg:w="1"/><text x="8.0721%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.8221%" y="501" width="0.0767%" height="15" fill="rgb(206,124,46)" fg:x="102" fg:w="1"/><text x="8.0721%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.8221%" y="485" width="0.0767%" height="15" fill="rgb(249,21,11)" fg:x="102" fg:w="1"/><text x="8.0721%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.8221%" y="469" width="0.0767%" height="15" fill="rgb(222,201,40)" fg:x="102" fg:w="1"/><text x="8.0721%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.15%)</title><rect x="7.8988%" y="549" width="0.1534%" height="15" fill="rgb(235,61,29)" fg:x="103" fg:w="2"/><text x="8.1488%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.15%)</title><rect x="7.8988%" y="533" width="0.1534%" height="15" fill="rgb(219,207,3)" fg:x="103" fg:w="2"/><text x="8.1488%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.9755%" y="517" width="0.0767%" height="15" fill="rgb(222,56,46)" fg:x="104" fg:w="1"/><text x="8.2255%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.9755%" y="501" width="0.0767%" height="15" fill="rgb(239,76,54)" fg:x="104" fg:w="1"/><text x="8.2255%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.9755%" y="485" width="0.0767%" height="15" fill="rgb(231,124,27)" fg:x="104" fg:w="1"/><text x="8.2255%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.9755%" y="469" width="0.0767%" height="15" fill="rgb(249,195,6)" fg:x="104" fg:w="1"/><text x="8.2255%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.9755%" y="453" width="0.0767%" height="15" fill="rgb(237,174,47)" fg:x="104" fg:w="1"/><text x="8.2255%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="7.8988%" y="565" width="0.2301%" height="15" fill="rgb(206,201,31)" fg:x="103" fg:w="3"/><text x="8.1488%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.0521%" y="549" width="0.0767%" height="15" fill="rgb(231,57,52)" fg:x="105" fg:w="1"/><text x="8.3021%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.0521%" y="533" width="0.0767%" height="15" fill="rgb(248,177,22)" fg:x="105" fg:w="1"/><text x="8.3021%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.0521%" y="517" width="0.0767%" height="15" fill="rgb(215,211,37)" fg:x="105" fg:w="1"/><text x="8.3021%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (15 samples, 1.15%)</title><rect x="7.0552%" y="629" width="1.1503%" height="15" fill="rgb(241,128,51)" fg:x="92" fg:w="15"/><text x="7.3052%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.07%)</title><rect x="7.1319%" y="613" width="1.0736%" height="15" fill="rgb(227,165,31)" fg:x="93" fg:w="14"/><text x="7.3819%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.00%)</title><rect x="7.2086%" y="597" width="0.9969%" height="15" fill="rgb(228,167,24)" fg:x="94" fg:w="13"/><text x="7.4586%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.61%)</title><rect x="7.5920%" y="581" width="0.6135%" height="15" fill="rgb(228,143,12)" fg:x="99" fg:w="8"/><text x="7.8420%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.1288%" y="565" width="0.0767%" height="15" fill="rgb(249,149,8)" fg:x="106" fg:w="1"/><text x="8.3788%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.1288%" y="549" width="0.0767%" height="15" fill="rgb(243,35,44)" fg:x="106" fg:w="1"/><text x="8.3788%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.1288%" y="533" width="0.0767%" height="15" fill="rgb(246,89,9)" fg:x="106" fg:w="1"/><text x="8.3788%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::compare::Modified&gt; (1 samples, 0.08%)</title><rect x="8.2055%" y="629" width="0.0767%" height="15" fill="rgb(233,213,13)" fg:x="107" fg:w="1"/><text x="8.4555%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.2055%" y="613" width="0.0767%" height="15" fill="rgb(233,141,41)" fg:x="107" fg:w="1"/><text x="8.4555%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.2822%" y="581" width="0.0767%" height="15" fill="rgb(239,167,4)" fg:x="108" fg:w="1"/><text x="8.5322%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.3589%" y="581" width="0.0767%" height="15" fill="rgb(209,217,16)" fg:x="109" fg:w="1"/><text x="8.6089%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5123%" y="565" width="0.0767%" height="15" fill="rgb(219,88,35)" fg:x="111" fg:w="1"/><text x="8.7623%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.23%)</title><rect x="8.5890%" y="565" width="0.2301%" height="15" fill="rgb(220,193,23)" fg:x="112" fg:w="3"/><text x="8.8390%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.15%)</title><rect x="8.6656%" y="549" width="0.1534%" height="15" fill="rgb(230,90,52)" fg:x="113" fg:w="2"/><text x="8.9156%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.61%)</title><rect x="8.2822%" y="629" width="0.6135%" height="15" fill="rgb(252,106,19)" fg:x="108" fg:w="8"/><text x="8.5322%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.61%)</title><rect x="8.2822%" y="613" width="0.6135%" height="15" fill="rgb(206,74,20)" fg:x="108" fg:w="8"/><text x="8.5322%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.61%)</title><rect x="8.2822%" y="597" width="0.6135%" height="15" fill="rgb(230,138,44)" fg:x="108" fg:w="8"/><text x="8.5322%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.46%)</title><rect x="8.4356%" y="581" width="0.4601%" height="15" fill="rgb(235,182,43)" fg:x="110" fg:w="6"/><text x="8.6856%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.8190%" y="565" width="0.0767%" height="15" fill="rgb(242,16,51)" fg:x="115" fg:w="1"/><text x="9.0690%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.8190%" y="549" width="0.0767%" height="15" fill="rgb(248,9,4)" fg:x="115" fg:w="1"/><text x="9.0690%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.8190%" y="533" width="0.0767%" height="15" fill="rgb(210,31,22)" fg:x="115" fg:w="1"/><text x="9.0690%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.15%)</title><rect x="8.9724%" y="581" width="0.1534%" height="15" fill="rgb(239,54,39)" fg:x="117" fg:w="2"/><text x="9.2224%" y="591.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (2 samples, 0.15%)</title><rect x="9.1258%" y="581" width="0.1534%" height="15" fill="rgb(230,99,41)" fg:x="119" fg:w="2"/><text x="9.3758%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="9.2025%" y="565" width="0.0767%" height="15" fill="rgb(253,106,12)" fg:x="120" fg:w="1"/><text x="9.4525%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.2791%" y="549" width="0.0767%" height="15" fill="rgb(213,46,41)" fg:x="121" fg:w="1"/><text x="9.5291%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.15%)</title><rect x="9.4325%" y="533" width="0.1534%" height="15" fill="rgb(215,133,35)" fg:x="123" fg:w="2"/><text x="9.6825%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.5092%" y="517" width="0.0767%" height="15" fill="rgb(213,28,5)" fg:x="124" fg:w="1"/><text x="9.7592%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="9.5859%" y="533" width="0.0767%" height="15" fill="rgb(215,77,49)" fg:x="125" fg:w="1"/><text x="9.8359%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.5859%" y="517" width="0.0767%" height="15" fill="rgb(248,100,22)" fg:x="125" fg:w="1"/><text x="9.8359%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.5859%" y="501" width="0.0767%" height="15" fill="rgb(208,67,9)" fg:x="125" fg:w="1"/><text x="9.8359%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.5859%" y="485" width="0.0767%" height="15" fill="rgb(219,133,21)" fg:x="125" fg:w="1"/><text x="9.8359%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.5859%" y="469" width="0.0767%" height="15" fill="rgb(246,46,29)" fg:x="125" fg:w="1"/><text x="9.8359%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.5859%" y="453" width="0.0767%" height="15" fill="rgb(246,185,52)" fg:x="125" fg:w="1"/><text x="9.8359%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.5859%" y="437" width="0.0767%" height="15" fill="rgb(252,136,11)" fg:x="125" fg:w="1"/><text x="9.8359%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.7393%" y="485" width="0.0767%" height="15" fill="rgb(219,138,53)" fg:x="127" fg:w="1"/><text x="9.9893%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7393%" y="469" width="0.0767%" height="15" fill="rgb(211,51,23)" fg:x="127" fg:w="1"/><text x="9.9893%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.61%)</title><rect x="9.2791%" y="565" width="0.6135%" height="15" fill="rgb(247,221,28)" fg:x="121" fg:w="8"/><text x="9.5291%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.54%)</title><rect x="9.3558%" y="549" width="0.5368%" height="15" fill="rgb(251,222,45)" fg:x="122" fg:w="7"/><text x="9.6058%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.23%)</title><rect x="9.6626%" y="533" width="0.2301%" height="15" fill="rgb(217,162,53)" fg:x="126" fg:w="3"/><text x="9.9126%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.23%)</title><rect x="9.6626%" y="517" width="0.2301%" height="15" fill="rgb(229,93,14)" fg:x="126" fg:w="3"/><text x="9.9126%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.15%)</title><rect x="9.7393%" y="501" width="0.1534%" height="15" fill="rgb(209,67,49)" fg:x="127" fg:w="2"/><text x="9.9893%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.8160%" y="485" width="0.0767%" height="15" fill="rgb(213,87,29)" fg:x="128" fg:w="1"/><text x="10.0660%" y="495.50"></text></g><g><title>engine::session::Session::flush (44 samples, 3.37%)</title><rect x="6.6718%" y="725" width="3.3742%" height="15" fill="rgb(205,151,52)" fg:x="87" fg:w="44"/><text x="6.9218%" y="735.50">eng..</text></g><g><title>engine::session::state::State::close (42 samples, 3.22%)</title><rect x="6.8252%" y="709" width="3.2209%" height="15" fill="rgb(253,215,39)" fg:x="89" fg:w="42"/><text x="7.0752%" y="719.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (42 samples, 3.22%)</title><rect x="6.8252%" y="693" width="3.2209%" height="15" fill="rgb(221,220,41)" fg:x="89" fg:w="42"/><text x="7.0752%" y="703.50">eng..</text></g><g><title>core::iter::adapters::try_process (40 samples, 3.07%)</title><rect x="6.9785%" y="677" width="3.0675%" height="15" fill="rgb(218,133,21)" fg:x="91" fg:w="40"/><text x="7.2285%" y="687.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (40 samples, 3.07%)</title><rect x="6.9785%" y="661" width="3.0675%" height="15" fill="rgb(221,193,43)" fg:x="91" fg:w="40"/><text x="7.2285%" y="671.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (40 samples, 3.07%)</title><rect x="6.9785%" y="645" width="3.0675%" height="15" fill="rgb(240,128,52)" fg:x="91" fg:w="40"/><text x="7.2285%" y="655.50">eng..</text></g><g><title>kernel::model::any_entity_changes (15 samples, 1.15%)</title><rect x="8.8957%" y="629" width="1.1503%" height="15" fill="rgb(253,114,12)" fg:x="116" fg:w="15"/><text x="9.1457%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (15 samples, 1.15%)</title><rect x="8.8957%" y="613" width="1.1503%" height="15" fill="rgb(215,223,47)" fg:x="116" fg:w="15"/><text x="9.1457%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (15 samples, 1.15%)</title><rect x="8.8957%" y="597" width="1.1503%" height="15" fill="rgb(248,225,23)" fg:x="116" fg:w="15"/><text x="9.1457%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.77%)</title><rect x="9.2791%" y="581" width="0.7669%" height="15" fill="rgb(250,108,0)" fg:x="121" fg:w="10"/><text x="9.5291%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.15%)</title><rect x="9.8926%" y="565" width="0.1534%" height="15" fill="rgb(228,208,7)" fg:x="129" fg:w="2"/><text x="10.1426%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="9.9693%" y="549" width="0.0767%" height="15" fill="rgb(244,45,10)" fg:x="130" fg:w="1"/><text x="10.2193%" y="559.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="10.0460%" y="725" width="0.0767%" height="15" fill="rgb(207,125,25)" fg:x="131" fg:w="1"/><text x="10.2960%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="10.0460%" y="709" width="0.0767%" height="15" fill="rgb(210,195,18)" fg:x="131" fg:w="1"/><text x="10.2960%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="10.0460%" y="693" width="0.0767%" height="15" fill="rgb(249,80,12)" fg:x="131" fg:w="1"/><text x="10.2960%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.0460%" y="677" width="0.0767%" height="15" fill="rgb(221,65,9)" fg:x="131" fg:w="1"/><text x="10.2960%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="10.0460%" y="661" width="0.0767%" height="15" fill="rgb(235,49,36)" fg:x="131" fg:w="1"/><text x="10.2960%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="10.0460%" y="645" width="0.0767%" height="15" fill="rgb(225,32,20)" fg:x="131" fg:w="1"/><text x="10.2960%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.0460%" y="629" width="0.0767%" height="15" fill="rgb(215,141,46)" fg:x="131" fg:w="1"/><text x="10.2960%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0460%" y="613" width="0.0767%" height="15" fill="rgb(250,160,47)" fg:x="131" fg:w="1"/><text x="10.2960%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.15%)</title><rect x="10.2761%" y="693" width="0.1534%" height="15" fill="rgb(216,222,40)" fg:x="134" fg:w="2"/><text x="10.5261%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.15%)</title><rect x="10.2761%" y="677" width="0.1534%" height="15" fill="rgb(234,217,39)" fg:x="134" fg:w="2"/><text x="10.5261%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.15%)</title><rect x="10.2761%" y="661" width="0.1534%" height="15" fill="rgb(207,178,40)" fg:x="134" fg:w="2"/><text x="10.5261%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.3528%" y="645" width="0.0767%" height="15" fill="rgb(221,136,13)" fg:x="135" fg:w="1"/><text x="10.6028%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.3528%" y="629" width="0.0767%" height="15" fill="rgb(249,199,10)" fg:x="135" fg:w="1"/><text x="10.6028%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.3528%" y="613" width="0.0767%" height="15" fill="rgb(249,222,13)" fg:x="135" fg:w="1"/><text x="10.6028%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.3528%" y="597" width="0.0767%" height="15" fill="rgb(244,185,38)" fg:x="135" fg:w="1"/><text x="10.6028%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.3528%" y="581" width="0.0767%" height="15" fill="rgb(236,202,9)" fg:x="135" fg:w="1"/><text x="10.6028%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.3528%" y="565" width="0.0767%" height="15" fill="rgb(250,229,37)" fg:x="135" fg:w="1"/><text x="10.6028%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.3528%" y="549" width="0.0767%" height="15" fill="rgb(206,174,23)" fg:x="135" fg:w="1"/><text x="10.6028%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.3528%" y="533" width="0.0767%" height="15" fill="rgb(211,33,43)" fg:x="135" fg:w="1"/><text x="10.6028%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.3528%" y="517" width="0.0767%" height="15" fill="rgb(245,58,50)" fg:x="135" fg:w="1"/><text x="10.6028%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.3528%" y="501" width="0.0767%" height="15" fill="rgb(244,68,36)" fg:x="135" fg:w="1"/><text x="10.6028%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.3528%" y="485" width="0.0767%" height="15" fill="rgb(232,229,15)" fg:x="135" fg:w="1"/><text x="10.6028%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.3528%" y="469" width="0.0767%" height="15" fill="rgb(254,30,23)" fg:x="135" fg:w="1"/><text x="10.6028%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.3528%" y="453" width="0.0767%" height="15" fill="rgb(235,160,14)" fg:x="135" fg:w="1"/><text x="10.6028%" y="463.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.23%)</title><rect x="10.2761%" y="709" width="0.2301%" height="15" fill="rgb(212,155,44)" fg:x="134" fg:w="3"/><text x="10.5261%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.4294%" y="693" width="0.0767%" height="15" fill="rgb(226,2,50)" fg:x="136" fg:w="1"/><text x="10.6794%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="10.5061%" y="677" width="0.0767%" height="15" fill="rgb(234,177,6)" fg:x="137" fg:w="1"/><text x="10.7561%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.15%)</title><rect x="10.5061%" y="693" width="0.1534%" height="15" fill="rgb(217,24,9)" fg:x="137" fg:w="2"/><text x="10.7561%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.5828%" y="677" width="0.0767%" height="15" fill="rgb(220,13,46)" fg:x="138" fg:w="1"/><text x="10.8328%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.5828%" y="661" width="0.0767%" height="15" fill="rgb(239,221,27)" fg:x="138" fg:w="1"/><text x="10.8328%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="10.5828%" y="645" width="0.0767%" height="15" fill="rgb(222,198,25)" fg:x="138" fg:w="1"/><text x="10.8328%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.5828%" y="629" width="0.0767%" height="15" fill="rgb(211,99,13)" fg:x="138" fg:w="1"/><text x="10.8328%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.5828%" y="613" width="0.0767%" height="15" fill="rgb(232,111,31)" fg:x="138" fg:w="1"/><text x="10.8328%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.5828%" y="597" width="0.0767%" height="15" fill="rgb(245,82,37)" fg:x="138" fg:w="1"/><text x="10.8328%" y="607.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="10.6595%" y="693" width="0.0767%" height="15" fill="rgb(227,149,46)" fg:x="139" fg:w="1"/><text x="10.9095%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="10.6595%" y="677" width="0.0767%" height="15" fill="rgb(218,36,50)" fg:x="139" fg:w="1"/><text x="10.9095%" y="687.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.6595%" y="661" width="0.0767%" height="15" fill="rgb(226,80,48)" fg:x="139" fg:w="1"/><text x="10.9095%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.6595%" y="645" width="0.0767%" height="15" fill="rgb(238,224,15)" fg:x="139" fg:w="1"/><text x="10.9095%" y="655.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.6595%" y="629" width="0.0767%" height="15" fill="rgb(241,136,10)" fg:x="139" fg:w="1"/><text x="10.9095%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.6595%" y="613" width="0.0767%" height="15" fill="rgb(208,32,45)" fg:x="139" fg:w="1"/><text x="10.9095%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="10.6595%" y="597" width="0.0767%" height="15" fill="rgb(207,135,9)" fg:x="139" fg:w="1"/><text x="10.9095%" y="607.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="10.6595%" y="581" width="0.0767%" height="15" fill="rgb(206,86,44)" fg:x="139" fg:w="1"/><text x="10.9095%" y="591.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="10.6595%" y="565" width="0.0767%" height="15" fill="rgb(245,177,15)" fg:x="139" fg:w="1"/><text x="10.9095%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.7362%" y="613" width="0.0767%" height="15" fill="rgb(206,64,50)" fg:x="140" fg:w="1"/><text x="10.9862%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.7362%" y="597" width="0.0767%" height="15" fill="rgb(234,36,40)" fg:x="140" fg:w="1"/><text x="10.9862%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.7362%" y="581" width="0.0767%" height="15" fill="rgb(213,64,8)" fg:x="140" fg:w="1"/><text x="10.9862%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.7362%" y="565" width="0.0767%" height="15" fill="rgb(210,75,36)" fg:x="140" fg:w="1"/><text x="10.9862%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.7362%" y="549" width="0.0767%" height="15" fill="rgb(229,88,21)" fg:x="140" fg:w="1"/><text x="10.9862%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.7362%" y="533" width="0.0767%" height="15" fill="rgb(252,204,47)" fg:x="140" fg:w="1"/><text x="10.9862%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="10.7362%" y="517" width="0.0767%" height="15" fill="rgb(208,77,27)" fg:x="140" fg:w="1"/><text x="10.9862%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="10.7362%" y="501" width="0.0767%" height="15" fill="rgb(221,76,26)" fg:x="140" fg:w="1"/><text x="10.9862%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.15%)</title><rect x="10.7362%" y="629" width="0.1534%" height="15" fill="rgb(225,139,18)" fg:x="140" fg:w="2"/><text x="10.9862%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.8129%" y="613" width="0.0767%" height="15" fill="rgb(230,137,11)" fg:x="141" fg:w="1"/><text x="11.0629%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.23%)</title><rect x="10.7362%" y="645" width="0.2301%" height="15" fill="rgb(212,28,1)" fg:x="140" fg:w="3"/><text x="10.9862%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.8896%" y="629" width="0.0767%" height="15" fill="rgb(248,164,17)" fg:x="142" fg:w="1"/><text x="11.1396%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.31%)</title><rect x="10.7362%" y="677" width="0.3067%" height="15" fill="rgb(222,171,42)" fg:x="140" fg:w="4"/><text x="10.9862%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (4 samples, 0.31%)</title><rect x="10.7362%" y="661" width="0.3067%" height="15" fill="rgb(243,84,45)" fg:x="140" fg:w="4"/><text x="10.9862%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="10.9663%" y="645" width="0.0767%" height="15" fill="rgb(252,49,23)" fg:x="143" fg:w="1"/><text x="11.2163%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="10.9663%" y="629" width="0.0767%" height="15" fill="rgb(215,19,7)" fg:x="143" fg:w="1"/><text x="11.2163%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="10.9663%" y="613" width="0.0767%" height="15" fill="rgb(238,81,41)" fg:x="143" fg:w="1"/><text x="11.2163%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.1196%" y="645" width="0.0767%" height="15" fill="rgb(210,199,37)" fg:x="145" fg:w="1"/><text x="11.3696%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (15 samples, 1.15%)</title><rect x="10.1227%" y="725" width="1.1503%" height="15" fill="rgb(244,192,49)" fg:x="132" fg:w="15"/><text x="10.3727%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (10 samples, 0.77%)</title><rect x="10.5061%" y="709" width="0.7669%" height="15" fill="rgb(226,211,11)" fg:x="137" fg:w="10"/><text x="10.7561%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.54%)</title><rect x="10.7362%" y="693" width="0.5368%" height="15" fill="rgb(236,162,54)" fg:x="140" fg:w="7"/><text x="10.9862%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.23%)</title><rect x="11.0429%" y="677" width="0.2301%" height="15" fill="rgb(220,229,9)" fg:x="144" fg:w="3"/><text x="11.2929%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.23%)</title><rect x="11.0429%" y="661" width="0.2301%" height="15" fill="rgb(250,87,22)" fg:x="144" fg:w="3"/><text x="11.2929%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="11.1963%" y="645" width="0.0767%" height="15" fill="rgb(239,43,17)" fg:x="146" fg:w="1"/><text x="11.4463%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="11.1963%" y="629" width="0.0767%" height="15" fill="rgb(231,177,25)" fg:x="146" fg:w="1"/><text x="11.4463%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.1963%" y="613" width="0.0767%" height="15" fill="rgb(219,179,1)" fg:x="146" fg:w="1"/><text x="11.4463%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.1963%" y="597" width="0.0767%" height="15" fill="rgb(238,219,53)" fg:x="146" fg:w="1"/><text x="11.4463%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.1963%" y="581" width="0.0767%" height="15" fill="rgb(232,167,36)" fg:x="146" fg:w="1"/><text x="11.4463%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.1963%" y="565" width="0.0767%" height="15" fill="rgb(244,19,51)" fg:x="146" fg:w="1"/><text x="11.4463%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.1963%" y="549" width="0.0767%" height="15" fill="rgb(224,6,22)" fg:x="146" fg:w="1"/><text x="11.4463%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.1963%" y="533" width="0.0767%" height="15" fill="rgb(224,145,5)" fg:x="146" fg:w="1"/><text x="11.4463%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.1963%" y="517" width="0.0767%" height="15" fill="rgb(234,130,49)" fg:x="146" fg:w="1"/><text x="11.4463%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="11.2730%" y="725" width="0.0767%" height="15" fill="rgb(254,6,2)" fg:x="147" fg:w="1"/><text x="11.5230%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="11.2730%" y="709" width="0.0767%" height="15" fill="rgb(208,96,46)" fg:x="147" fg:w="1"/><text x="11.5230%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.2730%" y="693" width="0.0767%" height="15" fill="rgb(239,3,39)" fg:x="147" fg:w="1"/><text x="11.5230%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="11.2730%" y="677" width="0.0767%" height="15" fill="rgb(233,210,1)" fg:x="147" fg:w="1"/><text x="11.5230%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="11.2730%" y="661" width="0.0767%" height="15" fill="rgb(244,137,37)" fg:x="147" fg:w="1"/><text x="11.5230%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="11.3497%" y="693" width="0.0767%" height="15" fill="rgb(240,136,2)" fg:x="148" fg:w="1"/><text x="11.5997%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="11.3497%" y="677" width="0.0767%" height="15" fill="rgb(239,18,37)" fg:x="148" fg:w="1"/><text x="11.5997%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="11.3497%" y="661" width="0.0767%" height="15" fill="rgb(218,185,22)" fg:x="148" fg:w="1"/><text x="11.5997%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="11.3497%" y="645" width="0.0767%" height="15" fill="rgb(225,218,4)" fg:x="148" fg:w="1"/><text x="11.5997%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.3497%" y="629" width="0.0767%" height="15" fill="rgb(230,182,32)" fg:x="148" fg:w="1"/><text x="11.5997%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.3497%" y="613" width="0.0767%" height="15" fill="rgb(242,56,43)" fg:x="148" fg:w="1"/><text x="11.5997%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.3497%" y="597" width="0.0767%" height="15" fill="rgb(233,99,24)" fg:x="148" fg:w="1"/><text x="11.5997%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.3497%" y="581" width="0.0767%" height="15" fill="rgb(234,209,42)" fg:x="148" fg:w="1"/><text x="11.5997%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.3497%" y="565" width="0.0767%" height="15" fill="rgb(227,7,12)" fg:x="148" fg:w="1"/><text x="11.5997%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.3497%" y="549" width="0.0767%" height="15" fill="rgb(245,203,43)" fg:x="148" fg:w="1"/><text x="11.5997%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="11.4264%" y="629" width="0.1534%" height="15" fill="rgb(238,205,33)" fg:x="149" fg:w="2"/><text x="11.6764%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="11.4264%" y="613" width="0.1534%" height="15" fill="rgb(231,56,7)" fg:x="149" fg:w="2"/><text x="11.6764%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="11.4264%" y="597" width="0.1534%" height="15" fill="rgb(244,186,29)" fg:x="149" fg:w="2"/><text x="11.6764%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="11.4264%" y="581" width="0.1534%" height="15" fill="rgb(234,111,31)" fg:x="149" fg:w="2"/><text x="11.6764%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.15%)</title><rect x="11.4264%" y="565" width="0.1534%" height="15" fill="rgb(241,149,10)" fg:x="149" fg:w="2"/><text x="11.6764%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.5031%" y="549" width="0.0767%" height="15" fill="rgb(249,206,44)" fg:x="150" fg:w="1"/><text x="11.7531%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.23%)</title><rect x="11.4264%" y="677" width="0.2301%" height="15" fill="rgb(251,153,30)" fg:x="149" fg:w="3"/><text x="11.6764%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.23%)</title><rect x="11.4264%" y="661" width="0.2301%" height="15" fill="rgb(239,152,38)" fg:x="149" fg:w="3"/><text x="11.6764%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="11.4264%" y="645" width="0.2301%" height="15" fill="rgb(249,139,47)" fg:x="149" fg:w="3"/><text x="11.6764%" y="655.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="11.5798%" y="629" width="0.0767%" height="15" fill="rgb(244,64,35)" fg:x="151" fg:w="1"/><text x="11.8298%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.6564%" y="549" width="0.0767%" height="15" fill="rgb(216,46,15)" fg:x="152" fg:w="1"/><text x="11.9064%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.7331%" y="549" width="0.0767%" height="15" fill="rgb(250,74,19)" fg:x="153" fg:w="1"/><text x="11.9831%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.7331%" y="533" width="0.0767%" height="15" fill="rgb(249,42,33)" fg:x="153" fg:w="1"/><text x="11.9831%" y="543.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.23%)</title><rect x="11.6564%" y="645" width="0.2301%" height="15" fill="rgb(242,149,17)" fg:x="152" fg:w="3"/><text x="11.9064%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.23%)</title><rect x="11.6564%" y="629" width="0.2301%" height="15" fill="rgb(244,29,21)" fg:x="152" fg:w="3"/><text x="11.9064%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.23%)</title><rect x="11.6564%" y="613" width="0.2301%" height="15" fill="rgb(220,130,37)" fg:x="152" fg:w="3"/><text x="11.9064%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="11.6564%" y="597" width="0.2301%" height="15" fill="rgb(211,67,2)" fg:x="152" fg:w="3"/><text x="11.9064%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.23%)</title><rect x="11.6564%" y="581" width="0.2301%" height="15" fill="rgb(235,68,52)" fg:x="152" fg:w="3"/><text x="11.9064%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="11.6564%" y="565" width="0.2301%" height="15" fill="rgb(246,142,3)" fg:x="152" fg:w="3"/><text x="11.9064%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.8098%" y="549" width="0.0767%" height="15" fill="rgb(241,25,7)" fg:x="154" fg:w="1"/><text x="12.0598%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.8098%" y="533" width="0.0767%" height="15" fill="rgb(242,119,39)" fg:x="154" fg:w="1"/><text x="12.0598%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.8098%" y="517" width="0.0767%" height="15" fill="rgb(241,98,45)" fg:x="154" fg:w="1"/><text x="12.0598%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.8865%" y="613" width="0.0767%" height="15" fill="rgb(254,28,30)" fg:x="155" fg:w="1"/><text x="12.1365%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.8865%" y="597" width="0.0767%" height="15" fill="rgb(241,142,54)" fg:x="155" fg:w="1"/><text x="12.1365%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.8865%" y="581" width="0.0767%" height="15" fill="rgb(222,85,15)" fg:x="155" fg:w="1"/><text x="12.1365%" y="591.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (8 samples, 0.61%)</title><rect x="11.4264%" y="693" width="0.6135%" height="15" fill="rgb(210,85,47)" fg:x="149" fg:w="8"/><text x="11.6764%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (5 samples, 0.38%)</title><rect x="11.6564%" y="677" width="0.3834%" height="15" fill="rgb(224,206,25)" fg:x="152" fg:w="5"/><text x="11.9064%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (5 samples, 0.38%)</title><rect x="11.6564%" y="661" width="0.3834%" height="15" fill="rgb(243,201,19)" fg:x="152" fg:w="5"/><text x="11.9064%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.15%)</title><rect x="11.8865%" y="645" width="0.1534%" height="15" fill="rgb(236,59,4)" fg:x="155" fg:w="2"/><text x="12.1365%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.15%)</title><rect x="11.8865%" y="629" width="0.1534%" height="15" fill="rgb(254,179,45)" fg:x="155" fg:w="2"/><text x="12.1365%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.9632%" y="613" width="0.0767%" height="15" fill="rgb(226,14,10)" fg:x="156" fg:w="1"/><text x="12.2132%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9632%" y="597" width="0.0767%" height="15" fill="rgb(244,27,41)" fg:x="156" fg:w="1"/><text x="12.2132%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.9632%" y="581" width="0.0767%" height="15" fill="rgb(235,35,32)" fg:x="156" fg:w="1"/><text x="12.2132%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9632%" y="565" width="0.0767%" height="15" fill="rgb(218,68,31)" fg:x="156" fg:w="1"/><text x="12.2132%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.9632%" y="549" width="0.0767%" height="15" fill="rgb(207,120,37)" fg:x="156" fg:w="1"/><text x="12.2132%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9632%" y="533" width="0.0767%" height="15" fill="rgb(227,98,0)" fg:x="156" fg:w="1"/><text x="12.2132%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.9632%" y="517" width="0.0767%" height="15" fill="rgb(207,7,3)" fg:x="156" fg:w="1"/><text x="12.2132%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (10 samples, 0.77%)</title><rect x="11.3497%" y="725" width="0.7669%" height="15" fill="rgb(206,98,19)" fg:x="148" fg:w="10"/><text x="11.5997%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (10 samples, 0.77%)</title><rect x="11.3497%" y="709" width="0.7669%" height="15" fill="rgb(217,5,26)" fg:x="148" fg:w="10"/><text x="11.5997%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="12.0399%" y="693" width="0.0767%" height="15" fill="rgb(235,190,38)" fg:x="157" fg:w="1"/><text x="12.2899%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="12.0399%" y="677" width="0.0767%" height="15" fill="rgb(247,86,24)" fg:x="157" fg:w="1"/><text x="12.2899%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="12.1933%" y="709" width="0.0767%" height="15" fill="rgb(205,101,16)" fg:x="159" fg:w="1"/><text x="12.4433%" y="719.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="12.1933%" y="693" width="0.0767%" height="15" fill="rgb(246,168,33)" fg:x="159" fg:w="1"/><text x="12.4433%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.1933%" y="677" width="0.0767%" height="15" fill="rgb(231,114,1)" fg:x="159" fg:w="1"/><text x="12.4433%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.1933%" y="661" width="0.0767%" height="15" fill="rgb(207,184,53)" fg:x="159" fg:w="1"/><text x="12.4433%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.2699%" y="709" width="0.0767%" height="15" fill="rgb(224,95,51)" fg:x="160" fg:w="1"/><text x="12.5199%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.2699%" y="693" width="0.0767%" height="15" fill="rgb(212,188,45)" fg:x="160" fg:w="1"/><text x="12.5199%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.2699%" y="677" width="0.0767%" height="15" fill="rgb(223,154,38)" fg:x="160" fg:w="1"/><text x="12.5199%" y="687.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="12.3466%" y="709" width="0.0767%" height="15" fill="rgb(251,22,52)" fg:x="161" fg:w="1"/><text x="12.5966%" y="719.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="12.3466%" y="693" width="0.0767%" height="15" fill="rgb(229,209,22)" fg:x="161" fg:w="1"/><text x="12.5966%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.3466%" y="677" width="0.0767%" height="15" fill="rgb(234,138,34)" fg:x="161" fg:w="1"/><text x="12.5966%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.3466%" y="661" width="0.0767%" height="15" fill="rgb(212,95,11)" fg:x="161" fg:w="1"/><text x="12.5966%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="12.3466%" y="645" width="0.0767%" height="15" fill="rgb(240,179,47)" fg:x="161" fg:w="1"/><text x="12.5966%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="12.4233%" y="709" width="0.0767%" height="15" fill="rgb(240,163,11)" fg:x="162" fg:w="1"/><text x="12.6733%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="12.4233%" y="693" width="0.0767%" height="15" fill="rgb(236,37,12)" fg:x="162" fg:w="1"/><text x="12.6733%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="12.4233%" y="677" width="0.0767%" height="15" fill="rgb(232,164,16)" fg:x="162" fg:w="1"/><text x="12.6733%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="12.4233%" y="661" width="0.0767%" height="15" fill="rgb(244,205,15)" fg:x="162" fg:w="1"/><text x="12.6733%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="12.4233%" y="645" width="0.0767%" height="15" fill="rgb(223,117,47)" fg:x="162" fg:w="1"/><text x="12.6733%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="12.4233%" y="629" width="0.0767%" height="15" fill="rgb(244,107,35)" fg:x="162" fg:w="1"/><text x="12.6733%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.4233%" y="613" width="0.0767%" height="15" fill="rgb(205,140,8)" fg:x="162" fg:w="1"/><text x="12.6733%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.4233%" y="597" width="0.0767%" height="15" fill="rgb(228,84,46)" fg:x="162" fg:w="1"/><text x="12.6733%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="12.4233%" y="581" width="0.0767%" height="15" fill="rgb(254,188,9)" fg:x="162" fg:w="1"/><text x="12.6733%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.15%)</title><rect x="12.5000%" y="693" width="0.1534%" height="15" fill="rgb(206,112,54)" fg:x="163" fg:w="2"/><text x="12.7500%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5767%" y="677" width="0.0767%" height="15" fill="rgb(216,84,49)" fg:x="164" fg:w="1"/><text x="12.8267%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.5767%" y="661" width="0.0767%" height="15" fill="rgb(214,194,35)" fg:x="164" fg:w="1"/><text x="12.8267%" y="671.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="12.6534%" y="677" width="0.0767%" height="15" fill="rgb(249,28,3)" fg:x="165" fg:w="1"/><text x="12.9034%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="12.7301%" y="645" width="0.0767%" height="15" fill="rgb(222,56,52)" fg:x="166" fg:w="1"/><text x="12.9801%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.7301%" y="629" width="0.0767%" height="15" fill="rgb(245,217,50)" fg:x="166" fg:w="1"/><text x="12.9801%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.7301%" y="613" width="0.0767%" height="15" fill="rgb(213,201,24)" fg:x="166" fg:w="1"/><text x="12.9801%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="12.7301%" y="597" width="0.0767%" height="15" fill="rgb(248,116,28)" fg:x="166" fg:w="1"/><text x="12.9801%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="12.8067%" y="613" width="0.0767%" height="15" fill="rgb(219,72,43)" fg:x="167" fg:w="1"/><text x="13.0567%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.15%)</title><rect x="12.8067%" y="645" width="0.1534%" height="15" fill="rgb(209,138,14)" fg:x="167" fg:w="2"/><text x="13.0567%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.15%)</title><rect x="12.8067%" y="629" width="0.1534%" height="15" fill="rgb(222,18,33)" fg:x="167" fg:w="2"/><text x="13.0567%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="12.8834%" y="613" width="0.0767%" height="15" fill="rgb(213,199,7)" fg:x="168" fg:w="1"/><text x="13.1334%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.15%)</title><rect x="13.0368%" y="565" width="0.1534%" height="15" fill="rgb(250,110,10)" fg:x="170" fg:w="2"/><text x="13.2868%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.15%)</title><rect x="13.0368%" y="549" width="0.1534%" height="15" fill="rgb(248,123,6)" fg:x="170" fg:w="2"/><text x="13.2868%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.15%)</title><rect x="13.0368%" y="533" width="0.1534%" height="15" fill="rgb(206,91,31)" fg:x="170" fg:w="2"/><text x="13.2868%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.15%)</title><rect x="13.0368%" y="517" width="0.1534%" height="15" fill="rgb(211,154,13)" fg:x="170" fg:w="2"/><text x="13.2868%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.23%)</title><rect x="13.0368%" y="581" width="0.2301%" height="15" fill="rgb(225,148,7)" fg:x="170" fg:w="3"/><text x="13.2868%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.1902%" y="565" width="0.0767%" height="15" fill="rgb(220,160,43)" fg:x="172" fg:w="1"/><text x="13.4402%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.1902%" y="549" width="0.0767%" height="15" fill="rgb(213,52,39)" fg:x="172" fg:w="1"/><text x="13.4402%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="13.2669%" y="565" width="0.0767%" height="15" fill="rgb(243,137,7)" fg:x="173" fg:w="1"/><text x="13.5169%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="13.4202%" y="517" width="0.0767%" height="15" fill="rgb(230,79,13)" fg:x="175" fg:w="1"/><text x="13.6702%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.4202%" y="501" width="0.0767%" height="15" fill="rgb(247,105,23)" fg:x="175" fg:w="1"/><text x="13.6702%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.4202%" y="485" width="0.0767%" height="15" fill="rgb(223,179,41)" fg:x="175" fg:w="1"/><text x="13.6702%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.4202%" y="469" width="0.0767%" height="15" fill="rgb(218,9,34)" fg:x="175" fg:w="1"/><text x="13.6702%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.4202%" y="453" width="0.0767%" height="15" fill="rgb(222,106,8)" fg:x="175" fg:w="1"/><text x="13.6702%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.4202%" y="437" width="0.0767%" height="15" fill="rgb(211,220,0)" fg:x="175" fg:w="1"/><text x="13.6702%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.4202%" y="421" width="0.0767%" height="15" fill="rgb(229,52,16)" fg:x="175" fg:w="1"/><text x="13.6702%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="13.4969%" y="517" width="0.0767%" height="15" fill="rgb(212,155,18)" fg:x="176" fg:w="1"/><text x="13.7469%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="13.4969%" y="501" width="0.0767%" height="15" fill="rgb(242,21,14)" fg:x="176" fg:w="1"/><text x="13.7469%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.4969%" y="485" width="0.0767%" height="15" fill="rgb(222,19,48)" fg:x="176" fg:w="1"/><text x="13.7469%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.23%)</title><rect x="13.4202%" y="549" width="0.2301%" height="15" fill="rgb(232,45,27)" fg:x="175" fg:w="3"/><text x="13.6702%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="13.4202%" y="533" width="0.2301%" height="15" fill="rgb(249,103,42)" fg:x="175" fg:w="3"/><text x="13.6702%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.5736%" y="517" width="0.0767%" height="15" fill="rgb(246,81,33)" fg:x="177" fg:w="1"/><text x="13.8236%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.5736%" y="501" width="0.0767%" height="15" fill="rgb(252,33,42)" fg:x="177" fg:w="1"/><text x="13.8236%" y="511.50"></text></g><g><title>ryu::pretty::format64 (2 samples, 0.15%)</title><rect x="13.6503%" y="533" width="0.1534%" height="15" fill="rgb(209,212,41)" fg:x="178" fg:w="2"/><text x="13.9003%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.38%)</title><rect x="13.8037%" y="533" width="0.3834%" height="15" fill="rgb(207,154,6)" fg:x="180" fg:w="5"/><text x="14.0537%" y="543.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.38%)</title><rect x="13.8037%" y="517" width="0.3834%" height="15" fill="rgb(223,64,47)" fg:x="180" fg:w="5"/><text x="14.0537%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.31%)</title><rect x="13.8804%" y="501" width="0.3067%" height="15" fill="rgb(211,161,38)" fg:x="181" fg:w="4"/><text x="14.1304%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.23%)</title><rect x="13.9571%" y="485" width="0.2301%" height="15" fill="rgb(219,138,40)" fg:x="182" fg:w="3"/><text x="14.2071%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.23%)</title><rect x="13.9571%" y="469" width="0.2301%" height="15" fill="rgb(241,228,46)" fg:x="182" fg:w="3"/><text x="14.2071%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.23%)</title><rect x="13.9571%" y="453" width="0.2301%" height="15" fill="rgb(223,209,38)" fg:x="182" fg:w="3"/><text x="14.2071%" y="463.50"></text></g><g><title>realloc (3 samples, 0.23%)</title><rect x="13.9571%" y="437" width="0.2301%" height="15" fill="rgb(236,164,45)" fg:x="182" fg:w="3"/><text x="14.2071%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="14.2638%" y="517" width="0.0767%" height="15" fill="rgb(231,15,5)" fg:x="186" fg:w="1"/><text x="14.5138%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.2638%" y="501" width="0.0767%" height="15" fill="rgb(252,35,15)" fg:x="186" fg:w="1"/><text x="14.5138%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.77%)</title><rect x="13.6503%" y="549" width="0.7669%" height="15" fill="rgb(248,181,18)" fg:x="178" fg:w="10"/><text x="13.9003%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="14.1871%" y="533" width="0.2301%" height="15" fill="rgb(233,39,42)" fg:x="185" fg:w="3"/><text x="14.4371%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.3405%" y="517" width="0.0767%" height="15" fill="rgb(238,110,33)" fg:x="187" fg:w="1"/><text x="14.5905%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.3405%" y="501" width="0.0767%" height="15" fill="rgb(233,195,10)" fg:x="187" fg:w="1"/><text x="14.5905%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.3405%" y="485" width="0.0767%" height="15" fill="rgb(254,105,3)" fg:x="187" fg:w="1"/><text x="14.5905%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (19 samples, 1.46%)</title><rect x="13.0368%" y="597" width="1.4571%" height="15" fill="rgb(221,225,9)" fg:x="170" fg:w="19"/><text x="13.2868%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.23%)</title><rect x="13.2669%" y="581" width="1.2270%" height="15" fill="rgb(224,227,45)" fg:x="173" fg:w="16"/><text x="13.5169%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (15 samples, 1.15%)</title><rect x="13.3436%" y="565" width="1.1503%" height="15" fill="rgb(229,198,43)" fg:x="174" fg:w="15"/><text x="13.5936%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.4172%" y="549" width="0.0767%" height="15" fill="rgb(206,209,35)" fg:x="188" fg:w="1"/><text x="14.6672%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.4172%" y="533" width="0.0767%" height="15" fill="rgb(245,195,53)" fg:x="188" fg:w="1"/><text x="14.6672%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.4172%" y="517" width="0.0767%" height="15" fill="rgb(240,92,26)" fg:x="188" fg:w="1"/><text x="14.6672%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.5706%" y="565" width="0.0767%" height="15" fill="rgb(207,40,23)" fg:x="190" fg:w="1"/><text x="14.8206%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.6472%" y="549" width="0.0767%" height="15" fill="rgb(223,111,35)" fg:x="191" fg:w="1"/><text x="14.8972%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.6472%" y="533" width="0.0767%" height="15" fill="rgb(229,147,28)" fg:x="191" fg:w="1"/><text x="14.8972%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.7239%" y="533" width="0.0767%" height="15" fill="rgb(211,29,28)" fg:x="192" fg:w="1"/><text x="14.9739%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.46%)</title><rect x="14.4939%" y="597" width="0.4601%" height="15" fill="rgb(228,72,33)" fg:x="189" fg:w="6"/><text x="14.7439%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.38%)</title><rect x="14.5706%" y="581" width="0.3834%" height="15" fill="rgb(205,214,31)" fg:x="190" fg:w="5"/><text x="14.8206%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="14.6472%" y="565" width="0.3067%" height="15" fill="rgb(224,111,15)" fg:x="191" fg:w="4"/><text x="14.8972%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.23%)</title><rect x="14.7239%" y="549" width="0.2301%" height="15" fill="rgb(253,21,26)" fg:x="192" fg:w="3"/><text x="14.9739%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.15%)</title><rect x="14.8006%" y="533" width="0.1534%" height="15" fill="rgb(245,139,43)" fg:x="193" fg:w="2"/><text x="15.0506%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.15%)</title><rect x="14.8006%" y="517" width="0.1534%" height="15" fill="rgb(252,170,7)" fg:x="193" fg:w="2"/><text x="15.0506%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.8773%" y="501" width="0.0767%" height="15" fill="rgb(231,118,14)" fg:x="194" fg:w="1"/><text x="15.1273%" y="511.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPath as core::convert::From&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::from (1 samples, 0.08%)</title><rect x="14.9540%" y="549" width="0.0767%" height="15" fill="rgb(238,83,0)" fg:x="195" fg:w="1"/><text x="15.2040%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.15%)</title><rect x="14.9540%" y="565" width="0.1534%" height="15" fill="rgb(221,39,39)" fg:x="195" fg:w="2"/><text x="15.2040%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.0307%" y="549" width="0.0767%" height="15" fill="rgb(222,119,46)" fg:x="196" fg:w="1"/><text x="15.2807%" y="559.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="15.1074%" y="565" width="0.0767%" height="15" fill="rgb(222,165,49)" fg:x="197" fg:w="1"/><text x="15.3574%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="15.1074%" y="549" width="0.0767%" height="15" fill="rgb(219,113,52)" fg:x="197" fg:w="1"/><text x="15.3574%" y="559.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="15.1074%" y="533" width="0.0767%" height="15" fill="rgb(214,7,15)" fg:x="197" fg:w="1"/><text x="15.3574%" y="543.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="15.1074%" y="517" width="0.0767%" height="15" fill="rgb(235,32,4)" fg:x="197" fg:w="1"/><text x="15.3574%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.1074%" y="501" width="0.0767%" height="15" fill="rgb(238,90,54)" fg:x="197" fg:w="1"/><text x="15.3574%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (5 samples, 0.38%)</title><rect x="14.9540%" y="581" width="0.3834%" height="15" fill="rgb(213,208,19)" fg:x="195" fg:w="5"/><text x="15.2040%" y="591.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.15%)</title><rect x="15.1840%" y="565" width="0.1534%" height="15" fill="rgb(233,156,4)" fg:x="198" fg:w="2"/><text x="15.4340%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="15.2607%" y="549" width="0.0767%" height="15" fill="rgb(207,194,5)" fg:x="199" fg:w="1"/><text x="15.5107%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.15%)</title><rect x="15.3374%" y="549" width="0.1534%" height="15" fill="rgb(206,111,30)" fg:x="200" fg:w="2"/><text x="15.5874%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.15%)</title><rect x="15.3374%" y="533" width="0.1534%" height="15" fill="rgb(243,70,54)" fg:x="200" fg:w="2"/><text x="15.5874%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="15.5675%" y="517" width="0.0767%" height="15" fill="rgb(242,28,8)" fg:x="203" fg:w="1"/><text x="15.8175%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.7209%" y="453" width="0.0767%" height="15" fill="rgb(219,106,18)" fg:x="205" fg:w="1"/><text x="15.9709%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.7209%" y="437" width="0.0767%" height="15" fill="rgb(244,222,10)" fg:x="205" fg:w="1"/><text x="15.9709%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.31%)</title><rect x="15.5675%" y="533" width="0.3067%" height="15" fill="rgb(236,179,52)" fg:x="203" fg:w="4"/><text x="15.8175%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.23%)</title><rect x="15.6442%" y="517" width="0.2301%" height="15" fill="rgb(213,23,39)" fg:x="204" fg:w="3"/><text x="15.8942%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.23%)</title><rect x="15.6442%" y="501" width="0.2301%" height="15" fill="rgb(238,48,10)" fg:x="204" fg:w="3"/><text x="15.8942%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.23%)</title><rect x="15.6442%" y="485" width="0.2301%" height="15" fill="rgb(251,196,23)" fg:x="204" fg:w="3"/><text x="15.8942%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.23%)</title><rect x="15.6442%" y="469" width="0.2301%" height="15" fill="rgb(250,152,24)" fg:x="204" fg:w="3"/><text x="15.8942%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.7975%" y="453" width="0.0767%" height="15" fill="rgb(209,150,17)" fg:x="206" fg:w="1"/><text x="16.0475%" y="463.50"></text></g><g><title>engine::session::Session::flush (45 samples, 3.45%)</title><rect x="12.5000%" y="709" width="3.4509%" height="15" fill="rgb(234,202,34)" fg:x="163" fg:w="45"/><text x="12.7500%" y="719.50">eng..</text></g><g><title>engine::session::Session::save_changes (43 samples, 3.30%)</title><rect x="12.6534%" y="693" width="3.2975%" height="15" fill="rgb(253,148,53)" fg:x="165" fg:w="43"/><text x="12.9034%" y="703.50">eng..</text></g><g><title>engine::session::state::State::close (42 samples, 3.22%)</title><rect x="12.7301%" y="677" width="3.2209%" height="15" fill="rgb(218,129,16)" fg:x="166" fg:w="42"/><text x="12.9801%" y="687.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (42 samples, 3.22%)</title><rect x="12.7301%" y="661" width="3.2209%" height="15" fill="rgb(216,85,19)" fg:x="166" fg:w="42"/><text x="12.9801%" y="671.50">eng..</text></g><g><title>core::iter::adapters::try_process (39 samples, 2.99%)</title><rect x="12.9601%" y="645" width="2.9908%" height="15" fill="rgb(235,228,7)" fg:x="169" fg:w="39"/><text x="13.2101%" y="655.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (39 samples, 2.99%)</title><rect x="12.9601%" y="629" width="2.9908%" height="15" fill="rgb(245,175,0)" fg:x="169" fg:w="39"/><text x="13.2101%" y="639.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (39 samples, 2.99%)</title><rect x="12.9601%" y="613" width="2.9908%" height="15" fill="rgb(208,168,36)" fg:x="169" fg:w="39"/><text x="13.2101%" y="623.50">eng..</text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.00%)</title><rect x="14.9540%" y="597" width="0.9969%" height="15" fill="rgb(246,171,24)" fg:x="195" fg:w="13"/><text x="15.2040%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.61%)</title><rect x="15.3374%" y="581" width="0.6135%" height="15" fill="rgb(215,142,24)" fg:x="200" fg:w="8"/><text x="15.5874%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.61%)</title><rect x="15.3374%" y="565" width="0.6135%" height="15" fill="rgb(250,187,7)" fg:x="200" fg:w="8"/><text x="15.5874%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.46%)</title><rect x="15.4908%" y="549" width="0.4601%" height="15" fill="rgb(228,66,33)" fg:x="202" fg:w="6"/><text x="15.7408%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.8742%" y="533" width="0.0767%" height="15" fill="rgb(234,215,21)" fg:x="207" fg:w="1"/><text x="16.1242%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.0276%" y="661" width="0.0767%" height="15" fill="rgb(222,191,20)" fg:x="209" fg:w="1"/><text x="16.2776%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.0276%" y="645" width="0.0767%" height="15" fill="rgb(245,79,54)" fg:x="209" fg:w="1"/><text x="16.2776%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.0276%" y="629" width="0.0767%" height="15" fill="rgb(240,10,37)" fg:x="209" fg:w="1"/><text x="16.2776%" y="639.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="16.1043%" y="597" width="0.0767%" height="15" fill="rgb(214,192,32)" fg:x="210" fg:w="1"/><text x="16.3543%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.23%)</title><rect x="16.0276%" y="693" width="0.2301%" height="15" fill="rgb(209,36,54)" fg:x="209" fg:w="3"/><text x="16.2776%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.23%)</title><rect x="16.0276%" y="677" width="0.2301%" height="15" fill="rgb(220,10,11)" fg:x="209" fg:w="3"/><text x="16.2776%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="16.1043%" y="661" width="0.1534%" height="15" fill="rgb(221,106,17)" fg:x="210" fg:w="2"/><text x="16.3543%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="16.1043%" y="645" width="0.1534%" height="15" fill="rgb(251,142,44)" fg:x="210" fg:w="2"/><text x="16.3543%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.15%)</title><rect x="16.1043%" y="629" width="0.1534%" height="15" fill="rgb(238,13,15)" fg:x="210" fg:w="2"/><text x="16.3543%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="16.1043%" y="613" width="0.1534%" height="15" fill="rgb(208,107,27)" fg:x="210" fg:w="2"/><text x="16.3543%" y="623.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="16.1810%" y="597" width="0.0767%" height="15" fill="rgb(205,136,37)" fg:x="211" fg:w="1"/><text x="16.4310%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="16.2577%" y="677" width="0.0767%" height="15" fill="rgb(250,205,27)" fg:x="212" fg:w="1"/><text x="16.5077%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.2577%" y="661" width="0.0767%" height="15" fill="rgb(210,80,43)" fg:x="212" fg:w="1"/><text x="16.5077%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.2577%" y="645" width="0.0767%" height="15" fill="rgb(247,160,36)" fg:x="212" fg:w="1"/><text x="16.5077%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.2577%" y="629" width="0.0767%" height="15" fill="rgb(234,13,49)" fg:x="212" fg:w="1"/><text x="16.5077%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.2577%" y="613" width="0.0767%" height="15" fill="rgb(234,122,0)" fg:x="212" fg:w="1"/><text x="16.5077%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="16.2577%" y="597" width="0.0767%" height="15" fill="rgb(207,146,38)" fg:x="212" fg:w="1"/><text x="16.5077%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="16.3344%" y="677" width="0.0767%" height="15" fill="rgb(207,177,25)" fg:x="213" fg:w="1"/><text x="16.5844%" y="687.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="16.3344%" y="661" width="0.0767%" height="15" fill="rgb(211,178,42)" fg:x="213" fg:w="1"/><text x="16.5844%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="16.4110%" y="549" width="0.0767%" height="15" fill="rgb(230,69,54)" fg:x="214" fg:w="1"/><text x="16.6610%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.4110%" y="533" width="0.0767%" height="15" fill="rgb(214,135,41)" fg:x="214" fg:w="1"/><text x="16.6610%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.15%)</title><rect x="16.4110%" y="629" width="0.1534%" height="15" fill="rgb(237,67,25)" fg:x="214" fg:w="2"/><text x="16.6610%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="16.4110%" y="613" width="0.1534%" height="15" fill="rgb(222,189,50)" fg:x="214" fg:w="2"/><text x="16.6610%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="16.4110%" y="597" width="0.1534%" height="15" fill="rgb(245,148,34)" fg:x="214" fg:w="2"/><text x="16.6610%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.15%)</title><rect x="16.4110%" y="581" width="0.1534%" height="15" fill="rgb(222,29,6)" fg:x="214" fg:w="2"/><text x="16.6610%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="16.4110%" y="565" width="0.1534%" height="15" fill="rgb(221,189,43)" fg:x="214" fg:w="2"/><text x="16.6610%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.4877%" y="549" width="0.0767%" height="15" fill="rgb(207,36,27)" fg:x="215" fg:w="1"/><text x="16.7377%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.4877%" y="533" width="0.0767%" height="15" fill="rgb(217,90,24)" fg:x="215" fg:w="1"/><text x="16.7377%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.23%)</title><rect x="16.4110%" y="661" width="0.2301%" height="15" fill="rgb(224,66,35)" fg:x="214" fg:w="3"/><text x="16.6610%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.23%)</title><rect x="16.4110%" y="645" width="0.2301%" height="15" fill="rgb(221,13,50)" fg:x="214" fg:w="3"/><text x="16.6610%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="16.5644%" y="629" width="0.0767%" height="15" fill="rgb(236,68,49)" fg:x="216" fg:w="1"/><text x="16.8144%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="16.5644%" y="613" width="0.0767%" height="15" fill="rgb(229,146,28)" fg:x="216" fg:w="1"/><text x="16.8144%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="16.5644%" y="597" width="0.0767%" height="15" fill="rgb(225,31,38)" fg:x="216" fg:w="1"/><text x="16.8144%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.5644%" y="581" width="0.0767%" height="15" fill="rgb(250,208,3)" fg:x="216" fg:w="1"/><text x="16.8144%" y="591.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="16.6411%" y="661" width="0.0767%" height="15" fill="rgb(246,54,23)" fg:x="217" fg:w="1"/><text x="16.8911%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.6411%" y="645" width="0.0767%" height="15" fill="rgb(243,76,11)" fg:x="217" fg:w="1"/><text x="16.8911%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.6411%" y="629" width="0.0767%" height="15" fill="rgb(245,21,50)" fg:x="217" fg:w="1"/><text x="16.8911%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="16.7178%" y="629" width="0.0767%" height="15" fill="rgb(228,9,43)" fg:x="218" fg:w="1"/><text x="16.9678%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.7178%" y="613" width="0.0767%" height="15" fill="rgb(208,100,47)" fg:x="218" fg:w="1"/><text x="16.9678%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.7178%" y="597" width="0.0767%" height="15" fill="rgb(232,26,8)" fg:x="218" fg:w="1"/><text x="16.9678%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (12 samples, 0.92%)</title><rect x="15.9509%" y="709" width="0.9202%" height="15" fill="rgb(216,166,38)" fg:x="208" fg:w="12"/><text x="16.2009%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.61%)</title><rect x="16.2577%" y="693" width="0.6135%" height="15" fill="rgb(251,202,51)" fg:x="212" fg:w="8"/><text x="16.5077%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.46%)</title><rect x="16.4110%" y="677" width="0.4601%" height="15" fill="rgb(254,216,34)" fg:x="214" fg:w="6"/><text x="16.6610%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.15%)</title><rect x="16.7178%" y="661" width="0.1534%" height="15" fill="rgb(251,32,27)" fg:x="218" fg:w="2"/><text x="16.9678%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.15%)</title><rect x="16.7178%" y="645" width="0.1534%" height="15" fill="rgb(208,127,28)" fg:x="218" fg:w="2"/><text x="16.9678%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="16.7945%" y="629" width="0.0767%" height="15" fill="rgb(224,137,22)" fg:x="219" fg:w="1"/><text x="17.0445%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.15%)</title><rect x="16.8712%" y="677" width="0.1534%" height="15" fill="rgb(254,70,32)" fg:x="220" fg:w="2"/><text x="17.1212%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.15%)</title><rect x="16.8712%" y="661" width="0.1534%" height="15" fill="rgb(229,75,37)" fg:x="220" fg:w="2"/><text x="17.1212%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.15%)</title><rect x="16.8712%" y="645" width="0.1534%" height="15" fill="rgb(252,64,23)" fg:x="220" fg:w="2"/><text x="17.1212%" y="655.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="16.9479%" y="629" width="0.0767%" height="15" fill="rgb(232,162,48)" fg:x="221" fg:w="1"/><text x="17.1979%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.0245%" y="629" width="0.0767%" height="15" fill="rgb(246,160,12)" fg:x="222" fg:w="1"/><text x="17.2745%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="17.0245%" y="613" width="0.0767%" height="15" fill="rgb(247,166,0)" fg:x="222" fg:w="1"/><text x="17.2745%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.15%)</title><rect x="17.0245%" y="661" width="0.1534%" height="15" fill="rgb(249,219,21)" fg:x="222" fg:w="2"/><text x="17.2745%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.15%)</title><rect x="17.0245%" y="645" width="0.1534%" height="15" fill="rgb(205,209,3)" fg:x="222" fg:w="2"/><text x="17.2745%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="17.1012%" y="629" width="0.0767%" height="15" fill="rgb(243,44,1)" fg:x="223" fg:w="1"/><text x="17.3512%" y="639.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="17.1779%" y="661" width="0.0767%" height="15" fill="rgb(206,159,16)" fg:x="224" fg:w="1"/><text x="17.4279%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.1779%" y="645" width="0.0767%" height="15" fill="rgb(244,77,30)" fg:x="224" fg:w="1"/><text x="17.4279%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="17.1779%" y="629" width="0.0767%" height="15" fill="rgb(218,69,12)" fg:x="224" fg:w="1"/><text x="17.4279%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="17.1779%" y="613" width="0.0767%" height="15" fill="rgb(212,87,7)" fg:x="224" fg:w="1"/><text x="17.4279%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.1779%" y="597" width="0.0767%" height="15" fill="rgb(245,114,25)" fg:x="224" fg:w="1"/><text x="17.4279%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.1779%" y="581" width="0.0767%" height="15" fill="rgb(210,61,42)" fg:x="224" fg:w="1"/><text x="17.4279%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.1779%" y="565" width="0.0767%" height="15" fill="rgb(211,52,33)" fg:x="224" fg:w="1"/><text x="17.4279%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.1779%" y="549" width="0.0767%" height="15" fill="rgb(234,58,33)" fg:x="224" fg:w="1"/><text x="17.4279%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (6 samples, 0.46%)</title><rect x="16.8712%" y="709" width="0.4601%" height="15" fill="rgb(220,115,36)" fg:x="220" fg:w="6"/><text x="17.1212%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (6 samples, 0.46%)</title><rect x="16.8712%" y="693" width="0.4601%" height="15" fill="rgb(243,153,54)" fg:x="220" fg:w="6"/><text x="17.1212%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.31%)</title><rect x="17.0245%" y="677" width="0.3067%" height="15" fill="rgb(251,47,18)" fg:x="222" fg:w="4"/><text x="17.2745%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="17.2546%" y="661" width="0.0767%" height="15" fill="rgb(242,102,42)" fg:x="225" fg:w="1"/><text x="17.5046%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.2546%" y="645" width="0.0767%" height="15" fill="rgb(234,31,38)" fg:x="225" fg:w="1"/><text x="17.5046%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="17.2546%" y="629" width="0.0767%" height="15" fill="rgb(221,117,51)" fg:x="225" fg:w="1"/><text x="17.5046%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="17.3313%" y="709" width="0.0767%" height="15" fill="rgb(212,20,18)" fg:x="226" fg:w="1"/><text x="17.5813%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="17.3313%" y="693" width="0.0767%" height="15" fill="rgb(245,133,36)" fg:x="226" fg:w="1"/><text x="17.5813%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="17.3313%" y="677" width="0.0767%" height="15" fill="rgb(212,6,19)" fg:x="226" fg:w="1"/><text x="17.5813%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="17.3313%" y="661" width="0.0767%" height="15" fill="rgb(218,1,36)" fg:x="226" fg:w="1"/><text x="17.5813%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="17.3313%" y="645" width="0.0767%" height="15" fill="rgb(246,84,54)" fg:x="226" fg:w="1"/><text x="17.5813%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="17.3313%" y="629" width="0.0767%" height="15" fill="rgb(242,110,6)" fg:x="226" fg:w="1"/><text x="17.5813%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.3313%" y="613" width="0.0767%" height="15" fill="rgb(214,47,5)" fg:x="226" fg:w="1"/><text x="17.5813%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="17.3313%" y="597" width="0.0767%" height="15" fill="rgb(218,159,25)" fg:x="226" fg:w="1"/><text x="17.5813%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.3313%" y="581" width="0.0767%" height="15" fill="rgb(215,211,28)" fg:x="226" fg:w="1"/><text x="17.5813%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.3313%" y="565" width="0.0767%" height="15" fill="rgb(238,59,32)" fg:x="226" fg:w="1"/><text x="17.5813%" y="575.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="17.4080%" y="709" width="0.0767%" height="15" fill="rgb(226,82,3)" fg:x="227" fg:w="1"/><text x="17.6580%" y="719.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="17.4080%" y="693" width="0.0767%" height="15" fill="rgb(240,164,32)" fg:x="227" fg:w="1"/><text x="17.6580%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="17.4080%" y="677" width="0.0767%" height="15" fill="rgb(232,46,7)" fg:x="227" fg:w="1"/><text x="17.6580%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="17.4080%" y="661" width="0.0767%" height="15" fill="rgb(229,129,53)" fg:x="227" fg:w="1"/><text x="17.6580%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="17.4080%" y="645" width="0.0767%" height="15" fill="rgb(234,188,29)" fg:x="227" fg:w="1"/><text x="17.6580%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.4080%" y="629" width="0.0767%" height="15" fill="rgb(246,141,4)" fg:x="227" fg:w="1"/><text x="17.6580%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.4080%" y="613" width="0.0767%" height="15" fill="rgb(229,23,39)" fg:x="227" fg:w="1"/><text x="17.6580%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="17.4847%" y="693" width="0.0767%" height="15" fill="rgb(206,12,3)" fg:x="228" fg:w="1"/><text x="17.7347%" y="703.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (72 samples, 5.52%)</title><rect x="12.1166%" y="725" width="5.5215%" height="15" fill="rgb(252,226,20)" fg:x="158" fg:w="72"/><text x="12.3666%" y="735.50">plugins..</text></g><g><title>plugins_core::tools::set_wearing (2 samples, 0.15%)</title><rect x="17.4847%" y="709" width="0.1534%" height="15" fill="rgb(216,123,35)" fg:x="228" fg:w="2"/><text x="17.7347%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="17.5613%" y="693" width="0.0767%" height="15" fill="rgb(212,68,40)" fg:x="229" fg:w="1"/><text x="17.8113%" y="703.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="17.6380%" y="725" width="0.0767%" height="15" fill="rgb(254,125,32)" fg:x="230" fg:w="1"/><text x="17.8880%" y="735.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="17.6380%" y="709" width="0.0767%" height="15" fill="rgb(253,97,22)" fg:x="230" fg:w="1"/><text x="17.8880%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="17.6380%" y="693" width="0.0767%" height="15" fill="rgb(241,101,14)" fg:x="230" fg:w="1"/><text x="17.8880%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="17.6380%" y="677" width="0.0767%" height="15" fill="rgb(238,103,29)" fg:x="230" fg:w="1"/><text x="17.8880%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="17.6380%" y="661" width="0.0767%" height="15" fill="rgb(233,195,47)" fg:x="230" fg:w="1"/><text x="17.8880%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="17.6380%" y="645" width="0.0767%" height="15" fill="rgb(246,218,30)" fg:x="230" fg:w="1"/><text x="17.8880%" y="655.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="17.6380%" y="629" width="0.0767%" height="15" fill="rgb(219,145,47)" fg:x="230" fg:w="1"/><text x="17.8880%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="17.6380%" y="613" width="0.0767%" height="15" fill="rgb(243,12,26)" fg:x="230" fg:w="1"/><text x="17.8880%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.6380%" y="597" width="0.0767%" height="15" fill="rgb(214,87,16)" fg:x="230" fg:w="1"/><text x="17.8880%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.6380%" y="581" width="0.0767%" height="15" fill="rgb(208,99,42)" fg:x="230" fg:w="1"/><text x="17.8880%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.6380%" y="565" width="0.0767%" height="15" fill="rgb(253,99,2)" fg:x="230" fg:w="1"/><text x="17.8880%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.6380%" y="549" width="0.0767%" height="15" fill="rgb(220,168,23)" fg:x="230" fg:w="1"/><text x="17.8880%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.6380%" y="533" width="0.0767%" height="15" fill="rgb(242,38,24)" fg:x="230" fg:w="1"/><text x="17.8880%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.6380%" y="517" width="0.0767%" height="15" fill="rgb(225,182,9)" fg:x="230" fg:w="1"/><text x="17.8880%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.6380%" y="501" width="0.0767%" height="15" fill="rgb(243,178,37)" fg:x="230" fg:w="1"/><text x="17.8880%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::hands (1 samples, 0.08%)</title><rect x="17.7147%" y="725" width="0.0767%" height="15" fill="rgb(232,139,19)" fg:x="231" fg:w="1"/><text x="17.9647%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="17.7147%" y="709" width="0.0767%" height="15" fill="rgb(225,201,24)" fg:x="231" fg:w="1"/><text x="17.9647%" y="719.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="17.7914%" y="693" width="0.0767%" height="15" fill="rgb(221,47,46)" fg:x="232" fg:w="1"/><text x="18.0414%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.7914%" y="677" width="0.0767%" height="15" fill="rgb(249,23,13)" fg:x="232" fg:w="1"/><text x="18.0414%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="17.8681%" y="661" width="0.0767%" height="15" fill="rgb(219,9,5)" fg:x="233" fg:w="1"/><text x="18.1181%" y="671.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="17.8681%" y="645" width="0.0767%" height="15" fill="rgb(254,171,16)" fg:x="233" fg:w="1"/><text x="18.1181%" y="655.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.15%)</title><rect x="17.8681%" y="677" width="0.1534%" height="15" fill="rgb(230,171,20)" fg:x="233" fg:w="2"/><text x="18.1181%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="17.9448%" y="661" width="0.0767%" height="15" fill="rgb(210,71,41)" fg:x="234" fg:w="1"/><text x="18.1948%" y="671.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="17.9448%" y="645" width="0.0767%" height="15" fill="rgb(206,173,20)" fg:x="234" fg:w="1"/><text x="18.1948%" y="655.50"></text></g><g><title>plugins_core::build::Build::new (3 samples, 0.23%)</title><rect x="17.8681%" y="693" width="0.2301%" height="15" fill="rgb(233,88,34)" fg:x="233" fg:w="3"/><text x="18.1181%" y="703.50"></text></g><g><title>kernel::model::builder::EntityBuilder::with_key (1 samples, 0.08%)</title><rect x="18.0215%" y="677" width="0.0767%" height="15" fill="rgb(223,209,46)" fg:x="235" fg:w="1"/><text x="18.2715%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.0982%" y="645" width="0.0767%" height="15" fill="rgb(250,43,18)" fg:x="236" fg:w="1"/><text x="18.3482%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.0982%" y="629" width="0.0767%" height="15" fill="rgb(208,13,10)" fg:x="236" fg:w="1"/><text x="18.3482%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.0982%" y="613" width="0.0767%" height="15" fill="rgb(212,200,36)" fg:x="236" fg:w="1"/><text x="18.3482%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.0982%" y="597" width="0.0767%" height="15" fill="rgb(225,90,30)" fg:x="236" fg:w="1"/><text x="18.3482%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.0982%" y="581" width="0.0767%" height="15" fill="rgb(236,182,39)" fg:x="236" fg:w="1"/><text x="18.3482%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.0982%" y="565" width="0.0767%" height="15" fill="rgb(212,144,35)" fg:x="236" fg:w="1"/><text x="18.3482%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.0982%" y="549" width="0.0767%" height="15" fill="rgb(228,63,44)" fg:x="236" fg:w="1"/><text x="18.3482%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.0982%" y="533" width="0.0767%" height="15" fill="rgb(228,109,6)" fg:x="236" fg:w="1"/><text x="18.3482%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.0982%" y="517" width="0.0767%" height="15" fill="rgb(238,117,24)" fg:x="236" fg:w="1"/><text x="18.3482%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.0982%" y="501" width="0.0767%" height="15" fill="rgb(242,26,26)" fg:x="236" fg:w="1"/><text x="18.3482%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.0982%" y="485" width="0.0767%" height="15" fill="rgb(221,92,48)" fg:x="236" fg:w="1"/><text x="18.3482%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.0982%" y="469" width="0.0767%" height="15" fill="rgb(209,209,32)" fg:x="236" fg:w="1"/><text x="18.3482%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.0982%" y="453" width="0.0767%" height="15" fill="rgb(221,70,22)" fg:x="236" fg:w="1"/><text x="18.3482%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.0982%" y="437" width="0.0767%" height="15" fill="rgb(248,145,5)" fg:x="236" fg:w="1"/><text x="18.3482%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.0982%" y="421" width="0.0767%" height="15" fill="rgb(226,116,26)" fg:x="236" fg:w="1"/><text x="18.3482%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="18.1748%" y="581" width="0.0767%" height="15" fill="rgb(244,5,17)" fg:x="237" fg:w="1"/><text x="18.4248%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.1748%" y="565" width="0.0767%" height="15" fill="rgb(252,159,33)" fg:x="237" fg:w="1"/><text x="18.4248%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.23%)</title><rect x="18.0982%" y="677" width="0.2301%" height="15" fill="rgb(206,71,0)" fg:x="236" fg:w="3"/><text x="18.3482%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.23%)</title><rect x="18.0982%" y="661" width="0.2301%" height="15" fill="rgb(233,118,54)" fg:x="236" fg:w="3"/><text x="18.3482%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="18.1748%" y="645" width="0.1534%" height="15" fill="rgb(234,83,48)" fg:x="237" fg:w="2"/><text x="18.4248%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="18.1748%" y="629" width="0.1534%" height="15" fill="rgb(228,3,54)" fg:x="237" fg:w="2"/><text x="18.4248%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.15%)</title><rect x="18.1748%" y="613" width="0.1534%" height="15" fill="rgb(226,155,13)" fg:x="237" fg:w="2"/><text x="18.4248%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="18.1748%" y="597" width="0.1534%" height="15" fill="rgb(241,28,37)" fg:x="237" fg:w="2"/><text x="18.4248%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.2515%" y="581" width="0.0767%" height="15" fill="rgb(233,93,10)" fg:x="238" fg:w="1"/><text x="18.5015%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.2515%" y="565" width="0.0767%" height="15" fill="rgb(225,113,19)" fg:x="238" fg:w="1"/><text x="18.5015%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="18.3282%" y="661" width="0.0767%" height="15" fill="rgb(241,2,18)" fg:x="239" fg:w="1"/><text x="18.5782%" y="671.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="18.4049%" y="661" width="0.0767%" height="15" fill="rgb(228,207,21)" fg:x="240" fg:w="1"/><text x="18.6549%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="18.4049%" y="645" width="0.0767%" height="15" fill="rgb(213,211,35)" fg:x="240" fg:w="1"/><text x="18.6549%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="18.4049%" y="629" width="0.0767%" height="15" fill="rgb(209,83,10)" fg:x="240" fg:w="1"/><text x="18.6549%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.4049%" y="613" width="0.0767%" height="15" fill="rgb(209,164,1)" fg:x="240" fg:w="1"/><text x="18.6549%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.4049%" y="597" width="0.0767%" height="15" fill="rgb(213,184,43)" fg:x="240" fg:w="1"/><text x="18.6549%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="18.4816%" y="629" width="0.0767%" height="15" fill="rgb(231,61,34)" fg:x="241" fg:w="1"/><text x="18.7316%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="18.4816%" y="613" width="0.0767%" height="15" fill="rgb(235,75,3)" fg:x="241" fg:w="1"/><text x="18.7316%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.4816%" y="597" width="0.0767%" height="15" fill="rgb(220,106,47)" fg:x="241" fg:w="1"/><text x="18.7316%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.4816%" y="581" width="0.0767%" height="15" fill="rgb(210,196,33)" fg:x="241" fg:w="1"/><text x="18.7316%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.4816%" y="565" width="0.0767%" height="15" fill="rgb(229,154,42)" fg:x="241" fg:w="1"/><text x="18.7316%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.15%)</title><rect x="18.4816%" y="645" width="0.1534%" height="15" fill="rgb(228,114,26)" fg:x="241" fg:w="2"/><text x="18.7316%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.5583%" y="629" width="0.0767%" height="15" fill="rgb(208,144,1)" fg:x="242" fg:w="1"/><text x="18.8083%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.5583%" y="613" width="0.0767%" height="15" fill="rgb(239,112,37)" fg:x="242" fg:w="1"/><text x="18.8083%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.5583%" y="597" width="0.0767%" height="15" fill="rgb(210,96,50)" fg:x="242" fg:w="1"/><text x="18.8083%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.5583%" y="581" width="0.0767%" height="15" fill="rgb(222,178,2)" fg:x="242" fg:w="1"/><text x="18.8083%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.5583%" y="565" width="0.0767%" height="15" fill="rgb(226,74,18)" fg:x="242" fg:w="1"/><text x="18.8083%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.5583%" y="549" width="0.0767%" height="15" fill="rgb(225,67,54)" fg:x="242" fg:w="1"/><text x="18.8083%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.5583%" y="533" width="0.0767%" height="15" fill="rgb(251,92,32)" fg:x="242" fg:w="1"/><text x="18.8083%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.5583%" y="517" width="0.0767%" height="15" fill="rgb(228,149,22)" fg:x="242" fg:w="1"/><text x="18.8083%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.5583%" y="501" width="0.0767%" height="15" fill="rgb(243,54,13)" fg:x="242" fg:w="1"/><text x="18.8083%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.5583%" y="485" width="0.0767%" height="15" fill="rgb(243,180,28)" fg:x="242" fg:w="1"/><text x="18.8083%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.5583%" y="469" width="0.0767%" height="15" fill="rgb(208,167,24)" fg:x="242" fg:w="1"/><text x="18.8083%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.5583%" y="453" width="0.0767%" height="15" fill="rgb(245,73,45)" fg:x="242" fg:w="1"/><text x="18.8083%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.38%)</title><rect x="18.3282%" y="677" width="0.3834%" height="15" fill="rgb(237,203,48)" fg:x="239" fg:w="5"/><text x="18.5782%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.23%)</title><rect x="18.4816%" y="661" width="0.2301%" height="15" fill="rgb(211,197,16)" fg:x="241" fg:w="3"/><text x="18.7316%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="18.6350%" y="645" width="0.0767%" height="15" fill="rgb(243,99,51)" fg:x="243" fg:w="1"/><text x="18.8850%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.6350%" y="629" width="0.0767%" height="15" fill="rgb(215,123,29)" fg:x="243" fg:w="1"/><text x="18.8850%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="18.6350%" y="613" width="0.0767%" height="15" fill="rgb(239,186,37)" fg:x="243" fg:w="1"/><text x="18.8850%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.6350%" y="597" width="0.0767%" height="15" fill="rgb(252,136,39)" fg:x="243" fg:w="1"/><text x="18.8850%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.6350%" y="581" width="0.0767%" height="15" fill="rgb(223,213,32)" fg:x="243" fg:w="1"/><text x="18.8850%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (13 samples, 1.00%)</title><rect x="17.7914%" y="725" width="0.9969%" height="15" fill="rgb(233,115,5)" fg:x="232" fg:w="13"/><text x="18.0414%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (13 samples, 1.00%)</title><rect x="17.7914%" y="709" width="0.9969%" height="15" fill="rgb(207,226,44)" fg:x="232" fg:w="13"/><text x="18.0414%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (9 samples, 0.69%)</title><rect x="18.0982%" y="693" width="0.6902%" height="15" fill="rgb(208,126,0)" fg:x="236" fg:w="9"/><text x="18.3482%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.7117%" y="677" width="0.0767%" height="15" fill="rgb(244,66,21)" fg:x="244" fg:w="1"/><text x="18.9617%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.7117%" y="661" width="0.0767%" height="15" fill="rgb(222,97,12)" fg:x="244" fg:w="1"/><text x="18.9617%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.7117%" y="645" width="0.0767%" height="15" fill="rgb(219,213,19)" fg:x="244" fg:w="1"/><text x="18.9617%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.7117%" y="629" width="0.0767%" height="15" fill="rgb(252,169,30)" fg:x="244" fg:w="1"/><text x="18.9617%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.7117%" y="613" width="0.0767%" height="15" fill="rgb(206,32,51)" fg:x="244" fg:w="1"/><text x="18.9617%" y="623.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="18.7883%" y="693" width="0.0767%" height="15" fill="rgb(250,172,42)" fg:x="245" fg:w="1"/><text x="19.0383%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.7883%" y="677" width="0.0767%" height="15" fill="rgb(209,34,43)" fg:x="245" fg:w="1"/><text x="19.0383%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="18.7883%" y="661" width="0.0767%" height="15" fill="rgb(223,11,35)" fg:x="245" fg:w="1"/><text x="19.0383%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (3 samples, 0.23%)</title><rect x="18.7883%" y="709" width="0.2301%" height="15" fill="rgb(251,219,26)" fg:x="245" fg:w="3"/><text x="19.0383%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.15%)</title><rect x="18.8650%" y="693" width="0.1534%" height="15" fill="rgb(231,119,3)" fg:x="246" fg:w="2"/><text x="19.1150%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.15%)</title><rect x="18.8650%" y="677" width="0.1534%" height="15" fill="rgb(216,97,11)" fg:x="246" fg:w="2"/><text x="19.1150%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="18.9417%" y="661" width="0.0767%" height="15" fill="rgb(223,59,9)" fg:x="247" fg:w="1"/><text x="19.1917%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="19.0951%" y="677" width="0.0767%" height="15" fill="rgb(233,93,31)" fg:x="249" fg:w="1"/><text x="19.3451%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="19.0951%" y="661" width="0.0767%" height="15" fill="rgb(239,81,33)" fg:x="249" fg:w="1"/><text x="19.3451%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="19.0951%" y="645" width="0.0767%" height="15" fill="rgb(213,120,34)" fg:x="249" fg:w="1"/><text x="19.3451%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="19.0951%" y="629" width="0.0767%" height="15" fill="rgb(243,49,53)" fg:x="249" fg:w="1"/><text x="19.3451%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="19.0951%" y="613" width="0.0767%" height="15" fill="rgb(247,216,33)" fg:x="249" fg:w="1"/><text x="19.3451%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="19.0951%" y="597" width="0.0767%" height="15" fill="rgb(226,26,14)" fg:x="249" fg:w="1"/><text x="19.3451%" y="607.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="19.0951%" y="581" width="0.0767%" height="15" fill="rgb(215,49,53)" fg:x="249" fg:w="1"/><text x="19.3451%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="19.1718%" y="677" width="0.0767%" height="15" fill="rgb(245,162,40)" fg:x="250" fg:w="1"/><text x="19.4218%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="19.1718%" y="661" width="0.0767%" height="15" fill="rgb(229,68,17)" fg:x="250" fg:w="1"/><text x="19.4218%" y="671.50"></text></g><g><title>plugins_core::build::Build::new_world (4 samples, 0.31%)</title><rect x="19.0184%" y="709" width="0.3067%" height="15" fill="rgb(213,182,10)" fg:x="248" fg:w="4"/><text x="19.2684%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (4 samples, 0.31%)</title><rect x="19.0184%" y="693" width="0.3067%" height="15" fill="rgb(245,125,30)" fg:x="248" fg:w="4"/><text x="19.2684%" y="703.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="19.2485%" y="677" width="0.0767%" height="15" fill="rgb(232,202,2)" fg:x="251" fg:w="1"/><text x="19.4985%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="19.2485%" y="661" width="0.0767%" height="15" fill="rgb(237,140,51)" fg:x="251" fg:w="1"/><text x="19.4985%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.2485%" y="645" width="0.0767%" height="15" fill="rgb(236,157,25)" fg:x="251" fg:w="1"/><text x="19.4985%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="19.3252%" y="693" width="0.0767%" height="15" fill="rgb(219,209,0)" fg:x="252" fg:w="1"/><text x="19.5752%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="19.3252%" y="677" width="0.0767%" height="15" fill="rgb(240,116,54)" fg:x="252" fg:w="1"/><text x="19.5752%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.3252%" y="661" width="0.0767%" height="15" fill="rgb(216,10,36)" fg:x="252" fg:w="1"/><text x="19.5752%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.3252%" y="645" width="0.0767%" height="15" fill="rgb(222,72,44)" fg:x="252" fg:w="1"/><text x="19.5752%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="19.3252%" y="629" width="0.0767%" height="15" fill="rgb(232,159,9)" fg:x="252" fg:w="1"/><text x="19.5752%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.3252%" y="613" width="0.0767%" height="15" fill="rgb(210,39,32)" fg:x="252" fg:w="1"/><text x="19.5752%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.3252%" y="597" width="0.0767%" height="15" fill="rgb(216,194,45)" fg:x="252" fg:w="1"/><text x="19.5752%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.3252%" y="581" width="0.0767%" height="15" fill="rgb(218,18,35)" fg:x="252" fg:w="1"/><text x="19.5752%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.3252%" y="565" width="0.0767%" height="15" fill="rgb(207,83,51)" fg:x="252" fg:w="1"/><text x="19.5752%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.3252%" y="549" width="0.0767%" height="15" fill="rgb(225,63,43)" fg:x="252" fg:w="1"/><text x="19.5752%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.4018%" y="677" width="0.0767%" height="15" fill="rgb(207,57,36)" fg:x="253" fg:w="1"/><text x="19.6518%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="19.4018%" y="661" width="0.0767%" height="15" fill="rgb(216,99,33)" fg:x="253" fg:w="1"/><text x="19.6518%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.15%)</title><rect x="19.4785%" y="677" width="0.1534%" height="15" fill="rgb(225,42,16)" fg:x="254" fg:w="2"/><text x="19.7285%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.5552%" y="661" width="0.0767%" height="15" fill="rgb(220,201,45)" fg:x="255" fg:w="1"/><text x="19.8052%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.5552%" y="645" width="0.0767%" height="15" fill="rgb(225,33,4)" fg:x="255" fg:w="1"/><text x="19.8052%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="19.5552%" y="629" width="0.0767%" height="15" fill="rgb(224,33,50)" fg:x="255" fg:w="1"/><text x="19.8052%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.5552%" y="613" width="0.0767%" height="15" fill="rgb(246,198,51)" fg:x="255" fg:w="1"/><text x="19.8052%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.5552%" y="597" width="0.0767%" height="15" fill="rgb(205,22,4)" fg:x="255" fg:w="1"/><text x="19.8052%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.5552%" y="581" width="0.0767%" height="15" fill="rgb(206,3,8)" fg:x="255" fg:w="1"/><text x="19.8052%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.7086%" y="613" width="0.0767%" height="15" fill="rgb(251,23,15)" fg:x="257" fg:w="1"/><text x="19.9586%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.7086%" y="597" width="0.0767%" height="15" fill="rgb(252,88,28)" fg:x="257" fg:w="1"/><text x="19.9586%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.7086%" y="581" width="0.0767%" height="15" fill="rgb(212,127,14)" fg:x="257" fg:w="1"/><text x="19.9586%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.7086%" y="565" width="0.0767%" height="15" fill="rgb(247,145,37)" fg:x="257" fg:w="1"/><text x="19.9586%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.7086%" y="549" width="0.0767%" height="15" fill="rgb(209,117,53)" fg:x="257" fg:w="1"/><text x="19.9586%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.7086%" y="533" width="0.0767%" height="15" fill="rgb(212,90,42)" fg:x="257" fg:w="1"/><text x="19.9586%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.7086%" y="517" width="0.0767%" height="15" fill="rgb(218,164,37)" fg:x="257" fg:w="1"/><text x="19.9586%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="19.7086%" y="501" width="0.0767%" height="15" fill="rgb(246,65,34)" fg:x="257" fg:w="1"/><text x="19.9586%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="19.7086%" y="485" width="0.0767%" height="15" fill="rgb(231,100,33)" fg:x="257" fg:w="1"/><text x="19.9586%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.15%)</title><rect x="19.7086%" y="629" width="0.1534%" height="15" fill="rgb(228,126,14)" fg:x="257" fg:w="2"/><text x="19.9586%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.7853%" y="613" width="0.0767%" height="15" fill="rgb(215,173,21)" fg:x="258" fg:w="1"/><text x="20.0353%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.7853%" y="597" width="0.0767%" height="15" fill="rgb(210,6,40)" fg:x="258" fg:w="1"/><text x="20.0353%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="19.7853%" y="581" width="0.0767%" height="15" fill="rgb(212,48,18)" fg:x="258" fg:w="1"/><text x="20.0353%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.7853%" y="565" width="0.0767%" height="15" fill="rgb(230,214,11)" fg:x="258" fg:w="1"/><text x="20.0353%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.7853%" y="549" width="0.0767%" height="15" fill="rgb(254,105,39)" fg:x="258" fg:w="1"/><text x="20.0353%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.7853%" y="533" width="0.0767%" height="15" fill="rgb(245,158,5)" fg:x="258" fg:w="1"/><text x="20.0353%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.54%)</title><rect x="19.4018%" y="693" width="0.5368%" height="15" fill="rgb(249,208,11)" fg:x="253" fg:w="7"/><text x="19.6518%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.31%)</title><rect x="19.6319%" y="677" width="0.3067%" height="15" fill="rgb(210,39,28)" fg:x="256" fg:w="4"/><text x="19.8819%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.23%)</title><rect x="19.7086%" y="661" width="0.2301%" height="15" fill="rgb(211,56,53)" fg:x="257" fg:w="3"/><text x="19.9586%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.23%)</title><rect x="19.7086%" y="645" width="0.2301%" height="15" fill="rgb(226,201,30)" fg:x="257" fg:w="3"/><text x="19.9586%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="19.8620%" y="629" width="0.0767%" height="15" fill="rgb(239,101,34)" fg:x="259" fg:w="1"/><text x="20.1120%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="19.8620%" y="613" width="0.0767%" height="15" fill="rgb(226,209,5)" fg:x="259" fg:w="1"/><text x="20.1120%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="19.8620%" y="597" width="0.0767%" height="15" fill="rgb(250,105,47)" fg:x="259" fg:w="1"/><text x="20.1120%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="19.8620%" y="581" width="0.0767%" height="15" fill="rgb(230,72,3)" fg:x="259" fg:w="1"/><text x="20.1120%" y="591.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (174 samples, 13.34%)</title><rect x="6.6718%" y="741" width="13.3436%" height="15" fill="rgb(232,218,39)" fg:x="87" fg:w="174"/><text x="6.9218%" y="751.50">&lt;tests::HoldingKeyIn..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (16 samples, 1.23%)</title><rect x="18.7883%" y="725" width="1.2270%" height="15" fill="rgb(248,166,6)" fg:x="245" fg:w="16"/><text x="19.0383%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (9 samples, 0.69%)</title><rect x="19.3252%" y="709" width="0.6902%" height="15" fill="rgb(247,89,20)" fg:x="252" fg:w="9"/><text x="19.5752%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.9387%" y="693" width="0.0767%" height="15" fill="rgb(248,130,54)" fg:x="260" fg:w="1"/><text x="20.1887%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.9387%" y="677" width="0.0767%" height="15" fill="rgb(234,196,4)" fg:x="260" fg:w="1"/><text x="20.1887%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.9387%" y="661" width="0.0767%" height="15" fill="rgb(250,143,31)" fg:x="260" fg:w="1"/><text x="20.1887%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.9387%" y="645" width="0.0767%" height="15" fill="rgb(211,110,34)" fg:x="260" fg:w="1"/><text x="20.1887%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="20.0153%" y="741" width="0.0767%" height="15" fill="rgb(215,124,48)" fg:x="261" fg:w="1"/><text x="20.2653%" y="751.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.0153%" y="725" width="0.0767%" height="15" fill="rgb(216,46,13)" fg:x="261" fg:w="1"/><text x="20.2653%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="20.0920%" y="741" width="0.0767%" height="15" fill="rgb(205,184,25)" fg:x="262" fg:w="1"/><text x="20.3420%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="20.0920%" y="725" width="0.0767%" height="15" fill="rgb(228,1,10)" fg:x="262" fg:w="1"/><text x="20.3420%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.0920%" y="709" width="0.0767%" height="15" fill="rgb(213,116,27)" fg:x="262" fg:w="1"/><text x="20.3420%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="20.0920%" y="693" width="0.0767%" height="15" fill="rgb(241,95,50)" fg:x="262" fg:w="1"/><text x="20.3420%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="20.1687%" y="725" width="0.0767%" height="15" fill="rgb(238,48,32)" fg:x="263" fg:w="1"/><text x="20.4187%" y="735.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="20.2454%" y="613" width="0.0767%" height="15" fill="rgb(235,113,49)" fg:x="264" fg:w="1"/><text x="20.4954%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="20.2454%" y="597" width="0.0767%" height="15" fill="rgb(205,127,43)" fg:x="264" fg:w="1"/><text x="20.4954%" y="607.50"></text></g><g><title>core::fmt::run (1 samples, 0.08%)</title><rect x="20.2454%" y="581" width="0.0767%" height="15" fill="rgb(250,162,2)" fg:x="264" fg:w="1"/><text x="20.4954%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="20.2454%" y="565" width="0.0767%" height="15" fill="rgb(220,13,41)" fg:x="264" fg:w="1"/><text x="20.4954%" y="575.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="20.2454%" y="549" width="0.0767%" height="15" fill="rgb(249,221,25)" fg:x="264" fg:w="1"/><text x="20.4954%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (1 samples, 0.08%)</title><rect x="20.2454%" y="533" width="0.0767%" height="15" fill="rgb(215,208,19)" fg:x="264" fg:w="1"/><text x="20.4954%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.15%)</title><rect x="20.2454%" y="725" width="0.1534%" height="15" fill="rgb(236,175,2)" fg:x="264" fg:w="2"/><text x="20.4954%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.15%)</title><rect x="20.2454%" y="709" width="0.1534%" height="15" fill="rgb(241,52,2)" fg:x="264" fg:w="2"/><text x="20.4954%" y="719.50"></text></g><g><title>core::fmt::write (2 samples, 0.15%)</title><rect x="20.2454%" y="693" width="0.1534%" height="15" fill="rgb(248,140,14)" fg:x="264" fg:w="2"/><text x="20.4954%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.15%)</title><rect x="20.2454%" y="677" width="0.1534%" height="15" fill="rgb(253,22,42)" fg:x="264" fg:w="2"/><text x="20.4954%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.15%)</title><rect x="20.2454%" y="661" width="0.1534%" height="15" fill="rgb(234,61,47)" fg:x="264" fg:w="2"/><text x="20.4954%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.15%)</title><rect x="20.2454%" y="645" width="0.1534%" height="15" fill="rgb(208,226,15)" fg:x="264" fg:w="2"/><text x="20.4954%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (2 samples, 0.15%)</title><rect x="20.2454%" y="629" width="0.1534%" height="15" fill="rgb(217,221,4)" fg:x="264" fg:w="2"/><text x="20.4954%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="20.3221%" y="613" width="0.0767%" height="15" fill="rgb(212,174,34)" fg:x="265" fg:w="1"/><text x="20.5721%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="20.3221%" y="597" width="0.0767%" height="15" fill="rgb(253,83,4)" fg:x="265" fg:w="1"/><text x="20.5721%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.3221%" y="581" width="0.0767%" height="15" fill="rgb(250,195,49)" fg:x="265" fg:w="1"/><text x="20.5721%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.3221%" y="565" width="0.0767%" height="15" fill="rgb(241,192,25)" fg:x="265" fg:w="1"/><text x="20.5721%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="20.3221%" y="549" width="0.0767%" height="15" fill="rgb(208,124,10)" fg:x="265" fg:w="1"/><text x="20.5721%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="20.3221%" y="533" width="0.0767%" height="15" fill="rgb(222,33,0)" fg:x="265" fg:w="1"/><text x="20.5721%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="20.3221%" y="517" width="0.0767%" height="15" fill="rgb(234,209,28)" fg:x="265" fg:w="1"/><text x="20.5721%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="20.3221%" y="501" width="0.0767%" height="15" fill="rgb(224,11,23)" fg:x="265" fg:w="1"/><text x="20.5721%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="20.3221%" y="485" width="0.0767%" height="15" fill="rgb(232,99,1)" fg:x="265" fg:w="1"/><text x="20.5721%" y="495.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="20.3988%" y="725" width="0.0767%" height="15" fill="rgb(237,95,45)" fg:x="266" fg:w="1"/><text x="20.6488%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="20.5521%" y="693" width="0.0767%" height="15" fill="rgb(208,109,11)" fg:x="268" fg:w="1"/><text x="20.8021%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="20.5521%" y="677" width="0.0767%" height="15" fill="rgb(216,190,48)" fg:x="268" fg:w="1"/><text x="20.8021%" y="687.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="20.6288%" y="693" width="0.0767%" height="15" fill="rgb(251,171,36)" fg:x="269" fg:w="1"/><text x="20.8788%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="20.6288%" y="677" width="0.0767%" height="15" fill="rgb(230,62,22)" fg:x="269" fg:w="1"/><text x="20.8788%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.6288%" y="661" width="0.0767%" height="15" fill="rgb(225,114,35)" fg:x="269" fg:w="1"/><text x="20.8788%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="20.8589%" y="645" width="0.0767%" height="15" fill="rgb(215,118,42)" fg:x="272" fg:w="1"/><text x="21.1089%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="20.8589%" y="629" width="0.0767%" height="15" fill="rgb(243,119,21)" fg:x="272" fg:w="1"/><text x="21.1089%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="20.8589%" y="613" width="0.0767%" height="15" fill="rgb(252,177,53)" fg:x="272" fg:w="1"/><text x="21.1089%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="20.8589%" y="597" width="0.0767%" height="15" fill="rgb(237,209,29)" fg:x="272" fg:w="1"/><text x="21.1089%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="20.8589%" y="581" width="0.0767%" height="15" fill="rgb(212,65,23)" fg:x="272" fg:w="1"/><text x="21.1089%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="21.0123%" y="629" width="0.0767%" height="15" fill="rgb(230,222,46)" fg:x="274" fg:w="1"/><text x="21.2623%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="21.0123%" y="613" width="0.0767%" height="15" fill="rgb(215,135,32)" fg:x="274" fg:w="1"/><text x="21.2623%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.31%)</title><rect x="21.1656%" y="613" width="0.3067%" height="15" fill="rgb(246,101,22)" fg:x="276" fg:w="4"/><text x="21.4156%" y="623.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.23%)</title><rect x="21.2423%" y="597" width="0.2301%" height="15" fill="rgb(206,107,13)" fg:x="277" fg:w="3"/><text x="21.4923%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="21.3957%" y="581" width="0.0767%" height="15" fill="rgb(250,100,44)" fg:x="279" fg:w="1"/><text x="21.6457%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.15%)</title><rect x="21.5491%" y="597" width="0.1534%" height="15" fill="rgb(231,147,38)" fg:x="281" fg:w="2"/><text x="21.7991%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="21.6258%" y="581" width="0.0767%" height="15" fill="rgb(229,8,40)" fg:x="282" fg:w="1"/><text x="21.8758%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="21.6258%" y="565" width="0.0767%" height="15" fill="rgb(221,135,30)" fg:x="282" fg:w="1"/><text x="21.8758%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.15%)</title><rect x="21.7025%" y="581" width="0.1534%" height="15" fill="rgb(249,193,18)" fg:x="283" fg:w="2"/><text x="21.9525%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.15%)</title><rect x="21.7025%" y="565" width="0.1534%" height="15" fill="rgb(209,133,39)" fg:x="283" fg:w="2"/><text x="21.9525%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.15%)</title><rect x="21.7025%" y="549" width="0.1534%" height="15" fill="rgb(232,100,14)" fg:x="283" fg:w="2"/><text x="21.9525%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.15%)</title><rect x="21.7025%" y="533" width="0.1534%" height="15" fill="rgb(224,185,1)" fg:x="283" fg:w="2"/><text x="21.9525%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="21.7791%" y="517" width="0.0767%" height="15" fill="rgb(223,139,8)" fg:x="284" fg:w="1"/><text x="22.0291%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="21.7791%" y="501" width="0.0767%" height="15" fill="rgb(232,213,38)" fg:x="284" fg:w="1"/><text x="22.0291%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="21.7791%" y="485" width="0.0767%" height="15" fill="rgb(207,94,22)" fg:x="284" fg:w="1"/><text x="22.0291%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.15%)</title><rect x="21.8558%" y="565" width="0.1534%" height="15" fill="rgb(219,183,54)" fg:x="285" fg:w="2"/><text x="22.1058%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.15%)</title><rect x="21.8558%" y="549" width="0.1534%" height="15" fill="rgb(216,185,54)" fg:x="285" fg:w="2"/><text x="22.1058%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.15%)</title><rect x="21.8558%" y="533" width="0.1534%" height="15" fill="rgb(254,217,39)" fg:x="285" fg:w="2"/><text x="22.1058%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.15%)</title><rect x="21.8558%" y="517" width="0.1534%" height="15" fill="rgb(240,178,23)" fg:x="285" fg:w="2"/><text x="22.1058%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.15%)</title><rect x="21.8558%" y="501" width="0.1534%" height="15" fill="rgb(218,11,47)" fg:x="285" fg:w="2"/><text x="22.1058%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.15%)</title><rect x="21.8558%" y="485" width="0.1534%" height="15" fill="rgb(218,51,51)" fg:x="285" fg:w="2"/><text x="22.1058%" y="495.50"></text></g><g><title>realloc (2 samples, 0.15%)</title><rect x="21.8558%" y="469" width="0.1534%" height="15" fill="rgb(238,126,27)" fg:x="285" fg:w="2"/><text x="22.1058%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="21.8558%" y="581" width="0.2301%" height="15" fill="rgb(249,202,22)" fg:x="285" fg:w="3"/><text x="22.1058%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="22.0092%" y="565" width="0.0767%" height="15" fill="rgb(254,195,49)" fg:x="287" fg:w="1"/><text x="22.2592%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.0092%" y="549" width="0.0767%" height="15" fill="rgb(208,123,14)" fg:x="287" fg:w="1"/><text x="22.2592%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.69%)</title><rect x="21.4724%" y="613" width="0.6902%" height="15" fill="rgb(224,200,8)" fg:x="280" fg:w="9"/><text x="21.7224%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.46%)</title><rect x="21.7025%" y="597" width="0.4601%" height="15" fill="rgb(217,61,36)" fg:x="283" fg:w="6"/><text x="21.9525%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.0859%" y="581" width="0.0767%" height="15" fill="rgb(206,35,45)" fg:x="288" fg:w="1"/><text x="22.3359%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="22.0859%" y="565" width="0.0767%" height="15" fill="rgb(217,65,33)" fg:x="288" fg:w="1"/><text x="22.3359%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.0859%" y="549" width="0.0767%" height="15" fill="rgb(222,158,48)" fg:x="288" fg:w="1"/><text x="22.3359%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (17 samples, 1.30%)</title><rect x="20.9356%" y="645" width="1.3037%" height="15" fill="rgb(254,2,54)" fg:x="273" fg:w="17"/><text x="21.1856%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (15 samples, 1.15%)</title><rect x="21.0890%" y="629" width="1.1503%" height="15" fill="rgb(250,143,38)" fg:x="275" fg:w="15"/><text x="21.3390%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.1626%" y="613" width="0.0767%" height="15" fill="rgb(248,25,0)" fg:x="289" fg:w="1"/><text x="22.4126%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="22.2393%" y="597" width="0.0767%" height="15" fill="rgb(206,152,27)" fg:x="290" fg:w="1"/><text x="22.4893%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.15%)</title><rect x="22.3926%" y="581" width="0.1534%" height="15" fill="rgb(240,77,30)" fg:x="292" fg:w="2"/><text x="22.6426%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.38%)</title><rect x="22.2393%" y="645" width="0.3834%" height="15" fill="rgb(231,5,3)" fg:x="290" fg:w="5"/><text x="22.4893%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.38%)</title><rect x="22.2393%" y="629" width="0.3834%" height="15" fill="rgb(207,226,32)" fg:x="290" fg:w="5"/><text x="22.4893%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.38%)</title><rect x="22.2393%" y="613" width="0.3834%" height="15" fill="rgb(222,207,47)" fg:x="290" fg:w="5"/><text x="22.4893%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="22.3160%" y="597" width="0.3067%" height="15" fill="rgb(229,115,45)" fg:x="291" fg:w="4"/><text x="22.5660%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="22.5460%" y="581" width="0.0767%" height="15" fill="rgb(224,191,6)" fg:x="294" fg:w="1"/><text x="22.7960%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.5460%" y="565" width="0.0767%" height="15" fill="rgb(230,227,24)" fg:x="294" fg:w="1"/><text x="22.7960%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.6994%" y="581" width="0.0767%" height="15" fill="rgb(228,80,19)" fg:x="296" fg:w="1"/><text x="22.9494%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="22.8528%" y="565" width="0.0767%" height="15" fill="rgb(247,229,0)" fg:x="298" fg:w="1"/><text x="23.1028%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.9294%" y="549" width="0.0767%" height="15" fill="rgb(237,194,15)" fg:x="299" fg:w="1"/><text x="23.1794%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="23.0061%" y="549" width="0.0767%" height="15" fill="rgb(219,203,20)" fg:x="300" fg:w="1"/><text x="23.2561%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.0061%" y="533" width="0.0767%" height="15" fill="rgb(234,128,8)" fg:x="300" fg:w="1"/><text x="23.2561%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="23.0828%" y="533" width="0.0767%" height="15" fill="rgb(248,202,8)" fg:x="301" fg:w="1"/><text x="23.3328%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="23.0828%" y="517" width="0.0767%" height="15" fill="rgb(206,104,37)" fg:x="301" fg:w="1"/><text x="23.3328%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.0828%" y="501" width="0.0767%" height="15" fill="rgb(223,8,27)" fg:x="301" fg:w="1"/><text x="23.3328%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.69%)</title><rect x="22.6994%" y="613" width="0.6902%" height="15" fill="rgb(216,217,28)" fg:x="296" fg:w="9"/><text x="22.9494%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.69%)</title><rect x="22.6994%" y="597" width="0.6902%" height="15" fill="rgb(249,199,1)" fg:x="296" fg:w="9"/><text x="22.9494%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.61%)</title><rect x="22.7761%" y="581" width="0.6135%" height="15" fill="rgb(240,85,17)" fg:x="297" fg:w="8"/><text x="23.0261%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.46%)</title><rect x="22.9294%" y="565" width="0.4601%" height="15" fill="rgb(206,108,45)" fg:x="299" fg:w="6"/><text x="23.1794%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="23.0828%" y="549" width="0.3067%" height="15" fill="rgb(245,210,41)" fg:x="301" fg:w="4"/><text x="23.3328%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.23%)</title><rect x="23.1595%" y="533" width="0.2301%" height="15" fill="rgb(206,13,37)" fg:x="302" fg:w="3"/><text x="23.4095%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.3129%" y="517" width="0.0767%" height="15" fill="rgb(250,61,18)" fg:x="304" fg:w="1"/><text x="23.5629%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.3896%" y="613" width="0.0767%" height="15" fill="rgb(235,172,48)" fg:x="305" fg:w="1"/><text x="23.6396%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="23.4663%" y="613" width="0.0767%" height="15" fill="rgb(249,201,17)" fg:x="306" fg:w="1"/><text x="23.7163%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="23.6196%" y="565" width="0.0767%" height="15" fill="rgb(219,208,6)" fg:x="308" fg:w="1"/><text x="23.8696%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="23.6196%" y="549" width="0.0767%" height="15" fill="rgb(248,31,23)" fg:x="308" fg:w="1"/><text x="23.8696%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.23%)</title><rect x="23.5429%" y="581" width="0.2301%" height="15" fill="rgb(245,15,42)" fg:x="307" fg:w="3"/><text x="23.7929%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="23.6963%" y="565" width="0.0767%" height="15" fill="rgb(222,217,39)" fg:x="309" fg:w="1"/><text x="23.9463%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.31%)</title><rect x="23.5429%" y="597" width="0.3067%" height="15" fill="rgb(210,219,27)" fg:x="307" fg:w="4"/><text x="23.7929%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="23.7730%" y="581" width="0.0767%" height="15" fill="rgb(252,166,36)" fg:x="310" fg:w="1"/><text x="24.0230%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (17 samples, 1.30%)</title><rect x="22.6227%" y="629" width="1.3037%" height="15" fill="rgb(245,132,34)" fg:x="295" fg:w="17"/><text x="22.8727%" y="639.50"></text></g><g><title>treediff::diff::diff (5 samples, 0.38%)</title><rect x="23.5429%" y="613" width="0.3834%" height="15" fill="rgb(236,54,3)" fg:x="307" fg:w="5"/><text x="23.7929%" y="623.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="23.8497%" y="597" width="0.0767%" height="15" fill="rgb(241,173,43)" fg:x="311" fg:w="1"/><text x="24.0997%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.31%)</title><rect x="23.9264%" y="597" width="0.3067%" height="15" fill="rgb(215,190,9)" fg:x="312" fg:w="4"/><text x="24.1764%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="24.1564%" y="581" width="0.0767%" height="15" fill="rgb(242,101,16)" fg:x="315" fg:w="1"/><text x="24.4064%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="24.2331%" y="597" width="0.0767%" height="15" fill="rgb(223,190,21)" fg:x="316" fg:w="1"/><text x="24.4831%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="24.2331%" y="581" width="0.0767%" height="15" fill="rgb(215,228,25)" fg:x="316" fg:w="1"/><text x="24.4831%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="24.3098%" y="581" width="0.0767%" height="15" fill="rgb(225,36,22)" fg:x="317" fg:w="1"/><text x="24.5598%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (4 samples, 0.31%)</title><rect x="24.3098%" y="597" width="0.3067%" height="15" fill="rgb(251,106,46)" fg:x="317" fg:w="4"/><text x="24.5598%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.23%)</title><rect x="24.3865%" y="581" width="0.2301%" height="15" fill="rgb(208,90,1)" fg:x="318" fg:w="3"/><text x="24.6365%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.23%)</title><rect x="24.3865%" y="565" width="0.2301%" height="15" fill="rgb(243,10,4)" fg:x="318" fg:w="3"/><text x="24.6365%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="24.5399%" y="549" width="0.0767%" height="15" fill="rgb(212,137,27)" fg:x="320" fg:w="1"/><text x="24.7899%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.15%)</title><rect x="24.7699%" y="549" width="0.1534%" height="15" fill="rgb(231,220,49)" fg:x="323" fg:w="2"/><text x="25.0199%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.8466%" y="533" width="0.0767%" height="15" fill="rgb(237,96,20)" fg:x="324" fg:w="1"/><text x="25.0966%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.15%)</title><rect x="24.9233%" y="549" width="0.1534%" height="15" fill="rgb(239,229,30)" fg:x="325" fg:w="2"/><text x="25.1733%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.15%)</title><rect x="24.9233%" y="533" width="0.1534%" height="15" fill="rgb(219,65,33)" fg:x="325" fg:w="2"/><text x="25.1733%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.0000%" y="517" width="0.0767%" height="15" fill="rgb(243,134,7)" fg:x="326" fg:w="1"/><text x="25.2500%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="25.4601%" y="501" width="0.0767%" height="15" fill="rgb(216,177,54)" fg:x="332" fg:w="1"/><text x="25.7101%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.31%)</title><rect x="25.3834%" y="533" width="0.3067%" height="15" fill="rgb(211,160,20)" fg:x="331" fg:w="4"/><text x="25.6334%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.31%)</title><rect x="25.3834%" y="517" width="0.3067%" height="15" fill="rgb(239,85,39)" fg:x="331" fg:w="4"/><text x="25.6334%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.15%)</title><rect x="25.5368%" y="501" width="0.1534%" height="15" fill="rgb(232,125,22)" fg:x="333" fg:w="2"/><text x="25.7868%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.6135%" y="485" width="0.0767%" height="15" fill="rgb(244,57,34)" fg:x="334" fg:w="1"/><text x="25.8635%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (13 samples, 1.00%)</title><rect x="24.7699%" y="565" width="0.9969%" height="15" fill="rgb(214,203,32)" fg:x="323" fg:w="13"/><text x="25.0199%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.69%)</title><rect x="25.0767%" y="549" width="0.6902%" height="15" fill="rgb(207,58,43)" fg:x="327" fg:w="9"/><text x="25.3267%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.6902%" y="533" width="0.0767%" height="15" fill="rgb(215,193,15)" fg:x="335" fg:w="1"/><text x="25.9402%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (15 samples, 1.15%)</title><rect x="24.6933%" y="581" width="1.1503%" height="15" fill="rgb(232,15,44)" fg:x="322" fg:w="15"/><text x="24.9433%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="25.7669%" y="565" width="0.0767%" height="15" fill="rgb(212,3,48)" fg:x="336" fg:w="1"/><text x="26.0169%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.8436%" y="581" width="0.0767%" height="15" fill="rgb(218,128,7)" fg:x="337" fg:w="1"/><text x="26.0936%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (28 samples, 2.15%)</title><rect x="23.9264%" y="629" width="2.1472%" height="15" fill="rgb(226,216,39)" fg:x="312" fg:w="28"/><text x="24.1764%" y="639.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (28 samples, 2.15%)</title><rect x="23.9264%" y="613" width="2.1472%" height="15" fill="rgb(243,47,51)" fg:x="312" fg:w="28"/><text x="24.1764%" y="623.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (19 samples, 1.46%)</title><rect x="24.6166%" y="597" width="1.4571%" height="15" fill="rgb(241,183,40)" fg:x="321" fg:w="19"/><text x="24.8666%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.15%)</title><rect x="25.9202%" y="581" width="0.1534%" height="15" fill="rgb(231,217,32)" fg:x="338" fg:w="2"/><text x="26.1702%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.9969%" y="565" width="0.0767%" height="15" fill="rgb(229,61,38)" fg:x="339" fg:w="1"/><text x="26.2469%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="26.2270%" y="485" width="0.1534%" height="15" fill="rgb(225,210,5)" fg:x="342" fg:w="2"/><text x="26.4770%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="26.2270%" y="469" width="0.1534%" height="15" fill="rgb(231,79,45)" fg:x="342" fg:w="2"/><text x="26.4770%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="26.2270%" y="453" width="0.1534%" height="15" fill="rgb(224,100,7)" fg:x="342" fg:w="2"/><text x="26.4770%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.15%)</title><rect x="26.2270%" y="437" width="0.1534%" height="15" fill="rgb(241,198,18)" fg:x="342" fg:w="2"/><text x="26.4770%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="26.3804%" y="453" width="0.0767%" height="15" fill="rgb(252,97,53)" fg:x="344" fg:w="1"/><text x="26.6304%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.4571%" y="453" width="0.0767%" height="15" fill="rgb(220,88,7)" fg:x="345" fg:w="1"/><text x="26.7071%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.4571%" y="437" width="0.0767%" height="15" fill="rgb(213,176,14)" fg:x="345" fg:w="1"/><text x="26.7071%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.4571%" y="421" width="0.0767%" height="15" fill="rgb(246,73,7)" fg:x="345" fg:w="1"/><text x="26.7071%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.23%)</title><rect x="26.3804%" y="469" width="0.2301%" height="15" fill="rgb(245,64,36)" fg:x="344" fg:w="3"/><text x="26.6304%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.5337%" y="453" width="0.0767%" height="15" fill="rgb(245,80,10)" fg:x="346" fg:w="1"/><text x="26.7837%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.46%)</title><rect x="26.2270%" y="501" width="0.4601%" height="15" fill="rgb(232,107,50)" fg:x="342" fg:w="6"/><text x="26.4770%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.31%)</title><rect x="26.3804%" y="485" width="0.3067%" height="15" fill="rgb(253,3,0)" fg:x="344" fg:w="4"/><text x="26.6304%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.6104%" y="469" width="0.0767%" height="15" fill="rgb(212,99,53)" fg:x="347" fg:w="1"/><text x="26.8604%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="26.6104%" y="453" width="0.0767%" height="15" fill="rgb(249,111,54)" fg:x="347" fg:w="1"/><text x="26.8604%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.69%)</title><rect x="26.1503%" y="533" width="0.6902%" height="15" fill="rgb(249,55,30)" fg:x="341" fg:w="9"/><text x="26.4003%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.61%)</title><rect x="26.2270%" y="517" width="0.6135%" height="15" fill="rgb(237,47,42)" fg:x="342" fg:w="8"/><text x="26.4770%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.15%)</title><rect x="26.6871%" y="501" width="0.1534%" height="15" fill="rgb(211,20,18)" fg:x="348" fg:w="2"/><text x="26.9371%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.15%)</title><rect x="26.6871%" y="485" width="0.1534%" height="15" fill="rgb(231,203,46)" fg:x="348" fg:w="2"/><text x="26.9371%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.15%)</title><rect x="26.6871%" y="469" width="0.1534%" height="15" fill="rgb(237,142,3)" fg:x="348" fg:w="2"/><text x="26.9371%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="26.8405%" y="517" width="0.0767%" height="15" fill="rgb(241,107,1)" fg:x="350" fg:w="1"/><text x="27.0905%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.23%)</title><rect x="26.8405%" y="533" width="0.2301%" height="15" fill="rgb(229,83,13)" fg:x="350" fg:w="3"/><text x="27.0905%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.15%)</title><rect x="26.9172%" y="517" width="0.1534%" height="15" fill="rgb(241,91,40)" fg:x="351" fg:w="2"/><text x="27.1672%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (15 samples, 1.15%)</title><rect x="26.0736%" y="565" width="1.1503%" height="15" fill="rgb(225,3,45)" fg:x="340" fg:w="15"/><text x="26.3236%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 1.07%)</title><rect x="26.1503%" y="549" width="1.0736%" height="15" fill="rgb(244,223,14)" fg:x="341" fg:w="14"/><text x="26.4003%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.15%)</title><rect x="27.0706%" y="533" width="0.1534%" height="15" fill="rgb(224,124,37)" fg:x="353" fg:w="2"/><text x="27.3206%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.1472%" y="517" width="0.0767%" height="15" fill="rgb(251,171,30)" fg:x="354" fg:w="1"/><text x="27.3972%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.1472%" y="501" width="0.0767%" height="15" fill="rgb(236,46,54)" fg:x="354" fg:w="1"/><text x="27.3972%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="27.2239%" y="565" width="0.0767%" height="15" fill="rgb(245,213,5)" fg:x="355" fg:w="1"/><text x="27.4739%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="27.2239%" y="549" width="0.0767%" height="15" fill="rgb(230,144,27)" fg:x="355" fg:w="1"/><text x="27.4739%" y="559.50"></text></g><g><title>engine::session::state::State::close (91 samples, 6.98%)</title><rect x="20.4755%" y="725" width="6.9785%" height="15" fill="rgb(220,86,6)" fg:x="267" fg:w="91"/><text x="20.7255%" y="735.50">engine::s..</text></g><g><title>engine::session::state::State::flush_entities (91 samples, 6.98%)</title><rect x="20.4755%" y="709" width="6.9785%" height="15" fill="rgb(240,20,13)" fg:x="267" fg:w="91"/><text x="20.7255%" y="719.50">engine::s..</text></g><g><title>core::iter::adapters::try_process (88 samples, 6.75%)</title><rect x="20.7055%" y="693" width="6.7485%" height="15" fill="rgb(217,89,34)" fg:x="270" fg:w="88"/><text x="20.9555%" y="703.50">core::ite..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (88 samples, 6.75%)</title><rect x="20.7055%" y="677" width="6.7485%" height="15" fill="rgb(229,13,5)" fg:x="270" fg:w="88"/><text x="20.9555%" y="687.50">&lt;alloc::v..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (88 samples, 6.75%)</title><rect x="20.7055%" y="661" width="6.7485%" height="15" fill="rgb(244,67,35)" fg:x="270" fg:w="88"/><text x="20.9555%" y="671.50">engine::s..</text></g><g><title>kernel::model::any_entity_changes (63 samples, 4.83%)</title><rect x="22.6227%" y="645" width="4.8313%" height="15" fill="rgb(221,40,2)" fg:x="295" fg:w="63"/><text x="22.8727%" y="655.50">kernel..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (18 samples, 1.38%)</title><rect x="26.0736%" y="629" width="1.3804%" height="15" fill="rgb(237,157,21)" fg:x="340" fg:w="18"/><text x="26.3236%" y="639.50"></text></g><g><title>serde_json::de::from_trait (18 samples, 1.38%)</title><rect x="26.0736%" y="613" width="1.3804%" height="15" fill="rgb(222,94,11)" fg:x="340" fg:w="18"/><text x="26.3236%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (18 samples, 1.38%)</title><rect x="26.0736%" y="597" width="1.3804%" height="15" fill="rgb(249,113,6)" fg:x="340" fg:w="18"/><text x="26.3236%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (18 samples, 1.38%)</title><rect x="26.0736%" y="581" width="1.3804%" height="15" fill="rgb(238,137,36)" fg:x="340" fg:w="18"/><text x="26.3236%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.15%)</title><rect x="27.3006%" y="565" width="0.1534%" height="15" fill="rgb(210,102,26)" fg:x="356" fg:w="2"/><text x="27.5506%" y="575.50"></text></g><g><title>engine::session::Session::close (96 samples, 7.36%)</title><rect x="20.1687%" y="741" width="7.3620%" height="15" fill="rgb(218,30,30)" fg:x="263" fg:w="96"/><text x="20.4187%" y="751.50">engine::se..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="27.4540%" y="725" width="0.0767%" height="15" fill="rgb(214,67,26)" fg:x="358" fg:w="1"/><text x="27.7040%" y="735.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="27.4540%" y="709" width="0.0767%" height="15" fill="rgb(251,9,53)" fg:x="358" fg:w="1"/><text x="27.7040%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="27.4540%" y="693" width="0.0767%" height="15" fill="rgb(228,204,25)" fg:x="358" fg:w="1"/><text x="27.7040%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="27.4540%" y="677" width="0.0767%" height="15" fill="rgb(207,153,8)" fg:x="358" fg:w="1"/><text x="27.7040%" y="687.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="27.4540%" y="661" width="0.0767%" height="15" fill="rgb(242,9,16)" fg:x="358" fg:w="1"/><text x="27.7040%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="27.5307%" y="693" width="0.0767%" height="15" fill="rgb(217,211,10)" fg:x="359" fg:w="1"/><text x="27.7807%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="27.5307%" y="677" width="0.0767%" height="15" fill="rgb(219,228,52)" fg:x="359" fg:w="1"/><text x="27.7807%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="27.5307%" y="661" width="0.0767%" height="15" fill="rgb(231,92,29)" fg:x="359" fg:w="1"/><text x="27.7807%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="27.5307%" y="645" width="0.0767%" height="15" fill="rgb(232,8,23)" fg:x="359" fg:w="1"/><text x="27.7807%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="27.5307%" y="629" width="0.0767%" height="15" fill="rgb(216,211,34)" fg:x="359" fg:w="1"/><text x="27.7807%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (1 samples, 0.08%)</title><rect x="27.5307%" y="613" width="0.0767%" height="15" fill="rgb(236,151,0)" fg:x="359" fg:w="1"/><text x="27.7807%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="27.5307%" y="597" width="0.0767%" height="15" fill="rgb(209,168,3)" fg:x="359" fg:w="1"/><text x="27.7807%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="27.5307%" y="581" width="0.0767%" height="15" fill="rgb(208,129,28)" fg:x="359" fg:w="1"/><text x="27.7807%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="27.5307%" y="565" width="0.0767%" height="15" fill="rgb(229,78,22)" fg:x="359" fg:w="1"/><text x="27.7807%" y="575.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="27.5307%" y="549" width="0.0767%" height="15" fill="rgb(228,187,13)" fg:x="359" fg:w="1"/><text x="27.7807%" y="559.50"></text></g><g><title>core::fmt::Formatter::debug_tuple (1 samples, 0.08%)</title><rect x="27.5307%" y="533" width="0.0767%" height="15" fill="rgb(240,119,24)" fg:x="359" fg:w="1"/><text x="27.7807%" y="543.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (3 samples, 0.23%)</title><rect x="27.6074%" y="677" width="0.2301%" height="15" fill="rgb(209,194,42)" fg:x="360" fg:w="3"/><text x="27.8574%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (3 samples, 0.23%)</title><rect x="27.6074%" y="661" width="0.2301%" height="15" fill="rgb(247,200,46)" fg:x="360" fg:w="3"/><text x="27.8574%" y="671.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (3 samples, 0.23%)</title><rect x="27.6074%" y="645" width="0.2301%" height="15" fill="rgb(218,76,16)" fg:x="360" fg:w="3"/><text x="27.8574%" y="655.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (3 samples, 0.23%)</title><rect x="27.6074%" y="629" width="0.2301%" height="15" fill="rgb(225,21,48)" fg:x="360" fg:w="3"/><text x="27.8574%" y="639.50"></text></g><g><title>tracing_core::subscriber::Subscriber::register_callsite (1 samples, 0.08%)</title><rect x="27.7607%" y="613" width="0.0767%" height="15" fill="rgb(239,223,50)" fg:x="362" fg:w="1"/><text x="28.0107%" y="623.50"></text></g><g><title>&lt;engine::session::logs::SessionSubscriber as tracing_core::subscriber::Subscriber&gt;::enabled (1 samples, 0.08%)</title><rect x="27.7607%" y="597" width="0.0767%" height="15" fill="rgb(244,45,21)" fg:x="362" fg:w="1"/><text x="28.0107%" y="607.50"></text></g><g><title>tracing_core::dispatcher::get_default (1 samples, 0.08%)</title><rect x="27.8374%" y="677" width="0.0767%" height="15" fill="rgb(232,33,43)" fg:x="363" fg:w="1"/><text x="28.0874%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="27.9141%" y="565" width="0.0767%" height="15" fill="rgb(209,8,3)" fg:x="364" fg:w="1"/><text x="28.1641%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.9141%" y="549" width="0.0767%" height="15" fill="rgb(214,25,53)" fg:x="364" fg:w="1"/><text x="28.1641%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.9908%" y="501" width="0.0767%" height="15" fill="rgb(254,186,54)" fg:x="365" fg:w="1"/><text x="28.2408%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.9908%" y="485" width="0.0767%" height="15" fill="rgb(208,174,49)" fg:x="365" fg:w="1"/><text x="28.2408%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.9908%" y="469" width="0.0767%" height="15" fill="rgb(233,191,51)" fg:x="365" fg:w="1"/><text x="28.2408%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.9908%" y="453" width="0.0767%" height="15" fill="rgb(222,134,10)" fg:x="365" fg:w="1"/><text x="28.2408%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.9908%" y="437" width="0.0767%" height="15" fill="rgb(230,226,20)" fg:x="365" fg:w="1"/><text x="28.2408%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="28.1442%" y="373" width="0.1534%" height="15" fill="rgb(251,111,25)" fg:x="367" fg:w="2"/><text x="28.3942%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.2209%" y="357" width="0.0767%" height="15" fill="rgb(224,40,46)" fg:x="368" fg:w="1"/><text x="28.4709%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.2209%" y="341" width="0.0767%" height="15" fill="rgb(236,108,47)" fg:x="368" fg:w="1"/><text x="28.4709%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.2209%" y="325" width="0.0767%" height="15" fill="rgb(234,93,0)" fg:x="368" fg:w="1"/><text x="28.4709%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="28.2209%" y="309" width="0.0767%" height="15" fill="rgb(224,213,32)" fg:x="368" fg:w="1"/><text x="28.4709%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="28.2209%" y="293" width="0.0767%" height="15" fill="rgb(251,11,48)" fg:x="368" fg:w="1"/><text x="28.4709%" y="303.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="28.2975%" y="373" width="0.0767%" height="15" fill="rgb(236,173,5)" fg:x="369" fg:w="1"/><text x="28.5475%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.2975%" y="357" width="0.0767%" height="15" fill="rgb(230,95,12)" fg:x="369" fg:w="1"/><text x="28.5475%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.2975%" y="341" width="0.0767%" height="15" fill="rgb(232,209,1)" fg:x="369" fg:w="1"/><text x="28.5475%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.2975%" y="325" width="0.0767%" height="15" fill="rgb(232,6,1)" fg:x="369" fg:w="1"/><text x="28.5475%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.2975%" y="309" width="0.0767%" height="15" fill="rgb(210,224,50)" fg:x="369" fg:w="1"/><text x="28.5475%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="28.2975%" y="293" width="0.0767%" height="15" fill="rgb(228,127,35)" fg:x="369" fg:w="1"/><text x="28.5475%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.31%)</title><rect x="28.1442%" y="405" width="0.3067%" height="15" fill="rgb(245,102,45)" fg:x="367" fg:w="4"/><text x="28.3942%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.31%)</title><rect x="28.1442%" y="389" width="0.3067%" height="15" fill="rgb(214,1,49)" fg:x="367" fg:w="4"/><text x="28.3942%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.3742%" y="373" width="0.0767%" height="15" fill="rgb(226,163,40)" fg:x="370" fg:w="1"/><text x="28.6242%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="28.4509%" y="405" width="0.0767%" height="15" fill="rgb(239,212,28)" fg:x="371" fg:w="1"/><text x="28.7009%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="28.4509%" y="389" width="0.0767%" height="15" fill="rgb(220,20,13)" fg:x="371" fg:w="1"/><text x="28.7009%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="28.4509%" y="373" width="0.0767%" height="15" fill="rgb(210,164,35)" fg:x="371" fg:w="1"/><text x="28.7009%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="28.4509%" y="357" width="0.0767%" height="15" fill="rgb(248,109,41)" fg:x="371" fg:w="1"/><text x="28.7009%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="28.4509%" y="341" width="0.0767%" height="15" fill="rgb(238,23,50)" fg:x="371" fg:w="1"/><text x="28.7009%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="28.4509%" y="325" width="0.0767%" height="15" fill="rgb(211,48,49)" fg:x="371" fg:w="1"/><text x="28.7009%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="28.5276%" y="373" width="0.0767%" height="15" fill="rgb(223,36,21)" fg:x="372" fg:w="1"/><text x="28.7776%" y="383.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="28.6043%" y="357" width="0.0767%" height="15" fill="rgb(207,123,46)" fg:x="373" fg:w="1"/><text x="28.8543%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="28.6043%" y="341" width="0.0767%" height="15" fill="rgb(240,218,32)" fg:x="373" fg:w="1"/><text x="28.8543%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.6043%" y="325" width="0.0767%" height="15" fill="rgb(252,5,43)" fg:x="373" fg:w="1"/><text x="28.8543%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.6043%" y="309" width="0.0767%" height="15" fill="rgb(252,84,19)" fg:x="373" fg:w="1"/><text x="28.8543%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (9 samples, 0.69%)</title><rect x="28.0675%" y="501" width="0.6902%" height="15" fill="rgb(243,152,39)" fg:x="366" fg:w="9"/><text x="28.3175%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (9 samples, 0.69%)</title><rect x="28.0675%" y="485" width="0.6902%" height="15" fill="rgb(234,160,15)" fg:x="366" fg:w="9"/><text x="28.3175%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (9 samples, 0.69%)</title><rect x="28.0675%" y="469" width="0.6902%" height="15" fill="rgb(237,34,20)" fg:x="366" fg:w="9"/><text x="28.3175%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (8 samples, 0.61%)</title><rect x="28.1442%" y="453" width="0.6135%" height="15" fill="rgb(229,97,13)" fg:x="367" fg:w="8"/><text x="28.3942%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.61%)</title><rect x="28.1442%" y="437" width="0.6135%" height="15" fill="rgb(234,71,50)" fg:x="367" fg:w="8"/><text x="28.3942%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (8 samples, 0.61%)</title><rect x="28.1442%" y="421" width="0.6135%" height="15" fill="rgb(253,155,4)" fg:x="367" fg:w="8"/><text x="28.3942%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="28.5276%" y="405" width="0.2301%" height="15" fill="rgb(222,185,37)" fg:x="372" fg:w="3"/><text x="28.7776%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="28.5276%" y="389" width="0.2301%" height="15" fill="rgb(251,177,13)" fg:x="372" fg:w="3"/><text x="28.7776%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.15%)</title><rect x="28.6043%" y="373" width="0.1534%" height="15" fill="rgb(250,179,40)" fg:x="373" fg:w="2"/><text x="28.8543%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.6810%" y="357" width="0.0767%" height="15" fill="rgb(242,44,2)" fg:x="374" fg:w="1"/><text x="28.9310%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.6810%" y="341" width="0.0767%" height="15" fill="rgb(216,177,13)" fg:x="374" fg:w="1"/><text x="28.9310%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="28.6810%" y="325" width="0.0767%" height="15" fill="rgb(216,106,43)" fg:x="374" fg:w="1"/><text x="28.9310%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.6810%" y="309" width="0.0767%" height="15" fill="rgb(216,183,2)" fg:x="374" fg:w="1"/><text x="28.9310%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.6810%" y="293" width="0.0767%" height="15" fill="rgb(249,75,3)" fg:x="374" fg:w="1"/><text x="28.9310%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.6810%" y="277" width="0.0767%" height="15" fill="rgb(219,67,39)" fg:x="374" fg:w="1"/><text x="28.9310%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="28.7577%" y="405" width="0.1534%" height="15" fill="rgb(253,228,2)" fg:x="375" fg:w="2"/><text x="29.0077%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="28.7577%" y="389" width="0.1534%" height="15" fill="rgb(235,138,27)" fg:x="375" fg:w="2"/><text x="29.0077%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="28.8344%" y="373" width="0.0767%" height="15" fill="rgb(236,97,51)" fg:x="376" fg:w="1"/><text x="29.0844%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.8344%" y="357" width="0.0767%" height="15" fill="rgb(240,80,30)" fg:x="376" fg:w="1"/><text x="29.0844%" y="367.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (13 samples, 1.00%)</title><rect x="27.9908%" y="565" width="0.9969%" height="15" fill="rgb(230,178,19)" fg:x="365" fg:w="13"/><text x="28.2408%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (13 samples, 1.00%)</title><rect x="27.9908%" y="549" width="0.9969%" height="15" fill="rgb(210,190,27)" fg:x="365" fg:w="13"/><text x="28.2408%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (13 samples, 1.00%)</title><rect x="27.9908%" y="533" width="0.9969%" height="15" fill="rgb(222,107,31)" fg:x="365" fg:w="13"/><text x="28.2408%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.00%)</title><rect x="27.9908%" y="517" width="0.9969%" height="15" fill="rgb(216,127,34)" fg:x="365" fg:w="13"/><text x="28.2408%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.23%)</title><rect x="28.7577%" y="501" width="0.2301%" height="15" fill="rgb(234,116,52)" fg:x="375" fg:w="3"/><text x="29.0077%" y="511.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.23%)</title><rect x="28.7577%" y="485" width="0.2301%" height="15" fill="rgb(222,124,15)" fg:x="375" fg:w="3"/><text x="29.0077%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.23%)</title><rect x="28.7577%" y="469" width="0.2301%" height="15" fill="rgb(231,179,28)" fg:x="375" fg:w="3"/><text x="29.0077%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="28.7577%" y="453" width="0.2301%" height="15" fill="rgb(226,93,45)" fg:x="375" fg:w="3"/><text x="29.0077%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.23%)</title><rect x="28.7577%" y="437" width="0.2301%" height="15" fill="rgb(215,8,51)" fg:x="375" fg:w="3"/><text x="29.0077%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="28.7577%" y="421" width="0.2301%" height="15" fill="rgb(223,106,5)" fg:x="375" fg:w="3"/><text x="29.0077%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="28.9110%" y="405" width="0.0767%" height="15" fill="rgb(250,191,5)" fg:x="377" fg:w="1"/><text x="29.1610%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="28.9110%" y="389" width="0.0767%" height="15" fill="rgb(242,132,44)" fg:x="377" fg:w="1"/><text x="29.1610%" y="399.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (15 samples, 1.15%)</title><rect x="27.9141%" y="597" width="1.1503%" height="15" fill="rgb(251,152,29)" fg:x="364" fg:w="15"/><text x="28.1641%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (15 samples, 1.15%)</title><rect x="27.9141%" y="581" width="1.1503%" height="15" fill="rgb(218,179,5)" fg:x="364" fg:w="15"/><text x="28.1641%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.9877%" y="565" width="0.0767%" height="15" fill="rgb(227,67,19)" fg:x="378" fg:w="1"/><text x="29.2377%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.2945%" y="357" width="0.0767%" height="15" fill="rgb(233,119,31)" fg:x="382" fg:w="1"/><text x="29.5445%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.5245%" y="325" width="0.0767%" height="15" fill="rgb(241,120,22)" fg:x="385" fg:w="1"/><text x="29.7745%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (4 samples, 0.31%)</title><rect x="29.3712%" y="357" width="0.3067%" height="15" fill="rgb(224,102,30)" fg:x="383" fg:w="4"/><text x="29.6212%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.23%)</title><rect x="29.4479%" y="341" width="0.2301%" height="15" fill="rgb(210,164,37)" fg:x="384" fg:w="3"/><text x="29.6979%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.6012%" y="325" width="0.0767%" height="15" fill="rgb(226,191,16)" fg:x="386" fg:w="1"/><text x="29.8512%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="29.7546%" y="325" width="0.0767%" height="15" fill="rgb(214,40,45)" fg:x="388" fg:w="1"/><text x="30.0046%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.8313%" y="309" width="0.0767%" height="15" fill="rgb(244,29,26)" fg:x="389" fg:w="1"/><text x="30.0813%" y="319.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.23%)</title><rect x="29.7546%" y="341" width="0.2301%" height="15" fill="rgb(216,16,5)" fg:x="388" fg:w="3"/><text x="30.0046%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.15%)</title><rect x="29.8313%" y="325" width="0.1534%" height="15" fill="rgb(249,76,35)" fg:x="389" fg:w="2"/><text x="30.0813%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.9080%" y="309" width="0.0767%" height="15" fill="rgb(207,11,44)" fg:x="390" fg:w="1"/><text x="30.1580%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.9080%" y="293" width="0.0767%" height="15" fill="rgb(228,190,49)" fg:x="390" fg:w="1"/><text x="30.1580%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::end (1 samples, 0.08%)</title><rect x="29.9847%" y="325" width="0.0767%" height="15" fill="rgb(214,173,12)" fg:x="391" fg:w="1"/><text x="30.2347%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.0613%" y="309" width="0.0767%" height="15" fill="rgb(218,26,35)" fg:x="392" fg:w="1"/><text x="30.3113%" y="319.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (12 samples, 0.92%)</title><rect x="29.2945%" y="389" width="0.9202%" height="15" fill="rgb(220,200,19)" fg:x="382" fg:w="12"/><text x="29.5445%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.92%)</title><rect x="29.2945%" y="373" width="0.9202%" height="15" fill="rgb(239,95,49)" fg:x="382" fg:w="12"/><text x="29.5445%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (7 samples, 0.54%)</title><rect x="29.6779%" y="357" width="0.5368%" height="15" fill="rgb(235,85,53)" fg:x="387" fg:w="7"/><text x="29.9279%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (3 samples, 0.23%)</title><rect x="29.9847%" y="341" width="0.2301%" height="15" fill="rgb(233,133,31)" fg:x="391" fg:w="3"/><text x="30.2347%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.15%)</title><rect x="30.0613%" y="325" width="0.1534%" height="15" fill="rgb(218,25,20)" fg:x="392" fg:w="2"/><text x="30.3113%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="30.1380%" y="309" width="0.0767%" height="15" fill="rgb(252,210,38)" fg:x="393" fg:w="1"/><text x="30.3880%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="30.1380%" y="293" width="0.0767%" height="15" fill="rgb(242,134,21)" fg:x="393" fg:w="1"/><text x="30.3880%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.1380%" y="277" width="0.0767%" height="15" fill="rgb(213,28,48)" fg:x="393" fg:w="1"/><text x="30.3880%" y="287.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (13 samples, 1.00%)</title><rect x="29.2945%" y="405" width="0.9969%" height="15" fill="rgb(250,196,2)" fg:x="382" fg:w="13"/><text x="29.5445%" y="415.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="30.2147%" y="389" width="0.0767%" height="15" fill="rgb(227,5,17)" fg:x="394" fg:w="1"/><text x="30.4647%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="30.2147%" y="373" width="0.0767%" height="15" fill="rgb(221,226,24)" fg:x="394" fg:w="1"/><text x="30.4647%" y="383.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (14 samples, 1.07%)</title><rect x="29.2945%" y="421" width="1.0736%" height="15" fill="rgb(211,5,48)" fg:x="382" fg:w="14"/><text x="29.5445%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.2914%" y="405" width="0.0767%" height="15" fill="rgb(219,150,6)" fg:x="395" fg:w="1"/><text x="30.5414%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.5982%" y="373" width="0.0767%" height="15" fill="rgb(251,46,16)" fg:x="399" fg:w="1"/><text x="30.8482%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.5982%" y="357" width="0.0767%" height="15" fill="rgb(220,204,40)" fg:x="399" fg:w="1"/><text x="30.8482%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.5982%" y="341" width="0.0767%" height="15" fill="rgb(211,85,2)" fg:x="399" fg:w="1"/><text x="30.8482%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.5982%" y="325" width="0.0767%" height="15" fill="rgb(229,17,7)" fg:x="399" fg:w="1"/><text x="30.8482%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.5982%" y="309" width="0.0767%" height="15" fill="rgb(239,72,28)" fg:x="399" fg:w="1"/><text x="30.8482%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="30.5982%" y="293" width="0.0767%" height="15" fill="rgb(230,47,54)" fg:x="399" fg:w="1"/><text x="30.8482%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="30.5982%" y="277" width="0.0767%" height="15" fill="rgb(214,50,8)" fg:x="399" fg:w="1"/><text x="30.8482%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="30.5982%" y="261" width="0.0767%" height="15" fill="rgb(216,198,43)" fg:x="399" fg:w="1"/><text x="30.8482%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.5982%" y="245" width="0.0767%" height="15" fill="rgb(234,20,35)" fg:x="399" fg:w="1"/><text x="30.8482%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.5982%" y="229" width="0.0767%" height="15" fill="rgb(254,45,19)" fg:x="399" fg:w="1"/><text x="30.8482%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="30.5982%" y="213" width="0.0767%" height="15" fill="rgb(219,14,44)" fg:x="399" fg:w="1"/><text x="30.8482%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="30.5982%" y="197" width="0.0767%" height="15" fill="rgb(217,220,26)" fg:x="399" fg:w="1"/><text x="30.8482%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="30.5982%" y="181" width="0.0767%" height="15" fill="rgb(213,158,28)" fg:x="399" fg:w="1"/><text x="30.8482%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="30.5982%" y="165" width="0.0767%" height="15" fill="rgb(252,51,52)" fg:x="399" fg:w="1"/><text x="30.8482%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.5982%" y="149" width="0.0767%" height="15" fill="rgb(246,89,16)" fg:x="399" fg:w="1"/><text x="30.8482%" y="159.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="30.6748%" y="373" width="0.0767%" height="15" fill="rgb(216,158,49)" fg:x="400" fg:w="1"/><text x="30.9248%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="30.6748%" y="357" width="0.0767%" height="15" fill="rgb(236,107,19)" fg:x="400" fg:w="1"/><text x="30.9248%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="30.6748%" y="341" width="0.0767%" height="15" fill="rgb(228,185,30)" fg:x="400" fg:w="1"/><text x="30.9248%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.31%)</title><rect x="30.5982%" y="389" width="0.3067%" height="15" fill="rgb(246,134,8)" fg:x="399" fg:w="4"/><text x="30.8482%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="30.7515%" y="373" width="0.1534%" height="15" fill="rgb(214,143,50)" fg:x="401" fg:w="2"/><text x="31.0015%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="30.7515%" y="357" width="0.1534%" height="15" fill="rgb(228,75,8)" fg:x="401" fg:w="2"/><text x="31.0015%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="30.8282%" y="341" width="0.0767%" height="15" fill="rgb(207,175,4)" fg:x="402" fg:w="1"/><text x="31.0782%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="30.8282%" y="325" width="0.0767%" height="15" fill="rgb(205,108,24)" fg:x="402" fg:w="1"/><text x="31.0782%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.9816%" y="357" width="0.0767%" height="15" fill="rgb(244,120,49)" fg:x="404" fg:w="1"/><text x="31.2316%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.23%)</title><rect x="30.9049%" y="373" width="0.2301%" height="15" fill="rgb(223,47,38)" fg:x="403" fg:w="3"/><text x="31.1549%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="31.0583%" y="357" width="0.0767%" height="15" fill="rgb(229,179,11)" fg:x="405" fg:w="1"/><text x="31.3083%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="31.0583%" y="341" width="0.0767%" height="15" fill="rgb(231,122,1)" fg:x="405" fg:w="1"/><text x="31.3083%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.31%)</title><rect x="30.9049%" y="389" width="0.3067%" height="15" fill="rgb(245,119,9)" fg:x="403" fg:w="4"/><text x="31.1549%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="31.1350%" y="373" width="0.0767%" height="15" fill="rgb(241,163,25)" fg:x="406" fg:w="1"/><text x="31.3850%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.1350%" y="357" width="0.0767%" height="15" fill="rgb(217,214,3)" fg:x="406" fg:w="1"/><text x="31.3850%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.2117%" y="389" width="0.0767%" height="15" fill="rgb(240,86,28)" fg:x="407" fg:w="1"/><text x="31.4617%" y="399.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.15%)</title><rect x="31.2883%" y="389" width="0.1534%" height="15" fill="rgb(215,47,9)" fg:x="408" fg:w="2"/><text x="31.5383%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.15%)</title><rect x="31.2883%" y="373" width="0.1534%" height="15" fill="rgb(252,25,45)" fg:x="408" fg:w="2"/><text x="31.5383%" y="383.50"></text></g><g><title>core::fmt::write (2 samples, 0.15%)</title><rect x="31.2883%" y="357" width="0.1534%" height="15" fill="rgb(251,164,9)" fg:x="408" fg:w="2"/><text x="31.5383%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.15%)</title><rect x="31.2883%" y="341" width="0.1534%" height="15" fill="rgb(233,194,0)" fg:x="408" fg:w="2"/><text x="31.5383%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.15%)</title><rect x="31.2883%" y="325" width="0.1534%" height="15" fill="rgb(249,111,24)" fg:x="408" fg:w="2"/><text x="31.5383%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.3650%" y="309" width="0.0767%" height="15" fill="rgb(250,223,3)" fg:x="409" fg:w="1"/><text x="31.6150%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.3650%" y="293" width="0.0767%" height="15" fill="rgb(236,178,37)" fg:x="409" fg:w="1"/><text x="31.6150%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.3650%" y="277" width="0.0767%" height="15" fill="rgb(241,158,50)" fg:x="409" fg:w="1"/><text x="31.6150%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.5184%" y="373" width="0.0767%" height="15" fill="rgb(213,121,41)" fg:x="411" fg:w="1"/><text x="31.7684%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.5184%" y="357" width="0.0767%" height="15" fill="rgb(240,92,3)" fg:x="411" fg:w="1"/><text x="31.7684%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.5184%" y="341" width="0.0767%" height="15" fill="rgb(205,123,3)" fg:x="411" fg:w="1"/><text x="31.7684%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.5184%" y="325" width="0.0767%" height="15" fill="rgb(205,97,47)" fg:x="411" fg:w="1"/><text x="31.7684%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.5184%" y="309" width="0.0767%" height="15" fill="rgb(247,152,14)" fg:x="411" fg:w="1"/><text x="31.7684%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="31.5184%" y="293" width="0.0767%" height="15" fill="rgb(248,195,53)" fg:x="411" fg:w="1"/><text x="31.7684%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="31.5184%" y="277" width="0.0767%" height="15" fill="rgb(226,201,16)" fg:x="411" fg:w="1"/><text x="31.7684%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="31.5184%" y="261" width="0.0767%" height="15" fill="rgb(205,98,0)" fg:x="411" fg:w="1"/><text x="31.7684%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="31.5184%" y="245" width="0.0767%" height="15" fill="rgb(214,191,48)" fg:x="411" fg:w="1"/><text x="31.7684%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="31.5184%" y="229" width="0.0767%" height="15" fill="rgb(237,112,39)" fg:x="411" fg:w="1"/><text x="31.7684%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="31.5951%" y="373" width="0.0767%" height="15" fill="rgb(247,203,27)" fg:x="412" fg:w="1"/><text x="31.8451%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="31.5951%" y="357" width="0.0767%" height="15" fill="rgb(235,124,28)" fg:x="412" fg:w="1"/><text x="31.8451%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="31.6718%" y="341" width="0.0767%" height="15" fill="rgb(208,207,46)" fg:x="413" fg:w="1"/><text x="31.9218%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="31.7485%" y="309" width="0.0767%" height="15" fill="rgb(234,176,4)" fg:x="414" fg:w="1"/><text x="31.9985%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (7 samples, 0.54%)</title><rect x="31.4417%" y="389" width="0.5368%" height="15" fill="rgb(230,133,28)" fg:x="410" fg:w="7"/><text x="31.6917%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.31%)</title><rect x="31.6718%" y="373" width="0.3067%" height="15" fill="rgb(211,137,40)" fg:x="413" fg:w="4"/><text x="31.9218%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.31%)</title><rect x="31.6718%" y="357" width="0.3067%" height="15" fill="rgb(254,35,13)" fg:x="413" fg:w="4"/><text x="31.9218%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.23%)</title><rect x="31.7485%" y="341" width="0.2301%" height="15" fill="rgb(225,49,51)" fg:x="414" fg:w="3"/><text x="31.9985%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="31.7485%" y="325" width="0.2301%" height="15" fill="rgb(251,10,15)" fg:x="414" fg:w="3"/><text x="31.9985%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="31.8252%" y="309" width="0.1534%" height="15" fill="rgb(228,207,15)" fg:x="415" fg:w="2"/><text x="32.0752%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="31.8252%" y="293" width="0.1534%" height="15" fill="rgb(241,99,19)" fg:x="415" fg:w="2"/><text x="32.0752%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.9785%" y="389" width="0.0767%" height="15" fill="rgb(207,104,49)" fg:x="417" fg:w="1"/><text x="32.2285%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.0552%" y="357" width="0.0767%" height="15" fill="rgb(234,99,18)" fg:x="418" fg:w="1"/><text x="32.3052%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.1319%" y="357" width="0.0767%" height="15" fill="rgb(213,191,49)" fg:x="419" fg:w="1"/><text x="32.3819%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.15%)</title><rect x="32.2086%" y="325" width="0.1534%" height="15" fill="rgb(210,226,19)" fg:x="420" fg:w="2"/><text x="32.4586%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.2853%" y="309" width="0.0767%" height="15" fill="rgb(229,97,18)" fg:x="421" fg:w="1"/><text x="32.5353%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="32.3620%" y="293" width="0.0767%" height="15" fill="rgb(211,167,15)" fg:x="422" fg:w="1"/><text x="32.6120%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="32.3620%" y="277" width="0.0767%" height="15" fill="rgb(210,169,34)" fg:x="422" fg:w="1"/><text x="32.6120%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (7 samples, 0.54%)</title><rect x="32.0552%" y="373" width="0.5368%" height="15" fill="rgb(241,121,31)" fg:x="418" fg:w="7"/><text x="32.3052%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.38%)</title><rect x="32.2086%" y="357" width="0.3834%" height="15" fill="rgb(232,40,11)" fg:x="420" fg:w="5"/><text x="32.4586%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.38%)</title><rect x="32.2086%" y="341" width="0.3834%" height="15" fill="rgb(205,86,26)" fg:x="420" fg:w="5"/><text x="32.4586%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.23%)</title><rect x="32.3620%" y="325" width="0.2301%" height="15" fill="rgb(231,126,28)" fg:x="422" fg:w="3"/><text x="32.6120%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="32.3620%" y="309" width="0.2301%" height="15" fill="rgb(219,221,18)" fg:x="422" fg:w="3"/><text x="32.6120%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="32.4387%" y="293" width="0.1534%" height="15" fill="rgb(211,40,0)" fg:x="423" fg:w="2"/><text x="32.6887%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="32.4387%" y="277" width="0.1534%" height="15" fill="rgb(239,85,43)" fg:x="423" fg:w="2"/><text x="32.6887%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::gid (8 samples, 0.61%)</title><rect x="32.0552%" y="389" width="0.6135%" height="15" fill="rgb(231,55,21)" fg:x="418" fg:w="8"/><text x="32.3052%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="32.5920%" y="373" width="0.0767%" height="15" fill="rgb(225,184,43)" fg:x="425" fg:w="1"/><text x="32.8420%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.5920%" y="357" width="0.0767%" height="15" fill="rgb(251,158,41)" fg:x="425" fg:w="1"/><text x="32.8420%" y="367.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.7454%" y="325" width="0.0767%" height="15" fill="rgb(234,159,37)" fg:x="427" fg:w="1"/><text x="32.9954%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="32.8221%" y="309" width="0.0767%" height="15" fill="rgb(216,204,22)" fg:x="428" fg:w="1"/><text x="33.0721%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.23%)</title><rect x="32.8988%" y="309" width="0.2301%" height="15" fill="rgb(214,17,3)" fg:x="429" fg:w="3"/><text x="33.1488%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.23%)</title><rect x="32.8988%" y="293" width="0.2301%" height="15" fill="rgb(212,111,17)" fg:x="429" fg:w="3"/><text x="33.1488%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.23%)</title><rect x="32.8988%" y="277" width="0.2301%" height="15" fill="rgb(221,157,24)" fg:x="429" fg:w="3"/><text x="33.1488%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.23%)</title><rect x="32.8988%" y="261" width="0.2301%" height="15" fill="rgb(252,16,13)" fg:x="429" fg:w="3"/><text x="33.1488%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="33.0521%" y="245" width="0.0767%" height="15" fill="rgb(221,62,2)" fg:x="431" fg:w="1"/><text x="33.3021%" y="255.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="33.0521%" y="229" width="0.0767%" height="15" fill="rgb(247,87,22)" fg:x="431" fg:w="1"/><text x="33.3021%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.0521%" y="213" width="0.0767%" height="15" fill="rgb(215,73,9)" fg:x="431" fg:w="1"/><text x="33.3021%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.0521%" y="197" width="0.0767%" height="15" fill="rgb(207,175,33)" fg:x="431" fg:w="1"/><text x="33.3021%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.2055%" y="261" width="0.0767%" height="15" fill="rgb(243,129,54)" fg:x="433" fg:w="1"/><text x="33.4555%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.2822%" y="261" width="0.0767%" height="15" fill="rgb(227,119,45)" fg:x="434" fg:w="1"/><text x="33.5322%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.15%)</title><rect x="33.3589%" y="261" width="0.1534%" height="15" fill="rgb(205,109,36)" fg:x="435" fg:w="2"/><text x="33.6089%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.15%)</title><rect x="33.3589%" y="245" width="0.1534%" height="15" fill="rgb(205,6,39)" fg:x="435" fg:w="2"/><text x="33.6089%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.15%)</title><rect x="33.3589%" y="229" width="0.1534%" height="15" fill="rgb(221,32,16)" fg:x="435" fg:w="2"/><text x="33.6089%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.4356%" y="213" width="0.0767%" height="15" fill="rgb(228,144,50)" fg:x="436" fg:w="1"/><text x="33.6856%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.4356%" y="197" width="0.0767%" height="15" fill="rgb(229,201,53)" fg:x="436" fg:w="1"/><text x="33.6856%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.4356%" y="181" width="0.0767%" height="15" fill="rgb(249,153,27)" fg:x="436" fg:w="1"/><text x="33.6856%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (14 samples, 1.07%)</title><rect x="33.5123%" y="245" width="1.0736%" height="15" fill="rgb(227,106,25)" fg:x="437" fg:w="14"/><text x="33.7623%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (14 samples, 1.07%)</title><rect x="33.5123%" y="229" width="1.0736%" height="15" fill="rgb(230,65,29)" fg:x="437" fg:w="14"/><text x="33.7623%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.5092%" y="213" width="0.0767%" height="15" fill="rgb(221,57,46)" fg:x="450" fg:w="1"/><text x="34.7592%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.31%)</title><rect x="34.5859%" y="245" width="0.3067%" height="15" fill="rgb(229,161,17)" fg:x="451" fg:w="4"/><text x="34.8359%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.23%)</title><rect x="34.6626%" y="229" width="0.2301%" height="15" fill="rgb(222,213,11)" fg:x="452" fg:w="3"/><text x="34.9126%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="34.8160%" y="213" width="0.0767%" height="15" fill="rgb(235,35,13)" fg:x="454" fg:w="1"/><text x="35.0660%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="34.8926%" y="245" width="0.0767%" height="15" fill="rgb(233,158,34)" fg:x="455" fg:w="1"/><text x="35.1426%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="35.4294%" y="181" width="0.0767%" height="15" fill="rgb(215,151,48)" fg:x="462" fg:w="1"/><text x="35.6794%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.5061%" y="181" width="0.0767%" height="15" fill="rgb(229,84,14)" fg:x="463" fg:w="1"/><text x="35.7561%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="35.5828%" y="181" width="0.0767%" height="15" fill="rgb(229,68,14)" fg:x="464" fg:w="1"/><text x="35.8328%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.5828%" y="165" width="0.0767%" height="15" fill="rgb(243,106,26)" fg:x="464" fg:w="1"/><text x="35.8328%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.5828%" y="149" width="0.0767%" height="15" fill="rgb(206,45,38)" fg:x="464" fg:w="1"/><text x="35.8328%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.5828%" y="133" width="0.0767%" height="15" fill="rgb(226,6,15)" fg:x="464" fg:w="1"/><text x="35.8328%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="35.6595%" y="181" width="0.0767%" height="15" fill="rgb(232,22,54)" fg:x="465" fg:w="1"/><text x="35.9095%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="35.6595%" y="165" width="0.0767%" height="15" fill="rgb(229,222,32)" fg:x="465" fg:w="1"/><text x="35.9095%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="35.6595%" y="149" width="0.0767%" height="15" fill="rgb(228,62,29)" fg:x="465" fg:w="1"/><text x="35.9095%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.6595%" y="133" width="0.0767%" height="15" fill="rgb(251,103,34)" fg:x="465" fg:w="1"/><text x="35.9095%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.15%)</title><rect x="35.7362%" y="181" width="0.1534%" height="15" fill="rgb(233,12,30)" fg:x="466" fg:w="2"/><text x="35.9862%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.15%)</title><rect x="35.7362%" y="165" width="0.1534%" height="15" fill="rgb(238,52,0)" fg:x="466" fg:w="2"/><text x="35.9862%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.15%)</title><rect x="35.7362%" y="149" width="0.1534%" height="15" fill="rgb(223,98,5)" fg:x="466" fg:w="2"/><text x="35.9862%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (60 samples, 4.60%)</title><rect x="35.8896%" y="181" width="4.6012%" height="15" fill="rgb(228,75,37)" fg:x="468" fg:w="60"/><text x="36.1396%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (60 samples, 4.60%)</title><rect x="35.8896%" y="165" width="4.6012%" height="15" fill="rgb(205,115,49)" fg:x="468" fg:w="60"/><text x="36.1396%" y="175.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (60 samples, 4.60%)</title><rect x="35.8896%" y="149" width="4.6012%" height="15" fill="rgb(250,154,43)" fg:x="468" fg:w="60"/><text x="36.1396%" y="159.50">alloc..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.23%)</title><rect x="40.4908%" y="181" width="0.2301%" height="15" fill="rgb(226,43,29)" fg:x="528" fg:w="3"/><text x="40.7408%" y="191.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="40.7209%" y="181" width="0.0767%" height="15" fill="rgb(249,228,39)" fg:x="531" fg:w="1"/><text x="40.9709%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 5.98%)</title><rect x="34.9693%" y="229" width="5.9816%" height="15" fill="rgb(216,79,43)" fg:x="456" fg:w="78"/><text x="35.2193%" y="239.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (77 samples, 5.90%)</title><rect x="35.0460%" y="213" width="5.9049%" height="15" fill="rgb(228,95,12)" fg:x="457" fg:w="77"/><text x="35.2960%" y="223.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (76 samples, 5.83%)</title><rect x="35.1227%" y="197" width="5.8282%" height="15" fill="rgb(249,221,15)" fg:x="458" fg:w="76"/><text x="35.3727%" y="207.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.15%)</title><rect x="40.7975%" y="181" width="0.1534%" height="15" fill="rgb(233,34,13)" fg:x="532" fg:w="2"/><text x="41.0475%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.1810%" y="213" width="0.0767%" height="15" fill="rgb(214,103,39)" fg:x="537" fg:w="1"/><text x="41.4310%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.31%)</title><rect x="41.2577%" y="213" width="0.3067%" height="15" fill="rgb(251,126,39)" fg:x="538" fg:w="4"/><text x="41.5077%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.4877%" y="197" width="0.0767%" height="15" fill="rgb(214,216,36)" fg:x="541" fg:w="1"/><text x="41.7377%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.4877%" y="181" width="0.0767%" height="15" fill="rgb(220,221,8)" fg:x="541" fg:w="1"/><text x="41.7377%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.4877%" y="165" width="0.0767%" height="15" fill="rgb(240,216,3)" fg:x="541" fg:w="1"/><text x="41.7377%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.8712%" y="197" width="0.0767%" height="15" fill="rgb(232,218,17)" fg:x="546" fg:w="1"/><text x="42.1212%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.46%)</title><rect x="41.5644%" y="213" width="0.4601%" height="15" fill="rgb(229,163,45)" fg:x="542" fg:w="6"/><text x="41.8144%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.9479%" y="197" width="0.0767%" height="15" fill="rgb(231,110,42)" fg:x="547" fg:w="1"/><text x="42.1979%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (15 samples, 1.15%)</title><rect x="40.9509%" y="229" width="1.1503%" height="15" fill="rgb(208,170,48)" fg:x="534" fg:w="15"/><text x="41.2009%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="42.0245%" y="213" width="0.0767%" height="15" fill="rgb(239,116,25)" fg:x="548" fg:w="1"/><text x="42.2745%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.0245%" y="197" width="0.0767%" height="15" fill="rgb(219,200,50)" fg:x="548" fg:w="1"/><text x="42.2745%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="42.1012%" y="213" width="0.0767%" height="15" fill="rgb(245,200,0)" fg:x="549" fg:w="1"/><text x="42.3512%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (96 samples, 7.36%)</title><rect x="34.9693%" y="245" width="7.3620%" height="15" fill="rgb(245,119,33)" fg:x="456" fg:w="96"/><text x="35.2193%" y="255.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (3 samples, 0.23%)</title><rect x="42.1012%" y="229" width="0.2301%" height="15" fill="rgb(231,125,12)" fg:x="549" fg:w="3"/><text x="42.3512%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.15%)</title><rect x="42.1779%" y="213" width="0.1534%" height="15" fill="rgb(216,96,41)" fg:x="550" fg:w="2"/><text x="42.4279%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="42.2546%" y="197" width="0.0767%" height="15" fill="rgb(248,43,45)" fg:x="551" fg:w="1"/><text x="42.5046%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (116 samples, 8.90%)</title><rect x="33.5123%" y="261" width="8.8957%" height="15" fill="rgb(217,222,7)" fg:x="437" fg:w="116"/><text x="33.7623%" y="271.50">regex_automat..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="42.3313%" y="245" width="0.0767%" height="15" fill="rgb(233,28,6)" fg:x="552" fg:w="1"/><text x="42.5813%" y="255.50"></text></g><g><title>regex_syntax::hir::literal::Seq::optimize_by_preference (1 samples, 0.08%)</title><rect x="42.3313%" y="229" width="0.0767%" height="15" fill="rgb(231,218,15)" fg:x="552" fg:w="1"/><text x="42.5813%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="42.4847%" y="213" width="0.0767%" height="15" fill="rgb(226,171,48)" fg:x="554" fg:w="1"/><text x="42.7347%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="42.4847%" y="197" width="0.0767%" height="15" fill="rgb(235,201,9)" fg:x="554" fg:w="1"/><text x="42.7347%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="42.4847%" y="181" width="0.0767%" height="15" fill="rgb(217,80,15)" fg:x="554" fg:w="1"/><text x="42.7347%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.38%)</title><rect x="42.4080%" y="229" width="0.3834%" height="15" fill="rgb(219,152,8)" fg:x="553" fg:w="5"/><text x="42.6580%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.23%)</title><rect x="42.5613%" y="213" width="0.2301%" height="15" fill="rgb(243,107,38)" fg:x="555" fg:w="3"/><text x="42.8113%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.23%)</title><rect x="42.5613%" y="197" width="0.2301%" height="15" fill="rgb(231,17,5)" fg:x="555" fg:w="3"/><text x="42.8113%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.23%)</title><rect x="42.5613%" y="181" width="0.2301%" height="15" fill="rgb(209,25,54)" fg:x="555" fg:w="3"/><text x="42.8113%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.23%)</title><rect x="42.5613%" y="165" width="0.2301%" height="15" fill="rgb(219,0,2)" fg:x="555" fg:w="3"/><text x="42.8113%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="42.7914%" y="229" width="0.0767%" height="15" fill="rgb(246,9,5)" fg:x="558" fg:w="1"/><text x="43.0414%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.54%)</title><rect x="42.4080%" y="261" width="0.5368%" height="15" fill="rgb(226,159,4)" fg:x="553" fg:w="7"/><text x="42.6580%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.54%)</title><rect x="42.4080%" y="245" width="0.5368%" height="15" fill="rgb(219,175,34)" fg:x="553" fg:w="7"/><text x="42.6580%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="42.8681%" y="229" width="0.0767%" height="15" fill="rgb(236,10,46)" fg:x="559" fg:w="1"/><text x="43.1181%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="42.8681%" y="213" width="0.0767%" height="15" fill="rgb(240,211,16)" fg:x="559" fg:w="1"/><text x="43.1181%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.0215%" y="213" width="0.0767%" height="15" fill="rgb(205,3,43)" fg:x="561" fg:w="1"/><text x="43.2715%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.0215%" y="197" width="0.0767%" height="15" fill="rgb(245,7,22)" fg:x="561" fg:w="1"/><text x="43.2715%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.0215%" y="181" width="0.0767%" height="15" fill="rgb(239,132,32)" fg:x="561" fg:w="1"/><text x="43.2715%" y="191.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (131 samples, 10.05%)</title><rect x="33.1288%" y="277" width="10.0460%" height="15" fill="rgb(228,202,34)" fg:x="432" fg:w="131"/><text x="33.3788%" y="287.50">regex_automata:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.23%)</title><rect x="42.9448%" y="261" width="0.2301%" height="15" fill="rgb(254,200,22)" fg:x="560" fg:w="3"/><text x="43.1948%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.23%)</title><rect x="42.9448%" y="245" width="0.2301%" height="15" fill="rgb(219,10,39)" fg:x="560" fg:w="3"/><text x="43.1948%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.23%)</title><rect x="42.9448%" y="229" width="0.2301%" height="15" fill="rgb(226,210,39)" fg:x="560" fg:w="3"/><text x="43.1948%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="43.0982%" y="213" width="0.0767%" height="15" fill="rgb(208,219,16)" fg:x="562" fg:w="1"/><text x="43.3482%" y="223.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="43.0982%" y="197" width="0.0767%" height="15" fill="rgb(216,158,51)" fg:x="562" fg:w="1"/><text x="43.3482%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (132 samples, 10.12%)</title><rect x="33.1288%" y="309" width="10.1227%" height="15" fill="rgb(233,14,44)" fg:x="432" fg:w="132"/><text x="33.3788%" y="319.50">&lt;regex::regex::..</text></g><g><title>regex::builders::string::RegexBuilder::build (132 samples, 10.12%)</title><rect x="33.1288%" y="293" width="10.1227%" height="15" fill="rgb(237,97,39)" fg:x="432" fg:w="132"/><text x="33.3788%" y="303.50">regex::builders..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="43.1748%" y="277" width="0.0767%" height="15" fill="rgb(218,198,43)" fg:x="563" fg:w="1"/><text x="43.4248%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="43.3282%" y="277" width="0.0767%" height="15" fill="rgb(231,104,20)" fg:x="565" fg:w="1"/><text x="43.5782%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="43.3282%" y="261" width="0.0767%" height="15" fill="rgb(254,36,13)" fg:x="565" fg:w="1"/><text x="43.5782%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="43.3282%" y="245" width="0.0767%" height="15" fill="rgb(248,14,50)" fg:x="565" fg:w="1"/><text x="43.5782%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="43.3282%" y="229" width="0.0767%" height="15" fill="rgb(217,107,29)" fg:x="565" fg:w="1"/><text x="43.5782%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.3282%" y="213" width="0.0767%" height="15" fill="rgb(251,169,33)" fg:x="565" fg:w="1"/><text x="43.5782%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.23%)</title><rect x="43.4049%" y="261" width="0.2301%" height="15" fill="rgb(217,108,32)" fg:x="566" fg:w="3"/><text x="43.6549%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.5583%" y="245" width="0.0767%" height="15" fill="rgb(219,66,42)" fg:x="568" fg:w="1"/><text x="43.8083%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.54%)</title><rect x="43.2515%" y="309" width="0.5368%" height="15" fill="rgb(206,180,7)" fg:x="564" fg:w="7"/><text x="43.5015%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (7 samples, 0.54%)</title><rect x="43.2515%" y="293" width="0.5368%" height="15" fill="rgb(208,226,31)" fg:x="564" fg:w="7"/><text x="43.5015%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (5 samples, 0.38%)</title><rect x="43.4049%" y="277" width="0.3834%" height="15" fill="rgb(218,26,49)" fg:x="566" fg:w="5"/><text x="43.6549%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (2 samples, 0.15%)</title><rect x="43.6350%" y="261" width="0.1534%" height="15" fill="rgb(233,197,48)" fg:x="569" fg:w="2"/><text x="43.8850%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.15%)</title><rect x="43.6350%" y="245" width="0.1534%" height="15" fill="rgb(252,181,51)" fg:x="569" fg:w="2"/><text x="43.8850%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="44.0951%" y="229" width="0.0767%" height="15" fill="rgb(253,90,19)" fg:x="575" fg:w="1"/><text x="44.3451%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="44.1718%" y="229" width="0.0767%" height="15" fill="rgb(215,171,30)" fg:x="576" fg:w="1"/><text x="44.4218%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.61%)</title><rect x="43.7883%" y="245" width="0.6135%" height="15" fill="rgb(214,222,9)" fg:x="571" fg:w="8"/><text x="44.0383%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.15%)</title><rect x="44.2485%" y="229" width="0.1534%" height="15" fill="rgb(223,3,22)" fg:x="577" fg:w="2"/><text x="44.4985%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (152 samples, 11.66%)</title><rect x="32.8221%" y="325" width="11.6564%" height="15" fill="rgb(225,196,46)" fg:x="428" fg:w="152"/><text x="33.0721%" y="335.50">indefinite::helpe..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.69%)</title><rect x="43.7883%" y="309" width="0.6902%" height="15" fill="rgb(209,110,37)" fg:x="571" fg:w="9"/><text x="44.0383%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.69%)</title><rect x="43.7883%" y="293" width="0.6902%" height="15" fill="rgb(249,89,12)" fg:x="571" fg:w="9"/><text x="44.0383%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.69%)</title><rect x="43.7883%" y="277" width="0.6902%" height="15" fill="rgb(226,27,33)" fg:x="571" fg:w="9"/><text x="44.0383%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.69%)</title><rect x="43.7883%" y="261" width="0.6902%" height="15" fill="rgb(213,82,22)" fg:x="571" fg:w="9"/><text x="44.0383%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="44.4018%" y="245" width="0.0767%" height="15" fill="rgb(248,140,0)" fg:x="579" fg:w="1"/><text x="44.6518%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="44.4018%" y="229" width="0.0767%" height="15" fill="rgb(228,106,3)" fg:x="579" fg:w="1"/><text x="44.6518%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.4018%" y="213" width="0.0767%" height="15" fill="rgb(209,23,37)" fg:x="579" fg:w="1"/><text x="44.6518%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.4018%" y="197" width="0.0767%" height="15" fill="rgb(241,93,50)" fg:x="579" fg:w="1"/><text x="44.6518%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.15%)</title><rect x="44.4785%" y="261" width="0.1534%" height="15" fill="rgb(253,46,43)" fg:x="580" fg:w="2"/><text x="44.7285%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.15%)</title><rect x="44.4785%" y="245" width="0.1534%" height="15" fill="rgb(226,206,43)" fg:x="580" fg:w="2"/><text x="44.7285%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="44.5552%" y="229" width="0.0767%" height="15" fill="rgb(217,54,7)" fg:x="581" fg:w="1"/><text x="44.8052%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.6319%" y="261" width="0.0767%" height="15" fill="rgb(223,5,52)" fg:x="582" fg:w="1"/><text x="44.8819%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.7853%" y="229" width="0.0767%" height="15" fill="rgb(206,52,46)" fg:x="584" fg:w="1"/><text x="45.0353%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (14 samples, 1.07%)</title><rect x="44.8620%" y="229" width="1.0736%" height="15" fill="rgb(253,136,11)" fg:x="585" fg:w="14"/><text x="45.1120%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.8589%" y="213" width="0.0767%" height="15" fill="rgb(208,106,33)" fg:x="598" fg:w="1"/><text x="46.1089%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (17 samples, 1.30%)</title><rect x="44.7086%" y="245" width="1.3037%" height="15" fill="rgb(206,54,4)" fg:x="583" fg:w="17"/><text x="44.9586%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="45.9356%" y="229" width="0.0767%" height="15" fill="rgb(213,3,15)" fg:x="599" fg:w="1"/><text x="46.1856%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.9356%" y="213" width="0.0767%" height="15" fill="rgb(252,211,39)" fg:x="599" fg:w="1"/><text x="46.1856%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.15%)</title><rect x="46.0123%" y="245" width="0.1534%" height="15" fill="rgb(223,6,36)" fg:x="600" fg:w="2"/><text x="46.2623%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.15%)</title><rect x="46.0123%" y="229" width="0.1534%" height="15" fill="rgb(252,169,45)" fg:x="600" fg:w="2"/><text x="46.2623%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="46.4724%" y="213" width="0.0767%" height="15" fill="rgb(212,48,26)" fg:x="606" fg:w="1"/><text x="46.7224%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="46.4724%" y="197" width="0.0767%" height="15" fill="rgb(251,102,48)" fg:x="606" fg:w="1"/><text x="46.7224%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.4724%" y="181" width="0.0767%" height="15" fill="rgb(243,208,16)" fg:x="606" fg:w="1"/><text x="46.7224%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.15%)</title><rect x="46.5491%" y="213" width="0.1534%" height="15" fill="rgb(219,96,24)" fg:x="607" fg:w="2"/><text x="46.7991%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="46.6258%" y="197" width="0.0767%" height="15" fill="rgb(219,33,29)" fg:x="608" fg:w="1"/><text x="46.8758%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.23%)</title><rect x="46.7025%" y="213" width="0.2301%" height="15" fill="rgb(223,176,5)" fg:x="609" fg:w="3"/><text x="46.9525%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.23%)</title><rect x="46.7025%" y="197" width="0.2301%" height="15" fill="rgb(228,140,14)" fg:x="609" fg:w="3"/><text x="46.9525%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.15%)</title><rect x="46.7791%" y="181" width="0.1534%" height="15" fill="rgb(217,179,31)" fg:x="610" fg:w="2"/><text x="47.0291%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (11 samples, 0.84%)</title><rect x="46.1656%" y="245" width="0.8436%" height="15" fill="rgb(230,9,30)" fg:x="602" fg:w="11"/><text x="46.4156%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (10 samples, 0.77%)</title><rect x="46.2423%" y="229" width="0.7669%" height="15" fill="rgb(230,136,20)" fg:x="603" fg:w="10"/><text x="46.4923%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="46.9325%" y="213" width="0.0767%" height="15" fill="rgb(215,210,22)" fg:x="612" fg:w="1"/><text x="47.1825%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="47.0092%" y="197" width="0.0767%" height="15" fill="rgb(218,43,5)" fg:x="613" fg:w="1"/><text x="47.2592%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.0092%" y="181" width="0.0767%" height="15" fill="rgb(216,11,5)" fg:x="613" fg:w="1"/><text x="47.2592%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.0092%" y="165" width="0.0767%" height="15" fill="rgb(209,82,29)" fg:x="613" fg:w="1"/><text x="47.2592%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.0092%" y="149" width="0.0767%" height="15" fill="rgb(244,115,12)" fg:x="613" fg:w="1"/><text x="47.2592%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.23%)</title><rect x="47.9294%" y="133" width="0.2301%" height="15" fill="rgb(222,82,18)" fg:x="625" fg:w="3"/><text x="48.1794%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.23%)</title><rect x="48.1595%" y="133" width="0.2301%" height="15" fill="rgb(249,227,8)" fg:x="628" fg:w="3"/><text x="48.4095%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.3129%" y="117" width="0.0767%" height="15" fill="rgb(253,141,45)" fg:x="630" fg:w="1"/><text x="48.5629%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.3129%" y="101" width="0.0767%" height="15" fill="rgb(234,184,4)" fg:x="630" fg:w="1"/><text x="48.5629%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.3129%" y="85" width="0.0767%" height="15" fill="rgb(218,194,23)" fg:x="630" fg:w="1"/><text x="48.5629%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="48.3896%" y="133" width="0.0767%" height="15" fill="rgb(235,66,41)" fg:x="631" fg:w="1"/><text x="48.6396%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.5429%" y="101" width="0.0767%" height="15" fill="rgb(245,217,1)" fg:x="633" fg:w="1"/><text x="48.7929%" y="111.50"></text></g><g><title>__libc_malloc (2 samples, 0.15%)</title><rect x="48.6963%" y="69" width="0.1534%" height="15" fill="rgb(229,91,1)" fg:x="635" fg:w="2"/><text x="48.9463%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.38%)</title><rect x="48.6196%" y="101" width="0.3834%" height="15" fill="rgb(207,101,30)" fg:x="634" fg:w="5"/><text x="48.8696%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.31%)</title><rect x="48.6963%" y="85" width="0.3067%" height="15" fill="rgb(223,82,49)" fg:x="635" fg:w="4"/><text x="48.9463%" y="95.50"></text></g><g><title>realloc (2 samples, 0.15%)</title><rect x="48.8497%" y="69" width="0.1534%" height="15" fill="rgb(218,167,17)" fg:x="637" fg:w="2"/><text x="49.0997%" y="79.50"></text></g><g><title>__libc_malloc (3 samples, 0.23%)</title><rect x="49.3098%" y="85" width="0.2301%" height="15" fill="rgb(208,103,14)" fg:x="643" fg:w="3"/><text x="49.5598%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (16 samples, 1.23%)</title><rect x="48.4663%" y="133" width="1.2270%" height="15" fill="rgb(238,20,8)" fg:x="632" fg:w="16"/><text x="48.7163%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (16 samples, 1.23%)</title><rect x="48.4663%" y="117" width="1.2270%" height="15" fill="rgb(218,80,54)" fg:x="632" fg:w="16"/><text x="48.7163%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (9 samples, 0.69%)</title><rect x="49.0031%" y="101" width="0.6902%" height="15" fill="rgb(240,144,17)" fg:x="639" fg:w="9"/><text x="49.2531%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.15%)</title><rect x="49.5399%" y="85" width="0.1534%" height="15" fill="rgb(245,27,50)" fg:x="646" fg:w="2"/><text x="49.7899%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.15%)</title><rect x="49.5399%" y="69" width="0.1534%" height="15" fill="rgb(251,51,7)" fg:x="646" fg:w="2"/><text x="49.7899%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.15%)</title><rect x="49.5399%" y="53" width="0.1534%" height="15" fill="rgb(245,217,29)" fg:x="646" fg:w="2"/><text x="49.7899%" y="63.50"></text></g><g><title>realloc (2 samples, 0.15%)</title><rect x="49.5399%" y="37" width="0.1534%" height="15" fill="rgb(221,176,29)" fg:x="646" fg:w="2"/><text x="49.7899%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (68 samples, 5.21%)</title><rect x="49.6933%" y="133" width="5.2147%" height="15" fill="rgb(212,180,24)" fg:x="648" fg:w="68"/><text x="49.9433%" y="143.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (68 samples, 5.21%)</title><rect x="49.6933%" y="117" width="5.2147%" height="15" fill="rgb(254,24,2)" fg:x="648" fg:w="68"/><text x="49.9433%" y="127.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (68 samples, 5.21%)</title><rect x="49.6933%" y="101" width="5.2147%" height="15" fill="rgb(230,100,2)" fg:x="648" fg:w="68"/><text x="49.9433%" y="111.50">alloc:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.23%)</title><rect x="54.9080%" y="133" width="0.2301%" height="15" fill="rgb(219,142,25)" fg:x="716" fg:w="3"/><text x="55.1580%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (109 samples, 8.36%)</title><rect x="47.0092%" y="229" width="8.3589%" height="15" fill="rgb(240,73,43)" fg:x="613" fg:w="109"/><text x="47.2592%" y="239.50">&lt;core::iter:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (109 samples, 8.36%)</title><rect x="47.0092%" y="213" width="8.3589%" height="15" fill="rgb(214,114,15)" fg:x="613" fg:w="109"/><text x="47.2592%" y="223.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (108 samples, 8.28%)</title><rect x="47.0859%" y="197" width="8.2822%" height="15" fill="rgb(207,130,4)" fg:x="614" fg:w="108"/><text x="47.3359%" y="207.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (108 samples, 8.28%)</title><rect x="47.0859%" y="181" width="8.2822%" height="15" fill="rgb(221,25,40)" fg:x="614" fg:w="108"/><text x="47.3359%" y="191.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (108 samples, 8.28%)</title><rect x="47.0859%" y="165" width="8.2822%" height="15" fill="rgb(241,184,7)" fg:x="614" fg:w="108"/><text x="47.3359%" y="175.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (108 samples, 8.28%)</title><rect x="47.0859%" y="149" width="8.2822%" height="15" fill="rgb(235,159,4)" fg:x="614" fg:w="108"/><text x="47.3359%" y="159.50">regex_automa..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.23%)</title><rect x="55.1380%" y="133" width="0.2301%" height="15" fill="rgb(214,87,48)" fg:x="719" fg:w="3"/><text x="55.3880%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.2914%" y="117" width="0.0767%" height="15" fill="rgb(246,198,24)" fg:x="721" fg:w="1"/><text x="55.5414%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.2914%" y="101" width="0.0767%" height="15" fill="rgb(209,66,40)" fg:x="721" fg:w="1"/><text x="55.5414%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.2914%" y="85" width="0.0767%" height="15" fill="rgb(233,147,39)" fg:x="721" fg:w="1"/><text x="55.5414%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="55.3681%" y="229" width="0.0767%" height="15" fill="rgb(231,145,52)" fg:x="722" fg:w="1"/><text x="55.6181%" y="239.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="55.7515%" y="213" width="0.0767%" height="15" fill="rgb(206,20,26)" fg:x="727" fg:w="1"/><text x="56.0015%" y="223.50"></text></g><g><title>__libc_malloc (3 samples, 0.23%)</title><rect x="55.8282%" y="213" width="0.2301%" height="15" fill="rgb(238,220,4)" fg:x="728" fg:w="3"/><text x="56.0782%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.31%)</title><rect x="56.0583%" y="213" width="0.3067%" height="15" fill="rgb(252,195,42)" fg:x="731" fg:w="4"/><text x="56.3083%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.23%)</title><rect x="56.1350%" y="197" width="0.2301%" height="15" fill="rgb(209,10,6)" fg:x="732" fg:w="3"/><text x="56.3850%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.23%)</title><rect x="56.1350%" y="181" width="0.2301%" height="15" fill="rgb(229,3,52)" fg:x="732" fg:w="3"/><text x="56.3850%" y="191.50"></text></g><g><title>realloc (3 samples, 0.23%)</title><rect x="56.1350%" y="165" width="0.2301%" height="15" fill="rgb(253,49,37)" fg:x="732" fg:w="3"/><text x="56.3850%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.23%)</title><rect x="56.3650%" y="213" width="0.2301%" height="15" fill="rgb(240,103,49)" fg:x="735" fg:w="3"/><text x="56.6150%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (126 samples, 9.66%)</title><rect x="47.0092%" y="245" width="9.6626%" height="15" fill="rgb(250,182,30)" fg:x="613" fg:w="126"/><text x="47.2592%" y="255.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (16 samples, 1.23%)</title><rect x="55.4448%" y="229" width="1.2270%" height="15" fill="rgb(248,8,30)" fg:x="723" fg:w="16"/><text x="55.6948%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="56.5951%" y="213" width="0.0767%" height="15" fill="rgb(237,120,30)" fg:x="738" fg:w="1"/><text x="56.8451%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="56.5951%" y="197" width="0.0767%" height="15" fill="rgb(221,146,34)" fg:x="738" fg:w="1"/><text x="56.8451%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (157 samples, 12.04%)</title><rect x="44.7086%" y="261" width="12.0399%" height="15" fill="rgb(242,55,13)" fg:x="583" fg:w="157"/><text x="44.9586%" y="271.50">regex_automata::me..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="56.6718%" y="245" width="0.0767%" height="15" fill="rgb(242,112,31)" fg:x="739" fg:w="1"/><text x="56.9218%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="56.6718%" y="229" width="0.0767%" height="15" fill="rgb(249,192,27)" fg:x="739" fg:w="1"/><text x="56.9218%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="56.6718%" y="213" width="0.0767%" height="15" fill="rgb(208,204,44)" fg:x="739" fg:w="1"/><text x="56.9218%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="56.8252%" y="229" width="0.0767%" height="15" fill="rgb(208,93,54)" fg:x="741" fg:w="1"/><text x="57.0752%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="56.8252%" y="213" width="0.0767%" height="15" fill="rgb(242,1,31)" fg:x="741" fg:w="1"/><text x="57.0752%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.8252%" y="197" width="0.0767%" height="15" fill="rgb(241,83,25)" fg:x="741" fg:w="1"/><text x="57.0752%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.8252%" y="181" width="0.0767%" height="15" fill="rgb(205,169,50)" fg:x="741" fg:w="1"/><text x="57.0752%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.8252%" y="165" width="0.0767%" height="15" fill="rgb(239,186,37)" fg:x="741" fg:w="1"/><text x="57.0752%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="56.9018%" y="229" width="0.0767%" height="15" fill="rgb(205,221,10)" fg:x="742" fg:w="1"/><text x="57.1518%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.31%)</title><rect x="56.7485%" y="261" width="0.3067%" height="15" fill="rgb(218,196,15)" fg:x="740" fg:w="4"/><text x="56.9985%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.31%)</title><rect x="56.7485%" y="245" width="0.3067%" height="15" fill="rgb(218,196,35)" fg:x="740" fg:w="4"/><text x="56.9985%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="56.9785%" y="229" width="0.0767%" height="15" fill="rgb(233,63,24)" fg:x="743" fg:w="1"/><text x="57.2285%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.2086%" y="181" width="0.0767%" height="15" fill="rgb(225,8,4)" fg:x="746" fg:w="1"/><text x="57.4586%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.31%)</title><rect x="57.0552%" y="229" width="0.3067%" height="15" fill="rgb(234,105,35)" fg:x="744" fg:w="4"/><text x="57.3052%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.31%)</title><rect x="57.0552%" y="213" width="0.3067%" height="15" fill="rgb(236,21,32)" fg:x="744" fg:w="4"/><text x="57.3052%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.23%)</title><rect x="57.1319%" y="197" width="0.2301%" height="15" fill="rgb(228,109,6)" fg:x="745" fg:w="3"/><text x="57.3819%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.2853%" y="181" width="0.0767%" height="15" fill="rgb(229,215,31)" fg:x="747" fg:w="1"/><text x="57.5353%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="57.3620%" y="229" width="0.0767%" height="15" fill="rgb(221,52,54)" fg:x="748" fg:w="1"/><text x="57.6120%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="57.3620%" y="213" width="0.0767%" height="15" fill="rgb(252,129,43)" fg:x="748" fg:w="1"/><text x="57.6120%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (170 samples, 13.04%)</title><rect x="44.4785%" y="309" width="13.0368%" height="15" fill="rgb(248,183,27)" fg:x="580" fg:w="170"/><text x="44.7285%" y="319.50">&lt;regex::regex::strin..</text></g><g><title>regex::builders::string::RegexBuilder::build (170 samples, 13.04%)</title><rect x="44.4785%" y="293" width="13.0368%" height="15" fill="rgb(250,0,22)" fg:x="580" fg:w="170"/><text x="44.7285%" y="303.50">regex::builders::str..</text></g><g><title>regex_automata::meta::regex::Builder::build (170 samples, 13.04%)</title><rect x="44.4785%" y="277" width="13.0368%" height="15" fill="rgb(213,166,10)" fg:x="580" fg:w="170"/><text x="44.7285%" y="287.50">regex_automata::meta..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.46%)</title><rect x="57.0552%" y="261" width="0.4601%" height="15" fill="rgb(207,163,36)" fg:x="744" fg:w="6"/><text x="57.3052%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.46%)</title><rect x="57.0552%" y="245" width="0.4601%" height="15" fill="rgb(208,122,22)" fg:x="744" fg:w="6"/><text x="57.3052%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="57.4387%" y="229" width="0.0767%" height="15" fill="rgb(207,104,49)" fg:x="749" fg:w="1"/><text x="57.6887%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="57.4387%" y="213" width="0.0767%" height="15" fill="rgb(248,211,50)" fg:x="749" fg:w="1"/><text x="57.6887%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.4387%" y="197" width="0.0767%" height="15" fill="rgb(217,13,45)" fg:x="749" fg:w="1"/><text x="57.6887%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.4387%" y="181" width="0.0767%" height="15" fill="rgb(211,216,49)" fg:x="749" fg:w="1"/><text x="57.6887%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.4387%" y="165" width="0.0767%" height="15" fill="rgb(221,58,53)" fg:x="749" fg:w="1"/><text x="57.6887%" y="175.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="57.5153%" y="293" width="0.0767%" height="15" fill="rgb(220,112,41)" fg:x="750" fg:w="1"/><text x="57.7653%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="57.5153%" y="277" width="0.0767%" height="15" fill="rgb(236,38,28)" fg:x="750" fg:w="1"/><text x="57.7653%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::Cache::new (1 samples, 0.08%)</title><rect x="57.5920%" y="245" width="0.0767%" height="15" fill="rgb(227,195,22)" fg:x="751" fg:w="1"/><text x="57.8420%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.23%)</title><rect x="57.6687%" y="229" width="0.2301%" height="15" fill="rgb(214,55,33)" fg:x="752" fg:w="3"/><text x="57.9187%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="57.8221%" y="213" width="0.0767%" height="15" fill="rgb(248,80,13)" fg:x="754" fg:w="1"/><text x="58.0721%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="57.8221%" y="197" width="0.0767%" height="15" fill="rgb(238,52,6)" fg:x="754" fg:w="1"/><text x="58.0721%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.31%)</title><rect x="57.6687%" y="245" width="0.3067%" height="15" fill="rgb(224,198,47)" fg:x="752" fg:w="4"/><text x="57.9187%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="57.8988%" y="229" width="0.0767%" height="15" fill="rgb(233,171,20)" fg:x="755" fg:w="1"/><text x="58.1488%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.8988%" y="213" width="0.0767%" height="15" fill="rgb(241,30,25)" fg:x="755" fg:w="1"/><text x="58.1488%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.8988%" y="197" width="0.0767%" height="15" fill="rgb(207,171,38)" fg:x="755" fg:w="1"/><text x="58.1488%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.8988%" y="181" width="0.0767%" height="15" fill="rgb(234,70,1)" fg:x="755" fg:w="1"/><text x="58.1488%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (177 samples, 13.57%)</title><rect x="44.4785%" y="325" width="13.5736%" height="15" fill="rgb(232,178,18)" fg:x="580" fg:w="177"/><text x="44.7285%" y="335.50">indefinite::rules::nu..</text></g><g><title>regex::regex::string::Regex::is_match_at (7 samples, 0.54%)</title><rect x="57.5153%" y="309" width="0.5368%" height="15" fill="rgb(241,78,40)" fg:x="750" fg:w="7"/><text x="57.7653%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.46%)</title><rect x="57.5920%" y="293" width="0.4601%" height="15" fill="rgb(222,35,25)" fg:x="751" fg:w="6"/><text x="57.8420%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.46%)</title><rect x="57.5920%" y="277" width="0.4601%" height="15" fill="rgb(207,92,16)" fg:x="751" fg:w="6"/><text x="57.8420%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.46%)</title><rect x="57.5920%" y="261" width="0.4601%" height="15" fill="rgb(216,59,51)" fg:x="751" fg:w="6"/><text x="57.8420%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="57.9755%" y="245" width="0.0767%" height="15" fill="rgb(213,80,28)" fg:x="756" fg:w="1"/><text x="58.2255%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="57.9755%" y="229" width="0.0767%" height="15" fill="rgb(220,93,7)" fg:x="756" fg:w="1"/><text x="58.2255%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="58.2055%" y="213" width="0.0767%" height="15" fill="rgb(225,24,44)" fg:x="759" fg:w="1"/><text x="58.4555%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="58.2822%" y="181" width="0.0767%" height="15" fill="rgb(243,74,40)" fg:x="760" fg:w="1"/><text x="58.5322%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.31%)</title><rect x="58.1288%" y="245" width="0.3067%" height="15" fill="rgb(228,39,7)" fg:x="758" fg:w="4"/><text x="58.3788%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="58.1288%" y="229" width="0.3067%" height="15" fill="rgb(227,79,8)" fg:x="758" fg:w="4"/><text x="58.3788%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.15%)</title><rect x="58.2822%" y="213" width="0.1534%" height="15" fill="rgb(236,58,11)" fg:x="760" fg:w="2"/><text x="58.5322%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.15%)</title><rect x="58.2822%" y="197" width="0.1534%" height="15" fill="rgb(249,63,35)" fg:x="760" fg:w="2"/><text x="58.5322%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="58.3589%" y="181" width="0.0767%" height="15" fill="rgb(252,114,16)" fg:x="761" fg:w="1"/><text x="58.6089%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="58.4356%" y="229" width="0.0767%" height="15" fill="rgb(254,151,24)" fg:x="762" fg:w="1"/><text x="58.6856%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.4356%" y="213" width="0.0767%" height="15" fill="rgb(253,54,39)" fg:x="762" fg:w="1"/><text x="58.6856%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="58.5123%" y="229" width="0.0767%" height="15" fill="rgb(243,25,45)" fg:x="763" fg:w="1"/><text x="58.7623%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.15%)</title><rect x="58.6656%" y="213" width="0.1534%" height="15" fill="rgb(234,134,9)" fg:x="765" fg:w="2"/><text x="58.9156%" y="223.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="58.7423%" y="197" width="0.0767%" height="15" fill="rgb(227,166,31)" fg:x="766" fg:w="1"/><text x="58.9923%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.7423%" y="181" width="0.0767%" height="15" fill="rgb(245,143,41)" fg:x="766" fg:w="1"/><text x="58.9923%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.46%)</title><rect x="58.5890%" y="229" width="0.4601%" height="15" fill="rgb(238,181,32)" fg:x="764" fg:w="6"/><text x="58.8390%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (3 samples, 0.23%)</title><rect x="58.8190%" y="213" width="0.2301%" height="15" fill="rgb(224,113,18)" fg:x="767" fg:w="3"/><text x="59.0690%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (3 samples, 0.23%)</title><rect x="58.8190%" y="197" width="0.2301%" height="15" fill="rgb(240,229,28)" fg:x="767" fg:w="3"/><text x="59.0690%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="58.9724%" y="181" width="0.0767%" height="15" fill="rgb(250,185,3)" fg:x="769" fg:w="1"/><text x="59.2224%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="59.0491%" y="229" width="0.0767%" height="15" fill="rgb(212,59,25)" fg:x="770" fg:w="1"/><text x="59.2991%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="59.1258%" y="197" width="0.0767%" height="15" fill="rgb(221,87,20)" fg:x="771" fg:w="1"/><text x="59.3758%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.1258%" y="181" width="0.0767%" height="15" fill="rgb(213,74,28)" fg:x="771" fg:w="1"/><text x="59.3758%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.1258%" y="165" width="0.0767%" height="15" fill="rgb(224,132,34)" fg:x="771" fg:w="1"/><text x="59.3758%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.1258%" y="149" width="0.0767%" height="15" fill="rgb(222,101,24)" fg:x="771" fg:w="1"/><text x="59.3758%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.15%)</title><rect x="59.1258%" y="213" width="0.1534%" height="15" fill="rgb(254,142,4)" fg:x="771" fg:w="2"/><text x="59.3758%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="59.2025%" y="197" width="0.0767%" height="15" fill="rgb(230,229,49)" fg:x="772" fg:w="1"/><text x="59.4525%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="59.2025%" y="181" width="0.0767%" height="15" fill="rgb(238,70,47)" fg:x="772" fg:w="1"/><text x="59.4525%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="59.2025%" y="165" width="0.0767%" height="15" fill="rgb(231,160,17)" fg:x="772" fg:w="1"/><text x="59.4525%" y="175.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="59.4325%" y="197" width="0.0767%" height="15" fill="rgb(218,68,53)" fg:x="775" fg:w="1"/><text x="59.6825%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="59.5092%" y="197" width="0.0767%" height="15" fill="rgb(236,111,10)" fg:x="776" fg:w="1"/><text x="59.7592%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.23%)</title><rect x="59.5859%" y="197" width="0.2301%" height="15" fill="rgb(224,34,41)" fg:x="777" fg:w="3"/><text x="59.8359%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.7393%" y="181" width="0.0767%" height="15" fill="rgb(241,118,19)" fg:x="779" fg:w="1"/><text x="59.9893%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.7393%" y="165" width="0.0767%" height="15" fill="rgb(238,129,25)" fg:x="779" fg:w="1"/><text x="59.9893%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="59.8160%" y="197" width="0.0767%" height="15" fill="rgb(238,22,31)" fg:x="780" fg:w="1"/><text x="60.0660%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.8926%" y="181" width="0.0767%" height="15" fill="rgb(222,174,48)" fg:x="781" fg:w="1"/><text x="60.1426%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (23 samples, 1.76%)</title><rect x="58.4356%" y="245" width="1.7638%" height="15" fill="rgb(206,152,40)" fg:x="762" fg:w="23"/><text x="58.6856%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (14 samples, 1.07%)</title><rect x="59.1258%" y="229" width="1.0736%" height="15" fill="rgb(218,99,54)" fg:x="771" fg:w="14"/><text x="59.3758%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.92%)</title><rect x="59.2791%" y="213" width="0.9202%" height="15" fill="rgb(220,174,26)" fg:x="773" fg:w="12"/><text x="59.5291%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (4 samples, 0.31%)</title><rect x="59.8926%" y="197" width="0.3067%" height="15" fill="rgb(245,116,9)" fg:x="781" fg:w="4"/><text x="60.1426%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (3 samples, 0.23%)</title><rect x="59.9693%" y="181" width="0.2301%" height="15" fill="rgb(209,72,35)" fg:x="782" fg:w="3"/><text x="60.2193%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.15%)</title><rect x="60.0460%" y="165" width="0.1534%" height="15" fill="rgb(226,126,21)" fg:x="783" fg:w="2"/><text x="60.2960%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.1227%" y="149" width="0.0767%" height="15" fill="rgb(227,192,1)" fg:x="784" fg:w="1"/><text x="60.3727%" y="159.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="60.1994%" y="245" width="0.0767%" height="15" fill="rgb(237,180,29)" fg:x="785" fg:w="1"/><text x="60.4494%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="60.1994%" y="229" width="0.0767%" height="15" fill="rgb(230,197,35)" fg:x="785" fg:w="1"/><text x="60.4494%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="60.1994%" y="213" width="0.0767%" height="15" fill="rgb(246,193,31)" fg:x="785" fg:w="1"/><text x="60.4494%" y="223.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="60.1994%" y="197" width="0.0767%" height="15" fill="rgb(241,36,4)" fg:x="785" fg:w="1"/><text x="60.4494%" y="207.50"></text></g><g><title>posix_memalign (1 samples, 0.08%)</title><rect x="60.1994%" y="181" width="0.0767%" height="15" fill="rgb(241,130,17)" fg:x="785" fg:w="1"/><text x="60.4494%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="60.4294%" y="197" width="0.0767%" height="15" fill="rgb(206,137,32)" fg:x="788" fg:w="1"/><text x="60.6794%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.46%)</title><rect x="60.2761%" y="245" width="0.4601%" height="15" fill="rgb(237,228,51)" fg:x="786" fg:w="6"/><text x="60.5261%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.38%)</title><rect x="60.3528%" y="229" width="0.3834%" height="15" fill="rgb(243,6,42)" fg:x="787" fg:w="5"/><text x="60.6028%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.38%)</title><rect x="60.3528%" y="213" width="0.3834%" height="15" fill="rgb(251,74,28)" fg:x="787" fg:w="5"/><text x="60.6028%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.23%)</title><rect x="60.5061%" y="197" width="0.2301%" height="15" fill="rgb(218,20,49)" fg:x="789" fg:w="3"/><text x="60.7561%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.6595%" y="181" width="0.0767%" height="15" fill="rgb(238,28,14)" fg:x="791" fg:w="1"/><text x="60.9095%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.6595%" y="165" width="0.0767%" height="15" fill="rgb(229,40,46)" fg:x="791" fg:w="1"/><text x="60.9095%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.6595%" y="149" width="0.0767%" height="15" fill="rgb(244,195,20)" fg:x="791" fg:w="1"/><text x="60.9095%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="60.8129%" y="213" width="0.0767%" height="15" fill="rgb(253,56,35)" fg:x="793" fg:w="1"/><text x="61.0629%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="60.8129%" y="197" width="0.0767%" height="15" fill="rgb(210,149,44)" fg:x="793" fg:w="1"/><text x="61.0629%" y="207.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="60.8129%" y="181" width="0.0767%" height="15" fill="rgb(240,135,12)" fg:x="793" fg:w="1"/><text x="61.0629%" y="191.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (37 samples, 2.84%)</title><rect x="58.1288%" y="277" width="2.8374%" height="15" fill="rgb(251,24,50)" fg:x="758" fg:w="37"/><text x="58.3788%" y="287.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (37 samples, 2.84%)</title><rect x="58.1288%" y="261" width="2.8374%" height="15" fill="rgb(243,200,47)" fg:x="758" fg:w="37"/><text x="58.3788%" y="271.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.23%)</title><rect x="60.7362%" y="245" width="0.2301%" height="15" fill="rgb(224,166,26)" fg:x="792" fg:w="3"/><text x="60.9862%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.23%)</title><rect x="60.7362%" y="229" width="0.2301%" height="15" fill="rgb(233,0,47)" fg:x="792" fg:w="3"/><text x="60.9862%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="60.8896%" y="213" width="0.0767%" height="15" fill="rgb(253,80,5)" fg:x="794" fg:w="1"/><text x="61.1396%" y="223.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="60.8896%" y="197" width="0.0767%" height="15" fill="rgb(214,133,25)" fg:x="794" fg:w="1"/><text x="61.1396%" y="207.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="60.9663%" y="261" width="0.0767%" height="15" fill="rgb(209,27,14)" fg:x="795" fg:w="1"/><text x="61.2163%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (39 samples, 2.99%)</title><rect x="58.1288%" y="293" width="2.9908%" height="15" fill="rgb(219,102,51)" fg:x="758" fg:w="39"/><text x="58.3788%" y="303.50">&lt;re..</text></g><g><title>regex::builders::string::RegexBuilder::new (2 samples, 0.15%)</title><rect x="60.9663%" y="277" width="0.1534%" height="15" fill="rgb(237,18,16)" fg:x="795" fg:w="2"/><text x="61.2163%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.0429%" y="261" width="0.0767%" height="15" fill="rgb(241,85,17)" fg:x="796" fg:w="1"/><text x="61.2929%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.0429%" y="245" width="0.0767%" height="15" fill="rgb(236,90,42)" fg:x="796" fg:w="1"/><text x="61.2929%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.0429%" y="229" width="0.0767%" height="15" fill="rgb(249,57,21)" fg:x="796" fg:w="1"/><text x="61.2929%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="61.1196%" y="293" width="0.0767%" height="15" fill="rgb(243,12,36)" fg:x="797" fg:w="1"/><text x="61.3696%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="61.1196%" y="277" width="0.0767%" height="15" fill="rgb(253,128,47)" fg:x="797" fg:w="1"/><text x="61.3696%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="61.1196%" y="261" width="0.0767%" height="15" fill="rgb(207,33,20)" fg:x="797" fg:w="1"/><text x="61.3696%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="61.1196%" y="245" width="0.0767%" height="15" fill="rgb(233,215,35)" fg:x="797" fg:w="1"/><text x="61.3696%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="61.1963%" y="277" width="0.0767%" height="15" fill="rgb(249,188,52)" fg:x="798" fg:w="1"/><text x="61.4463%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.15%)</title><rect x="61.1963%" y="293" width="0.1534%" height="15" fill="rgb(225,12,32)" fg:x="798" fg:w="2"/><text x="61.4463%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="61.2730%" y="277" width="0.0767%" height="15" fill="rgb(247,98,14)" fg:x="799" fg:w="1"/><text x="61.5230%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="61.2730%" y="261" width="0.0767%" height="15" fill="rgb(247,219,48)" fg:x="799" fg:w="1"/><text x="61.5230%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="61.2730%" y="245" width="0.0767%" height="15" fill="rgb(253,60,48)" fg:x="799" fg:w="1"/><text x="61.5230%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.15%)</title><rect x="61.3497%" y="229" width="0.1534%" height="15" fill="rgb(245,15,52)" fg:x="800" fg:w="2"/><text x="61.5997%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="61.4264%" y="213" width="0.0767%" height="15" fill="rgb(220,133,28)" fg:x="801" fg:w="1"/><text x="61.6764%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.23%)</title><rect x="61.3497%" y="245" width="0.2301%" height="15" fill="rgb(217,180,4)" fg:x="800" fg:w="3"/><text x="61.5997%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="61.5031%" y="229" width="0.0767%" height="15" fill="rgb(251,24,1)" fg:x="802" fg:w="1"/><text x="61.7531%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.5031%" y="213" width="0.0767%" height="15" fill="rgb(212,185,49)" fg:x="802" fg:w="1"/><text x="61.7531%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.5031%" y="197" width="0.0767%" height="15" fill="rgb(215,175,22)" fg:x="802" fg:w="1"/><text x="61.7531%" y="207.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (46 samples, 3.53%)</title><rect x="58.1288%" y="309" width="3.5276%" height="15" fill="rgb(250,205,14)" fg:x="758" fg:w="46"/><text x="58.3788%" y="319.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.31%)</title><rect x="61.3497%" y="293" width="0.3067%" height="15" fill="rgb(225,211,22)" fg:x="800" fg:w="4"/><text x="61.5997%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.31%)</title><rect x="61.3497%" y="277" width="0.3067%" height="15" fill="rgb(251,179,42)" fg:x="800" fg:w="4"/><text x="61.5997%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.31%)</title><rect x="61.3497%" y="261" width="0.3067%" height="15" fill="rgb(208,216,51)" fg:x="800" fg:w="4"/><text x="61.5997%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="61.5798%" y="245" width="0.0767%" height="15" fill="rgb(235,36,11)" fg:x="803" fg:w="1"/><text x="61.8298%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (406 samples, 31.13%)</title><rect x="30.5982%" y="405" width="31.1350%" height="15" fill="rgb(213,189,28)" fg:x="399" fg:w="406"/><text x="30.8482%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::lookin..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (379 samples, 29.06%)</title><rect x="32.6687%" y="389" width="29.0644%" height="15" fill="rgb(227,203,42)" fg:x="426" fg:w="379"/><text x="32.9187%" y="399.50">plugins_core::looking::model::Unqualified::qual..</text></g><g><title>indefinite::indefinite (378 samples, 28.99%)</title><rect x="32.7454%" y="373" width="28.9877%" height="15" fill="rgb(244,72,36)" fg:x="427" fg:w="378"/><text x="32.9954%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (378 samples, 28.99%)</title><rect x="32.7454%" y="357" width="28.9877%" height="15" fill="rgb(213,53,17)" fg:x="427" fg:w="378"/><text x="32.9954%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (378 samples, 28.99%)</title><rect x="32.7454%" y="341" width="28.9877%" height="15" fill="rgb(207,167,3)" fg:x="427" fg:w="378"/><text x="32.9954%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (48 samples, 3.68%)</title><rect x="58.0521%" y="325" width="3.6810%" height="15" fill="rgb(216,98,30)" fg:x="757" fg:w="48"/><text x="58.3021%" y="335.50">inde..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="61.6564%" y="309" width="0.0767%" height="15" fill="rgb(236,123,15)" fg:x="804" fg:w="1"/><text x="61.9064%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.15%)</title><rect x="61.9632%" y="325" width="0.1534%" height="15" fill="rgb(248,81,50)" fg:x="808" fg:w="2"/><text x="62.2132%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.15%)</title><rect x="61.9632%" y="309" width="0.1534%" height="15" fill="rgb(214,120,4)" fg:x="808" fg:w="2"/><text x="62.2132%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.15%)</title><rect x="61.9632%" y="293" width="0.1534%" height="15" fill="rgb(208,179,34)" fg:x="808" fg:w="2"/><text x="62.2132%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.15%)</title><rect x="61.9632%" y="277" width="0.1534%" height="15" fill="rgb(227,140,7)" fg:x="808" fg:w="2"/><text x="62.2132%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.15%)</title><rect x="61.9632%" y="261" width="0.1534%" height="15" fill="rgb(214,22,6)" fg:x="808" fg:w="2"/><text x="62.2132%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.15%)</title><rect x="61.9632%" y="245" width="0.1534%" height="15" fill="rgb(207,137,27)" fg:x="808" fg:w="2"/><text x="62.2132%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.15%)</title><rect x="61.9632%" y="229" width="0.1534%" height="15" fill="rgb(210,8,46)" fg:x="808" fg:w="2"/><text x="62.2132%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.15%)</title><rect x="61.9632%" y="213" width="0.1534%" height="15" fill="rgb(240,16,54)" fg:x="808" fg:w="2"/><text x="62.2132%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.15%)</title><rect x="61.9632%" y="197" width="0.1534%" height="15" fill="rgb(211,209,29)" fg:x="808" fg:w="2"/><text x="62.2132%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.15%)</title><rect x="61.9632%" y="181" width="0.1534%" height="15" fill="rgb(226,228,24)" fg:x="808" fg:w="2"/><text x="62.2132%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.15%)</title><rect x="61.9632%" y="165" width="0.1534%" height="15" fill="rgb(222,84,9)" fg:x="808" fg:w="2"/><text x="62.2132%" y="175.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.15%)</title><rect x="61.9632%" y="149" width="0.1534%" height="15" fill="rgb(234,203,30)" fg:x="808" fg:w="2"/><text x="62.2132%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.15%)</title><rect x="61.9632%" y="133" width="0.1534%" height="15" fill="rgb(238,109,14)" fg:x="808" fg:w="2"/><text x="62.2132%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.23%)</title><rect x="61.9632%" y="341" width="0.2301%" height="15" fill="rgb(233,206,34)" fg:x="808" fg:w="3"/><text x="62.2132%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.1166%" y="325" width="0.0767%" height="15" fill="rgb(220,167,47)" fg:x="810" fg:w="1"/><text x="62.3666%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.1166%" y="309" width="0.0767%" height="15" fill="rgb(238,105,10)" fg:x="810" fg:w="1"/><text x="62.3666%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.1166%" y="293" width="0.0767%" height="15" fill="rgb(213,227,17)" fg:x="810" fg:w="1"/><text x="62.3666%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.1166%" y="277" width="0.0767%" height="15" fill="rgb(217,132,38)" fg:x="810" fg:w="1"/><text x="62.3666%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.1166%" y="261" width="0.0767%" height="15" fill="rgb(242,146,4)" fg:x="810" fg:w="1"/><text x="62.3666%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.1166%" y="245" width="0.0767%" height="15" fill="rgb(212,61,9)" fg:x="810" fg:w="1"/><text x="62.3666%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.1166%" y="229" width="0.0767%" height="15" fill="rgb(247,126,22)" fg:x="810" fg:w="1"/><text x="62.3666%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.1166%" y="213" width="0.0767%" height="15" fill="rgb(220,196,2)" fg:x="810" fg:w="1"/><text x="62.3666%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.1166%" y="197" width="0.0767%" height="15" fill="rgb(208,46,4)" fg:x="810" fg:w="1"/><text x="62.3666%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.1166%" y="181" width="0.0767%" height="15" fill="rgb(252,104,46)" fg:x="810" fg:w="1"/><text x="62.3666%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.1166%" y="165" width="0.0767%" height="15" fill="rgb(237,152,48)" fg:x="810" fg:w="1"/><text x="62.3666%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.1166%" y="149" width="0.0767%" height="15" fill="rgb(221,59,37)" fg:x="810" fg:w="1"/><text x="62.3666%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (7 samples, 0.54%)</title><rect x="61.7331%" y="389" width="0.5368%" height="15" fill="rgb(209,202,51)" fg:x="805" fg:w="7"/><text x="61.9831%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.38%)</title><rect x="61.8865%" y="373" width="0.3834%" height="15" fill="rgb(228,81,30)" fg:x="807" fg:w="5"/><text x="62.1365%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.38%)</title><rect x="61.8865%" y="357" width="0.3834%" height="15" fill="rgb(227,42,39)" fg:x="807" fg:w="5"/><text x="62.1365%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.1933%" y="341" width="0.0767%" height="15" fill="rgb(221,26,2)" fg:x="811" fg:w="1"/><text x="62.4433%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.1933%" y="325" width="0.0767%" height="15" fill="rgb(254,61,31)" fg:x="811" fg:w="1"/><text x="62.4433%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.1933%" y="309" width="0.0767%" height="15" fill="rgb(222,173,38)" fg:x="811" fg:w="1"/><text x="62.4433%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.1933%" y="293" width="0.0767%" height="15" fill="rgb(218,50,12)" fg:x="811" fg:w="1"/><text x="62.4433%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.1933%" y="277" width="0.0767%" height="15" fill="rgb(223,88,40)" fg:x="811" fg:w="1"/><text x="62.4433%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.1933%" y="261" width="0.0767%" height="15" fill="rgb(237,54,19)" fg:x="811" fg:w="1"/><text x="62.4433%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.1933%" y="245" width="0.0767%" height="15" fill="rgb(251,129,25)" fg:x="811" fg:w="1"/><text x="62.4433%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.1933%" y="229" width="0.0767%" height="15" fill="rgb(238,97,19)" fg:x="811" fg:w="1"/><text x="62.4433%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.1933%" y="213" width="0.0767%" height="15" fill="rgb(240,169,18)" fg:x="811" fg:w="1"/><text x="62.4433%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.1933%" y="197" width="0.0767%" height="15" fill="rgb(230,187,49)" fg:x="811" fg:w="1"/><text x="62.4433%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.1933%" y="181" width="0.0767%" height="15" fill="rgb(209,44,26)" fg:x="811" fg:w="1"/><text x="62.4433%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.1933%" y="165" width="0.0767%" height="15" fill="rgb(244,0,6)" fg:x="811" fg:w="1"/><text x="62.4433%" y="175.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="62.2699%" y="389" width="0.0767%" height="15" fill="rgb(248,18,21)" fg:x="812" fg:w="1"/><text x="62.5199%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="62.2699%" y="373" width="0.0767%" height="15" fill="rgb(245,180,19)" fg:x="812" fg:w="1"/><text x="62.5199%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="62.2699%" y="357" width="0.0767%" height="15" fill="rgb(252,118,36)" fg:x="812" fg:w="1"/><text x="62.5199%" y="367.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.3466%" y="309" width="0.0767%" height="15" fill="rgb(210,224,19)" fg:x="813" fg:w="1"/><text x="62.5966%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (10 samples, 0.77%)</title><rect x="61.7331%" y="405" width="0.7669%" height="15" fill="rgb(218,30,24)" fg:x="805" fg:w="10"/><text x="61.9831%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="62.3466%" y="389" width="0.1534%" height="15" fill="rgb(219,75,50)" fg:x="813" fg:w="2"/><text x="62.5966%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="62.3466%" y="373" width="0.1534%" height="15" fill="rgb(234,72,50)" fg:x="813" fg:w="2"/><text x="62.5966%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.15%)</title><rect x="62.3466%" y="357" width="0.1534%" height="15" fill="rgb(219,100,48)" fg:x="813" fg:w="2"/><text x="62.5966%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.15%)</title><rect x="62.3466%" y="341" width="0.1534%" height="15" fill="rgb(253,5,41)" fg:x="813" fg:w="2"/><text x="62.5966%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.15%)</title><rect x="62.3466%" y="325" width="0.1534%" height="15" fill="rgb(247,181,11)" fg:x="813" fg:w="2"/><text x="62.5966%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.4233%" y="309" width="0.0767%" height="15" fill="rgb(222,223,25)" fg:x="814" fg:w="1"/><text x="62.6733%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.4233%" y="293" width="0.0767%" height="15" fill="rgb(214,198,28)" fg:x="814" fg:w="1"/><text x="62.6733%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="62.5000%" y="405" width="0.0767%" height="15" fill="rgb(230,46,43)" fg:x="815" fg:w="1"/><text x="62.7500%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;replies::ObservedEntity&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="62.5000%" y="389" width="0.0767%" height="15" fill="rgb(233,65,53)" fg:x="815" fg:w="1"/><text x="62.7500%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.5000%" y="373" width="0.0767%" height="15" fill="rgb(221,121,27)" fg:x="815" fg:w="1"/><text x="62.7500%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.6534%" y="341" width="0.0767%" height="15" fill="rgb(247,70,47)" fg:x="817" fg:w="1"/><text x="62.9034%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.6534%" y="325" width="0.0767%" height="15" fill="rgb(228,85,35)" fg:x="817" fg:w="1"/><text x="62.9034%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.6534%" y="309" width="0.0767%" height="15" fill="rgb(209,50,18)" fg:x="817" fg:w="1"/><text x="62.9034%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.15%)</title><rect x="62.6534%" y="357" width="0.1534%" height="15" fill="rgb(250,19,35)" fg:x="817" fg:w="2"/><text x="62.9034%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.7301%" y="341" width="0.0767%" height="15" fill="rgb(253,107,29)" fg:x="818" fg:w="1"/><text x="62.9801%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.7301%" y="325" width="0.0767%" height="15" fill="rgb(252,179,29)" fg:x="818" fg:w="1"/><text x="62.9801%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.7301%" y="309" width="0.0767%" height="15" fill="rgb(238,194,6)" fg:x="818" fg:w="1"/><text x="62.9801%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.7301%" y="293" width="0.0767%" height="15" fill="rgb(238,164,29)" fg:x="818" fg:w="1"/><text x="62.9801%" y="303.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.23%)</title><rect x="62.6534%" y="373" width="0.2301%" height="15" fill="rgb(224,25,9)" fg:x="817" fg:w="3"/><text x="62.9034%" y="383.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="62.8067%" y="357" width="0.0767%" height="15" fill="rgb(244,153,23)" fg:x="819" fg:w="1"/><text x="63.0567%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="62.8067%" y="341" width="0.0767%" height="15" fill="rgb(212,203,14)" fg:x="819" fg:w="1"/><text x="63.0567%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.8834%" y="373" width="0.0767%" height="15" fill="rgb(220,164,20)" fg:x="820" fg:w="1"/><text x="63.1334%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="62.8834%" y="357" width="0.0767%" height="15" fill="rgb(222,203,48)" fg:x="820" fg:w="1"/><text x="63.1334%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.8834%" y="341" width="0.0767%" height="15" fill="rgb(215,159,22)" fg:x="820" fg:w="1"/><text x="63.1334%" y="351.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (5 samples, 0.38%)</title><rect x="62.6534%" y="389" width="0.3834%" height="15" fill="rgb(216,183,47)" fg:x="817" fg:w="5"/><text x="62.9034%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="62.9601%" y="373" width="0.0767%" height="15" fill="rgb(229,195,25)" fg:x="821" fg:w="1"/><text x="63.2101%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.9601%" y="357" width="0.0767%" height="15" fill="rgb(224,132,51)" fg:x="821" fg:w="1"/><text x="63.2101%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.9601%" y="341" width="0.0767%" height="15" fill="rgb(240,63,7)" fg:x="821" fg:w="1"/><text x="63.2101%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.9601%" y="325" width="0.0767%" height="15" fill="rgb(249,182,41)" fg:x="821" fg:w="1"/><text x="63.2101%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.9601%" y="309" width="0.0767%" height="15" fill="rgb(243,47,26)" fg:x="821" fg:w="1"/><text x="63.2101%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.9601%" y="293" width="0.0767%" height="15" fill="rgb(233,48,2)" fg:x="821" fg:w="1"/><text x="63.2101%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.9601%" y="277" width="0.0767%" height="15" fill="rgb(244,165,34)" fg:x="821" fg:w="1"/><text x="63.2101%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.9601%" y="261" width="0.0767%" height="15" fill="rgb(207,89,7)" fg:x="821" fg:w="1"/><text x="63.2101%" y="271.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.0368%" y="277" width="0.0767%" height="15" fill="rgb(244,117,36)" fg:x="822" fg:w="1"/><text x="63.2868%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.0368%" y="261" width="0.0767%" height="15" fill="rgb(226,144,34)" fg:x="822" fg:w="1"/><text x="63.2868%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.0368%" y="245" width="0.0767%" height="15" fill="rgb(213,23,19)" fg:x="822" fg:w="1"/><text x="63.2868%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.0368%" y="229" width="0.0767%" height="15" fill="rgb(217,75,12)" fg:x="822" fg:w="1"/><text x="63.2868%" y="239.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="63.1135%" y="165" width="0.0767%" height="15" fill="rgb(224,159,17)" fg:x="823" fg:w="1"/><text x="63.3635%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.1135%" y="149" width="0.0767%" height="15" fill="rgb(217,118,1)" fg:x="823" fg:w="1"/><text x="63.3635%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.1135%" y="133" width="0.0767%" height="15" fill="rgb(232,180,48)" fg:x="823" fg:w="1"/><text x="63.3635%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="63.1135%" y="229" width="0.1534%" height="15" fill="rgb(230,27,33)" fg:x="823" fg:w="2"/><text x="63.3635%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="63.1135%" y="213" width="0.1534%" height="15" fill="rgb(205,31,21)" fg:x="823" fg:w="2"/><text x="63.3635%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="63.1135%" y="197" width="0.1534%" height="15" fill="rgb(253,59,4)" fg:x="823" fg:w="2"/><text x="63.3635%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="63.1135%" y="181" width="0.1534%" height="15" fill="rgb(224,201,9)" fg:x="823" fg:w="2"/><text x="63.3635%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.1902%" y="165" width="0.0767%" height="15" fill="rgb(229,206,30)" fg:x="824" fg:w="1"/><text x="63.4402%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.23%)</title><rect x="63.1135%" y="277" width="0.2301%" height="15" fill="rgb(212,67,47)" fg:x="823" fg:w="3"/><text x="63.3635%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="63.1135%" y="261" width="0.2301%" height="15" fill="rgb(211,96,50)" fg:x="823" fg:w="3"/><text x="63.3635%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.23%)</title><rect x="63.1135%" y="245" width="0.2301%" height="15" fill="rgb(252,114,18)" fg:x="823" fg:w="3"/><text x="63.3635%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.2669%" y="229" width="0.0767%" height="15" fill="rgb(223,58,37)" fg:x="825" fg:w="1"/><text x="63.5169%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.2669%" y="213" width="0.0767%" height="15" fill="rgb(237,70,4)" fg:x="825" fg:w="1"/><text x="63.5169%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="63.2669%" y="197" width="0.0767%" height="15" fill="rgb(244,85,46)" fg:x="825" fg:w="1"/><text x="63.5169%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.2669%" y="181" width="0.0767%" height="15" fill="rgb(223,39,52)" fg:x="825" fg:w="1"/><text x="63.5169%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.2669%" y="165" width="0.0767%" height="15" fill="rgb(218,200,14)" fg:x="825" fg:w="1"/><text x="63.5169%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="63.2669%" y="149" width="0.0767%" height="15" fill="rgb(208,171,16)" fg:x="825" fg:w="1"/><text x="63.5169%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.2669%" y="133" width="0.0767%" height="15" fill="rgb(234,200,18)" fg:x="825" fg:w="1"/><text x="63.5169%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.2669%" y="117" width="0.0767%" height="15" fill="rgb(228,45,11)" fg:x="825" fg:w="1"/><text x="63.5169%" y="127.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.38%)</title><rect x="63.0368%" y="325" width="0.3834%" height="15" fill="rgb(237,182,11)" fg:x="822" fg:w="5"/><text x="63.2868%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.38%)</title><rect x="63.0368%" y="309" width="0.3834%" height="15" fill="rgb(241,175,49)" fg:x="822" fg:w="5"/><text x="63.2868%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.38%)</title><rect x="63.0368%" y="293" width="0.3834%" height="15" fill="rgb(247,38,35)" fg:x="822" fg:w="5"/><text x="63.2868%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.3436%" y="277" width="0.0767%" height="15" fill="rgb(228,39,49)" fg:x="826" fg:w="1"/><text x="63.5936%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.3436%" y="261" width="0.0767%" height="15" fill="rgb(226,101,26)" fg:x="826" fg:w="1"/><text x="63.5936%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.4202%" y="197" width="0.0767%" height="15" fill="rgb(206,141,19)" fg:x="827" fg:w="1"/><text x="63.6702%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.4202%" y="181" width="0.0767%" height="15" fill="rgb(211,200,13)" fg:x="827" fg:w="1"/><text x="63.6702%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="63.4202%" y="165" width="0.0767%" height="15" fill="rgb(241,121,6)" fg:x="827" fg:w="1"/><text x="63.6702%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.4202%" y="149" width="0.0767%" height="15" fill="rgb(234,221,29)" fg:x="827" fg:w="1"/><text x="63.6702%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="63.4202%" y="261" width="0.1534%" height="15" fill="rgb(229,136,5)" fg:x="827" fg:w="2"/><text x="63.6702%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="63.4202%" y="245" width="0.1534%" height="15" fill="rgb(238,36,11)" fg:x="827" fg:w="2"/><text x="63.6702%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="63.4202%" y="229" width="0.1534%" height="15" fill="rgb(251,55,41)" fg:x="827" fg:w="2"/><text x="63.6702%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="63.4202%" y="213" width="0.1534%" height="15" fill="rgb(242,34,40)" fg:x="827" fg:w="2"/><text x="63.6702%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.4969%" y="197" width="0.0767%" height="15" fill="rgb(215,42,17)" fg:x="828" fg:w="1"/><text x="63.7469%" y="207.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.4969%" y="181" width="0.0767%" height="15" fill="rgb(207,44,46)" fg:x="828" fg:w="1"/><text x="63.7469%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 1.07%)</title><rect x="62.5767%" y="405" width="1.0736%" height="15" fill="rgb(211,206,28)" fg:x="816" fg:w="14"/><text x="62.8267%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (8 samples, 0.61%)</title><rect x="63.0368%" y="389" width="0.6135%" height="15" fill="rgb(237,167,16)" fg:x="822" fg:w="8"/><text x="63.2868%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.61%)</title><rect x="63.0368%" y="373" width="0.6135%" height="15" fill="rgb(233,66,6)" fg:x="822" fg:w="8"/><text x="63.2868%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.61%)</title><rect x="63.0368%" y="357" width="0.6135%" height="15" fill="rgb(246,123,29)" fg:x="822" fg:w="8"/><text x="63.2868%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.61%)</title><rect x="63.0368%" y="341" width="0.6135%" height="15" fill="rgb(209,62,40)" fg:x="822" fg:w="8"/><text x="63.2868%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.23%)</title><rect x="63.4202%" y="325" width="0.2301%" height="15" fill="rgb(218,4,25)" fg:x="827" fg:w="3"/><text x="63.6702%" y="335.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.23%)</title><rect x="63.4202%" y="309" width="0.2301%" height="15" fill="rgb(253,91,49)" fg:x="827" fg:w="3"/><text x="63.6702%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.23%)</title><rect x="63.4202%" y="293" width="0.2301%" height="15" fill="rgb(228,155,29)" fg:x="827" fg:w="3"/><text x="63.6702%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="63.4202%" y="277" width="0.2301%" height="15" fill="rgb(243,57,37)" fg:x="827" fg:w="3"/><text x="63.6702%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="63.5736%" y="261" width="0.0767%" height="15" fill="rgb(244,167,17)" fg:x="829" fg:w="1"/><text x="63.8236%" y="271.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="63.5736%" y="245" width="0.0767%" height="15" fill="rgb(207,181,38)" fg:x="829" fg:w="1"/><text x="63.8236%" y="255.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (450 samples, 34.51%)</title><rect x="29.2178%" y="565" width="34.5092%" height="15" fill="rgb(211,8,23)" fg:x="381" fg:w="450"/><text x="29.4678%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (449 samples, 34.43%)</title><rect x="29.2945%" y="549" width="34.4325%" height="15" fill="rgb(235,11,44)" fg:x="382" fg:w="449"/><text x="29.5445%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::m..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (449 samples, 34.43%)</title><rect x="29.2945%" y="533" width="34.4325%" height="15" fill="rgb(248,18,52)" fg:x="382" fg:w="449"/><text x="29.5445%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (449 samples, 34.43%)</title><rect x="29.2945%" y="517" width="34.4325%" height="15" fill="rgb(208,4,7)" fg:x="382" fg:w="449"/><text x="29.5445%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (449 samples, 34.43%)</title><rect x="29.2945%" y="501" width="34.4325%" height="15" fill="rgb(240,17,39)" fg:x="382" fg:w="449"/><text x="29.5445%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (449 samples, 34.43%)</title><rect x="29.2945%" y="485" width="34.4325%" height="15" fill="rgb(207,170,3)" fg:x="382" fg:w="449"/><text x="29.5445%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (449 samples, 34.43%)</title><rect x="29.2945%" y="469" width="34.4325%" height="15" fill="rgb(236,100,52)" fg:x="382" fg:w="449"/><text x="29.5445%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;A..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (449 samples, 34.43%)</title><rect x="29.2945%" y="453" width="34.4325%" height="15" fill="rgb(246,78,51)" fg:x="382" fg:w="449"/><text x="29.5445%" y="463.50">&lt;engine::session::state::State as kernel::actions::Perfo..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (449 samples, 34.43%)</title><rect x="29.2945%" y="437" width="34.4325%" height="15" fill="rgb(211,17,15)" fg:x="382" fg:w="449"/><text x="29.5445%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kernel::a..</text></g><g><title>plugins_core::looking::model::new_area_observation (435 samples, 33.36%)</title><rect x="30.3681%" y="421" width="33.3589%" height="15" fill="rgb(209,59,46)" fg:x="396" fg:w="435"/><text x="30.6181%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="63.6503%" y="405" width="0.0767%" height="15" fill="rgb(210,92,25)" fg:x="830" fg:w="1"/><text x="63.9003%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.6503%" y="389" width="0.0767%" height="15" fill="rgb(238,174,52)" fg:x="830" fg:w="1"/><text x="63.9003%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="63.8037%" y="533" width="0.0767%" height="15" fill="rgb(230,73,7)" fg:x="832" fg:w="1"/><text x="64.0537%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.8037%" y="517" width="0.0767%" height="15" fill="rgb(243,124,40)" fg:x="832" fg:w="1"/><text x="64.0537%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.8804%" y="501" width="0.0767%" height="15" fill="rgb(244,170,11)" fg:x="833" fg:w="1"/><text x="64.1304%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.31%)</title><rect x="63.8804%" y="517" width="0.3067%" height="15" fill="rgb(207,114,54)" fg:x="833" fg:w="4"/><text x="64.1304%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.23%)</title><rect x="63.9571%" y="501" width="0.2301%" height="15" fill="rgb(205,42,20)" fg:x="834" fg:w="3"/><text x="64.2071%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="63.9571%" y="485" width="0.2301%" height="15" fill="rgb(230,30,28)" fg:x="834" fg:w="3"/><text x="64.2071%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.15%)</title><rect x="64.0337%" y="469" width="0.1534%" height="15" fill="rgb(205,73,54)" fg:x="835" fg:w="2"/><text x="64.2837%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="64.0337%" y="453" width="0.1534%" height="15" fill="rgb(254,227,23)" fg:x="835" fg:w="2"/><text x="64.2837%" y="463.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="64.1871%" y="469" width="0.0767%" height="15" fill="rgb(228,202,34)" fg:x="837" fg:w="1"/><text x="64.4371%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.23%)</title><rect x="64.2638%" y="453" width="0.2301%" height="15" fill="rgb(222,225,37)" fg:x="838" fg:w="3"/><text x="64.5138%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.23%)</title><rect x="64.2638%" y="437" width="0.2301%" height="15" fill="rgb(221,14,54)" fg:x="838" fg:w="3"/><text x="64.5138%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.23%)</title><rect x="64.2638%" y="421" width="0.2301%" height="15" fill="rgb(254,102,2)" fg:x="838" fg:w="3"/><text x="64.5138%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.23%)</title><rect x="64.2638%" y="405" width="0.2301%" height="15" fill="rgb(232,104,17)" fg:x="838" fg:w="3"/><text x="64.5138%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.23%)</title><rect x="64.2638%" y="389" width="0.2301%" height="15" fill="rgb(250,220,14)" fg:x="838" fg:w="3"/><text x="64.5138%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.23%)</title><rect x="64.2638%" y="373" width="0.2301%" height="15" fill="rgb(241,158,9)" fg:x="838" fg:w="3"/><text x="64.5138%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.23%)</title><rect x="64.2638%" y="357" width="0.2301%" height="15" fill="rgb(246,9,43)" fg:x="838" fg:w="3"/><text x="64.5138%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.23%)</title><rect x="64.2638%" y="341" width="0.2301%" height="15" fill="rgb(206,73,33)" fg:x="838" fg:w="3"/><text x="64.5138%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.23%)</title><rect x="64.2638%" y="325" width="0.2301%" height="15" fill="rgb(222,79,8)" fg:x="838" fg:w="3"/><text x="64.5138%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.23%)</title><rect x="64.2638%" y="309" width="0.2301%" height="15" fill="rgb(234,8,54)" fg:x="838" fg:w="3"/><text x="64.5138%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.23%)</title><rect x="64.2638%" y="293" width="0.2301%" height="15" fill="rgb(209,134,38)" fg:x="838" fg:w="3"/><text x="64.5138%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.23%)</title><rect x="64.2638%" y="277" width="0.2301%" height="15" fill="rgb(230,127,29)" fg:x="838" fg:w="3"/><text x="64.5138%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.23%)</title><rect x="64.2638%" y="261" width="0.2301%" height="15" fill="rgb(242,44,41)" fg:x="838" fg:w="3"/><text x="64.5138%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.23%)</title><rect x="64.2638%" y="245" width="0.2301%" height="15" fill="rgb(222,56,43)" fg:x="838" fg:w="3"/><text x="64.5138%" y="255.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.23%)</title><rect x="64.2638%" y="229" width="0.2301%" height="15" fill="rgb(238,39,47)" fg:x="838" fg:w="3"/><text x="64.5138%" y="239.50"></text></g><g><title>__libc_malloc (3 samples, 0.23%)</title><rect x="64.2638%" y="213" width="0.2301%" height="15" fill="rgb(226,79,43)" fg:x="838" fg:w="3"/><text x="64.5138%" y="223.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.15%)</title><rect x="64.4939%" y="453" width="0.1534%" height="15" fill="rgb(242,105,53)" fg:x="841" fg:w="2"/><text x="64.7439%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.5706%" y="437" width="0.0767%" height="15" fill="rgb(251,132,46)" fg:x="842" fg:w="1"/><text x="64.8206%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="64.5706%" y="421" width="0.0767%" height="15" fill="rgb(231,77,14)" fg:x="842" fg:w="1"/><text x="64.8206%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="64.5706%" y="405" width="0.0767%" height="15" fill="rgb(240,135,9)" fg:x="842" fg:w="1"/><text x="64.8206%" y="415.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.6472%" y="405" width="0.0767%" height="15" fill="rgb(248,109,14)" fg:x="843" fg:w="1"/><text x="64.8972%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.6472%" y="389" width="0.0767%" height="15" fill="rgb(227,146,52)" fg:x="843" fg:w="1"/><text x="64.8972%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.7239%" y="357" width="0.0767%" height="15" fill="rgb(232,54,3)" fg:x="844" fg:w="1"/><text x="64.9739%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.15%)</title><rect x="64.7239%" y="405" width="0.1534%" height="15" fill="rgb(229,201,43)" fg:x="844" fg:w="2"/><text x="64.9739%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="64.7239%" y="389" width="0.1534%" height="15" fill="rgb(252,161,33)" fg:x="844" fg:w="2"/><text x="64.9739%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.15%)</title><rect x="64.7239%" y="373" width="0.1534%" height="15" fill="rgb(226,146,40)" fg:x="844" fg:w="2"/><text x="64.9739%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.8006%" y="357" width="0.0767%" height="15" fill="rgb(219,47,25)" fg:x="845" fg:w="1"/><text x="65.0506%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.8006%" y="341" width="0.0767%" height="15" fill="rgb(250,135,13)" fg:x="845" fg:w="1"/><text x="65.0506%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="64.8006%" y="325" width="0.0767%" height="15" fill="rgb(219,229,18)" fg:x="845" fg:w="1"/><text x="65.0506%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.8006%" y="309" width="0.0767%" height="15" fill="rgb(217,152,27)" fg:x="845" fg:w="1"/><text x="65.0506%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.8006%" y="293" width="0.0767%" height="15" fill="rgb(225,71,47)" fg:x="845" fg:w="1"/><text x="65.0506%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="64.8006%" y="277" width="0.0767%" height="15" fill="rgb(220,139,14)" fg:x="845" fg:w="1"/><text x="65.0506%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.8006%" y="261" width="0.0767%" height="15" fill="rgb(247,54,32)" fg:x="845" fg:w="1"/><text x="65.0506%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.8006%" y="245" width="0.0767%" height="15" fill="rgb(252,131,39)" fg:x="845" fg:w="1"/><text x="65.0506%" y="255.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.38%)</title><rect x="64.6472%" y="453" width="0.3834%" height="15" fill="rgb(210,108,39)" fg:x="843" fg:w="5"/><text x="64.8972%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.38%)</title><rect x="64.6472%" y="437" width="0.3834%" height="15" fill="rgb(205,23,29)" fg:x="843" fg:w="5"/><text x="64.8972%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.38%)</title><rect x="64.6472%" y="421" width="0.3834%" height="15" fill="rgb(246,139,46)" fg:x="843" fg:w="5"/><text x="64.8972%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="64.8773%" y="405" width="0.1534%" height="15" fill="rgb(250,81,26)" fg:x="846" fg:w="2"/><text x="65.1273%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.9540%" y="389" width="0.0767%" height="15" fill="rgb(214,104,7)" fg:x="847" fg:w="1"/><text x="65.2040%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="65.0307%" y="389" width="0.1534%" height="15" fill="rgb(233,189,8)" fg:x="848" fg:w="2"/><text x="65.2807%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="65.0307%" y="373" width="0.1534%" height="15" fill="rgb(228,141,17)" fg:x="848" fg:w="2"/><text x="65.2807%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="65.1074%" y="357" width="0.0767%" height="15" fill="rgb(247,157,1)" fg:x="849" fg:w="1"/><text x="65.3574%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.1074%" y="341" width="0.0767%" height="15" fill="rgb(249,225,5)" fg:x="849" fg:w="1"/><text x="65.3574%" y="351.50"></text></g><g><title>plugins_core::tools::contained_by (18 samples, 1.38%)</title><rect x="63.8804%" y="533" width="1.3804%" height="15" fill="rgb(242,55,13)" fg:x="833" fg:w="18"/><text x="64.1304%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (14 samples, 1.07%)</title><rect x="64.1871%" y="517" width="1.0736%" height="15" fill="rgb(230,49,50)" fg:x="837" fg:w="14"/><text x="64.4371%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (14 samples, 1.07%)</title><rect x="64.1871%" y="501" width="1.0736%" height="15" fill="rgb(241,111,38)" fg:x="837" fg:w="14"/><text x="64.4371%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (14 samples, 1.07%)</title><rect x="64.1871%" y="485" width="1.0736%" height="15" fill="rgb(252,155,4)" fg:x="837" fg:w="14"/><text x="64.4371%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.00%)</title><rect x="64.2638%" y="469" width="0.9969%" height="15" fill="rgb(212,69,32)" fg:x="838" fg:w="13"/><text x="64.5138%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.23%)</title><rect x="65.0307%" y="453" width="0.2301%" height="15" fill="rgb(243,107,47)" fg:x="848" fg:w="3"/><text x="65.2807%" y="463.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.23%)</title><rect x="65.0307%" y="437" width="0.2301%" height="15" fill="rgb(247,130,12)" fg:x="848" fg:w="3"/><text x="65.2807%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.23%)</title><rect x="65.0307%" y="421" width="0.2301%" height="15" fill="rgb(233,74,16)" fg:x="848" fg:w="3"/><text x="65.2807%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="65.0307%" y="405" width="0.2301%" height="15" fill="rgb(208,58,18)" fg:x="848" fg:w="3"/><text x="65.2807%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.1840%" y="389" width="0.0767%" height="15" fill="rgb(242,225,1)" fg:x="850" fg:w="1"/><text x="65.4340%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.1840%" y="373" width="0.0767%" height="15" fill="rgb(249,39,40)" fg:x="850" fg:w="1"/><text x="65.4340%" y="383.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="65.1840%" y="357" width="0.0767%" height="15" fill="rgb(207,72,44)" fg:x="850" fg:w="1"/><text x="65.4340%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.2607%" y="501" width="0.0767%" height="15" fill="rgb(215,193,12)" fg:x="851" fg:w="1"/><text x="65.5107%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.2607%" y="485" width="0.0767%" height="15" fill="rgb(248,41,39)" fg:x="851" fg:w="1"/><text x="65.5107%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.23%)</title><rect x="65.2607%" y="517" width="0.2301%" height="15" fill="rgb(253,85,4)" fg:x="851" fg:w="3"/><text x="65.5107%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="65.3374%" y="501" width="0.1534%" height="15" fill="rgb(243,70,31)" fg:x="852" fg:w="2"/><text x="65.5874%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="65.3374%" y="485" width="0.1534%" height="15" fill="rgb(253,195,26)" fg:x="852" fg:w="2"/><text x="65.5874%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="65.4141%" y="469" width="0.0767%" height="15" fill="rgb(243,42,11)" fg:x="853" fg:w="1"/><text x="65.6641%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="65.4141%" y="453" width="0.0767%" height="15" fill="rgb(239,66,17)" fg:x="853" fg:w="1"/><text x="65.6641%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="65.4141%" y="437" width="0.0767%" height="15" fill="rgb(217,132,21)" fg:x="853" fg:w="1"/><text x="65.6641%" y="447.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="65.4141%" y="421" width="0.0767%" height="15" fill="rgb(252,202,21)" fg:x="853" fg:w="1"/><text x="65.6641%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.4141%" y="405" width="0.0767%" height="15" fill="rgb(233,98,36)" fg:x="853" fg:w="1"/><text x="65.6641%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.4141%" y="389" width="0.0767%" height="15" fill="rgb(216,153,54)" fg:x="853" fg:w="1"/><text x="65.6641%" y="399.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="65.4908%" y="517" width="0.0767%" height="15" fill="rgb(250,99,7)" fg:x="854" fg:w="1"/><text x="65.7408%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="65.4908%" y="501" width="0.0767%" height="15" fill="rgb(207,56,50)" fg:x="854" fg:w="1"/><text x="65.7408%" y="511.50"></text></g><g><title>plugins_core::tools::occupied_by (5 samples, 0.38%)</title><rect x="65.2607%" y="533" width="0.3834%" height="15" fill="rgb(244,61,34)" fg:x="851" fg:w="5"/><text x="65.5107%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="65.5675%" y="517" width="0.0767%" height="15" fill="rgb(241,50,38)" fg:x="855" fg:w="1"/><text x="65.8175%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="65.5675%" y="501" width="0.0767%" height="15" fill="rgb(212,166,30)" fg:x="855" fg:w="1"/><text x="65.8175%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.5675%" y="485" width="0.0767%" height="15" fill="rgb(249,127,32)" fg:x="855" fg:w="1"/><text x="65.8175%" y="495.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (26 samples, 1.99%)</title><rect x="63.7270%" y="549" width="1.9939%" height="15" fill="rgb(209,103,0)" fg:x="831" fg:w="26"/><text x="63.9770%" y="559.50">p..</text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="65.6442%" y="533" width="0.0767%" height="15" fill="rgb(238,209,51)" fg:x="856" fg:w="1"/><text x="65.8942%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="65.6442%" y="517" width="0.0767%" height="15" fill="rgb(237,56,23)" fg:x="856" fg:w="1"/><text x="65.8942%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="65.6442%" y="501" width="0.0767%" height="15" fill="rgb(215,153,46)" fg:x="856" fg:w="1"/><text x="65.8942%" y="511.50"></text></g><g><title>engine::session::logs::capture (499 samples, 38.27%)</title><rect x="27.6074%" y="693" width="38.2669%" height="15" fill="rgb(224,49,31)" fg:x="360" fg:w="499"/><text x="27.8574%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (495 samples, 37.96%)</title><rect x="27.9141%" y="677" width="37.9601%" height="15" fill="rgb(250,18,42)" fg:x="364" fg:w="495"/><text x="28.1641%" y="687.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (495 samples, 37.96%)</title><rect x="27.9141%" y="661" width="37.9601%" height="15" fill="rgb(215,176,39)" fg:x="364" fg:w="495"/><text x="28.1641%" y="671.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perf..</text></g><g><title>kernel::plugins::mw::apply_middleware (495 samples, 37.96%)</title><rect x="27.9141%" y="645" width="37.9601%" height="15" fill="rgb(223,77,29)" fg:x="364" fg:w="495"/><text x="28.1641%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (495 samples, 37.96%)</title><rect x="27.9141%" y="629" width="37.9601%" height="15" fill="rgb(234,94,52)" fg:x="364" fg:w="495"/><text x="28.1641%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (495 samples, 37.96%)</title><rect x="27.9141%" y="613" width="37.9601%" height="15" fill="rgb(220,154,50)" fg:x="364" fg:w="495"/><text x="28.1641%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plug..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (480 samples, 36.81%)</title><rect x="29.0644%" y="597" width="36.8098%" height="15" fill="rgb(212,11,10)" fg:x="379" fg:w="480"/><text x="29.3144%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (480 samples, 36.81%)</title><rect x="29.0644%" y="581" width="36.8098%" height="15" fill="rgb(205,166,19)" fg:x="379" fg:w="480"/><text x="29.3144%" y="591.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middle..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (28 samples, 2.15%)</title><rect x="63.7270%" y="565" width="2.1472%" height="15" fill="rgb(244,198,16)" fg:x="831" fg:w="28"/><text x="63.9770%" y="575.50">p..</text></g><g><title>plugins_rune::sources::load_sources_from_entity (2 samples, 0.15%)</title><rect x="65.7209%" y="549" width="0.1534%" height="15" fill="rgb(219,69,12)" fg:x="857" fg:w="2"/><text x="65.9709%" y="559.50"></text></g><g><title>plugins_rune::sources::get_script (2 samples, 0.15%)</title><rect x="65.7209%" y="533" width="0.1534%" height="15" fill="rgb(245,30,7)" fg:x="857" fg:w="2"/><text x="65.9709%" y="543.50"></text></g><g><title>engine::session::Session::captured (501 samples, 38.42%)</title><rect x="27.5307%" y="709" width="38.4202%" height="15" fill="rgb(218,221,48)" fg:x="359" fg:w="501"/><text x="27.7807%" y="719.50">engine::session::Session::captured</text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="65.8742%" y="693" width="0.0767%" height="15" fill="rgb(216,66,15)" fg:x="859" fg:w="1"/><text x="66.1242%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.9509%" y="661" width="0.0767%" height="15" fill="rgb(226,122,50)" fg:x="860" fg:w="1"/><text x="66.2009%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.9509%" y="645" width="0.0767%" height="15" fill="rgb(239,156,16)" fg:x="860" fg:w="1"/><text x="66.2009%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.9509%" y="629" width="0.0767%" height="15" fill="rgb(224,27,38)" fg:x="860" fg:w="1"/><text x="66.2009%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.9509%" y="613" width="0.0767%" height="15" fill="rgb(224,39,27)" fg:x="860" fg:w="1"/><text x="66.2009%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.9509%" y="597" width="0.0767%" height="15" fill="rgb(215,92,29)" fg:x="860" fg:w="1"/><text x="66.2009%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.9509%" y="581" width="0.0767%" height="15" fill="rgb(207,159,16)" fg:x="860" fg:w="1"/><text x="66.2009%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.9509%" y="565" width="0.0767%" height="15" fill="rgb(238,163,47)" fg:x="860" fg:w="1"/><text x="66.2009%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.9509%" y="549" width="0.0767%" height="15" fill="rgb(219,91,49)" fg:x="860" fg:w="1"/><text x="66.2009%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.9509%" y="533" width="0.0767%" height="15" fill="rgb(227,167,31)" fg:x="860" fg:w="1"/><text x="66.2009%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.9509%" y="517" width="0.0767%" height="15" fill="rgb(234,80,54)" fg:x="860" fg:w="1"/><text x="66.2009%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.9509%" y="501" width="0.0767%" height="15" fill="rgb(212,114,2)" fg:x="860" fg:w="1"/><text x="66.2009%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.9509%" y="485" width="0.0767%" height="15" fill="rgb(234,50,24)" fg:x="860" fg:w="1"/><text x="66.2009%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.9509%" y="469" width="0.0767%" height="15" fill="rgb(221,68,8)" fg:x="860" fg:w="1"/><text x="66.2009%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.9509%" y="453" width="0.0767%" height="15" fill="rgb(254,180,31)" fg:x="860" fg:w="1"/><text x="66.2009%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.9509%" y="437" width="0.0767%" height="15" fill="rgb(247,130,50)" fg:x="860" fg:w="1"/><text x="66.2009%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.9509%" y="421" width="0.0767%" height="15" fill="rgb(211,109,4)" fg:x="860" fg:w="1"/><text x="66.2009%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.9509%" y="405" width="0.0767%" height="15" fill="rgb(238,50,21)" fg:x="860" fg:w="1"/><text x="66.2009%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.0276%" y="613" width="0.0767%" height="15" fill="rgb(225,57,45)" fg:x="861" fg:w="1"/><text x="66.2776%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.0276%" y="597" width="0.0767%" height="15" fill="rgb(209,196,50)" fg:x="861" fg:w="1"/><text x="66.2776%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.0276%" y="581" width="0.0767%" height="15" fill="rgb(242,140,13)" fg:x="861" fg:w="1"/><text x="66.2776%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.0276%" y="565" width="0.0767%" height="15" fill="rgb(217,111,7)" fg:x="861" fg:w="1"/><text x="66.2776%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.0276%" y="549" width="0.0767%" height="15" fill="rgb(253,193,51)" fg:x="861" fg:w="1"/><text x="66.2776%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.0276%" y="533" width="0.0767%" height="15" fill="rgb(252,70,29)" fg:x="861" fg:w="1"/><text x="66.2776%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.0276%" y="517" width="0.0767%" height="15" fill="rgb(232,127,12)" fg:x="861" fg:w="1"/><text x="66.2776%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.0276%" y="501" width="0.0767%" height="15" fill="rgb(211,180,21)" fg:x="861" fg:w="1"/><text x="66.2776%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.0276%" y="485" width="0.0767%" height="15" fill="rgb(229,72,13)" fg:x="861" fg:w="1"/><text x="66.2776%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.0276%" y="469" width="0.0767%" height="15" fill="rgb(240,211,49)" fg:x="861" fg:w="1"/><text x="66.2776%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.0276%" y="453" width="0.0767%" height="15" fill="rgb(219,149,40)" fg:x="861" fg:w="1"/><text x="66.2776%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.0276%" y="437" width="0.0767%" height="15" fill="rgb(210,127,46)" fg:x="861" fg:w="1"/><text x="66.2776%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.0276%" y="421" width="0.0767%" height="15" fill="rgb(220,106,7)" fg:x="861" fg:w="1"/><text x="66.2776%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.15%)</title><rect x="66.0276%" y="661" width="0.1534%" height="15" fill="rgb(249,31,22)" fg:x="861" fg:w="2"/><text x="66.2776%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.15%)</title><rect x="66.0276%" y="645" width="0.1534%" height="15" fill="rgb(253,1,49)" fg:x="861" fg:w="2"/><text x="66.2776%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.15%)</title><rect x="66.0276%" y="629" width="0.1534%" height="15" fill="rgb(227,144,33)" fg:x="861" fg:w="2"/><text x="66.2776%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.1043%" y="613" width="0.0767%" height="15" fill="rgb(249,163,44)" fg:x="862" fg:w="1"/><text x="66.3543%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="66.1043%" y="597" width="0.0767%" height="15" fill="rgb(234,15,39)" fg:x="862" fg:w="1"/><text x="66.3543%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="66.1043%" y="581" width="0.0767%" height="15" fill="rgb(207,66,16)" fg:x="862" fg:w="1"/><text x="66.3543%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.1043%" y="565" width="0.0767%" height="15" fill="rgb(233,112,24)" fg:x="862" fg:w="1"/><text x="66.3543%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.1043%" y="549" width="0.0767%" height="15" fill="rgb(230,90,22)" fg:x="862" fg:w="1"/><text x="66.3543%" y="559.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="66.1043%" y="533" width="0.0767%" height="15" fill="rgb(229,61,13)" fg:x="862" fg:w="1"/><text x="66.3543%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.1810%" y="581" width="0.0767%" height="15" fill="rgb(225,57,24)" fg:x="863" fg:w="1"/><text x="66.4310%" y="591.50"></text></g><g><title>engine::session::internal::Added::find_refs (5 samples, 0.38%)</title><rect x="65.9509%" y="693" width="0.3834%" height="15" fill="rgb(208,169,48)" fg:x="860" fg:w="5"/><text x="66.2009%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.38%)</title><rect x="65.9509%" y="677" width="0.3834%" height="15" fill="rgb(244,218,51)" fg:x="860" fg:w="5"/><text x="66.2009%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="66.1810%" y="661" width="0.1534%" height="15" fill="rgb(214,148,10)" fg:x="863" fg:w="2"/><text x="66.4310%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="66.1810%" y="645" width="0.1534%" height="15" fill="rgb(225,174,27)" fg:x="863" fg:w="2"/><text x="66.4310%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.15%)</title><rect x="66.1810%" y="629" width="0.1534%" height="15" fill="rgb(230,96,26)" fg:x="863" fg:w="2"/><text x="66.4310%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.15%)</title><rect x="66.1810%" y="613" width="0.1534%" height="15" fill="rgb(232,10,30)" fg:x="863" fg:w="2"/><text x="66.4310%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.15%)</title><rect x="66.1810%" y="597" width="0.1534%" height="15" fill="rgb(222,8,50)" fg:x="863" fg:w="2"/><text x="66.4310%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.2577%" y="581" width="0.0767%" height="15" fill="rgb(213,81,27)" fg:x="864" fg:w="1"/><text x="66.5077%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="66.2577%" y="565" width="0.0767%" height="15" fill="rgb(245,50,10)" fg:x="864" fg:w="1"/><text x="66.5077%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="66.2577%" y="549" width="0.0767%" height="15" fill="rgb(216,100,18)" fg:x="864" fg:w="1"/><text x="66.5077%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.2577%" y="533" width="0.0767%" height="15" fill="rgb(236,147,54)" fg:x="864" fg:w="1"/><text x="66.5077%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.4110%" y="661" width="0.0767%" height="15" fill="rgb(205,143,26)" fg:x="866" fg:w="1"/><text x="66.6610%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.4110%" y="645" width="0.0767%" height="15" fill="rgb(236,26,9)" fg:x="866" fg:w="1"/><text x="66.6610%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.4110%" y="629" width="0.0767%" height="15" fill="rgb(221,165,53)" fg:x="866" fg:w="1"/><text x="66.6610%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.4110%" y="613" width="0.0767%" height="15" fill="rgb(214,110,17)" fg:x="866" fg:w="1"/><text x="66.6610%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.4110%" y="597" width="0.0767%" height="15" fill="rgb(237,197,12)" fg:x="866" fg:w="1"/><text x="66.6610%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.4110%" y="581" width="0.0767%" height="15" fill="rgb(205,84,17)" fg:x="866" fg:w="1"/><text x="66.6610%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.4110%" y="565" width="0.0767%" height="15" fill="rgb(237,18,45)" fg:x="866" fg:w="1"/><text x="66.6610%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.4110%" y="549" width="0.0767%" height="15" fill="rgb(221,87,14)" fg:x="866" fg:w="1"/><text x="66.6610%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.4110%" y="533" width="0.0767%" height="15" fill="rgb(238,186,15)" fg:x="866" fg:w="1"/><text x="66.6610%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.4110%" y="517" width="0.0767%" height="15" fill="rgb(208,115,11)" fg:x="866" fg:w="1"/><text x="66.6610%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.4110%" y="501" width="0.0767%" height="15" fill="rgb(254,175,0)" fg:x="866" fg:w="1"/><text x="66.6610%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.38%)</title><rect x="66.3344%" y="677" width="0.3834%" height="15" fill="rgb(227,24,42)" fg:x="865" fg:w="5"/><text x="66.5844%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.23%)</title><rect x="66.4877%" y="661" width="0.2301%" height="15" fill="rgb(223,211,37)" fg:x="867" fg:w="3"/><text x="66.7377%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.23%)</title><rect x="66.4877%" y="645" width="0.2301%" height="15" fill="rgb(235,49,27)" fg:x="867" fg:w="3"/><text x="66.7377%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.23%)</title><rect x="66.4877%" y="629" width="0.2301%" height="15" fill="rgb(254,97,51)" fg:x="867" fg:w="3"/><text x="66.7377%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.23%)</title><rect x="66.4877%" y="613" width="0.2301%" height="15" fill="rgb(249,51,40)" fg:x="867" fg:w="3"/><text x="66.7377%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.23%)</title><rect x="66.4877%" y="597" width="0.2301%" height="15" fill="rgb(210,128,45)" fg:x="867" fg:w="3"/><text x="66.7377%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.23%)</title><rect x="66.4877%" y="581" width="0.2301%" height="15" fill="rgb(224,137,50)" fg:x="867" fg:w="3"/><text x="66.7377%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.23%)</title><rect x="66.4877%" y="565" width="0.2301%" height="15" fill="rgb(242,15,9)" fg:x="867" fg:w="3"/><text x="66.7377%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.23%)</title><rect x="66.4877%" y="549" width="0.2301%" height="15" fill="rgb(233,187,41)" fg:x="867" fg:w="3"/><text x="66.7377%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.23%)</title><rect x="66.4877%" y="533" width="0.2301%" height="15" fill="rgb(227,2,29)" fg:x="867" fg:w="3"/><text x="66.7377%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.23%)</title><rect x="66.4877%" y="517" width="0.2301%" height="15" fill="rgb(222,70,3)" fg:x="867" fg:w="3"/><text x="66.7377%" y="527.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.23%)</title><rect x="66.4877%" y="501" width="0.2301%" height="15" fill="rgb(213,11,42)" fg:x="867" fg:w="3"/><text x="66.7377%" y="511.50"></text></g><g><title>__libc_malloc (3 samples, 0.23%)</title><rect x="66.4877%" y="485" width="0.2301%" height="15" fill="rgb(225,150,9)" fg:x="867" fg:w="3"/><text x="66.7377%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.23%)</title><rect x="66.7178%" y="677" width="0.2301%" height="15" fill="rgb(230,162,45)" fg:x="870" fg:w="3"/><text x="66.9678%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="66.7945%" y="661" width="0.1534%" height="15" fill="rgb(222,14,52)" fg:x="871" fg:w="2"/><text x="67.0445%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="66.7945%" y="645" width="0.1534%" height="15" fill="rgb(254,198,14)" fg:x="871" fg:w="2"/><text x="67.0445%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="66.8712%" y="629" width="0.0767%" height="15" fill="rgb(220,217,30)" fg:x="872" fg:w="1"/><text x="67.1212%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.8712%" y="613" width="0.0767%" height="15" fill="rgb(215,146,41)" fg:x="872" fg:w="1"/><text x="67.1212%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.8712%" y="597" width="0.0767%" height="15" fill="rgb(217,27,36)" fg:x="872" fg:w="1"/><text x="67.1212%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.8712%" y="581" width="0.0767%" height="15" fill="rgb(219,218,39)" fg:x="872" fg:w="1"/><text x="67.1212%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.8712%" y="565" width="0.0767%" height="15" fill="rgb(219,4,42)" fg:x="872" fg:w="1"/><text x="67.1212%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.8712%" y="549" width="0.0767%" height="15" fill="rgb(249,119,36)" fg:x="872" fg:w="1"/><text x="67.1212%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.8712%" y="533" width="0.0767%" height="15" fill="rgb(209,23,33)" fg:x="872" fg:w="1"/><text x="67.1212%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (14 samples, 1.07%)</title><rect x="65.9509%" y="709" width="1.0736%" height="15" fill="rgb(211,10,0)" fg:x="860" fg:w="14"/><text x="66.2009%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.69%)</title><rect x="66.3344%" y="693" width="0.6902%" height="15" fill="rgb(208,99,37)" fg:x="865" fg:w="9"/><text x="66.5844%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="66.9479%" y="677" width="0.0767%" height="15" fill="rgb(213,132,31)" fg:x="873" fg:w="1"/><text x="67.1979%" y="687.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="66.9479%" y="661" width="0.0767%" height="15" fill="rgb(243,129,40)" fg:x="873" fg:w="1"/><text x="67.1979%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.9479%" y="645" width="0.0767%" height="15" fill="rgb(210,66,33)" fg:x="873" fg:w="1"/><text x="67.1979%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.9479%" y="629" width="0.0767%" height="15" fill="rgb(209,189,4)" fg:x="873" fg:w="1"/><text x="67.1979%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.9479%" y="613" width="0.0767%" height="15" fill="rgb(214,107,37)" fg:x="873" fg:w="1"/><text x="67.1979%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.1012%" y="581" width="0.0767%" height="15" fill="rgb(245,88,54)" fg:x="875" fg:w="1"/><text x="67.3512%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.1012%" y="565" width="0.0767%" height="15" fill="rgb(205,146,20)" fg:x="875" fg:w="1"/><text x="67.3512%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.1012%" y="549" width="0.0767%" height="15" fill="rgb(220,161,25)" fg:x="875" fg:w="1"/><text x="67.3512%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.1012%" y="533" width="0.0767%" height="15" fill="rgb(215,152,15)" fg:x="875" fg:w="1"/><text x="67.3512%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.1012%" y="517" width="0.0767%" height="15" fill="rgb(233,192,44)" fg:x="875" fg:w="1"/><text x="67.3512%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.1012%" y="501" width="0.0767%" height="15" fill="rgb(240,170,46)" fg:x="875" fg:w="1"/><text x="67.3512%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.1012%" y="485" width="0.0767%" height="15" fill="rgb(207,104,33)" fg:x="875" fg:w="1"/><text x="67.3512%" y="495.50"></text></g><g><title>engine::users::model::username_to_key (3 samples, 0.23%)</title><rect x="67.0245%" y="709" width="0.2301%" height="15" fill="rgb(219,21,39)" fg:x="874" fg:w="3"/><text x="67.2745%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.15%)</title><rect x="67.1012%" y="693" width="0.1534%" height="15" fill="rgb(214,133,29)" fg:x="875" fg:w="2"/><text x="67.3512%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.15%)</title><rect x="67.1012%" y="677" width="0.1534%" height="15" fill="rgb(226,93,6)" fg:x="875" fg:w="2"/><text x="67.3512%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.15%)</title><rect x="67.1012%" y="661" width="0.1534%" height="15" fill="rgb(252,222,34)" fg:x="875" fg:w="2"/><text x="67.3512%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.15%)</title><rect x="67.1012%" y="645" width="0.1534%" height="15" fill="rgb(252,92,48)" fg:x="875" fg:w="2"/><text x="67.3512%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.15%)</title><rect x="67.1012%" y="629" width="0.1534%" height="15" fill="rgb(245,223,24)" fg:x="875" fg:w="2"/><text x="67.3512%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.15%)</title><rect x="67.1012%" y="613" width="0.1534%" height="15" fill="rgb(205,176,3)" fg:x="875" fg:w="2"/><text x="67.3512%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.15%)</title><rect x="67.1012%" y="597" width="0.1534%" height="15" fill="rgb(235,151,15)" fg:x="875" fg:w="2"/><text x="67.3512%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="67.1779%" y="581" width="0.0767%" height="15" fill="rgb(237,209,11)" fg:x="876" fg:w="1"/><text x="67.4279%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="67.1779%" y="565" width="0.0767%" height="15" fill="rgb(243,227,24)" fg:x="876" fg:w="1"/><text x="67.4279%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.2546%" y="661" width="0.0767%" height="15" fill="rgb(239,193,16)" fg:x="877" fg:w="1"/><text x="67.5046%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.3313%" y="661" width="0.0767%" height="15" fill="rgb(231,27,9)" fg:x="878" fg:w="1"/><text x="67.5813%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="67.3313%" y="645" width="0.0767%" height="15" fill="rgb(219,169,10)" fg:x="878" fg:w="1"/><text x="67.5813%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.3313%" y="629" width="0.0767%" height="15" fill="rgb(244,229,43)" fg:x="878" fg:w="1"/><text x="67.5813%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.4080%" y="645" width="0.0767%" height="15" fill="rgb(254,38,20)" fg:x="879" fg:w="1"/><text x="67.6580%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.4080%" y="629" width="0.0767%" height="15" fill="rgb(250,47,30)" fg:x="879" fg:w="1"/><text x="67.6580%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.4080%" y="613" width="0.0767%" height="15" fill="rgb(224,124,36)" fg:x="879" fg:w="1"/><text x="67.6580%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.4080%" y="597" width="0.0767%" height="15" fill="rgb(246,68,51)" fg:x="879" fg:w="1"/><text x="67.6580%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.4080%" y="581" width="0.0767%" height="15" fill="rgb(253,43,49)" fg:x="879" fg:w="1"/><text x="67.6580%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.4080%" y="565" width="0.0767%" height="15" fill="rgb(219,54,36)" fg:x="879" fg:w="1"/><text x="67.6580%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.4080%" y="549" width="0.0767%" height="15" fill="rgb(227,133,34)" fg:x="879" fg:w="1"/><text x="67.6580%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.4080%" y="533" width="0.0767%" height="15" fill="rgb(247,227,15)" fg:x="879" fg:w="1"/><text x="67.6580%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.4080%" y="517" width="0.0767%" height="15" fill="rgb(229,96,14)" fg:x="879" fg:w="1"/><text x="67.6580%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.4080%" y="501" width="0.0767%" height="15" fill="rgb(220,79,17)" fg:x="879" fg:w="1"/><text x="67.6580%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.4080%" y="485" width="0.0767%" height="15" fill="rgb(205,131,53)" fg:x="879" fg:w="1"/><text x="67.6580%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.4080%" y="469" width="0.0767%" height="15" fill="rgb(209,50,29)" fg:x="879" fg:w="1"/><text x="67.6580%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.4080%" y="453" width="0.0767%" height="15" fill="rgb(245,86,46)" fg:x="879" fg:w="1"/><text x="67.6580%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.4080%" y="437" width="0.0767%" height="15" fill="rgb(235,66,46)" fg:x="879" fg:w="1"/><text x="67.6580%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.4080%" y="421" width="0.0767%" height="15" fill="rgb(232,148,31)" fg:x="879" fg:w="1"/><text x="67.6580%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.4847%" y="645" width="0.0767%" height="15" fill="rgb(217,149,8)" fg:x="880" fg:w="1"/><text x="67.7347%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.4847%" y="629" width="0.0767%" height="15" fill="rgb(209,183,11)" fg:x="880" fg:w="1"/><text x="67.7347%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.4847%" y="613" width="0.0767%" height="15" fill="rgb(208,55,20)" fg:x="880" fg:w="1"/><text x="67.7347%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.4847%" y="597" width="0.0767%" height="15" fill="rgb(218,39,14)" fg:x="880" fg:w="1"/><text x="67.7347%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.4847%" y="581" width="0.0767%" height="15" fill="rgb(216,169,33)" fg:x="880" fg:w="1"/><text x="67.7347%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.4847%" y="565" width="0.0767%" height="15" fill="rgb(233,80,24)" fg:x="880" fg:w="1"/><text x="67.7347%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="67.4847%" y="549" width="0.0767%" height="15" fill="rgb(213,179,31)" fg:x="880" fg:w="1"/><text x="67.7347%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="67.4847%" y="533" width="0.0767%" height="15" fill="rgb(209,19,5)" fg:x="880" fg:w="1"/><text x="67.7347%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.23%)</title><rect x="67.4080%" y="661" width="0.2301%" height="15" fill="rgb(219,18,35)" fg:x="879" fg:w="3"/><text x="67.6580%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.5613%" y="645" width="0.0767%" height="15" fill="rgb(209,169,16)" fg:x="881" fg:w="1"/><text x="67.8113%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.5613%" y="629" width="0.0767%" height="15" fill="rgb(245,90,51)" fg:x="881" fg:w="1"/><text x="67.8113%" y="639.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="67.7147%" y="565" width="0.1534%" height="15" fill="rgb(220,99,45)" fg:x="883" fg:w="2"/><text x="67.9647%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="67.7147%" y="549" width="0.1534%" height="15" fill="rgb(249,89,25)" fg:x="883" fg:w="2"/><text x="67.9647%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="67.7147%" y="533" width="0.1534%" height="15" fill="rgb(239,193,0)" fg:x="883" fg:w="2"/><text x="67.9647%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="67.7147%" y="517" width="0.1534%" height="15" fill="rgb(231,126,1)" fg:x="883" fg:w="2"/><text x="67.9647%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.7914%" y="501" width="0.0767%" height="15" fill="rgb(243,166,3)" fg:x="884" fg:w="1"/><text x="68.0414%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.7914%" y="485" width="0.0767%" height="15" fill="rgb(223,22,34)" fg:x="884" fg:w="1"/><text x="68.0414%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="67.8681%" y="565" width="0.0767%" height="15" fill="rgb(251,52,51)" fg:x="885" fg:w="1"/><text x="68.1181%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.8681%" y="549" width="0.0767%" height="15" fill="rgb(221,165,28)" fg:x="885" fg:w="1"/><text x="68.1181%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="67.8681%" y="533" width="0.0767%" height="15" fill="rgb(218,121,47)" fg:x="885" fg:w="1"/><text x="68.1181%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="67.8681%" y="517" width="0.0767%" height="15" fill="rgb(209,120,9)" fg:x="885" fg:w="1"/><text x="68.1181%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="67.8681%" y="501" width="0.0767%" height="15" fill="rgb(236,68,12)" fg:x="885" fg:w="1"/><text x="68.1181%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.9448%" y="533" width="0.0767%" height="15" fill="rgb(225,194,26)" fg:x="886" fg:w="1"/><text x="68.1948%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.0215%" y="485" width="0.0767%" height="15" fill="rgb(231,84,39)" fg:x="887" fg:w="1"/><text x="68.2715%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.0215%" y="469" width="0.0767%" height="15" fill="rgb(210,11,45)" fg:x="887" fg:w="1"/><text x="68.2715%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.0215%" y="453" width="0.0767%" height="15" fill="rgb(224,54,52)" fg:x="887" fg:w="1"/><text x="68.2715%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.54%)</title><rect x="67.6380%" y="661" width="0.5368%" height="15" fill="rgb(238,102,14)" fg:x="882" fg:w="7"/><text x="67.8880%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.54%)</title><rect x="67.6380%" y="645" width="0.5368%" height="15" fill="rgb(243,160,52)" fg:x="882" fg:w="7"/><text x="67.8880%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.54%)</title><rect x="67.6380%" y="629" width="0.5368%" height="15" fill="rgb(216,114,19)" fg:x="882" fg:w="7"/><text x="67.8880%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.46%)</title><rect x="67.7147%" y="613" width="0.4601%" height="15" fill="rgb(244,166,37)" fg:x="883" fg:w="6"/><text x="67.9647%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.46%)</title><rect x="67.7147%" y="597" width="0.4601%" height="15" fill="rgb(246,29,44)" fg:x="883" fg:w="6"/><text x="67.9647%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.46%)</title><rect x="67.7147%" y="581" width="0.4601%" height="15" fill="rgb(215,56,53)" fg:x="883" fg:w="6"/><text x="67.9647%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="67.9448%" y="565" width="0.2301%" height="15" fill="rgb(217,60,2)" fg:x="886" fg:w="3"/><text x="68.1948%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="67.9448%" y="549" width="0.2301%" height="15" fill="rgb(207,26,24)" fg:x="886" fg:w="3"/><text x="68.1948%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.15%)</title><rect x="68.0215%" y="533" width="0.1534%" height="15" fill="rgb(252,210,15)" fg:x="887" fg:w="2"/><text x="68.2715%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="68.0215%" y="517" width="0.1534%" height="15" fill="rgb(253,209,26)" fg:x="887" fg:w="2"/><text x="68.2715%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="68.0215%" y="501" width="0.1534%" height="15" fill="rgb(238,170,14)" fg:x="887" fg:w="2"/><text x="68.2715%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="68.0982%" y="485" width="0.0767%" height="15" fill="rgb(216,178,15)" fg:x="888" fg:w="1"/><text x="68.3482%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.0982%" y="469" width="0.0767%" height="15" fill="rgb(250,197,2)" fg:x="888" fg:w="1"/><text x="68.3482%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.0982%" y="453" width="0.0767%" height="15" fill="rgb(212,70,42)" fg:x="888" fg:w="1"/><text x="68.3482%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.0982%" y="437" width="0.0767%" height="15" fill="rgb(227,213,9)" fg:x="888" fg:w="1"/><text x="68.3482%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.1748%" y="565" width="0.0767%" height="15" fill="rgb(245,99,25)" fg:x="889" fg:w="1"/><text x="68.4248%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.1748%" y="549" width="0.0767%" height="15" fill="rgb(250,82,29)" fg:x="889" fg:w="1"/><text x="68.4248%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.1748%" y="533" width="0.0767%" height="15" fill="rgb(241,226,54)" fg:x="889" fg:w="1"/><text x="68.4248%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.1748%" y="517" width="0.0767%" height="15" fill="rgb(221,99,41)" fg:x="889" fg:w="1"/><text x="68.4248%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.1748%" y="501" width="0.0767%" height="15" fill="rgb(213,90,21)" fg:x="889" fg:w="1"/><text x="68.4248%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.1748%" y="485" width="0.0767%" height="15" fill="rgb(205,208,24)" fg:x="889" fg:w="1"/><text x="68.4248%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.1748%" y="469" width="0.0767%" height="15" fill="rgb(246,31,12)" fg:x="889" fg:w="1"/><text x="68.4248%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (891 samples, 68.33%)</title><rect x="0.0000%" y="789" width="68.3282%" height="15" fill="rgb(213,154,6)" fg:x="0" fg:w="891"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (891 samples, 68.33%)</title><rect x="0.0000%" y="773" width="68.3282%" height="15" fill="rgb(222,163,29)" fg:x="0" fg:w="891"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (891 samples, 68.33%)</title><rect x="0.0000%" y="757" width="68.3282%" height="15" fill="rgb(227,201,8)" fg:x="0" fg:w="891"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (532 samples, 40.80%)</title><rect x="27.5307%" y="741" width="40.7975%" height="15" fill="rgb(233,9,32)" fg:x="359" fg:w="532"/><text x="27.7807%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (532 samples, 40.80%)</title><rect x="27.5307%" y="725" width="40.7975%" height="15" fill="rgb(217,54,24)" fg:x="359" fg:w="532"/><text x="27.7807%" y="735.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (14 samples, 1.07%)</title><rect x="67.2546%" y="709" width="1.0736%" height="15" fill="rgb(235,192,0)" fg:x="877" fg:w="14"/><text x="67.5046%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (14 samples, 1.07%)</title><rect x="67.2546%" y="693" width="1.0736%" height="15" fill="rgb(235,45,9)" fg:x="877" fg:w="14"/><text x="67.5046%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (14 samples, 1.07%)</title><rect x="67.2546%" y="677" width="1.0736%" height="15" fill="rgb(246,42,40)" fg:x="877" fg:w="14"/><text x="67.5046%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.15%)</title><rect x="68.1748%" y="661" width="0.1534%" height="15" fill="rgb(248,111,24)" fg:x="889" fg:w="2"/><text x="68.4248%" y="671.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.15%)</title><rect x="68.1748%" y="645" width="0.1534%" height="15" fill="rgb(249,65,22)" fg:x="889" fg:w="2"/><text x="68.4248%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="68.1748%" y="629" width="0.1534%" height="15" fill="rgb(238,111,51)" fg:x="889" fg:w="2"/><text x="68.4248%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="68.1748%" y="613" width="0.1534%" height="15" fill="rgb(250,118,22)" fg:x="889" fg:w="2"/><text x="68.4248%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="68.1748%" y="597" width="0.1534%" height="15" fill="rgb(234,84,26)" fg:x="889" fg:w="2"/><text x="68.4248%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="68.1748%" y="581" width="0.1534%" height="15" fill="rgb(243,172,12)" fg:x="889" fg:w="2"/><text x="68.4248%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.2515%" y="565" width="0.0767%" height="15" fill="rgb(236,150,49)" fg:x="890" fg:w="1"/><text x="68.5015%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="68.2515%" y="549" width="0.0767%" height="15" fill="rgb(225,197,26)" fg:x="890" fg:w="1"/><text x="68.5015%" y="559.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.23%)</title><rect x="68.4816%" y="725" width="0.2301%" height="15" fill="rgb(214,17,42)" fg:x="893" fg:w="3"/><text x="68.7316%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="68.4816%" y="709" width="0.2301%" height="15" fill="rgb(224,165,40)" fg:x="893" fg:w="3"/><text x="68.7316%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.15%)</title><rect x="68.5583%" y="693" width="0.1534%" height="15" fill="rgb(246,100,4)" fg:x="894" fg:w="2"/><text x="68.8083%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.6350%" y="677" width="0.0767%" height="15" fill="rgb(222,103,0)" fg:x="895" fg:w="1"/><text x="68.8850%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.7883%" y="613" width="0.0767%" height="15" fill="rgb(227,189,26)" fg:x="897" fg:w="1"/><text x="69.0383%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.7883%" y="597" width="0.0767%" height="15" fill="rgb(214,202,17)" fg:x="897" fg:w="1"/><text x="69.0383%" y="607.50"></text></g><g><title>__libc_free (3 samples, 0.23%)</title><rect x="68.9417%" y="581" width="0.2301%" height="15" fill="rgb(229,111,3)" fg:x="899" fg:w="3"/><text x="69.1917%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.61%)</title><rect x="68.7117%" y="661" width="0.6135%" height="15" fill="rgb(229,172,15)" fg:x="896" fg:w="8"/><text x="68.9617%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (7 samples, 0.54%)</title><rect x="68.7883%" y="645" width="0.5368%" height="15" fill="rgb(230,224,35)" fg:x="897" fg:w="7"/><text x="69.0383%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.54%)</title><rect x="68.7883%" y="629" width="0.5368%" height="15" fill="rgb(251,141,6)" fg:x="897" fg:w="7"/><text x="69.0383%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.46%)</title><rect x="68.8650%" y="613" width="0.4601%" height="15" fill="rgb(225,208,6)" fg:x="898" fg:w="6"/><text x="69.1150%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.46%)</title><rect x="68.8650%" y="597" width="0.4601%" height="15" fill="rgb(246,181,16)" fg:x="898" fg:w="6"/><text x="69.1150%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.15%)</title><rect x="69.1718%" y="581" width="0.1534%" height="15" fill="rgb(227,129,36)" fg:x="902" fg:w="2"/><text x="69.4218%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2485%" y="565" width="0.0767%" height="15" fill="rgb(248,117,24)" fg:x="903" fg:w="1"/><text x="69.4985%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.3252%" y="661" width="0.0767%" height="15" fill="rgb(214,185,35)" fg:x="904" fg:w="1"/><text x="69.5752%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.4785%" y="645" width="0.0767%" height="15" fill="rgb(236,150,34)" fg:x="906" fg:w="1"/><text x="69.7285%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.5552%" y="629" width="0.0767%" height="15" fill="rgb(243,228,27)" fg:x="907" fg:w="1"/><text x="69.8052%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 1.00%)</title><rect x="68.7117%" y="709" width="0.9969%" height="15" fill="rgb(245,77,44)" fg:x="896" fg:w="13"/><text x="68.9617%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (13 samples, 1.00%)</title><rect x="68.7117%" y="693" width="0.9969%" height="15" fill="rgb(235,214,42)" fg:x="896" fg:w="13"/><text x="68.9617%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 1.00%)</title><rect x="68.7117%" y="677" width="0.9969%" height="15" fill="rgb(221,74,3)" fg:x="896" fg:w="13"/><text x="68.9617%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.31%)</title><rect x="69.4018%" y="661" width="0.3067%" height="15" fill="rgb(206,121,29)" fg:x="905" fg:w="4"/><text x="69.6518%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.15%)</title><rect x="69.5552%" y="645" width="0.1534%" height="15" fill="rgb(249,131,53)" fg:x="907" fg:w="2"/><text x="69.8052%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.6319%" y="629" width="0.0767%" height="15" fill="rgb(236,170,29)" fg:x="908" fg:w="1"/><text x="69.8819%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.6319%" y="613" width="0.0767%" height="15" fill="rgb(247,96,15)" fg:x="908" fg:w="1"/><text x="69.8819%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 1.38%)</title><rect x="68.4049%" y="741" width="1.3804%" height="15" fill="rgb(211,210,7)" fg:x="892" fg:w="18"/><text x="68.6549%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (14 samples, 1.07%)</title><rect x="68.7117%" y="725" width="1.0736%" height="15" fill="rgb(240,88,50)" fg:x="896" fg:w="14"/><text x="68.9617%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.7086%" y="709" width="0.0767%" height="15" fill="rgb(209,229,26)" fg:x="909" fg:w="1"/><text x="69.9586%" y="719.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="70.0153%" y="613" width="0.0767%" height="15" fill="rgb(210,68,23)" fg:x="913" fg:w="1"/><text x="70.2653%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.0153%" y="597" width="0.0767%" height="15" fill="rgb(229,180,13)" fg:x="913" fg:w="1"/><text x="70.2653%" y="607.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.15%)</title><rect x="70.0153%" y="645" width="0.1534%" height="15" fill="rgb(236,53,44)" fg:x="913" fg:w="2"/><text x="70.2653%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.15%)</title><rect x="70.0153%" y="629" width="0.1534%" height="15" fill="rgb(244,214,29)" fg:x="913" fg:w="2"/><text x="70.2653%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="70.0920%" y="613" width="0.0767%" height="15" fill="rgb(220,75,29)" fg:x="914" fg:w="1"/><text x="70.3420%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="70.0920%" y="597" width="0.0767%" height="15" fill="rgb(214,183,37)" fg:x="914" fg:w="1"/><text x="70.3420%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.0920%" y="581" width="0.0767%" height="15" fill="rgb(239,117,29)" fg:x="914" fg:w="1"/><text x="70.3420%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="70.0920%" y="565" width="0.0767%" height="15" fill="rgb(237,171,35)" fg:x="914" fg:w="1"/><text x="70.3420%" y="575.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="70.1687%" y="645" width="0.0767%" height="15" fill="rgb(229,178,53)" fg:x="915" fg:w="1"/><text x="70.4187%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="70.1687%" y="629" width="0.0767%" height="15" fill="rgb(210,102,19)" fg:x="915" fg:w="1"/><text x="70.4187%" y="639.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="70.1687%" y="613" width="0.0767%" height="15" fill="rgb(235,127,22)" fg:x="915" fg:w="1"/><text x="70.4187%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1687%" y="597" width="0.0767%" height="15" fill="rgb(244,31,31)" fg:x="915" fg:w="1"/><text x="70.4187%" y="607.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="70.2454%" y="645" width="0.0767%" height="15" fill="rgb(231,43,21)" fg:x="916" fg:w="1"/><text x="70.4954%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="70.2454%" y="629" width="0.0767%" height="15" fill="rgb(217,131,35)" fg:x="916" fg:w="1"/><text x="70.4954%" y="639.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="70.2454%" y="613" width="0.0767%" height="15" fill="rgb(221,149,4)" fg:x="916" fg:w="1"/><text x="70.4954%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (6 samples, 0.46%)</title><rect x="69.9387%" y="661" width="0.4601%" height="15" fill="rgb(232,170,28)" fg:x="912" fg:w="6"/><text x="70.1887%" y="671.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="70.3221%" y="645" width="0.0767%" height="15" fill="rgb(238,56,10)" fg:x="917" fg:w="1"/><text x="70.5721%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="70.3221%" y="629" width="0.0767%" height="15" fill="rgb(235,196,14)" fg:x="917" fg:w="1"/><text x="70.5721%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="70.3221%" y="613" width="0.0767%" height="15" fill="rgb(216,45,48)" fg:x="917" fg:w="1"/><text x="70.5721%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3221%" y="597" width="0.0767%" height="15" fill="rgb(238,213,17)" fg:x="917" fg:w="1"/><text x="70.5721%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="70.3988%" y="645" width="0.0767%" height="15" fill="rgb(212,13,2)" fg:x="918" fg:w="1"/><text x="70.6488%" y="655.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="70.3988%" y="629" width="0.0767%" height="15" fill="rgb(240,114,20)" fg:x="918" fg:w="1"/><text x="70.6488%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (2 samples, 0.15%)</title><rect x="70.3988%" y="661" width="0.1534%" height="15" fill="rgb(228,41,40)" fg:x="918" fg:w="2"/><text x="70.6488%" y="671.50"></text></g><g><title>anyhow::error::&lt;impl core::ops::drop::Drop for anyhow::Error&gt;::drop (1 samples, 0.08%)</title><rect x="70.4755%" y="645" width="0.0767%" height="15" fill="rgb(244,132,35)" fg:x="919" fg:w="1"/><text x="70.7255%" y="655.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.23%)</title><rect x="70.6288%" y="629" width="0.2301%" height="15" fill="rgb(253,189,4)" fg:x="921" fg:w="3"/><text x="70.8788%" y="639.50"></text></g><g><title>glob::fill_todo (3 samples, 0.23%)</title><rect x="70.6288%" y="613" width="0.2301%" height="15" fill="rgb(224,37,19)" fg:x="921" fg:w="3"/><text x="70.8788%" y="623.50"></text></g><g><title>glob::is_dir (3 samples, 0.23%)</title><rect x="70.6288%" y="597" width="0.2301%" height="15" fill="rgb(235,223,18)" fg:x="921" fg:w="3"/><text x="70.8788%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.15%)</title><rect x="70.7055%" y="581" width="0.1534%" height="15" fill="rgb(235,163,25)" fg:x="922" fg:w="2"/><text x="70.9555%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.15%)</title><rect x="70.7055%" y="565" width="0.1534%" height="15" fill="rgb(217,145,28)" fg:x="922" fg:w="2"/><text x="70.9555%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.15%)</title><rect x="70.7055%" y="549" width="0.1534%" height="15" fill="rgb(223,223,32)" fg:x="922" fg:w="2"/><text x="70.9555%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.15%)</title><rect x="70.7055%" y="533" width="0.1534%" height="15" fill="rgb(227,189,39)" fg:x="922" fg:w="2"/><text x="70.9555%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.15%)</title><rect x="70.7055%" y="517" width="0.1534%" height="15" fill="rgb(248,10,22)" fg:x="922" fg:w="2"/><text x="70.9555%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.15%)</title><rect x="70.7055%" y="501" width="0.1534%" height="15" fill="rgb(248,46,39)" fg:x="922" fg:w="2"/><text x="70.9555%" y="511.50"></text></g><g><title>statx (2 samples, 0.15%)</title><rect x="70.7055%" y="485" width="0.1534%" height="15" fill="rgb(248,113,48)" fg:x="922" fg:w="2"/><text x="70.9555%" y="495.50"></text></g><g><title>glob::Pattern::new (2 samples, 0.15%)</title><rect x="70.8589%" y="597" width="0.1534%" height="15" fill="rgb(245,16,25)" fg:x="924" fg:w="2"/><text x="71.1089%" y="607.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (7 samples, 0.54%)</title><rect x="70.5521%" y="661" width="0.5368%" height="15" fill="rgb(249,152,16)" fg:x="920" fg:w="7"/><text x="70.8021%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (7 samples, 0.54%)</title><rect x="70.5521%" y="645" width="0.5368%" height="15" fill="rgb(250,16,1)" fg:x="920" fg:w="7"/><text x="70.8021%" y="655.50"></text></g><g><title>glob::glob (3 samples, 0.23%)</title><rect x="70.8589%" y="629" width="0.2301%" height="15" fill="rgb(249,138,3)" fg:x="924" fg:w="3"/><text x="71.1089%" y="639.50"></text></g><g><title>glob::glob_with (3 samples, 0.23%)</title><rect x="70.8589%" y="613" width="0.2301%" height="15" fill="rgb(227,71,41)" fg:x="924" fg:w="3"/><text x="71.1089%" y="623.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_owned (1 samples, 0.08%)</title><rect x="71.0123%" y="597" width="0.0767%" height="15" fill="rgb(209,184,23)" fg:x="926" fg:w="1"/><text x="71.2623%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.0123%" y="581" width="0.0767%" height="15" fill="rgb(223,215,31)" fg:x="926" fg:w="1"/><text x="71.2623%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.0123%" y="565" width="0.0767%" height="15" fill="rgb(210,146,28)" fg:x="926" fg:w="1"/><text x="71.2623%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.0123%" y="549" width="0.0767%" height="15" fill="rgb(209,183,41)" fg:x="926" fg:w="1"/><text x="71.2623%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.0123%" y="533" width="0.0767%" height="15" fill="rgb(209,224,45)" fg:x="926" fg:w="1"/><text x="71.2623%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.0123%" y="517" width="0.0767%" height="15" fill="rgb(224,209,51)" fg:x="926" fg:w="1"/><text x="71.2623%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.0123%" y="501" width="0.0767%" height="15" fill="rgb(223,17,39)" fg:x="926" fg:w="1"/><text x="71.2623%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.0123%" y="485" width="0.0767%" height="15" fill="rgb(234,204,37)" fg:x="926" fg:w="1"/><text x="71.2623%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.0123%" y="469" width="0.0767%" height="15" fill="rgb(236,120,5)" fg:x="926" fg:w="1"/><text x="71.2623%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.0123%" y="453" width="0.0767%" height="15" fill="rgb(248,97,27)" fg:x="926" fg:w="1"/><text x="71.2623%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.0123%" y="437" width="0.0767%" height="15" fill="rgb(240,66,17)" fg:x="926" fg:w="1"/><text x="71.2623%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.0123%" y="421" width="0.0767%" height="15" fill="rgb(210,79,3)" fg:x="926" fg:w="1"/><text x="71.2623%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (2 samples, 0.15%)</title><rect x="71.0890%" y="661" width="0.1534%" height="15" fill="rgb(214,176,27)" fg:x="927" fg:w="2"/><text x="71.3390%" y="671.50"></text></g><g><title>__libc_free (2 samples, 0.15%)</title><rect x="71.0890%" y="645" width="0.1534%" height="15" fill="rgb(235,185,3)" fg:x="927" fg:w="2"/><text x="71.3390%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (19 samples, 1.46%)</title><rect x="69.8620%" y="677" width="1.4571%" height="15" fill="rgb(227,24,12)" fg:x="911" fg:w="19"/><text x="70.1120%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="71.2423%" y="661" width="0.0767%" height="15" fill="rgb(252,169,48)" fg:x="929" fg:w="1"/><text x="71.4923%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="71.2423%" y="645" width="0.0767%" height="15" fill="rgb(212,65,1)" fg:x="929" fg:w="1"/><text x="71.4923%" y="655.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (21 samples, 1.61%)</title><rect x="69.7853%" y="741" width="1.6104%" height="15" fill="rgb(242,39,24)" fg:x="910" fg:w="21"/><text x="70.0353%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (21 samples, 1.61%)</title><rect x="69.7853%" y="725" width="1.6104%" height="15" fill="rgb(249,32,23)" fg:x="910" fg:w="21"/><text x="70.0353%" y="735.50"></text></g><g><title>engine::session::Session::new (21 samples, 1.61%)</title><rect x="69.7853%" y="709" width="1.6104%" height="15" fill="rgb(251,195,23)" fg:x="910" fg:w="21"/><text x="70.0353%" y="719.50"></text></g><g><title>engine::session::Session::initialize (20 samples, 1.53%)</title><rect x="69.8620%" y="693" width="1.5337%" height="15" fill="rgb(236,174,8)" fg:x="911" fg:w="20"/><text x="70.1120%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="71.3190%" y="677" width="0.0767%" height="15" fill="rgb(220,197,8)" fg:x="930" fg:w="1"/><text x="71.5690%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.3190%" y="661" width="0.0767%" height="15" fill="rgb(240,108,37)" fg:x="930" fg:w="1"/><text x="71.5690%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.3190%" y="645" width="0.0767%" height="15" fill="rgb(232,176,24)" fg:x="930" fg:w="1"/><text x="71.5690%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.3190%" y="629" width="0.0767%" height="15" fill="rgb(243,35,29)" fg:x="930" fg:w="1"/><text x="71.5690%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.3190%" y="613" width="0.0767%" height="15" fill="rgb(210,37,18)" fg:x="930" fg:w="1"/><text x="71.5690%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.3957%" y="725" width="0.0767%" height="15" fill="rgb(224,184,40)" fg:x="931" fg:w="1"/><text x="71.6457%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="71.3957%" y="709" width="0.0767%" height="15" fill="rgb(236,39,29)" fg:x="931" fg:w="1"/><text x="71.6457%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.3957%" y="693" width="0.0767%" height="15" fill="rgb(232,48,39)" fg:x="931" fg:w="1"/><text x="71.6457%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.4724%" y="645" width="0.0767%" height="15" fill="rgb(236,34,42)" fg:x="932" fg:w="1"/><text x="71.7224%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.4724%" y="629" width="0.0767%" height="15" fill="rgb(243,106,37)" fg:x="932" fg:w="1"/><text x="71.7224%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.4724%" y="613" width="0.0767%" height="15" fill="rgb(218,96,6)" fg:x="932" fg:w="1"/><text x="71.7224%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.15%)</title><rect x="71.6258%" y="613" width="0.1534%" height="15" fill="rgb(235,130,12)" fg:x="934" fg:w="2"/><text x="71.8758%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.15%)</title><rect x="71.6258%" y="597" width="0.1534%" height="15" fill="rgb(231,95,0)" fg:x="934" fg:w="2"/><text x="71.8758%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.15%)</title><rect x="71.6258%" y="581" width="0.1534%" height="15" fill="rgb(228,12,23)" fg:x="934" fg:w="2"/><text x="71.8758%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.7025%" y="565" width="0.0767%" height="15" fill="rgb(216,12,1)" fg:x="935" fg:w="1"/><text x="71.9525%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="71.8558%" y="597" width="0.0767%" height="15" fill="rgb(219,59,3)" fg:x="937" fg:w="1"/><text x="72.1058%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.15%)</title><rect x="71.9325%" y="597" width="0.1534%" height="15" fill="rgb(215,208,46)" fg:x="938" fg:w="2"/><text x="72.1825%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.15%)</title><rect x="71.9325%" y="581" width="0.1534%" height="15" fill="rgb(254,224,29)" fg:x="938" fg:w="2"/><text x="72.1825%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.0092%" y="565" width="0.0767%" height="15" fill="rgb(232,14,29)" fg:x="939" fg:w="1"/><text x="72.2592%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.0092%" y="549" width="0.0767%" height="15" fill="rgb(208,45,52)" fg:x="939" fg:w="1"/><text x="72.2592%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.0092%" y="533" width="0.0767%" height="15" fill="rgb(234,191,28)" fg:x="939" fg:w="1"/><text x="72.2592%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.54%)</title><rect x="71.6258%" y="629" width="0.5368%" height="15" fill="rgb(244,67,43)" fg:x="934" fg:w="7"/><text x="71.8758%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.38%)</title><rect x="71.7791%" y="613" width="0.3834%" height="15" fill="rgb(236,189,24)" fg:x="936" fg:w="5"/><text x="72.0291%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.0859%" y="597" width="0.0767%" height="15" fill="rgb(239,214,33)" fg:x="940" fg:w="1"/><text x="72.3359%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.0859%" y="581" width="0.0767%" height="15" fill="rgb(226,176,41)" fg:x="940" fg:w="1"/><text x="72.3359%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.0859%" y="565" width="0.0767%" height="15" fill="rgb(248,47,8)" fg:x="940" fg:w="1"/><text x="72.3359%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.1626%" y="629" width="0.0767%" height="15" fill="rgb(218,81,44)" fg:x="941" fg:w="1"/><text x="72.4126%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.1626%" y="613" width="0.0767%" height="15" fill="rgb(213,98,6)" fg:x="941" fg:w="1"/><text x="72.4126%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.1626%" y="597" width="0.0767%" height="15" fill="rgb(222,85,22)" fg:x="941" fg:w="1"/><text x="72.4126%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="72.2393%" y="581" width="0.0767%" height="15" fill="rgb(239,46,39)" fg:x="942" fg:w="1"/><text x="72.4893%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.2393%" y="565" width="0.0767%" height="15" fill="rgb(237,12,29)" fg:x="942" fg:w="1"/><text x="72.4893%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.2393%" y="549" width="0.0767%" height="15" fill="rgb(214,77,8)" fg:x="942" fg:w="1"/><text x="72.4893%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.4693%" y="501" width="0.0767%" height="15" fill="rgb(217,168,37)" fg:x="945" fg:w="1"/><text x="72.7193%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.31%)</title><rect x="72.3160%" y="565" width="0.3067%" height="15" fill="rgb(221,217,23)" fg:x="943" fg:w="4"/><text x="72.5660%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.23%)</title><rect x="72.3926%" y="549" width="0.2301%" height="15" fill="rgb(243,229,36)" fg:x="944" fg:w="3"/><text x="72.6426%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.23%)</title><rect x="72.3926%" y="533" width="0.2301%" height="15" fill="rgb(251,163,40)" fg:x="944" fg:w="3"/><text x="72.6426%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.23%)</title><rect x="72.3926%" y="517" width="0.2301%" height="15" fill="rgb(237,222,12)" fg:x="944" fg:w="3"/><text x="72.6426%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.5460%" y="501" width="0.0767%" height="15" fill="rgb(248,132,6)" fg:x="946" fg:w="1"/><text x="72.7960%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.5460%" y="485" width="0.0767%" height="15" fill="rgb(227,167,50)" fg:x="946" fg:w="1"/><text x="72.7960%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.5460%" y="469" width="0.0767%" height="15" fill="rgb(242,84,37)" fg:x="946" fg:w="1"/><text x="72.7960%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.5460%" y="453" width="0.0767%" height="15" fill="rgb(212,4,50)" fg:x="946" fg:w="1"/><text x="72.7960%" y="463.50"></text></g><g><title>engine::session::Session::flush (16 samples, 1.23%)</title><rect x="71.4724%" y="725" width="1.2270%" height="15" fill="rgb(230,228,32)" fg:x="932" fg:w="16"/><text x="71.7224%" y="735.50"></text></g><g><title>engine::session::state::State::close (16 samples, 1.23%)</title><rect x="71.4724%" y="709" width="1.2270%" height="15" fill="rgb(248,217,23)" fg:x="932" fg:w="16"/><text x="71.7224%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (16 samples, 1.23%)</title><rect x="71.4724%" y="693" width="1.2270%" height="15" fill="rgb(238,197,32)" fg:x="932" fg:w="16"/><text x="71.7224%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (16 samples, 1.23%)</title><rect x="71.4724%" y="677" width="1.2270%" height="15" fill="rgb(236,106,1)" fg:x="932" fg:w="16"/><text x="71.7224%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 1.23%)</title><rect x="71.4724%" y="661" width="1.2270%" height="15" fill="rgb(219,228,13)" fg:x="932" fg:w="16"/><text x="71.7224%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (15 samples, 1.15%)</title><rect x="71.5491%" y="645" width="1.1503%" height="15" fill="rgb(238,30,35)" fg:x="933" fg:w="15"/><text x="71.7991%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.46%)</title><rect x="72.2393%" y="629" width="0.4601%" height="15" fill="rgb(236,70,23)" fg:x="942" fg:w="6"/><text x="72.4893%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.46%)</title><rect x="72.2393%" y="613" width="0.4601%" height="15" fill="rgb(249,104,48)" fg:x="942" fg:w="6"/><text x="72.4893%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.46%)</title><rect x="72.2393%" y="597" width="0.4601%" height="15" fill="rgb(254,117,50)" fg:x="942" fg:w="6"/><text x="72.4893%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.38%)</title><rect x="72.3160%" y="581" width="0.3834%" height="15" fill="rgb(223,152,4)" fg:x="943" fg:w="5"/><text x="72.5660%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.6227%" y="565" width="0.0767%" height="15" fill="rgb(245,6,2)" fg:x="947" fg:w="1"/><text x="72.8727%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.6227%" y="549" width="0.0767%" height="15" fill="rgb(249,150,24)" fg:x="947" fg:w="1"/><text x="72.8727%" y="559.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="72.7761%" y="693" width="0.0767%" height="15" fill="rgb(228,185,42)" fg:x="949" fg:w="1"/><text x="73.0261%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="72.7761%" y="677" width="0.0767%" height="15" fill="rgb(226,39,33)" fg:x="949" fg:w="1"/><text x="73.0261%" y="687.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="72.7761%" y="661" width="0.0767%" height="15" fill="rgb(221,166,19)" fg:x="949" fg:w="1"/><text x="73.0261%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.7761%" y="645" width="0.0767%" height="15" fill="rgb(209,109,2)" fg:x="949" fg:w="1"/><text x="73.0261%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.23%)</title><rect x="72.6994%" y="725" width="0.2301%" height="15" fill="rgb(252,216,26)" fg:x="948" fg:w="3"/><text x="72.9494%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.23%)</title><rect x="72.6994%" y="709" width="0.2301%" height="15" fill="rgb(227,173,36)" fg:x="948" fg:w="3"/><text x="72.9494%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="72.8528%" y="693" width="0.0767%" height="15" fill="rgb(209,90,7)" fg:x="950" fg:w="1"/><text x="73.1028%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="72.8528%" y="677" width="0.0767%" height="15" fill="rgb(250,194,11)" fg:x="950" fg:w="1"/><text x="73.1028%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.8528%" y="661" width="0.0767%" height="15" fill="rgb(220,72,50)" fg:x="950" fg:w="1"/><text x="73.1028%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="72.8528%" y="645" width="0.0767%" height="15" fill="rgb(222,106,48)" fg:x="950" fg:w="1"/><text x="73.1028%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.8528%" y="629" width="0.0767%" height="15" fill="rgb(216,220,45)" fg:x="950" fg:w="1"/><text x="73.1028%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8528%" y="613" width="0.0767%" height="15" fill="rgb(234,112,18)" fg:x="950" fg:w="1"/><text x="73.1028%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8528%" y="597" width="0.0767%" height="15" fill="rgb(206,179,9)" fg:x="950" fg:w="1"/><text x="73.1028%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.8528%" y="581" width="0.0767%" height="15" fill="rgb(215,115,40)" fg:x="950" fg:w="1"/><text x="73.1028%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::OpenedScopeRefMut&lt;plugins_core::carrying::model::Containing,kernel::model::entity::Entity&gt;&gt; (1 samples, 0.08%)</title><rect x="72.9294%" y="693" width="0.0767%" height="15" fill="rgb(222,69,34)" fg:x="951" fg:w="1"/><text x="73.1794%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.0061%" y="645" width="0.0767%" height="15" fill="rgb(209,161,10)" fg:x="952" fg:w="1"/><text x="73.2561%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.0061%" y="629" width="0.0767%" height="15" fill="rgb(217,6,38)" fg:x="952" fg:w="1"/><text x="73.2561%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.0061%" y="613" width="0.0767%" height="15" fill="rgb(229,229,48)" fg:x="952" fg:w="1"/><text x="73.2561%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.0061%" y="597" width="0.0767%" height="15" fill="rgb(225,21,28)" fg:x="952" fg:w="1"/><text x="73.2561%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.0061%" y="581" width="0.0767%" height="15" fill="rgb(206,33,13)" fg:x="952" fg:w="1"/><text x="73.2561%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.0061%" y="565" width="0.0767%" height="15" fill="rgb(242,178,17)" fg:x="952" fg:w="1"/><text x="73.2561%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.0061%" y="549" width="0.0767%" height="15" fill="rgb(220,162,5)" fg:x="952" fg:w="1"/><text x="73.2561%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (3 samples, 0.23%)</title><rect x="72.9294%" y="725" width="0.2301%" height="15" fill="rgb(210,33,43)" fg:x="951" fg:w="3"/><text x="73.1794%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.23%)</title><rect x="72.9294%" y="709" width="0.2301%" height="15" fill="rgb(216,116,54)" fg:x="951" fg:w="3"/><text x="73.1794%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.15%)</title><rect x="73.0061%" y="693" width="0.1534%" height="15" fill="rgb(249,92,24)" fg:x="952" fg:w="2"/><text x="73.2561%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.15%)</title><rect x="73.0061%" y="677" width="0.1534%" height="15" fill="rgb(231,189,14)" fg:x="952" fg:w="2"/><text x="73.2561%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.15%)</title><rect x="73.0061%" y="661" width="0.1534%" height="15" fill="rgb(230,8,41)" fg:x="952" fg:w="2"/><text x="73.2561%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="73.0828%" y="645" width="0.0767%" height="15" fill="rgb(249,7,27)" fg:x="953" fg:w="1"/><text x="73.3328%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.0828%" y="629" width="0.0767%" height="15" fill="rgb(232,86,5)" fg:x="953" fg:w="1"/><text x="73.3328%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0828%" y="613" width="0.0767%" height="15" fill="rgb(224,175,18)" fg:x="953" fg:w="1"/><text x="73.3328%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0828%" y="597" width="0.0767%" height="15" fill="rgb(220,129,12)" fg:x="953" fg:w="1"/><text x="73.3328%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0828%" y="581" width="0.0767%" height="15" fill="rgb(210,19,36)" fg:x="953" fg:w="1"/><text x="73.3328%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0828%" y="565" width="0.0767%" height="15" fill="rgb(219,96,14)" fg:x="953" fg:w="1"/><text x="73.3328%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0828%" y="549" width="0.0767%" height="15" fill="rgb(249,106,1)" fg:x="953" fg:w="1"/><text x="73.3328%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.0828%" y="533" width="0.0767%" height="15" fill="rgb(249,155,20)" fg:x="953" fg:w="1"/><text x="73.3328%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.0828%" y="517" width="0.0767%" height="15" fill="rgb(244,168,9)" fg:x="953" fg:w="1"/><text x="73.3328%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.0828%" y="501" width="0.0767%" height="15" fill="rgb(216,23,50)" fg:x="953" fg:w="1"/><text x="73.3328%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0828%" y="485" width="0.0767%" height="15" fill="rgb(224,219,20)" fg:x="953" fg:w="1"/><text x="73.3328%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0828%" y="469" width="0.0767%" height="15" fill="rgb(222,156,15)" fg:x="953" fg:w="1"/><text x="73.3328%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.0828%" y="453" width="0.0767%" height="15" fill="rgb(231,97,17)" fg:x="953" fg:w="1"/><text x="73.3328%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.0828%" y="437" width="0.0767%" height="15" fill="rgb(218,70,48)" fg:x="953" fg:w="1"/><text x="73.3328%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.0828%" y="421" width="0.0767%" height="15" fill="rgb(212,196,52)" fg:x="953" fg:w="1"/><text x="73.3328%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.0828%" y="405" width="0.0767%" height="15" fill="rgb(243,203,18)" fg:x="953" fg:w="1"/><text x="73.3328%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0828%" y="389" width="0.0767%" height="15" fill="rgb(252,125,41)" fg:x="953" fg:w="1"/><text x="73.3328%" y="399.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="73.2362%" y="709" width="0.0767%" height="15" fill="rgb(223,180,33)" fg:x="955" fg:w="1"/><text x="73.4862%" y="719.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="73.2362%" y="693" width="0.0767%" height="15" fill="rgb(254,159,46)" fg:x="955" fg:w="1"/><text x="73.4862%" y="703.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="73.2362%" y="677" width="0.0767%" height="15" fill="rgb(254,38,10)" fg:x="955" fg:w="1"/><text x="73.4862%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="73.3129%" y="709" width="0.0767%" height="15" fill="rgb(208,217,32)" fg:x="956" fg:w="1"/><text x="73.5629%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.3129%" y="693" width="0.0767%" height="15" fill="rgb(221,120,13)" fg:x="956" fg:w="1"/><text x="73.5629%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="73.3129%" y="677" width="0.0767%" height="15" fill="rgb(246,54,52)" fg:x="956" fg:w="1"/><text x="73.5629%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="73.3129%" y="661" width="0.0767%" height="15" fill="rgb(242,34,25)" fg:x="956" fg:w="1"/><text x="73.5629%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="73.3129%" y="645" width="0.0767%" height="15" fill="rgb(247,209,9)" fg:x="956" fg:w="1"/><text x="73.5629%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="73.3129%" y="629" width="0.0767%" height="15" fill="rgb(228,71,26)" fg:x="956" fg:w="1"/><text x="73.5629%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.3129%" y="613" width="0.0767%" height="15" fill="rgb(222,145,49)" fg:x="956" fg:w="1"/><text x="73.5629%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.3129%" y="597" width="0.0767%" height="15" fill="rgb(218,121,17)" fg:x="956" fg:w="1"/><text x="73.5629%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.3129%" y="581" width="0.0767%" height="15" fill="rgb(244,50,7)" fg:x="956" fg:w="1"/><text x="73.5629%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.3129%" y="565" width="0.0767%" height="15" fill="rgb(246,229,37)" fg:x="956" fg:w="1"/><text x="73.5629%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="73.3896%" y="709" width="0.0767%" height="15" fill="rgb(225,18,5)" fg:x="957" fg:w="1"/><text x="73.6396%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.3896%" y="693" width="0.0767%" height="15" fill="rgb(213,204,8)" fg:x="957" fg:w="1"/><text x="73.6396%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="73.4663%" y="693" width="0.0767%" height="15" fill="rgb(238,103,6)" fg:x="958" fg:w="1"/><text x="73.7163%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.5429%" y="613" width="0.0767%" height="15" fill="rgb(222,25,35)" fg:x="959" fg:w="1"/><text x="73.7929%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.5429%" y="597" width="0.0767%" height="15" fill="rgb(213,203,35)" fg:x="959" fg:w="1"/><text x="73.7929%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.5429%" y="581" width="0.0767%" height="15" fill="rgb(221,79,53)" fg:x="959" fg:w="1"/><text x="73.7929%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.15%)</title><rect x="73.6196%" y="597" width="0.1534%" height="15" fill="rgb(243,200,35)" fg:x="960" fg:w="2"/><text x="73.8696%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.15%)</title><rect x="73.6196%" y="581" width="0.1534%" height="15" fill="rgb(248,60,25)" fg:x="960" fg:w="2"/><text x="73.8696%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.6963%" y="565" width="0.0767%" height="15" fill="rgb(227,53,46)" fg:x="961" fg:w="1"/><text x="73.9463%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="73.6963%" y="549" width="0.0767%" height="15" fill="rgb(216,120,32)" fg:x="961" fg:w="1"/><text x="73.9463%" y="559.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="73.6963%" y="533" width="0.0767%" height="15" fill="rgb(220,134,1)" fg:x="961" fg:w="1"/><text x="73.9463%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.7730%" y="501" width="0.0767%" height="15" fill="rgb(237,168,5)" fg:x="962" fg:w="1"/><text x="74.0230%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.7730%" y="485" width="0.0767%" height="15" fill="rgb(231,100,33)" fg:x="962" fg:w="1"/><text x="74.0230%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.7730%" y="469" width="0.0767%" height="15" fill="rgb(236,177,47)" fg:x="962" fg:w="1"/><text x="74.0230%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.7730%" y="453" width="0.0767%" height="15" fill="rgb(235,7,49)" fg:x="962" fg:w="1"/><text x="74.0230%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.8497%" y="485" width="0.0767%" height="15" fill="rgb(232,119,22)" fg:x="963" fg:w="1"/><text x="74.0997%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.8497%" y="469" width="0.0767%" height="15" fill="rgb(254,73,53)" fg:x="963" fg:w="1"/><text x="74.0997%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.8497%" y="453" width="0.0767%" height="15" fill="rgb(251,35,20)" fg:x="963" fg:w="1"/><text x="74.0997%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.23%)</title><rect x="73.7730%" y="549" width="0.2301%" height="15" fill="rgb(241,119,20)" fg:x="962" fg:w="3"/><text x="74.0230%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="73.7730%" y="533" width="0.2301%" height="15" fill="rgb(207,102,14)" fg:x="962" fg:w="3"/><text x="74.0230%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="73.7730%" y="517" width="0.2301%" height="15" fill="rgb(248,201,50)" fg:x="962" fg:w="3"/><text x="74.0230%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.15%)</title><rect x="73.8497%" y="501" width="0.1534%" height="15" fill="rgb(222,185,44)" fg:x="963" fg:w="2"/><text x="74.0997%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.9264%" y="485" width="0.0767%" height="15" fill="rgb(218,107,18)" fg:x="964" fg:w="1"/><text x="74.1764%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.9264%" y="469" width="0.0767%" height="15" fill="rgb(237,177,39)" fg:x="964" fg:w="1"/><text x="74.1764%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.9264%" y="453" width="0.0767%" height="15" fill="rgb(246,69,6)" fg:x="964" fg:w="1"/><text x="74.1764%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.9264%" y="437" width="0.0767%" height="15" fill="rgb(234,208,37)" fg:x="964" fg:w="1"/><text x="74.1764%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.0031%" y="549" width="0.0767%" height="15" fill="rgb(225,4,6)" fg:x="965" fg:w="1"/><text x="74.2531%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.0031%" y="533" width="0.0767%" height="15" fill="rgb(233,45,0)" fg:x="965" fg:w="1"/><text x="74.2531%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.0031%" y="517" width="0.0767%" height="15" fill="rgb(226,136,5)" fg:x="965" fg:w="1"/><text x="74.2531%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.0031%" y="501" width="0.0767%" height="15" fill="rgb(211,91,47)" fg:x="965" fg:w="1"/><text x="74.2531%" y="511.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="74.0798%" y="533" width="0.0767%" height="15" fill="rgb(242,88,51)" fg:x="966" fg:w="1"/><text x="74.3298%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.15%)</title><rect x="74.1564%" y="533" width="0.1534%" height="15" fill="rgb(230,91,28)" fg:x="967" fg:w="2"/><text x="74.4064%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.15%)</title><rect x="74.1564%" y="517" width="0.1534%" height="15" fill="rgb(254,186,29)" fg:x="967" fg:w="2"/><text x="74.4064%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.15%)</title><rect x="74.1564%" y="501" width="0.1534%" height="15" fill="rgb(238,6,4)" fg:x="967" fg:w="2"/><text x="74.4064%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.15%)</title><rect x="74.1564%" y="485" width="0.1534%" height="15" fill="rgb(221,151,16)" fg:x="967" fg:w="2"/><text x="74.4064%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.15%)</title><rect x="74.1564%" y="469" width="0.1534%" height="15" fill="rgb(251,143,52)" fg:x="967" fg:w="2"/><text x="74.4064%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.15%)</title><rect x="74.1564%" y="453" width="0.1534%" height="15" fill="rgb(206,90,15)" fg:x="967" fg:w="2"/><text x="74.4064%" y="463.50"></text></g><g><title>realloc (2 samples, 0.15%)</title><rect x="74.1564%" y="437" width="0.1534%" height="15" fill="rgb(218,35,8)" fg:x="967" fg:w="2"/><text x="74.4064%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.61%)</title><rect x="73.7730%" y="581" width="0.6135%" height="15" fill="rgb(239,215,6)" fg:x="962" fg:w="8"/><text x="74.0230%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.61%)</title><rect x="73.7730%" y="565" width="0.6135%" height="15" fill="rgb(245,116,39)" fg:x="962" fg:w="8"/><text x="74.0230%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.31%)</title><rect x="74.0798%" y="549" width="0.3067%" height="15" fill="rgb(242,65,28)" fg:x="966" fg:w="4"/><text x="74.3298%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.3098%" y="533" width="0.0767%" height="15" fill="rgb(252,132,53)" fg:x="969" fg:w="1"/><text x="74.5598%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.3098%" y="517" width="0.0767%" height="15" fill="rgb(224,159,50)" fg:x="969" fg:w="1"/><text x="74.5598%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.3098%" y="501" width="0.0767%" height="15" fill="rgb(224,93,4)" fg:x="969" fg:w="1"/><text x="74.5598%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.3098%" y="485" width="0.0767%" height="15" fill="rgb(208,81,34)" fg:x="969" fg:w="1"/><text x="74.5598%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.3098%" y="469" width="0.0767%" height="15" fill="rgb(233,92,54)" fg:x="969" fg:w="1"/><text x="74.5598%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.3098%" y="453" width="0.0767%" height="15" fill="rgb(237,21,14)" fg:x="969" fg:w="1"/><text x="74.5598%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.3098%" y="437" width="0.0767%" height="15" fill="rgb(249,128,51)" fg:x="969" fg:w="1"/><text x="74.5598%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.3098%" y="421" width="0.0767%" height="15" fill="rgb(223,129,24)" fg:x="969" fg:w="1"/><text x="74.5598%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.69%)</title><rect x="73.7730%" y="597" width="0.6902%" height="15" fill="rgb(231,168,25)" fg:x="962" fg:w="9"/><text x="74.0230%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.3865%" y="581" width="0.0767%" height="15" fill="rgb(224,39,20)" fg:x="970" fg:w="1"/><text x="74.6365%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.3865%" y="565" width="0.0767%" height="15" fill="rgb(225,152,53)" fg:x="970" fg:w="1"/><text x="74.6365%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="74.3865%" y="549" width="0.0767%" height="15" fill="rgb(252,17,24)" fg:x="970" fg:w="1"/><text x="74.6365%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.15%)</title><rect x="74.4632%" y="565" width="0.1534%" height="15" fill="rgb(250,114,30)" fg:x="971" fg:w="2"/><text x="74.7132%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.6166%" y="549" width="0.0767%" height="15" fill="rgb(229,5,4)" fg:x="973" fg:w="1"/><text x="74.8666%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.38%)</title><rect x="74.4632%" y="597" width="0.3834%" height="15" fill="rgb(225,176,49)" fg:x="971" fg:w="5"/><text x="74.7132%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.38%)</title><rect x="74.4632%" y="581" width="0.3834%" height="15" fill="rgb(224,221,49)" fg:x="971" fg:w="5"/><text x="74.7132%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.23%)</title><rect x="74.6166%" y="565" width="0.2301%" height="15" fill="rgb(253,169,27)" fg:x="973" fg:w="3"/><text x="74.8666%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.15%)</title><rect x="74.6933%" y="549" width="0.1534%" height="15" fill="rgb(211,206,16)" fg:x="974" fg:w="2"/><text x="74.9433%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.15%)</title><rect x="74.6933%" y="533" width="0.1534%" height="15" fill="rgb(244,87,35)" fg:x="974" fg:w="2"/><text x="74.9433%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.7699%" y="517" width="0.0767%" height="15" fill="rgb(246,28,10)" fg:x="975" fg:w="1"/><text x="75.0199%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.7699%" y="501" width="0.0767%" height="15" fill="rgb(229,12,44)" fg:x="975" fg:w="1"/><text x="75.0199%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.8466%" y="565" width="0.0767%" height="15" fill="rgb(210,145,37)" fg:x="976" fg:w="1"/><text x="75.0966%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.15%)</title><rect x="74.8466%" y="581" width="0.1534%" height="15" fill="rgb(227,112,52)" fg:x="976" fg:w="2"/><text x="75.0966%" y="591.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="74.9233%" y="565" width="0.0767%" height="15" fill="rgb(238,155,34)" fg:x="977" fg:w="1"/><text x="75.1733%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="75.0000%" y="501" width="0.0767%" height="15" fill="rgb(239,226,36)" fg:x="978" fg:w="1"/><text x="75.2500%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.0000%" y="485" width="0.0767%" height="15" fill="rgb(230,16,23)" fg:x="978" fg:w="1"/><text x="75.2500%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.0000%" y="469" width="0.0767%" height="15" fill="rgb(236,171,36)" fg:x="978" fg:w="1"/><text x="75.2500%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.0000%" y="453" width="0.0767%" height="15" fill="rgb(221,22,14)" fg:x="978" fg:w="1"/><text x="75.2500%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.0000%" y="437" width="0.0767%" height="15" fill="rgb(242,43,11)" fg:x="978" fg:w="1"/><text x="75.2500%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.0000%" y="421" width="0.0767%" height="15" fill="rgb(232,69,23)" fg:x="978" fg:w="1"/><text x="75.2500%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.0000%" y="405" width="0.0767%" height="15" fill="rgb(216,180,54)" fg:x="978" fg:w="1"/><text x="75.2500%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.1534%" y="469" width="0.0767%" height="15" fill="rgb(216,5,24)" fg:x="980" fg:w="1"/><text x="75.4034%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.1534%" y="453" width="0.0767%" height="15" fill="rgb(225,89,9)" fg:x="980" fg:w="1"/><text x="75.4034%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.15%)</title><rect x="75.1534%" y="485" width="0.1534%" height="15" fill="rgb(243,75,33)" fg:x="980" fg:w="2"/><text x="75.4034%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.2301%" y="469" width="0.0767%" height="15" fill="rgb(247,141,45)" fg:x="981" fg:w="1"/><text x="75.4801%" y="479.50"></text></g><g><title>engine::session::Session::flush (25 samples, 1.92%)</title><rect x="73.4663%" y="709" width="1.9172%" height="15" fill="rgb(232,177,36)" fg:x="958" fg:w="25"/><text x="73.7163%" y="719.50">e..</text></g><g><title>engine::session::Session::save_changes (24 samples, 1.84%)</title><rect x="73.5429%" y="693" width="1.8405%" height="15" fill="rgb(219,125,36)" fg:x="959" fg:w="24"/><text x="73.7929%" y="703.50">e..</text></g><g><title>engine::session::state::State::close (24 samples, 1.84%)</title><rect x="73.5429%" y="677" width="1.8405%" height="15" fill="rgb(227,94,9)" fg:x="959" fg:w="24"/><text x="73.7929%" y="687.50">e..</text></g><g><title>engine::session::state::State::flush_entities (24 samples, 1.84%)</title><rect x="73.5429%" y="661" width="1.8405%" height="15" fill="rgb(240,34,52)" fg:x="959" fg:w="24"/><text x="73.7929%" y="671.50">e..</text></g><g><title>core::iter::adapters::try_process (24 samples, 1.84%)</title><rect x="73.5429%" y="645" width="1.8405%" height="15" fill="rgb(216,45,12)" fg:x="959" fg:w="24"/><text x="73.7929%" y="655.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (24 samples, 1.84%)</title><rect x="73.5429%" y="629" width="1.8405%" height="15" fill="rgb(246,21,19)" fg:x="959" fg:w="24"/><text x="73.7929%" y="639.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (23 samples, 1.76%)</title><rect x="73.6196%" y="613" width="1.7638%" height="15" fill="rgb(213,98,42)" fg:x="960" fg:w="23"/><text x="73.8696%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.54%)</title><rect x="74.8466%" y="597" width="0.5368%" height="15" fill="rgb(250,136,47)" fg:x="976" fg:w="7"/><text x="75.0966%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.38%)</title><rect x="75.0000%" y="581" width="0.3834%" height="15" fill="rgb(251,124,27)" fg:x="978" fg:w="5"/><text x="75.2500%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.38%)</title><rect x="75.0000%" y="565" width="0.3834%" height="15" fill="rgb(229,180,14)" fg:x="978" fg:w="5"/><text x="75.2500%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.38%)</title><rect x="75.0000%" y="549" width="0.3834%" height="15" fill="rgb(245,216,25)" fg:x="978" fg:w="5"/><text x="75.2500%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.38%)</title><rect x="75.0000%" y="533" width="0.3834%" height="15" fill="rgb(251,43,5)" fg:x="978" fg:w="5"/><text x="75.2500%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.38%)</title><rect x="75.0000%" y="517" width="0.3834%" height="15" fill="rgb(250,128,24)" fg:x="978" fg:w="5"/><text x="75.2500%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.31%)</title><rect x="75.0767%" y="501" width="0.3067%" height="15" fill="rgb(217,117,27)" fg:x="979" fg:w="4"/><text x="75.3267%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.3067%" y="485" width="0.0767%" height="15" fill="rgb(245,147,4)" fg:x="982" fg:w="1"/><text x="75.5567%" y="495.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="75.3834%" y="693" width="0.0767%" height="15" fill="rgb(242,201,35)" fg:x="983" fg:w="1"/><text x="75.6334%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="75.3834%" y="677" width="0.0767%" height="15" fill="rgb(218,181,1)" fg:x="983" fg:w="1"/><text x="75.6334%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.3834%" y="661" width="0.0767%" height="15" fill="rgb(222,6,29)" fg:x="983" fg:w="1"/><text x="75.6334%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.3834%" y="645" width="0.0767%" height="15" fill="rgb(208,186,3)" fg:x="983" fg:w="1"/><text x="75.6334%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.3834%" y="629" width="0.0767%" height="15" fill="rgb(216,36,26)" fg:x="983" fg:w="1"/><text x="75.6334%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.3834%" y="613" width="0.0767%" height="15" fill="rgb(248,201,23)" fg:x="983" fg:w="1"/><text x="75.6334%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.3834%" y="597" width="0.0767%" height="15" fill="rgb(251,170,31)" fg:x="983" fg:w="1"/><text x="75.6334%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.3834%" y="581" width="0.0767%" height="15" fill="rgb(207,110,25)" fg:x="983" fg:w="1"/><text x="75.6334%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="75.4601%" y="677" width="0.0767%" height="15" fill="rgb(250,54,15)" fg:x="984" fg:w="1"/><text x="75.7101%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.4601%" y="661" width="0.0767%" height="15" fill="rgb(227,68,33)" fg:x="984" fg:w="1"/><text x="75.7101%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.4601%" y="645" width="0.0767%" height="15" fill="rgb(238,34,41)" fg:x="984" fg:w="1"/><text x="75.7101%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.4601%" y="629" width="0.0767%" height="15" fill="rgb(220,11,15)" fg:x="984" fg:w="1"/><text x="75.7101%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.4601%" y="613" width="0.0767%" height="15" fill="rgb(246,111,35)" fg:x="984" fg:w="1"/><text x="75.7101%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.4601%" y="597" width="0.0767%" height="15" fill="rgb(209,88,53)" fg:x="984" fg:w="1"/><text x="75.7101%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.4601%" y="581" width="0.0767%" height="15" fill="rgb(231,185,47)" fg:x="984" fg:w="1"/><text x="75.7101%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.4601%" y="565" width="0.0767%" height="15" fill="rgb(233,154,1)" fg:x="984" fg:w="1"/><text x="75.7101%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.4601%" y="549" width="0.0767%" height="15" fill="rgb(225,15,46)" fg:x="984" fg:w="1"/><text x="75.7101%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.4601%" y="533" width="0.0767%" height="15" fill="rgb(211,135,41)" fg:x="984" fg:w="1"/><text x="75.7101%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.4601%" y="517" width="0.0767%" height="15" fill="rgb(208,54,0)" fg:x="984" fg:w="1"/><text x="75.7101%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.4601%" y="501" width="0.0767%" height="15" fill="rgb(244,136,14)" fg:x="984" fg:w="1"/><text x="75.7101%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.4601%" y="485" width="0.0767%" height="15" fill="rgb(241,56,14)" fg:x="984" fg:w="1"/><text x="75.7101%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.4601%" y="469" width="0.0767%" height="15" fill="rgb(205,80,24)" fg:x="984" fg:w="1"/><text x="75.7101%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.4601%" y="453" width="0.0767%" height="15" fill="rgb(220,57,4)" fg:x="984" fg:w="1"/><text x="75.7101%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.4601%" y="437" width="0.0767%" height="15" fill="rgb(226,193,50)" fg:x="984" fg:w="1"/><text x="75.7101%" y="447.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="75.5368%" y="661" width="0.0767%" height="15" fill="rgb(231,168,22)" fg:x="985" fg:w="1"/><text x="75.7868%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.5368%" y="645" width="0.0767%" height="15" fill="rgb(254,215,14)" fg:x="985" fg:w="1"/><text x="75.7868%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="75.6135%" y="645" width="0.0767%" height="15" fill="rgb(211,115,16)" fg:x="986" fg:w="1"/><text x="75.8635%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.6135%" y="629" width="0.0767%" height="15" fill="rgb(236,210,16)" fg:x="986" fg:w="1"/><text x="75.8635%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.6135%" y="613" width="0.0767%" height="15" fill="rgb(221,94,12)" fg:x="986" fg:w="1"/><text x="75.8635%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.6135%" y="597" width="0.0767%" height="15" fill="rgb(235,218,49)" fg:x="986" fg:w="1"/><text x="75.8635%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.6135%" y="581" width="0.0767%" height="15" fill="rgb(217,114,14)" fg:x="986" fg:w="1"/><text x="75.8635%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (3 samples, 0.23%)</title><rect x="75.5368%" y="677" width="0.2301%" height="15" fill="rgb(216,145,22)" fg:x="985" fg:w="3"/><text x="75.7868%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.15%)</title><rect x="75.6135%" y="661" width="0.1534%" height="15" fill="rgb(217,112,39)" fg:x="986" fg:w="2"/><text x="75.8635%" y="671.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="75.6902%" y="645" width="0.0767%" height="15" fill="rgb(225,85,32)" fg:x="987" fg:w="1"/><text x="75.9402%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.6902%" y="629" width="0.0767%" height="15" fill="rgb(245,209,47)" fg:x="987" fg:w="1"/><text x="75.9402%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.38%)</title><rect x="75.4601%" y="693" width="0.3834%" height="15" fill="rgb(218,220,15)" fg:x="984" fg:w="5"/><text x="75.7101%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="75.7669%" y="677" width="0.0767%" height="15" fill="rgb(222,202,31)" fg:x="988" fg:w="1"/><text x="76.0169%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="75.7669%" y="661" width="0.0767%" height="15" fill="rgb(243,203,4)" fg:x="988" fg:w="1"/><text x="76.0169%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.7669%" y="645" width="0.0767%" height="15" fill="rgb(237,92,17)" fg:x="988" fg:w="1"/><text x="76.0169%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="75.7669%" y="629" width="0.0767%" height="15" fill="rgb(231,119,7)" fg:x="988" fg:w="1"/><text x="76.0169%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="75.7669%" y="613" width="0.0767%" height="15" fill="rgb(237,82,41)" fg:x="988" fg:w="1"/><text x="76.0169%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.7669%" y="597" width="0.0767%" height="15" fill="rgb(226,81,48)" fg:x="988" fg:w="1"/><text x="76.0169%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.7669%" y="581" width="0.0767%" height="15" fill="rgb(234,70,51)" fg:x="988" fg:w="1"/><text x="76.0169%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.54%)</title><rect x="75.3834%" y="709" width="0.5368%" height="15" fill="rgb(251,86,4)" fg:x="983" fg:w="7"/><text x="75.6334%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.8436%" y="693" width="0.0767%" height="15" fill="rgb(244,144,28)" fg:x="989" fg:w="1"/><text x="76.0936%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.8436%" y="677" width="0.0767%" height="15" fill="rgb(232,161,39)" fg:x="989" fg:w="1"/><text x="76.0936%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.8436%" y="661" width="0.0767%" height="15" fill="rgb(247,34,51)" fg:x="989" fg:w="1"/><text x="76.0936%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (2 samples, 0.15%)</title><rect x="75.9202%" y="709" width="0.1534%" height="15" fill="rgb(225,132,2)" fg:x="990" fg:w="2"/><text x="76.1702%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.15%)</title><rect x="75.9202%" y="693" width="0.1534%" height="15" fill="rgb(209,159,44)" fg:x="990" fg:w="2"/><text x="76.1702%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.15%)</title><rect x="75.9202%" y="677" width="0.1534%" height="15" fill="rgb(251,214,1)" fg:x="990" fg:w="2"/><text x="76.1702%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.15%)</title><rect x="75.9202%" y="661" width="0.1534%" height="15" fill="rgb(247,84,47)" fg:x="990" fg:w="2"/><text x="76.1702%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.15%)</title><rect x="75.9202%" y="645" width="0.1534%" height="15" fill="rgb(240,111,43)" fg:x="990" fg:w="2"/><text x="76.1702%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="75.9969%" y="629" width="0.0767%" height="15" fill="rgb(215,214,35)" fg:x="991" fg:w="1"/><text x="76.2469%" y="639.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="76.0736%" y="661" width="0.0767%" height="15" fill="rgb(248,207,23)" fg:x="992" fg:w="1"/><text x="76.3236%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.0736%" y="645" width="0.0767%" height="15" fill="rgb(214,186,4)" fg:x="992" fg:w="1"/><text x="76.3236%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.0736%" y="629" width="0.0767%" height="15" fill="rgb(220,133,22)" fg:x="992" fg:w="1"/><text x="76.3236%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="76.0736%" y="613" width="0.0767%" height="15" fill="rgb(239,134,19)" fg:x="992" fg:w="1"/><text x="76.3236%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.0736%" y="597" width="0.0767%" height="15" fill="rgb(250,140,9)" fg:x="992" fg:w="1"/><text x="76.3236%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.0736%" y="581" width="0.0767%" height="15" fill="rgb(225,59,14)" fg:x="992" fg:w="1"/><text x="76.3236%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (2 samples, 0.15%)</title><rect x="76.0736%" y="709" width="0.1534%" height="15" fill="rgb(214,152,51)" fg:x="992" fg:w="2"/><text x="76.3236%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.15%)</title><rect x="76.0736%" y="693" width="0.1534%" height="15" fill="rgb(251,227,43)" fg:x="992" fg:w="2"/><text x="76.3236%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.15%)</title><rect x="76.0736%" y="677" width="0.1534%" height="15" fill="rgb(241,96,17)" fg:x="992" fg:w="2"/><text x="76.3236%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="76.1503%" y="661" width="0.0767%" height="15" fill="rgb(234,198,43)" fg:x="993" fg:w="1"/><text x="76.4003%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.1503%" y="645" width="0.0767%" height="15" fill="rgb(220,108,29)" fg:x="993" fg:w="1"/><text x="76.4003%" y="655.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="76.2270%" y="693" width="0.0767%" height="15" fill="rgb(226,163,33)" fg:x="994" fg:w="1"/><text x="76.4770%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="76.2270%" y="677" width="0.0767%" height="15" fill="rgb(205,194,45)" fg:x="994" fg:w="1"/><text x="76.4770%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="76.2270%" y="661" width="0.0767%" height="15" fill="rgb(206,143,44)" fg:x="994" fg:w="1"/><text x="76.4770%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="76.2270%" y="645" width="0.0767%" height="15" fill="rgb(236,136,36)" fg:x="994" fg:w="1"/><text x="76.4770%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="76.2270%" y="629" width="0.0767%" height="15" fill="rgb(249,172,42)" fg:x="994" fg:w="1"/><text x="76.4770%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.2270%" y="613" width="0.0767%" height="15" fill="rgb(216,139,23)" fg:x="994" fg:w="1"/><text x="76.4770%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.2270%" y="597" width="0.0767%" height="15" fill="rgb(207,166,20)" fg:x="994" fg:w="1"/><text x="76.4770%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.2270%" y="581" width="0.0767%" height="15" fill="rgb(210,209,22)" fg:x="994" fg:w="1"/><text x="76.4770%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.2270%" y="565" width="0.0767%" height="15" fill="rgb(232,118,20)" fg:x="994" fg:w="1"/><text x="76.4770%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.2270%" y="549" width="0.0767%" height="15" fill="rgb(238,113,42)" fg:x="994" fg:w="1"/><text x="76.4770%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.2270%" y="533" width="0.0767%" height="15" fill="rgb(231,42,5)" fg:x="994" fg:w="1"/><text x="76.4770%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.2270%" y="517" width="0.0767%" height="15" fill="rgb(243,166,24)" fg:x="994" fg:w="1"/><text x="76.4770%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.2270%" y="501" width="0.0767%" height="15" fill="rgb(237,226,12)" fg:x="994" fg:w="1"/><text x="76.4770%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.2270%" y="485" width="0.0767%" height="15" fill="rgb(229,133,24)" fg:x="994" fg:w="1"/><text x="76.4770%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.2270%" y="469" width="0.0767%" height="15" fill="rgb(238,33,43)" fg:x="994" fg:w="1"/><text x="76.4770%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.2270%" y="453" width="0.0767%" height="15" fill="rgb(227,59,38)" fg:x="994" fg:w="1"/><text x="76.4770%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.2270%" y="437" width="0.0767%" height="15" fill="rgb(230,97,0)" fg:x="994" fg:w="1"/><text x="76.4770%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.2270%" y="421" width="0.0767%" height="15" fill="rgb(250,173,50)" fg:x="994" fg:w="1"/><text x="76.4770%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.2270%" y="405" width="0.0767%" height="15" fill="rgb(240,15,50)" fg:x="994" fg:w="1"/><text x="76.4770%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.2270%" y="389" width="0.0767%" height="15" fill="rgb(221,93,22)" fg:x="994" fg:w="1"/><text x="76.4770%" y="399.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (42 samples, 3.22%)</title><rect x="73.1595%" y="725" width="3.2209%" height="15" fill="rgb(245,180,53)" fg:x="954" fg:w="42"/><text x="73.4095%" y="735.50">plu..</text></g><g><title>plugins_core::tools::set_container (2 samples, 0.15%)</title><rect x="76.2270%" y="709" width="0.1534%" height="15" fill="rgb(231,88,51)" fg:x="994" fg:w="2"/><text x="76.4770%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="76.3037%" y="693" width="0.0767%" height="15" fill="rgb(240,58,21)" fg:x="995" fg:w="1"/><text x="76.5537%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="76.3037%" y="677" width="0.0767%" height="15" fill="rgb(237,21,10)" fg:x="995" fg:w="1"/><text x="76.5537%" y="687.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="76.3804%" y="693" width="0.0767%" height="15" fill="rgb(218,43,11)" fg:x="996" fg:w="1"/><text x="76.6304%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="76.3804%" y="677" width="0.0767%" height="15" fill="rgb(218,221,29)" fg:x="996" fg:w="1"/><text x="76.6304%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="76.3804%" y="661" width="0.0767%" height="15" fill="rgb(214,118,42)" fg:x="996" fg:w="1"/><text x="76.6304%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="76.3804%" y="645" width="0.0767%" height="15" fill="rgb(251,200,26)" fg:x="996" fg:w="1"/><text x="76.6304%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="76.3804%" y="629" width="0.0767%" height="15" fill="rgb(237,101,39)" fg:x="996" fg:w="1"/><text x="76.6304%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="76.3804%" y="613" width="0.0767%" height="15" fill="rgb(251,117,11)" fg:x="996" fg:w="1"/><text x="76.6304%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="76.3804%" y="597" width="0.0767%" height="15" fill="rgb(216,223,23)" fg:x="996" fg:w="1"/><text x="76.6304%" y="607.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="76.3804%" y="581" width="0.0767%" height="15" fill="rgb(251,54,12)" fg:x="996" fg:w="1"/><text x="76.6304%" y="591.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="76.3804%" y="565" width="0.0767%" height="15" fill="rgb(254,176,54)" fg:x="996" fg:w="1"/><text x="76.6304%" y="575.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="76.3804%" y="549" width="0.0767%" height="15" fill="rgb(210,32,8)" fg:x="996" fg:w="1"/><text x="76.6304%" y="559.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.08%)</title><rect x="76.3804%" y="533" width="0.0767%" height="15" fill="rgb(235,52,38)" fg:x="996" fg:w="1"/><text x="76.6304%" y="543.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="76.4571%" y="677" width="0.0767%" height="15" fill="rgb(231,4,44)" fg:x="997" fg:w="1"/><text x="76.7071%" y="687.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.15%)</title><rect x="76.4571%" y="693" width="0.1534%" height="15" fill="rgb(249,2,32)" fg:x="997" fg:w="2"/><text x="76.7071%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="76.5337%" y="677" width="0.0767%" height="15" fill="rgb(224,65,26)" fg:x="998" fg:w="1"/><text x="76.7837%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="76.5337%" y="661" width="0.0767%" height="15" fill="rgb(250,73,40)" fg:x="998" fg:w="1"/><text x="76.7837%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5337%" y="645" width="0.0767%" height="15" fill="rgb(253,177,16)" fg:x="998" fg:w="1"/><text x="76.7837%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.5337%" y="629" width="0.0767%" height="15" fill="rgb(217,32,34)" fg:x="998" fg:w="1"/><text x="76.7837%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.5337%" y="613" width="0.0767%" height="15" fill="rgb(212,7,10)" fg:x="998" fg:w="1"/><text x="76.7837%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.5337%" y="597" width="0.0767%" height="15" fill="rgb(245,89,8)" fg:x="998" fg:w="1"/><text x="76.7837%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.31%)</title><rect x="76.3804%" y="725" width="0.3067%" height="15" fill="rgb(237,16,53)" fg:x="996" fg:w="4"/><text x="76.6304%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.31%)</title><rect x="76.3804%" y="709" width="0.3067%" height="15" fill="rgb(250,204,30)" fg:x="996" fg:w="4"/><text x="76.6304%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="76.6104%" y="693" width="0.0767%" height="15" fill="rgb(208,77,27)" fg:x="999" fg:w="1"/><text x="76.8604%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="76.6104%" y="677" width="0.0767%" height="15" fill="rgb(250,204,28)" fg:x="999" fg:w="1"/><text x="76.8604%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6104%" y="661" width="0.0767%" height="15" fill="rgb(244,63,21)" fg:x="999" fg:w="1"/><text x="76.8604%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.6104%" y="645" width="0.0767%" height="15" fill="rgb(236,85,44)" fg:x="999" fg:w="1"/><text x="76.8604%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.6104%" y="629" width="0.0767%" height="15" fill="rgb(215,98,4)" fg:x="999" fg:w="1"/><text x="76.8604%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.6104%" y="613" width="0.0767%" height="15" fill="rgb(235,38,11)" fg:x="999" fg:w="1"/><text x="76.8604%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="76.6871%" y="693" width="0.0767%" height="15" fill="rgb(254,186,25)" fg:x="1000" fg:w="1"/><text x="76.9371%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.6871%" y="677" width="0.0767%" height="15" fill="rgb(225,55,31)" fg:x="1000" fg:w="1"/><text x="76.9371%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.15%)</title><rect x="76.6871%" y="709" width="0.1534%" height="15" fill="rgb(211,15,21)" fg:x="1000" fg:w="2"/><text x="76.9371%" y="719.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="76.7638%" y="693" width="0.0767%" height="15" fill="rgb(215,187,41)" fg:x="1001" fg:w="1"/><text x="77.0138%" y="703.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="76.7638%" y="677" width="0.0767%" height="15" fill="rgb(248,69,32)" fg:x="1001" fg:w="1"/><text x="77.0138%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.15%)</title><rect x="76.8405%" y="693" width="0.1534%" height="15" fill="rgb(252,102,52)" fg:x="1002" fg:w="2"/><text x="77.0905%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.15%)</title><rect x="76.8405%" y="677" width="0.1534%" height="15" fill="rgb(253,140,32)" fg:x="1002" fg:w="2"/><text x="77.0905%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="76.9172%" y="661" width="0.0767%" height="15" fill="rgb(216,56,42)" fg:x="1003" fg:w="1"/><text x="77.1672%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.15%)</title><rect x="76.9939%" y="661" width="0.1534%" height="15" fill="rgb(216,184,14)" fg:x="1004" fg:w="2"/><text x="77.2439%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="77.0706%" y="645" width="0.0767%" height="15" fill="rgb(237,187,27)" fg:x="1005" fg:w="1"/><text x="77.3206%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="77.0706%" y="629" width="0.0767%" height="15" fill="rgb(219,65,3)" fg:x="1005" fg:w="1"/><text x="77.3206%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="77.0706%" y="613" width="0.0767%" height="15" fill="rgb(245,83,25)" fg:x="1005" fg:w="1"/><text x="77.3206%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1472%" y="629" width="0.0767%" height="15" fill="rgb(214,205,45)" fg:x="1006" fg:w="1"/><text x="77.3972%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.38%)</title><rect x="76.9939%" y="677" width="0.3834%" height="15" fill="rgb(241,20,18)" fg:x="1004" fg:w="5"/><text x="77.2439%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.23%)</title><rect x="77.1472%" y="661" width="0.2301%" height="15" fill="rgb(232,163,23)" fg:x="1006" fg:w="3"/><text x="77.3972%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.23%)</title><rect x="77.1472%" y="645" width="0.2301%" height="15" fill="rgb(214,5,46)" fg:x="1006" fg:w="3"/><text x="77.3972%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.15%)</title><rect x="77.2239%" y="629" width="0.1534%" height="15" fill="rgb(229,78,17)" fg:x="1007" fg:w="2"/><text x="77.4739%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.3006%" y="613" width="0.0767%" height="15" fill="rgb(248,89,10)" fg:x="1008" fg:w="1"/><text x="77.5506%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.3006%" y="597" width="0.0767%" height="15" fill="rgb(248,54,15)" fg:x="1008" fg:w="1"/><text x="77.5506%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.3006%" y="581" width="0.0767%" height="15" fill="rgb(223,116,6)" fg:x="1008" fg:w="1"/><text x="77.5506%" y="591.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (79 samples, 6.06%)</title><rect x="71.3957%" y="741" width="6.0583%" height="15" fill="rgb(205,125,38)" fg:x="931" fg:w="79"/><text x="71.6457%" y="751.50">&lt;tests::..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (10 samples, 0.77%)</title><rect x="76.6871%" y="725" width="0.7669%" height="15" fill="rgb(251,78,38)" fg:x="1000" fg:w="10"/><text x="76.9371%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.61%)</title><rect x="76.8405%" y="709" width="0.6135%" height="15" fill="rgb(253,78,28)" fg:x="1002" fg:w="8"/><text x="77.0905%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.46%)</title><rect x="76.9939%" y="693" width="0.4601%" height="15" fill="rgb(209,120,3)" fg:x="1004" fg:w="6"/><text x="77.2439%" y="703.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="77.3773%" y="677" width="0.0767%" height="15" fill="rgb(238,229,9)" fg:x="1009" fg:w="1"/><text x="77.6273%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="77.4540%" y="741" width="0.0767%" height="15" fill="rgb(253,159,18)" fg:x="1010" fg:w="1"/><text x="77.7040%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.4540%" y="725" width="0.0767%" height="15" fill="rgb(244,42,34)" fg:x="1010" fg:w="1"/><text x="77.7040%" y="735.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="77.5307%" y="725" width="0.0767%" height="15" fill="rgb(224,8,7)" fg:x="1011" fg:w="1"/><text x="77.7807%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="77.5307%" y="709" width="0.0767%" height="15" fill="rgb(210,201,45)" fg:x="1011" fg:w="1"/><text x="77.7807%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="77.5307%" y="693" width="0.0767%" height="15" fill="rgb(252,185,21)" fg:x="1011" fg:w="1"/><text x="77.7807%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="77.5307%" y="677" width="0.0767%" height="15" fill="rgb(223,131,1)" fg:x="1011" fg:w="1"/><text x="77.7807%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="77.5307%" y="661" width="0.0767%" height="15" fill="rgb(245,141,16)" fg:x="1011" fg:w="1"/><text x="77.7807%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="77.5307%" y="645" width="0.0767%" height="15" fill="rgb(229,55,45)" fg:x="1011" fg:w="1"/><text x="77.7807%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="77.5307%" y="629" width="0.0767%" height="15" fill="rgb(208,92,15)" fg:x="1011" fg:w="1"/><text x="77.7807%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="77.5307%" y="613" width="0.0767%" height="15" fill="rgb(234,185,47)" fg:x="1011" fg:w="1"/><text x="77.7807%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="77.5307%" y="597" width="0.0767%" height="15" fill="rgb(253,104,50)" fg:x="1011" fg:w="1"/><text x="77.7807%" y="607.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="77.5307%" y="581" width="0.0767%" height="15" fill="rgb(205,70,7)" fg:x="1011" fg:w="1"/><text x="77.7807%" y="591.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="77.5307%" y="565" width="0.0767%" height="15" fill="rgb(240,178,43)" fg:x="1011" fg:w="1"/><text x="77.7807%" y="575.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="77.5307%" y="549" width="0.0767%" height="15" fill="rgb(214,112,2)" fg:x="1011" fg:w="1"/><text x="77.7807%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.6074%" y="693" width="0.0767%" height="15" fill="rgb(206,46,17)" fg:x="1012" fg:w="1"/><text x="77.8574%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.6074%" y="677" width="0.0767%" height="15" fill="rgb(225,220,16)" fg:x="1012" fg:w="1"/><text x="77.8574%" y="687.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.6840%" y="693" width="0.0767%" height="15" fill="rgb(238,65,40)" fg:x="1013" fg:w="1"/><text x="77.9340%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="77.6840%" y="677" width="0.0767%" height="15" fill="rgb(230,151,21)" fg:x="1013" fg:w="1"/><text x="77.9340%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.6840%" y="661" width="0.0767%" height="15" fill="rgb(218,58,49)" fg:x="1013" fg:w="1"/><text x="77.9340%" y="671.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.15%)</title><rect x="77.7607%" y="629" width="0.1534%" height="15" fill="rgb(219,179,14)" fg:x="1014" fg:w="2"/><text x="78.0107%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.15%)</title><rect x="77.7607%" y="613" width="0.1534%" height="15" fill="rgb(223,72,1)" fg:x="1014" fg:w="2"/><text x="78.0107%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.8374%" y="597" width="0.0767%" height="15" fill="rgb(238,126,10)" fg:x="1015" fg:w="1"/><text x="78.0874%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.8374%" y="581" width="0.0767%" height="15" fill="rgb(224,206,38)" fg:x="1015" fg:w="1"/><text x="78.0874%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="77.8374%" y="565" width="0.0767%" height="15" fill="rgb(212,201,54)" fg:x="1015" fg:w="1"/><text x="78.0874%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.9141%" y="613" width="0.0767%" height="15" fill="rgb(218,154,48)" fg:x="1016" fg:w="1"/><text x="78.1641%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.9141%" y="597" width="0.0767%" height="15" fill="rgb(232,93,24)" fg:x="1016" fg:w="1"/><text x="78.1641%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.9141%" y="581" width="0.0767%" height="15" fill="rgb(245,30,21)" fg:x="1016" fg:w="1"/><text x="78.1641%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.9141%" y="565" width="0.0767%" height="15" fill="rgb(242,148,29)" fg:x="1016" fg:w="1"/><text x="78.1641%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.9141%" y="549" width="0.0767%" height="15" fill="rgb(244,153,54)" fg:x="1016" fg:w="1"/><text x="78.1641%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.23%)</title><rect x="77.9908%" y="597" width="0.2301%" height="15" fill="rgb(252,87,22)" fg:x="1017" fg:w="3"/><text x="78.2408%" y="607.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.23%)</title><rect x="77.9908%" y="581" width="0.2301%" height="15" fill="rgb(210,51,29)" fg:x="1017" fg:w="3"/><text x="78.2408%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.15%)</title><rect x="78.0675%" y="565" width="0.1534%" height="15" fill="rgb(242,136,47)" fg:x="1018" fg:w="2"/><text x="78.3175%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.15%)</title><rect x="78.0675%" y="549" width="0.1534%" height="15" fill="rgb(238,68,4)" fg:x="1018" fg:w="2"/><text x="78.3175%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.2209%" y="581" width="0.0767%" height="15" fill="rgb(242,161,30)" fg:x="1020" fg:w="1"/><text x="78.4709%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.2209%" y="565" width="0.0767%" height="15" fill="rgb(218,58,44)" fg:x="1020" fg:w="1"/><text x="78.4709%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.15%)</title><rect x="78.2975%" y="565" width="0.1534%" height="15" fill="rgb(252,125,32)" fg:x="1021" fg:w="2"/><text x="78.5475%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.15%)</title><rect x="78.2975%" y="549" width="0.1534%" height="15" fill="rgb(219,178,0)" fg:x="1021" fg:w="2"/><text x="78.5475%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.15%)</title><rect x="78.2975%" y="533" width="0.1534%" height="15" fill="rgb(213,152,7)" fg:x="1021" fg:w="2"/><text x="78.5475%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.15%)</title><rect x="78.2975%" y="517" width="0.1534%" height="15" fill="rgb(249,109,34)" fg:x="1021" fg:w="2"/><text x="78.5475%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.15%)</title><rect x="78.2975%" y="501" width="0.1534%" height="15" fill="rgb(232,96,21)" fg:x="1021" fg:w="2"/><text x="78.5475%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.15%)</title><rect x="78.2975%" y="485" width="0.1534%" height="15" fill="rgb(228,27,39)" fg:x="1021" fg:w="2"/><text x="78.5475%" y="495.50"></text></g><g><title>realloc (2 samples, 0.15%)</title><rect x="78.2975%" y="469" width="0.1534%" height="15" fill="rgb(211,182,52)" fg:x="1021" fg:w="2"/><text x="78.5475%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.31%)</title><rect x="78.2209%" y="597" width="0.3067%" height="15" fill="rgb(234,178,38)" fg:x="1020" fg:w="4"/><text x="78.4709%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="78.2975%" y="581" width="0.2301%" height="15" fill="rgb(221,111,3)" fg:x="1021" fg:w="3"/><text x="78.5475%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.4509%" y="565" width="0.0767%" height="15" fill="rgb(228,175,21)" fg:x="1023" fg:w="1"/><text x="78.7009%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.4509%" y="549" width="0.0767%" height="15" fill="rgb(228,174,43)" fg:x="1023" fg:w="1"/><text x="78.7009%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.84%)</title><rect x="77.7607%" y="645" width="0.8436%" height="15" fill="rgb(211,191,0)" fg:x="1014" fg:w="11"/><text x="78.0107%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.69%)</title><rect x="77.9141%" y="629" width="0.6902%" height="15" fill="rgb(253,117,3)" fg:x="1016" fg:w="9"/><text x="78.1641%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.61%)</title><rect x="77.9908%" y="613" width="0.6135%" height="15" fill="rgb(241,127,19)" fg:x="1017" fg:w="8"/><text x="78.2408%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.5276%" y="597" width="0.0767%" height="15" fill="rgb(218,103,12)" fg:x="1024" fg:w="1"/><text x="78.7776%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.15%)</title><rect x="78.6043%" y="597" width="0.1534%" height="15" fill="rgb(236,214,43)" fg:x="1025" fg:w="2"/><text x="78.8543%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.23%)</title><rect x="78.6043%" y="645" width="0.2301%" height="15" fill="rgb(244,144,19)" fg:x="1025" fg:w="3"/><text x="78.8543%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.23%)</title><rect x="78.6043%" y="629" width="0.2301%" height="15" fill="rgb(246,188,10)" fg:x="1025" fg:w="3"/><text x="78.8543%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.23%)</title><rect x="78.6043%" y="613" width="0.2301%" height="15" fill="rgb(212,193,33)" fg:x="1025" fg:w="3"/><text x="78.8543%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.7577%" y="597" width="0.0767%" height="15" fill="rgb(241,51,29)" fg:x="1027" fg:w="1"/><text x="79.0077%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.7577%" y="581" width="0.0767%" height="15" fill="rgb(211,58,19)" fg:x="1027" fg:w="1"/><text x="79.0077%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="78.7577%" y="565" width="0.0767%" height="15" fill="rgb(229,111,26)" fg:x="1027" fg:w="1"/><text x="79.0077%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.7577%" y="549" width="0.0767%" height="15" fill="rgb(213,115,40)" fg:x="1027" fg:w="1"/><text x="79.0077%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.7577%" y="533" width="0.0767%" height="15" fill="rgb(209,56,44)" fg:x="1027" fg:w="1"/><text x="79.0077%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.7577%" y="517" width="0.0767%" height="15" fill="rgb(230,108,32)" fg:x="1027" fg:w="1"/><text x="79.0077%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.7577%" y="501" width="0.0767%" height="15" fill="rgb(216,165,31)" fg:x="1027" fg:w="1"/><text x="79.0077%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.9110%" y="613" width="0.0767%" height="15" fill="rgb(218,122,21)" fg:x="1029" fg:w="1"/><text x="79.1610%" y="623.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.23%)</title><rect x="78.8344%" y="629" width="0.2301%" height="15" fill="rgb(223,224,47)" fg:x="1028" fg:w="3"/><text x="79.0844%" y="639.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="78.9877%" y="613" width="0.0767%" height="15" fill="rgb(238,102,44)" fg:x="1030" fg:w="1"/><text x="79.2377%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="78.9877%" y="597" width="0.0767%" height="15" fill="rgb(236,46,40)" fg:x="1030" fg:w="1"/><text x="79.2377%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="78.9877%" y="581" width="0.0767%" height="15" fill="rgb(247,202,50)" fg:x="1030" fg:w="1"/><text x="79.2377%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.0644%" y="597" width="0.0767%" height="15" fill="rgb(209,99,20)" fg:x="1031" fg:w="1"/><text x="79.3144%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="79.0644%" y="581" width="0.0767%" height="15" fill="rgb(252,27,34)" fg:x="1031" fg:w="1"/><text x="79.3144%" y="591.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="79.1411%" y="597" width="0.0767%" height="15" fill="rgb(215,206,23)" fg:x="1032" fg:w="1"/><text x="79.3911%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.1411%" y="581" width="0.0767%" height="15" fill="rgb(212,135,36)" fg:x="1032" fg:w="1"/><text x="79.3911%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="79.2178%" y="597" width="0.0767%" height="15" fill="rgb(240,189,1)" fg:x="1033" fg:w="1"/><text x="79.4678%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.2178%" y="581" width="0.0767%" height="15" fill="rgb(242,56,20)" fg:x="1033" fg:w="1"/><text x="79.4678%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.4479%" y="549" width="0.0767%" height="15" fill="rgb(247,132,33)" fg:x="1036" fg:w="1"/><text x="79.6979%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.4479%" y="533" width="0.0767%" height="15" fill="rgb(208,149,11)" fg:x="1036" fg:w="1"/><text x="79.6979%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="79.5245%" y="549" width="0.0767%" height="15" fill="rgb(211,33,11)" fg:x="1037" fg:w="1"/><text x="79.7745%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.5245%" y="533" width="0.0767%" height="15" fill="rgb(221,29,38)" fg:x="1037" fg:w="1"/><text x="79.7745%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.5245%" y="517" width="0.0767%" height="15" fill="rgb(206,182,49)" fg:x="1037" fg:w="1"/><text x="79.7745%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.5245%" y="501" width="0.0767%" height="15" fill="rgb(216,140,1)" fg:x="1037" fg:w="1"/><text x="79.7745%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="79.7546%" y="501" width="0.0767%" height="15" fill="rgb(232,57,40)" fg:x="1040" fg:w="1"/><text x="80.0046%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.23%)</title><rect x="79.6779%" y="533" width="0.2301%" height="15" fill="rgb(224,186,18)" fg:x="1039" fg:w="3"/><text x="79.9279%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.23%)</title><rect x="79.6779%" y="517" width="0.2301%" height="15" fill="rgb(215,121,11)" fg:x="1039" fg:w="3"/><text x="79.9279%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.8313%" y="501" width="0.0767%" height="15" fill="rgb(245,147,10)" fg:x="1041" fg:w="1"/><text x="80.0813%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.54%)</title><rect x="79.4479%" y="565" width="0.5368%" height="15" fill="rgb(238,153,13)" fg:x="1036" fg:w="7"/><text x="79.6979%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.38%)</title><rect x="79.6012%" y="549" width="0.3834%" height="15" fill="rgb(233,108,0)" fg:x="1038" fg:w="5"/><text x="79.8512%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.9080%" y="533" width="0.0767%" height="15" fill="rgb(212,157,17)" fg:x="1042" fg:w="1"/><text x="80.1580%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.69%)</title><rect x="79.4479%" y="581" width="0.6902%" height="15" fill="rgb(225,213,38)" fg:x="1036" fg:w="9"/><text x="79.6979%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.15%)</title><rect x="79.9847%" y="565" width="0.1534%" height="15" fill="rgb(248,16,11)" fg:x="1043" fg:w="2"/><text x="80.2347%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.0613%" y="549" width="0.0767%" height="15" fill="rgb(241,33,4)" fg:x="1044" fg:w="1"/><text x="80.3113%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.1380%" y="581" width="0.0767%" height="15" fill="rgb(222,26,43)" fg:x="1045" fg:w="1"/><text x="80.3880%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (16 samples, 1.23%)</title><rect x="79.0644%" y="629" width="1.2270%" height="15" fill="rgb(243,29,36)" fg:x="1031" fg:w="16"/><text x="79.3144%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.23%)</title><rect x="79.0644%" y="613" width="1.2270%" height="15" fill="rgb(241,9,27)" fg:x="1031" fg:w="16"/><text x="79.3144%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (13 samples, 1.00%)</title><rect x="79.2945%" y="597" width="0.9969%" height="15" fill="rgb(205,117,26)" fg:x="1034" fg:w="13"/><text x="79.5445%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.2147%" y="581" width="0.0767%" height="15" fill="rgb(209,80,39)" fg:x="1046" fg:w="1"/><text x="80.4647%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="80.2147%" y="565" width="0.0767%" height="15" fill="rgb(239,155,6)" fg:x="1046" fg:w="1"/><text x="80.4647%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="80.4448%" y="485" width="0.0767%" height="15" fill="rgb(212,104,12)" fg:x="1049" fg:w="1"/><text x="80.6948%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.4448%" y="469" width="0.0767%" height="15" fill="rgb(234,204,3)" fg:x="1049" fg:w="1"/><text x="80.6948%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="80.4448%" y="453" width="0.0767%" height="15" fill="rgb(251,218,7)" fg:x="1049" fg:w="1"/><text x="80.6948%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="80.4448%" y="437" width="0.0767%" height="15" fill="rgb(221,81,32)" fg:x="1049" fg:w="1"/><text x="80.6948%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="80.4448%" y="501" width="0.1534%" height="15" fill="rgb(214,152,26)" fg:x="1049" fg:w="2"/><text x="80.6948%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.5215%" y="485" width="0.0767%" height="15" fill="rgb(223,22,3)" fg:x="1050" fg:w="1"/><text x="80.7715%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="80.5215%" y="469" width="0.0767%" height="15" fill="rgb(207,174,7)" fg:x="1050" fg:w="1"/><text x="80.7715%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.5215%" y="453" width="0.0767%" height="15" fill="rgb(224,19,52)" fg:x="1050" fg:w="1"/><text x="80.7715%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="80.5215%" y="437" width="0.0767%" height="15" fill="rgb(228,24,14)" fg:x="1050" fg:w="1"/><text x="80.7715%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="80.5215%" y="421" width="0.0767%" height="15" fill="rgb(230,153,43)" fg:x="1050" fg:w="1"/><text x="80.7715%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.23%)</title><rect x="80.4448%" y="533" width="0.2301%" height="15" fill="rgb(231,106,12)" fg:x="1049" fg:w="3"/><text x="80.6948%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="80.4448%" y="517" width="0.2301%" height="15" fill="rgb(215,92,2)" fg:x="1049" fg:w="3"/><text x="80.6948%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="80.5982%" y="501" width="0.0767%" height="15" fill="rgb(249,143,25)" fg:x="1051" fg:w="1"/><text x="80.8482%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.5982%" y="485" width="0.0767%" height="15" fill="rgb(252,7,35)" fg:x="1051" fg:w="1"/><text x="80.8482%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.31%)</title><rect x="80.4448%" y="549" width="0.3067%" height="15" fill="rgb(216,69,40)" fg:x="1049" fg:w="4"/><text x="80.6948%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.6748%" y="533" width="0.0767%" height="15" fill="rgb(240,36,33)" fg:x="1052" fg:w="1"/><text x="80.9248%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.6748%" y="517" width="0.0767%" height="15" fill="rgb(231,128,14)" fg:x="1052" fg:w="1"/><text x="80.9248%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.46%)</title><rect x="80.3681%" y="565" width="0.4601%" height="15" fill="rgb(245,143,14)" fg:x="1048" fg:w="6"/><text x="80.6181%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.7515%" y="549" width="0.0767%" height="15" fill="rgb(222,130,28)" fg:x="1053" fg:w="1"/><text x="81.0015%" y="559.50"></text></g><g><title>engine::session::state::State::close (43 samples, 3.30%)</title><rect x="77.6074%" y="725" width="3.2975%" height="15" fill="rgb(212,10,48)" fg:x="1012" fg:w="43"/><text x="77.8574%" y="735.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (43 samples, 3.30%)</title><rect x="77.6074%" y="709" width="3.2975%" height="15" fill="rgb(254,118,45)" fg:x="1012" fg:w="43"/><text x="77.8574%" y="719.50">eng..</text></g><g><title>core::iter::adapters::try_process (41 samples, 3.14%)</title><rect x="77.7607%" y="693" width="3.1442%" height="15" fill="rgb(228,6,45)" fg:x="1014" fg:w="41"/><text x="78.0107%" y="703.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (41 samples, 3.14%)</title><rect x="77.7607%" y="677" width="3.1442%" height="15" fill="rgb(241,18,35)" fg:x="1014" fg:w="41"/><text x="78.0107%" y="687.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (41 samples, 3.14%)</title><rect x="77.7607%" y="661" width="3.1442%" height="15" fill="rgb(227,214,53)" fg:x="1014" fg:w="41"/><text x="78.0107%" y="671.50">eng..</text></g><g><title>kernel::model::any_entity_changes (27 samples, 2.07%)</title><rect x="78.8344%" y="645" width="2.0706%" height="15" fill="rgb(224,107,51)" fg:x="1028" fg:w="27"/><text x="79.0844%" y="655.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.61%)</title><rect x="80.2914%" y="629" width="0.6135%" height="15" fill="rgb(248,60,28)" fg:x="1047" fg:w="8"/><text x="80.5414%" y="639.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.61%)</title><rect x="80.2914%" y="613" width="0.6135%" height="15" fill="rgb(249,101,23)" fg:x="1047" fg:w="8"/><text x="80.5414%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.61%)</title><rect x="80.2914%" y="597" width="0.6135%" height="15" fill="rgb(228,51,19)" fg:x="1047" fg:w="8"/><text x="80.5414%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.61%)</title><rect x="80.2914%" y="581" width="0.6135%" height="15" fill="rgb(213,20,6)" fg:x="1047" fg:w="8"/><text x="80.5414%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.8282%" y="565" width="0.0767%" height="15" fill="rgb(212,124,10)" fg:x="1054" fg:w="1"/><text x="81.0782%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.8282%" y="549" width="0.0767%" height="15" fill="rgb(248,3,40)" fg:x="1054" fg:w="1"/><text x="81.0782%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.8282%" y="533" width="0.0767%" height="15" fill="rgb(223,178,23)" fg:x="1054" fg:w="1"/><text x="81.0782%" y="543.50"></text></g><g><title>engine::session::Session::close (46 samples, 3.53%)</title><rect x="77.5307%" y="741" width="3.5276%" height="15" fill="rgb(240,132,45)" fg:x="1011" fg:w="46"/><text x="77.7807%" y="751.50">eng..</text></g><g><title>kernel::plugins::SessionPlugins::stop (2 samples, 0.15%)</title><rect x="80.9049%" y="725" width="0.1534%" height="15" fill="rgb(245,164,36)" fg:x="1055" fg:w="2"/><text x="81.1549%" y="735.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="81.0583%" y="709" width="0.0767%" height="15" fill="rgb(231,188,53)" fg:x="1057" fg:w="1"/><text x="81.3083%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="81.0583%" y="693" width="0.0767%" height="15" fill="rgb(237,198,39)" fg:x="1057" fg:w="1"/><text x="81.3083%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.2117%" y="677" width="0.0767%" height="15" fill="rgb(223,120,35)" fg:x="1059" fg:w="1"/><text x="81.4617%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.2117%" y="661" width="0.0767%" height="15" fill="rgb(253,107,49)" fg:x="1059" fg:w="1"/><text x="81.4617%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.2117%" y="645" width="0.0767%" height="15" fill="rgb(216,44,31)" fg:x="1059" fg:w="1"/><text x="81.4617%" y="655.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="81.2883%" y="677" width="0.0767%" height="15" fill="rgb(253,87,21)" fg:x="1060" fg:w="1"/><text x="81.5383%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="81.2883%" y="661" width="0.0767%" height="15" fill="rgb(226,18,2)" fg:x="1060" fg:w="1"/><text x="81.5383%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="81.2883%" y="645" width="0.0767%" height="15" fill="rgb(216,8,46)" fg:x="1060" fg:w="1"/><text x="81.5383%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.3650%" y="661" width="0.0767%" height="15" fill="rgb(226,140,39)" fg:x="1061" fg:w="1"/><text x="81.6150%" y="671.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (4 samples, 0.31%)</title><rect x="81.3650%" y="677" width="0.3067%" height="15" fill="rgb(221,194,54)" fg:x="1061" fg:w="4"/><text x="81.6150%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (3 samples, 0.23%)</title><rect x="81.4417%" y="661" width="0.2301%" height="15" fill="rgb(213,92,11)" fg:x="1062" fg:w="3"/><text x="81.6917%" y="671.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (3 samples, 0.23%)</title><rect x="81.4417%" y="645" width="0.2301%" height="15" fill="rgb(229,162,46)" fg:x="1062" fg:w="3"/><text x="81.6917%" y="655.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (2 samples, 0.15%)</title><rect x="81.5184%" y="629" width="0.1534%" height="15" fill="rgb(214,111,36)" fg:x="1063" fg:w="2"/><text x="81.7684%" y="639.50"></text></g><g><title>tracing_core::subscriber::Subscriber::register_callsite (1 samples, 0.08%)</title><rect x="81.5951%" y="613" width="0.0767%" height="15" fill="rgb(207,6,21)" fg:x="1064" fg:w="1"/><text x="81.8451%" y="623.50"></text></g><g><title>&lt;engine::session::logs::SessionSubscriber as tracing_core::subscriber::Subscriber&gt;::enabled (1 samples, 0.08%)</title><rect x="81.5951%" y="597" width="0.0767%" height="15" fill="rgb(213,127,38)" fg:x="1064" fg:w="1"/><text x="81.8451%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.6718%" y="501" width="0.0767%" height="15" fill="rgb(238,118,32)" fg:x="1065" fg:w="1"/><text x="81.9218%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.6718%" y="485" width="0.0767%" height="15" fill="rgb(240,139,39)" fg:x="1065" fg:w="1"/><text x="81.9218%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.7485%" y="453" width="0.0767%" height="15" fill="rgb(235,10,37)" fg:x="1066" fg:w="1"/><text x="81.9985%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.23%)</title><rect x="81.7485%" y="501" width="0.2301%" height="15" fill="rgb(249,171,38)" fg:x="1066" fg:w="3"/><text x="81.9985%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.23%)</title><rect x="81.7485%" y="485" width="0.2301%" height="15" fill="rgb(242,144,32)" fg:x="1066" fg:w="3"/><text x="81.9985%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="81.7485%" y="469" width="0.2301%" height="15" fill="rgb(217,117,21)" fg:x="1066" fg:w="3"/><text x="81.9985%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.15%)</title><rect x="81.8252%" y="453" width="0.1534%" height="15" fill="rgb(249,87,1)" fg:x="1067" fg:w="2"/><text x="82.0752%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="81.8252%" y="437" width="0.1534%" height="15" fill="rgb(248,196,48)" fg:x="1067" fg:w="2"/><text x="82.0752%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.15%)</title><rect x="81.8252%" y="421" width="0.1534%" height="15" fill="rgb(251,206,33)" fg:x="1067" fg:w="2"/><text x="82.0752%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="81.8252%" y="405" width="0.1534%" height="15" fill="rgb(232,141,28)" fg:x="1067" fg:w="2"/><text x="82.0752%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="81.8252%" y="389" width="0.1534%" height="15" fill="rgb(209,167,14)" fg:x="1067" fg:w="2"/><text x="82.0752%" y="399.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="81.9018%" y="373" width="0.0767%" height="15" fill="rgb(225,11,50)" fg:x="1068" fg:w="1"/><text x="82.1518%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="81.9018%" y="357" width="0.0767%" height="15" fill="rgb(209,50,20)" fg:x="1068" fg:w="1"/><text x="82.1518%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="81.9018%" y="341" width="0.0767%" height="15" fill="rgb(212,17,46)" fg:x="1068" fg:w="1"/><text x="82.1518%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="81.9018%" y="325" width="0.0767%" height="15" fill="rgb(216,101,39)" fg:x="1068" fg:w="1"/><text x="82.1518%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="81.9018%" y="309" width="0.0767%" height="15" fill="rgb(212,228,48)" fg:x="1068" fg:w="1"/><text x="82.1518%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="81.9018%" y="293" width="0.0767%" height="15" fill="rgb(250,6,50)" fg:x="1068" fg:w="1"/><text x="82.1518%" y="303.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="81.9018%" y="277" width="0.0767%" height="15" fill="rgb(250,160,48)" fg:x="1068" fg:w="1"/><text x="82.1518%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="81.9018%" y="261" width="0.0767%" height="15" fill="rgb(244,216,33)" fg:x="1068" fg:w="1"/><text x="82.1518%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="81.9018%" y="245" width="0.0767%" height="15" fill="rgb(207,157,5)" fg:x="1068" fg:w="1"/><text x="82.1518%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="81.9785%" y="405" width="0.0767%" height="15" fill="rgb(228,199,8)" fg:x="1069" fg:w="1"/><text x="82.2285%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="81.9785%" y="389" width="0.0767%" height="15" fill="rgb(227,80,20)" fg:x="1069" fg:w="1"/><text x="82.2285%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="81.9785%" y="373" width="0.0767%" height="15" fill="rgb(222,9,33)" fg:x="1069" fg:w="1"/><text x="82.2285%" y="383.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="81.9785%" y="357" width="0.0767%" height="15" fill="rgb(239,44,28)" fg:x="1069" fg:w="1"/><text x="82.2285%" y="367.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (6 samples, 0.46%)</title><rect x="81.6718%" y="597" width="0.4601%" height="15" fill="rgb(249,187,43)" fg:x="1065" fg:w="6"/><text x="81.9218%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (6 samples, 0.46%)</title><rect x="81.6718%" y="581" width="0.4601%" height="15" fill="rgb(216,141,28)" fg:x="1065" fg:w="6"/><text x="81.9218%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.46%)</title><rect x="81.6718%" y="565" width="0.4601%" height="15" fill="rgb(230,154,53)" fg:x="1065" fg:w="6"/><text x="81.9218%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.46%)</title><rect x="81.6718%" y="549" width="0.4601%" height="15" fill="rgb(227,82,4)" fg:x="1065" fg:w="6"/><text x="81.9218%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.46%)</title><rect x="81.6718%" y="533" width="0.4601%" height="15" fill="rgb(220,107,16)" fg:x="1065" fg:w="6"/><text x="81.9218%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.46%)</title><rect x="81.6718%" y="517" width="0.4601%" height="15" fill="rgb(207,187,2)" fg:x="1065" fg:w="6"/><text x="81.9218%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.15%)</title><rect x="81.9785%" y="501" width="0.1534%" height="15" fill="rgb(210,162,52)" fg:x="1069" fg:w="2"/><text x="82.2285%" y="511.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.15%)</title><rect x="81.9785%" y="485" width="0.1534%" height="15" fill="rgb(217,216,49)" fg:x="1069" fg:w="2"/><text x="82.2285%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="81.9785%" y="469" width="0.1534%" height="15" fill="rgb(218,146,49)" fg:x="1069" fg:w="2"/><text x="82.2285%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="81.9785%" y="453" width="0.1534%" height="15" fill="rgb(216,55,40)" fg:x="1069" fg:w="2"/><text x="82.2285%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="81.9785%" y="437" width="0.1534%" height="15" fill="rgb(208,196,21)" fg:x="1069" fg:w="2"/><text x="82.2285%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="81.9785%" y="421" width="0.1534%" height="15" fill="rgb(242,117,42)" fg:x="1069" fg:w="2"/><text x="82.2285%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="82.0552%" y="405" width="0.0767%" height="15" fill="rgb(210,11,23)" fg:x="1070" fg:w="1"/><text x="82.3052%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.0552%" y="389" width="0.0767%" height="15" fill="rgb(217,110,2)" fg:x="1070" fg:w="1"/><text x="82.3052%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="82.2086%" y="533" width="0.0767%" height="15" fill="rgb(229,77,54)" fg:x="1072" fg:w="1"/><text x="82.4586%" y="543.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (1 samples, 0.08%)</title><rect x="82.5153%" y="389" width="0.0767%" height="15" fill="rgb(218,53,16)" fg:x="1076" fg:w="1"/><text x="82.7653%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.5153%" y="373" width="0.0767%" height="15" fill="rgb(215,38,13)" fg:x="1076" fg:w="1"/><text x="82.7653%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="82.5153%" y="357" width="0.0767%" height="15" fill="rgb(235,42,18)" fg:x="1076" fg:w="1"/><text x="82.7653%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.5153%" y="341" width="0.0767%" height="15" fill="rgb(219,66,54)" fg:x="1076" fg:w="1"/><text x="82.7653%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.5153%" y="325" width="0.0767%" height="15" fill="rgb(222,205,4)" fg:x="1076" fg:w="1"/><text x="82.7653%" y="335.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (2 samples, 0.15%)</title><rect x="82.5153%" y="421" width="0.1534%" height="15" fill="rgb(227,213,46)" fg:x="1076" fg:w="2"/><text x="82.7653%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.15%)</title><rect x="82.5153%" y="405" width="0.1534%" height="15" fill="rgb(250,145,42)" fg:x="1076" fg:w="2"/><text x="82.7653%" y="415.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="82.5920%" y="389" width="0.0767%" height="15" fill="rgb(219,15,2)" fg:x="1077" fg:w="1"/><text x="82.8420%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="82.5920%" y="373" width="0.0767%" height="15" fill="rgb(231,181,52)" fg:x="1077" fg:w="1"/><text x="82.8420%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.5920%" y="357" width="0.0767%" height="15" fill="rgb(235,1,42)" fg:x="1077" fg:w="1"/><text x="82.8420%" y="367.50"></text></g><g><title>kernel::surround::Surroundings::unpack (1 samples, 0.08%)</title><rect x="82.6687%" y="421" width="0.0767%" height="15" fill="rgb(249,88,27)" fg:x="1078" fg:w="1"/><text x="82.9187%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.15%)</title><rect x="82.8988%" y="357" width="0.1534%" height="15" fill="rgb(235,145,16)" fg:x="1081" fg:w="2"/><text x="83.1488%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.15%)</title><rect x="82.8988%" y="341" width="0.1534%" height="15" fill="rgb(237,114,19)" fg:x="1081" fg:w="2"/><text x="83.1488%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.9755%" y="325" width="0.0767%" height="15" fill="rgb(238,51,50)" fg:x="1082" fg:w="1"/><text x="83.2255%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.0521%" y="293" width="0.0767%" height="15" fill="rgb(205,194,25)" fg:x="1083" fg:w="1"/><text x="83.3021%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.0521%" y="277" width="0.0767%" height="15" fill="rgb(215,203,17)" fg:x="1083" fg:w="1"/><text x="83.3021%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.31%)</title><rect x="82.8988%" y="389" width="0.3067%" height="15" fill="rgb(233,112,49)" fg:x="1081" fg:w="4"/><text x="83.1488%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.31%)</title><rect x="82.8988%" y="373" width="0.3067%" height="15" fill="rgb(241,130,26)" fg:x="1081" fg:w="4"/><text x="83.1488%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="83.0521%" y="357" width="0.1534%" height="15" fill="rgb(252,223,19)" fg:x="1083" fg:w="2"/><text x="83.3021%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="83.0521%" y="341" width="0.1534%" height="15" fill="rgb(211,95,25)" fg:x="1083" fg:w="2"/><text x="83.3021%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.15%)</title><rect x="83.0521%" y="325" width="0.1534%" height="15" fill="rgb(251,182,27)" fg:x="1083" fg:w="2"/><text x="83.3021%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="83.0521%" y="309" width="0.1534%" height="15" fill="rgb(238,24,4)" fg:x="1083" fg:w="2"/><text x="83.3021%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.1288%" y="293" width="0.0767%" height="15" fill="rgb(224,220,25)" fg:x="1084" fg:w="1"/><text x="83.3788%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="83.2055%" y="389" width="0.0767%" height="15" fill="rgb(239,133,26)" fg:x="1085" fg:w="1"/><text x="83.4555%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.2055%" y="373" width="0.0767%" height="15" fill="rgb(211,94,48)" fg:x="1085" fg:w="1"/><text x="83.4555%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="83.2055%" y="357" width="0.0767%" height="15" fill="rgb(239,87,6)" fg:x="1085" fg:w="1"/><text x="83.4555%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.2822%" y="357" width="0.0767%" height="15" fill="rgb(227,62,0)" fg:x="1086" fg:w="1"/><text x="83.5322%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.15%)</title><rect x="83.2822%" y="389" width="0.1534%" height="15" fill="rgb(211,226,4)" fg:x="1086" fg:w="2"/><text x="83.5322%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.15%)</title><rect x="83.2822%" y="373" width="0.1534%" height="15" fill="rgb(253,38,52)" fg:x="1086" fg:w="2"/><text x="83.5322%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.3589%" y="357" width="0.0767%" height="15" fill="rgb(229,126,40)" fg:x="1087" fg:w="1"/><text x="83.6089%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.3589%" y="341" width="0.0767%" height="15" fill="rgb(229,165,44)" fg:x="1087" fg:w="1"/><text x="83.6089%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="83.3589%" y="325" width="0.0767%" height="15" fill="rgb(247,95,47)" fg:x="1087" fg:w="1"/><text x="83.6089%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.3589%" y="309" width="0.0767%" height="15" fill="rgb(216,140,30)" fg:x="1087" fg:w="1"/><text x="83.6089%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.3589%" y="293" width="0.0767%" height="15" fill="rgb(246,214,8)" fg:x="1087" fg:w="1"/><text x="83.6089%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.3589%" y="277" width="0.0767%" height="15" fill="rgb(227,224,15)" fg:x="1087" fg:w="1"/><text x="83.6089%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.5123%" y="309" width="0.0767%" height="15" fill="rgb(233,175,4)" fg:x="1089" fg:w="1"/><text x="83.7623%" y="319.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="83.5890%" y="229" width="0.0767%" height="15" fill="rgb(221,66,45)" fg:x="1090" fg:w="1"/><text x="83.8390%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.15%)</title><rect x="83.5890%" y="309" width="0.1534%" height="15" fill="rgb(221,178,18)" fg:x="1090" fg:w="2"/><text x="83.8390%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.15%)</title><rect x="83.5890%" y="293" width="0.1534%" height="15" fill="rgb(213,81,29)" fg:x="1090" fg:w="2"/><text x="83.8390%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.15%)</title><rect x="83.5890%" y="277" width="0.1534%" height="15" fill="rgb(220,89,49)" fg:x="1090" fg:w="2"/><text x="83.8390%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.15%)</title><rect x="83.5890%" y="261" width="0.1534%" height="15" fill="rgb(227,60,33)" fg:x="1090" fg:w="2"/><text x="83.8390%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.15%)</title><rect x="83.5890%" y="245" width="0.1534%" height="15" fill="rgb(205,113,12)" fg:x="1090" fg:w="2"/><text x="83.8390%" y="255.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="83.6656%" y="229" width="0.0767%" height="15" fill="rgb(211,32,1)" fg:x="1091" fg:w="1"/><text x="83.9156%" y="239.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (1 samples, 0.08%)</title><rect x="83.7423%" y="261" width="0.0767%" height="15" fill="rgb(246,2,12)" fg:x="1092" fg:w="1"/><text x="83.9923%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.38%)</title><rect x="83.8190%" y="245" width="0.3834%" height="15" fill="rgb(243,37,27)" fg:x="1093" fg:w="5"/><text x="84.0690%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.38%)</title><rect x="83.8190%" y="229" width="0.3834%" height="15" fill="rgb(248,211,31)" fg:x="1093" fg:w="5"/><text x="84.0690%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="84.2791%" y="229" width="0.0767%" height="15" fill="rgb(242,146,47)" fg:x="1099" fg:w="1"/><text x="84.5291%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.23%)</title><rect x="84.2025%" y="245" width="0.2301%" height="15" fill="rgb(206,70,20)" fg:x="1098" fg:w="3"/><text x="84.4525%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="84.3558%" y="229" width="0.0767%" height="15" fill="rgb(215,10,51)" fg:x="1100" fg:w="1"/><text x="84.6058%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="84.3558%" y="213" width="0.0767%" height="15" fill="rgb(243,178,53)" fg:x="1100" fg:w="1"/><text x="84.6058%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="84.3558%" y="197" width="0.0767%" height="15" fill="rgb(233,221,20)" fg:x="1100" fg:w="1"/><text x="84.6058%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.3558%" y="181" width="0.0767%" height="15" fill="rgb(218,95,35)" fg:x="1100" fg:w="1"/><text x="84.6058%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.3558%" y="165" width="0.0767%" height="15" fill="rgb(229,13,5)" fg:x="1100" fg:w="1"/><text x="84.6058%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.3558%" y="149" width="0.0767%" height="15" fill="rgb(252,164,30)" fg:x="1100" fg:w="1"/><text x="84.6058%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.5859%" y="149" width="0.0767%" height="15" fill="rgb(232,68,36)" fg:x="1103" fg:w="1"/><text x="84.8359%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.5859%" y="133" width="0.0767%" height="15" fill="rgb(219,59,54)" fg:x="1103" fg:w="1"/><text x="84.8359%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.5859%" y="117" width="0.0767%" height="15" fill="rgb(250,92,33)" fg:x="1103" fg:w="1"/><text x="84.8359%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.31%)</title><rect x="84.4325%" y="181" width="0.3067%" height="15" fill="rgb(229,162,54)" fg:x="1101" fg:w="4"/><text x="84.6825%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.23%)</title><rect x="84.5092%" y="165" width="0.2301%" height="15" fill="rgb(244,114,52)" fg:x="1102" fg:w="3"/><text x="84.7592%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="84.6626%" y="149" width="0.0767%" height="15" fill="rgb(212,211,43)" fg:x="1104" fg:w="1"/><text x="84.9126%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 2.68%)</title><rect x="84.4325%" y="229" width="2.6840%" height="15" fill="rgb(226,147,8)" fg:x="1101" fg:w="35"/><text x="84.6825%" y="239.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (35 samples, 2.68%)</title><rect x="84.4325%" y="213" width="2.6840%" height="15" fill="rgb(226,23,13)" fg:x="1101" fg:w="35"/><text x="84.6825%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (35 samples, 2.68%)</title><rect x="84.4325%" y="197" width="2.6840%" height="15" fill="rgb(240,63,4)" fg:x="1101" fg:w="35"/><text x="84.6825%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (31 samples, 2.38%)</title><rect x="84.7393%" y="181" width="2.3773%" height="15" fill="rgb(221,1,32)" fg:x="1105" fg:w="31"/><text x="84.9893%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (31 samples, 2.38%)</title><rect x="84.7393%" y="165" width="2.3773%" height="15" fill="rgb(242,117,10)" fg:x="1105" fg:w="31"/><text x="84.9893%" y="175.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (31 samples, 2.38%)</title><rect x="84.7393%" y="149" width="2.3773%" height="15" fill="rgb(249,172,44)" fg:x="1105" fg:w="31"/><text x="84.9893%" y="159.50">al..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.1166%" y="229" width="0.0767%" height="15" fill="rgb(244,46,45)" fg:x="1136" fg:w="1"/><text x="87.3666%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.1933%" y="213" width="0.0767%" height="15" fill="rgb(206,43,17)" fg:x="1137" fg:w="1"/><text x="87.4433%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.15%)</title><rect x="87.1933%" y="229" width="0.1534%" height="15" fill="rgb(239,218,39)" fg:x="1137" fg:w="2"/><text x="87.4433%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="87.2699%" y="213" width="0.0767%" height="15" fill="rgb(208,169,54)" fg:x="1138" fg:w="1"/><text x="87.5199%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="87.3466%" y="229" width="0.0767%" height="15" fill="rgb(247,25,42)" fg:x="1139" fg:w="1"/><text x="87.5966%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="87.3466%" y="213" width="0.0767%" height="15" fill="rgb(226,23,31)" fg:x="1139" fg:w="1"/><text x="87.5966%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.3466%" y="197" width="0.0767%" height="15" fill="rgb(247,16,28)" fg:x="1139" fg:w="1"/><text x="87.5966%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.3466%" y="181" width="0.0767%" height="15" fill="rgb(231,147,38)" fg:x="1139" fg:w="1"/><text x="87.5966%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.3466%" y="165" width="0.0767%" height="15" fill="rgb(253,81,48)" fg:x="1139" fg:w="1"/><text x="87.5966%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_bounded (1 samples, 0.08%)</title><rect x="87.4233%" y="229" width="0.0767%" height="15" fill="rgb(249,222,43)" fg:x="1140" fg:w="1"/><text x="87.6733%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (42 samples, 3.22%)</title><rect x="84.4325%" y="245" width="3.2209%" height="15" fill="rgb(221,3,27)" fg:x="1101" fg:w="42"/><text x="84.6825%" y="255.50">reg..</text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.15%)</title><rect x="87.5000%" y="229" width="0.1534%" height="15" fill="rgb(228,180,5)" fg:x="1141" fg:w="2"/><text x="87.7500%" y="239.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (2 samples, 0.15%)</title><rect x="87.5000%" y="213" width="0.1534%" height="15" fill="rgb(227,131,42)" fg:x="1141" fg:w="2"/><text x="87.7500%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.15%)</title><rect x="87.5000%" y="197" width="0.1534%" height="15" fill="rgb(212,3,39)" fg:x="1141" fg:w="2"/><text x="87.7500%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.15%)</title><rect x="87.5000%" y="181" width="0.1534%" height="15" fill="rgb(226,45,5)" fg:x="1141" fg:w="2"/><text x="87.7500%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.15%)</title><rect x="87.5000%" y="165" width="0.1534%" height="15" fill="rgb(215,167,45)" fg:x="1141" fg:w="2"/><text x="87.7500%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (51 samples, 3.91%)</title><rect x="83.8190%" y="261" width="3.9110%" height="15" fill="rgb(250,218,53)" fg:x="1093" fg:w="51"/><text x="84.0690%" y="271.50">rege..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="87.6534%" y="245" width="0.0767%" height="15" fill="rgb(207,140,0)" fg:x="1143" fg:w="1"/><text x="87.9034%" y="255.50"></text></g><g><title>regex_syntax::hir::literal::Seq::union (1 samples, 0.08%)</title><rect x="87.6534%" y="229" width="0.0767%" height="15" fill="rgb(238,133,51)" fg:x="1143" fg:w="1"/><text x="87.9034%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (53 samples, 4.06%)</title><rect x="83.7423%" y="309" width="4.0644%" height="15" fill="rgb(218,203,53)" fg:x="1092" fg:w="53"/><text x="83.9923%" y="319.50">&lt;reg..</text></g><g><title>regex::builders::string::RegexBuilder::build (53 samples, 4.06%)</title><rect x="83.7423%" y="293" width="4.0644%" height="15" fill="rgb(226,184,25)" fg:x="1092" fg:w="53"/><text x="83.9923%" y="303.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (53 samples, 4.06%)</title><rect x="83.7423%" y="277" width="4.0644%" height="15" fill="rgb(231,121,21)" fg:x="1092" fg:w="53"/><text x="83.9923%" y="287.50">rege..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="87.7301%" y="261" width="0.0767%" height="15" fill="rgb(251,14,34)" fg:x="1144" fg:w="1"/><text x="87.9801%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="87.7301%" y="245" width="0.0767%" height="15" fill="rgb(249,193,11)" fg:x="1144" fg:w="1"/><text x="87.9801%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.8067%" y="277" width="0.0767%" height="15" fill="rgb(220,172,37)" fg:x="1145" fg:w="1"/><text x="88.0567%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="87.8834%" y="277" width="0.0767%" height="15" fill="rgb(231,229,43)" fg:x="1146" fg:w="1"/><text x="88.1334%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="87.8834%" y="261" width="0.0767%" height="15" fill="rgb(250,161,5)" fg:x="1146" fg:w="1"/><text x="88.1334%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="87.8834%" y="245" width="0.0767%" height="15" fill="rgb(218,225,18)" fg:x="1146" fg:w="1"/><text x="88.1334%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.8834%" y="229" width="0.0767%" height="15" fill="rgb(245,45,42)" fg:x="1146" fg:w="1"/><text x="88.1334%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.23%)</title><rect x="87.8067%" y="309" width="0.2301%" height="15" fill="rgb(211,115,1)" fg:x="1145" fg:w="3"/><text x="88.0567%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.23%)</title><rect x="87.8067%" y="293" width="0.2301%" height="15" fill="rgb(248,133,52)" fg:x="1145" fg:w="3"/><text x="88.0567%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="87.9601%" y="277" width="0.0767%" height="15" fill="rgb(238,100,21)" fg:x="1147" fg:w="1"/><text x="88.2101%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="87.9601%" y="261" width="0.0767%" height="15" fill="rgb(247,144,11)" fg:x="1147" fg:w="1"/><text x="88.2101%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.9601%" y="245" width="0.0767%" height="15" fill="rgb(206,164,16)" fg:x="1147" fg:w="1"/><text x="88.2101%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.31%)</title><rect x="88.0368%" y="245" width="0.3067%" height="15" fill="rgb(222,34,3)" fg:x="1148" fg:w="4"/><text x="88.2868%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.15%)</title><rect x="88.1902%" y="229" width="0.1534%" height="15" fill="rgb(248,82,4)" fg:x="1150" fg:w="2"/><text x="88.4402%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.46%)</title><rect x="88.0368%" y="261" width="0.4601%" height="15" fill="rgb(228,81,46)" fg:x="1148" fg:w="6"/><text x="88.2868%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.15%)</title><rect x="88.3436%" y="245" width="0.1534%" height="15" fill="rgb(227,67,47)" fg:x="1152" fg:w="2"/><text x="88.5936%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.15%)</title><rect x="88.3436%" y="229" width="0.1534%" height="15" fill="rgb(215,93,53)" fg:x="1152" fg:w="2"/><text x="88.5936%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.15%)</title><rect x="88.3436%" y="213" width="0.1534%" height="15" fill="rgb(248,194,39)" fg:x="1152" fg:w="2"/><text x="88.5936%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.15%)</title><rect x="88.3436%" y="197" width="0.1534%" height="15" fill="rgb(215,5,19)" fg:x="1152" fg:w="2"/><text x="88.5936%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (67 samples, 5.14%)</title><rect x="83.4356%" y="325" width="5.1380%" height="15" fill="rgb(226,215,51)" fg:x="1088" fg:w="67"/><text x="83.6856%" y="335.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.54%)</title><rect x="88.0368%" y="309" width="0.5368%" height="15" fill="rgb(225,56,26)" fg:x="1148" fg:w="7"/><text x="88.2868%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.54%)</title><rect x="88.0368%" y="293" width="0.5368%" height="15" fill="rgb(222,75,29)" fg:x="1148" fg:w="7"/><text x="88.2868%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.54%)</title><rect x="88.0368%" y="277" width="0.5368%" height="15" fill="rgb(236,139,6)" fg:x="1148" fg:w="7"/><text x="88.2868%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="88.4969%" y="261" width="0.0767%" height="15" fill="rgb(223,137,36)" fg:x="1154" fg:w="1"/><text x="88.7469%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.5736%" y="261" width="0.0767%" height="15" fill="rgb(226,99,2)" fg:x="1155" fg:w="1"/><text x="88.8236%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.5736%" y="245" width="0.0767%" height="15" fill="rgb(206,133,23)" fg:x="1155" fg:w="1"/><text x="88.8236%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.5736%" y="229" width="0.0767%" height="15" fill="rgb(243,173,15)" fg:x="1155" fg:w="1"/><text x="88.8236%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.6503%" y="261" width="0.0767%" height="15" fill="rgb(228,69,28)" fg:x="1156" fg:w="1"/><text x="88.9003%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="88.7270%" y="261" width="0.0767%" height="15" fill="rgb(212,51,22)" fg:x="1157" fg:w="1"/><text x="88.9770%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.7270%" y="245" width="0.0767%" height="15" fill="rgb(227,113,0)" fg:x="1157" fg:w="1"/><text x="88.9770%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="88.7270%" y="229" width="0.0767%" height="15" fill="rgb(252,84,27)" fg:x="1157" fg:w="1"/><text x="88.9770%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.7270%" y="213" width="0.0767%" height="15" fill="rgb(223,145,39)" fg:x="1157" fg:w="1"/><text x="88.9770%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.7270%" y="197" width="0.0767%" height="15" fill="rgb(239,219,30)" fg:x="1157" fg:w="1"/><text x="88.9770%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.8037%" y="245" width="0.0767%" height="15" fill="rgb(224,196,39)" fg:x="1158" fg:w="1"/><text x="89.0537%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.9571%" y="229" width="0.0767%" height="15" fill="rgb(205,35,43)" fg:x="1160" fg:w="1"/><text x="89.2071%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.77%)</title><rect x="88.8804%" y="245" width="0.7669%" height="15" fill="rgb(228,201,21)" fg:x="1159" fg:w="10"/><text x="89.1304%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.61%)</title><rect x="89.0337%" y="229" width="0.6135%" height="15" fill="rgb(237,118,16)" fg:x="1161" fg:w="8"/><text x="89.2837%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.5706%" y="213" width="0.0767%" height="15" fill="rgb(241,17,19)" fg:x="1168" fg:w="1"/><text x="89.8206%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.15%)</title><rect x="89.6472%" y="245" width="0.1534%" height="15" fill="rgb(214,10,25)" fg:x="1169" fg:w="2"/><text x="89.8972%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="89.7239%" y="229" width="0.0767%" height="15" fill="rgb(238,37,29)" fg:x="1170" fg:w="1"/><text x="89.9739%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.15%)</title><rect x="89.8006%" y="213" width="0.1534%" height="15" fill="rgb(253,83,25)" fg:x="1171" fg:w="2"/><text x="90.0506%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (4 samples, 0.31%)</title><rect x="89.8006%" y="245" width="0.3067%" height="15" fill="rgb(234,192,12)" fg:x="1171" fg:w="4"/><text x="90.0506%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (4 samples, 0.31%)</title><rect x="89.8006%" y="229" width="0.3067%" height="15" fill="rgb(241,216,45)" fg:x="1171" fg:w="4"/><text x="90.0506%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.15%)</title><rect x="89.9540%" y="213" width="0.1534%" height="15" fill="rgb(242,22,33)" fg:x="1173" fg:w="2"/><text x="90.2040%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.15%)</title><rect x="89.9540%" y="197" width="0.1534%" height="15" fill="rgb(231,105,49)" fg:x="1173" fg:w="2"/><text x="90.2040%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.15%)</title><rect x="89.9540%" y="181" width="0.1534%" height="15" fill="rgb(218,204,15)" fg:x="1173" fg:w="2"/><text x="90.2040%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="90.1074%" y="165" width="0.0767%" height="15" fill="rgb(235,138,41)" fg:x="1175" fg:w="1"/><text x="90.3574%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="90.1840%" y="149" width="0.0767%" height="15" fill="rgb(246,0,9)" fg:x="1176" fg:w="1"/><text x="90.4340%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.1840%" y="133" width="0.0767%" height="15" fill="rgb(210,74,4)" fg:x="1176" fg:w="1"/><text x="90.4340%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.1840%" y="117" width="0.0767%" height="15" fill="rgb(250,60,41)" fg:x="1176" fg:w="1"/><text x="90.4340%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.1840%" y="101" width="0.0767%" height="15" fill="rgb(220,115,12)" fg:x="1176" fg:w="1"/><text x="90.4340%" y="111.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.15%)</title><rect x="90.7975%" y="133" width="0.1534%" height="15" fill="rgb(237,100,13)" fg:x="1184" fg:w="2"/><text x="91.0475%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.23%)</title><rect x="90.9509%" y="133" width="0.2301%" height="15" fill="rgb(213,55,26)" fg:x="1186" fg:w="3"/><text x="91.2009%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.1043%" y="117" width="0.0767%" height="15" fill="rgb(216,17,4)" fg:x="1188" fg:w="1"/><text x="91.3543%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.1043%" y="101" width="0.0767%" height="15" fill="rgb(220,153,47)" fg:x="1188" fg:w="1"/><text x="91.3543%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.1043%" y="85" width="0.0767%" height="15" fill="rgb(215,131,9)" fg:x="1188" fg:w="1"/><text x="91.3543%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.15%)</title><rect x="91.1810%" y="133" width="0.1534%" height="15" fill="rgb(233,46,42)" fg:x="1189" fg:w="2"/><text x="91.4310%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.4877%" y="101" width="0.0767%" height="15" fill="rgb(226,86,7)" fg:x="1193" fg:w="1"/><text x="91.7377%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.38%)</title><rect x="91.3344%" y="133" width="0.3834%" height="15" fill="rgb(239,226,21)" fg:x="1191" fg:w="5"/><text x="91.5844%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.31%)</title><rect x="91.4110%" y="117" width="0.3067%" height="15" fill="rgb(244,137,22)" fg:x="1192" fg:w="4"/><text x="91.6610%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.15%)</title><rect x="91.5644%" y="101" width="0.1534%" height="15" fill="rgb(211,139,35)" fg:x="1194" fg:w="2"/><text x="91.8144%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="91.6411%" y="85" width="0.0767%" height="15" fill="rgb(214,62,50)" fg:x="1195" fg:w="1"/><text x="91.8911%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.6411%" y="69" width="0.0767%" height="15" fill="rgb(212,113,44)" fg:x="1195" fg:w="1"/><text x="91.8911%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.6411%" y="53" width="0.0767%" height="15" fill="rgb(226,150,43)" fg:x="1195" fg:w="1"/><text x="91.8911%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.6411%" y="37" width="0.0767%" height="15" fill="rgb(250,71,37)" fg:x="1195" fg:w="1"/><text x="91.8911%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (29 samples, 2.22%)</title><rect x="91.7178%" y="133" width="2.2239%" height="15" fill="rgb(219,76,19)" fg:x="1196" fg:w="29"/><text x="91.9678%" y="143.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (29 samples, 2.22%)</title><rect x="91.7178%" y="117" width="2.2239%" height="15" fill="rgb(250,39,11)" fg:x="1196" fg:w="29"/><text x="91.9678%" y="127.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (29 samples, 2.22%)</title><rect x="91.7178%" y="101" width="2.2239%" height="15" fill="rgb(230,64,31)" fg:x="1196" fg:w="29"/><text x="91.9678%" y="111.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 4.06%)</title><rect x="90.1074%" y="229" width="4.0644%" height="15" fill="rgb(208,222,23)" fg:x="1175" fg:w="53"/><text x="90.3574%" y="239.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (53 samples, 4.06%)</title><rect x="90.1074%" y="213" width="4.0644%" height="15" fill="rgb(227,125,18)" fg:x="1175" fg:w="53"/><text x="90.3574%" y="223.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (53 samples, 4.06%)</title><rect x="90.1074%" y="197" width="4.0644%" height="15" fill="rgb(234,210,9)" fg:x="1175" fg:w="53"/><text x="90.3574%" y="207.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (53 samples, 4.06%)</title><rect x="90.1074%" y="181" width="4.0644%" height="15" fill="rgb(217,127,24)" fg:x="1175" fg:w="53"/><text x="90.3574%" y="191.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (52 samples, 3.99%)</title><rect x="90.1840%" y="165" width="3.9877%" height="15" fill="rgb(239,141,48)" fg:x="1176" fg:w="52"/><text x="90.4340%" y="175.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (51 samples, 3.91%)</title><rect x="90.2607%" y="149" width="3.9110%" height="15" fill="rgb(227,109,8)" fg:x="1177" fg:w="51"/><text x="90.5107%" y="159.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.23%)</title><rect x="93.9417%" y="133" width="0.2301%" height="15" fill="rgb(235,184,23)" fg:x="1225" fg:w="3"/><text x="94.1917%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.23%)</title><rect x="93.9417%" y="117" width="0.2301%" height="15" fill="rgb(227,226,48)" fg:x="1225" fg:w="3"/><text x="94.1917%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.23%)</title><rect x="93.9417%" y="101" width="0.2301%" height="15" fill="rgb(206,150,11)" fg:x="1225" fg:w="3"/><text x="94.1917%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.0951%" y="85" width="0.0767%" height="15" fill="rgb(254,2,33)" fg:x="1227" fg:w="1"/><text x="94.3451%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.1718%" y="213" width="0.0767%" height="15" fill="rgb(243,160,20)" fg:x="1228" fg:w="1"/><text x="94.4218%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.38%)</title><rect x="94.2485%" y="213" width="0.3834%" height="15" fill="rgb(218,208,30)" fg:x="1229" fg:w="5"/><text x="94.4985%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.23%)</title><rect x="94.6319%" y="213" width="0.2301%" height="15" fill="rgb(224,120,49)" fg:x="1234" fg:w="3"/><text x="94.8819%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (81 samples, 6.21%)</title><rect x="88.8037%" y="261" width="6.2117%" height="15" fill="rgb(246,12,2)" fg:x="1158" fg:w="81"/><text x="89.0537%" y="271.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (64 samples, 4.91%)</title><rect x="90.1074%" y="245" width="4.9080%" height="15" fill="rgb(236,117,3)" fg:x="1175" fg:w="64"/><text x="90.3574%" y="255.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.84%)</title><rect x="94.1718%" y="229" width="0.8436%" height="15" fill="rgb(216,128,52)" fg:x="1228" fg:w="11"/><text x="94.4218%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.15%)</title><rect x="94.8620%" y="213" width="0.1534%" height="15" fill="rgb(246,145,19)" fg:x="1237" fg:w="2"/><text x="95.1120%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.15%)</title><rect x="95.0153%" y="261" width="0.1534%" height="15" fill="rgb(222,11,46)" fg:x="1239" fg:w="2"/><text x="95.2653%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.15%)</title><rect x="95.0153%" y="245" width="0.1534%" height="15" fill="rgb(245,82,36)" fg:x="1239" fg:w="2"/><text x="95.2653%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.0920%" y="229" width="0.0767%" height="15" fill="rgb(250,73,51)" fg:x="1240" fg:w="1"/><text x="95.3420%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.2454%" y="229" width="0.0767%" height="15" fill="rgb(221,189,23)" fg:x="1242" fg:w="1"/><text x="95.4954%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.2454%" y="213" width="0.0767%" height="15" fill="rgb(210,33,7)" fg:x="1242" fg:w="1"/><text x="95.4954%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (89 samples, 6.83%)</title><rect x="88.5736%" y="309" width="6.8252%" height="15" fill="rgb(210,107,22)" fg:x="1155" fg:w="89"/><text x="88.8236%" y="319.50">&lt;regex::r..</text></g><g><title>regex::builders::string::RegexBuilder::build (89 samples, 6.83%)</title><rect x="88.5736%" y="293" width="6.8252%" height="15" fill="rgb(222,116,37)" fg:x="1155" fg:w="89"/><text x="88.8236%" y="303.50">regex::bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (89 samples, 6.83%)</title><rect x="88.5736%" y="277" width="6.8252%" height="15" fill="rgb(254,17,48)" fg:x="1155" fg:w="89"/><text x="88.8236%" y="287.50">regex_aut..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.23%)</title><rect x="95.1687%" y="261" width="0.2301%" height="15" fill="rgb(224,36,32)" fg:x="1241" fg:w="3"/><text x="95.4187%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.23%)</title><rect x="95.1687%" y="245" width="0.2301%" height="15" fill="rgb(232,90,46)" fg:x="1241" fg:w="3"/><text x="95.4187%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.3221%" y="229" width="0.0767%" height="15" fill="rgb(241,66,40)" fg:x="1243" fg:w="1"/><text x="95.5721%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.3221%" y="213" width="0.0767%" height="15" fill="rgb(249,184,29)" fg:x="1243" fg:w="1"/><text x="95.5721%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.3221%" y="197" width="0.0767%" height="15" fill="rgb(231,181,1)" fg:x="1243" fg:w="1"/><text x="95.5721%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="95.3988%" y="309" width="0.0767%" height="15" fill="rgb(224,94,2)" fg:x="1244" fg:w="1"/><text x="95.6488%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="95.3988%" y="293" width="0.0767%" height="15" fill="rgb(229,170,15)" fg:x="1244" fg:w="1"/><text x="95.6488%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="95.3988%" y="277" width="0.0767%" height="15" fill="rgb(240,127,35)" fg:x="1244" fg:w="1"/><text x="95.6488%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.3988%" y="261" width="0.0767%" height="15" fill="rgb(248,196,34)" fg:x="1244" fg:w="1"/><text x="95.6488%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.3988%" y="245" width="0.0767%" height="15" fill="rgb(236,137,7)" fg:x="1244" fg:w="1"/><text x="95.6488%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.7055%" y="213" width="0.0767%" height="15" fill="rgb(235,127,16)" fg:x="1248" fg:w="1"/><text x="95.9555%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.7055%" y="197" width="0.0767%" height="15" fill="rgb(250,192,54)" fg:x="1248" fg:w="1"/><text x="95.9555%" y="207.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="95.7055%" y="181" width="0.0767%" height="15" fill="rgb(218,98,20)" fg:x="1248" fg:w="1"/><text x="95.9555%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="95.7055%" y="165" width="0.0767%" height="15" fill="rgb(230,176,47)" fg:x="1248" fg:w="1"/><text x="95.9555%" y="175.50"></text></g><g><title>indefinite::rules::number::Number::check (95 samples, 7.29%)</title><rect x="88.5736%" y="325" width="7.2853%" height="15" fill="rgb(244,2,33)" fg:x="1155" fg:w="95"/><text x="88.8236%" y="335.50">indefinite..</text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.38%)</title><rect x="95.4755%" y="309" width="0.3834%" height="15" fill="rgb(231,100,17)" fg:x="1245" fg:w="5"/><text x="95.7255%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.38%)</title><rect x="95.4755%" y="293" width="0.3834%" height="15" fill="rgb(245,23,12)" fg:x="1245" fg:w="5"/><text x="95.7255%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.31%)</title><rect x="95.5521%" y="277" width="0.3067%" height="15" fill="rgb(249,55,22)" fg:x="1246" fg:w="4"/><text x="95.8021%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.31%)</title><rect x="95.5521%" y="261" width="0.3067%" height="15" fill="rgb(207,134,9)" fg:x="1246" fg:w="4"/><text x="95.8021%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.31%)</title><rect x="95.5521%" y="245" width="0.3067%" height="15" fill="rgb(218,134,0)" fg:x="1246" fg:w="4"/><text x="95.8021%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.31%)</title><rect x="95.5521%" y="229" width="0.3067%" height="15" fill="rgb(213,212,33)" fg:x="1246" fg:w="4"/><text x="95.8021%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="95.7822%" y="213" width="0.0767%" height="15" fill="rgb(252,106,18)" fg:x="1249" fg:w="1"/><text x="96.0322%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.8589%" y="309" width="0.0767%" height="15" fill="rgb(208,126,42)" fg:x="1250" fg:w="1"/><text x="96.1089%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.9356%" y="245" width="0.0767%" height="15" fill="rgb(246,175,29)" fg:x="1251" fg:w="1"/><text x="96.1856%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="96.0123%" y="213" width="0.0767%" height="15" fill="rgb(215,13,50)" fg:x="1252" fg:w="1"/><text x="96.2623%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.15%)</title><rect x="96.0123%" y="245" width="0.1534%" height="15" fill="rgb(216,172,15)" fg:x="1252" fg:w="2"/><text x="96.2623%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.15%)</title><rect x="96.0123%" y="229" width="0.1534%" height="15" fill="rgb(212,103,13)" fg:x="1252" fg:w="2"/><text x="96.2623%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="96.0890%" y="213" width="0.0767%" height="15" fill="rgb(231,171,36)" fg:x="1253" fg:w="1"/><text x="96.3390%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.0890%" y="197" width="0.0767%" height="15" fill="rgb(250,123,20)" fg:x="1253" fg:w="1"/><text x="96.3390%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="96.0890%" y="181" width="0.0767%" height="15" fill="rgb(212,53,50)" fg:x="1253" fg:w="1"/><text x="96.3390%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.0890%" y="165" width="0.0767%" height="15" fill="rgb(243,54,12)" fg:x="1253" fg:w="1"/><text x="96.3390%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.0890%" y="149" width="0.0767%" height="15" fill="rgb(234,101,34)" fg:x="1253" fg:w="1"/><text x="96.3390%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.0890%" y="133" width="0.0767%" height="15" fill="rgb(254,67,22)" fg:x="1253" fg:w="1"/><text x="96.3390%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="96.1656%" y="197" width="0.0767%" height="15" fill="rgb(250,35,47)" fg:x="1254" fg:w="1"/><text x="96.4156%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.1656%" y="181" width="0.0767%" height="15" fill="rgb(226,126,38)" fg:x="1254" fg:w="1"/><text x="96.4156%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.1656%" y="165" width="0.0767%" height="15" fill="rgb(216,138,53)" fg:x="1254" fg:w="1"/><text x="96.4156%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.1656%" y="149" width="0.0767%" height="15" fill="rgb(246,199,43)" fg:x="1254" fg:w="1"/><text x="96.4156%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="96.2423%" y="181" width="0.0767%" height="15" fill="rgb(232,125,11)" fg:x="1255" fg:w="1"/><text x="96.4923%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="96.2423%" y="165" width="0.0767%" height="15" fill="rgb(218,219,45)" fg:x="1255" fg:w="1"/><text x="96.4923%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.23%)</title><rect x="96.1656%" y="213" width="0.2301%" height="15" fill="rgb(216,102,54)" fg:x="1254" fg:w="3"/><text x="96.4156%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.15%)</title><rect x="96.2423%" y="197" width="0.1534%" height="15" fill="rgb(250,228,7)" fg:x="1255" fg:w="2"/><text x="96.4923%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="96.3190%" y="181" width="0.0767%" height="15" fill="rgb(226,125,25)" fg:x="1256" fg:w="1"/><text x="96.5690%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="96.3190%" y="165" width="0.0767%" height="15" fill="rgb(224,165,27)" fg:x="1256" fg:w="1"/><text x="96.5690%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="96.3190%" y="149" width="0.0767%" height="15" fill="rgb(233,86,3)" fg:x="1256" fg:w="1"/><text x="96.5690%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.3190%" y="133" width="0.0767%" height="15" fill="rgb(228,116,20)" fg:x="1256" fg:w="1"/><text x="96.5690%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.3190%" y="117" width="0.0767%" height="15" fill="rgb(209,192,17)" fg:x="1256" fg:w="1"/><text x="96.5690%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.3190%" y="101" width="0.0767%" height="15" fill="rgb(224,88,34)" fg:x="1256" fg:w="1"/><text x="96.5690%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.3957%" y="197" width="0.0767%" height="15" fill="rgb(233,38,6)" fg:x="1257" fg:w="1"/><text x="96.6457%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.3957%" y="181" width="0.0767%" height="15" fill="rgb(212,59,30)" fg:x="1257" fg:w="1"/><text x="96.6457%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.3957%" y="165" width="0.0767%" height="15" fill="rgb(213,80,3)" fg:x="1257" fg:w="1"/><text x="96.6457%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (5 samples, 0.38%)</title><rect x="96.1656%" y="245" width="0.3834%" height="15" fill="rgb(251,178,7)" fg:x="1254" fg:w="5"/><text x="96.4156%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (5 samples, 0.38%)</title><rect x="96.1656%" y="229" width="0.3834%" height="15" fill="rgb(213,154,26)" fg:x="1254" fg:w="5"/><text x="96.4156%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.15%)</title><rect x="96.3957%" y="213" width="0.1534%" height="15" fill="rgb(238,165,49)" fg:x="1257" fg:w="2"/><text x="96.6457%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="96.4724%" y="197" width="0.0767%" height="15" fill="rgb(248,91,46)" fg:x="1258" fg:w="1"/><text x="96.7224%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.4724%" y="181" width="0.0767%" height="15" fill="rgb(244,21,52)" fg:x="1258" fg:w="1"/><text x="96.7224%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.4724%" y="165" width="0.0767%" height="15" fill="rgb(247,122,20)" fg:x="1258" fg:w="1"/><text x="96.7224%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="96.4724%" y="149" width="0.0767%" height="15" fill="rgb(218,27,9)" fg:x="1258" fg:w="1"/><text x="96.7224%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="96.4724%" y="133" width="0.0767%" height="15" fill="rgb(246,7,6)" fg:x="1258" fg:w="1"/><text x="96.7224%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="96.5491%" y="197" width="0.0767%" height="15" fill="rgb(227,135,54)" fg:x="1259" fg:w="1"/><text x="96.7991%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.15%)</title><rect x="96.5491%" y="213" width="0.1534%" height="15" fill="rgb(247,14,11)" fg:x="1259" fg:w="2"/><text x="96.7991%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="96.6258%" y="197" width="0.0767%" height="15" fill="rgb(206,149,34)" fg:x="1260" fg:w="1"/><text x="96.8758%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (11 samples, 0.84%)</title><rect x="95.9356%" y="261" width="0.8436%" height="15" fill="rgb(227,228,4)" fg:x="1251" fg:w="11"/><text x="96.1856%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.23%)</title><rect x="96.5491%" y="245" width="0.2301%" height="15" fill="rgb(238,218,28)" fg:x="1259" fg:w="3"/><text x="96.7991%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.23%)</title><rect x="96.5491%" y="229" width="0.2301%" height="15" fill="rgb(252,86,40)" fg:x="1259" fg:w="3"/><text x="96.7991%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.7025%" y="213" width="0.0767%" height="15" fill="rgb(251,225,11)" fg:x="1261" fg:w="1"/><text x="96.9525%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="96.7025%" y="197" width="0.0767%" height="15" fill="rgb(206,46,49)" fg:x="1261" fg:w="1"/><text x="96.9525%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (12 samples, 0.92%)</title><rect x="95.9356%" y="293" width="0.9202%" height="15" fill="rgb(245,128,24)" fg:x="1251" fg:w="12"/><text x="96.1856%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (12 samples, 0.92%)</title><rect x="95.9356%" y="277" width="0.9202%" height="15" fill="rgb(219,177,34)" fg:x="1251" fg:w="12"/><text x="96.1856%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Config::utf8_empty (1 samples, 0.08%)</title><rect x="96.7791%" y="261" width="0.0767%" height="15" fill="rgb(218,60,48)" fg:x="1262" fg:w="1"/><text x="97.0291%" y="271.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (184 samples, 14.11%)</title><rect x="82.8221%" y="405" width="14.1104%" height="15" fill="rgb(221,11,5)" fg:x="1080" fg:w="184"/><text x="83.0721%" y="415.50">&lt;&amp;kernel::model::Enti..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (176 samples, 13.50%)</title><rect x="83.4356%" y="389" width="13.4969%" height="15" fill="rgb(220,148,13)" fg:x="1088" fg:w="176"/><text x="83.6856%" y="399.50">plugins_core::lookin..</text></g><g><title>indefinite::indefinite (176 samples, 13.50%)</title><rect x="83.4356%" y="373" width="13.4969%" height="15" fill="rgb(210,16,3)" fg:x="1088" fg:w="176"/><text x="83.6856%" y="383.50">indefinite::indefini..</text></g><g><title>indefinite::methods::indefinite (176 samples, 13.50%)</title><rect x="83.4356%" y="357" width="13.4969%" height="15" fill="rgb(236,80,2)" fg:x="1088" fg:w="176"/><text x="83.6856%" y="367.50">indefinite::methods:..</text></g><g><title>indefinite::methods::apply_rules (176 samples, 13.50%)</title><rect x="83.4356%" y="341" width="13.4969%" height="15" fill="rgb(239,129,19)" fg:x="1088" fg:w="176"/><text x="83.6856%" y="351.50">indefinite::methods:..</text></g><g><title>indefinite::rules::other::Other::run (14 samples, 1.07%)</title><rect x="95.8589%" y="325" width="1.0736%" height="15" fill="rgb(220,106,35)" fg:x="1250" fg:w="14"/><text x="96.1089%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (13 samples, 1.00%)</title><rect x="95.9356%" y="309" width="0.9969%" height="15" fill="rgb(252,139,45)" fg:x="1251" fg:w="13"/><text x="96.1856%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="96.8558%" y="293" width="0.0767%" height="15" fill="rgb(229,8,36)" fg:x="1263" fg:w="1"/><text x="97.1058%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="96.8558%" y="277" width="0.0767%" height="15" fill="rgb(230,126,33)" fg:x="1263" fg:w="1"/><text x="97.1058%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="96.8558%" y="261" width="0.0767%" height="15" fill="rgb(239,140,21)" fg:x="1263" fg:w="1"/><text x="97.1058%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="96.8558%" y="245" width="0.0767%" height="15" fill="rgb(254,104,9)" fg:x="1263" fg:w="1"/><text x="97.1058%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.8558%" y="229" width="0.0767%" height="15" fill="rgb(239,52,14)" fg:x="1263" fg:w="1"/><text x="97.1058%" y="239.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="96.9325%" y="405" width="0.0767%" height="15" fill="rgb(208,227,44)" fg:x="1264" fg:w="1"/><text x="97.1825%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.9325%" y="389" width="0.0767%" height="15" fill="rgb(246,18,19)" fg:x="1264" fg:w="1"/><text x="97.1825%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.9325%" y="373" width="0.0767%" height="15" fill="rgb(235,228,25)" fg:x="1264" fg:w="1"/><text x="97.1825%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.0092%" y="405" width="0.0767%" height="15" fill="rgb(240,156,20)" fg:x="1265" fg:w="1"/><text x="97.2592%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;replies::ObservedEntity&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="97.0092%" y="389" width="0.0767%" height="15" fill="rgb(224,8,20)" fg:x="1265" fg:w="1"/><text x="97.2592%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.0092%" y="373" width="0.0767%" height="15" fill="rgb(214,12,52)" fg:x="1265" fg:w="1"/><text x="97.2592%" y="383.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (1 samples, 0.08%)</title><rect x="97.0859%" y="389" width="0.0767%" height="15" fill="rgb(211,220,47)" fg:x="1266" fg:w="1"/><text x="97.3359%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="97.0859%" y="373" width="0.0767%" height="15" fill="rgb(250,173,5)" fg:x="1266" fg:w="1"/><text x="97.3359%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="97.0859%" y="357" width="0.0767%" height="15" fill="rgb(250,125,52)" fg:x="1266" fg:w="1"/><text x="97.3359%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.0859%" y="341" width="0.0767%" height="15" fill="rgb(209,133,18)" fg:x="1266" fg:w="1"/><text x="97.3359%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.0859%" y="325" width="0.0767%" height="15" fill="rgb(216,173,22)" fg:x="1266" fg:w="1"/><text x="97.3359%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.0859%" y="309" width="0.0767%" height="15" fill="rgb(205,3,22)" fg:x="1266" fg:w="1"/><text x="97.3359%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.0859%" y="293" width="0.0767%" height="15" fill="rgb(248,22,20)" fg:x="1266" fg:w="1"/><text x="97.3359%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.0859%" y="277" width="0.0767%" height="15" fill="rgb(233,6,29)" fg:x="1266" fg:w="1"/><text x="97.3359%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.1626%" y="245" width="0.0767%" height="15" fill="rgb(240,22,54)" fg:x="1267" fg:w="1"/><text x="97.4126%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.1626%" y="229" width="0.0767%" height="15" fill="rgb(231,133,32)" fg:x="1267" fg:w="1"/><text x="97.4126%" y="239.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.15%)</title><rect x="97.1626%" y="325" width="0.1534%" height="15" fill="rgb(248,193,4)" fg:x="1267" fg:w="2"/><text x="97.4126%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="97.1626%" y="309" width="0.1534%" height="15" fill="rgb(211,178,46)" fg:x="1267" fg:w="2"/><text x="97.4126%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="97.1626%" y="293" width="0.1534%" height="15" fill="rgb(224,5,42)" fg:x="1267" fg:w="2"/><text x="97.4126%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.15%)</title><rect x="97.1626%" y="277" width="0.1534%" height="15" fill="rgb(239,176,25)" fg:x="1267" fg:w="2"/><text x="97.4126%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="97.1626%" y="261" width="0.1534%" height="15" fill="rgb(245,187,50)" fg:x="1267" fg:w="2"/><text x="97.4126%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.2393%" y="245" width="0.0767%" height="15" fill="rgb(248,24,15)" fg:x="1268" fg:w="1"/><text x="97.4893%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.2393%" y="229" width="0.0767%" height="15" fill="rgb(205,166,13)" fg:x="1268" fg:w="1"/><text x="97.4893%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.2393%" y="213" width="0.0767%" height="15" fill="rgb(208,114,23)" fg:x="1268" fg:w="1"/><text x="97.4893%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.2393%" y="197" width="0.0767%" height="15" fill="rgb(239,127,18)" fg:x="1268" fg:w="1"/><text x="97.4893%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.3160%" y="213" width="0.0767%" height="15" fill="rgb(219,154,28)" fg:x="1269" fg:w="1"/><text x="97.5660%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.38%)</title><rect x="97.0859%" y="405" width="0.3834%" height="15" fill="rgb(225,157,23)" fg:x="1266" fg:w="5"/><text x="97.3359%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.31%)</title><rect x="97.1626%" y="389" width="0.3067%" height="15" fill="rgb(219,8,6)" fg:x="1267" fg:w="4"/><text x="97.4126%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.31%)</title><rect x="97.1626%" y="373" width="0.3067%" height="15" fill="rgb(212,47,6)" fg:x="1267" fg:w="4"/><text x="97.4126%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.31%)</title><rect x="97.1626%" y="357" width="0.3067%" height="15" fill="rgb(224,190,4)" fg:x="1267" fg:w="4"/><text x="97.4126%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.31%)</title><rect x="97.1626%" y="341" width="0.3067%" height="15" fill="rgb(239,183,29)" fg:x="1267" fg:w="4"/><text x="97.4126%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.15%)</title><rect x="97.3160%" y="325" width="0.1534%" height="15" fill="rgb(213,57,7)" fg:x="1269" fg:w="2"/><text x="97.5660%" y="335.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.15%)</title><rect x="97.3160%" y="309" width="0.1534%" height="15" fill="rgb(216,148,1)" fg:x="1269" fg:w="2"/><text x="97.5660%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="97.3160%" y="293" width="0.1534%" height="15" fill="rgb(236,182,29)" fg:x="1269" fg:w="2"/><text x="97.5660%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="97.3160%" y="277" width="0.1534%" height="15" fill="rgb(244,120,48)" fg:x="1269" fg:w="2"/><text x="97.5660%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="97.3160%" y="261" width="0.1534%" height="15" fill="rgb(206,71,34)" fg:x="1269" fg:w="2"/><text x="97.5660%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="97.3160%" y="245" width="0.1534%" height="15" fill="rgb(242,32,6)" fg:x="1269" fg:w="2"/><text x="97.5660%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="97.3160%" y="229" width="0.1534%" height="15" fill="rgb(241,35,3)" fg:x="1269" fg:w="2"/><text x="97.5660%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.3926%" y="213" width="0.0767%" height="15" fill="rgb(222,62,19)" fg:x="1270" fg:w="1"/><text x="97.6426%" y="223.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (200 samples, 15.34%)</title><rect x="82.2086%" y="565" width="15.3374%" height="15" fill="rgb(223,110,41)" fg:x="1072" fg:w="200"/><text x="82.4586%" y="575.50">kernel::plugins::mw::Mi..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (200 samples, 15.34%)</title><rect x="82.2086%" y="549" width="15.3374%" height="15" fill="rgb(208,224,4)" fg:x="1072" fg:w="200"/><text x="82.4586%" y="559.50">&lt;plugins_dynlib::Dynami..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (199 samples, 15.26%)</title><rect x="82.2853%" y="533" width="15.2607%" height="15" fill="rgb(241,137,19)" fg:x="1073" fg:w="199"/><text x="82.5353%" y="543.50">kernel::plugins::mw::Mi..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (199 samples, 15.26%)</title><rect x="82.2853%" y="517" width="15.2607%" height="15" fill="rgb(244,24,17)" fg:x="1073" fg:w="199"/><text x="82.5353%" y="527.50">core::ops::function::Fn..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (199 samples, 15.26%)</title><rect x="82.2853%" y="501" width="15.2607%" height="15" fill="rgb(245,178,49)" fg:x="1073" fg:w="199"/><text x="82.5353%" y="511.50">kernel::plugins::mw::Mi..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (199 samples, 15.26%)</title><rect x="82.2853%" y="485" width="15.2607%" height="15" fill="rgb(219,160,38)" fg:x="1073" fg:w="199"/><text x="82.5353%" y="495.50">core::ops::function::Fn..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (199 samples, 15.26%)</title><rect x="82.2853%" y="469" width="15.2607%" height="15" fill="rgb(228,137,14)" fg:x="1073" fg:w="199"/><text x="82.5353%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt;..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (199 samples, 15.26%)</title><rect x="82.2853%" y="453" width="15.2607%" height="15" fill="rgb(237,134,11)" fg:x="1073" fg:w="199"/><text x="82.5353%" y="463.50">&lt;engine::session::state..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (197 samples, 15.11%)</title><rect x="82.4387%" y="437" width="15.1074%" height="15" fill="rgb(211,126,44)" fg:x="1075" fg:w="197"/><text x="82.6887%" y="447.50">&lt;plugins_core::looking:..</text></g><g><title>plugins_core::looking::model::new_area_observation (193 samples, 14.80%)</title><rect x="82.7454%" y="421" width="14.8006%" height="15" fill="rgb(226,171,33)" fg:x="1079" fg:w="193"/><text x="82.9954%" y="431.50">plugins_core::looking::..</text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="97.4693%" y="405" width="0.0767%" height="15" fill="rgb(253,99,13)" fg:x="1271" fg:w="1"/><text x="97.7193%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Route&gt; (1 samples, 0.08%)</title><rect x="97.4693%" y="389" width="0.0767%" height="15" fill="rgb(244,48,7)" fg:x="1271" fg:w="1"/><text x="97.7193%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.4693%" y="373" width="0.0767%" height="15" fill="rgb(244,217,54)" fg:x="1271" fg:w="1"/><text x="97.7193%" y="383.50"></text></g><g><title>plugins_rune::runner::SharedRunners::after (1 samples, 0.08%)</title><rect x="97.5460%" y="565" width="0.0767%" height="15" fill="rgb(224,15,18)" fg:x="1272" fg:w="1"/><text x="97.7960%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6994%" y="501" width="0.0767%" height="15" fill="rgb(244,99,12)" fg:x="1274" fg:w="1"/><text x="97.9494%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.6994%" y="485" width="0.0767%" height="15" fill="rgb(233,226,8)" fg:x="1274" fg:w="1"/><text x="97.9494%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6994%" y="469" width="0.0767%" height="15" fill="rgb(229,211,3)" fg:x="1274" fg:w="1"/><text x="97.9494%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.6994%" y="453" width="0.0767%" height="15" fill="rgb(216,140,21)" fg:x="1274" fg:w="1"/><text x="97.9494%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.6994%" y="437" width="0.0767%" height="15" fill="rgb(234,122,30)" fg:x="1274" fg:w="1"/><text x="97.9494%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.6994%" y="421" width="0.0767%" height="15" fill="rgb(236,25,46)" fg:x="1274" fg:w="1"/><text x="97.9494%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.6994%" y="405" width="0.0767%" height="15" fill="rgb(217,52,54)" fg:x="1274" fg:w="1"/><text x="97.9494%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.6994%" y="389" width="0.0767%" height="15" fill="rgb(222,29,26)" fg:x="1274" fg:w="1"/><text x="97.9494%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.6994%" y="373" width="0.0767%" height="15" fill="rgb(216,177,29)" fg:x="1274" fg:w="1"/><text x="97.9494%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.6994%" y="357" width="0.0767%" height="15" fill="rgb(247,136,51)" fg:x="1274" fg:w="1"/><text x="97.9494%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.6994%" y="341" width="0.0767%" height="15" fill="rgb(231,47,47)" fg:x="1274" fg:w="1"/><text x="97.9494%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.6994%" y="325" width="0.0767%" height="15" fill="rgb(211,192,36)" fg:x="1274" fg:w="1"/><text x="97.9494%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.6994%" y="309" width="0.0767%" height="15" fill="rgb(229,156,32)" fg:x="1274" fg:w="1"/><text x="97.9494%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.6994%" y="293" width="0.0767%" height="15" fill="rgb(248,213,20)" fg:x="1274" fg:w="1"/><text x="97.9494%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.6994%" y="277" width="0.0767%" height="15" fill="rgb(217,64,7)" fg:x="1274" fg:w="1"/><text x="97.9494%" y="287.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.23%)</title><rect x="97.6994%" y="517" width="0.2301%" height="15" fill="rgb(232,142,8)" fg:x="1274" fg:w="3"/><text x="97.9494%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="97.7761%" y="501" width="0.1534%" height="15" fill="rgb(224,92,44)" fg:x="1275" fg:w="2"/><text x="98.0261%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="97.7761%" y="485" width="0.1534%" height="15" fill="rgb(214,169,17)" fg:x="1275" fg:w="2"/><text x="98.0261%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.8528%" y="469" width="0.0767%" height="15" fill="rgb(210,59,37)" fg:x="1276" fg:w="1"/><text x="98.1028%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.9294%" y="453" width="0.0767%" height="15" fill="rgb(214,116,48)" fg:x="1277" fg:w="1"/><text x="98.1794%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.9294%" y="437" width="0.0767%" height="15" fill="rgb(244,191,6)" fg:x="1277" fg:w="1"/><text x="98.1794%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.9294%" y="421" width="0.0767%" height="15" fill="rgb(241,50,52)" fg:x="1277" fg:w="1"/><text x="98.1794%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.9294%" y="405" width="0.0767%" height="15" fill="rgb(236,75,39)" fg:x="1277" fg:w="1"/><text x="98.1794%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.9294%" y="389" width="0.0767%" height="15" fill="rgb(236,99,0)" fg:x="1277" fg:w="1"/><text x="98.1794%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.9294%" y="373" width="0.0767%" height="15" fill="rgb(207,202,15)" fg:x="1277" fg:w="1"/><text x="98.1794%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.9294%" y="357" width="0.0767%" height="15" fill="rgb(233,207,14)" fg:x="1277" fg:w="1"/><text x="98.1794%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.9294%" y="341" width="0.0767%" height="15" fill="rgb(226,27,51)" fg:x="1277" fg:w="1"/><text x="98.1794%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.9294%" y="325" width="0.0767%" height="15" fill="rgb(206,104,42)" fg:x="1277" fg:w="1"/><text x="98.1794%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.9294%" y="309" width="0.0767%" height="15" fill="rgb(212,225,4)" fg:x="1277" fg:w="1"/><text x="98.1794%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.9294%" y="293" width="0.0767%" height="15" fill="rgb(233,96,42)" fg:x="1277" fg:w="1"/><text x="98.1794%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.9294%" y="277" width="0.0767%" height="15" fill="rgb(229,21,32)" fg:x="1277" fg:w="1"/><text x="98.1794%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.9294%" y="261" width="0.0767%" height="15" fill="rgb(226,216,24)" fg:x="1277" fg:w="1"/><text x="98.1794%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9294%" y="245" width="0.0767%" height="15" fill="rgb(221,163,17)" fg:x="1277" fg:w="1"/><text x="98.1794%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0061%" y="437" width="0.0767%" height="15" fill="rgb(216,216,42)" fg:x="1278" fg:w="1"/><text x="98.2561%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0061%" y="421" width="0.0767%" height="15" fill="rgb(240,118,7)" fg:x="1278" fg:w="1"/><text x="98.2561%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0061%" y="405" width="0.0767%" height="15" fill="rgb(221,67,37)" fg:x="1278" fg:w="1"/><text x="98.2561%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0061%" y="389" width="0.0767%" height="15" fill="rgb(241,32,44)" fg:x="1278" fg:w="1"/><text x="98.2561%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.15%)</title><rect x="98.0061%" y="453" width="0.1534%" height="15" fill="rgb(235,204,43)" fg:x="1278" fg:w="2"/><text x="98.2561%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0828%" y="437" width="0.0767%" height="15" fill="rgb(213,116,10)" fg:x="1279" fg:w="1"/><text x="98.3328%" y="447.50"></text></g><g><title>plugins_core::tools::contained_by (7 samples, 0.54%)</title><rect x="97.6994%" y="533" width="0.5368%" height="15" fill="rgb(239,15,48)" fg:x="1274" fg:w="7"/><text x="97.9494%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.31%)</title><rect x="97.9294%" y="517" width="0.3067%" height="15" fill="rgb(207,123,36)" fg:x="1277" fg:w="4"/><text x="98.1794%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.31%)</title><rect x="97.9294%" y="501" width="0.3067%" height="15" fill="rgb(209,103,30)" fg:x="1277" fg:w="4"/><text x="98.1794%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.31%)</title><rect x="97.9294%" y="485" width="0.3067%" height="15" fill="rgb(238,100,19)" fg:x="1277" fg:w="4"/><text x="98.1794%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.31%)</title><rect x="97.9294%" y="469" width="0.3067%" height="15" fill="rgb(244,30,14)" fg:x="1277" fg:w="4"/><text x="98.1794%" y="479.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="98.1595%" y="453" width="0.0767%" height="15" fill="rgb(249,174,6)" fg:x="1280" fg:w="1"/><text x="98.4095%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1595%" y="437" width="0.0767%" height="15" fill="rgb(235,213,41)" fg:x="1280" fg:w="1"/><text x="98.4095%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1595%" y="421" width="0.0767%" height="15" fill="rgb(213,118,6)" fg:x="1280" fg:w="1"/><text x="98.4095%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.1595%" y="405" width="0.0767%" height="15" fill="rgb(235,44,51)" fg:x="1280" fg:w="1"/><text x="98.4095%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1595%" y="389" width="0.0767%" height="15" fill="rgb(217,9,53)" fg:x="1280" fg:w="1"/><text x="98.4095%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.1595%" y="373" width="0.0767%" height="15" fill="rgb(237,172,34)" fg:x="1280" fg:w="1"/><text x="98.4095%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.1595%" y="357" width="0.0767%" height="15" fill="rgb(206,206,11)" fg:x="1280" fg:w="1"/><text x="98.4095%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.1595%" y="341" width="0.0767%" height="15" fill="rgb(214,149,29)" fg:x="1280" fg:w="1"/><text x="98.4095%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.1595%" y="325" width="0.0767%" height="15" fill="rgb(208,123,3)" fg:x="1280" fg:w="1"/><text x="98.4095%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.1595%" y="309" width="0.0767%" height="15" fill="rgb(229,126,4)" fg:x="1280" fg:w="1"/><text x="98.4095%" y="319.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.1595%" y="293" width="0.0767%" height="15" fill="rgb(222,92,36)" fg:x="1280" fg:w="1"/><text x="98.4095%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2362%" y="485" width="0.0767%" height="15" fill="rgb(216,39,41)" fg:x="1281" fg:w="1"/><text x="98.4862%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2362%" y="469" width="0.0767%" height="15" fill="rgb(253,127,28)" fg:x="1281" fg:w="1"/><text x="98.4862%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.2362%" y="453" width="0.0767%" height="15" fill="rgb(249,152,51)" fg:x="1281" fg:w="1"/><text x="98.4862%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.2362%" y="437" width="0.0767%" height="15" fill="rgb(209,123,42)" fg:x="1281" fg:w="1"/><text x="98.4862%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.2362%" y="421" width="0.0767%" height="15" fill="rgb(241,118,22)" fg:x="1281" fg:w="1"/><text x="98.4862%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.2362%" y="405" width="0.0767%" height="15" fill="rgb(208,25,7)" fg:x="1281" fg:w="1"/><text x="98.4862%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.2362%" y="389" width="0.0767%" height="15" fill="rgb(243,144,39)" fg:x="1281" fg:w="1"/><text x="98.4862%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.31%)</title><rect x="98.2362%" y="501" width="0.3067%" height="15" fill="rgb(250,50,5)" fg:x="1281" fg:w="4"/><text x="98.4862%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.23%)</title><rect x="98.3129%" y="485" width="0.2301%" height="15" fill="rgb(207,67,11)" fg:x="1282" fg:w="3"/><text x="98.5629%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.15%)</title><rect x="98.3896%" y="469" width="0.1534%" height="15" fill="rgb(245,204,40)" fg:x="1283" fg:w="2"/><text x="98.6396%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4663%" y="453" width="0.0767%" height="15" fill="rgb(238,228,24)" fg:x="1284" fg:w="1"/><text x="98.7163%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4663%" y="437" width="0.0767%" height="15" fill="rgb(217,116,22)" fg:x="1284" fg:w="1"/><text x="98.7163%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.4663%" y="421" width="0.0767%" height="15" fill="rgb(234,98,12)" fg:x="1284" fg:w="1"/><text x="98.7163%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.4663%" y="405" width="0.0767%" height="15" fill="rgb(242,170,50)" fg:x="1284" fg:w="1"/><text x="98.7163%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.4663%" y="389" width="0.0767%" height="15" fill="rgb(235,7,5)" fg:x="1284" fg:w="1"/><text x="98.7163%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.4663%" y="373" width="0.0767%" height="15" fill="rgb(241,114,28)" fg:x="1284" fg:w="1"/><text x="98.7163%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.4663%" y="357" width="0.0767%" height="15" fill="rgb(246,112,42)" fg:x="1284" fg:w="1"/><text x="98.7163%" y="367.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (13 samples, 1.00%)</title><rect x="97.6227%" y="549" width="0.9969%" height="15" fill="rgb(248,228,14)" fg:x="1273" fg:w="13"/><text x="97.8727%" y="559.50"></text></g><g><title>plugins_core::tools::occupied_by (5 samples, 0.38%)</title><rect x="98.2362%" y="533" width="0.3834%" height="15" fill="rgb(208,133,18)" fg:x="1281" fg:w="5"/><text x="98.4862%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.38%)</title><rect x="98.2362%" y="517" width="0.3834%" height="15" fill="rgb(207,35,49)" fg:x="1281" fg:w="5"/><text x="98.4862%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.5429%" y="501" width="0.0767%" height="15" fill="rgb(205,68,36)" fg:x="1285" fg:w="1"/><text x="98.7929%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5429%" y="485" width="0.0767%" height="15" fill="rgb(245,62,40)" fg:x="1285" fg:w="1"/><text x="98.7929%" y="495.50"></text></g><g><title>engine::session::Session::captured (229 samples, 17.56%)</title><rect x="81.1350%" y="709" width="17.5613%" height="15" fill="rgb(228,27,24)" fg:x="1058" fg:w="229"/><text x="81.3850%" y="719.50">engine::session::Session::c..</text></g><g><title>engine::session::logs::capture (228 samples, 17.48%)</title><rect x="81.2117%" y="693" width="17.4847%" height="15" fill="rgb(253,19,12)" fg:x="1059" fg:w="228"/><text x="81.4617%" y="703.50">engine::session::logs::capt..</text></g><g><title>tracing_core::dispatcher::with_default (222 samples, 17.02%)</title><rect x="81.6718%" y="677" width="17.0245%" height="15" fill="rgb(232,28,20)" fg:x="1065" fg:w="222"/><text x="81.9218%" y="687.50">tracing_core::dispatcher::..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (222 samples, 17.02%)</title><rect x="81.6718%" y="661" width="17.0245%" height="15" fill="rgb(218,35,51)" fg:x="1065" fg:w="222"/><text x="81.9218%" y="671.50">&lt;engine::session::Session ..</text></g><g><title>kernel::plugins::mw::apply_middleware (222 samples, 17.02%)</title><rect x="81.6718%" y="645" width="17.0245%" height="15" fill="rgb(212,90,40)" fg:x="1065" fg:w="222"/><text x="81.9218%" y="655.50">kernel::plugins::mw::apply..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (222 samples, 17.02%)</title><rect x="81.6718%" y="629" width="17.0245%" height="15" fill="rgb(220,172,12)" fg:x="1065" fg:w="222"/><text x="81.9218%" y="639.50">kernel::plugins::mw::Middl..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (222 samples, 17.02%)</title><rect x="81.6718%" y="613" width="17.0245%" height="15" fill="rgb(226,159,20)" fg:x="1065" fg:w="222"/><text x="81.9218%" y="623.50">&lt;engine::session::ExpandSu..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (216 samples, 16.56%)</title><rect x="82.1319%" y="597" width="16.5644%" height="15" fill="rgb(234,205,16)" fg:x="1071" fg:w="216"/><text x="82.3819%" y="607.50">kernel::plugins::mw::Middl..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (216 samples, 16.56%)</title><rect x="82.1319%" y="581" width="16.5644%" height="15" fill="rgb(207,9,39)" fg:x="1071" fg:w="216"/><text x="82.3819%" y="591.50">&lt;plugins_rune::RuneMiddlew..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (14 samples, 1.07%)</title><rect x="97.6227%" y="565" width="1.0736%" height="15" fill="rgb(249,143,15)" fg:x="1273" fg:w="14"/><text x="97.8727%" y="575.50"></text></g><g><title>plugins_rune::sources::load_sources_from_entity (1 samples, 0.08%)</title><rect x="98.6196%" y="549" width="0.0767%" height="15" fill="rgb(253,133,29)" fg:x="1286" fg:w="1"/><text x="98.8696%" y="559.50"></text></g><g><title>plugins_rune::sources::get_script (1 samples, 0.08%)</title><rect x="98.6196%" y="533" width="0.0767%" height="15" fill="rgb(221,187,0)" fg:x="1286" fg:w="1"/><text x="98.8696%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.15%)</title><rect x="98.6963%" y="661" width="0.1534%" height="15" fill="rgb(205,204,26)" fg:x="1287" fg:w="2"/><text x="98.9463%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7730%" y="645" width="0.0767%" height="15" fill="rgb(224,68,54)" fg:x="1288" fg:w="1"/><text x="99.0230%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7730%" y="629" width="0.0767%" height="15" fill="rgb(209,67,4)" fg:x="1288" fg:w="1"/><text x="99.0230%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7730%" y="613" width="0.0767%" height="15" fill="rgb(228,229,18)" fg:x="1288" fg:w="1"/><text x="99.0230%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7730%" y="597" width="0.0767%" height="15" fill="rgb(231,89,13)" fg:x="1288" fg:w="1"/><text x="99.0230%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7730%" y="581" width="0.0767%" height="15" fill="rgb(210,182,18)" fg:x="1288" fg:w="1"/><text x="99.0230%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7730%" y="565" width="0.0767%" height="15" fill="rgb(240,105,2)" fg:x="1288" fg:w="1"/><text x="99.0230%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.7730%" y="549" width="0.0767%" height="15" fill="rgb(207,170,50)" fg:x="1288" fg:w="1"/><text x="99.0230%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.7730%" y="533" width="0.0767%" height="15" fill="rgb(232,133,24)" fg:x="1288" fg:w="1"/><text x="99.0230%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.7730%" y="517" width="0.0767%" height="15" fill="rgb(235,166,27)" fg:x="1288" fg:w="1"/><text x="99.0230%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.7730%" y="501" width="0.0767%" height="15" fill="rgb(209,19,13)" fg:x="1288" fg:w="1"/><text x="99.0230%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.7730%" y="485" width="0.0767%" height="15" fill="rgb(226,79,39)" fg:x="1288" fg:w="1"/><text x="99.0230%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9264%" y="469" width="0.0767%" height="15" fill="rgb(222,163,10)" fg:x="1290" fg:w="1"/><text x="99.1764%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.23%)</title><rect x="98.8497%" y="565" width="0.2301%" height="15" fill="rgb(214,44,19)" fg:x="1289" fg:w="3"/><text x="99.0997%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.23%)</title><rect x="98.8497%" y="549" width="0.2301%" height="15" fill="rgb(210,217,13)" fg:x="1289" fg:w="3"/><text x="99.0997%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.23%)</title><rect x="98.8497%" y="533" width="0.2301%" height="15" fill="rgb(237,61,54)" fg:x="1289" fg:w="3"/><text x="99.0997%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.23%)</title><rect x="98.8497%" y="517" width="0.2301%" height="15" fill="rgb(226,184,24)" fg:x="1289" fg:w="3"/><text x="99.0997%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.23%)</title><rect x="98.8497%" y="501" width="0.2301%" height="15" fill="rgb(223,226,4)" fg:x="1289" fg:w="3"/><text x="99.0997%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.15%)</title><rect x="98.9264%" y="485" width="0.1534%" height="15" fill="rgb(210,26,41)" fg:x="1290" fg:w="2"/><text x="99.1764%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.0031%" y="469" width="0.0767%" height="15" fill="rgb(220,221,6)" fg:x="1291" fg:w="1"/><text x="99.2531%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0031%" y="453" width="0.0767%" height="15" fill="rgb(225,89,49)" fg:x="1291" fg:w="1"/><text x="99.2531%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.0031%" y="437" width="0.0767%" height="15" fill="rgb(218,70,45)" fg:x="1291" fg:w="1"/><text x="99.2531%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.31%)</title><rect x="98.8497%" y="661" width="0.3067%" height="15" fill="rgb(238,166,21)" fg:x="1289" fg:w="4"/><text x="99.0997%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.31%)</title><rect x="98.8497%" y="645" width="0.3067%" height="15" fill="rgb(224,141,44)" fg:x="1289" fg:w="4"/><text x="99.0997%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.31%)</title><rect x="98.8497%" y="629" width="0.3067%" height="15" fill="rgb(230,12,49)" fg:x="1289" fg:w="4"/><text x="99.0997%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.31%)</title><rect x="98.8497%" y="613" width="0.3067%" height="15" fill="rgb(212,174,12)" fg:x="1289" fg:w="4"/><text x="99.0997%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.31%)</title><rect x="98.8497%" y="597" width="0.3067%" height="15" fill="rgb(246,67,9)" fg:x="1289" fg:w="4"/><text x="99.0997%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.31%)</title><rect x="98.8497%" y="581" width="0.3067%" height="15" fill="rgb(239,35,23)" fg:x="1289" fg:w="4"/><text x="99.0997%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.0798%" y="565" width="0.0767%" height="15" fill="rgb(211,167,0)" fg:x="1292" fg:w="1"/><text x="99.3298%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0798%" y="549" width="0.0767%" height="15" fill="rgb(225,119,45)" fg:x="1292" fg:w="1"/><text x="99.3298%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.0798%" y="533" width="0.0767%" height="15" fill="rgb(210,162,6)" fg:x="1292" fg:w="1"/><text x="99.3298%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="99.0798%" y="517" width="0.0767%" height="15" fill="rgb(208,118,35)" fg:x="1292" fg:w="1"/><text x="99.3298%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="99.0798%" y="501" width="0.0767%" height="15" fill="rgb(239,4,53)" fg:x="1292" fg:w="1"/><text x="99.3298%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.0798%" y="485" width="0.0767%" height="15" fill="rgb(213,130,21)" fg:x="1292" fg:w="1"/><text x="99.3298%" y="495.50"></text></g><g><title>engine::session::internal::Added::find_refs (7 samples, 0.54%)</title><rect x="98.6963%" y="693" width="0.5368%" height="15" fill="rgb(235,148,0)" fg:x="1287" fg:w="7"/><text x="98.9463%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.54%)</title><rect x="98.6963%" y="677" width="0.5368%" height="15" fill="rgb(244,224,18)" fg:x="1287" fg:w="7"/><text x="98.9463%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1564%" y="661" width="0.0767%" height="15" fill="rgb(211,214,4)" fg:x="1293" fg:w="1"/><text x="99.4064%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1564%" y="645" width="0.0767%" height="15" fill="rgb(206,119,25)" fg:x="1293" fg:w="1"/><text x="99.4064%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.1564%" y="629" width="0.0767%" height="15" fill="rgb(243,93,47)" fg:x="1293" fg:w="1"/><text x="99.4064%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="99.1564%" y="613" width="0.0767%" height="15" fill="rgb(224,194,6)" fg:x="1293" fg:w="1"/><text x="99.4064%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.1564%" y="597" width="0.0767%" height="15" fill="rgb(243,229,6)" fg:x="1293" fg:w="1"/><text x="99.4064%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.1564%" y="581" width="0.0767%" height="15" fill="rgb(207,23,50)" fg:x="1293" fg:w="1"/><text x="99.4064%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="99.1564%" y="565" width="0.0767%" height="15" fill="rgb(253,192,32)" fg:x="1293" fg:w="1"/><text x="99.4064%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="99.1564%" y="549" width="0.0767%" height="15" fill="rgb(213,21,6)" fg:x="1293" fg:w="1"/><text x="99.4064%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.1564%" y="533" width="0.0767%" height="15" fill="rgb(243,151,13)" fg:x="1293" fg:w="1"/><text x="99.4064%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.3098%" y="597" width="0.0767%" height="15" fill="rgb(233,165,41)" fg:x="1295" fg:w="1"/><text x="99.5598%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.3098%" y="581" width="0.0767%" height="15" fill="rgb(246,176,45)" fg:x="1295" fg:w="1"/><text x="99.5598%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="99.3098%" y="565" width="0.0767%" height="15" fill="rgb(217,170,52)" fg:x="1295" fg:w="1"/><text x="99.5598%" y="575.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.23%)</title><rect x="99.2331%" y="677" width="0.2301%" height="15" fill="rgb(214,203,54)" fg:x="1294" fg:w="3"/><text x="99.4831%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.23%)</title><rect x="99.2331%" y="661" width="0.2301%" height="15" fill="rgb(248,215,49)" fg:x="1294" fg:w="3"/><text x="99.4831%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="99.2331%" y="645" width="0.2301%" height="15" fill="rgb(208,46,10)" fg:x="1294" fg:w="3"/><text x="99.4831%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.15%)</title><rect x="99.3098%" y="629" width="0.1534%" height="15" fill="rgb(254,5,31)" fg:x="1295" fg:w="2"/><text x="99.5598%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="99.3098%" y="613" width="0.1534%" height="15" fill="rgb(222,104,33)" fg:x="1295" fg:w="2"/><text x="99.5598%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3865%" y="597" width="0.0767%" height="15" fill="rgb(248,49,16)" fg:x="1296" fg:w="1"/><text x="99.6365%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.3865%" y="581" width="0.0767%" height="15" fill="rgb(232,198,41)" fg:x="1296" fg:w="1"/><text x="99.6365%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.3865%" y="565" width="0.0767%" height="15" fill="rgb(214,125,3)" fg:x="1296" fg:w="1"/><text x="99.6365%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.3865%" y="549" width="0.0767%" height="15" fill="rgb(229,220,28)" fg:x="1296" fg:w="1"/><text x="99.6365%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.3865%" y="533" width="0.0767%" height="15" fill="rgb(222,64,37)" fg:x="1296" fg:w="1"/><text x="99.6365%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.3865%" y="517" width="0.0767%" height="15" fill="rgb(249,184,13)" fg:x="1296" fg:w="1"/><text x="99.6365%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4632%" y="581" width="0.0767%" height="15" fill="rgb(252,176,6)" fg:x="1297" fg:w="1"/><text x="99.7132%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4632%" y="565" width="0.0767%" height="15" fill="rgb(228,153,7)" fg:x="1297" fg:w="1"/><text x="99.7132%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.4632%" y="549" width="0.0767%" height="15" fill="rgb(242,193,5)" fg:x="1297" fg:w="1"/><text x="99.7132%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.4632%" y="533" width="0.0767%" height="15" fill="rgb(232,140,9)" fg:x="1297" fg:w="1"/><text x="99.7132%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4632%" y="517" width="0.0767%" height="15" fill="rgb(213,222,16)" fg:x="1297" fg:w="1"/><text x="99.7132%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.92%)</title><rect x="98.6963%" y="709" width="0.9202%" height="15" fill="rgb(222,75,50)" fg:x="1287" fg:w="12"/><text x="98.9463%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.38%)</title><rect x="99.2331%" y="693" width="0.3834%" height="15" fill="rgb(205,180,2)" fg:x="1294" fg:w="5"/><text x="99.4831%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.15%)</title><rect x="99.4632%" y="677" width="0.1534%" height="15" fill="rgb(216,34,7)" fg:x="1297" fg:w="2"/><text x="99.7132%" y="687.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.15%)</title><rect x="99.4632%" y="661" width="0.1534%" height="15" fill="rgb(253,16,32)" fg:x="1297" fg:w="2"/><text x="99.7132%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="99.4632%" y="645" width="0.1534%" height="15" fill="rgb(208,97,28)" fg:x="1297" fg:w="2"/><text x="99.7132%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="99.4632%" y="629" width="0.1534%" height="15" fill="rgb(225,92,11)" fg:x="1297" fg:w="2"/><text x="99.7132%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="99.4632%" y="613" width="0.1534%" height="15" fill="rgb(243,38,12)" fg:x="1297" fg:w="2"/><text x="99.7132%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="99.4632%" y="597" width="0.1534%" height="15" fill="rgb(208,139,16)" fg:x="1297" fg:w="2"/><text x="99.7132%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.5399%" y="581" width="0.0767%" height="15" fill="rgb(227,24,9)" fg:x="1298" fg:w="1"/><text x="99.7899%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5399%" y="565" width="0.0767%" height="15" fill="rgb(206,62,11)" fg:x="1298" fg:w="1"/><text x="99.7899%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.6166%" y="661" width="0.0767%" height="15" fill="rgb(228,134,27)" fg:x="1299" fg:w="1"/><text x="99.8666%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6166%" y="645" width="0.0767%" height="15" fill="rgb(205,55,33)" fg:x="1299" fg:w="1"/><text x="99.8666%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6166%" y="629" width="0.0767%" height="15" fill="rgb(243,75,43)" fg:x="1299" fg:w="1"/><text x="99.8666%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.6166%" y="613" width="0.0767%" height="15" fill="rgb(223,27,42)" fg:x="1299" fg:w="1"/><text x="99.8666%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6166%" y="597" width="0.0767%" height="15" fill="rgb(232,189,33)" fg:x="1299" fg:w="1"/><text x="99.8666%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6166%" y="581" width="0.0767%" height="15" fill="rgb(210,9,39)" fg:x="1299" fg:w="1"/><text x="99.8666%" y="591.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6933%" y="613" width="0.0767%" height="15" fill="rgb(242,85,26)" fg:x="1300" fg:w="1"/><text x="99.9433%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.15%)</title><rect x="99.6933%" y="661" width="0.1534%" height="15" fill="rgb(248,44,4)" fg:x="1300" fg:w="2"/><text x="99.9433%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.15%)</title><rect x="99.6933%" y="645" width="0.1534%" height="15" fill="rgb(250,96,46)" fg:x="1300" fg:w="2"/><text x="99.9433%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.15%)</title><rect x="99.6933%" y="629" width="0.1534%" height="15" fill="rgb(229,116,26)" fg:x="1300" fg:w="2"/><text x="99.9433%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7699%" y="613" width="0.0767%" height="15" fill="rgb(246,94,34)" fg:x="1301" fg:w="1"/><text x="100.0199%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7699%" y="597" width="0.0767%" height="15" fill="rgb(251,73,21)" fg:x="1301" fg:w="1"/><text x="100.0199%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8466%" y="565" width="0.0767%" height="15" fill="rgb(254,121,25)" fg:x="1302" fg:w="1"/><text x="100.0966%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8466%" y="549" width="0.0767%" height="15" fill="rgb(215,161,49)" fg:x="1302" fg:w="1"/><text x="100.0966%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8466%" y="533" width="0.0767%" height="15" fill="rgb(221,43,13)" fg:x="1302" fg:w="1"/><text x="100.0966%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8466%" y="517" width="0.0767%" height="15" fill="rgb(249,5,37)" fg:x="1302" fg:w="1"/><text x="100.0966%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8466%" y="501" width="0.0767%" height="15" fill="rgb(226,25,44)" fg:x="1302" fg:w="1"/><text x="100.0966%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8466%" y="485" width="0.0767%" height="15" fill="rgb(238,189,16)" fg:x="1302" fg:w="1"/><text x="100.0966%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8466%" y="469" width="0.0767%" height="15" fill="rgb(251,186,8)" fg:x="1302" fg:w="1"/><text x="100.0966%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.8466%" y="453" width="0.0767%" height="15" fill="rgb(254,34,31)" fg:x="1302" fg:w="1"/><text x="100.0966%" y="463.50"></text></g><g><title>all (1,304 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(225,215,27)" fg:x="0" fg:w="1304"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-3d8f7d70 (1,304 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(221,192,48)" fg:x="0" fg:w="1304"/><text x="0.2500%" y="1087.50">simple-3d8f7d70</text></g><g><title>_start (1,304 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(219,137,20)" fg:x="0" fg:w="1304"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,304 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(219,84,11)" fg:x="0" fg:w="1304"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,304 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(224,10,23)" fg:x="0" fg:w="1304"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,304 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(248,22,39)" fg:x="0" fg:w="1304"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,304 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(212,154,20)" fg:x="0" fg:w="1304"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,304 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(236,199,50)" fg:x="0" fg:w="1304"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,304 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(211,9,17)" fg:x="0" fg:w="1304"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,304 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(243,216,36)" fg:x="0" fg:w="1304"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,304 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(250,2,10)" fg:x="0" fg:w="1304"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,304 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(226,50,48)" fg:x="0" fg:w="1304"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,304 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(243,81,16)" fg:x="0" fg:w="1304"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,304 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(250,14,2)" fg:x="0" fg:w="1304"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,304 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(233,135,29)" fg:x="0" fg:w="1304"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,304 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(224,64,43)" fg:x="0" fg:w="1304"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,304 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(238,84,13)" fg:x="0" fg:w="1304"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,304 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(253,48,26)" fg:x="0" fg:w="1304"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,304 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(205,223,31)" fg:x="0" fg:w="1304"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (413 samples, 31.67%)</title><rect x="68.3282%" y="789" width="31.6718%" height="15" fill="rgb(221,41,32)" fg:x="891" fg:w="413"/><text x="68.5782%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (413 samples, 31.67%)</title><rect x="68.3282%" y="773" width="31.6718%" height="15" fill="rgb(213,158,31)" fg:x="891" fg:w="413"/><text x="68.5782%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (413 samples, 31.67%)</title><rect x="68.3282%" y="757" width="31.6718%" height="15" fill="rgb(245,126,43)" fg:x="891" fg:w="413"/><text x="68.5782%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (247 samples, 18.94%)</title><rect x="81.0583%" y="741" width="18.9417%" height="15" fill="rgb(227,7,22)" fg:x="1057" fg:w="247"/><text x="81.3083%" y="751.50">engine::session::Session::eval..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (247 samples, 18.94%)</title><rect x="81.0583%" y="725" width="18.9417%" height="15" fill="rgb(252,90,44)" fg:x="1057" fg:w="247"/><text x="81.3083%" y="735.50">engine::session::Session::eval..</text></g><g><title>kernel::model::EntityPtrResolver::world (5 samples, 0.38%)</title><rect x="99.6166%" y="709" width="0.3834%" height="15" fill="rgb(253,91,0)" fg:x="1299" fg:w="5"/><text x="99.8666%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.38%)</title><rect x="99.6166%" y="693" width="0.3834%" height="15" fill="rgb(252,175,49)" fg:x="1299" fg:w="5"/><text x="99.8666%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.38%)</title><rect x="99.6166%" y="677" width="0.3834%" height="15" fill="rgb(246,150,1)" fg:x="1299" fg:w="5"/><text x="99.8666%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.15%)</title><rect x="99.8466%" y="661" width="0.1534%" height="15" fill="rgb(241,192,25)" fg:x="1302" fg:w="2"/><text x="100.0966%" y="671.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.15%)</title><rect x="99.8466%" y="645" width="0.1534%" height="15" fill="rgb(239,187,11)" fg:x="1302" fg:w="2"/><text x="100.0966%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="99.8466%" y="629" width="0.1534%" height="15" fill="rgb(218,202,51)" fg:x="1302" fg:w="2"/><text x="100.0966%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="99.8466%" y="613" width="0.1534%" height="15" fill="rgb(225,176,8)" fg:x="1302" fg:w="2"/><text x="100.0966%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.15%)</title><rect x="99.8466%" y="597" width="0.1534%" height="15" fill="rgb(219,122,41)" fg:x="1302" fg:w="2"/><text x="100.0966%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.15%)</title><rect x="99.8466%" y="581" width="0.1534%" height="15" fill="rgb(248,140,20)" fg:x="1302" fg:w="2"/><text x="100.0966%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.9233%" y="565" width="0.0767%" height="15" fill="rgb(245,41,37)" fg:x="1303" fg:w="1"/><text x="100.1733%" y="575.50"></text></g></svg></svg>