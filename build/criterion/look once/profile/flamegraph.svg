<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1078" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1061.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1061.00"> </text><svg id="frames" x="10" width="1180" total_samples="1269"><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.0000%" y="661" width="0.0788%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="645" width="0.0788%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.1576%" y="581" width="0.0788%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.4076%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.1576%" y="565" width="0.0788%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.4076%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.1576%" y="549" width="0.0788%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.4076%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.1576%" y="533" width="0.0788%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="0.4076%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1576%" y="517" width="0.0788%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.4076%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.0788%" y="613" width="0.2364%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="3"/><text x="0.3288%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.0788%" y="597" width="0.2364%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="3"/><text x="0.3288%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2364%" y="581" width="0.0788%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="1"/><text x="0.4864%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.39%)</title><rect x="0.0000%" y="677" width="0.3940%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (4 samples, 0.32%)</title><rect x="0.0788%" y="661" width="0.3152%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="4"/><text x="0.3288%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0788%" y="645" width="0.3152%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="4"/><text x="0.3288%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (4 samples, 0.32%)</title><rect x="0.0788%" y="629" width="0.3152%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="4"/><text x="0.3288%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3152%" y="613" width="0.0788%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="1"/><text x="0.5652%" y="623.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="0.3940%" y="581" width="0.0788%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="1"/><text x="0.6440%" y="591.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="0.3940%" y="565" width="0.0788%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="0.6440%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="0.3940%" y="549" width="0.0788%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="1"/><text x="0.6440%" y="559.50"></text></g><g><title>engine::session::Session::initialize (5 samples, 0.39%)</title><rect x="0.3940%" y="645" width="0.3940%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="5"/><text x="0.6440%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (5 samples, 0.39%)</title><rect x="0.3940%" y="629" width="0.3940%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="5"/><text x="0.6440%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (5 samples, 0.39%)</title><rect x="0.3940%" y="613" width="0.3940%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="5"/><text x="0.6440%" y="623.50"></text></g><g><title>libloading::safe::Library::new (5 samples, 0.39%)</title><rect x="0.3940%" y="597" width="0.3940%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="5"/><text x="0.6440%" y="607.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="0.4728%" y="581" width="0.3152%" height="15" fill="rgb(221,5,38)" fg:x="6" fg:w="4"/><text x="0.7228%" y="591.50"></text></g><g><title>_dl_catch_error (4 samples, 0.32%)</title><rect x="0.4728%" y="565" width="0.3152%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="4"/><text x="0.7228%" y="575.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="0.4728%" y="549" width="0.3152%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="4"/><text x="0.7228%" y="559.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="0.4728%" y="533" width="0.3152%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="4"/><text x="0.7228%" y="543.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="0.4728%" y="517" width="0.3152%" height="15" fill="rgb(225,111,53)" fg:x="6" fg:w="4"/><text x="0.7228%" y="527.50"></text></g><g><title>_dl_signal_error (1 samples, 0.08%)</title><rect x="0.7092%" y="501" width="0.0788%" height="15" fill="rgb(238,160,17)" fg:x="9" fg:w="1"/><text x="0.9592%" y="511.50"></text></g><g><title>_dl_exception_create (1 samples, 0.08%)</title><rect x="0.7092%" y="485" width="0.0788%" height="15" fill="rgb(214,148,48)" fg:x="9" fg:w="1"/><text x="0.9592%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="0.8668%" y="597" width="0.0788%" height="15" fill="rgb(232,36,49)" fg:x="11" fg:w="1"/><text x="1.1168%" y="607.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (8 samples, 0.63%)</title><rect x="0.3940%" y="677" width="0.6304%" height="15" fill="rgb(209,103,24)" fg:x="5" fg:w="8"/><text x="0.6440%" y="687.50"></text></g><g><title>engine::session::Session::new (8 samples, 0.63%)</title><rect x="0.3940%" y="661" width="0.6304%" height="15" fill="rgb(229,88,8)" fg:x="5" fg:w="8"/><text x="0.6440%" y="671.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (3 samples, 0.24%)</title><rect x="0.7880%" y="645" width="0.2364%" height="15" fill="rgb(213,181,19)" fg:x="10" fg:w="3"/><text x="1.0380%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="0.7880%" y="629" width="0.2364%" height="15" fill="rgb(254,191,54)" fg:x="10" fg:w="3"/><text x="1.0380%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="0.7880%" y="613" width="0.2364%" height="15" fill="rgb(241,83,37)" fg:x="10" fg:w="3"/><text x="1.0380%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="0.9456%" y="597" width="0.0788%" height="15" fill="rgb(233,36,39)" fg:x="12" fg:w="1"/><text x="1.1956%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="0.9456%" y="581" width="0.0788%" height="15" fill="rgb(226,3,54)" fg:x="12" fg:w="1"/><text x="1.1956%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="0.9456%" y="565" width="0.0788%" height="15" fill="rgb(245,192,40)" fg:x="12" fg:w="1"/><text x="1.1956%" y="575.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="1.1032%" y="645" width="0.0788%" height="15" fill="rgb(238,167,29)" fg:x="14" fg:w="1"/><text x="1.3532%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.1820%" y="613" width="0.0788%" height="15" fill="rgb(232,182,51)" fg:x="15" fg:w="1"/><text x="1.4320%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.1820%" y="597" width="0.0788%" height="15" fill="rgb(231,60,39)" fg:x="15" fg:w="1"/><text x="1.4320%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.1820%" y="581" width="0.0788%" height="15" fill="rgb(208,69,12)" fg:x="15" fg:w="1"/><text x="1.4320%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.1820%" y="565" width="0.0788%" height="15" fill="rgb(235,93,37)" fg:x="15" fg:w="1"/><text x="1.4320%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1.3396%" y="565" width="0.0788%" height="15" fill="rgb(213,116,39)" fg:x="17" fg:w="1"/><text x="1.5896%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.3396%" y="549" width="0.0788%" height="15" fill="rgb(222,207,29)" fg:x="17" fg:w="1"/><text x="1.5896%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.3396%" y="533" width="0.0788%" height="15" fill="rgb(206,96,30)" fg:x="17" fg:w="1"/><text x="1.5896%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.3396%" y="517" width="0.0788%" height="15" fill="rgb(218,138,4)" fg:x="17" fg:w="1"/><text x="1.5896%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.3396%" y="501" width="0.0788%" height="15" fill="rgb(250,191,14)" fg:x="17" fg:w="1"/><text x="1.5896%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="1.4184%" y="549" width="0.2364%" height="15" fill="rgb(239,60,40)" fg:x="18" fg:w="3"/><text x="1.6684%" y="559.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="1.4184%" y="533" width="0.2364%" height="15" fill="rgb(206,27,48)" fg:x="18" fg:w="3"/><text x="1.6684%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="1.4972%" y="517" width="0.1576%" height="15" fill="rgb(225,35,8)" fg:x="19" fg:w="2"/><text x="1.7472%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="1.4972%" y="501" width="0.1576%" height="15" fill="rgb(250,213,24)" fg:x="19" fg:w="2"/><text x="1.7472%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.5760%" y="485" width="0.0788%" height="15" fill="rgb(247,123,22)" fg:x="20" fg:w="1"/><text x="1.8260%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.5760%" y="469" width="0.0788%" height="15" fill="rgb(231,138,38)" fg:x="20" fg:w="1"/><text x="1.8260%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.5760%" y="453" width="0.0788%" height="15" fill="rgb(231,145,46)" fg:x="20" fg:w="1"/><text x="1.8260%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.6548%" y="533" width="0.0788%" height="15" fill="rgb(251,118,11)" fg:x="21" fg:w="1"/><text x="1.9048%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.6548%" y="517" width="0.0788%" height="15" fill="rgb(217,147,25)" fg:x="21" fg:w="1"/><text x="1.9048%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.6548%" y="501" width="0.0788%" height="15" fill="rgb(247,81,37)" fg:x="21" fg:w="1"/><text x="1.9048%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.7336%" y="533" width="0.0788%" height="15" fill="rgb(209,12,38)" fg:x="22" fg:w="1"/><text x="1.9836%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.7336%" y="517" width="0.0788%" height="15" fill="rgb(227,1,9)" fg:x="22" fg:w="1"/><text x="1.9836%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.7336%" y="501" width="0.0788%" height="15" fill="rgb(248,47,43)" fg:x="22" fg:w="1"/><text x="1.9836%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.7336%" y="485" width="0.0788%" height="15" fill="rgb(221,10,30)" fg:x="22" fg:w="1"/><text x="1.9836%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.63%)</title><rect x="1.2608%" y="581" width="0.6304%" height="15" fill="rgb(210,229,1)" fg:x="16" fg:w="8"/><text x="1.5108%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.47%)</title><rect x="1.4184%" y="565" width="0.4728%" height="15" fill="rgb(222,148,37)" fg:x="18" fg:w="6"/><text x="1.6684%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="1.6548%" y="549" width="0.2364%" height="15" fill="rgb(234,67,33)" fg:x="21" fg:w="3"/><text x="1.9048%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.8125%" y="533" width="0.0788%" height="15" fill="rgb(247,98,35)" fg:x="23" fg:w="1"/><text x="2.0625%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.8125%" y="517" width="0.0788%" height="15" fill="rgb(247,138,52)" fg:x="23" fg:w="1"/><text x="2.0625%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.8913%" y="581" width="0.0788%" height="15" fill="rgb(213,79,30)" fg:x="24" fg:w="1"/><text x="2.1413%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="1.8913%" y="565" width="0.0788%" height="15" fill="rgb(246,177,23)" fg:x="24" fg:w="1"/><text x="2.1413%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.8913%" y="549" width="0.0788%" height="15" fill="rgb(230,62,27)" fg:x="24" fg:w="1"/><text x="2.1413%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.8913%" y="533" width="0.0788%" height="15" fill="rgb(216,154,8)" fg:x="24" fg:w="1"/><text x="2.1413%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.9701%" y="533" width="0.0788%" height="15" fill="rgb(244,35,45)" fg:x="25" fg:w="1"/><text x="2.2201%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.9701%" y="517" width="0.0788%" height="15" fill="rgb(251,115,12)" fg:x="25" fg:w="1"/><text x="2.2201%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="1.9701%" y="501" width="0.0788%" height="15" fill="rgb(240,54,50)" fg:x="25" fg:w="1"/><text x="2.2201%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="2.0489%" y="533" width="0.0788%" height="15" fill="rgb(233,84,52)" fg:x="26" fg:w="1"/><text x="2.2989%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.0489%" y="517" width="0.0788%" height="15" fill="rgb(207,117,47)" fg:x="26" fg:w="1"/><text x="2.2989%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.0489%" y="501" width="0.0788%" height="15" fill="rgb(249,43,39)" fg:x="26" fg:w="1"/><text x="2.2989%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.2065%" y="485" width="0.0788%" height="15" fill="rgb(209,38,44)" fg:x="28" fg:w="1"/><text x="2.4565%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.2065%" y="469" width="0.0788%" height="15" fill="rgb(236,212,23)" fg:x="28" fg:w="1"/><text x="2.4565%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="2.2065%" y="453" width="0.0788%" height="15" fill="rgb(242,79,21)" fg:x="28" fg:w="1"/><text x="2.4565%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.2853%" y="453" width="0.0788%" height="15" fill="rgb(211,96,35)" fg:x="29" fg:w="1"/><text x="2.5353%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="2.2853%" y="437" width="0.0788%" height="15" fill="rgb(253,215,40)" fg:x="29" fg:w="1"/><text x="2.5353%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.4429%" y="357" width="0.0788%" height="15" fill="rgb(211,81,21)" fg:x="31" fg:w="1"/><text x="2.6929%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.4429%" y="341" width="0.0788%" height="15" fill="rgb(208,190,38)" fg:x="31" fg:w="1"/><text x="2.6929%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.4429%" y="325" width="0.0788%" height="15" fill="rgb(235,213,38)" fg:x="31" fg:w="1"/><text x="2.6929%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="2.3641%" y="405" width="0.2364%" height="15" fill="rgb(237,122,38)" fg:x="30" fg:w="3"/><text x="2.6141%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.4429%" y="389" width="0.1576%" height="15" fill="rgb(244,218,35)" fg:x="31" fg:w="2"/><text x="2.6929%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.4429%" y="373" width="0.1576%" height="15" fill="rgb(240,68,47)" fg:x="31" fg:w="2"/><text x="2.6929%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.5217%" y="357" width="0.0788%" height="15" fill="rgb(210,16,53)" fg:x="32" fg:w="1"/><text x="2.7717%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.39%)</title><rect x="2.2853%" y="469" width="0.3940%" height="15" fill="rgb(235,124,12)" fg:x="29" fg:w="5"/><text x="2.5353%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="2.3641%" y="453" width="0.3152%" height="15" fill="rgb(224,169,11)" fg:x="30" fg:w="4"/><text x="2.6141%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="2.3641%" y="437" width="0.3152%" height="15" fill="rgb(250,166,2)" fg:x="30" fg:w="4"/><text x="2.6141%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="2.3641%" y="421" width="0.3152%" height="15" fill="rgb(242,216,29)" fg:x="30" fg:w="4"/><text x="2.6141%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.6005%" y="405" width="0.0788%" height="15" fill="rgb(230,116,27)" fg:x="33" fg:w="1"/><text x="2.8505%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.71%)</title><rect x="2.1277%" y="501" width="0.7092%" height="15" fill="rgb(228,99,48)" fg:x="27" fg:w="9"/><text x="2.3777%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.55%)</title><rect x="2.2853%" y="485" width="0.5516%" height="15" fill="rgb(253,11,6)" fg:x="29" fg:w="7"/><text x="2.5353%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="2.6793%" y="469" width="0.1576%" height="15" fill="rgb(247,143,39)" fg:x="34" fg:w="2"/><text x="2.9293%" y="479.50"></text></g><g><title>engine::session::Session::flush (23 samples, 1.81%)</title><rect x="1.1032%" y="661" width="1.8125%" height="15" fill="rgb(236,97,10)" fg:x="14" fg:w="23"/><text x="1.3532%" y="671.50">e..</text></g><g><title>engine::session::state::State::close (22 samples, 1.73%)</title><rect x="1.1820%" y="645" width="1.7336%" height="15" fill="rgb(233,208,19)" fg:x="15" fg:w="22"/><text x="1.4320%" y="655.50"></text></g><g><title>engine::session::state::State::flush_entities (22 samples, 1.73%)</title><rect x="1.1820%" y="629" width="1.7336%" height="15" fill="rgb(216,164,2)" fg:x="15" fg:w="22"/><text x="1.4320%" y="639.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (21 samples, 1.65%)</title><rect x="1.2608%" y="613" width="1.6548%" height="15" fill="rgb(220,129,5)" fg:x="16" fg:w="21"/><text x="1.5108%" y="623.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (21 samples, 1.65%)</title><rect x="1.2608%" y="597" width="1.6548%" height="15" fill="rgb(242,17,10)" fg:x="16" fg:w="21"/><text x="1.5108%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (12 samples, 0.95%)</title><rect x="1.9701%" y="581" width="0.9456%" height="15" fill="rgb(242,107,0)" fg:x="25" fg:w="12"/><text x="2.2201%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.95%)</title><rect x="1.9701%" y="565" width="0.9456%" height="15" fill="rgb(251,28,31)" fg:x="25" fg:w="12"/><text x="2.2201%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.95%)</title><rect x="1.9701%" y="549" width="0.9456%" height="15" fill="rgb(233,223,10)" fg:x="25" fg:w="12"/><text x="2.2201%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.79%)</title><rect x="2.1277%" y="533" width="0.7880%" height="15" fill="rgb(215,21,27)" fg:x="27" fg:w="10"/><text x="2.3777%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (10 samples, 0.79%)</title><rect x="2.1277%" y="517" width="0.7880%" height="15" fill="rgb(232,23,21)" fg:x="27" fg:w="10"/><text x="2.3777%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="2.8369%" y="501" width="0.0788%" height="15" fill="rgb(244,5,23)" fg:x="36" fg:w="1"/><text x="3.0869%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8369%" y="485" width="0.0788%" height="15" fill="rgb(226,81,46)" fg:x="36" fg:w="1"/><text x="3.0869%" y="495.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="2.9157%" y="613" width="0.0788%" height="15" fill="rgb(247,70,30)" fg:x="37" fg:w="1"/><text x="3.1657%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="2.9157%" y="597" width="0.0788%" height="15" fill="rgb(212,68,19)" fg:x="37" fg:w="1"/><text x="3.1657%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="2.9157%" y="581" width="0.0788%" height="15" fill="rgb(240,187,13)" fg:x="37" fg:w="1"/><text x="3.1657%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.9157%" y="565" width="0.0788%" height="15" fill="rgb(223,113,26)" fg:x="37" fg:w="1"/><text x="3.1657%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.9157%" y="549" width="0.0788%" height="15" fill="rgb(206,192,2)" fg:x="37" fg:w="1"/><text x="3.1657%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.9157%" y="533" width="0.0788%" height="15" fill="rgb(241,108,4)" fg:x="37" fg:w="1"/><text x="3.1657%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.9157%" y="517" width="0.0788%" height="15" fill="rgb(247,173,49)" fg:x="37" fg:w="1"/><text x="3.1657%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.9157%" y="501" width="0.0788%" height="15" fill="rgb(224,114,35)" fg:x="37" fg:w="1"/><text x="3.1657%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.9157%" y="485" width="0.0788%" height="15" fill="rgb(245,159,27)" fg:x="37" fg:w="1"/><text x="3.1657%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.9157%" y="469" width="0.0788%" height="15" fill="rgb(245,172,44)" fg:x="37" fg:w="1"/><text x="3.1657%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="2.9157%" y="645" width="0.1576%" height="15" fill="rgb(236,23,11)" fg:x="37" fg:w="2"/><text x="3.1657%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="2.9157%" y="629" width="0.1576%" height="15" fill="rgb(205,117,38)" fg:x="37" fg:w="2"/><text x="3.1657%" y="639.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="2.9945%" y="613" width="0.0788%" height="15" fill="rgb(237,72,25)" fg:x="38" fg:w="1"/><text x="3.2445%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9945%" y="597" width="0.0788%" height="15" fill="rgb(244,70,9)" fg:x="38" fg:w="1"/><text x="3.2445%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9945%" y="581" width="0.0788%" height="15" fill="rgb(217,125,39)" fg:x="38" fg:w="1"/><text x="3.2445%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="2.9945%" y="565" width="0.0788%" height="15" fill="rgb(235,36,10)" fg:x="38" fg:w="1"/><text x="3.2445%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.9945%" y="549" width="0.0788%" height="15" fill="rgb(251,123,47)" fg:x="38" fg:w="1"/><text x="3.2445%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.1521%" y="613" width="0.0788%" height="15" fill="rgb(221,13,13)" fg:x="40" fg:w="1"/><text x="3.4021%" y="623.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="3.1521%" y="629" width="0.1576%" height="15" fill="rgb(238,131,9)" fg:x="40" fg:w="2"/><text x="3.4021%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.2309%" y="613" width="0.0788%" height="15" fill="rgb(211,50,8)" fg:x="41" fg:w="1"/><text x="3.4809%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.2309%" y="597" width="0.0788%" height="15" fill="rgb(245,182,24)" fg:x="41" fg:w="1"/><text x="3.4809%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3097%" y="485" width="0.0788%" height="15" fill="rgb(242,14,37)" fg:x="42" fg:w="1"/><text x="3.5597%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3097%" y="469" width="0.0788%" height="15" fill="rgb(246,228,12)" fg:x="42" fg:w="1"/><text x="3.5597%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.3097%" y="581" width="0.1576%" height="15" fill="rgb(213,55,15)" fg:x="42" fg:w="2"/><text x="3.5597%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="3.3097%" y="565" width="0.1576%" height="15" fill="rgb(209,9,3)" fg:x="42" fg:w="2"/><text x="3.5597%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="3.3097%" y="549" width="0.1576%" height="15" fill="rgb(230,59,30)" fg:x="42" fg:w="2"/><text x="3.5597%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="3.3097%" y="533" width="0.1576%" height="15" fill="rgb(209,121,21)" fg:x="42" fg:w="2"/><text x="3.5597%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="3.3097%" y="517" width="0.1576%" height="15" fill="rgb(220,109,13)" fg:x="42" fg:w="2"/><text x="3.5597%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="3.3097%" y="501" width="0.1576%" height="15" fill="rgb(232,18,1)" fg:x="42" fg:w="2"/><text x="3.5597%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.3885%" y="485" width="0.0788%" height="15" fill="rgb(215,41,42)" fg:x="43" fg:w="1"/><text x="3.6385%" y="495.50"></text></g><g><title>plugins_core::build::Build::holding (8 samples, 0.63%)</title><rect x="2.9157%" y="661" width="0.6304%" height="15" fill="rgb(224,123,36)" fg:x="37" fg:w="8"/><text x="3.1657%" y="671.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.47%)</title><rect x="3.0733%" y="645" width="0.4728%" height="15" fill="rgb(240,125,3)" fg:x="39" fg:w="6"/><text x="3.3233%" y="655.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="3.3097%" y="629" width="0.2364%" height="15" fill="rgb(205,98,50)" fg:x="42" fg:w="3"/><text x="3.5597%" y="639.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="3.3097%" y="613" width="0.2364%" height="15" fill="rgb(205,185,37)" fg:x="42" fg:w="3"/><text x="3.5597%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="3.3097%" y="597" width="0.2364%" height="15" fill="rgb(238,207,15)" fg:x="42" fg:w="3"/><text x="3.5597%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.4673%" y="581" width="0.0788%" height="15" fill="rgb(213,199,42)" fg:x="44" fg:w="1"/><text x="3.7173%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.4673%" y="565" width="0.0788%" height="15" fill="rgb(235,201,11)" fg:x="44" fg:w="1"/><text x="3.7173%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5461%" y="549" width="0.0788%" height="15" fill="rgb(207,46,11)" fg:x="45" fg:w="1"/><text x="3.7961%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.5461%" y="533" width="0.0788%" height="15" fill="rgb(241,35,35)" fg:x="45" fg:w="1"/><text x="3.7961%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.5461%" y="517" width="0.0788%" height="15" fill="rgb(243,32,47)" fg:x="45" fg:w="1"/><text x="3.7961%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.5461%" y="501" width="0.0788%" height="15" fill="rgb(247,202,23)" fg:x="45" fg:w="1"/><text x="3.7961%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.5461%" y="485" width="0.0788%" height="15" fill="rgb(219,102,11)" fg:x="45" fg:w="1"/><text x="3.7961%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.5461%" y="469" width="0.0788%" height="15" fill="rgb(243,110,44)" fg:x="45" fg:w="1"/><text x="3.7961%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.5461%" y="453" width="0.0788%" height="15" fill="rgb(222,74,54)" fg:x="45" fg:w="1"/><text x="3.7961%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.5461%" y="437" width="0.0788%" height="15" fill="rgb(216,99,12)" fg:x="45" fg:w="1"/><text x="3.7961%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.5461%" y="421" width="0.0788%" height="15" fill="rgb(226,22,26)" fg:x="45" fg:w="1"/><text x="3.7961%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.5461%" y="405" width="0.0788%" height="15" fill="rgb(217,163,10)" fg:x="45" fg:w="1"/><text x="3.7961%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.5461%" y="389" width="0.0788%" height="15" fill="rgb(213,25,53)" fg:x="45" fg:w="1"/><text x="3.7961%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.5461%" y="373" width="0.0788%" height="15" fill="rgb(252,105,26)" fg:x="45" fg:w="1"/><text x="3.7961%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.5461%" y="357" width="0.0788%" height="15" fill="rgb(220,39,43)" fg:x="45" fg:w="1"/><text x="3.7961%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.5461%" y="629" width="0.1576%" height="15" fill="rgb(229,68,48)" fg:x="45" fg:w="2"/><text x="3.7961%" y="639.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="3.5461%" y="613" width="0.1576%" height="15" fill="rgb(252,8,32)" fg:x="45" fg:w="2"/><text x="3.7961%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="3.5461%" y="597" width="0.1576%" height="15" fill="rgb(223,20,43)" fg:x="45" fg:w="2"/><text x="3.7961%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="3.5461%" y="581" width="0.1576%" height="15" fill="rgb(229,81,49)" fg:x="45" fg:w="2"/><text x="3.7961%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="3.5461%" y="565" width="0.1576%" height="15" fill="rgb(236,28,36)" fg:x="45" fg:w="2"/><text x="3.7961%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.6249%" y="549" width="0.0788%" height="15" fill="rgb(249,185,26)" fg:x="46" fg:w="1"/><text x="3.8749%" y="559.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="3.7037%" y="629" width="0.0788%" height="15" fill="rgb(249,174,33)" fg:x="47" fg:w="1"/><text x="3.9537%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="3.7037%" y="613" width="0.0788%" height="15" fill="rgb(233,201,37)" fg:x="47" fg:w="1"/><text x="3.9537%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.7037%" y="597" width="0.0788%" height="15" fill="rgb(221,78,26)" fg:x="47" fg:w="1"/><text x="3.9537%" y="607.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.7037%" y="581" width="0.0788%" height="15" fill="rgb(250,127,30)" fg:x="47" fg:w="1"/><text x="3.9537%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7037%" y="565" width="0.0788%" height="15" fill="rgb(230,49,44)" fg:x="47" fg:w="1"/><text x="3.9537%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7825%" y="549" width="0.0788%" height="15" fill="rgb(229,67,23)" fg:x="48" fg:w="1"/><text x="4.0325%" y="559.50"></text></g><g><title>plugins_core::build::Build::into_entry (6 samples, 0.47%)</title><rect x="3.5461%" y="661" width="0.4728%" height="15" fill="rgb(249,83,47)" fg:x="45" fg:w="6"/><text x="3.7961%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.47%)</title><rect x="3.5461%" y="645" width="0.4728%" height="15" fill="rgb(215,43,3)" fg:x="45" fg:w="6"/><text x="3.7961%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="3.7825%" y="629" width="0.2364%" height="15" fill="rgb(238,154,13)" fg:x="48" fg:w="3"/><text x="4.0325%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="3.7825%" y="613" width="0.2364%" height="15" fill="rgb(219,56,2)" fg:x="48" fg:w="3"/><text x="4.0325%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="3.7825%" y="597" width="0.2364%" height="15" fill="rgb(233,0,4)" fg:x="48" fg:w="3"/><text x="4.0325%" y="607.50"></text></g><g><title>kernel::model::props::save_props (3 samples, 0.24%)</title><rect x="3.7825%" y="581" width="0.2364%" height="15" fill="rgb(235,30,7)" fg:x="48" fg:w="3"/><text x="4.0325%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (3 samples, 0.24%)</title><rect x="3.7825%" y="565" width="0.2364%" height="15" fill="rgb(250,79,13)" fg:x="48" fg:w="3"/><text x="4.0325%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="3.8613%" y="549" width="0.1576%" height="15" fill="rgb(211,146,34)" fg:x="49" fg:w="2"/><text x="4.1113%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="3.8613%" y="533" width="0.1576%" height="15" fill="rgb(228,22,38)" fg:x="49" fg:w="2"/><text x="4.1113%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="3.8613%" y="517" width="0.1576%" height="15" fill="rgb(235,168,5)" fg:x="49" fg:w="2"/><text x="4.1113%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="3.8613%" y="501" width="0.1576%" height="15" fill="rgb(221,155,16)" fg:x="49" fg:w="2"/><text x="4.1113%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="3.8613%" y="485" width="0.1576%" height="15" fill="rgb(215,215,53)" fg:x="49" fg:w="2"/><text x="4.1113%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="3.9401%" y="469" width="0.0788%" height="15" fill="rgb(223,4,10)" fg:x="50" fg:w="1"/><text x="4.1901%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.9401%" y="453" width="0.0788%" height="15" fill="rgb(234,103,6)" fg:x="50" fg:w="1"/><text x="4.1901%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.9401%" y="437" width="0.0788%" height="15" fill="rgb(227,97,0)" fg:x="50" fg:w="1"/><text x="4.1901%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.9401%" y="421" width="0.0788%" height="15" fill="rgb(234,150,53)" fg:x="50" fg:w="1"/><text x="4.1901%" y="431.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="4.0189%" y="661" width="0.1576%" height="15" fill="rgb(228,201,54)" fg:x="51" fg:w="2"/><text x="4.2689%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="4.0977%" y="645" width="0.0788%" height="15" fill="rgb(222,22,37)" fg:x="52" fg:w="1"/><text x="4.3477%" y="655.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="4.0977%" y="629" width="0.0788%" height="15" fill="rgb(237,53,32)" fg:x="52" fg:w="1"/><text x="4.3477%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.0977%" y="613" width="0.0788%" height="15" fill="rgb(233,25,53)" fg:x="52" fg:w="1"/><text x="4.3477%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.0977%" y="597" width="0.0788%" height="15" fill="rgb(210,40,34)" fg:x="52" fg:w="1"/><text x="4.3477%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.0977%" y="581" width="0.0788%" height="15" fill="rgb(241,220,44)" fg:x="52" fg:w="1"/><text x="4.3477%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="4.0977%" y="565" width="0.0788%" height="15" fill="rgb(235,28,35)" fg:x="52" fg:w="1"/><text x="4.3477%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="4.2553%" y="629" width="0.0788%" height="15" fill="rgb(210,56,17)" fg:x="54" fg:w="1"/><text x="4.5053%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="4.2553%" y="613" width="0.0788%" height="15" fill="rgb(224,130,29)" fg:x="54" fg:w="1"/><text x="4.5053%" y="623.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="4.2553%" y="597" width="0.0788%" height="15" fill="rgb(235,212,8)" fg:x="54" fg:w="1"/><text x="4.5053%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.4129%" y="517" width="0.0788%" height="15" fill="rgb(223,33,50)" fg:x="56" fg:w="1"/><text x="4.6629%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.39%)</title><rect x="4.2553%" y="645" width="0.3940%" height="15" fill="rgb(219,149,13)" fg:x="54" fg:w="5"/><text x="4.5053%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="4.3341%" y="629" width="0.3152%" height="15" fill="rgb(250,156,29)" fg:x="55" fg:w="4"/><text x="4.5841%" y="639.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="4.3341%" y="613" width="0.3152%" height="15" fill="rgb(216,193,19)" fg:x="55" fg:w="4"/><text x="4.5841%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="4.3341%" y="597" width="0.3152%" height="15" fill="rgb(216,135,14)" fg:x="55" fg:w="4"/><text x="4.5841%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="4.3341%" y="581" width="0.3152%" height="15" fill="rgb(241,47,5)" fg:x="55" fg:w="4"/><text x="4.5841%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="4.3341%" y="565" width="0.3152%" height="15" fill="rgb(233,42,35)" fg:x="55" fg:w="4"/><text x="4.5841%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="4.4129%" y="549" width="0.2364%" height="15" fill="rgb(231,13,6)" fg:x="56" fg:w="3"/><text x="4.6629%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="4.4129%" y="533" width="0.2364%" height="15" fill="rgb(207,181,40)" fg:x="56" fg:w="3"/><text x="4.6629%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="4.4917%" y="517" width="0.1576%" height="15" fill="rgb(254,173,49)" fg:x="57" fg:w="2"/><text x="4.7417%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="4.4917%" y="501" width="0.1576%" height="15" fill="rgb(221,1,38)" fg:x="57" fg:w="2"/><text x="4.7417%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="4.4917%" y="485" width="0.1576%" height="15" fill="rgb(206,124,46)" fg:x="57" fg:w="2"/><text x="4.7417%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="4.4917%" y="469" width="0.1576%" height="15" fill="rgb(249,21,11)" fg:x="57" fg:w="2"/><text x="4.7417%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="4.4917%" y="453" width="0.1576%" height="15" fill="rgb(222,201,40)" fg:x="57" fg:w="2"/><text x="4.7417%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="4.4917%" y="437" width="0.1576%" height="15" fill="rgb(235,61,29)" fg:x="57" fg:w="2"/><text x="4.7417%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="4.4917%" y="421" width="0.1576%" height="15" fill="rgb(219,207,3)" fg:x="57" fg:w="2"/><text x="4.7417%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="4.4917%" y="405" width="0.1576%" height="15" fill="rgb(222,56,46)" fg:x="57" fg:w="2"/><text x="4.7417%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="4.4917%" y="389" width="0.1576%" height="15" fill="rgb(239,76,54)" fg:x="57" fg:w="2"/><text x="4.7417%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="4.4917%" y="373" width="0.1576%" height="15" fill="rgb(231,124,27)" fg:x="57" fg:w="2"/><text x="4.7417%" y="383.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="4.4917%" y="357" width="0.1576%" height="15" fill="rgb(249,195,6)" fg:x="57" fg:w="2"/><text x="4.7417%" y="367.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="4.4917%" y="341" width="0.1576%" height="15" fill="rgb(237,174,47)" fg:x="57" fg:w="2"/><text x="4.7417%" y="351.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="4.6493%" y="597" width="0.0788%" height="15" fill="rgb(206,201,31)" fg:x="59" fg:w="1"/><text x="4.8993%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.6493%" y="581" width="0.0788%" height="15" fill="rgb(231,57,52)" fg:x="59" fg:w="1"/><text x="4.8993%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.6493%" y="565" width="0.0788%" height="15" fill="rgb(248,177,22)" fg:x="59" fg:w="1"/><text x="4.8993%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.6493%" y="549" width="0.0788%" height="15" fill="rgb(215,211,37)" fg:x="59" fg:w="1"/><text x="4.8993%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.6493%" y="533" width="0.0788%" height="15" fill="rgb(241,128,51)" fg:x="59" fg:w="1"/><text x="4.8993%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.6493%" y="517" width="0.0788%" height="15" fill="rgb(227,165,31)" fg:x="59" fg:w="1"/><text x="4.8993%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.6493%" y="501" width="0.0788%" height="15" fill="rgb(228,167,24)" fg:x="59" fg:w="1"/><text x="4.8993%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.6493%" y="485" width="0.0788%" height="15" fill="rgb(228,143,12)" fg:x="59" fg:w="1"/><text x="4.8993%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.6493%" y="469" width="0.0788%" height="15" fill="rgb(249,149,8)" fg:x="59" fg:w="1"/><text x="4.8993%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.6493%" y="453" width="0.0788%" height="15" fill="rgb(243,35,44)" fg:x="59" fg:w="1"/><text x="4.8993%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.7281%" y="565" width="0.0788%" height="15" fill="rgb(246,89,9)" fg:x="60" fg:w="1"/><text x="4.9781%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.7281%" y="549" width="0.0788%" height="15" fill="rgb(233,213,13)" fg:x="60" fg:w="1"/><text x="4.9781%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.7281%" y="533" width="0.0788%" height="15" fill="rgb(233,141,41)" fg:x="60" fg:w="1"/><text x="4.9781%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.7281%" y="517" width="0.0788%" height="15" fill="rgb(239,167,4)" fg:x="60" fg:w="1"/><text x="4.9781%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.7281%" y="501" width="0.0788%" height="15" fill="rgb(209,217,16)" fg:x="60" fg:w="1"/><text x="4.9781%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.7281%" y="485" width="0.0788%" height="15" fill="rgb(219,88,35)" fg:x="60" fg:w="1"/><text x="4.9781%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.7281%" y="469" width="0.0788%" height="15" fill="rgb(220,193,23)" fg:x="60" fg:w="1"/><text x="4.9781%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="4.7281%" y="453" width="0.0788%" height="15" fill="rgb(230,90,52)" fg:x="60" fg:w="1"/><text x="4.9781%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.7281%" y="437" width="0.0788%" height="15" fill="rgb(252,106,19)" fg:x="60" fg:w="1"/><text x="4.9781%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="4.7281%" y="421" width="0.0788%" height="15" fill="rgb(206,74,20)" fg:x="60" fg:w="1"/><text x="4.9781%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="4.7281%" y="581" width="0.1576%" height="15" fill="rgb(230,138,44)" fg:x="60" fg:w="2"/><text x="4.9781%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="4.8069%" y="565" width="0.0788%" height="15" fill="rgb(235,182,43)" fg:x="61" fg:w="1"/><text x="5.0569%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.8069%" y="549" width="0.0788%" height="15" fill="rgb(242,16,51)" fg:x="61" fg:w="1"/><text x="5.0569%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.8069%" y="533" width="0.0788%" height="15" fill="rgb(248,9,4)" fg:x="61" fg:w="1"/><text x="5.0569%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.8857%" y="453" width="0.0788%" height="15" fill="rgb(210,31,22)" fg:x="62" fg:w="1"/><text x="5.1357%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.8857%" y="437" width="0.0788%" height="15" fill="rgb(239,54,39)" fg:x="62" fg:w="1"/><text x="5.1357%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="4.8857%" y="533" width="0.1576%" height="15" fill="rgb(230,99,41)" fg:x="62" fg:w="2"/><text x="5.1357%" y="543.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="4.8857%" y="517" width="0.1576%" height="15" fill="rgb(253,106,12)" fg:x="62" fg:w="2"/><text x="5.1357%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="4.8857%" y="501" width="0.1576%" height="15" fill="rgb(213,46,41)" fg:x="62" fg:w="2"/><text x="5.1357%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.8857%" y="485" width="0.1576%" height="15" fill="rgb(215,133,35)" fg:x="62" fg:w="2"/><text x="5.1357%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.8857%" y="469" width="0.1576%" height="15" fill="rgb(213,28,5)" fg:x="62" fg:w="2"/><text x="5.1357%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.9645%" y="453" width="0.0788%" height="15" fill="rgb(215,77,49)" fg:x="63" fg:w="1"/><text x="5.2145%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.9645%" y="437" width="0.0788%" height="15" fill="rgb(248,100,22)" fg:x="63" fg:w="1"/><text x="5.2145%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.9645%" y="421" width="0.0788%" height="15" fill="rgb(208,67,9)" fg:x="63" fg:w="1"/><text x="5.2145%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.9645%" y="405" width="0.0788%" height="15" fill="rgb(219,133,21)" fg:x="63" fg:w="1"/><text x="5.2145%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.9645%" y="389" width="0.0788%" height="15" fill="rgb(246,46,29)" fg:x="63" fg:w="1"/><text x="5.2145%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.9645%" y="373" width="0.0788%" height="15" fill="rgb(246,185,52)" fg:x="63" fg:w="1"/><text x="5.2145%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.9645%" y="357" width="0.0788%" height="15" fill="rgb(252,136,11)" fg:x="63" fg:w="1"/><text x="5.2145%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.9645%" y="341" width="0.0788%" height="15" fill="rgb(219,138,53)" fg:x="63" fg:w="1"/><text x="5.2145%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.9645%" y="325" width="0.0788%" height="15" fill="rgb(211,51,23)" fg:x="63" fg:w="1"/><text x="5.2145%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.9645%" y="309" width="0.0788%" height="15" fill="rgb(247,221,28)" fg:x="63" fg:w="1"/><text x="5.2145%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.9645%" y="293" width="0.0788%" height="15" fill="rgb(251,222,45)" fg:x="63" fg:w="1"/><text x="5.2145%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.9645%" y="277" width="0.0788%" height="15" fill="rgb(217,162,53)" fg:x="63" fg:w="1"/><text x="5.2145%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.0433%" y="421" width="0.0788%" height="15" fill="rgb(229,93,14)" fg:x="64" fg:w="1"/><text x="5.2933%" y="431.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (4 samples, 0.32%)</title><rect x="4.8857%" y="565" width="0.3152%" height="15" fill="rgb(209,67,49)" fg:x="62" fg:w="4"/><text x="5.1357%" y="575.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (4 samples, 0.32%)</title><rect x="4.8857%" y="549" width="0.3152%" height="15" fill="rgb(213,87,29)" fg:x="62" fg:w="4"/><text x="5.1357%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="5.0433%" y="533" width="0.1576%" height="15" fill="rgb(205,151,52)" fg:x="64" fg:w="2"/><text x="5.2933%" y="543.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="5.0433%" y="517" width="0.1576%" height="15" fill="rgb(253,215,39)" fg:x="64" fg:w="2"/><text x="5.2933%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="5.0433%" y="501" width="0.1576%" height="15" fill="rgb(221,220,41)" fg:x="64" fg:w="2"/><text x="5.2933%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="5.0433%" y="485" width="0.1576%" height="15" fill="rgb(218,133,21)" fg:x="64" fg:w="2"/><text x="5.2933%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="5.0433%" y="469" width="0.1576%" height="15" fill="rgb(221,193,43)" fg:x="64" fg:w="2"/><text x="5.2933%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="5.0433%" y="453" width="0.1576%" height="15" fill="rgb(240,128,52)" fg:x="64" fg:w="2"/><text x="5.2933%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="5.0433%" y="437" width="0.1576%" height="15" fill="rgb(253,114,12)" fg:x="64" fg:w="2"/><text x="5.2933%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.1221%" y="421" width="0.0788%" height="15" fill="rgb(215,223,47)" fg:x="65" fg:w="1"/><text x="5.3721%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.1221%" y="405" width="0.0788%" height="15" fill="rgb(248,225,23)" fg:x="65" fg:w="1"/><text x="5.3721%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.1221%" y="389" width="0.0788%" height="15" fill="rgb(250,108,0)" fg:x="65" fg:w="1"/><text x="5.3721%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.1221%" y="373" width="0.0788%" height="15" fill="rgb(228,208,7)" fg:x="65" fg:w="1"/><text x="5.3721%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.1221%" y="357" width="0.0788%" height="15" fill="rgb(244,45,10)" fg:x="65" fg:w="1"/><text x="5.3721%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.1221%" y="341" width="0.0788%" height="15" fill="rgb(207,125,25)" fg:x="65" fg:w="1"/><text x="5.3721%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.1221%" y="325" width="0.0788%" height="15" fill="rgb(210,195,18)" fg:x="65" fg:w="1"/><text x="5.3721%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.1221%" y="309" width="0.0788%" height="15" fill="rgb(249,80,12)" fg:x="65" fg:w="1"/><text x="5.3721%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.1221%" y="293" width="0.0788%" height="15" fill="rgb(221,65,9)" fg:x="65" fg:w="1"/><text x="5.3721%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.1221%" y="277" width="0.0788%" height="15" fill="rgb(235,49,36)" fg:x="65" fg:w="1"/><text x="5.3721%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.1221%" y="261" width="0.0788%" height="15" fill="rgb(225,32,20)" fg:x="65" fg:w="1"/><text x="5.3721%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.1221%" y="245" width="0.0788%" height="15" fill="rgb(215,141,46)" fg:x="65" fg:w="1"/><text x="5.3721%" y="255.50"></text></g><g><title>plugins_core::build::Build::leads_to (7 samples, 0.55%)</title><rect x="4.7281%" y="597" width="0.5516%" height="15" fill="rgb(250,160,47)" fg:x="60" fg:w="7"/><text x="4.9781%" y="607.50"></text></g><g><title>plugins_core::tools::leads_to (5 samples, 0.39%)</title><rect x="4.8857%" y="581" width="0.3940%" height="15" fill="rgb(216,222,40)" fg:x="62" fg:w="5"/><text x="5.1357%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="5.2009%" y="565" width="0.0788%" height="15" fill="rgb(234,217,39)" fg:x="66" fg:w="1"/><text x="5.4509%" y="575.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Exit&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2009%" y="549" width="0.0788%" height="15" fill="rgb(207,178,40)" fg:x="66" fg:w="1"/><text x="5.4509%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.2009%" y="533" width="0.0788%" height="15" fill="rgb(221,136,13)" fg:x="66" fg:w="1"/><text x="5.4509%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2009%" y="517" width="0.0788%" height="15" fill="rgb(249,199,10)" fg:x="66" fg:w="1"/><text x="5.4509%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.2009%" y="501" width="0.0788%" height="15" fill="rgb(249,222,13)" fg:x="66" fg:w="1"/><text x="5.4509%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.2009%" y="485" width="0.0788%" height="15" fill="rgb(244,185,38)" fg:x="66" fg:w="1"/><text x="5.4509%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (9 samples, 0.71%)</title><rect x="4.6493%" y="645" width="0.7092%" height="15" fill="rgb(236,202,9)" fg:x="59" fg:w="9"/><text x="4.8993%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.71%)</title><rect x="4.6493%" y="629" width="0.7092%" height="15" fill="rgb(250,229,37)" fg:x="59" fg:w="9"/><text x="4.8993%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (9 samples, 0.71%)</title><rect x="4.6493%" y="613" width="0.7092%" height="15" fill="rgb(206,174,23)" fg:x="59" fg:w="9"/><text x="4.8993%" y="623.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="5.2797%" y="597" width="0.0788%" height="15" fill="rgb(211,33,43)" fg:x="67" fg:w="1"/><text x="5.5297%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="5.2797%" y="581" width="0.0788%" height="15" fill="rgb(245,58,50)" fg:x="67" fg:w="1"/><text x="5.5297%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="5.2797%" y="565" width="0.0788%" height="15" fill="rgb(244,68,36)" fg:x="67" fg:w="1"/><text x="5.5297%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="5.2797%" y="549" width="0.0788%" height="15" fill="rgb(232,229,15)" fg:x="67" fg:w="1"/><text x="5.5297%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2797%" y="533" width="0.0788%" height="15" fill="rgb(254,30,23)" fg:x="67" fg:w="1"/><text x="5.5297%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.2797%" y="517" width="0.0788%" height="15" fill="rgb(235,160,14)" fg:x="67" fg:w="1"/><text x="5.5297%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2797%" y="501" width="0.0788%" height="15" fill="rgb(212,155,44)" fg:x="67" fg:w="1"/><text x="5.5297%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.2797%" y="485" width="0.0788%" height="15" fill="rgb(226,2,50)" fg:x="67" fg:w="1"/><text x="5.5297%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.2797%" y="469" width="0.0788%" height="15" fill="rgb(234,177,6)" fg:x="67" fg:w="1"/><text x="5.5297%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.3586%" y="581" width="0.0788%" height="15" fill="rgb(217,24,9)" fg:x="68" fg:w="1"/><text x="5.6086%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.3586%" y="565" width="0.0788%" height="15" fill="rgb(220,13,46)" fg:x="68" fg:w="1"/><text x="5.6086%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="5.5162%" y="549" width="0.0788%" height="15" fill="rgb(239,221,27)" fg:x="70" fg:w="1"/><text x="5.7662%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="5.5162%" y="533" width="0.0788%" height="15" fill="rgb(222,198,25)" fg:x="70" fg:w="1"/><text x="5.7662%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.5162%" y="517" width="0.0788%" height="15" fill="rgb(211,99,13)" fg:x="70" fg:w="1"/><text x="5.7662%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="5.5162%" y="501" width="0.0788%" height="15" fill="rgb(232,111,31)" fg:x="70" fg:w="1"/><text x="5.7662%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.5162%" y="485" width="0.0788%" height="15" fill="rgb(245,82,37)" fg:x="70" fg:w="1"/><text x="5.7662%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.5162%" y="469" width="0.0788%" height="15" fill="rgb(227,149,46)" fg:x="70" fg:w="1"/><text x="5.7662%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.5162%" y="453" width="0.0788%" height="15" fill="rgb(218,36,50)" fg:x="70" fg:w="1"/><text x="5.7662%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.5162%" y="437" width="0.0788%" height="15" fill="rgb(226,80,48)" fg:x="70" fg:w="1"/><text x="5.7662%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="5.5950%" y="533" width="0.2364%" height="15" fill="rgb(238,224,15)" fg:x="71" fg:w="3"/><text x="5.8450%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="5.5950%" y="517" width="0.2364%" height="15" fill="rgb(241,136,10)" fg:x="71" fg:w="3"/><text x="5.8450%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.6738%" y="501" width="0.1576%" height="15" fill="rgb(208,32,45)" fg:x="72" fg:w="2"/><text x="5.9238%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="5.6738%" y="485" width="0.1576%" height="15" fill="rgb(207,135,9)" fg:x="72" fg:w="2"/><text x="5.9238%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="5.6738%" y="469" width="0.1576%" height="15" fill="rgb(206,86,44)" fg:x="72" fg:w="2"/><text x="5.9238%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.8314%" y="517" width="0.0788%" height="15" fill="rgb(245,177,15)" fg:x="74" fg:w="1"/><text x="6.0814%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.8314%" y="501" width="0.0788%" height="15" fill="rgb(206,64,50)" fg:x="74" fg:w="1"/><text x="6.0814%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.8314%" y="485" width="0.0788%" height="15" fill="rgb(234,36,40)" fg:x="74" fg:w="1"/><text x="6.0814%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.8314%" y="469" width="0.0788%" height="15" fill="rgb(213,64,8)" fg:x="74" fg:w="1"/><text x="6.0814%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.9890%" y="469" width="0.0788%" height="15" fill="rgb(210,75,36)" fg:x="76" fg:w="1"/><text x="6.2390%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.9890%" y="453" width="0.0788%" height="15" fill="rgb(229,88,21)" fg:x="76" fg:w="1"/><text x="6.2390%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="5.9102%" y="501" width="0.2364%" height="15" fill="rgb(252,204,47)" fg:x="75" fg:w="3"/><text x="6.1602%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.9890%" y="485" width="0.1576%" height="15" fill="rgb(208,77,27)" fg:x="76" fg:w="2"/><text x="6.2390%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.0678%" y="469" width="0.0788%" height="15" fill="rgb(221,76,26)" fg:x="77" fg:w="1"/><text x="6.3178%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.0678%" y="453" width="0.0788%" height="15" fill="rgb(225,139,18)" fg:x="77" fg:w="1"/><text x="6.3178%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.0678%" y="437" width="0.0788%" height="15" fill="rgb(230,137,11)" fg:x="77" fg:w="1"/><text x="6.3178%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.0678%" y="421" width="0.0788%" height="15" fill="rgb(212,28,1)" fg:x="77" fg:w="1"/><text x="6.3178%" y="431.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="6.0678%" y="405" width="0.0788%" height="15" fill="rgb(248,164,17)" fg:x="77" fg:w="1"/><text x="6.3178%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.1466%" y="501" width="0.0788%" height="15" fill="rgb(222,171,42)" fg:x="78" fg:w="1"/><text x="6.3966%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.2254%" y="485" width="0.0788%" height="15" fill="rgb(243,84,45)" fg:x="79" fg:w="1"/><text x="6.4754%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.2254%" y="469" width="0.0788%" height="15" fill="rgb(252,49,23)" fg:x="79" fg:w="1"/><text x="6.4754%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4618%" y="469" width="0.0788%" height="15" fill="rgb(215,19,7)" fg:x="82" fg:w="1"/><text x="6.7118%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.4618%" y="453" width="0.0788%" height="15" fill="rgb(238,81,41)" fg:x="82" fg:w="1"/><text x="6.7118%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.4618%" y="437" width="0.0788%" height="15" fill="rgb(210,199,37)" fg:x="82" fg:w="1"/><text x="6.7118%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (13 samples, 1.02%)</title><rect x="5.5950%" y="549" width="1.0244%" height="15" fill="rgb(244,192,49)" fg:x="71" fg:w="13"/><text x="5.8450%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.79%)</title><rect x="5.8314%" y="533" width="0.7880%" height="15" fill="rgb(226,211,11)" fg:x="74" fg:w="10"/><text x="6.0814%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.71%)</title><rect x="5.9102%" y="517" width="0.7092%" height="15" fill="rgb(236,162,54)" fg:x="75" fg:w="9"/><text x="6.1602%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="6.2254%" y="501" width="0.3940%" height="15" fill="rgb(220,229,9)" fg:x="79" fg:w="5"/><text x="6.4754%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="6.3042%" y="485" width="0.3152%" height="15" fill="rgb(250,87,22)" fg:x="80" fg:w="4"/><text x="6.5542%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.5406%" y="469" width="0.0788%" height="15" fill="rgb(239,43,17)" fg:x="83" fg:w="1"/><text x="6.7906%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.5406%" y="453" width="0.0788%" height="15" fill="rgb(231,177,25)" fg:x="83" fg:w="1"/><text x="6.7906%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.5406%" y="437" width="0.0788%" height="15" fill="rgb(219,179,1)" fg:x="83" fg:w="1"/><text x="6.7906%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.6982%" y="501" width="0.0788%" height="15" fill="rgb(238,219,53)" fg:x="85" fg:w="1"/><text x="6.9482%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.7770%" y="485" width="0.0788%" height="15" fill="rgb(232,167,36)" fg:x="86" fg:w="1"/><text x="7.0270%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.7770%" y="469" width="0.0788%" height="15" fill="rgb(244,19,51)" fg:x="86" fg:w="1"/><text x="7.0270%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="6.6194%" y="549" width="0.3152%" height="15" fill="rgb(224,6,22)" fg:x="84" fg:w="4"/><text x="6.8694%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="6.6194%" y="533" width="0.3152%" height="15" fill="rgb(224,145,5)" fg:x="84" fg:w="4"/><text x="6.8694%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="6.6194%" y="517" width="0.3152%" height="15" fill="rgb(234,130,49)" fg:x="84" fg:w="4"/><text x="6.8694%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.7770%" y="501" width="0.1576%" height="15" fill="rgb(254,6,2)" fg:x="86" fg:w="2"/><text x="7.0270%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.8558%" y="485" width="0.0788%" height="15" fill="rgb(208,96,46)" fg:x="87" fg:w="1"/><text x="7.1058%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="6.8558%" y="469" width="0.0788%" height="15" fill="rgb(239,3,39)" fg:x="87" fg:w="1"/><text x="7.1058%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.8558%" y="453" width="0.0788%" height="15" fill="rgb(233,210,1)" fg:x="87" fg:w="1"/><text x="7.1058%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.8558%" y="437" width="0.0788%" height="15" fill="rgb(244,137,37)" fg:x="87" fg:w="1"/><text x="7.1058%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="7.0134%" y="501" width="0.0788%" height="15" fill="rgb(240,136,2)" fg:x="89" fg:w="1"/><text x="7.2634%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.0134%" y="485" width="0.0788%" height="15" fill="rgb(239,18,37)" fg:x="89" fg:w="1"/><text x="7.2634%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="7.0922%" y="501" width="0.0788%" height="15" fill="rgb(218,185,22)" fg:x="90" fg:w="1"/><text x="7.3422%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.0922%" y="485" width="0.0788%" height="15" fill="rgb(225,218,4)" fg:x="90" fg:w="1"/><text x="7.3422%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.0922%" y="469" width="0.0788%" height="15" fill="rgb(230,182,32)" fg:x="90" fg:w="1"/><text x="7.3422%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.0922%" y="453" width="0.0788%" height="15" fill="rgb(242,56,43)" fg:x="90" fg:w="1"/><text x="7.3422%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="7.0922%" y="437" width="0.0788%" height="15" fill="rgb(233,99,24)" fg:x="90" fg:w="1"/><text x="7.3422%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="7.2498%" y="437" width="0.0788%" height="15" fill="rgb(234,209,42)" fg:x="92" fg:w="1"/><text x="7.4998%" y="447.50"></text></g><g><title>engine::session::Session::flush (26 samples, 2.05%)</title><rect x="5.3586%" y="645" width="2.0489%" height="15" fill="rgb(227,7,12)" fg:x="68" fg:w="26"/><text x="5.6086%" y="655.50">e..</text></g><g><title>engine::session::Session::save_changes (26 samples, 2.05%)</title><rect x="5.3586%" y="629" width="2.0489%" height="15" fill="rgb(245,203,43)" fg:x="68" fg:w="26"/><text x="5.6086%" y="639.50">e..</text></g><g><title>engine::session::state::State::close (26 samples, 2.05%)</title><rect x="5.3586%" y="613" width="2.0489%" height="15" fill="rgb(238,205,33)" fg:x="68" fg:w="26"/><text x="5.6086%" y="623.50">e..</text></g><g><title>engine::session::state::State::flush_entities (26 samples, 2.05%)</title><rect x="5.3586%" y="597" width="2.0489%" height="15" fill="rgb(231,56,7)" fg:x="68" fg:w="26"/><text x="5.6086%" y="607.50">e..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (25 samples, 1.97%)</title><rect x="5.4374%" y="581" width="1.9701%" height="15" fill="rgb(244,186,29)" fg:x="69" fg:w="25"/><text x="5.6874%" y="591.50">e..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (25 samples, 1.97%)</title><rect x="5.4374%" y="565" width="1.9701%" height="15" fill="rgb(234,111,31)" fg:x="69" fg:w="25"/><text x="5.6874%" y="575.50">e..</text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.47%)</title><rect x="6.9346%" y="549" width="0.4728%" height="15" fill="rgb(241,149,10)" fg:x="88" fg:w="6"/><text x="7.1846%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.47%)</title><rect x="6.9346%" y="533" width="0.4728%" height="15" fill="rgb(249,206,44)" fg:x="88" fg:w="6"/><text x="7.1846%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.47%)</title><rect x="6.9346%" y="517" width="0.4728%" height="15" fill="rgb(251,153,30)" fg:x="88" fg:w="6"/><text x="7.1846%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="7.1710%" y="501" width="0.2364%" height="15" fill="rgb(239,152,38)" fg:x="91" fg:w="3"/><text x="7.4210%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="7.2498%" y="485" width="0.1576%" height="15" fill="rgb(249,139,47)" fg:x="92" fg:w="2"/><text x="7.4998%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="7.2498%" y="469" width="0.1576%" height="15" fill="rgb(244,64,35)" fg:x="92" fg:w="2"/><text x="7.4998%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="7.2498%" y="453" width="0.1576%" height="15" fill="rgb(216,46,15)" fg:x="92" fg:w="2"/><text x="7.4998%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.3286%" y="437" width="0.0788%" height="15" fill="rgb(250,74,19)" fg:x="93" fg:w="1"/><text x="7.5786%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3286%" y="421" width="0.0788%" height="15" fill="rgb(249,42,33)" fg:x="93" fg:w="1"/><text x="7.5786%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.3286%" y="405" width="0.0788%" height="15" fill="rgb(242,149,17)" fg:x="93" fg:w="1"/><text x="7.5786%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3286%" y="389" width="0.0788%" height="15" fill="rgb(244,29,21)" fg:x="93" fg:w="1"/><text x="7.5786%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.3286%" y="373" width="0.0788%" height="15" fill="rgb(220,130,37)" fg:x="93" fg:w="1"/><text x="7.5786%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3286%" y="357" width="0.0788%" height="15" fill="rgb(211,67,2)" fg:x="93" fg:w="1"/><text x="7.5786%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.3286%" y="341" width="0.0788%" height="15" fill="rgb(235,68,52)" fg:x="93" fg:w="1"/><text x="7.5786%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.3286%" y="325" width="0.0788%" height="15" fill="rgb(246,142,3)" fg:x="93" fg:w="1"/><text x="7.5786%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="7.3286%" y="309" width="0.0788%" height="15" fill="rgb(241,25,7)" fg:x="93" fg:w="1"/><text x="7.5786%" y="319.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="7.4074%" y="645" width="0.0788%" height="15" fill="rgb(242,119,39)" fg:x="94" fg:w="1"/><text x="7.6574%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="7.4074%" y="629" width="0.0788%" height="15" fill="rgb(241,98,45)" fg:x="94" fg:w="1"/><text x="7.6574%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="7.4074%" y="613" width="0.0788%" height="15" fill="rgb(254,28,30)" fg:x="94" fg:w="1"/><text x="7.6574%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.4074%" y="597" width="0.0788%" height="15" fill="rgb(241,142,54)" fg:x="94" fg:w="1"/><text x="7.6574%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="7.4862%" y="597" width="0.0788%" height="15" fill="rgb(222,85,15)" fg:x="95" fg:w="1"/><text x="7.7362%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.4862%" y="581" width="0.0788%" height="15" fill="rgb(210,85,47)" fg:x="95" fg:w="1"/><text x="7.7362%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.4862%" y="565" width="0.0788%" height="15" fill="rgb(224,206,25)" fg:x="95" fg:w="1"/><text x="7.7362%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.4862%" y="549" width="0.0788%" height="15" fill="rgb(243,201,19)" fg:x="95" fg:w="1"/><text x="7.7362%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.4862%" y="533" width="0.0788%" height="15" fill="rgb(236,59,4)" fg:x="95" fg:w="1"/><text x="7.7362%" y="543.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="7.4862%" y="613" width="0.1576%" height="15" fill="rgb(254,179,45)" fg:x="95" fg:w="2"/><text x="7.7362%" y="623.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.5650%" y="597" width="0.0788%" height="15" fill="rgb(226,14,10)" fg:x="96" fg:w="1"/><text x="7.8150%" y="607.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="7.5650%" y="581" width="0.0788%" height="15" fill="rgb(244,27,41)" fg:x="96" fg:w="1"/><text x="7.8150%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.5650%" y="565" width="0.0788%" height="15" fill="rgb(235,35,32)" fg:x="96" fg:w="1"/><text x="7.8150%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="7.6438%" y="597" width="0.0788%" height="15" fill="rgb(218,68,31)" fg:x="97" fg:w="1"/><text x="7.8938%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="7.6438%" y="581" width="0.0788%" height="15" fill="rgb(207,120,37)" fg:x="97" fg:w="1"/><text x="7.8938%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.6438%" y="565" width="0.0788%" height="15" fill="rgb(227,98,0)" fg:x="97" fg:w="1"/><text x="7.8938%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.6438%" y="549" width="0.0788%" height="15" fill="rgb(207,7,3)" fg:x="97" fg:w="1"/><text x="7.8938%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="7.6438%" y="533" width="0.0788%" height="15" fill="rgb(206,98,19)" fg:x="97" fg:w="1"/><text x="7.8938%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.6438%" y="517" width="0.0788%" height="15" fill="rgb(217,5,26)" fg:x="97" fg:w="1"/><text x="7.8938%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="7.6438%" y="501" width="0.0788%" height="15" fill="rgb(235,190,38)" fg:x="97" fg:w="1"/><text x="7.8938%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.6438%" y="485" width="0.0788%" height="15" fill="rgb(247,86,24)" fg:x="97" fg:w="1"/><text x="7.8938%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="7.6438%" y="469" width="0.0788%" height="15" fill="rgb(205,101,16)" fg:x="97" fg:w="1"/><text x="7.8938%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="7.6438%" y="453" width="0.0788%" height="15" fill="rgb(246,168,33)" fg:x="97" fg:w="1"/><text x="7.8938%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.6438%" y="437" width="0.0788%" height="15" fill="rgb(231,114,1)" fg:x="97" fg:w="1"/><text x="7.8938%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="7.6438%" y="421" width="0.0788%" height="15" fill="rgb(207,184,53)" fg:x="97" fg:w="1"/><text x="7.8938%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="7.6438%" y="405" width="0.0788%" height="15" fill="rgb(224,95,51)" fg:x="97" fg:w="1"/><text x="7.8938%" y="415.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="7.6438%" y="613" width="0.1576%" height="15" fill="rgb(212,188,45)" fg:x="97" fg:w="2"/><text x="7.8938%" y="623.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="7.7226%" y="597" width="0.0788%" height="15" fill="rgb(223,154,38)" fg:x="98" fg:w="1"/><text x="7.9726%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.7226%" y="581" width="0.0788%" height="15" fill="rgb(251,22,52)" fg:x="98" fg:w="1"/><text x="7.9726%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.7226%" y="565" width="0.0788%" height="15" fill="rgb(229,209,22)" fg:x="98" fg:w="1"/><text x="7.9726%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.39%)</title><rect x="7.4862%" y="629" width="0.3940%" height="15" fill="rgb(234,138,34)" fg:x="95" fg:w="5"/><text x="7.7362%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="7.8014%" y="613" width="0.0788%" height="15" fill="rgb(212,95,11)" fg:x="99" fg:w="1"/><text x="8.0514%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.8014%" y="597" width="0.0788%" height="15" fill="rgb(240,179,47)" fg:x="99" fg:w="1"/><text x="8.0514%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.8014%" y="581" width="0.0788%" height="15" fill="rgb(240,163,11)" fg:x="99" fg:w="1"/><text x="8.0514%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.8014%" y="565" width="0.0788%" height="15" fill="rgb(236,37,12)" fg:x="99" fg:w="1"/><text x="8.0514%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.8014%" y="549" width="0.0788%" height="15" fill="rgb(232,164,16)" fg:x="99" fg:w="1"/><text x="8.0514%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.8014%" y="533" width="0.0788%" height="15" fill="rgb(244,205,15)" fg:x="99" fg:w="1"/><text x="8.0514%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.8014%" y="517" width="0.0788%" height="15" fill="rgb(223,117,47)" fg:x="99" fg:w="1"/><text x="8.0514%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.8014%" y="501" width="0.0788%" height="15" fill="rgb(244,107,35)" fg:x="99" fg:w="1"/><text x="8.0514%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.8014%" y="485" width="0.0788%" height="15" fill="rgb(205,140,8)" fg:x="99" fg:w="1"/><text x="8.0514%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.8014%" y="469" width="0.0788%" height="15" fill="rgb(228,84,46)" fg:x="99" fg:w="1"/><text x="8.0514%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.8014%" y="453" width="0.0788%" height="15" fill="rgb(254,188,9)" fg:x="99" fg:w="1"/><text x="8.0514%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.8014%" y="437" width="0.0788%" height="15" fill="rgb(206,112,54)" fg:x="99" fg:w="1"/><text x="8.0514%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="7.8802%" y="613" width="0.0788%" height="15" fill="rgb(216,84,49)" fg:x="100" fg:w="1"/><text x="8.1302%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="7.8802%" y="597" width="0.0788%" height="15" fill="rgb(214,194,35)" fg:x="100" fg:w="1"/><text x="8.1302%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.8802%" y="581" width="0.0788%" height="15" fill="rgb(249,28,3)" fg:x="100" fg:w="1"/><text x="8.1302%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.9590%" y="533" width="0.0788%" height="15" fill="rgb(222,56,52)" fg:x="101" fg:w="1"/><text x="8.2090%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.9590%" y="517" width="0.0788%" height="15" fill="rgb(245,217,50)" fg:x="101" fg:w="1"/><text x="8.2090%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.9590%" y="501" width="0.0788%" height="15" fill="rgb(213,201,24)" fg:x="101" fg:w="1"/><text x="8.2090%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="7.9590%" y="581" width="0.1576%" height="15" fill="rgb(248,116,28)" fg:x="101" fg:w="2"/><text x="8.2090%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="7.9590%" y="565" width="0.1576%" height="15" fill="rgb(219,72,43)" fg:x="101" fg:w="2"/><text x="8.2090%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="7.9590%" y="549" width="0.1576%" height="15" fill="rgb(209,138,14)" fg:x="101" fg:w="2"/><text x="8.2090%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.0378%" y="533" width="0.0788%" height="15" fill="rgb(222,18,33)" fg:x="102" fg:w="1"/><text x="8.2878%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.0378%" y="517" width="0.0788%" height="15" fill="rgb(213,199,7)" fg:x="102" fg:w="1"/><text x="8.2878%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.0378%" y="501" width="0.0788%" height="15" fill="rgb(250,110,10)" fg:x="102" fg:w="1"/><text x="8.2878%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.0378%" y="485" width="0.0788%" height="15" fill="rgb(248,123,6)" fg:x="102" fg:w="1"/><text x="8.2878%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.0378%" y="469" width="0.0788%" height="15" fill="rgb(206,91,31)" fg:x="102" fg:w="1"/><text x="8.2878%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.0378%" y="453" width="0.0788%" height="15" fill="rgb(211,154,13)" fg:x="102" fg:w="1"/><text x="8.2878%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.0378%" y="437" width="0.0788%" height="15" fill="rgb(225,148,7)" fg:x="102" fg:w="1"/><text x="8.2878%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.0378%" y="421" width="0.0788%" height="15" fill="rgb(220,160,43)" fg:x="102" fg:w="1"/><text x="8.2878%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.1166%" y="437" width="0.0788%" height="15" fill="rgb(213,52,39)" fg:x="103" fg:w="1"/><text x="8.3666%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.1166%" y="421" width="0.0788%" height="15" fill="rgb(243,137,7)" fg:x="103" fg:w="1"/><text x="8.3666%" y="431.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (4 samples, 0.32%)</title><rect x="7.9590%" y="613" width="0.3152%" height="15" fill="rgb(230,79,13)" fg:x="101" fg:w="4"/><text x="8.2090%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (4 samples, 0.32%)</title><rect x="7.9590%" y="597" width="0.3152%" height="15" fill="rgb(247,105,23)" fg:x="101" fg:w="4"/><text x="8.2090%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="8.1166%" y="581" width="0.1576%" height="15" fill="rgb(223,179,41)" fg:x="103" fg:w="2"/><text x="8.3666%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="8.1166%" y="565" width="0.1576%" height="15" fill="rgb(218,9,34)" fg:x="103" fg:w="2"/><text x="8.3666%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="8.1166%" y="549" width="0.1576%" height="15" fill="rgb(222,106,8)" fg:x="103" fg:w="2"/><text x="8.3666%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="8.1166%" y="533" width="0.1576%" height="15" fill="rgb(211,220,0)" fg:x="103" fg:w="2"/><text x="8.3666%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.1166%" y="517" width="0.1576%" height="15" fill="rgb(229,52,16)" fg:x="103" fg:w="2"/><text x="8.3666%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="8.1166%" y="501" width="0.1576%" height="15" fill="rgb(212,155,18)" fg:x="103" fg:w="2"/><text x="8.3666%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.1166%" y="485" width="0.1576%" height="15" fill="rgb(242,21,14)" fg:x="103" fg:w="2"/><text x="8.3666%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="8.1166%" y="469" width="0.1576%" height="15" fill="rgb(222,19,48)" fg:x="103" fg:w="2"/><text x="8.3666%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.1166%" y="453" width="0.1576%" height="15" fill="rgb(232,45,27)" fg:x="103" fg:w="2"/><text x="8.3666%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.1954%" y="437" width="0.0788%" height="15" fill="rgb(249,103,42)" fg:x="104" fg:w="1"/><text x="8.4454%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1954%" y="421" width="0.0788%" height="15" fill="rgb(246,81,33)" fg:x="104" fg:w="1"/><text x="8.4454%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.1954%" y="405" width="0.0788%" height="15" fill="rgb(252,33,42)" fg:x="104" fg:w="1"/><text x="8.4454%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1954%" y="389" width="0.0788%" height="15" fill="rgb(209,212,41)" fg:x="104" fg:w="1"/><text x="8.4454%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="8.1954%" y="373" width="0.0788%" height="15" fill="rgb(207,154,6)" fg:x="104" fg:w="1"/><text x="8.4454%" y="383.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="8.2742%" y="597" width="0.1576%" height="15" fill="rgb(223,64,47)" fg:x="105" fg:w="2"/><text x="8.5242%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="8.2742%" y="581" width="0.1576%" height="15" fill="rgb(211,161,38)" fg:x="105" fg:w="2"/><text x="8.5242%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="8.2742%" y="565" width="0.1576%" height="15" fill="rgb(219,138,40)" fg:x="105" fg:w="2"/><text x="8.5242%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="8.3530%" y="549" width="0.0788%" height="15" fill="rgb(241,228,46)" fg:x="106" fg:w="1"/><text x="8.6030%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.3530%" y="533" width="0.0788%" height="15" fill="rgb(223,209,38)" fg:x="106" fg:w="1"/><text x="8.6030%" y="543.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (3 samples, 0.24%)</title><rect x="8.2742%" y="613" width="0.2364%" height="15" fill="rgb(236,164,45)" fg:x="105" fg:w="3"/><text x="8.5242%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4318%" y="597" width="0.0788%" height="15" fill="rgb(231,15,5)" fg:x="107" fg:w="1"/><text x="8.6818%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.5894%" y="517" width="0.0788%" height="15" fill="rgb(252,35,15)" fg:x="109" fg:w="1"/><text x="8.8394%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.5894%" y="501" width="0.0788%" height="15" fill="rgb(248,181,18)" fg:x="109" fg:w="1"/><text x="8.8394%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.5894%" y="485" width="0.0788%" height="15" fill="rgb(233,39,42)" fg:x="109" fg:w="1"/><text x="8.8394%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.5894%" y="469" width="0.0788%" height="15" fill="rgb(238,110,33)" fg:x="109" fg:w="1"/><text x="8.8394%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.5894%" y="453" width="0.0788%" height="15" fill="rgb(233,195,10)" fg:x="109" fg:w="1"/><text x="8.8394%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.5894%" y="437" width="0.0788%" height="15" fill="rgb(254,105,3)" fg:x="109" fg:w="1"/><text x="8.8394%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.5894%" y="421" width="0.0788%" height="15" fill="rgb(221,225,9)" fg:x="109" fg:w="1"/><text x="8.8394%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.5894%" y="405" width="0.0788%" height="15" fill="rgb(224,227,45)" fg:x="109" fg:w="1"/><text x="8.8394%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.5894%" y="389" width="0.0788%" height="15" fill="rgb(229,198,43)" fg:x="109" fg:w="1"/><text x="8.8394%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.5894%" y="373" width="0.0788%" height="15" fill="rgb(206,209,35)" fg:x="109" fg:w="1"/><text x="8.8394%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.5894%" y="357" width="0.0788%" height="15" fill="rgb(245,195,53)" fg:x="109" fg:w="1"/><text x="8.8394%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.5894%" y="341" width="0.0788%" height="15" fill="rgb(240,92,26)" fg:x="109" fg:w="1"/><text x="8.8394%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.5894%" y="325" width="0.0788%" height="15" fill="rgb(207,40,23)" fg:x="109" fg:w="1"/><text x="8.8394%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.5894%" y="309" width="0.0788%" height="15" fill="rgb(223,111,35)" fg:x="109" fg:w="1"/><text x="8.8394%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.5894%" y="293" width="0.0788%" height="15" fill="rgb(229,147,28)" fg:x="109" fg:w="1"/><text x="8.8394%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.5894%" y="277" width="0.0788%" height="15" fill="rgb(211,29,28)" fg:x="109" fg:w="1"/><text x="8.8394%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.5894%" y="261" width="0.0788%" height="15" fill="rgb(228,72,33)" fg:x="109" fg:w="1"/><text x="8.8394%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="8.5894%" y="565" width="0.1576%" height="15" fill="rgb(205,214,31)" fg:x="109" fg:w="2"/><text x="8.8394%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="8.5894%" y="549" width="0.1576%" height="15" fill="rgb(224,111,15)" fg:x="109" fg:w="2"/><text x="8.8394%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="8.5894%" y="533" width="0.1576%" height="15" fill="rgb(253,21,26)" fg:x="109" fg:w="2"/><text x="8.8394%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.6682%" y="517" width="0.0788%" height="15" fill="rgb(245,139,43)" fg:x="110" fg:w="1"/><text x="8.9182%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.6682%" y="501" width="0.0788%" height="15" fill="rgb(252,170,7)" fg:x="110" fg:w="1"/><text x="8.9182%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.6682%" y="485" width="0.0788%" height="15" fill="rgb(231,118,14)" fg:x="110" fg:w="1"/><text x="8.9182%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.6682%" y="469" width="0.0788%" height="15" fill="rgb(238,83,0)" fg:x="110" fg:w="1"/><text x="8.9182%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.6682%" y="453" width="0.0788%" height="15" fill="rgb(221,39,39)" fg:x="110" fg:w="1"/><text x="8.9182%" y="463.50"></text></g><g><title>plugins_core::build::Build::holding (17 samples, 1.34%)</title><rect x="7.4862%" y="645" width="1.3396%" height="15" fill="rgb(222,119,46)" fg:x="95" fg:w="17"/><text x="7.7362%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (12 samples, 0.95%)</title><rect x="7.8802%" y="629" width="0.9456%" height="15" fill="rgb(222,165,49)" fg:x="100" fg:w="12"/><text x="8.1302%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="8.5106%" y="613" width="0.3152%" height="15" fill="rgb(219,113,52)" fg:x="108" fg:w="4"/><text x="8.7606%" y="623.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="8.5894%" y="597" width="0.2364%" height="15" fill="rgb(214,7,15)" fg:x="109" fg:w="3"/><text x="8.8394%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="8.5894%" y="581" width="0.2364%" height="15" fill="rgb(235,32,4)" fg:x="109" fg:w="3"/><text x="8.8394%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="8.7470%" y="565" width="0.0788%" height="15" fill="rgb(238,90,54)" fg:x="111" fg:w="1"/><text x="8.9970%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.7470%" y="549" width="0.0788%" height="15" fill="rgb(213,208,19)" fg:x="111" fg:w="1"/><text x="8.9970%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.7470%" y="533" width="0.0788%" height="15" fill="rgb(233,156,4)" fg:x="111" fg:w="1"/><text x="8.9970%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.7470%" y="517" width="0.0788%" height="15" fill="rgb(207,194,5)" fg:x="111" fg:w="1"/><text x="8.9970%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.7470%" y="501" width="0.0788%" height="15" fill="rgb(206,111,30)" fg:x="111" fg:w="1"/><text x="8.9970%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.7470%" y="485" width="0.0788%" height="15" fill="rgb(243,70,54)" fg:x="111" fg:w="1"/><text x="8.9970%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8258%" y="565" width="0.0788%" height="15" fill="rgb(242,28,8)" fg:x="112" fg:w="1"/><text x="9.0758%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8258%" y="549" width="0.0788%" height="15" fill="rgb(219,106,18)" fg:x="112" fg:w="1"/><text x="9.0758%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8258%" y="533" width="0.0788%" height="15" fill="rgb(244,222,10)" fg:x="112" fg:w="1"/><text x="9.0758%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8258%" y="517" width="0.0788%" height="15" fill="rgb(236,179,52)" fg:x="112" fg:w="1"/><text x="9.0758%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.8258%" y="501" width="0.0788%" height="15" fill="rgb(213,23,39)" fg:x="112" fg:w="1"/><text x="9.0758%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.8258%" y="485" width="0.0788%" height="15" fill="rgb(238,48,10)" fg:x="112" fg:w="1"/><text x="9.0758%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.8258%" y="469" width="0.0788%" height="15" fill="rgb(251,196,23)" fg:x="112" fg:w="1"/><text x="9.0758%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.8258%" y="453" width="0.0788%" height="15" fill="rgb(250,152,24)" fg:x="112" fg:w="1"/><text x="9.0758%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.8258%" y="437" width="0.0788%" height="15" fill="rgb(209,150,17)" fg:x="112" fg:w="1"/><text x="9.0758%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.8258%" y="421" width="0.0788%" height="15" fill="rgb(234,202,34)" fg:x="112" fg:w="1"/><text x="9.0758%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.8258%" y="405" width="0.0788%" height="15" fill="rgb(253,148,53)" fg:x="112" fg:w="1"/><text x="9.0758%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.8258%" y="389" width="0.0788%" height="15" fill="rgb(218,129,16)" fg:x="112" fg:w="1"/><text x="9.0758%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.8258%" y="373" width="0.0788%" height="15" fill="rgb(216,85,19)" fg:x="112" fg:w="1"/><text x="9.0758%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.8258%" y="357" width="0.0788%" height="15" fill="rgb(235,228,7)" fg:x="112" fg:w="1"/><text x="9.0758%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.8258%" y="341" width="0.0788%" height="15" fill="rgb(245,175,0)" fg:x="112" fg:w="1"/><text x="9.0758%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.9046%" y="565" width="0.0788%" height="15" fill="rgb(208,168,36)" fg:x="113" fg:w="1"/><text x="9.1546%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.9046%" y="549" width="0.0788%" height="15" fill="rgb(246,171,24)" fg:x="113" fg:w="1"/><text x="9.1546%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.9046%" y="533" width="0.0788%" height="15" fill="rgb(215,142,24)" fg:x="113" fg:w="1"/><text x="9.1546%" y="543.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="8.8258%" y="645" width="0.2364%" height="15" fill="rgb(250,187,7)" fg:x="112" fg:w="3"/><text x="9.0758%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="8.8258%" y="629" width="0.2364%" height="15" fill="rgb(228,66,33)" fg:x="112" fg:w="3"/><text x="9.0758%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="8.8258%" y="613" width="0.2364%" height="15" fill="rgb(234,215,21)" fg:x="112" fg:w="3"/><text x="9.0758%" y="623.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="8.8258%" y="597" width="0.2364%" height="15" fill="rgb(222,191,20)" fg:x="112" fg:w="3"/><text x="9.0758%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="8.8258%" y="581" width="0.2364%" height="15" fill="rgb(245,79,54)" fg:x="112" fg:w="3"/><text x="9.0758%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9835%" y="565" width="0.0788%" height="15" fill="rgb(240,10,37)" fg:x="114" fg:w="1"/><text x="9.2335%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9835%" y="549" width="0.0788%" height="15" fill="rgb(214,192,32)" fg:x="114" fg:w="1"/><text x="9.2335%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9835%" y="533" width="0.0788%" height="15" fill="rgb(209,36,54)" fg:x="114" fg:w="1"/><text x="9.2335%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9835%" y="517" width="0.0788%" height="15" fill="rgb(220,10,11)" fg:x="114" fg:w="1"/><text x="9.2335%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.9835%" y="501" width="0.0788%" height="15" fill="rgb(221,106,17)" fg:x="114" fg:w="1"/><text x="9.2335%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9835%" y="485" width="0.0788%" height="15" fill="rgb(251,142,44)" fg:x="114" fg:w="1"/><text x="9.2335%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9835%" y="469" width="0.0788%" height="15" fill="rgb(238,13,15)" fg:x="114" fg:w="1"/><text x="9.2335%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9835%" y="453" width="0.0788%" height="15" fill="rgb(208,107,27)" fg:x="114" fg:w="1"/><text x="9.2335%" y="463.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="9.0623%" y="645" width="0.0788%" height="15" fill="rgb(205,136,37)" fg:x="115" fg:w="1"/><text x="9.3123%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="9.1411%" y="613" width="0.0788%" height="15" fill="rgb(250,205,27)" fg:x="116" fg:w="1"/><text x="9.3911%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.1411%" y="597" width="0.0788%" height="15" fill="rgb(210,80,43)" fg:x="116" fg:w="1"/><text x="9.3911%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.2199%" y="565" width="0.0788%" height="15" fill="rgb(247,160,36)" fg:x="117" fg:w="1"/><text x="9.4699%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.2199%" y="549" width="0.0788%" height="15" fill="rgb(234,13,49)" fg:x="117" fg:w="1"/><text x="9.4699%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.2199%" y="533" width="0.0788%" height="15" fill="rgb(234,122,0)" fg:x="117" fg:w="1"/><text x="9.4699%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.2199%" y="517" width="0.0788%" height="15" fill="rgb(207,146,38)" fg:x="117" fg:w="1"/><text x="9.4699%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.2199%" y="501" width="0.0788%" height="15" fill="rgb(207,177,25)" fg:x="117" fg:w="1"/><text x="9.4699%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.2199%" y="485" width="0.0788%" height="15" fill="rgb(211,178,42)" fg:x="117" fg:w="1"/><text x="9.4699%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.2199%" y="469" width="0.0788%" height="15" fill="rgb(230,69,54)" fg:x="117" fg:w="1"/><text x="9.4699%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.2199%" y="453" width="0.0788%" height="15" fill="rgb(214,135,41)" fg:x="117" fg:w="1"/><text x="9.4699%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.2199%" y="437" width="0.0788%" height="15" fill="rgb(237,67,25)" fg:x="117" fg:w="1"/><text x="9.4699%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.2199%" y="421" width="0.0788%" height="15" fill="rgb(222,189,50)" fg:x="117" fg:w="1"/><text x="9.4699%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.2199%" y="405" width="0.0788%" height="15" fill="rgb(245,148,34)" fg:x="117" fg:w="1"/><text x="9.4699%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="9.2199%" y="389" width="0.0788%" height="15" fill="rgb(222,29,6)" fg:x="117" fg:w="1"/><text x="9.4699%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="9.2199%" y="373" width="0.0788%" height="15" fill="rgb(221,189,43)" fg:x="117" fg:w="1"/><text x="9.4699%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="9.2199%" y="357" width="0.0788%" height="15" fill="rgb(207,36,27)" fg:x="117" fg:w="1"/><text x="9.4699%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="9.2199%" y="341" width="0.0788%" height="15" fill="rgb(217,90,24)" fg:x="117" fg:w="1"/><text x="9.4699%" y="351.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="9.2199%" y="325" width="0.0788%" height="15" fill="rgb(224,66,35)" fg:x="117" fg:w="1"/><text x="9.4699%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="9.2199%" y="309" width="0.0788%" height="15" fill="rgb(221,13,50)" fg:x="117" fg:w="1"/><text x="9.4699%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="9.2199%" y="613" width="0.1576%" height="15" fill="rgb(236,68,49)" fg:x="117" fg:w="2"/><text x="9.4699%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="9.2199%" y="597" width="0.1576%" height="15" fill="rgb(229,146,28)" fg:x="117" fg:w="2"/><text x="9.4699%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="9.2199%" y="581" width="0.1576%" height="15" fill="rgb(225,31,38)" fg:x="117" fg:w="2"/><text x="9.4699%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.2987%" y="565" width="0.0788%" height="15" fill="rgb(250,208,3)" fg:x="118" fg:w="1"/><text x="9.5487%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.2987%" y="549" width="0.0788%" height="15" fill="rgb(246,54,23)" fg:x="118" fg:w="1"/><text x="9.5487%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.2987%" y="533" width="0.0788%" height="15" fill="rgb(243,76,11)" fg:x="118" fg:w="1"/><text x="9.5487%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.2987%" y="517" width="0.0788%" height="15" fill="rgb(245,21,50)" fg:x="118" fg:w="1"/><text x="9.5487%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.2987%" y="501" width="0.0788%" height="15" fill="rgb(228,9,43)" fg:x="118" fg:w="1"/><text x="9.5487%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.2987%" y="485" width="0.0788%" height="15" fill="rgb(208,100,47)" fg:x="118" fg:w="1"/><text x="9.5487%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.2987%" y="469" width="0.0788%" height="15" fill="rgb(232,26,8)" fg:x="118" fg:w="1"/><text x="9.5487%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.2987%" y="453" width="0.0788%" height="15" fill="rgb(216,166,38)" fg:x="118" fg:w="1"/><text x="9.5487%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.2987%" y="437" width="0.0788%" height="15" fill="rgb(251,202,51)" fg:x="118" fg:w="1"/><text x="9.5487%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.2987%" y="421" width="0.0788%" height="15" fill="rgb(254,216,34)" fg:x="118" fg:w="1"/><text x="9.5487%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.2987%" y="405" width="0.0788%" height="15" fill="rgb(251,32,27)" fg:x="118" fg:w="1"/><text x="9.5487%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="9.1411%" y="629" width="0.3152%" height="15" fill="rgb(208,127,28)" fg:x="116" fg:w="4"/><text x="9.3911%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="9.3775%" y="613" width="0.0788%" height="15" fill="rgb(224,137,22)" fg:x="119" fg:w="1"/><text x="9.6275%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;plugins_core::moving::model::Occupying&gt;&gt; (1 samples, 0.08%)</title><rect x="9.4563%" y="613" width="0.0788%" height="15" fill="rgb(254,70,32)" fg:x="120" fg:w="1"/><text x="9.7063%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="9.4563%" y="597" width="0.0788%" height="15" fill="rgb(229,75,37)" fg:x="120" fg:w="1"/><text x="9.7063%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.5351%" y="597" width="0.0788%" height="15" fill="rgb(252,64,23)" fg:x="121" fg:w="1"/><text x="9.7851%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (70 samples, 5.52%)</title><rect x="4.1765%" y="661" width="5.5162%" height="15" fill="rgb(232,162,48)" fg:x="53" fg:w="70"/><text x="4.4265%" y="671.50">plugins..</text></g><g><title>plugins_core::build::Build::occupying (7 samples, 0.55%)</title><rect x="9.1411%" y="645" width="0.5516%" height="15" fill="rgb(246,160,12)" fg:x="116" fg:w="7"/><text x="9.3911%" y="655.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="9.4563%" y="629" width="0.2364%" height="15" fill="rgb(247,166,0)" fg:x="120" fg:w="3"/><text x="9.7063%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="9.5351%" y="613" width="0.1576%" height="15" fill="rgb(249,219,21)" fg:x="121" fg:w="2"/><text x="9.7851%" y="623.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="9.6139%" y="597" width="0.0788%" height="15" fill="rgb(205,209,3)" fg:x="122" fg:w="1"/><text x="9.8639%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.6139%" y="581" width="0.0788%" height="15" fill="rgb(243,44,1)" fg:x="122" fg:w="1"/><text x="9.8639%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="9.6139%" y="565" width="0.0788%" height="15" fill="rgb(206,159,16)" fg:x="122" fg:w="1"/><text x="9.8639%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.6139%" y="549" width="0.0788%" height="15" fill="rgb(244,77,30)" fg:x="122" fg:w="1"/><text x="9.8639%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.6139%" y="533" width="0.0788%" height="15" fill="rgb(218,69,12)" fg:x="122" fg:w="1"/><text x="9.8639%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.6139%" y="517" width="0.0788%" height="15" fill="rgb(212,87,7)" fg:x="122" fg:w="1"/><text x="9.8639%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="9.6927%" y="661" width="0.0788%" height="15" fill="rgb(245,114,25)" fg:x="123" fg:w="1"/><text x="9.9427%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="9.6927%" y="645" width="0.0788%" height="15" fill="rgb(210,61,42)" fg:x="123" fg:w="1"/><text x="9.9427%" y="655.50"></text></g><g><title>kernel::model::entity::Entity::new_blank (1 samples, 0.08%)</title><rect x="9.6927%" y="629" width="0.0788%" height="15" fill="rgb(211,52,33)" fg:x="123" fg:w="1"/><text x="9.9427%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="9.8503%" y="613" width="0.0788%" height="15" fill="rgb(234,58,33)" fg:x="125" fg:w="1"/><text x="10.1003%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="9.8503%" y="597" width="0.0788%" height="15" fill="rgb(220,115,36)" fg:x="125" fg:w="1"/><text x="10.1003%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="9.8503%" y="581" width="0.0788%" height="15" fill="rgb(243,153,54)" fg:x="125" fg:w="1"/><text x="10.1003%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="9.8503%" y="629" width="0.1576%" height="15" fill="rgb(251,47,18)" fg:x="125" fg:w="2"/><text x="10.1003%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="9.9291%" y="613" width="0.0788%" height="15" fill="rgb(242,102,42)" fg:x="126" fg:w="1"/><text x="10.1791%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="9.9291%" y="597" width="0.0788%" height="15" fill="rgb(234,31,38)" fg:x="126" fg:w="1"/><text x="10.1791%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="9.9291%" y="581" width="0.0788%" height="15" fill="rgb(221,117,51)" fg:x="126" fg:w="1"/><text x="10.1791%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="9.9291%" y="565" width="0.0788%" height="15" fill="rgb(212,20,18)" fg:x="126" fg:w="1"/><text x="10.1791%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="9.9291%" y="549" width="0.0788%" height="15" fill="rgb(245,133,36)" fg:x="126" fg:w="1"/><text x="10.1791%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="9.9291%" y="533" width="0.0788%" height="15" fill="rgb(212,6,19)" fg:x="126" fg:w="1"/><text x="10.1791%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0079%" y="565" width="0.0788%" height="15" fill="rgb(218,1,36)" fg:x="127" fg:w="1"/><text x="10.2579%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.0079%" y="549" width="0.0788%" height="15" fill="rgb(246,84,54)" fg:x="127" fg:w="1"/><text x="10.2579%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (5 samples, 0.39%)</title><rect x="9.7715%" y="661" width="0.3940%" height="15" fill="rgb(242,110,6)" fg:x="124" fg:w="5"/><text x="10.0215%" y="671.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="9.8503%" y="645" width="0.3152%" height="15" fill="rgb(214,47,5)" fg:x="125" fg:w="4"/><text x="10.1003%" y="655.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="10.0079%" y="629" width="0.1576%" height="15" fill="rgb(218,159,25)" fg:x="127" fg:w="2"/><text x="10.2579%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="10.0079%" y="613" width="0.1576%" height="15" fill="rgb(215,211,28)" fg:x="127" fg:w="2"/><text x="10.2579%" y="623.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="10.0079%" y="597" width="0.1576%" height="15" fill="rgb(238,59,32)" fg:x="127" fg:w="2"/><text x="10.2579%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="10.0079%" y="581" width="0.1576%" height="15" fill="rgb(226,82,3)" fg:x="127" fg:w="2"/><text x="10.2579%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="10.0867%" y="565" width="0.0788%" height="15" fill="rgb(240,164,32)" fg:x="128" fg:w="1"/><text x="10.3367%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="10.1655%" y="629" width="0.0788%" height="15" fill="rgb(232,46,7)" fg:x="129" fg:w="1"/><text x="10.4155%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.1655%" y="613" width="0.0788%" height="15" fill="rgb(229,129,53)" fg:x="129" fg:w="1"/><text x="10.4155%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="10.1655%" y="597" width="0.0788%" height="15" fill="rgb(234,188,29)" fg:x="129" fg:w="1"/><text x="10.4155%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.1655%" y="581" width="0.0788%" height="15" fill="rgb(246,141,4)" fg:x="129" fg:w="1"/><text x="10.4155%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.1655%" y="565" width="0.0788%" height="15" fill="rgb(229,23,39)" fg:x="129" fg:w="1"/><text x="10.4155%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.1655%" y="549" width="0.0788%" height="15" fill="rgb(206,12,3)" fg:x="129" fg:w="1"/><text x="10.4155%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.1655%" y="533" width="0.0788%" height="15" fill="rgb(252,226,20)" fg:x="129" fg:w="1"/><text x="10.4155%" y="543.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="10.1655%" y="517" width="0.0788%" height="15" fill="rgb(216,123,35)" fg:x="129" fg:w="1"/><text x="10.4155%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.2443%" y="581" width="0.0788%" height="15" fill="rgb(212,68,40)" fg:x="130" fg:w="1"/><text x="10.4943%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="10.2443%" y="565" width="0.0788%" height="15" fill="rgb(254,125,32)" fg:x="130" fg:w="1"/><text x="10.4943%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.2443%" y="549" width="0.0788%" height="15" fill="rgb(253,97,22)" fg:x="130" fg:w="1"/><text x="10.4943%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.2443%" y="533" width="0.0788%" height="15" fill="rgb(241,101,14)" fg:x="130" fg:w="1"/><text x="10.4943%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.2443%" y="517" width="0.0788%" height="15" fill="rgb(238,103,29)" fg:x="130" fg:w="1"/><text x="10.4943%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.2443%" y="501" width="0.0788%" height="15" fill="rgb(233,195,47)" fg:x="130" fg:w="1"/><text x="10.4943%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.2443%" y="485" width="0.0788%" height="15" fill="rgb(246,218,30)" fg:x="130" fg:w="1"/><text x="10.4943%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.2443%" y="469" width="0.0788%" height="15" fill="rgb(219,145,47)" fg:x="130" fg:w="1"/><text x="10.4943%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.2443%" y="453" width="0.0788%" height="15" fill="rgb(243,12,26)" fg:x="130" fg:w="1"/><text x="10.4943%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.2443%" y="437" width="0.0788%" height="15" fill="rgb(214,87,16)" fg:x="130" fg:w="1"/><text x="10.4943%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.2443%" y="421" width="0.0788%" height="15" fill="rgb(208,99,42)" fg:x="130" fg:w="1"/><text x="10.4943%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.2443%" y="405" width="0.0788%" height="15" fill="rgb(253,99,2)" fg:x="130" fg:w="1"/><text x="10.4943%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.2443%" y="389" width="0.0788%" height="15" fill="rgb(220,168,23)" fg:x="130" fg:w="1"/><text x="10.4943%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.2443%" y="373" width="0.0788%" height="15" fill="rgb(242,38,24)" fg:x="130" fg:w="1"/><text x="10.4943%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.2443%" y="357" width="0.0788%" height="15" fill="rgb(225,182,9)" fg:x="130" fg:w="1"/><text x="10.4943%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.2443%" y="341" width="0.0788%" height="15" fill="rgb(243,178,37)" fg:x="130" fg:w="1"/><text x="10.4943%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.2443%" y="325" width="0.0788%" height="15" fill="rgb(232,139,19)" fg:x="130" fg:w="1"/><text x="10.4943%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.2443%" y="309" width="0.0788%" height="15" fill="rgb(225,201,24)" fg:x="130" fg:w="1"/><text x="10.4943%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="10.1655%" y="645" width="0.2364%" height="15" fill="rgb(221,47,46)" fg:x="129" fg:w="3"/><text x="10.4155%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="10.2443%" y="629" width="0.1576%" height="15" fill="rgb(249,23,13)" fg:x="130" fg:w="2"/><text x="10.4943%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="10.2443%" y="613" width="0.1576%" height="15" fill="rgb(219,9,5)" fg:x="130" fg:w="2"/><text x="10.4943%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="10.2443%" y="597" width="0.1576%" height="15" fill="rgb(254,171,16)" fg:x="130" fg:w="2"/><text x="10.4943%" y="607.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="10.3231%" y="581" width="0.0788%" height="15" fill="rgb(230,171,20)" fg:x="131" fg:w="1"/><text x="10.5731%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="10.3231%" y="565" width="0.0788%" height="15" fill="rgb(210,71,41)" fg:x="131" fg:w="1"/><text x="10.5731%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3231%" y="549" width="0.0788%" height="15" fill="rgb(206,173,20)" fg:x="131" fg:w="1"/><text x="10.5731%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (4 samples, 0.32%)</title><rect x="10.1655%" y="661" width="0.3152%" height="15" fill="rgb(233,88,34)" fg:x="129" fg:w="4"/><text x="10.4155%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="10.4019%" y="645" width="0.0788%" height="15" fill="rgb(223,209,46)" fg:x="132" fg:w="1"/><text x="10.6519%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="10.4019%" y="629" width="0.0788%" height="15" fill="rgb(250,43,18)" fg:x="132" fg:w="1"/><text x="10.6519%" y="639.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (121 samples, 9.54%)</title><rect x="1.0244%" y="677" width="9.5351%" height="15" fill="rgb(208,13,10)" fg:x="13" fg:w="121"/><text x="1.2744%" y="687.50">&lt;tests::Holdin..</text></g><g><title>plugins_core::build::BuildSurroundings::route (1 samples, 0.08%)</title><rect x="10.4807%" y="661" width="0.0788%" height="15" fill="rgb(212,200,36)" fg:x="133" fg:w="1"/><text x="10.7307%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="10.5595%" y="661" width="0.1576%" height="15" fill="rgb(225,90,30)" fg:x="134" fg:w="2"/><text x="10.8095%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.6383%" y="645" width="0.0788%" height="15" fill="rgb(236,182,39)" fg:x="135" fg:w="1"/><text x="10.8883%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.6383%" y="629" width="0.0788%" height="15" fill="rgb(212,144,35)" fg:x="135" fg:w="1"/><text x="10.8883%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.6383%" y="613" width="0.0788%" height="15" fill="rgb(228,63,44)" fg:x="135" fg:w="1"/><text x="10.8883%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.6383%" y="597" width="0.0788%" height="15" fill="rgb(228,109,6)" fg:x="135" fg:w="1"/><text x="10.8883%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.6383%" y="581" width="0.0788%" height="15" fill="rgb(238,117,24)" fg:x="135" fg:w="1"/><text x="10.8883%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.6383%" y="565" width="0.0788%" height="15" fill="rgb(242,26,26)" fg:x="135" fg:w="1"/><text x="10.8883%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.6383%" y="549" width="0.0788%" height="15" fill="rgb(221,92,48)" fg:x="135" fg:w="1"/><text x="10.8883%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.6383%" y="533" width="0.0788%" height="15" fill="rgb(209,209,32)" fg:x="135" fg:w="1"/><text x="10.8883%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.6383%" y="517" width="0.0788%" height="15" fill="rgb(221,70,22)" fg:x="135" fg:w="1"/><text x="10.8883%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.6383%" y="501" width="0.0788%" height="15" fill="rgb(248,145,5)" fg:x="135" fg:w="1"/><text x="10.8883%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.6383%" y="485" width="0.0788%" height="15" fill="rgb(226,116,26)" fg:x="135" fg:w="1"/><text x="10.8883%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="10.7171%" y="661" width="0.1576%" height="15" fill="rgb(244,5,17)" fg:x="136" fg:w="2"/><text x="10.9671%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="10.7171%" y="645" width="0.1576%" height="15" fill="rgb(252,159,33)" fg:x="136" fg:w="2"/><text x="10.9671%" y="655.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="10.7171%" y="629" width="0.1576%" height="15" fill="rgb(206,71,0)" fg:x="136" fg:w="2"/><text x="10.9671%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="10.7171%" y="613" width="0.1576%" height="15" fill="rgb(233,118,54)" fg:x="136" fg:w="2"/><text x="10.9671%" y="623.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="10.7171%" y="597" width="0.1576%" height="15" fill="rgb(234,83,48)" fg:x="136" fg:w="2"/><text x="10.9671%" y="607.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="10.7171%" y="581" width="0.1576%" height="15" fill="rgb(228,3,54)" fg:x="136" fg:w="2"/><text x="10.9671%" y="591.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="10.7959%" y="565" width="0.0788%" height="15" fill="rgb(226,155,13)" fg:x="137" fg:w="1"/><text x="11.0459%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="10.7959%" y="549" width="0.0788%" height="15" fill="rgb(241,28,37)" fg:x="137" fg:w="1"/><text x="11.0459%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="10.7959%" y="533" width="0.0788%" height="15" fill="rgb(233,93,10)" fg:x="137" fg:w="1"/><text x="11.0459%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.7959%" y="517" width="0.0788%" height="15" fill="rgb(225,113,19)" fg:x="137" fg:w="1"/><text x="11.0459%" y="527.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="10.8747%" y="661" width="0.0788%" height="15" fill="rgb(241,2,18)" fg:x="138" fg:w="1"/><text x="11.1247%" y="671.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="10.8747%" y="645" width="0.0788%" height="15" fill="rgb(228,207,21)" fg:x="138" fg:w="1"/><text x="11.1247%" y="655.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="10.8747%" y="629" width="0.0788%" height="15" fill="rgb(213,211,35)" fg:x="138" fg:w="1"/><text x="11.1247%" y="639.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="10.8747%" y="613" width="0.0788%" height="15" fill="rgb(209,83,10)" fg:x="138" fg:w="1"/><text x="11.1247%" y="623.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="10.8747%" y="597" width="0.0788%" height="15" fill="rgb(209,164,1)" fg:x="138" fg:w="1"/><text x="11.1247%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="10.8747%" y="581" width="0.0788%" height="15" fill="rgb(213,184,43)" fg:x="138" fg:w="1"/><text x="11.1247%" y="591.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="10.8747%" y="565" width="0.0788%" height="15" fill="rgb(231,61,34)" fg:x="138" fg:w="1"/><text x="11.1247%" y="575.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="10.8747%" y="549" width="0.0788%" height="15" fill="rgb(235,75,3)" fg:x="138" fg:w="1"/><text x="11.1247%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="10.9535%" y="581" width="0.1576%" height="15" fill="rgb(220,106,47)" fg:x="139" fg:w="2"/><text x="11.2035%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.0323%" y="565" width="0.0788%" height="15" fill="rgb(210,196,33)" fg:x="140" fg:w="1"/><text x="11.2823%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.0323%" y="549" width="0.0788%" height="15" fill="rgb(229,154,42)" fg:x="140" fg:w="1"/><text x="11.2823%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.1899%" y="517" width="0.0788%" height="15" fill="rgb(228,114,26)" fg:x="142" fg:w="1"/><text x="11.4399%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.2687%" y="501" width="0.0788%" height="15" fill="rgb(208,144,1)" fg:x="143" fg:w="1"/><text x="11.5187%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.2687%" y="485" width="0.0788%" height="15" fill="rgb(239,112,37)" fg:x="143" fg:w="1"/><text x="11.5187%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.2687%" y="469" width="0.0788%" height="15" fill="rgb(210,96,50)" fg:x="143" fg:w="1"/><text x="11.5187%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.2687%" y="453" width="0.0788%" height="15" fill="rgb(222,178,2)" fg:x="143" fg:w="1"/><text x="11.5187%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="11.1111%" y="549" width="0.3152%" height="15" fill="rgb(226,74,18)" fg:x="141" fg:w="4"/><text x="11.3611%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="11.1899%" y="533" width="0.2364%" height="15" fill="rgb(225,67,54)" fg:x="142" fg:w="3"/><text x="11.4399%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="11.2687%" y="517" width="0.1576%" height="15" fill="rgb(251,92,32)" fg:x="143" fg:w="2"/><text x="11.5187%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="11.3475%" y="501" width="0.0788%" height="15" fill="rgb(228,149,22)" fg:x="144" fg:w="1"/><text x="11.5975%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.3475%" y="485" width="0.0788%" height="15" fill="rgb(243,54,13)" fg:x="144" fg:w="1"/><text x="11.5975%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.3475%" y="469" width="0.0788%" height="15" fill="rgb(243,180,28)" fg:x="144" fg:w="1"/><text x="11.5975%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.55%)</title><rect x="10.9535%" y="597" width="0.5516%" height="15" fill="rgb(208,167,24)" fg:x="139" fg:w="7"/><text x="11.2035%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="11.1111%" y="581" width="0.3940%" height="15" fill="rgb(245,73,45)" fg:x="141" fg:w="5"/><text x="11.3611%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="11.1111%" y="565" width="0.3940%" height="15" fill="rgb(237,203,48)" fg:x="141" fg:w="5"/><text x="11.3611%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.4263%" y="549" width="0.0788%" height="15" fill="rgb(211,197,16)" fg:x="145" fg:w="1"/><text x="11.6763%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.4263%" y="533" width="0.0788%" height="15" fill="rgb(243,99,51)" fg:x="145" fg:w="1"/><text x="11.6763%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="11.4263%" y="517" width="0.0788%" height="15" fill="rgb(215,123,29)" fg:x="145" fg:w="1"/><text x="11.6763%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.5839%" y="565" width="0.0788%" height="15" fill="rgb(239,186,37)" fg:x="147" fg:w="1"/><text x="11.8339%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.6627%" y="549" width="0.0788%" height="15" fill="rgb(252,136,39)" fg:x="148" fg:w="1"/><text x="11.9127%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="11.5051%" y="597" width="0.3152%" height="15" fill="rgb(223,213,32)" fg:x="146" fg:w="4"/><text x="11.7551%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="11.5051%" y="581" width="0.3152%" height="15" fill="rgb(233,115,5)" fg:x="146" fg:w="4"/><text x="11.7551%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="11.6627%" y="565" width="0.1576%" height="15" fill="rgb(207,226,44)" fg:x="148" fg:w="2"/><text x="11.9127%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.7415%" y="549" width="0.0788%" height="15" fill="rgb(208,126,0)" fg:x="149" fg:w="1"/><text x="11.9915%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.7415%" y="533" width="0.0788%" height="15" fill="rgb(244,66,21)" fg:x="149" fg:w="1"/><text x="11.9915%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.7415%" y="517" width="0.0788%" height="15" fill="rgb(222,97,12)" fg:x="149" fg:w="1"/><text x="11.9915%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.7415%" y="501" width="0.0788%" height="15" fill="rgb(219,213,19)" fg:x="149" fg:w="1"/><text x="11.9915%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.7415%" y="485" width="0.0788%" height="15" fill="rgb(252,169,30)" fg:x="149" fg:w="1"/><text x="11.9915%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.7415%" y="469" width="0.0788%" height="15" fill="rgb(206,32,51)" fg:x="149" fg:w="1"/><text x="11.9915%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.7415%" y="453" width="0.0788%" height="15" fill="rgb(250,172,42)" fg:x="149" fg:w="1"/><text x="11.9915%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.0567%" y="565" width="0.0788%" height="15" fill="rgb(209,34,43)" fg:x="153" fg:w="1"/><text x="12.3067%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="12.1355%" y="533" width="0.1576%" height="15" fill="rgb(223,11,35)" fg:x="154" fg:w="2"/><text x="12.3855%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.2931%" y="517" width="0.0788%" height="15" fill="rgb(251,219,26)" fg:x="156" fg:w="1"/><text x="12.5431%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.3719%" y="501" width="0.0788%" height="15" fill="rgb(231,119,3)" fg:x="157" fg:w="1"/><text x="12.6219%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="12.1355%" y="565" width="0.4728%" height="15" fill="rgb(216,97,11)" fg:x="154" fg:w="6"/><text x="12.3855%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.47%)</title><rect x="12.1355%" y="549" width="0.4728%" height="15" fill="rgb(223,59,9)" fg:x="154" fg:w="6"/><text x="12.3855%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="12.2931%" y="533" width="0.3152%" height="15" fill="rgb(233,93,31)" fg:x="156" fg:w="4"/><text x="12.5431%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="12.3719%" y="517" width="0.2364%" height="15" fill="rgb(239,81,33)" fg:x="157" fg:w="3"/><text x="12.6219%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="12.4507%" y="501" width="0.1576%" height="15" fill="rgb(213,120,34)" fg:x="158" fg:w="2"/><text x="12.7007%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="12.4507%" y="485" width="0.1576%" height="15" fill="rgb(243,49,53)" fg:x="158" fg:w="2"/><text x="12.7007%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.5296%" y="469" width="0.0788%" height="15" fill="rgb(247,216,33)" fg:x="159" fg:w="1"/><text x="12.7796%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (11 samples, 0.87%)</title><rect x="11.9779%" y="581" width="0.8668%" height="15" fill="rgb(226,26,14)" fg:x="152" fg:w="11"/><text x="12.2279%" y="591.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="12.6084%" y="565" width="0.2364%" height="15" fill="rgb(215,49,53)" fg:x="160" fg:w="3"/><text x="12.8584%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="12.6084%" y="549" width="0.2364%" height="15" fill="rgb(245,162,40)" fg:x="160" fg:w="3"/><text x="12.8584%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="12.6084%" y="533" width="0.2364%" height="15" fill="rgb(229,68,17)" fg:x="160" fg:w="3"/><text x="12.8584%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="12.7660%" y="517" width="0.0788%" height="15" fill="rgb(213,182,10)" fg:x="162" fg:w="1"/><text x="13.0160%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="12.7660%" y="501" width="0.0788%" height="15" fill="rgb(245,125,30)" fg:x="162" fg:w="1"/><text x="13.0160%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.9236%" y="549" width="0.0788%" height="15" fill="rgb(232,202,2)" fg:x="164" fg:w="1"/><text x="13.1736%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.9236%" y="533" width="0.0788%" height="15" fill="rgb(237,140,51)" fg:x="164" fg:w="1"/><text x="13.1736%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="13.0024%" y="549" width="0.0788%" height="15" fill="rgb(236,157,25)" fg:x="165" fg:w="1"/><text x="13.2524%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="13.0812%" y="549" width="0.1576%" height="15" fill="rgb(219,209,0)" fg:x="166" fg:w="2"/><text x="13.3312%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="13.0812%" y="533" width="0.1576%" height="15" fill="rgb(240,116,54)" fg:x="166" fg:w="2"/><text x="13.3312%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="13.6328%" y="469" width="0.0788%" height="15" fill="rgb(216,10,36)" fg:x="173" fg:w="1"/><text x="13.8828%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.6328%" y="453" width="0.0788%" height="15" fill="rgb(222,72,44)" fg:x="173" fg:w="1"/><text x="13.8828%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.6328%" y="437" width="0.0788%" height="15" fill="rgb(232,159,9)" fg:x="173" fg:w="1"/><text x="13.8828%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="13.6328%" y="501" width="0.1576%" height="15" fill="rgb(210,39,32)" fg:x="173" fg:w="2"/><text x="13.8828%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="13.6328%" y="485" width="0.1576%" height="15" fill="rgb(216,194,45)" fg:x="173" fg:w="2"/><text x="13.8828%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.7116%" y="469" width="0.0788%" height="15" fill="rgb(218,18,35)" fg:x="174" fg:w="1"/><text x="13.9616%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="13.7904%" y="485" width="0.0788%" height="15" fill="rgb(207,83,51)" fg:x="175" fg:w="1"/><text x="14.0404%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="13.8692%" y="421" width="0.0788%" height="15" fill="rgb(225,63,43)" fg:x="176" fg:w="1"/><text x="14.1192%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.55%)</title><rect x="13.4752%" y="517" width="0.5516%" height="15" fill="rgb(207,57,36)" fg:x="171" fg:w="7"/><text x="13.7252%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="13.7904%" y="501" width="0.2364%" height="15" fill="rgb(216,99,33)" fg:x="175" fg:w="3"/><text x="14.0404%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="13.8692%" y="485" width="0.1576%" height="15" fill="rgb(225,42,16)" fg:x="176" fg:w="2"/><text x="14.1192%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="13.8692%" y="469" width="0.1576%" height="15" fill="rgb(220,201,45)" fg:x="176" fg:w="2"/><text x="14.1192%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="13.8692%" y="453" width="0.1576%" height="15" fill="rgb(225,33,4)" fg:x="176" fg:w="2"/><text x="14.1192%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="13.8692%" y="437" width="0.1576%" height="15" fill="rgb(224,33,50)" fg:x="176" fg:w="2"/><text x="14.1192%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="13.9480%" y="421" width="0.0788%" height="15" fill="rgb(246,198,51)" fg:x="177" fg:w="1"/><text x="14.1980%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.9480%" y="405" width="0.0788%" height="15" fill="rgb(205,22,4)" fg:x="177" fg:w="1"/><text x="14.1980%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.9480%" y="389" width="0.0788%" height="15" fill="rgb(206,3,8)" fg:x="177" fg:w="1"/><text x="14.1980%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.9480%" y="373" width="0.0788%" height="15" fill="rgb(251,23,15)" fg:x="177" fg:w="1"/><text x="14.1980%" y="383.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (16 samples, 1.26%)</title><rect x="12.8448%" y="581" width="1.2608%" height="15" fill="rgb(252,88,28)" fg:x="163" fg:w="16"/><text x="13.0948%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.26%)</title><rect x="12.8448%" y="565" width="1.2608%" height="15" fill="rgb(212,127,14)" fg:x="163" fg:w="16"/><text x="13.0948%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (11 samples, 0.87%)</title><rect x="13.2388%" y="549" width="0.8668%" height="15" fill="rgb(247,145,37)" fg:x="168" fg:w="11"/><text x="13.4888%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.63%)</title><rect x="13.4752%" y="533" width="0.6304%" height="15" fill="rgb(209,117,53)" fg:x="171" fg:w="8"/><text x="13.7252%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="14.0268%" y="517" width="0.0788%" height="15" fill="rgb(212,90,42)" fg:x="178" fg:w="1"/><text x="14.2768%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.6572%" y="325" width="0.0788%" height="15" fill="rgb(218,164,37)" fg:x="186" fg:w="1"/><text x="14.9072%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="14.6572%" y="341" width="0.1576%" height="15" fill="rgb(246,65,34)" fg:x="186" fg:w="2"/><text x="14.9072%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.7360%" y="325" width="0.0788%" height="15" fill="rgb(231,100,33)" fg:x="187" fg:w="1"/><text x="14.9860%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.7360%" y="309" width="0.0788%" height="15" fill="rgb(228,126,14)" fg:x="187" fg:w="1"/><text x="14.9860%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="14.6572%" y="357" width="0.2364%" height="15" fill="rgb(215,173,21)" fg:x="186" fg:w="3"/><text x="14.9072%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.8148%" y="341" width="0.0788%" height="15" fill="rgb(210,6,40)" fg:x="188" fg:w="1"/><text x="15.0648%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.39%)</title><rect x="14.5784%" y="389" width="0.3940%" height="15" fill="rgb(212,48,18)" fg:x="185" fg:w="5"/><text x="14.8284%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.39%)</title><rect x="14.5784%" y="373" width="0.3940%" height="15" fill="rgb(230,214,11)" fg:x="185" fg:w="5"/><text x="14.8284%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.8936%" y="357" width="0.0788%" height="15" fill="rgb(254,105,39)" fg:x="189" fg:w="1"/><text x="15.1436%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="14.8936%" y="341" width="0.0788%" height="15" fill="rgb(245,158,5)" fg:x="189" fg:w="1"/><text x="15.1436%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.87%)</title><rect x="14.1844%" y="517" width="0.8668%" height="15" fill="rgb(249,208,11)" fg:x="180" fg:w="11"/><text x="14.4344%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.87%)</title><rect x="14.1844%" y="501" width="0.8668%" height="15" fill="rgb(210,39,28)" fg:x="180" fg:w="11"/><text x="14.4344%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.79%)</title><rect x="14.2632%" y="485" width="0.7880%" height="15" fill="rgb(211,56,53)" fg:x="181" fg:w="10"/><text x="14.5132%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.71%)</title><rect x="14.3420%" y="469" width="0.7092%" height="15" fill="rgb(226,201,30)" fg:x="182" fg:w="9"/><text x="14.5920%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.71%)</title><rect x="14.3420%" y="453" width="0.7092%" height="15" fill="rgb(239,101,34)" fg:x="182" fg:w="9"/><text x="14.5920%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.55%)</title><rect x="14.4996%" y="437" width="0.5516%" height="15" fill="rgb(226,209,5)" fg:x="184" fg:w="7"/><text x="14.7496%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.47%)</title><rect x="14.5784%" y="421" width="0.4728%" height="15" fill="rgb(250,105,47)" fg:x="185" fg:w="6"/><text x="14.8284%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.47%)</title><rect x="14.5784%" y="405" width="0.4728%" height="15" fill="rgb(230,72,3)" fg:x="185" fg:w="6"/><text x="14.8284%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.9724%" y="389" width="0.0788%" height="15" fill="rgb(232,218,39)" fg:x="190" fg:w="1"/><text x="15.2224%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.9724%" y="373" width="0.0788%" height="15" fill="rgb(248,166,6)" fg:x="190" fg:w="1"/><text x="15.2224%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="15.0512%" y="517" width="0.0788%" height="15" fill="rgb(247,89,20)" fg:x="191" fg:w="1"/><text x="15.3012%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="15.0512%" y="501" width="0.0788%" height="15" fill="rgb(248,130,54)" fg:x="191" fg:w="1"/><text x="15.3012%" y="511.50"></text></g><g><title>engine::session::Session::close (59 samples, 4.65%)</title><rect x="10.5595%" y="677" width="4.6493%" height="15" fill="rgb(234,196,4)" fg:x="134" fg:w="59"/><text x="10.8095%" y="687.50">engin..</text></g><g><title>engine::session::state::State::close (54 samples, 4.26%)</title><rect x="10.9535%" y="661" width="4.2553%" height="15" fill="rgb(250,143,31)" fg:x="139" fg:w="54"/><text x="11.2035%" y="671.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (54 samples, 4.26%)</title><rect x="10.9535%" y="645" width="4.2553%" height="15" fill="rgb(211,110,34)" fg:x="139" fg:w="54"/><text x="11.2035%" y="655.50">engin..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (54 samples, 4.26%)</title><rect x="10.9535%" y="629" width="4.2553%" height="15" fill="rgb(215,124,48)" fg:x="139" fg:w="54"/><text x="11.2035%" y="639.50">engin..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (54 samples, 4.26%)</title><rect x="10.9535%" y="613" width="4.2553%" height="15" fill="rgb(216,46,13)" fg:x="139" fg:w="54"/><text x="11.2035%" y="623.50">engin..</text></g><g><title>kernel::model::any_entity_changes (43 samples, 3.39%)</title><rect x="11.8203%" y="597" width="3.3885%" height="15" fill="rgb(205,184,25)" fg:x="150" fg:w="43"/><text x="12.0703%" y="607.50">ker..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (14 samples, 1.10%)</title><rect x="14.1056%" y="581" width="1.1032%" height="15" fill="rgb(228,1,10)" fg:x="179" fg:w="14"/><text x="14.3556%" y="591.50"></text></g><g><title>serde_json::de::from_trait (14 samples, 1.10%)</title><rect x="14.1056%" y="565" width="1.1032%" height="15" fill="rgb(213,116,27)" fg:x="179" fg:w="14"/><text x="14.3556%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (14 samples, 1.10%)</title><rect x="14.1056%" y="549" width="1.1032%" height="15" fill="rgb(241,95,50)" fg:x="179" fg:w="14"/><text x="14.3556%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 1.10%)</title><rect x="14.1056%" y="533" width="1.1032%" height="15" fill="rgb(238,48,32)" fg:x="179" fg:w="14"/><text x="14.3556%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.1300%" y="517" width="0.0788%" height="15" fill="rgb(235,113,49)" fg:x="192" fg:w="1"/><text x="15.3800%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.1300%" y="501" width="0.0788%" height="15" fill="rgb(205,127,43)" fg:x="192" fg:w="1"/><text x="15.3800%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.2876%" y="437" width="0.0788%" height="15" fill="rgb(250,162,2)" fg:x="194" fg:w="1"/><text x="15.5376%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.2876%" y="421" width="0.0788%" height="15" fill="rgb(220,13,41)" fg:x="194" fg:w="1"/><text x="15.5376%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.2876%" y="405" width="0.0788%" height="15" fill="rgb(249,221,25)" fg:x="194" fg:w="1"/><text x="15.5376%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.2876%" y="389" width="0.0788%" height="15" fill="rgb(215,208,19)" fg:x="194" fg:w="1"/><text x="15.5376%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.2876%" y="373" width="0.0788%" height="15" fill="rgb(236,175,2)" fg:x="194" fg:w="1"/><text x="15.5376%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.2876%" y="357" width="0.0788%" height="15" fill="rgb(241,52,2)" fg:x="194" fg:w="1"/><text x="15.5376%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.2876%" y="341" width="0.0788%" height="15" fill="rgb(248,140,14)" fg:x="194" fg:w="1"/><text x="15.5376%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.2876%" y="325" width="0.0788%" height="15" fill="rgb(253,22,42)" fg:x="194" fg:w="1"/><text x="15.5376%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.2876%" y="309" width="0.0788%" height="15" fill="rgb(234,61,47)" fg:x="194" fg:w="1"/><text x="15.5376%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.2876%" y="293" width="0.0788%" height="15" fill="rgb(208,226,15)" fg:x="194" fg:w="1"/><text x="15.5376%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.2876%" y="277" width="0.0788%" height="15" fill="rgb(217,221,4)" fg:x="194" fg:w="1"/><text x="15.5376%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.2876%" y="261" width="0.0788%" height="15" fill="rgb(212,174,34)" fg:x="194" fg:w="1"/><text x="15.5376%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (2 samples, 0.16%)</title><rect x="15.2876%" y="565" width="0.1576%" height="15" fill="rgb(253,83,4)" fg:x="194" fg:w="2"/><text x="15.5376%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="15.2876%" y="549" width="0.1576%" height="15" fill="rgb(250,195,49)" fg:x="194" fg:w="2"/><text x="15.5376%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="15.2876%" y="533" width="0.1576%" height="15" fill="rgb(241,192,25)" fg:x="194" fg:w="2"/><text x="15.5376%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="15.2876%" y="517" width="0.1576%" height="15" fill="rgb(208,124,10)" fg:x="194" fg:w="2"/><text x="15.5376%" y="527.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="15.2876%" y="501" width="0.1576%" height="15" fill="rgb(222,33,0)" fg:x="194" fg:w="2"/><text x="15.5376%" y="511.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="15.2876%" y="485" width="0.1576%" height="15" fill="rgb(234,209,28)" fg:x="194" fg:w="2"/><text x="15.5376%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="15.2876%" y="469" width="0.1576%" height="15" fill="rgb(224,11,23)" fg:x="194" fg:w="2"/><text x="15.5376%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="15.2876%" y="453" width="0.1576%" height="15" fill="rgb(232,99,1)" fg:x="194" fg:w="2"/><text x="15.5376%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="15.3664%" y="437" width="0.0788%" height="15" fill="rgb(237,95,45)" fg:x="195" fg:w="1"/><text x="15.6164%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.3664%" y="421" width="0.0788%" height="15" fill="rgb(208,109,11)" fg:x="195" fg:w="1"/><text x="15.6164%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="15.3664%" y="405" width="0.0788%" height="15" fill="rgb(216,190,48)" fg:x="195" fg:w="1"/><text x="15.6164%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.3664%" y="389" width="0.0788%" height="15" fill="rgb(251,171,36)" fg:x="195" fg:w="1"/><text x="15.6164%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.3664%" y="373" width="0.0788%" height="15" fill="rgb(230,62,22)" fg:x="195" fg:w="1"/><text x="15.6164%" y="383.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="15.3664%" y="357" width="0.0788%" height="15" fill="rgb(225,114,35)" fg:x="195" fg:w="1"/><text x="15.6164%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="15.3664%" y="341" width="0.0788%" height="15" fill="rgb(215,118,42)" fg:x="195" fg:w="1"/><text x="15.6164%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="15.3664%" y="325" width="0.0788%" height="15" fill="rgb(243,119,21)" fg:x="195" fg:w="1"/><text x="15.6164%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="15.3664%" y="309" width="0.0788%" height="15" fill="rgb(252,177,53)" fg:x="195" fg:w="1"/><text x="15.6164%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="15.3664%" y="293" width="0.0788%" height="15" fill="rgb(237,209,29)" fg:x="195" fg:w="1"/><text x="15.6164%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="15.3664%" y="277" width="0.0788%" height="15" fill="rgb(212,65,23)" fg:x="195" fg:w="1"/><text x="15.6164%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.3664%" y="261" width="0.0788%" height="15" fill="rgb(230,222,46)" fg:x="195" fg:w="1"/><text x="15.6164%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="15.3664%" y="245" width="0.0788%" height="15" fill="rgb(215,135,32)" fg:x="195" fg:w="1"/><text x="15.6164%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.3664%" y="229" width="0.0788%" height="15" fill="rgb(246,101,22)" fg:x="195" fg:w="1"/><text x="15.6164%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="15.3664%" y="213" width="0.0788%" height="15" fill="rgb(206,107,13)" fg:x="195" fg:w="1"/><text x="15.6164%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="15.3664%" y="197" width="0.0788%" height="15" fill="rgb(250,100,44)" fg:x="195" fg:w="1"/><text x="15.6164%" y="207.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="15.3664%" y="181" width="0.0788%" height="15" fill="rgb(231,147,38)" fg:x="195" fg:w="1"/><text x="15.6164%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.3664%" y="165" width="0.0788%" height="15" fill="rgb(229,8,40)" fg:x="195" fg:w="1"/><text x="15.6164%" y="175.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="15.5240%" y="485" width="0.0788%" height="15" fill="rgb(221,135,30)" fg:x="197" fg:w="1"/><text x="15.7740%" y="495.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="15.5240%" y="469" width="0.0788%" height="15" fill="rgb(249,193,18)" fg:x="197" fg:w="1"/><text x="15.7740%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="15.5240%" y="453" width="0.0788%" height="15" fill="rgb(209,133,39)" fg:x="197" fg:w="1"/><text x="15.7740%" y="463.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="15.5240%" y="437" width="0.0788%" height="15" fill="rgb(232,100,14)" fg:x="197" fg:w="1"/><text x="15.7740%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="15.5240%" y="421" width="0.0788%" height="15" fill="rgb(224,185,1)" fg:x="197" fg:w="1"/><text x="15.7740%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.5240%" y="405" width="0.0788%" height="15" fill="rgb(223,139,8)" fg:x="197" fg:w="1"/><text x="15.7740%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.5240%" y="389" width="0.0788%" height="15" fill="rgb(232,213,38)" fg:x="197" fg:w="1"/><text x="15.7740%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.5240%" y="373" width="0.0788%" height="15" fill="rgb(207,94,22)" fg:x="197" fg:w="1"/><text x="15.7740%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.5240%" y="357" width="0.0788%" height="15" fill="rgb(219,183,54)" fg:x="197" fg:w="1"/><text x="15.7740%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.5240%" y="341" width="0.0788%" height="15" fill="rgb(216,185,54)" fg:x="197" fg:w="1"/><text x="15.7740%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.5240%" y="325" width="0.0788%" height="15" fill="rgb(254,217,39)" fg:x="197" fg:w="1"/><text x="15.7740%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.5240%" y="309" width="0.0788%" height="15" fill="rgb(240,178,23)" fg:x="197" fg:w="1"/><text x="15.7740%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.5240%" y="293" width="0.0788%" height="15" fill="rgb(218,11,47)" fg:x="197" fg:w="1"/><text x="15.7740%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.5240%" y="277" width="0.0788%" height="15" fill="rgb(218,51,51)" fg:x="197" fg:w="1"/><text x="15.7740%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.5240%" y="261" width="0.0788%" height="15" fill="rgb(238,126,27)" fg:x="197" fg:w="1"/><text x="15.7740%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.5240%" y="245" width="0.0788%" height="15" fill="rgb(249,202,22)" fg:x="197" fg:w="1"/><text x="15.7740%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.5240%" y="229" width="0.0788%" height="15" fill="rgb(254,195,49)" fg:x="197" fg:w="1"/><text x="15.7740%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.5240%" y="213" width="0.0788%" height="15" fill="rgb(208,123,14)" fg:x="197" fg:w="1"/><text x="15.7740%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.5240%" y="197" width="0.0788%" height="15" fill="rgb(224,200,8)" fg:x="197" fg:w="1"/><text x="15.7740%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.5240%" y="181" width="0.0788%" height="15" fill="rgb(217,61,36)" fg:x="197" fg:w="1"/><text x="15.7740%" y="191.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="15.5240%" y="533" width="0.1576%" height="15" fill="rgb(206,35,45)" fg:x="197" fg:w="2"/><text x="15.7740%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="15.5240%" y="517" width="0.1576%" height="15" fill="rgb(217,65,33)" fg:x="197" fg:w="2"/><text x="15.7740%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="15.5240%" y="501" width="0.1576%" height="15" fill="rgb(222,158,48)" fg:x="197" fg:w="2"/><text x="15.7740%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="15.6028%" y="485" width="0.0788%" height="15" fill="rgb(254,2,54)" fg:x="198" fg:w="1"/><text x="15.8528%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.6028%" y="469" width="0.0788%" height="15" fill="rgb(250,143,38)" fg:x="198" fg:w="1"/><text x="15.8528%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.6028%" y="453" width="0.0788%" height="15" fill="rgb(248,25,0)" fg:x="198" fg:w="1"/><text x="15.8528%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="15.6028%" y="437" width="0.0788%" height="15" fill="rgb(206,152,27)" fg:x="198" fg:w="1"/><text x="15.8528%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.6028%" y="421" width="0.0788%" height="15" fill="rgb(240,77,30)" fg:x="198" fg:w="1"/><text x="15.8528%" y="431.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="15.6028%" y="405" width="0.0788%" height="15" fill="rgb(231,5,3)" fg:x="198" fg:w="1"/><text x="15.8528%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="15.6028%" y="389" width="0.0788%" height="15" fill="rgb(207,226,32)" fg:x="198" fg:w="1"/><text x="15.8528%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="15.6028%" y="373" width="0.0788%" height="15" fill="rgb(222,207,47)" fg:x="198" fg:w="1"/><text x="15.8528%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="15.6028%" y="357" width="0.0788%" height="15" fill="rgb(229,115,45)" fg:x="198" fg:w="1"/><text x="15.8528%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="15.6028%" y="341" width="0.0788%" height="15" fill="rgb(224,191,6)" fg:x="198" fg:w="1"/><text x="15.8528%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="15.6028%" y="325" width="0.0788%" height="15" fill="rgb(230,227,24)" fg:x="198" fg:w="1"/><text x="15.8528%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="15.6028%" y="309" width="0.0788%" height="15" fill="rgb(228,80,19)" fg:x="198" fg:w="1"/><text x="15.8528%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="15.6028%" y="293" width="0.0788%" height="15" fill="rgb(247,229,0)" fg:x="198" fg:w="1"/><text x="15.8528%" y="303.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (6 samples, 0.47%)</title><rect x="15.2876%" y="597" width="0.4728%" height="15" fill="rgb(237,194,15)" fg:x="194" fg:w="6"/><text x="15.5376%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (6 samples, 0.47%)</title><rect x="15.2876%" y="581" width="0.4728%" height="15" fill="rgb(219,203,20)" fg:x="194" fg:w="6"/><text x="15.5376%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="15.4452%" y="565" width="0.3152%" height="15" fill="rgb(234,128,8)" fg:x="196" fg:w="4"/><text x="15.6952%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="15.4452%" y="549" width="0.3152%" height="15" fill="rgb(248,202,8)" fg:x="196" fg:w="4"/><text x="15.6952%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.6816%" y="533" width="0.0788%" height="15" fill="rgb(206,104,37)" fg:x="199" fg:w="1"/><text x="15.9316%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.6816%" y="517" width="0.0788%" height="15" fill="rgb(223,8,27)" fg:x="199" fg:w="1"/><text x="15.9316%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="16.0757%" y="437" width="0.0788%" height="15" fill="rgb(216,217,28)" fg:x="204" fg:w="1"/><text x="16.3257%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.1545%" y="389" width="0.1576%" height="15" fill="rgb(249,199,1)" fg:x="205" fg:w="2"/><text x="16.4045%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.1545%" y="373" width="0.1576%" height="15" fill="rgb(240,85,17)" fg:x="205" fg:w="2"/><text x="16.4045%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.2333%" y="357" width="0.0788%" height="15" fill="rgb(206,108,45)" fg:x="206" fg:w="1"/><text x="16.4833%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.2333%" y="341" width="0.0788%" height="15" fill="rgb(245,210,41)" fg:x="206" fg:w="1"/><text x="16.4833%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.2333%" y="325" width="0.0788%" height="15" fill="rgb(206,13,37)" fg:x="206" fg:w="1"/><text x="16.4833%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.2333%" y="309" width="0.0788%" height="15" fill="rgb(250,61,18)" fg:x="206" fg:w="1"/><text x="16.4833%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.2333%" y="293" width="0.0788%" height="15" fill="rgb(235,172,48)" fg:x="206" fg:w="1"/><text x="16.4833%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.2333%" y="277" width="0.0788%" height="15" fill="rgb(249,201,17)" fg:x="206" fg:w="1"/><text x="16.4833%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.2333%" y="261" width="0.0788%" height="15" fill="rgb(219,208,6)" fg:x="206" fg:w="1"/><text x="16.4833%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.2333%" y="245" width="0.0788%" height="15" fill="rgb(248,31,23)" fg:x="206" fg:w="1"/><text x="16.4833%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.2333%" y="229" width="0.0788%" height="15" fill="rgb(245,15,42)" fg:x="206" fg:w="1"/><text x="16.4833%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.2333%" y="213" width="0.0788%" height="15" fill="rgb(222,217,39)" fg:x="206" fg:w="1"/><text x="16.4833%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.2333%" y="197" width="0.0788%" height="15" fill="rgb(210,219,27)" fg:x="206" fg:w="1"/><text x="16.4833%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.2333%" y="181" width="0.0788%" height="15" fill="rgb(252,166,36)" fg:x="206" fg:w="1"/><text x="16.4833%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.2333%" y="165" width="0.0788%" height="15" fill="rgb(245,132,34)" fg:x="206" fg:w="1"/><text x="16.4833%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="16.3121%" y="293" width="0.0788%" height="15" fill="rgb(236,54,3)" fg:x="207" fg:w="1"/><text x="16.5621%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (4 samples, 0.32%)</title><rect x="16.1545%" y="437" width="0.3152%" height="15" fill="rgb(241,173,43)" fg:x="205" fg:w="4"/><text x="16.4045%" y="447.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="16.1545%" y="421" width="0.3152%" height="15" fill="rgb(215,190,9)" fg:x="205" fg:w="4"/><text x="16.4045%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="16.1545%" y="405" width="0.3152%" height="15" fill="rgb(242,101,16)" fg:x="205" fg:w="4"/><text x="16.4045%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="16.3121%" y="389" width="0.1576%" height="15" fill="rgb(223,190,21)" fg:x="207" fg:w="2"/><text x="16.5621%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.3121%" y="373" width="0.1576%" height="15" fill="rgb(215,228,25)" fg:x="207" fg:w="2"/><text x="16.5621%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="16.3121%" y="357" width="0.1576%" height="15" fill="rgb(225,36,22)" fg:x="207" fg:w="2"/><text x="16.5621%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.3121%" y="341" width="0.1576%" height="15" fill="rgb(251,106,46)" fg:x="207" fg:w="2"/><text x="16.5621%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="16.3121%" y="325" width="0.1576%" height="15" fill="rgb(208,90,1)" fg:x="207" fg:w="2"/><text x="16.5621%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.3121%" y="309" width="0.1576%" height="15" fill="rgb(243,10,4)" fg:x="207" fg:w="2"/><text x="16.5621%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.3909%" y="293" width="0.0788%" height="15" fill="rgb(212,137,27)" fg:x="208" fg:w="1"/><text x="16.6409%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.3909%" y="277" width="0.0788%" height="15" fill="rgb(231,220,49)" fg:x="208" fg:w="1"/><text x="16.6409%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.3909%" y="261" width="0.0788%" height="15" fill="rgb(237,96,20)" fg:x="208" fg:w="1"/><text x="16.6409%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.3909%" y="245" width="0.0788%" height="15" fill="rgb(239,229,30)" fg:x="208" fg:w="1"/><text x="16.6409%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="16.3909%" y="229" width="0.0788%" height="15" fill="rgb(219,65,33)" fg:x="208" fg:w="1"/><text x="16.6409%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.4697%" y="389" width="0.0788%" height="15" fill="rgb(243,134,7)" fg:x="209" fg:w="1"/><text x="16.7197%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.4697%" y="373" width="0.0788%" height="15" fill="rgb(216,177,54)" fg:x="209" fg:w="1"/><text x="16.7197%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.4697%" y="357" width="0.0788%" height="15" fill="rgb(211,160,20)" fg:x="209" fg:w="1"/><text x="16.7197%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.4697%" y="341" width="0.0788%" height="15" fill="rgb(239,85,39)" fg:x="209" fg:w="1"/><text x="16.7197%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.4697%" y="325" width="0.0788%" height="15" fill="rgb(232,125,22)" fg:x="209" fg:w="1"/><text x="16.7197%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.4697%" y="309" width="0.0788%" height="15" fill="rgb(244,57,34)" fg:x="209" fg:w="1"/><text x="16.7197%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.4697%" y="293" width="0.0788%" height="15" fill="rgb(214,203,32)" fg:x="209" fg:w="1"/><text x="16.7197%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.4697%" y="277" width="0.0788%" height="15" fill="rgb(207,58,43)" fg:x="209" fg:w="1"/><text x="16.7197%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.4697%" y="261" width="0.0788%" height="15" fill="rgb(215,193,15)" fg:x="209" fg:w="1"/><text x="16.7197%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.4697%" y="245" width="0.0788%" height="15" fill="rgb(232,15,44)" fg:x="209" fg:w="1"/><text x="16.7197%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.4697%" y="229" width="0.0788%" height="15" fill="rgb(212,3,48)" fg:x="209" fg:w="1"/><text x="16.7197%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.4697%" y="213" width="0.0788%" height="15" fill="rgb(218,128,7)" fg:x="209" fg:w="1"/><text x="16.7197%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.4697%" y="197" width="0.0788%" height="15" fill="rgb(226,216,39)" fg:x="209" fg:w="1"/><text x="16.7197%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.5485%" y="389" width="0.0788%" height="15" fill="rgb(243,47,51)" fg:x="210" fg:w="1"/><text x="16.7985%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="16.5485%" y="373" width="0.0788%" height="15" fill="rgb(241,183,40)" fg:x="210" fg:w="1"/><text x="16.7985%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.5485%" y="357" width="0.0788%" height="15" fill="rgb(231,217,32)" fg:x="210" fg:w="1"/><text x="16.7985%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.5485%" y="341" width="0.0788%" height="15" fill="rgb(229,61,38)" fg:x="210" fg:w="1"/><text x="16.7985%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.5485%" y="325" width="0.0788%" height="15" fill="rgb(225,210,5)" fg:x="210" fg:w="1"/><text x="16.7985%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.5485%" y="309" width="0.0788%" height="15" fill="rgb(231,79,45)" fg:x="210" fg:w="1"/><text x="16.7985%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (5 samples, 0.39%)</title><rect x="16.4697%" y="437" width="0.3940%" height="15" fill="rgb(224,100,7)" fg:x="209" fg:w="5"/><text x="16.7197%" y="447.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.39%)</title><rect x="16.4697%" y="421" width="0.3940%" height="15" fill="rgb(241,198,18)" fg:x="209" fg:w="5"/><text x="16.7197%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.39%)</title><rect x="16.4697%" y="405" width="0.3940%" height="15" fill="rgb(252,97,53)" fg:x="209" fg:w="5"/><text x="16.7197%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="16.6273%" y="389" width="0.2364%" height="15" fill="rgb(220,88,7)" fg:x="211" fg:w="3"/><text x="16.8773%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="16.6273%" y="373" width="0.2364%" height="15" fill="rgb(213,176,14)" fg:x="211" fg:w="3"/><text x="16.8773%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="16.6273%" y="357" width="0.2364%" height="15" fill="rgb(246,73,7)" fg:x="211" fg:w="3"/><text x="16.8773%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="16.6273%" y="341" width="0.2364%" height="15" fill="rgb(245,64,36)" fg:x="211" fg:w="3"/><text x="16.8773%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="16.6273%" y="325" width="0.2364%" height="15" fill="rgb(245,80,10)" fg:x="211" fg:w="3"/><text x="16.8773%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="16.6273%" y="309" width="0.2364%" height="15" fill="rgb(232,107,50)" fg:x="211" fg:w="3"/><text x="16.8773%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="16.7061%" y="293" width="0.1576%" height="15" fill="rgb(253,3,0)" fg:x="212" fg:w="2"/><text x="16.9561%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.7061%" y="277" width="0.1576%" height="15" fill="rgb(212,99,53)" fg:x="212" fg:w="2"/><text x="16.9561%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.7849%" y="261" width="0.0788%" height="15" fill="rgb(249,111,54)" fg:x="213" fg:w="1"/><text x="17.0349%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.7849%" y="245" width="0.0788%" height="15" fill="rgb(249,55,30)" fg:x="213" fg:w="1"/><text x="17.0349%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.7849%" y="229" width="0.0788%" height="15" fill="rgb(237,47,42)" fg:x="213" fg:w="1"/><text x="17.0349%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.8637%" y="437" width="0.0788%" height="15" fill="rgb(211,20,18)" fg:x="214" fg:w="1"/><text x="17.1137%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="17.1001%" y="405" width="0.0788%" height="15" fill="rgb(231,203,46)" fg:x="217" fg:w="1"/><text x="17.3501%" y="415.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="17.1789%" y="357" width="0.0788%" height="15" fill="rgb(237,142,3)" fg:x="218" fg:w="1"/><text x="17.4289%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="17.1789%" y="341" width="0.0788%" height="15" fill="rgb(241,107,1)" fg:x="218" fg:w="1"/><text x="17.4289%" y="351.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="17.1789%" y="325" width="0.0788%" height="15" fill="rgb(229,83,13)" fg:x="218" fg:w="1"/><text x="17.4289%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="17.1789%" y="309" width="0.0788%" height="15" fill="rgb(241,91,40)" fg:x="218" fg:w="1"/><text x="17.4289%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="17.1789%" y="293" width="0.0788%" height="15" fill="rgb(225,3,45)" fg:x="218" fg:w="1"/><text x="17.4289%" y="303.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="17.1789%" y="277" width="0.0788%" height="15" fill="rgb(244,223,14)" fg:x="218" fg:w="1"/><text x="17.4289%" y="287.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="17.1789%" y="261" width="0.0788%" height="15" fill="rgb(224,124,37)" fg:x="218" fg:w="1"/><text x="17.4289%" y="271.50"></text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.39%)</title><rect x="16.9425%" y="437" width="0.3940%" height="15" fill="rgb(251,171,30)" fg:x="215" fg:w="5"/><text x="17.1925%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.39%)</title><rect x="16.9425%" y="421" width="0.3940%" height="15" fill="rgb(236,46,54)" fg:x="215" fg:w="5"/><text x="17.1925%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (2 samples, 0.16%)</title><rect x="17.1789%" y="405" width="0.1576%" height="15" fill="rgb(245,213,5)" fg:x="218" fg:w="2"/><text x="17.4289%" y="415.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (2 samples, 0.16%)</title><rect x="17.1789%" y="389" width="0.1576%" height="15" fill="rgb(230,144,27)" fg:x="218" fg:w="2"/><text x="17.4289%" y="399.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="17.1789%" y="373" width="0.1576%" height="15" fill="rgb(220,86,6)" fg:x="218" fg:w="2"/><text x="17.4289%" y="383.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="17.2577%" y="357" width="0.0788%" height="15" fill="rgb(240,20,13)" fg:x="219" fg:w="1"/><text x="17.5077%" y="367.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="17.2577%" y="341" width="0.0788%" height="15" fill="rgb(217,89,34)" fg:x="219" fg:w="1"/><text x="17.5077%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.2577%" y="325" width="0.0788%" height="15" fill="rgb(229,13,5)" fg:x="219" fg:w="1"/><text x="17.5077%" y="335.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="17.2577%" y="309" width="0.0788%" height="15" fill="rgb(244,67,35)" fg:x="219" fg:w="1"/><text x="17.5077%" y="319.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="17.2577%" y="293" width="0.0788%" height="15" fill="rgb(221,40,2)" fg:x="219" fg:w="1"/><text x="17.5077%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="17.2577%" y="277" width="0.0788%" height="15" fill="rgb(237,157,21)" fg:x="219" fg:w="1"/><text x="17.5077%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.4153%" y="341" width="0.0788%" height="15" fill="rgb(222,94,11)" fg:x="221" fg:w="1"/><text x="17.6653%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.4153%" y="325" width="0.0788%" height="15" fill="rgb(249,113,6)" fg:x="221" fg:w="1"/><text x="17.6653%" y="335.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="17.4153%" y="309" width="0.0788%" height="15" fill="rgb(238,137,36)" fg:x="221" fg:w="1"/><text x="17.6653%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="17.4153%" y="293" width="0.0788%" height="15" fill="rgb(210,102,26)" fg:x="221" fg:w="1"/><text x="17.6653%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="17.4153%" y="277" width="0.0788%" height="15" fill="rgb(218,30,30)" fg:x="221" fg:w="1"/><text x="17.6653%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="17.4153%" y="261" width="0.0788%" height="15" fill="rgb(214,67,26)" fg:x="221" fg:w="1"/><text x="17.6653%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="17.4153%" y="245" width="0.0788%" height="15" fill="rgb(251,9,53)" fg:x="221" fg:w="1"/><text x="17.6653%" y="255.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="17.4153%" y="389" width="0.1576%" height="15" fill="rgb(228,204,25)" fg:x="221" fg:w="2"/><text x="17.6653%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="17.4153%" y="373" width="0.1576%" height="15" fill="rgb(207,153,8)" fg:x="221" fg:w="2"/><text x="17.6653%" y="383.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="17.4153%" y="357" width="0.1576%" height="15" fill="rgb(242,9,16)" fg:x="221" fg:w="2"/><text x="17.6653%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.4941%" y="341" width="0.0788%" height="15" fill="rgb(217,211,10)" fg:x="222" fg:w="1"/><text x="17.7441%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.4941%" y="325" width="0.0788%" height="15" fill="rgb(219,228,52)" fg:x="222" fg:w="1"/><text x="17.7441%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.4941%" y="309" width="0.0788%" height="15" fill="rgb(231,92,29)" fg:x="222" fg:w="1"/><text x="17.7441%" y="319.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="17.4941%" y="293" width="0.0788%" height="15" fill="rgb(232,8,23)" fg:x="222" fg:w="1"/><text x="17.7441%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="17.4941%" y="277" width="0.0788%" height="15" fill="rgb(216,211,34)" fg:x="222" fg:w="1"/><text x="17.7441%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="17.4941%" y="261" width="0.0788%" height="15" fill="rgb(236,151,0)" fg:x="222" fg:w="1"/><text x="17.7441%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="17.4941%" y="245" width="0.0788%" height="15" fill="rgb(209,168,3)" fg:x="222" fg:w="1"/><text x="17.7441%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="17.4941%" y="229" width="0.0788%" height="15" fill="rgb(208,129,28)" fg:x="222" fg:w="1"/><text x="17.7441%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="17.4941%" y="213" width="0.0788%" height="15" fill="rgb(229,78,22)" fg:x="222" fg:w="1"/><text x="17.7441%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="17.4941%" y="197" width="0.0788%" height="15" fill="rgb(228,187,13)" fg:x="222" fg:w="1"/><text x="17.7441%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="17.4941%" y="181" width="0.0788%" height="15" fill="rgb(240,119,24)" fg:x="222" fg:w="1"/><text x="17.7441%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.4941%" y="165" width="0.0788%" height="15" fill="rgb(209,194,42)" fg:x="222" fg:w="1"/><text x="17.7441%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.4941%" y="149" width="0.0788%" height="15" fill="rgb(247,200,46)" fg:x="222" fg:w="1"/><text x="17.7441%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="17.7305%" y="261" width="0.0788%" height="15" fill="rgb(218,76,16)" fg:x="225" fg:w="1"/><text x="17.9805%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="17.7305%" y="245" width="0.0788%" height="15" fill="rgb(225,21,48)" fg:x="225" fg:w="1"/><text x="17.9805%" y="255.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="17.8093%" y="245" width="0.0788%" height="15" fill="rgb(239,223,50)" fg:x="226" fg:w="1"/><text x="18.0593%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="17.7305%" y="277" width="0.2364%" height="15" fill="rgb(244,45,21)" fg:x="225" fg:w="3"/><text x="17.9805%" y="287.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="17.8093%" y="261" width="0.1576%" height="15" fill="rgb(232,33,43)" fg:x="226" fg:w="2"/><text x="18.0593%" y="271.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="17.8881%" y="245" width="0.0788%" height="15" fill="rgb(209,8,3)" fg:x="227" fg:w="1"/><text x="18.1381%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="17.7305%" y="293" width="0.3152%" height="15" fill="rgb(214,25,53)" fg:x="225" fg:w="4"/><text x="17.9805%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="17.9669%" y="277" width="0.0788%" height="15" fill="rgb(254,186,54)" fg:x="228" fg:w="1"/><text x="18.2169%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="17.9669%" y="261" width="0.0788%" height="15" fill="rgb(208,174,49)" fg:x="228" fg:w="1"/><text x="18.2169%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.9669%" y="245" width="0.0788%" height="15" fill="rgb(233,191,51)" fg:x="228" fg:w="1"/><text x="18.2169%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.9669%" y="229" width="0.0788%" height="15" fill="rgb(222,134,10)" fg:x="228" fg:w="1"/><text x="18.2169%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.47%)</title><rect x="17.6517%" y="357" width="0.4728%" height="15" fill="rgb(230,226,20)" fg:x="224" fg:w="6"/><text x="17.9017%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.39%)</title><rect x="17.7305%" y="341" width="0.3940%" height="15" fill="rgb(251,111,25)" fg:x="225" fg:w="5"/><text x="17.9805%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.39%)</title><rect x="17.7305%" y="325" width="0.3940%" height="15" fill="rgb(224,40,46)" fg:x="225" fg:w="5"/><text x="17.9805%" y="335.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (5 samples, 0.39%)</title><rect x="17.7305%" y="309" width="0.3940%" height="15" fill="rgb(236,108,47)" fg:x="225" fg:w="5"/><text x="17.9805%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="18.0457%" y="293" width="0.0788%" height="15" fill="rgb(234,93,0)" fg:x="229" fg:w="1"/><text x="18.2957%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="18.0457%" y="277" width="0.0788%" height="15" fill="rgb(224,213,32)" fg:x="229" fg:w="1"/><text x="18.2957%" y="287.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="18.0457%" y="261" width="0.0788%" height="15" fill="rgb(251,11,48)" fg:x="229" fg:w="1"/><text x="18.2957%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="18.1245%" y="325" width="0.0788%" height="15" fill="rgb(236,173,5)" fg:x="230" fg:w="1"/><text x="18.3745%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="18.1245%" y="309" width="0.0788%" height="15" fill="rgb(230,95,12)" fg:x="230" fg:w="1"/><text x="18.3745%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.1245%" y="293" width="0.0788%" height="15" fill="rgb(232,209,1)" fg:x="230" fg:w="1"/><text x="18.3745%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.2033%" y="309" width="0.0788%" height="15" fill="rgb(232,6,1)" fg:x="231" fg:w="1"/><text x="18.4533%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.3609%" y="293" width="0.0788%" height="15" fill="rgb(210,224,50)" fg:x="233" fg:w="1"/><text x="18.6109%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.39%)</title><rect x="18.1245%" y="357" width="0.3940%" height="15" fill="rgb(228,127,35)" fg:x="230" fg:w="5"/><text x="18.3745%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.39%)</title><rect x="18.1245%" y="341" width="0.3940%" height="15" fill="rgb(245,102,45)" fg:x="230" fg:w="5"/><text x="18.3745%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="18.2033%" y="325" width="0.3152%" height="15" fill="rgb(214,1,49)" fg:x="231" fg:w="4"/><text x="18.4533%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="18.2821%" y="309" width="0.2364%" height="15" fill="rgb(226,163,40)" fg:x="232" fg:w="3"/><text x="18.5321%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.4397%" y="293" width="0.0788%" height="15" fill="rgb(239,212,28)" fg:x="234" fg:w="1"/><text x="18.6897%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.5185%" y="309" width="0.0788%" height="15" fill="rgb(220,20,13)" fg:x="235" fg:w="1"/><text x="18.7685%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.5185%" y="293" width="0.0788%" height="15" fill="rgb(210,164,35)" fg:x="235" fg:w="1"/><text x="18.7685%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.5973%" y="309" width="0.0788%" height="15" fill="rgb(248,109,41)" fg:x="236" fg:w="1"/><text x="18.8473%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.6761%" y="309" width="0.0788%" height="15" fill="rgb(238,23,50)" fg:x="237" fg:w="1"/><text x="18.9261%" y="319.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="18.7549%" y="309" width="0.0788%" height="15" fill="rgb(211,48,49)" fg:x="238" fg:w="1"/><text x="19.0049%" y="319.50"></text></g><g><title>regex_syntax::hir::Properties::union (1 samples, 0.08%)</title><rect x="18.7549%" y="293" width="0.0788%" height="15" fill="rgb(223,36,21)" fg:x="238" fg:w="1"/><text x="19.0049%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.0701%" y="293" width="0.0788%" height="15" fill="rgb(207,123,46)" fg:x="242" fg:w="1"/><text x="19.3201%" y="303.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="19.3853%" y="277" width="0.2364%" height="15" fill="rgb(240,218,32)" fg:x="246" fg:w="3"/><text x="19.6353%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (30 samples, 2.36%)</title><rect x="19.6217%" y="277" width="2.3641%" height="15" fill="rgb(252,5,43)" fg:x="249" fg:w="30"/><text x="19.8717%" y="287.50">co..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.9070%" y="261" width="0.0788%" height="15" fill="rgb(252,84,19)" fg:x="278" fg:w="1"/><text x="22.1570%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (37 samples, 2.92%)</title><rect x="19.1489%" y="293" width="2.9157%" height="15" fill="rgb(243,152,39)" fg:x="243" fg:w="37"/><text x="19.3989%" y="303.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="21.9858%" y="277" width="0.0788%" height="15" fill="rgb(234,160,15)" fg:x="279" fg:w="1"/><text x="22.2358%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.9858%" y="261" width="0.0788%" height="15" fill="rgb(237,34,20)" fg:x="279" fg:w="1"/><text x="22.2358%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="22.0646%" y="293" width="0.0788%" height="15" fill="rgb(229,97,13)" fg:x="280" fg:w="1"/><text x="22.3146%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="22.3010%" y="277" width="0.3152%" height="15" fill="rgb(234,71,50)" fg:x="283" fg:w="4"/><text x="22.5510%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="22.5374%" y="261" width="0.0788%" height="15" fill="rgb(253,155,4)" fg:x="286" fg:w="1"/><text x="22.7874%" y="271.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="22.5374%" y="245" width="0.0788%" height="15" fill="rgb(222,185,37)" fg:x="286" fg:w="1"/><text x="22.7874%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.55%)</title><rect x="22.1434%" y="293" width="0.5516%" height="15" fill="rgb(251,177,13)" fg:x="281" fg:w="7"/><text x="22.3934%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="22.6162%" y="277" width="0.0788%" height="15" fill="rgb(250,179,40)" fg:x="287" fg:w="1"/><text x="22.8662%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="22.6162%" y="261" width="0.0788%" height="15" fill="rgb(242,44,2)" fg:x="287" fg:w="1"/><text x="22.8662%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="22.6162%" y="245" width="0.0788%" height="15" fill="rgb(216,177,13)" fg:x="287" fg:w="1"/><text x="22.8662%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="22.6950%" y="293" width="0.0788%" height="15" fill="rgb(216,106,43)" fg:x="288" fg:w="1"/><text x="22.9450%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="22.6950%" y="277" width="0.0788%" height="15" fill="rgb(216,183,2)" fg:x="288" fg:w="1"/><text x="22.9450%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="22.6950%" y="261" width="0.0788%" height="15" fill="rgb(249,75,3)" fg:x="288" fg:w="1"/><text x="22.9450%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="22.6950%" y="245" width="0.0788%" height="15" fill="rgb(219,67,39)" fg:x="288" fg:w="1"/><text x="22.9450%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="22.6950%" y="229" width="0.0788%" height="15" fill="rgb(253,228,2)" fg:x="288" fg:w="1"/><text x="22.9450%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.6950%" y="213" width="0.0788%" height="15" fill="rgb(235,138,27)" fg:x="288" fg:w="1"/><text x="22.9450%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="22.8526%" y="245" width="0.0788%" height="15" fill="rgb(236,97,51)" fg:x="290" fg:w="1"/><text x="23.1026%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="23.3255%" y="229" width="0.1576%" height="15" fill="rgb(240,80,30)" fg:x="296" fg:w="2"/><text x="23.5755%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.39%)</title><rect x="23.4831%" y="229" width="0.3940%" height="15" fill="rgb(230,178,19)" fg:x="298" fg:w="5"/><text x="23.7331%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="23.7983%" y="213" width="0.0788%" height="15" fill="rgb(210,190,27)" fg:x="302" fg:w="1"/><text x="24.0483%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.7983%" y="197" width="0.0788%" height="15" fill="rgb(222,107,31)" fg:x="302" fg:w="1"/><text x="24.0483%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.7983%" y="181" width="0.0788%" height="15" fill="rgb(216,127,34)" fg:x="302" fg:w="1"/><text x="24.0483%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="23.8771%" y="229" width="0.1576%" height="15" fill="rgb(234,116,52)" fg:x="303" fg:w="2"/><text x="24.1271%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="23.9559%" y="213" width="0.0788%" height="15" fill="rgb(222,124,15)" fg:x="304" fg:w="1"/><text x="24.2059%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.9559%" y="197" width="0.0788%" height="15" fill="rgb(231,179,28)" fg:x="304" fg:w="1"/><text x="24.2059%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.9559%" y="181" width="0.0788%" height="15" fill="rgb(226,93,45)" fg:x="304" fg:w="1"/><text x="24.2059%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="24.0347%" y="229" width="0.2364%" height="15" fill="rgb(215,8,51)" fg:x="305" fg:w="3"/><text x="24.2847%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="24.1135%" y="213" width="0.1576%" height="15" fill="rgb(223,106,5)" fg:x="306" fg:w="2"/><text x="24.3635%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="24.2711%" y="213" width="0.0788%" height="15" fill="rgb(250,191,5)" fg:x="308" fg:w="1"/><text x="24.5211%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.3499%" y="197" width="0.0788%" height="15" fill="rgb(242,132,44)" fg:x="309" fg:w="1"/><text x="24.5999%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (99 samples, 7.80%)</title><rect x="24.2711%" y="229" width="7.8014%" height="15" fill="rgb(251,152,29)" fg:x="308" fg:w="99"/><text x="24.5211%" y="239.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (98 samples, 7.72%)</title><rect x="24.3499%" y="213" width="7.7226%" height="15" fill="rgb(218,179,5)" fg:x="309" fg:w="98"/><text x="24.5999%" y="223.50">regex_autom..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (97 samples, 7.64%)</title><rect x="24.4287%" y="197" width="7.6438%" height="15" fill="rgb(227,67,19)" fg:x="310" fg:w="97"/><text x="24.6787%" y="207.50">alloc::vec..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="32.0725%" y="229" width="0.3152%" height="15" fill="rgb(233,119,31)" fg:x="407" fg:w="4"/><text x="32.3225%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (122 samples, 9.61%)</title><rect x="22.8526%" y="277" width="9.6139%" height="15" fill="rgb(241,120,22)" fg:x="290" fg:w="122"/><text x="23.1026%" y="287.50">&lt;core::iter::a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (122 samples, 9.61%)</title><rect x="22.8526%" y="261" width="9.6139%" height="15" fill="rgb(224,102,30)" fg:x="290" fg:w="122"/><text x="23.1026%" y="271.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (121 samples, 9.54%)</title><rect x="22.9314%" y="245" width="9.5351%" height="15" fill="rgb(210,164,37)" fg:x="291" fg:w="121"/><text x="23.1814%" y="255.50">regex_automata..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="32.3877%" y="229" width="0.0788%" height="15" fill="rgb(226,191,16)" fg:x="411" fg:w="1"/><text x="32.6377%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.3877%" y="213" width="0.0788%" height="15" fill="rgb(214,40,45)" fg:x="411" fg:w="1"/><text x="32.6377%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="32.5453%" y="261" width="0.2364%" height="15" fill="rgb(244,29,26)" fg:x="413" fg:w="3"/><text x="32.7953%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="32.6241%" y="245" width="0.1576%" height="15" fill="rgb(216,16,5)" fg:x="414" fg:w="2"/><text x="32.8741%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="32.6241%" y="229" width="0.1576%" height="15" fill="rgb(249,76,35)" fg:x="414" fg:w="2"/><text x="32.8741%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.7029%" y="213" width="0.0788%" height="15" fill="rgb(207,11,44)" fg:x="415" fg:w="1"/><text x="32.9529%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="33.1757%" y="245" width="0.0788%" height="15" fill="rgb(228,190,49)" fg:x="421" fg:w="1"/><text x="33.4257%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="33.1757%" y="229" width="0.0788%" height="15" fill="rgb(214,173,12)" fg:x="421" fg:w="1"/><text x="33.4257%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.87%)</title><rect x="32.4665%" y="277" width="0.8668%" height="15" fill="rgb(218,26,35)" fg:x="412" fg:w="11"/><text x="32.7165%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.55%)</title><rect x="32.7817%" y="261" width="0.5516%" height="15" fill="rgb(220,200,19)" fg:x="416" fg:w="7"/><text x="33.0317%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.2545%" y="245" width="0.0788%" height="15" fill="rgb(239,95,49)" fg:x="422" fg:w="1"/><text x="33.5045%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.2545%" y="229" width="0.0788%" height="15" fill="rgb(235,85,53)" fg:x="422" fg:w="1"/><text x="33.5045%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.2545%" y="213" width="0.0788%" height="15" fill="rgb(233,133,31)" fg:x="422" fg:w="1"/><text x="33.5045%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="33.3333%" y="277" width="0.0788%" height="15" fill="rgb(218,25,20)" fg:x="423" fg:w="1"/><text x="33.5833%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (139 samples, 10.95%)</title><rect x="22.7738%" y="293" width="10.9535%" height="15" fill="rgb(252,210,38)" fg:x="289" fg:w="139"/><text x="23.0238%" y="303.50">regex_automata::..</text></g><g><title>regex_syntax::hir::Hir::dot (4 samples, 0.32%)</title><rect x="33.4121%" y="277" width="0.3152%" height="15" fill="rgb(242,134,21)" fg:x="424" fg:w="4"/><text x="33.6621%" y="287.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="33.6485%" y="261" width="0.0788%" height="15" fill="rgb(213,28,48)" fg:x="427" fg:w="1"/><text x="33.8985%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.6485%" y="245" width="0.0788%" height="15" fill="rgb(250,196,2)" fg:x="427" fg:w="1"/><text x="33.8985%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="33.7273%" y="261" width="0.0788%" height="15" fill="rgb(227,5,17)" fg:x="428" fg:w="1"/><text x="33.9773%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="33.7273%" y="293" width="0.1576%" height="15" fill="rgb(221,226,24)" fg:x="428" fg:w="2"/><text x="33.9773%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="33.7273%" y="277" width="0.1576%" height="15" fill="rgb(211,5,48)" fg:x="428" fg:w="2"/><text x="33.9773%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="33.8061%" y="261" width="0.0788%" height="15" fill="rgb(219,150,6)" fg:x="429" fg:w="1"/><text x="34.0561%" y="271.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="33.8849%" y="277" width="0.0788%" height="15" fill="rgb(251,46,16)" fg:x="430" fg:w="1"/><text x="34.1349%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (193 samples, 15.21%)</title><rect x="18.8337%" y="309" width="15.2088%" height="15" fill="rgb(220,204,40)" fg:x="239" fg:w="193"/><text x="19.0837%" y="319.50">regex_automata::meta::s..</text></g><g><title>regex_automata::util::prefilter::prefixes (2 samples, 0.16%)</title><rect x="33.8849%" y="293" width="0.1576%" height="15" fill="rgb(211,85,2)" fg:x="430" fg:w="2"/><text x="34.1349%" y="303.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::kind (1 samples, 0.08%)</title><rect x="33.9638%" y="277" width="0.0788%" height="15" fill="rgb(229,17,7)" fg:x="431" fg:w="1"/><text x="34.2138%" y="287.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="34.1214%" y="261" width="0.0788%" height="15" fill="rgb(239,72,28)" fg:x="433" fg:w="1"/><text x="34.3714%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="34.1214%" y="245" width="0.0788%" height="15" fill="rgb(230,47,54)" fg:x="433" fg:w="1"/><text x="34.3714%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="34.2002%" y="261" width="0.0788%" height="15" fill="rgb(214,50,8)" fg:x="434" fg:w="1"/><text x="34.4502%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="34.2002%" y="245" width="0.0788%" height="15" fill="rgb(216,198,43)" fg:x="434" fg:w="1"/><text x="34.4502%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.47%)</title><rect x="34.0426%" y="277" width="0.4728%" height="15" fill="rgb(234,20,35)" fg:x="432" fg:w="6"/><text x="34.2926%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="34.2790%" y="261" width="0.2364%" height="15" fill="rgb(254,45,19)" fg:x="435" fg:w="3"/><text x="34.5290%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="34.2790%" y="245" width="0.2364%" height="15" fill="rgb(219,14,44)" fg:x="435" fg:w="3"/><text x="34.5290%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="34.2790%" y="229" width="0.2364%" height="15" fill="rgb(217,220,26)" fg:x="435" fg:w="3"/><text x="34.5290%" y="239.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="34.2790%" y="213" width="0.2364%" height="15" fill="rgb(213,158,28)" fg:x="435" fg:w="3"/><text x="34.5290%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="34.5154%" y="261" width="0.0788%" height="15" fill="rgb(252,51,52)" fg:x="438" fg:w="1"/><text x="34.7654%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.63%)</title><rect x="34.0426%" y="309" width="0.6304%" height="15" fill="rgb(246,89,16)" fg:x="432" fg:w="8"/><text x="34.2926%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.63%)</title><rect x="34.0426%" y="293" width="0.6304%" height="15" fill="rgb(216,158,49)" fg:x="432" fg:w="8"/><text x="34.2926%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="34.5154%" y="277" width="0.1576%" height="15" fill="rgb(236,107,19)" fg:x="438" fg:w="2"/><text x="34.7654%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="34.5942%" y="261" width="0.0788%" height="15" fill="rgb(228,185,30)" fg:x="439" fg:w="1"/><text x="34.8442%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.5942%" y="245" width="0.0788%" height="15" fill="rgb(246,134,8)" fg:x="439" fg:w="1"/><text x="34.8442%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.5942%" y="229" width="0.0788%" height="15" fill="rgb(214,143,50)" fg:x="439" fg:w="1"/><text x="34.8442%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="34.6730%" y="277" width="0.0788%" height="15" fill="rgb(228,75,8)" fg:x="440" fg:w="1"/><text x="34.9230%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="34.6730%" y="261" width="0.0788%" height="15" fill="rgb(207,175,4)" fg:x="440" fg:w="1"/><text x="34.9230%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="34.7518%" y="277" width="0.2364%" height="15" fill="rgb(205,108,24)" fg:x="441" fg:w="3"/><text x="35.0018%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::class (2 samples, 0.16%)</title><rect x="34.8306%" y="261" width="0.1576%" height="15" fill="rgb(244,120,49)" fg:x="442" fg:w="2"/><text x="35.0806%" y="271.50"></text></g><g><title>regex_syntax::hir::Properties::class (2 samples, 0.16%)</title><rect x="34.8306%" y="245" width="0.1576%" height="15" fill="rgb(223,47,38)" fg:x="442" fg:w="2"/><text x="35.0806%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (210 samples, 16.55%)</title><rect x="18.5185%" y="357" width="16.5485%" height="15" fill="rgb(229,179,11)" fg:x="235" fg:w="210"/><text x="18.7685%" y="367.50">regex::regex::string::Rege..</text></g><g><title>regex::builders::Builder::build_one_string (210 samples, 16.55%)</title><rect x="18.5185%" y="341" width="16.5485%" height="15" fill="rgb(231,122,1)" fg:x="235" fg:w="210"/><text x="18.7685%" y="351.50">regex::builders::Builder::..</text></g><g><title>regex_automata::meta::regex::Builder::build (210 samples, 16.55%)</title><rect x="18.5185%" y="325" width="16.5485%" height="15" fill="rgb(245,119,9)" fg:x="235" fg:w="210"/><text x="18.7685%" y="335.50">regex_automata::meta::rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.39%)</title><rect x="34.6730%" y="309" width="0.3940%" height="15" fill="rgb(241,163,25)" fg:x="440" fg:w="5"/><text x="34.9230%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.39%)</title><rect x="34.6730%" y="293" width="0.3940%" height="15" fill="rgb(217,214,3)" fg:x="440" fg:w="5"/><text x="34.9230%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="34.9882%" y="277" width="0.0788%" height="15" fill="rgb(240,86,28)" fg:x="444" fg:w="1"/><text x="35.2382%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.0670%" y="293" width="0.0788%" height="15" fill="rgb(215,47,9)" fg:x="445" fg:w="1"/><text x="35.3170%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="35.0670%" y="277" width="0.0788%" height="15" fill="rgb(252,25,45)" fg:x="445" fg:w="1"/><text x="35.3170%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="35.0670%" y="261" width="0.0788%" height="15" fill="rgb(251,164,9)" fg:x="445" fg:w="1"/><text x="35.3170%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="35.6186%" y="277" width="0.0788%" height="15" fill="rgb(233,194,0)" fg:x="452" fg:w="1"/><text x="35.8686%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.71%)</title><rect x="35.0670%" y="309" width="0.7092%" height="15" fill="rgb(249,111,24)" fg:x="445" fg:w="9"/><text x="35.3170%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.63%)</title><rect x="35.1458%" y="293" width="0.6304%" height="15" fill="rgb(250,223,3)" fg:x="446" fg:w="8"/><text x="35.3958%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="35.6974%" y="277" width="0.0788%" height="15" fill="rgb(236,178,37)" fg:x="453" fg:w="1"/><text x="35.9474%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (232 samples, 18.28%)</title><rect x="17.5729%" y="373" width="18.2821%" height="15" fill="rgb(241,158,50)" fg:x="223" fg:w="232"/><text x="17.8229%" y="383.50">indefinite::helper::Helper::..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.79%)</title><rect x="35.0670%" y="357" width="0.7880%" height="15" fill="rgb(213,121,41)" fg:x="445" fg:w="10"/><text x="35.3170%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.79%)</title><rect x="35.0670%" y="341" width="0.7880%" height="15" fill="rgb(240,92,3)" fg:x="445" fg:w="10"/><text x="35.3170%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.79%)</title><rect x="35.0670%" y="325" width="0.7880%" height="15" fill="rgb(205,123,3)" fg:x="445" fg:w="10"/><text x="35.3170%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="35.7762%" y="309" width="0.0788%" height="15" fill="rgb(205,97,47)" fg:x="454" fg:w="1"/><text x="36.0262%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="35.7762%" y="293" width="0.0788%" height="15" fill="rgb(247,152,14)" fg:x="454" fg:w="1"/><text x="36.0262%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="35.7762%" y="277" width="0.0788%" height="15" fill="rgb(248,195,53)" fg:x="454" fg:w="1"/><text x="36.0262%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.7762%" y="261" width="0.0788%" height="15" fill="rgb(226,201,16)" fg:x="454" fg:w="1"/><text x="36.0262%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.7762%" y="245" width="0.0788%" height="15" fill="rgb(205,98,0)" fg:x="454" fg:w="1"/><text x="36.0262%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.8550%" y="293" width="0.0788%" height="15" fill="rgb(214,191,48)" fg:x="455" fg:w="1"/><text x="36.1050%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="35.8550%" y="309" width="0.1576%" height="15" fill="rgb(237,112,39)" fg:x="455" fg:w="2"/><text x="36.1050%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.9338%" y="293" width="0.0788%" height="15" fill="rgb(247,203,27)" fg:x="456" fg:w="1"/><text x="36.1838%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="35.8550%" y="325" width="0.3152%" height="15" fill="rgb(235,124,28)" fg:x="455" fg:w="4"/><text x="36.1050%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="36.0126%" y="309" width="0.1576%" height="15" fill="rgb(208,207,46)" fg:x="457" fg:w="2"/><text x="36.2626%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="36.0914%" y="293" width="0.0788%" height="15" fill="rgb(234,176,4)" fg:x="458" fg:w="1"/><text x="36.3414%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="36.0914%" y="277" width="0.0788%" height="15" fill="rgb(230,133,28)" fg:x="458" fg:w="1"/><text x="36.3414%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.0914%" y="261" width="0.0788%" height="15" fill="rgb(211,137,40)" fg:x="458" fg:w="1"/><text x="36.3414%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="36.1702%" y="309" width="0.0788%" height="15" fill="rgb(254,35,13)" fg:x="459" fg:w="1"/><text x="36.4202%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.1702%" y="293" width="0.0788%" height="15" fill="rgb(225,49,51)" fg:x="459" fg:w="1"/><text x="36.4202%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.47%)</title><rect x="35.8550%" y="357" width="0.4728%" height="15" fill="rgb(251,10,15)" fg:x="455" fg:w="6"/><text x="36.1050%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.47%)</title><rect x="35.8550%" y="341" width="0.4728%" height="15" fill="rgb(228,207,15)" fg:x="455" fg:w="6"/><text x="36.1050%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="36.1702%" y="325" width="0.1576%" height="15" fill="rgb(241,99,19)" fg:x="459" fg:w="2"/><text x="36.4202%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="36.2490%" y="309" width="0.0788%" height="15" fill="rgb(207,104,49)" fg:x="460" fg:w="1"/><text x="36.4990%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.2490%" y="293" width="0.0788%" height="15" fill="rgb(234,99,18)" fg:x="460" fg:w="1"/><text x="36.4990%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="36.3278%" y="309" width="0.0788%" height="15" fill="rgb(213,191,49)" fg:x="461" fg:w="1"/><text x="36.5778%" y="319.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="36.3278%" y="293" width="0.0788%" height="15" fill="rgb(210,226,19)" fg:x="461" fg:w="1"/><text x="36.5778%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="36.3278%" y="277" width="0.0788%" height="15" fill="rgb(229,97,18)" fg:x="461" fg:w="1"/><text x="36.5778%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="36.4066%" y="293" width="0.0788%" height="15" fill="rgb(211,167,15)" fg:x="462" fg:w="1"/><text x="36.6566%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="36.4066%" y="277" width="0.0788%" height="15" fill="rgb(210,169,34)" fg:x="462" fg:w="1"/><text x="36.6566%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="36.3278%" y="341" width="0.2364%" height="15" fill="rgb(241,121,31)" fg:x="461" fg:w="3"/><text x="36.5778%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="36.3278%" y="325" width="0.2364%" height="15" fill="rgb(232,40,11)" fg:x="461" fg:w="3"/><text x="36.5778%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="36.4066%" y="309" width="0.1576%" height="15" fill="rgb(205,86,26)" fg:x="462" fg:w="2"/><text x="36.6566%" y="319.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="36.4854%" y="293" width="0.0788%" height="15" fill="rgb(231,126,28)" fg:x="463" fg:w="1"/><text x="36.7354%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="37.0370%" y="261" width="0.1576%" height="15" fill="rgb(219,221,18)" fg:x="470" fg:w="2"/><text x="37.2870%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="37.0370%" y="245" width="0.1576%" height="15" fill="rgb(211,40,0)" fg:x="470" fg:w="2"/><text x="37.2870%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="37.0370%" y="229" width="0.1576%" height="15" fill="rgb(239,85,43)" fg:x="470" fg:w="2"/><text x="37.2870%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (7 samples, 0.55%)</title><rect x="37.1946%" y="261" width="0.5516%" height="15" fill="rgb(231,55,21)" fg:x="472" fg:w="7"/><text x="37.4446%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (15 samples, 1.18%)</title><rect x="36.6430%" y="277" width="1.1820%" height="15" fill="rgb(225,184,43)" fg:x="465" fg:w="15"/><text x="36.8930%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="37.7463%" y="261" width="0.0788%" height="15" fill="rgb(251,158,41)" fg:x="479" fg:w="1"/><text x="37.9963%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (17 samples, 1.34%)</title><rect x="36.5642%" y="293" width="1.3396%" height="15" fill="rgb(234,159,37)" fg:x="464" fg:w="17"/><text x="36.8142%" y="303.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="37.8251%" y="277" width="0.0788%" height="15" fill="rgb(216,204,22)" fg:x="480" fg:w="1"/><text x="38.0751%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.8251%" y="261" width="0.0788%" height="15" fill="rgb(214,17,3)" fg:x="480" fg:w="1"/><text x="38.0751%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.8251%" y="245" width="0.0788%" height="15" fill="rgb(212,111,17)" fg:x="480" fg:w="1"/><text x="38.0751%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.8251%" y="229" width="0.0788%" height="15" fill="rgb(221,157,24)" fg:x="480" fg:w="1"/><text x="38.0751%" y="239.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (22 samples, 1.73%)</title><rect x="36.3278%" y="357" width="1.7336%" height="15" fill="rgb(252,16,13)" fg:x="461" fg:w="22"/><text x="36.5778%" y="367.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (19 samples, 1.50%)</title><rect x="36.5642%" y="341" width="1.4972%" height="15" fill="rgb(221,62,2)" fg:x="464" fg:w="19"/><text x="36.8142%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (19 samples, 1.50%)</title><rect x="36.5642%" y="325" width="1.4972%" height="15" fill="rgb(247,87,22)" fg:x="464" fg:w="19"/><text x="36.8142%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (19 samples, 1.50%)</title><rect x="36.5642%" y="309" width="1.4972%" height="15" fill="rgb(215,73,9)" fg:x="464" fg:w="19"/><text x="36.8142%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.16%)</title><rect x="37.9039%" y="293" width="0.1576%" height="15" fill="rgb(207,175,33)" fg:x="481" fg:w="2"/><text x="38.1539%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="37.9039%" y="277" width="0.1576%" height="15" fill="rgb(243,129,54)" fg:x="481" fg:w="2"/><text x="38.1539%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.9827%" y="261" width="0.0788%" height="15" fill="rgb(227,119,45)" fg:x="482" fg:w="1"/><text x="38.2327%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.9827%" y="245" width="0.0788%" height="15" fill="rgb(205,109,36)" fg:x="482" fg:w="1"/><text x="38.2327%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.9827%" y="229" width="0.0788%" height="15" fill="rgb(205,6,39)" fg:x="482" fg:w="1"/><text x="38.2327%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="38.1403%" y="341" width="0.0788%" height="15" fill="rgb(221,32,16)" fg:x="484" fg:w="1"/><text x="38.3903%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.1403%" y="325" width="0.0788%" height="15" fill="rgb(228,144,50)" fg:x="484" fg:w="1"/><text x="38.3903%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.1403%" y="309" width="0.0788%" height="15" fill="rgb(229,201,53)" fg:x="484" fg:w="1"/><text x="38.3903%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.1403%" y="293" width="0.0788%" height="15" fill="rgb(249,153,27)" fg:x="484" fg:w="1"/><text x="38.3903%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="38.2191%" y="277" width="0.0788%" height="15" fill="rgb(227,106,25)" fg:x="485" fg:w="1"/><text x="38.4691%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.2191%" y="261" width="0.0788%" height="15" fill="rgb(230,65,29)" fg:x="485" fg:w="1"/><text x="38.4691%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.2191%" y="245" width="0.0788%" height="15" fill="rgb(221,57,46)" fg:x="485" fg:w="1"/><text x="38.4691%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.2979%" y="277" width="0.0788%" height="15" fill="rgb(229,161,17)" fg:x="486" fg:w="1"/><text x="38.5479%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="38.2191%" y="309" width="0.2364%" height="15" fill="rgb(222,213,11)" fg:x="485" fg:w="3"/><text x="38.4691%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="38.2191%" y="293" width="0.2364%" height="15" fill="rgb(235,35,13)" fg:x="485" fg:w="3"/><text x="38.4691%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="38.3767%" y="277" width="0.0788%" height="15" fill="rgb(233,158,34)" fg:x="487" fg:w="1"/><text x="38.6267%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="38.4555%" y="277" width="0.0788%" height="15" fill="rgb(215,151,48)" fg:x="488" fg:w="1"/><text x="38.7055%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="38.4555%" y="261" width="0.0788%" height="15" fill="rgb(229,84,14)" fg:x="488" fg:w="1"/><text x="38.7055%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="38.4555%" y="309" width="0.1576%" height="15" fill="rgb(229,68,14)" fg:x="488" fg:w="2"/><text x="38.7055%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="38.4555%" y="293" width="0.1576%" height="15" fill="rgb(243,106,26)" fg:x="488" fg:w="2"/><text x="38.7055%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="38.5343%" y="277" width="0.0788%" height="15" fill="rgb(206,45,38)" fg:x="489" fg:w="1"/><text x="38.7843%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="38.5343%" y="261" width="0.0788%" height="15" fill="rgb(226,6,15)" fg:x="489" fg:w="1"/><text x="38.7843%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="38.5343%" y="245" width="0.0788%" height="15" fill="rgb(232,22,54)" fg:x="489" fg:w="1"/><text x="38.7843%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="38.6131%" y="309" width="0.0788%" height="15" fill="rgb(229,222,32)" fg:x="490" fg:w="1"/><text x="38.8631%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.8495%" y="293" width="0.0788%" height="15" fill="rgb(228,62,29)" fg:x="493" fg:w="1"/><text x="39.0995%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.9283%" y="277" width="0.0788%" height="15" fill="rgb(251,103,34)" fg:x="494" fg:w="1"/><text x="39.1783%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="39.0071%" y="277" width="0.0788%" height="15" fill="rgb(233,12,30)" fg:x="495" fg:w="1"/><text x="39.2571%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (35 samples, 2.76%)</title><rect x="38.9283%" y="293" width="2.7581%" height="15" fill="rgb(238,52,0)" fg:x="494" fg:w="35"/><text x="39.1783%" y="303.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (33 samples, 2.60%)</title><rect x="39.0859%" y="277" width="2.6005%" height="15" fill="rgb(223,98,5)" fg:x="496" fg:w="33"/><text x="39.3359%" y="287.50">co..</text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="41.3712%" y="261" width="0.3152%" height="15" fill="rgb(228,75,37)" fg:x="525" fg:w="4"/><text x="41.6212%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (2 samples, 0.16%)</title><rect x="41.6864%" y="293" width="0.1576%" height="15" fill="rgb(205,115,49)" fg:x="529" fg:w="2"/><text x="41.9364%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="41.7652%" y="277" width="0.0788%" height="15" fill="rgb(250,154,43)" fg:x="530" fg:w="1"/><text x="42.0152%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="41.7652%" y="261" width="0.0788%" height="15" fill="rgb(226,43,29)" fg:x="530" fg:w="1"/><text x="42.0152%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.7652%" y="245" width="0.0788%" height="15" fill="rgb(249,228,39)" fg:x="530" fg:w="1"/><text x="42.0152%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="41.9228%" y="277" width="0.2364%" height="15" fill="rgb(216,79,43)" fg:x="532" fg:w="3"/><text x="42.1728%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (3 samples, 0.24%)</title><rect x="41.9228%" y="261" width="0.2364%" height="15" fill="rgb(228,95,12)" fg:x="532" fg:w="3"/><text x="42.1728%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.0804%" y="245" width="0.0788%" height="15" fill="rgb(249,221,15)" fg:x="534" fg:w="1"/><text x="42.3304%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (8 samples, 0.63%)</title><rect x="42.1592%" y="277" width="0.6304%" height="15" fill="rgb(233,34,13)" fg:x="535" fg:w="8"/><text x="42.4092%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (14 samples, 1.10%)</title><rect x="41.8440%" y="293" width="1.1032%" height="15" fill="rgb(214,103,39)" fg:x="531" fg:w="14"/><text x="42.0940%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="42.7896%" y="277" width="0.1576%" height="15" fill="rgb(251,126,39)" fg:x="543" fg:w="2"/><text x="43.0396%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="42.7896%" y="261" width="0.1576%" height="15" fill="rgb(214,216,36)" fg:x="543" fg:w="2"/><text x="43.0396%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (2 samples, 0.16%)</title><rect x="42.7896%" y="245" width="0.1576%" height="15" fill="rgb(220,221,8)" fg:x="543" fg:w="2"/><text x="43.0396%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="42.7896%" y="229" width="0.1576%" height="15" fill="rgb(240,216,3)" fg:x="543" fg:w="2"/><text x="43.0396%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.8684%" y="213" width="0.0788%" height="15" fill="rgb(232,218,17)" fg:x="544" fg:w="1"/><text x="43.1184%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.8684%" y="197" width="0.0788%" height="15" fill="rgb(229,163,45)" fg:x="544" fg:w="1"/><text x="43.1184%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="43.1048%" y="261" width="0.0788%" height="15" fill="rgb(231,110,42)" fg:x="547" fg:w="1"/><text x="43.3548%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.1048%" y="245" width="0.0788%" height="15" fill="rgb(208,170,48)" fg:x="547" fg:w="1"/><text x="43.3548%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="43.1048%" y="229" width="0.0788%" height="15" fill="rgb(239,116,25)" fg:x="547" fg:w="1"/><text x="43.3548%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="43.1048%" y="213" width="0.0788%" height="15" fill="rgb(219,200,50)" fg:x="547" fg:w="1"/><text x="43.3548%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="43.1836%" y="261" width="0.1576%" height="15" fill="rgb(245,200,0)" fg:x="548" fg:w="2"/><text x="43.4336%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="43.1836%" y="245" width="0.1576%" height="15" fill="rgb(245,119,33)" fg:x="548" fg:w="2"/><text x="43.4336%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.1836%" y="229" width="0.1576%" height="15" fill="rgb(231,125,12)" fg:x="548" fg:w="2"/><text x="43.4336%" y="239.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="43.1836%" y="213" width="0.1576%" height="15" fill="rgb(216,96,41)" fg:x="548" fg:w="2"/><text x="43.4336%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (9 samples, 0.71%)</title><rect x="43.3412%" y="261" width="0.7092%" height="15" fill="rgb(248,43,45)" fg:x="550" fg:w="9"/><text x="43.5912%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.39%)</title><rect x="43.6564%" y="245" width="0.3940%" height="15" fill="rgb(217,222,7)" fg:x="554" fg:w="5"/><text x="43.9064%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="43.9716%" y="229" width="0.0788%" height="15" fill="rgb(233,28,6)" fg:x="558" fg:w="1"/><text x="44.2216%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.9716%" y="213" width="0.0788%" height="15" fill="rgb(231,218,15)" fg:x="558" fg:w="1"/><text x="44.2216%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.9716%" y="197" width="0.0788%" height="15" fill="rgb(226,171,48)" fg:x="558" fg:w="1"/><text x="44.2216%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (11 samples, 0.87%)</title><rect x="44.0504%" y="245" width="0.8668%" height="15" fill="rgb(235,201,9)" fg:x="559" fg:w="11"/><text x="44.3004%" y="255.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (10 samples, 0.79%)</title><rect x="44.1292%" y="229" width="0.7880%" height="15" fill="rgb(217,80,15)" fg:x="560" fg:w="10"/><text x="44.3792%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (26 samples, 2.05%)</title><rect x="42.9472%" y="293" width="2.0489%" height="15" fill="rgb(219,152,8)" fg:x="545" fg:w="26"/><text x="43.1972%" y="303.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (26 samples, 2.05%)</title><rect x="42.9472%" y="277" width="2.0489%" height="15" fill="rgb(243,107,38)" fg:x="545" fg:w="26"/><text x="43.1972%" y="287.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (12 samples, 0.95%)</title><rect x="44.0504%" y="261" width="0.9456%" height="15" fill="rgb(231,17,5)" fg:x="559" fg:w="12"/><text x="44.3004%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="44.9173%" y="245" width="0.0788%" height="15" fill="rgb(209,25,54)" fg:x="570" fg:w="1"/><text x="45.1673%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="44.9961%" y="293" width="0.0788%" height="15" fill="rgb(219,0,2)" fg:x="571" fg:w="1"/><text x="45.2461%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="45.0749%" y="245" width="0.0788%" height="15" fill="rgb(246,9,5)" fg:x="572" fg:w="1"/><text x="45.3249%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.0749%" y="229" width="0.0788%" height="15" fill="rgb(226,159,4)" fg:x="572" fg:w="1"/><text x="45.3249%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.0749%" y="213" width="0.0788%" height="15" fill="rgb(219,175,34)" fg:x="572" fg:w="1"/><text x="45.3249%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.0749%" y="197" width="0.0788%" height="15" fill="rgb(236,10,46)" fg:x="572" fg:w="1"/><text x="45.3249%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="46.0993%" y="181" width="0.3152%" height="15" fill="rgb(240,211,16)" fg:x="585" fg:w="4"/><text x="46.3493%" y="191.50"></text></g><g><title>__libc_free (6 samples, 0.47%)</title><rect x="46.4145%" y="181" width="0.4728%" height="15" fill="rgb(205,3,43)" fg:x="589" fg:w="6"/><text x="46.6645%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (6 samples, 0.47%)</title><rect x="46.8873%" y="181" width="0.4728%" height="15" fill="rgb(245,7,22)" fg:x="595" fg:w="6"/><text x="47.1373%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.9905%" y="117" width="0.0788%" height="15" fill="rgb(239,132,32)" fg:x="609" fg:w="1"/><text x="48.2405%" y="127.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="48.0693%" y="117" width="0.0788%" height="15" fill="rgb(228,202,34)" fg:x="610" fg:w="1"/><text x="48.3193%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="48.0693%" y="101" width="0.0788%" height="15" fill="rgb(254,200,22)" fg:x="610" fg:w="1"/><text x="48.3193%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="47.9905%" y="149" width="0.3152%" height="15" fill="rgb(219,10,39)" fg:x="609" fg:w="4"/><text x="48.2405%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="47.9905%" y="133" width="0.3152%" height="15" fill="rgb(226,210,39)" fg:x="609" fg:w="4"/><text x="48.2405%" y="143.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="48.1481%" y="117" width="0.1576%" height="15" fill="rgb(208,219,16)" fg:x="611" fg:w="2"/><text x="48.3981%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.0150%" y="133" width="0.0788%" height="15" fill="rgb(216,158,51)" fg:x="622" fg:w="1"/><text x="49.2650%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (24 samples, 1.89%)</title><rect x="47.3601%" y="181" width="1.8913%" height="15" fill="rgb(233,14,44)" fg:x="601" fg:w="24"/><text x="47.6101%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (23 samples, 1.81%)</title><rect x="47.4389%" y="165" width="1.8125%" height="15" fill="rgb(237,97,39)" fg:x="602" fg:w="23"/><text x="47.6889%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (12 samples, 0.95%)</title><rect x="48.3058%" y="149" width="0.9456%" height="15" fill="rgb(218,198,43)" fg:x="613" fg:w="12"/><text x="48.5558%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="49.0938%" y="133" width="0.1576%" height="15" fill="rgb(231,104,20)" fg:x="623" fg:w="2"/><text x="49.3438%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="49.2514%" y="181" width="0.0788%" height="15" fill="rgb(254,36,13)" fg:x="625" fg:w="1"/><text x="49.5014%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="49.2514%" y="165" width="0.0788%" height="15" fill="rgb(248,14,50)" fg:x="625" fg:w="1"/><text x="49.5014%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="49.2514%" y="149" width="0.0788%" height="15" fill="rgb(217,107,29)" fg:x="625" fg:w="1"/><text x="49.5014%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="49.2514%" y="133" width="0.0788%" height="15" fill="rgb(251,169,33)" fg:x="625" fg:w="1"/><text x="49.5014%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (92 samples, 7.25%)</title><rect x="49.3302%" y="181" width="7.2498%" height="15" fill="rgb(217,108,32)" fg:x="626" fg:w="92"/><text x="49.5802%" y="191.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (92 samples, 7.25%)</title><rect x="49.3302%" y="165" width="7.2498%" height="15" fill="rgb(219,66,42)" fg:x="626" fg:w="92"/><text x="49.5802%" y="175.50">regex_auto..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (92 samples, 7.25%)</title><rect x="49.3302%" y="149" width="7.2498%" height="15" fill="rgb(206,180,7)" fg:x="626" fg:w="92"/><text x="49.5802%" y="159.50">alloc::vec..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (7 samples, 0.55%)</title><rect x="56.5800%" y="181" width="0.5516%" height="15" fill="rgb(208,226,31)" fg:x="718" fg:w="7"/><text x="56.8300%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.0528%" y="165" width="0.0788%" height="15" fill="rgb(218,26,49)" fg:x="724" fg:w="1"/><text x="57.3028%" y="175.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="57.1316%" y="181" width="0.1576%" height="15" fill="rgb(233,197,48)" fg:x="725" fg:w="2"/><text x="57.3816%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (164 samples, 12.92%)</title><rect x="45.0749%" y="277" width="12.9236%" height="15" fill="rgb(252,181,51)" fg:x="572" fg:w="164"/><text x="45.3249%" y="287.50">&lt;core::iter::adapte..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (164 samples, 12.92%)</title><rect x="45.0749%" y="261" width="12.9236%" height="15" fill="rgb(253,90,19)" fg:x="572" fg:w="164"/><text x="45.3249%" y="271.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (163 samples, 12.84%)</title><rect x="45.1537%" y="245" width="12.8448%" height="15" fill="rgb(215,171,30)" fg:x="573" fg:w="163"/><text x="45.4037%" y="255.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (163 samples, 12.84%)</title><rect x="45.1537%" y="229" width="12.8448%" height="15" fill="rgb(214,222,9)" fg:x="573" fg:w="163"/><text x="45.4037%" y="239.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (163 samples, 12.84%)</title><rect x="45.1537%" y="213" width="12.8448%" height="15" fill="rgb(223,3,22)" fg:x="573" fg:w="163"/><text x="45.4037%" y="223.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (163 samples, 12.84%)</title><rect x="45.1537%" y="197" width="12.8448%" height="15" fill="rgb(225,196,46)" fg:x="573" fg:w="163"/><text x="45.4037%" y="207.50">regex_automata::nfa..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (9 samples, 0.71%)</title><rect x="57.2892%" y="181" width="0.7092%" height="15" fill="rgb(209,110,37)" fg:x="727" fg:w="9"/><text x="57.5392%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="57.6832%" y="165" width="0.3152%" height="15" fill="rgb(249,89,12)" fg:x="732" fg:w="4"/><text x="57.9332%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.9196%" y="149" width="0.0788%" height="15" fill="rgb(226,27,33)" fg:x="735" fg:w="1"/><text x="58.1696%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.9196%" y="133" width="0.0788%" height="15" fill="rgb(213,82,22)" fg:x="735" fg:w="1"/><text x="58.1696%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.2348%" y="261" width="0.0788%" height="15" fill="rgb(248,140,0)" fg:x="739" fg:w="1"/><text x="58.4848%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="58.3136%" y="261" width="0.1576%" height="15" fill="rgb(228,106,3)" fg:x="740" fg:w="2"/><text x="58.5636%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="58.3136%" y="245" width="0.1576%" height="15" fill="rgb(209,23,37)" fg:x="740" fg:w="2"/><text x="58.5636%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="58.3136%" y="229" width="0.1576%" height="15" fill="rgb(241,93,50)" fg:x="740" fg:w="2"/><text x="58.5636%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (2 samples, 0.16%)</title><rect x="58.4712%" y="261" width="0.1576%" height="15" fill="rgb(253,46,43)" fg:x="742" fg:w="2"/><text x="58.7212%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (12 samples, 0.95%)</title><rect x="58.6288%" y="261" width="0.9456%" height="15" fill="rgb(226,206,43)" fg:x="744" fg:w="12"/><text x="58.8788%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.39%)</title><rect x="59.1805%" y="245" width="0.3940%" height="15" fill="rgb(217,54,7)" fg:x="751" fg:w="5"/><text x="59.4305%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="59.2593%" y="229" width="0.3152%" height="15" fill="rgb(223,5,52)" fg:x="752" fg:w="4"/><text x="59.5093%" y="239.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="59.3381%" y="213" width="0.2364%" height="15" fill="rgb(206,52,46)" fg:x="753" fg:w="3"/><text x="59.5881%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (9 samples, 0.71%)</title><rect x="59.5745%" y="261" width="0.7092%" height="15" fill="rgb(253,136,11)" fg:x="756" fg:w="9"/><text x="59.8245%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="60.2049%" y="245" width="0.0788%" height="15" fill="rgb(208,106,33)" fg:x="764" fg:w="1"/><text x="60.4549%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.2049%" y="229" width="0.0788%" height="15" fill="rgb(206,54,4)" fg:x="764" fg:w="1"/><text x="60.4549%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.2049%" y="213" width="0.0788%" height="15" fill="rgb(213,3,15)" fg:x="764" fg:w="1"/><text x="60.4549%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (278 samples, 21.91%)</title><rect x="38.6919%" y="309" width="21.9070%" height="15" fill="rgb(252,211,39)" fg:x="491" fg:w="278"/><text x="38.9419%" y="319.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (197 samples, 15.52%)</title><rect x="45.0749%" y="293" width="15.5240%" height="15" fill="rgb(223,6,36)" fg:x="572" fg:w="197"/><text x="45.3249%" y="303.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (33 samples, 2.60%)</title><rect x="57.9984%" y="277" width="2.6005%" height="15" fill="rgb(252,169,45)" fg:x="736" fg:w="33"/><text x="58.2484%" y="287.50">re..</text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (4 samples, 0.32%)</title><rect x="60.2837%" y="261" width="0.3152%" height="15" fill="rgb(212,48,26)" fg:x="765" fg:w="4"/><text x="60.5337%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="60.7565%" y="261" width="0.0788%" height="15" fill="rgb(251,102,48)" fg:x="771" fg:w="1"/><text x="61.0065%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="60.7565%" y="245" width="0.0788%" height="15" fill="rgb(243,208,16)" fg:x="771" fg:w="1"/><text x="61.0065%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="60.7565%" y="229" width="0.0788%" height="15" fill="rgb(219,96,24)" fg:x="771" fg:w="1"/><text x="61.0065%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="60.8353%" y="261" width="0.0788%" height="15" fill="rgb(219,33,29)" fg:x="772" fg:w="1"/><text x="61.0853%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.63%)</title><rect x="60.6777%" y="277" width="0.6304%" height="15" fill="rgb(223,176,5)" fg:x="770" fg:w="8"/><text x="60.9277%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.39%)</title><rect x="60.9141%" y="261" width="0.3940%" height="15" fill="rgb(228,140,14)" fg:x="773" fg:w="5"/><text x="61.1641%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.39%)</title><rect x="60.9141%" y="245" width="0.3940%" height="15" fill="rgb(217,179,31)" fg:x="773" fg:w="5"/><text x="61.1641%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.39%)</title><rect x="60.9141%" y="229" width="0.3940%" height="15" fill="rgb(230,9,30)" fg:x="773" fg:w="5"/><text x="61.1641%" y="239.50"></text></g><g><title>__libc_malloc (5 samples, 0.39%)</title><rect x="60.9141%" y="213" width="0.3940%" height="15" fill="rgb(230,136,20)" fg:x="773" fg:w="5"/><text x="61.1641%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (2 samples, 0.16%)</title><rect x="61.3081%" y="277" width="0.1576%" height="15" fill="rgb(215,210,22)" fg:x="778" fg:w="2"/><text x="61.5581%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="61.3869%" y="261" width="0.0788%" height="15" fill="rgb(218,43,5)" fg:x="779" fg:w="1"/><text x="61.6369%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="61.4657%" y="277" width="0.0788%" height="15" fill="rgb(216,11,5)" fg:x="780" fg:w="1"/><text x="61.7157%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.4657%" y="261" width="0.0788%" height="15" fill="rgb(209,82,29)" fg:x="780" fg:w="1"/><text x="61.7157%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (14 samples, 1.10%)</title><rect x="60.5989%" y="309" width="1.1032%" height="15" fill="rgb(244,115,12)" fg:x="769" fg:w="14"/><text x="60.8489%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (14 samples, 1.10%)</title><rect x="60.5989%" y="293" width="1.1032%" height="15" fill="rgb(222,82,18)" fg:x="769" fg:w="14"/><text x="60.8489%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="61.5445%" y="277" width="0.1576%" height="15" fill="rgb(249,227,8)" fg:x="781" fg:w="2"/><text x="61.7945%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.6233%" y="261" width="0.0788%" height="15" fill="rgb(253,141,45)" fg:x="782" fg:w="1"/><text x="61.8733%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.6233%" y="245" width="0.0788%" height="15" fill="rgb(234,184,4)" fg:x="782" fg:w="1"/><text x="61.8733%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.6233%" y="229" width="0.0788%" height="15" fill="rgb(218,194,23)" fg:x="782" fg:w="1"/><text x="61.8733%" y="239.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="62.0173%" y="213" width="0.0788%" height="15" fill="rgb(235,66,41)" fg:x="787" fg:w="1"/><text x="62.2673%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="62.0173%" y="197" width="0.0788%" height="15" fill="rgb(245,217,1)" fg:x="787" fg:w="1"/><text x="62.2673%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="62.0173%" y="245" width="0.2364%" height="15" fill="rgb(229,91,1)" fg:x="787" fg:w="3"/><text x="62.2673%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="62.0173%" y="229" width="0.2364%" height="15" fill="rgb(207,101,30)" fg:x="787" fg:w="3"/><text x="62.2673%" y="239.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="62.0961%" y="213" width="0.1576%" height="15" fill="rgb(223,82,49)" fg:x="788" fg:w="2"/><text x="62.3461%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (5 samples, 0.39%)</title><rect x="61.9385%" y="261" width="0.3940%" height="15" fill="rgb(218,167,17)" fg:x="786" fg:w="5"/><text x="62.1885%" y="271.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="62.2537%" y="245" width="0.0788%" height="15" fill="rgb(208,103,14)" fg:x="790" fg:w="1"/><text x="62.5037%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (9 samples, 0.71%)</title><rect x="61.7809%" y="277" width="0.7092%" height="15" fill="rgb(238,20,8)" fg:x="784" fg:w="9"/><text x="62.0309%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (2 samples, 0.16%)</title><rect x="62.3325%" y="261" width="0.1576%" height="15" fill="rgb(218,80,54)" fg:x="791" fg:w="2"/><text x="62.5825%" y="271.50"></text></g><g><title>regex_syntax::unicode::perl_digit (2 samples, 0.16%)</title><rect x="62.3325%" y="245" width="0.1576%" height="15" fill="rgb(240,144,17)" fg:x="791" fg:w="2"/><text x="62.5825%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="62.4113%" y="229" width="0.0788%" height="15" fill="rgb(245,27,50)" fg:x="792" fg:w="1"/><text x="62.6613%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="62.4901%" y="277" width="0.0788%" height="15" fill="rgb(251,51,7)" fg:x="793" fg:w="1"/><text x="62.7401%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="62.4901%" y="261" width="0.0788%" height="15" fill="rgb(245,217,29)" fg:x="793" fg:w="1"/><text x="62.7401%" y="271.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="62.4901%" y="245" width="0.0788%" height="15" fill="rgb(221,176,29)" fg:x="793" fg:w="1"/><text x="62.7401%" y="255.50"></text></g><g><title>indefinite::rules::number::Number::check (340 samples, 26.79%)</title><rect x="35.8550%" y="373" width="26.7928%" height="15" fill="rgb(212,180,24)" fg:x="455" fg:w="340"/><text x="36.1050%" y="383.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::new (312 samples, 24.59%)</title><rect x="38.0615%" y="357" width="24.5863%" height="15" fill="rgb(254,24,2)" fg:x="483" fg:w="312"/><text x="38.3115%" y="367.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (310 samples, 24.43%)</title><rect x="38.2191%" y="341" width="24.4287%" height="15" fill="rgb(230,100,2)" fg:x="485" fg:w="310"/><text x="38.4691%" y="351.50">regex::builders::Builder::build_one_str..</text></g><g><title>regex_automata::meta::regex::Builder::build (310 samples, 24.43%)</title><rect x="38.2191%" y="325" width="24.4287%" height="15" fill="rgb(219,142,25)" fg:x="485" fg:w="310"/><text x="38.4691%" y="335.50">regex_automata::meta::regex::Builder::b..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (12 samples, 0.95%)</title><rect x="61.7021%" y="309" width="0.9456%" height="15" fill="rgb(240,73,43)" fg:x="783" fg:w="12"/><text x="61.9521%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (12 samples, 0.95%)</title><rect x="61.7021%" y="293" width="0.9456%" height="15" fill="rgb(214,114,15)" fg:x="783" fg:w="12"/><text x="61.9521%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="62.5690%" y="277" width="0.0788%" height="15" fill="rgb(207,130,4)" fg:x="794" fg:w="1"/><text x="62.8190%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="62.5690%" y="261" width="0.0788%" height="15" fill="rgb(221,25,40)" fg:x="794" fg:w="1"/><text x="62.8190%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.5690%" y="245" width="0.0788%" height="15" fill="rgb(241,184,7)" fg:x="794" fg:w="1"/><text x="62.8190%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.5690%" y="229" width="0.0788%" height="15" fill="rgb(235,159,4)" fg:x="794" fg:w="1"/><text x="62.8190%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.5690%" y="213" width="0.0788%" height="15" fill="rgb(214,87,48)" fg:x="794" fg:w="1"/><text x="62.8190%" y="223.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="62.6478%" y="357" width="0.0788%" height="15" fill="rgb(246,198,24)" fg:x="795" fg:w="1"/><text x="62.8978%" y="367.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.08%)</title><rect x="62.6478%" y="341" width="0.0788%" height="15" fill="rgb(209,66,40)" fg:x="795" fg:w="1"/><text x="62.8978%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.08%)</title><rect x="62.6478%" y="325" width="0.0788%" height="15" fill="rgb(233,147,39)" fg:x="795" fg:w="1"/><text x="62.8978%" y="335.50"></text></g><g><title>core::ptr::write (1 samples, 0.08%)</title><rect x="62.6478%" y="309" width="0.0788%" height="15" fill="rgb(231,145,52)" fg:x="795" fg:w="1"/><text x="62.8978%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.7266%" y="293" width="0.0788%" height="15" fill="rgb(206,20,26)" fg:x="796" fg:w="1"/><text x="62.9766%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.7266%" y="277" width="0.0788%" height="15" fill="rgb(238,220,4)" fg:x="796" fg:w="1"/><text x="62.9766%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.7266%" y="261" width="0.0788%" height="15" fill="rgb(252,195,42)" fg:x="796" fg:w="1"/><text x="62.9766%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="62.8054%" y="293" width="0.0788%" height="15" fill="rgb(209,10,6)" fg:x="797" fg:w="1"/><text x="63.0554%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="62.7266%" y="309" width="0.2364%" height="15" fill="rgb(229,3,52)" fg:x="796" fg:w="3"/><text x="62.9766%" y="319.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="62.8842%" y="293" width="0.0788%" height="15" fill="rgb(253,49,37)" fg:x="798" fg:w="1"/><text x="63.1342%" y="303.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="62.8842%" y="277" width="0.0788%" height="15" fill="rgb(240,103,49)" fg:x="798" fg:w="1"/><text x="63.1342%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (5 samples, 0.39%)</title><rect x="62.7266%" y="341" width="0.3940%" height="15" fill="rgb(250,182,30)" fg:x="796" fg:w="5"/><text x="62.9766%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.39%)</title><rect x="62.7266%" y="325" width="0.3940%" height="15" fill="rgb(248,8,30)" fg:x="796" fg:w="5"/><text x="62.9766%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="62.9630%" y="309" width="0.1576%" height="15" fill="rgb(237,120,30)" fg:x="799" fg:w="2"/><text x="63.2130%" y="319.50"></text></g><g><title>alloc::sync::arcinner_layout_for_value_layout (1 samples, 0.08%)</title><rect x="63.0418%" y="293" width="0.0788%" height="15" fill="rgb(221,146,34)" fg:x="800" fg:w="1"/><text x="63.2918%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::extend (1 samples, 0.08%)</title><rect x="63.0418%" y="277" width="0.0788%" height="15" fill="rgb(242,55,13)" fg:x="800" fg:w="1"/><text x="63.2918%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.1994%" y="309" width="0.0788%" height="15" fill="rgb(242,112,31)" fg:x="802" fg:w="1"/><text x="63.4494%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="63.2782%" y="309" width="0.0788%" height="15" fill="rgb(249,192,27)" fg:x="803" fg:w="1"/><text x="63.5282%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.3570%" y="277" width="0.0788%" height="15" fill="rgb(208,204,44)" fg:x="804" fg:w="1"/><text x="63.6070%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="63.3570%" y="261" width="0.0788%" height="15" fill="rgb(208,93,54)" fg:x="804" fg:w="1"/><text x="63.6070%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.47%)</title><rect x="63.1206%" y="341" width="0.4728%" height="15" fill="rgb(242,1,31)" fg:x="801" fg:w="6"/><text x="63.3706%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.39%)</title><rect x="63.1994%" y="325" width="0.3940%" height="15" fill="rgb(241,83,25)" fg:x="802" fg:w="5"/><text x="63.4494%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="63.3570%" y="309" width="0.2364%" height="15" fill="rgb(205,169,50)" fg:x="804" fg:w="3"/><text x="63.6070%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="63.3570%" y="293" width="0.2364%" height="15" fill="rgb(239,186,37)" fg:x="804" fg:w="3"/><text x="63.6070%" y="303.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="63.4358%" y="277" width="0.1576%" height="15" fill="rgb(205,221,10)" fg:x="805" fg:w="2"/><text x="63.6858%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.6722%" y="293" width="0.0788%" height="15" fill="rgb(218,196,15)" fg:x="808" fg:w="1"/><text x="63.9222%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.6722%" y="277" width="0.0788%" height="15" fill="rgb(218,196,35)" fg:x="808" fg:w="1"/><text x="63.9222%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="63.6722%" y="261" width="0.0788%" height="15" fill="rgb(233,63,24)" fg:x="808" fg:w="1"/><text x="63.9222%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="63.6722%" y="245" width="0.0788%" height="15" fill="rgb(225,8,4)" fg:x="808" fg:w="1"/><text x="63.9222%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.6722%" y="229" width="0.0788%" height="15" fill="rgb(234,105,35)" fg:x="808" fg:w="1"/><text x="63.9222%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="63.6722%" y="213" width="0.0788%" height="15" fill="rgb(236,21,32)" fg:x="808" fg:w="1"/><text x="63.9222%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.7510%" y="293" width="0.0788%" height="15" fill="rgb(228,109,6)" fg:x="809" fg:w="1"/><text x="64.0010%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="63.9086%" y="261" width="0.0788%" height="15" fill="rgb(229,215,31)" fg:x="811" fg:w="1"/><text x="64.1586%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="63.9086%" y="245" width="0.0788%" height="15" fill="rgb(221,52,54)" fg:x="811" fg:w="1"/><text x="64.1586%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.9086%" y="229" width="0.0788%" height="15" fill="rgb(252,129,43)" fg:x="811" fg:w="1"/><text x="64.1586%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="63.9086%" y="213" width="0.0788%" height="15" fill="rgb(248,183,27)" fg:x="811" fg:w="1"/><text x="64.1586%" y="223.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="63.9874%" y="261" width="0.1576%" height="15" fill="rgb(250,0,22)" fg:x="812" fg:w="2"/><text x="64.2374%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (7 samples, 0.55%)</title><rect x="63.8298%" y="293" width="0.5516%" height="15" fill="rgb(213,166,10)" fg:x="810" fg:w="7"/><text x="64.0798%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (6 samples, 0.47%)</title><rect x="63.9086%" y="277" width="0.4728%" height="15" fill="rgb(207,163,36)" fg:x="811" fg:w="6"/><text x="64.1586%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="64.1450%" y="261" width="0.2364%" height="15" fill="rgb(208,122,22)" fg:x="814" fg:w="3"/><text x="64.3950%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="64.1450%" y="245" width="0.2364%" height="15" fill="rgb(207,104,49)" fg:x="814" fg:w="3"/><text x="64.3950%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="64.2238%" y="229" width="0.1576%" height="15" fill="rgb(248,211,50)" fg:x="815" fg:w="2"/><text x="64.4738%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.3026%" y="213" width="0.0788%" height="15" fill="rgb(217,13,45)" fg:x="816" fg:w="1"/><text x="64.5526%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.3026%" y="197" width="0.0788%" height="15" fill="rgb(211,216,49)" fg:x="816" fg:w="1"/><text x="64.5526%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.3026%" y="181" width="0.0788%" height="15" fill="rgb(221,58,53)" fg:x="816" fg:w="1"/><text x="64.5526%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="64.5390%" y="277" width="0.0788%" height="15" fill="rgb(220,112,41)" fg:x="819" fg:w="1"/><text x="64.7890%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="64.5390%" y="261" width="0.0788%" height="15" fill="rgb(236,38,28)" fg:x="819" fg:w="1"/><text x="64.7890%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (7 samples, 0.55%)</title><rect x="64.6178%" y="261" width="0.5516%" height="15" fill="rgb(227,195,22)" fg:x="820" fg:w="7"/><text x="64.8678%" y="271.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="65.0906%" y="245" width="0.0788%" height="15" fill="rgb(214,55,33)" fg:x="826" fg:w="1"/><text x="65.3406%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.0906%" y="229" width="0.0788%" height="15" fill="rgb(248,80,13)" fg:x="826" fg:w="1"/><text x="65.3406%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.0906%" y="213" width="0.0788%" height="15" fill="rgb(238,52,6)" fg:x="826" fg:w="1"/><text x="65.3406%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.0906%" y="197" width="0.0788%" height="15" fill="rgb(224,198,47)" fg:x="826" fg:w="1"/><text x="65.3406%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.63%)</title><rect x="64.6178%" y="277" width="0.6304%" height="15" fill="rgb(233,171,20)" fg:x="820" fg:w="8"/><text x="64.8678%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="65.1694%" y="261" width="0.0788%" height="15" fill="rgb(241,30,25)" fg:x="827" fg:w="1"/><text x="65.4194%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="65.1694%" y="245" width="0.0788%" height="15" fill="rgb(207,171,38)" fg:x="827" fg:w="1"/><text x="65.4194%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="65.2482%" y="213" width="0.0788%" height="15" fill="rgb(234,70,1)" fg:x="828" fg:w="1"/><text x="65.4982%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="65.2482%" y="261" width="0.3152%" height="15" fill="rgb(232,178,18)" fg:x="828" fg:w="4"/><text x="65.4982%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (4 samples, 0.32%)</title><rect x="65.2482%" y="245" width="0.3152%" height="15" fill="rgb(241,78,40)" fg:x="828" fg:w="4"/><text x="65.4982%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (4 samples, 0.32%)</title><rect x="65.2482%" y="229" width="0.3152%" height="15" fill="rgb(222,35,25)" fg:x="828" fg:w="4"/><text x="65.4982%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="65.3270%" y="213" width="0.2364%" height="15" fill="rgb(207,92,16)" fg:x="829" fg:w="3"/><text x="65.5770%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.4846%" y="197" width="0.0788%" height="15" fill="rgb(216,59,51)" fg:x="831" fg:w="1"/><text x="65.7346%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="65.4846%" y="181" width="0.0788%" height="15" fill="rgb(213,80,28)" fg:x="831" fg:w="1"/><text x="65.7346%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="65.4846%" y="165" width="0.0788%" height="15" fill="rgb(220,93,7)" fg:x="831" fg:w="1"/><text x="65.7346%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="65.6422%" y="245" width="0.0788%" height="15" fill="rgb(225,24,44)" fg:x="833" fg:w="1"/><text x="65.8922%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="65.6422%" y="229" width="0.0788%" height="15" fill="rgb(243,74,40)" fg:x="833" fg:w="1"/><text x="65.8922%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.2727%" y="229" width="0.0788%" height="15" fill="rgb(228,39,7)" fg:x="841" fg:w="1"/><text x="66.5227%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (26 samples, 2.05%)</title><rect x="64.3814%" y="293" width="2.0489%" height="15" fill="rgb(227,79,8)" fg:x="817" fg:w="26"/><text x="64.6314%" y="303.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (15 samples, 1.18%)</title><rect x="65.2482%" y="277" width="1.1820%" height="15" fill="rgb(236,58,11)" fg:x="828" fg:w="15"/><text x="65.4982%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.87%)</title><rect x="65.5634%" y="261" width="0.8668%" height="15" fill="rgb(249,63,35)" fg:x="832" fg:w="11"/><text x="65.8134%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (9 samples, 0.71%)</title><rect x="65.7210%" y="245" width="0.7092%" height="15" fill="rgb(252,114,16)" fg:x="834" fg:w="9"/><text x="65.9710%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.3515%" y="229" width="0.0788%" height="15" fill="rgb(254,151,24)" fg:x="842" fg:w="1"/><text x="66.6015%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (3 samples, 0.24%)</title><rect x="66.5879%" y="245" width="0.2364%" height="15" fill="rgb(253,54,39)" fg:x="845" fg:w="3"/><text x="66.8379%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.7455%" y="229" width="0.0788%" height="15" fill="rgb(243,25,45)" fg:x="847" fg:w="1"/><text x="66.9955%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.7455%" y="213" width="0.0788%" height="15" fill="rgb(234,134,9)" fg:x="847" fg:w="1"/><text x="66.9955%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.7455%" y="197" width="0.0788%" height="15" fill="rgb(227,166,31)" fg:x="847" fg:w="1"/><text x="66.9955%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="66.8243%" y="245" width="0.0788%" height="15" fill="rgb(245,143,41)" fg:x="848" fg:w="1"/><text x="67.0743%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="66.9031%" y="245" width="0.0788%" height="15" fill="rgb(238,181,32)" fg:x="849" fg:w="1"/><text x="67.1531%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="66.9031%" y="229" width="0.0788%" height="15" fill="rgb(224,113,18)" fg:x="849" fg:w="1"/><text x="67.1531%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="66.9031%" y="213" width="0.0788%" height="15" fill="rgb(240,229,28)" fg:x="849" fg:w="1"/><text x="67.1531%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="66.9819%" y="245" width="0.0788%" height="15" fill="rgb(250,185,3)" fg:x="850" fg:w="1"/><text x="67.2319%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (13 samples, 1.02%)</title><rect x="66.5091%" y="261" width="1.0244%" height="15" fill="rgb(212,59,25)" fg:x="844" fg:w="13"/><text x="66.7591%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (6 samples, 0.47%)</title><rect x="67.0607%" y="245" width="0.4728%" height="15" fill="rgb(221,87,20)" fg:x="851" fg:w="6"/><text x="67.3107%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.47%)</title><rect x="67.0607%" y="229" width="0.4728%" height="15" fill="rgb(213,74,28)" fg:x="851" fg:w="6"/><text x="67.3107%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.47%)</title><rect x="67.0607%" y="213" width="0.4728%" height="15" fill="rgb(224,132,34)" fg:x="851" fg:w="6"/><text x="67.3107%" y="223.50"></text></g><g><title>__libc_malloc (6 samples, 0.47%)</title><rect x="67.0607%" y="197" width="0.4728%" height="15" fill="rgb(222,101,24)" fg:x="851" fg:w="6"/><text x="67.3107%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (15 samples, 1.18%)</title><rect x="66.4303%" y="293" width="1.1820%" height="15" fill="rgb(254,142,4)" fg:x="843" fg:w="15"/><text x="66.6803%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (15 samples, 1.18%)</title><rect x="66.4303%" y="277" width="1.1820%" height="15" fill="rgb(230,229,49)" fg:x="843" fg:w="15"/><text x="66.6803%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="67.5335%" y="261" width="0.0788%" height="15" fill="rgb(238,70,47)" fg:x="857" fg:w="1"/><text x="67.7835%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.0063%" y="229" width="0.0788%" height="15" fill="rgb(231,160,17)" fg:x="863" fg:w="1"/><text x="68.2563%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.0063%" y="213" width="0.0788%" height="15" fill="rgb(218,68,53)" fg:x="863" fg:w="1"/><text x="68.2563%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.0063%" y="197" width="0.0788%" height="15" fill="rgb(236,111,10)" fg:x="863" fg:w="1"/><text x="68.2563%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (6 samples, 0.47%)</title><rect x="67.6911%" y="261" width="0.4728%" height="15" fill="rgb(224,34,41)" fg:x="859" fg:w="6"/><text x="67.9411%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="68.0063%" y="245" width="0.1576%" height="15" fill="rgb(241,118,19)" fg:x="863" fg:w="2"/><text x="68.2563%" y="255.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="68.0851%" y="229" width="0.0788%" height="15" fill="rgb(238,129,25)" fg:x="864" fg:w="1"/><text x="68.3351%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="68.1639%" y="245" width="0.0788%" height="15" fill="rgb(238,22,31)" fg:x="865" fg:w="1"/><text x="68.4139%" y="255.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="68.1639%" y="229" width="0.0788%" height="15" fill="rgb(222,174,48)" fg:x="865" fg:w="1"/><text x="68.4139%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="68.1639%" y="261" width="0.1576%" height="15" fill="rgb(206,152,40)" fg:x="865" fg:w="2"/><text x="68.4139%" y="271.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="68.2427%" y="245" width="0.0788%" height="15" fill="rgb(218,99,54)" fg:x="866" fg:w="1"/><text x="68.4927%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (61 samples, 4.81%)</title><rect x="63.5934%" y="309" width="4.8069%" height="15" fill="rgb(220,174,26)" fg:x="807" fg:w="61"/><text x="63.8434%" y="319.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (10 samples, 0.79%)</title><rect x="67.6123%" y="293" width="0.7880%" height="15" fill="rgb(245,116,9)" fg:x="858" fg:w="10"/><text x="67.8623%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (10 samples, 0.79%)</title><rect x="67.6123%" y="277" width="0.7880%" height="15" fill="rgb(209,72,35)" fg:x="858" fg:w="10"/><text x="67.8623%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="68.3215%" y="261" width="0.0788%" height="15" fill="rgb(226,126,21)" fg:x="867" fg:w="1"/><text x="68.5715%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="68.3215%" y="245" width="0.0788%" height="15" fill="rgb(227,192,1)" fg:x="867" fg:w="1"/><text x="68.5715%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (62 samples, 4.89%)</title><rect x="63.5934%" y="341" width="4.8857%" height="15" fill="rgb(237,180,29)" fg:x="807" fg:w="62"/><text x="63.8434%" y="351.50">regex:..</text></g><g><title>regex::builders::Builder::build_one_string (62 samples, 4.89%)</title><rect x="63.5934%" y="325" width="4.8857%" height="15" fill="rgb(230,197,35)" fg:x="807" fg:w="62"/><text x="63.8434%" y="335.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="68.4003%" y="309" width="0.0788%" height="15" fill="rgb(246,193,31)" fg:x="868" fg:w="1"/><text x="68.6503%" y="319.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::props_union (1 samples, 0.08%)</title><rect x="68.4791%" y="341" width="0.0788%" height="15" fill="rgb(241,36,4)" fg:x="869" fg:w="1"/><text x="68.7291%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.4247%" y="261" width="0.0788%" height="15" fill="rgb(241,130,17)" fg:x="881" fg:w="1"/><text x="69.6747%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.4247%" y="245" width="0.0788%" height="15" fill="rgb(206,137,32)" fg:x="881" fg:w="1"/><text x="69.6747%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.4247%" y="229" width="0.0788%" height="15" fill="rgb(237,228,51)" fg:x="881" fg:w="1"/><text x="69.6747%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (11 samples, 0.87%)</title><rect x="68.7155%" y="277" width="0.8668%" height="15" fill="rgb(243,6,42)" fg:x="872" fg:w="11"/><text x="68.9655%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="69.5035%" y="261" width="0.0788%" height="15" fill="rgb(251,74,28)" fg:x="882" fg:w="1"/><text x="69.7535%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (14 samples, 1.10%)</title><rect x="68.6367%" y="293" width="1.1032%" height="15" fill="rgb(218,20,49)" fg:x="871" fg:w="14"/><text x="68.8867%" y="303.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="69.5823%" y="277" width="0.1576%" height="15" fill="rgb(238,28,14)" fg:x="883" fg:w="2"/><text x="69.8323%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="69.5823%" y="261" width="0.1576%" height="15" fill="rgb(229,40,46)" fg:x="883" fg:w="2"/><text x="69.8323%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="69.5823%" y="245" width="0.1576%" height="15" fill="rgb(244,195,20)" fg:x="883" fg:w="2"/><text x="69.8323%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="69.5823%" y="229" width="0.1576%" height="15" fill="rgb(253,56,35)" fg:x="883" fg:w="2"/><text x="69.8323%" y="239.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (90 samples, 7.09%)</title><rect x="62.7266%" y="357" width="7.0922%" height="15" fill="rgb(210,149,44)" fg:x="796" fg:w="90"/><text x="62.9766%" y="367.50">indefinite..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (16 samples, 1.26%)</title><rect x="68.5579%" y="341" width="1.2608%" height="15" fill="rgb(240,135,12)" fg:x="870" fg:w="16"/><text x="68.8079%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (15 samples, 1.18%)</title><rect x="68.6367%" y="325" width="1.1820%" height="15" fill="rgb(251,24,50)" fg:x="871" fg:w="15"/><text x="68.8867%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (15 samples, 1.18%)</title><rect x="68.6367%" y="309" width="1.1820%" height="15" fill="rgb(243,200,47)" fg:x="871" fg:w="15"/><text x="68.8867%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="69.7400%" y="293" width="0.0788%" height="15" fill="rgb(224,166,26)" fg:x="885" fg:w="1"/><text x="69.9900%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="69.7400%" y="277" width="0.0788%" height="15" fill="rgb(233,0,47)" fg:x="885" fg:w="1"/><text x="69.9900%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.7400%" y="261" width="0.0788%" height="15" fill="rgb(253,80,5)" fg:x="885" fg:w="1"/><text x="69.9900%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.7400%" y="245" width="0.0788%" height="15" fill="rgb(214,133,25)" fg:x="885" fg:w="1"/><text x="69.9900%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.7400%" y="229" width="0.0788%" height="15" fill="rgb(209,27,14)" fg:x="885" fg:w="1"/><text x="69.9900%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (684 samples, 53.90%)</title><rect x="15.9968%" y="453" width="53.9007%" height="15" fill="rgb(219,102,51)" fg:x="203" fg:w="684"/><text x="16.2468%" y="463.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedE..</text></g><g><title>plugins_core::looking::model::qualify_name (667 samples, 52.56%)</title><rect x="17.3365%" y="437" width="52.5611%" height="15" fill="rgb(237,18,16)" fg:x="220" fg:w="667"/><text x="17.5865%" y="447.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (667 samples, 52.56%)</title><rect x="17.3365%" y="421" width="52.5611%" height="15" fill="rgb(241,85,17)" fg:x="220" fg:w="667"/><text x="17.5865%" y="431.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (667 samples, 52.56%)</title><rect x="17.3365%" y="405" width="52.5611%" height="15" fill="rgb(236,90,42)" fg:x="220" fg:w="667"/><text x="17.5865%" y="415.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (664 samples, 52.32%)</title><rect x="17.5729%" y="389" width="52.3247%" height="15" fill="rgb(249,57,21)" fg:x="223" fg:w="664"/><text x="17.8229%" y="399.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (92 samples, 7.25%)</title><rect x="62.6478%" y="373" width="7.2498%" height="15" fill="rgb(243,12,36)" fg:x="795" fg:w="92"/><text x="62.8978%" y="383.50">indefinite..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="69.8188%" y="357" width="0.0788%" height="15" fill="rgb(253,128,47)" fg:x="886" fg:w="1"/><text x="70.0688%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="69.8976%" y="453" width="0.0788%" height="15" fill="rgb(207,33,20)" fg:x="887" fg:w="1"/><text x="70.1476%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="69.8976%" y="437" width="0.0788%" height="15" fill="rgb(233,215,35)" fg:x="887" fg:w="1"/><text x="70.1476%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="69.8976%" y="421" width="0.0788%" height="15" fill="rgb(249,188,52)" fg:x="887" fg:w="1"/><text x="70.1476%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="69.8976%" y="405" width="0.0788%" height="15" fill="rgb(225,12,32)" fg:x="887" fg:w="1"/><text x="70.1476%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="69.8976%" y="389" width="0.0788%" height="15" fill="rgb(247,98,14)" fg:x="887" fg:w="1"/><text x="70.1476%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="69.8976%" y="373" width="0.0788%" height="15" fill="rgb(247,219,48)" fg:x="887" fg:w="1"/><text x="70.1476%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="69.8976%" y="357" width="0.0788%" height="15" fill="rgb(253,60,48)" fg:x="887" fg:w="1"/><text x="70.1476%" y="367.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="69.8976%" y="341" width="0.0788%" height="15" fill="rgb(245,15,52)" fg:x="887" fg:w="1"/><text x="70.1476%" y="351.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="69.8976%" y="325" width="0.0788%" height="15" fill="rgb(220,133,28)" fg:x="887" fg:w="1"/><text x="70.1476%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::moving::model::Occupyable&gt;&gt; (1 samples, 0.08%)</title><rect x="69.9764%" y="453" width="0.0788%" height="15" fill="rgb(217,180,4)" fg:x="888" fg:w="1"/><text x="70.2264%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="69.9764%" y="437" width="0.0788%" height="15" fill="rgb(251,24,1)" fg:x="888" fg:w="1"/><text x="70.2264%" y="447.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.0552%" y="421" width="0.0788%" height="15" fill="rgb(212,185,49)" fg:x="889" fg:w="1"/><text x="70.3052%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.0552%" y="405" width="0.0788%" height="15" fill="rgb(215,175,22)" fg:x="889" fg:w="1"/><text x="70.3052%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.0552%" y="389" width="0.0788%" height="15" fill="rgb(250,205,14)" fg:x="889" fg:w="1"/><text x="70.3052%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.0552%" y="373" width="0.0788%" height="15" fill="rgb(225,211,22)" fg:x="889" fg:w="1"/><text x="70.3052%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.0552%" y="357" width="0.0788%" height="15" fill="rgb(251,179,42)" fg:x="889" fg:w="1"/><text x="70.3052%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.0552%" y="341" width="0.0788%" height="15" fill="rgb(208,216,51)" fg:x="889" fg:w="1"/><text x="70.3052%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.0552%" y="325" width="0.0788%" height="15" fill="rgb(235,36,11)" fg:x="889" fg:w="1"/><text x="70.3052%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.0552%" y="309" width="0.0788%" height="15" fill="rgb(213,189,28)" fg:x="889" fg:w="1"/><text x="70.3052%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.0552%" y="293" width="0.0788%" height="15" fill="rgb(227,203,42)" fg:x="889" fg:w="1"/><text x="70.3052%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.0552%" y="277" width="0.0788%" height="15" fill="rgb(244,72,36)" fg:x="889" fg:w="1"/><text x="70.3052%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.0552%" y="261" width="0.0788%" height="15" fill="rgb(213,53,17)" fg:x="889" fg:w="1"/><text x="70.3052%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.0552%" y="245" width="0.0788%" height="15" fill="rgb(207,167,3)" fg:x="889" fg:w="1"/><text x="70.3052%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.0552%" y="229" width="0.0788%" height="15" fill="rgb(216,98,30)" fg:x="889" fg:w="1"/><text x="70.3052%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.0552%" y="213" width="0.0788%" height="15" fill="rgb(236,123,15)" fg:x="889" fg:w="1"/><text x="70.3052%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.0552%" y="197" width="0.0788%" height="15" fill="rgb(248,81,50)" fg:x="889" fg:w="1"/><text x="70.3052%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.0552%" y="181" width="0.0788%" height="15" fill="rgb(214,120,4)" fg:x="889" fg:w="1"/><text x="70.3052%" y="191.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1340%" y="325" width="0.0788%" height="15" fill="rgb(208,179,34)" fg:x="890" fg:w="1"/><text x="70.3840%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1340%" y="309" width="0.0788%" height="15" fill="rgb(227,140,7)" fg:x="890" fg:w="1"/><text x="70.3840%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.2128%" y="293" width="0.0788%" height="15" fill="rgb(214,22,6)" fg:x="891" fg:w="1"/><text x="70.4628%" y="303.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.2128%" y="277" width="0.0788%" height="15" fill="rgb(207,137,27)" fg:x="891" fg:w="1"/><text x="70.4628%" y="287.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.2128%" y="261" width="0.0788%" height="15" fill="rgb(210,8,46)" fg:x="891" fg:w="1"/><text x="70.4628%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.2128%" y="245" width="0.0788%" height="15" fill="rgb(240,16,54)" fg:x="891" fg:w="1"/><text x="70.4628%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.2128%" y="229" width="0.0788%" height="15" fill="rgb(211,209,29)" fg:x="891" fg:w="1"/><text x="70.4628%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.2128%" y="213" width="0.0788%" height="15" fill="rgb(226,228,24)" fg:x="891" fg:w="1"/><text x="70.4628%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.2128%" y="197" width="0.0788%" height="15" fill="rgb(222,84,9)" fg:x="891" fg:w="1"/><text x="70.4628%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.2128%" y="181" width="0.0788%" height="15" fill="rgb(234,203,30)" fg:x="891" fg:w="1"/><text x="70.4628%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.2128%" y="165" width="0.0788%" height="15" fill="rgb(238,109,14)" fg:x="891" fg:w="1"/><text x="70.4628%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.2128%" y="149" width="0.0788%" height="15" fill="rgb(233,206,34)" fg:x="891" fg:w="1"/><text x="70.4628%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.2128%" y="133" width="0.0788%" height="15" fill="rgb(220,167,47)" fg:x="891" fg:w="1"/><text x="70.4628%" y="143.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="70.2128%" y="325" width="0.1576%" height="15" fill="rgb(238,105,10)" fg:x="891" fg:w="2"/><text x="70.4628%" y="335.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="70.2128%" y="309" width="0.1576%" height="15" fill="rgb(213,227,17)" fg:x="891" fg:w="2"/><text x="70.4628%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="70.2916%" y="293" width="0.0788%" height="15" fill="rgb(217,132,38)" fg:x="892" fg:w="1"/><text x="70.5416%" y="303.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.2916%" y="277" width="0.0788%" height="15" fill="rgb(242,146,4)" fg:x="892" fg:w="1"/><text x="70.5416%" y="287.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.2916%" y="261" width="0.0788%" height="15" fill="rgb(212,61,9)" fg:x="892" fg:w="1"/><text x="70.5416%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.2916%" y="245" width="0.0788%" height="15" fill="rgb(247,126,22)" fg:x="892" fg:w="1"/><text x="70.5416%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.2916%" y="229" width="0.0788%" height="15" fill="rgb(220,196,2)" fg:x="892" fg:w="1"/><text x="70.5416%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.2916%" y="213" width="0.0788%" height="15" fill="rgb(208,46,4)" fg:x="892" fg:w="1"/><text x="70.5416%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.2916%" y="197" width="0.0788%" height="15" fill="rgb(252,104,46)" fg:x="892" fg:w="1"/><text x="70.5416%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.2916%" y="181" width="0.0788%" height="15" fill="rgb(237,152,48)" fg:x="892" fg:w="1"/><text x="70.5416%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.2916%" y="165" width="0.0788%" height="15" fill="rgb(221,59,37)" fg:x="892" fg:w="1"/><text x="70.5416%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.2916%" y="149" width="0.0788%" height="15" fill="rgb(209,202,51)" fg:x="892" fg:w="1"/><text x="70.5416%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.2916%" y="133" width="0.0788%" height="15" fill="rgb(228,81,30)" fg:x="892" fg:w="1"/><text x="70.5416%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="70.2916%" y="117" width="0.0788%" height="15" fill="rgb(227,42,39)" fg:x="892" fg:w="1"/><text x="70.5416%" y="127.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.4492%" y="261" width="0.0788%" height="15" fill="rgb(221,26,2)" fg:x="894" fg:w="1"/><text x="70.6992%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.4492%" y="245" width="0.0788%" height="15" fill="rgb(254,61,31)" fg:x="894" fg:w="1"/><text x="70.6992%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="70.4492%" y="229" width="0.0788%" height="15" fill="rgb(222,173,38)" fg:x="894" fg:w="1"/><text x="70.6992%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.6068%" y="229" width="0.0788%" height="15" fill="rgb(218,50,12)" fg:x="896" fg:w="1"/><text x="70.8568%" y="239.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.6068%" y="213" width="0.0788%" height="15" fill="rgb(223,88,40)" fg:x="896" fg:w="1"/><text x="70.8568%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="70.6068%" y="197" width="0.0788%" height="15" fill="rgb(237,54,19)" fg:x="896" fg:w="1"/><text x="70.8568%" y="207.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="70.4492%" y="309" width="0.3152%" height="15" fill="rgb(251,129,25)" fg:x="894" fg:w="4"/><text x="70.6992%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="70.4492%" y="293" width="0.3152%" height="15" fill="rgb(238,97,19)" fg:x="894" fg:w="4"/><text x="70.6992%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="70.4492%" y="277" width="0.3152%" height="15" fill="rgb(240,169,18)" fg:x="894" fg:w="4"/><text x="70.6992%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="70.5280%" y="261" width="0.2364%" height="15" fill="rgb(230,187,49)" fg:x="895" fg:w="3"/><text x="70.7780%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.5280%" y="245" width="0.2364%" height="15" fill="rgb(209,44,26)" fg:x="895" fg:w="3"/><text x="70.7780%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.6856%" y="229" width="0.0788%" height="15" fill="rgb(244,0,6)" fg:x="897" fg:w="1"/><text x="70.9356%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.6856%" y="213" width="0.0788%" height="15" fill="rgb(248,18,21)" fg:x="897" fg:w="1"/><text x="70.9356%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.6856%" y="197" width="0.0788%" height="15" fill="rgb(245,180,19)" fg:x="897" fg:w="1"/><text x="70.9356%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.7644%" y="277" width="0.0788%" height="15" fill="rgb(252,118,36)" fg:x="898" fg:w="1"/><text x="71.0144%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.8432%" y="229" width="0.0788%" height="15" fill="rgb(210,224,19)" fg:x="899" fg:w="1"/><text x="71.0932%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.8432%" y="213" width="0.0788%" height="15" fill="rgb(218,30,24)" fg:x="899" fg:w="1"/><text x="71.0932%" y="223.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="70.8432%" y="197" width="0.0788%" height="15" fill="rgb(219,75,50)" fg:x="899" fg:w="1"/><text x="71.0932%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.8432%" y="181" width="0.0788%" height="15" fill="rgb(234,72,50)" fg:x="899" fg:w="1"/><text x="71.0932%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.8432%" y="165" width="0.0788%" height="15" fill="rgb(219,100,48)" fg:x="899" fg:w="1"/><text x="71.0932%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.8432%" y="149" width="0.0788%" height="15" fill="rgb(253,5,41)" fg:x="899" fg:w="1"/><text x="71.0932%" y="159.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.8432%" y="133" width="0.0788%" height="15" fill="rgb(247,181,11)" fg:x="899" fg:w="1"/><text x="71.0932%" y="143.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.8432%" y="117" width="0.0788%" height="15" fill="rgb(222,223,25)" fg:x="899" fg:w="1"/><text x="71.0932%" y="127.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (11 samples, 0.87%)</title><rect x="70.1340%" y="421" width="0.8668%" height="15" fill="rgb(214,198,28)" fg:x="890" fg:w="11"/><text x="70.3840%" y="431.50"></text></g><g><title>core::iter::adapters::try_process (11 samples, 0.87%)</title><rect x="70.1340%" y="405" width="0.8668%" height="15" fill="rgb(230,46,43)" fg:x="890" fg:w="11"/><text x="70.3840%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.87%)</title><rect x="70.1340%" y="389" width="0.8668%" height="15" fill="rgb(233,65,53)" fg:x="890" fg:w="11"/><text x="70.3840%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (11 samples, 0.87%)</title><rect x="70.1340%" y="373" width="0.8668%" height="15" fill="rgb(221,121,27)" fg:x="890" fg:w="11"/><text x="70.3840%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (11 samples, 0.87%)</title><rect x="70.1340%" y="357" width="0.8668%" height="15" fill="rgb(247,70,47)" fg:x="890" fg:w="11"/><text x="70.3840%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.87%)</title><rect x="70.1340%" y="341" width="0.8668%" height="15" fill="rgb(228,85,35)" fg:x="890" fg:w="11"/><text x="70.3840%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (8 samples, 0.63%)</title><rect x="70.3704%" y="325" width="0.6304%" height="15" fill="rgb(209,50,18)" fg:x="893" fg:w="8"/><text x="70.6204%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="70.7644%" y="309" width="0.2364%" height="15" fill="rgb(250,19,35)" fg:x="898" fg:w="3"/><text x="71.0144%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="70.7644%" y="293" width="0.2364%" height="15" fill="rgb(253,107,29)" fg:x="898" fg:w="3"/><text x="71.0144%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="70.8432%" y="277" width="0.1576%" height="15" fill="rgb(252,179,29)" fg:x="899" fg:w="2"/><text x="71.0932%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.8432%" y="261" width="0.1576%" height="15" fill="rgb(238,194,6)" fg:x="899" fg:w="2"/><text x="71.0932%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.8432%" y="245" width="0.1576%" height="15" fill="rgb(238,164,29)" fg:x="899" fg:w="2"/><text x="71.0932%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9220%" y="229" width="0.0788%" height="15" fill="rgb(224,25,9)" fg:x="900" fg:w="1"/><text x="71.1720%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.9220%" y="213" width="0.0788%" height="15" fill="rgb(244,153,23)" fg:x="900" fg:w="1"/><text x="71.1720%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.9220%" y="197" width="0.0788%" height="15" fill="rgb(212,203,14)" fg:x="900" fg:w="1"/><text x="71.1720%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9220%" y="181" width="0.0788%" height="15" fill="rgb(220,164,20)" fg:x="900" fg:w="1"/><text x="71.1720%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.9220%" y="165" width="0.0788%" height="15" fill="rgb(222,203,48)" fg:x="900" fg:w="1"/><text x="71.1720%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.9220%" y="149" width="0.0788%" height="15" fill="rgb(215,159,22)" fg:x="900" fg:w="1"/><text x="71.1720%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9220%" y="133" width="0.0788%" height="15" fill="rgb(216,183,47)" fg:x="900" fg:w="1"/><text x="71.1720%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.9220%" y="117" width="0.0788%" height="15" fill="rgb(229,195,25)" fg:x="900" fg:w="1"/><text x="71.1720%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.9220%" y="101" width="0.0788%" height="15" fill="rgb(224,132,51)" fg:x="900" fg:w="1"/><text x="71.1720%" y="111.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9220%" y="85" width="0.0788%" height="15" fill="rgb(240,63,7)" fg:x="900" fg:w="1"/><text x="71.1720%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.9220%" y="69" width="0.0788%" height="15" fill="rgb(249,182,41)" fg:x="900" fg:w="1"/><text x="71.1720%" y="79.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.9220%" y="53" width="0.0788%" height="15" fill="rgb(243,47,26)" fg:x="900" fg:w="1"/><text x="71.1720%" y="63.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9220%" y="37" width="0.0788%" height="15" fill="rgb(233,48,2)" fg:x="900" fg:w="1"/><text x="71.1720%" y="47.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="71.0008%" y="389" width="0.0788%" height="15" fill="rgb(244,165,34)" fg:x="901" fg:w="1"/><text x="71.2508%" y="399.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="71.0008%" y="373" width="0.0788%" height="15" fill="rgb(207,89,7)" fg:x="901" fg:w="1"/><text x="71.2508%" y="383.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="71.0008%" y="357" width="0.0788%" height="15" fill="rgb(244,117,36)" fg:x="901" fg:w="1"/><text x="71.2508%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.0008%" y="341" width="0.0788%" height="15" fill="rgb(226,144,34)" fg:x="901" fg:w="1"/><text x="71.2508%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.0008%" y="325" width="0.0788%" height="15" fill="rgb(213,23,19)" fg:x="901" fg:w="1"/><text x="71.2508%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (709 samples, 55.87%)</title><rect x="15.2876%" y="661" width="55.8708%" height="15" fill="rgb(217,75,12)" fg:x="194" fg:w="709"/><text x="15.5376%" y="671.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (709 samples, 55.87%)</title><rect x="15.2876%" y="645" width="55.8708%" height="15" fill="rgb(224,159,17)" fg:x="194" fg:w="709"/><text x="15.5376%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (709 samples, 55.87%)</title><rect x="15.2876%" y="629" width="55.8708%" height="15" fill="rgb(217,118,1)" fg:x="194" fg:w="709"/><text x="15.5376%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (709 samples, 55.87%)</title><rect x="15.2876%" y="613" width="55.8708%" height="15" fill="rgb(232,180,48)" fg:x="194" fg:w="709"/><text x="15.5376%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (703 samples, 55.40%)</title><rect x="15.7604%" y="597" width="55.3980%" height="15" fill="rgb(230,27,33)" fg:x="200" fg:w="703"/><text x="16.0104%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (703 samples, 55.40%)</title><rect x="15.7604%" y="581" width="55.3980%" height="15" fill="rgb(205,31,21)" fg:x="200" fg:w="703"/><text x="16.0104%" y="591.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (703 samples, 55.40%)</title><rect x="15.7604%" y="565" width="55.3980%" height="15" fill="rgb(253,59,4)" fg:x="200" fg:w="703"/><text x="16.0104%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (703 samples, 55.40%)</title><rect x="15.7604%" y="549" width="55.3980%" height="15" fill="rgb(224,201,9)" fg:x="200" fg:w="703"/><text x="16.0104%" y="559.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (703 samples, 55.40%)</title><rect x="15.7604%" y="533" width="55.3980%" height="15" fill="rgb(229,206,30)" fg:x="200" fg:w="703"/><text x="16.0104%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (702 samples, 55.32%)</title><rect x="15.8392%" y="517" width="55.3191%" height="15" fill="rgb(212,67,47)" fg:x="201" fg:w="702"/><text x="16.0892%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (702 samples, 55.32%)</title><rect x="15.8392%" y="501" width="55.3191%" height="15" fill="rgb(211,96,50)" fg:x="201" fg:w="702"/><text x="16.0892%" y="511.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (702 samples, 55.32%)</title><rect x="15.8392%" y="485" width="55.3191%" height="15" fill="rgb(252,114,18)" fg:x="201" fg:w="702"/><text x="16.0892%" y="495.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (702 samples, 55.32%)</title><rect x="15.8392%" y="469" width="55.3191%" height="15" fill="rgb(223,58,37)" fg:x="201" fg:w="702"/><text x="16.0892%" y="479.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (14 samples, 1.10%)</title><rect x="70.0552%" y="453" width="1.1032%" height="15" fill="rgb(237,70,4)" fg:x="889" fg:w="14"/><text x="70.3052%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (14 samples, 1.10%)</title><rect x="70.0552%" y="437" width="1.1032%" height="15" fill="rgb(244,85,46)" fg:x="889" fg:w="14"/><text x="70.3052%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.0008%" y="421" width="0.1576%" height="15" fill="rgb(223,39,52)" fg:x="901" fg:w="2"/><text x="71.2508%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.0008%" y="405" width="0.1576%" height="15" fill="rgb(218,200,14)" fg:x="901" fg:w="2"/><text x="71.2508%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.0796%" y="389" width="0.0788%" height="15" fill="rgb(208,171,16)" fg:x="902" fg:w="1"/><text x="71.3296%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.0796%" y="373" width="0.0788%" height="15" fill="rgb(234,200,18)" fg:x="902" fg:w="1"/><text x="71.3296%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="71.0796%" y="357" width="0.0788%" height="15" fill="rgb(228,45,11)" fg:x="902" fg:w="1"/><text x="71.3296%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="71.0796%" y="341" width="0.0788%" height="15" fill="rgb(237,182,11)" fg:x="902" fg:w="1"/><text x="71.3296%" y="351.50"></text></g><g><title>serde_json::value::de::SeqDeserializer::new (1 samples, 0.08%)</title><rect x="71.0796%" y="325" width="0.0788%" height="15" fill="rgb(241,175,49)" fg:x="902" fg:w="1"/><text x="71.3296%" y="335.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="71.1584%" y="629" width="0.0788%" height="15" fill="rgb(247,38,35)" fg:x="903" fg:w="1"/><text x="71.4084%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="71.1584%" y="613" width="0.0788%" height="15" fill="rgb(228,39,49)" fg:x="903" fg:w="1"/><text x="71.4084%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="71.1584%" y="597" width="0.0788%" height="15" fill="rgb(226,101,26)" fg:x="903" fg:w="1"/><text x="71.4084%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.1584%" y="581" width="0.0788%" height="15" fill="rgb(206,141,19)" fg:x="903" fg:w="1"/><text x="71.4084%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.1584%" y="565" width="0.0788%" height="15" fill="rgb(211,200,13)" fg:x="903" fg:w="1"/><text x="71.4084%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.2372%" y="565" width="0.0788%" height="15" fill="rgb(241,121,6)" fg:x="904" fg:w="1"/><text x="71.4872%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="71.2372%" y="549" width="0.0788%" height="15" fill="rgb(234,221,29)" fg:x="904" fg:w="1"/><text x="71.4872%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.3160%" y="501" width="0.0788%" height="15" fill="rgb(229,136,5)" fg:x="905" fg:w="1"/><text x="71.5660%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.3160%" y="485" width="0.0788%" height="15" fill="rgb(238,36,11)" fg:x="905" fg:w="1"/><text x="71.5660%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.3160%" y="469" width="0.0788%" height="15" fill="rgb(251,55,41)" fg:x="905" fg:w="1"/><text x="71.5660%" y="479.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="71.2372%" y="613" width="0.3152%" height="15" fill="rgb(242,34,40)" fg:x="904" fg:w="4"/><text x="71.4872%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="71.2372%" y="597" width="0.3152%" height="15" fill="rgb(215,42,17)" fg:x="904" fg:w="4"/><text x="71.4872%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="71.2372%" y="581" width="0.3152%" height="15" fill="rgb(207,44,46)" fg:x="904" fg:w="4"/><text x="71.4872%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="71.3160%" y="565" width="0.2364%" height="15" fill="rgb(211,206,28)" fg:x="905" fg:w="3"/><text x="71.5660%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="71.3160%" y="549" width="0.2364%" height="15" fill="rgb(237,167,16)" fg:x="905" fg:w="3"/><text x="71.5660%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="71.3160%" y="533" width="0.2364%" height="15" fill="rgb(233,66,6)" fg:x="905" fg:w="3"/><text x="71.5660%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="71.3160%" y="517" width="0.2364%" height="15" fill="rgb(246,123,29)" fg:x="905" fg:w="3"/><text x="71.5660%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.3948%" y="501" width="0.1576%" height="15" fill="rgb(209,62,40)" fg:x="906" fg:w="2"/><text x="71.6448%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.3948%" y="485" width="0.1576%" height="15" fill="rgb(218,4,25)" fg:x="906" fg:w="2"/><text x="71.6448%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.3948%" y="469" width="0.1576%" height="15" fill="rgb(253,91,49)" fg:x="906" fg:w="2"/><text x="71.6448%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="71.3948%" y="453" width="0.1576%" height="15" fill="rgb(228,155,29)" fg:x="906" fg:w="2"/><text x="71.6448%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.16%)</title><rect x="71.3948%" y="437" width="0.1576%" height="15" fill="rgb(243,57,37)" fg:x="906" fg:w="2"/><text x="71.6448%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (6 samples, 0.47%)</title><rect x="71.2372%" y="629" width="0.4728%" height="15" fill="rgb(244,167,17)" fg:x="904" fg:w="6"/><text x="71.4872%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.5524%" y="613" width="0.1576%" height="15" fill="rgb(207,181,38)" fg:x="908" fg:w="2"/><text x="71.8024%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.5524%" y="597" width="0.1576%" height="15" fill="rgb(211,8,23)" fg:x="908" fg:w="2"/><text x="71.8024%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="71.5524%" y="581" width="0.1576%" height="15" fill="rgb(235,11,44)" fg:x="908" fg:w="2"/><text x="71.8024%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.5524%" y="565" width="0.1576%" height="15" fill="rgb(248,18,52)" fg:x="908" fg:w="2"/><text x="71.8024%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.5524%" y="549" width="0.1576%" height="15" fill="rgb(208,4,7)" fg:x="908" fg:w="2"/><text x="71.8024%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.5524%" y="533" width="0.1576%" height="15" fill="rgb(240,17,39)" fg:x="908" fg:w="2"/><text x="71.8024%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.5524%" y="517" width="0.1576%" height="15" fill="rgb(207,170,3)" fg:x="908" fg:w="2"/><text x="71.8024%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="71.5524%" y="501" width="0.1576%" height="15" fill="rgb(236,100,52)" fg:x="908" fg:w="2"/><text x="71.8024%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.6312%" y="485" width="0.0788%" height="15" fill="rgb(246,78,51)" fg:x="909" fg:w="1"/><text x="71.8812%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (8 samples, 0.63%)</title><rect x="71.1584%" y="661" width="0.6304%" height="15" fill="rgb(211,17,15)" fg:x="903" fg:w="8"/><text x="71.4084%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.63%)</title><rect x="71.1584%" y="645" width="0.6304%" height="15" fill="rgb(209,59,46)" fg:x="903" fg:w="8"/><text x="71.4084%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.7100%" y="629" width="0.0788%" height="15" fill="rgb(210,92,25)" fg:x="910" fg:w="1"/><text x="71.9600%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.7100%" y="613" width="0.0788%" height="15" fill="rgb(238,174,52)" fg:x="910" fg:w="1"/><text x="71.9600%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.7100%" y="597" width="0.0788%" height="15" fill="rgb(230,73,7)" fg:x="910" fg:w="1"/><text x="71.9600%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.7100%" y="581" width="0.0788%" height="15" fill="rgb(243,124,40)" fg:x="910" fg:w="1"/><text x="71.9600%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.7100%" y="565" width="0.0788%" height="15" fill="rgb(244,170,11)" fg:x="910" fg:w="1"/><text x="71.9600%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.7100%" y="549" width="0.0788%" height="15" fill="rgb(207,114,54)" fg:x="910" fg:w="1"/><text x="71.9600%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.7100%" y="533" width="0.0788%" height="15" fill="rgb(205,42,20)" fg:x="910" fg:w="1"/><text x="71.9600%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.7100%" y="517" width="0.0788%" height="15" fill="rgb(230,30,28)" fg:x="910" fg:w="1"/><text x="71.9600%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.7100%" y="501" width="0.0788%" height="15" fill="rgb(205,73,54)" fg:x="910" fg:w="1"/><text x="71.9600%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.7100%" y="485" width="0.0788%" height="15" fill="rgb(254,227,23)" fg:x="910" fg:w="1"/><text x="71.9600%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.7100%" y="469" width="0.0788%" height="15" fill="rgb(228,202,34)" fg:x="910" fg:w="1"/><text x="71.9600%" y="479.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="71.7888%" y="597" width="0.1576%" height="15" fill="rgb(222,225,37)" fg:x="911" fg:w="2"/><text x="72.0388%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.7888%" y="581" width="0.1576%" height="15" fill="rgb(221,14,54)" fg:x="911" fg:w="2"/><text x="72.0388%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.7888%" y="565" width="0.1576%" height="15" fill="rgb(254,102,2)" fg:x="911" fg:w="2"/><text x="72.0388%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.7888%" y="549" width="0.1576%" height="15" fill="rgb(232,104,17)" fg:x="911" fg:w="2"/><text x="72.0388%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.7888%" y="533" width="0.1576%" height="15" fill="rgb(250,220,14)" fg:x="911" fg:w="2"/><text x="72.0388%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="71.7888%" y="517" width="0.1576%" height="15" fill="rgb(241,158,9)" fg:x="911" fg:w="2"/><text x="72.0388%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.8676%" y="501" width="0.0788%" height="15" fill="rgb(246,9,43)" fg:x="912" fg:w="1"/><text x="72.1176%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.8676%" y="485" width="0.0788%" height="15" fill="rgb(206,73,33)" fg:x="912" fg:w="1"/><text x="72.1176%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="72.1040%" y="517" width="0.0788%" height="15" fill="rgb(222,79,8)" fg:x="915" fg:w="1"/><text x="72.3540%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.1040%" y="501" width="0.0788%" height="15" fill="rgb(234,8,54)" fg:x="915" fg:w="1"/><text x="72.3540%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="72.1040%" y="485" width="0.0788%" height="15" fill="rgb(209,134,38)" fg:x="915" fg:w="1"/><text x="72.3540%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="72.1040%" y="469" width="0.0788%" height="15" fill="rgb(230,127,29)" fg:x="915" fg:w="1"/><text x="72.3540%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="72.1040%" y="453" width="0.0788%" height="15" fill="rgb(242,44,41)" fg:x="915" fg:w="1"/><text x="72.3540%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="72.1040%" y="437" width="0.0788%" height="15" fill="rgb(222,56,43)" fg:x="915" fg:w="1"/><text x="72.3540%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="72.1040%" y="421" width="0.0788%" height="15" fill="rgb(238,39,47)" fg:x="915" fg:w="1"/><text x="72.3540%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (6 samples, 0.47%)</title><rect x="71.7888%" y="613" width="0.4728%" height="15" fill="rgb(226,79,43)" fg:x="911" fg:w="6"/><text x="72.0388%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="71.9464%" y="597" width="0.3152%" height="15" fill="rgb(242,105,53)" fg:x="913" fg:w="4"/><text x="72.1964%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="72.0252%" y="581" width="0.2364%" height="15" fill="rgb(251,132,46)" fg:x="914" fg:w="3"/><text x="72.2752%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="72.0252%" y="565" width="0.2364%" height="15" fill="rgb(231,77,14)" fg:x="914" fg:w="3"/><text x="72.2752%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="72.0252%" y="549" width="0.2364%" height="15" fill="rgb(240,135,9)" fg:x="914" fg:w="3"/><text x="72.2752%" y="559.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="72.0252%" y="533" width="0.2364%" height="15" fill="rgb(248,109,14)" fg:x="914" fg:w="3"/><text x="72.2752%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1828%" y="517" width="0.0788%" height="15" fill="rgb(227,146,52)" fg:x="916" fg:w="1"/><text x="72.4328%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.1828%" y="501" width="0.0788%" height="15" fill="rgb(232,54,3)" fg:x="916" fg:w="1"/><text x="72.4328%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="72.1828%" y="485" width="0.0788%" height="15" fill="rgb(229,201,43)" fg:x="916" fg:w="1"/><text x="72.4328%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1828%" y="469" width="0.0788%" height="15" fill="rgb(252,161,33)" fg:x="916" fg:w="1"/><text x="72.4328%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.1828%" y="453" width="0.0788%" height="15" fill="rgb(226,146,40)" fg:x="916" fg:w="1"/><text x="72.4328%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="72.1828%" y="437" width="0.0788%" height="15" fill="rgb(219,47,25)" fg:x="916" fg:w="1"/><text x="72.4328%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1828%" y="421" width="0.0788%" height="15" fill="rgb(250,135,13)" fg:x="916" fg:w="1"/><text x="72.4328%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.1828%" y="405" width="0.0788%" height="15" fill="rgb(219,229,18)" fg:x="916" fg:w="1"/><text x="72.4328%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="72.1828%" y="389" width="0.0788%" height="15" fill="rgb(217,152,27)" fg:x="916" fg:w="1"/><text x="72.4328%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1828%" y="373" width="0.0788%" height="15" fill="rgb(225,71,47)" fg:x="916" fg:w="1"/><text x="72.4328%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.1828%" y="357" width="0.0788%" height="15" fill="rgb(220,139,14)" fg:x="916" fg:w="1"/><text x="72.4328%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="72.1828%" y="341" width="0.0788%" height="15" fill="rgb(247,54,32)" fg:x="916" fg:w="1"/><text x="72.4328%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1828%" y="325" width="0.0788%" height="15" fill="rgb(252,131,39)" fg:x="916" fg:w="1"/><text x="72.4328%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.3404%" y="549" width="0.0788%" height="15" fill="rgb(210,108,39)" fg:x="918" fg:w="1"/><text x="72.5904%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.3404%" y="533" width="0.0788%" height="15" fill="rgb(205,23,29)" fg:x="918" fg:w="1"/><text x="72.5904%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.3404%" y="517" width="0.0788%" height="15" fill="rgb(246,139,46)" fg:x="918" fg:w="1"/><text x="72.5904%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.3404%" y="501" width="0.0788%" height="15" fill="rgb(250,81,26)" fg:x="918" fg:w="1"/><text x="72.5904%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.3404%" y="485" width="0.0788%" height="15" fill="rgb(214,104,7)" fg:x="918" fg:w="1"/><text x="72.5904%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.3404%" y="469" width="0.0788%" height="15" fill="rgb(233,189,8)" fg:x="918" fg:w="1"/><text x="72.5904%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.3404%" y="453" width="0.0788%" height="15" fill="rgb(228,141,17)" fg:x="918" fg:w="1"/><text x="72.5904%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.3404%" y="437" width="0.0788%" height="15" fill="rgb(247,157,1)" fg:x="918" fg:w="1"/><text x="72.5904%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="72.3404%" y="421" width="0.0788%" height="15" fill="rgb(249,225,5)" fg:x="918" fg:w="1"/><text x="72.5904%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="72.3404%" y="405" width="0.0788%" height="15" fill="rgb(242,55,13)" fg:x="918" fg:w="1"/><text x="72.5904%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.3404%" y="565" width="0.1576%" height="15" fill="rgb(230,49,50)" fg:x="918" fg:w="2"/><text x="72.5904%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.4192%" y="549" width="0.0788%" height="15" fill="rgb(241,111,38)" fg:x="919" fg:w="1"/><text x="72.6692%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.4192%" y="533" width="0.0788%" height="15" fill="rgb(252,155,4)" fg:x="919" fg:w="1"/><text x="72.6692%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.4192%" y="517" width="0.0788%" height="15" fill="rgb(212,69,32)" fg:x="919" fg:w="1"/><text x="72.6692%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.4192%" y="501" width="0.0788%" height="15" fill="rgb(243,107,47)" fg:x="919" fg:w="1"/><text x="72.6692%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.4192%" y="485" width="0.0788%" height="15" fill="rgb(247,130,12)" fg:x="919" fg:w="1"/><text x="72.6692%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.4192%" y="469" width="0.0788%" height="15" fill="rgb(233,74,16)" fg:x="919" fg:w="1"/><text x="72.6692%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.4192%" y="453" width="0.0788%" height="15" fill="rgb(208,58,18)" fg:x="919" fg:w="1"/><text x="72.6692%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.4192%" y="437" width="0.0788%" height="15" fill="rgb(242,225,1)" fg:x="919" fg:w="1"/><text x="72.6692%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.4192%" y="421" width="0.0788%" height="15" fill="rgb(249,39,40)" fg:x="919" fg:w="1"/><text x="72.6692%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.4192%" y="405" width="0.0788%" height="15" fill="rgb(207,72,44)" fg:x="919" fg:w="1"/><text x="72.6692%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.4192%" y="389" width="0.0788%" height="15" fill="rgb(215,193,12)" fg:x="919" fg:w="1"/><text x="72.6692%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.4192%" y="373" width="0.0788%" height="15" fill="rgb(248,41,39)" fg:x="919" fg:w="1"/><text x="72.6692%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="72.2616%" y="613" width="0.3152%" height="15" fill="rgb(253,85,4)" fg:x="917" fg:w="4"/><text x="72.5116%" y="623.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="72.3404%" y="597" width="0.2364%" height="15" fill="rgb(243,70,31)" fg:x="918" fg:w="3"/><text x="72.5904%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="72.3404%" y="581" width="0.2364%" height="15" fill="rgb(253,195,26)" fg:x="918" fg:w="3"/><text x="72.5904%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.4980%" y="565" width="0.0788%" height="15" fill="rgb(243,42,11)" fg:x="920" fg:w="1"/><text x="72.7480%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.4980%" y="549" width="0.0788%" height="15" fill="rgb(239,66,17)" fg:x="920" fg:w="1"/><text x="72.7480%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (11 samples, 0.87%)</title><rect x="71.7888%" y="645" width="0.8668%" height="15" fill="rgb(217,132,21)" fg:x="911" fg:w="11"/><text x="72.0388%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.87%)</title><rect x="71.7888%" y="629" width="0.8668%" height="15" fill="rgb(252,202,21)" fg:x="911" fg:w="11"/><text x="72.0388%" y="639.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="72.5768%" y="613" width="0.0788%" height="15" fill="rgb(233,98,36)" fg:x="921" fg:w="1"/><text x="72.8268%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.5768%" y="597" width="0.0788%" height="15" fill="rgb(216,153,54)" fg:x="921" fg:w="1"/><text x="72.8268%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.5768%" y="581" width="0.0788%" height="15" fill="rgb(250,99,7)" fg:x="921" fg:w="1"/><text x="72.8268%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="72.5768%" y="565" width="0.0788%" height="15" fill="rgb(207,56,50)" fg:x="921" fg:w="1"/><text x="72.8268%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.6556%" y="629" width="0.0788%" height="15" fill="rgb(244,61,34)" fg:x="922" fg:w="1"/><text x="72.9056%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (13 samples, 1.02%)</title><rect x="71.7888%" y="661" width="1.0244%" height="15" fill="rgb(241,50,38)" fg:x="911" fg:w="13"/><text x="72.0388%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="72.6556%" y="645" width="0.1576%" height="15" fill="rgb(212,166,30)" fg:x="922" fg:w="2"/><text x="72.9056%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="72.7344%" y="629" width="0.0788%" height="15" fill="rgb(249,127,32)" fg:x="923" fg:w="1"/><text x="72.9844%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="72.7344%" y="613" width="0.0788%" height="15" fill="rgb(209,103,0)" fg:x="923" fg:w="1"/><text x="72.9844%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.7344%" y="597" width="0.0788%" height="15" fill="rgb(238,209,51)" fg:x="923" fg:w="1"/><text x="72.9844%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="72.7344%" y="581" width="0.0788%" height="15" fill="rgb(237,56,23)" fg:x="923" fg:w="1"/><text x="72.9844%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="72.7344%" y="565" width="0.0788%" height="15" fill="rgb(215,153,46)" fg:x="923" fg:w="1"/><text x="72.9844%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="72.7344%" y="549" width="0.0788%" height="15" fill="rgb(224,49,31)" fg:x="923" fg:w="1"/><text x="72.9844%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.7344%" y="533" width="0.0788%" height="15" fill="rgb(250,18,42)" fg:x="923" fg:w="1"/><text x="72.9844%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.7344%" y="517" width="0.0788%" height="15" fill="rgb(215,176,39)" fg:x="923" fg:w="1"/><text x="72.9844%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.7344%" y="501" width="0.0788%" height="15" fill="rgb(223,77,29)" fg:x="923" fg:w="1"/><text x="72.9844%" y="511.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="72.7344%" y="485" width="0.0788%" height="15" fill="rgb(234,94,52)" fg:x="923" fg:w="1"/><text x="72.9844%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="72.7344%" y="469" width="0.0788%" height="15" fill="rgb(220,154,50)" fg:x="923" fg:w="1"/><text x="72.9844%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="72.7344%" y="453" width="0.0788%" height="15" fill="rgb(212,11,10)" fg:x="923" fg:w="1"/><text x="72.9844%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="72.7344%" y="437" width="0.0788%" height="15" fill="rgb(205,166,19)" fg:x="923" fg:w="1"/><text x="72.9844%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="72.7344%" y="421" width="0.0788%" height="15" fill="rgb(244,198,16)" fg:x="923" fg:w="1"/><text x="72.9844%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (926 samples, 72.97%)</title><rect x="0.0000%" y="725" width="72.9708%" height="15" fill="rgb(219,69,12)" fg:x="0" fg:w="926"/><text x="0.2500%" y="735.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (926 samples, 72.97%)</title><rect x="0.0000%" y="709" width="72.9708%" height="15" fill="rgb(245,30,7)" fg:x="0" fg:w="926"/><text x="0.2500%" y="719.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (926 samples, 72.97%)</title><rect x="0.0000%" y="693" width="72.9708%" height="15" fill="rgb(218,221,48)" fg:x="0" fg:w="926"/><text x="0.2500%" y="703.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (733 samples, 57.76%)</title><rect x="15.2088%" y="677" width="57.7620%" height="15" fill="rgb(216,66,15)" fg:x="193" fg:w="733"/><text x="15.4588%" y="687.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="72.8132%" y="661" width="0.1576%" height="15" fill="rgb(226,122,50)" fg:x="924" fg:w="2"/><text x="73.0632%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="72.8920%" y="645" width="0.0788%" height="15" fill="rgb(239,156,16)" fg:x="925" fg:w="1"/><text x="73.1420%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.8920%" y="629" width="0.0788%" height="15" fill="rgb(224,27,38)" fg:x="925" fg:w="1"/><text x="73.1420%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="72.9708%" y="549" width="0.1576%" height="15" fill="rgb(224,39,27)" fg:x="926" fg:w="2"/><text x="73.2208%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="72.9708%" y="533" width="0.1576%" height="15" fill="rgb(215,92,29)" fg:x="926" fg:w="2"/><text x="73.2208%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="72.9708%" y="677" width="0.2364%" height="15" fill="rgb(207,159,16)" fg:x="926" fg:w="3"/><text x="73.2208%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (3 samples, 0.24%)</title><rect x="72.9708%" y="661" width="0.2364%" height="15" fill="rgb(238,163,47)" fg:x="926" fg:w="3"/><text x="73.2208%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="72.9708%" y="645" width="0.2364%" height="15" fill="rgb(219,91,49)" fg:x="926" fg:w="3"/><text x="73.2208%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (3 samples, 0.24%)</title><rect x="72.9708%" y="629" width="0.2364%" height="15" fill="rgb(227,167,31)" fg:x="926" fg:w="3"/><text x="73.2208%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="72.9708%" y="613" width="0.2364%" height="15" fill="rgb(234,80,54)" fg:x="926" fg:w="3"/><text x="73.2208%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="72.9708%" y="597" width="0.2364%" height="15" fill="rgb(212,114,2)" fg:x="926" fg:w="3"/><text x="73.2208%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="72.9708%" y="581" width="0.2364%" height="15" fill="rgb(234,50,24)" fg:x="926" fg:w="3"/><text x="73.2208%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="72.9708%" y="565" width="0.2364%" height="15" fill="rgb(221,68,8)" fg:x="926" fg:w="3"/><text x="73.2208%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.1284%" y="549" width="0.0788%" height="15" fill="rgb(254,180,31)" fg:x="928" fg:w="1"/><text x="73.3784%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.2861%" y="645" width="0.0788%" height="15" fill="rgb(247,130,50)" fg:x="930" fg:w="1"/><text x="73.5361%" y="655.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="73.3649%" y="581" width="0.1576%" height="15" fill="rgb(211,109,4)" fg:x="931" fg:w="2"/><text x="73.6149%" y="591.50"></text></g><g><title>__asprintf (2 samples, 0.16%)</title><rect x="73.3649%" y="565" width="0.1576%" height="15" fill="rgb(238,50,21)" fg:x="931" fg:w="2"/><text x="73.6149%" y="575.50"></text></g><g><title>engine::session::Session::initialize (3 samples, 0.24%)</title><rect x="73.3649%" y="645" width="0.2364%" height="15" fill="rgb(225,57,45)" fg:x="931" fg:w="3"/><text x="73.6149%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (3 samples, 0.24%)</title><rect x="73.3649%" y="629" width="0.2364%" height="15" fill="rgb(209,196,50)" fg:x="931" fg:w="3"/><text x="73.6149%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="73.3649%" y="613" width="0.2364%" height="15" fill="rgb(242,140,13)" fg:x="931" fg:w="3"/><text x="73.6149%" y="623.50"></text></g><g><title>libloading::safe::Library::new (3 samples, 0.24%)</title><rect x="73.3649%" y="597" width="0.2364%" height="15" fill="rgb(217,111,7)" fg:x="931" fg:w="3"/><text x="73.6149%" y="607.50"></text></g><g><title>dlopen (1 samples, 0.08%)</title><rect x="73.5225%" y="581" width="0.0788%" height="15" fill="rgb(253,193,51)" fg:x="933" fg:w="1"/><text x="73.7725%" y="591.50"></text></g><g><title>_dl_catch_error (1 samples, 0.08%)</title><rect x="73.5225%" y="565" width="0.0788%" height="15" fill="rgb(252,70,29)" fg:x="933" fg:w="1"/><text x="73.7725%" y="575.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="73.5225%" y="549" width="0.0788%" height="15" fill="rgb(232,127,12)" fg:x="933" fg:w="1"/><text x="73.7725%" y="559.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="73.5225%" y="533" width="0.0788%" height="15" fill="rgb(211,180,21)" fg:x="933" fg:w="1"/><text x="73.7725%" y="543.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (6 samples, 0.47%)</title><rect x="73.2072%" y="677" width="0.4728%" height="15" fill="rgb(229,72,13)" fg:x="929" fg:w="6"/><text x="73.4572%" y="687.50"></text></g><g><title>engine::session::Session::new (6 samples, 0.47%)</title><rect x="73.2072%" y="661" width="0.4728%" height="15" fill="rgb(240,211,49)" fg:x="929" fg:w="6"/><text x="73.4572%" y="671.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="73.6013%" y="645" width="0.0788%" height="15" fill="rgb(219,149,40)" fg:x="934" fg:w="1"/><text x="73.8513%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="73.6013%" y="629" width="0.0788%" height="15" fill="rgb(210,127,46)" fg:x="934" fg:w="1"/><text x="73.8513%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.6013%" y="613" width="0.0788%" height="15" fill="rgb(220,106,7)" fg:x="934" fg:w="1"/><text x="73.8513%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.8377%" y="549" width="0.0788%" height="15" fill="rgb(249,31,22)" fg:x="937" fg:w="1"/><text x="74.0877%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="73.9953%" y="517" width="0.1576%" height="15" fill="rgb(253,1,49)" fg:x="939" fg:w="2"/><text x="74.2453%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="73.9953%" y="501" width="0.1576%" height="15" fill="rgb(227,144,33)" fg:x="939" fg:w="2"/><text x="74.2453%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.0741%" y="485" width="0.0788%" height="15" fill="rgb(249,163,44)" fg:x="940" fg:w="1"/><text x="74.3241%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.0741%" y="469" width="0.0788%" height="15" fill="rgb(234,15,39)" fg:x="940" fg:w="1"/><text x="74.3241%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="73.9165%" y="549" width="0.3940%" height="15" fill="rgb(207,66,16)" fg:x="938" fg:w="5"/><text x="74.1665%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="73.9953%" y="533" width="0.3152%" height="15" fill="rgb(233,112,24)" fg:x="939" fg:w="4"/><text x="74.2453%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="74.1529%" y="517" width="0.1576%" height="15" fill="rgb(230,90,22)" fg:x="941" fg:w="2"/><text x="74.4029%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="74.1529%" y="501" width="0.1576%" height="15" fill="rgb(229,61,13)" fg:x="941" fg:w="2"/><text x="74.4029%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="74.1529%" y="485" width="0.1576%" height="15" fill="rgb(225,57,24)" fg:x="941" fg:w="2"/><text x="74.4029%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="74.1529%" y="469" width="0.1576%" height="15" fill="rgb(208,169,48)" fg:x="941" fg:w="2"/><text x="74.4029%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.63%)</title><rect x="73.7589%" y="581" width="0.6304%" height="15" fill="rgb(244,218,51)" fg:x="936" fg:w="8"/><text x="74.0089%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.63%)</title><rect x="73.7589%" y="565" width="0.6304%" height="15" fill="rgb(214,148,10)" fg:x="936" fg:w="8"/><text x="74.0089%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.3105%" y="549" width="0.0788%" height="15" fill="rgb(225,174,27)" fg:x="943" fg:w="1"/><text x="74.5605%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.3105%" y="533" width="0.0788%" height="15" fill="rgb(230,96,26)" fg:x="943" fg:w="1"/><text x="74.5605%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.3105%" y="517" width="0.0788%" height="15" fill="rgb(232,10,30)" fg:x="943" fg:w="1"/><text x="74.5605%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.3893%" y="581" width="0.0788%" height="15" fill="rgb(222,8,50)" fg:x="944" fg:w="1"/><text x="74.6393%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.3893%" y="565" width="0.0788%" height="15" fill="rgb(213,81,27)" fg:x="944" fg:w="1"/><text x="74.6393%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.3893%" y="549" width="0.0788%" height="15" fill="rgb(245,50,10)" fg:x="944" fg:w="1"/><text x="74.6393%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.3893%" y="533" width="0.0788%" height="15" fill="rgb(216,100,18)" fg:x="944" fg:w="1"/><text x="74.6393%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4681%" y="533" width="0.0788%" height="15" fill="rgb(236,147,54)" fg:x="945" fg:w="1"/><text x="74.7181%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4681%" y="517" width="0.0788%" height="15" fill="rgb(205,143,26)" fg:x="945" fg:w="1"/><text x="74.7181%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.5469%" y="437" width="0.0788%" height="15" fill="rgb(236,26,9)" fg:x="946" fg:w="1"/><text x="74.7969%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.5469%" y="421" width="0.0788%" height="15" fill="rgb(221,165,53)" fg:x="946" fg:w="1"/><text x="74.7969%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.5469%" y="405" width="0.0788%" height="15" fill="rgb(214,110,17)" fg:x="946" fg:w="1"/><text x="74.7969%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.5469%" y="389" width="0.0788%" height="15" fill="rgb(237,197,12)" fg:x="946" fg:w="1"/><text x="74.7969%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.5469%" y="373" width="0.0788%" height="15" fill="rgb(205,84,17)" fg:x="946" fg:w="1"/><text x="74.7969%" y="383.50"></text></g><g><title>engine::session::Session::flush (13 samples, 1.02%)</title><rect x="73.6801%" y="661" width="1.0244%" height="15" fill="rgb(237,18,45)" fg:x="935" fg:w="13"/><text x="73.9301%" y="671.50"></text></g><g><title>engine::session::state::State::close (13 samples, 1.02%)</title><rect x="73.6801%" y="645" width="1.0244%" height="15" fill="rgb(221,87,14)" fg:x="935" fg:w="13"/><text x="73.9301%" y="655.50"></text></g><g><title>engine::session::state::State::flush_entities (12 samples, 0.95%)</title><rect x="73.7589%" y="629" width="0.9456%" height="15" fill="rgb(238,186,15)" fg:x="936" fg:w="12"/><text x="74.0089%" y="639.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (12 samples, 0.95%)</title><rect x="73.7589%" y="613" width="0.9456%" height="15" fill="rgb(208,115,11)" fg:x="936" fg:w="12"/><text x="74.0089%" y="623.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (12 samples, 0.95%)</title><rect x="73.7589%" y="597" width="0.9456%" height="15" fill="rgb(254,175,0)" fg:x="936" fg:w="12"/><text x="74.0089%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="74.4681%" y="581" width="0.2364%" height="15" fill="rgb(227,24,42)" fg:x="945" fg:w="3"/><text x="74.7181%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="74.4681%" y="565" width="0.2364%" height="15" fill="rgb(223,211,37)" fg:x="945" fg:w="3"/><text x="74.7181%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="74.4681%" y="549" width="0.2364%" height="15" fill="rgb(235,49,27)" fg:x="945" fg:w="3"/><text x="74.7181%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="74.5469%" y="533" width="0.1576%" height="15" fill="rgb(254,97,51)" fg:x="946" fg:w="2"/><text x="74.7969%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="74.5469%" y="517" width="0.1576%" height="15" fill="rgb(249,51,40)" fg:x="946" fg:w="2"/><text x="74.7969%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="74.5469%" y="501" width="0.1576%" height="15" fill="rgb(210,128,45)" fg:x="946" fg:w="2"/><text x="74.7969%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="74.5469%" y="485" width="0.1576%" height="15" fill="rgb(224,137,50)" fg:x="946" fg:w="2"/><text x="74.7969%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="74.5469%" y="469" width="0.1576%" height="15" fill="rgb(242,15,9)" fg:x="946" fg:w="2"/><text x="74.7969%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="74.5469%" y="453" width="0.1576%" height="15" fill="rgb(233,187,41)" fg:x="946" fg:w="2"/><text x="74.7969%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.6257%" y="437" width="0.0788%" height="15" fill="rgb(227,2,29)" fg:x="947" fg:w="1"/><text x="74.8757%" y="447.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="74.7045%" y="629" width="0.0788%" height="15" fill="rgb(222,70,3)" fg:x="948" fg:w="1"/><text x="74.9545%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="74.7045%" y="613" width="0.0788%" height="15" fill="rgb(213,11,42)" fg:x="948" fg:w="1"/><text x="74.9545%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="74.7045%" y="597" width="0.0788%" height="15" fill="rgb(225,150,9)" fg:x="948" fg:w="1"/><text x="74.9545%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="74.7045%" y="581" width="0.0788%" height="15" fill="rgb(230,162,45)" fg:x="948" fg:w="1"/><text x="74.9545%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.7045%" y="565" width="0.0788%" height="15" fill="rgb(222,14,52)" fg:x="948" fg:w="1"/><text x="74.9545%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.7045%" y="549" width="0.0788%" height="15" fill="rgb(254,198,14)" fg:x="948" fg:w="1"/><text x="74.9545%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="74.7045%" y="645" width="0.1576%" height="15" fill="rgb(220,217,30)" fg:x="948" fg:w="2"/><text x="74.9545%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="74.7833%" y="629" width="0.0788%" height="15" fill="rgb(215,146,41)" fg:x="949" fg:w="1"/><text x="75.0333%" y="639.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="74.7833%" y="613" width="0.0788%" height="15" fill="rgb(217,27,36)" fg:x="949" fg:w="1"/><text x="75.0333%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.7833%" y="597" width="0.0788%" height="15" fill="rgb(219,218,39)" fg:x="949" fg:w="1"/><text x="75.0333%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.7833%" y="581" width="0.0788%" height="15" fill="rgb(219,4,42)" fg:x="949" fg:w="1"/><text x="75.0333%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="74.7833%" y="565" width="0.0788%" height="15" fill="rgb(249,119,36)" fg:x="949" fg:w="1"/><text x="75.0333%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.7833%" y="549" width="0.0788%" height="15" fill="rgb(209,23,33)" fg:x="949" fg:w="1"/><text x="75.0333%" y="559.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="74.7045%" y="661" width="0.2364%" height="15" fill="rgb(211,10,0)" fg:x="948" fg:w="3"/><text x="74.9545%" y="671.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="74.8621%" y="645" width="0.0788%" height="15" fill="rgb(208,99,37)" fg:x="950" fg:w="1"/><text x="75.1121%" y="655.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="74.8621%" y="629" width="0.0788%" height="15" fill="rgb(213,132,31)" fg:x="950" fg:w="1"/><text x="75.1121%" y="639.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="74.8621%" y="613" width="0.0788%" height="15" fill="rgb(243,129,40)" fg:x="950" fg:w="1"/><text x="75.1121%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="74.8621%" y="597" width="0.0788%" height="15" fill="rgb(210,66,33)" fg:x="950" fg:w="1"/><text x="75.1121%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="74.8621%" y="581" width="0.0788%" height="15" fill="rgb(209,189,4)" fg:x="950" fg:w="1"/><text x="75.1121%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.8621%" y="565" width="0.0788%" height="15" fill="rgb(214,107,37)" fg:x="950" fg:w="1"/><text x="75.1121%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="74.8621%" y="549" width="0.0788%" height="15" fill="rgb(245,88,54)" fg:x="950" fg:w="1"/><text x="75.1121%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.8621%" y="533" width="0.0788%" height="15" fill="rgb(205,146,20)" fg:x="950" fg:w="1"/><text x="75.1121%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.8621%" y="517" width="0.0788%" height="15" fill="rgb(220,161,25)" fg:x="950" fg:w="1"/><text x="75.1121%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.8621%" y="501" width="0.0788%" height="15" fill="rgb(215,152,15)" fg:x="950" fg:w="1"/><text x="75.1121%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.8621%" y="485" width="0.0788%" height="15" fill="rgb(233,192,44)" fg:x="950" fg:w="1"/><text x="75.1121%" y="495.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="74.9409%" y="661" width="0.0788%" height="15" fill="rgb(240,170,46)" fg:x="951" fg:w="1"/><text x="75.1909%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="74.9409%" y="645" width="0.0788%" height="15" fill="rgb(207,104,33)" fg:x="951" fg:w="1"/><text x="75.1909%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="74.9409%" y="629" width="0.0788%" height="15" fill="rgb(219,21,39)" fg:x="951" fg:w="1"/><text x="75.1909%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="74.9409%" y="613" width="0.0788%" height="15" fill="rgb(214,133,29)" fg:x="951" fg:w="1"/><text x="75.1909%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="74.9409%" y="597" width="0.0788%" height="15" fill="rgb(226,93,6)" fg:x="951" fg:w="1"/><text x="75.1909%" y="607.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="74.9409%" y="581" width="0.0788%" height="15" fill="rgb(252,222,34)" fg:x="951" fg:w="1"/><text x="75.1909%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="74.9409%" y="565" width="0.0788%" height="15" fill="rgb(252,92,48)" fg:x="951" fg:w="1"/><text x="75.1909%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.9409%" y="549" width="0.0788%" height="15" fill="rgb(245,223,24)" fg:x="951" fg:w="1"/><text x="75.1909%" y="559.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="75.0197%" y="661" width="0.0788%" height="15" fill="rgb(205,176,3)" fg:x="952" fg:w="1"/><text x="75.2697%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="75.0197%" y="645" width="0.0788%" height="15" fill="rgb(235,151,15)" fg:x="952" fg:w="1"/><text x="75.2697%" y="655.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="75.0197%" y="629" width="0.0788%" height="15" fill="rgb(237,209,11)" fg:x="952" fg:w="1"/><text x="75.2697%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="75.0197%" y="613" width="0.0788%" height="15" fill="rgb(243,227,24)" fg:x="952" fg:w="1"/><text x="75.2697%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="75.0197%" y="597" width="0.0788%" height="15" fill="rgb(239,193,16)" fg:x="952" fg:w="1"/><text x="75.2697%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.0197%" y="581" width="0.0788%" height="15" fill="rgb(231,27,9)" fg:x="952" fg:w="1"/><text x="75.2697%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.0197%" y="565" width="0.0788%" height="15" fill="rgb(219,169,10)" fg:x="952" fg:w="1"/><text x="75.2697%" y="575.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="75.0985%" y="645" width="0.0788%" height="15" fill="rgb(244,229,43)" fg:x="953" fg:w="1"/><text x="75.3485%" y="655.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="75.0985%" y="629" width="0.0788%" height="15" fill="rgb(254,38,20)" fg:x="953" fg:w="1"/><text x="75.3485%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.0985%" y="613" width="0.0788%" height="15" fill="rgb(250,47,30)" fg:x="953" fg:w="1"/><text x="75.3485%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.0985%" y="597" width="0.0788%" height="15" fill="rgb(224,124,36)" fg:x="953" fg:w="1"/><text x="75.3485%" y="607.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="75.1773%" y="597" width="0.0788%" height="15" fill="rgb(246,68,51)" fg:x="954" fg:w="1"/><text x="75.4273%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="75.1773%" y="581" width="0.0788%" height="15" fill="rgb(253,43,49)" fg:x="954" fg:w="1"/><text x="75.4273%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="75.1773%" y="565" width="0.0788%" height="15" fill="rgb(219,54,36)" fg:x="954" fg:w="1"/><text x="75.4273%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.1773%" y="549" width="0.0788%" height="15" fill="rgb(227,133,34)" fg:x="954" fg:w="1"/><text x="75.4273%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="75.2561%" y="565" width="0.0788%" height="15" fill="rgb(247,227,15)" fg:x="955" fg:w="1"/><text x="75.5061%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="75.2561%" y="549" width="0.0788%" height="15" fill="rgb(229,96,14)" fg:x="955" fg:w="1"/><text x="75.5061%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="75.2561%" y="533" width="0.0788%" height="15" fill="rgb(220,79,17)" fg:x="955" fg:w="1"/><text x="75.5061%" y="543.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="75.2561%" y="517" width="0.0788%" height="15" fill="rgb(205,131,53)" fg:x="955" fg:w="1"/><text x="75.5061%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="75.2561%" y="501" width="0.0788%" height="15" fill="rgb(209,50,29)" fg:x="955" fg:w="1"/><text x="75.5061%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="75.2561%" y="485" width="0.0788%" height="15" fill="rgb(245,86,46)" fg:x="955" fg:w="1"/><text x="75.5061%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="75.2561%" y="469" width="0.0788%" height="15" fill="rgb(235,66,46)" fg:x="955" fg:w="1"/><text x="75.5061%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="75.2561%" y="453" width="0.0788%" height="15" fill="rgb(232,148,31)" fg:x="955" fg:w="1"/><text x="75.5061%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="75.2561%" y="437" width="0.0788%" height="15" fill="rgb(217,149,8)" fg:x="955" fg:w="1"/><text x="75.5061%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="75.2561%" y="421" width="0.0788%" height="15" fill="rgb(209,183,11)" fg:x="955" fg:w="1"/><text x="75.5061%" y="431.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.2561%" y="405" width="0.0788%" height="15" fill="rgb(208,55,20)" fg:x="955" fg:w="1"/><text x="75.5061%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.2561%" y="389" width="0.0788%" height="15" fill="rgb(218,39,14)" fg:x="955" fg:w="1"/><text x="75.5061%" y="399.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="75.2561%" y="373" width="0.0788%" height="15" fill="rgb(216,169,33)" fg:x="955" fg:w="1"/><text x="75.5061%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="75.2561%" y="357" width="0.0788%" height="15" fill="rgb(233,80,24)" fg:x="955" fg:w="1"/><text x="75.5061%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="75.2561%" y="341" width="0.0788%" height="15" fill="rgb(213,179,31)" fg:x="955" fg:w="1"/><text x="75.5061%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="75.2561%" y="325" width="0.0788%" height="15" fill="rgb(209,19,5)" fg:x="955" fg:w="1"/><text x="75.5061%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="75.2561%" y="309" width="0.0788%" height="15" fill="rgb(219,18,35)" fg:x="955" fg:w="1"/><text x="75.5061%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="75.2561%" y="293" width="0.0788%" height="15" fill="rgb(209,169,16)" fg:x="955" fg:w="1"/><text x="75.5061%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.2561%" y="277" width="0.0788%" height="15" fill="rgb(245,90,51)" fg:x="955" fg:w="1"/><text x="75.5061%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="75.2561%" y="261" width="0.0788%" height="15" fill="rgb(220,99,45)" fg:x="955" fg:w="1"/><text x="75.5061%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.2561%" y="245" width="0.0788%" height="15" fill="rgb(249,89,25)" fg:x="955" fg:w="1"/><text x="75.5061%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="75.2561%" y="229" width="0.0788%" height="15" fill="rgb(239,193,0)" fg:x="955" fg:w="1"/><text x="75.5061%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="75.2561%" y="213" width="0.0788%" height="15" fill="rgb(231,126,1)" fg:x="955" fg:w="1"/><text x="75.5061%" y="223.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="75.2561%" y="197" width="0.0788%" height="15" fill="rgb(243,166,3)" fg:x="955" fg:w="1"/><text x="75.5061%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.2561%" y="181" width="0.0788%" height="15" fill="rgb(223,22,34)" fg:x="955" fg:w="1"/><text x="75.5061%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3349%" y="517" width="0.0788%" height="15" fill="rgb(251,52,51)" fg:x="956" fg:w="1"/><text x="75.5849%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3349%" y="501" width="0.0788%" height="15" fill="rgb(221,165,28)" fg:x="956" fg:w="1"/><text x="75.5849%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3349%" y="485" width="0.0788%" height="15" fill="rgb(218,121,47)" fg:x="956" fg:w="1"/><text x="75.5849%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.3349%" y="469" width="0.0788%" height="15" fill="rgb(209,120,9)" fg:x="956" fg:w="1"/><text x="75.5849%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.3349%" y="453" width="0.0788%" height="15" fill="rgb(236,68,12)" fg:x="956" fg:w="1"/><text x="75.5849%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.3349%" y="437" width="0.0788%" height="15" fill="rgb(225,194,26)" fg:x="956" fg:w="1"/><text x="75.5849%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.3349%" y="421" width="0.0788%" height="15" fill="rgb(231,84,39)" fg:x="956" fg:w="1"/><text x="75.5849%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.3349%" y="405" width="0.0788%" height="15" fill="rgb(210,11,45)" fg:x="956" fg:w="1"/><text x="75.5849%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.3349%" y="389" width="0.0788%" height="15" fill="rgb(224,54,52)" fg:x="956" fg:w="1"/><text x="75.5849%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.3349%" y="373" width="0.0788%" height="15" fill="rgb(238,102,14)" fg:x="956" fg:w="1"/><text x="75.5849%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.3349%" y="357" width="0.0788%" height="15" fill="rgb(243,160,52)" fg:x="956" fg:w="1"/><text x="75.5849%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.3349%" y="341" width="0.0788%" height="15" fill="rgb(216,114,19)" fg:x="956" fg:w="1"/><text x="75.5849%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.3349%" y="325" width="0.0788%" height="15" fill="rgb(244,166,37)" fg:x="956" fg:w="1"/><text x="75.5849%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.3349%" y="309" width="0.0788%" height="15" fill="rgb(246,29,44)" fg:x="956" fg:w="1"/><text x="75.5849%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.3349%" y="293" width="0.0788%" height="15" fill="rgb(215,56,53)" fg:x="956" fg:w="1"/><text x="75.5849%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="75.3349%" y="565" width="0.1576%" height="15" fill="rgb(217,60,2)" fg:x="956" fg:w="2"/><text x="75.5849%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="75.3349%" y="549" width="0.1576%" height="15" fill="rgb(207,26,24)" fg:x="956" fg:w="2"/><text x="75.5849%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="75.3349%" y="533" width="0.1576%" height="15" fill="rgb(252,210,15)" fg:x="956" fg:w="2"/><text x="75.5849%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.4137%" y="517" width="0.0788%" height="15" fill="rgb(253,209,26)" fg:x="957" fg:w="1"/><text x="75.6637%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.4137%" y="501" width="0.0788%" height="15" fill="rgb(238,170,14)" fg:x="957" fg:w="1"/><text x="75.6637%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.4137%" y="485" width="0.0788%" height="15" fill="rgb(216,178,15)" fg:x="957" fg:w="1"/><text x="75.6637%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.4137%" y="469" width="0.0788%" height="15" fill="rgb(250,197,2)" fg:x="957" fg:w="1"/><text x="75.6637%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.4137%" y="453" width="0.0788%" height="15" fill="rgb(212,70,42)" fg:x="957" fg:w="1"/><text x="75.6637%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.4137%" y="437" width="0.0788%" height="15" fill="rgb(227,213,9)" fg:x="957" fg:w="1"/><text x="75.6637%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.4137%" y="421" width="0.0788%" height="15" fill="rgb(245,99,25)" fg:x="957" fg:w="1"/><text x="75.6637%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.4137%" y="405" width="0.0788%" height="15" fill="rgb(250,82,29)" fg:x="957" fg:w="1"/><text x="75.6637%" y="415.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="75.4925%" y="565" width="0.0788%" height="15" fill="rgb(241,226,54)" fg:x="958" fg:w="1"/><text x="75.7425%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="75.4925%" y="549" width="0.0788%" height="15" fill="rgb(221,99,41)" fg:x="958" fg:w="1"/><text x="75.7425%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.4925%" y="533" width="0.0788%" height="15" fill="rgb(213,90,21)" fg:x="958" fg:w="1"/><text x="75.7425%" y="543.50"></text></g><g><title>core::iter::adapters::try_process (6 samples, 0.47%)</title><rect x="75.1773%" y="645" width="0.4728%" height="15" fill="rgb(205,208,24)" fg:x="954" fg:w="6"/><text x="75.4273%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.47%)</title><rect x="75.1773%" y="629" width="0.4728%" height="15" fill="rgb(246,31,12)" fg:x="954" fg:w="6"/><text x="75.4273%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (6 samples, 0.47%)</title><rect x="75.1773%" y="613" width="0.4728%" height="15" fill="rgb(213,154,6)" fg:x="954" fg:w="6"/><text x="75.4273%" y="623.50"></text></g><g><title>plugins_core::build::Build::leads_to (5 samples, 0.39%)</title><rect x="75.2561%" y="597" width="0.3940%" height="15" fill="rgb(222,163,29)" fg:x="955" fg:w="5"/><text x="75.5061%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.39%)</title><rect x="75.2561%" y="581" width="0.3940%" height="15" fill="rgb(227,201,8)" fg:x="955" fg:w="5"/><text x="75.5061%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="75.5713%" y="565" width="0.0788%" height="15" fill="rgb(233,9,32)" fg:x="959" fg:w="1"/><text x="75.8213%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="75.5713%" y="549" width="0.0788%" height="15" fill="rgb(217,54,24)" fg:x="959" fg:w="1"/><text x="75.8213%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="75.5713%" y="533" width="0.0788%" height="15" fill="rgb(235,192,0)" fg:x="959" fg:w="1"/><text x="75.8213%" y="543.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="75.5713%" y="517" width="0.0788%" height="15" fill="rgb(235,45,9)" fg:x="959" fg:w="1"/><text x="75.8213%" y="527.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="75.5713%" y="501" width="0.0788%" height="15" fill="rgb(246,42,40)" fg:x="959" fg:w="1"/><text x="75.8213%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="75.5713%" y="485" width="0.0788%" height="15" fill="rgb(248,111,24)" fg:x="959" fg:w="1"/><text x="75.8213%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.5713%" y="469" width="0.0788%" height="15" fill="rgb(249,65,22)" fg:x="959" fg:w="1"/><text x="75.8213%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="75.5713%" y="453" width="0.0788%" height="15" fill="rgb(238,111,51)" fg:x="959" fg:w="1"/><text x="75.8213%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.5713%" y="437" width="0.0788%" height="15" fill="rgb(250,118,22)" fg:x="959" fg:w="1"/><text x="75.8213%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="75.5713%" y="421" width="0.0788%" height="15" fill="rgb(234,84,26)" fg:x="959" fg:w="1"/><text x="75.8213%" y="431.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="75.5713%" y="405" width="0.0788%" height="15" fill="rgb(243,172,12)" fg:x="959" fg:w="1"/><text x="75.8213%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.5713%" y="389" width="0.0788%" height="15" fill="rgb(236,150,49)" fg:x="959" fg:w="1"/><text x="75.8213%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.6501%" y="581" width="0.0788%" height="15" fill="rgb(225,197,26)" fg:x="960" fg:w="1"/><text x="75.9001%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.7289%" y="517" width="0.0788%" height="15" fill="rgb(214,17,42)" fg:x="961" fg:w="1"/><text x="75.9789%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.7289%" y="501" width="0.0788%" height="15" fill="rgb(224,165,40)" fg:x="961" fg:w="1"/><text x="75.9789%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.7289%" y="485" width="0.0788%" height="15" fill="rgb(246,100,4)" fg:x="961" fg:w="1"/><text x="75.9789%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.7289%" y="469" width="0.0788%" height="15" fill="rgb(222,103,0)" fg:x="961" fg:w="1"/><text x="75.9789%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="75.7289%" y="549" width="0.2364%" height="15" fill="rgb(227,189,26)" fg:x="961" fg:w="3"/><text x="75.9789%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="75.7289%" y="533" width="0.2364%" height="15" fill="rgb(214,202,17)" fg:x="961" fg:w="3"/><text x="75.9789%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="75.8077%" y="517" width="0.1576%" height="15" fill="rgb(229,111,3)" fg:x="962" fg:w="2"/><text x="76.0577%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.8865%" y="501" width="0.0788%" height="15" fill="rgb(229,172,15)" fg:x="963" fg:w="1"/><text x="76.1365%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.8865%" y="485" width="0.0788%" height="15" fill="rgb(230,224,35)" fg:x="963" fg:w="1"/><text x="76.1365%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.8865%" y="469" width="0.0788%" height="15" fill="rgb(251,141,6)" fg:x="963" fg:w="1"/><text x="76.1365%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.9653%" y="517" width="0.0788%" height="15" fill="rgb(225,208,6)" fg:x="964" fg:w="1"/><text x="76.2153%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.9653%" y="549" width="0.1576%" height="15" fill="rgb(246,181,16)" fg:x="964" fg:w="2"/><text x="76.2153%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="75.9653%" y="533" width="0.1576%" height="15" fill="rgb(227,129,36)" fg:x="964" fg:w="2"/><text x="76.2153%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.0441%" y="517" width="0.0788%" height="15" fill="rgb(248,117,24)" fg:x="965" fg:w="1"/><text x="76.2941%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.0441%" y="501" width="0.0788%" height="15" fill="rgb(214,185,35)" fg:x="965" fg:w="1"/><text x="76.2941%" y="511.50"></text></g><g><title>engine::session::Session::flush (7 samples, 0.55%)</title><rect x="75.6501%" y="645" width="0.5516%" height="15" fill="rgb(236,150,34)" fg:x="960" fg:w="7"/><text x="75.9001%" y="655.50"></text></g><g><title>engine::session::Session::save_changes (7 samples, 0.55%)</title><rect x="75.6501%" y="629" width="0.5516%" height="15" fill="rgb(243,228,27)" fg:x="960" fg:w="7"/><text x="75.9001%" y="639.50"></text></g><g><title>engine::session::state::State::close (7 samples, 0.55%)</title><rect x="75.6501%" y="613" width="0.5516%" height="15" fill="rgb(245,77,44)" fg:x="960" fg:w="7"/><text x="75.9001%" y="623.50"></text></g><g><title>engine::session::state::State::flush_entities (7 samples, 0.55%)</title><rect x="75.6501%" y="597" width="0.5516%" height="15" fill="rgb(235,214,42)" fg:x="960" fg:w="7"/><text x="75.9001%" y="607.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (6 samples, 0.47%)</title><rect x="75.7289%" y="581" width="0.4728%" height="15" fill="rgb(221,74,3)" fg:x="961" fg:w="6"/><text x="75.9789%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (6 samples, 0.47%)</title><rect x="75.7289%" y="565" width="0.4728%" height="15" fill="rgb(206,121,29)" fg:x="961" fg:w="6"/><text x="75.9789%" y="575.50"></text></g><g><title>kernel::model::any_entity_changes (1 samples, 0.08%)</title><rect x="76.1229%" y="549" width="0.0788%" height="15" fill="rgb(249,131,53)" fg:x="966" fg:w="1"/><text x="76.3729%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.1229%" y="533" width="0.0788%" height="15" fill="rgb(236,170,29)" fg:x="966" fg:w="1"/><text x="76.3729%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.1229%" y="517" width="0.0788%" height="15" fill="rgb(247,96,15)" fg:x="966" fg:w="1"/><text x="76.3729%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.1229%" y="501" width="0.0788%" height="15" fill="rgb(211,210,7)" fg:x="966" fg:w="1"/><text x="76.3729%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="76.1229%" y="485" width="0.0788%" height="15" fill="rgb(240,88,50)" fg:x="966" fg:w="1"/><text x="76.3729%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.1229%" y="469" width="0.0788%" height="15" fill="rgb(209,229,26)" fg:x="966" fg:w="1"/><text x="76.3729%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.1229%" y="453" width="0.0788%" height="15" fill="rgb(210,68,23)" fg:x="966" fg:w="1"/><text x="76.3729%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1229%" y="437" width="0.0788%" height="15" fill="rgb(229,180,13)" fg:x="966" fg:w="1"/><text x="76.3729%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;plugins_core::carrying::model::Location&gt;&gt; (1 samples, 0.08%)</title><rect x="76.2017%" y="613" width="0.0788%" height="15" fill="rgb(236,53,44)" fg:x="967" fg:w="1"/><text x="76.4517%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="76.2017%" y="597" width="0.0788%" height="15" fill="rgb(244,214,29)" fg:x="967" fg:w="1"/><text x="76.4517%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.2017%" y="581" width="0.0788%" height="15" fill="rgb(220,75,29)" fg:x="967" fg:w="1"/><text x="76.4517%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.2805%" y="501" width="0.0788%" height="15" fill="rgb(214,183,37)" fg:x="968" fg:w="1"/><text x="76.5305%" y="511.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="76.2805%" y="613" width="0.1576%" height="15" fill="rgb(239,117,29)" fg:x="968" fg:w="2"/><text x="76.5305%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="76.2805%" y="597" width="0.1576%" height="15" fill="rgb(237,171,35)" fg:x="968" fg:w="2"/><text x="76.5305%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="76.2805%" y="581" width="0.1576%" height="15" fill="rgb(229,178,53)" fg:x="968" fg:w="2"/><text x="76.5305%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="76.2805%" y="565" width="0.1576%" height="15" fill="rgb(210,102,19)" fg:x="968" fg:w="2"/><text x="76.5305%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="76.2805%" y="549" width="0.1576%" height="15" fill="rgb(235,127,22)" fg:x="968" fg:w="2"/><text x="76.5305%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.2805%" y="533" width="0.1576%" height="15" fill="rgb(244,31,31)" fg:x="968" fg:w="2"/><text x="76.5305%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="76.2805%" y="517" width="0.1576%" height="15" fill="rgb(231,43,21)" fg:x="968" fg:w="2"/><text x="76.5305%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.3593%" y="501" width="0.0788%" height="15" fill="rgb(217,131,35)" fg:x="969" fg:w="1"/><text x="76.6093%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.3593%" y="485" width="0.0788%" height="15" fill="rgb(221,149,4)" fg:x="969" fg:w="1"/><text x="76.6093%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.3593%" y="469" width="0.0788%" height="15" fill="rgb(232,170,28)" fg:x="969" fg:w="1"/><text x="76.6093%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.3593%" y="453" width="0.0788%" height="15" fill="rgb(238,56,10)" fg:x="969" fg:w="1"/><text x="76.6093%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.3593%" y="437" width="0.0788%" height="15" fill="rgb(235,196,14)" fg:x="969" fg:w="1"/><text x="76.6093%" y="447.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="76.2017%" y="645" width="0.3152%" height="15" fill="rgb(216,45,48)" fg:x="967" fg:w="4"/><text x="76.4517%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="76.2017%" y="629" width="0.3152%" height="15" fill="rgb(238,213,17)" fg:x="967" fg:w="4"/><text x="76.4517%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="76.4381%" y="613" width="0.0788%" height="15" fill="rgb(212,13,2)" fg:x="970" fg:w="1"/><text x="76.6881%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="76.4381%" y="597" width="0.0788%" height="15" fill="rgb(240,114,20)" fg:x="970" fg:w="1"/><text x="76.6881%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.4381%" y="581" width="0.0788%" height="15" fill="rgb(228,41,40)" fg:x="970" fg:w="1"/><text x="76.6881%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="76.4381%" y="565" width="0.0788%" height="15" fill="rgb(244,132,35)" fg:x="970" fg:w="1"/><text x="76.6881%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.4381%" y="549" width="0.0788%" height="15" fill="rgb(253,189,4)" fg:x="970" fg:w="1"/><text x="76.6881%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.4381%" y="533" width="0.0788%" height="15" fill="rgb(224,37,19)" fg:x="970" fg:w="1"/><text x="76.6881%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.4381%" y="517" width="0.0788%" height="15" fill="rgb(235,223,18)" fg:x="970" fg:w="1"/><text x="76.6881%" y="527.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="76.5169%" y="645" width="0.0788%" height="15" fill="rgb(235,163,25)" fg:x="971" fg:w="1"/><text x="76.7669%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="76.5169%" y="629" width="0.0788%" height="15" fill="rgb(217,145,28)" fg:x="971" fg:w="1"/><text x="76.7669%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="76.5169%" y="613" width="0.0788%" height="15" fill="rgb(223,223,32)" fg:x="971" fg:w="1"/><text x="76.7669%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.5169%" y="597" width="0.0788%" height="15" fill="rgb(227,189,39)" fg:x="971" fg:w="1"/><text x="76.7669%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.5169%" y="581" width="0.0788%" height="15" fill="rgb(248,10,22)" fg:x="971" fg:w="1"/><text x="76.7669%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.5169%" y="565" width="0.0788%" height="15" fill="rgb(248,46,39)" fg:x="971" fg:w="1"/><text x="76.7669%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.5169%" y="549" width="0.0788%" height="15" fill="rgb(248,113,48)" fg:x="971" fg:w="1"/><text x="76.7669%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.5169%" y="533" width="0.0788%" height="15" fill="rgb(245,16,25)" fg:x="971" fg:w="1"/><text x="76.7669%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.5169%" y="517" width="0.0788%" height="15" fill="rgb(249,152,16)" fg:x="971" fg:w="1"/><text x="76.7669%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.5169%" y="501" width="0.0788%" height="15" fill="rgb(250,16,1)" fg:x="971" fg:w="1"/><text x="76.7669%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.5169%" y="485" width="0.0788%" height="15" fill="rgb(249,138,3)" fg:x="971" fg:w="1"/><text x="76.7669%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.5169%" y="469" width="0.0788%" height="15" fill="rgb(227,71,41)" fg:x="971" fg:w="1"/><text x="76.7669%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.5169%" y="453" width="0.0788%" height="15" fill="rgb(209,184,23)" fg:x="971" fg:w="1"/><text x="76.7669%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.5169%" y="437" width="0.0788%" height="15" fill="rgb(223,215,31)" fg:x="971" fg:w="1"/><text x="76.7669%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.5169%" y="421" width="0.0788%" height="15" fill="rgb(210,146,28)" fg:x="971" fg:w="1"/><text x="76.7669%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.5169%" y="405" width="0.0788%" height="15" fill="rgb(209,183,41)" fg:x="971" fg:w="1"/><text x="76.7669%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.5169%" y="389" width="0.0788%" height="15" fill="rgb(209,224,45)" fg:x="971" fg:w="1"/><text x="76.7669%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.5169%" y="373" width="0.0788%" height="15" fill="rgb(224,209,51)" fg:x="971" fg:w="1"/><text x="76.7669%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.5169%" y="357" width="0.0788%" height="15" fill="rgb(223,17,39)" fg:x="971" fg:w="1"/><text x="76.7669%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.5169%" y="341" width="0.0788%" height="15" fill="rgb(234,204,37)" fg:x="971" fg:w="1"/><text x="76.7669%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.5169%" y="325" width="0.0788%" height="15" fill="rgb(236,120,5)" fg:x="971" fg:w="1"/><text x="76.7669%" y="335.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="76.5957%" y="613" width="0.0788%" height="15" fill="rgb(248,97,27)" fg:x="972" fg:w="1"/><text x="76.8457%" y="623.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="76.5957%" y="597" width="0.0788%" height="15" fill="rgb(240,66,17)" fg:x="972" fg:w="1"/><text x="76.8457%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="76.5957%" y="629" width="0.1576%" height="15" fill="rgb(210,79,3)" fg:x="972" fg:w="2"/><text x="76.8457%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="76.6745%" y="613" width="0.0788%" height="15" fill="rgb(214,176,27)" fg:x="973" fg:w="1"/><text x="76.9245%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="76.6745%" y="597" width="0.0788%" height="15" fill="rgb(235,185,3)" fg:x="973" fg:w="1"/><text x="76.9245%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="76.6745%" y="581" width="0.0788%" height="15" fill="rgb(227,24,12)" fg:x="973" fg:w="1"/><text x="76.9245%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="76.6745%" y="565" width="0.0788%" height="15" fill="rgb(252,169,48)" fg:x="973" fg:w="1"/><text x="76.9245%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="76.6745%" y="549" width="0.0788%" height="15" fill="rgb(212,65,1)" fg:x="973" fg:w="1"/><text x="76.9245%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6745%" y="533" width="0.0788%" height="15" fill="rgb(242,39,24)" fg:x="973" fg:w="1"/><text x="76.9245%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.6745%" y="517" width="0.0788%" height="15" fill="rgb(249,32,23)" fg:x="973" fg:w="1"/><text x="76.9245%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6745%" y="501" width="0.0788%" height="15" fill="rgb(251,195,23)" fg:x="973" fg:w="1"/><text x="76.9245%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.6745%" y="485" width="0.0788%" height="15" fill="rgb(236,174,8)" fg:x="973" fg:w="1"/><text x="76.9245%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.6745%" y="469" width="0.0788%" height="15" fill="rgb(220,197,8)" fg:x="973" fg:w="1"/><text x="76.9245%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6745%" y="453" width="0.0788%" height="15" fill="rgb(240,108,37)" fg:x="973" fg:w="1"/><text x="76.9245%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.6745%" y="437" width="0.0788%" height="15" fill="rgb(232,176,24)" fg:x="973" fg:w="1"/><text x="76.9245%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.6745%" y="421" width="0.0788%" height="15" fill="rgb(243,35,29)" fg:x="973" fg:w="1"/><text x="76.9245%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.6745%" y="405" width="0.0788%" height="15" fill="rgb(210,37,18)" fg:x="973" fg:w="1"/><text x="76.9245%" y="415.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="76.7533%" y="613" width="0.0788%" height="15" fill="rgb(224,184,40)" fg:x="974" fg:w="1"/><text x="77.0033%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.7533%" y="597" width="0.0788%" height="15" fill="rgb(236,39,29)" fg:x="974" fg:w="1"/><text x="77.0033%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (23 samples, 1.81%)</title><rect x="75.0985%" y="661" width="1.8125%" height="15" fill="rgb(232,48,39)" fg:x="953" fg:w="23"/><text x="75.3485%" y="671.50">p..</text></g><g><title>plugins_core::build::Build::occupying (4 samples, 0.32%)</title><rect x="76.5957%" y="645" width="0.3152%" height="15" fill="rgb(236,34,42)" fg:x="972" fg:w="4"/><text x="76.8457%" y="655.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="76.7533%" y="629" width="0.1576%" height="15" fill="rgb(243,106,37)" fg:x="974" fg:w="2"/><text x="77.0033%" y="639.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="76.8322%" y="613" width="0.0788%" height="15" fill="rgb(218,96,6)" fg:x="975" fg:w="1"/><text x="77.0822%" y="623.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="76.8322%" y="597" width="0.0788%" height="15" fill="rgb(235,130,12)" fg:x="975" fg:w="1"/><text x="77.0822%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="76.8322%" y="581" width="0.0788%" height="15" fill="rgb(231,95,0)" fg:x="975" fg:w="1"/><text x="77.0822%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="76.8322%" y="565" width="0.0788%" height="15" fill="rgb(228,12,23)" fg:x="975" fg:w="1"/><text x="77.0822%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.8322%" y="549" width="0.0788%" height="15" fill="rgb(216,12,1)" fg:x="975" fg:w="1"/><text x="77.0822%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.8322%" y="533" width="0.0788%" height="15" fill="rgb(219,59,3)" fg:x="975" fg:w="1"/><text x="77.0822%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.8322%" y="517" width="0.0788%" height="15" fill="rgb(215,208,46)" fg:x="975" fg:w="1"/><text x="77.0822%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.8322%" y="501" width="0.0788%" height="15" fill="rgb(254,224,29)" fg:x="975" fg:w="1"/><text x="77.0822%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.8322%" y="485" width="0.0788%" height="15" fill="rgb(232,14,29)" fg:x="975" fg:w="1"/><text x="77.0822%" y="495.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="76.9110%" y="661" width="0.0788%" height="15" fill="rgb(208,45,52)" fg:x="976" fg:w="1"/><text x="77.1610%" y="671.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="76.9110%" y="645" width="0.0788%" height="15" fill="rgb(234,191,28)" fg:x="976" fg:w="1"/><text x="77.1610%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="76.9110%" y="629" width="0.0788%" height="15" fill="rgb(244,67,43)" fg:x="976" fg:w="1"/><text x="77.1610%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="76.9110%" y="613" width="0.0788%" height="15" fill="rgb(236,189,24)" fg:x="976" fg:w="1"/><text x="77.1610%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="76.9110%" y="597" width="0.0788%" height="15" fill="rgb(239,214,33)" fg:x="976" fg:w="1"/><text x="77.1610%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="76.9110%" y="581" width="0.0788%" height="15" fill="rgb(226,176,41)" fg:x="976" fg:w="1"/><text x="77.1610%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.9110%" y="565" width="0.0788%" height="15" fill="rgb(248,47,8)" fg:x="976" fg:w="1"/><text x="77.1610%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.9110%" y="549" width="0.0788%" height="15" fill="rgb(218,81,44)" fg:x="976" fg:w="1"/><text x="77.1610%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.9110%" y="533" width="0.0788%" height="15" fill="rgb(213,98,6)" fg:x="976" fg:w="1"/><text x="77.1610%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.9110%" y="517" width="0.0788%" height="15" fill="rgb(222,85,22)" fg:x="976" fg:w="1"/><text x="77.1610%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.9110%" y="501" width="0.0788%" height="15" fill="rgb(239,46,39)" fg:x="976" fg:w="1"/><text x="77.1610%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.9110%" y="485" width="0.0788%" height="15" fill="rgb(237,12,29)" fg:x="976" fg:w="1"/><text x="77.1610%" y="495.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (43 samples, 3.39%)</title><rect x="73.6801%" y="677" width="3.3885%" height="15" fill="rgb(214,77,8)" fg:x="935" fg:w="43"/><text x="73.9301%" y="687.50">&lt;te..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (1 samples, 0.08%)</title><rect x="76.9898%" y="661" width="0.0788%" height="15" fill="rgb(217,168,37)" fg:x="977" fg:w="1"/><text x="77.2398%" y="671.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="76.9898%" y="645" width="0.0788%" height="15" fill="rgb(221,217,23)" fg:x="977" fg:w="1"/><text x="77.2398%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="76.9898%" y="629" width="0.0788%" height="15" fill="rgb(243,229,36)" fg:x="977" fg:w="1"/><text x="77.2398%" y="639.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="76.9898%" y="613" width="0.0788%" height="15" fill="rgb(251,163,40)" fg:x="977" fg:w="1"/><text x="77.2398%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="77.0686%" y="661" width="0.0788%" height="15" fill="rgb(237,222,12)" fg:x="978" fg:w="1"/><text x="77.3186%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.0686%" y="645" width="0.0788%" height="15" fill="rgb(248,132,6)" fg:x="978" fg:w="1"/><text x="77.3186%" y="655.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="77.2262%" y="597" width="0.0788%" height="15" fill="rgb(227,167,50)" fg:x="980" fg:w="1"/><text x="77.4762%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.2262%" y="581" width="0.0788%" height="15" fill="rgb(242,84,37)" fg:x="980" fg:w="1"/><text x="77.4762%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.2262%" y="565" width="0.0788%" height="15" fill="rgb(212,4,50)" fg:x="980" fg:w="1"/><text x="77.4762%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.2262%" y="549" width="0.0788%" height="15" fill="rgb(230,228,32)" fg:x="980" fg:w="1"/><text x="77.4762%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.2262%" y="533" width="0.0788%" height="15" fill="rgb(248,217,23)" fg:x="980" fg:w="1"/><text x="77.4762%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.2262%" y="517" width="0.0788%" height="15" fill="rgb(238,197,32)" fg:x="980" fg:w="1"/><text x="77.4762%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.3050%" y="549" width="0.0788%" height="15" fill="rgb(236,106,1)" fg:x="981" fg:w="1"/><text x="77.5550%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.3050%" y="597" width="0.1576%" height="15" fill="rgb(219,228,13)" fg:x="981" fg:w="2"/><text x="77.5550%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="77.3050%" y="581" width="0.1576%" height="15" fill="rgb(238,30,35)" fg:x="981" fg:w="2"/><text x="77.5550%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.3050%" y="565" width="0.1576%" height="15" fill="rgb(236,70,23)" fg:x="981" fg:w="2"/><text x="77.5550%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.3838%" y="549" width="0.0788%" height="15" fill="rgb(249,104,48)" fg:x="982" fg:w="1"/><text x="77.6338%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.3838%" y="533" width="0.0788%" height="15" fill="rgb(254,117,50)" fg:x="982" fg:w="1"/><text x="77.6338%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.3838%" y="517" width="0.0788%" height="15" fill="rgb(223,152,4)" fg:x="982" fg:w="1"/><text x="77.6338%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.3838%" y="501" width="0.0788%" height="15" fill="rgb(245,6,2)" fg:x="982" fg:w="1"/><text x="77.6338%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.3838%" y="485" width="0.0788%" height="15" fill="rgb(249,150,24)" fg:x="982" fg:w="1"/><text x="77.6338%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.3838%" y="469" width="0.0788%" height="15" fill="rgb(228,185,42)" fg:x="982" fg:w="1"/><text x="77.6338%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.3838%" y="453" width="0.0788%" height="15" fill="rgb(226,39,33)" fg:x="982" fg:w="1"/><text x="77.6338%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="77.4626%" y="501" width="0.0788%" height="15" fill="rgb(221,166,19)" fg:x="983" fg:w="1"/><text x="77.7126%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="77.4626%" y="485" width="0.0788%" height="15" fill="rgb(209,109,2)" fg:x="983" fg:w="1"/><text x="77.7126%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="77.4626%" y="517" width="0.1576%" height="15" fill="rgb(252,216,26)" fg:x="983" fg:w="2"/><text x="77.7126%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="77.5414%" y="501" width="0.0788%" height="15" fill="rgb(227,173,36)" fg:x="984" fg:w="1"/><text x="77.7914%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="77.5414%" y="485" width="0.0788%" height="15" fill="rgb(209,90,7)" fg:x="984" fg:w="1"/><text x="77.7914%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="77.5414%" y="469" width="0.0788%" height="15" fill="rgb(250,194,11)" fg:x="984" fg:w="1"/><text x="77.7914%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.24%)</title><rect x="77.4626%" y="581" width="0.2364%" height="15" fill="rgb(220,72,50)" fg:x="983" fg:w="3"/><text x="77.7126%" y="591.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="77.4626%" y="565" width="0.2364%" height="15" fill="rgb(222,106,48)" fg:x="983" fg:w="3"/><text x="77.7126%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="77.4626%" y="549" width="0.2364%" height="15" fill="rgb(216,220,45)" fg:x="983" fg:w="3"/><text x="77.7126%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="77.4626%" y="533" width="0.2364%" height="15" fill="rgb(234,112,18)" fg:x="983" fg:w="3"/><text x="77.7126%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="77.6202%" y="517" width="0.0788%" height="15" fill="rgb(206,179,9)" fg:x="985" fg:w="1"/><text x="77.8702%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.6990%" y="517" width="0.0788%" height="15" fill="rgb(215,115,40)" fg:x="986" fg:w="1"/><text x="77.9490%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.6990%" y="501" width="0.0788%" height="15" fill="rgb(222,69,34)" fg:x="986" fg:w="1"/><text x="77.9490%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.6990%" y="485" width="0.0788%" height="15" fill="rgb(209,161,10)" fg:x="986" fg:w="1"/><text x="77.9490%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.6990%" y="469" width="0.0788%" height="15" fill="rgb(217,6,38)" fg:x="986" fg:w="1"/><text x="77.9490%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.6990%" y="453" width="0.0788%" height="15" fill="rgb(229,229,48)" fg:x="986" fg:w="1"/><text x="77.9490%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.6990%" y="437" width="0.0788%" height="15" fill="rgb(225,21,28)" fg:x="986" fg:w="1"/><text x="77.9490%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.6990%" y="421" width="0.0788%" height="15" fill="rgb(206,33,13)" fg:x="986" fg:w="1"/><text x="77.9490%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="77.6990%" y="533" width="0.1576%" height="15" fill="rgb(242,178,17)" fg:x="986" fg:w="2"/><text x="77.9490%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="77.7778%" y="517" width="0.0788%" height="15" fill="rgb(220,162,5)" fg:x="987" fg:w="1"/><text x="78.0278%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.7778%" y="501" width="0.0788%" height="15" fill="rgb(210,33,43)" fg:x="987" fg:w="1"/><text x="78.0278%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="77.6990%" y="581" width="0.2364%" height="15" fill="rgb(216,116,54)" fg:x="986" fg:w="3"/><text x="77.9490%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="77.6990%" y="565" width="0.2364%" height="15" fill="rgb(249,92,24)" fg:x="986" fg:w="3"/><text x="77.9490%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="77.6990%" y="549" width="0.2364%" height="15" fill="rgb(231,189,14)" fg:x="986" fg:w="3"/><text x="77.9490%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.8566%" y="533" width="0.0788%" height="15" fill="rgb(230,8,41)" fg:x="988" fg:w="1"/><text x="78.1066%" y="543.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="78.0142%" y="405" width="0.0788%" height="15" fill="rgb(249,7,27)" fg:x="990" fg:w="1"/><text x="78.2642%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.0930%" y="389" width="0.0788%" height="15" fill="rgb(232,86,5)" fg:x="991" fg:w="1"/><text x="78.3430%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.0930%" y="373" width="0.0788%" height="15" fill="rgb(224,175,18)" fg:x="991" fg:w="1"/><text x="78.3430%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.0930%" y="357" width="0.0788%" height="15" fill="rgb(220,129,12)" fg:x="991" fg:w="1"/><text x="78.3430%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.0930%" y="341" width="0.0788%" height="15" fill="rgb(210,19,36)" fg:x="991" fg:w="1"/><text x="78.3430%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.0930%" y="325" width="0.0788%" height="15" fill="rgb(219,96,14)" fg:x="991" fg:w="1"/><text x="78.3430%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="78.0142%" y="421" width="0.2364%" height="15" fill="rgb(249,106,1)" fg:x="990" fg:w="3"/><text x="78.2642%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.0930%" y="405" width="0.1576%" height="15" fill="rgb(249,155,20)" fg:x="991" fg:w="2"/><text x="78.3430%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.1718%" y="389" width="0.0788%" height="15" fill="rgb(244,168,9)" fg:x="992" fg:w="1"/><text x="78.4218%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.1718%" y="373" width="0.0788%" height="15" fill="rgb(216,23,50)" fg:x="992" fg:w="1"/><text x="78.4218%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="78.0142%" y="453" width="0.3152%" height="15" fill="rgb(224,219,20)" fg:x="990" fg:w="4"/><text x="78.2642%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="78.0142%" y="437" width="0.3152%" height="15" fill="rgb(222,156,15)" fg:x="990" fg:w="4"/><text x="78.2642%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.2506%" y="421" width="0.0788%" height="15" fill="rgb(231,97,17)" fg:x="993" fg:w="1"/><text x="78.5006%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="78.2506%" y="405" width="0.0788%" height="15" fill="rgb(218,70,48)" fg:x="993" fg:w="1"/><text x="78.5006%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.39%)</title><rect x="78.0142%" y="485" width="0.3940%" height="15" fill="rgb(212,196,52)" fg:x="990" fg:w="5"/><text x="78.2642%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.39%)</title><rect x="78.0142%" y="469" width="0.3940%" height="15" fill="rgb(243,203,18)" fg:x="990" fg:w="5"/><text x="78.2642%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.3294%" y="453" width="0.0788%" height="15" fill="rgb(252,125,41)" fg:x="994" fg:w="1"/><text x="78.5794%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="78.3294%" y="437" width="0.0788%" height="15" fill="rgb(223,180,33)" fg:x="994" fg:w="1"/><text x="78.5794%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.55%)</title><rect x="77.9354%" y="517" width="0.5516%" height="15" fill="rgb(254,159,46)" fg:x="989" fg:w="7"/><text x="78.1854%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.47%)</title><rect x="78.0142%" y="501" width="0.4728%" height="15" fill="rgb(254,38,10)" fg:x="990" fg:w="6"/><text x="78.2642%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.4082%" y="485" width="0.0788%" height="15" fill="rgb(208,217,32)" fg:x="995" fg:w="1"/><text x="78.6582%" y="495.50"></text></g><g><title>engine::session::state::State::close (18 samples, 1.42%)</title><rect x="77.1474%" y="661" width="1.4184%" height="15" fill="rgb(221,120,13)" fg:x="979" fg:w="18"/><text x="77.3974%" y="671.50"></text></g><g><title>engine::session::state::State::flush_entities (18 samples, 1.42%)</title><rect x="77.1474%" y="645" width="1.4184%" height="15" fill="rgb(246,54,52)" fg:x="979" fg:w="18"/><text x="77.3974%" y="655.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (18 samples, 1.42%)</title><rect x="77.1474%" y="629" width="1.4184%" height="15" fill="rgb(242,34,25)" fg:x="979" fg:w="18"/><text x="77.3974%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (18 samples, 1.42%)</title><rect x="77.1474%" y="613" width="1.4184%" height="15" fill="rgb(247,209,9)" fg:x="979" fg:w="18"/><text x="77.3974%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (14 samples, 1.10%)</title><rect x="77.4626%" y="597" width="1.1032%" height="15" fill="rgb(228,71,26)" fg:x="983" fg:w="14"/><text x="77.7126%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.63%)</title><rect x="77.9354%" y="581" width="0.6304%" height="15" fill="rgb(222,145,49)" fg:x="989" fg:w="8"/><text x="78.1854%" y="591.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.63%)</title><rect x="77.9354%" y="565" width="0.6304%" height="15" fill="rgb(218,121,17)" fg:x="989" fg:w="8"/><text x="78.1854%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.63%)</title><rect x="77.9354%" y="549" width="0.6304%" height="15" fill="rgb(244,50,7)" fg:x="989" fg:w="8"/><text x="78.1854%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.63%)</title><rect x="77.9354%" y="533" width="0.6304%" height="15" fill="rgb(246,229,37)" fg:x="989" fg:w="8"/><text x="78.1854%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.4870%" y="517" width="0.0788%" height="15" fill="rgb(225,18,5)" fg:x="996" fg:w="1"/><text x="78.7370%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="78.4870%" y="501" width="0.0788%" height="15" fill="rgb(213,204,8)" fg:x="996" fg:w="1"/><text x="78.7370%" y="511.50"></text></g><g><title>engine::session::Session::close (20 samples, 1.58%)</title><rect x="77.0686%" y="677" width="1.5760%" height="15" fill="rgb(238,103,6)" fg:x="978" fg:w="20"/><text x="77.3186%" y="687.50"></text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="78.5658%" y="661" width="0.0788%" height="15" fill="rgb(222,25,35)" fg:x="997" fg:w="1"/><text x="78.8158%" y="671.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="78.5658%" y="645" width="0.0788%" height="15" fill="rgb(213,203,35)" fg:x="997" fg:w="1"/><text x="78.8158%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="78.5658%" y="629" width="0.0788%" height="15" fill="rgb(221,79,53)" fg:x="997" fg:w="1"/><text x="78.8158%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="78.5658%" y="613" width="0.0788%" height="15" fill="rgb(243,200,35)" fg:x="997" fg:w="1"/><text x="78.8158%" y="623.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="78.5658%" y="597" width="0.0788%" height="15" fill="rgb(248,60,25)" fg:x="997" fg:w="1"/><text x="78.8158%" y="607.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.7234%" y="581" width="0.0788%" height="15" fill="rgb(227,53,46)" fg:x="999" fg:w="1"/><text x="78.9734%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.7234%" y="565" width="0.0788%" height="15" fill="rgb(216,120,32)" fg:x="999" fg:w="1"/><text x="78.9734%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.7234%" y="549" width="0.0788%" height="15" fill="rgb(220,134,1)" fg:x="999" fg:w="1"/><text x="78.9734%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.7234%" y="533" width="0.0788%" height="15" fill="rgb(237,168,5)" fg:x="999" fg:w="1"/><text x="78.9734%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.7234%" y="517" width="0.0788%" height="15" fill="rgb(231,100,33)" fg:x="999" fg:w="1"/><text x="78.9734%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.7234%" y="501" width="0.0788%" height="15" fill="rgb(236,177,47)" fg:x="999" fg:w="1"/><text x="78.9734%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.7234%" y="485" width="0.0788%" height="15" fill="rgb(235,7,49)" fg:x="999" fg:w="1"/><text x="78.9734%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.7234%" y="469" width="0.0788%" height="15" fill="rgb(232,119,22)" fg:x="999" fg:w="1"/><text x="78.9734%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.7234%" y="453" width="0.0788%" height="15" fill="rgb(254,73,53)" fg:x="999" fg:w="1"/><text x="78.9734%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.7234%" y="437" width="0.0788%" height="15" fill="rgb(251,35,20)" fg:x="999" fg:w="1"/><text x="78.9734%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.7234%" y="421" width="0.0788%" height="15" fill="rgb(241,119,20)" fg:x="999" fg:w="1"/><text x="78.9734%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.7234%" y="405" width="0.0788%" height="15" fill="rgb(207,102,14)" fg:x="999" fg:w="1"/><text x="78.9734%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.7234%" y="389" width="0.0788%" height="15" fill="rgb(248,201,50)" fg:x="999" fg:w="1"/><text x="78.9734%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="78.8022%" y="565" width="0.0788%" height="15" fill="rgb(222,185,44)" fg:x="1000" fg:w="1"/><text x="79.0522%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="78.8022%" y="549" width="0.0788%" height="15" fill="rgb(218,107,18)" fg:x="1000" fg:w="1"/><text x="79.0522%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="78.8022%" y="533" width="0.0788%" height="15" fill="rgb(237,177,39)" fg:x="1000" fg:w="1"/><text x="79.0522%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.8022%" y="517" width="0.0788%" height="15" fill="rgb(246,69,6)" fg:x="1000" fg:w="1"/><text x="79.0522%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.8022%" y="501" width="0.0788%" height="15" fill="rgb(234,208,37)" fg:x="1000" fg:w="1"/><text x="79.0522%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.8022%" y="485" width="0.0788%" height="15" fill="rgb(225,4,6)" fg:x="1000" fg:w="1"/><text x="79.0522%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.8022%" y="469" width="0.0788%" height="15" fill="rgb(233,45,0)" fg:x="1000" fg:w="1"/><text x="79.0522%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.8022%" y="453" width="0.0788%" height="15" fill="rgb(226,136,5)" fg:x="1000" fg:w="1"/><text x="79.0522%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="78.8022%" y="437" width="0.0788%" height="15" fill="rgb(211,91,47)" fg:x="1000" fg:w="1"/><text x="79.0522%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="78.8022%" y="421" width="0.0788%" height="15" fill="rgb(242,88,51)" fg:x="1000" fg:w="1"/><text x="79.0522%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.8810%" y="485" width="0.0788%" height="15" fill="rgb(230,91,28)" fg:x="1001" fg:w="1"/><text x="79.1310%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.8810%" y="469" width="0.0788%" height="15" fill="rgb(254,186,29)" fg:x="1001" fg:w="1"/><text x="79.1310%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.8810%" y="453" width="0.0788%" height="15" fill="rgb(238,6,4)" fg:x="1001" fg:w="1"/><text x="79.1310%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.8810%" y="437" width="0.0788%" height="15" fill="rgb(221,151,16)" fg:x="1001" fg:w="1"/><text x="79.1310%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.8810%" y="421" width="0.0788%" height="15" fill="rgb(251,143,52)" fg:x="1001" fg:w="1"/><text x="79.1310%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.8810%" y="405" width="0.0788%" height="15" fill="rgb(206,90,15)" fg:x="1001" fg:w="1"/><text x="79.1310%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.8810%" y="389" width="0.0788%" height="15" fill="rgb(218,35,8)" fg:x="1001" fg:w="1"/><text x="79.1310%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.8810%" y="373" width="0.0788%" height="15" fill="rgb(239,215,6)" fg:x="1001" fg:w="1"/><text x="79.1310%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.8810%" y="357" width="0.0788%" height="15" fill="rgb(245,116,39)" fg:x="1001" fg:w="1"/><text x="79.1310%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.8810%" y="341" width="0.0788%" height="15" fill="rgb(242,65,28)" fg:x="1001" fg:w="1"/><text x="79.1310%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.8810%" y="325" width="0.0788%" height="15" fill="rgb(252,132,53)" fg:x="1001" fg:w="1"/><text x="79.1310%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.8810%" y="309" width="0.0788%" height="15" fill="rgb(224,159,50)" fg:x="1001" fg:w="1"/><text x="79.1310%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.8810%" y="293" width="0.0788%" height="15" fill="rgb(224,93,4)" fg:x="1001" fg:w="1"/><text x="79.1310%" y="303.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="78.9598%" y="485" width="0.0788%" height="15" fill="rgb(208,81,34)" fg:x="1002" fg:w="1"/><text x="79.2098%" y="495.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="78.9598%" y="469" width="0.0788%" height="15" fill="rgb(233,92,54)" fg:x="1002" fg:w="1"/><text x="79.2098%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="78.9598%" y="453" width="0.0788%" height="15" fill="rgb(237,21,14)" fg:x="1002" fg:w="1"/><text x="79.2098%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="79.0386%" y="469" width="0.0788%" height="15" fill="rgb(249,128,51)" fg:x="1003" fg:w="1"/><text x="79.2886%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.0386%" y="453" width="0.0788%" height="15" fill="rgb(223,129,24)" fg:x="1003" fg:w="1"/><text x="79.2886%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.0386%" y="437" width="0.0788%" height="15" fill="rgb(231,168,25)" fg:x="1003" fg:w="1"/><text x="79.2886%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.0386%" y="421" width="0.0788%" height="15" fill="rgb(224,39,20)" fg:x="1003" fg:w="1"/><text x="79.2886%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.0386%" y="405" width="0.0788%" height="15" fill="rgb(225,152,53)" fg:x="1003" fg:w="1"/><text x="79.2886%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.0386%" y="389" width="0.0788%" height="15" fill="rgb(252,17,24)" fg:x="1003" fg:w="1"/><text x="79.2886%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.0386%" y="373" width="0.0788%" height="15" fill="rgb(250,114,30)" fg:x="1003" fg:w="1"/><text x="79.2886%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.32%)</title><rect x="78.8810%" y="533" width="0.3152%" height="15" fill="rgb(229,5,4)" fg:x="1001" fg:w="4"/><text x="79.1310%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="78.8810%" y="517" width="0.3152%" height="15" fill="rgb(225,176,49)" fg:x="1001" fg:w="4"/><text x="79.1310%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="78.8810%" y="501" width="0.3152%" height="15" fill="rgb(224,221,49)" fg:x="1001" fg:w="4"/><text x="79.1310%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (2 samples, 0.16%)</title><rect x="79.0386%" y="485" width="0.1576%" height="15" fill="rgb(253,169,27)" fg:x="1003" fg:w="2"/><text x="79.2886%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.1174%" y="469" width="0.0788%" height="15" fill="rgb(211,206,16)" fg:x="1004" fg:w="1"/><text x="79.3674%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.1174%" y="453" width="0.0788%" height="15" fill="rgb(244,87,35)" fg:x="1004" fg:w="1"/><text x="79.3674%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.1174%" y="437" width="0.0788%" height="15" fill="rgb(246,28,10)" fg:x="1004" fg:w="1"/><text x="79.3674%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.1174%" y="421" width="0.0788%" height="15" fill="rgb(229,12,44)" fg:x="1004" fg:w="1"/><text x="79.3674%" y="431.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.1174%" y="405" width="0.0788%" height="15" fill="rgb(210,145,37)" fg:x="1004" fg:w="1"/><text x="79.3674%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.1174%" y="389" width="0.0788%" height="15" fill="rgb(227,112,52)" fg:x="1004" fg:w="1"/><text x="79.3674%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.1174%" y="373" width="0.0788%" height="15" fill="rgb(238,155,34)" fg:x="1004" fg:w="1"/><text x="79.3674%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.1174%" y="357" width="0.0788%" height="15" fill="rgb(239,226,36)" fg:x="1004" fg:w="1"/><text x="79.3674%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.1174%" y="341" width="0.0788%" height="15" fill="rgb(230,16,23)" fg:x="1004" fg:w="1"/><text x="79.3674%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.1174%" y="325" width="0.0788%" height="15" fill="rgb(236,171,36)" fg:x="1004" fg:w="1"/><text x="79.3674%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.1174%" y="309" width="0.0788%" height="15" fill="rgb(221,22,14)" fg:x="1004" fg:w="1"/><text x="79.3674%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.1174%" y="293" width="0.0788%" height="15" fill="rgb(242,43,11)" fg:x="1004" fg:w="1"/><text x="79.3674%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.1174%" y="277" width="0.0788%" height="15" fill="rgb(232,69,23)" fg:x="1004" fg:w="1"/><text x="79.3674%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="79.1174%" y="261" width="0.0788%" height="15" fill="rgb(216,180,54)" fg:x="1004" fg:w="1"/><text x="79.3674%" y="271.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (7 samples, 0.55%)</title><rect x="78.7234%" y="597" width="0.5516%" height="15" fill="rgb(216,5,24)" fg:x="999" fg:w="7"/><text x="78.9734%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (6 samples, 0.47%)</title><rect x="78.8022%" y="581" width="0.4728%" height="15" fill="rgb(225,89,9)" fg:x="1000" fg:w="6"/><text x="79.0522%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.39%)</title><rect x="78.8810%" y="565" width="0.3940%" height="15" fill="rgb(243,75,33)" fg:x="1001" fg:w="5"/><text x="79.1310%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.39%)</title><rect x="78.8810%" y="549" width="0.3940%" height="15" fill="rgb(247,141,45)" fg:x="1001" fg:w="5"/><text x="79.1310%" y="559.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.1962%" y="533" width="0.0788%" height="15" fill="rgb(232,177,36)" fg:x="1005" fg:w="1"/><text x="79.4462%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.1962%" y="517" width="0.0788%" height="15" fill="rgb(219,125,36)" fg:x="1005" fg:w="1"/><text x="79.4462%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.1962%" y="501" width="0.0788%" height="15" fill="rgb(227,94,9)" fg:x="1005" fg:w="1"/><text x="79.4462%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.1962%" y="485" width="0.0788%" height="15" fill="rgb(240,34,52)" fg:x="1005" fg:w="1"/><text x="79.4462%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.1962%" y="469" width="0.0788%" height="15" fill="rgb(216,45,12)" fg:x="1005" fg:w="1"/><text x="79.4462%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.1962%" y="453" width="0.0788%" height="15" fill="rgb(246,21,19)" fg:x="1005" fg:w="1"/><text x="79.4462%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.1962%" y="437" width="0.0788%" height="15" fill="rgb(213,98,42)" fg:x="1005" fg:w="1"/><text x="79.4462%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.1962%" y="421" width="0.0788%" height="15" fill="rgb(250,136,47)" fg:x="1005" fg:w="1"/><text x="79.4462%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.1962%" y="405" width="0.0788%" height="15" fill="rgb(251,124,27)" fg:x="1005" fg:w="1"/><text x="79.4462%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.1962%" y="389" width="0.0788%" height="15" fill="rgb(229,180,14)" fg:x="1005" fg:w="1"/><text x="79.4462%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.1962%" y="373" width="0.0788%" height="15" fill="rgb(245,216,25)" fg:x="1005" fg:w="1"/><text x="79.4462%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.1962%" y="357" width="0.0788%" height="15" fill="rgb(251,43,5)" fg:x="1005" fg:w="1"/><text x="79.4462%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.1962%" y="341" width="0.0788%" height="15" fill="rgb(250,128,24)" fg:x="1005" fg:w="1"/><text x="79.4462%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.1962%" y="325" width="0.0788%" height="15" fill="rgb(217,117,27)" fg:x="1005" fg:w="1"/><text x="79.4462%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.1962%" y="309" width="0.0788%" height="15" fill="rgb(245,147,4)" fg:x="1005" fg:w="1"/><text x="79.4462%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="79.2750%" y="469" width="0.0788%" height="15" fill="rgb(242,201,35)" fg:x="1006" fg:w="1"/><text x="79.5250%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="79.2750%" y="453" width="0.0788%" height="15" fill="rgb(218,181,1)" fg:x="1006" fg:w="1"/><text x="79.5250%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.2750%" y="437" width="0.0788%" height="15" fill="rgb(222,6,29)" fg:x="1006" fg:w="1"/><text x="79.5250%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="79.3538%" y="421" width="0.0788%" height="15" fill="rgb(208,186,3)" fg:x="1007" fg:w="1"/><text x="79.6038%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.4326%" y="341" width="0.0788%" height="15" fill="rgb(216,36,26)" fg:x="1008" fg:w="1"/><text x="79.6826%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.4326%" y="325" width="0.0788%" height="15" fill="rgb(248,201,23)" fg:x="1008" fg:w="1"/><text x="79.6826%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.4326%" y="309" width="0.0788%" height="15" fill="rgb(251,170,31)" fg:x="1008" fg:w="1"/><text x="79.6826%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.4326%" y="389" width="0.1576%" height="15" fill="rgb(207,110,25)" fg:x="1008" fg:w="2"/><text x="79.6826%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.4326%" y="373" width="0.1576%" height="15" fill="rgb(250,54,15)" fg:x="1008" fg:w="2"/><text x="79.6826%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.4326%" y="357" width="0.1576%" height="15" fill="rgb(227,68,33)" fg:x="1008" fg:w="2"/><text x="79.6826%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.5114%" y="341" width="0.0788%" height="15" fill="rgb(238,34,41)" fg:x="1009" fg:w="1"/><text x="79.7614%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.5114%" y="325" width="0.0788%" height="15" fill="rgb(220,11,15)" fg:x="1009" fg:w="1"/><text x="79.7614%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.5114%" y="309" width="0.0788%" height="15" fill="rgb(246,111,35)" fg:x="1009" fg:w="1"/><text x="79.7614%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.5114%" y="293" width="0.0788%" height="15" fill="rgb(209,88,53)" fg:x="1009" fg:w="1"/><text x="79.7614%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.5114%" y="277" width="0.0788%" height="15" fill="rgb(231,185,47)" fg:x="1009" fg:w="1"/><text x="79.7614%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.5114%" y="261" width="0.0788%" height="15" fill="rgb(233,154,1)" fg:x="1009" fg:w="1"/><text x="79.7614%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.5114%" y="245" width="0.0788%" height="15" fill="rgb(225,15,46)" fg:x="1009" fg:w="1"/><text x="79.7614%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.5114%" y="229" width="0.0788%" height="15" fill="rgb(211,135,41)" fg:x="1009" fg:w="1"/><text x="79.7614%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.5114%" y="213" width="0.0788%" height="15" fill="rgb(208,54,0)" fg:x="1009" fg:w="1"/><text x="79.7614%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.5114%" y="197" width="0.0788%" height="15" fill="rgb(244,136,14)" fg:x="1009" fg:w="1"/><text x="79.7614%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.5114%" y="181" width="0.0788%" height="15" fill="rgb(241,56,14)" fg:x="1009" fg:w="1"/><text x="79.7614%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.5114%" y="165" width="0.0788%" height="15" fill="rgb(205,80,24)" fg:x="1009" fg:w="1"/><text x="79.7614%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="79.5902%" y="293" width="0.1576%" height="15" fill="rgb(220,57,4)" fg:x="1010" fg:w="2"/><text x="79.8402%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (6 samples, 0.47%)</title><rect x="79.3538%" y="437" width="0.4728%" height="15" fill="rgb(226,193,50)" fg:x="1007" fg:w="6"/><text x="79.6038%" y="447.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.39%)</title><rect x="79.4326%" y="421" width="0.3940%" height="15" fill="rgb(231,168,22)" fg:x="1008" fg:w="5"/><text x="79.6826%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.39%)</title><rect x="79.4326%" y="405" width="0.3940%" height="15" fill="rgb(254,215,14)" fg:x="1008" fg:w="5"/><text x="79.6826%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="79.5902%" y="389" width="0.2364%" height="15" fill="rgb(211,115,16)" fg:x="1010" fg:w="3"/><text x="79.8402%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="79.5902%" y="373" width="0.2364%" height="15" fill="rgb(236,210,16)" fg:x="1010" fg:w="3"/><text x="79.8402%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="79.5902%" y="357" width="0.2364%" height="15" fill="rgb(221,94,12)" fg:x="1010" fg:w="3"/><text x="79.8402%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="79.5902%" y="341" width="0.2364%" height="15" fill="rgb(235,218,49)" fg:x="1010" fg:w="3"/><text x="79.8402%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="79.5902%" y="325" width="0.2364%" height="15" fill="rgb(217,114,14)" fg:x="1010" fg:w="3"/><text x="79.8402%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="79.5902%" y="309" width="0.2364%" height="15" fill="rgb(216,145,22)" fg:x="1010" fg:w="3"/><text x="79.8402%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.7478%" y="293" width="0.0788%" height="15" fill="rgb(217,112,39)" fg:x="1012" fg:w="1"/><text x="79.9978%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="79.7478%" y="277" width="0.0788%" height="15" fill="rgb(225,85,32)" fg:x="1012" fg:w="1"/><text x="79.9978%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="79.7478%" y="261" width="0.0788%" height="15" fill="rgb(245,209,47)" fg:x="1012" fg:w="1"/><text x="79.9978%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.8266%" y="389" width="0.0788%" height="15" fill="rgb(218,220,15)" fg:x="1013" fg:w="1"/><text x="80.0766%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.8266%" y="373" width="0.0788%" height="15" fill="rgb(222,202,31)" fg:x="1013" fg:w="1"/><text x="80.0766%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.8266%" y="357" width="0.0788%" height="15" fill="rgb(243,203,4)" fg:x="1013" fg:w="1"/><text x="80.0766%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.8266%" y="341" width="0.0788%" height="15" fill="rgb(237,92,17)" fg:x="1013" fg:w="1"/><text x="80.0766%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.8266%" y="325" width="0.0788%" height="15" fill="rgb(231,119,7)" fg:x="1013" fg:w="1"/><text x="80.0766%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="79.8266%" y="437" width="0.1576%" height="15" fill="rgb(237,82,41)" fg:x="1013" fg:w="2"/><text x="80.0766%" y="447.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="79.8266%" y="421" width="0.1576%" height="15" fill="rgb(226,81,48)" fg:x="1013" fg:w="2"/><text x="80.0766%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="79.8266%" y="405" width="0.1576%" height="15" fill="rgb(234,70,51)" fg:x="1013" fg:w="2"/><text x="80.0766%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.9054%" y="389" width="0.0788%" height="15" fill="rgb(251,86,4)" fg:x="1014" fg:w="1"/><text x="80.1554%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.9054%" y="373" width="0.0788%" height="15" fill="rgb(244,144,28)" fg:x="1014" fg:w="1"/><text x="80.1554%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.9054%" y="357" width="0.0788%" height="15" fill="rgb(232,161,39)" fg:x="1014" fg:w="1"/><text x="80.1554%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.9054%" y="341" width="0.0788%" height="15" fill="rgb(247,34,51)" fg:x="1014" fg:w="1"/><text x="80.1554%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.9054%" y="325" width="0.0788%" height="15" fill="rgb(225,132,2)" fg:x="1014" fg:w="1"/><text x="80.1554%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.9054%" y="309" width="0.0788%" height="15" fill="rgb(209,159,44)" fg:x="1014" fg:w="1"/><text x="80.1554%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.9054%" y="293" width="0.0788%" height="15" fill="rgb(251,214,1)" fg:x="1014" fg:w="1"/><text x="80.1554%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.9054%" y="277" width="0.0788%" height="15" fill="rgb(247,84,47)" fg:x="1014" fg:w="1"/><text x="80.1554%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.9054%" y="261" width="0.0788%" height="15" fill="rgb(240,111,43)" fg:x="1014" fg:w="1"/><text x="80.1554%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.9054%" y="245" width="0.0788%" height="15" fill="rgb(215,214,35)" fg:x="1014" fg:w="1"/><text x="80.1554%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.9054%" y="229" width="0.0788%" height="15" fill="rgb(248,207,23)" fg:x="1014" fg:w="1"/><text x="80.1554%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.9054%" y="213" width="0.0788%" height="15" fill="rgb(214,186,4)" fg:x="1014" fg:w="1"/><text x="80.1554%" y="223.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="79.9842%" y="389" width="0.0788%" height="15" fill="rgb(220,133,22)" fg:x="1015" fg:w="1"/><text x="80.2342%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="79.9842%" y="373" width="0.0788%" height="15" fill="rgb(239,134,19)" fg:x="1015" fg:w="1"/><text x="80.2342%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="79.9842%" y="357" width="0.0788%" height="15" fill="rgb(250,140,9)" fg:x="1015" fg:w="1"/><text x="80.2342%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="79.9842%" y="341" width="0.0788%" height="15" fill="rgb(225,59,14)" fg:x="1015" fg:w="1"/><text x="80.2342%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="80.0630%" y="293" width="0.0788%" height="15" fill="rgb(214,152,51)" fg:x="1016" fg:w="1"/><text x="80.3130%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="80.0630%" y="277" width="0.0788%" height="15" fill="rgb(251,227,43)" fg:x="1016" fg:w="1"/><text x="80.3130%" y="287.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="80.0630%" y="261" width="0.0788%" height="15" fill="rgb(241,96,17)" fg:x="1016" fg:w="1"/><text x="80.3130%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.0630%" y="245" width="0.0788%" height="15" fill="rgb(234,198,43)" fg:x="1016" fg:w="1"/><text x="80.3130%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="80.0630%" y="341" width="0.1576%" height="15" fill="rgb(220,108,29)" fg:x="1016" fg:w="2"/><text x="80.3130%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="80.0630%" y="325" width="0.1576%" height="15" fill="rgb(226,163,33)" fg:x="1016" fg:w="2"/><text x="80.3130%" y="335.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="80.0630%" y="309" width="0.1576%" height="15" fill="rgb(205,194,45)" fg:x="1016" fg:w="2"/><text x="80.3130%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="80.1418%" y="293" width="0.0788%" height="15" fill="rgb(206,143,44)" fg:x="1017" fg:w="1"/><text x="80.3918%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.2206%" y="341" width="0.0788%" height="15" fill="rgb(236,136,36)" fg:x="1018" fg:w="1"/><text x="80.4706%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="80.0630%" y="357" width="0.3152%" height="15" fill="rgb(249,172,42)" fg:x="1016" fg:w="4"/><text x="80.3130%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="80.2994%" y="341" width="0.0788%" height="15" fill="rgb(216,139,23)" fg:x="1019" fg:w="1"/><text x="80.5494%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="80.3783%" y="309" width="0.0788%" height="15" fill="rgb(207,166,20)" fg:x="1020" fg:w="1"/><text x="80.6283%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="80.3783%" y="293" width="0.0788%" height="15" fill="rgb(210,209,22)" fg:x="1020" fg:w="1"/><text x="80.6283%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.3783%" y="277" width="0.0788%" height="15" fill="rgb(232,118,20)" fg:x="1020" fg:w="1"/><text x="80.6283%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="80.3783%" y="357" width="0.2364%" height="15" fill="rgb(238,113,42)" fg:x="1020" fg:w="3"/><text x="80.6283%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="80.3783%" y="341" width="0.2364%" height="15" fill="rgb(231,42,5)" fg:x="1020" fg:w="3"/><text x="80.6283%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="80.3783%" y="325" width="0.2364%" height="15" fill="rgb(243,166,24)" fg:x="1020" fg:w="3"/><text x="80.6283%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="80.4571%" y="309" width="0.1576%" height="15" fill="rgb(237,226,12)" fg:x="1021" fg:w="2"/><text x="80.7071%" y="319.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="80.4571%" y="293" width="0.1576%" height="15" fill="rgb(229,133,24)" fg:x="1021" fg:w="2"/><text x="80.7071%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="80.6147%" y="341" width="0.0788%" height="15" fill="rgb(238,33,43)" fg:x="1023" fg:w="1"/><text x="80.8647%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.6147%" y="325" width="0.0788%" height="15" fill="rgb(227,59,38)" fg:x="1023" fg:w="1"/><text x="80.8647%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.6147%" y="309" width="0.0788%" height="15" fill="rgb(230,97,0)" fg:x="1023" fg:w="1"/><text x="80.8647%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.6935%" y="309" width="0.0788%" height="15" fill="rgb(250,173,50)" fg:x="1024" fg:w="1"/><text x="80.9435%" y="319.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="80.7723%" y="277" width="0.2364%" height="15" fill="rgb(240,15,50)" fg:x="1025" fg:w="3"/><text x="81.0223%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (16 samples, 1.26%)</title><rect x="80.7723%" y="293" width="1.2608%" height="15" fill="rgb(221,93,22)" fg:x="1025" fg:w="16"/><text x="81.0223%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.02%)</title><rect x="81.0087%" y="277" width="1.0244%" height="15" fill="rgb(245,180,53)" fg:x="1028" fg:w="13"/><text x="81.2587%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.9543%" y="261" width="0.0788%" height="15" fill="rgb(231,88,51)" fg:x="1040" fg:w="1"/><text x="82.2043%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="82.0331%" y="277" width="0.0788%" height="15" fill="rgb(240,58,21)" fg:x="1041" fg:w="1"/><text x="82.2831%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="82.0331%" y="293" width="0.1576%" height="15" fill="rgb(237,21,10)" fg:x="1041" fg:w="2"/><text x="82.2831%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="82.1119%" y="277" width="0.0788%" height="15" fill="rgb(218,43,11)" fg:x="1042" fg:w="1"/><text x="82.3619%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="82.1119%" y="261" width="0.0788%" height="15" fill="rgb(218,221,29)" fg:x="1042" fg:w="1"/><text x="82.3619%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="82.1119%" y="245" width="0.0788%" height="15" fill="rgb(214,118,42)" fg:x="1042" fg:w="1"/><text x="82.3619%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="82.2695%" y="229" width="0.1576%" height="15" fill="rgb(251,200,26)" fg:x="1044" fg:w="2"/><text x="82.5195%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="82.4271%" y="229" width="0.0788%" height="15" fill="rgb(237,101,39)" fg:x="1046" fg:w="1"/><text x="82.6771%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.4271%" y="213" width="0.0788%" height="15" fill="rgb(251,117,11)" fg:x="1046" fg:w="1"/><text x="82.6771%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.4271%" y="197" width="0.0788%" height="15" fill="rgb(216,223,23)" fg:x="1046" fg:w="1"/><text x="82.6771%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.4271%" y="181" width="0.0788%" height="15" fill="rgb(251,54,12)" fg:x="1046" fg:w="1"/><text x="82.6771%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="82.5059%" y="229" width="0.0788%" height="15" fill="rgb(254,176,54)" fg:x="1047" fg:w="1"/><text x="82.7559%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.5059%" y="213" width="0.0788%" height="15" fill="rgb(210,32,8)" fg:x="1047" fg:w="1"/><text x="82.7559%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.5059%" y="197" width="0.0788%" height="15" fill="rgb(235,52,38)" fg:x="1047" fg:w="1"/><text x="82.7559%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.5059%" y="181" width="0.0788%" height="15" fill="rgb(231,4,44)" fg:x="1047" fg:w="1"/><text x="82.7559%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="82.5847%" y="229" width="0.0788%" height="15" fill="rgb(249,2,32)" fg:x="1048" fg:w="1"/><text x="82.8347%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="82.5847%" y="213" width="0.0788%" height="15" fill="rgb(224,65,26)" fg:x="1048" fg:w="1"/><text x="82.8347%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="82.5847%" y="197" width="0.0788%" height="15" fill="rgb(250,73,40)" fg:x="1048" fg:w="1"/><text x="82.8347%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="82.5847%" y="181" width="0.0788%" height="15" fill="rgb(253,177,16)" fg:x="1048" fg:w="1"/><text x="82.8347%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (33 samples, 2.60%)</title><rect x="82.6635%" y="229" width="2.6005%" height="15" fill="rgb(217,32,34)" fg:x="1049" fg:w="33"/><text x="82.9135%" y="239.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (33 samples, 2.60%)</title><rect x="82.6635%" y="213" width="2.6005%" height="15" fill="rgb(212,7,10)" fg:x="1049" fg:w="33"/><text x="82.9135%" y="223.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (33 samples, 2.60%)</title><rect x="82.6635%" y="197" width="2.6005%" height="15" fill="rgb(245,89,8)" fg:x="1049" fg:w="33"/><text x="82.9135%" y="207.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="85.2640%" y="229" width="0.1576%" height="15" fill="rgb(237,16,53)" fg:x="1082" fg:w="2"/><text x="85.5140%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 3.31%)</title><rect x="82.1907%" y="277" width="3.3097%" height="15" fill="rgb(250,204,30)" fg:x="1043" fg:w="42"/><text x="82.4407%" y="287.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (42 samples, 3.31%)</title><rect x="82.1907%" y="261" width="3.3097%" height="15" fill="rgb(208,77,27)" fg:x="1043" fg:w="42"/><text x="82.4407%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (42 samples, 3.31%)</title><rect x="82.1907%" y="245" width="3.3097%" height="15" fill="rgb(250,204,28)" fg:x="1043" fg:w="42"/><text x="82.4407%" y="255.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="85.4216%" y="229" width="0.0788%" height="15" fill="rgb(244,63,21)" fg:x="1084" fg:w="1"/><text x="85.6716%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.5004%" y="261" width="0.0788%" height="15" fill="rgb(236,85,44)" fg:x="1085" fg:w="1"/><text x="85.7504%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="85.5792%" y="261" width="0.0788%" height="15" fill="rgb(215,98,4)" fg:x="1086" fg:w="1"/><text x="85.8292%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="85.5792%" y="245" width="0.0788%" height="15" fill="rgb(235,38,11)" fg:x="1086" fg:w="1"/><text x="85.8292%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (65 samples, 5.12%)</title><rect x="80.7723%" y="309" width="5.1221%" height="15" fill="rgb(254,186,25)" fg:x="1025" fg:w="65"/><text x="81.0223%" y="319.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (47 samples, 3.70%)</title><rect x="82.1907%" y="293" width="3.7037%" height="15" fill="rgb(225,55,31)" fg:x="1043" fg:w="47"/><text x="82.4407%" y="303.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.39%)</title><rect x="85.5004%" y="277" width="0.3940%" height="15" fill="rgb(211,15,21)" fg:x="1085" fg:w="5"/><text x="85.7504%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="85.6580%" y="261" width="0.2364%" height="15" fill="rgb(215,187,41)" fg:x="1087" fg:w="3"/><text x="85.9080%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="85.8944%" y="261" width="0.0788%" height="15" fill="rgb(248,69,32)" fg:x="1090" fg:w="1"/><text x="86.1444%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::peek_space (1 samples, 0.08%)</title><rect x="85.8944%" y="245" width="0.0788%" height="15" fill="rgb(252,102,52)" fg:x="1090" fg:w="1"/><text x="86.1444%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="85.8944%" y="309" width="0.1576%" height="15" fill="rgb(253,140,32)" fg:x="1090" fg:w="2"/><text x="86.1444%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="85.8944%" y="293" width="0.1576%" height="15" fill="rgb(216,56,42)" fg:x="1090" fg:w="2"/><text x="86.1444%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="85.8944%" y="277" width="0.1576%" height="15" fill="rgb(216,184,14)" fg:x="1090" fg:w="2"/><text x="86.1444%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="85.9732%" y="261" width="0.0788%" height="15" fill="rgb(237,187,27)" fg:x="1091" fg:w="1"/><text x="86.2232%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.9732%" y="245" width="0.0788%" height="15" fill="rgb(219,65,3)" fg:x="1091" fg:w="1"/><text x="86.2232%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.9732%" y="229" width="0.0788%" height="15" fill="rgb(245,83,25)" fg:x="1091" fg:w="1"/><text x="86.2232%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.9732%" y="213" width="0.0788%" height="15" fill="rgb(214,205,45)" fg:x="1091" fg:w="1"/><text x="86.2232%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="86.0520%" y="261" width="0.0788%" height="15" fill="rgb(241,20,18)" fg:x="1092" fg:w="1"/><text x="86.3020%" y="271.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="86.0520%" y="245" width="0.0788%" height="15" fill="rgb(232,163,23)" fg:x="1092" fg:w="1"/><text x="86.3020%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (71 samples, 5.59%)</title><rect x="80.6147%" y="357" width="5.5950%" height="15" fill="rgb(214,5,46)" fg:x="1023" fg:w="71"/><text x="80.8647%" y="367.50">regex::..</text></g><g><title>regex::builders::Builder::build_one_string (70 samples, 5.52%)</title><rect x="80.6935%" y="341" width="5.5162%" height="15" fill="rgb(229,78,17)" fg:x="1024" fg:w="70"/><text x="80.9435%" y="351.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (70 samples, 5.52%)</title><rect x="80.6935%" y="325" width="5.5162%" height="15" fill="rgb(248,89,10)" fg:x="1024" fg:w="70"/><text x="80.9435%" y="335.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="86.0520%" y="309" width="0.1576%" height="15" fill="rgb(248,54,15)" fg:x="1092" fg:w="2"/><text x="86.3020%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="86.0520%" y="293" width="0.1576%" height="15" fill="rgb(223,116,6)" fg:x="1092" fg:w="2"/><text x="86.3020%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="86.0520%" y="277" width="0.1576%" height="15" fill="rgb(205,125,38)" fg:x="1092" fg:w="2"/><text x="86.3020%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="86.1308%" y="261" width="0.0788%" height="15" fill="rgb(251,78,38)" fg:x="1093" fg:w="1"/><text x="86.3808%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="86.1308%" y="245" width="0.0788%" height="15" fill="rgb(253,78,28)" fg:x="1093" fg:w="1"/><text x="86.3808%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="86.2884%" y="277" width="0.1576%" height="15" fill="rgb(209,120,3)" fg:x="1095" fg:w="2"/><text x="86.5384%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.3672%" y="261" width="0.0788%" height="15" fill="rgb(238,229,9)" fg:x="1096" fg:w="1"/><text x="86.6172%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.3672%" y="245" width="0.0788%" height="15" fill="rgb(253,159,18)" fg:x="1096" fg:w="1"/><text x="86.6172%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (83 samples, 6.54%)</title><rect x="80.0630%" y="373" width="6.5406%" height="15" fill="rgb(244,42,34)" fg:x="1016" fg:w="83"/><text x="80.3130%" y="383.50">indefinit..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.39%)</title><rect x="86.2096%" y="357" width="0.3940%" height="15" fill="rgb(224,8,7)" fg:x="1094" fg:w="5"/><text x="86.4596%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.39%)</title><rect x="86.2096%" y="341" width="0.3940%" height="15" fill="rgb(210,201,45)" fg:x="1094" fg:w="5"/><text x="86.4596%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.39%)</title><rect x="86.2096%" y="325" width="0.3940%" height="15" fill="rgb(252,185,21)" fg:x="1094" fg:w="5"/><text x="86.4596%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.39%)</title><rect x="86.2096%" y="309" width="0.3940%" height="15" fill="rgb(223,131,1)" fg:x="1094" fg:w="5"/><text x="86.4596%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.39%)</title><rect x="86.2096%" y="293" width="0.3940%" height="15" fill="rgb(245,141,16)" fg:x="1094" fg:w="5"/><text x="86.4596%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="86.4460%" y="277" width="0.1576%" height="15" fill="rgb(229,55,45)" fg:x="1097" fg:w="2"/><text x="86.6960%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.6036%" y="325" width="0.0788%" height="15" fill="rgb(208,92,15)" fg:x="1099" fg:w="1"/><text x="86.8536%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="86.6036%" y="309" width="0.0788%" height="15" fill="rgb(234,185,47)" fg:x="1099" fg:w="1"/><text x="86.8536%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.6036%" y="293" width="0.0788%" height="15" fill="rgb(253,104,50)" fg:x="1099" fg:w="1"/><text x="86.8536%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.6036%" y="277" width="0.0788%" height="15" fill="rgb(205,70,7)" fg:x="1099" fg:w="1"/><text x="86.8536%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.6036%" y="261" width="0.0788%" height="15" fill="rgb(240,178,43)" fg:x="1099" fg:w="1"/><text x="86.8536%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="86.6036%" y="357" width="0.1576%" height="15" fill="rgb(214,112,2)" fg:x="1099" fg:w="2"/><text x="86.8536%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="86.6036%" y="341" width="0.1576%" height="15" fill="rgb(206,46,17)" fg:x="1099" fg:w="2"/><text x="86.8536%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="86.6824%" y="325" width="0.0788%" height="15" fill="rgb(225,220,16)" fg:x="1100" fg:w="1"/><text x="86.9324%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="86.6824%" y="309" width="0.0788%" height="15" fill="rgb(238,65,40)" fg:x="1100" fg:w="1"/><text x="86.9324%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.6824%" y="293" width="0.0788%" height="15" fill="rgb(230,151,21)" fg:x="1100" fg:w="1"/><text x="86.9324%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="86.7612%" y="341" width="0.0788%" height="15" fill="rgb(218,58,49)" fg:x="1101" fg:w="1"/><text x="87.0112%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="86.7612%" y="325" width="0.0788%" height="15" fill="rgb(219,179,14)" fg:x="1101" fg:w="1"/><text x="87.0112%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="86.7612%" y="309" width="0.0788%" height="15" fill="rgb(223,72,1)" fg:x="1101" fg:w="1"/><text x="87.0112%" y="319.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="86.7612%" y="293" width="0.0788%" height="15" fill="rgb(238,126,10)" fg:x="1101" fg:w="1"/><text x="87.0112%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::Cache::new (1 samples, 0.08%)</title><rect x="86.8400%" y="293" width="0.0788%" height="15" fill="rgb(224,206,38)" fg:x="1102" fg:w="1"/><text x="87.0900%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="87.1552%" y="261" width="0.1576%" height="15" fill="rgb(212,201,54)" fg:x="1106" fg:w="2"/><text x="87.4052%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="87.1552%" y="245" width="0.1576%" height="15" fill="rgb(218,154,48)" fg:x="1106" fg:w="2"/><text x="87.4052%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="87.1552%" y="229" width="0.1576%" height="15" fill="rgb(232,93,24)" fg:x="1106" fg:w="2"/><text x="87.4052%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="87.3128%" y="261" width="0.1576%" height="15" fill="rgb(245,30,21)" fg:x="1108" fg:w="2"/><text x="87.5628%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="87.3916%" y="245" width="0.0788%" height="15" fill="rgb(242,148,29)" fg:x="1109" fg:w="1"/><text x="87.6416%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="87.3916%" y="229" width="0.0788%" height="15" fill="rgb(244,153,54)" fg:x="1109" fg:w="1"/><text x="87.6416%" y="239.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (12 samples, 0.95%)</title><rect x="86.7612%" y="357" width="0.9456%" height="15" fill="rgb(252,87,22)" fg:x="1101" fg:w="12"/><text x="87.0112%" y="367.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.87%)</title><rect x="86.8400%" y="341" width="0.8668%" height="15" fill="rgb(210,51,29)" fg:x="1102" fg:w="11"/><text x="87.0900%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.87%)</title><rect x="86.8400%" y="325" width="0.8668%" height="15" fill="rgb(242,136,47)" fg:x="1102" fg:w="11"/><text x="87.0900%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.87%)</title><rect x="86.8400%" y="309" width="0.8668%" height="15" fill="rgb(238,68,4)" fg:x="1102" fg:w="11"/><text x="87.0900%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.79%)</title><rect x="86.9188%" y="293" width="0.7880%" height="15" fill="rgb(242,161,30)" fg:x="1103" fg:w="10"/><text x="87.1688%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.79%)</title><rect x="86.9188%" y="277" width="0.7880%" height="15" fill="rgb(218,58,44)" fg:x="1103" fg:w="10"/><text x="87.1688%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="87.4704%" y="261" width="0.2364%" height="15" fill="rgb(252,125,32)" fg:x="1110" fg:w="3"/><text x="87.7204%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="87.9433%" y="277" width="0.0788%" height="15" fill="rgb(219,178,0)" fg:x="1116" fg:w="1"/><text x="88.1933%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="87.7857%" y="309" width="0.3152%" height="15" fill="rgb(213,152,7)" fg:x="1114" fg:w="4"/><text x="88.0357%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="87.7857%" y="293" width="0.3152%" height="15" fill="rgb(249,109,34)" fg:x="1114" fg:w="4"/><text x="88.0357%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="88.0221%" y="277" width="0.0788%" height="15" fill="rgb(232,96,21)" fg:x="1117" fg:w="1"/><text x="88.2721%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.0221%" y="261" width="0.0788%" height="15" fill="rgb(228,27,39)" fg:x="1117" fg:w="1"/><text x="88.2721%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.0221%" y="245" width="0.0788%" height="15" fill="rgb(211,182,52)" fg:x="1117" fg:w="1"/><text x="88.2721%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="88.1009%" y="293" width="0.1576%" height="15" fill="rgb(234,178,38)" fg:x="1118" fg:w="2"/><text x="88.3509%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.3373%" y="277" width="0.0788%" height="15" fill="rgb(221,111,3)" fg:x="1121" fg:w="1"/><text x="88.5873%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (19 samples, 1.50%)</title><rect x="88.2585%" y="293" width="1.4972%" height="15" fill="rgb(228,175,21)" fg:x="1120" fg:w="19"/><text x="88.5085%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (17 samples, 1.34%)</title><rect x="88.4161%" y="277" width="1.3396%" height="15" fill="rgb(228,174,43)" fg:x="1122" fg:w="17"/><text x="88.6661%" y="287.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="89.5981%" y="261" width="0.1576%" height="15" fill="rgb(211,191,0)" fg:x="1137" fg:w="2"/><text x="89.8481%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.8345%" y="261" width="0.0788%" height="15" fill="rgb(253,117,3)" fg:x="1140" fg:w="1"/><text x="90.0845%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.8345%" y="245" width="0.0788%" height="15" fill="rgb(241,127,19)" fg:x="1140" fg:w="1"/><text x="90.0845%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.8345%" y="229" width="0.0788%" height="15" fill="rgb(218,103,12)" fg:x="1140" fg:w="1"/><text x="90.0845%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.32%)</title><rect x="89.9133%" y="261" width="0.3152%" height="15" fill="rgb(236,214,43)" fg:x="1141" fg:w="4"/><text x="90.1633%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="90.0709%" y="245" width="0.1576%" height="15" fill="rgb(244,144,19)" fg:x="1143" fg:w="2"/><text x="90.3209%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (7 samples, 0.55%)</title><rect x="89.7557%" y="293" width="0.5516%" height="15" fill="rgb(246,188,10)" fg:x="1139" fg:w="7"/><text x="90.0057%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (7 samples, 0.55%)</title><rect x="89.7557%" y="277" width="0.5516%" height="15" fill="rgb(212,193,33)" fg:x="1139" fg:w="7"/><text x="90.0057%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="90.2285%" y="261" width="0.0788%" height="15" fill="rgb(241,51,29)" fg:x="1145" fg:w="1"/><text x="90.4785%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="90.2285%" y="245" width="0.0788%" height="15" fill="rgb(211,58,19)" fg:x="1145" fg:w="1"/><text x="90.4785%" y="255.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="90.2285%" y="229" width="0.0788%" height="15" fill="rgb(229,111,26)" fg:x="1145" fg:w="1"/><text x="90.4785%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="90.3073%" y="293" width="0.0788%" height="15" fill="rgb(213,115,40)" fg:x="1146" fg:w="1"/><text x="90.5573%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="90.3073%" y="277" width="0.0788%" height="15" fill="rgb(209,56,44)" fg:x="1146" fg:w="1"/><text x="90.5573%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="90.3073%" y="261" width="0.0788%" height="15" fill="rgb(230,108,32)" fg:x="1146" fg:w="1"/><text x="90.5573%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="90.3861%" y="197" width="0.0788%" height="15" fill="rgb(216,165,31)" fg:x="1147" fg:w="1"/><text x="90.6361%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.3861%" y="181" width="0.0788%" height="15" fill="rgb(218,122,21)" fg:x="1147" fg:w="1"/><text x="90.6361%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.3861%" y="165" width="0.0788%" height="15" fill="rgb(223,224,47)" fg:x="1147" fg:w="1"/><text x="90.6361%" y="175.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="90.9377%" y="181" width="0.3152%" height="15" fill="rgb(238,102,44)" fg:x="1154" fg:w="4"/><text x="91.1877%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="91.2530%" y="181" width="0.0788%" height="15" fill="rgb(236,46,40)" fg:x="1158" fg:w="1"/><text x="91.5030%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.2530%" y="165" width="0.0788%" height="15" fill="rgb(247,202,50)" fg:x="1158" fg:w="1"/><text x="91.5030%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.2530%" y="149" width="0.0788%" height="15" fill="rgb(209,99,20)" fg:x="1158" fg:w="1"/><text x="91.5030%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.2530%" y="133" width="0.0788%" height="15" fill="rgb(252,27,34)" fg:x="1158" fg:w="1"/><text x="91.5030%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.5682%" y="149" width="0.0788%" height="15" fill="rgb(215,206,23)" fg:x="1162" fg:w="1"/><text x="91.8182%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.5682%" y="133" width="0.0788%" height="15" fill="rgb(212,135,36)" fg:x="1162" fg:w="1"/><text x="91.8182%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.5682%" y="117" width="0.0788%" height="15" fill="rgb(240,189,1)" fg:x="1162" fg:w="1"/><text x="91.8182%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.63%)</title><rect x="91.3318%" y="181" width="0.6304%" height="15" fill="rgb(242,56,20)" fg:x="1159" fg:w="8"/><text x="91.5818%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (7 samples, 0.55%)</title><rect x="91.4106%" y="165" width="0.5516%" height="15" fill="rgb(247,132,33)" fg:x="1160" fg:w="7"/><text x="91.6606%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.32%)</title><rect x="91.6470%" y="149" width="0.3152%" height="15" fill="rgb(208,149,11)" fg:x="1163" fg:w="4"/><text x="91.8970%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="91.8834%" y="133" width="0.0788%" height="15" fill="rgb(211,33,11)" fg:x="1166" fg:w="1"/><text x="92.1334%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (38 samples, 2.99%)</title><rect x="91.9622%" y="181" width="2.9945%" height="15" fill="rgb(221,29,38)" fg:x="1167" fg:w="38"/><text x="92.2122%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (38 samples, 2.99%)</title><rect x="91.9622%" y="165" width="2.9945%" height="15" fill="rgb(206,182,49)" fg:x="1167" fg:w="38"/><text x="92.2122%" y="175.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (38 samples, 2.99%)</title><rect x="91.9622%" y="149" width="2.9945%" height="15" fill="rgb(216,140,1)" fg:x="1167" fg:w="38"/><text x="92.2122%" y="159.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="94.9567%" y="181" width="0.1576%" height="15" fill="rgb(232,57,40)" fg:x="1205" fg:w="2"/><text x="95.2067%" y="191.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="95.1143%" y="181" width="0.0788%" height="15" fill="rgb(224,186,18)" fg:x="1207" fg:w="1"/><text x="95.3643%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 4.96%)</title><rect x="90.3861%" y="277" width="4.9645%" height="15" fill="rgb(215,121,11)" fg:x="1147" fg:w="63"/><text x="90.6361%" y="287.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (63 samples, 4.96%)</title><rect x="90.3861%" y="261" width="4.9645%" height="15" fill="rgb(245,147,10)" fg:x="1147" fg:w="63"/><text x="90.6361%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (63 samples, 4.96%)</title><rect x="90.3861%" y="245" width="4.9645%" height="15" fill="rgb(238,153,13)" fg:x="1147" fg:w="63"/><text x="90.6361%" y="255.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (63 samples, 4.96%)</title><rect x="90.3861%" y="229" width="4.9645%" height="15" fill="rgb(233,108,0)" fg:x="1147" fg:w="63"/><text x="90.6361%" y="239.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (63 samples, 4.96%)</title><rect x="90.3861%" y="213" width="4.9645%" height="15" fill="rgb(212,157,17)" fg:x="1147" fg:w="63"/><text x="90.6361%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (62 samples, 4.89%)</title><rect x="90.4649%" y="197" width="4.8857%" height="15" fill="rgb(225,213,38)" fg:x="1148" fg:w="62"/><text x="90.7149%" y="207.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="95.1931%" y="181" width="0.1576%" height="15" fill="rgb(248,16,11)" fg:x="1208" fg:w="2"/><text x="95.4431%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="95.4295%" y="261" width="0.3152%" height="15" fill="rgb(241,33,4)" fg:x="1211" fg:w="4"/><text x="95.6795%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="95.5083%" y="245" width="0.2364%" height="15" fill="rgb(222,26,43)" fg:x="1212" fg:w="3"/><text x="95.7583%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="95.5083%" y="229" width="0.2364%" height="15" fill="rgb(243,29,36)" fg:x="1212" fg:w="3"/><text x="95.7583%" y="239.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="95.5083%" y="213" width="0.2364%" height="15" fill="rgb(241,9,27)" fg:x="1212" fg:w="3"/><text x="95.7583%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (100 samples, 7.88%)</title><rect x="88.1009%" y="309" width="7.8802%" height="15" fill="rgb(205,117,26)" fg:x="1118" fg:w="100"/><text x="88.3509%" y="319.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (71 samples, 5.59%)</title><rect x="90.3861%" y="293" width="5.5950%" height="15" fill="rgb(209,80,39)" fg:x="1147" fg:w="71"/><text x="90.6361%" y="303.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.63%)</title><rect x="95.3507%" y="277" width="0.6304%" height="15" fill="rgb(239,155,6)" fg:x="1210" fg:w="8"/><text x="95.6007%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="95.7447%" y="261" width="0.2364%" height="15" fill="rgb(212,104,12)" fg:x="1215" fg:w="3"/><text x="95.9947%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.9023%" y="245" width="0.0788%" height="15" fill="rgb(234,204,3)" fg:x="1217" fg:w="1"/><text x="96.1523%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="96.0599%" y="277" width="0.0788%" height="15" fill="rgb(251,218,7)" fg:x="1219" fg:w="1"/><text x="96.3099%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="96.0599%" y="261" width="0.0788%" height="15" fill="rgb(221,81,32)" fg:x="1219" fg:w="1"/><text x="96.3099%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="96.0599%" y="245" width="0.0788%" height="15" fill="rgb(214,152,26)" fg:x="1219" fg:w="1"/><text x="96.3099%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="96.0599%" y="229" width="0.0788%" height="15" fill="rgb(223,22,3)" fg:x="1219" fg:w="1"/><text x="96.3099%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="96.0599%" y="213" width="0.0788%" height="15" fill="rgb(207,174,7)" fg:x="1219" fg:w="1"/><text x="96.3099%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="95.9811%" y="309" width="0.2364%" height="15" fill="rgb(224,19,52)" fg:x="1218" fg:w="3"/><text x="96.2311%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="95.9811%" y="293" width="0.2364%" height="15" fill="rgb(228,24,14)" fg:x="1218" fg:w="3"/><text x="96.2311%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="96.1387%" y="277" width="0.0788%" height="15" fill="rgb(230,153,43)" fg:x="1220" fg:w="1"/><text x="96.3887%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.1387%" y="261" width="0.0788%" height="15" fill="rgb(231,106,12)" fg:x="1220" fg:w="1"/><text x="96.3887%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="96.2175%" y="277" width="0.0788%" height="15" fill="rgb(215,92,2)" fg:x="1221" fg:w="1"/><text x="96.4675%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="96.2175%" y="261" width="0.0788%" height="15" fill="rgb(249,143,25)" fg:x="1221" fg:w="1"/><text x="96.4675%" y="271.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="96.2963%" y="261" width="0.0788%" height="15" fill="rgb(252,7,35)" fg:x="1222" fg:w="1"/><text x="96.5463%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="96.2963%" y="277" width="0.1576%" height="15" fill="rgb(216,69,40)" fg:x="1222" fg:w="2"/><text x="96.5463%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="96.3751%" y="261" width="0.0788%" height="15" fill="rgb(240,36,33)" fg:x="1223" fg:w="1"/><text x="96.6251%" y="271.50"></text></g><g><title>indefinite::rules::number::Number::check (126 samples, 9.93%)</title><rect x="86.6036%" y="373" width="9.9291%" height="15" fill="rgb(231,128,14)" fg:x="1099" fg:w="126"/><text x="86.8536%" y="383.50">indefinite::ru..</text></g><g><title>regex::regex::string::Regex::new (112 samples, 8.83%)</title><rect x="87.7069%" y="357" width="8.8258%" height="15" fill="rgb(245,143,14)" fg:x="1113" fg:w="112"/><text x="87.9569%" y="367.50">regex::regex..</text></g><g><title>regex::builders::Builder::build_one_string (111 samples, 8.75%)</title><rect x="87.7857%" y="341" width="8.7470%" height="15" fill="rgb(222,130,28)" fg:x="1114" fg:w="111"/><text x="88.0357%" y="351.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (111 samples, 8.75%)</title><rect x="87.7857%" y="325" width="8.7470%" height="15" fill="rgb(212,10,48)" fg:x="1114" fg:w="111"/><text x="88.0357%" y="335.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="96.2175%" y="309" width="0.3152%" height="15" fill="rgb(254,118,45)" fg:x="1221" fg:w="4"/><text x="96.4675%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="96.2175%" y="293" width="0.3152%" height="15" fill="rgb(228,6,45)" fg:x="1221" fg:w="4"/><text x="96.4675%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="96.4539%" y="277" width="0.0788%" height="15" fill="rgb(241,18,35)" fg:x="1224" fg:w="1"/><text x="96.7039%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="96.5327%" y="341" width="0.0788%" height="15" fill="rgb(227,214,53)" fg:x="1225" fg:w="1"/><text x="96.7827%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="96.5327%" y="325" width="0.0788%" height="15" fill="rgb(224,107,51)" fg:x="1225" fg:w="1"/><text x="96.7827%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="96.5327%" y="309" width="0.0788%" height="15" fill="rgb(248,60,28)" fg:x="1225" fg:w="1"/><text x="96.7827%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="96.6115%" y="341" width="0.0788%" height="15" fill="rgb(249,101,23)" fg:x="1226" fg:w="1"/><text x="96.8615%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="96.6115%" y="325" width="0.0788%" height="15" fill="rgb(228,51,19)" fg:x="1226" fg:w="1"/><text x="96.8615%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="96.6115%" y="309" width="0.0788%" height="15" fill="rgb(213,20,6)" fg:x="1226" fg:w="1"/><text x="96.8615%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.6903%" y="293" width="0.1576%" height="15" fill="rgb(212,124,10)" fg:x="1227" fg:w="2"/><text x="96.9403%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.6903%" y="277" width="0.1576%" height="15" fill="rgb(248,3,40)" fg:x="1227" fg:w="2"/><text x="96.9403%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.8479%" y="293" width="0.0788%" height="15" fill="rgb(223,178,23)" fg:x="1229" fg:w="1"/><text x="97.0979%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.0055%" y="277" width="0.0788%" height="15" fill="rgb(240,132,45)" fg:x="1231" fg:w="1"/><text x="97.2555%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="97.1631%" y="261" width="0.0788%" height="15" fill="rgb(245,164,36)" fg:x="1233" fg:w="1"/><text x="97.4131%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="97.1631%" y="245" width="0.0788%" height="15" fill="rgb(231,188,53)" fg:x="1233" fg:w="1"/><text x="97.4131%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="97.0843%" y="277" width="0.2364%" height="15" fill="rgb(237,198,39)" fg:x="1232" fg:w="3"/><text x="97.3343%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="97.2419%" y="261" width="0.0788%" height="15" fill="rgb(223,120,35)" fg:x="1234" fg:w="1"/><text x="97.4919%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="97.3207%" y="261" width="0.0788%" height="15" fill="rgb(253,107,49)" fg:x="1235" fg:w="1"/><text x="97.5707%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="97.3207%" y="245" width="0.0788%" height="15" fill="rgb(216,44,31)" fg:x="1235" fg:w="1"/><text x="97.5707%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="97.3207%" y="229" width="0.0788%" height="15" fill="rgb(253,87,21)" fg:x="1235" fg:w="1"/><text x="97.5707%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="97.3207%" y="213" width="0.0788%" height="15" fill="rgb(226,18,2)" fg:x="1235" fg:w="1"/><text x="97.5707%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.3995%" y="245" width="0.0788%" height="15" fill="rgb(216,8,46)" fg:x="1236" fg:w="1"/><text x="97.6495%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="97.4783%" y="245" width="0.2364%" height="15" fill="rgb(226,140,39)" fg:x="1237" fg:w="3"/><text x="97.7283%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.6359%" y="229" width="0.0788%" height="15" fill="rgb(221,194,54)" fg:x="1239" fg:w="1"/><text x="97.8859%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.6359%" y="213" width="0.0788%" height="15" fill="rgb(213,92,11)" fg:x="1239" fg:w="1"/><text x="97.8859%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.6359%" y="197" width="0.0788%" height="15" fill="rgb(229,162,46)" fg:x="1239" fg:w="1"/><text x="97.8859%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (11 samples, 0.87%)</title><rect x="96.9267%" y="293" width="0.8668%" height="15" fill="rgb(214,111,36)" fg:x="1230" fg:w="11"/><text x="97.1767%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (6 samples, 0.47%)</title><rect x="97.3207%" y="277" width="0.4728%" height="15" fill="rgb(207,6,21)" fg:x="1235" fg:w="6"/><text x="97.5707%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.39%)</title><rect x="97.3995%" y="261" width="0.3940%" height="15" fill="rgb(213,127,38)" fg:x="1236" fg:w="5"/><text x="97.6495%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="97.7147%" y="245" width="0.0788%" height="15" fill="rgb(238,118,32)" fg:x="1240" fg:w="1"/><text x="97.9647%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="97.7935%" y="261" width="0.1576%" height="15" fill="rgb(240,139,39)" fg:x="1241" fg:w="2"/><text x="98.0435%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="97.8723%" y="245" width="0.0788%" height="15" fill="rgb(235,10,37)" fg:x="1242" fg:w="1"/><text x="98.1223%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="97.8723%" y="229" width="0.0788%" height="15" fill="rgb(249,171,38)" fg:x="1242" fg:w="1"/><text x="98.1223%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="97.8723%" y="213" width="0.0788%" height="15" fill="rgb(242,144,32)" fg:x="1242" fg:w="1"/><text x="98.1223%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="97.7935%" y="293" width="0.2364%" height="15" fill="rgb(217,117,21)" fg:x="1241" fg:w="3"/><text x="98.0435%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="97.7935%" y="277" width="0.2364%" height="15" fill="rgb(249,87,1)" fg:x="1241" fg:w="3"/><text x="98.0435%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.9511%" y="261" width="0.0788%" height="15" fill="rgb(248,196,48)" fg:x="1243" fg:w="1"/><text x="98.2011%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="98.0299%" y="261" width="0.0788%" height="15" fill="rgb(251,206,33)" fg:x="1244" fg:w="1"/><text x="98.2799%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="98.0299%" y="245" width="0.0788%" height="15" fill="rgb(232,141,28)" fg:x="1244" fg:w="1"/><text x="98.2799%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (20 samples, 1.58%)</title><rect x="96.6903%" y="341" width="1.5760%" height="15" fill="rgb(209,167,14)" fg:x="1227" fg:w="20"/><text x="96.9403%" y="351.50"></text></g><g><title>regex::builders::Builder::build_one_string (20 samples, 1.58%)</title><rect x="96.6903%" y="325" width="1.5760%" height="15" fill="rgb(225,11,50)" fg:x="1227" fg:w="20"/><text x="96.9403%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (20 samples, 1.58%)</title><rect x="96.6903%" y="309" width="1.5760%" height="15" fill="rgb(209,50,20)" fg:x="1227" fg:w="20"/><text x="96.9403%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="98.0299%" y="293" width="0.2364%" height="15" fill="rgb(212,17,46)" fg:x="1244" fg:w="3"/><text x="98.2799%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="98.0299%" y="277" width="0.2364%" height="15" fill="rgb(216,101,39)" fg:x="1244" fg:w="3"/><text x="98.2799%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="98.1087%" y="261" width="0.1576%" height="15" fill="rgb(212,228,48)" fg:x="1245" fg:w="2"/><text x="98.3587%" y="271.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="98.1875%" y="245" width="0.0788%" height="15" fill="rgb(250,6,50)" fg:x="1246" fg:w="1"/><text x="98.4375%" y="255.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="98.1875%" y="229" width="0.0788%" height="15" fill="rgb(250,160,48)" fg:x="1246" fg:w="1"/><text x="98.4375%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.3452%" y="261" width="0.0788%" height="15" fill="rgb(244,216,33)" fg:x="1248" fg:w="1"/><text x="98.5952%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.3452%" y="245" width="0.0788%" height="15" fill="rgb(207,157,5)" fg:x="1248" fg:w="1"/><text x="98.5952%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="98.2664%" y="277" width="0.2364%" height="15" fill="rgb(228,199,8)" fg:x="1247" fg:w="3"/><text x="98.5164%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="98.4240%" y="261" width="0.0788%" height="15" fill="rgb(227,80,20)" fg:x="1249" fg:w="1"/><text x="98.6740%" y="271.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (244 samples, 19.23%)</title><rect x="79.3538%" y="453" width="19.2277%" height="15" fill="rgb(222,9,33)" fg:x="1007" fg:w="244"/><text x="79.6038%" y="463.50">&lt;&amp;kernel::model::entry::Entry ..</text></g><g><title>plugins_core::looking::model::qualify_name (236 samples, 18.60%)</title><rect x="79.9842%" y="437" width="18.5973%" height="15" fill="rgb(239,44,28)" fg:x="1015" fg:w="236"/><text x="80.2342%" y="447.50">plugins_core::looking::model:..</text></g><g><title>indefinite::indefinite (236 samples, 18.60%)</title><rect x="79.9842%" y="421" width="18.5973%" height="15" fill="rgb(249,187,43)" fg:x="1015" fg:w="236"/><text x="80.2342%" y="431.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (236 samples, 18.60%)</title><rect x="79.9842%" y="405" width="18.5973%" height="15" fill="rgb(216,141,28)" fg:x="1015" fg:w="236"/><text x="80.2342%" y="415.50">indefinite::methods::indefini..</text></g><g><title>indefinite::methods::apply_rules (235 samples, 18.52%)</title><rect x="80.0630%" y="389" width="18.5185%" height="15" fill="rgb(230,154,53)" fg:x="1016" fg:w="235"/><text x="80.3130%" y="399.50">indefinite::methods::apply_ru..</text></g><g><title>indefinite::rules::other::Other::run (26 samples, 2.05%)</title><rect x="96.5327%" y="373" width="2.0489%" height="15" fill="rgb(227,82,4)" fg:x="1225" fg:w="26"/><text x="96.7827%" y="383.50">i..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (26 samples, 2.05%)</title><rect x="96.5327%" y="357" width="2.0489%" height="15" fill="rgb(220,107,16)" fg:x="1225" fg:w="26"/><text x="96.7827%" y="367.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="98.2664%" y="341" width="0.3152%" height="15" fill="rgb(207,187,2)" fg:x="1247" fg:w="4"/><text x="98.5164%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="98.2664%" y="325" width="0.3152%" height="15" fill="rgb(210,162,52)" fg:x="1247" fg:w="4"/><text x="98.5164%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="98.2664%" y="309" width="0.3152%" height="15" fill="rgb(217,216,49)" fg:x="1247" fg:w="4"/><text x="98.5164%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="98.2664%" y="293" width="0.3152%" height="15" fill="rgb(218,146,49)" fg:x="1247" fg:w="4"/><text x="98.5164%" y="303.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="98.5028%" y="277" width="0.0788%" height="15" fill="rgb(216,55,40)" fg:x="1250" fg:w="1"/><text x="98.7528%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.5028%" y="261" width="0.0788%" height="15" fill="rgb(208,196,21)" fg:x="1250" fg:w="1"/><text x="98.7528%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::moving::model::Occupyable&gt;&gt; (1 samples, 0.08%)</title><rect x="98.5816%" y="453" width="0.0788%" height="15" fill="rgb(242,117,42)" fg:x="1251" fg:w="1"/><text x="98.8316%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="98.5816%" y="437" width="0.0788%" height="15" fill="rgb(210,11,23)" fg:x="1251" fg:w="1"/><text x="98.8316%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.7392%" y="229" width="0.0788%" height="15" fill="rgb(217,110,2)" fg:x="1253" fg:w="1"/><text x="98.9892%" y="239.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="98.7392%" y="309" width="0.1576%" height="15" fill="rgb(229,77,54)" fg:x="1253" fg:w="2"/><text x="98.9892%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.7392%" y="293" width="0.1576%" height="15" fill="rgb(218,53,16)" fg:x="1253" fg:w="2"/><text x="98.9892%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.7392%" y="277" width="0.1576%" height="15" fill="rgb(215,38,13)" fg:x="1253" fg:w="2"/><text x="98.9892%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.7392%" y="261" width="0.1576%" height="15" fill="rgb(235,42,18)" fg:x="1253" fg:w="2"/><text x="98.9892%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.7392%" y="245" width="0.1576%" height="15" fill="rgb(219,66,54)" fg:x="1253" fg:w="2"/><text x="98.9892%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.8180%" y="229" width="0.0788%" height="15" fill="rgb(222,205,4)" fg:x="1254" fg:w="1"/><text x="99.0680%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.8180%" y="213" width="0.0788%" height="15" fill="rgb(227,213,46)" fg:x="1254" fg:w="1"/><text x="99.0680%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.8180%" y="197" width="0.0788%" height="15" fill="rgb(250,145,42)" fg:x="1254" fg:w="1"/><text x="99.0680%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.8180%" y="181" width="0.0788%" height="15" fill="rgb(219,15,2)" fg:x="1254" fg:w="1"/><text x="99.0680%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.8180%" y="165" width="0.0788%" height="15" fill="rgb(231,181,52)" fg:x="1254" fg:w="1"/><text x="99.0680%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8180%" y="149" width="0.0788%" height="15" fill="rgb(235,1,42)" fg:x="1254" fg:w="1"/><text x="99.0680%" y="159.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="98.7392%" y="325" width="0.2364%" height="15" fill="rgb(249,88,27)" fg:x="1253" fg:w="3"/><text x="98.9892%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.8968%" y="309" width="0.0788%" height="15" fill="rgb(235,145,16)" fg:x="1255" fg:w="1"/><text x="99.1468%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8968%" y="293" width="0.0788%" height="15" fill="rgb(237,114,19)" fg:x="1255" fg:w="1"/><text x="99.1468%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.8968%" y="277" width="0.0788%" height="15" fill="rgb(238,51,50)" fg:x="1255" fg:w="1"/><text x="99.1468%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8968%" y="261" width="0.0788%" height="15" fill="rgb(205,194,25)" fg:x="1255" fg:w="1"/><text x="99.1468%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.8968%" y="245" width="0.0788%" height="15" fill="rgb(215,203,17)" fg:x="1255" fg:w="1"/><text x="99.1468%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.8968%" y="229" width="0.0788%" height="15" fill="rgb(233,112,49)" fg:x="1255" fg:w="1"/><text x="99.1468%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.8968%" y="213" width="0.0788%" height="15" fill="rgb(241,130,26)" fg:x="1255" fg:w="1"/><text x="99.1468%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.8968%" y="197" width="0.0788%" height="15" fill="rgb(252,223,19)" fg:x="1255" fg:w="1"/><text x="99.1468%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.8968%" y="181" width="0.0788%" height="15" fill="rgb(211,95,25)" fg:x="1255" fg:w="1"/><text x="99.1468%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="98.8968%" y="165" width="0.0788%" height="15" fill="rgb(251,182,27)" fg:x="1255" fg:w="1"/><text x="99.1468%" y="175.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (4 samples, 0.32%)</title><rect x="98.7392%" y="421" width="0.3152%" height="15" fill="rgb(238,24,4)" fg:x="1253" fg:w="4"/><text x="98.9892%" y="431.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.32%)</title><rect x="98.7392%" y="405" width="0.3152%" height="15" fill="rgb(224,220,25)" fg:x="1253" fg:w="4"/><text x="98.9892%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="98.7392%" y="389" width="0.3152%" height="15" fill="rgb(239,133,26)" fg:x="1253" fg:w="4"/><text x="98.9892%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.32%)</title><rect x="98.7392%" y="373" width="0.3152%" height="15" fill="rgb(211,94,48)" fg:x="1253" fg:w="4"/><text x="98.9892%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="98.7392%" y="357" width="0.3152%" height="15" fill="rgb(239,87,6)" fg:x="1253" fg:w="4"/><text x="98.9892%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="98.7392%" y="341" width="0.3152%" height="15" fill="rgb(227,62,0)" fg:x="1253" fg:w="4"/><text x="98.9892%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="98.9756%" y="325" width="0.0788%" height="15" fill="rgb(211,226,4)" fg:x="1256" fg:w="1"/><text x="99.2256%" y="335.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="98.9756%" y="309" width="0.0788%" height="15" fill="rgb(253,38,52)" fg:x="1256" fg:w="1"/><text x="99.2256%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="98.9756%" y="293" width="0.0788%" height="15" fill="rgb(229,126,40)" fg:x="1256" fg:w="1"/><text x="99.2256%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9756%" y="277" width="0.0788%" height="15" fill="rgb(229,165,44)" fg:x="1256" fg:w="1"/><text x="99.2256%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9756%" y="261" width="0.0788%" height="15" fill="rgb(247,95,47)" fg:x="1256" fg:w="1"/><text x="99.2256%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.9756%" y="245" width="0.0788%" height="15" fill="rgb(216,140,30)" fg:x="1256" fg:w="1"/><text x="99.2256%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="99.0544%" y="389" width="0.0788%" height="15" fill="rgb(246,214,8)" fg:x="1257" fg:w="1"/><text x="99.3044%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="99.0544%" y="373" width="0.0788%" height="15" fill="rgb(227,224,15)" fg:x="1257" fg:w="1"/><text x="99.3044%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="99.0544%" y="357" width="0.0788%" height="15" fill="rgb(233,175,4)" fg:x="1257" fg:w="1"/><text x="99.3044%" y="367.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="99.0544%" y="341" width="0.0788%" height="15" fill="rgb(221,66,45)" fg:x="1257" fg:w="1"/><text x="99.3044%" y="351.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.0544%" y="325" width="0.0788%" height="15" fill="rgb(221,178,18)" fg:x="1257" fg:w="1"/><text x="99.3044%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.0544%" y="309" width="0.0788%" height="15" fill="rgb(213,81,29)" fg:x="1257" fg:w="1"/><text x="99.3044%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.0544%" y="293" width="0.0788%" height="15" fill="rgb(220,89,49)" fg:x="1257" fg:w="1"/><text x="99.3044%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.0544%" y="277" width="0.0788%" height="15" fill="rgb(227,60,33)" fg:x="1257" fg:w="1"/><text x="99.3044%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.0544%" y="261" width="0.0788%" height="15" fill="rgb(205,113,12)" fg:x="1257" fg:w="1"/><text x="99.3044%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.0544%" y="245" width="0.0788%" height="15" fill="rgb(211,32,1)" fg:x="1257" fg:w="1"/><text x="99.3044%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.0544%" y="229" width="0.0788%" height="15" fill="rgb(246,2,12)" fg:x="1257" fg:w="1"/><text x="99.3044%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.0544%" y="213" width="0.0788%" height="15" fill="rgb(243,37,27)" fg:x="1257" fg:w="1"/><text x="99.3044%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.0544%" y="197" width="0.0788%" height="15" fill="rgb(248,211,31)" fg:x="1257" fg:w="1"/><text x="99.3044%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.0544%" y="181" width="0.0788%" height="15" fill="rgb(242,146,47)" fg:x="1257" fg:w="1"/><text x="99.3044%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.0544%" y="165" width="0.0788%" height="15" fill="rgb(206,70,20)" fg:x="1257" fg:w="1"/><text x="99.3044%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.0544%" y="149" width="0.0788%" height="15" fill="rgb(215,10,51)" fg:x="1257" fg:w="1"/><text x="99.3044%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.0544%" y="133" width="0.0788%" height="15" fill="rgb(243,178,53)" fg:x="1257" fg:w="1"/><text x="99.3044%" y="143.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="99.0544%" y="421" width="0.1576%" height="15" fill="rgb(233,221,20)" fg:x="1257" fg:w="2"/><text x="99.3044%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.0544%" y="405" width="0.1576%" height="15" fill="rgb(218,95,35)" fg:x="1257" fg:w="2"/><text x="99.3044%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1332%" y="389" width="0.0788%" height="15" fill="rgb(229,13,5)" fg:x="1258" fg:w="1"/><text x="99.3832%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.2120%" y="389" width="0.0788%" height="15" fill="rgb(252,164,30)" fg:x="1259" fg:w="1"/><text x="99.4620%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2120%" y="373" width="0.0788%" height="15" fill="rgb(232,68,36)" fg:x="1259" fg:w="1"/><text x="99.4620%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="99.2120%" y="357" width="0.0788%" height="15" fill="rgb(219,59,54)" fg:x="1259" fg:w="1"/><text x="99.4620%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (263 samples, 20.72%)</title><rect x="78.6446%" y="661" width="20.7250%" height="15" fill="rgb(250,92,33)" fg:x="998" fg:w="263"/><text x="78.8946%" y="671.50">&lt;engine::session::Session as kern..</text></g><g><title>kernel::plugins::mw::apply_middleware (262 samples, 20.65%)</title><rect x="78.7234%" y="645" width="20.6462%" height="15" fill="rgb(229,162,54)" fg:x="999" fg:w="262"/><text x="78.9734%" y="655.50">kernel::plugins::mw::apply_middl..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (262 samples, 20.65%)</title><rect x="78.7234%" y="629" width="20.6462%" height="15" fill="rgb(244,114,52)" fg:x="999" fg:w="262"/><text x="78.9734%" y="639.50">kernel::plugins::mw::MiddlewareN..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (262 samples, 20.65%)</title><rect x="78.7234%" y="613" width="20.6462%" height="15" fill="rgb(212,211,43)" fg:x="999" fg:w="262"/><text x="78.9734%" y="623.50">&lt;engine::session::ExpandSurround..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (255 samples, 20.09%)</title><rect x="79.2750%" y="597" width="20.0946%" height="15" fill="rgb(226,147,8)" fg:x="1006" fg:w="255"/><text x="79.5250%" y="607.50">kernel::plugins::mw::MiddlewareN..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (255 samples, 20.09%)</title><rect x="79.2750%" y="581" width="20.0946%" height="15" fill="rgb(226,23,13)" fg:x="1006" fg:w="255"/><text x="79.5250%" y="591.50">&lt;plugins_dynlib::DynamicMiddlewa..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (255 samples, 20.09%)</title><rect x="79.2750%" y="565" width="20.0946%" height="15" fill="rgb(240,63,4)" fg:x="1006" fg:w="255"/><text x="79.5250%" y="575.50">kernel::plugins::mw::MiddlewareN..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (255 samples, 20.09%)</title><rect x="79.2750%" y="549" width="20.0946%" height="15" fill="rgb(221,1,32)" fg:x="1006" fg:w="255"/><text x="79.5250%" y="559.50">core::ops::function::FnOnce::cal..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (255 samples, 20.09%)</title><rect x="79.2750%" y="533" width="20.0946%" height="15" fill="rgb(242,117,10)" fg:x="1006" fg:w="255"/><text x="79.5250%" y="543.50">kernel::plugins::mw::MiddlewareN..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (255 samples, 20.09%)</title><rect x="79.2750%" y="517" width="20.0946%" height="15" fill="rgb(249,172,44)" fg:x="1006" fg:w="255"/><text x="79.5250%" y="527.50">core::ops::function::FnOnce::cal..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (255 samples, 20.09%)</title><rect x="79.2750%" y="501" width="20.0946%" height="15" fill="rgb(244,46,45)" fg:x="1006" fg:w="255"/><text x="79.5250%" y="511.50">&lt;engine::session::state::State a..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (255 samples, 20.09%)</title><rect x="79.2750%" y="485" width="20.0946%" height="15" fill="rgb(206,43,17)" fg:x="1006" fg:w="255"/><text x="79.5250%" y="495.50">&lt;plugins_core::looking::actions:..</text></g><g><title>plugins_core::looking::model::new_area_observation (254 samples, 20.02%)</title><rect x="79.3538%" y="469" width="20.0158%" height="15" fill="rgb(239,218,39)" fg:x="1007" fg:w="254"/><text x="79.6038%" y="479.50">plugins_core::looking::model::n..</text></g><g><title>kernel::model::entry::Entry::scope (9 samples, 0.71%)</title><rect x="98.6604%" y="453" width="0.7092%" height="15" fill="rgb(208,169,54)" fg:x="1252" fg:w="9"/><text x="98.9104%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (8 samples, 0.63%)</title><rect x="98.7392%" y="437" width="0.6304%" height="15" fill="rgb(247,25,42)" fg:x="1253" fg:w="8"/><text x="98.9892%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.2120%" y="421" width="0.1576%" height="15" fill="rgb(226,23,31)" fg:x="1259" fg:w="2"/><text x="99.4620%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.2120%" y="405" width="0.1576%" height="15" fill="rgb(247,16,28)" fg:x="1259" fg:w="2"/><text x="99.4620%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.2908%" y="389" width="0.0788%" height="15" fill="rgb(231,147,38)" fg:x="1260" fg:w="1"/><text x="99.5408%" y="399.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.2908%" y="373" width="0.0788%" height="15" fill="rgb(253,81,48)" fg:x="1260" fg:w="1"/><text x="99.5408%" y="383.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="99.2908%" y="357" width="0.0788%" height="15" fill="rgb(249,222,43)" fg:x="1260" fg:w="1"/><text x="99.5408%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.2908%" y="341" width="0.0788%" height="15" fill="rgb(221,3,27)" fg:x="1260" fg:w="1"/><text x="99.5408%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2908%" y="325" width="0.0788%" height="15" fill="rgb(228,180,5)" fg:x="1260" fg:w="1"/><text x="99.5408%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.3696%" y="565" width="0.0788%" height="15" fill="rgb(227,131,42)" fg:x="1261" fg:w="1"/><text x="99.6196%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.3696%" y="549" width="0.0788%" height="15" fill="rgb(212,3,39)" fg:x="1261" fg:w="1"/><text x="99.6196%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="99.3696%" y="661" width="0.1576%" height="15" fill="rgb(226,45,5)" fg:x="1261" fg:w="2"/><text x="99.6196%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.3696%" y="645" width="0.1576%" height="15" fill="rgb(215,167,45)" fg:x="1261" fg:w="2"/><text x="99.6196%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (2 samples, 0.16%)</title><rect x="99.3696%" y="629" width="0.1576%" height="15" fill="rgb(250,218,53)" fg:x="1261" fg:w="2"/><text x="99.6196%" y="639.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.3696%" y="613" width="0.1576%" height="15" fill="rgb(207,140,0)" fg:x="1261" fg:w="2"/><text x="99.6196%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.3696%" y="597" width="0.1576%" height="15" fill="rgb(238,133,51)" fg:x="1261" fg:w="2"/><text x="99.6196%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.3696%" y="581" width="0.1576%" height="15" fill="rgb(218,203,53)" fg:x="1261" fg:w="2"/><text x="99.6196%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.4484%" y="565" width="0.0788%" height="15" fill="rgb(226,184,25)" fg:x="1262" fg:w="1"/><text x="99.6984%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4484%" y="549" width="0.0788%" height="15" fill="rgb(231,121,21)" fg:x="1262" fg:w="1"/><text x="99.6984%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.4484%" y="533" width="0.0788%" height="15" fill="rgb(251,14,34)" fg:x="1262" fg:w="1"/><text x="99.6984%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4484%" y="517" width="0.0788%" height="15" fill="rgb(249,193,11)" fg:x="1262" fg:w="1"/><text x="99.6984%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.4484%" y="501" width="0.0788%" height="15" fill="rgb(220,172,37)" fg:x="1262" fg:w="1"/><text x="99.6984%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.4484%" y="485" width="0.0788%" height="15" fill="rgb(231,229,43)" fg:x="1262" fg:w="1"/><text x="99.6984%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4484%" y="469" width="0.0788%" height="15" fill="rgb(250,161,5)" fg:x="1262" fg:w="1"/><text x="99.6984%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.4484%" y="453" width="0.0788%" height="15" fill="rgb(218,225,18)" fg:x="1262" fg:w="1"/><text x="99.6984%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4484%" y="437" width="0.0788%" height="15" fill="rgb(245,45,42)" fg:x="1262" fg:w="1"/><text x="99.6984%" y="447.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.5272%" y="597" width="0.0788%" height="15" fill="rgb(211,115,1)" fg:x="1263" fg:w="1"/><text x="99.7772%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5272%" y="581" width="0.0788%" height="15" fill="rgb(248,133,52)" fg:x="1263" fg:w="1"/><text x="99.7772%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5272%" y="565" width="0.0788%" height="15" fill="rgb(238,100,21)" fg:x="1263" fg:w="1"/><text x="99.7772%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5272%" y="549" width="0.0788%" height="15" fill="rgb(247,144,11)" fg:x="1263" fg:w="1"/><text x="99.7772%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5272%" y="533" width="0.0788%" height="15" fill="rgb(206,164,16)" fg:x="1263" fg:w="1"/><text x="99.7772%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5272%" y="517" width="0.0788%" height="15" fill="rgb(222,34,3)" fg:x="1263" fg:w="1"/><text x="99.7772%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5272%" y="501" width="0.0788%" height="15" fill="rgb(248,82,4)" fg:x="1263" fg:w="1"/><text x="99.7772%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5272%" y="485" width="0.0788%" height="15" fill="rgb(228,81,46)" fg:x="1263" fg:w="1"/><text x="99.7772%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5272%" y="469" width="0.0788%" height="15" fill="rgb(227,67,47)" fg:x="1263" fg:w="1"/><text x="99.7772%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5272%" y="453" width="0.0788%" height="15" fill="rgb(215,93,53)" fg:x="1263" fg:w="1"/><text x="99.7772%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.5272%" y="437" width="0.0788%" height="15" fill="rgb(248,194,39)" fg:x="1263" fg:w="1"/><text x="99.7772%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6060%" y="517" width="0.0788%" height="15" fill="rgb(215,5,19)" fg:x="1264" fg:w="1"/><text x="99.8560%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6060%" y="501" width="0.0788%" height="15" fill="rgb(226,215,51)" fg:x="1264" fg:w="1"/><text x="99.8560%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6060%" y="485" width="0.0788%" height="15" fill="rgb(225,56,26)" fg:x="1264" fg:w="1"/><text x="99.8560%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6060%" y="469" width="0.0788%" height="15" fill="rgb(222,75,29)" fg:x="1264" fg:w="1"/><text x="99.8560%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="99.5272%" y="613" width="0.2364%" height="15" fill="rgb(236,139,6)" fg:x="1263" fg:w="3"/><text x="99.7772%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.6060%" y="597" width="0.1576%" height="15" fill="rgb(223,137,36)" fg:x="1264" fg:w="2"/><text x="99.8560%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6060%" y="581" width="0.1576%" height="15" fill="rgb(226,99,2)" fg:x="1264" fg:w="2"/><text x="99.8560%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.6060%" y="565" width="0.1576%" height="15" fill="rgb(206,133,23)" fg:x="1264" fg:w="2"/><text x="99.8560%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6060%" y="549" width="0.1576%" height="15" fill="rgb(243,173,15)" fg:x="1264" fg:w="2"/><text x="99.8560%" y="559.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.6060%" y="533" width="0.1576%" height="15" fill="rgb(228,69,28)" fg:x="1264" fg:w="2"/><text x="99.8560%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6848%" y="517" width="0.0788%" height="15" fill="rgb(212,51,22)" fg:x="1265" fg:w="1"/><text x="99.9348%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6848%" y="501" width="0.0788%" height="15" fill="rgb(227,113,0)" fg:x="1265" fg:w="1"/><text x="99.9348%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.6848%" y="485" width="0.0788%" height="15" fill="rgb(252,84,27)" fg:x="1265" fg:w="1"/><text x="99.9348%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6848%" y="469" width="0.0788%" height="15" fill="rgb(223,145,39)" fg:x="1265" fg:w="1"/><text x="99.9348%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6848%" y="453" width="0.0788%" height="15" fill="rgb(239,219,30)" fg:x="1265" fg:w="1"/><text x="99.9348%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.6848%" y="437" width="0.0788%" height="15" fill="rgb(224,196,39)" fg:x="1265" fg:w="1"/><text x="99.9348%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6848%" y="421" width="0.0788%" height="15" fill="rgb(205,35,43)" fg:x="1265" fg:w="1"/><text x="99.9348%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6848%" y="405" width="0.0788%" height="15" fill="rgb(228,201,21)" fg:x="1265" fg:w="1"/><text x="99.9348%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.6848%" y="389" width="0.0788%" height="15" fill="rgb(237,118,16)" fg:x="1265" fg:w="1"/><text x="99.9348%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6848%" y="373" width="0.0788%" height="15" fill="rgb(241,17,19)" fg:x="1265" fg:w="1"/><text x="99.9348%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6848%" y="357" width="0.0788%" height="15" fill="rgb(214,10,25)" fg:x="1265" fg:w="1"/><text x="99.9348%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.7636%" y="565" width="0.0788%" height="15" fill="rgb(238,37,29)" fg:x="1266" fg:w="1"/><text x="100.0136%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.7636%" y="549" width="0.0788%" height="15" fill="rgb(253,83,25)" fg:x="1266" fg:w="1"/><text x="100.0136%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.7636%" y="533" width="0.0788%" height="15" fill="rgb(234,192,12)" fg:x="1266" fg:w="1"/><text x="100.0136%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.7636%" y="517" width="0.0788%" height="15" fill="rgb(241,216,45)" fg:x="1266" fg:w="1"/><text x="100.0136%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.7636%" y="501" width="0.0788%" height="15" fill="rgb(242,22,33)" fg:x="1266" fg:w="1"/><text x="100.0136%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.7636%" y="485" width="0.0788%" height="15" fill="rgb(231,105,49)" fg:x="1266" fg:w="1"/><text x="100.0136%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.7636%" y="469" width="0.0788%" height="15" fill="rgb(218,204,15)" fg:x="1266" fg:w="1"/><text x="100.0136%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="99.7636%" y="453" width="0.0788%" height="15" fill="rgb(235,138,41)" fg:x="1266" fg:w="1"/><text x="100.0136%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.7636%" y="437" width="0.0788%" height="15" fill="rgb(246,0,9)" fg:x="1266" fg:w="1"/><text x="100.0136%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (5 samples, 0.39%)</title><rect x="99.5272%" y="661" width="0.3940%" height="15" fill="rgb(210,74,4)" fg:x="1263" fg:w="5"/><text x="99.7772%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.39%)</title><rect x="99.5272%" y="645" width="0.3940%" height="15" fill="rgb(250,60,41)" fg:x="1263" fg:w="5"/><text x="99.7772%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.39%)</title><rect x="99.5272%" y="629" width="0.3940%" height="15" fill="rgb(220,115,12)" fg:x="1263" fg:w="5"/><text x="99.7772%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="99.7636%" y="613" width="0.1576%" height="15" fill="rgb(237,100,13)" fg:x="1266" fg:w="2"/><text x="100.0136%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="99.7636%" y="597" width="0.1576%" height="15" fill="rgb(213,55,26)" fg:x="1266" fg:w="2"/><text x="100.0136%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="99.7636%" y="581" width="0.1576%" height="15" fill="rgb(216,17,4)" fg:x="1266" fg:w="2"/><text x="100.0136%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8424%" y="565" width="0.0788%" height="15" fill="rgb(220,153,47)" fg:x="1267" fg:w="1"/><text x="100.0924%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8424%" y="549" width="0.0788%" height="15" fill="rgb(215,131,9)" fg:x="1267" fg:w="1"/><text x="100.0924%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8424%" y="533" width="0.0788%" height="15" fill="rgb(233,46,42)" fg:x="1267" fg:w="1"/><text x="100.0924%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8424%" y="517" width="0.0788%" height="15" fill="rgb(226,86,7)" fg:x="1267" fg:w="1"/><text x="100.0924%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.8424%" y="501" width="0.0788%" height="15" fill="rgb(239,226,21)" fg:x="1267" fg:w="1"/><text x="100.0924%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8424%" y="485" width="0.0788%" height="15" fill="rgb(244,137,22)" fg:x="1267" fg:w="1"/><text x="100.0924%" y="495.50"></text></g><g><title>all (1,269 samples, 100%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(211,139,35)" fg:x="0" fg:w="1269"/><text x="0.2500%" y="1039.50"></text></g><g><title>simple-484c7248 (1,269 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(214,62,50)" fg:x="0" fg:w="1269"/><text x="0.2500%" y="1023.50">simple-484c7248</text></g><g><title>_start (1,269 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(212,113,44)" fg:x="0" fg:w="1269"/><text x="0.2500%" y="1007.50">_start</text></g><g><title>__libc_start_main (1,269 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(226,150,43)" fg:x="0" fg:w="1269"/><text x="0.2500%" y="991.50">__libc_start_main</text></g><g><title>main (1,269 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(250,71,37)" fg:x="0" fg:w="1269"/><text x="0.2500%" y="975.50">main</text></g><g><title>std::rt::lang_start_internal (1,269 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(219,76,19)" fg:x="0" fg:w="1269"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,269 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(250,39,11)" fg:x="0" fg:w="1269"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,269 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(230,64,31)" fg:x="0" fg:w="1269"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,269 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(208,222,23)" fg:x="0" fg:w="1269"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,269 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(227,125,18)" fg:x="0" fg:w="1269"/><text x="0.2500%" y="895.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,269 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(234,210,9)" fg:x="0" fg:w="1269"/><text x="0.2500%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,269 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(217,127,24)" fg:x="0" fg:w="1269"/><text x="0.2500%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,269 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(239,141,48)" fg:x="0" fg:w="1269"/><text x="0.2500%" y="847.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,269 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(227,109,8)" fg:x="0" fg:w="1269"/><text x="0.2500%" y="831.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,269 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(235,184,23)" fg:x="0" fg:w="1269"/><text x="0.2500%" y="815.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,269 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(227,226,48)" fg:x="0" fg:w="1269"/><text x="0.2500%" y="799.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,269 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(206,150,11)" fg:x="0" fg:w="1269"/><text x="0.2500%" y="783.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,269 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(254,2,33)" fg:x="0" fg:w="1269"/><text x="0.2500%" y="767.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,269 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(243,160,20)" fg:x="0" fg:w="1269"/><text x="0.2500%" y="751.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (343 samples, 27.03%)</title><rect x="72.9708%" y="725" width="27.0292%" height="15" fill="rgb(218,208,30)" fg:x="926" fg:w="343"/><text x="73.2208%" y="735.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as cri..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (343 samples, 27.03%)</title><rect x="72.9708%" y="709" width="27.0292%" height="15" fill="rgb(224,120,49)" fg:x="926" fg:w="343"/><text x="73.2208%" y="719.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (343 samples, 27.03%)</title><rect x="72.9708%" y="693" width="27.0292%" height="15" fill="rgb(246,12,2)" fg:x="926" fg:w="343"/><text x="73.2208%" y="703.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (271 samples, 21.36%)</title><rect x="78.6446%" y="677" width="21.3554%" height="15" fill="rgb(236,117,3)" fg:x="998" fg:w="271"/><text x="78.8946%" y="687.50">engine::session::Session::evaluate..</text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.9212%" y="661" width="0.0788%" height="15" fill="rgb(216,128,52)" fg:x="1268" fg:w="1"/><text x="100.1712%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="99.9212%" y="645" width="0.0788%" height="15" fill="rgb(246,145,19)" fg:x="1268" fg:w="1"/><text x="100.1712%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.9212%" y="629" width="0.0788%" height="15" fill="rgb(222,11,46)" fg:x="1268" fg:w="1"/><text x="100.1712%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.9212%" y="613" width="0.0788%" height="15" fill="rgb(245,82,36)" fg:x="1268" fg:w="1"/><text x="100.1712%" y="623.50"></text></g></svg></svg>